
AL-FlightController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00003588  0000361c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003588  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020d  0080012a  0080012a  00003646  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003646  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003678  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  000036b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005f02  00000000  00000000  000039c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016ce  00000000  00000000  000098c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000024f5  00000000  00000000  0000af90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000082c  00000000  00000000  0000d488  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002975  00000000  00000000  0000dcb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002453  00000000  00000000  00010629  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  00012a7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 90 00 	jmp	0x120	; 0x120 <__ctors_end>
       4:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
       8:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
       c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__vector_3>
      10:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      14:	0c 94 30 01 	jmp	0x260	; 0x260 <__vector_5>
      18:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      1c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      20:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      24:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      28:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      2c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      30:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      34:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      38:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      3c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      40:	0c 94 2d 16 	jmp	0x2c5a	; 0x2c5a <__vector_16>
      44:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      48:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      4c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      50:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      54:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      58:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      5c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      60:	0c 94 ed 18 	jmp	0x31da	; 0x31da <__vector_24>
      64:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      68:	03 6e       	ori	r16, 0xE3	; 227
      6a:	db 36       	cpi	r29, 0x6B	; 107
      6c:	3d 9a       	sbi	0x07, 5	; 7
      6e:	99 99       	sbic	0x13, 1	; 19
      70:	99 3d       	cpi	r25, 0xD9	; 217
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	3e 00       	.word	0x003e	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	07 2c       	mov	r0, r7
      7e:	7a a5       	ldd	r23, Y+42	; 0x2a
      80:	ba 6c       	ori	r27, 0xCA	; 202
      82:	c5 90       	lpm	r12, Z+
      84:	da 3b       	cpi	r29, 0xBA	; 186
      86:	93 65       	ori	r25, 0x53	; 83
      88:	fc 8b       	std	Y+20, r31	; 0x14
      8a:	bc 53       	subi	r27, 0x3C	; 60
      8c:	f8 10       	cpse	r15, r8
      8e:	fd 3c       	cpi	r31, 0xCD	; 205
      90:	56 92       	lac	Z, r5
      92:	83 4d       	sbci	r24, 0xD3	; 211
      94:	bd 87       	std	Y+13, r27	; 0x0d
      96:	9d 3a       	cpi	r25, 0xAD	; 173
      98:	b6 3d       	cpi	r27, 0xD6	; 214
      9a:	cb c9       	rjmp	.-3178   	; 0xfffff432 <__eeprom_end+0xff7ef432>
      9c:	bf 5b       	subi	r27, 0xBF	; 191
      9e:	be 73       	andi	r27, 0x3E	; 62
      a0:	da 0f       	add	r29, r26
      a2:	c9 3f       	cpi	r28, 0xF9	; 249
      a4:	05 a8       	ldd	r0, Z+53	; 0x35
      a6:	4c cd       	rjmp	.-1384   	; 0xfffffb40 <__eeprom_end+0xff7efb40>
      a8:	b2 d4       	rcall	.+2404   	; 0xa0e <__stack+0x10f>
      aa:	4e b9       	out	0x0e, r20	; 14
      ac:	38 36       	cpi	r19, 0x68	; 104
      ae:	a9 02       	muls	r26, r25
      b0:	0c 50       	subi	r16, 0x0C	; 12
      b2:	b9 91       	ld	r27, Y+
      b4:	86 88       	ldd	r8, Z+22	; 0x16
      b6:	08 3c       	cpi	r16, 0xC8	; 200
      b8:	a6 aa       	std	Z+54, r10	; 0x36
      ba:	aa 2a       	or	r10, r26
      bc:	be 00       	.word	0x00be	; ????
      be:	00 00       	nop
      c0:	80 3f       	cpi	r24, 0xF0	; 240

000000c2 <__trampolines_end>:
      c2:	00 00       	nop
      c4:	00 08       	sbc	r0, r0
      c6:	00 02       	muls	r16, r16
      c8:	01 00       	.word	0x0001	; ????
      ca:	00 03       	mulsu	r16, r16
      cc:	04 07       	cpc	r16, r20
	...

000000d6 <digital_pin_to_bit_mask_PGM>:
      d6:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      e6:	04 08 10 20                                         ... 

000000ea <digital_pin_to_port_PGM>:
      ea:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      fa:	03 03 03 03                                         ....

000000fe <port_to_input_PGM>:
      fe:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000108 <port_to_output_PGM>:
     108:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000112 <port_to_mode_PGM>:
     112:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000011c <__ctors_start>:
     11c:	3d 05       	cpc	r19, r13
     11e:	28 16       	cp	r2, r24

00000120 <__ctors_end>:
     120:	11 24       	eor	r1, r1
     122:	1f be       	out	0x3f, r1	; 63
     124:	cf ef       	ldi	r28, 0xFF	; 255
     126:	d8 e0       	ldi	r29, 0x08	; 8
     128:	de bf       	out	0x3e, r29	; 62
     12a:	cd bf       	out	0x3d, r28	; 61

0000012c <__do_copy_data>:
     12c:	11 e0       	ldi	r17, 0x01	; 1
     12e:	a0 e0       	ldi	r26, 0x00	; 0
     130:	b1 e0       	ldi	r27, 0x01	; 1
     132:	e8 e8       	ldi	r30, 0x88	; 136
     134:	f5 e3       	ldi	r31, 0x35	; 53
     136:	02 c0       	rjmp	.+4      	; 0x13c <__do_copy_data+0x10>
     138:	05 90       	lpm	r0, Z+
     13a:	0d 92       	st	X+, r0
     13c:	aa 32       	cpi	r26, 0x2A	; 42
     13e:	b1 07       	cpc	r27, r17
     140:	d9 f7       	brne	.-10     	; 0x138 <__do_copy_data+0xc>

00000142 <__do_clear_bss>:
     142:	23 e0       	ldi	r18, 0x03	; 3
     144:	aa e2       	ldi	r26, 0x2A	; 42
     146:	b1 e0       	ldi	r27, 0x01	; 1
     148:	01 c0       	rjmp	.+2      	; 0x14c <.do_clear_bss_start>

0000014a <.do_clear_bss_loop>:
     14a:	1d 92       	st	X+, r1

0000014c <.do_clear_bss_start>:
     14c:	a7 33       	cpi	r26, 0x37	; 55
     14e:	b2 07       	cpc	r27, r18
     150:	e1 f7       	brne	.-8      	; 0x14a <.do_clear_bss_loop>

00000152 <__do_global_ctors>:
     152:	10 e0       	ldi	r17, 0x00	; 0
     154:	c0 e9       	ldi	r28, 0x90	; 144
     156:	d0 e0       	ldi	r29, 0x00	; 0
     158:	04 c0       	rjmp	.+8      	; 0x162 <__do_global_ctors+0x10>
     15a:	21 97       	sbiw	r28, 0x01	; 1
     15c:	fe 01       	movw	r30, r28
     15e:	0e 94 a5 1a 	call	0x354a	; 0x354a <__tablejump2__>
     162:	ce 38       	cpi	r28, 0x8E	; 142
     164:	d1 07       	cpc	r29, r17
     166:	c9 f7       	brne	.-14     	; 0x15a <__do_global_ctors+0x8>
     168:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <main>
     16c:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <_exit>

00000170 <__bad_interrupt>:
     170:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000174 <_Z24convert_receiver_channelh.part.1>:
	byte channel, reverse;                                                       //First we declare some local variables
	int low, center, high, actual;
	int difference;

	if (function > 4) {
		return (receiver_input[function] -3000) * -1;
     174:	1f 93       	push	r17
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	e8 2f       	mov	r30, r24
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	ef 5c       	subi	r30, 0xCF	; 207
     180:	fd 4f       	sbci	r31, 0xFD	; 253
     182:	17 89       	ldd	r17, Z+23	; 0x17
     184:	e1 2f       	mov	r30, r17
     186:	e7 70       	andi	r30, 0x07	; 7
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	ee 0f       	add	r30, r30
     18c:	ff 1f       	adc	r31, r31
     18e:	df 01       	movw	r26, r30
     190:	af 5f       	subi	r26, 0xFF	; 255
     192:	bd 4f       	sbci	r27, 0xFD	; 253
     194:	0d 90       	ld	r0, X+
     196:	bc 91       	ld	r27, X
     198:	a0 2d       	mov	r26, r0
     19a:	ef 5c       	subi	r30, 0xCF	; 207
     19c:	fd 4f       	sbci	r31, 0xFD	; 253
     19e:	37 85       	ldd	r19, Z+15	; 0x0f
     1a0:	86 85       	ldd	r24, Z+14	; 0x0e
     1a2:	af 01       	movw	r20, r30
     1a4:	41 50       	subi	r20, 0x01	; 1
     1a6:	51 09       	sbc	r21, r1
     1a8:	ea 01       	movw	r28, r20
     1aa:	48 81       	ld	r20, Y
     1ac:	50 e0       	ldi	r21, 0x00	; 0
     1ae:	54 2f       	mov	r21, r20
     1b0:	44 27       	eor	r20, r20
     1b2:	bf 01       	movw	r22, r30
     1b4:	62 50       	subi	r22, 0x02	; 2
     1b6:	71 09       	sbc	r23, r1
     1b8:	eb 01       	movw	r28, r22
     1ba:	98 81       	ld	r25, Y
     1bc:	49 2b       	or	r20, r25
     1be:	97 81       	ldd	r25, Z+7	; 0x07
     1c0:	26 81       	ldd	r18, Z+6	; 0x06
     1c2:	a4 17       	cp	r26, r20
     1c4:	b5 07       	cpc	r27, r21
     1c6:	dc f4       	brge	.+54     	; 0x1fe <_Z24convert_receiver_channelh.part.1+0x8a>
     1c8:	e8 2f       	mov	r30, r24
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	f3 2b       	or	r31, r19
     1ce:	ae 17       	cp	r26, r30
     1d0:	bf 07       	cpc	r27, r31
     1d2:	0c f4       	brge	.+2      	; 0x1d6 <_Z24convert_receiver_channelh.part.1+0x62>
     1d4:	df 01       	movw	r26, r30
     1d6:	ca 01       	movw	r24, r20
     1d8:	8a 1b       	sub	r24, r26
     1da:	9b 0b       	sbc	r25, r27
     1dc:	dc 01       	movw	r26, r24
     1de:	24 ef       	ldi	r18, 0xF4	; 244
     1e0:	31 e0       	ldi	r19, 0x01	; 1
     1e2:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__usmulhisi3>
     1e6:	9a 01       	movw	r18, r20
     1e8:	2e 1b       	sub	r18, r30
     1ea:	3f 0b       	sbc	r19, r31
     1ec:	03 2e       	mov	r0, r19
     1ee:	00 0c       	add	r0, r0
     1f0:	44 0b       	sbc	r20, r20
     1f2:	55 0b       	sbc	r21, r21
     1f4:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <__divmodsi4>
     1f8:	17 ff       	sbrs	r17, 7
     1fa:	1c c0       	rjmp	.+56     	; 0x234 <_Z24convert_receiver_channelh.part.1+0xc0>
     1fc:	20 c0       	rjmp	.+64     	; 0x23e <_Z24convert_receiver_channelh.part.1+0xca>
     1fe:	4a 17       	cp	r20, r26
     200:	5b 07       	cpc	r21, r27
     202:	0c f5       	brge	.+66     	; 0x246 <_Z24convert_receiver_channelh.part.1+0xd2>
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	f9 01       	movw	r30, r18
     208:	f9 2b       	or	r31, r25
     20a:	ea 17       	cp	r30, r26
     20c:	fb 07       	cpc	r31, r27
     20e:	0c f4       	brge	.+2      	; 0x212 <_Z24convert_receiver_channelh.part.1+0x9e>
     210:	df 01       	movw	r26, r30
     212:	a4 1b       	sub	r26, r20
     214:	b5 0b       	sbc	r27, r21
     216:	24 ef       	ldi	r18, 0xF4	; 244
     218:	31 e0       	ldi	r19, 0x01	; 1
     21a:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__usmulhisi3>
     21e:	9f 01       	movw	r18, r30
     220:	24 1b       	sub	r18, r20
     222:	35 0b       	sbc	r19, r21
     224:	03 2e       	mov	r0, r19
     226:	00 0c       	add	r0, r0
     228:	44 0b       	sbc	r20, r20
     22a:	55 0b       	sbc	r21, r21
     22c:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <__divmodsi4>
     230:	17 ff       	sbrs	r17, 7
     232:	05 c0       	rjmp	.+10     	; 0x23e <_Z24convert_receiver_channelh.part.1+0xca>
     234:	8c ed       	ldi	r24, 0xDC	; 220
     236:	95 e0       	ldi	r25, 0x05	; 5
     238:	82 1b       	sub	r24, r18
     23a:	93 0b       	sbc	r25, r19
     23c:	06 c0       	rjmp	.+12     	; 0x24a <_Z24convert_receiver_channelh.part.1+0xd6>
     23e:	c9 01       	movw	r24, r18
     240:	84 52       	subi	r24, 0x24	; 36
     242:	9a 4f       	sbci	r25, 0xFA	; 250
     244:	02 c0       	rjmp	.+4      	; 0x24a <_Z24convert_receiver_channelh.part.1+0xd6>
     246:	8c ed       	ldi	r24, 0xDC	; 220
     248:	95 e0       	ldi	r25, 0x05	; 5
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	1f 91       	pop	r17
     250:	08 95       	ret

00000252 <_ZN7TwoWire5writeEi>:
     252:	dc 01       	movw	r26, r24
     254:	ed 91       	ld	r30, X+
     256:	fc 91       	ld	r31, X
     258:	01 90       	ld	r0, Z+
     25a:	f0 81       	ld	r31, Z
     25c:	e0 2d       	mov	r30, r0
     25e:	09 94       	ijmp

00000260 <__vector_5>:
     260:	1f 92       	push	r1
     262:	0f 92       	push	r0
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	0f 92       	push	r0
     268:	11 24       	eor	r1, r1
     26a:	2f 93       	push	r18
     26c:	3f 93       	push	r19
     26e:	4f 93       	push	r20
     270:	5f 93       	push	r21
     272:	6f 93       	push	r22
     274:	7f 93       	push	r23
     276:	8f 93       	push	r24
     278:	9f 93       	push	r25
     27a:	af 93       	push	r26
     27c:	bf 93       	push	r27
     27e:	ef 93       	push	r30
     280:	ff 93       	push	r31
     282:	0e 94 77 16 	call	0x2cee	; 0x2cee <micros>
     286:	60 93 9f 01 	sts	0x019F, r22	; 0x80019f <current_timeV2>
     28a:	70 93 a0 01 	sts	0x01A0, r23	; 0x8001a0 <current_timeV2+0x1>
     28e:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <current_timeV2+0x2>
     292:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <current_timeV2+0x3>
     296:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <last_channel_6>
     29a:	4a 9b       	sbis	0x09, 2	; 9
     29c:	0e c0       	rjmp	.+28     	; 0x2ba <__vector_5+0x5a>
     29e:	21 11       	cpse	r18, r1
     2a0:	1b c0       	rjmp	.+54     	; 0x2d8 <__vector_5+0x78>
     2a2:	21 e0       	ldi	r18, 0x01	; 1
     2a4:	20 93 56 02 	sts	0x0256, r18	; 0x800256 <last_channel_6>
     2a8:	60 93 ab 01 	sts	0x01AB, r22	; 0x8001ab <timer_6>
     2ac:	70 93 ac 01 	sts	0x01AC, r23	; 0x8001ac <timer_6+0x1>
     2b0:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <timer_6+0x2>
     2b4:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <timer_6+0x3>
     2b8:	0f c0       	rjmp	.+30     	; 0x2d8 <__vector_5+0x78>
     2ba:	21 30       	cpi	r18, 0x01	; 1
     2bc:	69 f4       	brne	.+26     	; 0x2d8 <__vector_5+0x78>
     2be:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <last_channel_6>
     2c2:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <timer_6>
     2c6:	30 91 ac 01 	lds	r19, 0x01AC	; 0x8001ac <timer_6+0x1>
     2ca:	ab 01       	movw	r20, r22
     2cc:	42 1b       	sub	r20, r18
     2ce:	53 0b       	sbc	r21, r19
     2d0:	50 93 0e 02 	sts	0x020E, r21	; 0x80020e <receiver_input+0xd>
     2d4:	40 93 0d 02 	sts	0x020D, r20	; 0x80020d <receiver_input+0xc>
     2d8:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <last_channel_7>
     2dc:	4b 9b       	sbis	0x09, 3	; 9
     2de:	0e c0       	rjmp	.+28     	; 0x2fc <__vector_5+0x9c>
     2e0:	21 11       	cpse	r18, r1
     2e2:	1a c0       	rjmp	.+52     	; 0x318 <__vector_5+0xb8>
     2e4:	21 e0       	ldi	r18, 0x01	; 1
     2e6:	20 93 55 02 	sts	0x0255, r18	; 0x800255 <last_channel_7>
     2ea:	60 93 a7 01 	sts	0x01A7, r22	; 0x8001a7 <timer_7>
     2ee:	70 93 a8 01 	sts	0x01A8, r23	; 0x8001a8 <timer_7+0x1>
     2f2:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <timer_7+0x2>
     2f6:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <timer_7+0x3>
     2fa:	0e c0       	rjmp	.+28     	; 0x318 <__vector_5+0xb8>
     2fc:	21 30       	cpi	r18, 0x01	; 1
     2fe:	61 f4       	brne	.+24     	; 0x318 <__vector_5+0xb8>
     300:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <last_channel_7>
     304:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <timer_7>
     308:	30 91 a8 01 	lds	r19, 0x01A8	; 0x8001a8 <timer_7+0x1>
     30c:	62 1b       	sub	r22, r18
     30e:	73 0b       	sbc	r23, r19
     310:	70 93 10 02 	sts	0x0210, r23	; 0x800210 <receiver_input+0xf>
     314:	60 93 0f 02 	sts	0x020F, r22	; 0x80020f <receiver_input+0xe>
     318:	ff 91       	pop	r31
     31a:	ef 91       	pop	r30
     31c:	bf 91       	pop	r27
     31e:	af 91       	pop	r26
     320:	9f 91       	pop	r25
     322:	8f 91       	pop	r24
     324:	7f 91       	pop	r23
     326:	6f 91       	pop	r22
     328:	5f 91       	pop	r21
     32a:	4f 91       	pop	r20
     32c:	3f 91       	pop	r19
     32e:	2f 91       	pop	r18
     330:	0f 90       	pop	r0
     332:	0f be       	out	0x3f, r0	; 63
     334:	0f 90       	pop	r0
     336:	1f 90       	pop	r1
     338:	18 95       	reti

0000033a <__vector_3>:
     33a:	1f 92       	push	r1
     33c:	0f 92       	push	r0
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	0f 92       	push	r0
     342:	11 24       	eor	r1, r1
     344:	2f 93       	push	r18
     346:	3f 93       	push	r19
     348:	4f 93       	push	r20
     34a:	5f 93       	push	r21
     34c:	6f 93       	push	r22
     34e:	7f 93       	push	r23
     350:	8f 93       	push	r24
     352:	9f 93       	push	r25
     354:	af 93       	push	r26
     356:	bf 93       	push	r27
     358:	ef 93       	push	r30
     35a:	ff 93       	push	r31
     35c:	0e 94 77 16 	call	0x2cee	; 0x2cee <micros>
     360:	60 93 a3 01 	sts	0x01A3, r22	; 0x8001a3 <current_timeV1>
     364:	70 93 a4 01 	sts	0x01A4, r23	; 0x8001a4 <current_timeV1+0x1>
     368:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <current_timeV1+0x2>
     36c:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <current_timeV1+0x3>
     370:	20 91 5b 02 	lds	r18, 0x025B	; 0x80025b <last_channel_1>
     374:	18 9b       	sbis	0x03, 0	; 3
     376:	0e c0       	rjmp	.+28     	; 0x394 <__vector_3+0x5a>
     378:	21 11       	cpse	r18, r1
     37a:	1b c0       	rjmp	.+54     	; 0x3b2 <__vector_3+0x78>
     37c:	21 e0       	ldi	r18, 0x01	; 1
     37e:	20 93 5b 02 	sts	0x025B, r18	; 0x80025b <last_channel_1>
     382:	60 93 bf 01 	sts	0x01BF, r22	; 0x8001bf <timer_1>
     386:	70 93 c0 01 	sts	0x01C0, r23	; 0x8001c0 <timer_1+0x1>
     38a:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <timer_1+0x2>
     38e:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <timer_1+0x3>
     392:	0f c0       	rjmp	.+30     	; 0x3b2 <__vector_3+0x78>
     394:	21 30       	cpi	r18, 0x01	; 1
     396:	69 f4       	brne	.+26     	; 0x3b2 <__vector_3+0x78>
     398:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <last_channel_1>
     39c:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <timer_1>
     3a0:	30 91 c0 01 	lds	r19, 0x01C0	; 0x8001c0 <timer_1+0x1>
     3a4:	ab 01       	movw	r20, r22
     3a6:	42 1b       	sub	r20, r18
     3a8:	53 0b       	sbc	r21, r19
     3aa:	50 93 04 02 	sts	0x0204, r21	; 0x800204 <receiver_input+0x3>
     3ae:	40 93 03 02 	sts	0x0203, r20	; 0x800203 <receiver_input+0x2>
     3b2:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <last_channel_2>
     3b6:	19 9b       	sbis	0x03, 1	; 3
     3b8:	0e c0       	rjmp	.+28     	; 0x3d6 <__vector_3+0x9c>
     3ba:	21 11       	cpse	r18, r1
     3bc:	1b c0       	rjmp	.+54     	; 0x3f4 <__vector_3+0xba>
     3be:	21 e0       	ldi	r18, 0x01	; 1
     3c0:	20 93 5a 02 	sts	0x025A, r18	; 0x80025a <last_channel_2>
     3c4:	60 93 bb 01 	sts	0x01BB, r22	; 0x8001bb <timer_2>
     3c8:	70 93 bc 01 	sts	0x01BC, r23	; 0x8001bc <timer_2+0x1>
     3cc:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <timer_2+0x2>
     3d0:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <timer_2+0x3>
     3d4:	0f c0       	rjmp	.+30     	; 0x3f4 <__vector_3+0xba>
     3d6:	21 30       	cpi	r18, 0x01	; 1
     3d8:	69 f4       	brne	.+26     	; 0x3f4 <__vector_3+0xba>
     3da:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <last_channel_2>
     3de:	20 91 bb 01 	lds	r18, 0x01BB	; 0x8001bb <timer_2>
     3e2:	30 91 bc 01 	lds	r19, 0x01BC	; 0x8001bc <timer_2+0x1>
     3e6:	ab 01       	movw	r20, r22
     3e8:	42 1b       	sub	r20, r18
     3ea:	53 0b       	sbc	r21, r19
     3ec:	50 93 06 02 	sts	0x0206, r21	; 0x800206 <receiver_input+0x5>
     3f0:	40 93 05 02 	sts	0x0205, r20	; 0x800205 <receiver_input+0x4>
     3f4:	20 91 59 02 	lds	r18, 0x0259	; 0x800259 <last_channel_3>
     3f8:	1a 9b       	sbis	0x03, 2	; 3
     3fa:	0e c0       	rjmp	.+28     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3fc:	21 11       	cpse	r18, r1
     3fe:	1b c0       	rjmp	.+54     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     400:	21 e0       	ldi	r18, 0x01	; 1
     402:	20 93 59 02 	sts	0x0259, r18	; 0x800259 <last_channel_3>
     406:	60 93 b7 01 	sts	0x01B7, r22	; 0x8001b7 <timer_3>
     40a:	70 93 b8 01 	sts	0x01B8, r23	; 0x8001b8 <timer_3+0x1>
     40e:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <timer_3+0x2>
     412:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <timer_3+0x3>
     416:	0f c0       	rjmp	.+30     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     418:	21 30       	cpi	r18, 0x01	; 1
     41a:	69 f4       	brne	.+26     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     41c:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <last_channel_3>
     420:	20 91 b7 01 	lds	r18, 0x01B7	; 0x8001b7 <timer_3>
     424:	30 91 b8 01 	lds	r19, 0x01B8	; 0x8001b8 <timer_3+0x1>
     428:	ab 01       	movw	r20, r22
     42a:	42 1b       	sub	r20, r18
     42c:	53 0b       	sbc	r21, r19
     42e:	50 93 08 02 	sts	0x0208, r21	; 0x800208 <receiver_input+0x7>
     432:	40 93 07 02 	sts	0x0207, r20	; 0x800207 <receiver_input+0x6>
     436:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <last_channel_4>
     43a:	1b 9b       	sbis	0x03, 3	; 3
     43c:	0e c0       	rjmp	.+28     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     43e:	21 11       	cpse	r18, r1
     440:	1b c0       	rjmp	.+54     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     442:	21 e0       	ldi	r18, 0x01	; 1
     444:	20 93 58 02 	sts	0x0258, r18	; 0x800258 <last_channel_4>
     448:	60 93 b3 01 	sts	0x01B3, r22	; 0x8001b3 <timer_4>
     44c:	70 93 b4 01 	sts	0x01B4, r23	; 0x8001b4 <timer_4+0x1>
     450:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <timer_4+0x2>
     454:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <timer_4+0x3>
     458:	0f c0       	rjmp	.+30     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     45a:	21 30       	cpi	r18, 0x01	; 1
     45c:	69 f4       	brne	.+26     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     45e:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <last_channel_4>
     462:	20 91 b3 01 	lds	r18, 0x01B3	; 0x8001b3 <timer_4>
     466:	30 91 b4 01 	lds	r19, 0x01B4	; 0x8001b4 <timer_4+0x1>
     46a:	ab 01       	movw	r20, r22
     46c:	42 1b       	sub	r20, r18
     46e:	53 0b       	sbc	r21, r19
     470:	50 93 0a 02 	sts	0x020A, r21	; 0x80020a <receiver_input+0x9>
     474:	40 93 09 02 	sts	0x0209, r20	; 0x800209 <receiver_input+0x8>
     478:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <last_channel_5>
     47c:	1c 9b       	sbis	0x03, 4	; 3
     47e:	0e c0       	rjmp	.+28     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     480:	21 11       	cpse	r18, r1
     482:	1a c0       	rjmp	.+52     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     484:	21 e0       	ldi	r18, 0x01	; 1
     486:	20 93 57 02 	sts	0x0257, r18	; 0x800257 <last_channel_5>
     48a:	60 93 af 01 	sts	0x01AF, r22	; 0x8001af <timer_5>
     48e:	70 93 b0 01 	sts	0x01B0, r23	; 0x8001b0 <timer_5+0x1>
     492:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <timer_5+0x2>
     496:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <timer_5+0x3>
     49a:	0e c0       	rjmp	.+28     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     49c:	21 30       	cpi	r18, 0x01	; 1
     49e:	61 f4       	brne	.+24     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     4a0:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <last_channel_5>
     4a4:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <timer_5>
     4a8:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <timer_5+0x1>
     4ac:	62 1b       	sub	r22, r18
     4ae:	73 0b       	sbc	r23, r19
     4b0:	70 93 0c 02 	sts	0x020C, r23	; 0x80020c <receiver_input+0xb>
     4b4:	60 93 0b 02 	sts	0x020B, r22	; 0x80020b <receiver_input+0xa>
     4b8:	ff 91       	pop	r31
     4ba:	ef 91       	pop	r30
     4bc:	bf 91       	pop	r27
     4be:	af 91       	pop	r26
     4c0:	9f 91       	pop	r25
     4c2:	8f 91       	pop	r24
     4c4:	7f 91       	pop	r23
     4c6:	6f 91       	pop	r22
     4c8:	5f 91       	pop	r21
     4ca:	4f 91       	pop	r20
     4cc:	3f 91       	pop	r19
     4ce:	2f 91       	pop	r18
     4d0:	0f 90       	pop	r0
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	0f 90       	pop	r0
     4d6:	1f 90       	pop	r1
     4d8:	18 95       	reti

000004da <_Z13calculate_pidv>:
     4da:	4f 92       	push	r4
     4dc:	5f 92       	push	r5
     4de:	6f 92       	push	r6
     4e0:	7f 92       	push	r7
     4e2:	8f 92       	push	r8
     4e4:	9f 92       	push	r9
     4e6:	af 92       	push	r10
     4e8:	bf 92       	push	r11
     4ea:	cf 92       	push	r12
     4ec:	df 92       	push	r13
     4ee:	ef 92       	push	r14
     4f0:	ff 92       	push	r15
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	00 d0       	rcall	.+0      	; 0x4f8 <_Z13calculate_pidv+0x1e>
     4f8:	00 d0       	rcall	.+0      	; 0x4fa <_Z13calculate_pidv+0x20>
     4fa:	00 d0       	rcall	.+0      	; 0x4fc <_Z13calculate_pidv+0x22>
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
     500:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <pid_roll_setpoint>
     504:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <pid_roll_setpoint+0x1>
     508:	40 91 75 01 	lds	r20, 0x0175	; 0x800175 <pid_roll_setpoint+0x2>
     50c:	50 91 76 01 	lds	r21, 0x0176	; 0x800176 <pid_roll_setpoint+0x3>
     510:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <gyro_roll_input>
     514:	70 91 70 01 	lds	r23, 0x0170	; 0x800170 <gyro_roll_input+0x1>
     518:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <gyro_roll_input+0x2>
     51c:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <gyro_roll_input+0x3>
     520:	0e 94 89 11 	call	0x2312	; 0x2312 <__subsf3>
     524:	6b 01       	movw	r12, r22
     526:	7c 01       	movw	r14, r24
     528:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <pid_i_gain_roll>
     52c:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <pid_i_gain_roll+0x1>
     530:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <pid_i_gain_roll+0x2>
     534:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <pid_i_gain_roll+0x3>
     538:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
     53c:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <pid_i_mem_roll>
     540:	30 91 78 01 	lds	r19, 0x0178	; 0x800178 <pid_i_mem_roll+0x1>
     544:	40 91 79 01 	lds	r20, 0x0179	; 0x800179 <pid_i_mem_roll+0x2>
     548:	50 91 7a 01 	lds	r21, 0x017A	; 0x80017a <pid_i_mem_roll+0x3>
     54c:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
     550:	2b 01       	movw	r4, r22
     552:	3c 01       	movw	r6, r24
     554:	60 93 77 01 	sts	0x0177, r22	; 0x800177 <pid_i_mem_roll>
     558:	70 93 78 01 	sts	0x0178, r23	; 0x800178 <pid_i_mem_roll+0x1>
     55c:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <pid_i_mem_roll+0x2>
     560:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <pid_i_mem_roll+0x3>
     564:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <pid_max_roll>
     568:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <pid_max_roll+0x1>
     56c:	3e 83       	std	Y+6, r19	; 0x06
     56e:	2d 83       	std	Y+5, r18	; 0x05
     570:	b9 01       	movw	r22, r18
     572:	33 0f       	add	r19, r19
     574:	88 0b       	sbc	r24, r24
     576:	99 0b       	sbc	r25, r25
     578:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
     57c:	4b 01       	movw	r8, r22
     57e:	5c 01       	movw	r10, r24
     580:	9b 01       	movw	r18, r22
     582:	ac 01       	movw	r20, r24
     584:	c3 01       	movw	r24, r6
     586:	b2 01       	movw	r22, r4
     588:	0e 94 cb 13 	call	0x2796	; 0x2796 <__gesf2>
     58c:	18 16       	cp	r1, r24
     58e:	4c f4       	brge	.+18     	; 0x5a2 <_Z13calculate_pidv+0xc8>
     590:	80 92 77 01 	sts	0x0177, r8	; 0x800177 <pid_i_mem_roll>
     594:	90 92 78 01 	sts	0x0178, r9	; 0x800178 <pid_i_mem_roll+0x1>
     598:	a0 92 79 01 	sts	0x0179, r10	; 0x800179 <pid_i_mem_roll+0x2>
     59c:	b0 92 7a 01 	sts	0x017A, r11	; 0x80017a <pid_i_mem_roll+0x3>
     5a0:	23 c0       	rjmp	.+70     	; 0x5e8 <_Z13calculate_pidv+0x10e>
     5a2:	6d 81       	ldd	r22, Y+5	; 0x05
     5a4:	7e 81       	ldd	r23, Y+6	; 0x06
     5a6:	71 95       	neg	r23
     5a8:	61 95       	neg	r22
     5aa:	71 09       	sbc	r23, r1
     5ac:	07 2e       	mov	r0, r23
     5ae:	00 0c       	add	r0, r0
     5b0:	88 0b       	sbc	r24, r24
     5b2:	99 0b       	sbc	r25, r25
     5b4:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
     5b8:	69 83       	std	Y+1, r22	; 0x01
     5ba:	7a 83       	std	Y+2, r23	; 0x02
     5bc:	8b 83       	std	Y+3, r24	; 0x03
     5be:	9c 83       	std	Y+4, r25	; 0x04
     5c0:	9b 01       	movw	r18, r22
     5c2:	ac 01       	movw	r20, r24
     5c4:	c3 01       	movw	r24, r6
     5c6:	b2 01       	movw	r22, r4
     5c8:	0e 94 11 12 	call	0x2422	; 0x2422 <__cmpsf2>
     5cc:	87 ff       	sbrs	r24, 7
     5ce:	0c c0       	rjmp	.+24     	; 0x5e8 <_Z13calculate_pidv+0x10e>
     5d0:	89 81       	ldd	r24, Y+1	; 0x01
     5d2:	9a 81       	ldd	r25, Y+2	; 0x02
     5d4:	ab 81       	ldd	r26, Y+3	; 0x03
     5d6:	bc 81       	ldd	r27, Y+4	; 0x04
     5d8:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <pid_i_mem_roll>
     5dc:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <pid_i_mem_roll+0x1>
     5e0:	a0 93 79 01 	sts	0x0179, r26	; 0x800179 <pid_i_mem_roll+0x2>
     5e4:	b0 93 7a 01 	sts	0x017A, r27	; 0x80017a <pid_i_mem_roll+0x3>
     5e8:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <pid_p_gain_roll>
     5ec:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <pid_p_gain_roll+0x1>
     5f0:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <pid_p_gain_roll+0x2>
     5f4:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <pid_p_gain_roll+0x3>
     5f8:	c7 01       	movw	r24, r14
     5fa:	b6 01       	movw	r22, r12
     5fc:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
     600:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <pid_i_mem_roll>
     604:	30 91 78 01 	lds	r19, 0x0178	; 0x800178 <pid_i_mem_roll+0x1>
     608:	40 91 79 01 	lds	r20, 0x0179	; 0x800179 <pid_i_mem_roll+0x2>
     60c:	50 91 7a 01 	lds	r21, 0x017A	; 0x80017a <pid_i_mem_roll+0x3>
     610:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
     614:	2b 01       	movw	r4, r22
     616:	3c 01       	movw	r6, r24
     618:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <pid_last_roll_d_error>
     61c:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <pid_last_roll_d_error+0x1>
     620:	40 91 69 01 	lds	r20, 0x0169	; 0x800169 <pid_last_roll_d_error+0x2>
     624:	50 91 6a 01 	lds	r21, 0x016A	; 0x80016a <pid_last_roll_d_error+0x3>
     628:	c7 01       	movw	r24, r14
     62a:	b6 01       	movw	r22, r12
     62c:	0e 94 89 11 	call	0x2312	; 0x2312 <__subsf3>
     630:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <pid_d_gain_roll>
     634:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <pid_d_gain_roll+0x1>
     638:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <pid_d_gain_roll+0x2>
     63c:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <pid_d_gain_roll+0x3>
     640:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
     644:	9b 01       	movw	r18, r22
     646:	ac 01       	movw	r20, r24
     648:	c3 01       	movw	r24, r6
     64a:	b2 01       	movw	r22, r4
     64c:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
     650:	2b 01       	movw	r4, r22
     652:	3c 01       	movw	r6, r24
     654:	9b 01       	movw	r18, r22
     656:	ac 01       	movw	r20, r24
     658:	c5 01       	movw	r24, r10
     65a:	b4 01       	movw	r22, r8
     65c:	0e 94 11 12 	call	0x2422	; 0x2422 <__cmpsf2>
     660:	87 fd       	sbrc	r24, 7
     662:	1e c0       	rjmp	.+60     	; 0x6a0 <_Z13calculate_pidv+0x1c6>
     664:	6d 81       	ldd	r22, Y+5	; 0x05
     666:	7e 81       	ldd	r23, Y+6	; 0x06
     668:	71 95       	neg	r23
     66a:	61 95       	neg	r22
     66c:	71 09       	sbc	r23, r1
     66e:	07 2e       	mov	r0, r23
     670:	00 0c       	add	r0, r0
     672:	88 0b       	sbc	r24, r24
     674:	99 0b       	sbc	r25, r25
     676:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
     67a:	4b 01       	movw	r8, r22
     67c:	5c 01       	movw	r10, r24
     67e:	9b 01       	movw	r18, r22
     680:	ac 01       	movw	r20, r24
     682:	c3 01       	movw	r24, r6
     684:	b2 01       	movw	r22, r4
     686:	0e 94 11 12 	call	0x2422	; 0x2422 <__cmpsf2>
     68a:	87 fd       	sbrc	r24, 7
     68c:	09 c0       	rjmp	.+18     	; 0x6a0 <_Z13calculate_pidv+0x1c6>
     68e:	40 92 6b 01 	sts	0x016B, r4	; 0x80016b <pid_output_roll>
     692:	50 92 6c 01 	sts	0x016C, r5	; 0x80016c <pid_output_roll+0x1>
     696:	60 92 6d 01 	sts	0x016D, r6	; 0x80016d <pid_output_roll+0x2>
     69a:	70 92 6e 01 	sts	0x016E, r7	; 0x80016e <pid_output_roll+0x3>
     69e:	08 c0       	rjmp	.+16     	; 0x6b0 <_Z13calculate_pidv+0x1d6>
     6a0:	80 92 6b 01 	sts	0x016B, r8	; 0x80016b <pid_output_roll>
     6a4:	90 92 6c 01 	sts	0x016C, r9	; 0x80016c <pid_output_roll+0x1>
     6a8:	a0 92 6d 01 	sts	0x016D, r10	; 0x80016d <pid_output_roll+0x2>
     6ac:	b0 92 6e 01 	sts	0x016E, r11	; 0x80016e <pid_output_roll+0x3>
     6b0:	c0 92 67 01 	sts	0x0167, r12	; 0x800167 <pid_last_roll_d_error>
     6b4:	d0 92 68 01 	sts	0x0168, r13	; 0x800168 <pid_last_roll_d_error+0x1>
     6b8:	e0 92 69 01 	sts	0x0169, r14	; 0x800169 <pid_last_roll_d_error+0x2>
     6bc:	f0 92 6a 01 	sts	0x016A, r15	; 0x80016a <pid_last_roll_d_error+0x3>
     6c0:	20 91 5f 01 	lds	r18, 0x015F	; 0x80015f <pid_pitch_setpoint>
     6c4:	30 91 60 01 	lds	r19, 0x0160	; 0x800160 <pid_pitch_setpoint+0x1>
     6c8:	40 91 61 01 	lds	r20, 0x0161	; 0x800161 <pid_pitch_setpoint+0x2>
     6cc:	50 91 62 01 	lds	r21, 0x0162	; 0x800162 <pid_pitch_setpoint+0x3>
     6d0:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <gyro_pitch_input>
     6d4:	70 91 5c 01 	lds	r23, 0x015C	; 0x80015c <gyro_pitch_input+0x1>
     6d8:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <gyro_pitch_input+0x2>
     6dc:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <gyro_pitch_input+0x3>
     6e0:	0e 94 89 11 	call	0x2312	; 0x2312 <__subsf3>
     6e4:	6b 01       	movw	r12, r22
     6e6:	7c 01       	movw	r14, r24
     6e8:	20 91 66 02 	lds	r18, 0x0266	; 0x800266 <pid_i_gain_pitch>
     6ec:	30 91 67 02 	lds	r19, 0x0267	; 0x800267 <pid_i_gain_pitch+0x1>
     6f0:	40 91 68 02 	lds	r20, 0x0268	; 0x800268 <pid_i_gain_pitch+0x2>
     6f4:	50 91 69 02 	lds	r21, 0x0269	; 0x800269 <pid_i_gain_pitch+0x3>
     6f8:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
     6fc:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <pid_i_mem_pitch>
     700:	30 91 64 01 	lds	r19, 0x0164	; 0x800164 <pid_i_mem_pitch+0x1>
     704:	40 91 65 01 	lds	r20, 0x0165	; 0x800165 <pid_i_mem_pitch+0x2>
     708:	50 91 66 01 	lds	r21, 0x0166	; 0x800166 <pid_i_mem_pitch+0x3>
     70c:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
     710:	2b 01       	movw	r4, r22
     712:	3c 01       	movw	r6, r24
     714:	60 93 63 01 	sts	0x0163, r22	; 0x800163 <pid_i_mem_pitch>
     718:	70 93 64 01 	sts	0x0164, r23	; 0x800164 <pid_i_mem_pitch+0x1>
     71c:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <pid_i_mem_pitch+0x2>
     720:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <pid_i_mem_pitch+0x3>
     724:	a0 91 60 02 	lds	r26, 0x0260	; 0x800260 <pid_max_pitch>
     728:	b0 91 61 02 	lds	r27, 0x0261	; 0x800261 <pid_max_pitch+0x1>
     72c:	be 83       	std	Y+6, r27	; 0x06
     72e:	ad 83       	std	Y+5, r26	; 0x05
     730:	bd 01       	movw	r22, r26
     732:	bb 0f       	add	r27, r27
     734:	88 0b       	sbc	r24, r24
     736:	99 0b       	sbc	r25, r25
     738:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
     73c:	4b 01       	movw	r8, r22
     73e:	5c 01       	movw	r10, r24
     740:	9b 01       	movw	r18, r22
     742:	ac 01       	movw	r20, r24
     744:	c3 01       	movw	r24, r6
     746:	b2 01       	movw	r22, r4
     748:	0e 94 cb 13 	call	0x2796	; 0x2796 <__gesf2>
     74c:	18 16       	cp	r1, r24
     74e:	4c f4       	brge	.+18     	; 0x762 <_Z13calculate_pidv+0x288>
     750:	80 92 63 01 	sts	0x0163, r8	; 0x800163 <pid_i_mem_pitch>
     754:	90 92 64 01 	sts	0x0164, r9	; 0x800164 <pid_i_mem_pitch+0x1>
     758:	a0 92 65 01 	sts	0x0165, r10	; 0x800165 <pid_i_mem_pitch+0x2>
     75c:	b0 92 66 01 	sts	0x0166, r11	; 0x800166 <pid_i_mem_pitch+0x3>
     760:	23 c0       	rjmp	.+70     	; 0x7a8 <_Z13calculate_pidv+0x2ce>
     762:	6d 81       	ldd	r22, Y+5	; 0x05
     764:	7e 81       	ldd	r23, Y+6	; 0x06
     766:	71 95       	neg	r23
     768:	61 95       	neg	r22
     76a:	71 09       	sbc	r23, r1
     76c:	07 2e       	mov	r0, r23
     76e:	00 0c       	add	r0, r0
     770:	88 0b       	sbc	r24, r24
     772:	99 0b       	sbc	r25, r25
     774:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
     778:	69 83       	std	Y+1, r22	; 0x01
     77a:	7a 83       	std	Y+2, r23	; 0x02
     77c:	8b 83       	std	Y+3, r24	; 0x03
     77e:	9c 83       	std	Y+4, r25	; 0x04
     780:	9b 01       	movw	r18, r22
     782:	ac 01       	movw	r20, r24
     784:	c3 01       	movw	r24, r6
     786:	b2 01       	movw	r22, r4
     788:	0e 94 11 12 	call	0x2422	; 0x2422 <__cmpsf2>
     78c:	87 ff       	sbrs	r24, 7
     78e:	0c c0       	rjmp	.+24     	; 0x7a8 <_Z13calculate_pidv+0x2ce>
     790:	89 81       	ldd	r24, Y+1	; 0x01
     792:	9a 81       	ldd	r25, Y+2	; 0x02
     794:	ab 81       	ldd	r26, Y+3	; 0x03
     796:	bc 81       	ldd	r27, Y+4	; 0x04
     798:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <pid_i_mem_pitch>
     79c:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <pid_i_mem_pitch+0x1>
     7a0:	a0 93 65 01 	sts	0x0165, r26	; 0x800165 <pid_i_mem_pitch+0x2>
     7a4:	b0 93 66 01 	sts	0x0166, r27	; 0x800166 <pid_i_mem_pitch+0x3>
     7a8:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <pid_p_gain_pitch>
     7ac:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <pid_p_gain_pitch+0x1>
     7b0:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <pid_p_gain_pitch+0x2>
     7b4:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <pid_p_gain_pitch+0x3>
     7b8:	c7 01       	movw	r24, r14
     7ba:	b6 01       	movw	r22, r12
     7bc:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
     7c0:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <pid_i_mem_pitch>
     7c4:	30 91 64 01 	lds	r19, 0x0164	; 0x800164 <pid_i_mem_pitch+0x1>
     7c8:	40 91 65 01 	lds	r20, 0x0165	; 0x800165 <pid_i_mem_pitch+0x2>
     7cc:	50 91 66 01 	lds	r21, 0x0166	; 0x800166 <pid_i_mem_pitch+0x3>
     7d0:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
     7d4:	2b 01       	movw	r4, r22
     7d6:	3c 01       	movw	r6, r24
     7d8:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <pid_last_pitch_d_error>
     7dc:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <pid_last_pitch_d_error+0x1>
     7e0:	40 91 55 01 	lds	r20, 0x0155	; 0x800155 <pid_last_pitch_d_error+0x2>
     7e4:	50 91 56 01 	lds	r21, 0x0156	; 0x800156 <pid_last_pitch_d_error+0x3>
     7e8:	c7 01       	movw	r24, r14
     7ea:	b6 01       	movw	r22, r12
     7ec:	0e 94 89 11 	call	0x2312	; 0x2312 <__subsf3>
     7f0:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <pid_d_gain_pitch>
     7f4:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <pid_d_gain_pitch+0x1>
     7f8:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <pid_d_gain_pitch+0x2>
     7fc:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <pid_d_gain_pitch+0x3>
     800:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
     804:	9b 01       	movw	r18, r22
     806:	ac 01       	movw	r20, r24
     808:	c3 01       	movw	r24, r6
     80a:	b2 01       	movw	r22, r4
     80c:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
     810:	2b 01       	movw	r4, r22
     812:	3c 01       	movw	r6, r24
     814:	9b 01       	movw	r18, r22
     816:	ac 01       	movw	r20, r24
     818:	c5 01       	movw	r24, r10
     81a:	b4 01       	movw	r22, r8
     81c:	0e 94 11 12 	call	0x2422	; 0x2422 <__cmpsf2>
     820:	87 fd       	sbrc	r24, 7
     822:	1e c0       	rjmp	.+60     	; 0x860 <_Z13calculate_pidv+0x386>
     824:	6d 81       	ldd	r22, Y+5	; 0x05
     826:	7e 81       	ldd	r23, Y+6	; 0x06
     828:	71 95       	neg	r23
     82a:	61 95       	neg	r22
     82c:	71 09       	sbc	r23, r1
     82e:	07 2e       	mov	r0, r23
     830:	00 0c       	add	r0, r0
     832:	88 0b       	sbc	r24, r24
     834:	99 0b       	sbc	r25, r25
     836:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
     83a:	4b 01       	movw	r8, r22
     83c:	5c 01       	movw	r10, r24
     83e:	9b 01       	movw	r18, r22
     840:	ac 01       	movw	r20, r24
     842:	c3 01       	movw	r24, r6
     844:	b2 01       	movw	r22, r4
     846:	0e 94 11 12 	call	0x2422	; 0x2422 <__cmpsf2>
     84a:	87 fd       	sbrc	r24, 7
     84c:	09 c0       	rjmp	.+18     	; 0x860 <_Z13calculate_pidv+0x386>
     84e:	40 92 57 01 	sts	0x0157, r4	; 0x800157 <pid_output_pitch>
     852:	50 92 58 01 	sts	0x0158, r5	; 0x800158 <pid_output_pitch+0x1>
     856:	60 92 59 01 	sts	0x0159, r6	; 0x800159 <pid_output_pitch+0x2>
     85a:	70 92 5a 01 	sts	0x015A, r7	; 0x80015a <pid_output_pitch+0x3>
     85e:	08 c0       	rjmp	.+16     	; 0x870 <_Z13calculate_pidv+0x396>
     860:	80 92 57 01 	sts	0x0157, r8	; 0x800157 <pid_output_pitch>
     864:	90 92 58 01 	sts	0x0158, r9	; 0x800158 <pid_output_pitch+0x1>
     868:	a0 92 59 01 	sts	0x0159, r10	; 0x800159 <pid_output_pitch+0x2>
     86c:	b0 92 5a 01 	sts	0x015A, r11	; 0x80015a <pid_output_pitch+0x3>
     870:	c0 92 53 01 	sts	0x0153, r12	; 0x800153 <pid_last_pitch_d_error>
     874:	d0 92 54 01 	sts	0x0154, r13	; 0x800154 <pid_last_pitch_d_error+0x1>
     878:	e0 92 55 01 	sts	0x0155, r14	; 0x800155 <pid_last_pitch_d_error+0x2>
     87c:	f0 92 56 01 	sts	0x0156, r15	; 0x800156 <pid_last_pitch_d_error+0x3>
     880:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <pid_yaw_setpoint>
     884:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <pid_yaw_setpoint+0x1>
     888:	40 91 4d 01 	lds	r20, 0x014D	; 0x80014d <pid_yaw_setpoint+0x2>
     88c:	50 91 4e 01 	lds	r21, 0x014E	; 0x80014e <pid_yaw_setpoint+0x3>
     890:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <gyro_yaw_input>
     894:	70 91 48 01 	lds	r23, 0x0148	; 0x800148 <gyro_yaw_input+0x1>
     898:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <gyro_yaw_input+0x2>
     89c:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <gyro_yaw_input+0x3>
     8a0:	0e 94 89 11 	call	0x2312	; 0x2312 <__subsf3>
     8a4:	6b 01       	movw	r12, r22
     8a6:	7c 01       	movw	r14, r24
     8a8:	60 93 7b 01 	sts	0x017B, r22	; 0x80017b <pid_error_temp>
     8ac:	70 93 7c 01 	sts	0x017C, r23	; 0x80017c <pid_error_temp+0x1>
     8b0:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <pid_error_temp+0x2>
     8b4:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <pid_error_temp+0x3>
     8b8:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <pid_i_gain_yaw>
     8bc:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <pid_i_gain_yaw+0x1>
     8c0:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <pid_i_gain_yaw+0x2>
     8c4:	50 91 06 01 	lds	r21, 0x0106	; 0x800106 <pid_i_gain_yaw+0x3>
     8c8:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
     8cc:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <pid_i_mem_yaw>
     8d0:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <pid_i_mem_yaw+0x1>
     8d4:	40 91 51 01 	lds	r20, 0x0151	; 0x800151 <pid_i_mem_yaw+0x2>
     8d8:	50 91 52 01 	lds	r21, 0x0152	; 0x800152 <pid_i_mem_yaw+0x3>
     8dc:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
     8e0:	2b 01       	movw	r4, r22
     8e2:	3c 01       	movw	r6, r24
     8e4:	60 93 4f 01 	sts	0x014F, r22	; 0x80014f <pid_i_mem_yaw>
     8e8:	70 93 50 01 	sts	0x0150, r23	; 0x800150 <pid_i_mem_yaw+0x1>
     8ec:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <pid_i_mem_yaw+0x2>
     8f0:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <pid_i_mem_yaw+0x3>
     8f4:	a0 91 01 01 	lds	r26, 0x0101	; 0x800101 <pid_max_yaw>
     8f8:	b0 91 02 01 	lds	r27, 0x0102	; 0x800102 <pid_max_yaw+0x1>
     8fc:	be 83       	std	Y+6, r27	; 0x06
     8fe:	ad 83       	std	Y+5, r26	; 0x05
     900:	bd 01       	movw	r22, r26
     902:	bb 0f       	add	r27, r27
     904:	88 0b       	sbc	r24, r24
     906:	99 0b       	sbc	r25, r25
     908:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
     90c:	4b 01       	movw	r8, r22
     90e:	5c 01       	movw	r10, r24
     910:	9b 01       	movw	r18, r22
     912:	ac 01       	movw	r20, r24
     914:	c3 01       	movw	r24, r6
     916:	b2 01       	movw	r22, r4
     918:	0e 94 cb 13 	call	0x2796	; 0x2796 <__gesf2>
     91c:	18 16       	cp	r1, r24
     91e:	4c f4       	brge	.+18     	; 0x932 <__stack+0x33>
     920:	80 92 4f 01 	sts	0x014F, r8	; 0x80014f <pid_i_mem_yaw>
     924:	90 92 50 01 	sts	0x0150, r9	; 0x800150 <pid_i_mem_yaw+0x1>
     928:	a0 92 51 01 	sts	0x0151, r10	; 0x800151 <pid_i_mem_yaw+0x2>
     92c:	b0 92 52 01 	sts	0x0152, r11	; 0x800152 <pid_i_mem_yaw+0x3>
     930:	23 c0       	rjmp	.+70     	; 0x978 <__stack+0x79>
     932:	6d 81       	ldd	r22, Y+5	; 0x05
     934:	7e 81       	ldd	r23, Y+6	; 0x06
     936:	71 95       	neg	r23
     938:	61 95       	neg	r22
     93a:	71 09       	sbc	r23, r1
     93c:	07 2e       	mov	r0, r23
     93e:	00 0c       	add	r0, r0
     940:	88 0b       	sbc	r24, r24
     942:	99 0b       	sbc	r25, r25
     944:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
     948:	69 83       	std	Y+1, r22	; 0x01
     94a:	7a 83       	std	Y+2, r23	; 0x02
     94c:	8b 83       	std	Y+3, r24	; 0x03
     94e:	9c 83       	std	Y+4, r25	; 0x04
     950:	9b 01       	movw	r18, r22
     952:	ac 01       	movw	r20, r24
     954:	c3 01       	movw	r24, r6
     956:	b2 01       	movw	r22, r4
     958:	0e 94 11 12 	call	0x2422	; 0x2422 <__cmpsf2>
     95c:	87 ff       	sbrs	r24, 7
     95e:	0c c0       	rjmp	.+24     	; 0x978 <__stack+0x79>
     960:	89 81       	ldd	r24, Y+1	; 0x01
     962:	9a 81       	ldd	r25, Y+2	; 0x02
     964:	ab 81       	ldd	r26, Y+3	; 0x03
     966:	bc 81       	ldd	r27, Y+4	; 0x04
     968:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <pid_i_mem_yaw>
     96c:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <pid_i_mem_yaw+0x1>
     970:	a0 93 51 01 	sts	0x0151, r26	; 0x800151 <pid_i_mem_yaw+0x2>
     974:	b0 93 52 01 	sts	0x0152, r27	; 0x800152 <pid_i_mem_yaw+0x3>
     978:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <pid_p_gain_yaw>
     97c:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <pid_p_gain_yaw+0x1>
     980:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <pid_p_gain_yaw+0x2>
     984:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <pid_p_gain_yaw+0x3>
     988:	c7 01       	movw	r24, r14
     98a:	b6 01       	movw	r22, r12
     98c:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
     990:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <pid_i_mem_yaw>
     994:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <pid_i_mem_yaw+0x1>
     998:	40 91 51 01 	lds	r20, 0x0151	; 0x800151 <pid_i_mem_yaw+0x2>
     99c:	50 91 52 01 	lds	r21, 0x0152	; 0x800152 <pid_i_mem_yaw+0x3>
     9a0:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
     9a4:	2b 01       	movw	r4, r22
     9a6:	3c 01       	movw	r6, r24
     9a8:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <pid_last_yaw_d_error>
     9ac:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <pid_last_yaw_d_error+0x1>
     9b0:	40 91 41 01 	lds	r20, 0x0141	; 0x800141 <pid_last_yaw_d_error+0x2>
     9b4:	50 91 42 01 	lds	r21, 0x0142	; 0x800142 <pid_last_yaw_d_error+0x3>
     9b8:	c7 01       	movw	r24, r14
     9ba:	b6 01       	movw	r22, r12
     9bc:	0e 94 89 11 	call	0x2312	; 0x2312 <__subsf3>
     9c0:	20 91 5c 02 	lds	r18, 0x025C	; 0x80025c <pid_d_gain_yaw>
     9c4:	30 91 5d 02 	lds	r19, 0x025D	; 0x80025d <pid_d_gain_yaw+0x1>
     9c8:	40 91 5e 02 	lds	r20, 0x025E	; 0x80025e <pid_d_gain_yaw+0x2>
     9cc:	50 91 5f 02 	lds	r21, 0x025F	; 0x80025f <pid_d_gain_yaw+0x3>
     9d0:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
     9d4:	9b 01       	movw	r18, r22
     9d6:	ac 01       	movw	r20, r24
     9d8:	c3 01       	movw	r24, r6
     9da:	b2 01       	movw	r22, r4
     9dc:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
     9e0:	2b 01       	movw	r4, r22
     9e2:	3c 01       	movw	r6, r24
     9e4:	9b 01       	movw	r18, r22
     9e6:	ac 01       	movw	r20, r24
     9e8:	c5 01       	movw	r24, r10
     9ea:	b4 01       	movw	r22, r8
     9ec:	0e 94 11 12 	call	0x2422	; 0x2422 <__cmpsf2>
     9f0:	87 fd       	sbrc	r24, 7
     9f2:	1e c0       	rjmp	.+60     	; 0xa30 <__stack+0x131>
     9f4:	6d 81       	ldd	r22, Y+5	; 0x05
     9f6:	7e 81       	ldd	r23, Y+6	; 0x06
     9f8:	71 95       	neg	r23
     9fa:	61 95       	neg	r22
     9fc:	71 09       	sbc	r23, r1
     9fe:	07 2e       	mov	r0, r23
     a00:	00 0c       	add	r0, r0
     a02:	88 0b       	sbc	r24, r24
     a04:	99 0b       	sbc	r25, r25
     a06:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
     a0a:	4b 01       	movw	r8, r22
     a0c:	5c 01       	movw	r10, r24
     a0e:	9b 01       	movw	r18, r22
     a10:	ac 01       	movw	r20, r24
     a12:	c3 01       	movw	r24, r6
     a14:	b2 01       	movw	r22, r4
     a16:	0e 94 11 12 	call	0x2422	; 0x2422 <__cmpsf2>
     a1a:	87 fd       	sbrc	r24, 7
     a1c:	09 c0       	rjmp	.+18     	; 0xa30 <__stack+0x131>
     a1e:	40 92 43 01 	sts	0x0143, r4	; 0x800143 <pid_output_yaw>
     a22:	50 92 44 01 	sts	0x0144, r5	; 0x800144 <pid_output_yaw+0x1>
     a26:	60 92 45 01 	sts	0x0145, r6	; 0x800145 <pid_output_yaw+0x2>
     a2a:	70 92 46 01 	sts	0x0146, r7	; 0x800146 <pid_output_yaw+0x3>
     a2e:	08 c0       	rjmp	.+16     	; 0xa40 <__stack+0x141>
     a30:	80 92 43 01 	sts	0x0143, r8	; 0x800143 <pid_output_yaw>
     a34:	90 92 44 01 	sts	0x0144, r9	; 0x800144 <pid_output_yaw+0x1>
     a38:	a0 92 45 01 	sts	0x0145, r10	; 0x800145 <pid_output_yaw+0x2>
     a3c:	b0 92 46 01 	sts	0x0146, r11	; 0x800146 <pid_output_yaw+0x3>
     a40:	c0 92 3f 01 	sts	0x013F, r12	; 0x80013f <pid_last_yaw_d_error>
     a44:	d0 92 40 01 	sts	0x0140, r13	; 0x800140 <pid_last_yaw_d_error+0x1>
     a48:	e0 92 41 01 	sts	0x0141, r14	; 0x800141 <pid_last_yaw_d_error+0x2>
     a4c:	f0 92 42 01 	sts	0x0142, r15	; 0x800142 <pid_last_yaw_d_error+0x3>
     a50:	26 96       	adiw	r28, 0x06	; 6
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	f8 94       	cli
     a56:	de bf       	out	0x3e, r29	; 62
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	cd bf       	out	0x3d, r28	; 61
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	ff 90       	pop	r15
     a62:	ef 90       	pop	r14
     a64:	df 90       	pop	r13
     a66:	cf 90       	pop	r12
     a68:	bf 90       	pop	r11
     a6a:	af 90       	pop	r10
     a6c:	9f 90       	pop	r9
     a6e:	8f 90       	pop	r8
     a70:	7f 90       	pop	r7
     a72:	6f 90       	pop	r6
     a74:	5f 90       	pop	r5
     a76:	4f 90       	pop	r4
     a78:	08 95       	ret

00000a7a <_GLOBAL__sub_I_pid_p_gain_roll>:
float pid_p_gain_roll = 1.3;               //Gain setting for the roll P-controller
float pid_i_gain_roll = 0.04;              //Gain setting for the roll I-controller
float pid_d_gain_roll = 19.0;              //Gain setting for the roll D-controller
int pid_max_roll = 400;                    //Maximum output of the PID-controller (+/-)

float pid_p_gain_pitch = pid_p_gain_roll;  //Gain setting for the pitch P-controller.
     a7a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <pid_p_gain_roll>
     a7e:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <pid_p_gain_roll+0x1>
     a82:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <pid_p_gain_roll+0x2>
     a86:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <pid_p_gain_roll+0x3>
     a8a:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <pid_p_gain_pitch>
     a8e:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <pid_p_gain_pitch+0x1>
     a92:	a0 93 6c 02 	sts	0x026C, r26	; 0x80026c <pid_p_gain_pitch+0x2>
     a96:	b0 93 6d 02 	sts	0x026D, r27	; 0x80026d <pid_p_gain_pitch+0x3>
float pid_i_gain_pitch = pid_i_gain_roll;  //Gain setting for the pitch I-controller.
     a9a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pid_i_gain_roll>
     a9e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <pid_i_gain_roll+0x1>
     aa2:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <pid_i_gain_roll+0x2>
     aa6:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <pid_i_gain_roll+0x3>
     aaa:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <pid_i_gain_pitch>
     aae:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <pid_i_gain_pitch+0x1>
     ab2:	a0 93 68 02 	sts	0x0268, r26	; 0x800268 <pid_i_gain_pitch+0x2>
     ab6:	b0 93 69 02 	sts	0x0269, r27	; 0x800269 <pid_i_gain_pitch+0x3>
float pid_d_gain_pitch = pid_d_gain_roll;  //Gain setting for the pitch D-controller.
     aba:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pid_d_gain_roll>
     abe:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <pid_d_gain_roll+0x1>
     ac2:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <pid_d_gain_roll+0x2>
     ac6:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <pid_d_gain_roll+0x3>
     aca:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <pid_d_gain_pitch>
     ace:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <pid_d_gain_pitch+0x1>
     ad2:	a0 93 64 02 	sts	0x0264, r26	; 0x800264 <pid_d_gain_pitch+0x2>
     ad6:	b0 93 65 02 	sts	0x0265, r27	; 0x800265 <pid_d_gain_pitch+0x3>
int pid_max_pitch = pid_max_roll;          //Maximum output of the PID-controller (+/-)
     ada:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <pid_max_roll>
     ade:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <pid_max_roll+0x1>
     ae2:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <pid_max_pitch+0x1>
     ae6:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <pid_max_pitch>
     aea:	08 95       	ret

00000aec <_Z8GyroReadv>:


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Subroutine for reading the gyro
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GyroRead(){
     aec:	bf 92       	push	r11
     aee:	cf 92       	push	r12
     af0:	df 92       	push	r13
     af2:	ef 92       	push	r14
     af4:	ff 92       	push	r15
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
	//Read the MPU-6050
	if(eeprom_data[31] == 1){
     afe:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <eeprom_data+0x1f>
     b02:	81 30       	cpi	r24, 0x01	; 1
     b04:	09 f0       	breq	.+2      	; 0xb08 <_Z8GyroReadv+0x1c>
     b06:	de c0       	rjmp	.+444    	; 0xcc4 <_Z8GyroReadv+0x1d8>
		Wire.beginTransmission(gyro_address);                                   //Start communication with the gyro.
     b08:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <gyro_address>
     b0c:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <gyro_address+0x1>
     b10:	8e e6       	ldi	r24, 0x6E	; 110
     b12:	92 e0       	ldi	r25, 0x02	; 2
     b14:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(ACCEL_XOUT_H);                                            
     b18:	6b e3       	ldi	r22, 0x3B	; 59
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	8e e6       	ldi	r24, 0x6E	; 110
     b1e:	92 e0       	ldi	r25, 0x02	; 2
     b20:	0e 94 29 01 	call	0x252	; 0x252 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                                 //End the transmission.
     b24:	8e e6       	ldi	r24, 0x6E	; 110
     b26:	92 e0       	ldi	r25, 0x02	; 2
     b28:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN7TwoWire15endTransmissionEv>
		Wire.requestFrom(gyro_address,14);                                      //Request 14 bytes from the gyro.
     b2c:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <gyro_address>
     b30:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <gyro_address+0x1>
     b34:	4e e0       	ldi	r20, 0x0E	; 14
     b36:	50 e0       	ldi	r21, 0x00	; 0
     b38:	8e e6       	ldi	r24, 0x6E	; 110
     b3a:	92 e0       	ldi	r25, 0x02	; 2
     b3c:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZN7TwoWire11requestFromEii>
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	0e 94 ba 00 	call	0x174	; 0x174 <_Z24convert_receiver_channelh.part.1>
		
		receiver_input_channel_1 = convert_receiver_channel(1);                 //Convert the actual receiver signals for pitch to the standard 1000 - 2000us.
     b46:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <receiver_input_channel_1+0x1>
     b4a:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <receiver_input_channel_1>
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	0e 94 ba 00 	call	0x174	; 0x174 <_Z24convert_receiver_channelh.part.1>
		receiver_input_channel_2 = convert_receiver_channel(2);                 //Convert the actual receiver signals for roll to the standard 1000 - 2000us.
     b54:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <receiver_input_channel_2+0x1>
     b58:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <receiver_input_channel_2>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	0e 94 ba 00 	call	0x174	; 0x174 <_Z24convert_receiver_channelh.part.1>
		receiver_input_channel_3 = convert_receiver_channel(3);                 //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
     b62:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <receiver_input_channel_3+0x1>
     b66:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <receiver_input_channel_3>
     b6a:	84 e0       	ldi	r24, 0x04	; 4
     b6c:	0e 94 ba 00 	call	0x174	; 0x174 <_Z24convert_receiver_channelh.part.1>
		receiver_input_channel_4 = convert_receiver_channel(4);                 //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
     b70:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <receiver_input_channel_4+0x1>
     b74:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <receiver_input_channel_4>
	byte channel, reverse;                                                       //First we declare some local variables
	int low, center, high, actual;
	int difference;

	if (function > 4) {
		return (receiver_input[function] -3000) * -1;
     b78:	88 eb       	ldi	r24, 0xB8	; 184
     b7a:	9b e0       	ldi	r25, 0x0B	; 11
     b7c:	20 91 0b 02 	lds	r18, 0x020B	; 0x80020b <receiver_input+0xa>
     b80:	30 91 0c 02 	lds	r19, 0x020C	; 0x80020c <receiver_input+0xb>
     b84:	ac 01       	movw	r20, r24
     b86:	42 1b       	sub	r20, r18
     b88:	53 0b       	sbc	r21, r19
		
		receiver_input_channel_1 = convert_receiver_channel(1);                 //Convert the actual receiver signals for pitch to the standard 1000 - 2000us.
		receiver_input_channel_2 = convert_receiver_channel(2);                 //Convert the actual receiver signals for roll to the standard 1000 - 2000us.
		receiver_input_channel_3 = convert_receiver_channel(3);                 //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
		receiver_input_channel_4 = convert_receiver_channel(4);                 //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
		receiver_input_channel_5 = convert_receiver_channel(5);                 //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
     b8a:	50 93 28 02 	sts	0x0228, r21	; 0x800228 <receiver_input_channel_5+0x1>
     b8e:	40 93 27 02 	sts	0x0227, r20	; 0x800227 <receiver_input_channel_5>
	byte channel, reverse;                                                       //First we declare some local variables
	int low, center, high, actual;
	int difference;

	if (function > 4) {
		return (receiver_input[function] -3000) * -1;
     b92:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <receiver_input+0xc>
     b96:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <receiver_input+0xd>
     b9a:	ac 01       	movw	r20, r24
     b9c:	42 1b       	sub	r20, r18
     b9e:	53 0b       	sbc	r21, r19
		receiver_input_channel_1 = convert_receiver_channel(1);                 //Convert the actual receiver signals for pitch to the standard 1000 - 2000us.
		receiver_input_channel_2 = convert_receiver_channel(2);                 //Convert the actual receiver signals for roll to the standard 1000 - 2000us.
		receiver_input_channel_3 = convert_receiver_channel(3);                 //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
		receiver_input_channel_4 = convert_receiver_channel(4);                 //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
		receiver_input_channel_5 = convert_receiver_channel(5);                 //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
		receiver_input_channel_6 = convert_receiver_channel(6);                 //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
     ba0:	50 93 26 02 	sts	0x0226, r21	; 0x800226 <receiver_input_channel_6+0x1>
     ba4:	40 93 25 02 	sts	0x0225, r20	; 0x800225 <receiver_input_channel_6>
	byte channel, reverse;                                                       //First we declare some local variables
	int low, center, high, actual;
	int difference;

	if (function > 4) {
		return (receiver_input[function] -3000) * -1;
     ba8:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <receiver_input+0xe>
     bac:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <receiver_input+0xf>
     bb0:	82 1b       	sub	r24, r18
     bb2:	93 0b       	sbc	r25, r19
		receiver_input_channel_2 = convert_receiver_channel(2);                 //Convert the actual receiver signals for roll to the standard 1000 - 2000us.
		receiver_input_channel_3 = convert_receiver_channel(3);                 //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
		receiver_input_channel_4 = convert_receiver_channel(4);                 //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
		receiver_input_channel_5 = convert_receiver_channel(5);                 //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
		receiver_input_channel_6 = convert_receiver_channel(6);                 //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
		receiver_input_channel_7 = convert_receiver_channel(7);                 //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
     bb4:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <receiver_input_channel_7+0x1>
     bb8:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <receiver_input_channel_7>
		
		while(Wire.available() < 14);                                           //Wait until the 14 bytes are received.
     bbc:	8e e6       	ldi	r24, 0x6E	; 110
     bbe:	92 e0       	ldi	r25, 0x02	; 2
     bc0:	0e 94 ef 14 	call	0x29de	; 0x29de <_ZN7TwoWire9availableEv>
     bc4:	0e 97       	sbiw	r24, 0x0e	; 14
     bc6:	d4 f3       	brlt	.-12     	; 0xbbc <_Z8GyroReadv+0xd0>
		acc_axis[1] = Wire.read()<<8|Wire.read();                               //Add the low and high byte to the acc_x variable.
     bc8:	8e e6       	ldi	r24, 0x6E	; 110
     bca:	92 e0       	ldi	r25, 0x02	; 2
     bcc:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_ZN7TwoWire4readEv>
     bd0:	c8 2f       	mov	r28, r24
     bd2:	8e e6       	ldi	r24, 0x6E	; 110
     bd4:	92 e0       	ldi	r25, 0x02	; 2
     bd6:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_ZN7TwoWire4readEv>
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	3c 2f       	mov	r19, r28
     be0:	82 2b       	or	r24, r18
     be2:	93 2b       	or	r25, r19
     be4:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <acc_axis+0x3>
     be8:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <acc_axis+0x2>
		acc_axis[2] = Wire.read()<<8|Wire.read();                               //Add the low and high byte to the acc_y variable.
     bec:	8e e6       	ldi	r24, 0x6E	; 110
     bee:	92 e0       	ldi	r25, 0x02	; 2
     bf0:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_ZN7TwoWire4readEv>
     bf4:	c8 2f       	mov	r28, r24
     bf6:	8e e6       	ldi	r24, 0x6E	; 110
     bf8:	92 e0       	ldi	r25, 0x02	; 2
     bfa:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_ZN7TwoWire4readEv>
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	3c 2f       	mov	r19, r28
     c04:	82 2b       	or	r24, r18
     c06:	93 2b       	or	r25, r19
     c08:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <acc_axis+0x5>
     c0c:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <acc_axis+0x4>
		acc_axis[3] = Wire.read()<<8|Wire.read();                               //Add the low and high byte to the acc_z variable.
     c10:	8e e6       	ldi	r24, 0x6E	; 110
     c12:	92 e0       	ldi	r25, 0x02	; 2
     c14:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_ZN7TwoWire4readEv>
     c18:	c8 2f       	mov	r28, r24
     c1a:	8e e6       	ldi	r24, 0x6E	; 110
     c1c:	92 e0       	ldi	r25, 0x02	; 2
     c1e:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_ZN7TwoWire4readEv>
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	3c 2f       	mov	r19, r28
     c28:	82 2b       	or	r24, r18
     c2a:	93 2b       	or	r25, r19
     c2c:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <acc_axis+0x7>
     c30:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <acc_axis+0x6>
		temperature = Wire.read()<<8|Wire.read();                               //Add the low and high byte to the temperature variable.
     c34:	8e e6       	ldi	r24, 0x6E	; 110
     c36:	92 e0       	ldi	r25, 0x02	; 2
     c38:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_ZN7TwoWire4readEv>
     c3c:	c8 2f       	mov	r28, r24
     c3e:	8e e6       	ldi	r24, 0x6E	; 110
     c40:	92 e0       	ldi	r25, 0x02	; 2
     c42:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_ZN7TwoWire4readEv>
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	3c 2f       	mov	r19, r28
     c4c:	82 2b       	or	r24, r18
     c4e:	93 2b       	or	r25, r19
     c50:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <temperature+0x1>
     c54:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <temperature>
		gyro_axis[1] = Wire.read()<<8|Wire.read();                              //Read high and low part of the angular data.
     c58:	8e e6       	ldi	r24, 0x6E	; 110
     c5a:	92 e0       	ldi	r25, 0x02	; 2
     c5c:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_ZN7TwoWire4readEv>
     c60:	c8 2f       	mov	r28, r24
     c62:	8e e6       	ldi	r24, 0x6E	; 110
     c64:	92 e0       	ldi	r25, 0x02	; 2
     c66:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_ZN7TwoWire4readEv>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	3c 2f       	mov	r19, r28
     c70:	82 2b       	or	r24, r18
     c72:	93 2b       	or	r25, r19
     c74:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <gyro_axis+0x3>
     c78:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <gyro_axis+0x2>
		gyro_axis[2] = Wire.read()<<8|Wire.read();                              //Read high and low part of the angular data.
     c7c:	8e e6       	ldi	r24, 0x6E	; 110
     c7e:	92 e0       	ldi	r25, 0x02	; 2
     c80:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_ZN7TwoWire4readEv>
     c84:	c8 2f       	mov	r28, r24
     c86:	8e e6       	ldi	r24, 0x6E	; 110
     c88:	92 e0       	ldi	r25, 0x02	; 2
     c8a:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_ZN7TwoWire4readEv>
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	3c 2f       	mov	r19, r28
     c94:	82 2b       	or	r24, r18
     c96:	93 2b       	or	r25, r19
     c98:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <gyro_axis+0x5>
     c9c:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <gyro_axis+0x4>
		gyro_axis[3] = Wire.read()<<8|Wire.read();                              //Read high and low part of the angular data.
     ca0:	8e e6       	ldi	r24, 0x6E	; 110
     ca2:	92 e0       	ldi	r25, 0x02	; 2
     ca4:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_ZN7TwoWire4readEv>
     ca8:	c8 2f       	mov	r28, r24
     caa:	8e e6       	ldi	r24, 0x6E	; 110
     cac:	92 e0       	ldi	r25, 0x02	; 2
     cae:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_ZN7TwoWire4readEv>
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	3c 2f       	mov	r19, r28
     cb8:	82 2b       	or	r24, r18
     cba:	93 2b       	or	r25, r19
     cbc:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <gyro_axis+0x7>
     cc0:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <gyro_axis+0x6>
	}

	if(cal_int == 2000){
     cc4:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <cal_int>
     cc8:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <cal_int+0x1>
     ccc:	80 3d       	cpi	r24, 0xD0	; 208
     cce:	97 40       	sbci	r25, 0x07	; 7
     cd0:	09 f0       	breq	.+2      	; 0xcd4 <_Z8GyroReadv+0x1e8>
     cd2:	4e c0       	rjmp	.+156    	; 0xd70 <_Z8GyroReadv+0x284>
		gyro_axis[1] -= gyro_axis_cal[1];                                       //Only compensate after the calibration.
     cd4:	60 91 f1 01 	lds	r22, 0x01F1	; 0x8001f1 <gyro_axis+0x2>
     cd8:	70 91 f2 01 	lds	r23, 0x01F2	; 0x8001f2 <gyro_axis+0x3>
     cdc:	07 2e       	mov	r0, r23
     cde:	00 0c       	add	r0, r0
     ce0:	88 0b       	sbc	r24, r24
     ce2:	99 0b       	sbc	r25, r25
     ce4:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
     ce8:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <gyro_axis_cal+0x4>
     cec:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <gyro_axis_cal+0x5>
     cf0:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <gyro_axis_cal+0x6>
     cf4:	50 91 86 01 	lds	r21, 0x0186	; 0x800186 <gyro_axis_cal+0x7>
     cf8:	0e 94 89 11 	call	0x2312	; 0x2312 <__subsf3>
     cfc:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixsfsi>
     d00:	70 93 f2 01 	sts	0x01F2, r23	; 0x8001f2 <gyro_axis+0x3>
     d04:	60 93 f1 01 	sts	0x01F1, r22	; 0x8001f1 <gyro_axis+0x2>
		gyro_axis[2] -= gyro_axis_cal[2];                                       //Only compensate after the calibration.
     d08:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <gyro_axis+0x4>
     d0c:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <gyro_axis+0x5>
     d10:	07 2e       	mov	r0, r23
     d12:	00 0c       	add	r0, r0
     d14:	88 0b       	sbc	r24, r24
     d16:	99 0b       	sbc	r25, r25
     d18:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
     d1c:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <gyro_axis_cal+0x8>
     d20:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <gyro_axis_cal+0x9>
     d24:	40 91 89 01 	lds	r20, 0x0189	; 0x800189 <gyro_axis_cal+0xa>
     d28:	50 91 8a 01 	lds	r21, 0x018A	; 0x80018a <gyro_axis_cal+0xb>
     d2c:	0e 94 89 11 	call	0x2312	; 0x2312 <__subsf3>
     d30:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixsfsi>
     d34:	70 93 f4 01 	sts	0x01F4, r23	; 0x8001f4 <gyro_axis+0x5>
     d38:	60 93 f3 01 	sts	0x01F3, r22	; 0x8001f3 <gyro_axis+0x4>
		gyro_axis[3] -= gyro_axis_cal[3];                                       //Only compensate after the calibration.
     d3c:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <gyro_axis+0x6>
     d40:	70 91 f6 01 	lds	r23, 0x01F6	; 0x8001f6 <gyro_axis+0x7>
     d44:	07 2e       	mov	r0, r23
     d46:	00 0c       	add	r0, r0
     d48:	88 0b       	sbc	r24, r24
     d4a:	99 0b       	sbc	r25, r25
     d4c:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
     d50:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <gyro_axis_cal+0xc>
     d54:	30 91 8c 01 	lds	r19, 0x018C	; 0x80018c <gyro_axis_cal+0xd>
     d58:	40 91 8d 01 	lds	r20, 0x018D	; 0x80018d <gyro_axis_cal+0xe>
     d5c:	50 91 8e 01 	lds	r21, 0x018E	; 0x80018e <gyro_axis_cal+0xf>
     d60:	0e 94 89 11 	call	0x2312	; 0x2312 <__subsf3>
     d64:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixsfsi>
     d68:	70 93 f6 01 	sts	0x01F6, r23	; 0x8001f6 <gyro_axis+0x7>
     d6c:	60 93 f5 01 	sts	0x01F5, r22	; 0x8001f5 <gyro_axis+0x6>
	}
	gyro_roll = gyro_axis[eeprom_data[28] & 0b00000011];                      //Set gyro_roll to the correct axis that was stored in the EEPROM.
     d70:	c0 90 4d 02 	lds	r12, 0x024D	; 0x80024d <eeprom_data+0x1c>
     d74:	0c 2d       	mov	r16, r12
     d76:	03 70       	andi	r16, 0x03	; 3
     d78:	10 e0       	ldi	r17, 0x00	; 0
     d7a:	00 0f       	add	r16, r16
     d7c:	11 1f       	adc	r17, r17
     d7e:	f8 01       	movw	r30, r16
     d80:	e1 51       	subi	r30, 0x11	; 17
     d82:	fe 4f       	sbci	r31, 0xFE	; 254
     d84:	60 81       	ld	r22, Z
     d86:	71 81       	ldd	r23, Z+1	; 0x01
     d88:	07 2e       	mov	r0, r23
     d8a:	00 0c       	add	r0, r0
     d8c:	88 0b       	sbc	r24, r24
     d8e:	99 0b       	sbc	r25, r25
     d90:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
	if(eeprom_data[28] & 0b10000000)gyro_roll *= -1;                          //Invert gyro_roll if the MSB of EEPROM bit 28 is set.
     d94:	c7 fc       	sbrc	r12, 7
     d96:	09 c0       	rjmp	.+18     	; 0xdaa <_Z8GyroReadv+0x2be>
	if(cal_int == 2000){
		gyro_axis[1] -= gyro_axis_cal[1];                                       //Only compensate after the calibration.
		gyro_axis[2] -= gyro_axis_cal[2];                                       //Only compensate after the calibration.
		gyro_axis[3] -= gyro_axis_cal[3];                                       //Only compensate after the calibration.
	}
	gyro_roll = gyro_axis[eeprom_data[28] & 0b00000011];                      //Set gyro_roll to the correct axis that was stored in the EEPROM.
     d98:	60 93 93 01 	sts	0x0193, r22	; 0x800193 <gyro_roll>
     d9c:	70 93 94 01 	sts	0x0194, r23	; 0x800194 <gyro_roll+0x1>
     da0:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <gyro_roll+0x2>
     da4:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <gyro_roll+0x3>
     da8:	0b c0       	rjmp	.+22     	; 0xdc0 <_Z8GyroReadv+0x2d4>
	if(eeprom_data[28] & 0b10000000)gyro_roll *= -1;                          //Invert gyro_roll if the MSB of EEPROM bit 28 is set.
     daa:	dc 01       	movw	r26, r24
     dac:	cb 01       	movw	r24, r22
     dae:	b0 58       	subi	r27, 0x80	; 128
     db0:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <gyro_roll>
     db4:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <gyro_roll+0x1>
     db8:	a0 93 95 01 	sts	0x0195, r26	; 0x800195 <gyro_roll+0x2>
     dbc:	b0 93 96 01 	sts	0x0196, r27	; 0x800196 <gyro_roll+0x3>
	gyro_pitch = gyro_axis[eeprom_data[29] & 0b00000011];                     //Set gyro_pitch to the correct axis that was stored in the EEPROM.
     dc0:	b0 90 4e 02 	lds	r11, 0x024E	; 0x80024e <eeprom_data+0x1d>
     dc4:	8b 2d       	mov	r24, r11
     dc6:	83 70       	andi	r24, 0x03	; 3
     dc8:	e8 2e       	mov	r14, r24
     dca:	f1 2c       	mov	r15, r1
     dcc:	ee 0c       	add	r14, r14
     dce:	ff 1c       	adc	r15, r15
     dd0:	f7 01       	movw	r30, r14
     dd2:	e1 51       	subi	r30, 0x11	; 17
     dd4:	fe 4f       	sbci	r31, 0xFE	; 254
     dd6:	60 81       	ld	r22, Z
     dd8:	71 81       	ldd	r23, Z+1	; 0x01
     dda:	07 2e       	mov	r0, r23
     ddc:	00 0c       	add	r0, r0
     dde:	88 0b       	sbc	r24, r24
     de0:	99 0b       	sbc	r25, r25
     de2:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
	if(eeprom_data[29] & 0b10000000)gyro_pitch *= -1;                         //Invert gyro_pitch if the MSB of EEPROM bit 29 is set.
     de6:	b7 fc       	sbrc	r11, 7
     de8:	09 c0       	rjmp	.+18     	; 0xdfc <_Z8GyroReadv+0x310>
		gyro_axis[2] -= gyro_axis_cal[2];                                       //Only compensate after the calibration.
		gyro_axis[3] -= gyro_axis_cal[3];                                       //Only compensate after the calibration.
	}
	gyro_roll = gyro_axis[eeprom_data[28] & 0b00000011];                      //Set gyro_roll to the correct axis that was stored in the EEPROM.
	if(eeprom_data[28] & 0b10000000)gyro_roll *= -1;                          //Invert gyro_roll if the MSB of EEPROM bit 28 is set.
	gyro_pitch = gyro_axis[eeprom_data[29] & 0b00000011];                     //Set gyro_pitch to the correct axis that was stored in the EEPROM.
     dea:	60 93 97 01 	sts	0x0197, r22	; 0x800197 <gyro_pitch>
     dee:	70 93 98 01 	sts	0x0198, r23	; 0x800198 <gyro_pitch+0x1>
     df2:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <gyro_pitch+0x2>
     df6:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <gyro_pitch+0x3>
     dfa:	0b c0       	rjmp	.+22     	; 0xe12 <_Z8GyroReadv+0x326>
	if(eeprom_data[29] & 0b10000000)gyro_pitch *= -1;                         //Invert gyro_pitch if the MSB of EEPROM bit 29 is set.
     dfc:	dc 01       	movw	r26, r24
     dfe:	cb 01       	movw	r24, r22
     e00:	b0 58       	subi	r27, 0x80	; 128
     e02:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <gyro_pitch>
     e06:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <gyro_pitch+0x1>
     e0a:	a0 93 99 01 	sts	0x0199, r26	; 0x800199 <gyro_pitch+0x2>
     e0e:	b0 93 9a 01 	sts	0x019A, r27	; 0x80019a <gyro_pitch+0x3>
	gyro_yaw = gyro_axis[eeprom_data[30] & 0b00000011];                       //Set gyro_yaw to the correct axis that was stored in the EEPROM.
     e12:	d0 90 4f 02 	lds	r13, 0x024F	; 0x80024f <eeprom_data+0x1e>
     e16:	cd 2d       	mov	r28, r13
     e18:	c3 70       	andi	r28, 0x03	; 3
     e1a:	d0 e0       	ldi	r29, 0x00	; 0
     e1c:	cc 0f       	add	r28, r28
     e1e:	dd 1f       	adc	r29, r29
     e20:	fe 01       	movw	r30, r28
     e22:	e1 51       	subi	r30, 0x11	; 17
     e24:	fe 4f       	sbci	r31, 0xFE	; 254
     e26:	60 81       	ld	r22, Z
     e28:	71 81       	ldd	r23, Z+1	; 0x01
     e2a:	07 2e       	mov	r0, r23
     e2c:	00 0c       	add	r0, r0
     e2e:	88 0b       	sbc	r24, r24
     e30:	99 0b       	sbc	r25, r25
     e32:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
	if(eeprom_data[30] & 0b10000000)gyro_yaw *= -1;                           //Invert gyro_yaw if the MSB of EEPROM bit 30 is set.
     e36:	d7 fc       	sbrc	r13, 7
     e38:	09 c0       	rjmp	.+18     	; 0xe4c <_Z8GyroReadv+0x360>
	}
	gyro_roll = gyro_axis[eeprom_data[28] & 0b00000011];                      //Set gyro_roll to the correct axis that was stored in the EEPROM.
	if(eeprom_data[28] & 0b10000000)gyro_roll *= -1;                          //Invert gyro_roll if the MSB of EEPROM bit 28 is set.
	gyro_pitch = gyro_axis[eeprom_data[29] & 0b00000011];                     //Set gyro_pitch to the correct axis that was stored in the EEPROM.
	if(eeprom_data[29] & 0b10000000)gyro_pitch *= -1;                         //Invert gyro_pitch if the MSB of EEPROM bit 29 is set.
	gyro_yaw = gyro_axis[eeprom_data[30] & 0b00000011];                       //Set gyro_yaw to the correct axis that was stored in the EEPROM.
     e3a:	60 93 8f 01 	sts	0x018F, r22	; 0x80018f <gyro_yaw>
     e3e:	70 93 90 01 	sts	0x0190, r23	; 0x800190 <gyro_yaw+0x1>
     e42:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <gyro_yaw+0x2>
     e46:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <gyro_yaw+0x3>
     e4a:	0b c0       	rjmp	.+22     	; 0xe62 <_Z8GyroReadv+0x376>
	if(eeprom_data[30] & 0b10000000)gyro_yaw *= -1;                           //Invert gyro_yaw if the MSB of EEPROM bit 30 is set.
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	b0 58       	subi	r27, 0x80	; 128
     e52:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <gyro_yaw>
     e56:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <gyro_yaw+0x1>
     e5a:	a0 93 91 01 	sts	0x0191, r26	; 0x800191 <gyro_yaw+0x2>
     e5e:	b0 93 92 01 	sts	0x0192, r27	; 0x800192 <gyro_yaw+0x3>

	acc_x = acc_axis[eeprom_data[29] & 0b00000011];                           //Set acc_x to the correct axis that was stored in the EEPROM.
     e62:	f7 01       	movw	r30, r14
     e64:	e9 50       	subi	r30, 0x09	; 9
     e66:	fe 4f       	sbci	r31, 0xFE	; 254
     e68:	80 81       	ld	r24, Z
     e6a:	91 81       	ldd	r25, Z+1	; 0x01
     e6c:	09 2e       	mov	r0, r25
     e6e:	00 0c       	add	r0, r0
     e70:	aa 0b       	sbc	r26, r26
     e72:	bb 0b       	sbc	r27, r27
	if(eeprom_data[29] & 0b10000000)acc_x *= -1;                              //Invert acc_x if the MSB of EEPROM bit 29 is set.
     e74:	b7 fe       	sbrs	r11, 7
     e76:	07 c0       	rjmp	.+14     	; 0xe86 <_Z8GyroReadv+0x39a>
     e78:	b0 95       	com	r27
     e7a:	a0 95       	com	r26
     e7c:	90 95       	com	r25
     e7e:	81 95       	neg	r24
     e80:	9f 4f       	sbci	r25, 0xFF	; 255
     e82:	af 4f       	sbci	r26, 0xFF	; 255
     e84:	bf 4f       	sbci	r27, 0xFF	; 255
     e86:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <acc_x>
     e8a:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <acc_x+0x1>
     e8e:	a0 93 e5 01 	sts	0x01E5, r26	; 0x8001e5 <acc_x+0x2>
     e92:	b0 93 e6 01 	sts	0x01E6, r27	; 0x8001e6 <acc_x+0x3>
	acc_y = acc_axis[eeprom_data[28] & 0b00000011];                           //Set acc_y to the correct axis that was stored in the EEPROM.
     e96:	f8 01       	movw	r30, r16
     e98:	e9 50       	subi	r30, 0x09	; 9
     e9a:	fe 4f       	sbci	r31, 0xFE	; 254
     e9c:	80 81       	ld	r24, Z
     e9e:	91 81       	ldd	r25, Z+1	; 0x01
     ea0:	09 2e       	mov	r0, r25
     ea2:	00 0c       	add	r0, r0
     ea4:	aa 0b       	sbc	r26, r26
     ea6:	bb 0b       	sbc	r27, r27
	if(eeprom_data[28] & 0b10000000)acc_y *= -1;                              //Invert acc_y if the MSB of EEPROM bit 28 is set.
     ea8:	c7 fe       	sbrs	r12, 7
     eaa:	07 c0       	rjmp	.+14     	; 0xeba <_Z8GyroReadv+0x3ce>
     eac:	b0 95       	com	r27
     eae:	a0 95       	com	r26
     eb0:	90 95       	com	r25
     eb2:	81 95       	neg	r24
     eb4:	9f 4f       	sbci	r25, 0xFF	; 255
     eb6:	af 4f       	sbci	r26, 0xFF	; 255
     eb8:	bf 4f       	sbci	r27, 0xFF	; 255
     eba:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <acc_y>
     ebe:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <acc_y+0x1>
     ec2:	a0 93 e1 01 	sts	0x01E1, r26	; 0x8001e1 <acc_y+0x2>
     ec6:	b0 93 e2 01 	sts	0x01E2, r27	; 0x8001e2 <acc_y+0x3>
	acc_z = acc_axis[eeprom_data[30] & 0b00000011];                           //Set acc_z to the correct axis that was stored in the EEPROM.
     eca:	c9 50       	subi	r28, 0x09	; 9
     ecc:	de 4f       	sbci	r29, 0xFE	; 254
     ece:	88 81       	ld	r24, Y
     ed0:	99 81       	ldd	r25, Y+1	; 0x01
     ed2:	09 2e       	mov	r0, r25
     ed4:	00 0c       	add	r0, r0
     ed6:	aa 0b       	sbc	r26, r26
     ed8:	bb 0b       	sbc	r27, r27
	if(eeprom_data[30] & 0b10000000)acc_z *= -1;                              //Invert acc_z if the MSB of EEPROM bit 30 is set.
     eda:	d7 fe       	sbrs	r13, 7
     edc:	07 c0       	rjmp	.+14     	; 0xeec <_Z8GyroReadv+0x400>
     ede:	b0 95       	com	r27
     ee0:	a0 95       	com	r26
     ee2:	90 95       	com	r25
     ee4:	81 95       	neg	r24
     ee6:	9f 4f       	sbci	r25, 0xFF	; 255
     ee8:	af 4f       	sbci	r26, 0xFF	; 255
     eea:	bf 4f       	sbci	r27, 0xFF	; 255
     eec:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <acc_z>
     ef0:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <acc_z+0x1>
     ef4:	a0 93 dd 01 	sts	0x01DD, r26	; 0x8001dd <acc_z+0x2>
     ef8:	b0 93 de 01 	sts	0x01DE, r27	; 0x8001de <acc_z+0x3>
}
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	1f 91       	pop	r17
     f02:	0f 91       	pop	r16
     f04:	ff 90       	pop	r15
     f06:	ef 90       	pop	r14
     f08:	df 90       	pop	r13
     f0a:	cf 90       	pop	r12
     f0c:	bf 90       	pop	r11
     f0e:	08 95       	ret

00000f10 <loop>:
	return ((curval - 1500) / 850) * maxDelta + startVal;
}
int ledWaringcounter =0;
bool threshold_started = false;

void loop(){
     f10:	4f 92       	push	r4
     f12:	5f 92       	push	r5
     f14:	6f 92       	push	r6
     f16:	7f 92       	push	r7
     f18:	8f 92       	push	r8
     f1a:	9f 92       	push	r9
     f1c:	af 92       	push	r10
     f1e:	bf 92       	push	r11
     f20:	cf 92       	push	r12
     f22:	df 92       	push	r13
     f24:	ef 92       	push	r14
     f26:	ff 92       	push	r15
     f28:	0f 93       	push	r16
     f2a:	1f 93       	push	r17
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	2a 97       	sbiw	r28, 0x0a	; 10
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61

	if (voltageealarm == false) digitalWrite(LED_LIGHT_PIN,HIGH);
     f40:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <voltageealarm>
     f44:	81 11       	cpse	r24, r1
     f46:	04 c0       	rjmp	.+8      	; 0xf50 <loop+0x40>
     f48:	61 e0       	ldi	r22, 0x01	; 1
     f4a:	8f e0       	ldi	r24, 0x0F	; 15
     f4c:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <digitalWrite>
	if (receiver_input_channel_7 < 1300 && (voltageealarm == false)) digitalWrite(LED_LIGHT_PIN, LOW);
     f50:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <receiver_input_channel_7>
     f54:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <receiver_input_channel_7+0x1>
     f58:	84 31       	cpi	r24, 0x14	; 20
     f5a:	95 40       	sbci	r25, 0x05	; 5
     f5c:	2c f4       	brge	.+10     	; 0xf68 <loop+0x58>
     f5e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <voltageealarm>
     f62:	88 23       	and	r24, r24
     f64:	09 f4       	brne	.+2      	; 0xf68 <loop+0x58>
     f66:	54 c6       	rjmp	.+3240   	; 0x1c10 <loop+0xd00>

	//65.5 = 1 deg/sec (check the datasheet of the MPU-6050 for more information).
	gyro_roll_input = (gyro_roll_input * 0.7) + ((gyro_roll / 65.5) * 0.3);   //Gyro pid input is deg/sec.
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	43 e8       	ldi	r20, 0x83	; 131
     f6e:	52 e4       	ldi	r21, 0x42	; 66
     f70:	60 91 93 01 	lds	r22, 0x0193	; 0x800193 <gyro_roll>
     f74:	70 91 94 01 	lds	r23, 0x0194	; 0x800194 <gyro_roll+0x1>
     f78:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <gyro_roll+0x2>
     f7c:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <gyro_roll+0x3>
     f80:	0e 94 16 12 	call	0x242c	; 0x242c <__divsf3>
     f84:	2a e9       	ldi	r18, 0x9A	; 154
     f86:	39 e9       	ldi	r19, 0x99	; 153
     f88:	49 e9       	ldi	r20, 0x99	; 153
     f8a:	5e e3       	ldi	r21, 0x3E	; 62
     f8c:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
     f90:	6b 01       	movw	r12, r22
     f92:	7c 01       	movw	r14, r24
     f94:	23 e3       	ldi	r18, 0x33	; 51
     f96:	33 e3       	ldi	r19, 0x33	; 51
     f98:	43 e3       	ldi	r20, 0x33	; 51
     f9a:	5f e3       	ldi	r21, 0x3F	; 63
     f9c:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <gyro_roll_input>
     fa0:	70 91 70 01 	lds	r23, 0x0170	; 0x800170 <gyro_roll_input+0x1>
     fa4:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <gyro_roll_input+0x2>
     fa8:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <gyro_roll_input+0x3>
     fac:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
     fb0:	9b 01       	movw	r18, r22
     fb2:	ac 01       	movw	r20, r24
     fb4:	c7 01       	movw	r24, r14
     fb6:	b6 01       	movw	r22, r12
     fb8:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
     fbc:	60 93 6f 01 	sts	0x016F, r22	; 0x80016f <gyro_roll_input>
     fc0:	70 93 70 01 	sts	0x0170, r23	; 0x800170 <gyro_roll_input+0x1>
     fc4:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <gyro_roll_input+0x2>
     fc8:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <gyro_roll_input+0x3>
	if (receiver_input_channel_7 < 1333 && (voltageealarm == false)) digitalWrite(LED_LIGHT_PIN, LOW);
     fcc:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <receiver_input_channel_7>
     fd0:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <receiver_input_channel_7+0x1>
     fd4:	85 33       	cpi	r24, 0x35	; 53
     fd6:	95 40       	sbci	r25, 0x05	; 5
     fd8:	2c f4       	brge	.+10     	; 0xfe4 <loop+0xd4>
     fda:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <voltageealarm>
     fde:	88 23       	and	r24, r24
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <loop+0xd4>
     fe2:	1b c6       	rjmp	.+3126   	; 0x1c1a <loop+0xd0a>
	gyro_pitch_input = (gyro_pitch_input * 0.7) + ((gyro_pitch / 65.5) * 0.3);//Gyro pid input is deg/sec.
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	43 e8       	ldi	r20, 0x83	; 131
     fea:	52 e4       	ldi	r21, 0x42	; 66
     fec:	60 91 97 01 	lds	r22, 0x0197	; 0x800197 <gyro_pitch>
     ff0:	70 91 98 01 	lds	r23, 0x0198	; 0x800198 <gyro_pitch+0x1>
     ff4:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <gyro_pitch+0x2>
     ff8:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <gyro_pitch+0x3>
     ffc:	0e 94 16 12 	call	0x242c	; 0x242c <__divsf3>
    1000:	2a e9       	ldi	r18, 0x9A	; 154
    1002:	39 e9       	ldi	r19, 0x99	; 153
    1004:	49 e9       	ldi	r20, 0x99	; 153
    1006:	5e e3       	ldi	r21, 0x3E	; 62
    1008:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
    100c:	6b 01       	movw	r12, r22
    100e:	7c 01       	movw	r14, r24
    1010:	23 e3       	ldi	r18, 0x33	; 51
    1012:	33 e3       	ldi	r19, 0x33	; 51
    1014:	43 e3       	ldi	r20, 0x33	; 51
    1016:	5f e3       	ldi	r21, 0x3F	; 63
    1018:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <gyro_pitch_input>
    101c:	70 91 5c 01 	lds	r23, 0x015C	; 0x80015c <gyro_pitch_input+0x1>
    1020:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <gyro_pitch_input+0x2>
    1024:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <gyro_pitch_input+0x3>
    1028:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
    102c:	9b 01       	movw	r18, r22
    102e:	ac 01       	movw	r20, r24
    1030:	c7 01       	movw	r24, r14
    1032:	b6 01       	movw	r22, r12
    1034:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
    1038:	60 93 5b 01 	sts	0x015B, r22	; 0x80015b <gyro_pitch_input>
    103c:	70 93 5c 01 	sts	0x015C, r23	; 0x80015c <gyro_pitch_input+0x1>
    1040:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <gyro_pitch_input+0x2>
    1044:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <gyro_pitch_input+0x3>
	gyro_yaw_input = (gyro_yaw_input * 0.7) + ((gyro_yaw / 65.5) * 0.3);      //Gyro pid input is deg/sec.
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	43 e8       	ldi	r20, 0x83	; 131
    104e:	52 e4       	ldi	r21, 0x42	; 66
    1050:	60 91 8f 01 	lds	r22, 0x018F	; 0x80018f <gyro_yaw>
    1054:	70 91 90 01 	lds	r23, 0x0190	; 0x800190 <gyro_yaw+0x1>
    1058:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <gyro_yaw+0x2>
    105c:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <gyro_yaw+0x3>
    1060:	0e 94 16 12 	call	0x242c	; 0x242c <__divsf3>
    1064:	2a e9       	ldi	r18, 0x9A	; 154
    1066:	39 e9       	ldi	r19, 0x99	; 153
    1068:	49 e9       	ldi	r20, 0x99	; 153
    106a:	5e e3       	ldi	r21, 0x3E	; 62
    106c:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
    1070:	6b 01       	movw	r12, r22
    1072:	7c 01       	movw	r14, r24
    1074:	23 e3       	ldi	r18, 0x33	; 51
    1076:	33 e3       	ldi	r19, 0x33	; 51
    1078:	43 e3       	ldi	r20, 0x33	; 51
    107a:	5f e3       	ldi	r21, 0x3F	; 63
    107c:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <gyro_yaw_input>
    1080:	70 91 48 01 	lds	r23, 0x0148	; 0x800148 <gyro_yaw_input+0x1>
    1084:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <gyro_yaw_input+0x2>
    1088:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <gyro_yaw_input+0x3>
    108c:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
    1090:	9b 01       	movw	r18, r22
    1092:	ac 01       	movw	r20, r24
    1094:	c7 01       	movw	r24, r14
    1096:	b6 01       	movw	r22, r12
    1098:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
    109c:	60 93 47 01 	sts	0x0147, r22	; 0x800147 <gyro_yaw_input>
    10a0:	70 93 48 01 	sts	0x0148, r23	; 0x800148 <gyro_yaw_input+0x1>
    10a4:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <gyro_yaw_input+0x2>
    10a8:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <gyro_yaw_input+0x3>

	if (receiver_input_channel_7 < 1400 && (voltageealarm == false)) digitalWrite(LED_LIGHT_PIN, LOW);
    10ac:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <receiver_input_channel_7>
    10b0:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <receiver_input_channel_7+0x1>
    10b4:	88 37       	cpi	r24, 0x78	; 120
    10b6:	95 40       	sbci	r25, 0x05	; 5
    10b8:	2c f4       	brge	.+10     	; 0x10c4 <loop+0x1b4>
    10ba:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <voltageealarm>
    10be:	88 23       	and	r24, r24
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <loop+0x1b4>
    10c2:	b0 c5       	rjmp	.+2912   	; 0x1c24 <loop+0xd14>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	//Gyro angle calculations
	//0.0000611 = 1 / (250Hz / 65.5)
	angle_pitch += gyro_pitch * 0.0000611;                                    //Calculate the traveled pitch angle and add this to the angle_pitch variable.
	angle_roll += gyro_roll * 0.0000611;                                      //Calculate the traveled roll angle and add this to the angle_roll variable.
    10c4:	20 ed       	ldi	r18, 0xD0	; 208
    10c6:	32 e2       	ldi	r19, 0x22	; 34
    10c8:	40 e8       	ldi	r20, 0x80	; 128
    10ca:	58 e3       	ldi	r21, 0x38	; 56
    10cc:	60 91 93 01 	lds	r22, 0x0193	; 0x800193 <gyro_roll>
    10d0:	70 91 94 01 	lds	r23, 0x0194	; 0x800194 <gyro_roll+0x1>
    10d4:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <gyro_roll+0x2>
    10d8:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <gyro_roll+0x3>
    10dc:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
    10e0:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <angle_roll>
    10e4:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <angle_roll+0x1>
    10e8:	40 91 31 01 	lds	r20, 0x0131	; 0x800131 <angle_roll+0x2>
    10ec:	50 91 32 01 	lds	r21, 0x0132	; 0x800132 <angle_roll+0x3>
    10f0:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
    10f4:	6b 01       	movw	r12, r22
    10f6:	7c 01       	movw	r14, r24

	//0.000001066 = 0.0000611 * (3.142(PI) / 180degr) The Arduino sin function is in radians
	angle_pitch -= angle_roll * sin(gyro_yaw * 0.000001066);                  //If the IMU has yawed transfer the roll angle to the pitch angel.
    10f8:	2b e7       	ldi	r18, 0x7B	; 123
    10fa:	33 e1       	ldi	r19, 0x13	; 19
    10fc:	4f e8       	ldi	r20, 0x8F	; 143
    10fe:	55 e3       	ldi	r21, 0x35	; 53
    1100:	60 91 8f 01 	lds	r22, 0x018F	; 0x80018f <gyro_yaw>
    1104:	70 91 90 01 	lds	r23, 0x0190	; 0x800190 <gyro_yaw+0x1>
    1108:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <gyro_yaw+0x2>
    110c:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <gyro_yaw+0x3>
    1110:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
    1114:	0e 94 3d 14 	call	0x287a	; 0x287a <sin>
    1118:	4b 01       	movw	r8, r22
    111a:	5c 01       	movw	r10, r24
    111c:	20 ed       	ldi	r18, 0xD0	; 208
    111e:	32 e2       	ldi	r19, 0x22	; 34
    1120:	40 e8       	ldi	r20, 0x80	; 128
    1122:	58 e3       	ldi	r21, 0x38	; 56
    1124:	60 91 97 01 	lds	r22, 0x0197	; 0x800197 <gyro_pitch>
    1128:	70 91 98 01 	lds	r23, 0x0198	; 0x800198 <gyro_pitch+0x1>
    112c:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <gyro_pitch+0x2>
    1130:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <gyro_pitch+0x3>
    1134:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
    1138:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <angle_pitch>
    113c:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <angle_pitch+0x1>
    1140:	40 91 35 01 	lds	r20, 0x0135	; 0x800135 <angle_pitch+0x2>
    1144:	50 91 36 01 	lds	r21, 0x0136	; 0x800136 <angle_pitch+0x3>
    1148:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
    114c:	2b 01       	movw	r4, r22
    114e:	3c 01       	movw	r6, r24
    1150:	a5 01       	movw	r20, r10
    1152:	94 01       	movw	r18, r8
    1154:	c7 01       	movw	r24, r14
    1156:	b6 01       	movw	r22, r12
    1158:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
    115c:	9b 01       	movw	r18, r22
    115e:	ac 01       	movw	r20, r24
    1160:	c3 01       	movw	r24, r6
    1162:	b2 01       	movw	r22, r4
    1164:	0e 94 89 11 	call	0x2312	; 0x2312 <__subsf3>
    1168:	9b 01       	movw	r18, r22
    116a:	ac 01       	movw	r20, r24
    116c:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <angle_pitch>
    1170:	70 93 34 01 	sts	0x0134, r23	; 0x800134 <angle_pitch+0x1>
    1174:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <angle_pitch+0x2>
    1178:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <angle_pitch+0x3>
	angle_roll += angle_pitch * sin(gyro_yaw * 0.000001066);                  //If the IMU has yawed transfer the pitch angle to the roll angel.
    117c:	c5 01       	movw	r24, r10
    117e:	b4 01       	movw	r22, r8
    1180:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
    1184:	a7 01       	movw	r20, r14
    1186:	96 01       	movw	r18, r12
    1188:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
    118c:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <angle_roll>
    1190:	70 93 30 01 	sts	0x0130, r23	; 0x800130 <angle_roll+0x1>
    1194:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <angle_roll+0x2>
    1198:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <angle_roll+0x3>
	if (receiver_input_channel_7 < 1433 && (voltageealarm == false)) digitalWrite(LED_LIGHT_PIN, LOW);
    119c:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <receiver_input_channel_7>
    11a0:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <receiver_input_channel_7+0x1>
    11a4:	89 39       	cpi	r24, 0x99	; 153
    11a6:	95 40       	sbci	r25, 0x05	; 5
    11a8:	2c f4       	brge	.+10     	; 0x11b4 <loop+0x2a4>
    11aa:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <voltageealarm>
    11ae:	88 23       	and	r24, r24
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <loop+0x2a4>
    11b2:	3d c5       	rjmp	.+2682   	; 0x1c2e <loop+0xd1e>
	

	//Accelerometer angle calculations
	acc_total_vector = sqrt((acc_x*acc_x)+(acc_y*acc_y)+(acc_z*acc_z));       //Calculate the total accelerometer vector.
    11b4:	c0 90 e3 01 	lds	r12, 0x01E3	; 0x8001e3 <acc_x>
    11b8:	d0 90 e4 01 	lds	r13, 0x01E4	; 0x8001e4 <acc_x+0x1>
    11bc:	e0 90 e5 01 	lds	r14, 0x01E5	; 0x8001e5 <acc_x+0x2>
    11c0:	f0 90 e6 01 	lds	r15, 0x01E6	; 0x8001e6 <acc_x+0x3>
    11c4:	80 90 df 01 	lds	r8, 0x01DF	; 0x8001df <acc_y>
    11c8:	90 90 e0 01 	lds	r9, 0x01E0	; 0x8001e0 <acc_y+0x1>
    11cc:	a0 90 e1 01 	lds	r10, 0x01E1	; 0x8001e1 <acc_y+0x2>
    11d0:	b0 90 e2 01 	lds	r11, 0x01E2	; 0x8001e2 <acc_y+0x3>
    11d4:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <acc_z>
    11d8:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <acc_z+0x1>
    11dc:	a0 91 dd 01 	lds	r26, 0x01DD	; 0x8001dd <acc_z+0x2>
    11e0:	b0 91 de 01 	lds	r27, 0x01DE	; 0x8001de <acc_z+0x3>
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	9a 83       	std	Y+2, r25	; 0x02
    11e8:	ab 83       	std	Y+3, r26	; 0x03
    11ea:	bc 83       	std	Y+4, r27	; 0x04
    11ec:	a7 01       	movw	r20, r14
    11ee:	96 01       	movw	r18, r12
    11f0:	c7 01       	movw	r24, r14
    11f2:	b6 01       	movw	r22, r12
    11f4:	0e 94 1a 1a 	call	0x3434	; 0x3434 <__mulsi3>
    11f8:	2b 01       	movw	r4, r22
    11fa:	3c 01       	movw	r6, r24
    11fc:	a5 01       	movw	r20, r10
    11fe:	94 01       	movw	r18, r8
    1200:	c5 01       	movw	r24, r10
    1202:	b4 01       	movw	r22, r8
    1204:	0e 94 1a 1a 	call	0x3434	; 0x3434 <__mulsi3>
    1208:	46 0e       	add	r4, r22
    120a:	57 1e       	adc	r5, r23
    120c:	68 1e       	adc	r6, r24
    120e:	79 1e       	adc	r7, r25
    1210:	29 81       	ldd	r18, Y+1	; 0x01
    1212:	3a 81       	ldd	r19, Y+2	; 0x02
    1214:	4b 81       	ldd	r20, Y+3	; 0x03
    1216:	5c 81       	ldd	r21, Y+4	; 0x04
    1218:	ca 01       	movw	r24, r20
    121a:	b9 01       	movw	r22, r18
    121c:	0e 94 1a 1a 	call	0x3434	; 0x3434 <__mulsi3>
    1220:	64 0d       	add	r22, r4
    1222:	75 1d       	adc	r23, r5
    1224:	86 1d       	adc	r24, r6
    1226:	97 1d       	adc	r25, r7
    1228:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
    122c:	0e 94 4b 14 	call	0x2896	; 0x2896 <sqrt>
    1230:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixsfsi>
    1234:	2b 01       	movw	r4, r22
    1236:	3c 01       	movw	r6, r24
    1238:	60 93 d7 01 	sts	0x01D7, r22	; 0x8001d7 <acc_total_vector>
    123c:	70 93 d8 01 	sts	0x01D8, r23	; 0x8001d8 <acc_total_vector+0x1>
    1240:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <acc_total_vector+0x2>
    1244:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <acc_total_vector+0x3>
	
	// 57.296 = 1 / (3.142 / 180)
	if(abs(acc_y) < acc_total_vector){                                        //Prevent the asin function to produce a NaN
    1248:	d5 01       	movw	r26, r10
    124a:	c4 01       	movw	r24, r8
    124c:	b7 fe       	sbrs	r11, 7
    124e:	07 c0       	rjmp	.+14     	; 0x125e <loop+0x34e>
    1250:	88 27       	eor	r24, r24
    1252:	99 27       	eor	r25, r25
    1254:	dc 01       	movw	r26, r24
    1256:	88 19       	sub	r24, r8
    1258:	99 09       	sbc	r25, r9
    125a:	aa 09       	sbc	r26, r10
    125c:	bb 09       	sbc	r27, r11
    125e:	84 15       	cp	r24, r4
    1260:	95 05       	cpc	r25, r5
    1262:	a6 05       	cpc	r26, r6
    1264:	b7 05       	cpc	r27, r7
    1266:	04 f5       	brge	.+64     	; 0x12a8 <loop+0x398>
		angle_pitch_acc = asin((float)acc_y/acc_total_vector)* 57.296;          //Calculate the pitch angle.
    1268:	c5 01       	movw	r24, r10
    126a:	b4 01       	movw	r22, r8
    126c:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
    1270:	4b 01       	movw	r8, r22
    1272:	5c 01       	movw	r10, r24
    1274:	c3 01       	movw	r24, r6
    1276:	b2 01       	movw	r22, r4
    1278:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
    127c:	9b 01       	movw	r18, r22
    127e:	ac 01       	movw	r20, r24
    1280:	c5 01       	movw	r24, r10
    1282:	b4 01       	movw	r22, r8
    1284:	0e 94 16 12 	call	0x242c	; 0x242c <__divsf3>
    1288:	0e 94 f6 11 	call	0x23ec	; 0x23ec <asin>
    128c:	2b e1       	ldi	r18, 0x1B	; 27
    128e:	3f e2       	ldi	r19, 0x2F	; 47
    1290:	45 e6       	ldi	r20, 0x65	; 101
    1292:	52 e4       	ldi	r21, 0x42	; 66
    1294:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
    1298:	60 93 37 01 	sts	0x0137, r22	; 0x800137 <angle_pitch_acc>
    129c:	70 93 38 01 	sts	0x0138, r23	; 0x800138 <angle_pitch_acc+0x1>
    12a0:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <angle_pitch_acc+0x2>
    12a4:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <angle_pitch_acc+0x3>
	}
	if(abs(acc_x) < acc_total_vector){                                        //Prevent the asin function to produce a NaN
    12a8:	d7 01       	movw	r26, r14
    12aa:	c6 01       	movw	r24, r12
    12ac:	f7 fe       	sbrs	r15, 7
    12ae:	07 c0       	rjmp	.+14     	; 0x12be <loop+0x3ae>
    12b0:	88 27       	eor	r24, r24
    12b2:	99 27       	eor	r25, r25
    12b4:	dc 01       	movw	r26, r24
    12b6:	8c 19       	sub	r24, r12
    12b8:	9d 09       	sbc	r25, r13
    12ba:	ae 09       	sbc	r26, r14
    12bc:	bf 09       	sbc	r27, r15
    12be:	84 15       	cp	r24, r4
    12c0:	95 05       	cpc	r25, r5
    12c2:	a6 05       	cpc	r26, r6
    12c4:	b7 05       	cpc	r27, r7
    12c6:	04 f5       	brge	.+64     	; 0x1308 <loop+0x3f8>
		angle_roll_acc = asin((float)acc_x/acc_total_vector)* -57.296;          //Calculate the roll angle.
    12c8:	c7 01       	movw	r24, r14
    12ca:	b6 01       	movw	r22, r12
    12cc:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
    12d0:	6b 01       	movw	r12, r22
    12d2:	7c 01       	movw	r14, r24
    12d4:	c3 01       	movw	r24, r6
    12d6:	b2 01       	movw	r22, r4
    12d8:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
    12dc:	9b 01       	movw	r18, r22
    12de:	ac 01       	movw	r20, r24
    12e0:	c7 01       	movw	r24, r14
    12e2:	b6 01       	movw	r22, r12
    12e4:	0e 94 16 12 	call	0x242c	; 0x242c <__divsf3>
    12e8:	0e 94 f6 11 	call	0x23ec	; 0x23ec <asin>
    12ec:	2b e1       	ldi	r18, 0x1B	; 27
    12ee:	3f e2       	ldi	r19, 0x2F	; 47
    12f0:	45 e6       	ldi	r20, 0x65	; 101
    12f2:	52 ec       	ldi	r21, 0xC2	; 194
    12f4:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
    12f8:	60 93 3b 01 	sts	0x013B, r22	; 0x80013b <angle_roll_acc>
    12fc:	70 93 3c 01 	sts	0x013C, r23	; 0x80013c <angle_roll_acc+0x1>
    1300:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <angle_roll_acc+0x2>
    1304:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <angle_roll_acc+0x3>
	}
	

	//Place the MPU-6050 spirit level and note the values in the following two lines for calibration.
	angle_pitch_acc -= 2.0;
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e0       	ldi	r20, 0x00	; 0
    130e:	50 e4       	ldi	r21, 0x40	; 64
    1310:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <angle_pitch_acc>
    1314:	70 91 38 01 	lds	r23, 0x0138	; 0x800138 <angle_pitch_acc+0x1>
    1318:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <angle_pitch_acc+0x2>
    131c:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <angle_pitch_acc+0x3>
    1320:	0e 94 89 11 	call	0x2312	; 0x2312 <__subsf3>
    1324:	4b 01       	movw	r8, r22
    1326:	5c 01       	movw	r10, r24
    1328:	60 93 37 01 	sts	0x0137, r22	; 0x800137 <angle_pitch_acc>
    132c:	70 93 38 01 	sts	0x0138, r23	; 0x800138 <angle_pitch_acc+0x1>
    1330:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <angle_pitch_acc+0x2>
    1334:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <angle_pitch_acc+0x3>
	angle_roll_acc += 5.5;                                          //Accelerometer calibration value for roll.
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	40 eb       	ldi	r20, 0xB0	; 176
    133e:	50 e4       	ldi	r21, 0x40	; 64
    1340:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <angle_roll_acc>
    1344:	70 91 3c 01 	lds	r23, 0x013C	; 0x80013c <angle_roll_acc+0x1>
    1348:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <angle_roll_acc+0x2>
    134c:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <angle_roll_acc+0x3>
    1350:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
    1354:	6b 01       	movw	r12, r22
    1356:	7c 01       	movw	r14, r24
    1358:	60 93 3b 01 	sts	0x013B, r22	; 0x80013b <angle_roll_acc>
    135c:	70 93 3c 01 	sts	0x013C, r23	; 0x80013c <angle_roll_acc+0x1>
    1360:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <angle_roll_acc+0x2>
    1364:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <angle_roll_acc+0x3>
	
	angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;            //Correct the drift of the gyro pitch angle with the accelerometer pitch angle.
    1368:	29 ec       	ldi	r18, 0xC9	; 201
    136a:	35 ee       	ldi	r19, 0xE5	; 229
    136c:	4f e7       	ldi	r20, 0x7F	; 127
    136e:	5f e3       	ldi	r21, 0x3F	; 63
    1370:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <angle_pitch>
    1374:	70 91 34 01 	lds	r23, 0x0134	; 0x800134 <angle_pitch+0x1>
    1378:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <angle_pitch+0x2>
    137c:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <angle_pitch+0x3>
    1380:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
    1384:	2b 01       	movw	r4, r22
    1386:	3c 01       	movw	r6, r24
    1388:	27 e1       	ldi	r18, 0x17	; 23
    138a:	37 eb       	ldi	r19, 0xB7	; 183
    138c:	41 ed       	ldi	r20, 0xD1	; 209
    138e:	59 e3       	ldi	r21, 0x39	; 57
    1390:	c5 01       	movw	r24, r10
    1392:	b4 01       	movw	r22, r8
    1394:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
    1398:	9b 01       	movw	r18, r22
    139a:	ac 01       	movw	r20, r24
    139c:	c3 01       	movw	r24, r6
    139e:	b2 01       	movw	r22, r4
    13a0:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
    13a4:	4b 01       	movw	r8, r22
    13a6:	5c 01       	movw	r10, r24
    13a8:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <angle_pitch>
    13ac:	70 93 34 01 	sts	0x0134, r23	; 0x800134 <angle_pitch+0x1>
    13b0:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <angle_pitch+0x2>
    13b4:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <angle_pitch+0x3>
	angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;               //Correct the drift of the gyro roll angle with the accelerometer roll angle.
    13b8:	29 ec       	ldi	r18, 0xC9	; 201
    13ba:	35 ee       	ldi	r19, 0xE5	; 229
    13bc:	4f e7       	ldi	r20, 0x7F	; 127
    13be:	5f e3       	ldi	r21, 0x3F	; 63
    13c0:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <angle_roll>
    13c4:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <angle_roll+0x1>
    13c8:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <angle_roll+0x2>
    13cc:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <angle_roll+0x3>
    13d0:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
    13d4:	2b 01       	movw	r4, r22
    13d6:	3c 01       	movw	r6, r24
    13d8:	27 e1       	ldi	r18, 0x17	; 23
    13da:	37 eb       	ldi	r19, 0xB7	; 183
    13dc:	41 ed       	ldi	r20, 0xD1	; 209
    13de:	59 e3       	ldi	r21, 0x39	; 57
    13e0:	c7 01       	movw	r24, r14
    13e2:	b6 01       	movw	r22, r12
    13e4:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
    13e8:	9b 01       	movw	r18, r22
    13ea:	ac 01       	movw	r20, r24
    13ec:	c3 01       	movw	r24, r6
    13ee:	b2 01       	movw	r22, r4
    13f0:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
    13f4:	6b 01       	movw	r12, r22
    13f6:	7c 01       	movw	r14, r24
    13f8:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <angle_roll>
    13fc:	70 93 30 01 	sts	0x0130, r23	; 0x800130 <angle_roll+0x1>
    1400:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <angle_roll+0x2>
    1404:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <angle_roll+0x3>

	pitch_level_adjust = angle_pitch * 15;                                    //Calculate the pitch angle correction
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	40 e7       	ldi	r20, 0x70	; 112
    140e:	51 e4       	ldi	r21, 0x41	; 65
    1410:	c5 01       	movw	r24, r10
    1412:	b4 01       	movw	r22, r8
    1414:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
    1418:	60 93 e7 01 	sts	0x01E7, r22	; 0x8001e7 <pitch_level_adjust>
    141c:	70 93 e8 01 	sts	0x01E8, r23	; 0x8001e8 <pitch_level_adjust+0x1>
    1420:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <pitch_level_adjust+0x2>
    1424:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <pitch_level_adjust+0x3>
	roll_level_adjust = angle_roll * 15;                                      //Calculate the roll angle correction
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	40 e7       	ldi	r20, 0x70	; 112
    142e:	51 e4       	ldi	r21, 0x41	; 65
    1430:	c7 01       	movw	r24, r14
    1432:	b6 01       	movw	r22, r12
    1434:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
    1438:	60 93 eb 01 	sts	0x01EB, r22	; 0x8001eb <roll_level_adjust>
    143c:	70 93 ec 01 	sts	0x01EC, r23	; 0x8001ec <roll_level_adjust+0x1>
    1440:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <roll_level_adjust+0x2>
    1444:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <roll_level_adjust+0x3>

	if(!auto_level){                                                          //If the quadcopter is not in auto-level mode
    1448:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    144c:	81 11       	cpse	r24, r1
    144e:	10 c0       	rjmp	.+32     	; 0x1470 <loop+0x560>
		pitch_level_adjust = 0;                                                 //Set the pitch angle correction to zero.
    1450:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <pitch_level_adjust>
    1454:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <pitch_level_adjust+0x1>
    1458:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <pitch_level_adjust+0x2>
    145c:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <pitch_level_adjust+0x3>
		roll_level_adjust = 0;                                                  //Set the roll angle correcion to zero.
    1460:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <roll_level_adjust>
    1464:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <roll_level_adjust+0x1>
    1468:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <roll_level_adjust+0x2>
    146c:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <roll_level_adjust+0x3>
	}

	if (receiver_input_channel_7 < 1500  && (voltageealarm == false)) digitalWrite(LED_LIGHT_PIN, LOW);
    1470:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <receiver_input_channel_7>
    1474:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <receiver_input_channel_7+0x1>
    1478:	8c 3d       	cpi	r24, 0xDC	; 220
    147a:	95 40       	sbci	r25, 0x05	; 5
    147c:	2c f4       	brge	.+10     	; 0x1488 <loop+0x578>
    147e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <voltageealarm>
    1482:	88 23       	and	r24, r24
    1484:	09 f4       	brne	.+2      	; 0x1488 <loop+0x578>
    1486:	d8 c3       	rjmp	.+1968   	; 0x1c38 <loop+0xd28>

	//For starting the motors: throttle low and yaw left (step 1).
	if(receiver_input_channel_3 < 1050 && receiver_input_channel_4 < 1050)start = 1;
    1488:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <receiver_input_channel_3>
    148c:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <receiver_input_channel_3+0x1>
    1490:	8a 31       	cpi	r24, 0x1A	; 26
    1492:	94 40       	sbci	r25, 0x04	; 4
    1494:	44 f4       	brge	.+16     	; 0x14a6 <loop+0x596>
    1496:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <receiver_input_channel_4>
    149a:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <receiver_input_channel_4+0x1>
    149e:	8a 31       	cpi	r24, 0x1A	; 26
    14a0:	94 40       	sbci	r25, 0x04	; 4
    14a2:	0c f4       	brge	.+2      	; 0x14a6 <loop+0x596>
    14a4:	ce c3       	rjmp	.+1948   	; 0x1c42 <loop+0xd32>
	//When yaw stick is back in the center position start the motors (step 2).
	if(start == 1 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1450){
    14a6:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <start>
    14aa:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <start+0x1>
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	79 f4       	brne	.+30     	; 0x14d0 <loop+0x5c0>
    14b2:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <receiver_input_channel_3>
    14b6:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <receiver_input_channel_3+0x1>
    14ba:	8a 31       	cpi	r24, 0x1A	; 26
    14bc:	94 40       	sbci	r25, 0x04	; 4
    14be:	44 f4       	brge	.+16     	; 0x14d0 <loop+0x5c0>
    14c0:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <receiver_input_channel_4>
    14c4:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <receiver_input_channel_4+0x1>
    14c8:	8b 3a       	cpi	r24, 0xAB	; 171
    14ca:	95 40       	sbci	r25, 0x05	; 5
    14cc:	0c f0       	brlt	.+2      	; 0x14d0 <loop+0x5c0>
    14ce:	c0 c3       	rjmp	.+1920   	; 0x1c50 <loop+0xd40>
		pid_i_mem_yaw = 0;
		pid_last_yaw_d_error = 0;
		voltageealarm  = false;
	}
	//Stopping the motors: throttle low and yaw right.
	if(start == 2 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1950)
    14d0:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <start>
    14d4:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <start+0x1>
    14d8:	02 97       	sbiw	r24, 0x02	; 2
    14da:	79 f4       	brne	.+30     	; 0x14fa <loop+0x5ea>
    14dc:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <receiver_input_channel_3>
    14e0:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <receiver_input_channel_3+0x1>
    14e4:	8a 31       	cpi	r24, 0x1A	; 26
    14e6:	94 40       	sbci	r25, 0x04	; 4
    14e8:	44 f4       	brge	.+16     	; 0x14fa <loop+0x5ea>
    14ea:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <receiver_input_channel_4>
    14ee:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <receiver_input_channel_4+0x1>
    14f2:	8f 39       	cpi	r24, 0x9F	; 159
    14f4:	97 40       	sbci	r25, 0x07	; 7
    14f6:	0c f0       	brlt	.+2      	; 0x14fa <loop+0x5ea>
    14f8:	09 c4       	rjmp	.+2066   	; 0x1d0c <loop+0xdfc>
		digitalWrite(LED_STATUS_PIN, LOW);
	}

	//The PID set point in degrees per second is determined by the roll receiver input.
	//In the case of deviding by 3 the max roll rate is aprox 164 degrees per second ( (500-8)/3 = 164d/s ).
	pid_roll_setpoint = 0;
    14fa:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <pid_roll_setpoint>
    14fe:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <pid_roll_setpoint+0x1>
    1502:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <pid_roll_setpoint+0x2>
    1506:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <pid_roll_setpoint+0x3>
	//We need a little dead band of 16us for better results.
	if(receiver_input_channel_1 > 1508)pid_roll_setpoint = receiver_input_channel_1 - 1508;
    150a:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <receiver_input_channel_1>
    150e:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <receiver_input_channel_1+0x1>
    1512:	85 3e       	cpi	r24, 0xE5	; 229
    1514:	95 40       	sbci	r25, 0x05	; 5
    1516:	3c f0       	brlt	.+14     	; 0x1526 <loop+0x616>
    1518:	60 91 2f 02 	lds	r22, 0x022F	; 0x80022f <receiver_input_channel_1>
    151c:	70 91 30 02 	lds	r23, 0x0230	; 0x800230 <receiver_input_channel_1+0x1>
    1520:	64 5e       	subi	r22, 0xE4	; 228
    1522:	75 40       	sbci	r23, 0x05	; 5
    1524:	0d c0       	rjmp	.+26     	; 0x1540 <loop+0x630>
	else if(receiver_input_channel_1 < 1492)pid_roll_setpoint = receiver_input_channel_1 - 1492;
    1526:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <receiver_input_channel_1>
    152a:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <receiver_input_channel_1+0x1>
    152e:	84 3d       	cpi	r24, 0xD4	; 212
    1530:	95 40       	sbci	r25, 0x05	; 5
    1532:	a4 f4       	brge	.+40     	; 0x155c <loop+0x64c>
    1534:	60 91 2f 02 	lds	r22, 0x022F	; 0x80022f <receiver_input_channel_1>
    1538:	70 91 30 02 	lds	r23, 0x0230	; 0x800230 <receiver_input_channel_1+0x1>
    153c:	64 5d       	subi	r22, 0xD4	; 212
    153e:	75 40       	sbci	r23, 0x05	; 5
    1540:	07 2e       	mov	r0, r23
    1542:	00 0c       	add	r0, r0
    1544:	88 0b       	sbc	r24, r24
    1546:	99 0b       	sbc	r25, r25
    1548:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
    154c:	60 93 73 01 	sts	0x0173, r22	; 0x800173 <pid_roll_setpoint>
    1550:	70 93 74 01 	sts	0x0174, r23	; 0x800174 <pid_roll_setpoint+0x1>
    1554:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <pid_roll_setpoint+0x2>
    1558:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <pid_roll_setpoint+0x3>

	pid_roll_setpoint -= roll_level_adjust;                                   //Subtract the angle correction from the standardized receiver roll input value.
	pid_roll_setpoint /= 3.0;                                                 //Divide the setpoint for the PID roll controller by 3 to get angles in degrees.
    155c:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <roll_level_adjust>
    1560:	30 91 ec 01 	lds	r19, 0x01EC	; 0x8001ec <roll_level_adjust+0x1>
    1564:	40 91 ed 01 	lds	r20, 0x01ED	; 0x8001ed <roll_level_adjust+0x2>
    1568:	50 91 ee 01 	lds	r21, 0x01EE	; 0x8001ee <roll_level_adjust+0x3>
    156c:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <pid_roll_setpoint>
    1570:	70 91 74 01 	lds	r23, 0x0174	; 0x800174 <pid_roll_setpoint+0x1>
    1574:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <pid_roll_setpoint+0x2>
    1578:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <pid_roll_setpoint+0x3>
    157c:	0e 94 89 11 	call	0x2312	; 0x2312 <__subsf3>
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	40 e4       	ldi	r20, 0x40	; 64
    1586:	50 e4       	ldi	r21, 0x40	; 64
    1588:	0e 94 16 12 	call	0x242c	; 0x242c <__divsf3>
    158c:	60 93 73 01 	sts	0x0173, r22	; 0x800173 <pid_roll_setpoint>
    1590:	70 93 74 01 	sts	0x0174, r23	; 0x800174 <pid_roll_setpoint+0x1>
    1594:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <pid_roll_setpoint+0x2>
    1598:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <pid_roll_setpoint+0x3>


	//The PID set point in degrees per second is determined by the pitch receiver input.
	//In the case of deviding by 3 the max pitch rate is aprox 164 degrees per second ( (500-8)/3 = 164d/s ).
	pid_pitch_setpoint = 0;
    159c:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <pid_pitch_setpoint>
    15a0:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <pid_pitch_setpoint+0x1>
    15a4:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <pid_pitch_setpoint+0x2>
    15a8:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <pid_pitch_setpoint+0x3>
	//We need a little dead band of 16us for better results.
	if(receiver_input_channel_2 > 1508)pid_pitch_setpoint = receiver_input_channel_2 - 1508;
    15ac:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <receiver_input_channel_2>
    15b0:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <receiver_input_channel_2+0x1>
    15b4:	85 3e       	cpi	r24, 0xE5	; 229
    15b6:	95 40       	sbci	r25, 0x05	; 5
    15b8:	3c f0       	brlt	.+14     	; 0x15c8 <loop+0x6b8>
    15ba:	60 91 2d 02 	lds	r22, 0x022D	; 0x80022d <receiver_input_channel_2>
    15be:	70 91 2e 02 	lds	r23, 0x022E	; 0x80022e <receiver_input_channel_2+0x1>
    15c2:	64 5e       	subi	r22, 0xE4	; 228
    15c4:	75 40       	sbci	r23, 0x05	; 5
    15c6:	0d c0       	rjmp	.+26     	; 0x15e2 <loop+0x6d2>
	else if(receiver_input_channel_2 < 1492)pid_pitch_setpoint = receiver_input_channel_2 - 1492;
    15c8:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <receiver_input_channel_2>
    15cc:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <receiver_input_channel_2+0x1>
    15d0:	84 3d       	cpi	r24, 0xD4	; 212
    15d2:	95 40       	sbci	r25, 0x05	; 5
    15d4:	a4 f4       	brge	.+40     	; 0x15fe <loop+0x6ee>
    15d6:	60 91 2d 02 	lds	r22, 0x022D	; 0x80022d <receiver_input_channel_2>
    15da:	70 91 2e 02 	lds	r23, 0x022E	; 0x80022e <receiver_input_channel_2+0x1>
    15de:	64 5d       	subi	r22, 0xD4	; 212
    15e0:	75 40       	sbci	r23, 0x05	; 5
    15e2:	07 2e       	mov	r0, r23
    15e4:	00 0c       	add	r0, r0
    15e6:	88 0b       	sbc	r24, r24
    15e8:	99 0b       	sbc	r25, r25
    15ea:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
    15ee:	60 93 5f 01 	sts	0x015F, r22	; 0x80015f <pid_pitch_setpoint>
    15f2:	70 93 60 01 	sts	0x0160, r23	; 0x800160 <pid_pitch_setpoint+0x1>
    15f6:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <pid_pitch_setpoint+0x2>
    15fa:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <pid_pitch_setpoint+0x3>

	pid_pitch_setpoint -= pitch_level_adjust;                                  //Subtract the angle correction from the standardized receiver pitch input value.
	pid_pitch_setpoint /= 3.0;                                                 //Divide the setpoint for the PID pitch controller by 3 to get angles in degrees.
    15fe:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <pitch_level_adjust>
    1602:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <pitch_level_adjust+0x1>
    1606:	40 91 e9 01 	lds	r20, 0x01E9	; 0x8001e9 <pitch_level_adjust+0x2>
    160a:	50 91 ea 01 	lds	r21, 0x01EA	; 0x8001ea <pitch_level_adjust+0x3>
    160e:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <pid_pitch_setpoint>
    1612:	70 91 60 01 	lds	r23, 0x0160	; 0x800160 <pid_pitch_setpoint+0x1>
    1616:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <pid_pitch_setpoint+0x2>
    161a:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <pid_pitch_setpoint+0x3>
    161e:	0e 94 89 11 	call	0x2312	; 0x2312 <__subsf3>
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e4       	ldi	r20, 0x40	; 64
    1628:	50 e4       	ldi	r21, 0x40	; 64
    162a:	0e 94 16 12 	call	0x242c	; 0x242c <__divsf3>
    162e:	60 93 5f 01 	sts	0x015F, r22	; 0x80015f <pid_pitch_setpoint>
    1632:	70 93 60 01 	sts	0x0160, r23	; 0x800160 <pid_pitch_setpoint+0x1>
    1636:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <pid_pitch_setpoint+0x2>
    163a:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <pid_pitch_setpoint+0x3>

	//The PID set point in degrees per second is determined by the yaw receiver input.
	//In the case of deviding by 3 the max yaw rate is aprox 164 degrees per second ( (500-8)/3 = 164d/s ).
	pid_yaw_setpoint = 0;
    163e:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <pid_yaw_setpoint>
    1642:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <pid_yaw_setpoint+0x1>
    1646:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <pid_yaw_setpoint+0x2>
    164a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <pid_yaw_setpoint+0x3>
	//We need a little dead band of 16us for better results.
	if(receiver_input_channel_3 > 1050){ //Do not yaw when turning off the motors.
    164e:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <receiver_input_channel_3>
    1652:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <receiver_input_channel_3+0x1>
    1656:	8b 31       	cpi	r24, 0x1B	; 27
    1658:	94 40       	sbci	r25, 0x04	; 4
    165a:	7c f1       	brlt	.+94     	; 0x16ba <loop+0x7aa>
		if(receiver_input_channel_4 > 1508)pid_yaw_setpoint = (receiver_input_channel_4 - 1508)/3.0;
    165c:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <receiver_input_channel_4>
    1660:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <receiver_input_channel_4+0x1>
    1664:	85 3e       	cpi	r24, 0xE5	; 229
    1666:	95 40       	sbci	r25, 0x05	; 5
    1668:	3c f0       	brlt	.+14     	; 0x1678 <loop+0x768>
    166a:	60 91 29 02 	lds	r22, 0x0229	; 0x800229 <receiver_input_channel_4>
    166e:	70 91 2a 02 	lds	r23, 0x022A	; 0x80022a <receiver_input_channel_4+0x1>
    1672:	64 5e       	subi	r22, 0xE4	; 228
    1674:	75 40       	sbci	r23, 0x05	; 5
    1676:	0d c0       	rjmp	.+26     	; 0x1692 <loop+0x782>
		else if(receiver_input_channel_4 < 1492)pid_yaw_setpoint = (receiver_input_channel_4 - 1492)/3.0;
    1678:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <receiver_input_channel_4>
    167c:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <receiver_input_channel_4+0x1>
    1680:	84 3d       	cpi	r24, 0xD4	; 212
    1682:	95 40       	sbci	r25, 0x05	; 5
    1684:	d4 f4       	brge	.+52     	; 0x16ba <loop+0x7aa>
    1686:	60 91 29 02 	lds	r22, 0x0229	; 0x800229 <receiver_input_channel_4>
    168a:	70 91 2a 02 	lds	r23, 0x022A	; 0x80022a <receiver_input_channel_4+0x1>
    168e:	64 5d       	subi	r22, 0xD4	; 212
    1690:	75 40       	sbci	r23, 0x05	; 5
    1692:	07 2e       	mov	r0, r23
    1694:	00 0c       	add	r0, r0
    1696:	88 0b       	sbc	r24, r24
    1698:	99 0b       	sbc	r25, r25
    169a:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	40 e4       	ldi	r20, 0x40	; 64
    16a4:	50 e4       	ldi	r21, 0x40	; 64
    16a6:	0e 94 16 12 	call	0x242c	; 0x242c <__divsf3>
    16aa:	60 93 4b 01 	sts	0x014B, r22	; 0x80014b <pid_yaw_setpoint>
    16ae:	70 93 4c 01 	sts	0x014C, r23	; 0x80014c <pid_yaw_setpoint+0x1>
    16b2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <pid_yaw_setpoint+0x2>
    16b6:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <pid_yaw_setpoint+0x3>
	}
	

	calculate_pid();                                                            //PID inputs are known. So we can calculate the pid output.
    16ba:	0e 94 6d 02 	call	0x4da	; 0x4da <_Z13calculate_pidv>
	if (receiver_input_channel_7 < 1700  && (voltageealarm == false)) digitalWrite(LED_LIGHT_PIN, LOW);
    16be:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <receiver_input_channel_7>
    16c2:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <receiver_input_channel_7+0x1>
    16c6:	84 3a       	cpi	r24, 0xA4	; 164
    16c8:	96 40       	sbci	r25, 0x06	; 6
    16ca:	2c f4       	brge	.+10     	; 0x16d6 <loop+0x7c6>
    16cc:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <voltageealarm>
    16d0:	88 23       	and	r24, r24
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <loop+0x7c6>
    16d4:	24 c3       	rjmp	.+1608   	; 0x1d1e <loop+0xe0e>

	//The battery voltage is needed for compensation.
	//A complementary filter is used to reduce noise.
	//0.09853 = 0.08 * 1.2317.
	battery_voltage = battery_voltage * 0.92 + (analogRead(0) + 65) * 0.09853;
    16d6:	60 91 17 02 	lds	r22, 0x0217	; 0x800217 <battery_voltage>
    16da:	70 91 18 02 	lds	r23, 0x0218	; 0x800218 <battery_voltage+0x1>
    16de:	07 2e       	mov	r0, r23
    16e0:	00 0c       	add	r0, r0
    16e2:	88 0b       	sbc	r24, r24
    16e4:	99 0b       	sbc	r25, r25
    16e6:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
    16ea:	2f e1       	ldi	r18, 0x1F	; 31
    16ec:	35 e8       	ldi	r19, 0x85	; 133
    16ee:	4b e6       	ldi	r20, 0x6B	; 107
    16f0:	5f e3       	ldi	r21, 0x3F	; 63
    16f2:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
    16f6:	6b 01       	movw	r12, r22
    16f8:	7c 01       	movw	r14, r24
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <analogRead>
    1700:	8f 5b       	subi	r24, 0xBF	; 191
    1702:	9f 4f       	sbci	r25, 0xFF	; 255
    1704:	bc 01       	movw	r22, r24
    1706:	99 0f       	add	r25, r25
    1708:	88 0b       	sbc	r24, r24
    170a:	99 0b       	sbc	r25, r25
    170c:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
    1710:	29 e1       	ldi	r18, 0x19	; 25
    1712:	3a ec       	ldi	r19, 0xCA	; 202
    1714:	49 ec       	ldi	r20, 0xC9	; 201
    1716:	5d e3       	ldi	r21, 0x3D	; 61
    1718:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
    171c:	a7 01       	movw	r20, r14
    171e:	96 01       	movw	r18, r12
    1720:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
    1724:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixsfsi>
    1728:	70 93 18 02 	sts	0x0218, r23	; 0x800218 <battery_voltage+0x1>
    172c:	60 93 17 02 	sts	0x0217, r22	; 0x800217 <battery_voltage>
	//Turn on the led if battery voltage is to low.
	
	if(battery_voltage > 600 && battery_voltage < 1000 ) digitalWrite(LED_LIGHT_PIN, HIGH);
    1730:	69 55       	subi	r22, 0x59	; 89
    1732:	72 40       	sbci	r23, 0x02	; 2
    1734:	6f 38       	cpi	r22, 0x8F	; 143
    1736:	71 40       	sbci	r23, 0x01	; 1
    1738:	20 f4       	brcc	.+8      	; 0x1742 <loop+0x832>
    173a:	61 e0       	ldi	r22, 0x01	; 1
    173c:	8f e0       	ldi	r24, 0x0F	; 15
    173e:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <digitalWrite>
	if(battery_voltage >= 1000 && battery_voltage < 1070 ) 
    1742:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <battery_voltage>
    1746:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <battery_voltage+0x1>
    174a:	88 5e       	subi	r24, 0xE8	; 232
    174c:	93 40       	sbci	r25, 0x03	; 3
    174e:	86 34       	cpi	r24, 0x46	; 70
    1750:	91 05       	cpc	r25, r1
    1752:	50 f5       	brcc	.+84     	; 0x17a8 <loop+0x898>
	{	
		voltageealarm = true;
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <voltageealarm>
		ledWaringcounter ++;
    175a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <ledWaringcounter>
    175e:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <ledWaringcounter+0x1>
    1762:	01 96       	adiw	r24, 0x01	; 1
		if (ledWaringcounter==250) ledWaringcounter =0;
    1764:	8a 3f       	cpi	r24, 0xFA	; 250
    1766:	91 05       	cpc	r25, r1
    1768:	29 f0       	breq	.+10     	; 0x1774 <loop+0x864>
	
	if(battery_voltage > 600 && battery_voltage < 1000 ) digitalWrite(LED_LIGHT_PIN, HIGH);
	if(battery_voltage >= 1000 && battery_voltage < 1070 ) 
	{	
		voltageealarm = true;
		ledWaringcounter ++;
    176a:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <ledWaringcounter+0x1>
    176e:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <ledWaringcounter>
    1772:	04 c0       	rjmp	.+8      	; 0x177c <loop+0x86c>
		if (ledWaringcounter==250) ledWaringcounter =0;
    1774:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <ledWaringcounter+0x1>
    1778:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <ledWaringcounter>
		if (ledWaringcounter==0)digitalWrite(LED_LIGHT_PIN, HIGH);
    177c:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <ledWaringcounter>
    1780:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <ledWaringcounter+0x1>
    1784:	89 2b       	or	r24, r25
    1786:	21 f4       	brne	.+8      	; 0x1790 <loop+0x880>
    1788:	61 e0       	ldi	r22, 0x01	; 1
    178a:	8f e0       	ldi	r24, 0x0F	; 15
    178c:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <digitalWrite>
		if (ledWaringcounter==125)digitalWrite(LED_LIGHT_PIN, LOW);
    1790:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <ledWaringcounter>
    1794:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <ledWaringcounter+0x1>
    1798:	8d 37       	cpi	r24, 0x7D	; 125
    179a:	91 05       	cpc	r25, r1
    179c:	39 f4       	brne	.+14     	; 0x17ac <loop+0x89c>
    179e:	60 e0       	ldi	r22, 0x00	; 0
    17a0:	8f e0       	ldi	r24, 0x0F	; 15
    17a2:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <digitalWrite>
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <loop+0x89c>
	}
	else
	{
		voltageealarm = false;
    17a8:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <voltageealarm>
	}
	
	throttle = receiver_input_channel_3;                                      //We need the throttle signal as a base signal.
    17ac:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <receiver_input_channel_3>
    17b0:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <receiver_input_channel_3+0x1>
    17b4:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <throttle+0x1>
    17b8:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <throttle>

	if (start == 2){                                                          //The motors are started.
    17bc:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <start>
    17c0:	30 91 14 02 	lds	r19, 0x0214	; 0x800214 <start+0x1>
    17c4:	22 30       	cpi	r18, 0x02	; 2
    17c6:	31 05       	cpc	r19, r1
    17c8:	09 f0       	breq	.+2      	; 0x17cc <loop+0x8bc>
    17ca:	0f c1       	rjmp	.+542    	; 0x19ea <loop+0xada>
		
		if (throttle > 1800) throttle = 1800;                                   //We need some room to keep full control at full throttle.
    17cc:	89 30       	cpi	r24, 0x09	; 9
    17ce:	97 40       	sbci	r25, 0x07	; 7
    17d0:	34 f0       	brlt	.+12     	; 0x17de <loop+0x8ce>
    17d2:	88 e0       	ldi	r24, 0x08	; 8
    17d4:	97 e0       	ldi	r25, 0x07	; 7
    17d6:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <throttle+0x1>
    17da:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <throttle>
		if (threshold_started)
    17de:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
    17e2:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <throttle>
    17e6:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <throttle+0x1>
    17ea:	88 23       	and	r24, r24
    17ec:	c9 f0       	breq	.+50     	; 0x1820 <loop+0x910>
		{
			if (throttle < receiver_input_channel_5)
    17ee:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <receiver_input_channel_5>
    17f2:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <receiver_input_channel_5+0x1>
    17f6:	28 17       	cp	r18, r24
    17f8:	39 07       	cpc	r19, r25
    17fa:	6c f4       	brge	.+26     	; 0x1816 <loop+0x906>
			{
				digitalWrite(LED_STATUS_PIN, HIGH);
    17fc:	61 e0       	ldi	r22, 0x01	; 1
    17fe:	8d e0       	ldi	r24, 0x0D	; 13
    1800:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <digitalWrite>
				throttle = receiver_input_channel_5;
    1804:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <receiver_input_channel_5>
    1808:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <receiver_input_channel_5+0x1>
    180c:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <throttle+0x1>
    1810:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <throttle>
    1814:	10 c0       	rjmp	.+32     	; 0x1836 <loop+0x926>
			}
			else
			{
				digitalWrite(LED_STATUS_PIN, LOW);
    1816:	60 e0       	ldi	r22, 0x00	; 0
    1818:	8d e0       	ldi	r24, 0x0D	; 13
    181a:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <digitalWrite>
    181e:	0b c0       	rjmp	.+22     	; 0x1836 <loop+0x926>
			}
		}
		else
		{
			threshold_started = (throttle > receiver_input_channel_5);
    1820:	40 91 27 02 	lds	r20, 0x0227	; 0x800227 <receiver_input_channel_5>
    1824:	50 91 28 02 	lds	r21, 0x0228	; 0x800228 <receiver_input_channel_5+0x1>
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	42 17       	cp	r20, r18
    182c:	53 07       	cpc	r21, r19
    182e:	0c f0       	brlt	.+2      	; 0x1832 <loop+0x922>
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
		}

		esc_1 = throttle - pid_output_pitch + pid_output_roll + pid_output_yaw; //Calculate the pulse for esc 1 (front-right - CCW)
    1836:	60 91 19 02 	lds	r22, 0x0219	; 0x800219 <throttle>
    183a:	70 91 1a 02 	lds	r23, 0x021A	; 0x80021a <throttle+0x1>
    183e:	07 2e       	mov	r0, r23
    1840:	00 0c       	add	r0, r0
    1842:	88 0b       	sbc	r24, r24
    1844:	99 0b       	sbc	r25, r25
    1846:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
    184a:	2b 01       	movw	r4, r22
    184c:	3c 01       	movw	r6, r24
    184e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <pid_output_pitch>
    1852:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <pid_output_pitch+0x1>
    1856:	a0 91 59 01 	lds	r26, 0x0159	; 0x800159 <pid_output_pitch+0x2>
    185a:	b0 91 5a 01 	lds	r27, 0x015A	; 0x80015a <pid_output_pitch+0x3>
    185e:	89 83       	std	Y+1, r24	; 0x01
    1860:	9a 83       	std	Y+2, r25	; 0x02
    1862:	ab 83       	std	Y+3, r26	; 0x03
    1864:	bc 83       	std	Y+4, r27	; 0x04
    1866:	9c 01       	movw	r18, r24
    1868:	ad 01       	movw	r20, r26
    186a:	c3 01       	movw	r24, r6
    186c:	b2 01       	movw	r22, r4
    186e:	0e 94 89 11 	call	0x2312	; 0x2312 <__subsf3>
    1872:	6d 83       	std	Y+5, r22	; 0x05
    1874:	7e 83       	std	Y+6, r23	; 0x06
    1876:	8f 83       	std	Y+7, r24	; 0x07
    1878:	98 87       	std	Y+8, r25	; 0x08
    187a:	80 90 6b 01 	lds	r8, 0x016B	; 0x80016b <pid_output_roll>
    187e:	90 90 6c 01 	lds	r9, 0x016C	; 0x80016c <pid_output_roll+0x1>
    1882:	a0 90 6d 01 	lds	r10, 0x016D	; 0x80016d <pid_output_roll+0x2>
    1886:	b0 90 6e 01 	lds	r11, 0x016E	; 0x80016e <pid_output_roll+0x3>
    188a:	c0 90 43 01 	lds	r12, 0x0143	; 0x800143 <pid_output_yaw>
    188e:	d0 90 44 01 	lds	r13, 0x0144	; 0x800144 <pid_output_yaw+0x1>
    1892:	e0 90 45 01 	lds	r14, 0x0145	; 0x800145 <pid_output_yaw+0x2>
    1896:	f0 90 46 01 	lds	r15, 0x0146	; 0x800146 <pid_output_yaw+0x3>
    189a:	a5 01       	movw	r20, r10
    189c:	94 01       	movw	r18, r8
    189e:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
    18a2:	a7 01       	movw	r20, r14
    18a4:	96 01       	movw	r18, r12
    18a6:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
    18aa:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixsfsi>
    18ae:	7a 87       	std	Y+10, r23	; 0x0a
    18b0:	69 87       	std	Y+9, r22	; 0x09
    18b2:	70 93 22 02 	sts	0x0222, r23	; 0x800222 <esc_1+0x1>
    18b6:	60 93 21 02 	sts	0x0221, r22	; 0x800221 <esc_1>
		esc_2 = throttle + pid_output_pitch + pid_output_roll - pid_output_yaw; //Calculate the pulse for esc 2 (rear-right - CW)
    18ba:	29 81       	ldd	r18, Y+1	; 0x01
    18bc:	3a 81       	ldd	r19, Y+2	; 0x02
    18be:	4b 81       	ldd	r20, Y+3	; 0x03
    18c0:	5c 81       	ldd	r21, Y+4	; 0x04
    18c2:	c3 01       	movw	r24, r6
    18c4:	b2 01       	movw	r22, r4
    18c6:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
    18ca:	2b 01       	movw	r4, r22
    18cc:	3c 01       	movw	r6, r24
    18ce:	9b 01       	movw	r18, r22
    18d0:	ac 01       	movw	r20, r24
    18d2:	c5 01       	movw	r24, r10
    18d4:	b4 01       	movw	r22, r8
    18d6:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
    18da:	a7 01       	movw	r20, r14
    18dc:	96 01       	movw	r18, r12
    18de:	0e 94 89 11 	call	0x2312	; 0x2312 <__subsf3>
    18e2:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixsfsi>
    18e6:	8b 01       	movw	r16, r22
    18e8:	70 93 20 02 	sts	0x0220, r23	; 0x800220 <esc_2+0x1>
    18ec:	60 93 1f 02 	sts	0x021F, r22	; 0x80021f <esc_2>
		esc_3 = throttle + pid_output_pitch - pid_output_roll + pid_output_yaw; //Calculate the pulse for esc 3 (rear-left - CCW)
    18f0:	a5 01       	movw	r20, r10
    18f2:	94 01       	movw	r18, r8
    18f4:	c3 01       	movw	r24, r6
    18f6:	b2 01       	movw	r22, r4
    18f8:	0e 94 89 11 	call	0x2312	; 0x2312 <__subsf3>
    18fc:	a7 01       	movw	r20, r14
    18fe:	96 01       	movw	r18, r12
    1900:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
    1904:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixsfsi>
    1908:	3b 01       	movw	r6, r22
    190a:	70 93 1e 02 	sts	0x021E, r23	; 0x80021e <esc_3+0x1>
    190e:	60 93 1d 02 	sts	0x021D, r22	; 0x80021d <esc_3>
		esc_4 = throttle - pid_output_pitch - pid_output_roll - pid_output_yaw; //Calculate the pulse for esc 4 (front-left - CW)
    1912:	a5 01       	movw	r20, r10
    1914:	94 01       	movw	r18, r8
    1916:	6d 81       	ldd	r22, Y+5	; 0x05
    1918:	7e 81       	ldd	r23, Y+6	; 0x06
    191a:	8f 81       	ldd	r24, Y+7	; 0x07
    191c:	98 85       	ldd	r25, Y+8	; 0x08
    191e:	0e 94 89 11 	call	0x2312	; 0x2312 <__subsf3>
    1922:	a7 01       	movw	r20, r14
    1924:	96 01       	movw	r18, r12
    1926:	0e 94 89 11 	call	0x2312	; 0x2312 <__subsf3>
    192a:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixsfsi>
    192e:	9b 01       	movw	r18, r22
    1930:	70 93 1c 02 	sts	0x021C, r23	; 0x80021c <esc_4+0x1>
    1934:	60 93 1b 02 	sts	0x021B, r22	; 0x80021b <esc_4>
				
		#define minESC 1100
		if (esc_1 < minESC) esc_1 = minESC;                                         //Keep the motors running.
    1938:	a9 85       	ldd	r26, Y+9	; 0x09
    193a:	ba 85       	ldd	r27, Y+10	; 0x0a
    193c:	ac 34       	cpi	r26, 0x4C	; 76
    193e:	b4 40       	sbci	r27, 0x04	; 4
    1940:	34 f4       	brge	.+12     	; 0x194e <loop+0xa3e>
    1942:	8c e4       	ldi	r24, 0x4C	; 76
    1944:	94 e0       	ldi	r25, 0x04	; 4
    1946:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <esc_1+0x1>
    194a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <esc_1>
		if (esc_2 < minESC) esc_2 = minESC;                                         //Keep the motors running.
    194e:	0c 34       	cpi	r16, 0x4C	; 76
    1950:	14 40       	sbci	r17, 0x04	; 4
    1952:	34 f4       	brge	.+12     	; 0x1960 <loop+0xa50>
    1954:	8c e4       	ldi	r24, 0x4C	; 76
    1956:	94 e0       	ldi	r25, 0x04	; 4
    1958:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <esc_2+0x1>
    195c:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <esc_2>
		if (esc_3 < minESC) esc_3 = minESC;                                         //Keep the motors running.
    1960:	9c e4       	ldi	r25, 0x4C	; 76
    1962:	69 16       	cp	r6, r25
    1964:	94 e0       	ldi	r25, 0x04	; 4
    1966:	79 06       	cpc	r7, r25
    1968:	34 f4       	brge	.+12     	; 0x1976 <loop+0xa66>
    196a:	8c e4       	ldi	r24, 0x4C	; 76
    196c:	94 e0       	ldi	r25, 0x04	; 4
    196e:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <esc_3+0x1>
    1972:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <esc_3>
		if (esc_4 < minESC) esc_4 = minESC;                                         //Keep the motors running.
    1976:	2c 34       	cpi	r18, 0x4C	; 76
    1978:	34 40       	sbci	r19, 0x04	; 4
    197a:	34 f4       	brge	.+12     	; 0x1988 <loop+0xa78>
    197c:	8c e4       	ldi	r24, 0x4C	; 76
    197e:	94 e0       	ldi	r25, 0x04	; 4
    1980:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <esc_4+0x1>
    1984:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <esc_4>

		if(esc_1 > 2000)esc_1 = 2000;                                           //Limit the esc-1 pulse to 2000us.
    1988:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <esc_1>
    198c:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <esc_1+0x1>
    1990:	81 3d       	cpi	r24, 0xD1	; 209
    1992:	97 40       	sbci	r25, 0x07	; 7
    1994:	34 f0       	brlt	.+12     	; 0x19a2 <loop+0xa92>
    1996:	80 ed       	ldi	r24, 0xD0	; 208
    1998:	97 e0       	ldi	r25, 0x07	; 7
    199a:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <esc_1+0x1>
    199e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <esc_1>
		if(esc_2 > 2000)esc_2 = 2000;                                           //Limit the esc-2 pulse to 2000us.
    19a2:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <esc_2>
    19a6:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <esc_2+0x1>
    19aa:	81 3d       	cpi	r24, 0xD1	; 209
    19ac:	97 40       	sbci	r25, 0x07	; 7
    19ae:	34 f0       	brlt	.+12     	; 0x19bc <loop+0xaac>
    19b0:	80 ed       	ldi	r24, 0xD0	; 208
    19b2:	97 e0       	ldi	r25, 0x07	; 7
    19b4:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <esc_2+0x1>
    19b8:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <esc_2>
		if(esc_3 > 2000)esc_3 = 2000;                                           //Limit the esc-3 pulse to 2000us.
    19bc:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <esc_3>
    19c0:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <esc_3+0x1>
    19c4:	81 3d       	cpi	r24, 0xD1	; 209
    19c6:	97 40       	sbci	r25, 0x07	; 7
    19c8:	34 f0       	brlt	.+12     	; 0x19d6 <loop+0xac6>
    19ca:	80 ed       	ldi	r24, 0xD0	; 208
    19cc:	97 e0       	ldi	r25, 0x07	; 7
    19ce:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <esc_3+0x1>
    19d2:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <esc_3>
		if(esc_4 > 2000)esc_4 = 2000;                                           //Limit the esc-4 pulse to 2000us.
    19d6:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <esc_4>
    19da:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <esc_4+0x1>
    19de:	81 3d       	cpi	r24, 0xD1	; 209
    19e0:	97 40       	sbci	r25, 0x07	; 7
    19e2:	ac f0       	brlt	.+42     	; 0x1a0e <loop+0xafe>
    19e4:	80 ed       	ldi	r24, 0xD0	; 208
    19e6:	97 e0       	ldi	r25, 0x07	; 7
    19e8:	0e c0       	rjmp	.+28     	; 0x1a06 <loop+0xaf6>
	}

	else{
		esc_1 = 1000;                                                           //If start is not 2 keep a 1000us pulse for ess-1.
    19ea:	88 ee       	ldi	r24, 0xE8	; 232
    19ec:	93 e0       	ldi	r25, 0x03	; 3
    19ee:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <esc_1+0x1>
    19f2:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <esc_1>
		esc_2 = 1000;                                                           //If start is not 2 keep a 1000us pulse for ess-2.
    19f6:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <esc_2+0x1>
    19fa:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <esc_2>
		esc_3 = 1000;                                                           //If start is not 2 keep a 1000us pulse for ess-3.
    19fe:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <esc_3+0x1>
    1a02:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <esc_3>
		esc_4 = 1000;                                                           //If start is not 2 keep a 1000us pulse for ess-4.
    1a06:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <esc_4+0x1>
    1a0a:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <esc_4>
	//Serial.print(pid_p_gain_roll);
	//Serial.print(" ");
	//Serial.print(pid_i_gain_roll);
	//Serial.print(" ");
	//Serial.println(battery_voltage );
	if(micros() - loop_timer > 4050)digitalWrite(LED_STATUS_PIN, HIGH);                   //Turn on the LED if the loop time exceeds 4050us.
    1a0e:	0e 94 77 16 	call	0x2cee	; 0x2cee <micros>
    1a12:	00 91 9b 01 	lds	r16, 0x019B	; 0x80019b <loop_timer>
    1a16:	10 91 9c 01 	lds	r17, 0x019C	; 0x80019c <loop_timer+0x1>
    1a1a:	20 91 9d 01 	lds	r18, 0x019D	; 0x80019d <loop_timer+0x2>
    1a1e:	30 91 9e 01 	lds	r19, 0x019E	; 0x80019e <loop_timer+0x3>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	80 1b       	sub	r24, r16
    1a28:	91 0b       	sbc	r25, r17
    1a2a:	a2 0b       	sbc	r26, r18
    1a2c:	b3 0b       	sbc	r27, r19
    1a2e:	83 3d       	cpi	r24, 0xD3	; 211
    1a30:	9f 40       	sbci	r25, 0x0F	; 15
    1a32:	a1 05       	cpc	r26, r1
    1a34:	b1 05       	cpc	r27, r1
    1a36:	20 f0       	brcs	.+8      	; 0x1a40 <loop+0xb30>
    1a38:	61 e0       	ldi	r22, 0x01	; 1
    1a3a:	8d e0       	ldi	r24, 0x0D	; 13
    1a3c:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <digitalWrite>
	
	
	//All the information for controlling the motor's is available.
	//The refresh rate is 250Hz. That means the esc's need there pulse every 4ms.
	while(micros() - loop_timer < 4000);                                      //We wait until 4000us are passed.
    1a40:	0e 94 77 16 	call	0x2cee	; 0x2cee <micros>
    1a44:	00 91 9b 01 	lds	r16, 0x019B	; 0x80019b <loop_timer>
    1a48:	10 91 9c 01 	lds	r17, 0x019C	; 0x80019c <loop_timer+0x1>
    1a4c:	20 91 9d 01 	lds	r18, 0x019D	; 0x80019d <loop_timer+0x2>
    1a50:	30 91 9e 01 	lds	r19, 0x019E	; 0x80019e <loop_timer+0x3>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	80 1b       	sub	r24, r16
    1a5a:	91 0b       	sbc	r25, r17
    1a5c:	a2 0b       	sbc	r26, r18
    1a5e:	b3 0b       	sbc	r27, r19
    1a60:	80 3a       	cpi	r24, 0xA0	; 160
    1a62:	9f 40       	sbci	r25, 0x0F	; 15
    1a64:	a1 05       	cpc	r26, r1
    1a66:	b1 05       	cpc	r27, r1
    1a68:	58 f3       	brcs	.-42     	; 0x1a40 <loop+0xb30>
	loop_timer = micros();                                                    //Set the timer for the next loop.
    1a6a:	0e 94 77 16 	call	0x2cee	; 0x2cee <micros>
    1a6e:	60 93 9b 01 	sts	0x019B, r22	; 0x80019b <loop_timer>
    1a72:	70 93 9c 01 	sts	0x019C, r23	; 0x80019c <loop_timer+0x1>
    1a76:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <loop_timer+0x2>
    1a7a:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <loop_timer+0x3>
	
	if (receiver_input_channel_7 < 1880  && (voltageealarm == false)) digitalWrite(LED_LIGHT_PIN, LOW);
    1a7e:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <receiver_input_channel_7>
    1a82:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <receiver_input_channel_7+0x1>
    1a86:	88 35       	cpi	r24, 0x58	; 88
    1a88:	97 40       	sbci	r25, 0x07	; 7
    1a8a:	2c f4       	brge	.+10     	; 0x1a96 <loop+0xb86>
    1a8c:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <voltageealarm>
    1a90:	88 23       	and	r24, r24
    1a92:	09 f4       	brne	.+2      	; 0x1a96 <loop+0xb86>
    1a94:	49 c1       	rjmp	.+658    	; 0x1d28 <loop+0xe18>

	PORTD |= B11110000;                                                       //Set digital outputs 4,5,6 and 7 high.
    1a96:	8b b1       	in	r24, 0x0b	; 11
    1a98:	80 6f       	ori	r24, 0xF0	; 240
    1a9a:	8b b9       	out	0x0b, r24	; 11
	timer_channel_1 = esc_1 + loop_timer;                                     //Calculate the time of the faling edge of the esc-1 pulse.
    1a9c:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <loop_timer>
    1aa0:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <loop_timer+0x1>
    1aa4:	a0 91 9d 01 	lds	r26, 0x019D	; 0x80019d <loop_timer+0x2>
    1aa8:	b0 91 9e 01 	lds	r27, 0x019E	; 0x80019e <loop_timer+0x3>
    1aac:	40 91 21 02 	lds	r20, 0x0221	; 0x800221 <esc_1>
    1ab0:	50 91 22 02 	lds	r21, 0x0222	; 0x800222 <esc_1+0x1>
    1ab4:	05 2e       	mov	r0, r21
    1ab6:	00 0c       	add	r0, r0
    1ab8:	66 0b       	sbc	r22, r22
    1aba:	77 0b       	sbc	r23, r23
    1abc:	48 0f       	add	r20, r24
    1abe:	59 1f       	adc	r21, r25
    1ac0:	6a 1f       	adc	r22, r26
    1ac2:	7b 1f       	adc	r23, r27
    1ac4:	40 93 d3 01 	sts	0x01D3, r20	; 0x8001d3 <timer_channel_1>
    1ac8:	50 93 d4 01 	sts	0x01D4, r21	; 0x8001d4 <timer_channel_1+0x1>
    1acc:	60 93 d5 01 	sts	0x01D5, r22	; 0x8001d5 <timer_channel_1+0x2>
    1ad0:	70 93 d6 01 	sts	0x01D6, r23	; 0x8001d6 <timer_channel_1+0x3>
	timer_channel_2 = esc_2 + loop_timer;                                     //Calculate the time of the faling edge of the esc-2 pulse.
    1ad4:	40 91 1f 02 	lds	r20, 0x021F	; 0x80021f <esc_2>
    1ad8:	50 91 20 02 	lds	r21, 0x0220	; 0x800220 <esc_2+0x1>
    1adc:	05 2e       	mov	r0, r21
    1ade:	00 0c       	add	r0, r0
    1ae0:	66 0b       	sbc	r22, r22
    1ae2:	77 0b       	sbc	r23, r23
    1ae4:	48 0f       	add	r20, r24
    1ae6:	59 1f       	adc	r21, r25
    1ae8:	6a 1f       	adc	r22, r26
    1aea:	7b 1f       	adc	r23, r27
    1aec:	40 93 cf 01 	sts	0x01CF, r20	; 0x8001cf <timer_channel_2>
    1af0:	50 93 d0 01 	sts	0x01D0, r21	; 0x8001d0 <timer_channel_2+0x1>
    1af4:	60 93 d1 01 	sts	0x01D1, r22	; 0x8001d1 <timer_channel_2+0x2>
    1af8:	70 93 d2 01 	sts	0x01D2, r23	; 0x8001d2 <timer_channel_2+0x3>
	timer_channel_3 = esc_3 + loop_timer;                                     //Calculate the time of the faling edge of the esc-3 pulse.
    1afc:	40 91 1d 02 	lds	r20, 0x021D	; 0x80021d <esc_3>
    1b00:	50 91 1e 02 	lds	r21, 0x021E	; 0x80021e <esc_3+0x1>
    1b04:	05 2e       	mov	r0, r21
    1b06:	00 0c       	add	r0, r0
    1b08:	66 0b       	sbc	r22, r22
    1b0a:	77 0b       	sbc	r23, r23
    1b0c:	48 0f       	add	r20, r24
    1b0e:	59 1f       	adc	r21, r25
    1b10:	6a 1f       	adc	r22, r26
    1b12:	7b 1f       	adc	r23, r27
    1b14:	40 93 cb 01 	sts	0x01CB, r20	; 0x8001cb <timer_channel_3>
    1b18:	50 93 cc 01 	sts	0x01CC, r21	; 0x8001cc <timer_channel_3+0x1>
    1b1c:	60 93 cd 01 	sts	0x01CD, r22	; 0x8001cd <timer_channel_3+0x2>
    1b20:	70 93 ce 01 	sts	0x01CE, r23	; 0x8001ce <timer_channel_3+0x3>
	timer_channel_4 = esc_4 + loop_timer;                                     //Calculate the time of the faling edge of the esc-4 pulse.
    1b24:	40 91 1b 02 	lds	r20, 0x021B	; 0x80021b <esc_4>
    1b28:	50 91 1c 02 	lds	r21, 0x021C	; 0x80021c <esc_4+0x1>
    1b2c:	05 2e       	mov	r0, r21
    1b2e:	00 0c       	add	r0, r0
    1b30:	66 0b       	sbc	r22, r22
    1b32:	77 0b       	sbc	r23, r23
    1b34:	84 0f       	add	r24, r20
    1b36:	95 1f       	adc	r25, r21
    1b38:	a6 1f       	adc	r26, r22
    1b3a:	b7 1f       	adc	r27, r23
    1b3c:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <timer_channel_4>
    1b40:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <timer_channel_4+0x1>
    1b44:	a0 93 c9 01 	sts	0x01C9, r26	; 0x8001c9 <timer_channel_4+0x2>
    1b48:	b0 93 ca 01 	sts	0x01CA, r27	; 0x8001ca <timer_channel_4+0x3>
	
	//There is always 1000us of spare time. So let's do something usefull that is very time consuming.
	//Get the current gyro and receiver data and scale it to degrees per second for the pid calculations.
	GyroRead();
    1b4c:	0e 94 76 05 	call	0xaec	; 0xaec <_Z8GyroReadv>
		
	while(PORTD >= 16){                                                       //Stay in this loop until output 4,5,6 and 7 are low.
    1b50:	8b b1       	in	r24, 0x0b	; 11
    1b52:	80 31       	cpi	r24, 0x10	; 16
    1b54:	08 f4       	brcc	.+2      	; 0x1b58 <loop+0xc48>
    1b56:	ed c0       	rjmp	.+474    	; 0x1d32 <loop+0xe22>
		esc_loop_timer = micros();                                              //Read the current time.
    1b58:	0e 94 77 16 	call	0x2cee	; 0x2cee <micros>
    1b5c:	60 93 c3 01 	sts	0x01C3, r22	; 0x8001c3 <esc_loop_timer>
    1b60:	70 93 c4 01 	sts	0x01C4, r23	; 0x8001c4 <esc_loop_timer+0x1>
    1b64:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <esc_loop_timer+0x2>
    1b68:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <esc_loop_timer+0x3>
		if(timer_channel_1 <= esc_loop_timer)PORTD &= B11101111;                //Set digital output 4 to low if the time is expired.
    1b6c:	00 91 d3 01 	lds	r16, 0x01D3	; 0x8001d3 <timer_channel_1>
    1b70:	10 91 d4 01 	lds	r17, 0x01D4	; 0x8001d4 <timer_channel_1+0x1>
    1b74:	20 91 d5 01 	lds	r18, 0x01D5	; 0x8001d5 <timer_channel_1+0x2>
    1b78:	30 91 d6 01 	lds	r19, 0x01D6	; 0x8001d6 <timer_channel_1+0x3>
    1b7c:	60 17       	cp	r22, r16
    1b7e:	71 07       	cpc	r23, r17
    1b80:	82 07       	cpc	r24, r18
    1b82:	93 07       	cpc	r25, r19
    1b84:	08 f0       	brcs	.+2      	; 0x1b88 <loop+0xc78>
    1b86:	5c 98       	cbi	0x0b, 4	; 11
		if(timer_channel_2 <= esc_loop_timer)PORTD &= B11011111;                //Set digital output 5 to low if the time is expired.
    1b88:	40 91 cf 01 	lds	r20, 0x01CF	; 0x8001cf <timer_channel_2>
    1b8c:	50 91 d0 01 	lds	r21, 0x01D0	; 0x8001d0 <timer_channel_2+0x1>
    1b90:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <timer_channel_2+0x2>
    1b94:	70 91 d2 01 	lds	r23, 0x01D2	; 0x8001d2 <timer_channel_2+0x3>
    1b98:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <esc_loop_timer>
    1b9c:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <esc_loop_timer+0x1>
    1ba0:	a0 91 c5 01 	lds	r26, 0x01C5	; 0x8001c5 <esc_loop_timer+0x2>
    1ba4:	b0 91 c6 01 	lds	r27, 0x01C6	; 0x8001c6 <esc_loop_timer+0x3>
    1ba8:	84 17       	cp	r24, r20
    1baa:	95 07       	cpc	r25, r21
    1bac:	a6 07       	cpc	r26, r22
    1bae:	b7 07       	cpc	r27, r23
    1bb0:	08 f0       	brcs	.+2      	; 0x1bb4 <loop+0xca4>
    1bb2:	5d 98       	cbi	0x0b, 5	; 11
		if(timer_channel_3 <= esc_loop_timer)PORTD &= B10111111;                //Set digital output 6 to low if the time is expired.
    1bb4:	40 91 cb 01 	lds	r20, 0x01CB	; 0x8001cb <timer_channel_3>
    1bb8:	50 91 cc 01 	lds	r21, 0x01CC	; 0x8001cc <timer_channel_3+0x1>
    1bbc:	60 91 cd 01 	lds	r22, 0x01CD	; 0x8001cd <timer_channel_3+0x2>
    1bc0:	70 91 ce 01 	lds	r23, 0x01CE	; 0x8001ce <timer_channel_3+0x3>
    1bc4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <esc_loop_timer>
    1bc8:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <esc_loop_timer+0x1>
    1bcc:	a0 91 c5 01 	lds	r26, 0x01C5	; 0x8001c5 <esc_loop_timer+0x2>
    1bd0:	b0 91 c6 01 	lds	r27, 0x01C6	; 0x8001c6 <esc_loop_timer+0x3>
    1bd4:	84 17       	cp	r24, r20
    1bd6:	95 07       	cpc	r25, r21
    1bd8:	a6 07       	cpc	r26, r22
    1bda:	b7 07       	cpc	r27, r23
    1bdc:	08 f0       	brcs	.+2      	; 0x1be0 <loop+0xcd0>
    1bde:	5e 98       	cbi	0x0b, 6	; 11
		if(timer_channel_4 <= esc_loop_timer)PORTD &= B01111111;                //Set digital output 7 to low if the time is expired.
    1be0:	40 91 c7 01 	lds	r20, 0x01C7	; 0x8001c7 <timer_channel_4>
    1be4:	50 91 c8 01 	lds	r21, 0x01C8	; 0x8001c8 <timer_channel_4+0x1>
    1be8:	60 91 c9 01 	lds	r22, 0x01C9	; 0x8001c9 <timer_channel_4+0x2>
    1bec:	70 91 ca 01 	lds	r23, 0x01CA	; 0x8001ca <timer_channel_4+0x3>
    1bf0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <esc_loop_timer>
    1bf4:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <esc_loop_timer+0x1>
    1bf8:	a0 91 c5 01 	lds	r26, 0x01C5	; 0x8001c5 <esc_loop_timer+0x2>
    1bfc:	b0 91 c6 01 	lds	r27, 0x01C6	; 0x8001c6 <esc_loop_timer+0x3>
    1c00:	84 17       	cp	r24, r20
    1c02:	95 07       	cpc	r25, r21
    1c04:	a6 07       	cpc	r26, r22
    1c06:	b7 07       	cpc	r27, r23
    1c08:	08 f4       	brcc	.+2      	; 0x1c0c <loop+0xcfc>
    1c0a:	a2 cf       	rjmp	.-188    	; 0x1b50 <loop+0xc40>
    1c0c:	5f 98       	cbi	0x0b, 7	; 11
    1c0e:	a0 cf       	rjmp	.-192    	; 0x1b50 <loop+0xc40>
bool threshold_started = false;

void loop(){

	if (voltageealarm == false) digitalWrite(LED_LIGHT_PIN,HIGH);
	if (receiver_input_channel_7 < 1300 && (voltageealarm == false)) digitalWrite(LED_LIGHT_PIN, LOW);
    1c10:	60 e0       	ldi	r22, 0x00	; 0
    1c12:	8f e0       	ldi	r24, 0x0F	; 15
    1c14:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <digitalWrite>
    1c18:	a7 c9       	rjmp	.-3250   	; 0xf68 <loop+0x58>

	//65.5 = 1 deg/sec (check the datasheet of the MPU-6050 for more information).
	gyro_roll_input = (gyro_roll_input * 0.7) + ((gyro_roll / 65.5) * 0.3);   //Gyro pid input is deg/sec.
	if (receiver_input_channel_7 < 1333 && (voltageealarm == false)) digitalWrite(LED_LIGHT_PIN, LOW);
    1c1a:	60 e0       	ldi	r22, 0x00	; 0
    1c1c:	8f e0       	ldi	r24, 0x0F	; 15
    1c1e:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <digitalWrite>
    1c22:	e0 c9       	rjmp	.-3136   	; 0xfe4 <loop+0xd4>
	gyro_pitch_input = (gyro_pitch_input * 0.7) + ((gyro_pitch / 65.5) * 0.3);//Gyro pid input is deg/sec.
	gyro_yaw_input = (gyro_yaw_input * 0.7) + ((gyro_yaw / 65.5) * 0.3);      //Gyro pid input is deg/sec.

	if (receiver_input_channel_7 < 1400 && (voltageealarm == false)) digitalWrite(LED_LIGHT_PIN, LOW);
    1c24:	60 e0       	ldi	r22, 0x00	; 0
    1c26:	8f e0       	ldi	r24, 0x0F	; 15
    1c28:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <digitalWrite>
    1c2c:	4b ca       	rjmp	.-2922   	; 0x10c4 <loop+0x1b4>
	angle_roll += gyro_roll * 0.0000611;                                      //Calculate the traveled roll angle and add this to the angle_roll variable.

	//0.000001066 = 0.0000611 * (3.142(PI) / 180degr) The Arduino sin function is in radians
	angle_pitch -= angle_roll * sin(gyro_yaw * 0.000001066);                  //If the IMU has yawed transfer the roll angle to the pitch angel.
	angle_roll += angle_pitch * sin(gyro_yaw * 0.000001066);                  //If the IMU has yawed transfer the pitch angle to the roll angel.
	if (receiver_input_channel_7 < 1433 && (voltageealarm == false)) digitalWrite(LED_LIGHT_PIN, LOW);
    1c2e:	60 e0       	ldi	r22, 0x00	; 0
    1c30:	8f e0       	ldi	r24, 0x0F	; 15
    1c32:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <digitalWrite>
    1c36:	be ca       	rjmp	.-2692   	; 0x11b4 <loop+0x2a4>
	if(!auto_level){                                                          //If the quadcopter is not in auto-level mode
		pitch_level_adjust = 0;                                                 //Set the pitch angle correction to zero.
		roll_level_adjust = 0;                                                  //Set the roll angle correcion to zero.
	}

	if (receiver_input_channel_7 < 1500  && (voltageealarm == false)) digitalWrite(LED_LIGHT_PIN, LOW);
    1c38:	60 e0       	ldi	r22, 0x00	; 0
    1c3a:	8f e0       	ldi	r24, 0x0F	; 15
    1c3c:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <digitalWrite>
    1c40:	23 cc       	rjmp	.-1978   	; 0x1488 <loop+0x578>

	//For starting the motors: throttle low and yaw left (step 1).
	if(receiver_input_channel_3 < 1050 && receiver_input_channel_4 < 1050)start = 1;
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <start+0x1>
    1c4a:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <start>
    1c4e:	2b cc       	rjmp	.-1962   	; 0x14a6 <loop+0x596>
	//When yaw stick is back in the center position start the motors (step 2).
	if(start == 1 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1450){
		start = 2;
    1c50:	82 e0       	ldi	r24, 0x02	; 2
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <start+0x1>
    1c58:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <start>
		threshold_started = false;
    1c5c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>

		angle_pitch = angle_pitch_acc;                                          //Set the gyro pitch angle equal to the accelerometer pitch angle when the quadcopter is started.
    1c60:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <angle_pitch_acc>
    1c64:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <angle_pitch_acc+0x1>
    1c68:	a0 91 39 01 	lds	r26, 0x0139	; 0x800139 <angle_pitch_acc+0x2>
    1c6c:	b0 91 3a 01 	lds	r27, 0x013A	; 0x80013a <angle_pitch_acc+0x3>
    1c70:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <angle_pitch>
    1c74:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <angle_pitch+0x1>
    1c78:	a0 93 35 01 	sts	0x0135, r26	; 0x800135 <angle_pitch+0x2>
    1c7c:	b0 93 36 01 	sts	0x0136, r27	; 0x800136 <angle_pitch+0x3>
		angle_roll = angle_roll_acc;                                            //Set the gyro roll angle equal to the accelerometer roll angle when the quadcopter is started.
    1c80:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <angle_roll_acc>
    1c84:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <angle_roll_acc+0x1>
    1c88:	a0 91 3d 01 	lds	r26, 0x013D	; 0x80013d <angle_roll_acc+0x2>
    1c8c:	b0 91 3e 01 	lds	r27, 0x013E	; 0x80013e <angle_roll_acc+0x3>
    1c90:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <angle_roll>
    1c94:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <angle_roll+0x1>
    1c98:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <angle_roll+0x2>
    1c9c:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <angle_roll+0x3>
		gyro_angles_set = true;                                                 //Set the IMU started flag.
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <gyro_angles_set>

		//Reset the PID controllers for a bumpless start.
		pid_i_mem_roll = 0;
    1ca6:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <pid_i_mem_roll>
    1caa:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <pid_i_mem_roll+0x1>
    1cae:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <pid_i_mem_roll+0x2>
    1cb2:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <pid_i_mem_roll+0x3>
		pid_last_roll_d_error = 0;
    1cb6:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <pid_last_roll_d_error>
    1cba:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <pid_last_roll_d_error+0x1>
    1cbe:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <pid_last_roll_d_error+0x2>
    1cc2:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <pid_last_roll_d_error+0x3>
		pid_i_mem_pitch = 0;
    1cc6:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <pid_i_mem_pitch>
    1cca:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <pid_i_mem_pitch+0x1>
    1cce:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <pid_i_mem_pitch+0x2>
    1cd2:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <pid_i_mem_pitch+0x3>
		pid_last_pitch_d_error = 0;
    1cd6:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <pid_last_pitch_d_error>
    1cda:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <pid_last_pitch_d_error+0x1>
    1cde:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <pid_last_pitch_d_error+0x2>
    1ce2:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <pid_last_pitch_d_error+0x3>
		pid_i_mem_yaw = 0;
    1ce6:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <pid_i_mem_yaw>
    1cea:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <pid_i_mem_yaw+0x1>
    1cee:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <pid_i_mem_yaw+0x2>
    1cf2:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <pid_i_mem_yaw+0x3>
		pid_last_yaw_d_error = 0;
    1cf6:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <pid_last_yaw_d_error>
    1cfa:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <pid_last_yaw_d_error+0x1>
    1cfe:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <pid_last_yaw_d_error+0x2>
    1d02:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <pid_last_yaw_d_error+0x3>
		voltageealarm  = false;
    1d06:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <voltageealarm>
    1d0a:	e2 cb       	rjmp	.-2108   	; 0x14d0 <loop+0x5c0>
	}
	//Stopping the motors: throttle low and yaw right.
	if(start == 2 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1950)
	{
		start = 0;
    1d0c:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <start+0x1>
    1d10:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <start>
		digitalWrite(LED_STATUS_PIN, LOW);
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	8d e0       	ldi	r24, 0x0D	; 13
    1d18:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <digitalWrite>
    1d1c:	ee cb       	rjmp	.-2084   	; 0x14fa <loop+0x5ea>
		else if(receiver_input_channel_4 < 1492)pid_yaw_setpoint = (receiver_input_channel_4 - 1492)/3.0;
	}
	

	calculate_pid();                                                            //PID inputs are known. So we can calculate the pid output.
	if (receiver_input_channel_7 < 1700  && (voltageealarm == false)) digitalWrite(LED_LIGHT_PIN, LOW);
    1d1e:	60 e0       	ldi	r22, 0x00	; 0
    1d20:	8f e0       	ldi	r24, 0x0F	; 15
    1d22:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <digitalWrite>
    1d26:	d7 cc       	rjmp	.-1618   	; 0x16d6 <loop+0x7c6>
	//All the information for controlling the motor's is available.
	//The refresh rate is 250Hz. That means the esc's need there pulse every 4ms.
	while(micros() - loop_timer < 4000);                                      //We wait until 4000us are passed.
	loop_timer = micros();                                                    //Set the timer for the next loop.
	
	if (receiver_input_channel_7 < 1880  && (voltageealarm == false)) digitalWrite(LED_LIGHT_PIN, LOW);
    1d28:	60 e0       	ldi	r22, 0x00	; 0
    1d2a:	8f e0       	ldi	r24, 0x0F	; 15
    1d2c:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <digitalWrite>
    1d30:	b2 ce       	rjmp	.-668    	; 0x1a96 <loop+0xb86>
		if(timer_channel_1 <= esc_loop_timer)PORTD &= B11101111;                //Set digital output 4 to low if the time is expired.
		if(timer_channel_2 <= esc_loop_timer)PORTD &= B11011111;                //Set digital output 5 to low if the time is expired.
		if(timer_channel_3 <= esc_loop_timer)PORTD &= B10111111;                //Set digital output 6 to low if the time is expired.
		if(timer_channel_4 <= esc_loop_timer)PORTD &= B01111111;                //Set digital output 7 to low if the time is expired.
	}
}
    1d32:	2a 96       	adiw	r28, 0x0a	; 10
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	cd bf       	out	0x3d, r28	; 61
    1d3e:	df 91       	pop	r29
    1d40:	cf 91       	pop	r28
    1d42:	1f 91       	pop	r17
    1d44:	0f 91       	pop	r16
    1d46:	ff 90       	pop	r15
    1d48:	ef 90       	pop	r14
    1d4a:	df 90       	pop	r13
    1d4c:	cf 90       	pop	r12
    1d4e:	bf 90       	pop	r11
    1d50:	af 90       	pop	r10
    1d52:	9f 90       	pop	r9
    1d54:	8f 90       	pop	r8
    1d56:	7f 90       	pop	r7
    1d58:	6f 90       	pop	r6
    1d5a:	5f 90       	pop	r5
    1d5c:	4f 90       	pop	r4
    1d5e:	08 95       	ret

00001d60 <_Z18set_gyro_registersv>:
	else return 1500;
}

void set_gyro_registers(){
	//Setup the MPU-6050
	if(eeprom_data[31] == 1){
    1d60:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <eeprom_data+0x1f>
    1d64:	81 30       	cpi	r24, 0x01	; 1
    1d66:	09 f0       	breq	.+2      	; 0x1d6a <_Z18set_gyro_registersv+0xa>
    1d68:	ac c0       	rjmp	.+344    	; 0x1ec2 <_Z18set_gyro_registersv+0x162>
		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search.
    1d6a:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <gyro_address>
    1d6e:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <gyro_address+0x1>
    1d72:	8e e6       	ldi	r24, 0x6E	; 110
    1d74:	92 e0       	ldi	r25, 0x02	; 2
    1d76:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(PWR_MGMT_1);                                            //We want to write to the PWR_MGMT_1 register (6B hex)
    1d7a:	6b e6       	ldi	r22, 0x6B	; 107
    1d7c:	70 e0       	ldi	r23, 0x00	; 0
    1d7e:	8e e6       	ldi	r24, 0x6E	; 110
    1d80:	92 e0       	ldi	r25, 0x02	; 2
    1d82:	0e 94 29 01 	call	0x252	; 0x252 <_ZN7TwoWire5writeEi>
		Wire.write(0x00);                                            //Set the register bits as 00000000 to activate the gyro
    1d86:	60 e0       	ldi	r22, 0x00	; 0
    1d88:	70 e0       	ldi	r23, 0x00	; 0
    1d8a:	8e e6       	ldi	r24, 0x6E	; 110
    1d8c:	92 e0       	ldi	r25, 0x02	; 2
    1d8e:	0e 94 29 01 	call	0x252	; 0x252 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro.
    1d92:	8e e6       	ldi	r24, 0x6E	; 110
    1d94:	92 e0       	ldi	r25, 0x02	; 2
    1d96:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN7TwoWire15endTransmissionEv>

		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search.
    1d9a:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <gyro_address>
    1d9e:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <gyro_address+0x1>
    1da2:	8e e6       	ldi	r24, 0x6E	; 110
    1da4:	92 e0       	ldi	r25, 0x02	; 2
    1da6:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(GYRO_CONFIG);                                            //We want to write to the GYRO_CONFIG register (1B hex)
    1daa:	6b e1       	ldi	r22, 0x1B	; 27
    1dac:	70 e0       	ldi	r23, 0x00	; 0
    1dae:	8e e6       	ldi	r24, 0x6E	; 110
    1db0:	92 e0       	ldi	r25, 0x02	; 2
    1db2:	0e 94 29 01 	call	0x252	; 0x252 <_ZN7TwoWire5writeEi>
		Wire.write(0x08);                                            //Set the register bits as 00001000 (500dps full scale)
    1db6:	68 e0       	ldi	r22, 0x08	; 8
    1db8:	70 e0       	ldi	r23, 0x00	; 0
    1dba:	8e e6       	ldi	r24, 0x6E	; 110
    1dbc:	92 e0       	ldi	r25, 0x02	; 2
    1dbe:	0e 94 29 01 	call	0x252	; 0x252 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro
    1dc2:	8e e6       	ldi	r24, 0x6E	; 110
    1dc4:	92 e0       	ldi	r25, 0x02	; 2
    1dc6:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN7TwoWire15endTransmissionEv>

		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search.
    1dca:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <gyro_address>
    1dce:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <gyro_address+0x1>
    1dd2:	8e e6       	ldi	r24, 0x6E	; 110
    1dd4:	92 e0       	ldi	r25, 0x02	; 2
    1dd6:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(ACCEL_CONFIG);                                            //We want to write to the ACCEL_CONFIG register (1A hex)
    1dda:	6c e1       	ldi	r22, 0x1C	; 28
    1ddc:	70 e0       	ldi	r23, 0x00	; 0
    1dde:	8e e6       	ldi	r24, 0x6E	; 110
    1de0:	92 e0       	ldi	r25, 0x02	; 2
    1de2:	0e 94 29 01 	call	0x252	; 0x252 <_ZN7TwoWire5writeEi>
		Wire.write(0x10);                                            //Set the register bits as 00010000 (+/- 8g full scale range)
    1de6:	60 e1       	ldi	r22, 0x10	; 16
    1de8:	70 e0       	ldi	r23, 0x00	; 0
    1dea:	8e e6       	ldi	r24, 0x6E	; 110
    1dec:	92 e0       	ldi	r25, 0x02	; 2
    1dee:	0e 94 29 01 	call	0x252	; 0x252 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro
    1df2:	8e e6       	ldi	r24, 0x6E	; 110
    1df4:	92 e0       	ldi	r25, 0x02	; 2
    1df6:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN7TwoWire15endTransmissionEv>

		//Let's perform a random register check to see if the values are written correct
		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search
    1dfa:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <gyro_address>
    1dfe:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <gyro_address+0x1>
    1e02:	8e e6       	ldi	r24, 0x6E	; 110
    1e04:	92 e0       	ldi	r25, 0x02	; 2
    1e06:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(GYRO_CONFIG);                                            //Start reading @ register 0x1B
    1e0a:	6b e1       	ldi	r22, 0x1B	; 27
    1e0c:	70 e0       	ldi	r23, 0x00	; 0
    1e0e:	8e e6       	ldi	r24, 0x6E	; 110
    1e10:	92 e0       	ldi	r25, 0x02	; 2
    1e12:	0e 94 29 01 	call	0x252	; 0x252 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission
    1e16:	8e e6       	ldi	r24, 0x6E	; 110
    1e18:	92 e0       	ldi	r25, 0x02	; 2
    1e1a:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN7TwoWire15endTransmissionEv>
		Wire.requestFrom(gyro_address, 1);                           //Request 1 bytes from the gyro
    1e1e:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <gyro_address>
    1e22:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <gyro_address+0x1>
    1e26:	41 e0       	ldi	r20, 0x01	; 1
    1e28:	50 e0       	ldi	r21, 0x00	; 0
    1e2a:	8e e6       	ldi	r24, 0x6E	; 110
    1e2c:	92 e0       	ldi	r25, 0x02	; 2
    1e2e:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZN7TwoWire11requestFromEii>
		while(Wire.available() < 1);                                 //Wait until the 6 bytes are received
    1e32:	8e e6       	ldi	r24, 0x6E	; 110
    1e34:	92 e0       	ldi	r25, 0x02	; 2
    1e36:	0e 94 ef 14 	call	0x29de	; 0x29de <_ZN7TwoWire9availableEv>
    1e3a:	18 16       	cp	r1, r24
    1e3c:	19 06       	cpc	r1, r25
    1e3e:	cc f7       	brge	.-14     	; 0x1e32 <_Z18set_gyro_registersv+0xd2>
		if(Wire.read() != 0x08){                                     //Check if the value is 0x08
    1e40:	8e e6       	ldi	r24, 0x6E	; 110
    1e42:	92 e0       	ldi	r25, 0x02	; 2
    1e44:	0e 94 f7 14 	call	0x29ee	; 0x29ee <_ZN7TwoWire4readEv>
    1e48:	08 97       	sbiw	r24, 0x08	; 8
    1e4a:	59 f0       	breq	.+22     	; 0x1e62 <_Z18set_gyro_registersv+0x102>
			digitalWrite(LED_STATUS_PIN,HIGH);                                     //Turn on the warning led
    1e4c:	61 e0       	ldi	r22, 0x01	; 1
    1e4e:	8d e0       	ldi	r24, 0x0D	; 13
    1e50:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <digitalWrite>
			while(1)delay(10);                                         //Stay in this loop for ever
    1e54:	6a e0       	ldi	r22, 0x0A	; 10
    1e56:	70 e0       	ldi	r23, 0x00	; 0
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <delay>
    1e60:	f9 cf       	rjmp	.-14     	; 0x1e54 <_Z18set_gyro_registersv+0xf4>
		}

		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search
    1e62:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <gyro_address>
    1e66:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <gyro_address+0x1>
    1e6a:	8e e6       	ldi	r24, 0x6E	; 110
    1e6c:	92 e0       	ldi	r25, 0x02	; 2
    1e6e:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(CONFIG);                                            //We want to write to the CONFIG register (1A hex)
    1e72:	6a e1       	ldi	r22, 0x1A	; 26
    1e74:	70 e0       	ldi	r23, 0x00	; 0
    1e76:	8e e6       	ldi	r24, 0x6E	; 110
    1e78:	92 e0       	ldi	r25, 0x02	; 2
    1e7a:	0e 94 29 01 	call	0x252	; 0x252 <_ZN7TwoWire5writeEi>
		Wire.write(0x03);                                            //Set the register bits as 00000011 (Set Digital Low Pass Filter to ~43Hz)
    1e7e:	63 e0       	ldi	r22, 0x03	; 3
    1e80:	70 e0       	ldi	r23, 0x00	; 0
    1e82:	8e e6       	ldi	r24, 0x6E	; 110
    1e84:	92 e0       	ldi	r25, 0x02	; 2
    1e86:	0e 94 29 01 	call	0x252	; 0x252 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro
    1e8a:	8e e6       	ldi	r24, 0x6E	; 110
    1e8c:	92 e0       	ldi	r25, 0x02	; 2
    1e8e:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN7TwoWire15endTransmissionEv>

		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search
    1e92:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <gyro_address>
    1e96:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <gyro_address+0x1>
    1e9a:	8e e6       	ldi	r24, 0x6E	; 110
    1e9c:	92 e0       	ldi	r25, 0x02	; 2
    1e9e:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(ACCEL_CONFIG2);
    1ea2:	6d e1       	ldi	r22, 0x1D	; 29
    1ea4:	70 e0       	ldi	r23, 0x00	; 0
    1ea6:	8e e6       	ldi	r24, 0x6E	; 110
    1ea8:	92 e0       	ldi	r25, 0x02	; 2
    1eaa:	0e 94 29 01 	call	0x252	; 0x252 <_ZN7TwoWire5writeEi>
		Wire.write(0x01);                                            // Write new ACCEL_CONFIG2 41Hz  11.80ms delay
    1eae:	61 e0       	ldi	r22, 0x01	; 1
    1eb0:	70 e0       	ldi	r23, 0x00	; 0
    1eb2:	8e e6       	ldi	r24, 0x6E	; 110
    1eb4:	92 e0       	ldi	r25, 0x02	; 2
    1eb6:	0e 94 29 01 	call	0x252	; 0x252 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro
    1eba:	8e e6       	ldi	r24, 0x6E	; 110
    1ebc:	92 e0       	ldi	r25, 0x02	; 2
    1ebe:	0c 94 24 16 	jmp	0x2c48	; 0x2c48 <_ZN7TwoWire15endTransmissionEv>
    1ec2:	08 95       	ret

00001ec4 <setup>:
#define LED_LIGHT_PIN  A1
bool voltageealarm  = false;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Setup routine
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup(){
    1ec4:	cf 93       	push	r28
    1ec6:	df 93       	push	r29
	//Serial.begin(57600);
	//Copy the EEPROM data for fast access data.
	for(start = 0; start <= 35; start++)eeprom_data[start] = EEPROM.read(start);
    1ec8:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <start+0x1>
    1ecc:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <start>
    1ed0:	c0 91 13 02 	lds	r28, 0x0213	; 0x800213 <start>
    1ed4:	d0 91 14 02 	lds	r29, 0x0214	; 0x800214 <start+0x1>
    1ed8:	c4 32       	cpi	r28, 0x24	; 36
    1eda:	d1 05       	cpc	r29, r1
    1edc:	6c f4       	brge	.+26     	; 0x1ef8 <setup+0x34>

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    1ede:	ce 01       	movw	r24, r28
    1ee0:	0e 94 ba 1a 	call	0x3574	; 0x3574 <eeprom_read_byte>
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	ef 5c       	subi	r30, 0xCF	; 207
    1ee8:	fd 4f       	sbci	r31, 0xFD	; 253
    1eea:	80 83       	st	Z, r24
    1eec:	21 96       	adiw	r28, 0x01	; 1
    1eee:	d0 93 14 02 	sts	0x0214, r29	; 0x800214 <start+0x1>
    1ef2:	c0 93 13 02 	sts	0x0213, r28	; 0x800213 <start>
    1ef6:	ec cf       	rjmp	.-40     	; 0x1ed0 <setup+0xc>
	start = 0;                                                                //Set start back to zero.
    1ef8:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <start+0x1>
    1efc:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <start>
	gyro_address = eeprom_data[32];                                           //Store the gyro address in the variable.
    1f00:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <eeprom_data+0x20>
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <gyro_address+0x1>
    1f0a:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <gyro_address>

	Wire.begin();                                                             //Start the I2C as master.
    1f0e:	8e e6       	ldi	r24, 0x6E	; 110
    1f10:	92 e0       	ldi	r25, 0x02	; 2
    1f12:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <_ZN7TwoWire5beginEv>

	TWBR = 12;                                                                //Set the I2C clock speed to 400kHz.
    1f16:	8c e0       	ldi	r24, 0x0C	; 12
    1f18:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	//Arduino (Atmega) pins default to inputs, so they don't need to be explicitly declared as inputs.
	DDRD |= B11110000;                                                        //Configure digital poort 4, 5, 6 and 7 as output.
    1f1c:	8a b1       	in	r24, 0x0a	; 10
    1f1e:	80 6f       	ori	r24, 0xF0	; 240
    1f20:	8a b9       	out	0x0a, r24	; 10
	DDRB |= B00100000;                                                        //Configure digital poort  13 as output.
    1f22:	25 9a       	sbi	0x04, 5	; 4
	DDRB &= B11101111;                                                        //Configure digital poort  13 as output.
    1f24:	24 98       	cbi	0x04, 4	; 4
	
	//Use the led on the Arduino for startup indication.
	pinMode(LED_LIGHT_PIN, OUTPUT);
    1f26:	61 e0       	ldi	r22, 0x01	; 1
    1f28:	8f e0       	ldi	r24, 0x0F	; 15
    1f2a:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <pinMode>
	delayMicroseconds(10);                                                //Wait 1000us.
    1f2e:	8a e0       	ldi	r24, 0x0A	; 10
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <delayMicroseconds>
	digitalWrite(LED_STATUS_PIN ,HIGH);                                                    //Turn on the warning led.
    1f36:	61 e0       	ldi	r22, 0x01	; 1
    1f38:	8d e0       	ldi	r24, 0x0D	; 13
    1f3a:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <digitalWrite>
	digitalWrite(LED_LIGHT_PIN,LOW);                                                    //Turn on the warning led.
    1f3e:	60 e0       	ldi	r22, 0x00	; 0
    1f40:	8f e0       	ldi	r24, 0x0F	; 15
    1f42:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <digitalWrite>
	

	//Check the EEPROM signature to make sure that the setup program is executed.
	while(eeprom_data[33] != 'J' || eeprom_data[34] != 'M' || eeprom_data[35] != 'B')delay(10);
    1f46:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <eeprom_data+0x21>
    1f4a:	8a 34       	cpi	r24, 0x4A	; 74
    1f4c:	41 f4       	brne	.+16     	; 0x1f5e <setup+0x9a>
    1f4e:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <eeprom_data+0x22>
    1f52:	8d 34       	cpi	r24, 0x4D	; 77
    1f54:	21 f4       	brne	.+8      	; 0x1f5e <setup+0x9a>
    1f56:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <eeprom_data+0x23>
    1f5a:	82 34       	cpi	r24, 0x42	; 66
    1f5c:	39 f0       	breq	.+14     	; 0x1f6c <setup+0xa8>
    1f5e:	6a e0       	ldi	r22, 0x0A	; 10
    1f60:	70 e0       	ldi	r23, 0x00	; 0
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <delay>
    1f6a:	ed cf       	rjmp	.-38     	; 0x1f46 <setup+0x82>

	//The flight controller needs the MPU-6050 with gyro and accelerometer
	//If setup is completed without MPU-6050 stop the flight controller program
	if(eeprom_data[31] == 2 || eeprom_data[31] == 3)delay(10);
    1f6c:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <eeprom_data+0x1f>
    1f70:	82 50       	subi	r24, 0x02	; 2
    1f72:	82 30       	cpi	r24, 0x02	; 2
    1f74:	30 f4       	brcc	.+12     	; 0x1f82 <setup+0xbe>
    1f76:	6a e0       	ldi	r22, 0x0A	; 10
    1f78:	70 e0       	ldi	r23, 0x00	; 0
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <delay>

	set_gyro_registers();                                                     //Set the specific gyro registers.
    1f82:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <_Z18set_gyro_registersv>

	for (cal_int = 0; cal_int < 1250 ; cal_int ++){                           //Wait 5 seconds before continuing.
    1f86:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <cal_int+0x1>
    1f8a:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <cal_int>
    1f8e:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <cal_int>
    1f92:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <cal_int+0x1>
    1f96:	82 3e       	cpi	r24, 0xE2	; 226
    1f98:	94 40       	sbci	r25, 0x04	; 4
    1f9a:	c4 f4       	brge	.+48     	; 0x1fcc <setup+0x108>
		PORTD |= B11110000;                                                     //Set digital poort 4, 5, 6 and 7 high.
    1f9c:	8b b1       	in	r24, 0x0b	; 11
    1f9e:	80 6f       	ori	r24, 0xF0	; 240
    1fa0:	8b b9       	out	0x0b, r24	; 11
		delayMicroseconds(1000);                                                //Wait 1000us.
    1fa2:	88 ee       	ldi	r24, 0xE8	; 232
    1fa4:	93 e0       	ldi	r25, 0x03	; 3
    1fa6:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <delayMicroseconds>
		PORTD &= B00001111;                                                     //Set digital poort 4, 5, 6 and 7 low.
    1faa:	8b b1       	in	r24, 0x0b	; 11
    1fac:	8f 70       	andi	r24, 0x0F	; 15
    1fae:	8b b9       	out	0x0b, r24	; 11
		delayMicroseconds(3000);                                                //Wait 3000us.
    1fb0:	88 eb       	ldi	r24, 0xB8	; 184
    1fb2:	9b e0       	ldi	r25, 0x0B	; 11
    1fb4:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <delayMicroseconds>
	//If setup is completed without MPU-6050 stop the flight controller program
	if(eeprom_data[31] == 2 || eeprom_data[31] == 3)delay(10);

	set_gyro_registers();                                                     //Set the specific gyro registers.

	for (cal_int = 0; cal_int < 1250 ; cal_int ++){                           //Wait 5 seconds before continuing.
    1fb8:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <cal_int>
    1fbc:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <cal_int+0x1>
    1fc0:	01 96       	adiw	r24, 0x01	; 1
    1fc2:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <cal_int+0x1>
    1fc6:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <cal_int>
    1fca:	e1 cf       	rjmp	.-62     	; 0x1f8e <setup+0xca>
		PORTD &= B00001111;                                                     //Set digital poort 4, 5, 6 and 7 low.
		delayMicroseconds(3000);                                                //Wait 3000us.
	}

	//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
	for (cal_int = 0; cal_int < 2000 ; cal_int ++){                           //Take 2000 readings for calibration.
    1fcc:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <cal_int+0x1>
    1fd0:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <cal_int>
		if(cal_int % 15 == 0){
    1fd4:	cf e0       	ldi	r28, 0x0F	; 15
    1fd6:	d0 e0       	ldi	r29, 0x00	; 0
		PORTD &= B00001111;                                                     //Set digital poort 4, 5, 6 and 7 low.
		delayMicroseconds(3000);                                                //Wait 3000us.
	}

	//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
	for (cal_int = 0; cal_int < 2000 ; cal_int ++){                           //Take 2000 readings for calibration.
    1fd8:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <cal_int>
    1fdc:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <cal_int+0x1>
    1fe0:	80 3d       	cpi	r24, 0xD0	; 208
    1fe2:	27 e0       	ldi	r18, 0x07	; 7
    1fe4:	92 07       	cpc	r25, r18
    1fe6:	0c f0       	brlt	.+2      	; 0x1fea <setup+0x126>
    1fe8:	85 c0       	rjmp	.+266    	; 0x20f4 <setup+0x230>
		if(cal_int % 15 == 0){
    1fea:	be 01       	movw	r22, r28
    1fec:	0e 94 2a 1a 	call	0x3454	; 0x3454 <__divmodhi4>
    1ff0:	89 2b       	or	r24, r25
    1ff2:	51 f4       	brne	.+20     	; 0x2008 <setup+0x144>
			digitalWrite(LED_STATUS_PIN , !digitalRead(LED_STATUS_PIN));                //Change the led status to indicate calibration.
    1ff4:	8d e0       	ldi	r24, 0x0D	; 13
    1ff6:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <digitalRead>
    1ffa:	61 e0       	ldi	r22, 0x01	; 1
    1ffc:	89 2b       	or	r24, r25
    1ffe:	09 f0       	breq	.+2      	; 0x2002 <setup+0x13e>
    2000:	60 e0       	ldi	r22, 0x00	; 0
    2002:	8d e0       	ldi	r24, 0x0D	; 13
    2004:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <digitalWrite>
		}
		GyroRead();                                                        //Read the gyro output.
    2008:	0e 94 76 05 	call	0xaec	; 0xaec <_Z8GyroReadv>
		gyro_axis_cal[1] += gyro_axis[1];                                       //Ad roll value to gyro_roll_cal.
    200c:	60 91 f1 01 	lds	r22, 0x01F1	; 0x8001f1 <gyro_axis+0x2>
    2010:	70 91 f2 01 	lds	r23, 0x01F2	; 0x8001f2 <gyro_axis+0x3>
    2014:	07 2e       	mov	r0, r23
    2016:	00 0c       	add	r0, r0
    2018:	88 0b       	sbc	r24, r24
    201a:	99 0b       	sbc	r25, r25
    201c:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
    2020:	9b 01       	movw	r18, r22
    2022:	ac 01       	movw	r20, r24
    2024:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <gyro_axis_cal+0x4>
    2028:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <gyro_axis_cal+0x5>
    202c:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <gyro_axis_cal+0x6>
    2030:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <gyro_axis_cal+0x7>
    2034:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
    2038:	60 93 83 01 	sts	0x0183, r22	; 0x800183 <gyro_axis_cal+0x4>
    203c:	70 93 84 01 	sts	0x0184, r23	; 0x800184 <gyro_axis_cal+0x5>
    2040:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <gyro_axis_cal+0x6>
    2044:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <gyro_axis_cal+0x7>
		gyro_axis_cal[2] += gyro_axis[2];                                       //Ad pitch value to gyro_pitch_cal.
    2048:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <gyro_axis+0x4>
    204c:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <gyro_axis+0x5>
    2050:	07 2e       	mov	r0, r23
    2052:	00 0c       	add	r0, r0
    2054:	88 0b       	sbc	r24, r24
    2056:	99 0b       	sbc	r25, r25
    2058:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
    205c:	9b 01       	movw	r18, r22
    205e:	ac 01       	movw	r20, r24
    2060:	60 91 87 01 	lds	r22, 0x0187	; 0x800187 <gyro_axis_cal+0x8>
    2064:	70 91 88 01 	lds	r23, 0x0188	; 0x800188 <gyro_axis_cal+0x9>
    2068:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <gyro_axis_cal+0xa>
    206c:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <gyro_axis_cal+0xb>
    2070:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
    2074:	60 93 87 01 	sts	0x0187, r22	; 0x800187 <gyro_axis_cal+0x8>
    2078:	70 93 88 01 	sts	0x0188, r23	; 0x800188 <gyro_axis_cal+0x9>
    207c:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <gyro_axis_cal+0xa>
    2080:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <gyro_axis_cal+0xb>
		gyro_axis_cal[3] += gyro_axis[3];                                       //Ad yaw value to gyro_yaw_cal.
    2084:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <gyro_axis+0x6>
    2088:	70 91 f6 01 	lds	r23, 0x01F6	; 0x8001f6 <gyro_axis+0x7>
    208c:	07 2e       	mov	r0, r23
    208e:	00 0c       	add	r0, r0
    2090:	88 0b       	sbc	r24, r24
    2092:	99 0b       	sbc	r25, r25
    2094:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
    2098:	9b 01       	movw	r18, r22
    209a:	ac 01       	movw	r20, r24
    209c:	60 91 8b 01 	lds	r22, 0x018B	; 0x80018b <gyro_axis_cal+0xc>
    20a0:	70 91 8c 01 	lds	r23, 0x018C	; 0x80018c <gyro_axis_cal+0xd>
    20a4:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <gyro_axis_cal+0xe>
    20a8:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <gyro_axis_cal+0xf>
    20ac:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
    20b0:	60 93 8b 01 	sts	0x018B, r22	; 0x80018b <gyro_axis_cal+0xc>
    20b4:	70 93 8c 01 	sts	0x018C, r23	; 0x80018c <gyro_axis_cal+0xd>
    20b8:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <gyro_axis_cal+0xe>
    20bc:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <gyro_axis_cal+0xf>
		//We don't want the esc's to be beeping annoyingly. So let's give them a 1000us puls while calibrating the gyro.
		PORTD |= B11110000;                                                     //Set digital poort 4, 5, 6 and 7 high.
    20c0:	8b b1       	in	r24, 0x0b	; 11
    20c2:	80 6f       	ori	r24, 0xF0	; 240
    20c4:	8b b9       	out	0x0b, r24	; 11
		delayMicroseconds(1000);                                                //Wait 1000us.
    20c6:	88 ee       	ldi	r24, 0xE8	; 232
    20c8:	93 e0       	ldi	r25, 0x03	; 3
    20ca:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <delayMicroseconds>
		PORTD &= B00001111;                                                     //Set digital poort 4, 5, 6 and 7 low.
    20ce:	8b b1       	in	r24, 0x0b	; 11
    20d0:	8f 70       	andi	r24, 0x0F	; 15
    20d2:	8b b9       	out	0x0b, r24	; 11
		delay(3);                                                               //Wait 3 milliseconds before the next loop.
    20d4:	63 e0       	ldi	r22, 0x03	; 3
    20d6:	70 e0       	ldi	r23, 0x00	; 0
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <delay>
		PORTD &= B00001111;                                                     //Set digital poort 4, 5, 6 and 7 low.
		delayMicroseconds(3000);                                                //Wait 3000us.
	}

	//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
	for (cal_int = 0; cal_int < 2000 ; cal_int ++){                           //Take 2000 readings for calibration.
    20e0:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <cal_int>
    20e4:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <cal_int+0x1>
    20e8:	01 96       	adiw	r24, 0x01	; 1
    20ea:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <cal_int+0x1>
    20ee:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <cal_int>
    20f2:	72 cf       	rjmp	.-284    	; 0x1fd8 <setup+0x114>
		PORTD |= B11110000;                                                     //Set digital poort 4, 5, 6 and 7 high.
		delayMicroseconds(1000);                                                //Wait 1000us.
		PORTD &= B00001111;                                                     //Set digital poort 4, 5, 6 and 7 low.
		delay(3);                                                               //Wait 3 milliseconds before the next loop.
	}
	digitalWrite(LED_LIGHT_PIN,LOW);
    20f4:	60 e0       	ldi	r22, 0x00	; 0
    20f6:	8f e0       	ldi	r24, 0x0F	; 15
    20f8:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <digitalWrite>

	//Now that we have 2000 measures, we need to devide by 2000 to get the average gyro offset.
	gyro_axis_cal[1] /= 2000;                                                 //Divide the roll total by 2000.
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	4a ef       	ldi	r20, 0xFA	; 250
    2102:	54 e4       	ldi	r21, 0x44	; 68
    2104:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <gyro_axis_cal+0x4>
    2108:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <gyro_axis_cal+0x5>
    210c:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <gyro_axis_cal+0x6>
    2110:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <gyro_axis_cal+0x7>
    2114:	0e 94 16 12 	call	0x242c	; 0x242c <__divsf3>
    2118:	60 93 83 01 	sts	0x0183, r22	; 0x800183 <gyro_axis_cal+0x4>
    211c:	70 93 84 01 	sts	0x0184, r23	; 0x800184 <gyro_axis_cal+0x5>
    2120:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <gyro_axis_cal+0x6>
    2124:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <gyro_axis_cal+0x7>
	gyro_axis_cal[2] /= 2000;                                                 //Divide the pitch total by 2000.
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	4a ef       	ldi	r20, 0xFA	; 250
    212e:	54 e4       	ldi	r21, 0x44	; 68
    2130:	60 91 87 01 	lds	r22, 0x0187	; 0x800187 <gyro_axis_cal+0x8>
    2134:	70 91 88 01 	lds	r23, 0x0188	; 0x800188 <gyro_axis_cal+0x9>
    2138:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <gyro_axis_cal+0xa>
    213c:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <gyro_axis_cal+0xb>
    2140:	0e 94 16 12 	call	0x242c	; 0x242c <__divsf3>
    2144:	60 93 87 01 	sts	0x0187, r22	; 0x800187 <gyro_axis_cal+0x8>
    2148:	70 93 88 01 	sts	0x0188, r23	; 0x800188 <gyro_axis_cal+0x9>
    214c:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <gyro_axis_cal+0xa>
    2150:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <gyro_axis_cal+0xb>
	gyro_axis_cal[3] /= 2000;                                                 //Divide the yaw total by 2000.
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	4a ef       	ldi	r20, 0xFA	; 250
    215a:	54 e4       	ldi	r21, 0x44	; 68
    215c:	60 91 8b 01 	lds	r22, 0x018B	; 0x80018b <gyro_axis_cal+0xc>
    2160:	70 91 8c 01 	lds	r23, 0x018C	; 0x80018c <gyro_axis_cal+0xd>
    2164:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <gyro_axis_cal+0xe>
    2168:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <gyro_axis_cal+0xf>
    216c:	0e 94 16 12 	call	0x242c	; 0x242c <__divsf3>
    2170:	60 93 8b 01 	sts	0x018B, r22	; 0x80018b <gyro_axis_cal+0xc>
    2174:	70 93 8c 01 	sts	0x018C, r23	; 0x80018c <gyro_axis_cal+0xd>
    2178:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <gyro_axis_cal+0xe>
    217c:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <gyro_axis_cal+0xf>

	PCICR |= (1 << PCIE0);			//Set PCIE0 to enable PCMSK0 scan.
    2180:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    2184:	81 60       	ori	r24, 0x01	; 1
    2186:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCICR |= (1 << PCIE2);                                                    //Set PCIE2 to enable PCMSK2 scan.
    218a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    218e:	84 60       	ori	r24, 0x04	; 4
    2190:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK0 |= (1 << PCINT0);                                                  //Set PCINT0 (digital input 8) to trigger an interrupt on state change.
    2194:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    2198:	81 60       	ori	r24, 0x01	; 1
    219a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK0 |= (1 << PCINT1);                                                  //Set PCINT1 (digital input 9)to trigger an interrupt on state change.
    219e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    21a2:	82 60       	ori	r24, 0x02	; 2
    21a4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK0 |= (1 << PCINT2);                                                  //Set PCINT2 (digital input 10)to trigger an interrupt on state change.
    21a8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    21ac:	84 60       	ori	r24, 0x04	; 4
    21ae:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK0 |= (1 << PCINT3);                                                  //Set PCINT3 (digital input 11)to trigger an interrupt on state change.
    21b2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    21b6:	88 60       	ori	r24, 0x08	; 8
    21b8:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK0 |= (1 << PCINT4);                                                  //Set PCINT3 (digital input 12)to trigger an interrupt on state change.
    21bc:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    21c0:	80 61       	ori	r24, 0x10	; 16
    21c2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK2 |= (1 << PCINT18);
    21c6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
    21ca:	84 60       	ori	r24, 0x04	; 4
    21cc:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
	PCMSK2 |= (1 << PCINT19);
    21d0:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
    21d4:	88 60       	ori	r24, 0x08	; 8
    21d6:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>


	//Wait until the receiver is active and the throtle is set to the lower position.
	while(receiver_input_channel_3 < 990 || receiver_input_channel_3 > 1020 || receiver_input_channel_4 < 1400){
    21da:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <receiver_input_channel_3>
    21de:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <receiver_input_channel_3+0x1>
    21e2:	8e 3d       	cpi	r24, 0xDE	; 222
    21e4:	93 40       	sbci	r25, 0x03	; 3
    21e6:	0c f4       	brge	.+2      	; 0x21ea <setup+0x326>
    21e8:	56 c0       	rjmp	.+172    	; 0x2296 <setup+0x3d2>
    21ea:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <receiver_input_channel_3>
    21ee:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <receiver_input_channel_3+0x1>
    21f2:	8d 3f       	cpi	r24, 0xFD	; 253
    21f4:	93 40       	sbci	r25, 0x03	; 3
    21f6:	0c f0       	brlt	.+2      	; 0x21fa <setup+0x336>
    21f8:	4e c0       	rjmp	.+156    	; 0x2296 <setup+0x3d2>
    21fa:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <receiver_input_channel_4>
    21fe:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <receiver_input_channel_4+0x1>
    2202:	88 37       	cpi	r24, 0x78	; 120
    2204:	95 40       	sbci	r25, 0x05	; 5
    2206:	0c f4       	brge	.+2      	; 0x220a <setup+0x346>
    2208:	46 c0       	rjmp	.+140    	; 0x2296 <setup+0x3d2>
		if(start == 125){                                                       //Every 125 loops (500ms).
			digitalWrite(LED_STATUS_PIN, !digitalRead(LED_STATUS_PIN));                                   //Change the led status.
			start = 0;                                                            //Start again at 0.
		}
	}
	start = 0;                                                                //Set start back to 0.
    220a:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <start+0x1>
    220e:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <start>
	//65 is the voltage compensation for the diode.
	//12.6V equals ~5V @ Analog 0.
	//12.6V equals 1023 analogRead(0).
	//1260 / 1023 = 1.2317.
	//The variable battery_voltage holds 1050 if the battery voltage is 10.5V.
	battery_voltage = (analogRead(0) + 65) * 1.2317;
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <analogRead>
    2218:	8f 5b       	subi	r24, 0xBF	; 191
    221a:	9f 4f       	sbci	r25, 0xFF	; 255
    221c:	bc 01       	movw	r22, r24
    221e:	99 0f       	add	r25, r25
    2220:	88 0b       	sbc	r24, r24
    2222:	99 0b       	sbc	r25, r25
    2224:	0e 94 c0 12 	call	0x2580	; 0x2580 <__floatsisf>
    2228:	28 e5       	ldi	r18, 0x58	; 88
    222a:	38 ea       	ldi	r19, 0xA8	; 168
    222c:	4d e9       	ldi	r20, 0x9D	; 157
    222e:	5f e3       	ldi	r21, 0x3F	; 63
    2230:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
    2234:	0e 94 88 12 	call	0x2510	; 0x2510 <__fixsfsi>
    2238:	70 93 18 02 	sts	0x0218, r23	; 0x800218 <battery_voltage+0x1>
    223c:	60 93 17 02 	sts	0x0217, r22	; 0x800217 <battery_voltage>

	loop_timer = micros();                                                    //Set the timer for the next loop.
    2240:	0e 94 77 16 	call	0x2cee	; 0x2cee <micros>
    2244:	60 93 9b 01 	sts	0x019B, r22	; 0x80019b <loop_timer>
    2248:	70 93 9c 01 	sts	0x019C, r23	; 0x80019c <loop_timer+0x1>
    224c:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <loop_timer+0x2>
    2250:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <loop_timer+0x3>

	//When everything is done, turn off the led.
	digitalWrite(LED_STATUS_PIN,LOW);                                                     //Turn off the warning led.
    2254:	60 e0       	ldi	r22, 0x00	; 0
    2256:	8d e0       	ldi	r24, 0x0D	; 13
    2258:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <digitalWrite>
	digitalWrite(LED_LIGHT_PIN, HIGH);
    225c:	61 e0       	ldi	r22, 0x01	; 1
    225e:	8f e0       	ldi	r24, 0x0F	; 15
    2260:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <digitalWrite>
	delay(1000);
    2264:	68 ee       	ldi	r22, 0xE8	; 232
    2266:	73 e0       	ldi	r23, 0x03	; 3
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <delay>
	digitalWrite(LED_LIGHT_PIN, LOW);
    2270:	60 e0       	ldi	r22, 0x00	; 0
    2272:	8f e0       	ldi	r24, 0x0F	; 15
    2274:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <digitalWrite>
	loop_timer = micros();                                                    //Set the timer for the next loop.
    2278:	0e 94 77 16 	call	0x2cee	; 0x2cee <micros>
    227c:	60 93 9b 01 	sts	0x019B, r22	; 0x80019b <loop_timer>
    2280:	70 93 9c 01 	sts	0x019C, r23	; 0x80019c <loop_timer+0x1>
    2284:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <loop_timer+0x2>
    2288:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <loop_timer+0x3>
	voltageealarm  = false;
    228c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <voltageealarm>
}
    2290:	df 91       	pop	r29
    2292:	cf 91       	pop	r28
    2294:	08 95       	ret
    2296:	83 e0       	ldi	r24, 0x03	; 3
    2298:	0e 94 ba 00 	call	0x174	; 0x174 <_Z24convert_receiver_channelh.part.1>
	PCMSK2 |= (1 << PCINT19);


	//Wait until the receiver is active and the throtle is set to the lower position.
	while(receiver_input_channel_3 < 990 || receiver_input_channel_3 > 1020 || receiver_input_channel_4 < 1400){
		receiver_input_channel_3 = convert_receiver_channel(3);                 //Convert the actual receiver signals for throttle to the standard 1000 - 2000us
    229c:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <receiver_input_channel_3+0x1>
    22a0:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <receiver_input_channel_3>
    22a4:	84 e0       	ldi	r24, 0x04	; 4
    22a6:	0e 94 ba 00 	call	0x174	; 0x174 <_Z24convert_receiver_channelh.part.1>
		receiver_input_channel_4 = convert_receiver_channel(4);                 //Convert the actual receiver signals for yaw to the standard 1000 - 2000us
    22aa:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <receiver_input_channel_4+0x1>
    22ae:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <receiver_input_channel_4>
		start ++;                                                               //While waiting increment start whith every loop.
    22b2:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <start>
    22b6:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <start+0x1>
    22ba:	01 96       	adiw	r24, 0x01	; 1
    22bc:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <start+0x1>
    22c0:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <start>
		//We don't want the esc's to be beeping annoyingly. So let's give them a 1000us puls while waiting for the receiver inputs.
		PORTD |= B11110000;                                                     //Set digital poort 4, 5, 6 and 7 high.
    22c4:	8b b1       	in	r24, 0x0b	; 11
    22c6:	80 6f       	ori	r24, 0xF0	; 240
    22c8:	8b b9       	out	0x0b, r24	; 11
		delayMicroseconds(1000);                                                //Wait 1000us.
    22ca:	88 ee       	ldi	r24, 0xE8	; 232
    22cc:	93 e0       	ldi	r25, 0x03	; 3
    22ce:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <delayMicroseconds>
		PORTD &= B00001111;                                                     //Set digital poort 4, 5, 6 and 7 low.
    22d2:	8b b1       	in	r24, 0x0b	; 11
    22d4:	8f 70       	andi	r24, 0x0F	; 15
    22d6:	8b b9       	out	0x0b, r24	; 11
		delay(3);                                                               //Wait 3 milliseconds before the next loop.
    22d8:	63 e0       	ldi	r22, 0x03	; 3
    22da:	70 e0       	ldi	r23, 0x00	; 0
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <delay>
		if(start == 125){                                                       //Every 125 loops (500ms).
    22e4:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <start>
    22e8:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <start+0x1>
    22ec:	8d 37       	cpi	r24, 0x7D	; 125
    22ee:	91 05       	cpc	r25, r1
    22f0:	09 f0       	breq	.+2      	; 0x22f4 <setup+0x430>
    22f2:	73 cf       	rjmp	.-282    	; 0x21da <setup+0x316>
			digitalWrite(LED_STATUS_PIN, !digitalRead(LED_STATUS_PIN));                                   //Change the led status.
    22f4:	8d e0       	ldi	r24, 0x0D	; 13
    22f6:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <digitalRead>
    22fa:	61 e0       	ldi	r22, 0x01	; 1
    22fc:	89 2b       	or	r24, r25
    22fe:	09 f0       	breq	.+2      	; 0x2302 <setup+0x43e>
    2300:	60 e0       	ldi	r22, 0x00	; 0
    2302:	8d e0       	ldi	r24, 0x0D	; 13
    2304:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <digitalWrite>
			start = 0;                                                            //Start again at 0.
    2308:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <start+0x1>
    230c:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <start>
    2310:	64 cf       	rjmp	.-312    	; 0x21da <setup+0x316>

00002312 <__subsf3>:
    2312:	50 58       	subi	r21, 0x80	; 128

00002314 <__addsf3>:
    2314:	bb 27       	eor	r27, r27
    2316:	aa 27       	eor	r26, r26
    2318:	0e 94 a1 11 	call	0x2342	; 0x2342 <__addsf3x>
    231c:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__fp_round>
    2320:	0e 94 83 13 	call	0x2706	; 0x2706 <__fp_pscA>
    2324:	38 f0       	brcs	.+14     	; 0x2334 <__addsf3+0x20>
    2326:	0e 94 8a 13 	call	0x2714	; 0x2714 <__fp_pscB>
    232a:	20 f0       	brcs	.+8      	; 0x2334 <__addsf3+0x20>
    232c:	39 f4       	brne	.+14     	; 0x233c <__addsf3+0x28>
    232e:	9f 3f       	cpi	r25, 0xFF	; 255
    2330:	19 f4       	brne	.+6      	; 0x2338 <__addsf3+0x24>
    2332:	26 f4       	brtc	.+8      	; 0x233c <__addsf3+0x28>
    2334:	0c 94 45 13 	jmp	0x268a	; 0x268a <__fp_nan>
    2338:	0e f4       	brtc	.+2      	; 0x233c <__addsf3+0x28>
    233a:	e0 95       	com	r30
    233c:	e7 fb       	bst	r30, 7
    233e:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__fp_inf>

00002342 <__addsf3x>:
    2342:	e9 2f       	mov	r30, r25
    2344:	0e 94 a2 13 	call	0x2744	; 0x2744 <__fp_split3>
    2348:	58 f3       	brcs	.-42     	; 0x2320 <__addsf3+0xc>
    234a:	ba 17       	cp	r27, r26
    234c:	62 07       	cpc	r22, r18
    234e:	73 07       	cpc	r23, r19
    2350:	84 07       	cpc	r24, r20
    2352:	95 07       	cpc	r25, r21
    2354:	20 f0       	brcs	.+8      	; 0x235e <__addsf3x+0x1c>
    2356:	79 f4       	brne	.+30     	; 0x2376 <__addsf3x+0x34>
    2358:	a6 f5       	brtc	.+104    	; 0x23c2 <__addsf3x+0x80>
    235a:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <__fp_zero>
    235e:	0e f4       	brtc	.+2      	; 0x2362 <__addsf3x+0x20>
    2360:	e0 95       	com	r30
    2362:	0b 2e       	mov	r0, r27
    2364:	ba 2f       	mov	r27, r26
    2366:	a0 2d       	mov	r26, r0
    2368:	0b 01       	movw	r0, r22
    236a:	b9 01       	movw	r22, r18
    236c:	90 01       	movw	r18, r0
    236e:	0c 01       	movw	r0, r24
    2370:	ca 01       	movw	r24, r20
    2372:	a0 01       	movw	r20, r0
    2374:	11 24       	eor	r1, r1
    2376:	ff 27       	eor	r31, r31
    2378:	59 1b       	sub	r21, r25
    237a:	99 f0       	breq	.+38     	; 0x23a2 <__addsf3x+0x60>
    237c:	59 3f       	cpi	r21, 0xF9	; 249
    237e:	50 f4       	brcc	.+20     	; 0x2394 <__addsf3x+0x52>
    2380:	50 3e       	cpi	r21, 0xE0	; 224
    2382:	68 f1       	brcs	.+90     	; 0x23de <__addsf3x+0x9c>
    2384:	1a 16       	cp	r1, r26
    2386:	f0 40       	sbci	r31, 0x00	; 0
    2388:	a2 2f       	mov	r26, r18
    238a:	23 2f       	mov	r18, r19
    238c:	34 2f       	mov	r19, r20
    238e:	44 27       	eor	r20, r20
    2390:	58 5f       	subi	r21, 0xF8	; 248
    2392:	f3 cf       	rjmp	.-26     	; 0x237a <__addsf3x+0x38>
    2394:	46 95       	lsr	r20
    2396:	37 95       	ror	r19
    2398:	27 95       	ror	r18
    239a:	a7 95       	ror	r26
    239c:	f0 40       	sbci	r31, 0x00	; 0
    239e:	53 95       	inc	r21
    23a0:	c9 f7       	brne	.-14     	; 0x2394 <__addsf3x+0x52>
    23a2:	7e f4       	brtc	.+30     	; 0x23c2 <__addsf3x+0x80>
    23a4:	1f 16       	cp	r1, r31
    23a6:	ba 0b       	sbc	r27, r26
    23a8:	62 0b       	sbc	r22, r18
    23aa:	73 0b       	sbc	r23, r19
    23ac:	84 0b       	sbc	r24, r20
    23ae:	ba f0       	brmi	.+46     	; 0x23de <__addsf3x+0x9c>
    23b0:	91 50       	subi	r25, 0x01	; 1
    23b2:	a1 f0       	breq	.+40     	; 0x23dc <__addsf3x+0x9a>
    23b4:	ff 0f       	add	r31, r31
    23b6:	bb 1f       	adc	r27, r27
    23b8:	66 1f       	adc	r22, r22
    23ba:	77 1f       	adc	r23, r23
    23bc:	88 1f       	adc	r24, r24
    23be:	c2 f7       	brpl	.-16     	; 0x23b0 <__addsf3x+0x6e>
    23c0:	0e c0       	rjmp	.+28     	; 0x23de <__addsf3x+0x9c>
    23c2:	ba 0f       	add	r27, r26
    23c4:	62 1f       	adc	r22, r18
    23c6:	73 1f       	adc	r23, r19
    23c8:	84 1f       	adc	r24, r20
    23ca:	48 f4       	brcc	.+18     	; 0x23de <__addsf3x+0x9c>
    23cc:	87 95       	ror	r24
    23ce:	77 95       	ror	r23
    23d0:	67 95       	ror	r22
    23d2:	b7 95       	ror	r27
    23d4:	f7 95       	ror	r31
    23d6:	9e 3f       	cpi	r25, 0xFE	; 254
    23d8:	08 f0       	brcs	.+2      	; 0x23dc <__addsf3x+0x9a>
    23da:	b0 cf       	rjmp	.-160    	; 0x233c <__addsf3+0x28>
    23dc:	93 95       	inc	r25
    23de:	88 0f       	add	r24, r24
    23e0:	08 f0       	brcs	.+2      	; 0x23e4 <__addsf3x+0xa2>
    23e2:	99 27       	eor	r25, r25
    23e4:	ee 0f       	add	r30, r30
    23e6:	97 95       	ror	r25
    23e8:	87 95       	ror	r24
    23ea:	08 95       	ret

000023ec <asin>:
    23ec:	9f 93       	push	r25
    23ee:	9f 77       	andi	r25, 0x7F	; 127
    23f0:	ee e3       	ldi	r30, 0x3E	; 62
    23f2:	89 37       	cpi	r24, 0x79	; 121
    23f4:	9e 07       	cpc	r25, r30
    23f6:	28 f4       	brcc	.+10     	; 0x2402 <asin+0x16>
    23f8:	e8 e6       	ldi	r30, 0x68	; 104
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	0e 94 6f 13 	call	0x26de	; 0x26de <__fp_powsodd>
    2400:	0c c0       	rjmp	.+24     	; 0x241a <asin+0x2e>
    2402:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__fp_arccos>
    2406:	90 58       	subi	r25, 0x80	; 128
    2408:	a2 ea       	ldi	r26, 0xA2	; 162
    240a:	2a ed       	ldi	r18, 0xDA	; 218
    240c:	3f e0       	ldi	r19, 0x0F	; 15
    240e:	49 ec       	ldi	r20, 0xC9	; 201
    2410:	5f e3       	ldi	r21, 0x3F	; 63
    2412:	0e 94 a1 11 	call	0x2342	; 0x2342 <__addsf3x>
    2416:	0e 94 91 13 	call	0x2722	; 0x2722 <__fp_round>
    241a:	0f 90       	pop	r0
    241c:	07 fc       	sbrc	r0, 7
    241e:	90 58       	subi	r25, 0x80	; 128
    2420:	08 95       	ret

00002422 <__cmpsf2>:
    2422:	0e 94 1b 13 	call	0x2636	; 0x2636 <__fp_cmp>
    2426:	08 f4       	brcc	.+2      	; 0x242a <__cmpsf2+0x8>
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	08 95       	ret

0000242c <__divsf3>:
    242c:	0e 94 2a 12 	call	0x2454	; 0x2454 <__divsf3x>
    2430:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__fp_round>
    2434:	0e 94 8a 13 	call	0x2714	; 0x2714 <__fp_pscB>
    2438:	58 f0       	brcs	.+22     	; 0x2450 <__divsf3+0x24>
    243a:	0e 94 83 13 	call	0x2706	; 0x2706 <__fp_pscA>
    243e:	40 f0       	brcs	.+16     	; 0x2450 <__divsf3+0x24>
    2440:	29 f4       	brne	.+10     	; 0x244c <__divsf3+0x20>
    2442:	5f 3f       	cpi	r21, 0xFF	; 255
    2444:	29 f0       	breq	.+10     	; 0x2450 <__divsf3+0x24>
    2446:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__fp_inf>
    244a:	51 11       	cpse	r21, r1
    244c:	0c 94 c5 13 	jmp	0x278a	; 0x278a <__fp_szero>
    2450:	0c 94 45 13 	jmp	0x268a	; 0x268a <__fp_nan>

00002454 <__divsf3x>:
    2454:	0e 94 a2 13 	call	0x2744	; 0x2744 <__fp_split3>
    2458:	68 f3       	brcs	.-38     	; 0x2434 <__divsf3+0x8>

0000245a <__divsf3_pse>:
    245a:	99 23       	and	r25, r25
    245c:	b1 f3       	breq	.-20     	; 0x244a <__divsf3+0x1e>
    245e:	55 23       	and	r21, r21
    2460:	91 f3       	breq	.-28     	; 0x2446 <__divsf3+0x1a>
    2462:	95 1b       	sub	r25, r21
    2464:	55 0b       	sbc	r21, r21
    2466:	bb 27       	eor	r27, r27
    2468:	aa 27       	eor	r26, r26
    246a:	62 17       	cp	r22, r18
    246c:	73 07       	cpc	r23, r19
    246e:	84 07       	cpc	r24, r20
    2470:	38 f0       	brcs	.+14     	; 0x2480 <__divsf3_pse+0x26>
    2472:	9f 5f       	subi	r25, 0xFF	; 255
    2474:	5f 4f       	sbci	r21, 0xFF	; 255
    2476:	22 0f       	add	r18, r18
    2478:	33 1f       	adc	r19, r19
    247a:	44 1f       	adc	r20, r20
    247c:	aa 1f       	adc	r26, r26
    247e:	a9 f3       	breq	.-22     	; 0x246a <__divsf3_pse+0x10>
    2480:	35 d0       	rcall	.+106    	; 0x24ec <__divsf3_pse+0x92>
    2482:	0e 2e       	mov	r0, r30
    2484:	3a f0       	brmi	.+14     	; 0x2494 <__divsf3_pse+0x3a>
    2486:	e0 e8       	ldi	r30, 0x80	; 128
    2488:	32 d0       	rcall	.+100    	; 0x24ee <__divsf3_pse+0x94>
    248a:	91 50       	subi	r25, 0x01	; 1
    248c:	50 40       	sbci	r21, 0x00	; 0
    248e:	e6 95       	lsr	r30
    2490:	00 1c       	adc	r0, r0
    2492:	ca f7       	brpl	.-14     	; 0x2486 <__divsf3_pse+0x2c>
    2494:	2b d0       	rcall	.+86     	; 0x24ec <__divsf3_pse+0x92>
    2496:	fe 2f       	mov	r31, r30
    2498:	29 d0       	rcall	.+82     	; 0x24ec <__divsf3_pse+0x92>
    249a:	66 0f       	add	r22, r22
    249c:	77 1f       	adc	r23, r23
    249e:	88 1f       	adc	r24, r24
    24a0:	bb 1f       	adc	r27, r27
    24a2:	26 17       	cp	r18, r22
    24a4:	37 07       	cpc	r19, r23
    24a6:	48 07       	cpc	r20, r24
    24a8:	ab 07       	cpc	r26, r27
    24aa:	b0 e8       	ldi	r27, 0x80	; 128
    24ac:	09 f0       	breq	.+2      	; 0x24b0 <__divsf3_pse+0x56>
    24ae:	bb 0b       	sbc	r27, r27
    24b0:	80 2d       	mov	r24, r0
    24b2:	bf 01       	movw	r22, r30
    24b4:	ff 27       	eor	r31, r31
    24b6:	93 58       	subi	r25, 0x83	; 131
    24b8:	5f 4f       	sbci	r21, 0xFF	; 255
    24ba:	3a f0       	brmi	.+14     	; 0x24ca <__divsf3_pse+0x70>
    24bc:	9e 3f       	cpi	r25, 0xFE	; 254
    24be:	51 05       	cpc	r21, r1
    24c0:	78 f0       	brcs	.+30     	; 0x24e0 <__divsf3_pse+0x86>
    24c2:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__fp_inf>
    24c6:	0c 94 c5 13 	jmp	0x278a	; 0x278a <__fp_szero>
    24ca:	5f 3f       	cpi	r21, 0xFF	; 255
    24cc:	e4 f3       	brlt	.-8      	; 0x24c6 <__divsf3_pse+0x6c>
    24ce:	98 3e       	cpi	r25, 0xE8	; 232
    24d0:	d4 f3       	brlt	.-12     	; 0x24c6 <__divsf3_pse+0x6c>
    24d2:	86 95       	lsr	r24
    24d4:	77 95       	ror	r23
    24d6:	67 95       	ror	r22
    24d8:	b7 95       	ror	r27
    24da:	f7 95       	ror	r31
    24dc:	9f 5f       	subi	r25, 0xFF	; 255
    24de:	c9 f7       	brne	.-14     	; 0x24d2 <__divsf3_pse+0x78>
    24e0:	88 0f       	add	r24, r24
    24e2:	91 1d       	adc	r25, r1
    24e4:	96 95       	lsr	r25
    24e6:	87 95       	ror	r24
    24e8:	97 f9       	bld	r25, 7
    24ea:	08 95       	ret
    24ec:	e1 e0       	ldi	r30, 0x01	; 1
    24ee:	66 0f       	add	r22, r22
    24f0:	77 1f       	adc	r23, r23
    24f2:	88 1f       	adc	r24, r24
    24f4:	bb 1f       	adc	r27, r27
    24f6:	62 17       	cp	r22, r18
    24f8:	73 07       	cpc	r23, r19
    24fa:	84 07       	cpc	r24, r20
    24fc:	ba 07       	cpc	r27, r26
    24fe:	20 f0       	brcs	.+8      	; 0x2508 <__divsf3_pse+0xae>
    2500:	62 1b       	sub	r22, r18
    2502:	73 0b       	sbc	r23, r19
    2504:	84 0b       	sbc	r24, r20
    2506:	ba 0b       	sbc	r27, r26
    2508:	ee 1f       	adc	r30, r30
    250a:	88 f7       	brcc	.-30     	; 0x24ee <__divsf3_pse+0x94>
    250c:	e0 95       	com	r30
    250e:	08 95       	ret

00002510 <__fixsfsi>:
    2510:	0e 94 8f 12 	call	0x251e	; 0x251e <__fixunssfsi>
    2514:	68 94       	set
    2516:	b1 11       	cpse	r27, r1
    2518:	0c 94 c5 13 	jmp	0x278a	; 0x278a <__fp_szero>
    251c:	08 95       	ret

0000251e <__fixunssfsi>:
    251e:	0e 94 aa 13 	call	0x2754	; 0x2754 <__fp_splitA>
    2522:	88 f0       	brcs	.+34     	; 0x2546 <__fixunssfsi+0x28>
    2524:	9f 57       	subi	r25, 0x7F	; 127
    2526:	98 f0       	brcs	.+38     	; 0x254e <__fixunssfsi+0x30>
    2528:	b9 2f       	mov	r27, r25
    252a:	99 27       	eor	r25, r25
    252c:	b7 51       	subi	r27, 0x17	; 23
    252e:	b0 f0       	brcs	.+44     	; 0x255c <__fixunssfsi+0x3e>
    2530:	e1 f0       	breq	.+56     	; 0x256a <__fixunssfsi+0x4c>
    2532:	66 0f       	add	r22, r22
    2534:	77 1f       	adc	r23, r23
    2536:	88 1f       	adc	r24, r24
    2538:	99 1f       	adc	r25, r25
    253a:	1a f0       	brmi	.+6      	; 0x2542 <__fixunssfsi+0x24>
    253c:	ba 95       	dec	r27
    253e:	c9 f7       	brne	.-14     	; 0x2532 <__fixunssfsi+0x14>
    2540:	14 c0       	rjmp	.+40     	; 0x256a <__fixunssfsi+0x4c>
    2542:	b1 30       	cpi	r27, 0x01	; 1
    2544:	91 f0       	breq	.+36     	; 0x256a <__fixunssfsi+0x4c>
    2546:	0e 94 c4 13 	call	0x2788	; 0x2788 <__fp_zero>
    254a:	b1 e0       	ldi	r27, 0x01	; 1
    254c:	08 95       	ret
    254e:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <__fp_zero>
    2552:	67 2f       	mov	r22, r23
    2554:	78 2f       	mov	r23, r24
    2556:	88 27       	eor	r24, r24
    2558:	b8 5f       	subi	r27, 0xF8	; 248
    255a:	39 f0       	breq	.+14     	; 0x256a <__fixunssfsi+0x4c>
    255c:	b9 3f       	cpi	r27, 0xF9	; 249
    255e:	cc f3       	brlt	.-14     	; 0x2552 <__fixunssfsi+0x34>
    2560:	86 95       	lsr	r24
    2562:	77 95       	ror	r23
    2564:	67 95       	ror	r22
    2566:	b3 95       	inc	r27
    2568:	d9 f7       	brne	.-10     	; 0x2560 <__fixunssfsi+0x42>
    256a:	3e f4       	brtc	.+14     	; 0x257a <__fixunssfsi+0x5c>
    256c:	90 95       	com	r25
    256e:	80 95       	com	r24
    2570:	70 95       	com	r23
    2572:	61 95       	neg	r22
    2574:	7f 4f       	sbci	r23, 0xFF	; 255
    2576:	8f 4f       	sbci	r24, 0xFF	; 255
    2578:	9f 4f       	sbci	r25, 0xFF	; 255
    257a:	08 95       	ret

0000257c <__floatunsisf>:
    257c:	e8 94       	clt
    257e:	09 c0       	rjmp	.+18     	; 0x2592 <__floatsisf+0x12>

00002580 <__floatsisf>:
    2580:	97 fb       	bst	r25, 7
    2582:	3e f4       	brtc	.+14     	; 0x2592 <__floatsisf+0x12>
    2584:	90 95       	com	r25
    2586:	80 95       	com	r24
    2588:	70 95       	com	r23
    258a:	61 95       	neg	r22
    258c:	7f 4f       	sbci	r23, 0xFF	; 255
    258e:	8f 4f       	sbci	r24, 0xFF	; 255
    2590:	9f 4f       	sbci	r25, 0xFF	; 255
    2592:	99 23       	and	r25, r25
    2594:	a9 f0       	breq	.+42     	; 0x25c0 <__floatsisf+0x40>
    2596:	f9 2f       	mov	r31, r25
    2598:	96 e9       	ldi	r25, 0x96	; 150
    259a:	bb 27       	eor	r27, r27
    259c:	93 95       	inc	r25
    259e:	f6 95       	lsr	r31
    25a0:	87 95       	ror	r24
    25a2:	77 95       	ror	r23
    25a4:	67 95       	ror	r22
    25a6:	b7 95       	ror	r27
    25a8:	f1 11       	cpse	r31, r1
    25aa:	f8 cf       	rjmp	.-16     	; 0x259c <__floatsisf+0x1c>
    25ac:	fa f4       	brpl	.+62     	; 0x25ec <__floatsisf+0x6c>
    25ae:	bb 0f       	add	r27, r27
    25b0:	11 f4       	brne	.+4      	; 0x25b6 <__floatsisf+0x36>
    25b2:	60 ff       	sbrs	r22, 0
    25b4:	1b c0       	rjmp	.+54     	; 0x25ec <__floatsisf+0x6c>
    25b6:	6f 5f       	subi	r22, 0xFF	; 255
    25b8:	7f 4f       	sbci	r23, 0xFF	; 255
    25ba:	8f 4f       	sbci	r24, 0xFF	; 255
    25bc:	9f 4f       	sbci	r25, 0xFF	; 255
    25be:	16 c0       	rjmp	.+44     	; 0x25ec <__floatsisf+0x6c>
    25c0:	88 23       	and	r24, r24
    25c2:	11 f0       	breq	.+4      	; 0x25c8 <__floatsisf+0x48>
    25c4:	96 e9       	ldi	r25, 0x96	; 150
    25c6:	11 c0       	rjmp	.+34     	; 0x25ea <__floatsisf+0x6a>
    25c8:	77 23       	and	r23, r23
    25ca:	21 f0       	breq	.+8      	; 0x25d4 <__floatsisf+0x54>
    25cc:	9e e8       	ldi	r25, 0x8E	; 142
    25ce:	87 2f       	mov	r24, r23
    25d0:	76 2f       	mov	r23, r22
    25d2:	05 c0       	rjmp	.+10     	; 0x25de <__floatsisf+0x5e>
    25d4:	66 23       	and	r22, r22
    25d6:	71 f0       	breq	.+28     	; 0x25f4 <__floatsisf+0x74>
    25d8:	96 e8       	ldi	r25, 0x86	; 134
    25da:	86 2f       	mov	r24, r22
    25dc:	70 e0       	ldi	r23, 0x00	; 0
    25de:	60 e0       	ldi	r22, 0x00	; 0
    25e0:	2a f0       	brmi	.+10     	; 0x25ec <__floatsisf+0x6c>
    25e2:	9a 95       	dec	r25
    25e4:	66 0f       	add	r22, r22
    25e6:	77 1f       	adc	r23, r23
    25e8:	88 1f       	adc	r24, r24
    25ea:	da f7       	brpl	.-10     	; 0x25e2 <__floatsisf+0x62>
    25ec:	88 0f       	add	r24, r24
    25ee:	96 95       	lsr	r25
    25f0:	87 95       	ror	r24
    25f2:	97 f9       	bld	r25, 7
    25f4:	08 95       	ret

000025f6 <__fp_arccos>:
    25f6:	df 93       	push	r29
    25f8:	cf 93       	push	r28
    25fa:	1f 93       	push	r17
    25fc:	0f 93       	push	r16
    25fe:	8b 01       	movw	r16, r22
    2600:	ec 01       	movw	r28, r24
    2602:	ec e7       	ldi	r30, 0x7C	; 124
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	0e 94 48 13 	call	0x2690	; 0x2690 <__fp_powser>
    260a:	0e 94 91 13 	call	0x2722	; 0x2722 <__fp_round>
    260e:	98 01       	movw	r18, r16
    2610:	ae 01       	movw	r20, r28
    2612:	8b 01       	movw	r16, r22
    2614:	ec 01       	movw	r28, r24
    2616:	60 e0       	ldi	r22, 0x00	; 0
    2618:	70 e0       	ldi	r23, 0x00	; 0
    261a:	80 e8       	ldi	r24, 0x80	; 128
    261c:	9f e3       	ldi	r25, 0x3F	; 63
    261e:	0e 94 89 11 	call	0x2312	; 0x2312 <__subsf3>
    2622:	0e 94 4b 14 	call	0x2896	; 0x2896 <sqrt>
    2626:	98 01       	movw	r18, r16
    2628:	ae 01       	movw	r20, r28
    262a:	0f 91       	pop	r16
    262c:	1f 91       	pop	r17
    262e:	cf 91       	pop	r28
    2630:	df 91       	pop	r29
    2632:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__mulsf3x>

00002636 <__fp_cmp>:
    2636:	99 0f       	add	r25, r25
    2638:	00 08       	sbc	r0, r0
    263a:	55 0f       	add	r21, r21
    263c:	aa 0b       	sbc	r26, r26
    263e:	e0 e8       	ldi	r30, 0x80	; 128
    2640:	fe ef       	ldi	r31, 0xFE	; 254
    2642:	16 16       	cp	r1, r22
    2644:	17 06       	cpc	r1, r23
    2646:	e8 07       	cpc	r30, r24
    2648:	f9 07       	cpc	r31, r25
    264a:	c0 f0       	brcs	.+48     	; 0x267c <__fp_cmp+0x46>
    264c:	12 16       	cp	r1, r18
    264e:	13 06       	cpc	r1, r19
    2650:	e4 07       	cpc	r30, r20
    2652:	f5 07       	cpc	r31, r21
    2654:	98 f0       	brcs	.+38     	; 0x267c <__fp_cmp+0x46>
    2656:	62 1b       	sub	r22, r18
    2658:	73 0b       	sbc	r23, r19
    265a:	84 0b       	sbc	r24, r20
    265c:	95 0b       	sbc	r25, r21
    265e:	39 f4       	brne	.+14     	; 0x266e <__fp_cmp+0x38>
    2660:	0a 26       	eor	r0, r26
    2662:	61 f0       	breq	.+24     	; 0x267c <__fp_cmp+0x46>
    2664:	23 2b       	or	r18, r19
    2666:	24 2b       	or	r18, r20
    2668:	25 2b       	or	r18, r21
    266a:	21 f4       	brne	.+8      	; 0x2674 <__fp_cmp+0x3e>
    266c:	08 95       	ret
    266e:	0a 26       	eor	r0, r26
    2670:	09 f4       	brne	.+2      	; 0x2674 <__fp_cmp+0x3e>
    2672:	a1 40       	sbci	r26, 0x01	; 1
    2674:	a6 95       	lsr	r26
    2676:	8f ef       	ldi	r24, 0xFF	; 255
    2678:	81 1d       	adc	r24, r1
    267a:	81 1d       	adc	r24, r1
    267c:	08 95       	ret

0000267e <__fp_inf>:
    267e:	97 f9       	bld	r25, 7
    2680:	9f 67       	ori	r25, 0x7F	; 127
    2682:	80 e8       	ldi	r24, 0x80	; 128
    2684:	70 e0       	ldi	r23, 0x00	; 0
    2686:	60 e0       	ldi	r22, 0x00	; 0
    2688:	08 95       	ret

0000268a <__fp_nan>:
    268a:	9f ef       	ldi	r25, 0xFF	; 255
    268c:	80 ec       	ldi	r24, 0xC0	; 192
    268e:	08 95       	ret

00002690 <__fp_powser>:
    2690:	df 93       	push	r29
    2692:	cf 93       	push	r28
    2694:	1f 93       	push	r17
    2696:	0f 93       	push	r16
    2698:	ff 92       	push	r15
    269a:	ef 92       	push	r14
    269c:	df 92       	push	r13
    269e:	7b 01       	movw	r14, r22
    26a0:	8c 01       	movw	r16, r24
    26a2:	68 94       	set
    26a4:	06 c0       	rjmp	.+12     	; 0x26b2 <__fp_powser+0x22>
    26a6:	da 2e       	mov	r13, r26
    26a8:	ef 01       	movw	r28, r30
    26aa:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__mulsf3x>
    26ae:	fe 01       	movw	r30, r28
    26b0:	e8 94       	clt
    26b2:	a5 91       	lpm	r26, Z+
    26b4:	25 91       	lpm	r18, Z+
    26b6:	35 91       	lpm	r19, Z+
    26b8:	45 91       	lpm	r20, Z+
    26ba:	55 91       	lpm	r21, Z+
    26bc:	a6 f3       	brts	.-24     	; 0x26a6 <__fp_powser+0x16>
    26be:	ef 01       	movw	r28, r30
    26c0:	0e 94 a1 11 	call	0x2342	; 0x2342 <__addsf3x>
    26c4:	fe 01       	movw	r30, r28
    26c6:	97 01       	movw	r18, r14
    26c8:	a8 01       	movw	r20, r16
    26ca:	da 94       	dec	r13
    26cc:	69 f7       	brne	.-38     	; 0x26a8 <__fp_powser+0x18>
    26ce:	df 90       	pop	r13
    26d0:	ef 90       	pop	r14
    26d2:	ff 90       	pop	r15
    26d4:	0f 91       	pop	r16
    26d6:	1f 91       	pop	r17
    26d8:	cf 91       	pop	r28
    26da:	df 91       	pop	r29
    26dc:	08 95       	ret

000026de <__fp_powsodd>:
    26de:	9f 93       	push	r25
    26e0:	8f 93       	push	r24
    26e2:	7f 93       	push	r23
    26e4:	6f 93       	push	r22
    26e6:	ff 93       	push	r31
    26e8:	ef 93       	push	r30
    26ea:	9b 01       	movw	r18, r22
    26ec:	ac 01       	movw	r20, r24
    26ee:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3>
    26f2:	ef 91       	pop	r30
    26f4:	ff 91       	pop	r31
    26f6:	0e 94 48 13 	call	0x2690	; 0x2690 <__fp_powser>
    26fa:	2f 91       	pop	r18
    26fc:	3f 91       	pop	r19
    26fe:	4f 91       	pop	r20
    2700:	5f 91       	pop	r21
    2702:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__mulsf3>

00002706 <__fp_pscA>:
    2706:	00 24       	eor	r0, r0
    2708:	0a 94       	dec	r0
    270a:	16 16       	cp	r1, r22
    270c:	17 06       	cpc	r1, r23
    270e:	18 06       	cpc	r1, r24
    2710:	09 06       	cpc	r0, r25
    2712:	08 95       	ret

00002714 <__fp_pscB>:
    2714:	00 24       	eor	r0, r0
    2716:	0a 94       	dec	r0
    2718:	12 16       	cp	r1, r18
    271a:	13 06       	cpc	r1, r19
    271c:	14 06       	cpc	r1, r20
    271e:	05 06       	cpc	r0, r21
    2720:	08 95       	ret

00002722 <__fp_round>:
    2722:	09 2e       	mov	r0, r25
    2724:	03 94       	inc	r0
    2726:	00 0c       	add	r0, r0
    2728:	11 f4       	brne	.+4      	; 0x272e <__fp_round+0xc>
    272a:	88 23       	and	r24, r24
    272c:	52 f0       	brmi	.+20     	; 0x2742 <__fp_round+0x20>
    272e:	bb 0f       	add	r27, r27
    2730:	40 f4       	brcc	.+16     	; 0x2742 <__fp_round+0x20>
    2732:	bf 2b       	or	r27, r31
    2734:	11 f4       	brne	.+4      	; 0x273a <__fp_round+0x18>
    2736:	60 ff       	sbrs	r22, 0
    2738:	04 c0       	rjmp	.+8      	; 0x2742 <__fp_round+0x20>
    273a:	6f 5f       	subi	r22, 0xFF	; 255
    273c:	7f 4f       	sbci	r23, 0xFF	; 255
    273e:	8f 4f       	sbci	r24, 0xFF	; 255
    2740:	9f 4f       	sbci	r25, 0xFF	; 255
    2742:	08 95       	ret

00002744 <__fp_split3>:
    2744:	57 fd       	sbrc	r21, 7
    2746:	90 58       	subi	r25, 0x80	; 128
    2748:	44 0f       	add	r20, r20
    274a:	55 1f       	adc	r21, r21
    274c:	59 f0       	breq	.+22     	; 0x2764 <__fp_splitA+0x10>
    274e:	5f 3f       	cpi	r21, 0xFF	; 255
    2750:	71 f0       	breq	.+28     	; 0x276e <__fp_splitA+0x1a>
    2752:	47 95       	ror	r20

00002754 <__fp_splitA>:
    2754:	88 0f       	add	r24, r24
    2756:	97 fb       	bst	r25, 7
    2758:	99 1f       	adc	r25, r25
    275a:	61 f0       	breq	.+24     	; 0x2774 <__fp_splitA+0x20>
    275c:	9f 3f       	cpi	r25, 0xFF	; 255
    275e:	79 f0       	breq	.+30     	; 0x277e <__fp_splitA+0x2a>
    2760:	87 95       	ror	r24
    2762:	08 95       	ret
    2764:	12 16       	cp	r1, r18
    2766:	13 06       	cpc	r1, r19
    2768:	14 06       	cpc	r1, r20
    276a:	55 1f       	adc	r21, r21
    276c:	f2 cf       	rjmp	.-28     	; 0x2752 <__fp_split3+0xe>
    276e:	46 95       	lsr	r20
    2770:	f1 df       	rcall	.-30     	; 0x2754 <__fp_splitA>
    2772:	08 c0       	rjmp	.+16     	; 0x2784 <__fp_splitA+0x30>
    2774:	16 16       	cp	r1, r22
    2776:	17 06       	cpc	r1, r23
    2778:	18 06       	cpc	r1, r24
    277a:	99 1f       	adc	r25, r25
    277c:	f1 cf       	rjmp	.-30     	; 0x2760 <__fp_splitA+0xc>
    277e:	86 95       	lsr	r24
    2780:	71 05       	cpc	r23, r1
    2782:	61 05       	cpc	r22, r1
    2784:	08 94       	sec
    2786:	08 95       	ret

00002788 <__fp_zero>:
    2788:	e8 94       	clt

0000278a <__fp_szero>:
    278a:	bb 27       	eor	r27, r27
    278c:	66 27       	eor	r22, r22
    278e:	77 27       	eor	r23, r23
    2790:	cb 01       	movw	r24, r22
    2792:	97 f9       	bld	r25, 7
    2794:	08 95       	ret

00002796 <__gesf2>:
    2796:	0e 94 1b 13 	call	0x2636	; 0x2636 <__fp_cmp>
    279a:	08 f4       	brcc	.+2      	; 0x279e <__gesf2+0x8>
    279c:	8f ef       	ldi	r24, 0xFF	; 255
    279e:	08 95       	ret

000027a0 <__mulsf3>:
    27a0:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__mulsf3x>
    27a4:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__fp_round>
    27a8:	0e 94 83 13 	call	0x2706	; 0x2706 <__fp_pscA>
    27ac:	38 f0       	brcs	.+14     	; 0x27bc <__mulsf3+0x1c>
    27ae:	0e 94 8a 13 	call	0x2714	; 0x2714 <__fp_pscB>
    27b2:	20 f0       	brcs	.+8      	; 0x27bc <__mulsf3+0x1c>
    27b4:	95 23       	and	r25, r21
    27b6:	11 f0       	breq	.+4      	; 0x27bc <__mulsf3+0x1c>
    27b8:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__fp_inf>
    27bc:	0c 94 45 13 	jmp	0x268a	; 0x268a <__fp_nan>
    27c0:	11 24       	eor	r1, r1
    27c2:	0c 94 c5 13 	jmp	0x278a	; 0x278a <__fp_szero>

000027c6 <__mulsf3x>:
    27c6:	0e 94 a2 13 	call	0x2744	; 0x2744 <__fp_split3>
    27ca:	70 f3       	brcs	.-36     	; 0x27a8 <__mulsf3+0x8>

000027cc <__mulsf3_pse>:
    27cc:	95 9f       	mul	r25, r21
    27ce:	c1 f3       	breq	.-16     	; 0x27c0 <__mulsf3+0x20>
    27d0:	95 0f       	add	r25, r21
    27d2:	50 e0       	ldi	r21, 0x00	; 0
    27d4:	55 1f       	adc	r21, r21
    27d6:	62 9f       	mul	r22, r18
    27d8:	f0 01       	movw	r30, r0
    27da:	72 9f       	mul	r23, r18
    27dc:	bb 27       	eor	r27, r27
    27de:	f0 0d       	add	r31, r0
    27e0:	b1 1d       	adc	r27, r1
    27e2:	63 9f       	mul	r22, r19
    27e4:	aa 27       	eor	r26, r26
    27e6:	f0 0d       	add	r31, r0
    27e8:	b1 1d       	adc	r27, r1
    27ea:	aa 1f       	adc	r26, r26
    27ec:	64 9f       	mul	r22, r20
    27ee:	66 27       	eor	r22, r22
    27f0:	b0 0d       	add	r27, r0
    27f2:	a1 1d       	adc	r26, r1
    27f4:	66 1f       	adc	r22, r22
    27f6:	82 9f       	mul	r24, r18
    27f8:	22 27       	eor	r18, r18
    27fa:	b0 0d       	add	r27, r0
    27fc:	a1 1d       	adc	r26, r1
    27fe:	62 1f       	adc	r22, r18
    2800:	73 9f       	mul	r23, r19
    2802:	b0 0d       	add	r27, r0
    2804:	a1 1d       	adc	r26, r1
    2806:	62 1f       	adc	r22, r18
    2808:	83 9f       	mul	r24, r19
    280a:	a0 0d       	add	r26, r0
    280c:	61 1d       	adc	r22, r1
    280e:	22 1f       	adc	r18, r18
    2810:	74 9f       	mul	r23, r20
    2812:	33 27       	eor	r19, r19
    2814:	a0 0d       	add	r26, r0
    2816:	61 1d       	adc	r22, r1
    2818:	23 1f       	adc	r18, r19
    281a:	84 9f       	mul	r24, r20
    281c:	60 0d       	add	r22, r0
    281e:	21 1d       	adc	r18, r1
    2820:	82 2f       	mov	r24, r18
    2822:	76 2f       	mov	r23, r22
    2824:	6a 2f       	mov	r22, r26
    2826:	11 24       	eor	r1, r1
    2828:	9f 57       	subi	r25, 0x7F	; 127
    282a:	50 40       	sbci	r21, 0x00	; 0
    282c:	9a f0       	brmi	.+38     	; 0x2854 <__mulsf3_pse+0x88>
    282e:	f1 f0       	breq	.+60     	; 0x286c <__mulsf3_pse+0xa0>
    2830:	88 23       	and	r24, r24
    2832:	4a f0       	brmi	.+18     	; 0x2846 <__mulsf3_pse+0x7a>
    2834:	ee 0f       	add	r30, r30
    2836:	ff 1f       	adc	r31, r31
    2838:	bb 1f       	adc	r27, r27
    283a:	66 1f       	adc	r22, r22
    283c:	77 1f       	adc	r23, r23
    283e:	88 1f       	adc	r24, r24
    2840:	91 50       	subi	r25, 0x01	; 1
    2842:	50 40       	sbci	r21, 0x00	; 0
    2844:	a9 f7       	brne	.-22     	; 0x2830 <__mulsf3_pse+0x64>
    2846:	9e 3f       	cpi	r25, 0xFE	; 254
    2848:	51 05       	cpc	r21, r1
    284a:	80 f0       	brcs	.+32     	; 0x286c <__mulsf3_pse+0xa0>
    284c:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__fp_inf>
    2850:	0c 94 c5 13 	jmp	0x278a	; 0x278a <__fp_szero>
    2854:	5f 3f       	cpi	r21, 0xFF	; 255
    2856:	e4 f3       	brlt	.-8      	; 0x2850 <__mulsf3_pse+0x84>
    2858:	98 3e       	cpi	r25, 0xE8	; 232
    285a:	d4 f3       	brlt	.-12     	; 0x2850 <__mulsf3_pse+0x84>
    285c:	86 95       	lsr	r24
    285e:	77 95       	ror	r23
    2860:	67 95       	ror	r22
    2862:	b7 95       	ror	r27
    2864:	f7 95       	ror	r31
    2866:	e7 95       	ror	r30
    2868:	9f 5f       	subi	r25, 0xFF	; 255
    286a:	c1 f7       	brne	.-16     	; 0x285c <__mulsf3_pse+0x90>
    286c:	fe 2b       	or	r31, r30
    286e:	88 0f       	add	r24, r24
    2870:	91 1d       	adc	r25, r1
    2872:	96 95       	lsr	r25
    2874:	87 95       	ror	r24
    2876:	97 f9       	bld	r25, 7
    2878:	08 95       	ret

0000287a <sin>:
    287a:	9f 93       	push	r25
    287c:	0e 94 a2 14 	call	0x2944	; 0x2944 <__fp_rempio2>
    2880:	0f 90       	pop	r0
    2882:	07 fc       	sbrc	r0, 7
    2884:	ee 5f       	subi	r30, 0xFE	; 254
    2886:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <__fp_sinus>
    288a:	19 f4       	brne	.+6      	; 0x2892 <sin+0x18>
    288c:	16 f4       	brtc	.+4      	; 0x2892 <sin+0x18>
    288e:	0c 94 45 13 	jmp	0x268a	; 0x268a <__fp_nan>
    2892:	0c 94 8b 14 	jmp	0x2916	; 0x2916 <__fp_mpack>

00002896 <sqrt>:
    2896:	0e 94 aa 13 	call	0x2754	; 0x2754 <__fp_splitA>
    289a:	b8 f3       	brcs	.-18     	; 0x288a <sin+0x10>
    289c:	99 23       	and	r25, r25
    289e:	c9 f3       	breq	.-14     	; 0x2892 <sin+0x18>
    28a0:	b6 f3       	brts	.-20     	; 0x288e <sin+0x14>
    28a2:	9f 57       	subi	r25, 0x7F	; 127
    28a4:	55 0b       	sbc	r21, r21
    28a6:	87 ff       	sbrs	r24, 7
    28a8:	0e 94 99 14 	call	0x2932	; 0x2932 <__fp_norm2>
    28ac:	00 24       	eor	r0, r0
    28ae:	a0 e6       	ldi	r26, 0x60	; 96
    28b0:	40 ea       	ldi	r20, 0xA0	; 160
    28b2:	90 01       	movw	r18, r0
    28b4:	80 58       	subi	r24, 0x80	; 128
    28b6:	56 95       	lsr	r21
    28b8:	97 95       	ror	r25
    28ba:	28 f4       	brcc	.+10     	; 0x28c6 <sqrt+0x30>
    28bc:	80 5c       	subi	r24, 0xC0	; 192
    28be:	66 0f       	add	r22, r22
    28c0:	77 1f       	adc	r23, r23
    28c2:	88 1f       	adc	r24, r24
    28c4:	20 f0       	brcs	.+8      	; 0x28ce <sqrt+0x38>
    28c6:	26 17       	cp	r18, r22
    28c8:	37 07       	cpc	r19, r23
    28ca:	48 07       	cpc	r20, r24
    28cc:	30 f4       	brcc	.+12     	; 0x28da <sqrt+0x44>
    28ce:	62 1b       	sub	r22, r18
    28d0:	73 0b       	sbc	r23, r19
    28d2:	84 0b       	sbc	r24, r20
    28d4:	20 29       	or	r18, r0
    28d6:	31 29       	or	r19, r1
    28d8:	4a 2b       	or	r20, r26
    28da:	a6 95       	lsr	r26
    28dc:	17 94       	ror	r1
    28de:	07 94       	ror	r0
    28e0:	20 25       	eor	r18, r0
    28e2:	31 25       	eor	r19, r1
    28e4:	4a 27       	eor	r20, r26
    28e6:	58 f7       	brcc	.-42     	; 0x28be <sqrt+0x28>
    28e8:	66 0f       	add	r22, r22
    28ea:	77 1f       	adc	r23, r23
    28ec:	88 1f       	adc	r24, r24
    28ee:	20 f0       	brcs	.+8      	; 0x28f8 <sqrt+0x62>
    28f0:	26 17       	cp	r18, r22
    28f2:	37 07       	cpc	r19, r23
    28f4:	48 07       	cpc	r20, r24
    28f6:	30 f4       	brcc	.+12     	; 0x2904 <sqrt+0x6e>
    28f8:	62 0b       	sbc	r22, r18
    28fa:	73 0b       	sbc	r23, r19
    28fc:	84 0b       	sbc	r24, r20
    28fe:	20 0d       	add	r18, r0
    2900:	31 1d       	adc	r19, r1
    2902:	41 1d       	adc	r20, r1
    2904:	a0 95       	com	r26
    2906:	81 f7       	brne	.-32     	; 0x28e8 <sqrt+0x52>
    2908:	b9 01       	movw	r22, r18
    290a:	84 2f       	mov	r24, r20
    290c:	91 58       	subi	r25, 0x81	; 129
    290e:	88 0f       	add	r24, r24
    2910:	96 95       	lsr	r25
    2912:	87 95       	ror	r24
    2914:	08 95       	ret

00002916 <__fp_mpack>:
    2916:	9f 3f       	cpi	r25, 0xFF	; 255
    2918:	31 f0       	breq	.+12     	; 0x2926 <__fp_mpack_finite+0xc>

0000291a <__fp_mpack_finite>:
    291a:	91 50       	subi	r25, 0x01	; 1
    291c:	20 f4       	brcc	.+8      	; 0x2926 <__fp_mpack_finite+0xc>
    291e:	87 95       	ror	r24
    2920:	77 95       	ror	r23
    2922:	67 95       	ror	r22
    2924:	b7 95       	ror	r27
    2926:	88 0f       	add	r24, r24
    2928:	91 1d       	adc	r25, r1
    292a:	96 95       	lsr	r25
    292c:	87 95       	ror	r24
    292e:	97 f9       	bld	r25, 7
    2930:	08 95       	ret

00002932 <__fp_norm2>:
    2932:	91 50       	subi	r25, 0x01	; 1
    2934:	50 40       	sbci	r21, 0x00	; 0
    2936:	66 0f       	add	r22, r22
    2938:	77 1f       	adc	r23, r23
    293a:	88 1f       	adc	r24, r24
    293c:	d2 f7       	brpl	.-12     	; 0x2932 <__fp_norm2>
    293e:	08 95       	ret
    2940:	0c 94 45 13 	jmp	0x268a	; 0x268a <__fp_nan>

00002944 <__fp_rempio2>:
    2944:	0e 94 aa 13 	call	0x2754	; 0x2754 <__fp_splitA>
    2948:	d8 f3       	brcs	.-10     	; 0x2940 <__fp_norm2+0xe>
    294a:	e8 94       	clt
    294c:	e0 e0       	ldi	r30, 0x00	; 0
    294e:	bb 27       	eor	r27, r27
    2950:	9f 57       	subi	r25, 0x7F	; 127
    2952:	f0 f0       	brcs	.+60     	; 0x2990 <__fp_rempio2+0x4c>
    2954:	2a ed       	ldi	r18, 0xDA	; 218
    2956:	3f e0       	ldi	r19, 0x0F	; 15
    2958:	49 ec       	ldi	r20, 0xC9	; 201
    295a:	06 c0       	rjmp	.+12     	; 0x2968 <__fp_rempio2+0x24>
    295c:	ee 0f       	add	r30, r30
    295e:	bb 0f       	add	r27, r27
    2960:	66 1f       	adc	r22, r22
    2962:	77 1f       	adc	r23, r23
    2964:	88 1f       	adc	r24, r24
    2966:	28 f0       	brcs	.+10     	; 0x2972 <__fp_rempio2+0x2e>
    2968:	b2 3a       	cpi	r27, 0xA2	; 162
    296a:	62 07       	cpc	r22, r18
    296c:	73 07       	cpc	r23, r19
    296e:	84 07       	cpc	r24, r20
    2970:	28 f0       	brcs	.+10     	; 0x297c <__fp_rempio2+0x38>
    2972:	b2 5a       	subi	r27, 0xA2	; 162
    2974:	62 0b       	sbc	r22, r18
    2976:	73 0b       	sbc	r23, r19
    2978:	84 0b       	sbc	r24, r20
    297a:	e3 95       	inc	r30
    297c:	9a 95       	dec	r25
    297e:	72 f7       	brpl	.-36     	; 0x295c <__fp_rempio2+0x18>
    2980:	80 38       	cpi	r24, 0x80	; 128
    2982:	30 f4       	brcc	.+12     	; 0x2990 <__fp_rempio2+0x4c>
    2984:	9a 95       	dec	r25
    2986:	bb 0f       	add	r27, r27
    2988:	66 1f       	adc	r22, r22
    298a:	77 1f       	adc	r23, r23
    298c:	88 1f       	adc	r24, r24
    298e:	d2 f7       	brpl	.-12     	; 0x2984 <__fp_rempio2+0x40>
    2990:	90 48       	sbci	r25, 0x80	; 128
    2992:	0c 94 8d 14 	jmp	0x291a	; 0x291a <__fp_mpack_finite>

00002996 <__fp_sinus>:
    2996:	ef 93       	push	r30
    2998:	e0 ff       	sbrs	r30, 0
    299a:	07 c0       	rjmp	.+14     	; 0x29aa <__fp_sinus+0x14>
    299c:	a2 ea       	ldi	r26, 0xA2	; 162
    299e:	2a ed       	ldi	r18, 0xDA	; 218
    29a0:	3f e0       	ldi	r19, 0x0F	; 15
    29a2:	49 ec       	ldi	r20, 0xC9	; 201
    29a4:	5f eb       	ldi	r21, 0xBF	; 191
    29a6:	0e 94 a1 11 	call	0x2342	; 0x2342 <__addsf3x>
    29aa:	0e 94 91 13 	call	0x2722	; 0x2722 <__fp_round>
    29ae:	0f 90       	pop	r0
    29b0:	03 94       	inc	r0
    29b2:	01 fc       	sbrc	r0, 1
    29b4:	90 58       	subi	r25, 0x80	; 128
    29b6:	e4 ea       	ldi	r30, 0xA4	; 164
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	0c 94 6f 13 	jmp	0x26de	; 0x26de <__fp_powsodd>

000029be <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    29be:	08 95       	ret

000029c0 <main>:

int main(void)
{
	init();
    29c0:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <init>

	initVariant();
    29c4:	0e 94 df 14 	call	0x29be	; 0x29be <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    29c8:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    29cc:	c0 e0       	ldi	r28, 0x00	; 0
    29ce:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    29d0:	0e 94 88 07 	call	0xf10	; 0xf10 <loop>
		if (serialEventRun) serialEventRun();
    29d4:	20 97       	sbiw	r28, 0x00	; 0
    29d6:	e1 f3       	breq	.-8      	; 0x29d0 <main+0x10>
    29d8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    29dc:	f9 cf       	rjmp	.-14     	; 0x29d0 <main+0x10>

000029de <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    29de:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <_ZN7TwoWire14rxBufferLengthE>
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <_ZN7TwoWire13rxBufferIndexE>
    29e8:	82 1b       	sub	r24, r18
    29ea:	91 09       	sbc	r25, r1
    29ec:	08 95       	ret

000029ee <_ZN7TwoWire4readEv>:
    29ee:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <_ZN7TwoWire13rxBufferIndexE>
    29f2:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <_ZN7TwoWire14rxBufferLengthE>
    29f6:	98 17       	cp	r25, r24
    29f8:	50 f4       	brcc	.+20     	; 0x2a0e <_ZN7TwoWire4readEv+0x20>
    29fa:	e9 2f       	mov	r30, r25
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	e0 56       	subi	r30, 0x60	; 96
    2a00:	fd 4f       	sbci	r31, 0xFD	; 253
    2a02:	20 81       	ld	r18, Z
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	9f 5f       	subi	r25, 0xFF	; 255
    2a08:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <_ZN7TwoWire13rxBufferIndexE>
    2a0c:	02 c0       	rjmp	.+4      	; 0x2a12 <_ZN7TwoWire4readEv+0x24>
    2a0e:	2f ef       	ldi	r18, 0xFF	; 255
    2a10:	3f ef       	ldi	r19, 0xFF	; 255
    2a12:	c9 01       	movw	r24, r18
    2a14:	08 95       	ret

00002a16 <_ZN7TwoWire4peekEv>:
    2a16:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <_ZN7TwoWire13rxBufferIndexE>
    2a1a:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <_ZN7TwoWire14rxBufferLengthE>
    2a1e:	e8 17       	cp	r30, r24
    2a20:	30 f4       	brcc	.+12     	; 0x2a2e <_ZN7TwoWire4peekEv+0x18>
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	e0 56       	subi	r30, 0x60	; 96
    2a26:	fd 4f       	sbci	r31, 0xFD	; 253
    2a28:	80 81       	ld	r24, Z
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	08 95       	ret
    2a2e:	8f ef       	ldi	r24, 0xFF	; 255
    2a30:	9f ef       	ldi	r25, 0xFF	; 255
    2a32:	08 95       	ret

00002a34 <_ZN7TwoWire5flushEv>:
    2a34:	08 95       	ret

00002a36 <_ZN7TwoWire5writeEPKhj>:
    2a36:	cf 92       	push	r12
    2a38:	df 92       	push	r13
    2a3a:	ef 92       	push	r14
    2a3c:	ff 92       	push	r15
    2a3e:	0f 93       	push	r16
    2a40:	1f 93       	push	r17
    2a42:	cf 93       	push	r28
    2a44:	df 93       	push	r29
    2a46:	8c 01       	movw	r16, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	6a 01       	movw	r12, r20
    2a4c:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <_ZN7TwoWire12transmittingE>
    2a50:	22 23       	and	r18, r18
    2a52:	a1 f0       	breq	.+40     	; 0x2a7c <_ZN7TwoWire5writeEPKhj+0x46>
    2a54:	41 15       	cp	r20, r1
    2a56:	51 05       	cpc	r21, r1
    2a58:	a1 f0       	breq	.+40     	; 0x2a82 <_ZN7TwoWire5writeEPKhj+0x4c>
    2a5a:	eb 01       	movw	r28, r22
    2a5c:	7b 01       	movw	r14, r22
    2a5e:	e4 0e       	add	r14, r20
    2a60:	f5 1e       	adc	r15, r21
    2a62:	69 91       	ld	r22, Y+
    2a64:	d8 01       	movw	r26, r16
    2a66:	ed 91       	ld	r30, X+
    2a68:	fc 91       	ld	r31, X
    2a6a:	01 90       	ld	r0, Z+
    2a6c:	f0 81       	ld	r31, Z
    2a6e:	e0 2d       	mov	r30, r0
    2a70:	c8 01       	movw	r24, r16
    2a72:	09 95       	icall
    2a74:	ce 15       	cp	r28, r14
    2a76:	df 05       	cpc	r29, r15
    2a78:	a1 f7       	brne	.-24     	; 0x2a62 <_ZN7TwoWire5writeEPKhj+0x2c>
    2a7a:	03 c0       	rjmp	.+6      	; 0x2a82 <_ZN7TwoWire5writeEPKhj+0x4c>
    2a7c:	64 2f       	mov	r22, r20
    2a7e:	0e 94 b5 18 	call	0x316a	; 0x316a <twi_transmit>
    2a82:	c6 01       	movw	r24, r12
    2a84:	df 91       	pop	r29
    2a86:	cf 91       	pop	r28
    2a88:	1f 91       	pop	r17
    2a8a:	0f 91       	pop	r16
    2a8c:	ff 90       	pop	r15
    2a8e:	ef 90       	pop	r14
    2a90:	df 90       	pop	r13
    2a92:	cf 90       	pop	r12
    2a94:	08 95       	ret

00002a96 <_ZN7TwoWire5writeEh>:
    2a96:	cf 93       	push	r28
    2a98:	df 93       	push	r29
    2a9a:	1f 92       	push	r1
    2a9c:	cd b7       	in	r28, 0x3d	; 61
    2a9e:	de b7       	in	r29, 0x3e	; 62
    2aa0:	fc 01       	movw	r30, r24
    2aa2:	69 83       	std	Y+1, r22	; 0x01
    2aa4:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <_ZN7TwoWire12transmittingE>
    2aa8:	99 23       	and	r25, r25
    2aaa:	d9 f0       	breq	.+54     	; 0x2ae2 <_ZN7TwoWire5writeEh+0x4c>
    2aac:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <_ZN7TwoWire14txBufferLengthE>
    2ab0:	90 32       	cpi	r25, 0x20	; 32
    2ab2:	38 f0       	brcs	.+14     	; 0x2ac2 <_ZN7TwoWire5writeEh+0x2c>
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	93 83       	std	Z+3, r25	; 0x03
    2aba:	82 83       	std	Z+2, r24	; 0x02
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	17 c0       	rjmp	.+46     	; 0x2af0 <_ZN7TwoWire5writeEh+0x5a>
    2ac2:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <_ZN7TwoWire13txBufferIndexE>
    2ac6:	e8 2f       	mov	r30, r24
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	e3 58       	subi	r30, 0x83	; 131
    2acc:	fd 4f       	sbci	r31, 0xFD	; 253
    2ace:	99 81       	ldd	r25, Y+1	; 0x01
    2ad0:	90 83       	st	Z, r25
    2ad2:	8f 5f       	subi	r24, 0xFF	; 255
    2ad4:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <_ZN7TwoWire13txBufferIndexE>
    2ad8:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <_ZN7TwoWire14txBufferLengthE>
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	07 c0       	rjmp	.+14     	; 0x2af0 <_ZN7TwoWire5writeEh+0x5a>
    2ae2:	61 e0       	ldi	r22, 0x01	; 1
    2ae4:	ce 01       	movw	r24, r28
    2ae6:	01 96       	adiw	r24, 0x01	; 1
    2ae8:	0e 94 b5 18 	call	0x316a	; 0x316a <twi_transmit>
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	0f 90       	pop	r0
    2af2:	df 91       	pop	r29
    2af4:	cf 91       	pop	r28
    2af6:	08 95       	ret

00002af8 <_ZN7TwoWireC1Ev>:
    2af8:	fc 01       	movw	r30, r24
    2afa:	13 82       	std	Z+3, r1	; 0x03
    2afc:	12 82       	std	Z+2, r1	; 0x02
    2afe:	88 ee       	ldi	r24, 0xE8	; 232
    2b00:	93 e0       	ldi	r25, 0x03	; 3
    2b02:	a0 e0       	ldi	r26, 0x00	; 0
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	84 83       	std	Z+4, r24	; 0x04
    2b08:	95 83       	std	Z+5, r25	; 0x05
    2b0a:	a6 83       	std	Z+6, r26	; 0x06
    2b0c:	b7 83       	std	Z+7, r27	; 0x07
    2b0e:	8e e1       	ldi	r24, 0x1E	; 30
    2b10:	91 e0       	ldi	r25, 0x01	; 1
    2b12:	91 83       	std	Z+1, r25	; 0x01
    2b14:	80 83       	st	Z, r24
    2b16:	08 95       	ret

00002b18 <_ZN7TwoWire5beginEv>:
    2b18:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <_ZN7TwoWire13rxBufferIndexE>
    2b1c:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <_ZN7TwoWire14rxBufferLengthE>
    2b20:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <_ZN7TwoWire13txBufferIndexE>
    2b24:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <_ZN7TwoWire14txBufferLengthE>
    2b28:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <twi_init>
    2b2c:	08 95       	ret

00002b2e <_ZN7TwoWire17beginTransmissionEh>:
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <_ZN7TwoWire12transmittingE>
    2b34:	60 93 9d 02 	sts	0x029D, r22	; 0x80029d <_ZN7TwoWire9txAddressE>
    2b38:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <_ZN7TwoWire13txBufferIndexE>
    2b3c:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <_ZN7TwoWire14txBufferLengthE>
    2b40:	08 95       	ret

00002b42 <_ZN7TwoWire17beginTransmissionEi>:
    2b42:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <_ZN7TwoWire17beginTransmissionEh>
    2b46:	08 95       	ret

00002b48 <_ZN7TwoWire15endTransmissionEh>:
    2b48:	0f 93       	push	r16
    2b4a:	06 2f       	mov	r16, r22
    2b4c:	21 e0       	ldi	r18, 0x01	; 1
    2b4e:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <_ZN7TwoWire14txBufferLengthE>
    2b52:	6d e7       	ldi	r22, 0x7D	; 125
    2b54:	72 e0       	ldi	r23, 0x02	; 2
    2b56:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <_ZN7TwoWire9txAddressE>
    2b5a:	0e 94 5f 18 	call	0x30be	; 0x30be <twi_writeTo>
    2b5e:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <_ZN7TwoWire13txBufferIndexE>
    2b62:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <_ZN7TwoWire14txBufferLengthE>
    2b66:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <_ZN7TwoWire12transmittingE>
    2b6a:	0f 91       	pop	r16
    2b6c:	08 95       	ret

00002b6e <_ZN7TwoWire11requestFromEhhmhh>:
    2b6e:	4f 92       	push	r4
    2b70:	5f 92       	push	r5
    2b72:	6f 92       	push	r6
    2b74:	7f 92       	push	r7
    2b76:	af 92       	push	r10
    2b78:	bf 92       	push	r11
    2b7a:	cf 92       	push	r12
    2b7c:	ef 92       	push	r14
    2b7e:	ff 92       	push	r15
    2b80:	0f 93       	push	r16
    2b82:	1f 93       	push	r17
    2b84:	cf 93       	push	r28
    2b86:	df 93       	push	r29
    2b88:	5c 01       	movw	r10, r24
    2b8a:	f6 2e       	mov	r15, r22
    2b8c:	d4 2f       	mov	r29, r20
    2b8e:	28 01       	movw	r4, r16
    2b90:	39 01       	movw	r6, r18
    2b92:	ee 20       	and	r14, r14
    2b94:	49 f1       	breq	.+82     	; 0x2be8 <_ZN7TwoWire11requestFromEhhmhh+0x7a>
    2b96:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <_ZN7TwoWire17beginTransmissionEh>
    2b9a:	8e 2d       	mov	r24, r14
    2b9c:	84 30       	cpi	r24, 0x04	; 4
    2b9e:	08 f0       	brcs	.+2      	; 0x2ba2 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2ba0:	83 e0       	ldi	r24, 0x03	; 3
    2ba2:	cf ef       	ldi	r28, 0xFF	; 255
    2ba4:	c8 0f       	add	r28, r24
    2ba6:	88 23       	and	r24, r24
    2ba8:	d9 f0       	breq	.+54     	; 0x2be0 <_ZN7TwoWire11requestFromEhhmhh+0x72>
    2baa:	8c 2f       	mov	r24, r28
    2bac:	88 0f       	add	r24, r24
    2bae:	88 0f       	add	r24, r24
    2bb0:	88 0f       	add	r24, r24
    2bb2:	a3 01       	movw	r20, r6
    2bb4:	92 01       	movw	r18, r4
    2bb6:	04 c0       	rjmp	.+8      	; 0x2bc0 <_ZN7TwoWire11requestFromEhhmhh+0x52>
    2bb8:	56 95       	lsr	r21
    2bba:	47 95       	ror	r20
    2bbc:	37 95       	ror	r19
    2bbe:	27 95       	ror	r18
    2bc0:	8a 95       	dec	r24
    2bc2:	d2 f7       	brpl	.-12     	; 0x2bb8 <_ZN7TwoWire11requestFromEhhmhh+0x4a>
    2bc4:	ca 01       	movw	r24, r20
    2bc6:	b9 01       	movw	r22, r18
    2bc8:	d5 01       	movw	r26, r10
    2bca:	ed 91       	ld	r30, X+
    2bcc:	fc 91       	ld	r31, X
    2bce:	01 90       	ld	r0, Z+
    2bd0:	f0 81       	ld	r31, Z
    2bd2:	e0 2d       	mov	r30, r0
    2bd4:	c5 01       	movw	r24, r10
    2bd6:	09 95       	icall
    2bd8:	8c 2f       	mov	r24, r28
    2bda:	c1 50       	subi	r28, 0x01	; 1
    2bdc:	81 11       	cpse	r24, r1
    2bde:	e5 cf       	rjmp	.-54     	; 0x2baa <_ZN7TwoWire11requestFromEhhmhh+0x3c>
    2be0:	60 e0       	ldi	r22, 0x00	; 0
    2be2:	c5 01       	movw	r24, r10
    2be4:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <_ZN7TwoWire15endTransmissionEh>
    2be8:	4d 2f       	mov	r20, r29
    2bea:	d1 32       	cpi	r29, 0x21	; 33
    2bec:	08 f0       	brcs	.+2      	; 0x2bf0 <_ZN7TwoWire11requestFromEhhmhh+0x82>
    2bee:	40 e2       	ldi	r20, 0x20	; 32
    2bf0:	2c 2d       	mov	r18, r12
    2bf2:	60 ea       	ldi	r22, 0xA0	; 160
    2bf4:	72 e0       	ldi	r23, 0x02	; 2
    2bf6:	8f 2d       	mov	r24, r15
    2bf8:	0e 94 17 18 	call	0x302e	; 0x302e <twi_readFrom>
    2bfc:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <_ZN7TwoWire13rxBufferIndexE>
    2c00:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <_ZN7TwoWire14rxBufferLengthE>
    2c04:	df 91       	pop	r29
    2c06:	cf 91       	pop	r28
    2c08:	1f 91       	pop	r17
    2c0a:	0f 91       	pop	r16
    2c0c:	ff 90       	pop	r15
    2c0e:	ef 90       	pop	r14
    2c10:	cf 90       	pop	r12
    2c12:	bf 90       	pop	r11
    2c14:	af 90       	pop	r10
    2c16:	7f 90       	pop	r7
    2c18:	6f 90       	pop	r6
    2c1a:	5f 90       	pop	r5
    2c1c:	4f 90       	pop	r4
    2c1e:	08 95       	ret

00002c20 <_ZN7TwoWire11requestFromEhhh>:
    2c20:	cf 92       	push	r12
    2c22:	ef 92       	push	r14
    2c24:	0f 93       	push	r16
    2c26:	1f 93       	push	r17
    2c28:	c2 2e       	mov	r12, r18
    2c2a:	e1 2c       	mov	r14, r1
    2c2c:	00 e0       	ldi	r16, 0x00	; 0
    2c2e:	10 e0       	ldi	r17, 0x00	; 0
    2c30:	98 01       	movw	r18, r16
    2c32:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <_ZN7TwoWire11requestFromEhhmhh>
    2c36:	1f 91       	pop	r17
    2c38:	0f 91       	pop	r16
    2c3a:	ef 90       	pop	r14
    2c3c:	cf 90       	pop	r12
    2c3e:	08 95       	ret

00002c40 <_ZN7TwoWire11requestFromEii>:
    2c40:	21 e0       	ldi	r18, 0x01	; 1
    2c42:	0e 94 10 16 	call	0x2c20	; 0x2c20 <_ZN7TwoWire11requestFromEhhh>
    2c46:	08 95       	ret

00002c48 <_ZN7TwoWire15endTransmissionEv>:
    2c48:	61 e0       	ldi	r22, 0x01	; 1
    2c4a:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <_ZN7TwoWire15endTransmissionEh>
    2c4e:	08 95       	ret

00002c50 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2c50:	8e e6       	ldi	r24, 0x6E	; 110
    2c52:	92 e0       	ldi	r25, 0x02	; 2
    2c54:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <_ZN7TwoWireC1Ev>
    2c58:	08 95       	ret

00002c5a <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    2c5a:	1f 92       	push	r1
    2c5c:	0f 92       	push	r0
    2c5e:	0f b6       	in	r0, 0x3f	; 63
    2c60:	0f 92       	push	r0
    2c62:	11 24       	eor	r1, r1
    2c64:	2f 93       	push	r18
    2c66:	3f 93       	push	r19
    2c68:	8f 93       	push	r24
    2c6a:	9f 93       	push	r25
    2c6c:	af 93       	push	r26
    2c6e:	bf 93       	push	r27
    2c70:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <timer0_millis>
    2c74:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <timer0_millis+0x1>
    2c78:	a0 91 c3 02 	lds	r26, 0x02C3	; 0x8002c3 <timer0_millis+0x2>
    2c7c:	b0 91 c4 02 	lds	r27, 0x02C4	; 0x8002c4 <timer0_millis+0x3>
    2c80:	30 91 c0 02 	lds	r19, 0x02C0	; 0x8002c0 <timer0_fract>
    2c84:	23 e0       	ldi	r18, 0x03	; 3
    2c86:	23 0f       	add	r18, r19
    2c88:	2d 37       	cpi	r18, 0x7D	; 125
    2c8a:	20 f4       	brcc	.+8      	; 0x2c94 <__vector_16+0x3a>
    2c8c:	01 96       	adiw	r24, 0x01	; 1
    2c8e:	a1 1d       	adc	r26, r1
    2c90:	b1 1d       	adc	r27, r1
    2c92:	05 c0       	rjmp	.+10     	; 0x2c9e <__vector_16+0x44>
    2c94:	26 e8       	ldi	r18, 0x86	; 134
    2c96:	23 0f       	add	r18, r19
    2c98:	02 96       	adiw	r24, 0x02	; 2
    2c9a:	a1 1d       	adc	r26, r1
    2c9c:	b1 1d       	adc	r27, r1
    2c9e:	20 93 c0 02 	sts	0x02C0, r18	; 0x8002c0 <timer0_fract>
    2ca2:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <timer0_millis>
    2ca6:	90 93 c2 02 	sts	0x02C2, r25	; 0x8002c2 <timer0_millis+0x1>
    2caa:	a0 93 c3 02 	sts	0x02C3, r26	; 0x8002c3 <timer0_millis+0x2>
    2cae:	b0 93 c4 02 	sts	0x02C4, r27	; 0x8002c4 <timer0_millis+0x3>
    2cb2:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <timer0_overflow_count>
    2cb6:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <timer0_overflow_count+0x1>
    2cba:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <timer0_overflow_count+0x2>
    2cbe:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <timer0_overflow_count+0x3>
    2cc2:	01 96       	adiw	r24, 0x01	; 1
    2cc4:	a1 1d       	adc	r26, r1
    2cc6:	b1 1d       	adc	r27, r1
    2cc8:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <timer0_overflow_count>
    2ccc:	90 93 c6 02 	sts	0x02C6, r25	; 0x8002c6 <timer0_overflow_count+0x1>
    2cd0:	a0 93 c7 02 	sts	0x02C7, r26	; 0x8002c7 <timer0_overflow_count+0x2>
    2cd4:	b0 93 c8 02 	sts	0x02C8, r27	; 0x8002c8 <timer0_overflow_count+0x3>
    2cd8:	bf 91       	pop	r27
    2cda:	af 91       	pop	r26
    2cdc:	9f 91       	pop	r25
    2cde:	8f 91       	pop	r24
    2ce0:	3f 91       	pop	r19
    2ce2:	2f 91       	pop	r18
    2ce4:	0f 90       	pop	r0
    2ce6:	0f be       	out	0x3f, r0	; 63
    2ce8:	0f 90       	pop	r0
    2cea:	1f 90       	pop	r1
    2cec:	18 95       	reti

00002cee <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2cee:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2cf0:	f8 94       	cli
	m = timer0_overflow_count;
    2cf2:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <timer0_overflow_count>
    2cf6:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <timer0_overflow_count+0x1>
    2cfa:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <timer0_overflow_count+0x2>
    2cfe:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    2d02:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2d04:	a8 9b       	sbis	0x15, 0	; 21
    2d06:	05 c0       	rjmp	.+10     	; 0x2d12 <micros+0x24>
    2d08:	2f 3f       	cpi	r18, 0xFF	; 255
    2d0a:	19 f0       	breq	.+6      	; 0x2d12 <micros+0x24>
		m++;
    2d0c:	01 96       	adiw	r24, 0x01	; 1
    2d0e:	a1 1d       	adc	r26, r1
    2d10:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2d12:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2d14:	ba 2f       	mov	r27, r26
    2d16:	a9 2f       	mov	r26, r25
    2d18:	98 2f       	mov	r25, r24
    2d1a:	88 27       	eor	r24, r24
    2d1c:	82 0f       	add	r24, r18
    2d1e:	91 1d       	adc	r25, r1
    2d20:	a1 1d       	adc	r26, r1
    2d22:	b1 1d       	adc	r27, r1
    2d24:	bc 01       	movw	r22, r24
    2d26:	cd 01       	movw	r24, r26
    2d28:	42 e0       	ldi	r20, 0x02	; 2
    2d2a:	66 0f       	add	r22, r22
    2d2c:	77 1f       	adc	r23, r23
    2d2e:	88 1f       	adc	r24, r24
    2d30:	99 1f       	adc	r25, r25
    2d32:	4a 95       	dec	r20
    2d34:	d1 f7       	brne	.-12     	; 0x2d2a <micros+0x3c>
}
    2d36:	08 95       	ret

00002d38 <delay>:

void delay(unsigned long ms)
{
    2d38:	8f 92       	push	r8
    2d3a:	9f 92       	push	r9
    2d3c:	af 92       	push	r10
    2d3e:	bf 92       	push	r11
    2d40:	cf 92       	push	r12
    2d42:	df 92       	push	r13
    2d44:	ef 92       	push	r14
    2d46:	ff 92       	push	r15
    2d48:	6b 01       	movw	r12, r22
    2d4a:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    2d4c:	0e 94 77 16 	call	0x2cee	; 0x2cee <micros>
    2d50:	4b 01       	movw	r8, r22
    2d52:	5c 01       	movw	r10, r24

	while (ms > 0) {
    2d54:	c1 14       	cp	r12, r1
    2d56:	d1 04       	cpc	r13, r1
    2d58:	e1 04       	cpc	r14, r1
    2d5a:	f1 04       	cpc	r15, r1
    2d5c:	01 f1       	breq	.+64     	; 0x2d9e <delay+0x66>
		yield();
    2d5e:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    2d62:	0e 94 77 16 	call	0x2cee	; 0x2cee <micros>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	88 19       	sub	r24, r8
    2d6c:	99 09       	sbc	r25, r9
    2d6e:	aa 09       	sbc	r26, r10
    2d70:	bb 09       	sbc	r27, r11
    2d72:	88 3e       	cpi	r24, 0xE8	; 232
    2d74:	93 40       	sbci	r25, 0x03	; 3
    2d76:	a1 05       	cpc	r26, r1
    2d78:	b1 05       	cpc	r27, r1
    2d7a:	60 f3       	brcs	.-40     	; 0x2d54 <delay+0x1c>
			ms--;
    2d7c:	21 e0       	ldi	r18, 0x01	; 1
    2d7e:	c2 1a       	sub	r12, r18
    2d80:	d1 08       	sbc	r13, r1
    2d82:	e1 08       	sbc	r14, r1
    2d84:	f1 08       	sbc	r15, r1
			start += 1000;
    2d86:	88 ee       	ldi	r24, 0xE8	; 232
    2d88:	88 0e       	add	r8, r24
    2d8a:	83 e0       	ldi	r24, 0x03	; 3
    2d8c:	98 1e       	adc	r9, r24
    2d8e:	a1 1c       	adc	r10, r1
    2d90:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2d92:	c1 14       	cp	r12, r1
    2d94:	d1 04       	cpc	r13, r1
    2d96:	e1 04       	cpc	r14, r1
    2d98:	f1 04       	cpc	r15, r1
    2d9a:	19 f7       	brne	.-58     	; 0x2d62 <delay+0x2a>
    2d9c:	db cf       	rjmp	.-74     	; 0x2d54 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    2d9e:	ff 90       	pop	r15
    2da0:	ef 90       	pop	r14
    2da2:	df 90       	pop	r13
    2da4:	cf 90       	pop	r12
    2da6:	bf 90       	pop	r11
    2da8:	af 90       	pop	r10
    2daa:	9f 90       	pop	r9
    2dac:	8f 90       	pop	r8
    2dae:	08 95       	ret

00002db0 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2db0:	82 30       	cpi	r24, 0x02	; 2
    2db2:	91 05       	cpc	r25, r1
    2db4:	38 f0       	brcs	.+14     	; 0x2dc4 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    2db6:	88 0f       	add	r24, r24
    2db8:	99 1f       	adc	r25, r25
    2dba:	88 0f       	add	r24, r24
    2dbc:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    2dbe:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2dc0:	01 97       	sbiw	r24, 0x01	; 1
    2dc2:	f1 f7       	brne	.-4      	; 0x2dc0 <delayMicroseconds+0x10>
    2dc4:	08 95       	ret

00002dc6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2dc6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2dc8:	84 b5       	in	r24, 0x24	; 36
    2dca:	82 60       	ori	r24, 0x02	; 2
    2dcc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2dce:	84 b5       	in	r24, 0x24	; 36
    2dd0:	81 60       	ori	r24, 0x01	; 1
    2dd2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2dd4:	85 b5       	in	r24, 0x25	; 37
    2dd6:	82 60       	ori	r24, 0x02	; 2
    2dd8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2dda:	85 b5       	in	r24, 0x25	; 37
    2ddc:	81 60       	ori	r24, 0x01	; 1
    2dde:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2de0:	ee e6       	ldi	r30, 0x6E	; 110
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	80 81       	ld	r24, Z
    2de6:	81 60       	ori	r24, 0x01	; 1
    2de8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2dea:	e1 e8       	ldi	r30, 0x81	; 129
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2df0:	80 81       	ld	r24, Z
    2df2:	82 60       	ori	r24, 0x02	; 2
    2df4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2df6:	80 81       	ld	r24, Z
    2df8:	81 60       	ori	r24, 0x01	; 1
    2dfa:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2dfc:	e0 e8       	ldi	r30, 0x80	; 128
    2dfe:	f0 e0       	ldi	r31, 0x00	; 0
    2e00:	80 81       	ld	r24, Z
    2e02:	81 60       	ori	r24, 0x01	; 1
    2e04:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2e06:	e1 eb       	ldi	r30, 0xB1	; 177
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	80 81       	ld	r24, Z
    2e0c:	84 60       	ori	r24, 0x04	; 4
    2e0e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2e10:	e0 eb       	ldi	r30, 0xB0	; 176
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	80 81       	ld	r24, Z
    2e16:	81 60       	ori	r24, 0x01	; 1
    2e18:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2e1a:	ea e7       	ldi	r30, 0x7A	; 122
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	80 81       	ld	r24, Z
    2e20:	84 60       	ori	r24, 0x04	; 4
    2e22:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2e24:	80 81       	ld	r24, Z
    2e26:	82 60       	ori	r24, 0x02	; 2
    2e28:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2e2a:	80 81       	ld	r24, Z
    2e2c:	81 60       	ori	r24, 0x01	; 1
    2e2e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2e30:	80 81       	ld	r24, Z
    2e32:	80 68       	ori	r24, 0x80	; 128
    2e34:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2e36:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2e3a:	08 95       	ret

00002e3c <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    2e3c:	8e 30       	cpi	r24, 0x0E	; 14
    2e3e:	08 f0       	brcs	.+2      	; 0x2e42 <analogRead+0x6>
    2e40:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    2e42:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <analog_reference>
    2e46:	90 e4       	ldi	r25, 0x40	; 64
    2e48:	29 9f       	mul	r18, r25
    2e4a:	90 01       	movw	r18, r0
    2e4c:	11 24       	eor	r1, r1
    2e4e:	87 70       	andi	r24, 0x07	; 7
    2e50:	82 2b       	or	r24, r18
    2e52:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    2e56:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2e5a:	80 64       	ori	r24, 0x40	; 64
    2e5c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    2e60:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2e64:	86 fd       	sbrc	r24, 6
    2e66:	fc cf       	rjmp	.-8      	; 0x2e60 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    2e68:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    2e6c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    2e70:	90 e0       	ldi	r25, 0x00	; 0
}
    2e72:	92 2b       	or	r25, r18
    2e74:	08 95       	ret

00002e76 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2e76:	83 30       	cpi	r24, 0x03	; 3
    2e78:	81 f0       	breq	.+32     	; 0x2e9a <turnOffPWM+0x24>
    2e7a:	28 f4       	brcc	.+10     	; 0x2e86 <turnOffPWM+0x10>
    2e7c:	81 30       	cpi	r24, 0x01	; 1
    2e7e:	99 f0       	breq	.+38     	; 0x2ea6 <turnOffPWM+0x30>
    2e80:	82 30       	cpi	r24, 0x02	; 2
    2e82:	a1 f0       	breq	.+40     	; 0x2eac <turnOffPWM+0x36>
    2e84:	08 95       	ret
    2e86:	87 30       	cpi	r24, 0x07	; 7
    2e88:	a9 f0       	breq	.+42     	; 0x2eb4 <turnOffPWM+0x3e>
    2e8a:	88 30       	cpi	r24, 0x08	; 8
    2e8c:	b9 f0       	breq	.+46     	; 0x2ebc <turnOffPWM+0x46>
    2e8e:	84 30       	cpi	r24, 0x04	; 4
    2e90:	d1 f4       	brne	.+52     	; 0x2ec6 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2e92:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2e96:	8f 7d       	andi	r24, 0xDF	; 223
    2e98:	03 c0       	rjmp	.+6      	; 0x2ea0 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2e9a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2e9e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2ea0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2ea4:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2ea6:	84 b5       	in	r24, 0x24	; 36
    2ea8:	8f 77       	andi	r24, 0x7F	; 127
    2eaa:	02 c0       	rjmp	.+4      	; 0x2eb0 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2eac:	84 b5       	in	r24, 0x24	; 36
    2eae:	8f 7d       	andi	r24, 0xDF	; 223
    2eb0:	84 bd       	out	0x24, r24	; 36
    2eb2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2eb4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2eb8:	8f 77       	andi	r24, 0x7F	; 127
    2eba:	03 c0       	rjmp	.+6      	; 0x2ec2 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2ebc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2ec0:	8f 7d       	andi	r24, 0xDF	; 223
    2ec2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2ec6:	08 95       	ret

00002ec8 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2ec8:	cf 93       	push	r28
    2eca:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	fc 01       	movw	r30, r24
    2ed0:	ea 52       	subi	r30, 0x2A	; 42
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2ed6:	fc 01       	movw	r30, r24
    2ed8:	e6 51       	subi	r30, 0x16	; 22
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2ede:	88 23       	and	r24, r24
    2ee0:	61 f1       	breq	.+88     	; 0x2f3a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	88 0f       	add	r24, r24
    2ee6:	99 1f       	adc	r25, r25
    2ee8:	fc 01       	movw	r30, r24
    2eea:	ee 5e       	subi	r30, 0xEE	; 238
    2eec:	fe 4f       	sbci	r31, 0xFE	; 254
    2eee:	c5 91       	lpm	r28, Z+
    2ef0:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2ef2:	fc 01       	movw	r30, r24
    2ef4:	e8 5f       	subi	r30, 0xF8	; 248
    2ef6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ef8:	a5 91       	lpm	r26, Z+
    2efa:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2efc:	61 11       	cpse	r22, r1
    2efe:	09 c0       	rjmp	.+18     	; 0x2f12 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2f00:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2f02:	f8 94       	cli
		*reg &= ~bit;
    2f04:	88 81       	ld	r24, Y
    2f06:	20 95       	com	r18
    2f08:	82 23       	and	r24, r18
    2f0a:	88 83       	st	Y, r24
		*out &= ~bit;
    2f0c:	ec 91       	ld	r30, X
    2f0e:	2e 23       	and	r18, r30
    2f10:	0b c0       	rjmp	.+22     	; 0x2f28 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2f12:	62 30       	cpi	r22, 0x02	; 2
    2f14:	61 f4       	brne	.+24     	; 0x2f2e <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2f16:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2f18:	f8 94       	cli
		*reg &= ~bit;
    2f1a:	88 81       	ld	r24, Y
    2f1c:	32 2f       	mov	r19, r18
    2f1e:	30 95       	com	r19
    2f20:	83 23       	and	r24, r19
    2f22:	88 83       	st	Y, r24
		*out |= bit;
    2f24:	ec 91       	ld	r30, X
    2f26:	2e 2b       	or	r18, r30
    2f28:	2c 93       	st	X, r18
		SREG = oldSREG;
    2f2a:	9f bf       	out	0x3f, r25	; 63
    2f2c:	06 c0       	rjmp	.+12     	; 0x2f3a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2f2e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2f30:	f8 94       	cli
		*reg |= bit;
    2f32:	e8 81       	ld	r30, Y
    2f34:	2e 2b       	or	r18, r30
    2f36:	28 83       	st	Y, r18
		SREG = oldSREG;
    2f38:	8f bf       	out	0x3f, r24	; 63
	}
}
    2f3a:	df 91       	pop	r29
    2f3c:	cf 91       	pop	r28
    2f3e:	08 95       	ret

00002f40 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2f40:	1f 93       	push	r17
    2f42:	cf 93       	push	r28
    2f44:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2f46:	28 2f       	mov	r18, r24
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	f9 01       	movw	r30, r18
    2f4c:	ee 53       	subi	r30, 0x3E	; 62
    2f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f50:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2f52:	f9 01       	movw	r30, r18
    2f54:	ea 52       	subi	r30, 0x2A	; 42
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2f5a:	f9 01       	movw	r30, r18
    2f5c:	e6 51       	subi	r30, 0x16	; 22
    2f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f60:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2f62:	cc 23       	and	r28, r28
    2f64:	c1 f0       	breq	.+48     	; 0x2f96 <digitalWrite+0x56>
    2f66:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2f68:	81 11       	cpse	r24, r1
    2f6a:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <turnOffPWM>

	out = portOutputRegister(port);
    2f6e:	ec 2f       	mov	r30, r28
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	ee 0f       	add	r30, r30
    2f74:	ff 1f       	adc	r31, r31
    2f76:	e8 5f       	subi	r30, 0xF8	; 248
    2f78:	fe 4f       	sbci	r31, 0xFE	; 254
    2f7a:	a5 91       	lpm	r26, Z+
    2f7c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2f7e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2f80:	f8 94       	cli

	if (val == LOW) {
    2f82:	11 11       	cpse	r17, r1
    2f84:	04 c0       	rjmp	.+8      	; 0x2f8e <digitalWrite+0x4e>
		*out &= ~bit;
    2f86:	8c 91       	ld	r24, X
    2f88:	d0 95       	com	r29
    2f8a:	d8 23       	and	r29, r24
    2f8c:	02 c0       	rjmp	.+4      	; 0x2f92 <digitalWrite+0x52>
	} else {
		*out |= bit;
    2f8e:	ec 91       	ld	r30, X
    2f90:	de 2b       	or	r29, r30
    2f92:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    2f94:	9f bf       	out	0x3f, r25	; 63
}
    2f96:	df 91       	pop	r29
    2f98:	cf 91       	pop	r28
    2f9a:	1f 91       	pop	r17
    2f9c:	08 95       	ret

00002f9e <digitalRead>:

int digitalRead(uint8_t pin)
{
    2f9e:	cf 93       	push	r28
    2fa0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2fa2:	28 2f       	mov	r18, r24
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	f9 01       	movw	r30, r18
    2fa8:	ee 53       	subi	r30, 0x3E	; 62
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2fae:	f9 01       	movw	r30, r18
    2fb0:	ea 52       	subi	r30, 0x2A	; 42
    2fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2fb6:	f9 01       	movw	r30, r18
    2fb8:	e6 51       	subi	r30, 0x16	; 22
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    2fbe:	cc 23       	and	r28, r28
    2fc0:	91 f0       	breq	.+36     	; 0x2fe6 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2fc2:	81 11       	cpse	r24, r1
    2fc4:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    2fc8:	ec 2f       	mov	r30, r28
    2fca:	f0 e0       	ldi	r31, 0x00	; 0
    2fcc:	ee 0f       	add	r30, r30
    2fce:	ff 1f       	adc	r31, r31
    2fd0:	e2 50       	subi	r30, 0x02	; 2
    2fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd4:	a5 91       	lpm	r26, Z+
    2fd6:	b4 91       	lpm	r27, Z
    2fd8:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    2fda:	ed 23       	and	r30, r29
    2fdc:	81 e0       	ldi	r24, 0x01	; 1
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	21 f4       	brne	.+8      	; 0x2fea <digitalRead+0x4c>
    2fe2:	80 e0       	ldi	r24, 0x00	; 0
    2fe4:	02 c0       	rjmp	.+4      	; 0x2fea <digitalRead+0x4c>
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2fea:	df 91       	pop	r29
    2fec:	cf 91       	pop	r28
    2fee:	08 95       	ret

00002ff0 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2ff0:	08 95       	ret

00002ff2 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2ff2:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <twi_state>
    2ff6:	81 e0       	ldi	r24, 0x01	; 1
    2ff8:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <twi_sendStop>
    2ffc:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <twi_inRepStart>
    3000:	61 e0       	ldi	r22, 0x01	; 1
    3002:	82 e1       	ldi	r24, 0x12	; 18
    3004:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <digitalWrite>
    3008:	61 e0       	ldi	r22, 0x01	; 1
    300a:	83 e1       	ldi	r24, 0x13	; 19
    300c:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <digitalWrite>
    3010:	e9 eb       	ldi	r30, 0xB9	; 185
    3012:	f0 e0       	ldi	r31, 0x00	; 0
    3014:	80 81       	ld	r24, Z
    3016:	8e 7f       	andi	r24, 0xFE	; 254
    3018:	80 83       	st	Z, r24
    301a:	80 81       	ld	r24, Z
    301c:	8d 7f       	andi	r24, 0xFD	; 253
    301e:	80 83       	st	Z, r24
    3020:	88 e4       	ldi	r24, 0x48	; 72
    3022:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    3026:	85 e4       	ldi	r24, 0x45	; 69
    3028:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    302c:	08 95       	ret

0000302e <twi_readFrom>:
    302e:	41 32       	cpi	r20, 0x21	; 33
    3030:	08 f0       	brcs	.+2      	; 0x3034 <twi_readFrom+0x6>
    3032:	43 c0       	rjmp	.+134    	; 0x30ba <twi_readFrom+0x8c>
    3034:	90 91 36 03 	lds	r25, 0x0336	; 0x800336 <twi_state>
    3038:	91 11       	cpse	r25, r1
    303a:	fc cf       	rjmp	.-8      	; 0x3034 <twi_readFrom+0x6>
    303c:	91 e0       	ldi	r25, 0x01	; 1
    303e:	90 93 36 03 	sts	0x0336, r25	; 0x800336 <twi_state>
    3042:	20 93 34 03 	sts	0x0334, r18	; 0x800334 <twi_sendStop>
    3046:	2f ef       	ldi	r18, 0xFF	; 255
    3048:	20 93 c9 02 	sts	0x02C9, r18	; 0x8002c9 <twi_error>
    304c:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <twi_masterBufferIndex>
    3050:	24 0f       	add	r18, r20
    3052:	20 93 0d 03 	sts	0x030D, r18	; 0x80030d <twi_masterBufferLength>
    3056:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <twi_slarw>
    305a:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <twi_slarw>
    305e:	88 0f       	add	r24, r24
    3060:	89 2b       	or	r24, r25
    3062:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <twi_slarw>
    3066:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <twi_inRepStart>
    306a:	81 30       	cpi	r24, 0x01	; 1
    306c:	61 f4       	brne	.+24     	; 0x3086 <twi_readFrom+0x58>
    306e:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <twi_inRepStart>
    3072:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <twi_slarw>
    3076:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    307a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    307e:	83 fd       	sbrc	r24, 3
    3080:	f8 cf       	rjmp	.-16     	; 0x3072 <twi_readFrom+0x44>
    3082:	85 ec       	ldi	r24, 0xC5	; 197
    3084:	01 c0       	rjmp	.+2      	; 0x3088 <twi_readFrom+0x5a>
    3086:	85 ee       	ldi	r24, 0xE5	; 229
    3088:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    308c:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <twi_state>
    3090:	81 30       	cpi	r24, 0x01	; 1
    3092:	e1 f3       	breq	.-8      	; 0x308c <twi_readFrom+0x5e>
    3094:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <twi_masterBufferIndex>
    3098:	84 17       	cp	r24, r20
    309a:	10 f4       	brcc	.+4      	; 0x30a0 <twi_readFrom+0x72>
    309c:	40 91 0e 03 	lds	r20, 0x030E	; 0x80030e <twi_masterBufferIndex>
    30a0:	af e0       	ldi	r26, 0x0F	; 15
    30a2:	b3 e0       	ldi	r27, 0x03	; 3
    30a4:	96 2f       	mov	r25, r22
    30a6:	fb 01       	movw	r30, r22
    30a8:	8e 2f       	mov	r24, r30
    30aa:	89 1b       	sub	r24, r25
    30ac:	84 17       	cp	r24, r20
    30ae:	18 f4       	brcc	.+6      	; 0x30b6 <twi_readFrom+0x88>
    30b0:	8d 91       	ld	r24, X+
    30b2:	81 93       	st	Z+, r24
    30b4:	f9 cf       	rjmp	.-14     	; 0x30a8 <twi_readFrom+0x7a>
    30b6:	84 2f       	mov	r24, r20
    30b8:	08 95       	ret
    30ba:	80 e0       	ldi	r24, 0x00	; 0
    30bc:	08 95       	ret

000030be <twi_writeTo>:
    30be:	0f 93       	push	r16
    30c0:	41 32       	cpi	r20, 0x21	; 33
    30c2:	08 f0       	brcs	.+2      	; 0x30c6 <twi_writeTo+0x8>
    30c4:	4a c0       	rjmp	.+148    	; 0x315a <twi_writeTo+0x9c>
    30c6:	90 91 36 03 	lds	r25, 0x0336	; 0x800336 <twi_state>
    30ca:	91 11       	cpse	r25, r1
    30cc:	fc cf       	rjmp	.-8      	; 0x30c6 <twi_writeTo+0x8>
    30ce:	32 e0       	ldi	r19, 0x02	; 2
    30d0:	30 93 36 03 	sts	0x0336, r19	; 0x800336 <twi_state>
    30d4:	00 93 34 03 	sts	0x0334, r16	; 0x800334 <twi_sendStop>
    30d8:	3f ef       	ldi	r19, 0xFF	; 255
    30da:	30 93 c9 02 	sts	0x02C9, r19	; 0x8002c9 <twi_error>
    30de:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <twi_masterBufferIndex>
    30e2:	40 93 0d 03 	sts	0x030D, r20	; 0x80030d <twi_masterBufferLength>
    30e6:	56 2f       	mov	r21, r22
    30e8:	af e0       	ldi	r26, 0x0F	; 15
    30ea:	b3 e0       	ldi	r27, 0x03	; 3
    30ec:	fb 01       	movw	r30, r22
    30ee:	3e 2f       	mov	r19, r30
    30f0:	35 1b       	sub	r19, r21
    30f2:	34 17       	cp	r19, r20
    30f4:	18 f4       	brcc	.+6      	; 0x30fc <twi_writeTo+0x3e>
    30f6:	31 91       	ld	r19, Z+
    30f8:	3d 93       	st	X+, r19
    30fa:	f9 cf       	rjmp	.-14     	; 0x30ee <twi_writeTo+0x30>
    30fc:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <twi_slarw>
    3100:	30 91 35 03 	lds	r19, 0x0335	; 0x800335 <twi_slarw>
    3104:	88 0f       	add	r24, r24
    3106:	83 2b       	or	r24, r19
    3108:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <twi_slarw>
    310c:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <twi_inRepStart>
    3110:	81 30       	cpi	r24, 0x01	; 1
    3112:	61 f4       	brne	.+24     	; 0x312c <twi_writeTo+0x6e>
    3114:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <twi_inRepStart>
    3118:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <twi_slarw>
    311c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3120:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3124:	83 fd       	sbrc	r24, 3
    3126:	f8 cf       	rjmp	.-16     	; 0x3118 <twi_writeTo+0x5a>
    3128:	85 ec       	ldi	r24, 0xC5	; 197
    312a:	01 c0       	rjmp	.+2      	; 0x312e <twi_writeTo+0x70>
    312c:	85 ee       	ldi	r24, 0xE5	; 229
    312e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3132:	22 23       	and	r18, r18
    3134:	21 f0       	breq	.+8      	; 0x313e <twi_writeTo+0x80>
    3136:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <twi_state>
    313a:	82 30       	cpi	r24, 0x02	; 2
    313c:	d1 f3       	breq	.-12     	; 0x3132 <twi_writeTo+0x74>
    313e:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <twi_error>
    3142:	8f 3f       	cpi	r24, 0xFF	; 255
    3144:	79 f0       	breq	.+30     	; 0x3164 <twi_writeTo+0xa6>
    3146:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <twi_error>
    314a:	80 32       	cpi	r24, 0x20	; 32
    314c:	41 f0       	breq	.+16     	; 0x315e <twi_writeTo+0xa0>
    314e:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <twi_error>
    3152:	80 33       	cpi	r24, 0x30	; 48
    3154:	31 f0       	breq	.+12     	; 0x3162 <twi_writeTo+0xa4>
    3156:	94 e0       	ldi	r25, 0x04	; 4
    3158:	05 c0       	rjmp	.+10     	; 0x3164 <twi_writeTo+0xa6>
    315a:	91 e0       	ldi	r25, 0x01	; 1
    315c:	03 c0       	rjmp	.+6      	; 0x3164 <twi_writeTo+0xa6>
    315e:	92 e0       	ldi	r25, 0x02	; 2
    3160:	01 c0       	rjmp	.+2      	; 0x3164 <twi_writeTo+0xa6>
    3162:	93 e0       	ldi	r25, 0x03	; 3
    3164:	89 2f       	mov	r24, r25
    3166:	0f 91       	pop	r16
    3168:	08 95       	ret

0000316a <twi_transmit>:
    316a:	40 91 eb 02 	lds	r20, 0x02EB	; 0x8002eb <twi_txBufferLength>
    316e:	26 2f       	mov	r18, r22
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	24 0f       	add	r18, r20
    3174:	31 1d       	adc	r19, r1
    3176:	21 32       	cpi	r18, 0x21	; 33
    3178:	31 05       	cpc	r19, r1
    317a:	dc f4       	brge	.+54     	; 0x31b2 <twi_transmit+0x48>
    317c:	20 91 36 03 	lds	r18, 0x0336	; 0x800336 <twi_state>
    3180:	24 30       	cpi	r18, 0x04	; 4
    3182:	c9 f4       	brne	.+50     	; 0x31b6 <twi_transmit+0x4c>
    3184:	fc 01       	movw	r30, r24
    3186:	80 e0       	ldi	r24, 0x00	; 0
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	86 17       	cp	r24, r22
    318c:	58 f4       	brcc	.+22     	; 0x31a4 <twi_transmit+0x3a>
    318e:	30 91 eb 02 	lds	r19, 0x02EB	; 0x8002eb <twi_txBufferLength>
    3192:	21 91       	ld	r18, Z+
    3194:	dc 01       	movw	r26, r24
    3196:	a3 51       	subi	r26, 0x13	; 19
    3198:	bd 4f       	sbci	r27, 0xFD	; 253
    319a:	a3 0f       	add	r26, r19
    319c:	b1 1d       	adc	r27, r1
    319e:	2c 93       	st	X, r18
    31a0:	01 96       	adiw	r24, 0x01	; 1
    31a2:	f3 cf       	rjmp	.-26     	; 0x318a <twi_transmit+0x20>
    31a4:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <twi_txBufferLength>
    31a8:	68 0f       	add	r22, r24
    31aa:	60 93 eb 02 	sts	0x02EB, r22	; 0x8002eb <twi_txBufferLength>
    31ae:	80 e0       	ldi	r24, 0x00	; 0
    31b0:	08 95       	ret
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	08 95       	ret
    31b6:	82 e0       	ldi	r24, 0x02	; 2
    31b8:	08 95       	ret

000031ba <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    31ba:	85 ed       	ldi	r24, 0xD5	; 213
    31bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    31c0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    31c4:	84 fd       	sbrc	r24, 4
    31c6:	fc cf       	rjmp	.-8      	; 0x31c0 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    31c8:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <twi_state>
    31cc:	08 95       	ret

000031ce <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    31ce:	85 ec       	ldi	r24, 0xC5	; 197
    31d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    31d4:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <twi_state>
    31d8:	08 95       	ret

000031da <__vector_24>:
}

ISR(TWI_vect)
{
    31da:	1f 92       	push	r1
    31dc:	0f 92       	push	r0
    31de:	0f b6       	in	r0, 0x3f	; 63
    31e0:	0f 92       	push	r0
    31e2:	11 24       	eor	r1, r1
    31e4:	2f 93       	push	r18
    31e6:	3f 93       	push	r19
    31e8:	4f 93       	push	r20
    31ea:	5f 93       	push	r21
    31ec:	6f 93       	push	r22
    31ee:	7f 93       	push	r23
    31f0:	8f 93       	push	r24
    31f2:	9f 93       	push	r25
    31f4:	af 93       	push	r26
    31f6:	bf 93       	push	r27
    31f8:	ef 93       	push	r30
    31fa:	ff 93       	push	r31
  switch(TW_STATUS){
    31fc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    3200:	88 7f       	andi	r24, 0xF8	; 248
    3202:	80 36       	cpi	r24, 0x60	; 96
    3204:	09 f4       	brne	.+2      	; 0x3208 <__vector_24+0x2e>
    3206:	9e c0       	rjmp	.+316    	; 0x3344 <__vector_24+0x16a>
    3208:	78 f5       	brcc	.+94     	; 0x3268 <__vector_24+0x8e>
    320a:	88 32       	cpi	r24, 0x28	; 40
    320c:	09 f4       	brne	.+2      	; 0x3210 <__vector_24+0x36>
    320e:	5d c0       	rjmp	.+186    	; 0x32ca <__vector_24+0xf0>
    3210:	90 f4       	brcc	.+36     	; 0x3236 <__vector_24+0x5c>
    3212:	80 31       	cpi	r24, 0x10	; 16
    3214:	09 f4       	brne	.+2      	; 0x3218 <__vector_24+0x3e>
    3216:	56 c0       	rjmp	.+172    	; 0x32c4 <__vector_24+0xea>
    3218:	38 f4       	brcc	.+14     	; 0x3228 <__vector_24+0x4e>
    321a:	88 23       	and	r24, r24
    321c:	09 f4       	brne	.+2      	; 0x3220 <__vector_24+0x46>
    321e:	f5 c0       	rjmp	.+490    	; 0x340a <__vector_24+0x230>
    3220:	88 30       	cpi	r24, 0x08	; 8
    3222:	09 f4       	brne	.+2      	; 0x3226 <__vector_24+0x4c>
    3224:	4f c0       	rjmp	.+158    	; 0x32c4 <__vector_24+0xea>
    3226:	f5 c0       	rjmp	.+490    	; 0x3412 <__vector_24+0x238>
    3228:	88 31       	cpi	r24, 0x18	; 24
    322a:	09 f4       	brne	.+2      	; 0x322e <__vector_24+0x54>
    322c:	4e c0       	rjmp	.+156    	; 0x32ca <__vector_24+0xf0>
    322e:	80 32       	cpi	r24, 0x20	; 32
    3230:	09 f4       	brne	.+2      	; 0x3234 <__vector_24+0x5a>
    3232:	5f c0       	rjmp	.+190    	; 0x32f2 <__vector_24+0x118>
    3234:	ee c0       	rjmp	.+476    	; 0x3412 <__vector_24+0x238>
    3236:	80 34       	cpi	r24, 0x40	; 64
    3238:	09 f4       	brne	.+2      	; 0x323c <__vector_24+0x62>
    323a:	6a c0       	rjmp	.+212    	; 0x3310 <__vector_24+0x136>
    323c:	58 f4       	brcc	.+22     	; 0x3254 <__vector_24+0x7a>
    323e:	80 33       	cpi	r24, 0x30	; 48
    3240:	09 f4       	brne	.+2      	; 0x3244 <__vector_24+0x6a>
    3242:	57 c0       	rjmp	.+174    	; 0x32f2 <__vector_24+0x118>
    3244:	88 33       	cpi	r24, 0x38	; 56
    3246:	09 f0       	breq	.+2      	; 0x324a <__vector_24+0x70>
    3248:	e4 c0       	rjmp	.+456    	; 0x3412 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    324a:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <twi_error>
      twi_releaseBus();
    324e:	0e 94 e7 18 	call	0x31ce	; 0x31ce <twi_releaseBus>
      break;
    3252:	df c0       	rjmp	.+446    	; 0x3412 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3254:	80 35       	cpi	r24, 0x50	; 80
    3256:	09 f4       	brne	.+2      	; 0x325a <__vector_24+0x80>
    3258:	4f c0       	rjmp	.+158    	; 0x32f8 <__vector_24+0x11e>
    325a:	88 35       	cpi	r24, 0x58	; 88
    325c:	09 f4       	brne	.+2      	; 0x3260 <__vector_24+0x86>
    325e:	5d c0       	rjmp	.+186    	; 0x331a <__vector_24+0x140>
    3260:	88 34       	cpi	r24, 0x48	; 72
    3262:	09 f0       	breq	.+2      	; 0x3266 <__vector_24+0x8c>
    3264:	d6 c0       	rjmp	.+428    	; 0x3412 <__vector_24+0x238>
    3266:	d3 c0       	rjmp	.+422    	; 0x340e <__vector_24+0x234>
    3268:	88 39       	cpi	r24, 0x98	; 152
    326a:	09 f4       	brne	.+2      	; 0x326e <__vector_24+0x94>
    326c:	c4 c0       	rjmp	.+392    	; 0x33f6 <__vector_24+0x21c>
    326e:	a8 f4       	brcc	.+42     	; 0x329a <__vector_24+0xc0>
    3270:	88 37       	cpi	r24, 0x78	; 120
    3272:	09 f4       	brne	.+2      	; 0x3276 <__vector_24+0x9c>
    3274:	67 c0       	rjmp	.+206    	; 0x3344 <__vector_24+0x16a>
    3276:	38 f4       	brcc	.+14     	; 0x3286 <__vector_24+0xac>
    3278:	88 36       	cpi	r24, 0x68	; 104
    327a:	09 f4       	brne	.+2      	; 0x327e <__vector_24+0xa4>
    327c:	63 c0       	rjmp	.+198    	; 0x3344 <__vector_24+0x16a>
    327e:	80 37       	cpi	r24, 0x70	; 112
    3280:	09 f4       	brne	.+2      	; 0x3284 <__vector_24+0xaa>
    3282:	60 c0       	rjmp	.+192    	; 0x3344 <__vector_24+0x16a>
    3284:	c6 c0       	rjmp	.+396    	; 0x3412 <__vector_24+0x238>
    3286:	88 38       	cpi	r24, 0x88	; 136
    3288:	09 f4       	brne	.+2      	; 0x328c <__vector_24+0xb2>
    328a:	b5 c0       	rjmp	.+362    	; 0x33f6 <__vector_24+0x21c>
    328c:	80 39       	cpi	r24, 0x90	; 144
    328e:	09 f4       	brne	.+2      	; 0x3292 <__vector_24+0xb8>
    3290:	5f c0       	rjmp	.+190    	; 0x3350 <__vector_24+0x176>
    3292:	80 38       	cpi	r24, 0x80	; 128
    3294:	09 f0       	breq	.+2      	; 0x3298 <__vector_24+0xbe>
    3296:	bd c0       	rjmp	.+378    	; 0x3412 <__vector_24+0x238>
    3298:	5b c0       	rjmp	.+182    	; 0x3350 <__vector_24+0x176>
    329a:	80 3b       	cpi	r24, 0xB0	; 176
    329c:	09 f4       	brne	.+2      	; 0x32a0 <__vector_24+0xc6>
    329e:	83 c0       	rjmp	.+262    	; 0x33a6 <__vector_24+0x1cc>
    32a0:	38 f4       	brcc	.+14     	; 0x32b0 <__vector_24+0xd6>
    32a2:	80 3a       	cpi	r24, 0xA0	; 160
    32a4:	09 f4       	brne	.+2      	; 0x32a8 <__vector_24+0xce>
    32a6:	66 c0       	rjmp	.+204    	; 0x3374 <__vector_24+0x19a>
    32a8:	88 3a       	cpi	r24, 0xA8	; 168
    32aa:	09 f4       	brne	.+2      	; 0x32ae <__vector_24+0xd4>
    32ac:	7c c0       	rjmp	.+248    	; 0x33a6 <__vector_24+0x1cc>
    32ae:	b1 c0       	rjmp	.+354    	; 0x3412 <__vector_24+0x238>
    32b0:	80 3c       	cpi	r24, 0xC0	; 192
    32b2:	09 f4       	brne	.+2      	; 0x32b6 <__vector_24+0xdc>
    32b4:	a4 c0       	rjmp	.+328    	; 0x33fe <__vector_24+0x224>
    32b6:	88 3c       	cpi	r24, 0xC8	; 200
    32b8:	09 f4       	brne	.+2      	; 0x32bc <__vector_24+0xe2>
    32ba:	a1 c0       	rjmp	.+322    	; 0x33fe <__vector_24+0x224>
    32bc:	88 3b       	cpi	r24, 0xB8	; 184
    32be:	09 f4       	brne	.+2      	; 0x32c2 <__vector_24+0xe8>
    32c0:	87 c0       	rjmp	.+270    	; 0x33d0 <__vector_24+0x1f6>
    32c2:	a7 c0       	rjmp	.+334    	; 0x3412 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    32c4:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <twi_slarw>
    32c8:	10 c0       	rjmp	.+32     	; 0x32ea <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    32ca:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <twi_masterBufferIndex>
    32ce:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <twi_masterBufferLength>
    32d2:	98 17       	cp	r25, r24
    32d4:	70 f5       	brcc	.+92     	; 0x3332 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    32d6:	e0 91 0e 03 	lds	r30, 0x030E	; 0x80030e <twi_masterBufferIndex>
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	8e 0f       	add	r24, r30
    32de:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <twi_masterBufferIndex>
    32e2:	f0 e0       	ldi	r31, 0x00	; 0
    32e4:	e1 5f       	subi	r30, 0xF1	; 241
    32e6:	fc 4f       	sbci	r31, 0xFC	; 252
    32e8:	80 81       	ld	r24, Z
    32ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    32ee:	85 ec       	ldi	r24, 0xC5	; 197
    32f0:	83 c0       	rjmp	.+262    	; 0x33f8 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    32f2:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <twi_error>
    32f6:	8b c0       	rjmp	.+278    	; 0x340e <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    32f8:	e0 91 0e 03 	lds	r30, 0x030E	; 0x80030e <twi_masterBufferIndex>
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	8e 0f       	add	r24, r30
    3300:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <twi_masterBufferIndex>
    3304:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3308:	f0 e0       	ldi	r31, 0x00	; 0
    330a:	e1 5f       	subi	r30, 0xF1	; 241
    330c:	fc 4f       	sbci	r31, 0xFC	; 252
    330e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3310:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <twi_masterBufferIndex>
    3314:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <twi_masterBufferLength>
    3318:	6b c0       	rjmp	.+214    	; 0x33f0 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    331a:	e0 91 0e 03 	lds	r30, 0x030E	; 0x80030e <twi_masterBufferIndex>
    331e:	81 e0       	ldi	r24, 0x01	; 1
    3320:	8e 0f       	add	r24, r30
    3322:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <twi_masterBufferIndex>
    3326:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    332a:	f0 e0       	ldi	r31, 0x00	; 0
    332c:	e1 5f       	subi	r30, 0xF1	; 241
    332e:	fc 4f       	sbci	r31, 0xFC	; 252
    3330:	80 83       	st	Z, r24
	if (twi_sendStop)
    3332:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <twi_sendStop>
    3336:	81 11       	cpse	r24, r1
    3338:	6a c0       	rjmp	.+212    	; 0x340e <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    333a:	81 e0       	ldi	r24, 0x01	; 1
    333c:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3340:	84 ea       	ldi	r24, 0xA4	; 164
    3342:	5e c0       	rjmp	.+188    	; 0x3400 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3344:	83 e0       	ldi	r24, 0x03	; 3
    3346:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    334a:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <twi_rxBufferIndex>
    334e:	cf cf       	rjmp	.-98     	; 0x32ee <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3350:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <twi_rxBufferIndex>
    3354:	80 32       	cpi	r24, 0x20	; 32
    3356:	08 f0       	brcs	.+2      	; 0x335a <__vector_24+0x180>
    3358:	4e c0       	rjmp	.+156    	; 0x33f6 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    335a:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <twi_rxBufferIndex>
    335e:	81 e0       	ldi	r24, 0x01	; 1
    3360:	8e 0f       	add	r24, r30
    3362:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <twi_rxBufferIndex>
    3366:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    336a:	f0 e0       	ldi	r31, 0x00	; 0
    336c:	e5 53       	subi	r30, 0x35	; 53
    336e:	fd 4f       	sbci	r31, 0xFD	; 253
    3370:	80 83       	st	Z, r24
    3372:	bd cf       	rjmp	.-134    	; 0x32ee <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3374:	0e 94 e7 18 	call	0x31ce	; 0x31ce <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3378:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <twi_rxBufferIndex>
    337c:	80 32       	cpi	r24, 0x20	; 32
    337e:	30 f4       	brcc	.+12     	; 0x338c <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3380:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <twi_rxBufferIndex>
    3384:	f0 e0       	ldi	r31, 0x00	; 0
    3386:	e5 53       	subi	r30, 0x35	; 53
    3388:	fd 4f       	sbci	r31, 0xFD	; 253
    338a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    338c:	60 91 ca 02 	lds	r22, 0x02CA	; 0x8002ca <twi_rxBufferIndex>
    3390:	70 e0       	ldi	r23, 0x00	; 0
    3392:	e0 91 2f 03 	lds	r30, 0x032F	; 0x80032f <twi_onSlaveReceive>
    3396:	f0 91 30 03 	lds	r31, 0x0330	; 0x800330 <twi_onSlaveReceive+0x1>
    339a:	8b ec       	ldi	r24, 0xCB	; 203
    339c:	92 e0       	ldi	r25, 0x02	; 2
    339e:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    33a0:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <twi_rxBufferIndex>
      break;
    33a4:	36 c0       	rjmp	.+108    	; 0x3412 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    33a6:	84 e0       	ldi	r24, 0x04	; 4
    33a8:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    33ac:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    33b0:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    33b4:	e0 91 31 03 	lds	r30, 0x0331	; 0x800331 <twi_onSlaveTransmit>
    33b8:	f0 91 32 03 	lds	r31, 0x0332	; 0x800332 <twi_onSlaveTransmit+0x1>
    33bc:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    33be:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <twi_txBufferLength>
    33c2:	81 11       	cpse	r24, r1
    33c4:	05 c0       	rjmp	.+10     	; 0x33d0 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    33c6:	81 e0       	ldi	r24, 0x01	; 1
    33c8:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    33cc:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    33d0:	e0 91 ec 02 	lds	r30, 0x02EC	; 0x8002ec <twi_txBufferIndex>
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	8e 0f       	add	r24, r30
    33d8:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <twi_txBufferIndex>
    33dc:	f0 e0       	ldi	r31, 0x00	; 0
    33de:	e3 51       	subi	r30, 0x13	; 19
    33e0:	fd 4f       	sbci	r31, 0xFD	; 253
    33e2:	80 81       	ld	r24, Z
    33e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    33e8:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <twi_txBufferIndex>
    33ec:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <twi_txBufferLength>
    33f0:	98 17       	cp	r25, r24
    33f2:	08 f4       	brcc	.+2      	; 0x33f6 <__vector_24+0x21c>
    33f4:	7c cf       	rjmp	.-264    	; 0x32ee <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    33f6:	85 e8       	ldi	r24, 0x85	; 133
    33f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    33fc:	0a c0       	rjmp	.+20     	; 0x3412 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    33fe:	85 ec       	ldi	r24, 0xC5	; 197
    3400:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3404:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <twi_state>
      break;
    3408:	04 c0       	rjmp	.+8      	; 0x3412 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    340a:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <twi_error>
      twi_stop();
    340e:	0e 94 dd 18 	call	0x31ba	; 0x31ba <twi_stop>
      break;
  }
}
    3412:	ff 91       	pop	r31
    3414:	ef 91       	pop	r30
    3416:	bf 91       	pop	r27
    3418:	af 91       	pop	r26
    341a:	9f 91       	pop	r25
    341c:	8f 91       	pop	r24
    341e:	7f 91       	pop	r23
    3420:	6f 91       	pop	r22
    3422:	5f 91       	pop	r21
    3424:	4f 91       	pop	r20
    3426:	3f 91       	pop	r19
    3428:	2f 91       	pop	r18
    342a:	0f 90       	pop	r0
    342c:	0f be       	out	0x3f, r0	; 63
    342e:	0f 90       	pop	r0
    3430:	1f 90       	pop	r1
    3432:	18 95       	reti

00003434 <__mulsi3>:
    3434:	db 01       	movw	r26, r22
    3436:	8f 93       	push	r24
    3438:	9f 93       	push	r25
    343a:	0e 94 86 1a 	call	0x350c	; 0x350c <__muluhisi3>
    343e:	bf 91       	pop	r27
    3440:	af 91       	pop	r26
    3442:	a2 9f       	mul	r26, r18
    3444:	80 0d       	add	r24, r0
    3446:	91 1d       	adc	r25, r1
    3448:	a3 9f       	mul	r26, r19
    344a:	90 0d       	add	r25, r0
    344c:	b2 9f       	mul	r27, r18
    344e:	90 0d       	add	r25, r0
    3450:	11 24       	eor	r1, r1
    3452:	08 95       	ret

00003454 <__divmodhi4>:
    3454:	97 fb       	bst	r25, 7
    3456:	07 2e       	mov	r0, r23
    3458:	16 f4       	brtc	.+4      	; 0x345e <__divmodhi4+0xa>
    345a:	00 94       	com	r0
    345c:	07 d0       	rcall	.+14     	; 0x346c <__divmodhi4_neg1>
    345e:	77 fd       	sbrc	r23, 7
    3460:	09 d0       	rcall	.+18     	; 0x3474 <__divmodhi4_neg2>
    3462:	0e 94 91 1a 	call	0x3522	; 0x3522 <__udivmodhi4>
    3466:	07 fc       	sbrc	r0, 7
    3468:	05 d0       	rcall	.+10     	; 0x3474 <__divmodhi4_neg2>
    346a:	3e f4       	brtc	.+14     	; 0x347a <__divmodhi4_exit>

0000346c <__divmodhi4_neg1>:
    346c:	90 95       	com	r25
    346e:	81 95       	neg	r24
    3470:	9f 4f       	sbci	r25, 0xFF	; 255
    3472:	08 95       	ret

00003474 <__divmodhi4_neg2>:
    3474:	70 95       	com	r23
    3476:	61 95       	neg	r22
    3478:	7f 4f       	sbci	r23, 0xFF	; 255

0000347a <__divmodhi4_exit>:
    347a:	08 95       	ret

0000347c <__udivmodsi4>:
    347c:	a1 e2       	ldi	r26, 0x21	; 33
    347e:	1a 2e       	mov	r1, r26
    3480:	aa 1b       	sub	r26, r26
    3482:	bb 1b       	sub	r27, r27
    3484:	fd 01       	movw	r30, r26
    3486:	0d c0       	rjmp	.+26     	; 0x34a2 <__udivmodsi4_ep>

00003488 <__udivmodsi4_loop>:
    3488:	aa 1f       	adc	r26, r26
    348a:	bb 1f       	adc	r27, r27
    348c:	ee 1f       	adc	r30, r30
    348e:	ff 1f       	adc	r31, r31
    3490:	a2 17       	cp	r26, r18
    3492:	b3 07       	cpc	r27, r19
    3494:	e4 07       	cpc	r30, r20
    3496:	f5 07       	cpc	r31, r21
    3498:	20 f0       	brcs	.+8      	; 0x34a2 <__udivmodsi4_ep>
    349a:	a2 1b       	sub	r26, r18
    349c:	b3 0b       	sbc	r27, r19
    349e:	e4 0b       	sbc	r30, r20
    34a0:	f5 0b       	sbc	r31, r21

000034a2 <__udivmodsi4_ep>:
    34a2:	66 1f       	adc	r22, r22
    34a4:	77 1f       	adc	r23, r23
    34a6:	88 1f       	adc	r24, r24
    34a8:	99 1f       	adc	r25, r25
    34aa:	1a 94       	dec	r1
    34ac:	69 f7       	brne	.-38     	; 0x3488 <__udivmodsi4_loop>
    34ae:	60 95       	com	r22
    34b0:	70 95       	com	r23
    34b2:	80 95       	com	r24
    34b4:	90 95       	com	r25
    34b6:	9b 01       	movw	r18, r22
    34b8:	ac 01       	movw	r20, r24
    34ba:	bd 01       	movw	r22, r26
    34bc:	cf 01       	movw	r24, r30
    34be:	08 95       	ret

000034c0 <__divmodsi4>:
    34c0:	05 2e       	mov	r0, r21
    34c2:	97 fb       	bst	r25, 7
    34c4:	1e f4       	brtc	.+6      	; 0x34cc <__divmodsi4+0xc>
    34c6:	00 94       	com	r0
    34c8:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__negsi2>
    34cc:	57 fd       	sbrc	r21, 7
    34ce:	07 d0       	rcall	.+14     	; 0x34de <__divmodsi4_neg2>
    34d0:	0e 94 3e 1a 	call	0x347c	; 0x347c <__udivmodsi4>
    34d4:	07 fc       	sbrc	r0, 7
    34d6:	03 d0       	rcall	.+6      	; 0x34de <__divmodsi4_neg2>
    34d8:	4e f4       	brtc	.+18     	; 0x34ec <__divmodsi4_exit>
    34da:	0c 94 77 1a 	jmp	0x34ee	; 0x34ee <__negsi2>

000034de <__divmodsi4_neg2>:
    34de:	50 95       	com	r21
    34e0:	40 95       	com	r20
    34e2:	30 95       	com	r19
    34e4:	21 95       	neg	r18
    34e6:	3f 4f       	sbci	r19, 0xFF	; 255
    34e8:	4f 4f       	sbci	r20, 0xFF	; 255
    34ea:	5f 4f       	sbci	r21, 0xFF	; 255

000034ec <__divmodsi4_exit>:
    34ec:	08 95       	ret

000034ee <__negsi2>:
    34ee:	90 95       	com	r25
    34f0:	80 95       	com	r24
    34f2:	70 95       	com	r23
    34f4:	61 95       	neg	r22
    34f6:	7f 4f       	sbci	r23, 0xFF	; 255
    34f8:	8f 4f       	sbci	r24, 0xFF	; 255
    34fa:	9f 4f       	sbci	r25, 0xFF	; 255
    34fc:	08 95       	ret

000034fe <__usmulhisi3>:
    34fe:	0e 94 ab 1a 	call	0x3556	; 0x3556 <__umulhisi3>

00003502 <__usmulhisi3_tail>:
    3502:	b7 ff       	sbrs	r27, 7
    3504:	08 95       	ret
    3506:	82 1b       	sub	r24, r18
    3508:	93 0b       	sbc	r25, r19
    350a:	08 95       	ret

0000350c <__muluhisi3>:
    350c:	0e 94 ab 1a 	call	0x3556	; 0x3556 <__umulhisi3>
    3510:	a5 9f       	mul	r26, r21
    3512:	90 0d       	add	r25, r0
    3514:	b4 9f       	mul	r27, r20
    3516:	90 0d       	add	r25, r0
    3518:	a4 9f       	mul	r26, r20
    351a:	80 0d       	add	r24, r0
    351c:	91 1d       	adc	r25, r1
    351e:	11 24       	eor	r1, r1
    3520:	08 95       	ret

00003522 <__udivmodhi4>:
    3522:	aa 1b       	sub	r26, r26
    3524:	bb 1b       	sub	r27, r27
    3526:	51 e1       	ldi	r21, 0x11	; 17
    3528:	07 c0       	rjmp	.+14     	; 0x3538 <__udivmodhi4_ep>

0000352a <__udivmodhi4_loop>:
    352a:	aa 1f       	adc	r26, r26
    352c:	bb 1f       	adc	r27, r27
    352e:	a6 17       	cp	r26, r22
    3530:	b7 07       	cpc	r27, r23
    3532:	10 f0       	brcs	.+4      	; 0x3538 <__udivmodhi4_ep>
    3534:	a6 1b       	sub	r26, r22
    3536:	b7 0b       	sbc	r27, r23

00003538 <__udivmodhi4_ep>:
    3538:	88 1f       	adc	r24, r24
    353a:	99 1f       	adc	r25, r25
    353c:	5a 95       	dec	r21
    353e:	a9 f7       	brne	.-22     	; 0x352a <__udivmodhi4_loop>
    3540:	80 95       	com	r24
    3542:	90 95       	com	r25
    3544:	bc 01       	movw	r22, r24
    3546:	cd 01       	movw	r24, r26
    3548:	08 95       	ret

0000354a <__tablejump2__>:
    354a:	ee 0f       	add	r30, r30
    354c:	ff 1f       	adc	r31, r31
    354e:	05 90       	lpm	r0, Z+
    3550:	f4 91       	lpm	r31, Z
    3552:	e0 2d       	mov	r30, r0
    3554:	09 94       	ijmp

00003556 <__umulhisi3>:
    3556:	a2 9f       	mul	r26, r18
    3558:	b0 01       	movw	r22, r0
    355a:	b3 9f       	mul	r27, r19
    355c:	c0 01       	movw	r24, r0
    355e:	a3 9f       	mul	r26, r19
    3560:	70 0d       	add	r23, r0
    3562:	81 1d       	adc	r24, r1
    3564:	11 24       	eor	r1, r1
    3566:	91 1d       	adc	r25, r1
    3568:	b2 9f       	mul	r27, r18
    356a:	70 0d       	add	r23, r0
    356c:	81 1d       	adc	r24, r1
    356e:	11 24       	eor	r1, r1
    3570:	91 1d       	adc	r25, r1
    3572:	08 95       	ret

00003574 <eeprom_read_byte>:
    3574:	f9 99       	sbic	0x1f, 1	; 31
    3576:	fe cf       	rjmp	.-4      	; 0x3574 <eeprom_read_byte>
    3578:	92 bd       	out	0x22, r25	; 34
    357a:	81 bd       	out	0x21, r24	; 33
    357c:	f8 9a       	sbi	0x1f, 0	; 31
    357e:	99 27       	eor	r25, r25
    3580:	80 b5       	in	r24, 0x20	; 32
    3582:	08 95       	ret

00003584 <_exit>:
    3584:	f8 94       	cli

00003586 <__stop_program>:
    3586:	ff cf       	rjmp	.-2      	; 0x3586 <__stop_program>
