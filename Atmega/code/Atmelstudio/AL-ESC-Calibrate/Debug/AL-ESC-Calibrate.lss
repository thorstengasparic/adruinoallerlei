
AL-ESC-Calibrate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000206  00800100  00003822  000038b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003822  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002a7  00800306  00800306  00003abc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003abc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003aec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000490  00000000  00000000  00003b30  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c1e3  00000000  00000000  00003fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021d8  00000000  00000000  000101a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003388  00000000  00000000  0001237b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d08  00000000  00000000  00015704  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002f54  00000000  00000000  0001640c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004423  00000000  00000000  00019360  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f0  00000000  00000000  0001d783  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 90 00 	jmp	0x120	; 0x120 <__ctors_end>
       4:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
       8:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
       c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__vector_3>
      10:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      14:	0c 94 30 01 	jmp	0x260	; 0x260 <__vector_5>
      18:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      1c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      20:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      24:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      28:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      2c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      30:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      34:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      38:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      3c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      40:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__vector_16>
      44:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      48:	0c 94 d9 12 	jmp	0x25b2	; 0x25b2 <__vector_18>
      4c:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__vector_19>
      50:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      54:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      58:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      5c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      60:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <__vector_24>
      64:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      68:	03 6e       	ori	r16, 0xE3	; 227
      6a:	db 36       	cpi	r29, 0x6B	; 107
      6c:	3d 9a       	sbi	0x07, 5	; 7
      6e:	99 99       	sbic	0x13, 1	; 19
      70:	99 3d       	cpi	r25, 0xD9	; 217
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	3e 00       	.word	0x003e	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	07 2c       	mov	r0, r7
      7e:	7a a5       	ldd	r23, Y+42	; 0x2a
      80:	ba 6c       	ori	r27, 0xCA	; 202
      82:	c5 90       	lpm	r12, Z+
      84:	da 3b       	cpi	r29, 0xBA	; 186
      86:	93 65       	ori	r25, 0x53	; 83
      88:	fc 8b       	std	Y+20, r31	; 0x14
      8a:	bc 53       	subi	r27, 0x3C	; 60
      8c:	f8 10       	cpse	r15, r8
      8e:	fd 3c       	cpi	r31, 0xCD	; 205
      90:	56 92       	lac	Z, r5
      92:	83 4d       	sbci	r24, 0xD3	; 211
      94:	bd 87       	std	Y+13, r27	; 0x0d
      96:	9d 3a       	cpi	r25, 0xAD	; 173
      98:	b6 3d       	cpi	r27, 0xD6	; 214
      9a:	cb c9       	rjmp	.-3178   	; 0xfffff432 <__eeprom_end+0xff7ef432>
      9c:	bf 5b       	subi	r27, 0xBF	; 191
      9e:	be 73       	andi	r27, 0x3E	; 62
      a0:	da 0f       	add	r29, r26
      a2:	c9 3f       	cpi	r28, 0xF9	; 249
      a4:	05 a8       	ldd	r0, Z+53	; 0x35
      a6:	4c cd       	rjmp	.-1384   	; 0xfffffb40 <__eeprom_end+0xff7efb40>
      a8:	b2 d4       	rcall	.+2404   	; 0xa0e <setup+0x50>
      aa:	4e b9       	out	0x0e, r20	; 14
      ac:	38 36       	cpi	r19, 0x68	; 104
      ae:	a9 02       	muls	r26, r25
      b0:	0c 50       	subi	r16, 0x0C	; 12
      b2:	b9 91       	ld	r27, Y+
      b4:	86 88       	ldd	r8, Z+22	; 0x16
      b6:	08 3c       	cpi	r16, 0xC8	; 200
      b8:	a6 aa       	std	Z+54, r10	; 0x36
      ba:	aa 2a       	or	r10, r26
      bc:	be 00       	.word	0x00be	; ????
      be:	00 00       	nop
      c0:	80 3f       	cpi	r24, 0xF0	; 240

000000c2 <__trampolines_end>:
      c2:	00 00       	nop
      c4:	00 08       	sbc	r0, r0
      c6:	00 02       	muls	r16, r16
      c8:	01 00       	.word	0x0001	; ????
      ca:	00 03       	mulsu	r16, r16
      cc:	04 07       	cpc	r16, r20
	...

000000d6 <digital_pin_to_bit_mask_PGM>:
      d6:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      e6:	04 08 10 20                                         ... 

000000ea <digital_pin_to_port_PGM>:
      ea:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      fa:	03 03 03 03                                         ....

000000fe <port_to_input_PGM>:
      fe:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000108 <port_to_output_PGM>:
     108:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000112 <port_to_mode_PGM>:
     112:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000011c <__ctors_start>:
     11c:	41 13       	cpse	r20, r17
     11e:	3a 17       	cp	r19, r26

00000120 <__ctors_end>:
     120:	11 24       	eor	r1, r1
     122:	1f be       	out	0x3f, r1	; 63
     124:	cf ef       	ldi	r28, 0xFF	; 255
     126:	d8 e0       	ldi	r29, 0x08	; 8
     128:	de bf       	out	0x3e, r29	; 62
     12a:	cd bf       	out	0x3d, r28	; 61

0000012c <__do_copy_data>:
     12c:	13 e0       	ldi	r17, 0x03	; 3
     12e:	a0 e0       	ldi	r26, 0x00	; 0
     130:	b1 e0       	ldi	r27, 0x01	; 1
     132:	e2 e2       	ldi	r30, 0x22	; 34
     134:	f8 e3       	ldi	r31, 0x38	; 56
     136:	02 c0       	rjmp	.+4      	; 0x13c <__do_copy_data+0x10>
     138:	05 90       	lpm	r0, Z+
     13a:	0d 92       	st	X+, r0
     13c:	a6 30       	cpi	r26, 0x06	; 6
     13e:	b1 07       	cpc	r27, r17
     140:	d9 f7       	brne	.-10     	; 0x138 <__do_copy_data+0xc>

00000142 <__do_clear_bss>:
     142:	25 e0       	ldi	r18, 0x05	; 5
     144:	a6 e0       	ldi	r26, 0x06	; 6
     146:	b3 e0       	ldi	r27, 0x03	; 3
     148:	01 c0       	rjmp	.+2      	; 0x14c <.do_clear_bss_start>

0000014a <.do_clear_bss_loop>:
     14a:	1d 92       	st	X+, r1

0000014c <.do_clear_bss_start>:
     14c:	ad 3a       	cpi	r26, 0xAD	; 173
     14e:	b2 07       	cpc	r27, r18
     150:	e1 f7       	brne	.-8      	; 0x14a <.do_clear_bss_loop>

00000152 <__do_global_ctors>:
     152:	10 e0       	ldi	r17, 0x00	; 0
     154:	c0 e9       	ldi	r28, 0x90	; 144
     156:	d0 e0       	ldi	r29, 0x00	; 0
     158:	04 c0       	rjmp	.+8      	; 0x162 <__do_global_ctors+0x10>
     15a:	21 97       	sbiw	r28, 0x01	; 1
     15c:	fe 01       	movw	r30, r28
     15e:	0e 94 01 1c 	call	0x3802	; 0x3802 <__tablejump2__>
     162:	ce 38       	cpi	r28, 0x8E	; 142
     164:	d1 07       	cpc	r29, r17
     166:	c9 f7       	brne	.-14     	; 0x15a <__do_global_ctors+0x8>
     168:	0e 94 6f 13 	call	0x26de	; 0x26de <main>
     16c:	0c 94 0f 1c 	jmp	0x381e	; 0x381e <_exit>

00000170 <__bad_interrupt>:
     170:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000174 <_Z24convert_receiver_channelh.part.1>:
	byte channel, reverse;                                                       //First we declare some local variables
	int low, center, high, actual;
	int difference;
	
	if (function > 4) {
		return (receiver_input[function] -3000) * -1;
     174:	1f 93       	push	r17
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	e8 2f       	mov	r30, r24
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	e4 5e       	subi	r30, 0xE4	; 228
     180:	fb 4f       	sbci	r31, 0xFB	; 251
     182:	17 89       	ldd	r17, Z+23	; 0x17
     184:	e1 2f       	mov	r30, r17
     186:	e7 70       	andi	r30, 0x07	; 7
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	ee 0f       	add	r30, r30
     18c:	ff 1f       	adc	r31, r31
     18e:	df 01       	movw	r26, r30
     190:	ae 50       	subi	r26, 0x0E	; 14
     192:	bc 4f       	sbci	r27, 0xFC	; 252
     194:	0d 90       	ld	r0, X+
     196:	bc 91       	ld	r27, X
     198:	a0 2d       	mov	r26, r0
     19a:	e4 5e       	subi	r30, 0xE4	; 228
     19c:	fb 4f       	sbci	r31, 0xFB	; 251
     19e:	37 85       	ldd	r19, Z+15	; 0x0f
     1a0:	86 85       	ldd	r24, Z+14	; 0x0e
     1a2:	af 01       	movw	r20, r30
     1a4:	41 50       	subi	r20, 0x01	; 1
     1a6:	51 09       	sbc	r21, r1
     1a8:	ea 01       	movw	r28, r20
     1aa:	48 81       	ld	r20, Y
     1ac:	50 e0       	ldi	r21, 0x00	; 0
     1ae:	54 2f       	mov	r21, r20
     1b0:	44 27       	eor	r20, r20
     1b2:	bf 01       	movw	r22, r30
     1b4:	62 50       	subi	r22, 0x02	; 2
     1b6:	71 09       	sbc	r23, r1
     1b8:	eb 01       	movw	r28, r22
     1ba:	98 81       	ld	r25, Y
     1bc:	49 2b       	or	r20, r25
     1be:	97 81       	ldd	r25, Z+7	; 0x07
     1c0:	26 81       	ldd	r18, Z+6	; 0x06
     1c2:	a4 17       	cp	r26, r20
     1c4:	b5 07       	cpc	r27, r21
     1c6:	dc f4       	brge	.+54     	; 0x1fe <_Z24convert_receiver_channelh.part.1+0x8a>
     1c8:	e8 2f       	mov	r30, r24
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	f3 2b       	or	r31, r19
     1ce:	ae 17       	cp	r26, r30
     1d0:	bf 07       	cpc	r27, r31
     1d2:	0c f4       	brge	.+2      	; 0x1d6 <_Z24convert_receiver_channelh.part.1+0x62>
     1d4:	df 01       	movw	r26, r30
     1d6:	ca 01       	movw	r24, r20
     1d8:	8a 1b       	sub	r24, r26
     1da:	9b 0b       	sbc	r25, r27
     1dc:	dc 01       	movw	r26, r24
     1de:	24 ef       	ldi	r18, 0xF4	; 244
     1e0:	31 e0       	ldi	r19, 0x01	; 1
     1e2:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <__usmulhisi3>
     1e6:	9a 01       	movw	r18, r20
     1e8:	2e 1b       	sub	r18, r30
     1ea:	3f 0b       	sbc	r19, r31
     1ec:	03 2e       	mov	r0, r19
     1ee:	00 0c       	add	r0, r0
     1f0:	44 0b       	sbc	r20, r20
     1f2:	55 0b       	sbc	r21, r21
     1f4:	0e 94 a5 1b 	call	0x374a	; 0x374a <__divmodsi4>
     1f8:	17 ff       	sbrs	r17, 7
     1fa:	1c c0       	rjmp	.+56     	; 0x234 <_Z24convert_receiver_channelh.part.1+0xc0>
     1fc:	20 c0       	rjmp	.+64     	; 0x23e <_Z24convert_receiver_channelh.part.1+0xca>
     1fe:	4a 17       	cp	r20, r26
     200:	5b 07       	cpc	r21, r27
     202:	0c f5       	brge	.+66     	; 0x246 <_Z24convert_receiver_channelh.part.1+0xd2>
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	f9 01       	movw	r30, r18
     208:	f9 2b       	or	r31, r25
     20a:	ea 17       	cp	r30, r26
     20c:	fb 07       	cpc	r31, r27
     20e:	0c f4       	brge	.+2      	; 0x212 <_Z24convert_receiver_channelh.part.1+0x9e>
     210:	df 01       	movw	r26, r30
     212:	a4 1b       	sub	r26, r20
     214:	b5 0b       	sbc	r27, r21
     216:	24 ef       	ldi	r18, 0xF4	; 244
     218:	31 e0       	ldi	r19, 0x01	; 1
     21a:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <__usmulhisi3>
     21e:	9f 01       	movw	r18, r30
     220:	24 1b       	sub	r18, r20
     222:	35 0b       	sbc	r19, r21
     224:	03 2e       	mov	r0, r19
     226:	00 0c       	add	r0, r0
     228:	44 0b       	sbc	r20, r20
     22a:	55 0b       	sbc	r21, r21
     22c:	0e 94 a5 1b 	call	0x374a	; 0x374a <__divmodsi4>
     230:	17 ff       	sbrs	r17, 7
     232:	05 c0       	rjmp	.+10     	; 0x23e <_Z24convert_receiver_channelh.part.1+0xca>
     234:	8c ed       	ldi	r24, 0xDC	; 220
     236:	95 e0       	ldi	r25, 0x05	; 5
     238:	82 1b       	sub	r24, r18
     23a:	93 0b       	sbc	r25, r19
     23c:	06 c0       	rjmp	.+12     	; 0x24a <_Z24convert_receiver_channelh.part.1+0xd6>
     23e:	c9 01       	movw	r24, r18
     240:	84 52       	subi	r24, 0x24	; 36
     242:	9a 4f       	sbci	r25, 0xFA	; 250
     244:	02 c0       	rjmp	.+4      	; 0x24a <_Z24convert_receiver_channelh.part.1+0xd6>
     246:	8c ed       	ldi	r24, 0xDC	; 220
     248:	95 e0       	ldi	r25, 0x05	; 5
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	1f 91       	pop	r17
     250:	08 95       	ret

00000252 <_ZN7TwoWire5writeEi>:
     252:	dc 01       	movw	r26, r24
     254:	ed 91       	ld	r30, X+
     256:	fc 91       	ld	r31, X
     258:	01 90       	ld	r0, Z+
     25a:	f0 81       	ld	r31, Z
     25c:	e0 2d       	mov	r30, r0
     25e:	09 94       	ijmp

00000260 <__vector_5>:
     260:	1f 92       	push	r1
     262:	0f 92       	push	r0
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	0f 92       	push	r0
     268:	11 24       	eor	r1, r1
     26a:	2f 93       	push	r18
     26c:	3f 93       	push	r19
     26e:	4f 93       	push	r20
     270:	5f 93       	push	r21
     272:	6f 93       	push	r22
     274:	7f 93       	push	r23
     276:	8f 93       	push	r24
     278:	9f 93       	push	r25
     27a:	af 93       	push	r26
     27c:	bf 93       	push	r27
     27e:	ef 93       	push	r30
     280:	ff 93       	push	r31
     282:	0e 94 89 17 	call	0x2f12	; 0x2f12 <micros>
     286:	60 93 4a 03 	sts	0x034A, r22	; 0x80034a <current_timeV2>
     28a:	70 93 4b 03 	sts	0x034B, r23	; 0x80034b <current_timeV2+0x1>
     28e:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <current_timeV2+0x2>
     292:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <current_timeV2+0x3>
     296:	20 91 41 04 	lds	r18, 0x0441	; 0x800441 <last_channel_6>
     29a:	4a 9b       	sbis	0x09, 2	; 9
     29c:	0e c0       	rjmp	.+28     	; 0x2ba <__vector_5+0x5a>
     29e:	21 11       	cpse	r18, r1
     2a0:	1b c0       	rjmp	.+54     	; 0x2d8 <__vector_5+0x78>
     2a2:	21 e0       	ldi	r18, 0x01	; 1
     2a4:	20 93 41 04 	sts	0x0441, r18	; 0x800441 <last_channel_6>
     2a8:	60 93 56 03 	sts	0x0356, r22	; 0x800356 <timer_6>
     2ac:	70 93 57 03 	sts	0x0357, r23	; 0x800357 <timer_6+0x1>
     2b0:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <timer_6+0x2>
     2b4:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <timer_6+0x3>
     2b8:	0f c0       	rjmp	.+30     	; 0x2d8 <__vector_5+0x78>
     2ba:	21 30       	cpi	r18, 0x01	; 1
     2bc:	69 f4       	brne	.+26     	; 0x2d8 <__vector_5+0x78>
     2be:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <last_channel_6>
     2c2:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <timer_6>
     2c6:	30 91 57 03 	lds	r19, 0x0357	; 0x800357 <timer_6+0x1>
     2ca:	ab 01       	movw	r20, r22
     2cc:	42 1b       	sub	r20, r18
     2ce:	53 0b       	sbc	r21, r19
     2d0:	50 93 ff 03 	sts	0x03FF, r21	; 0x8003ff <receiver_input+0xd>
     2d4:	40 93 fe 03 	sts	0x03FE, r20	; 0x8003fe <receiver_input+0xc>
     2d8:	20 91 40 04 	lds	r18, 0x0440	; 0x800440 <last_channel_7>
     2dc:	4b 9b       	sbis	0x09, 3	; 9
     2de:	0e c0       	rjmp	.+28     	; 0x2fc <__vector_5+0x9c>
     2e0:	21 11       	cpse	r18, r1
     2e2:	1a c0       	rjmp	.+52     	; 0x318 <__vector_5+0xb8>
     2e4:	21 e0       	ldi	r18, 0x01	; 1
     2e6:	20 93 40 04 	sts	0x0440, r18	; 0x800440 <last_channel_7>
     2ea:	60 93 52 03 	sts	0x0352, r22	; 0x800352 <timer_7>
     2ee:	70 93 53 03 	sts	0x0353, r23	; 0x800353 <timer_7+0x1>
     2f2:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <timer_7+0x2>
     2f6:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <timer_7+0x3>
     2fa:	0e c0       	rjmp	.+28     	; 0x318 <__vector_5+0xb8>
     2fc:	21 30       	cpi	r18, 0x01	; 1
     2fe:	61 f4       	brne	.+24     	; 0x318 <__vector_5+0xb8>
     300:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <last_channel_7>
     304:	20 91 52 03 	lds	r18, 0x0352	; 0x800352 <timer_7>
     308:	30 91 53 03 	lds	r19, 0x0353	; 0x800353 <timer_7+0x1>
     30c:	62 1b       	sub	r22, r18
     30e:	73 0b       	sbc	r23, r19
     310:	70 93 01 04 	sts	0x0401, r23	; 0x800401 <receiver_input+0xf>
     314:	60 93 00 04 	sts	0x0400, r22	; 0x800400 <receiver_input+0xe>
     318:	ff 91       	pop	r31
     31a:	ef 91       	pop	r30
     31c:	bf 91       	pop	r27
     31e:	af 91       	pop	r26
     320:	9f 91       	pop	r25
     322:	8f 91       	pop	r24
     324:	7f 91       	pop	r23
     326:	6f 91       	pop	r22
     328:	5f 91       	pop	r21
     32a:	4f 91       	pop	r20
     32c:	3f 91       	pop	r19
     32e:	2f 91       	pop	r18
     330:	0f 90       	pop	r0
     332:	0f be       	out	0x3f, r0	; 63
     334:	0f 90       	pop	r0
     336:	1f 90       	pop	r1
     338:	18 95       	reti

0000033a <__vector_3>:
     33a:	1f 92       	push	r1
     33c:	0f 92       	push	r0
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	0f 92       	push	r0
     342:	11 24       	eor	r1, r1
     344:	2f 93       	push	r18
     346:	3f 93       	push	r19
     348:	4f 93       	push	r20
     34a:	5f 93       	push	r21
     34c:	6f 93       	push	r22
     34e:	7f 93       	push	r23
     350:	8f 93       	push	r24
     352:	9f 93       	push	r25
     354:	af 93       	push	r26
     356:	bf 93       	push	r27
     358:	ef 93       	push	r30
     35a:	ff 93       	push	r31
     35c:	0e 94 89 17 	call	0x2f12	; 0x2f12 <micros>
     360:	60 93 4e 03 	sts	0x034E, r22	; 0x80034e <current_timeV1>
     364:	70 93 4f 03 	sts	0x034F, r23	; 0x80034f <current_timeV1+0x1>
     368:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <current_timeV1+0x2>
     36c:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <current_timeV1+0x3>
     370:	20 91 46 04 	lds	r18, 0x0446	; 0x800446 <last_channel_1>
     374:	18 9b       	sbis	0x03, 0	; 3
     376:	0e c0       	rjmp	.+28     	; 0x394 <__vector_3+0x5a>
     378:	21 11       	cpse	r18, r1
     37a:	1b c0       	rjmp	.+54     	; 0x3b2 <__vector_3+0x78>
     37c:	21 e0       	ldi	r18, 0x01	; 1
     37e:	20 93 46 04 	sts	0x0446, r18	; 0x800446 <last_channel_1>
     382:	60 93 6a 03 	sts	0x036A, r22	; 0x80036a <timer_1>
     386:	70 93 6b 03 	sts	0x036B, r23	; 0x80036b <timer_1+0x1>
     38a:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <timer_1+0x2>
     38e:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <timer_1+0x3>
     392:	0f c0       	rjmp	.+30     	; 0x3b2 <__vector_3+0x78>
     394:	21 30       	cpi	r18, 0x01	; 1
     396:	69 f4       	brne	.+26     	; 0x3b2 <__vector_3+0x78>
     398:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <last_channel_1>
     39c:	20 91 6a 03 	lds	r18, 0x036A	; 0x80036a <timer_1>
     3a0:	30 91 6b 03 	lds	r19, 0x036B	; 0x80036b <timer_1+0x1>
     3a4:	ab 01       	movw	r20, r22
     3a6:	42 1b       	sub	r20, r18
     3a8:	53 0b       	sbc	r21, r19
     3aa:	50 93 f5 03 	sts	0x03F5, r21	; 0x8003f5 <receiver_input+0x3>
     3ae:	40 93 f4 03 	sts	0x03F4, r20	; 0x8003f4 <receiver_input+0x2>
     3b2:	20 91 45 04 	lds	r18, 0x0445	; 0x800445 <last_channel_2>
     3b6:	19 9b       	sbis	0x03, 1	; 3
     3b8:	0e c0       	rjmp	.+28     	; 0x3d6 <__vector_3+0x9c>
     3ba:	21 11       	cpse	r18, r1
     3bc:	1b c0       	rjmp	.+54     	; 0x3f4 <__vector_3+0xba>
     3be:	21 e0       	ldi	r18, 0x01	; 1
     3c0:	20 93 45 04 	sts	0x0445, r18	; 0x800445 <last_channel_2>
     3c4:	60 93 66 03 	sts	0x0366, r22	; 0x800366 <timer_2>
     3c8:	70 93 67 03 	sts	0x0367, r23	; 0x800367 <timer_2+0x1>
     3cc:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <timer_2+0x2>
     3d0:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <timer_2+0x3>
     3d4:	0f c0       	rjmp	.+30     	; 0x3f4 <__vector_3+0xba>
     3d6:	21 30       	cpi	r18, 0x01	; 1
     3d8:	69 f4       	brne	.+26     	; 0x3f4 <__vector_3+0xba>
     3da:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <last_channel_2>
     3de:	20 91 66 03 	lds	r18, 0x0366	; 0x800366 <timer_2>
     3e2:	30 91 67 03 	lds	r19, 0x0367	; 0x800367 <timer_2+0x1>
     3e6:	ab 01       	movw	r20, r22
     3e8:	42 1b       	sub	r20, r18
     3ea:	53 0b       	sbc	r21, r19
     3ec:	50 93 f7 03 	sts	0x03F7, r21	; 0x8003f7 <receiver_input+0x5>
     3f0:	40 93 f6 03 	sts	0x03F6, r20	; 0x8003f6 <receiver_input+0x4>
     3f4:	20 91 44 04 	lds	r18, 0x0444	; 0x800444 <last_channel_3>
     3f8:	1a 9b       	sbis	0x03, 2	; 3
     3fa:	0e c0       	rjmp	.+28     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3fc:	21 11       	cpse	r18, r1
     3fe:	1b c0       	rjmp	.+54     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     400:	21 e0       	ldi	r18, 0x01	; 1
     402:	20 93 44 04 	sts	0x0444, r18	; 0x800444 <last_channel_3>
     406:	60 93 62 03 	sts	0x0362, r22	; 0x800362 <timer_3>
     40a:	70 93 63 03 	sts	0x0363, r23	; 0x800363 <timer_3+0x1>
     40e:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <timer_3+0x2>
     412:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <timer_3+0x3>
     416:	0f c0       	rjmp	.+30     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     418:	21 30       	cpi	r18, 0x01	; 1
     41a:	69 f4       	brne	.+26     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     41c:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <last_channel_3>
     420:	20 91 62 03 	lds	r18, 0x0362	; 0x800362 <timer_3>
     424:	30 91 63 03 	lds	r19, 0x0363	; 0x800363 <timer_3+0x1>
     428:	ab 01       	movw	r20, r22
     42a:	42 1b       	sub	r20, r18
     42c:	53 0b       	sbc	r21, r19
     42e:	50 93 f9 03 	sts	0x03F9, r21	; 0x8003f9 <receiver_input+0x7>
     432:	40 93 f8 03 	sts	0x03F8, r20	; 0x8003f8 <receiver_input+0x6>
     436:	20 91 43 04 	lds	r18, 0x0443	; 0x800443 <last_channel_4>
     43a:	1b 9b       	sbis	0x03, 3	; 3
     43c:	0e c0       	rjmp	.+28     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     43e:	21 11       	cpse	r18, r1
     440:	1b c0       	rjmp	.+54     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     442:	21 e0       	ldi	r18, 0x01	; 1
     444:	20 93 43 04 	sts	0x0443, r18	; 0x800443 <last_channel_4>
     448:	60 93 5e 03 	sts	0x035E, r22	; 0x80035e <timer_4>
     44c:	70 93 5f 03 	sts	0x035F, r23	; 0x80035f <timer_4+0x1>
     450:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <timer_4+0x2>
     454:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <timer_4+0x3>
     458:	0f c0       	rjmp	.+30     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     45a:	21 30       	cpi	r18, 0x01	; 1
     45c:	69 f4       	brne	.+26     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     45e:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <last_channel_4>
     462:	20 91 5e 03 	lds	r18, 0x035E	; 0x80035e <timer_4>
     466:	30 91 5f 03 	lds	r19, 0x035F	; 0x80035f <timer_4+0x1>
     46a:	ab 01       	movw	r20, r22
     46c:	42 1b       	sub	r20, r18
     46e:	53 0b       	sbc	r21, r19
     470:	50 93 fb 03 	sts	0x03FB, r21	; 0x8003fb <receiver_input+0x9>
     474:	40 93 fa 03 	sts	0x03FA, r20	; 0x8003fa <receiver_input+0x8>
     478:	20 91 42 04 	lds	r18, 0x0442	; 0x800442 <last_channel_5>
     47c:	1c 9b       	sbis	0x03, 4	; 3
     47e:	0e c0       	rjmp	.+28     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     480:	21 11       	cpse	r18, r1
     482:	1a c0       	rjmp	.+52     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     484:	21 e0       	ldi	r18, 0x01	; 1
     486:	20 93 42 04 	sts	0x0442, r18	; 0x800442 <last_channel_5>
     48a:	60 93 5a 03 	sts	0x035A, r22	; 0x80035a <timer_5>
     48e:	70 93 5b 03 	sts	0x035B, r23	; 0x80035b <timer_5+0x1>
     492:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <timer_5+0x2>
     496:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <timer_5+0x3>
     49a:	0e c0       	rjmp	.+28     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     49c:	21 30       	cpi	r18, 0x01	; 1
     49e:	61 f4       	brne	.+24     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     4a0:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <last_channel_5>
     4a4:	20 91 5a 03 	lds	r18, 0x035A	; 0x80035a <timer_5>
     4a8:	30 91 5b 03 	lds	r19, 0x035B	; 0x80035b <timer_5+0x1>
     4ac:	62 1b       	sub	r22, r18
     4ae:	73 0b       	sbc	r23, r19
     4b0:	70 93 fd 03 	sts	0x03FD, r23	; 0x8003fd <receiver_input+0xb>
     4b4:	60 93 fc 03 	sts	0x03FC, r22	; 0x8003fc <receiver_input+0xa>
     4b8:	ff 91       	pop	r31
     4ba:	ef 91       	pop	r30
     4bc:	bf 91       	pop	r27
     4be:	af 91       	pop	r26
     4c0:	9f 91       	pop	r25
     4c2:	8f 91       	pop	r24
     4c4:	7f 91       	pop	r23
     4c6:	6f 91       	pop	r22
     4c8:	5f 91       	pop	r21
     4ca:	4f 91       	pop	r20
     4cc:	3f 91       	pop	r19
     4ce:	2f 91       	pop	r18
     4d0:	0f 90       	pop	r0
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	0f 90       	pop	r0
     4d6:	1f 90       	pop	r1
     4d8:	18 95       	reti

000004da <_Z13print_signalsv>:
	}
	else return 1500;
}

void print_signals(){
	Serial.print("Start:");
     4da:	61 e0       	ldi	r22, 0x01	; 1
     4dc:	71 e0       	ldi	r23, 0x01	; 1
     4de:	87 e4       	ldi	r24, 0x47	; 71
     4e0:	94 e0       	ldi	r25, 0x04	; 4
     4e2:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
	Serial.print(start);
     4e6:	4a e0       	ldi	r20, 0x0A	; 10
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	60 91 1b 04 	lds	r22, 0x041B	; 0x80041b <start>
     4ee:	87 e4       	ldi	r24, 0x47	; 71
     4f0:	94 e0       	ldi	r25, 0x04	; 4
     4f2:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <_ZN5Print5printEhi>

	Serial.print("  Roll:");
     4f6:	68 e0       	ldi	r22, 0x08	; 8
     4f8:	71 e0       	ldi	r23, 0x01	; 1
     4fa:	87 e4       	ldi	r24, 0x47	; 71
     4fc:	94 e0       	ldi	r25, 0x04	; 4
     4fe:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
	if(receiver_input_channel_1 - 1480 < 0)Serial.print("<<<");
     502:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <receiver_input_channel_1>
     506:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <receiver_input_channel_1+0x1>
     50a:	88 3c       	cpi	r24, 0xC8	; 200
     50c:	95 40       	sbci	r25, 0x05	; 5
     50e:	1c f4       	brge	.+6      	; 0x516 <_Z13print_signalsv+0x3c>
     510:	60 e1       	ldi	r22, 0x10	; 16
     512:	71 e0       	ldi	r23, 0x01	; 1
     514:	0c c0       	rjmp	.+24     	; 0x52e <_Z13print_signalsv+0x54>
	else if(receiver_input_channel_1 - 1520 > 0)Serial.print(">>>");
     516:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <receiver_input_channel_1>
     51a:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <receiver_input_channel_1+0x1>
     51e:	81 3f       	cpi	r24, 0xF1	; 241
     520:	95 40       	sbci	r25, 0x05	; 5
     522:	1c f0       	brlt	.+6      	; 0x52a <_Z13print_signalsv+0x50>
     524:	64 e1       	ldi	r22, 0x14	; 20
     526:	71 e0       	ldi	r23, 0x01	; 1
     528:	02 c0       	rjmp	.+4      	; 0x52e <_Z13print_signalsv+0x54>
	else Serial.print("-+-");
     52a:	68 e1       	ldi	r22, 0x18	; 24
     52c:	71 e0       	ldi	r23, 0x01	; 1
     52e:	87 e4       	ldi	r24, 0x47	; 71
     530:	94 e0       	ldi	r25, 0x04	; 4
     532:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
	Serial.print(receiver_input_channel_1);
     536:	60 91 16 04 	lds	r22, 0x0416	; 0x800416 <receiver_input_channel_1>
     53a:	70 91 17 04 	lds	r23, 0x0417	; 0x800417 <receiver_input_channel_1+0x1>
     53e:	4a e0       	ldi	r20, 0x0A	; 10
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	87 e4       	ldi	r24, 0x47	; 71
     544:	94 e0       	ldi	r25, 0x04	; 4
     546:	0e 94 96 14 	call	0x292c	; 0x292c <_ZN5Print5printEii>

	Serial.print("  Pitch:");
     54a:	6c e1       	ldi	r22, 0x1C	; 28
     54c:	71 e0       	ldi	r23, 0x01	; 1
     54e:	87 e4       	ldi	r24, 0x47	; 71
     550:	94 e0       	ldi	r25, 0x04	; 4
     552:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
	if(receiver_input_channel_2 - 1480 < 0)Serial.print("^^^");
     556:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <receiver_input_channel_2>
     55a:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <receiver_input_channel_2+0x1>
     55e:	88 3c       	cpi	r24, 0xC8	; 200
     560:	95 40       	sbci	r25, 0x05	; 5
     562:	1c f4       	brge	.+6      	; 0x56a <_Z13print_signalsv+0x90>
     564:	65 e2       	ldi	r22, 0x25	; 37
     566:	71 e0       	ldi	r23, 0x01	; 1
     568:	0c c0       	rjmp	.+24     	; 0x582 <_Z13print_signalsv+0xa8>
	else if(receiver_input_channel_2 - 1520 > 0)Serial.print("vvv");
     56a:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <receiver_input_channel_2>
     56e:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <receiver_input_channel_2+0x1>
     572:	81 3f       	cpi	r24, 0xF1	; 241
     574:	95 40       	sbci	r25, 0x05	; 5
     576:	1c f0       	brlt	.+6      	; 0x57e <_Z13print_signalsv+0xa4>
     578:	69 e2       	ldi	r22, 0x29	; 41
     57a:	71 e0       	ldi	r23, 0x01	; 1
     57c:	02 c0       	rjmp	.+4      	; 0x582 <_Z13print_signalsv+0xa8>
	else Serial.print("-+-");
     57e:	68 e1       	ldi	r22, 0x18	; 24
     580:	71 e0       	ldi	r23, 0x01	; 1
     582:	87 e4       	ldi	r24, 0x47	; 71
     584:	94 e0       	ldi	r25, 0x04	; 4
     586:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
	Serial.print(receiver_input_channel_2);
     58a:	60 91 14 04 	lds	r22, 0x0414	; 0x800414 <receiver_input_channel_2>
     58e:	70 91 15 04 	lds	r23, 0x0415	; 0x800415 <receiver_input_channel_2+0x1>
     592:	4a e0       	ldi	r20, 0x0A	; 10
     594:	50 e0       	ldi	r21, 0x00	; 0
     596:	87 e4       	ldi	r24, 0x47	; 71
     598:	94 e0       	ldi	r25, 0x04	; 4
     59a:	0e 94 96 14 	call	0x292c	; 0x292c <_ZN5Print5printEii>

	Serial.print("  Throttle:");
     59e:	6d e2       	ldi	r22, 0x2D	; 45
     5a0:	71 e0       	ldi	r23, 0x01	; 1
     5a2:	87 e4       	ldi	r24, 0x47	; 71
     5a4:	94 e0       	ldi	r25, 0x04	; 4
     5a6:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
	if(receiver_input_channel_3 - 1480 < 0)Serial.print("vvv");
     5aa:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <receiver_input_channel_3>
     5ae:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <receiver_input_channel_3+0x1>
     5b2:	88 3c       	cpi	r24, 0xC8	; 200
     5b4:	95 40       	sbci	r25, 0x05	; 5
     5b6:	1c f4       	brge	.+6      	; 0x5be <_Z13print_signalsv+0xe4>
     5b8:	69 e2       	ldi	r22, 0x29	; 41
     5ba:	71 e0       	ldi	r23, 0x01	; 1
     5bc:	0c c0       	rjmp	.+24     	; 0x5d6 <_Z13print_signalsv+0xfc>
	else if(receiver_input_channel_3 - 1520 > 0)Serial.print("^^^");
     5be:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <receiver_input_channel_3>
     5c2:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <receiver_input_channel_3+0x1>
     5c6:	81 3f       	cpi	r24, 0xF1	; 241
     5c8:	95 40       	sbci	r25, 0x05	; 5
     5ca:	1c f0       	brlt	.+6      	; 0x5d2 <_Z13print_signalsv+0xf8>
     5cc:	65 e2       	ldi	r22, 0x25	; 37
     5ce:	71 e0       	ldi	r23, 0x01	; 1
     5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <_Z13print_signalsv+0xfc>
	else Serial.print("-+-");
     5d2:	68 e1       	ldi	r22, 0x18	; 24
     5d4:	71 e0       	ldi	r23, 0x01	; 1
     5d6:	87 e4       	ldi	r24, 0x47	; 71
     5d8:	94 e0       	ldi	r25, 0x04	; 4
     5da:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
	Serial.print(receiver_input_channel_3);
     5de:	60 91 12 04 	lds	r22, 0x0412	; 0x800412 <receiver_input_channel_3>
     5e2:	70 91 13 04 	lds	r23, 0x0413	; 0x800413 <receiver_input_channel_3+0x1>
     5e6:	4a e0       	ldi	r20, 0x0A	; 10
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	87 e4       	ldi	r24, 0x47	; 71
     5ec:	94 e0       	ldi	r25, 0x04	; 4
     5ee:	0e 94 96 14 	call	0x292c	; 0x292c <_ZN5Print5printEii>

	Serial.print("  Yaw:");
     5f2:	69 e3       	ldi	r22, 0x39	; 57
     5f4:	71 e0       	ldi	r23, 0x01	; 1
     5f6:	87 e4       	ldi	r24, 0x47	; 71
     5f8:	94 e0       	ldi	r25, 0x04	; 4
     5fa:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
	if(receiver_input_channel_4 - 1480 < 0)Serial.print("<<<");
     5fe:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <receiver_input_channel_4>
     602:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <receiver_input_channel_4+0x1>
     606:	88 3c       	cpi	r24, 0xC8	; 200
     608:	95 40       	sbci	r25, 0x05	; 5
     60a:	1c f4       	brge	.+6      	; 0x612 <_Z13print_signalsv+0x138>
     60c:	60 e1       	ldi	r22, 0x10	; 16
     60e:	71 e0       	ldi	r23, 0x01	; 1
     610:	0c c0       	rjmp	.+24     	; 0x62a <_Z13print_signalsv+0x150>
	else if(receiver_input_channel_4 - 1520 > 0)Serial.print(">>>");
     612:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <receiver_input_channel_4>
     616:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <receiver_input_channel_4+0x1>
     61a:	81 3f       	cpi	r24, 0xF1	; 241
     61c:	95 40       	sbci	r25, 0x05	; 5
     61e:	1c f0       	brlt	.+6      	; 0x626 <_Z13print_signalsv+0x14c>
     620:	64 e1       	ldi	r22, 0x14	; 20
     622:	71 e0       	ldi	r23, 0x01	; 1
     624:	02 c0       	rjmp	.+4      	; 0x62a <_Z13print_signalsv+0x150>
	else Serial.print("-+-");
     626:	68 e1       	ldi	r22, 0x18	; 24
     628:	71 e0       	ldi	r23, 0x01	; 1
     62a:	87 e4       	ldi	r24, 0x47	; 71
     62c:	94 e0       	ldi	r25, 0x04	; 4
     62e:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
	Serial.print(receiver_input_channel_4);
     632:	60 91 10 04 	lds	r22, 0x0410	; 0x800410 <receiver_input_channel_4>
     636:	70 91 11 04 	lds	r23, 0x0411	; 0x800411 <receiver_input_channel_4+0x1>
     63a:	4a e0       	ldi	r20, 0x0A	; 10
     63c:	50 e0       	ldi	r21, 0x00	; 0
     63e:	87 e4       	ldi	r24, 0x47	; 71
     640:	94 e0       	ldi	r25, 0x04	; 4
     642:	0e 94 96 14 	call	0x292c	; 0x292c <_ZN5Print5printEii>


	Serial.print("  CH5:");
     646:	60 e4       	ldi	r22, 0x40	; 64
     648:	71 e0       	ldi	r23, 0x01	; 1
     64a:	87 e4       	ldi	r24, 0x47	; 71
     64c:	94 e0       	ldi	r25, 0x04	; 4
     64e:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
	Serial.print(receiver_input_channel_5);
     652:	60 91 0e 04 	lds	r22, 0x040E	; 0x80040e <receiver_input_channel_5>
     656:	70 91 0f 04 	lds	r23, 0x040F	; 0x80040f <receiver_input_channel_5+0x1>
     65a:	4a e0       	ldi	r20, 0x0A	; 10
     65c:	50 e0       	ldi	r21, 0x00	; 0
     65e:	87 e4       	ldi	r24, 0x47	; 71
     660:	94 e0       	ldi	r25, 0x04	; 4
     662:	0e 94 96 14 	call	0x292c	; 0x292c <_ZN5Print5printEii>
	Serial.print("  CH6:");
     666:	67 e4       	ldi	r22, 0x47	; 71
     668:	71 e0       	ldi	r23, 0x01	; 1
     66a:	87 e4       	ldi	r24, 0x47	; 71
     66c:	94 e0       	ldi	r25, 0x04	; 4
     66e:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
	Serial.print(receiver_input_channel_6);
     672:	60 91 0c 04 	lds	r22, 0x040C	; 0x80040c <receiver_input_channel_6>
     676:	70 91 0d 04 	lds	r23, 0x040D	; 0x80040d <receiver_input_channel_6+0x1>
     67a:	4a e0       	ldi	r20, 0x0A	; 10
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	87 e4       	ldi	r24, 0x47	; 71
     680:	94 e0       	ldi	r25, 0x04	; 4
     682:	0e 94 96 14 	call	0x292c	; 0x292c <_ZN5Print5printEii>
	Serial.print("  CH7:");
     686:	6e e4       	ldi	r22, 0x4E	; 78
     688:	71 e0       	ldi	r23, 0x01	; 1
     68a:	87 e4       	ldi	r24, 0x47	; 71
     68c:	94 e0       	ldi	r25, 0x04	; 4
     68e:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
	Serial.print(receiver_input_channel_7);
     692:	60 91 0a 04 	lds	r22, 0x040A	; 0x80040a <receiver_input_channel_7>
     696:	70 91 0b 04 	lds	r23, 0x040B	; 0x80040b <receiver_input_channel_7+0x1>
     69a:	4a e0       	ldi	r20, 0x0A	; 10
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	87 e4       	ldi	r24, 0x47	; 71
     6a0:	94 e0       	ldi	r25, 0x04	; 4
     6a2:	0e 94 96 14 	call	0x292c	; 0x292c <_ZN5Print5printEii>
	
	Serial.print(" Volt:");
     6a6:	65 e5       	ldi	r22, 0x55	; 85
     6a8:	71 e0       	ldi	r23, 0x01	; 1
     6aa:	87 e4       	ldi	r24, 0x47	; 71
     6ac:	94 e0       	ldi	r25, 0x04	; 4
     6ae:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
	Serial.println(battery_voltage);
     6b2:	60 91 48 03 	lds	r22, 0x0348	; 0x800348 <battery_voltage>
     6b6:	70 91 49 03 	lds	r23, 0x0349	; 0x800349 <battery_voltage+0x1>
     6ba:	4a e0       	ldi	r20, 0x0A	; 10
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	87 e4       	ldi	r24, 0x47	; 71
     6c0:	94 e0       	ldi	r25, 0x04	; 4
     6c2:	0c 94 9e 14 	jmp	0x293c	; 0x293c <_ZN5Print7printlnEii>

000006c6 <_Z16esc_pulse_outputv>:
	
}

void esc_pulse_output(){
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
	zero_timer = micros();
     6ca:	0e 94 89 17 	call	0x2f12	; 0x2f12 <micros>
     6ce:	60 93 6e 03 	sts	0x036E, r22	; 0x80036e <zero_timer>
     6d2:	70 93 6f 03 	sts	0x036F, r23	; 0x80036f <zero_timer+0x1>
     6d6:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <zero_timer+0x2>
     6da:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <zero_timer+0x3>
	PORTD |= B11110000;                                            //Set port 4, 5, 6 and 7 high at once
     6de:	8b b1       	in	r24, 0x0b	; 11
     6e0:	80 6f       	ori	r24, 0xF0	; 240
     6e2:	8b b9       	out	0x0b, r24	; 11
	timer_channel_1 = esc_1 + zero_timer;                          //Calculate the time when digital port 4 is set low.
     6e4:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <zero_timer>
     6e8:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <zero_timer+0x1>
     6ec:	a0 91 70 03 	lds	r26, 0x0370	; 0x800370 <zero_timer+0x2>
     6f0:	b0 91 71 03 	lds	r27, 0x0371	; 0x800371 <zero_timer+0x3>
     6f4:	40 91 08 04 	lds	r20, 0x0408	; 0x800408 <esc_1>
     6f8:	50 91 09 04 	lds	r21, 0x0409	; 0x800409 <esc_1+0x1>
     6fc:	05 2e       	mov	r0, r21
     6fe:	00 0c       	add	r0, r0
     700:	66 0b       	sbc	r22, r22
     702:	77 0b       	sbc	r23, r23
     704:	48 0f       	add	r20, r24
     706:	59 1f       	adc	r21, r25
     708:	6a 1f       	adc	r22, r26
     70a:	7b 1f       	adc	r23, r27
     70c:	40 93 82 03 	sts	0x0382, r20	; 0x800382 <timer_channel_1>
     710:	50 93 83 03 	sts	0x0383, r21	; 0x800383 <timer_channel_1+0x1>
     714:	60 93 84 03 	sts	0x0384, r22	; 0x800384 <timer_channel_1+0x2>
     718:	70 93 85 03 	sts	0x0385, r23	; 0x800385 <timer_channel_1+0x3>
	timer_channel_2 = esc_2 + zero_timer;                          //Calculate the time when digital port 5 is set low.
     71c:	40 91 06 04 	lds	r20, 0x0406	; 0x800406 <esc_2>
     720:	50 91 07 04 	lds	r21, 0x0407	; 0x800407 <esc_2+0x1>
     724:	05 2e       	mov	r0, r21
     726:	00 0c       	add	r0, r0
     728:	66 0b       	sbc	r22, r22
     72a:	77 0b       	sbc	r23, r23
     72c:	48 0f       	add	r20, r24
     72e:	59 1f       	adc	r21, r25
     730:	6a 1f       	adc	r22, r26
     732:	7b 1f       	adc	r23, r27
     734:	40 93 7e 03 	sts	0x037E, r20	; 0x80037e <timer_channel_2>
     738:	50 93 7f 03 	sts	0x037F, r21	; 0x80037f <timer_channel_2+0x1>
     73c:	60 93 80 03 	sts	0x0380, r22	; 0x800380 <timer_channel_2+0x2>
     740:	70 93 81 03 	sts	0x0381, r23	; 0x800381 <timer_channel_2+0x3>
	timer_channel_3 = esc_3 + zero_timer;                          //Calculate the time when digital port 6 is set low.
     744:	40 91 04 04 	lds	r20, 0x0404	; 0x800404 <esc_3>
     748:	50 91 05 04 	lds	r21, 0x0405	; 0x800405 <esc_3+0x1>
     74c:	05 2e       	mov	r0, r21
     74e:	00 0c       	add	r0, r0
     750:	66 0b       	sbc	r22, r22
     752:	77 0b       	sbc	r23, r23
     754:	48 0f       	add	r20, r24
     756:	59 1f       	adc	r21, r25
     758:	6a 1f       	adc	r22, r26
     75a:	7b 1f       	adc	r23, r27
     75c:	40 93 7a 03 	sts	0x037A, r20	; 0x80037a <timer_channel_3>
     760:	50 93 7b 03 	sts	0x037B, r21	; 0x80037b <timer_channel_3+0x1>
     764:	60 93 7c 03 	sts	0x037C, r22	; 0x80037c <timer_channel_3+0x2>
     768:	70 93 7d 03 	sts	0x037D, r23	; 0x80037d <timer_channel_3+0x3>
	timer_channel_4 = esc_4 + zero_timer;                          //Calculate the time when digital port 7 is set low.
     76c:	40 91 02 04 	lds	r20, 0x0402	; 0x800402 <esc_4>
     770:	50 91 03 04 	lds	r21, 0x0403	; 0x800403 <esc_4+0x1>
     774:	05 2e       	mov	r0, r21
     776:	00 0c       	add	r0, r0
     778:	66 0b       	sbc	r22, r22
     77a:	77 0b       	sbc	r23, r23
     77c:	84 0f       	add	r24, r20
     77e:	95 1f       	adc	r25, r21
     780:	a6 1f       	adc	r26, r22
     782:	b7 1f       	adc	r27, r23
     784:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <timer_channel_4>
     788:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <timer_channel_4+0x1>
     78c:	a0 93 78 03 	sts	0x0378, r26	; 0x800378 <timer_channel_4+0x2>
     790:	b0 93 79 03 	sts	0x0379, r27	; 0x800379 <timer_channel_4+0x3>

	while(PORTD >= 16){                                            //Execute the loop until digital port 4 to 7 is low.
     794:	8b b1       	in	r24, 0x0b	; 11
     796:	80 31       	cpi	r24, 0x10	; 16
     798:	08 f4       	brcc	.+2      	; 0x79c <_Z16esc_pulse_outputv+0xd6>
     79a:	5c c0       	rjmp	.+184    	; 0x854 <_Z16esc_pulse_outputv+0x18e>
		esc_loop_timer = micros();                                   //Check the current time.
     79c:	0e 94 89 17 	call	0x2f12	; 0x2f12 <micros>
     7a0:	60 93 72 03 	sts	0x0372, r22	; 0x800372 <esc_loop_timer>
     7a4:	70 93 73 03 	sts	0x0373, r23	; 0x800373 <esc_loop_timer+0x1>
     7a8:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <esc_loop_timer+0x2>
     7ac:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <esc_loop_timer+0x3>
		if(timer_channel_1 <= esc_loop_timer)PORTD &= B11101111;     //When the delay time is expired, digital port 4 is set low.
     7b0:	00 91 82 03 	lds	r16, 0x0382	; 0x800382 <timer_channel_1>
     7b4:	10 91 83 03 	lds	r17, 0x0383	; 0x800383 <timer_channel_1+0x1>
     7b8:	20 91 84 03 	lds	r18, 0x0384	; 0x800384 <timer_channel_1+0x2>
     7bc:	30 91 85 03 	lds	r19, 0x0385	; 0x800385 <timer_channel_1+0x3>
     7c0:	60 17       	cp	r22, r16
     7c2:	71 07       	cpc	r23, r17
     7c4:	82 07       	cpc	r24, r18
     7c6:	93 07       	cpc	r25, r19
     7c8:	08 f0       	brcs	.+2      	; 0x7cc <_Z16esc_pulse_outputv+0x106>
     7ca:	5c 98       	cbi	0x0b, 4	; 11
		if(timer_channel_2 <= esc_loop_timer)PORTD &= B11011111;     //When the delay time is expired, digital port 5 is set low.
     7cc:	40 91 7e 03 	lds	r20, 0x037E	; 0x80037e <timer_channel_2>
     7d0:	50 91 7f 03 	lds	r21, 0x037F	; 0x80037f <timer_channel_2+0x1>
     7d4:	60 91 80 03 	lds	r22, 0x0380	; 0x800380 <timer_channel_2+0x2>
     7d8:	70 91 81 03 	lds	r23, 0x0381	; 0x800381 <timer_channel_2+0x3>
     7dc:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <esc_loop_timer>
     7e0:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <esc_loop_timer+0x1>
     7e4:	a0 91 74 03 	lds	r26, 0x0374	; 0x800374 <esc_loop_timer+0x2>
     7e8:	b0 91 75 03 	lds	r27, 0x0375	; 0x800375 <esc_loop_timer+0x3>
     7ec:	84 17       	cp	r24, r20
     7ee:	95 07       	cpc	r25, r21
     7f0:	a6 07       	cpc	r26, r22
     7f2:	b7 07       	cpc	r27, r23
     7f4:	08 f0       	brcs	.+2      	; 0x7f8 <_Z16esc_pulse_outputv+0x132>
     7f6:	5d 98       	cbi	0x0b, 5	; 11
		if(timer_channel_3 <= esc_loop_timer)PORTD &= B10111111;     //When the delay time is expired, digital port 6 is set low.
     7f8:	40 91 7a 03 	lds	r20, 0x037A	; 0x80037a <timer_channel_3>
     7fc:	50 91 7b 03 	lds	r21, 0x037B	; 0x80037b <timer_channel_3+0x1>
     800:	60 91 7c 03 	lds	r22, 0x037C	; 0x80037c <timer_channel_3+0x2>
     804:	70 91 7d 03 	lds	r23, 0x037D	; 0x80037d <timer_channel_3+0x3>
     808:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <esc_loop_timer>
     80c:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <esc_loop_timer+0x1>
     810:	a0 91 74 03 	lds	r26, 0x0374	; 0x800374 <esc_loop_timer+0x2>
     814:	b0 91 75 03 	lds	r27, 0x0375	; 0x800375 <esc_loop_timer+0x3>
     818:	84 17       	cp	r24, r20
     81a:	95 07       	cpc	r25, r21
     81c:	a6 07       	cpc	r26, r22
     81e:	b7 07       	cpc	r27, r23
     820:	08 f0       	brcs	.+2      	; 0x824 <_Z16esc_pulse_outputv+0x15e>
     822:	5e 98       	cbi	0x0b, 6	; 11
		if(timer_channel_4 <= esc_loop_timer)PORTD &= B01111111;     //When the delay time is expired, digital port 7 is set low.
     824:	40 91 76 03 	lds	r20, 0x0376	; 0x800376 <timer_channel_4>
     828:	50 91 77 03 	lds	r21, 0x0377	; 0x800377 <timer_channel_4+0x1>
     82c:	60 91 78 03 	lds	r22, 0x0378	; 0x800378 <timer_channel_4+0x2>
     830:	70 91 79 03 	lds	r23, 0x0379	; 0x800379 <timer_channel_4+0x3>
     834:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <esc_loop_timer>
     838:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <esc_loop_timer+0x1>
     83c:	a0 91 74 03 	lds	r26, 0x0374	; 0x800374 <esc_loop_timer+0x2>
     840:	b0 91 75 03 	lds	r27, 0x0375	; 0x800375 <esc_loop_timer+0x3>
     844:	84 17       	cp	r24, r20
     846:	95 07       	cpc	r25, r21
     848:	a6 07       	cpc	r26, r22
     84a:	b7 07       	cpc	r27, r23
     84c:	08 f4       	brcc	.+2      	; 0x850 <_Z16esc_pulse_outputv+0x18a>
     84e:	a2 cf       	rjmp	.-188    	; 0x794 <_Z16esc_pulse_outputv+0xce>
     850:	5f 98       	cbi	0x0b, 7	; 11
     852:	a0 cf       	rjmp	.-192    	; 0x794 <_Z16esc_pulse_outputv+0xce>
	}
}
     854:	1f 91       	pop	r17
     856:	0f 91       	pop	r16
     858:	08 95       	ret

0000085a <_Z18set_gyro_registersv>:

void set_gyro_registers(){
	//Setup the MPU-6050
	if(eeprom_data[31] == 1){
     85a:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <eeprom_data+0x1f>
     85e:	81 30       	cpi	r24, 0x01	; 1
     860:	09 f0       	breq	.+2      	; 0x864 <_Z18set_gyro_registersv+0xa>
     862:	ac c0       	rjmp	.+344    	; 0x9bc <__stack+0xbd>
		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search.
     864:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <gyro_address>
     868:	70 91 ef 03 	lds	r23, 0x03EF	; 0x8003ef <gyro_address+0x1>
     86c:	84 ee       	ldi	r24, 0xE4	; 228
     86e:	94 e0       	ldi	r25, 0x04	; 4
     870:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(PWR_MGMT_1);                                            //We want to write to the PWR_MGMT_1 register (6B hex)
     874:	6b e6       	ldi	r22, 0x6B	; 107
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	84 ee       	ldi	r24, 0xE4	; 228
     87a:	94 e0       	ldi	r25, 0x04	; 4
     87c:	0e 94 29 01 	call	0x252	; 0x252 <_ZN7TwoWire5writeEi>
		Wire.write(0x00);                                            //Set the register bits as 00000000 to activate the gyro
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	84 ee       	ldi	r24, 0xE4	; 228
     886:	94 e0       	ldi	r25, 0x04	; 4
     888:	0e 94 29 01 	call	0x252	; 0x252 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro.
     88c:	84 ee       	ldi	r24, 0xE4	; 228
     88e:	94 e0       	ldi	r25, 0x04	; 4
     890:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <_ZN7TwoWire15endTransmissionEv>

		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search.
     894:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <gyro_address>
     898:	70 91 ef 03 	lds	r23, 0x03EF	; 0x8003ef <gyro_address+0x1>
     89c:	84 ee       	ldi	r24, 0xE4	; 228
     89e:	94 e0       	ldi	r25, 0x04	; 4
     8a0:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(GYRO_CONFIG);                                            //We want to write to the GYRO_CONFIG register (1B hex)
     8a4:	6b e1       	ldi	r22, 0x1B	; 27
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	84 ee       	ldi	r24, 0xE4	; 228
     8aa:	94 e0       	ldi	r25, 0x04	; 4
     8ac:	0e 94 29 01 	call	0x252	; 0x252 <_ZN7TwoWire5writeEi>
		Wire.write(0x08);                                            //Set the register bits as 00001000 (500dps full scale)
     8b0:	68 e0       	ldi	r22, 0x08	; 8
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	84 ee       	ldi	r24, 0xE4	; 228
     8b6:	94 e0       	ldi	r25, 0x04	; 4
     8b8:	0e 94 29 01 	call	0x252	; 0x252 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro
     8bc:	84 ee       	ldi	r24, 0xE4	; 228
     8be:	94 e0       	ldi	r25, 0x04	; 4
     8c0:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <_ZN7TwoWire15endTransmissionEv>

		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search.
     8c4:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <gyro_address>
     8c8:	70 91 ef 03 	lds	r23, 0x03EF	; 0x8003ef <gyro_address+0x1>
     8cc:	84 ee       	ldi	r24, 0xE4	; 228
     8ce:	94 e0       	ldi	r25, 0x04	; 4
     8d0:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(ACCEL_CONFIG);                                            //We want to write to the ACCEL_CONFIG register (1A hex)
     8d4:	6c e1       	ldi	r22, 0x1C	; 28
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	84 ee       	ldi	r24, 0xE4	; 228
     8da:	94 e0       	ldi	r25, 0x04	; 4
     8dc:	0e 94 29 01 	call	0x252	; 0x252 <_ZN7TwoWire5writeEi>
		Wire.write(0x10);                                            //Set the register bits as 00010000 (+/- 8g full scale range)
     8e0:	60 e1       	ldi	r22, 0x10	; 16
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	84 ee       	ldi	r24, 0xE4	; 228
     8e6:	94 e0       	ldi	r25, 0x04	; 4
     8e8:	0e 94 29 01 	call	0x252	; 0x252 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro
     8ec:	84 ee       	ldi	r24, 0xE4	; 228
     8ee:	94 e0       	ldi	r25, 0x04	; 4
     8f0:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <_ZN7TwoWire15endTransmissionEv>

		//Let's perform a random register check to see if the values are written correct
		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search
     8f4:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <gyro_address>
     8f8:	70 91 ef 03 	lds	r23, 0x03EF	; 0x8003ef <gyro_address+0x1>
     8fc:	84 ee       	ldi	r24, 0xE4	; 228
     8fe:	94 e0       	ldi	r25, 0x04	; 4
     900:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(GYRO_CONFIG);                                            //Start reading @ register 0x1B
     904:	6b e1       	ldi	r22, 0x1B	; 27
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	84 ee       	ldi	r24, 0xE4	; 228
     90a:	94 e0       	ldi	r25, 0x04	; 4
     90c:	0e 94 29 01 	call	0x252	; 0x252 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission
     910:	84 ee       	ldi	r24, 0xE4	; 228
     912:	94 e0       	ldi	r25, 0x04	; 4
     914:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <_ZN7TwoWire15endTransmissionEv>
		Wire.requestFrom(gyro_address, 1);                           //Request 1 bytes from the gyro
     918:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <gyro_address>
     91c:	70 91 ef 03 	lds	r23, 0x03EF	; 0x8003ef <gyro_address+0x1>
     920:	41 e0       	ldi	r20, 0x01	; 1
     922:	50 e0       	ldi	r21, 0x00	; 0
     924:	84 ee       	ldi	r24, 0xE4	; 228
     926:	94 e0       	ldi	r25, 0x04	; 4
     928:	0e 94 32 17 	call	0x2e64	; 0x2e64 <_ZN7TwoWire11requestFromEii>
		while(Wire.available() < 1);                                 //Wait until the 6 bytes are received
     92c:	84 ee       	ldi	r24, 0xE4	; 228
     92e:	94 e0       	ldi	r25, 0x04	; 4
     930:	0e 94 01 16 	call	0x2c02	; 0x2c02 <_ZN7TwoWire9availableEv>
     934:	18 16       	cp	r1, r24
     936:	19 06       	cpc	r1, r25
     938:	cc f7       	brge	.-14     	; 0x92c <__stack+0x2d>
		if(Wire.read() != 0x08){                                     //Check if the value is 0x08
     93a:	84 ee       	ldi	r24, 0xE4	; 228
     93c:	94 e0       	ldi	r25, 0x04	; 4
     93e:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_ZN7TwoWire4readEv>
     942:	08 97       	sbiw	r24, 0x08	; 8
     944:	59 f0       	breq	.+22     	; 0x95c <__stack+0x5d>
			digitalWrite(LED_STATUS_PIN,HIGH);                                     //Turn on the warning led
     946:	61 e0       	ldi	r22, 0x01	; 1
     948:	8d e0       	ldi	r24, 0x0D	; 13
     94a:	0e 94 b2 18 	call	0x3164	; 0x3164 <digitalWrite>
			while(1)delay(10);                                         //Stay in this loop for ever
     94e:	6a e0       	ldi	r22, 0x0A	; 10
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <delay>
     95a:	f9 cf       	rjmp	.-14     	; 0x94e <__stack+0x4f>
		}

		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search
     95c:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <gyro_address>
     960:	70 91 ef 03 	lds	r23, 0x03EF	; 0x8003ef <gyro_address+0x1>
     964:	84 ee       	ldi	r24, 0xE4	; 228
     966:	94 e0       	ldi	r25, 0x04	; 4
     968:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(CONFIG);                                            //We want to write to the CONFIG register (1A hex)
     96c:	6a e1       	ldi	r22, 0x1A	; 26
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	84 ee       	ldi	r24, 0xE4	; 228
     972:	94 e0       	ldi	r25, 0x04	; 4
     974:	0e 94 29 01 	call	0x252	; 0x252 <_ZN7TwoWire5writeEi>
		Wire.write(0x03);                                            //Set the register bits as 00000011 (Set Digital Low Pass Filter to ~43Hz)
     978:	63 e0       	ldi	r22, 0x03	; 3
     97a:	70 e0       	ldi	r23, 0x00	; 0
     97c:	84 ee       	ldi	r24, 0xE4	; 228
     97e:	94 e0       	ldi	r25, 0x04	; 4
     980:	0e 94 29 01 	call	0x252	; 0x252 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro
     984:	84 ee       	ldi	r24, 0xE4	; 228
     986:	94 e0       	ldi	r25, 0x04	; 4
     988:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <_ZN7TwoWire15endTransmissionEv>

		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search
     98c:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <gyro_address>
     990:	70 91 ef 03 	lds	r23, 0x03EF	; 0x8003ef <gyro_address+0x1>
     994:	84 ee       	ldi	r24, 0xE4	; 228
     996:	94 e0       	ldi	r25, 0x04	; 4
     998:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(ACCEL_CONFIG2);                                         
     99c:	6d e1       	ldi	r22, 0x1D	; 29
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	84 ee       	ldi	r24, 0xE4	; 228
     9a2:	94 e0       	ldi	r25, 0x04	; 4
     9a4:	0e 94 29 01 	call	0x252	; 0x252 <_ZN7TwoWire5writeEi>
		Wire.write(0x03);                                            // Write new ACCEL_CONFIG2 41Hz  11.80ms delay
     9a8:	63 e0       	ldi	r22, 0x03	; 3
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	84 ee       	ldi	r24, 0xE4	; 228
     9ae:	94 e0       	ldi	r25, 0x04	; 4
     9b0:	0e 94 29 01 	call	0x252	; 0x252 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro
     9b4:	84 ee       	ldi	r24, 0xE4	; 228
     9b6:	94 e0       	ldi	r25, 0x04	; 4
     9b8:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <_ZN7TwoWire15endTransmissionEv>
     9bc:	08 95       	ret

000009be <setup>:
float angle_roll_acc, angle_pitch_acc, angle_pitch, angle_roll, angle_yaw;
int cal_int;
double gyro_axis_cal[4];
#define LED_STATUS_PIN 13
//Setup routine
void setup(){
     9be:	0f 93       	push	r16
     9c0:	1f 93       	push	r17
     9c2:	cf 93       	push	r28
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     9c4:	26 e0       	ldi	r18, 0x06	; 6
     9c6:	40 e0       	ldi	r20, 0x00	; 0
     9c8:	51 ee       	ldi	r21, 0xE1	; 225
     9ca:	60 e0       	ldi	r22, 0x00	; 0
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	87 e4       	ldi	r24, 0x47	; 71
     9d0:	94 e0       	ldi	r25, 0x04	; 4
     9d2:	0e 94 74 12 	call	0x24e8	; 0x24e8 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(57600);                                                                  //Start the serial port.
	Wire.begin();                       
     9d6:	84 ee       	ldi	r24, 0xE4	; 228
     9d8:	94 e0       	ldi	r25, 0x04	; 4
     9da:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <_ZN7TwoWire5beginEv>
		pinMode(LED_STATUS_PIN, OUTPUT);                                                  //Start the wire library as master
     9de:	61 e0       	ldi	r22, 0x01	; 1
     9e0:	8d e0       	ldi	r24, 0x0D	; 13
     9e2:	0e 94 76 18 	call	0x30ec	; 0x30ec <pinMode>
	TWBR = 12;                                                                            //Set the I2C clock speed to 400kHz.
     9e6:	8c e0       	ldi	r24, 0x0C	; 12
     9e8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	//Arduino Uno pins default to inputs, so they don't need to be explicitly declared as inputs.
	DDRD |= B11110000;                                                        //Configure digital poort 4, 5, 6 and 7 as output.
     9ec:	8a b1       	in	r24, 0x0a	; 10
     9ee:	80 6f       	ori	r24, 0xF0	; 240
     9f0:	8a b9       	out	0x0a, r24	; 10
	DDRB |= B00100000;                                                        //Configure digital poort  13 as output.
     9f2:	25 9a       	sbi	0x04, 5	; 4
	DDRB &= B11101111;                                                        //Configure digital poort  13 as output.
     9f4:	24 98       	cbi	0x04, 4	; 4

	PCICR |= (1 << PCIE0);			//Set PCIE0 to enable PCMSK0 scan.
     9f6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     9fa:	81 60       	ori	r24, 0x01	; 1
     9fc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCICR |= (1 << PCIE2);                                                    //Set PCIE2 to enable PCMSK2 scan.
     a00:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     a04:	84 60       	ori	r24, 0x04	; 4
     a06:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK0 |= (1 << PCINT0);                                                  //Set PCINT0 (digital input 8) to trigger an interrupt on state change.
     a0a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     a0e:	81 60       	ori	r24, 0x01	; 1
     a10:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK0 |= (1 << PCINT1);                                                  //Set PCINT1 (digital input 9)to trigger an interrupt on state change.
     a14:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     a18:	82 60       	ori	r24, 0x02	; 2
     a1a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK0 |= (1 << PCINT2);                                                  //Set PCINT2 (digital input 10)to trigger an interrupt on state change.
     a1e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     a22:	84 60       	ori	r24, 0x04	; 4
     a24:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK0 |= (1 << PCINT3);                                                  //Set PCINT3 (digital input 11)to trigger an interrupt on state change.
     a28:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     a2c:	88 60       	ori	r24, 0x08	; 8
     a2e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK0 |= (1 << PCINT4);                                                  //Set PCINT3 (digital input 12)to trigger an interrupt on state change.
     a32:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     a36:	80 61       	ori	r24, 0x10	; 16
     a38:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK2 |= (1 << PCINT18);
     a3c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
     a40:	84 60       	ori	r24, 0x04	; 4
     a42:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
	PCMSK2 |= (1 << PCINT19);
     a46:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
     a4a:	88 60       	ori	r24, 0x08	; 8
     a4c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>

	for(data = 0; data <= 35; data++)eeprom_data[data] = EEPROM.read(data);               //Read EEPROM for faster data access
     a50:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <data>
     a54:	c0 91 1a 04 	lds	r28, 0x041A	; 0x80041a <data>
     a58:	c4 32       	cpi	r28, 0x24	; 36
     a5a:	68 f4       	brcc	.+26     	; 0xa76 <setup+0xb8>
     a5c:	0c 2f       	mov	r16, r28
     a5e:	10 e0       	ldi	r17, 0x00	; 0

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     a60:	c8 01       	movw	r24, r16
     a62:	0e 94 07 1c 	call	0x380e	; 0x380e <eeprom_read_byte>
     a66:	f8 01       	movw	r30, r16
     a68:	e4 5e       	subi	r30, 0xE4	; 228
     a6a:	fb 4f       	sbci	r31, 0xFB	; 251
     a6c:	80 83       	st	Z, r24
     a6e:	cf 5f       	subi	r28, 0xFF	; 255
     a70:	c0 93 1a 04 	sts	0x041A, r28	; 0x80041a <data>
     a74:	ef cf       	rjmp	.-34     	; 0xa54 <setup+0x96>

	gyro_address = eeprom_data[32];                                                       //Store the gyro address in the variable.
     a76:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <eeprom_data+0x20>
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	90 93 ef 03 	sts	0x03EF, r25	; 0x8003ef <gyro_address+0x1>
     a80:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <gyro_address>

	set_gyro_registers();                                                                 //Set the specific gyro registers.
     a84:	0e 94 2d 04 	call	0x85a	; 0x85a <_Z18set_gyro_registersv>

	//Check the EEPROM signature to make sure that the setup program is executed.
	while(eeprom_data[33] != 'J' || eeprom_data[34] != 'M' || eeprom_data[35] != 'B'){
     a88:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <eeprom_data+0x21>
     a8c:	8a 34       	cpi	r24, 0x4A	; 74
     a8e:	41 f4       	brne	.+16     	; 0xaa0 <setup+0xe2>
     a90:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <eeprom_data+0x22>
     a94:	8d 34       	cpi	r24, 0x4D	; 77
     a96:	21 f4       	brne	.+8      	; 0xaa0 <setup+0xe2>
     a98:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <eeprom_data+0x23>
     a9c:	82 34       	cpi	r24, 0x42	; 66
     a9e:	89 f0       	breq	.+34     	; 0xac2 <setup+0x104>
		delay(100);                                                                         //Wait for 500ms.
     aa0:	64 e6       	ldi	r22, 0x64	; 100
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <delay>
		digitalWrite(LED_STATUS_PIN, !digitalRead(LED_STATUS_PIN));                                                 //Change the led status to indicate error.
     aac:	8d e0       	ldi	r24, 0x0D	; 13
     aae:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <digitalRead>
     ab2:	61 e0       	ldi	r22, 0x01	; 1
     ab4:	89 2b       	or	r24, r25
     ab6:	09 f0       	breq	.+2      	; 0xaba <setup+0xfc>
     ab8:	60 e0       	ldi	r22, 0x00	; 0
     aba:	8d e0       	ldi	r24, 0x0D	; 13
     abc:	0e 94 b2 18 	call	0x3164	; 0x3164 <digitalWrite>
	gyro_address = eeprom_data[32];                                                       //Store the gyro address in the variable.

	set_gyro_registers();                                                                 //Set the specific gyro registers.

	//Check the EEPROM signature to make sure that the setup program is executed.
	while(eeprom_data[33] != 'J' || eeprom_data[34] != 'M' || eeprom_data[35] != 'B'){
     ac0:	e3 cf       	rjmp	.-58     	; 0xa88 <setup+0xca>
		delay(100);                                                                         //Wait for 500ms.
		digitalWrite(LED_STATUS_PIN, !digitalRead(LED_STATUS_PIN));                                                 //Change the led status to indicate error.
	}
	//wait_for_receiver();                                                                  //Wait until the receiver is active.
	zero_timer = micros();                                                                //Set the zero_timer for the first loop.
     ac2:	0e 94 89 17 	call	0x2f12	; 0x2f12 <micros>
     ac6:	60 93 6e 03 	sts	0x036E, r22	; 0x80036e <zero_timer>
     aca:	70 93 6f 03 	sts	0x036F, r23	; 0x80036f <zero_timer+0x1>
     ace:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <zero_timer+0x2>
     ad2:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <zero_timer+0x3>
	battery_voltage = (analogRead(0) + 65) * 1.2317;
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	0e 94 30 18 	call	0x3060	; 0x3060 <analogRead>
     adc:	8f 5b       	subi	r24, 0xBF	; 191
     ade:	9f 4f       	sbci	r25, 0xFF	; 255
     ae0:	bc 01       	movw	r22, r24
     ae2:	99 0f       	add	r25, r25
     ae4:	88 0b       	sbc	r24, r24
     ae6:	99 0b       	sbc	r25, r25
     ae8:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
     aec:	28 e5       	ldi	r18, 0x58	; 88
     aee:	38 ea       	ldi	r19, 0xA8	; 168
     af0:	4d e9       	ldi	r20, 0x9D	; 157
     af2:	5f e3       	ldi	r21, 0x3F	; 63
     af4:	0e 94 8d 10 	call	0x211a	; 0x211a <__mulsf3>
     af8:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <__fixsfsi>
     afc:	70 93 49 03 	sts	0x0349, r23	; 0x800349 <battery_voltage+0x1>
     b00:	60 93 48 03 	sts	0x0348, r22	; 0x800348 <battery_voltage>
	while(Serial.available())data = Serial.read();                                        //Empty the serial buffer.
     b04:	87 e4       	ldi	r24, 0x47	; 71
     b06:	94 e0       	ldi	r25, 0x04	; 4
     b08:	0e 94 9c 11 	call	0x2338	; 0x2338 <_ZN14HardwareSerial9availableEv>
     b0c:	89 2b       	or	r24, r25
     b0e:	39 f0       	breq	.+14     	; 0xb1e <setup+0x160>
     b10:	87 e4       	ldi	r24, 0x47	; 71
     b12:	94 e0       	ldi	r25, 0x04	; 4
     b14:	0e 94 b6 11 	call	0x236c	; 0x236c <_ZN14HardwareSerial4readEv>
     b18:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <data>
     b1c:	f3 cf       	rjmp	.-26     	; 0xb04 <setup+0x146>
	data = 0;                                                                             //Set the data variable back to zero.
     b1e:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <data>
}
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	08 95       	ret

00000b2a <_Z8GyroReadv>:
		Wire.write(0x03);                                            // Write new ACCEL_CONFIG2 41Hz  11.80ms delay
		Wire.endTransmission();                                      //End the transmission with the gyro
	}
}

void GyroRead(){
     b2a:	bf 92       	push	r11
     b2c:	cf 92       	push	r12
     b2e:	df 92       	push	r13
     b30:	ef 92       	push	r14
     b32:	ff 92       	push	r15
     b34:	0f 93       	push	r16
     b36:	1f 93       	push	r17
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
	//Read the MPU-6050
	if(eeprom_data[31] == 1){
     b3c:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <eeprom_data+0x1f>
     b40:	81 30       	cpi	r24, 0x01	; 1
     b42:	09 f0       	breq	.+2      	; 0xb46 <_Z8GyroReadv+0x1c>
     b44:	a0 c0       	rjmp	.+320    	; 0xc86 <_Z8GyroReadv+0x15c>
		Wire.beginTransmission(gyro_address);                        //Start communication with the gyro.
     b46:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <gyro_address>
     b4a:	70 91 ef 03 	lds	r23, 0x03EF	; 0x8003ef <gyro_address+0x1>
     b4e:	84 ee       	ldi	r24, 0xE4	; 228
     b50:	94 e0       	ldi	r25, 0x04	; 4
     b52:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(ACCEL_XOUT_H);                                            //Start reading @ register 43h and auto increment with every read.
     b56:	6b e3       	ldi	r22, 0x3B	; 59
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	84 ee       	ldi	r24, 0xE4	; 228
     b5c:	94 e0       	ldi	r25, 0x04	; 4
     b5e:	0e 94 29 01 	call	0x252	; 0x252 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission.
     b62:	84 ee       	ldi	r24, 0xE4	; 228
     b64:	94 e0       	ldi	r25, 0x04	; 4
     b66:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <_ZN7TwoWire15endTransmissionEv>
		Wire.requestFrom(gyro_address,14);                           //Request 14 bytes from the gyro.
     b6a:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <gyro_address>
     b6e:	70 91 ef 03 	lds	r23, 0x03EF	; 0x8003ef <gyro_address+0x1>
     b72:	4e e0       	ldi	r20, 0x0E	; 14
     b74:	50 e0       	ldi	r21, 0x00	; 0
     b76:	84 ee       	ldi	r24, 0xE4	; 228
     b78:	94 e0       	ldi	r25, 0x04	; 4
     b7a:	0e 94 32 17 	call	0x2e64	; 0x2e64 <_ZN7TwoWire11requestFromEii>
		while(Wire.available() < 14);                                //Wait until the 14 bytes are received.
     b7e:	84 ee       	ldi	r24, 0xE4	; 228
     b80:	94 e0       	ldi	r25, 0x04	; 4
     b82:	0e 94 01 16 	call	0x2c02	; 0x2c02 <_ZN7TwoWire9availableEv>
     b86:	0e 97       	sbiw	r24, 0x0e	; 14
     b88:	d4 f3       	brlt	.-12     	; 0xb7e <_Z8GyroReadv+0x54>
		acc_axis[1] = Wire.read()<<8|Wire.read();                    //Add the low and high byte to the acc_x variable.
     b8a:	84 ee       	ldi	r24, 0xE4	; 228
     b8c:	94 e0       	ldi	r25, 0x04	; 4
     b8e:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_ZN7TwoWire4readEv>
     b92:	c8 2f       	mov	r28, r24
     b94:	84 ee       	ldi	r24, 0xE4	; 228
     b96:	94 e0       	ldi	r25, 0x04	; 4
     b98:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_ZN7TwoWire4readEv>
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	3c 2f       	mov	r19, r28
     ba2:	82 2b       	or	r24, r18
     ba4:	93 2b       	or	r25, r19
     ba6:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <acc_axis+0x3>
     baa:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <acc_axis+0x2>
		acc_axis[2] = Wire.read()<<8|Wire.read();                    //Add the low and high byte to the acc_y variable.
     bae:	84 ee       	ldi	r24, 0xE4	; 228
     bb0:	94 e0       	ldi	r25, 0x04	; 4
     bb2:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_ZN7TwoWire4readEv>
     bb6:	c8 2f       	mov	r28, r24
     bb8:	84 ee       	ldi	r24, 0xE4	; 228
     bba:	94 e0       	ldi	r25, 0x04	; 4
     bbc:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_ZN7TwoWire4readEv>
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	3c 2f       	mov	r19, r28
     bc6:	82 2b       	or	r24, r18
     bc8:	93 2b       	or	r25, r19
     bca:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <acc_axis+0x5>
     bce:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <acc_axis+0x4>
		acc_axis[3] = Wire.read()<<8|Wire.read();                    //Add the low and high byte to the acc_z variable.
     bd2:	84 ee       	ldi	r24, 0xE4	; 228
     bd4:	94 e0       	ldi	r25, 0x04	; 4
     bd6:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_ZN7TwoWire4readEv>
     bda:	c8 2f       	mov	r28, r24
     bdc:	84 ee       	ldi	r24, 0xE4	; 228
     bde:	94 e0       	ldi	r25, 0x04	; 4
     be0:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_ZN7TwoWire4readEv>
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	3c 2f       	mov	r19, r28
     bea:	82 2b       	or	r24, r18
     bec:	93 2b       	or	r25, r19
     bee:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <acc_axis+0x7>
     bf2:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <acc_axis+0x6>
		temperature = Wire.read()<<8|Wire.read();                    //Add the low and high byte to the temperature variable.
     bf6:	84 ee       	ldi	r24, 0xE4	; 228
     bf8:	94 e0       	ldi	r25, 0x04	; 4
     bfa:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_ZN7TwoWire4readEv>
     bfe:	c8 2f       	mov	r28, r24
     c00:	84 ee       	ldi	r24, 0xE4	; 228
     c02:	94 e0       	ldi	r25, 0x04	; 4
     c04:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_ZN7TwoWire4readEv>
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	3c 2f       	mov	r19, r28
     c0e:	82 2b       	or	r24, r18
     c10:	93 2b       	or	r25, r19
     c12:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <temperature+0x1>
     c16:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <temperature>
		gyro_axis[1] = Wire.read()<<8|Wire.read();                   //Read high and low part of the angular data.
     c1a:	84 ee       	ldi	r24, 0xE4	; 228
     c1c:	94 e0       	ldi	r25, 0x04	; 4
     c1e:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_ZN7TwoWire4readEv>
     c22:	c8 2f       	mov	r28, r24
     c24:	84 ee       	ldi	r24, 0xE4	; 228
     c26:	94 e0       	ldi	r25, 0x04	; 4
     c28:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_ZN7TwoWire4readEv>
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	3c 2f       	mov	r19, r28
     c32:	82 2b       	or	r24, r18
     c34:	93 2b       	or	r25, r19
     c36:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <gyro_axis+0x3>
     c3a:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <gyro_axis+0x2>
		gyro_axis[2] = Wire.read()<<8|Wire.read();                   //Read high and low part of the angular data.
     c3e:	84 ee       	ldi	r24, 0xE4	; 228
     c40:	94 e0       	ldi	r25, 0x04	; 4
     c42:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_ZN7TwoWire4readEv>
     c46:	c8 2f       	mov	r28, r24
     c48:	84 ee       	ldi	r24, 0xE4	; 228
     c4a:	94 e0       	ldi	r25, 0x04	; 4
     c4c:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_ZN7TwoWire4readEv>
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	3c 2f       	mov	r19, r28
     c56:	82 2b       	or	r24, r18
     c58:	93 2b       	or	r25, r19
     c5a:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <gyro_axis+0x5>
     c5e:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <gyro_axis+0x4>
		gyro_axis[3] = Wire.read()<<8|Wire.read();                   //Read high and low part of the angular data.
     c62:	84 ee       	ldi	r24, 0xE4	; 228
     c64:	94 e0       	ldi	r25, 0x04	; 4
     c66:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_ZN7TwoWire4readEv>
     c6a:	c8 2f       	mov	r28, r24
     c6c:	84 ee       	ldi	r24, 0xE4	; 228
     c6e:	94 e0       	ldi	r25, 0x04	; 4
     c70:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_ZN7TwoWire4readEv>
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	3c 2f       	mov	r19, r28
     c7a:	82 2b       	or	r24, r18
     c7c:	93 2b       	or	r25, r19
     c7e:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <gyro_axis+0x7>
     c82:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <gyro_axis+0x6>
	}

	if(cal_int == 2000){
     c86:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <cal_int>
     c8a:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <cal_int+0x1>
     c8e:	80 3d       	cpi	r24, 0xD0	; 208
     c90:	97 40       	sbci	r25, 0x07	; 7
     c92:	09 f0       	breq	.+2      	; 0xc96 <_Z8GyroReadv+0x16c>
     c94:	4e c0       	rjmp	.+156    	; 0xd32 <_Z8GyroReadv+0x208>
		gyro_axis[1] -= gyro_axis_cal[1];                            //Only compensate after the calibration.
     c96:	60 91 3a 03 	lds	r22, 0x033A	; 0x80033a <gyro_axis+0x2>
     c9a:	70 91 3b 03 	lds	r23, 0x033B	; 0x80033b <gyro_axis+0x3>
     c9e:	07 2e       	mov	r0, r23
     ca0:	00 0c       	add	r0, r0
     ca2:	88 0b       	sbc	r24, r24
     ca4:	99 0b       	sbc	r25, r25
     ca6:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
     caa:	20 91 0a 03 	lds	r18, 0x030A	; 0x80030a <__data_end+0x4>
     cae:	30 91 0b 03 	lds	r19, 0x030B	; 0x80030b <__data_end+0x5>
     cb2:	40 91 0c 03 	lds	r20, 0x030C	; 0x80030c <__data_end+0x6>
     cb6:	50 91 0d 03 	lds	r21, 0x030D	; 0x80030d <__data_end+0x7>
     cba:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
     cbe:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <__fixsfsi>
     cc2:	70 93 3b 03 	sts	0x033B, r23	; 0x80033b <gyro_axis+0x3>
     cc6:	60 93 3a 03 	sts	0x033A, r22	; 0x80033a <gyro_axis+0x2>
		gyro_axis[2] -= gyro_axis_cal[2];                            //Only compensate after the calibration.
     cca:	60 91 3c 03 	lds	r22, 0x033C	; 0x80033c <gyro_axis+0x4>
     cce:	70 91 3d 03 	lds	r23, 0x033D	; 0x80033d <gyro_axis+0x5>
     cd2:	07 2e       	mov	r0, r23
     cd4:	00 0c       	add	r0, r0
     cd6:	88 0b       	sbc	r24, r24
     cd8:	99 0b       	sbc	r25, r25
     cda:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
     cde:	20 91 0e 03 	lds	r18, 0x030E	; 0x80030e <__data_end+0x8>
     ce2:	30 91 0f 03 	lds	r19, 0x030F	; 0x80030f <__data_end+0x9>
     ce6:	40 91 10 03 	lds	r20, 0x0310	; 0x800310 <__data_end+0xa>
     cea:	50 91 11 03 	lds	r21, 0x0311	; 0x800311 <__data_end+0xb>
     cee:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
     cf2:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <__fixsfsi>
     cf6:	70 93 3d 03 	sts	0x033D, r23	; 0x80033d <gyro_axis+0x5>
     cfa:	60 93 3c 03 	sts	0x033C, r22	; 0x80033c <gyro_axis+0x4>
		gyro_axis[3] -= gyro_axis_cal[3];                            //Only compensate after the calibration.
     cfe:	60 91 3e 03 	lds	r22, 0x033E	; 0x80033e <gyro_axis+0x6>
     d02:	70 91 3f 03 	lds	r23, 0x033F	; 0x80033f <gyro_axis+0x7>
     d06:	07 2e       	mov	r0, r23
     d08:	00 0c       	add	r0, r0
     d0a:	88 0b       	sbc	r24, r24
     d0c:	99 0b       	sbc	r25, r25
     d0e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
     d12:	20 91 12 03 	lds	r18, 0x0312	; 0x800312 <__data_end+0xc>
     d16:	30 91 13 03 	lds	r19, 0x0313	; 0x800313 <__data_end+0xd>
     d1a:	40 91 14 03 	lds	r20, 0x0314	; 0x800314 <__data_end+0xe>
     d1e:	50 91 15 03 	lds	r21, 0x0315	; 0x800315 <__data_end+0xf>
     d22:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
     d26:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <__fixsfsi>
     d2a:	70 93 3f 03 	sts	0x033F, r23	; 0x80033f <gyro_axis+0x7>
     d2e:	60 93 3e 03 	sts	0x033E, r22	; 0x80033e <gyro_axis+0x6>
	}
	gyro_roll = gyro_axis[eeprom_data[28] & 0b00000011];           //Set gyro_roll to the correct axis that was stored in the EEPROM.
     d32:	c0 90 38 04 	lds	r12, 0x0438	; 0x800438 <eeprom_data+0x1c>
     d36:	0c 2d       	mov	r16, r12
     d38:	03 70       	andi	r16, 0x03	; 3
     d3a:	10 e0       	ldi	r17, 0x00	; 0
     d3c:	00 0f       	add	r16, r16
     d3e:	11 1f       	adc	r17, r17
     d40:	f8 01       	movw	r30, r16
     d42:	e8 5c       	subi	r30, 0xC8	; 200
     d44:	fc 4f       	sbci	r31, 0xFC	; 252
     d46:	60 81       	ld	r22, Z
     d48:	71 81       	ldd	r23, Z+1	; 0x01
     d4a:	07 2e       	mov	r0, r23
     d4c:	00 0c       	add	r0, r0
     d4e:	88 0b       	sbc	r24, r24
     d50:	99 0b       	sbc	r25, r25
     d52:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
	if(eeprom_data[28] & 0b10000000)gyro_roll *= -1;               //Invert gyro_roll if the MSB of EEPROM bit 28 is set.
     d56:	c7 fc       	sbrc	r12, 7
     d58:	09 c0       	rjmp	.+18     	; 0xd6c <_Z8GyroReadv+0x242>
	if(cal_int == 2000){
		gyro_axis[1] -= gyro_axis_cal[1];                            //Only compensate after the calibration.
		gyro_axis[2] -= gyro_axis_cal[2];                            //Only compensate after the calibration.
		gyro_axis[3] -= gyro_axis_cal[3];                            //Only compensate after the calibration.
	}
	gyro_roll = gyro_axis[eeprom_data[28] & 0b00000011];           //Set gyro_roll to the correct axis that was stored in the EEPROM.
     d5a:	60 93 30 03 	sts	0x0330, r22	; 0x800330 <gyro_roll>
     d5e:	70 93 31 03 	sts	0x0331, r23	; 0x800331 <gyro_roll+0x1>
     d62:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <gyro_roll+0x2>
     d66:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <gyro_roll+0x3>
     d6a:	0b c0       	rjmp	.+22     	; 0xd82 <_Z8GyroReadv+0x258>
	if(eeprom_data[28] & 0b10000000)gyro_roll *= -1;               //Invert gyro_roll if the MSB of EEPROM bit 28 is set.
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	b0 58       	subi	r27, 0x80	; 128
     d72:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <gyro_roll>
     d76:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <gyro_roll+0x1>
     d7a:	a0 93 32 03 	sts	0x0332, r26	; 0x800332 <gyro_roll+0x2>
     d7e:	b0 93 33 03 	sts	0x0333, r27	; 0x800333 <gyro_roll+0x3>
	gyro_pitch = gyro_axis[eeprom_data[29] & 0b00000011];          //Set gyro_pitch to the correct axis that was stored in the EEPROM.
     d82:	b0 90 39 04 	lds	r11, 0x0439	; 0x800439 <eeprom_data+0x1d>
     d86:	8b 2d       	mov	r24, r11
     d88:	83 70       	andi	r24, 0x03	; 3
     d8a:	e8 2e       	mov	r14, r24
     d8c:	f1 2c       	mov	r15, r1
     d8e:	ee 0c       	add	r14, r14
     d90:	ff 1c       	adc	r15, r15
     d92:	f7 01       	movw	r30, r14
     d94:	e8 5c       	subi	r30, 0xC8	; 200
     d96:	fc 4f       	sbci	r31, 0xFC	; 252
     d98:	60 81       	ld	r22, Z
     d9a:	71 81       	ldd	r23, Z+1	; 0x01
     d9c:	07 2e       	mov	r0, r23
     d9e:	00 0c       	add	r0, r0
     da0:	88 0b       	sbc	r24, r24
     da2:	99 0b       	sbc	r25, r25
     da4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
	if(eeprom_data[29] & 0b10000000)gyro_pitch *= -1;              //Invert gyro_pitch if the MSB of EEPROM bit 29 is set.
     da8:	b7 fc       	sbrc	r11, 7
     daa:	09 c0       	rjmp	.+18     	; 0xdbe <_Z8GyroReadv+0x294>
		gyro_axis[2] -= gyro_axis_cal[2];                            //Only compensate after the calibration.
		gyro_axis[3] -= gyro_axis_cal[3];                            //Only compensate after the calibration.
	}
	gyro_roll = gyro_axis[eeprom_data[28] & 0b00000011];           //Set gyro_roll to the correct axis that was stored in the EEPROM.
	if(eeprom_data[28] & 0b10000000)gyro_roll *= -1;               //Invert gyro_roll if the MSB of EEPROM bit 28 is set.
	gyro_pitch = gyro_axis[eeprom_data[29] & 0b00000011];          //Set gyro_pitch to the correct axis that was stored in the EEPROM.
     dac:	60 93 34 03 	sts	0x0334, r22	; 0x800334 <gyro_pitch>
     db0:	70 93 35 03 	sts	0x0335, r23	; 0x800335 <gyro_pitch+0x1>
     db4:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <gyro_pitch+0x2>
     db8:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <gyro_pitch+0x3>
     dbc:	0b c0       	rjmp	.+22     	; 0xdd4 <_Z8GyroReadv+0x2aa>
	if(eeprom_data[29] & 0b10000000)gyro_pitch *= -1;              //Invert gyro_pitch if the MSB of EEPROM bit 29 is set.
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	b0 58       	subi	r27, 0x80	; 128
     dc4:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <gyro_pitch>
     dc8:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <gyro_pitch+0x1>
     dcc:	a0 93 36 03 	sts	0x0336, r26	; 0x800336 <gyro_pitch+0x2>
     dd0:	b0 93 37 03 	sts	0x0337, r27	; 0x800337 <gyro_pitch+0x3>
	gyro_yaw = gyro_axis[eeprom_data[30] & 0b00000011];            //Set gyro_yaw to the correct axis that was stored in the EEPROM.
     dd4:	d0 90 3a 04 	lds	r13, 0x043A	; 0x80043a <eeprom_data+0x1e>
     dd8:	cd 2d       	mov	r28, r13
     dda:	c3 70       	andi	r28, 0x03	; 3
     ddc:	d0 e0       	ldi	r29, 0x00	; 0
     dde:	cc 0f       	add	r28, r28
     de0:	dd 1f       	adc	r29, r29
     de2:	fe 01       	movw	r30, r28
     de4:	e8 5c       	subi	r30, 0xC8	; 200
     de6:	fc 4f       	sbci	r31, 0xFC	; 252
     de8:	60 81       	ld	r22, Z
     dea:	71 81       	ldd	r23, Z+1	; 0x01
     dec:	07 2e       	mov	r0, r23
     dee:	00 0c       	add	r0, r0
     df0:	88 0b       	sbc	r24, r24
     df2:	99 0b       	sbc	r25, r25
     df4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
	if(eeprom_data[30] & 0b10000000)gyro_yaw *= -1;                //Invert gyro_yaw if the MSB of EEPROM bit 30 is set.
     df8:	d7 fc       	sbrc	r13, 7
     dfa:	09 c0       	rjmp	.+18     	; 0xe0e <_Z8GyroReadv+0x2e4>
	}
	gyro_roll = gyro_axis[eeprom_data[28] & 0b00000011];           //Set gyro_roll to the correct axis that was stored in the EEPROM.
	if(eeprom_data[28] & 0b10000000)gyro_roll *= -1;               //Invert gyro_roll if the MSB of EEPROM bit 28 is set.
	gyro_pitch = gyro_axis[eeprom_data[29] & 0b00000011];          //Set gyro_pitch to the correct axis that was stored in the EEPROM.
	if(eeprom_data[29] & 0b10000000)gyro_pitch *= -1;              //Invert gyro_pitch if the MSB of EEPROM bit 29 is set.
	gyro_yaw = gyro_axis[eeprom_data[30] & 0b00000011];            //Set gyro_yaw to the correct axis that was stored in the EEPROM.
     dfc:	60 93 2c 03 	sts	0x032C, r22	; 0x80032c <gyro_yaw>
     e00:	70 93 2d 03 	sts	0x032D, r23	; 0x80032d <gyro_yaw+0x1>
     e04:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <gyro_yaw+0x2>
     e08:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <gyro_yaw+0x3>
     e0c:	0b c0       	rjmp	.+22     	; 0xe24 <_Z8GyroReadv+0x2fa>
	if(eeprom_data[30] & 0b10000000)gyro_yaw *= -1;                //Invert gyro_yaw if the MSB of EEPROM bit 30 is set.
     e0e:	dc 01       	movw	r26, r24
     e10:	cb 01       	movw	r24, r22
     e12:	b0 58       	subi	r27, 0x80	; 128
     e14:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <gyro_yaw>
     e18:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <gyro_yaw+0x1>
     e1c:	a0 93 2e 03 	sts	0x032E, r26	; 0x80032e <gyro_yaw+0x2>
     e20:	b0 93 2f 03 	sts	0x032F, r27	; 0x80032f <gyro_yaw+0x3>

	acc_x = acc_axis[eeprom_data[29] & 0b00000011];                //Set acc_x to the correct axis that was stored in the EEPROM.
     e24:	f7 01       	movw	r30, r14
     e26:	e0 5c       	subi	r30, 0xC0	; 192
     e28:	fc 4f       	sbci	r31, 0xFC	; 252
     e2a:	80 81       	ld	r24, Z
     e2c:	91 81       	ldd	r25, Z+1	; 0x01
     e2e:	09 2e       	mov	r0, r25
     e30:	00 0c       	add	r0, r0
     e32:	aa 0b       	sbc	r26, r26
     e34:	bb 0b       	sbc	r27, r27
	if(eeprom_data[29] & 0b10000000)acc_x *= -1;                   //Invert acc_x if the MSB of EEPROM bit 29 is set.
     e36:	b7 fe       	sbrs	r11, 7
     e38:	07 c0       	rjmp	.+14     	; 0xe48 <_Z8GyroReadv+0x31e>
     e3a:	b0 95       	com	r27
     e3c:	a0 95       	com	r26
     e3e:	90 95       	com	r25
     e40:	81 95       	neg	r24
     e42:	9f 4f       	sbci	r25, 0xFF	; 255
     e44:	af 4f       	sbci	r26, 0xFF	; 255
     e46:	bf 4f       	sbci	r27, 0xFF	; 255
     e48:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <acc_x>
     e4c:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <acc_x+0x1>
     e50:	a0 93 e8 03 	sts	0x03E8, r26	; 0x8003e8 <acc_x+0x2>
     e54:	b0 93 e9 03 	sts	0x03E9, r27	; 0x8003e9 <acc_x+0x3>
	acc_y = acc_axis[eeprom_data[28] & 0b00000011];                //Set acc_y to the correct axis that was stored in the EEPROM.
     e58:	f8 01       	movw	r30, r16
     e5a:	e0 5c       	subi	r30, 0xC0	; 192
     e5c:	fc 4f       	sbci	r31, 0xFC	; 252
     e5e:	80 81       	ld	r24, Z
     e60:	91 81       	ldd	r25, Z+1	; 0x01
     e62:	09 2e       	mov	r0, r25
     e64:	00 0c       	add	r0, r0
     e66:	aa 0b       	sbc	r26, r26
     e68:	bb 0b       	sbc	r27, r27
	if(eeprom_data[28] & 0b10000000)acc_y *= -1;                   //Invert acc_y if the MSB of EEPROM bit 28 is set.
     e6a:	c7 fe       	sbrs	r12, 7
     e6c:	07 c0       	rjmp	.+14     	; 0xe7c <_Z8GyroReadv+0x352>
     e6e:	b0 95       	com	r27
     e70:	a0 95       	com	r26
     e72:	90 95       	com	r25
     e74:	81 95       	neg	r24
     e76:	9f 4f       	sbci	r25, 0xFF	; 255
     e78:	af 4f       	sbci	r26, 0xFF	; 255
     e7a:	bf 4f       	sbci	r27, 0xFF	; 255
     e7c:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <acc_y>
     e80:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <acc_y+0x1>
     e84:	a0 93 e4 03 	sts	0x03E4, r26	; 0x8003e4 <acc_y+0x2>
     e88:	b0 93 e5 03 	sts	0x03E5, r27	; 0x8003e5 <acc_y+0x3>
	acc_z = acc_axis[eeprom_data[30] & 0b00000011];                //Set acc_z to the correct axis that was stored in the EEPROM.
     e8c:	c0 5c       	subi	r28, 0xC0	; 192
     e8e:	dc 4f       	sbci	r29, 0xFC	; 252
     e90:	88 81       	ld	r24, Y
     e92:	99 81       	ldd	r25, Y+1	; 0x01
     e94:	09 2e       	mov	r0, r25
     e96:	00 0c       	add	r0, r0
     e98:	aa 0b       	sbc	r26, r26
     e9a:	bb 0b       	sbc	r27, r27
	if(eeprom_data[30] & 0b10000000)acc_z *= -1;                   //Invert acc_z if the MSB of EEPROM bit 30 is set.
     e9c:	d7 fe       	sbrs	r13, 7
     e9e:	07 c0       	rjmp	.+14     	; 0xeae <_Z8GyroReadv+0x384>
     ea0:	b0 95       	com	r27
     ea2:	a0 95       	com	r26
     ea4:	90 95       	com	r25
     ea6:	81 95       	neg	r24
     ea8:	9f 4f       	sbci	r25, 0xFF	; 255
     eaa:	af 4f       	sbci	r26, 0xFF	; 255
     eac:	bf 4f       	sbci	r27, 0xFF	; 255
     eae:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <acc_z>
     eb2:	90 93 df 03 	sts	0x03DF, r25	; 0x8003df <acc_z+0x1>
     eb6:	a0 93 e0 03 	sts	0x03E0, r26	; 0x8003e0 <acc_z+0x2>
     eba:	b0 93 e1 03 	sts	0x03E1, r27	; 0x8003e1 <acc_z+0x3>
}
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	1f 91       	pop	r17
     ec4:	0f 91       	pop	r16
     ec6:	ff 90       	pop	r15
     ec8:	ef 90       	pop	r14
     eca:	df 90       	pop	r13
     ecc:	cf 90       	pop	r12
     ece:	bf 90       	pop	r11
     ed0:	08 95       	ret

00000ed2 <loop>:
	while(Serial.available())data = Serial.read();                                        //Empty the serial buffer.
	data = 0;                                                                             //Set the data variable back to zero.
}

//Main program loop
void loop(){
     ed2:	4f 92       	push	r4
     ed4:	5f 92       	push	r5
     ed6:	6f 92       	push	r6
     ed8:	7f 92       	push	r7
     eda:	8f 92       	push	r8
     edc:	9f 92       	push	r9
     ede:	af 92       	push	r10
     ee0:	bf 92       	push	r11
     ee2:	cf 92       	push	r12
     ee4:	df 92       	push	r13
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	2c 97       	sbiw	r28, 0x0c	; 12
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
	while(zero_timer + 4000 > micros());                                                  //Start the pulse after 4000 micro seconds.
     efe:	c0 90 6e 03 	lds	r12, 0x036E	; 0x80036e <zero_timer>
     f02:	d0 90 6f 03 	lds	r13, 0x036F	; 0x80036f <zero_timer+0x1>
     f06:	e0 90 70 03 	lds	r14, 0x0370	; 0x800370 <zero_timer+0x2>
     f0a:	f0 90 71 03 	lds	r15, 0x0371	; 0x800371 <zero_timer+0x3>
     f0e:	20 ea       	ldi	r18, 0xA0	; 160
     f10:	c2 0e       	add	r12, r18
     f12:	2f e0       	ldi	r18, 0x0F	; 15
     f14:	d2 1e       	adc	r13, r18
     f16:	e1 1c       	adc	r14, r1
     f18:	f1 1c       	adc	r15, r1
     f1a:	0e 94 89 17 	call	0x2f12	; 0x2f12 <micros>
     f1e:	6c 15       	cp	r22, r12
     f20:	7d 05       	cpc	r23, r13
     f22:	8e 05       	cpc	r24, r14
     f24:	9f 05       	cpc	r25, r15
     f26:	58 f3       	brcs	.-42     	; 0xefe <loop+0x2c>
	zero_timer = micros();                                                                //Reset the zero timer.
     f28:	0e 94 89 17 	call	0x2f12	; 0x2f12 <micros>
     f2c:	60 93 6e 03 	sts	0x036E, r22	; 0x80036e <zero_timer>
     f30:	70 93 6f 03 	sts	0x036F, r23	; 0x80036f <zero_timer+0x1>
     f34:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <zero_timer+0x2>
     f38:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <zero_timer+0x3>
	battery_voltage = (analogRead(0) + 65) * 1.2317;
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	0e 94 30 18 	call	0x3060	; 0x3060 <analogRead>
     f42:	8f 5b       	subi	r24, 0xBF	; 191
     f44:	9f 4f       	sbci	r25, 0xFF	; 255
     f46:	bc 01       	movw	r22, r24
     f48:	99 0f       	add	r25, r25
     f4a:	88 0b       	sbc	r24, r24
     f4c:	99 0b       	sbc	r25, r25
     f4e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
     f52:	28 e5       	ldi	r18, 0x58	; 88
     f54:	38 ea       	ldi	r19, 0xA8	; 168
     f56:	4d e9       	ldi	r20, 0x9D	; 157
     f58:	5f e3       	ldi	r21, 0x3F	; 63
     f5a:	0e 94 8d 10 	call	0x211a	; 0x211a <__mulsf3>
     f5e:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <__fixsfsi>
     f62:	70 93 49 03 	sts	0x0349, r23	; 0x800349 <battery_voltage+0x1>
     f66:	60 93 48 03 	sts	0x0348, r22	; 0x800348 <battery_voltage>
	if(Serial.available() > 0){
     f6a:	87 e4       	ldi	r24, 0x47	; 71
     f6c:	94 e0       	ldi	r25, 0x04	; 4
     f6e:	0e 94 9c 11 	call	0x2338	; 0x2338 <_ZN14HardwareSerial9availableEv>
     f72:	18 16       	cp	r1, r24
     f74:	19 06       	cpc	r1, r25
     f76:	0c f0       	brlt	.+2      	; 0xf7a <loop+0xa8>
     f78:	aa c0       	rjmp	.+340    	; 0x10ce <loop+0x1fc>
		data = Serial.read();    
     f7a:	87 e4       	ldi	r24, 0x47	; 71
     f7c:	94 e0       	ldi	r25, 0x04	; 4
     f7e:	0e 94 b6 11 	call	0x236c	; 0x236c <_ZN14HardwareSerial4readEv>
     f82:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <data>
		while (Serial.available() > 0)Serial.read();
     f86:	87 e4       	ldi	r24, 0x47	; 71
     f88:	94 e0       	ldi	r25, 0x04	; 4
     f8a:	0e 94 9c 11 	call	0x2338	; 0x2338 <_ZN14HardwareSerial9availableEv>
     f8e:	18 16       	cp	r1, r24
     f90:	19 06       	cpc	r1, r25
     f92:	2c f4       	brge	.+10     	; 0xf9e <loop+0xcc>
     f94:	87 e4       	ldi	r24, 0x47	; 71
     f96:	94 e0       	ldi	r25, 0x04	; 4
     f98:	0e 94 b6 11 	call	0x236c	; 0x236c <_ZN14HardwareSerial4readEv>
     f9c:	f4 cf       	rjmp	.-24     	; 0xf86 <loop+0xb4>
		Serial.println((char)data);
     f9e:	60 91 1a 04 	lds	r22, 0x041A	; 0x80041a <data>
     fa2:	87 e4       	ldi	r24, 0x47	; 71
     fa4:	94 e0       	ldi	r25, 0x04	; 4
     fa6:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <_ZN5Print7printlnEc>

		new_function_request = true;                                                        //Set the new request flag.
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <new_function_request>
		loop_counter = 0;                                                                   //Reset the loop_counter variable.
     fb0:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <loop_counter+0x1>
     fb4:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <loop_counter>
		cal_int = 0;                                                                        //Reset the cal_int variable to undo the calibration.
     fb8:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <cal_int+0x1>
     fbc:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <cal_int>
		start = 0;      
     fc0:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <start>
		first_angle = true;                                                                    //Set start to 0.
     fc4:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <first_angle>
		
		//Confirm the choice on the serial monitor.
		if(data == 'r')Serial.println("Reading receiver signals.");
     fc8:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <data>
     fcc:	82 37       	cpi	r24, 0x72	; 114
     fce:	31 f4       	brne	.+12     	; 0xfdc <loop+0x10a>
     fd0:	6c e5       	ldi	r22, 0x5C	; 92
     fd2:	71 e0       	ldi	r23, 0x01	; 1
     fd4:	87 e4       	ldi	r24, 0x47	; 71
     fd6:	94 e0       	ldi	r25, 0x04	; 4
     fd8:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_ZN5Print7printlnEPKc>
		if(data == 'a')Serial.println("Print the quadcopter angles.");
     fdc:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <data>
     fe0:	81 36       	cpi	r24, 0x61	; 97
     fe2:	31 f4       	brne	.+12     	; 0xff0 <loop+0x11e>
     fe4:	66 e7       	ldi	r22, 0x76	; 118
     fe6:	71 e0       	ldi	r23, 0x01	; 1
     fe8:	87 e4       	ldi	r24, 0x47	; 71
     fea:	94 e0       	ldi	r25, 0x04	; 4
     fec:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_ZN5Print7printlnEPKc>
		if(data == 'a')Serial.println("Gyro calibration starts in 2 seconds (don't move the quadcopter)!!!");
     ff0:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <data>
     ff4:	81 36       	cpi	r24, 0x61	; 97
     ff6:	31 f4       	brne	.+12     	; 0x1004 <loop+0x132>
     ff8:	63 e9       	ldi	r22, 0x93	; 147
     ffa:	71 e0       	ldi	r23, 0x01	; 1
     ffc:	87 e4       	ldi	r24, 0x47	; 71
     ffe:	94 e0       	ldi	r25, 0x04	; 4
    1000:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_ZN5Print7printlnEPKc>
		if(data == '1')Serial.println("Test motor 1 (right front CCW.)");
    1004:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <data>
    1008:	81 33       	cpi	r24, 0x31	; 49
    100a:	31 f4       	brne	.+12     	; 0x1018 <loop+0x146>
    100c:	67 ed       	ldi	r22, 0xD7	; 215
    100e:	71 e0       	ldi	r23, 0x01	; 1
    1010:	87 e4       	ldi	r24, 0x47	; 71
    1012:	94 e0       	ldi	r25, 0x04	; 4
    1014:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_ZN5Print7printlnEPKc>
		if(data == '2')Serial.println("Test motor 2 (right rear CW.)");
    1018:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <data>
    101c:	82 33       	cpi	r24, 0x32	; 50
    101e:	31 f4       	brne	.+12     	; 0x102c <loop+0x15a>
    1020:	67 ef       	ldi	r22, 0xF7	; 247
    1022:	71 e0       	ldi	r23, 0x01	; 1
    1024:	87 e4       	ldi	r24, 0x47	; 71
    1026:	94 e0       	ldi	r25, 0x04	; 4
    1028:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_ZN5Print7printlnEPKc>
		if(data == '3')Serial.println("Test motor 3 (left rear CCW.)");
    102c:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <data>
    1030:	83 33       	cpi	r24, 0x33	; 51
    1032:	31 f4       	brne	.+12     	; 0x1040 <loop+0x16e>
    1034:	65 e1       	ldi	r22, 0x15	; 21
    1036:	72 e0       	ldi	r23, 0x02	; 2
    1038:	87 e4       	ldi	r24, 0x47	; 71
    103a:	94 e0       	ldi	r25, 0x04	; 4
    103c:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_ZN5Print7printlnEPKc>
		if(data == '4')Serial.println("Test motor 4 (left front CW.)");
    1040:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <data>
    1044:	84 33       	cpi	r24, 0x34	; 52
    1046:	31 f4       	brne	.+12     	; 0x1054 <loop+0x182>
    1048:	63 e3       	ldi	r22, 0x33	; 51
    104a:	72 e0       	ldi	r23, 0x02	; 2
    104c:	87 e4       	ldi	r24, 0x47	; 71
    104e:	94 e0       	ldi	r25, 0x04	; 4
    1050:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_ZN5Print7printlnEPKc>
		if(data == '5')Serial.println("Test all motors together");
    1054:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <data>
    1058:	85 33       	cpi	r24, 0x35	; 53
    105a:	31 f4       	brne	.+12     	; 0x1068 <loop+0x196>
    105c:	61 e5       	ldi	r22, 0x51	; 81
    105e:	72 e0       	ldi	r23, 0x02	; 2
    1060:	87 e4       	ldi	r24, 0x47	; 71
    1062:	94 e0       	ldi	r25, 0x04	; 4
    1064:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_ZN5Print7printlnEPKc>

		//Let's create a small delay so the message stays visible for 2.5 seconds.
		//We don't want the ESC's to beep and have to send a 1000us pulse to the ESC's.
		for(vibration_counter = 0; vibration_counter < 625; vibration_counter++){           //Do this loop 625 times
    1068:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <vibration_counter+0x1>
    106c:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <vibration_counter>
    1070:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <vibration_counter>
    1074:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <vibration_counter+0x1>
    1078:	81 37       	cpi	r24, 0x71	; 113
    107a:	92 40       	sbci	r25, 0x02	; 2
    107c:	24 f5       	brge	.+72     	; 0x10c6 <loop+0x1f4>
			delay(3);                                                                         //Wait 3000us.
    107e:	63 e0       	ldi	r22, 0x03	; 3
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <delay>
			esc_1 = 1000;                                                                     //Set the pulse for ESC 1 to 1000us.
    108a:	88 ee       	ldi	r24, 0xE8	; 232
    108c:	93 e0       	ldi	r25, 0x03	; 3
    108e:	90 93 09 04 	sts	0x0409, r25	; 0x800409 <esc_1+0x1>
    1092:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <esc_1>
			esc_2 = 1000;                                                                     //Set the pulse for ESC 1 to 1000us.
    1096:	90 93 07 04 	sts	0x0407, r25	; 0x800407 <esc_2+0x1>
    109a:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <esc_2>
			esc_3 = 1000;                                                                     //Set the pulse for ESC 1 to 1000us.
    109e:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <esc_3+0x1>
    10a2:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <esc_3>
			esc_4 = 1000;                                                                     //Set the pulse for ESC 1 to 1000us.
    10a6:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <esc_4+0x1>
    10aa:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <esc_4>
			esc_pulse_output();                                                               //Send the ESC control pulses.
    10ae:	0e 94 63 03 	call	0x6c6	; 0x6c6 <_Z16esc_pulse_outputv>
		if(data == '4')Serial.println("Test motor 4 (left front CW.)");
		if(data == '5')Serial.println("Test all motors together");

		//Let's create a small delay so the message stays visible for 2.5 seconds.
		//We don't want the ESC's to beep and have to send a 1000us pulse to the ESC's.
		for(vibration_counter = 0; vibration_counter < 625; vibration_counter++){           //Do this loop 625 times
    10b2:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <vibration_counter>
    10b6:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <vibration_counter+0x1>
    10ba:	01 96       	adiw	r24, 0x01	; 1
    10bc:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <vibration_counter+0x1>
    10c0:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <vibration_counter>
    10c4:	d5 cf       	rjmp	.-86     	; 0x1070 <loop+0x19e>
			esc_2 = 1000;                                                                     //Set the pulse for ESC 1 to 1000us.
			esc_3 = 1000;                                                                     //Set the pulse for ESC 1 to 1000us.
			esc_4 = 1000;                                                                     //Set the pulse for ESC 1 to 1000us.
			esc_pulse_output();                                                               //Send the ESC control pulses.
		}
		vibration_counter = 0;                                                              //Reset the vibration_counter variable.
    10c6:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <vibration_counter+0x1>
    10ca:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <vibration_counter>
    10ce:	83 e0       	ldi	r24, 0x03	; 3
    10d0:	0e 94 ba 00 	call	0x174	; 0x174 <_Z24convert_receiver_channelh.part.1>
	}

	receiver_input_channel_3 = convert_receiver_channel(3);                               //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
    10d4:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <receiver_input_channel_3+0x1>
    10d8:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <receiver_input_channel_3>
	if(receiver_input_channel_3 < 1025)new_function_request = false;                      //If the throttle is in the lowest position set the request flag to false.
    10dc:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <receiver_input_channel_3>
    10e0:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <receiver_input_channel_3+0x1>
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	94 40       	sbci	r25, 0x04	; 4
    10e8:	14 f4       	brge	.+4      	; 0x10ee <loop+0x21c>
    10ea:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <new_function_request>


	////////////////////////////////////////////////////////////////////////////////////////////
	//Run the ESC calibration program to start with.
	////////////////////////////////////////////////////////////////////////////////////////////
	if(data == 0 && new_function_request == false){                                       //Only start the calibration mode at first start.
    10ee:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <data>
    10f2:	81 11       	cpse	r24, r1
    10f4:	2d c0       	rjmp	.+90     	; 0x1150 <loop+0x27e>
    10f6:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <new_function_request>
    10fa:	81 11       	cpse	r24, r1
    10fc:	29 c0       	rjmp	.+82     	; 0x1150 <loop+0x27e>
    10fe:	83 e0       	ldi	r24, 0x03	; 3
    1100:	0e 94 ba 00 	call	0x174	; 0x174 <_Z24convert_receiver_channelh.part.1>
		receiver_input_channel_3 = convert_receiver_channel(3);                             //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
    1104:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <receiver_input_channel_3+0x1>
    1108:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <receiver_input_channel_3>
		esc_1 = receiver_input_channel_3;                                                   //Set the pulse for motor 1 equal to the throttle channel.
    110c:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <receiver_input_channel_3>
    1110:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <receiver_input_channel_3+0x1>
    1114:	90 93 09 04 	sts	0x0409, r25	; 0x800409 <esc_1+0x1>
    1118:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <esc_1>
		esc_2 = receiver_input_channel_3;                                                   //Set the pulse for motor 2 equal to the throttle channel.
    111c:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <receiver_input_channel_3>
    1120:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <receiver_input_channel_3+0x1>
    1124:	90 93 07 04 	sts	0x0407, r25	; 0x800407 <esc_2+0x1>
    1128:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <esc_2>
		esc_3 = receiver_input_channel_3;                                                   //Set the pulse for motor 3 equal to the throttle channel.
    112c:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <receiver_input_channel_3>
    1130:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <receiver_input_channel_3+0x1>
    1134:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <esc_3+0x1>
    1138:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <esc_3>
		esc_4 = receiver_input_channel_3;                                                   //Set the pulse for motor 4 equal to the throttle channel.
    113c:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <receiver_input_channel_3>
    1140:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <receiver_input_channel_3+0x1>
    1144:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <esc_4+0x1>
    1148:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <esc_4>
		esc_pulse_output();                                                                 //Send the ESC control pulses.
    114c:	0e 94 63 03 	call	0x6c6	; 0x6c6 <_Z16esc_pulse_outputv>
	}

	////////////////////////////////////////////////////////////////////////////////////////////
	//When user sends a 'r' print the receiver signals.
	////////////////////////////////////////////////////////////////////////////////////////////
	if(data == 'r'){
    1150:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <data>
    1154:	82 37       	cpi	r24, 0x72	; 114
    1156:	09 f0       	breq	.+2      	; 0x115a <loop+0x288>
    1158:	9c c0       	rjmp	.+312    	; 0x1292 <loop+0x3c0>
	
		loop_counter ++;                                                                    //Increase the loop_counter variable.
    115a:	e0 90 f0 03 	lds	r14, 0x03F0	; 0x8003f0 <loop_counter>
    115e:	f0 90 f1 03 	lds	r15, 0x03F1	; 0x8003f1 <loop_counter+0x1>
    1162:	bf ef       	ldi	r27, 0xFF	; 255
    1164:	eb 1a       	sub	r14, r27
    1166:	fb 0a       	sbc	r15, r27
    1168:	f0 92 f1 03 	sts	0x03F1, r15	; 0x8003f1 <loop_counter+0x1>
    116c:	e0 92 f0 03 	sts	0x03F0, r14	; 0x8003f0 <loop_counter>
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	0e 94 ba 00 	call	0x174	; 0x174 <_Z24convert_receiver_channelh.part.1>
		receiver_input_channel_1 = convert_receiver_channel(1);                           //Convert the actual receiver signals for pitch to the standard 1000 - 2000us.
    1176:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <receiver_input_channel_1+0x1>
    117a:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <receiver_input_channel_1>
    117e:	82 e0       	ldi	r24, 0x02	; 2
    1180:	0e 94 ba 00 	call	0x174	; 0x174 <_Z24convert_receiver_channelh.part.1>
		receiver_input_channel_2 = convert_receiver_channel(2);                           //Convert the actual receiver signals for roll to the standard 1000 - 2000us.
    1184:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <receiver_input_channel_2+0x1>
    1188:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <receiver_input_channel_2>
    118c:	83 e0       	ldi	r24, 0x03	; 3
    118e:	0e 94 ba 00 	call	0x174	; 0x174 <_Z24convert_receiver_channelh.part.1>
		receiver_input_channel_3 = convert_receiver_channel(3);                           //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
    1192:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <receiver_input_channel_3+0x1>
    1196:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <receiver_input_channel_3>
    119a:	84 e0       	ldi	r24, 0x04	; 4
    119c:	0e 94 ba 00 	call	0x174	; 0x174 <_Z24convert_receiver_channelh.part.1>
		receiver_input_channel_4 = convert_receiver_channel(4);                           //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
    11a0:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <receiver_input_channel_4+0x1>
    11a4:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <receiver_input_channel_4>
	byte channel, reverse;                                                       //First we declare some local variables
	int low, center, high, actual;
	int difference;
	
	if (function > 4) {
		return (receiver_input[function] -3000) * -1;
    11a8:	88 eb       	ldi	r24, 0xB8	; 184
    11aa:	9b e0       	ldi	r25, 0x0B	; 11
    11ac:	20 91 fc 03 	lds	r18, 0x03FC	; 0x8003fc <receiver_input+0xa>
    11b0:	30 91 fd 03 	lds	r19, 0x03FD	; 0x8003fd <receiver_input+0xb>
    11b4:	ac 01       	movw	r20, r24
    11b6:	42 1b       	sub	r20, r18
    11b8:	53 0b       	sbc	r21, r19
		loop_counter ++;                                                                    //Increase the loop_counter variable.
		receiver_input_channel_1 = convert_receiver_channel(1);                           //Convert the actual receiver signals for pitch to the standard 1000 - 2000us.
		receiver_input_channel_2 = convert_receiver_channel(2);                           //Convert the actual receiver signals for roll to the standard 1000 - 2000us.
		receiver_input_channel_3 = convert_receiver_channel(3);                           //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
		receiver_input_channel_4 = convert_receiver_channel(4);                           //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
		receiver_input_channel_5 = convert_receiver_channel(5);                           //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
    11ba:	50 93 0f 04 	sts	0x040F, r21	; 0x80040f <receiver_input_channel_5+0x1>
    11be:	40 93 0e 04 	sts	0x040E, r20	; 0x80040e <receiver_input_channel_5>
	byte channel, reverse;                                                       //First we declare some local variables
	int low, center, high, actual;
	int difference;
	
	if (function > 4) {
		return (receiver_input[function] -3000) * -1;
    11c2:	20 91 fe 03 	lds	r18, 0x03FE	; 0x8003fe <receiver_input+0xc>
    11c6:	30 91 ff 03 	lds	r19, 0x03FF	; 0x8003ff <receiver_input+0xd>
    11ca:	dc 01       	movw	r26, r24
    11cc:	a2 1b       	sub	r26, r18
    11ce:	b3 0b       	sbc	r27, r19
		receiver_input_channel_1 = convert_receiver_channel(1);                           //Convert the actual receiver signals for pitch to the standard 1000 - 2000us.
		receiver_input_channel_2 = convert_receiver_channel(2);                           //Convert the actual receiver signals for roll to the standard 1000 - 2000us.
		receiver_input_channel_3 = convert_receiver_channel(3);                           //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
		receiver_input_channel_4 = convert_receiver_channel(4);                           //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
		receiver_input_channel_5 = convert_receiver_channel(5);                           //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
		receiver_input_channel_6 = convert_receiver_channel(6);                           //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
    11d0:	b0 93 0d 04 	sts	0x040D, r27	; 0x80040d <receiver_input_channel_6+0x1>
    11d4:	a0 93 0c 04 	sts	0x040C, r26	; 0x80040c <receiver_input_channel_6>
	byte channel, reverse;                                                       //First we declare some local variables
	int low, center, high, actual;
	int difference;
	
	if (function > 4) {
		return (receiver_input[function] -3000) * -1;
    11d8:	20 91 00 04 	lds	r18, 0x0400	; 0x800400 <receiver_input+0xe>
    11dc:	30 91 01 04 	lds	r19, 0x0401	; 0x800401 <receiver_input+0xf>
    11e0:	82 1b       	sub	r24, r18
    11e2:	93 0b       	sbc	r25, r19
		receiver_input_channel_2 = convert_receiver_channel(2);                           //Convert the actual receiver signals for roll to the standard 1000 - 2000us.
		receiver_input_channel_3 = convert_receiver_channel(3);                           //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
		receiver_input_channel_4 = convert_receiver_channel(4);                           //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
		receiver_input_channel_5 = convert_receiver_channel(5);                           //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
		receiver_input_channel_6 = convert_receiver_channel(6);                           //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
		receiver_input_channel_7 = convert_receiver_channel(7);                           //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
    11e4:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <receiver_input_channel_7+0x1>
    11e8:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <receiver_input_channel_7>

		if(loop_counter == 125){                                                            //Print the receiver values when the loop_counter variable equals 250.
    11ec:	bd e7       	ldi	r27, 0x7D	; 125
    11ee:	eb 16       	cp	r14, r27
    11f0:	f1 04       	cpc	r15, r1
    11f2:	31 f4       	brne	.+12     	; 0x1200 <loop+0x32e>
			print_signals();                                                                  //Print the receiver values on the serial monitor.
    11f4:	0e 94 6d 02 	call	0x4da	; 0x4da <_Z13print_signalsv>
			loop_counter = 0;                                                                 //Reset the loop_counter variable.
    11f8:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <loop_counter+0x1>
    11fc:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <loop_counter>
		}

		//For starting the motors: throttle low and yaw left (step 1).
		if(receiver_input_channel_3 < 1050 && receiver_input_channel_4 < 1050)start = 1;
    1200:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <receiver_input_channel_3>
    1204:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <receiver_input_channel_3+0x1>
    1208:	8a 31       	cpi	r24, 0x1A	; 26
    120a:	94 40       	sbci	r25, 0x04	; 4
    120c:	44 f4       	brge	.+16     	; 0x121e <loop+0x34c>
    120e:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <receiver_input_channel_4>
    1212:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <receiver_input_channel_4+0x1>
    1216:	8a 31       	cpi	r24, 0x1A	; 26
    1218:	94 40       	sbci	r25, 0x04	; 4
    121a:	0c f4       	brge	.+2      	; 0x121e <loop+0x34c>
    121c:	45 c5       	rjmp	.+2698   	; 0x1ca8 <loop+0xdd6>
		//When yaw stick is back in the center position start the motors (step 2).
		if(start == 1 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1450)start = 2;
    121e:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <start>
    1222:	81 30       	cpi	r24, 0x01	; 1
    1224:	79 f4       	brne	.+30     	; 0x1244 <loop+0x372>
    1226:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <receiver_input_channel_3>
    122a:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <receiver_input_channel_3+0x1>
    122e:	8a 31       	cpi	r24, 0x1A	; 26
    1230:	94 40       	sbci	r25, 0x04	; 4
    1232:	44 f4       	brge	.+16     	; 0x1244 <loop+0x372>
    1234:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <receiver_input_channel_4>
    1238:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <receiver_input_channel_4+0x1>
    123c:	8b 3a       	cpi	r24, 0xAB	; 171
    123e:	95 40       	sbci	r25, 0x05	; 5
    1240:	0c f0       	brlt	.+2      	; 0x1244 <loop+0x372>
    1242:	36 c5       	rjmp	.+2668   	; 0x1cb0 <loop+0xdde>
		//Stopping the motors: throttle low and yaw right.
		if(start == 2 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1950)start = 0;
    1244:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <start>
    1248:	82 30       	cpi	r24, 0x02	; 2
    124a:	79 f4       	brne	.+30     	; 0x126a <loop+0x398>
    124c:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <receiver_input_channel_3>
    1250:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <receiver_input_channel_3+0x1>
    1254:	8a 31       	cpi	r24, 0x1A	; 26
    1256:	94 40       	sbci	r25, 0x04	; 4
    1258:	44 f4       	brge	.+16     	; 0x126a <loop+0x398>
    125a:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <receiver_input_channel_4>
    125e:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <receiver_input_channel_4+0x1>
    1262:	8f 39       	cpi	r24, 0x9F	; 159
    1264:	97 40       	sbci	r25, 0x07	; 7
    1266:	0c f0       	brlt	.+2      	; 0x126a <loop+0x398>
    1268:	27 c5       	rjmp	.+2638   	; 0x1cb8 <loop+0xde6>

		esc_1 = 1000;                                                                       //Set the pulse for ESC 1 to 1000us.
    126a:	88 ee       	ldi	r24, 0xE8	; 232
    126c:	93 e0       	ldi	r25, 0x03	; 3
    126e:	90 93 09 04 	sts	0x0409, r25	; 0x800409 <esc_1+0x1>
    1272:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <esc_1>
		esc_2 = 1000;                                                                       //Set the pulse for ESC 1 to 1000us.
    1276:	90 93 07 04 	sts	0x0407, r25	; 0x800407 <esc_2+0x1>
    127a:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <esc_2>
		esc_3 = 1000;                                                                       //Set the pulse for ESC 1 to 1000us.
    127e:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <esc_3+0x1>
    1282:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <esc_3>
		esc_4 = 1000;                                                                       //Set the pulse for ESC 1 to 1000us.
    1286:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <esc_4+0x1>
    128a:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <esc_4>
		esc_pulse_output();                                                                 //Send the ESC control pulses.
    128e:	0e 94 63 03 	call	0x6c6	; 0x6c6 <_Z16esc_pulse_outputv>
	}

	///////////////////////////////////////////////////////////////////////////////////////////
	//When user sends a '1, 2, 3, 4 or 5 test the motors.
	////////////////////////////////////////////////////////////////////////////////////////////
	if(data == '1' || data == '2' || data == '3' || data == '4' || data == '5'){          //If motor 1, 2, 3 or 4 is selected by the user.
    1292:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <data>
    1296:	81 53       	subi	r24, 0x31	; 49
    1298:	85 30       	cpi	r24, 0x05	; 5
    129a:	08 f0       	brcs	.+2      	; 0x129e <loop+0x3cc>
    129c:	e7 c1       	rjmp	.+974    	; 0x166c <loop+0x79a>
		loop_counter ++;                                                                    //Add 1 to the loop_counter variable.
    129e:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <loop_counter>
    12a2:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <loop_counter+0x1>
    12a6:	01 96       	adiw	r24, 0x01	; 1
    12a8:	90 93 f1 03 	sts	0x03F1, r25	; 0x8003f1 <loop_counter+0x1>
    12ac:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <loop_counter>
		if(new_function_request == true && loop_counter == 250){                            //Wait for the throttle to be set to 0.
    12b0:	20 91 19 04 	lds	r18, 0x0419	; 0x800419 <new_function_request>
    12b4:	22 23       	and	r18, r18
    12b6:	b9 f0       	breq	.+46     	; 0x12e6 <loop+0x414>
    12b8:	8a 3f       	cpi	r24, 0xFA	; 250
    12ba:	91 05       	cpc	r25, r1
    12bc:	a1 f4       	brne	.+40     	; 0x12e6 <loop+0x414>
			Serial.print("Set throttle to 1000 (low). It's now set to: ");                    //Print message on the serial monitor.
    12be:	6a e6       	ldi	r22, 0x6A	; 106
    12c0:	72 e0       	ldi	r23, 0x02	; 2
    12c2:	87 e4       	ldi	r24, 0x47	; 71
    12c4:	94 e0       	ldi	r25, 0x04	; 4
    12c6:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
			Serial.println(receiver_input_channel_3);                                         //Print the actual throttle position.
    12ca:	60 91 12 04 	lds	r22, 0x0412	; 0x800412 <receiver_input_channel_3>
    12ce:	70 91 13 04 	lds	r23, 0x0413	; 0x800413 <receiver_input_channel_3+0x1>
    12d2:	4a e0       	ldi	r20, 0x0A	; 10
    12d4:	50 e0       	ldi	r21, 0x00	; 0
    12d6:	87 e4       	ldi	r24, 0x47	; 71
    12d8:	94 e0       	ldi	r25, 0x04	; 4
    12da:	0e 94 9e 14 	call	0x293c	; 0x293c <_ZN5Print7printlnEii>
			loop_counter = 0;                                                                 //Reset the loop_counter variable.
    12de:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <loop_counter+0x1>
    12e2:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <loop_counter>
		}
		if(new_function_request == false){                                                  //When the throttle was in the lowest position do this.
    12e6:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <new_function_request>
    12ea:	81 11       	cpse	r24, r1
    12ec:	bf c1       	rjmp	.+894    	; 0x166c <loop+0x79a>
    12ee:	83 e0       	ldi	r24, 0x03	; 3
    12f0:	0e 94 ba 00 	call	0x174	; 0x174 <_Z24convert_receiver_channelh.part.1>
			receiver_input_channel_3 = convert_receiver_channel(3);                           //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
    12f4:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <receiver_input_channel_3+0x1>
    12f8:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <receiver_input_channel_3>
			if(data == '1' || data == '5')esc_1 = receiver_input_channel_3;                   //If motor 1 is requested set the pulse for motor 1 equal to the throttle channel.
    12fc:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <data>
    1300:	98 2f       	mov	r25, r24
    1302:	9b 7f       	andi	r25, 0xFB	; 251
    1304:	91 33       	cpi	r25, 0x31	; 49
    1306:	a9 f4       	brne	.+42     	; 0x1332 <loop+0x460>
    1308:	20 91 12 04 	lds	r18, 0x0412	; 0x800412 <receiver_input_channel_3>
    130c:	30 91 13 04 	lds	r19, 0x0413	; 0x800413 <receiver_input_channel_3+0x1>
    1310:	30 93 09 04 	sts	0x0409, r19	; 0x800409 <esc_1+0x1>
    1314:	20 93 08 04 	sts	0x0408, r18	; 0x800408 <esc_1>
			else esc_1 = 1000;                                                                //If motor 1 is not requested set the pulse for the ESC to 1000us (off).
			if(data == '2' || data == '5')esc_2 = receiver_input_channel_3;                   //If motor 2 is requested set the pulse for motor 1 equal to the throttle channel.
    1318:	82 33       	cpi	r24, 0x32	; 50
    131a:	a1 f4       	brne	.+40     	; 0x1344 <loop+0x472>
    131c:	20 91 12 04 	lds	r18, 0x0412	; 0x800412 <receiver_input_channel_3>
    1320:	30 91 13 04 	lds	r19, 0x0413	; 0x800413 <receiver_input_channel_3+0x1>
    1324:	30 93 07 04 	sts	0x0407, r19	; 0x800407 <esc_2+0x1>
    1328:	20 93 06 04 	sts	0x0406, r18	; 0x800406 <esc_2>
			else esc_2 = 1000;                                                                //If motor 2 is not requested set the pulse for the ESC to 1000us (off).
			if(data == '3' || data == '5')esc_3 = receiver_input_channel_3;                   //If motor 3 is requested set the pulse for motor 1 equal to the throttle channel.
    132c:	83 33       	cpi	r24, 0x33	; 51
    132e:	c9 f4       	brne	.+50     	; 0x1362 <loop+0x490>
    1330:	13 c0       	rjmp	.+38     	; 0x1358 <loop+0x486>
			loop_counter = 0;                                                                 //Reset the loop_counter variable.
		}
		if(new_function_request == false){                                                  //When the throttle was in the lowest position do this.
			receiver_input_channel_3 = convert_receiver_channel(3);                           //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
			if(data == '1' || data == '5')esc_1 = receiver_input_channel_3;                   //If motor 1 is requested set the pulse for motor 1 equal to the throttle channel.
			else esc_1 = 1000;                                                                //If motor 1 is not requested set the pulse for the ESC to 1000us (off).
    1332:	28 ee       	ldi	r18, 0xE8	; 232
    1334:	33 e0       	ldi	r19, 0x03	; 3
    1336:	30 93 09 04 	sts	0x0409, r19	; 0x800409 <esc_1+0x1>
    133a:	20 93 08 04 	sts	0x0408, r18	; 0x800408 <esc_1>
			if(data == '2' || data == '5')esc_2 = receiver_input_channel_3;                   //If motor 2 is requested set the pulse for motor 1 equal to the throttle channel.
    133e:	82 33       	cpi	r24, 0x32	; 50
    1340:	19 f4       	brne	.+6      	; 0x1348 <loop+0x476>
    1342:	ec cf       	rjmp	.-40     	; 0x131c <loop+0x44a>
    1344:	85 33       	cpi	r24, 0x35	; 53
    1346:	51 f3       	breq	.-44     	; 0x131c <loop+0x44a>
			else esc_2 = 1000;                                                                //If motor 2 is not requested set the pulse for the ESC to 1000us (off).
    1348:	28 ee       	ldi	r18, 0xE8	; 232
    134a:	33 e0       	ldi	r19, 0x03	; 3
    134c:	30 93 07 04 	sts	0x0407, r19	; 0x800407 <esc_2+0x1>
    1350:	20 93 06 04 	sts	0x0406, r18	; 0x800406 <esc_2>
			if(data == '3' || data == '5')esc_3 = receiver_input_channel_3;                   //If motor 3 is requested set the pulse for motor 1 equal to the throttle channel.
    1354:	83 33       	cpi	r24, 0x33	; 51
    1356:	39 f4       	brne	.+14     	; 0x1366 <loop+0x494>
    1358:	20 91 12 04 	lds	r18, 0x0412	; 0x800412 <receiver_input_channel_3>
    135c:	30 91 13 04 	lds	r19, 0x0413	; 0x800413 <receiver_input_channel_3+0x1>
    1360:	04 c0       	rjmp	.+8      	; 0x136a <loop+0x498>
    1362:	85 33       	cpi	r24, 0x35	; 53
    1364:	c9 f3       	breq	.-14     	; 0x1358 <loop+0x486>
			else esc_3 = 1000;                                                                //If motor 3 is not requested set the pulse for the ESC to 1000us (off).
    1366:	28 ee       	ldi	r18, 0xE8	; 232
    1368:	33 e0       	ldi	r19, 0x03	; 3
    136a:	30 93 05 04 	sts	0x0405, r19	; 0x800405 <esc_3+0x1>
    136e:	20 93 04 04 	sts	0x0404, r18	; 0x800404 <esc_3>
			if(data == '4' || data == '5')esc_4 = receiver_input_channel_3;                   //If motor 4 is requested set the pulse for motor 1 equal to the throttle channel.
    1372:	84 53       	subi	r24, 0x34	; 52
    1374:	82 30       	cpi	r24, 0x02	; 2
    1376:	28 f4       	brcc	.+10     	; 0x1382 <loop+0x4b0>
    1378:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <receiver_input_channel_3>
    137c:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <receiver_input_channel_3+0x1>
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <loop+0x4b4>
			else esc_4 = 1000;                                                                //If motor 4 is not requested set the pulse for the ESC to 1000us (off).
    1382:	88 ee       	ldi	r24, 0xE8	; 232
    1384:	93 e0       	ldi	r25, 0x03	; 3
    1386:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <esc_4+0x1>
    138a:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <esc_4>

			esc_pulse_output();                                                               //Send the ESC control pulses.
    138e:	0e 94 63 03 	call	0x6c6	; 0x6c6 <_Z16esc_pulse_outputv>

			//For balancing the propellors it's possible to use the accelerometer to measure the vibrations.
			if(eeprom_data[31] == 1){                                                         //The MPU-6050 is installed
    1392:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <eeprom_data+0x1f>
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	09 f0       	breq	.+2      	; 0x139c <loop+0x4ca>
    139a:	68 c1       	rjmp	.+720    	; 0x166c <loop+0x79a>
				Wire.beginTransmission(gyro_address);                                           //Start communication with the gyro.
    139c:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <gyro_address>
    13a0:	70 91 ef 03 	lds	r23, 0x03EF	; 0x8003ef <gyro_address+0x1>
    13a4:	84 ee       	ldi	r24, 0xE4	; 228
    13a6:	94 e0       	ldi	r25, 0x04	; 4
    13a8:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <_ZN7TwoWire17beginTransmissionEi>
				Wire.write(0x3B);                                                               //Start reading @ register 43h and auto increment with every read.
    13ac:	6b e3       	ldi	r22, 0x3B	; 59
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	84 ee       	ldi	r24, 0xE4	; 228
    13b2:	94 e0       	ldi	r25, 0x04	; 4
    13b4:	0e 94 29 01 	call	0x252	; 0x252 <_ZN7TwoWire5writeEi>
				Wire.endTransmission();                                                         //End the transmission.
    13b8:	84 ee       	ldi	r24, 0xE4	; 228
    13ba:	94 e0       	ldi	r25, 0x04	; 4
    13bc:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <_ZN7TwoWire15endTransmissionEv>
				Wire.requestFrom(gyro_address,6);                                               //Request 6 bytes from the gyro.
    13c0:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <gyro_address>
    13c4:	70 91 ef 03 	lds	r23, 0x03EF	; 0x8003ef <gyro_address+0x1>
    13c8:	46 e0       	ldi	r20, 0x06	; 6
    13ca:	50 e0       	ldi	r21, 0x00	; 0
    13cc:	84 ee       	ldi	r24, 0xE4	; 228
    13ce:	94 e0       	ldi	r25, 0x04	; 4
    13d0:	0e 94 32 17 	call	0x2e64	; 0x2e64 <_ZN7TwoWire11requestFromEii>
				while(Wire.available() < 6);                                                    //Wait until the 6 bytes are received.
    13d4:	84 ee       	ldi	r24, 0xE4	; 228
    13d6:	94 e0       	ldi	r25, 0x04	; 4
    13d8:	0e 94 01 16 	call	0x2c02	; 0x2c02 <_ZN7TwoWire9availableEv>
    13dc:	06 97       	sbiw	r24, 0x06	; 6
    13de:	d4 f3       	brlt	.-12     	; 0x13d4 <loop+0x502>
				acc_x = Wire.read()<<8|Wire.read();                                             //Add the low and high byte to the acc_x variable.
    13e0:	84 ee       	ldi	r24, 0xE4	; 228
    13e2:	94 e0       	ldi	r25, 0x04	; 4
    13e4:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_ZN7TwoWire4readEv>
    13e8:	89 83       	std	Y+1, r24	; 0x01
    13ea:	84 ee       	ldi	r24, 0xE4	; 228
    13ec:	94 e0       	ldi	r25, 0x04	; 4
    13ee:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_ZN7TwoWire4readEv>
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	39 81       	ldd	r19, Y+1	; 0x01
    13f8:	82 2b       	or	r24, r18
    13fa:	93 2b       	or	r25, r19
    13fc:	09 2e       	mov	r0, r25
    13fe:	00 0c       	add	r0, r0
    1400:	aa 0b       	sbc	r26, r26
    1402:	bb 0b       	sbc	r27, r27
    1404:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <acc_x>
    1408:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <acc_x+0x1>
    140c:	a0 93 e8 03 	sts	0x03E8, r26	; 0x8003e8 <acc_x+0x2>
    1410:	b0 93 e9 03 	sts	0x03E9, r27	; 0x8003e9 <acc_x+0x3>
				acc_y = Wire.read()<<8|Wire.read();                                             //Add the low and high byte to the acc_y variable.
    1414:	84 ee       	ldi	r24, 0xE4	; 228
    1416:	94 e0       	ldi	r25, 0x04	; 4
    1418:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_ZN7TwoWire4readEv>
    141c:	89 83       	std	Y+1, r24	; 0x01
    141e:	84 ee       	ldi	r24, 0xE4	; 228
    1420:	94 e0       	ldi	r25, 0x04	; 4
    1422:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_ZN7TwoWire4readEv>
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	39 81       	ldd	r19, Y+1	; 0x01
    142c:	82 2b       	or	r24, r18
    142e:	93 2b       	or	r25, r19
    1430:	09 2e       	mov	r0, r25
    1432:	00 0c       	add	r0, r0
    1434:	aa 0b       	sbc	r26, r26
    1436:	bb 0b       	sbc	r27, r27
    1438:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <acc_y>
    143c:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <acc_y+0x1>
    1440:	a0 93 e4 03 	sts	0x03E4, r26	; 0x8003e4 <acc_y+0x2>
    1444:	b0 93 e5 03 	sts	0x03E5, r27	; 0x8003e5 <acc_y+0x3>
				acc_z = Wire.read()<<8|Wire.read();                                             //Add the low and high byte to the acc_z variable.
    1448:	84 ee       	ldi	r24, 0xE4	; 228
    144a:	94 e0       	ldi	r25, 0x04	; 4
    144c:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_ZN7TwoWire4readEv>
    1450:	89 83       	std	Y+1, r24	; 0x01
    1452:	84 ee       	ldi	r24, 0xE4	; 228
    1454:	94 e0       	ldi	r25, 0x04	; 4
    1456:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_ZN7TwoWire4readEv>
    145a:	e0 e0       	ldi	r30, 0x00	; 0
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	f9 81       	ldd	r31, Y+1	; 0x01
    1460:	e8 2b       	or	r30, r24
    1462:	f9 2b       	or	r31, r25
    1464:	cf 01       	movw	r24, r30
    1466:	0f 2e       	mov	r0, r31
    1468:	00 0c       	add	r0, r0
    146a:	aa 0b       	sbc	r26, r26
    146c:	bb 0b       	sbc	r27, r27
    146e:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <acc_z>
    1472:	90 93 df 03 	sts	0x03DF, r25	; 0x8003df <acc_z+0x1>
    1476:	a0 93 e0 03 	sts	0x03E0, r26	; 0x8003e0 <acc_z+0x2>
    147a:	b0 93 e1 03 	sts	0x03E1, r27	; 0x8003e1 <acc_z+0x3>

				acc_total_vector[0] = sqrt((acc_x*acc_x)+(acc_y*acc_y)+(acc_z*acc_z));          //Calculate the total accelerometer vector.
    147e:	60 91 e6 03 	lds	r22, 0x03E6	; 0x8003e6 <acc_x>
    1482:	70 91 e7 03 	lds	r23, 0x03E7	; 0x8003e7 <acc_x+0x1>
    1486:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <acc_x+0x2>
    148a:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <acc_x+0x3>
    148e:	80 90 e2 03 	lds	r8, 0x03E2	; 0x8003e2 <acc_y>
    1492:	90 90 e3 03 	lds	r9, 0x03E3	; 0x8003e3 <acc_y+0x1>
    1496:	a0 90 e4 03 	lds	r10, 0x03E4	; 0x8003e4 <acc_y+0x2>
    149a:	b0 90 e5 03 	lds	r11, 0x03E5	; 0x8003e5 <acc_y+0x3>
    149e:	9b 01       	movw	r18, r22
    14a0:	ac 01       	movw	r20, r24
    14a2:	0e 94 5f 1b 	call	0x36be	; 0x36be <__mulsi3>
    14a6:	6b 01       	movw	r12, r22
    14a8:	7c 01       	movw	r14, r24
    14aa:	a5 01       	movw	r20, r10
    14ac:	94 01       	movw	r18, r8
    14ae:	c5 01       	movw	r24, r10
    14b0:	b4 01       	movw	r22, r8
    14b2:	0e 94 5f 1b 	call	0x36be	; 0x36be <__mulsi3>
    14b6:	c6 0e       	add	r12, r22
    14b8:	d7 1e       	adc	r13, r23
    14ba:	e8 1e       	adc	r14, r24
    14bc:	f9 1e       	adc	r15, r25
    14be:	9f 01       	movw	r18, r30
    14c0:	df 01       	movw	r26, r30
    14c2:	0e 94 c4 1b 	call	0x3788	; 0x3788 <__mulhisi3>
    14c6:	6c 0d       	add	r22, r12
    14c8:	7d 1d       	adc	r23, r13
    14ca:	8e 1d       	adc	r24, r14
    14cc:	9f 1d       	adc	r25, r15
    14ce:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
    14d2:	0e 94 08 11 	call	0x2210	; 0x2210 <sqrt>
    14d6:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <__fixsfsi>
    14da:	60 93 8e 03 	sts	0x038E, r22	; 0x80038e <acc_total_vector>
    14de:	70 93 8f 03 	sts	0x038F, r23	; 0x80038f <acc_total_vector+0x1>
    14e2:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <acc_total_vector+0x2>
    14e6:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <acc_total_vector+0x3>
    14ea:	20 e1       	ldi	r18, 0x10	; 16

				acc_av_vector = acc_total_vector[0];                                            //Copy the total vector to the accelerometer average vector variable.

				for(start = 16; start > 0; start--){                                            //Do this loop 16 times to create an array of accelrometer vectors.
					acc_total_vector[start] = acc_total_vector[start - 1];                        //Shift every variable one position up in the array.
    14ec:	42 2f       	mov	r20, r18
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	fa 01       	movw	r30, r20
    14f2:	ee 0f       	add	r30, r30
    14f4:	ff 1f       	adc	r31, r31
    14f6:	ee 0f       	add	r30, r30
    14f8:	ff 1f       	adc	r31, r31
    14fa:	e6 57       	subi	r30, 0x76	; 118
    14fc:	fc 4f       	sbci	r31, 0xFC	; 252
    14fe:	c0 80       	ld	r12, Z
    1500:	d1 80       	ldd	r13, Z+1	; 0x01
    1502:	e2 80       	ldd	r14, Z+2	; 0x02
    1504:	f3 80       	ldd	r15, Z+3	; 0x03
    1506:	44 0f       	add	r20, r20
    1508:	55 1f       	adc	r21, r21
    150a:	44 0f       	add	r20, r20
    150c:	55 1f       	adc	r21, r21
    150e:	fa 01       	movw	r30, r20
    1510:	e2 57       	subi	r30, 0x72	; 114
    1512:	fc 4f       	sbci	r31, 0xFC	; 252
    1514:	c0 82       	st	Z, r12
    1516:	d1 82       	std	Z+1, r13	; 0x01
    1518:	e2 82       	std	Z+2, r14	; 0x02
    151a:	f3 82       	std	Z+3, r15	; 0x03
					acc_av_vector += acc_total_vector[start];                                     //Add the array value to the acc_av_vector variable.
    151c:	6c 0d       	add	r22, r12
    151e:	7d 1d       	adc	r23, r13
    1520:	8e 1d       	adc	r24, r14
    1522:	9f 1d       	adc	r25, r15

				acc_total_vector[0] = sqrt((acc_x*acc_x)+(acc_y*acc_y)+(acc_z*acc_z));          //Calculate the total accelerometer vector.

				acc_av_vector = acc_total_vector[0];                                            //Copy the total vector to the accelerometer average vector variable.

				for(start = 16; start > 0; start--){                                            //Do this loop 16 times to create an array of accelrometer vectors.
    1524:	21 50       	subi	r18, 0x01	; 1
    1526:	11 f7       	brne	.-60     	; 0x14ec <loop+0x61a>
    1528:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <start>
					acc_total_vector[start] = acc_total_vector[start - 1];                        //Shift every variable one position up in the array.
					acc_av_vector += acc_total_vector[start];                                     //Add the array value to the acc_av_vector variable.
				}

				acc_av_vector /= 17;                                                            //Divide the acc_av_vector by 17 to get the avarage total accelerometer vector.
    152c:	21 e1       	ldi	r18, 0x11	; 17
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e0       	ldi	r20, 0x00	; 0
    1532:	50 e0       	ldi	r21, 0x00	; 0
    1534:	0e 94 a5 1b 	call	0x374a	; 0x374a <__divmodsi4>
    1538:	20 93 8a 03 	sts	0x038A, r18	; 0x80038a <acc_av_vector>
    153c:	30 93 8b 03 	sts	0x038B, r19	; 0x80038b <acc_av_vector+0x1>
    1540:	40 93 8c 03 	sts	0x038C, r20	; 0x80038c <acc_av_vector+0x2>
    1544:	50 93 8d 03 	sts	0x038D, r21	; 0x80038d <acc_av_vector+0x3>

				if(vibration_counter < 20){                                                     //If the vibration_counter is less than 20 do this.
    1548:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <vibration_counter>
    154c:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <vibration_counter+0x1>
    1550:	84 31       	cpi	r24, 0x14	; 20
    1552:	91 05       	cpc	r25, r1
    1554:	7c f5       	brge	.+94     	; 0x15b4 <loop+0x6e2>
					vibration_counter ++;                                                         //Increment the vibration_counter variable.
    1556:	01 96       	adiw	r24, 0x01	; 1
    1558:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <vibration_counter+0x1>
    155c:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <vibration_counter>
					vibration_total_result += abs(acc_total_vector[0] - acc_av_vector);           //Add the absolute difference between the avarage vector and current vector to the vibration_total_result variable.
    1560:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <acc_total_vector>
    1564:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <acc_total_vector+0x1>
    1568:	a0 91 90 03 	lds	r26, 0x0390	; 0x800390 <acc_total_vector+0x2>
    156c:	b0 91 91 03 	lds	r27, 0x0391	; 0x800391 <acc_total_vector+0x3>
    1570:	82 1b       	sub	r24, r18
    1572:	93 0b       	sbc	r25, r19
    1574:	a4 0b       	sbc	r26, r20
    1576:	b5 0b       	sbc	r27, r21
    1578:	b7 ff       	sbrs	r27, 7
    157a:	07 c0       	rjmp	.+14     	; 0x158a <loop+0x6b8>
    157c:	b0 95       	com	r27
    157e:	a0 95       	com	r26
    1580:	90 95       	com	r25
    1582:	81 95       	neg	r24
    1584:	9f 4f       	sbci	r25, 0xFF	; 255
    1586:	af 4f       	sbci	r26, 0xFF	; 255
    1588:	bf 4f       	sbci	r27, 0xFF	; 255
    158a:	40 91 86 03 	lds	r20, 0x0386	; 0x800386 <vibration_total_result>
    158e:	50 91 87 03 	lds	r21, 0x0387	; 0x800387 <vibration_total_result+0x1>
    1592:	60 91 88 03 	lds	r22, 0x0388	; 0x800388 <vibration_total_result+0x2>
    1596:	70 91 89 03 	lds	r23, 0x0389	; 0x800389 <vibration_total_result+0x3>
    159a:	84 0f       	add	r24, r20
    159c:	95 1f       	adc	r25, r21
    159e:	a6 1f       	adc	r26, r22
    15a0:	b7 1f       	adc	r27, r23
    15a2:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <vibration_total_result>
    15a6:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <vibration_total_result+0x1>
    15aa:	a0 93 88 03 	sts	0x0388, r26	; 0x800388 <vibration_total_result+0x2>
    15ae:	b0 93 89 03 	sts	0x0389, r27	; 0x800389 <vibration_total_result+0x3>
    15b2:	0c c0       	rjmp	.+24     	; 0x15cc <loop+0x6fa>
				}
				else{
					vibration_counter = 0;                                                        //If the vibration_counter is equal or larger than 20 do this.
    15b4:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <vibration_counter+0x1>
    15b8:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <vibration_counter>
					//Serial.print(vibration_total_result/50);                                    //Print the total accelerometer vector divided by 50 on the serial monitor.
					vibration_total_result = 0;                                                   //Reset the vibration_total_result variable.
    15bc:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <vibration_total_result>
    15c0:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <vibration_total_result+0x1>
    15c4:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <vibration_total_result+0x2>
    15c8:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <vibration_total_result+0x3>
					//Serial.print(" V:");
					//Serial.println(battery_voltage);
				}
				Serial.print("0:");
    15cc:	68 e9       	ldi	r22, 0x98	; 152
    15ce:	72 e0       	ldi	r23, 0x02	; 2
    15d0:	87 e4       	ldi	r24, 0x47	; 71
    15d2:	94 e0       	ldi	r25, 0x04	; 4
    15d4:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
				Serial.print(acc_x);
    15d8:	40 91 e6 03 	lds	r20, 0x03E6	; 0x8003e6 <acc_x>
    15dc:	50 91 e7 03 	lds	r21, 0x03E7	; 0x8003e7 <acc_x+0x1>
    15e0:	60 91 e8 03 	lds	r22, 0x03E8	; 0x8003e8 <acc_x+0x2>
    15e4:	70 91 e9 03 	lds	r23, 0x03E9	; 0x8003e9 <acc_x+0x3>
    15e8:	2a e0       	ldi	r18, 0x0A	; 10
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	87 e4       	ldi	r24, 0x47	; 71
    15ee:	94 e0       	ldi	r25, 0x04	; 4
    15f0:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN5Print5printEli>
				Serial.print("|1:");
    15f4:	6b e9       	ldi	r22, 0x9B	; 155
    15f6:	72 e0       	ldi	r23, 0x02	; 2
    15f8:	87 e4       	ldi	r24, 0x47	; 71
    15fa:	94 e0       	ldi	r25, 0x04	; 4
    15fc:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
				Serial.print(acc_y);
    1600:	40 91 e2 03 	lds	r20, 0x03E2	; 0x8003e2 <acc_y>
    1604:	50 91 e3 03 	lds	r21, 0x03E3	; 0x8003e3 <acc_y+0x1>
    1608:	60 91 e4 03 	lds	r22, 0x03E4	; 0x8003e4 <acc_y+0x2>
    160c:	70 91 e5 03 	lds	r23, 0x03E5	; 0x8003e5 <acc_y+0x3>
    1610:	2a e0       	ldi	r18, 0x0A	; 10
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	87 e4       	ldi	r24, 0x47	; 71
    1616:	94 e0       	ldi	r25, 0x04	; 4
    1618:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN5Print5printEli>
				Serial.print("|2:");
    161c:	6f e9       	ldi	r22, 0x9F	; 159
    161e:	72 e0       	ldi	r23, 0x02	; 2
    1620:	87 e4       	ldi	r24, 0x47	; 71
    1622:	94 e0       	ldi	r25, 0x04	; 4
    1624:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
				Serial.print(acc_z);
    1628:	40 91 de 03 	lds	r20, 0x03DE	; 0x8003de <acc_z>
    162c:	50 91 df 03 	lds	r21, 0x03DF	; 0x8003df <acc_z+0x1>
    1630:	60 91 e0 03 	lds	r22, 0x03E0	; 0x8003e0 <acc_z+0x2>
    1634:	70 91 e1 03 	lds	r23, 0x03E1	; 0x8003e1 <acc_z+0x3>
    1638:	2a e0       	ldi	r18, 0x0A	; 10
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	87 e4       	ldi	r24, 0x47	; 71
    163e:	94 e0       	ldi	r25, 0x04	; 4
    1640:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN5Print5printEli>
				Serial.print("|3:");
    1644:	63 ea       	ldi	r22, 0xA3	; 163
    1646:	72 e0       	ldi	r23, 0x02	; 2
    1648:	87 e4       	ldi	r24, 0x47	; 71
    164a:	94 e0       	ldi	r25, 0x04	; 4
    164c:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
				Serial.println(acc_total_vector[0]);
    1650:	40 91 8e 03 	lds	r20, 0x038E	; 0x80038e <acc_total_vector>
    1654:	50 91 8f 03 	lds	r21, 0x038F	; 0x80038f <acc_total_vector+0x1>
    1658:	60 91 90 03 	lds	r22, 0x0390	; 0x800390 <acc_total_vector+0x2>
    165c:	70 91 91 03 	lds	r23, 0x0391	; 0x800391 <acc_total_vector+0x3>
    1660:	2a e0       	ldi	r18, 0x0A	; 10
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	87 e4       	ldi	r24, 0x47	; 71
    1666:	94 e0       	ldi	r25, 0x04	; 4
    1668:	0e 94 b0 14 	call	0x2960	; 0x2960 <_ZN5Print7printlnEli>
		}
	}
	///////////////////////////////////////////////////////////////////////////////////////////
	//When user sends a 'a' display the quadcopter angles.
	////////////////////////////////////////////////////////////////////////////////////////////
	if(data == 'a'){
    166c:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <data>
    1670:	81 36       	cpi	r24, 0x61	; 97
    1672:	09 f0       	breq	.+2      	; 0x1676 <loop+0x7a4>
    1674:	24 c3       	rjmp	.+1608   	; 0x1cbe <loop+0xdec>

		if(cal_int != 2000){
    1676:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <cal_int>
    167a:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <cal_int+0x1>
    167e:	80 3d       	cpi	r24, 0xD0	; 208
    1680:	97 40       	sbci	r25, 0x07	; 7
    1682:	09 f4       	brne	.+2      	; 0x1686 <loop+0x7b4>
    1684:	01 c1       	rjmp	.+514    	; 0x1888 <loop+0x9b6>
			Serial.print("Calibrating the gyro");
    1686:	67 ea       	ldi	r22, 0xA7	; 167
    1688:	72 e0       	ldi	r23, 0x02	; 2
    168a:	87 e4       	ldi	r24, 0x47	; 71
    168c:	94 e0       	ldi	r25, 0x04	; 4
    168e:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
			//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
			for (cal_int = 0; cal_int < 2000 ; cal_int ++){                                   //Take 2000 readings for calibration.
    1692:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <cal_int+0x1>
    1696:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <cal_int>
    169a:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <cal_int>
    169e:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <cal_int+0x1>
    16a2:	80 3d       	cpi	r24, 0xD0	; 208
    16a4:	57 e0       	ldi	r21, 0x07	; 7
    16a6:	95 07       	cpc	r25, r21
    16a8:	0c f0       	brlt	.+2      	; 0x16ac <loop+0x7da>
    16aa:	8c c0       	rjmp	.+280    	; 0x17c4 <loop+0x8f2>
				if(cal_int % 125 == 0){
    16ac:	6d e7       	ldi	r22, 0x7D	; 125
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	0e 94 6f 1b 	call	0x36de	; 0x36de <__divmodhi4>
    16b4:	89 2b       	or	r24, r25
    16b6:	81 f4       	brne	.+32     	; 0x16d8 <loop+0x806>
					digitalWrite(LED_STATUS_PIN, !digitalRead(LED_STATUS_PIN));   //Change the led status to indicate calibration.
    16b8:	8d e0       	ldi	r24, 0x0D	; 13
    16ba:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <digitalRead>
    16be:	61 e0       	ldi	r22, 0x01	; 1
    16c0:	89 2b       	or	r24, r25
    16c2:	09 f0       	breq	.+2      	; 0x16c6 <loop+0x7f4>
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	8d e0       	ldi	r24, 0x0D	; 13
    16c8:	0e 94 b2 18 	call	0x3164	; 0x3164 <digitalWrite>
					Serial.print(".");
    16cc:	61 e9       	ldi	r22, 0x91	; 145
    16ce:	71 e0       	ldi	r23, 0x01	; 1
    16d0:	87 e4       	ldi	r24, 0x47	; 71
    16d2:	94 e0       	ldi	r25, 0x04	; 4
    16d4:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
				}
				GyroRead();                                                                //Read the gyro output.
    16d8:	0e 94 95 05 	call	0xb2a	; 0xb2a <_Z8GyroReadv>
				gyro_axis_cal[1] += gyro_axis[1];                                               //Ad roll value to gyro_roll_cal.
    16dc:	60 91 3a 03 	lds	r22, 0x033A	; 0x80033a <gyro_axis+0x2>
    16e0:	70 91 3b 03 	lds	r23, 0x033B	; 0x80033b <gyro_axis+0x3>
    16e4:	07 2e       	mov	r0, r23
    16e6:	00 0c       	add	r0, r0
    16e8:	88 0b       	sbc	r24, r24
    16ea:	99 0b       	sbc	r25, r25
    16ec:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
    16f0:	9b 01       	movw	r18, r22
    16f2:	ac 01       	movw	r20, r24
    16f4:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <__data_end+0x4>
    16f8:	70 91 0b 03 	lds	r23, 0x030B	; 0x80030b <__data_end+0x5>
    16fc:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <__data_end+0x6>
    1700:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <__data_end+0x7>
    1704:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
    1708:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <__data_end+0x4>
    170c:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <__data_end+0x5>
    1710:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <__data_end+0x6>
    1714:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <__data_end+0x7>
				gyro_axis_cal[2] += gyro_axis[2];                                               //Ad pitch value to gyro_pitch_cal.
    1718:	60 91 3c 03 	lds	r22, 0x033C	; 0x80033c <gyro_axis+0x4>
    171c:	70 91 3d 03 	lds	r23, 0x033D	; 0x80033d <gyro_axis+0x5>
    1720:	07 2e       	mov	r0, r23
    1722:	00 0c       	add	r0, r0
    1724:	88 0b       	sbc	r24, r24
    1726:	99 0b       	sbc	r25, r25
    1728:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
    172c:	9b 01       	movw	r18, r22
    172e:	ac 01       	movw	r20, r24
    1730:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <__data_end+0x8>
    1734:	70 91 0f 03 	lds	r23, 0x030F	; 0x80030f <__data_end+0x9>
    1738:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <__data_end+0xa>
    173c:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <__data_end+0xb>
    1740:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
    1744:	60 93 0e 03 	sts	0x030E, r22	; 0x80030e <__data_end+0x8>
    1748:	70 93 0f 03 	sts	0x030F, r23	; 0x80030f <__data_end+0x9>
    174c:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <__data_end+0xa>
    1750:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <__data_end+0xb>
				gyro_axis_cal[3] += gyro_axis[3];                                               //Ad yaw value to gyro_yaw_cal.
    1754:	60 91 3e 03 	lds	r22, 0x033E	; 0x80033e <gyro_axis+0x6>
    1758:	70 91 3f 03 	lds	r23, 0x033F	; 0x80033f <gyro_axis+0x7>
    175c:	07 2e       	mov	r0, r23
    175e:	00 0c       	add	r0, r0
    1760:	88 0b       	sbc	r24, r24
    1762:	99 0b       	sbc	r25, r25
    1764:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
    1768:	9b 01       	movw	r18, r22
    176a:	ac 01       	movw	r20, r24
    176c:	60 91 12 03 	lds	r22, 0x0312	; 0x800312 <__data_end+0xc>
    1770:	70 91 13 03 	lds	r23, 0x0313	; 0x800313 <__data_end+0xd>
    1774:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <__data_end+0xe>
    1778:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <__data_end+0xf>
    177c:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
    1780:	60 93 12 03 	sts	0x0312, r22	; 0x800312 <__data_end+0xc>
    1784:	70 93 13 03 	sts	0x0313, r23	; 0x800313 <__data_end+0xd>
    1788:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <__data_end+0xe>
    178c:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <__data_end+0xf>
				//We don't want the esc's to be beeping annoyingly. So let's give them a 1000us puls while calibrating the gyro.
				PORTD |= B11110000;                                                             //Set digital poort 4, 5, 6 and 7 high.
    1790:	8b b1       	in	r24, 0x0b	; 11
    1792:	80 6f       	ori	r24, 0xF0	; 240
    1794:	8b b9       	out	0x0b, r24	; 11
				delayMicroseconds(1000);                                                        //Wait 1000us.
    1796:	88 ee       	ldi	r24, 0xE8	; 232
    1798:	93 e0       	ldi	r25, 0x03	; 3
    179a:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <delayMicroseconds>
				PORTD &= B00001111;                                                             //Set digital poort 4, 5, 6 and 7 low.
    179e:	8b b1       	in	r24, 0x0b	; 11
    17a0:	8f 70       	andi	r24, 0x0F	; 15
    17a2:	8b b9       	out	0x0b, r24	; 11
				delay(3);                                                                       //Wait 3 milliseconds before the next loop.
    17a4:	63 e0       	ldi	r22, 0x03	; 3
    17a6:	70 e0       	ldi	r23, 0x00	; 0
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <delay>
	if(data == 'a'){

		if(cal_int != 2000){
			Serial.print("Calibrating the gyro");
			//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
			for (cal_int = 0; cal_int < 2000 ; cal_int ++){                                   //Take 2000 readings for calibration.
    17b0:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <cal_int>
    17b4:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <cal_int+0x1>
    17b8:	01 96       	adiw	r24, 0x01	; 1
    17ba:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <cal_int+0x1>
    17be:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <cal_int>
    17c2:	6b cf       	rjmp	.-298    	; 0x169a <loop+0x7c8>
				PORTD |= B11110000;                                                             //Set digital poort 4, 5, 6 and 7 high.
				delayMicroseconds(1000);                                                        //Wait 1000us.
				PORTD &= B00001111;                                                             //Set digital poort 4, 5, 6 and 7 low.
				delay(3);                                                                       //Wait 3 milliseconds before the next loop.
			}
			Serial.println(".");
    17c4:	61 e9       	ldi	r22, 0x91	; 145
    17c6:	71 e0       	ldi	r23, 0x01	; 1
    17c8:	87 e4       	ldi	r24, 0x47	; 71
    17ca:	94 e0       	ldi	r25, 0x04	; 4
    17cc:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_ZN5Print7printlnEPKc>
			//Now that we have 2000 measures, we need to devide by 2000 to get the average gyro offset.
			gyro_axis_cal[1] /= 2000;                                                         //Divide the roll total by 2000.
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	4a ef       	ldi	r20, 0xFA	; 250
    17d6:	54 e4       	ldi	r21, 0x44	; 68
    17d8:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <__data_end+0x4>
    17dc:	70 91 0b 03 	lds	r23, 0x030B	; 0x80030b <__data_end+0x5>
    17e0:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <__data_end+0x6>
    17e4:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <__data_end+0x7>
    17e8:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__divsf3>
    17ec:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <__data_end+0x4>
    17f0:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <__data_end+0x5>
    17f4:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <__data_end+0x6>
    17f8:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <__data_end+0x7>
			gyro_axis_cal[2] /= 2000;                                                         //Divide the pitch total by 2000.
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	4a ef       	ldi	r20, 0xFA	; 250
    1802:	54 e4       	ldi	r21, 0x44	; 68
    1804:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <__data_end+0x8>
    1808:	70 91 0f 03 	lds	r23, 0x030F	; 0x80030f <__data_end+0x9>
    180c:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <__data_end+0xa>
    1810:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <__data_end+0xb>
    1814:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__divsf3>
    1818:	60 93 0e 03 	sts	0x030E, r22	; 0x80030e <__data_end+0x8>
    181c:	70 93 0f 03 	sts	0x030F, r23	; 0x80030f <__data_end+0x9>
    1820:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <__data_end+0xa>
    1824:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <__data_end+0xb>
			gyro_axis_cal[3] /= 2000;                                                         //Divide the yaw total by 2000.
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	4a ef       	ldi	r20, 0xFA	; 250
    182e:	54 e4       	ldi	r21, 0x44	; 68
    1830:	60 91 12 03 	lds	r22, 0x0312	; 0x800312 <__data_end+0xc>
    1834:	70 91 13 03 	lds	r23, 0x0313	; 0x800313 <__data_end+0xd>
    1838:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <__data_end+0xe>
    183c:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <__data_end+0xf>
    1840:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__divsf3>
    1844:	60 93 12 03 	sts	0x0312, r22	; 0x800312 <__data_end+0xc>
    1848:	70 93 13 03 	sts	0x0313, r23	; 0x800313 <__data_end+0xd>
    184c:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <__data_end+0xe>
    1850:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <__data_end+0xf>
			Serial.println("OK");
    1854:	6c eb       	ldi	r22, 0xBC	; 188
    1856:	72 e0       	ldi	r23, 0x02	; 2
    1858:	87 e4       	ldi	r24, 0x47	; 71
    185a:	94 e0       	ldi	r25, 0x04	; 4
			loop_counter ++;
			if(loop_counter > 10)loop_counter = 0;
			
		}
	}
}
    185c:	2c 96       	adiw	r28, 0x0c	; 12
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	f8 94       	cli
    1862:	de bf       	out	0x3e, r29	; 62
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	cd bf       	out	0x3d, r28	; 61
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	ff 90       	pop	r15
    186e:	ef 90       	pop	r14
    1870:	df 90       	pop	r13
    1872:	cf 90       	pop	r12
    1874:	bf 90       	pop	r11
    1876:	af 90       	pop	r10
    1878:	9f 90       	pop	r9
    187a:	8f 90       	pop	r8
    187c:	7f 90       	pop	r7
    187e:	6f 90       	pop	r6
    1880:	5f 90       	pop	r5
    1882:	4f 90       	pop	r4
			Serial.println(".");
			//Now that we have 2000 measures, we need to devide by 2000 to get the average gyro offset.
			gyro_axis_cal[1] /= 2000;                                                         //Divide the roll total by 2000.
			gyro_axis_cal[2] /= 2000;                                                         //Divide the pitch total by 2000.
			gyro_axis_cal[3] /= 2000;                                                         //Divide the yaw total by 2000.
			Serial.println("OK");
    1884:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <_ZN5Print7printlnEPKc>
		}
		else{
			///We don't want the esc's to be beeping annoyingly. So let's give them a 1000us puls while calibrating the gyro.
			PORTD |= B11110000;                                                               //Set digital poort 4, 5, 6 and 7 high.
    1888:	8b b1       	in	r24, 0x0b	; 11
    188a:	80 6f       	ori	r24, 0xF0	; 240
    188c:	8b b9       	out	0x0b, r24	; 11
			delayMicroseconds(1000);                                                          //Wait 1000us.
    188e:	88 ee       	ldi	r24, 0xE8	; 232
    1890:	93 e0       	ldi	r25, 0x03	; 3
    1892:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <delayMicroseconds>
			PORTD &= B00001111;                                                               //Set digital poort 4, 5, 6 and 7 low.
    1896:	8b b1       	in	r24, 0x0b	; 11
    1898:	8f 70       	andi	r24, 0x0F	; 15
    189a:	8b b9       	out	0x0b, r24	; 11

			//Let's get the current gyro data.
			GyroRead();
    189c:	0e 94 95 05 	call	0xb2a	; 0xb2a <_Z8GyroReadv>

			//Gyro angle calculations
			//0.0000611 = 1 / (250Hz / 65.5)
			angle_pitch += gyro_pitch * 0.0000611;                                           //Calculate the traveled pitch angle and add this to the angle_pitch variable.
    18a0:	20 ed       	ldi	r18, 0xD0	; 208
    18a2:	32 e2       	ldi	r19, 0x22	; 34
    18a4:	40 e8       	ldi	r20, 0x80	; 128
    18a6:	58 e3       	ldi	r21, 0x38	; 56
    18a8:	60 91 34 03 	lds	r22, 0x0334	; 0x800334 <gyro_pitch>
    18ac:	70 91 35 03 	lds	r23, 0x0335	; 0x800335 <gyro_pitch+0x1>
    18b0:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <gyro_pitch+0x2>
    18b4:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <gyro_pitch+0x3>
    18b8:	0e 94 8d 10 	call	0x211a	; 0x211a <__mulsf3>
    18bc:	20 91 20 03 	lds	r18, 0x0320	; 0x800320 <angle_pitch>
    18c0:	30 91 21 03 	lds	r19, 0x0321	; 0x800321 <angle_pitch+0x1>
    18c4:	40 91 22 03 	lds	r20, 0x0322	; 0x800322 <angle_pitch+0x2>
    18c8:	50 91 23 03 	lds	r21, 0x0323	; 0x800323 <angle_pitch+0x3>
    18cc:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
    18d0:	2b 01       	movw	r4, r22
    18d2:	3c 01       	movw	r6, r24
			angle_roll += gyro_roll * 0.0000611;                                             //Calculate the traveled roll angle and add this to the angle_roll variable.
    18d4:	20 ed       	ldi	r18, 0xD0	; 208
    18d6:	32 e2       	ldi	r19, 0x22	; 34
    18d8:	40 e8       	ldi	r20, 0x80	; 128
    18da:	58 e3       	ldi	r21, 0x38	; 56
    18dc:	60 91 30 03 	lds	r22, 0x0330	; 0x800330 <gyro_roll>
    18e0:	70 91 31 03 	lds	r23, 0x0331	; 0x800331 <gyro_roll+0x1>
    18e4:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <gyro_roll+0x2>
    18e8:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <gyro_roll+0x3>
    18ec:	0e 94 8d 10 	call	0x211a	; 0x211a <__mulsf3>
    18f0:	20 91 1c 03 	lds	r18, 0x031C	; 0x80031c <angle_roll>
    18f4:	30 91 1d 03 	lds	r19, 0x031D	; 0x80031d <angle_roll+0x1>
    18f8:	40 91 1e 03 	lds	r20, 0x031E	; 0x80031e <angle_roll+0x2>
    18fc:	50 91 1f 03 	lds	r21, 0x031F	; 0x80031f <angle_roll+0x3>
    1900:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
    1904:	6b 01       	movw	r12, r22
    1906:	7c 01       	movw	r14, r24
			angle_yaw += gyro_yaw * 0.0000611;                                             //Calculate the traveled roll angle and add this to the angle_roll variable.
    1908:	80 90 2c 03 	lds	r8, 0x032C	; 0x80032c <gyro_yaw>
    190c:	90 90 2d 03 	lds	r9, 0x032D	; 0x80032d <gyro_yaw+0x1>
    1910:	a0 90 2e 03 	lds	r10, 0x032E	; 0x80032e <gyro_yaw+0x2>
    1914:	b0 90 2f 03 	lds	r11, 0x032F	; 0x80032f <gyro_yaw+0x3>
    1918:	20 ed       	ldi	r18, 0xD0	; 208
    191a:	32 e2       	ldi	r19, 0x22	; 34
    191c:	40 e8       	ldi	r20, 0x80	; 128
    191e:	58 e3       	ldi	r21, 0x38	; 56
    1920:	c5 01       	movw	r24, r10
    1922:	b4 01       	movw	r22, r8
    1924:	0e 94 8d 10 	call	0x211a	; 0x211a <__mulsf3>
    1928:	9b 01       	movw	r18, r22
    192a:	ac 01       	movw	r20, r24
    192c:	60 91 18 03 	lds	r22, 0x0318	; 0x800318 <angle_yaw>
    1930:	70 91 19 03 	lds	r23, 0x0319	; 0x800319 <angle_yaw+0x1>
    1934:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <angle_yaw+0x2>
    1938:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <angle_yaw+0x3>
    193c:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
    1940:	60 93 18 03 	sts	0x0318, r22	; 0x800318 <angle_yaw>
    1944:	70 93 19 03 	sts	0x0319, r23	; 0x800319 <angle_yaw+0x1>
    1948:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <angle_yaw+0x2>
    194c:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <angle_yaw+0x3>

			//0.000001066 = 0.0000611 * (3.142(PI) / 180degr) The Arduino sin function is in radians
			angle_pitch -= angle_roll * sin(gyro_yaw * 0.000001066);                         //If the IMU has yawed transfer the roll angle to the pitch angel.
    1950:	2b e7       	ldi	r18, 0x7B	; 123
    1952:	33 e1       	ldi	r19, 0x13	; 19
    1954:	4f e8       	ldi	r20, 0x8F	; 143
    1956:	55 e3       	ldi	r21, 0x35	; 53
    1958:	c5 01       	movw	r24, r10
    195a:	b4 01       	movw	r22, r8
    195c:	0e 94 8d 10 	call	0x211a	; 0x211a <__mulsf3>
    1960:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <sin>
    1964:	4b 01       	movw	r8, r22
    1966:	5c 01       	movw	r10, r24
    1968:	9b 01       	movw	r18, r22
    196a:	ac 01       	movw	r20, r24
    196c:	c7 01       	movw	r24, r14
    196e:	b6 01       	movw	r22, r12
    1970:	0e 94 8d 10 	call	0x211a	; 0x211a <__mulsf3>
    1974:	9b 01       	movw	r18, r22
    1976:	ac 01       	movw	r20, r24
    1978:	c3 01       	movw	r24, r6
    197a:	b2 01       	movw	r22, r4
    197c:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
    1980:	6d 83       	std	Y+5, r22	; 0x05
    1982:	7e 83       	std	Y+6, r23	; 0x06
    1984:	8f 83       	std	Y+7, r24	; 0x07
    1986:	98 87       	std	Y+8, r25	; 0x08
			angle_roll += angle_pitch * sin(gyro_yaw * 0.000001066);                         //If the IMU has yawed transfer the pitch angle to the roll angel.
    1988:	9b 01       	movw	r18, r22
    198a:	ac 01       	movw	r20, r24
    198c:	c5 01       	movw	r24, r10
    198e:	b4 01       	movw	r22, r8
    1990:	0e 94 8d 10 	call	0x211a	; 0x211a <__mulsf3>
    1994:	a7 01       	movw	r20, r14
    1996:	96 01       	movw	r18, r12
    1998:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
    199c:	69 87       	std	Y+9, r22	; 0x09
    199e:	7a 87       	std	Y+10, r23	; 0x0a
    19a0:	8b 87       	std	Y+11, r24	; 0x0b
    19a2:	9c 87       	std	Y+12, r25	; 0x0c

			//Accelerometer angle calculations
			acc_total_vector[0] = sqrt((acc_x*acc_x)+(acc_y*acc_y)+(acc_z*acc_z));           //Calculate the total accelerometer vector.
    19a4:	40 90 e6 03 	lds	r4, 0x03E6	; 0x8003e6 <acc_x>
    19a8:	50 90 e7 03 	lds	r5, 0x03E7	; 0x8003e7 <acc_x+0x1>
    19ac:	60 90 e8 03 	lds	r6, 0x03E8	; 0x8003e8 <acc_x+0x2>
    19b0:	70 90 e9 03 	lds	r7, 0x03E9	; 0x8003e9 <acc_x+0x3>
    19b4:	80 90 e2 03 	lds	r8, 0x03E2	; 0x8003e2 <acc_y>
    19b8:	90 90 e3 03 	lds	r9, 0x03E3	; 0x8003e3 <acc_y+0x1>
    19bc:	a0 90 e4 03 	lds	r10, 0x03E4	; 0x8003e4 <acc_y+0x2>
    19c0:	b0 90 e5 03 	lds	r11, 0x03E5	; 0x8003e5 <acc_y+0x3>
    19c4:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <acc_z>
    19c8:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <acc_z+0x1>
    19cc:	a0 91 e0 03 	lds	r26, 0x03E0	; 0x8003e0 <acc_z+0x2>
    19d0:	b0 91 e1 03 	lds	r27, 0x03E1	; 0x8003e1 <acc_z+0x3>
    19d4:	89 83       	std	Y+1, r24	; 0x01
    19d6:	9a 83       	std	Y+2, r25	; 0x02
    19d8:	ab 83       	std	Y+3, r26	; 0x03
    19da:	bc 83       	std	Y+4, r27	; 0x04
    19dc:	a3 01       	movw	r20, r6
    19de:	92 01       	movw	r18, r4
    19e0:	c3 01       	movw	r24, r6
    19e2:	b2 01       	movw	r22, r4
    19e4:	0e 94 5f 1b 	call	0x36be	; 0x36be <__mulsi3>
    19e8:	6b 01       	movw	r12, r22
    19ea:	7c 01       	movw	r14, r24
    19ec:	a5 01       	movw	r20, r10
    19ee:	94 01       	movw	r18, r8
    19f0:	c5 01       	movw	r24, r10
    19f2:	b4 01       	movw	r22, r8
    19f4:	0e 94 5f 1b 	call	0x36be	; 0x36be <__mulsi3>
    19f8:	c6 0e       	add	r12, r22
    19fa:	d7 1e       	adc	r13, r23
    19fc:	e8 1e       	adc	r14, r24
    19fe:	f9 1e       	adc	r15, r25
    1a00:	29 81       	ldd	r18, Y+1	; 0x01
    1a02:	3a 81       	ldd	r19, Y+2	; 0x02
    1a04:	4b 81       	ldd	r20, Y+3	; 0x03
    1a06:	5c 81       	ldd	r21, Y+4	; 0x04
    1a08:	ca 01       	movw	r24, r20
    1a0a:	b9 01       	movw	r22, r18
    1a0c:	0e 94 5f 1b 	call	0x36be	; 0x36be <__mulsi3>
    1a10:	6c 0d       	add	r22, r12
    1a12:	7d 1d       	adc	r23, r13
    1a14:	8e 1d       	adc	r24, r14
    1a16:	9f 1d       	adc	r25, r15
    1a18:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
    1a1c:	0e 94 08 11 	call	0x2210	; 0x2210 <sqrt>
    1a20:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <__fixsfsi>
    1a24:	60 93 8e 03 	sts	0x038E, r22	; 0x80038e <acc_total_vector>
    1a28:	70 93 8f 03 	sts	0x038F, r23	; 0x80038f <acc_total_vector+0x1>
    1a2c:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <acc_total_vector+0x2>
    1a30:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <acc_total_vector+0x3>

			//57.296 = 1 / (3.142 / 180) The Arduino asin function is in radiansa
			angle_pitch_acc = asin((float)acc_y/acc_total_vector[0])* 57.296;                //Calculate the pitch angle.
    1a34:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
    1a38:	6b 01       	movw	r12, r22
    1a3a:	7c 01       	movw	r14, r24
    1a3c:	c5 01       	movw	r24, r10
    1a3e:	b4 01       	movw	r22, r8
    1a40:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
    1a44:	a7 01       	movw	r20, r14
    1a46:	96 01       	movw	r18, r12
    1a48:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__divsf3>
    1a4c:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <asin>
    1a50:	2b e1       	ldi	r18, 0x1B	; 27
    1a52:	3f e2       	ldi	r19, 0x2F	; 47
    1a54:	45 e6       	ldi	r20, 0x65	; 101
    1a56:	52 e4       	ldi	r21, 0x42	; 66
    1a58:	0e 94 8d 10 	call	0x211a	; 0x211a <__mulsf3>
    1a5c:	4b 01       	movw	r8, r22
    1a5e:	5c 01       	movw	r10, r24
    1a60:	60 93 24 03 	sts	0x0324, r22	; 0x800324 <angle_pitch_acc>
    1a64:	70 93 25 03 	sts	0x0325, r23	; 0x800325 <angle_pitch_acc+0x1>
    1a68:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <angle_pitch_acc+0x2>
    1a6c:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <angle_pitch_acc+0x3>
			angle_roll_acc = asin((float)acc_x/acc_total_vector[0])* -57.296;                //Calculate the roll angle.
    1a70:	c3 01       	movw	r24, r6
    1a72:	b2 01       	movw	r22, r4
    1a74:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatsisf>
    1a78:	a7 01       	movw	r20, r14
    1a7a:	96 01       	movw	r18, r12
    1a7c:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__divsf3>
    1a80:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <asin>
			
			angle_pitch_acc -= 0;
			angle_roll_acc += 0;                                          //Accelerometer calibration value for roll.
    1a84:	2b e1       	ldi	r18, 0x1B	; 27
    1a86:	3f e2       	ldi	r19, 0x2F	; 47
    1a88:	45 e6       	ldi	r20, 0x65	; 101
    1a8a:	52 ec       	ldi	r21, 0xC2	; 194
    1a8c:	0e 94 8d 10 	call	0x211a	; 0x211a <__mulsf3>
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	a9 01       	movw	r20, r18
    1a96:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
    1a9a:	6b 01       	movw	r12, r22
    1a9c:	7c 01       	movw	r14, r24
    1a9e:	60 93 28 03 	sts	0x0328, r22	; 0x800328 <angle_roll_acc>
    1aa2:	70 93 29 03 	sts	0x0329, r23	; 0x800329 <angle_roll_acc+0x1>
    1aa6:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <angle_roll_acc+0x2>
    1aaa:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <angle_roll_acc+0x3>

			if(first_angle){
    1aae:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <first_angle>
    1ab2:	88 23       	and	r24, r24
    1ab4:	d9 f0       	breq	.+54     	; 0x1aec <loop+0xc1a>
				angle_pitch = angle_pitch_acc;                                                 //Set the pitch angle to the accelerometer angle.
    1ab6:	80 92 20 03 	sts	0x0320, r8	; 0x800320 <angle_pitch>
    1aba:	90 92 21 03 	sts	0x0321, r9	; 0x800321 <angle_pitch+0x1>
    1abe:	a0 92 22 03 	sts	0x0322, r10	; 0x800322 <angle_pitch+0x2>
    1ac2:	b0 92 23 03 	sts	0x0323, r11	; 0x800323 <angle_pitch+0x3>
				angle_roll = angle_roll_acc;                                                   //Set the roll angle to the accelerometer angle.
    1ac6:	c0 92 1c 03 	sts	0x031C, r12	; 0x80031c <angle_roll>
    1aca:	d0 92 1d 03 	sts	0x031D, r13	; 0x80031d <angle_roll+0x1>
    1ace:	e0 92 1e 03 	sts	0x031E, r14	; 0x80031e <angle_roll+0x2>
    1ad2:	f0 92 1f 03 	sts	0x031F, r15	; 0x80031f <angle_roll+0x3>
				angle_yaw =0;
    1ad6:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <angle_yaw>
    1ada:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <angle_yaw+0x1>
    1ade:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <angle_yaw+0x2>
    1ae2:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <angle_yaw+0x3>
				first_angle = false;
    1ae6:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <first_angle>
    1aea:	44 c0       	rjmp	.+136    	; 0x1b74 <loop+0xca2>
			}
			else{
				angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;                 //Correct the drift of the gyro pitch angle with the accelerometer pitch angle.
    1aec:	29 ec       	ldi	r18, 0xC9	; 201
    1aee:	35 ee       	ldi	r19, 0xE5	; 229
    1af0:	4f e7       	ldi	r20, 0x7F	; 127
    1af2:	5f e3       	ldi	r21, 0x3F	; 63
    1af4:	6d 81       	ldd	r22, Y+5	; 0x05
    1af6:	7e 81       	ldd	r23, Y+6	; 0x06
    1af8:	8f 81       	ldd	r24, Y+7	; 0x07
    1afa:	98 85       	ldd	r25, Y+8	; 0x08
    1afc:	0e 94 8d 10 	call	0x211a	; 0x211a <__mulsf3>
    1b00:	2b 01       	movw	r4, r22
    1b02:	3c 01       	movw	r6, r24
    1b04:	27 e1       	ldi	r18, 0x17	; 23
    1b06:	37 eb       	ldi	r19, 0xB7	; 183
    1b08:	41 ed       	ldi	r20, 0xD1	; 209
    1b0a:	59 e3       	ldi	r21, 0x39	; 57
    1b0c:	c5 01       	movw	r24, r10
    1b0e:	b4 01       	movw	r22, r8
    1b10:	0e 94 8d 10 	call	0x211a	; 0x211a <__mulsf3>
    1b14:	9b 01       	movw	r18, r22
    1b16:	ac 01       	movw	r20, r24
    1b18:	c3 01       	movw	r24, r6
    1b1a:	b2 01       	movw	r22, r4
    1b1c:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
    1b20:	60 93 20 03 	sts	0x0320, r22	; 0x800320 <angle_pitch>
    1b24:	70 93 21 03 	sts	0x0321, r23	; 0x800321 <angle_pitch+0x1>
    1b28:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <angle_pitch+0x2>
    1b2c:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <angle_pitch+0x3>
				angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;                    //Correct the drift of the gyro roll angle with the accelerometer roll angle.
    1b30:	29 ec       	ldi	r18, 0xC9	; 201
    1b32:	35 ee       	ldi	r19, 0xE5	; 229
    1b34:	4f e7       	ldi	r20, 0x7F	; 127
    1b36:	5f e3       	ldi	r21, 0x3F	; 63
    1b38:	69 85       	ldd	r22, Y+9	; 0x09
    1b3a:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b3c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b3e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b40:	0e 94 8d 10 	call	0x211a	; 0x211a <__mulsf3>
    1b44:	4b 01       	movw	r8, r22
    1b46:	5c 01       	movw	r10, r24
    1b48:	27 e1       	ldi	r18, 0x17	; 23
    1b4a:	37 eb       	ldi	r19, 0xB7	; 183
    1b4c:	41 ed       	ldi	r20, 0xD1	; 209
    1b4e:	59 e3       	ldi	r21, 0x39	; 57
    1b50:	c7 01       	movw	r24, r14
    1b52:	b6 01       	movw	r22, r12
    1b54:	0e 94 8d 10 	call	0x211a	; 0x211a <__mulsf3>
    1b58:	9b 01       	movw	r18, r22
    1b5a:	ac 01       	movw	r20, r24
    1b5c:	c5 01       	movw	r24, r10
    1b5e:	b4 01       	movw	r22, r8
    1b60:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
    1b64:	60 93 1c 03 	sts	0x031C, r22	; 0x80031c <angle_roll>
    1b68:	70 93 1d 03 	sts	0x031D, r23	; 0x80031d <angle_roll+0x1>
    1b6c:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <angle_roll+0x2>
    1b70:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <angle_roll+0x3>
			}

			//We can't print all the data at once. This takes to long and the angular readings will be off.
			if(loop_counter == 0)Serial.print("Pitch: ");
    1b74:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <loop_counter>
    1b78:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <loop_counter+0x1>
    1b7c:	89 2b       	or	r24, r25
    1b7e:	31 f4       	brne	.+12     	; 0x1b8c <loop+0xcba>
    1b80:	6f eb       	ldi	r22, 0xBF	; 191
    1b82:	72 e0       	ldi	r23, 0x02	; 2
    1b84:	87 e4       	ldi	r24, 0x47	; 71
    1b86:	94 e0       	ldi	r25, 0x04	; 4
    1b88:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
			if(loop_counter == 1)Serial.print(angle_pitch ,1);
    1b8c:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <loop_counter>
    1b90:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <loop_counter+0x1>
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	71 f4       	brne	.+28     	; 0x1bb4 <loop+0xce2>
    1b98:	40 91 20 03 	lds	r20, 0x0320	; 0x800320 <angle_pitch>
    1b9c:	50 91 21 03 	lds	r21, 0x0321	; 0x800321 <angle_pitch+0x1>
    1ba0:	60 91 22 03 	lds	r22, 0x0322	; 0x800322 <angle_pitch+0x2>
    1ba4:	70 91 23 03 	lds	r23, 0x0323	; 0x800323 <angle_pitch+0x3>
    1ba8:	21 e0       	ldi	r18, 0x01	; 1
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	87 e4       	ldi	r24, 0x47	; 71
    1bae:	94 e0       	ldi	r25, 0x04	; 4
    1bb0:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN5Print5printEdi>
			if(loop_counter == 2)Serial.print(" Roll: ");
    1bb4:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <loop_counter>
    1bb8:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <loop_counter+0x1>
    1bbc:	02 97       	sbiw	r24, 0x02	; 2
    1bbe:	31 f4       	brne	.+12     	; 0x1bcc <loop+0xcfa>
    1bc0:	67 ec       	ldi	r22, 0xC7	; 199
    1bc2:	72 e0       	ldi	r23, 0x02	; 2
    1bc4:	87 e4       	ldi	r24, 0x47	; 71
    1bc6:	94 e0       	ldi	r25, 0x04	; 4
    1bc8:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
			if(loop_counter == 3)Serial.print(angle_roll ,1);
    1bcc:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <loop_counter>
    1bd0:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <loop_counter+0x1>
    1bd4:	03 97       	sbiw	r24, 0x03	; 3
    1bd6:	71 f4       	brne	.+28     	; 0x1bf4 <loop+0xd22>
    1bd8:	40 91 1c 03 	lds	r20, 0x031C	; 0x80031c <angle_roll>
    1bdc:	50 91 1d 03 	lds	r21, 0x031D	; 0x80031d <angle_roll+0x1>
    1be0:	60 91 1e 03 	lds	r22, 0x031E	; 0x80031e <angle_roll+0x2>
    1be4:	70 91 1f 03 	lds	r23, 0x031F	; 0x80031f <angle_roll+0x3>
    1be8:	21 e0       	ldi	r18, 0x01	; 1
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	87 e4       	ldi	r24, 0x47	; 71
    1bee:	94 e0       	ldi	r25, 0x04	; 4
    1bf0:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN5Print5printEdi>
			if(loop_counter == 4)Serial.print(" Yaw: ");
    1bf4:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <loop_counter>
    1bf8:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <loop_counter+0x1>
    1bfc:	04 97       	sbiw	r24, 0x04	; 4
    1bfe:	31 f4       	brne	.+12     	; 0x1c0c <loop+0xd3a>
    1c00:	6f ec       	ldi	r22, 0xCF	; 207
    1c02:	72 e0       	ldi	r23, 0x02	; 2
    1c04:	87 e4       	ldi	r24, 0x47	; 71
    1c06:	94 e0       	ldi	r25, 0x04	; 4
    1c08:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
			if(loop_counter == 5)Serial.print(gyro_yaw / 65.5 ,1);
    1c0c:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <loop_counter>
    1c10:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <loop_counter+0x1>
    1c14:	05 97       	sbiw	r24, 0x05	; 5
    1c16:	b1 f4       	brne	.+44     	; 0x1c44 <loop+0xd72>
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	43 e8       	ldi	r20, 0x83	; 131
    1c1e:	52 e4       	ldi	r21, 0x42	; 66
    1c20:	60 91 2c 03 	lds	r22, 0x032C	; 0x80032c <gyro_yaw>
    1c24:	70 91 2d 03 	lds	r23, 0x032D	; 0x80032d <gyro_yaw+0x1>
    1c28:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <gyro_yaw+0x2>
    1c2c:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <gyro_yaw+0x3>
    1c30:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__divsf3>
    1c34:	ab 01       	movw	r20, r22
    1c36:	bc 01       	movw	r22, r24
    1c38:	21 e0       	ldi	r18, 0x01	; 1
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	87 e4       	ldi	r24, 0x47	; 71
    1c3e:	94 e0       	ldi	r25, 0x04	; 4
    1c40:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN5Print5printEdi>
			if(loop_counter == 6)Serial.print(" ");
    1c44:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <loop_counter>
    1c48:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <loop_counter+0x1>
    1c4c:	06 97       	sbiw	r24, 0x06	; 6
    1c4e:	31 f4       	brne	.+12     	; 0x1c5c <loop+0xd8a>
    1c50:	65 ec       	ldi	r22, 0xC5	; 197
    1c52:	72 e0       	ldi	r23, 0x02	; 2
    1c54:	87 e4       	ldi	r24, 0x47	; 71
    1c56:	94 e0       	ldi	r25, 0x04	; 4
    1c58:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
			if(loop_counter == 7)Serial.println(angle_yaw , 1);
    1c5c:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <loop_counter>
    1c60:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <loop_counter+0x1>
    1c64:	07 97       	sbiw	r24, 0x07	; 7
    1c66:	71 f4       	brne	.+28     	; 0x1c84 <loop+0xdb2>
    1c68:	40 91 18 03 	lds	r20, 0x0318	; 0x800318 <angle_yaw>
    1c6c:	50 91 19 03 	lds	r21, 0x0319	; 0x800319 <angle_yaw+0x1>
    1c70:	60 91 1a 03 	lds	r22, 0x031A	; 0x80031a <angle_yaw+0x2>
    1c74:	70 91 1b 03 	lds	r23, 0x031B	; 0x80031b <angle_yaw+0x3>
    1c78:	21 e0       	ldi	r18, 0x01	; 1
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	87 e4       	ldi	r24, 0x47	; 71
    1c7e:	94 e0       	ldi	r25, 0x04	; 4
    1c80:	0e 94 ef 15 	call	0x2bde	; 0x2bde <_ZN5Print7printlnEdi>
			//if(loop_counter == 14)Serial.print("|3:");
			//if(loop_counter == 14)Serial.println(gyro_yaw / 65.5 , 2);

			

			loop_counter ++;
    1c84:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <loop_counter>
    1c88:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <loop_counter+0x1>
    1c8c:	01 96       	adiw	r24, 0x01	; 1
			if(loop_counter > 10)loop_counter = 0;
    1c8e:	8b 30       	cpi	r24, 0x0B	; 11
    1c90:	91 05       	cpc	r25, r1
    1c92:	2c f4       	brge	.+10     	; 0x1c9e <loop+0xdcc>
			//if(loop_counter == 14)Serial.print("|3:");
			//if(loop_counter == 14)Serial.println(gyro_yaw / 65.5 , 2);

			

			loop_counter ++;
    1c94:	90 93 f1 03 	sts	0x03F1, r25	; 0x8003f1 <loop_counter+0x1>
    1c98:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <loop_counter>
    1c9c:	10 c0       	rjmp	.+32     	; 0x1cbe <loop+0xdec>
			if(loop_counter > 10)loop_counter = 0;
    1c9e:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <loop_counter+0x1>
    1ca2:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <loop_counter>
			
		}
	}
}
    1ca6:	0b c0       	rjmp	.+22     	; 0x1cbe <loop+0xdec>
			print_signals();                                                                  //Print the receiver values on the serial monitor.
			loop_counter = 0;                                                                 //Reset the loop_counter variable.
		}

		//For starting the motors: throttle low and yaw left (step 1).
		if(receiver_input_channel_3 < 1050 && receiver_input_channel_4 < 1050)start = 1;
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <start>
    1cae:	b7 ca       	rjmp	.-2706   	; 0x121e <loop+0x34c>
		//When yaw stick is back in the center position start the motors (step 2).
		if(start == 1 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1450)start = 2;
    1cb0:	82 e0       	ldi	r24, 0x02	; 2
    1cb2:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <start>
    1cb6:	c6 ca       	rjmp	.-2676   	; 0x1244 <loop+0x372>
		//Stopping the motors: throttle low and yaw right.
		if(start == 2 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1950)start = 0;
    1cb8:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <start>
    1cbc:	d6 ca       	rjmp	.-2644   	; 0x126a <loop+0x398>
			loop_counter ++;
			if(loop_counter > 10)loop_counter = 0;
			
		}
	}
}
    1cbe:	2c 96       	adiw	r28, 0x0c	; 12
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
    1cca:	df 91       	pop	r29
    1ccc:	cf 91       	pop	r28
    1cce:	ff 90       	pop	r15
    1cd0:	ef 90       	pop	r14
    1cd2:	df 90       	pop	r13
    1cd4:	cf 90       	pop	r12
    1cd6:	bf 90       	pop	r11
    1cd8:	af 90       	pop	r10
    1cda:	9f 90       	pop	r9
    1cdc:	8f 90       	pop	r8
    1cde:	7f 90       	pop	r7
    1ce0:	6f 90       	pop	r6
    1ce2:	5f 90       	pop	r5
    1ce4:	4f 90       	pop	r4
    1ce6:	08 95       	ret

00001ce8 <__subsf3>:
    1ce8:	50 58       	subi	r21, 0x80	; 128

00001cea <__addsf3>:
    1cea:	bb 27       	eor	r27, r27
    1cec:	aa 27       	eor	r26, r26
    1cee:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__addsf3x>
    1cf2:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <__fp_round>
    1cf6:	0e 94 45 10 	call	0x208a	; 0x208a <__fp_pscA>
    1cfa:	38 f0       	brcs	.+14     	; 0x1d0a <__addsf3+0x20>
    1cfc:	0e 94 4c 10 	call	0x2098	; 0x2098 <__fp_pscB>
    1d00:	20 f0       	brcs	.+8      	; 0x1d0a <__addsf3+0x20>
    1d02:	39 f4       	brne	.+14     	; 0x1d12 <__addsf3+0x28>
    1d04:	9f 3f       	cpi	r25, 0xFF	; 255
    1d06:	19 f4       	brne	.+6      	; 0x1d0e <__addsf3+0x24>
    1d08:	26 f4       	brtc	.+8      	; 0x1d12 <__addsf3+0x28>
    1d0a:	0c 94 07 10 	jmp	0x200e	; 0x200e <__fp_nan>
    1d0e:	0e f4       	brtc	.+2      	; 0x1d12 <__addsf3+0x28>
    1d10:	e0 95       	com	r30
    1d12:	e7 fb       	bst	r30, 7
    1d14:	0c 94 01 10 	jmp	0x2002	; 0x2002 <__fp_inf>

00001d18 <__addsf3x>:
    1d18:	e9 2f       	mov	r30, r25
    1d1a:	0e 94 64 10 	call	0x20c8	; 0x20c8 <__fp_split3>
    1d1e:	58 f3       	brcs	.-42     	; 0x1cf6 <__addsf3+0xc>
    1d20:	ba 17       	cp	r27, r26
    1d22:	62 07       	cpc	r22, r18
    1d24:	73 07       	cpc	r23, r19
    1d26:	84 07       	cpc	r24, r20
    1d28:	95 07       	cpc	r25, r21
    1d2a:	20 f0       	brcs	.+8      	; 0x1d34 <__addsf3x+0x1c>
    1d2c:	79 f4       	brne	.+30     	; 0x1d4c <__addsf3x+0x34>
    1d2e:	a6 f5       	brtc	.+104    	; 0x1d98 <__addsf3x+0x80>
    1d30:	0c 94 86 10 	jmp	0x210c	; 0x210c <__fp_zero>
    1d34:	0e f4       	brtc	.+2      	; 0x1d38 <__addsf3x+0x20>
    1d36:	e0 95       	com	r30
    1d38:	0b 2e       	mov	r0, r27
    1d3a:	ba 2f       	mov	r27, r26
    1d3c:	a0 2d       	mov	r26, r0
    1d3e:	0b 01       	movw	r0, r22
    1d40:	b9 01       	movw	r22, r18
    1d42:	90 01       	movw	r18, r0
    1d44:	0c 01       	movw	r0, r24
    1d46:	ca 01       	movw	r24, r20
    1d48:	a0 01       	movw	r20, r0
    1d4a:	11 24       	eor	r1, r1
    1d4c:	ff 27       	eor	r31, r31
    1d4e:	59 1b       	sub	r21, r25
    1d50:	99 f0       	breq	.+38     	; 0x1d78 <__addsf3x+0x60>
    1d52:	59 3f       	cpi	r21, 0xF9	; 249
    1d54:	50 f4       	brcc	.+20     	; 0x1d6a <__addsf3x+0x52>
    1d56:	50 3e       	cpi	r21, 0xE0	; 224
    1d58:	68 f1       	brcs	.+90     	; 0x1db4 <__addsf3x+0x9c>
    1d5a:	1a 16       	cp	r1, r26
    1d5c:	f0 40       	sbci	r31, 0x00	; 0
    1d5e:	a2 2f       	mov	r26, r18
    1d60:	23 2f       	mov	r18, r19
    1d62:	34 2f       	mov	r19, r20
    1d64:	44 27       	eor	r20, r20
    1d66:	58 5f       	subi	r21, 0xF8	; 248
    1d68:	f3 cf       	rjmp	.-26     	; 0x1d50 <__addsf3x+0x38>
    1d6a:	46 95       	lsr	r20
    1d6c:	37 95       	ror	r19
    1d6e:	27 95       	ror	r18
    1d70:	a7 95       	ror	r26
    1d72:	f0 40       	sbci	r31, 0x00	; 0
    1d74:	53 95       	inc	r21
    1d76:	c9 f7       	brne	.-14     	; 0x1d6a <__addsf3x+0x52>
    1d78:	7e f4       	brtc	.+30     	; 0x1d98 <__addsf3x+0x80>
    1d7a:	1f 16       	cp	r1, r31
    1d7c:	ba 0b       	sbc	r27, r26
    1d7e:	62 0b       	sbc	r22, r18
    1d80:	73 0b       	sbc	r23, r19
    1d82:	84 0b       	sbc	r24, r20
    1d84:	ba f0       	brmi	.+46     	; 0x1db4 <__addsf3x+0x9c>
    1d86:	91 50       	subi	r25, 0x01	; 1
    1d88:	a1 f0       	breq	.+40     	; 0x1db2 <__addsf3x+0x9a>
    1d8a:	ff 0f       	add	r31, r31
    1d8c:	bb 1f       	adc	r27, r27
    1d8e:	66 1f       	adc	r22, r22
    1d90:	77 1f       	adc	r23, r23
    1d92:	88 1f       	adc	r24, r24
    1d94:	c2 f7       	brpl	.-16     	; 0x1d86 <__addsf3x+0x6e>
    1d96:	0e c0       	rjmp	.+28     	; 0x1db4 <__addsf3x+0x9c>
    1d98:	ba 0f       	add	r27, r26
    1d9a:	62 1f       	adc	r22, r18
    1d9c:	73 1f       	adc	r23, r19
    1d9e:	84 1f       	adc	r24, r20
    1da0:	48 f4       	brcc	.+18     	; 0x1db4 <__addsf3x+0x9c>
    1da2:	87 95       	ror	r24
    1da4:	77 95       	ror	r23
    1da6:	67 95       	ror	r22
    1da8:	b7 95       	ror	r27
    1daa:	f7 95       	ror	r31
    1dac:	9e 3f       	cpi	r25, 0xFE	; 254
    1dae:	08 f0       	brcs	.+2      	; 0x1db2 <__addsf3x+0x9a>
    1db0:	b0 cf       	rjmp	.-160    	; 0x1d12 <__addsf3+0x28>
    1db2:	93 95       	inc	r25
    1db4:	88 0f       	add	r24, r24
    1db6:	08 f0       	brcs	.+2      	; 0x1dba <__addsf3x+0xa2>
    1db8:	99 27       	eor	r25, r25
    1dba:	ee 0f       	add	r30, r30
    1dbc:	97 95       	ror	r25
    1dbe:	87 95       	ror	r24
    1dc0:	08 95       	ret

00001dc2 <asin>:
    1dc2:	9f 93       	push	r25
    1dc4:	9f 77       	andi	r25, 0x7F	; 127
    1dc6:	ee e3       	ldi	r30, 0x3E	; 62
    1dc8:	89 37       	cpi	r24, 0x79	; 121
    1dca:	9e 07       	cpc	r25, r30
    1dcc:	28 f4       	brcc	.+10     	; 0x1dd8 <asin+0x16>
    1dce:	e8 e6       	ldi	r30, 0x68	; 104
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	0e 94 31 10 	call	0x2062	; 0x2062 <__fp_powsodd>
    1dd6:	0c c0       	rjmp	.+24     	; 0x1df0 <asin+0x2e>
    1dd8:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__fp_arccos>
    1ddc:	90 58       	subi	r25, 0x80	; 128
    1dde:	a2 ea       	ldi	r26, 0xA2	; 162
    1de0:	2a ed       	ldi	r18, 0xDA	; 218
    1de2:	3f e0       	ldi	r19, 0x0F	; 15
    1de4:	49 ec       	ldi	r20, 0xC9	; 201
    1de6:	5f e3       	ldi	r21, 0x3F	; 63
    1de8:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__addsf3x>
    1dec:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__fp_round>
    1df0:	0f 90       	pop	r0
    1df2:	07 fc       	sbrc	r0, 7
    1df4:	90 58       	subi	r25, 0x80	; 128
    1df6:	08 95       	ret

00001df8 <__divsf3>:
    1df8:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__divsf3x>
    1dfc:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <__fp_round>
    1e00:	0e 94 4c 10 	call	0x2098	; 0x2098 <__fp_pscB>
    1e04:	58 f0       	brcs	.+22     	; 0x1e1c <__divsf3+0x24>
    1e06:	0e 94 45 10 	call	0x208a	; 0x208a <__fp_pscA>
    1e0a:	40 f0       	brcs	.+16     	; 0x1e1c <__divsf3+0x24>
    1e0c:	29 f4       	brne	.+10     	; 0x1e18 <__divsf3+0x20>
    1e0e:	5f 3f       	cpi	r21, 0xFF	; 255
    1e10:	29 f0       	breq	.+10     	; 0x1e1c <__divsf3+0x24>
    1e12:	0c 94 01 10 	jmp	0x2002	; 0x2002 <__fp_inf>
    1e16:	51 11       	cpse	r21, r1
    1e18:	0c 94 87 10 	jmp	0x210e	; 0x210e <__fp_szero>
    1e1c:	0c 94 07 10 	jmp	0x200e	; 0x200e <__fp_nan>

00001e20 <__divsf3x>:
    1e20:	0e 94 64 10 	call	0x20c8	; 0x20c8 <__fp_split3>
    1e24:	68 f3       	brcs	.-38     	; 0x1e00 <__divsf3+0x8>

00001e26 <__divsf3_pse>:
    1e26:	99 23       	and	r25, r25
    1e28:	b1 f3       	breq	.-20     	; 0x1e16 <__divsf3+0x1e>
    1e2a:	55 23       	and	r21, r21
    1e2c:	91 f3       	breq	.-28     	; 0x1e12 <__divsf3+0x1a>
    1e2e:	95 1b       	sub	r25, r21
    1e30:	55 0b       	sbc	r21, r21
    1e32:	bb 27       	eor	r27, r27
    1e34:	aa 27       	eor	r26, r26
    1e36:	62 17       	cp	r22, r18
    1e38:	73 07       	cpc	r23, r19
    1e3a:	84 07       	cpc	r24, r20
    1e3c:	38 f0       	brcs	.+14     	; 0x1e4c <__divsf3_pse+0x26>
    1e3e:	9f 5f       	subi	r25, 0xFF	; 255
    1e40:	5f 4f       	sbci	r21, 0xFF	; 255
    1e42:	22 0f       	add	r18, r18
    1e44:	33 1f       	adc	r19, r19
    1e46:	44 1f       	adc	r20, r20
    1e48:	aa 1f       	adc	r26, r26
    1e4a:	a9 f3       	breq	.-22     	; 0x1e36 <__divsf3_pse+0x10>
    1e4c:	35 d0       	rcall	.+106    	; 0x1eb8 <__divsf3_pse+0x92>
    1e4e:	0e 2e       	mov	r0, r30
    1e50:	3a f0       	brmi	.+14     	; 0x1e60 <__divsf3_pse+0x3a>
    1e52:	e0 e8       	ldi	r30, 0x80	; 128
    1e54:	32 d0       	rcall	.+100    	; 0x1eba <__divsf3_pse+0x94>
    1e56:	91 50       	subi	r25, 0x01	; 1
    1e58:	50 40       	sbci	r21, 0x00	; 0
    1e5a:	e6 95       	lsr	r30
    1e5c:	00 1c       	adc	r0, r0
    1e5e:	ca f7       	brpl	.-14     	; 0x1e52 <__divsf3_pse+0x2c>
    1e60:	2b d0       	rcall	.+86     	; 0x1eb8 <__divsf3_pse+0x92>
    1e62:	fe 2f       	mov	r31, r30
    1e64:	29 d0       	rcall	.+82     	; 0x1eb8 <__divsf3_pse+0x92>
    1e66:	66 0f       	add	r22, r22
    1e68:	77 1f       	adc	r23, r23
    1e6a:	88 1f       	adc	r24, r24
    1e6c:	bb 1f       	adc	r27, r27
    1e6e:	26 17       	cp	r18, r22
    1e70:	37 07       	cpc	r19, r23
    1e72:	48 07       	cpc	r20, r24
    1e74:	ab 07       	cpc	r26, r27
    1e76:	b0 e8       	ldi	r27, 0x80	; 128
    1e78:	09 f0       	breq	.+2      	; 0x1e7c <__divsf3_pse+0x56>
    1e7a:	bb 0b       	sbc	r27, r27
    1e7c:	80 2d       	mov	r24, r0
    1e7e:	bf 01       	movw	r22, r30
    1e80:	ff 27       	eor	r31, r31
    1e82:	93 58       	subi	r25, 0x83	; 131
    1e84:	5f 4f       	sbci	r21, 0xFF	; 255
    1e86:	3a f0       	brmi	.+14     	; 0x1e96 <__divsf3_pse+0x70>
    1e88:	9e 3f       	cpi	r25, 0xFE	; 254
    1e8a:	51 05       	cpc	r21, r1
    1e8c:	78 f0       	brcs	.+30     	; 0x1eac <__divsf3_pse+0x86>
    1e8e:	0c 94 01 10 	jmp	0x2002	; 0x2002 <__fp_inf>
    1e92:	0c 94 87 10 	jmp	0x210e	; 0x210e <__fp_szero>
    1e96:	5f 3f       	cpi	r21, 0xFF	; 255
    1e98:	e4 f3       	brlt	.-8      	; 0x1e92 <__divsf3_pse+0x6c>
    1e9a:	98 3e       	cpi	r25, 0xE8	; 232
    1e9c:	d4 f3       	brlt	.-12     	; 0x1e92 <__divsf3_pse+0x6c>
    1e9e:	86 95       	lsr	r24
    1ea0:	77 95       	ror	r23
    1ea2:	67 95       	ror	r22
    1ea4:	b7 95       	ror	r27
    1ea6:	f7 95       	ror	r31
    1ea8:	9f 5f       	subi	r25, 0xFF	; 255
    1eaa:	c9 f7       	brne	.-14     	; 0x1e9e <__divsf3_pse+0x78>
    1eac:	88 0f       	add	r24, r24
    1eae:	91 1d       	adc	r25, r1
    1eb0:	96 95       	lsr	r25
    1eb2:	87 95       	ror	r24
    1eb4:	97 f9       	bld	r25, 7
    1eb6:	08 95       	ret
    1eb8:	e1 e0       	ldi	r30, 0x01	; 1
    1eba:	66 0f       	add	r22, r22
    1ebc:	77 1f       	adc	r23, r23
    1ebe:	88 1f       	adc	r24, r24
    1ec0:	bb 1f       	adc	r27, r27
    1ec2:	62 17       	cp	r22, r18
    1ec4:	73 07       	cpc	r23, r19
    1ec6:	84 07       	cpc	r24, r20
    1ec8:	ba 07       	cpc	r27, r26
    1eca:	20 f0       	brcs	.+8      	; 0x1ed4 <__divsf3_pse+0xae>
    1ecc:	62 1b       	sub	r22, r18
    1ece:	73 0b       	sbc	r23, r19
    1ed0:	84 0b       	sbc	r24, r20
    1ed2:	ba 0b       	sbc	r27, r26
    1ed4:	ee 1f       	adc	r30, r30
    1ed6:	88 f7       	brcc	.-30     	; 0x1eba <__divsf3_pse+0x94>
    1ed8:	e0 95       	com	r30
    1eda:	08 95       	ret

00001edc <__fixsfsi>:
    1edc:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__fixunssfsi>
    1ee0:	68 94       	set
    1ee2:	b1 11       	cpse	r27, r1
    1ee4:	0c 94 87 10 	jmp	0x210e	; 0x210e <__fp_szero>
    1ee8:	08 95       	ret

00001eea <__fixunssfsi>:
    1eea:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__fp_splitA>
    1eee:	88 f0       	brcs	.+34     	; 0x1f12 <__fixunssfsi+0x28>
    1ef0:	9f 57       	subi	r25, 0x7F	; 127
    1ef2:	98 f0       	brcs	.+38     	; 0x1f1a <__fixunssfsi+0x30>
    1ef4:	b9 2f       	mov	r27, r25
    1ef6:	99 27       	eor	r25, r25
    1ef8:	b7 51       	subi	r27, 0x17	; 23
    1efa:	b0 f0       	brcs	.+44     	; 0x1f28 <__fixunssfsi+0x3e>
    1efc:	e1 f0       	breq	.+56     	; 0x1f36 <__fixunssfsi+0x4c>
    1efe:	66 0f       	add	r22, r22
    1f00:	77 1f       	adc	r23, r23
    1f02:	88 1f       	adc	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	1a f0       	brmi	.+6      	; 0x1f0e <__fixunssfsi+0x24>
    1f08:	ba 95       	dec	r27
    1f0a:	c9 f7       	brne	.-14     	; 0x1efe <__fixunssfsi+0x14>
    1f0c:	14 c0       	rjmp	.+40     	; 0x1f36 <__fixunssfsi+0x4c>
    1f0e:	b1 30       	cpi	r27, 0x01	; 1
    1f10:	91 f0       	breq	.+36     	; 0x1f36 <__fixunssfsi+0x4c>
    1f12:	0e 94 86 10 	call	0x210c	; 0x210c <__fp_zero>
    1f16:	b1 e0       	ldi	r27, 0x01	; 1
    1f18:	08 95       	ret
    1f1a:	0c 94 86 10 	jmp	0x210c	; 0x210c <__fp_zero>
    1f1e:	67 2f       	mov	r22, r23
    1f20:	78 2f       	mov	r23, r24
    1f22:	88 27       	eor	r24, r24
    1f24:	b8 5f       	subi	r27, 0xF8	; 248
    1f26:	39 f0       	breq	.+14     	; 0x1f36 <__fixunssfsi+0x4c>
    1f28:	b9 3f       	cpi	r27, 0xF9	; 249
    1f2a:	cc f3       	brlt	.-14     	; 0x1f1e <__fixunssfsi+0x34>
    1f2c:	86 95       	lsr	r24
    1f2e:	77 95       	ror	r23
    1f30:	67 95       	ror	r22
    1f32:	b3 95       	inc	r27
    1f34:	d9 f7       	brne	.-10     	; 0x1f2c <__fixunssfsi+0x42>
    1f36:	3e f4       	brtc	.+14     	; 0x1f46 <__fixunssfsi+0x5c>
    1f38:	90 95       	com	r25
    1f3a:	80 95       	com	r24
    1f3c:	70 95       	com	r23
    1f3e:	61 95       	neg	r22
    1f40:	7f 4f       	sbci	r23, 0xFF	; 255
    1f42:	8f 4f       	sbci	r24, 0xFF	; 255
    1f44:	9f 4f       	sbci	r25, 0xFF	; 255
    1f46:	08 95       	ret

00001f48 <__floatunsisf>:
    1f48:	e8 94       	clt
    1f4a:	09 c0       	rjmp	.+18     	; 0x1f5e <__floatsisf+0x12>

00001f4c <__floatsisf>:
    1f4c:	97 fb       	bst	r25, 7
    1f4e:	3e f4       	brtc	.+14     	; 0x1f5e <__floatsisf+0x12>
    1f50:	90 95       	com	r25
    1f52:	80 95       	com	r24
    1f54:	70 95       	com	r23
    1f56:	61 95       	neg	r22
    1f58:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f5e:	99 23       	and	r25, r25
    1f60:	a9 f0       	breq	.+42     	; 0x1f8c <__floatsisf+0x40>
    1f62:	f9 2f       	mov	r31, r25
    1f64:	96 e9       	ldi	r25, 0x96	; 150
    1f66:	bb 27       	eor	r27, r27
    1f68:	93 95       	inc	r25
    1f6a:	f6 95       	lsr	r31
    1f6c:	87 95       	ror	r24
    1f6e:	77 95       	ror	r23
    1f70:	67 95       	ror	r22
    1f72:	b7 95       	ror	r27
    1f74:	f1 11       	cpse	r31, r1
    1f76:	f8 cf       	rjmp	.-16     	; 0x1f68 <__floatsisf+0x1c>
    1f78:	fa f4       	brpl	.+62     	; 0x1fb8 <__floatsisf+0x6c>
    1f7a:	bb 0f       	add	r27, r27
    1f7c:	11 f4       	brne	.+4      	; 0x1f82 <__floatsisf+0x36>
    1f7e:	60 ff       	sbrs	r22, 0
    1f80:	1b c0       	rjmp	.+54     	; 0x1fb8 <__floatsisf+0x6c>
    1f82:	6f 5f       	subi	r22, 0xFF	; 255
    1f84:	7f 4f       	sbci	r23, 0xFF	; 255
    1f86:	8f 4f       	sbci	r24, 0xFF	; 255
    1f88:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8a:	16 c0       	rjmp	.+44     	; 0x1fb8 <__floatsisf+0x6c>
    1f8c:	88 23       	and	r24, r24
    1f8e:	11 f0       	breq	.+4      	; 0x1f94 <__floatsisf+0x48>
    1f90:	96 e9       	ldi	r25, 0x96	; 150
    1f92:	11 c0       	rjmp	.+34     	; 0x1fb6 <__floatsisf+0x6a>
    1f94:	77 23       	and	r23, r23
    1f96:	21 f0       	breq	.+8      	; 0x1fa0 <__floatsisf+0x54>
    1f98:	9e e8       	ldi	r25, 0x8E	; 142
    1f9a:	87 2f       	mov	r24, r23
    1f9c:	76 2f       	mov	r23, r22
    1f9e:	05 c0       	rjmp	.+10     	; 0x1faa <__floatsisf+0x5e>
    1fa0:	66 23       	and	r22, r22
    1fa2:	71 f0       	breq	.+28     	; 0x1fc0 <__floatsisf+0x74>
    1fa4:	96 e8       	ldi	r25, 0x86	; 134
    1fa6:	86 2f       	mov	r24, r22
    1fa8:	70 e0       	ldi	r23, 0x00	; 0
    1faa:	60 e0       	ldi	r22, 0x00	; 0
    1fac:	2a f0       	brmi	.+10     	; 0x1fb8 <__floatsisf+0x6c>
    1fae:	9a 95       	dec	r25
    1fb0:	66 0f       	add	r22, r22
    1fb2:	77 1f       	adc	r23, r23
    1fb4:	88 1f       	adc	r24, r24
    1fb6:	da f7       	brpl	.-10     	; 0x1fae <__floatsisf+0x62>
    1fb8:	88 0f       	add	r24, r24
    1fba:	96 95       	lsr	r25
    1fbc:	87 95       	ror	r24
    1fbe:	97 f9       	bld	r25, 7
    1fc0:	08 95       	ret

00001fc2 <__fp_arccos>:
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	1f 93       	push	r17
    1fc8:	0f 93       	push	r16
    1fca:	8b 01       	movw	r16, r22
    1fcc:	ec 01       	movw	r28, r24
    1fce:	ec e7       	ldi	r30, 0x7C	; 124
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	0e 94 0a 10 	call	0x2014	; 0x2014 <__fp_powser>
    1fd6:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__fp_round>
    1fda:	98 01       	movw	r18, r16
    1fdc:	ae 01       	movw	r20, r28
    1fde:	8b 01       	movw	r16, r22
    1fe0:	ec 01       	movw	r28, r24
    1fe2:	60 e0       	ldi	r22, 0x00	; 0
    1fe4:	70 e0       	ldi	r23, 0x00	; 0
    1fe6:	80 e8       	ldi	r24, 0x80	; 128
    1fe8:	9f e3       	ldi	r25, 0x3F	; 63
    1fea:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
    1fee:	0e 94 08 11 	call	0x2210	; 0x2210 <sqrt>
    1ff2:	98 01       	movw	r18, r16
    1ff4:	ae 01       	movw	r20, r28
    1ff6:	0f 91       	pop	r16
    1ff8:	1f 91       	pop	r17
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	0c 94 a0 10 	jmp	0x2140	; 0x2140 <__mulsf3x>

00002002 <__fp_inf>:
    2002:	97 f9       	bld	r25, 7
    2004:	9f 67       	ori	r25, 0x7F	; 127
    2006:	80 e8       	ldi	r24, 0x80	; 128
    2008:	70 e0       	ldi	r23, 0x00	; 0
    200a:	60 e0       	ldi	r22, 0x00	; 0
    200c:	08 95       	ret

0000200e <__fp_nan>:
    200e:	9f ef       	ldi	r25, 0xFF	; 255
    2010:	80 ec       	ldi	r24, 0xC0	; 192
    2012:	08 95       	ret

00002014 <__fp_powser>:
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	1f 93       	push	r17
    201a:	0f 93       	push	r16
    201c:	ff 92       	push	r15
    201e:	ef 92       	push	r14
    2020:	df 92       	push	r13
    2022:	7b 01       	movw	r14, r22
    2024:	8c 01       	movw	r16, r24
    2026:	68 94       	set
    2028:	06 c0       	rjmp	.+12     	; 0x2036 <__fp_powser+0x22>
    202a:	da 2e       	mov	r13, r26
    202c:	ef 01       	movw	r28, r30
    202e:	0e 94 a0 10 	call	0x2140	; 0x2140 <__mulsf3x>
    2032:	fe 01       	movw	r30, r28
    2034:	e8 94       	clt
    2036:	a5 91       	lpm	r26, Z+
    2038:	25 91       	lpm	r18, Z+
    203a:	35 91       	lpm	r19, Z+
    203c:	45 91       	lpm	r20, Z+
    203e:	55 91       	lpm	r21, Z+
    2040:	a6 f3       	brts	.-24     	; 0x202a <__fp_powser+0x16>
    2042:	ef 01       	movw	r28, r30
    2044:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__addsf3x>
    2048:	fe 01       	movw	r30, r28
    204a:	97 01       	movw	r18, r14
    204c:	a8 01       	movw	r20, r16
    204e:	da 94       	dec	r13
    2050:	69 f7       	brne	.-38     	; 0x202c <__fp_powser+0x18>
    2052:	df 90       	pop	r13
    2054:	ef 90       	pop	r14
    2056:	ff 90       	pop	r15
    2058:	0f 91       	pop	r16
    205a:	1f 91       	pop	r17
    205c:	cf 91       	pop	r28
    205e:	df 91       	pop	r29
    2060:	08 95       	ret

00002062 <__fp_powsodd>:
    2062:	9f 93       	push	r25
    2064:	8f 93       	push	r24
    2066:	7f 93       	push	r23
    2068:	6f 93       	push	r22
    206a:	ff 93       	push	r31
    206c:	ef 93       	push	r30
    206e:	9b 01       	movw	r18, r22
    2070:	ac 01       	movw	r20, r24
    2072:	0e 94 8d 10 	call	0x211a	; 0x211a <__mulsf3>
    2076:	ef 91       	pop	r30
    2078:	ff 91       	pop	r31
    207a:	0e 94 0a 10 	call	0x2014	; 0x2014 <__fp_powser>
    207e:	2f 91       	pop	r18
    2080:	3f 91       	pop	r19
    2082:	4f 91       	pop	r20
    2084:	5f 91       	pop	r21
    2086:	0c 94 8d 10 	jmp	0x211a	; 0x211a <__mulsf3>

0000208a <__fp_pscA>:
    208a:	00 24       	eor	r0, r0
    208c:	0a 94       	dec	r0
    208e:	16 16       	cp	r1, r22
    2090:	17 06       	cpc	r1, r23
    2092:	18 06       	cpc	r1, r24
    2094:	09 06       	cpc	r0, r25
    2096:	08 95       	ret

00002098 <__fp_pscB>:
    2098:	00 24       	eor	r0, r0
    209a:	0a 94       	dec	r0
    209c:	12 16       	cp	r1, r18
    209e:	13 06       	cpc	r1, r19
    20a0:	14 06       	cpc	r1, r20
    20a2:	05 06       	cpc	r0, r21
    20a4:	08 95       	ret

000020a6 <__fp_round>:
    20a6:	09 2e       	mov	r0, r25
    20a8:	03 94       	inc	r0
    20aa:	00 0c       	add	r0, r0
    20ac:	11 f4       	brne	.+4      	; 0x20b2 <__fp_round+0xc>
    20ae:	88 23       	and	r24, r24
    20b0:	52 f0       	brmi	.+20     	; 0x20c6 <__fp_round+0x20>
    20b2:	bb 0f       	add	r27, r27
    20b4:	40 f4       	brcc	.+16     	; 0x20c6 <__fp_round+0x20>
    20b6:	bf 2b       	or	r27, r31
    20b8:	11 f4       	brne	.+4      	; 0x20be <__fp_round+0x18>
    20ba:	60 ff       	sbrs	r22, 0
    20bc:	04 c0       	rjmp	.+8      	; 0x20c6 <__fp_round+0x20>
    20be:	6f 5f       	subi	r22, 0xFF	; 255
    20c0:	7f 4f       	sbci	r23, 0xFF	; 255
    20c2:	8f 4f       	sbci	r24, 0xFF	; 255
    20c4:	9f 4f       	sbci	r25, 0xFF	; 255
    20c6:	08 95       	ret

000020c8 <__fp_split3>:
    20c8:	57 fd       	sbrc	r21, 7
    20ca:	90 58       	subi	r25, 0x80	; 128
    20cc:	44 0f       	add	r20, r20
    20ce:	55 1f       	adc	r21, r21
    20d0:	59 f0       	breq	.+22     	; 0x20e8 <__fp_splitA+0x10>
    20d2:	5f 3f       	cpi	r21, 0xFF	; 255
    20d4:	71 f0       	breq	.+28     	; 0x20f2 <__fp_splitA+0x1a>
    20d6:	47 95       	ror	r20

000020d8 <__fp_splitA>:
    20d8:	88 0f       	add	r24, r24
    20da:	97 fb       	bst	r25, 7
    20dc:	99 1f       	adc	r25, r25
    20de:	61 f0       	breq	.+24     	; 0x20f8 <__fp_splitA+0x20>
    20e0:	9f 3f       	cpi	r25, 0xFF	; 255
    20e2:	79 f0       	breq	.+30     	; 0x2102 <__fp_splitA+0x2a>
    20e4:	87 95       	ror	r24
    20e6:	08 95       	ret
    20e8:	12 16       	cp	r1, r18
    20ea:	13 06       	cpc	r1, r19
    20ec:	14 06       	cpc	r1, r20
    20ee:	55 1f       	adc	r21, r21
    20f0:	f2 cf       	rjmp	.-28     	; 0x20d6 <__fp_split3+0xe>
    20f2:	46 95       	lsr	r20
    20f4:	f1 df       	rcall	.-30     	; 0x20d8 <__fp_splitA>
    20f6:	08 c0       	rjmp	.+16     	; 0x2108 <__fp_splitA+0x30>
    20f8:	16 16       	cp	r1, r22
    20fa:	17 06       	cpc	r1, r23
    20fc:	18 06       	cpc	r1, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	f1 cf       	rjmp	.-30     	; 0x20e4 <__fp_splitA+0xc>
    2102:	86 95       	lsr	r24
    2104:	71 05       	cpc	r23, r1
    2106:	61 05       	cpc	r22, r1
    2108:	08 94       	sec
    210a:	08 95       	ret

0000210c <__fp_zero>:
    210c:	e8 94       	clt

0000210e <__fp_szero>:
    210e:	bb 27       	eor	r27, r27
    2110:	66 27       	eor	r22, r22
    2112:	77 27       	eor	r23, r23
    2114:	cb 01       	movw	r24, r22
    2116:	97 f9       	bld	r25, 7
    2118:	08 95       	ret

0000211a <__mulsf3>:
    211a:	0e 94 a0 10 	call	0x2140	; 0x2140 <__mulsf3x>
    211e:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <__fp_round>
    2122:	0e 94 45 10 	call	0x208a	; 0x208a <__fp_pscA>
    2126:	38 f0       	brcs	.+14     	; 0x2136 <__mulsf3+0x1c>
    2128:	0e 94 4c 10 	call	0x2098	; 0x2098 <__fp_pscB>
    212c:	20 f0       	brcs	.+8      	; 0x2136 <__mulsf3+0x1c>
    212e:	95 23       	and	r25, r21
    2130:	11 f0       	breq	.+4      	; 0x2136 <__mulsf3+0x1c>
    2132:	0c 94 01 10 	jmp	0x2002	; 0x2002 <__fp_inf>
    2136:	0c 94 07 10 	jmp	0x200e	; 0x200e <__fp_nan>
    213a:	11 24       	eor	r1, r1
    213c:	0c 94 87 10 	jmp	0x210e	; 0x210e <__fp_szero>

00002140 <__mulsf3x>:
    2140:	0e 94 64 10 	call	0x20c8	; 0x20c8 <__fp_split3>
    2144:	70 f3       	brcs	.-36     	; 0x2122 <__mulsf3+0x8>

00002146 <__mulsf3_pse>:
    2146:	95 9f       	mul	r25, r21
    2148:	c1 f3       	breq	.-16     	; 0x213a <__mulsf3+0x20>
    214a:	95 0f       	add	r25, r21
    214c:	50 e0       	ldi	r21, 0x00	; 0
    214e:	55 1f       	adc	r21, r21
    2150:	62 9f       	mul	r22, r18
    2152:	f0 01       	movw	r30, r0
    2154:	72 9f       	mul	r23, r18
    2156:	bb 27       	eor	r27, r27
    2158:	f0 0d       	add	r31, r0
    215a:	b1 1d       	adc	r27, r1
    215c:	63 9f       	mul	r22, r19
    215e:	aa 27       	eor	r26, r26
    2160:	f0 0d       	add	r31, r0
    2162:	b1 1d       	adc	r27, r1
    2164:	aa 1f       	adc	r26, r26
    2166:	64 9f       	mul	r22, r20
    2168:	66 27       	eor	r22, r22
    216a:	b0 0d       	add	r27, r0
    216c:	a1 1d       	adc	r26, r1
    216e:	66 1f       	adc	r22, r22
    2170:	82 9f       	mul	r24, r18
    2172:	22 27       	eor	r18, r18
    2174:	b0 0d       	add	r27, r0
    2176:	a1 1d       	adc	r26, r1
    2178:	62 1f       	adc	r22, r18
    217a:	73 9f       	mul	r23, r19
    217c:	b0 0d       	add	r27, r0
    217e:	a1 1d       	adc	r26, r1
    2180:	62 1f       	adc	r22, r18
    2182:	83 9f       	mul	r24, r19
    2184:	a0 0d       	add	r26, r0
    2186:	61 1d       	adc	r22, r1
    2188:	22 1f       	adc	r18, r18
    218a:	74 9f       	mul	r23, r20
    218c:	33 27       	eor	r19, r19
    218e:	a0 0d       	add	r26, r0
    2190:	61 1d       	adc	r22, r1
    2192:	23 1f       	adc	r18, r19
    2194:	84 9f       	mul	r24, r20
    2196:	60 0d       	add	r22, r0
    2198:	21 1d       	adc	r18, r1
    219a:	82 2f       	mov	r24, r18
    219c:	76 2f       	mov	r23, r22
    219e:	6a 2f       	mov	r22, r26
    21a0:	11 24       	eor	r1, r1
    21a2:	9f 57       	subi	r25, 0x7F	; 127
    21a4:	50 40       	sbci	r21, 0x00	; 0
    21a6:	9a f0       	brmi	.+38     	; 0x21ce <__mulsf3_pse+0x88>
    21a8:	f1 f0       	breq	.+60     	; 0x21e6 <__mulsf3_pse+0xa0>
    21aa:	88 23       	and	r24, r24
    21ac:	4a f0       	brmi	.+18     	; 0x21c0 <__mulsf3_pse+0x7a>
    21ae:	ee 0f       	add	r30, r30
    21b0:	ff 1f       	adc	r31, r31
    21b2:	bb 1f       	adc	r27, r27
    21b4:	66 1f       	adc	r22, r22
    21b6:	77 1f       	adc	r23, r23
    21b8:	88 1f       	adc	r24, r24
    21ba:	91 50       	subi	r25, 0x01	; 1
    21bc:	50 40       	sbci	r21, 0x00	; 0
    21be:	a9 f7       	brne	.-22     	; 0x21aa <__mulsf3_pse+0x64>
    21c0:	9e 3f       	cpi	r25, 0xFE	; 254
    21c2:	51 05       	cpc	r21, r1
    21c4:	80 f0       	brcs	.+32     	; 0x21e6 <__mulsf3_pse+0xa0>
    21c6:	0c 94 01 10 	jmp	0x2002	; 0x2002 <__fp_inf>
    21ca:	0c 94 87 10 	jmp	0x210e	; 0x210e <__fp_szero>
    21ce:	5f 3f       	cpi	r21, 0xFF	; 255
    21d0:	e4 f3       	brlt	.-8      	; 0x21ca <__mulsf3_pse+0x84>
    21d2:	98 3e       	cpi	r25, 0xE8	; 232
    21d4:	d4 f3       	brlt	.-12     	; 0x21ca <__mulsf3_pse+0x84>
    21d6:	86 95       	lsr	r24
    21d8:	77 95       	ror	r23
    21da:	67 95       	ror	r22
    21dc:	b7 95       	ror	r27
    21de:	f7 95       	ror	r31
    21e0:	e7 95       	ror	r30
    21e2:	9f 5f       	subi	r25, 0xFF	; 255
    21e4:	c1 f7       	brne	.-16     	; 0x21d6 <__mulsf3_pse+0x90>
    21e6:	fe 2b       	or	r31, r30
    21e8:	88 0f       	add	r24, r24
    21ea:	91 1d       	adc	r25, r1
    21ec:	96 95       	lsr	r25
    21ee:	87 95       	ror	r24
    21f0:	97 f9       	bld	r25, 7
    21f2:	08 95       	ret

000021f4 <sin>:
    21f4:	9f 93       	push	r25
    21f6:	0e 94 5f 11 	call	0x22be	; 0x22be <__fp_rempio2>
    21fa:	0f 90       	pop	r0
    21fc:	07 fc       	sbrc	r0, 7
    21fe:	ee 5f       	subi	r30, 0xFE	; 254
    2200:	0c 94 88 11 	jmp	0x2310	; 0x2310 <__fp_sinus>
    2204:	19 f4       	brne	.+6      	; 0x220c <sin+0x18>
    2206:	16 f4       	brtc	.+4      	; 0x220c <sin+0x18>
    2208:	0c 94 07 10 	jmp	0x200e	; 0x200e <__fp_nan>
    220c:	0c 94 48 11 	jmp	0x2290	; 0x2290 <__fp_mpack>

00002210 <sqrt>:
    2210:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__fp_splitA>
    2214:	b8 f3       	brcs	.-18     	; 0x2204 <sin+0x10>
    2216:	99 23       	and	r25, r25
    2218:	c9 f3       	breq	.-14     	; 0x220c <sin+0x18>
    221a:	b6 f3       	brts	.-20     	; 0x2208 <sin+0x14>
    221c:	9f 57       	subi	r25, 0x7F	; 127
    221e:	55 0b       	sbc	r21, r21
    2220:	87 ff       	sbrs	r24, 7
    2222:	0e 94 56 11 	call	0x22ac	; 0x22ac <__fp_norm2>
    2226:	00 24       	eor	r0, r0
    2228:	a0 e6       	ldi	r26, 0x60	; 96
    222a:	40 ea       	ldi	r20, 0xA0	; 160
    222c:	90 01       	movw	r18, r0
    222e:	80 58       	subi	r24, 0x80	; 128
    2230:	56 95       	lsr	r21
    2232:	97 95       	ror	r25
    2234:	28 f4       	brcc	.+10     	; 0x2240 <sqrt+0x30>
    2236:	80 5c       	subi	r24, 0xC0	; 192
    2238:	66 0f       	add	r22, r22
    223a:	77 1f       	adc	r23, r23
    223c:	88 1f       	adc	r24, r24
    223e:	20 f0       	brcs	.+8      	; 0x2248 <sqrt+0x38>
    2240:	26 17       	cp	r18, r22
    2242:	37 07       	cpc	r19, r23
    2244:	48 07       	cpc	r20, r24
    2246:	30 f4       	brcc	.+12     	; 0x2254 <sqrt+0x44>
    2248:	62 1b       	sub	r22, r18
    224a:	73 0b       	sbc	r23, r19
    224c:	84 0b       	sbc	r24, r20
    224e:	20 29       	or	r18, r0
    2250:	31 29       	or	r19, r1
    2252:	4a 2b       	or	r20, r26
    2254:	a6 95       	lsr	r26
    2256:	17 94       	ror	r1
    2258:	07 94       	ror	r0
    225a:	20 25       	eor	r18, r0
    225c:	31 25       	eor	r19, r1
    225e:	4a 27       	eor	r20, r26
    2260:	58 f7       	brcc	.-42     	; 0x2238 <sqrt+0x28>
    2262:	66 0f       	add	r22, r22
    2264:	77 1f       	adc	r23, r23
    2266:	88 1f       	adc	r24, r24
    2268:	20 f0       	brcs	.+8      	; 0x2272 <sqrt+0x62>
    226a:	26 17       	cp	r18, r22
    226c:	37 07       	cpc	r19, r23
    226e:	48 07       	cpc	r20, r24
    2270:	30 f4       	brcc	.+12     	; 0x227e <sqrt+0x6e>
    2272:	62 0b       	sbc	r22, r18
    2274:	73 0b       	sbc	r23, r19
    2276:	84 0b       	sbc	r24, r20
    2278:	20 0d       	add	r18, r0
    227a:	31 1d       	adc	r19, r1
    227c:	41 1d       	adc	r20, r1
    227e:	a0 95       	com	r26
    2280:	81 f7       	brne	.-32     	; 0x2262 <sqrt+0x52>
    2282:	b9 01       	movw	r22, r18
    2284:	84 2f       	mov	r24, r20
    2286:	91 58       	subi	r25, 0x81	; 129
    2288:	88 0f       	add	r24, r24
    228a:	96 95       	lsr	r25
    228c:	87 95       	ror	r24
    228e:	08 95       	ret

00002290 <__fp_mpack>:
    2290:	9f 3f       	cpi	r25, 0xFF	; 255
    2292:	31 f0       	breq	.+12     	; 0x22a0 <__fp_mpack_finite+0xc>

00002294 <__fp_mpack_finite>:
    2294:	91 50       	subi	r25, 0x01	; 1
    2296:	20 f4       	brcc	.+8      	; 0x22a0 <__fp_mpack_finite+0xc>
    2298:	87 95       	ror	r24
    229a:	77 95       	ror	r23
    229c:	67 95       	ror	r22
    229e:	b7 95       	ror	r27
    22a0:	88 0f       	add	r24, r24
    22a2:	91 1d       	adc	r25, r1
    22a4:	96 95       	lsr	r25
    22a6:	87 95       	ror	r24
    22a8:	97 f9       	bld	r25, 7
    22aa:	08 95       	ret

000022ac <__fp_norm2>:
    22ac:	91 50       	subi	r25, 0x01	; 1
    22ae:	50 40       	sbci	r21, 0x00	; 0
    22b0:	66 0f       	add	r22, r22
    22b2:	77 1f       	adc	r23, r23
    22b4:	88 1f       	adc	r24, r24
    22b6:	d2 f7       	brpl	.-12     	; 0x22ac <__fp_norm2>
    22b8:	08 95       	ret
    22ba:	0c 94 07 10 	jmp	0x200e	; 0x200e <__fp_nan>

000022be <__fp_rempio2>:
    22be:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__fp_splitA>
    22c2:	d8 f3       	brcs	.-10     	; 0x22ba <__fp_norm2+0xe>
    22c4:	e8 94       	clt
    22c6:	e0 e0       	ldi	r30, 0x00	; 0
    22c8:	bb 27       	eor	r27, r27
    22ca:	9f 57       	subi	r25, 0x7F	; 127
    22cc:	f0 f0       	brcs	.+60     	; 0x230a <__fp_rempio2+0x4c>
    22ce:	2a ed       	ldi	r18, 0xDA	; 218
    22d0:	3f e0       	ldi	r19, 0x0F	; 15
    22d2:	49 ec       	ldi	r20, 0xC9	; 201
    22d4:	06 c0       	rjmp	.+12     	; 0x22e2 <__fp_rempio2+0x24>
    22d6:	ee 0f       	add	r30, r30
    22d8:	bb 0f       	add	r27, r27
    22da:	66 1f       	adc	r22, r22
    22dc:	77 1f       	adc	r23, r23
    22de:	88 1f       	adc	r24, r24
    22e0:	28 f0       	brcs	.+10     	; 0x22ec <__fp_rempio2+0x2e>
    22e2:	b2 3a       	cpi	r27, 0xA2	; 162
    22e4:	62 07       	cpc	r22, r18
    22e6:	73 07       	cpc	r23, r19
    22e8:	84 07       	cpc	r24, r20
    22ea:	28 f0       	brcs	.+10     	; 0x22f6 <__fp_rempio2+0x38>
    22ec:	b2 5a       	subi	r27, 0xA2	; 162
    22ee:	62 0b       	sbc	r22, r18
    22f0:	73 0b       	sbc	r23, r19
    22f2:	84 0b       	sbc	r24, r20
    22f4:	e3 95       	inc	r30
    22f6:	9a 95       	dec	r25
    22f8:	72 f7       	brpl	.-36     	; 0x22d6 <__fp_rempio2+0x18>
    22fa:	80 38       	cpi	r24, 0x80	; 128
    22fc:	30 f4       	brcc	.+12     	; 0x230a <__fp_rempio2+0x4c>
    22fe:	9a 95       	dec	r25
    2300:	bb 0f       	add	r27, r27
    2302:	66 1f       	adc	r22, r22
    2304:	77 1f       	adc	r23, r23
    2306:	88 1f       	adc	r24, r24
    2308:	d2 f7       	brpl	.-12     	; 0x22fe <__fp_rempio2+0x40>
    230a:	90 48       	sbci	r25, 0x80	; 128
    230c:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__fp_mpack_finite>

00002310 <__fp_sinus>:
    2310:	ef 93       	push	r30
    2312:	e0 ff       	sbrs	r30, 0
    2314:	07 c0       	rjmp	.+14     	; 0x2324 <__fp_sinus+0x14>
    2316:	a2 ea       	ldi	r26, 0xA2	; 162
    2318:	2a ed       	ldi	r18, 0xDA	; 218
    231a:	3f e0       	ldi	r19, 0x0F	; 15
    231c:	49 ec       	ldi	r20, 0xC9	; 201
    231e:	5f eb       	ldi	r21, 0xBF	; 191
    2320:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__addsf3x>
    2324:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__fp_round>
    2328:	0f 90       	pop	r0
    232a:	03 94       	inc	r0
    232c:	01 fc       	sbrc	r0, 1
    232e:	90 58       	subi	r25, 0x80	; 128
    2330:	e4 ea       	ldi	r30, 0xA4	; 164
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	0c 94 31 10 	jmp	0x2062	; 0x2062 <__fp_powsodd>

00002338 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2338:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    233a:	91 8d       	ldd	r25, Z+25	; 0x19
    233c:	22 8d       	ldd	r18, Z+26	; 0x1a
    233e:	89 2f       	mov	r24, r25
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	80 5c       	subi	r24, 0xC0	; 192
    2344:	9f 4f       	sbci	r25, 0xFF	; 255
    2346:	82 1b       	sub	r24, r18
    2348:	91 09       	sbc	r25, r1
}
    234a:	8f 73       	andi	r24, 0x3F	; 63
    234c:	99 27       	eor	r25, r25
    234e:	08 95       	ret

00002350 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2350:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2352:	91 8d       	ldd	r25, Z+25	; 0x19
    2354:	82 8d       	ldd	r24, Z+26	; 0x1a
    2356:	98 17       	cp	r25, r24
    2358:	31 f0       	breq	.+12     	; 0x2366 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    235a:	82 8d       	ldd	r24, Z+26	; 0x1a
    235c:	e8 0f       	add	r30, r24
    235e:	f1 1d       	adc	r31, r1
    2360:	85 8d       	ldd	r24, Z+29	; 0x1d
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2366:	8f ef       	ldi	r24, 0xFF	; 255
    2368:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    236a:	08 95       	ret

0000236c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    236c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    236e:	91 8d       	ldd	r25, Z+25	; 0x19
    2370:	82 8d       	ldd	r24, Z+26	; 0x1a
    2372:	98 17       	cp	r25, r24
    2374:	61 f0       	breq	.+24     	; 0x238e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2376:	82 8d       	ldd	r24, Z+26	; 0x1a
    2378:	df 01       	movw	r26, r30
    237a:	a8 0f       	add	r26, r24
    237c:	b1 1d       	adc	r27, r1
    237e:	5d 96       	adiw	r26, 0x1d	; 29
    2380:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2382:	92 8d       	ldd	r25, Z+26	; 0x1a
    2384:	9f 5f       	subi	r25, 0xFF	; 255
    2386:	9f 73       	andi	r25, 0x3F	; 63
    2388:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    238e:	8f ef       	ldi	r24, 0xFF	; 255
    2390:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2392:	08 95       	ret

00002394 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2394:	87 e3       	ldi	r24, 0x37	; 55
    2396:	93 e1       	ldi	r25, 0x13	; 19
    2398:	89 2b       	or	r24, r25
    239a:	49 f0       	breq	.+18     	; 0x23ae <_Z14serialEventRunv+0x1a>
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	89 2b       	or	r24, r25
    23a2:	29 f0       	breq	.+10     	; 0x23ae <_Z14serialEventRunv+0x1a>
    23a4:	0e 94 37 13 	call	0x266e	; 0x266e <_Z17Serial0_availablev>
    23a8:	81 11       	cpse	r24, r1
    23aa:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    23ae:	08 95       	ret

000023b0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    23b0:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    23b2:	84 8d       	ldd	r24, Z+28	; 0x1c
    23b4:	df 01       	movw	r26, r30
    23b6:	a8 0f       	add	r26, r24
    23b8:	b1 1d       	adc	r27, r1
    23ba:	a3 5a       	subi	r26, 0xA3	; 163
    23bc:	bf 4f       	sbci	r27, 0xFF	; 255
    23be:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    23c0:	24 8d       	ldd	r18, Z+28	; 0x1c
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	2f 5f       	subi	r18, 0xFF	; 255
    23c6:	3f 4f       	sbci	r19, 0xFF	; 255
    23c8:	2f 73       	andi	r18, 0x3F	; 63
    23ca:	30 78       	andi	r19, 0x80	; 128
    23cc:	33 23       	and	r19, r19
    23ce:	34 f4       	brge	.+12     	; 0x23dc <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    23d0:	21 50       	subi	r18, 0x01	; 1
    23d2:	31 09       	sbc	r19, r1
    23d4:	20 6c       	ori	r18, 0xC0	; 192
    23d6:	3f 6f       	ori	r19, 0xFF	; 255
    23d8:	2f 5f       	subi	r18, 0xFF	; 255
    23da:	3f 4f       	sbci	r19, 0xFF	; 255
    23dc:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
    23de:	a6 89       	ldd	r26, Z+22	; 0x16
    23e0:	b7 89       	ldd	r27, Z+23	; 0x17
    23e2:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    23e4:	a0 89       	ldd	r26, Z+16	; 0x10
    23e6:	b1 89       	ldd	r27, Z+17	; 0x11
    23e8:	8c 91       	ld	r24, X
    23ea:	80 64       	ori	r24, 0x40	; 64
    23ec:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    23ee:	93 8d       	ldd	r25, Z+27	; 0x1b
    23f0:	84 8d       	ldd	r24, Z+28	; 0x1c
    23f2:	98 13       	cpse	r25, r24
    23f4:	06 c0       	rjmp	.+12     	; 0x2402 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    23f6:	02 88       	ldd	r0, Z+18	; 0x12
    23f8:	f3 89       	ldd	r31, Z+19	; 0x13
    23fa:	e0 2d       	mov	r30, r0
    23fc:	80 81       	ld	r24, Z
    23fe:	8f 7d       	andi	r24, 0xDF	; 223
    2400:	80 83       	st	Z, r24
    2402:	08 95       	ret

00002404 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2404:	cf 93       	push	r28
    2406:	df 93       	push	r29
    2408:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    240a:	88 8d       	ldd	r24, Y+24	; 0x18
    240c:	88 23       	and	r24, r24
    240e:	d9 f0       	breq	.+54     	; 0x2446 <_ZN14HardwareSerial5flushEv+0x42>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2410:	ea 89       	ldd	r30, Y+18	; 0x12
    2412:	fb 89       	ldd	r31, Y+19	; 0x13
    2414:	80 81       	ld	r24, Z
    2416:	85 fd       	sbrc	r24, 5
    2418:	05 c0       	rjmp	.+10     	; 0x2424 <_ZN14HardwareSerial5flushEv+0x20>
    241a:	a8 89       	ldd	r26, Y+16	; 0x10
    241c:	b9 89       	ldd	r27, Y+17	; 0x11
    241e:	8c 91       	ld	r24, X
    2420:	86 fd       	sbrc	r24, 6
    2422:	11 c0       	rjmp	.+34     	; 0x2446 <_ZN14HardwareSerial5flushEv+0x42>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2424:	0f b6       	in	r0, 0x3f	; 63
    2426:	07 fc       	sbrc	r0, 7
    2428:	f5 cf       	rjmp	.-22     	; 0x2414 <_ZN14HardwareSerial5flushEv+0x10>
    242a:	80 81       	ld	r24, Z
    242c:	85 ff       	sbrs	r24, 5
    242e:	f2 cf       	rjmp	.-28     	; 0x2414 <_ZN14HardwareSerial5flushEv+0x10>
    2430:	04 c0       	rjmp	.+8      	; 0x243a <_ZN14HardwareSerial5flushEv+0x36>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
    2432:	ce 01       	movw	r24, r28
    2434:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2438:	eb cf       	rjmp	.-42     	; 0x2410 <_ZN14HardwareSerial5flushEv+0xc>
  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    243a:	a8 89       	ldd	r26, Y+16	; 0x10
    243c:	b9 89       	ldd	r27, Y+17	; 0x11
    243e:	8c 91       	ld	r24, X
    2440:	85 ff       	sbrs	r24, 5
    2442:	e8 cf       	rjmp	.-48     	; 0x2414 <_ZN14HardwareSerial5flushEv+0x10>
    2444:	f6 cf       	rjmp	.-20     	; 0x2432 <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2446:	df 91       	pop	r29
    2448:	cf 91       	pop	r28
    244a:	08 95       	ret

0000244c <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    244c:	0f 93       	push	r16
    244e:	1f 93       	push	r17
    2450:	cf 93       	push	r28
    2452:	df 93       	push	r29
    2454:	ec 01       	movw	r28, r24
  _written = true;
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    245a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    245c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    245e:	98 13       	cpse	r25, r24
    2460:	23 c0       	rjmp	.+70     	; 0x24a8 <_ZN14HardwareSerial5writeEh+0x5c>
    2462:	e8 89       	ldd	r30, Y+16	; 0x10
    2464:	f9 89       	ldd	r31, Y+17	; 0x11
    2466:	80 81       	ld	r24, Z
    2468:	85 fd       	sbrc	r24, 5
    246a:	2f c0       	rjmp	.+94     	; 0x24ca <_ZN14HardwareSerial5writeEh+0x7e>
    246c:	1d c0       	rjmp	.+58     	; 0x24a8 <_ZN14HardwareSerial5writeEh+0x5c>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    246e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2470:	19 13       	cpse	r17, r25
    2472:	0c c0       	rjmp	.+24     	; 0x248c <_ZN14HardwareSerial5writeEh+0x40>
    if (bit_is_clear(SREG, SREG_I)) {
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	07 fc       	sbrc	r0, 7
    2478:	fa cf       	rjmp	.-12     	; 0x246e <_ZN14HardwareSerial5writeEh+0x22>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    247a:	e8 89       	ldd	r30, Y+16	; 0x10
    247c:	f9 89       	ldd	r31, Y+17	; 0x11
    247e:	80 81       	ld	r24, Z
    2480:	85 ff       	sbrs	r24, 5
    2482:	f5 cf       	rjmp	.-22     	; 0x246e <_ZN14HardwareSerial5writeEh+0x22>
	_tx_udr_empty_irq();
    2484:	ce 01       	movw	r24, r28
    2486:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    248a:	f1 cf       	rjmp	.-30     	; 0x246e <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    248c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    248e:	fe 01       	movw	r30, r28
    2490:	e8 0f       	add	r30, r24
    2492:	f1 1d       	adc	r31, r1
    2494:	e3 5a       	subi	r30, 0xA3	; 163
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	00 83       	st	Z, r16
  _tx_buffer_head = i;
    249a:	1b 8f       	std	Y+27, r17	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    249c:	ea 89       	ldd	r30, Y+18	; 0x12
    249e:	fb 89       	ldd	r31, Y+19	; 0x13
    24a0:	80 81       	ld	r24, Z
    24a2:	80 62       	ori	r24, 0x20	; 32
    24a4:	80 83       	st	Z, r24
  
  return 1;
    24a6:	19 c0       	rjmp	.+50     	; 0x24da <_ZN14HardwareSerial5writeEh+0x8e>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    24a8:	2b 8d       	ldd	r18, Y+27	; 0x1b
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	2f 5f       	subi	r18, 0xFF	; 255
    24ae:	3f 4f       	sbci	r19, 0xFF	; 255
    24b0:	2f 73       	andi	r18, 0x3F	; 63
    24b2:	30 78       	andi	r19, 0x80	; 128
    24b4:	33 23       	and	r19, r19
    24b6:	34 f4       	brge	.+12     	; 0x24c4 <_ZN14HardwareSerial5writeEh+0x78>
    24b8:	21 50       	subi	r18, 0x01	; 1
    24ba:	31 09       	sbc	r19, r1
    24bc:	20 6c       	ori	r18, 0xC0	; 192
    24be:	3f 6f       	ori	r19, 0xFF	; 255
    24c0:	2f 5f       	subi	r18, 0xFF	; 255
    24c2:	3f 4f       	sbci	r19, 0xFF	; 255
    24c4:	06 2f       	mov	r16, r22
    24c6:	12 2f       	mov	r17, r18
    24c8:	d2 cf       	rjmp	.-92     	; 0x246e <_ZN14HardwareSerial5writeEh+0x22>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    24ca:	ee 89       	ldd	r30, Y+22	; 0x16
    24cc:	ff 89       	ldd	r31, Y+23	; 0x17
    24ce:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    24d0:	e8 89       	ldd	r30, Y+16	; 0x10
    24d2:	f9 89       	ldd	r31, Y+17	; 0x11
    24d4:	80 81       	ld	r24, Z
    24d6:	80 64       	ori	r24, 0x40	; 64
    24d8:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	df 91       	pop	r29
    24e0:	cf 91       	pop	r28
    24e2:	1f 91       	pop	r17
    24e4:	0f 91       	pop	r16
    24e6:	08 95       	ret

000024e8 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    24e8:	cf 92       	push	r12
    24ea:	df 92       	push	r13
    24ec:	ef 92       	push	r14
    24ee:	ff 92       	push	r15
    24f0:	1f 93       	push	r17
    24f2:	cf 93       	push	r28
    24f4:	df 93       	push	r29
    24f6:	ec 01       	movw	r28, r24
    24f8:	6a 01       	movw	r12, r20
    24fa:	7b 01       	movw	r14, r22
    24fc:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    24fe:	e8 89       	ldd	r30, Y+16	; 0x10
    2500:	f9 89       	ldd	r31, Y+17	; 0x11
    2502:	82 e0       	ldi	r24, 0x02	; 2
    2504:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2506:	41 15       	cp	r20, r1
    2508:	51 4e       	sbci	r21, 0xE1	; 225
    250a:	61 05       	cpc	r22, r1
    250c:	71 05       	cpc	r23, r1
    250e:	b1 f0       	breq	.+44     	; 0x253c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2510:	60 e0       	ldi	r22, 0x00	; 0
    2512:	79 e0       	ldi	r23, 0x09	; 9
    2514:	8d e3       	ldi	r24, 0x3D	; 61
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	a7 01       	movw	r20, r14
    251a:	96 01       	movw	r18, r12
    251c:	0e 94 83 1b 	call	0x3706	; 0x3706 <__udivmodsi4>
    2520:	da 01       	movw	r26, r20
    2522:	c9 01       	movw	r24, r18
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	a1 09       	sbc	r26, r1
    2528:	b1 09       	sbc	r27, r1
    252a:	b6 95       	lsr	r27
    252c:	a7 95       	ror	r26
    252e:	97 95       	ror	r25
    2530:	87 95       	ror	r24
    2532:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2534:	21 15       	cp	r18, r1
    2536:	80 e1       	ldi	r24, 0x10	; 16
    2538:	38 07       	cpc	r19, r24
    253a:	a8 f0       	brcs	.+42     	; 0x2566 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    253c:	e8 89       	ldd	r30, Y+16	; 0x10
    253e:	f9 89       	ldd	r31, Y+17	; 0x11
    2540:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2542:	60 e8       	ldi	r22, 0x80	; 128
    2544:	74 e8       	ldi	r23, 0x84	; 132
    2546:	8e e1       	ldi	r24, 0x1E	; 30
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	a7 01       	movw	r20, r14
    254c:	96 01       	movw	r18, r12
    254e:	0e 94 83 1b 	call	0x3706	; 0x3706 <__udivmodsi4>
    2552:	da 01       	movw	r26, r20
    2554:	c9 01       	movw	r24, r18
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	a1 09       	sbc	r26, r1
    255a:	b1 09       	sbc	r27, r1
    255c:	b6 95       	lsr	r27
    255e:	a7 95       	ror	r26
    2560:	97 95       	ror	r25
    2562:	87 95       	ror	r24
    2564:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2566:	ec 85       	ldd	r30, Y+12	; 0x0c
    2568:	fd 85       	ldd	r31, Y+13	; 0x0d
    256a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    256c:	ee 85       	ldd	r30, Y+14	; 0x0e
    256e:	ff 85       	ldd	r31, Y+15	; 0x0f
    2570:	20 83       	st	Z, r18

  _written = false;
    2572:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2574:	ec 89       	ldd	r30, Y+20	; 0x14
    2576:	fd 89       	ldd	r31, Y+21	; 0x15
    2578:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    257a:	ea 89       	ldd	r30, Y+18	; 0x12
    257c:	fb 89       	ldd	r31, Y+19	; 0x13
    257e:	80 81       	ld	r24, Z
    2580:	80 61       	ori	r24, 0x10	; 16
    2582:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2584:	ea 89       	ldd	r30, Y+18	; 0x12
    2586:	fb 89       	ldd	r31, Y+19	; 0x13
    2588:	80 81       	ld	r24, Z
    258a:	88 60       	ori	r24, 0x08	; 8
    258c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    258e:	ea 89       	ldd	r30, Y+18	; 0x12
    2590:	fb 89       	ldd	r31, Y+19	; 0x13
    2592:	80 81       	ld	r24, Z
    2594:	80 68       	ori	r24, 0x80	; 128
    2596:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2598:	ea 89       	ldd	r30, Y+18	; 0x12
    259a:	fb 89       	ldd	r31, Y+19	; 0x13
    259c:	80 81       	ld	r24, Z
    259e:	8f 7d       	andi	r24, 0xDF	; 223
    25a0:	80 83       	st	Z, r24
}
    25a2:	df 91       	pop	r29
    25a4:	cf 91       	pop	r28
    25a6:	1f 91       	pop	r17
    25a8:	ff 90       	pop	r15
    25aa:	ef 90       	pop	r14
    25ac:	df 90       	pop	r13
    25ae:	cf 90       	pop	r12
    25b0:	08 95       	ret

000025b2 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    25b2:	1f 92       	push	r1
    25b4:	0f 92       	push	r0
    25b6:	0f b6       	in	r0, 0x3f	; 63
    25b8:	0f 92       	push	r0
    25ba:	11 24       	eor	r1, r1
    25bc:	2f 93       	push	r18
    25be:	8f 93       	push	r24
    25c0:	9f 93       	push	r25
    25c2:	af 93       	push	r26
    25c4:	bf 93       	push	r27
    25c6:	ef 93       	push	r30
    25c8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    25ca:	e0 91 57 04 	lds	r30, 0x0457	; 0x800457 <Serial+0x10>
    25ce:	f0 91 58 04 	lds	r31, 0x0458	; 0x800458 <Serial+0x11>
    25d2:	80 81       	ld	r24, Z
    25d4:	82 fd       	sbrc	r24, 2
    25d6:	14 c0       	rjmp	.+40     	; 0x2600 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    25d8:	e7 e4       	ldi	r30, 0x47	; 71
    25da:	f4 e0       	ldi	r31, 0x04	; 4
    25dc:	a6 89       	ldd	r26, Z+22	; 0x16
    25de:	b7 89       	ldd	r27, Z+23	; 0x17
    25e0:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    25e2:	81 8d       	ldd	r24, Z+25	; 0x19
    25e4:	8f 5f       	subi	r24, 0xFF	; 255
    25e6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    25e8:	92 8d       	ldd	r25, Z+26	; 0x1a
    25ea:	89 17       	cp	r24, r25
    25ec:	71 f0       	breq	.+28     	; 0x260a <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
    25ee:	df 01       	movw	r26, r30
    25f0:	e1 8d       	ldd	r30, Z+25	; 0x19
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	e9 5b       	subi	r30, 0xB9	; 185
    25f6:	fb 4f       	sbci	r31, 0xFB	; 251
    25f8:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    25fa:	59 96       	adiw	r26, 0x19	; 25
    25fc:	8c 93       	st	X, r24
    25fe:	05 c0       	rjmp	.+10     	; 0x260a <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2600:	e0 91 5d 04 	lds	r30, 0x045D	; 0x80045d <Serial+0x16>
    2604:	f0 91 5e 04 	lds	r31, 0x045E	; 0x80045e <Serial+0x17>
    2608:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    260a:	ff 91       	pop	r31
    260c:	ef 91       	pop	r30
    260e:	bf 91       	pop	r27
    2610:	af 91       	pop	r26
    2612:	9f 91       	pop	r25
    2614:	8f 91       	pop	r24
    2616:	2f 91       	pop	r18
    2618:	0f 90       	pop	r0
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	0f 90       	pop	r0
    261e:	1f 90       	pop	r1
    2620:	18 95       	reti

00002622 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2622:	1f 92       	push	r1
    2624:	0f 92       	push	r0
    2626:	0f b6       	in	r0, 0x3f	; 63
    2628:	0f 92       	push	r0
    262a:	11 24       	eor	r1, r1
    262c:	2f 93       	push	r18
    262e:	3f 93       	push	r19
    2630:	4f 93       	push	r20
    2632:	5f 93       	push	r21
    2634:	6f 93       	push	r22
    2636:	7f 93       	push	r23
    2638:	8f 93       	push	r24
    263a:	9f 93       	push	r25
    263c:	af 93       	push	r26
    263e:	bf 93       	push	r27
    2640:	ef 93       	push	r30
    2642:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2644:	87 e4       	ldi	r24, 0x47	; 71
    2646:	94 e0       	ldi	r25, 0x04	; 4
    2648:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    264c:	ff 91       	pop	r31
    264e:	ef 91       	pop	r30
    2650:	bf 91       	pop	r27
    2652:	af 91       	pop	r26
    2654:	9f 91       	pop	r25
    2656:	8f 91       	pop	r24
    2658:	7f 91       	pop	r23
    265a:	6f 91       	pop	r22
    265c:	5f 91       	pop	r21
    265e:	4f 91       	pop	r20
    2660:	3f 91       	pop	r19
    2662:	2f 91       	pop	r18
    2664:	0f 90       	pop	r0
    2666:	0f be       	out	0x3f, r0	; 63
    2668:	0f 90       	pop	r0
    266a:	1f 90       	pop	r1
    266c:	18 95       	reti

0000266e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    266e:	87 e4       	ldi	r24, 0x47	; 71
    2670:	94 e0       	ldi	r25, 0x04	; 4
    2672:	0e 94 9c 11 	call	0x2338	; 0x2338 <_ZN14HardwareSerial9availableEv>
    2676:	21 e0       	ldi	r18, 0x01	; 1
    2678:	89 2b       	or	r24, r25
    267a:	09 f4       	brne	.+2      	; 0x267e <_Z17Serial0_availablev+0x10>
    267c:	20 e0       	ldi	r18, 0x00	; 0
}
    267e:	82 2f       	mov	r24, r18
    2680:	08 95       	ret

00002682 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2682:	e7 e4       	ldi	r30, 0x47	; 71
    2684:	f4 e0       	ldi	r31, 0x04	; 4
    2686:	13 82       	std	Z+3, r1	; 0x03
    2688:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    268a:	88 ee       	ldi	r24, 0xE8	; 232
    268c:	93 e0       	ldi	r25, 0x03	; 3
    268e:	a0 e0       	ldi	r26, 0x00	; 0
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	84 83       	std	Z+4, r24	; 0x04
    2694:	95 83       	std	Z+5, r25	; 0x05
    2696:	a6 83       	std	Z+6, r26	; 0x06
    2698:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    269a:	8a ed       	ldi	r24, 0xDA	; 218
    269c:	92 e0       	ldi	r25, 0x02	; 2
    269e:	91 83       	std	Z+1, r25	; 0x01
    26a0:	80 83       	st	Z, r24
    26a2:	85 ec       	ldi	r24, 0xC5	; 197
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	95 87       	std	Z+13, r25	; 0x0d
    26a8:	84 87       	std	Z+12, r24	; 0x0c
    26aa:	84 ec       	ldi	r24, 0xC4	; 196
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	97 87       	std	Z+15, r25	; 0x0f
    26b0:	86 87       	std	Z+14, r24	; 0x0e
    26b2:	80 ec       	ldi	r24, 0xC0	; 192
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	91 8b       	std	Z+17, r25	; 0x11
    26b8:	80 8b       	std	Z+16, r24	; 0x10
    26ba:	81 ec       	ldi	r24, 0xC1	; 193
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	93 8b       	std	Z+19, r25	; 0x13
    26c0:	82 8b       	std	Z+18, r24	; 0x12
    26c2:	82 ec       	ldi	r24, 0xC2	; 194
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	95 8b       	std	Z+21, r25	; 0x15
    26c8:	84 8b       	std	Z+20, r24	; 0x14
    26ca:	86 ec       	ldi	r24, 0xC6	; 198
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	97 8b       	std	Z+23, r25	; 0x17
    26d0:	86 8b       	std	Z+22, r24	; 0x16
    26d2:	11 8e       	std	Z+25, r1	; 0x19
    26d4:	12 8e       	std	Z+26, r1	; 0x1a
    26d6:	13 8e       	std	Z+27, r1	; 0x1b
    26d8:	14 8e       	std	Z+28, r1	; 0x1c
    26da:	08 95       	ret

000026dc <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    26dc:	08 95       	ret

000026de <main>:

int main(void)
{
	init();
    26de:	0e 94 f5 17 	call	0x2fea	; 0x2fea <init>

	initVariant();
    26e2:	0e 94 6e 13 	call	0x26dc	; 0x26dc <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    26e6:	0e 94 df 04 	call	0x9be	; 0x9be <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    26ea:	ca ec       	ldi	r28, 0xCA	; 202
    26ec:	d1 e1       	ldi	r29, 0x11	; 17
#endif
	
	setup();
    
	for (;;) {
		loop();
    26ee:	0e 94 69 07 	call	0xed2	; 0xed2 <loop>
		if (serialEventRun) serialEventRun();
    26f2:	20 97       	sbiw	r28, 0x00	; 0
    26f4:	e1 f3       	breq	.-8      	; 0x26ee <main+0x10>
    26f6:	0e 94 ca 11 	call	0x2394	; 0x2394 <_Z14serialEventRunv>
    26fa:	f9 cf       	rjmp	.-14     	; 0x26ee <main+0x10>

000026fc <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    26fc:	cf 92       	push	r12
    26fe:	df 92       	push	r13
    2700:	ef 92       	push	r14
    2702:	ff 92       	push	r15
    2704:	0f 93       	push	r16
    2706:	1f 93       	push	r17
    2708:	cf 93       	push	r28
    270a:	df 93       	push	r29
    270c:	41 15       	cp	r20, r1
    270e:	51 05       	cpc	r21, r1
    2710:	c1 f0       	breq	.+48     	; 0x2742 <_ZN5Print5writeEPKhj+0x46>
    2712:	6a 01       	movw	r12, r20
    2714:	8c 01       	movw	r16, r24
    2716:	e6 2e       	mov	r14, r22
    2718:	f7 2e       	mov	r15, r23
    271a:	c0 e0       	ldi	r28, 0x00	; 0
    271c:	d0 e0       	ldi	r29, 0x00	; 0
    271e:	d7 01       	movw	r26, r14
    2720:	6d 91       	ld	r22, X+
    2722:	7d 01       	movw	r14, r26
    2724:	d8 01       	movw	r26, r16
    2726:	ed 91       	ld	r30, X+
    2728:	fc 91       	ld	r31, X
    272a:	01 90       	ld	r0, Z+
    272c:	f0 81       	ld	r31, Z
    272e:	e0 2d       	mov	r30, r0
    2730:	c8 01       	movw	r24, r16
    2732:	09 95       	icall
    2734:	89 2b       	or	r24, r25
    2736:	39 f0       	breq	.+14     	; 0x2746 <_ZN5Print5writeEPKhj+0x4a>
    2738:	21 96       	adiw	r28, 0x01	; 1
    273a:	cc 16       	cp	r12, r28
    273c:	dd 06       	cpc	r13, r29
    273e:	79 f7       	brne	.-34     	; 0x271e <_ZN5Print5writeEPKhj+0x22>
    2740:	02 c0       	rjmp	.+4      	; 0x2746 <_ZN5Print5writeEPKhj+0x4a>
    2742:	c0 e0       	ldi	r28, 0x00	; 0
    2744:	d0 e0       	ldi	r29, 0x00	; 0
    2746:	ce 01       	movw	r24, r28
    2748:	df 91       	pop	r29
    274a:	cf 91       	pop	r28
    274c:	1f 91       	pop	r17
    274e:	0f 91       	pop	r16
    2750:	ff 90       	pop	r15
    2752:	ef 90       	pop	r14
    2754:	df 90       	pop	r13
    2756:	cf 90       	pop	r12
    2758:	08 95       	ret

0000275a <_ZN5Print5printEPKc>:
    275a:	61 15       	cp	r22, r1
    275c:	71 05       	cpc	r23, r1
    275e:	81 f0       	breq	.+32     	; 0x2780 <_ZN5Print5printEPKc+0x26>
    2760:	fb 01       	movw	r30, r22
    2762:	01 90       	ld	r0, Z+
    2764:	00 20       	and	r0, r0
    2766:	e9 f7       	brne	.-6      	; 0x2762 <_ZN5Print5printEPKc+0x8>
    2768:	31 97       	sbiw	r30, 0x01	; 1
    276a:	af 01       	movw	r20, r30
    276c:	46 1b       	sub	r20, r22
    276e:	57 0b       	sbc	r21, r23
    2770:	dc 01       	movw	r26, r24
    2772:	ed 91       	ld	r30, X+
    2774:	fc 91       	ld	r31, X
    2776:	02 80       	ldd	r0, Z+2	; 0x02
    2778:	f3 81       	ldd	r31, Z+3	; 0x03
    277a:	e0 2d       	mov	r30, r0
    277c:	09 95       	icall
    277e:	08 95       	ret
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	08 95       	ret

00002786 <_ZN5Print5printEc>:
    2786:	dc 01       	movw	r26, r24
    2788:	ed 91       	ld	r30, X+
    278a:	fc 91       	ld	r31, X
    278c:	01 90       	ld	r0, Z+
    278e:	f0 81       	ld	r31, Z
    2790:	e0 2d       	mov	r30, r0
    2792:	09 95       	icall
    2794:	08 95       	ret

00002796 <_ZN5Print7printlnEv>:
    2796:	dc 01       	movw	r26, r24
    2798:	ed 91       	ld	r30, X+
    279a:	fc 91       	ld	r31, X
    279c:	02 80       	ldd	r0, Z+2	; 0x02
    279e:	f3 81       	ldd	r31, Z+3	; 0x03
    27a0:	e0 2d       	mov	r30, r0
    27a2:	42 e0       	ldi	r20, 0x02	; 2
    27a4:	50 e0       	ldi	r21, 0x00	; 0
    27a6:	66 ee       	ldi	r22, 0xE6	; 230
    27a8:	72 e0       	ldi	r23, 0x02	; 2
    27aa:	09 95       	icall
    27ac:	08 95       	ret

000027ae <_ZN5Print7printlnEPKc>:
    27ae:	0f 93       	push	r16
    27b0:	1f 93       	push	r17
    27b2:	cf 93       	push	r28
    27b4:	df 93       	push	r29
    27b6:	ec 01       	movw	r28, r24
    27b8:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
    27bc:	8c 01       	movw	r16, r24
    27be:	ce 01       	movw	r24, r28
    27c0:	0e 94 cb 13 	call	0x2796	; 0x2796 <_ZN5Print7printlnEv>
    27c4:	80 0f       	add	r24, r16
    27c6:	91 1f       	adc	r25, r17
    27c8:	df 91       	pop	r29
    27ca:	cf 91       	pop	r28
    27cc:	1f 91       	pop	r17
    27ce:	0f 91       	pop	r16
    27d0:	08 95       	ret

000027d2 <_ZN5Print7printlnEc>:
    27d2:	0f 93       	push	r16
    27d4:	1f 93       	push	r17
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	ec 01       	movw	r28, r24
    27dc:	0e 94 c3 13 	call	0x2786	; 0x2786 <_ZN5Print5printEc>
    27e0:	8c 01       	movw	r16, r24
    27e2:	ce 01       	movw	r24, r28
    27e4:	0e 94 cb 13 	call	0x2796	; 0x2796 <_ZN5Print7printlnEv>
    27e8:	80 0f       	add	r24, r16
    27ea:	91 1f       	adc	r25, r17
    27ec:	df 91       	pop	r29
    27ee:	cf 91       	pop	r28
    27f0:	1f 91       	pop	r17
    27f2:	0f 91       	pop	r16
    27f4:	08 95       	ret

000027f6 <_ZN5Print11printNumberEmh>:
    27f6:	8f 92       	push	r8
    27f8:	9f 92       	push	r9
    27fa:	af 92       	push	r10
    27fc:	bf 92       	push	r11
    27fe:	ef 92       	push	r14
    2800:	ff 92       	push	r15
    2802:	0f 93       	push	r16
    2804:	1f 93       	push	r17
    2806:	cf 93       	push	r28
    2808:	df 93       	push	r29
    280a:	cd b7       	in	r28, 0x3d	; 61
    280c:	de b7       	in	r29, 0x3e	; 62
    280e:	a1 97       	sbiw	r28, 0x21	; 33
    2810:	0f b6       	in	r0, 0x3f	; 63
    2812:	f8 94       	cli
    2814:	de bf       	out	0x3e, r29	; 62
    2816:	0f be       	out	0x3f, r0	; 63
    2818:	cd bf       	out	0x3d, r28	; 61
    281a:	7c 01       	movw	r14, r24
    281c:	cb 01       	movw	r24, r22
    281e:	ba 01       	movw	r22, r20
    2820:	19 a2       	std	Y+33, r1	; 0x21
    2822:	22 30       	cpi	r18, 0x02	; 2
    2824:	08 f4       	brcc	.+2      	; 0x2828 <_ZN5Print11printNumberEmh+0x32>
    2826:	2a e0       	ldi	r18, 0x0A	; 10
    2828:	8e 01       	movw	r16, r28
    282a:	0f 5d       	subi	r16, 0xDF	; 223
    282c:	1f 4f       	sbci	r17, 0xFF	; 255
    282e:	82 2e       	mov	r8, r18
    2830:	91 2c       	mov	r9, r1
    2832:	a1 2c       	mov	r10, r1
    2834:	b1 2c       	mov	r11, r1
    2836:	a5 01       	movw	r20, r10
    2838:	94 01       	movw	r18, r8
    283a:	0e 94 83 1b 	call	0x3706	; 0x3706 <__udivmodsi4>
    283e:	e6 2f       	mov	r30, r22
    2840:	62 2f       	mov	r22, r18
    2842:	73 2f       	mov	r23, r19
    2844:	84 2f       	mov	r24, r20
    2846:	95 2f       	mov	r25, r21
    2848:	01 50       	subi	r16, 0x01	; 1
    284a:	11 09       	sbc	r17, r1
    284c:	ea 30       	cpi	r30, 0x0A	; 10
    284e:	10 f4       	brcc	.+4      	; 0x2854 <_ZN5Print11printNumberEmh+0x5e>
    2850:	e0 5d       	subi	r30, 0xD0	; 208
    2852:	01 c0       	rjmp	.+2      	; 0x2856 <_ZN5Print11printNumberEmh+0x60>
    2854:	e9 5c       	subi	r30, 0xC9	; 201
    2856:	d8 01       	movw	r26, r16
    2858:	ec 93       	st	X, r30
    285a:	61 15       	cp	r22, r1
    285c:	71 05       	cpc	r23, r1
    285e:	81 05       	cpc	r24, r1
    2860:	91 05       	cpc	r25, r1
    2862:	49 f7       	brne	.-46     	; 0x2836 <_ZN5Print11printNumberEmh+0x40>
    2864:	01 15       	cp	r16, r1
    2866:	11 05       	cpc	r17, r1
    2868:	91 f0       	breq	.+36     	; 0x288e <_ZN5Print11printNumberEmh+0x98>
    286a:	f8 01       	movw	r30, r16
    286c:	01 90       	ld	r0, Z+
    286e:	00 20       	and	r0, r0
    2870:	e9 f7       	brne	.-6      	; 0x286c <_ZN5Print11printNumberEmh+0x76>
    2872:	31 97       	sbiw	r30, 0x01	; 1
    2874:	af 01       	movw	r20, r30
    2876:	40 1b       	sub	r20, r16
    2878:	51 0b       	sbc	r21, r17
    287a:	d7 01       	movw	r26, r14
    287c:	ed 91       	ld	r30, X+
    287e:	fc 91       	ld	r31, X
    2880:	02 80       	ldd	r0, Z+2	; 0x02
    2882:	f3 81       	ldd	r31, Z+3	; 0x03
    2884:	e0 2d       	mov	r30, r0
    2886:	b8 01       	movw	r22, r16
    2888:	c7 01       	movw	r24, r14
    288a:	09 95       	icall
    288c:	02 c0       	rjmp	.+4      	; 0x2892 <_ZN5Print11printNumberEmh+0x9c>
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	a1 96       	adiw	r28, 0x21	; 33
    2894:	0f b6       	in	r0, 0x3f	; 63
    2896:	f8 94       	cli
    2898:	de bf       	out	0x3e, r29	; 62
    289a:	0f be       	out	0x3f, r0	; 63
    289c:	cd bf       	out	0x3d, r28	; 61
    289e:	df 91       	pop	r29
    28a0:	cf 91       	pop	r28
    28a2:	1f 91       	pop	r17
    28a4:	0f 91       	pop	r16
    28a6:	ff 90       	pop	r15
    28a8:	ef 90       	pop	r14
    28aa:	bf 90       	pop	r11
    28ac:	af 90       	pop	r10
    28ae:	9f 90       	pop	r9
    28b0:	8f 90       	pop	r8
    28b2:	08 95       	ret

000028b4 <_ZN5Print5printEli>:
    28b4:	cf 92       	push	r12
    28b6:	df 92       	push	r13
    28b8:	ef 92       	push	r14
    28ba:	ff 92       	push	r15
    28bc:	0f 93       	push	r16
    28be:	1f 93       	push	r17
    28c0:	cf 93       	push	r28
    28c2:	df 93       	push	r29
    28c4:	ec 01       	movw	r28, r24
    28c6:	6a 01       	movw	r12, r20
    28c8:	7b 01       	movw	r14, r22
    28ca:	21 15       	cp	r18, r1
    28cc:	31 05       	cpc	r19, r1
    28ce:	41 f4       	brne	.+16     	; 0x28e0 <_ZN5Print5printEli+0x2c>
    28d0:	e8 81       	ld	r30, Y
    28d2:	f9 81       	ldd	r31, Y+1	; 0x01
    28d4:	01 90       	ld	r0, Z+
    28d6:	f0 81       	ld	r31, Z
    28d8:	e0 2d       	mov	r30, r0
    28da:	64 2f       	mov	r22, r20
    28dc:	09 95       	icall
    28de:	1d c0       	rjmp	.+58     	; 0x291a <_ZN5Print5printEli+0x66>
    28e0:	2a 30       	cpi	r18, 0x0A	; 10
    28e2:	31 05       	cpc	r19, r1
    28e4:	c1 f4       	brne	.+48     	; 0x2916 <_ZN5Print5printEli+0x62>
    28e6:	77 23       	and	r23, r23
    28e8:	94 f4       	brge	.+36     	; 0x290e <_ZN5Print5printEli+0x5a>
    28ea:	6d e2       	ldi	r22, 0x2D	; 45
    28ec:	0e 94 c3 13 	call	0x2786	; 0x2786 <_ZN5Print5printEc>
    28f0:	8c 01       	movw	r16, r24
    28f2:	44 27       	eor	r20, r20
    28f4:	55 27       	eor	r21, r21
    28f6:	ba 01       	movw	r22, r20
    28f8:	4c 19       	sub	r20, r12
    28fa:	5d 09       	sbc	r21, r13
    28fc:	6e 09       	sbc	r22, r14
    28fe:	7f 09       	sbc	r23, r15
    2900:	2a e0       	ldi	r18, 0x0A	; 10
    2902:	ce 01       	movw	r24, r28
    2904:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <_ZN5Print11printNumberEmh>
    2908:	80 0f       	add	r24, r16
    290a:	91 1f       	adc	r25, r17
    290c:	06 c0       	rjmp	.+12     	; 0x291a <_ZN5Print5printEli+0x66>
    290e:	2a e0       	ldi	r18, 0x0A	; 10
    2910:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <_ZN5Print11printNumberEmh>
    2914:	02 c0       	rjmp	.+4      	; 0x291a <_ZN5Print5printEli+0x66>
    2916:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <_ZN5Print11printNumberEmh>
    291a:	df 91       	pop	r29
    291c:	cf 91       	pop	r28
    291e:	1f 91       	pop	r17
    2920:	0f 91       	pop	r16
    2922:	ff 90       	pop	r15
    2924:	ef 90       	pop	r14
    2926:	df 90       	pop	r13
    2928:	cf 90       	pop	r12
    292a:	08 95       	ret

0000292c <_ZN5Print5printEii>:
    292c:	9a 01       	movw	r18, r20
    292e:	ab 01       	movw	r20, r22
    2930:	77 0f       	add	r23, r23
    2932:	66 0b       	sbc	r22, r22
    2934:	77 0b       	sbc	r23, r23
    2936:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN5Print5printEli>
    293a:	08 95       	ret

0000293c <_ZN5Print7printlnEii>:
    293c:	0f 93       	push	r16
    293e:	1f 93       	push	r17
    2940:	cf 93       	push	r28
    2942:	df 93       	push	r29
    2944:	ec 01       	movw	r28, r24
    2946:	0e 94 96 14 	call	0x292c	; 0x292c <_ZN5Print5printEii>
    294a:	8c 01       	movw	r16, r24
    294c:	ce 01       	movw	r24, r28
    294e:	0e 94 cb 13 	call	0x2796	; 0x2796 <_ZN5Print7printlnEv>
    2952:	80 0f       	add	r24, r16
    2954:	91 1f       	adc	r25, r17
    2956:	df 91       	pop	r29
    2958:	cf 91       	pop	r28
    295a:	1f 91       	pop	r17
    295c:	0f 91       	pop	r16
    295e:	08 95       	ret

00002960 <_ZN5Print7printlnEli>:
    2960:	0f 93       	push	r16
    2962:	1f 93       	push	r17
    2964:	cf 93       	push	r28
    2966:	df 93       	push	r29
    2968:	ec 01       	movw	r28, r24
    296a:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN5Print5printEli>
    296e:	8c 01       	movw	r16, r24
    2970:	ce 01       	movw	r24, r28
    2972:	0e 94 cb 13 	call	0x2796	; 0x2796 <_ZN5Print7printlnEv>
    2976:	80 0f       	add	r24, r16
    2978:	91 1f       	adc	r25, r17
    297a:	df 91       	pop	r29
    297c:	cf 91       	pop	r28
    297e:	1f 91       	pop	r17
    2980:	0f 91       	pop	r16
    2982:	08 95       	ret

00002984 <_ZN5Print5printEmi>:
    2984:	21 15       	cp	r18, r1
    2986:	31 05       	cpc	r19, r1
    2988:	49 f4       	brne	.+18     	; 0x299c <_ZN5Print5printEmi+0x18>
    298a:	dc 01       	movw	r26, r24
    298c:	ed 91       	ld	r30, X+
    298e:	fc 91       	ld	r31, X
    2990:	01 90       	ld	r0, Z+
    2992:	f0 81       	ld	r31, Z
    2994:	e0 2d       	mov	r30, r0
    2996:	64 2f       	mov	r22, r20
    2998:	09 95       	icall
    299a:	08 95       	ret
    299c:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <_ZN5Print11printNumberEmh>
    29a0:	08 95       	ret

000029a2 <_ZN5Print5printEhi>:
    29a2:	9a 01       	movw	r18, r20
    29a4:	46 2f       	mov	r20, r22
    29a6:	50 e0       	ldi	r21, 0x00	; 0
    29a8:	60 e0       	ldi	r22, 0x00	; 0
    29aa:	70 e0       	ldi	r23, 0x00	; 0
    29ac:	0e 94 c2 14 	call	0x2984	; 0x2984 <_ZN5Print5printEmi>
    29b0:	08 95       	ret

000029b2 <_ZN5Print5printEji>:
    29b2:	9a 01       	movw	r18, r20
    29b4:	ab 01       	movw	r20, r22
    29b6:	60 e0       	ldi	r22, 0x00	; 0
    29b8:	70 e0       	ldi	r23, 0x00	; 0
    29ba:	0e 94 c2 14 	call	0x2984	; 0x2984 <_ZN5Print5printEmi>
    29be:	08 95       	ret

000029c0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    29c0:	7f 92       	push	r7
    29c2:	8f 92       	push	r8
    29c4:	9f 92       	push	r9
    29c6:	af 92       	push	r10
    29c8:	bf 92       	push	r11
    29ca:	cf 92       	push	r12
    29cc:	df 92       	push	r13
    29ce:	ef 92       	push	r14
    29d0:	ff 92       	push	r15
    29d2:	0f 93       	push	r16
    29d4:	1f 93       	push	r17
    29d6:	cf 93       	push	r28
    29d8:	df 93       	push	r29
    29da:	00 d0       	rcall	.+0      	; 0x29dc <_ZN5Print10printFloatEdh+0x1c>
    29dc:	00 d0       	rcall	.+0      	; 0x29de <_ZN5Print10printFloatEdh+0x1e>
    29de:	cd b7       	in	r28, 0x3d	; 61
    29e0:	de b7       	in	r29, 0x3e	; 62
    29e2:	8c 01       	movw	r16, r24
    29e4:	4a 01       	movw	r8, r20
    29e6:	5b 01       	movw	r10, r22
    29e8:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    29ea:	9a 01       	movw	r18, r20
    29ec:	ab 01       	movw	r20, r22
    29ee:	c5 01       	movw	r24, r10
    29f0:	b4 01       	movw	r22, r8
    29f2:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <__unordsf2>
    29f6:	88 23       	and	r24, r24
    29f8:	31 f0       	breq	.+12     	; 0x2a06 <_ZN5Print10printFloatEdh+0x46>
    29fa:	69 ee       	ldi	r22, 0xE9	; 233
    29fc:	72 e0       	ldi	r23, 0x02	; 2
    29fe:	c8 01       	movw	r24, r16
    2a00:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
    2a04:	d7 c0       	rjmp	.+430    	; 0x2bb4 <_ZN5Print10printFloatEdh+0x1f4>
  if (isinf(number)) return print("inf");
    2a06:	75 01       	movw	r14, r10
    2a08:	64 01       	movw	r12, r8
    2a0a:	e8 94       	clt
    2a0c:	f7 f8       	bld	r15, 7
    2a0e:	2f ef       	ldi	r18, 0xFF	; 255
    2a10:	3f ef       	ldi	r19, 0xFF	; 255
    2a12:	4f e7       	ldi	r20, 0x7F	; 127
    2a14:	5f e7       	ldi	r21, 0x7F	; 127
    2a16:	c7 01       	movw	r24, r14
    2a18:	b6 01       	movw	r22, r12
    2a1a:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <__unordsf2>
    2a1e:	81 11       	cpse	r24, r1
    2a20:	10 c0       	rjmp	.+32     	; 0x2a42 <_ZN5Print10printFloatEdh+0x82>
    2a22:	2f ef       	ldi	r18, 0xFF	; 255
    2a24:	3f ef       	ldi	r19, 0xFF	; 255
    2a26:	4f e7       	ldi	r20, 0x7F	; 127
    2a28:	5f e7       	ldi	r21, 0x7F	; 127
    2a2a:	c7 01       	movw	r24, r14
    2a2c:	b6 01       	movw	r22, r12
    2a2e:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__cmpsf2>
    2a32:	18 16       	cp	r1, r24
    2a34:	34 f4       	brge	.+12     	; 0x2a42 <_ZN5Print10printFloatEdh+0x82>
    2a36:	6d ee       	ldi	r22, 0xED	; 237
    2a38:	72 e0       	ldi	r23, 0x02	; 2
    2a3a:	c8 01       	movw	r24, r16
    2a3c:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
    2a40:	b9 c0       	rjmp	.+370    	; 0x2bb4 <_ZN5Print10printFloatEdh+0x1f4>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    2a42:	2f ef       	ldi	r18, 0xFF	; 255
    2a44:	3f ef       	ldi	r19, 0xFF	; 255
    2a46:	4f e7       	ldi	r20, 0x7F	; 127
    2a48:	5f e4       	ldi	r21, 0x4F	; 79
    2a4a:	c5 01       	movw	r24, r10
    2a4c:	b4 01       	movw	r22, r8
    2a4e:	0e 94 55 1b 	call	0x36aa	; 0x36aa <__gesf2>
    2a52:	18 16       	cp	r1, r24
    2a54:	34 f4       	brge	.+12     	; 0x2a62 <_ZN5Print10printFloatEdh+0xa2>
    2a56:	61 ef       	ldi	r22, 0xF1	; 241
    2a58:	72 e0       	ldi	r23, 0x02	; 2
    2a5a:	c8 01       	movw	r24, r16
    2a5c:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
    2a60:	a9 c0       	rjmp	.+338    	; 0x2bb4 <_ZN5Print10printFloatEdh+0x1f4>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    2a62:	2f ef       	ldi	r18, 0xFF	; 255
    2a64:	3f ef       	ldi	r19, 0xFF	; 255
    2a66:	4f e7       	ldi	r20, 0x7F	; 127
    2a68:	5f ec       	ldi	r21, 0xCF	; 207
    2a6a:	c5 01       	movw	r24, r10
    2a6c:	b4 01       	movw	r22, r8
    2a6e:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__cmpsf2>
    2a72:	88 23       	and	r24, r24
    2a74:	34 f4       	brge	.+12     	; 0x2a82 <_ZN5Print10printFloatEdh+0xc2>
    2a76:	61 ef       	ldi	r22, 0xF1	; 241
    2a78:	72 e0       	ldi	r23, 0x02	; 2
    2a7a:	c8 01       	movw	r24, r16
    2a7c:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEPKc>
    2a80:	99 c0       	rjmp	.+306    	; 0x2bb4 <_ZN5Print10printFloatEdh+0x1f4>
  
  // Handle negative numbers
  if (number < 0.0)
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	a9 01       	movw	r20, r18
    2a88:	c5 01       	movw	r24, r10
    2a8a:	b4 01       	movw	r22, r8
    2a8c:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__cmpsf2>
    2a90:	88 23       	and	r24, r24
    2a92:	54 f4       	brge	.+20     	; 0x2aa8 <_ZN5Print10printFloatEdh+0xe8>
  {
     n += print('-');
    2a94:	6d e2       	ldi	r22, 0x2D	; 45
    2a96:	c8 01       	movw	r24, r16
    2a98:	0e 94 c3 13 	call	0x2786	; 0x2786 <_ZN5Print5printEc>
    2a9c:	7c 01       	movw	r14, r24
     number = -number;
    2a9e:	b7 fa       	bst	r11, 7
    2aa0:	b0 94       	com	r11
    2aa2:	b7 f8       	bld	r11, 7
    2aa4:	b0 94       	com	r11
    2aa6:	02 c0       	rjmp	.+4      	; 0x2aac <_ZN5Print10printFloatEdh+0xec>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    2aa8:	e1 2c       	mov	r14, r1
    2aaa:	f1 2c       	mov	r15, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2aac:	77 20       	and	r7, r7
    2aae:	09 f4       	brne	.+2      	; 0x2ab2 <_ZN5Print10printFloatEdh+0xf2>
    2ab0:	6e c0       	rjmp	.+220    	; 0x2b8e <_ZN5Print10printFloatEdh+0x1ce>
    2ab2:	19 82       	std	Y+1, r1	; 0x01
    2ab4:	60 e0       	ldi	r22, 0x00	; 0
    2ab6:	70 e0       	ldi	r23, 0x00	; 0
    2ab8:	80 e0       	ldi	r24, 0x00	; 0
    2aba:	9f e3       	ldi	r25, 0x3F	; 63
    rounding /= 10.0;
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 e2       	ldi	r20, 0x20	; 32
    2ac2:	51 e4       	ldi	r21, 0x41	; 65
    2ac4:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2ac8:	29 81       	ldd	r18, Y+1	; 0x01
    2aca:	2f 5f       	subi	r18, 0xFF	; 255
    2acc:	29 83       	std	Y+1, r18	; 0x01
    2ace:	72 12       	cpse	r7, r18
    2ad0:	f5 cf       	rjmp	.-22     	; 0x2abc <_ZN5Print10printFloatEdh+0xfc>
    2ad2:	2c c0       	rjmp	.+88     	; 0x2b2c <_ZN5Print10printFloatEdh+0x16c>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	40 e2       	ldi	r20, 0x20	; 32
    2ada:	51 e4       	ldi	r21, 0x41	; 65
    2adc:	c5 01       	movw	r24, r10
    2ade:	b4 01       	movw	r22, r8
    2ae0:	0e 94 8d 10 	call	0x211a	; 0x211a <__mulsf3>
    2ae4:	4b 01       	movw	r8, r22
    2ae6:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    2ae8:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__fixunssfsi>
    2aec:	6b 01       	movw	r12, r22
    2aee:	7c 01       	movw	r14, r24
    n += print(toPrint);
    2af0:	4a e0       	ldi	r20, 0x0A	; 10
    2af2:	50 e0       	ldi	r21, 0x00	; 0
    2af4:	c8 01       	movw	r24, r16
    2af6:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_ZN5Print5printEji>
    2afa:	29 81       	ldd	r18, Y+1	; 0x01
    2afc:	3a 81       	ldd	r19, Y+2	; 0x02
    2afe:	28 0f       	add	r18, r24
    2b00:	39 1f       	adc	r19, r25
    2b02:	3a 83       	std	Y+2, r19	; 0x02
    2b04:	29 83       	std	Y+1, r18	; 0x01
    remainder -= toPrint; 
    2b06:	b6 01       	movw	r22, r12
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__floatunsisf>
    2b10:	9b 01       	movw	r18, r22
    2b12:	ac 01       	movw	r20, r24
    2b14:	c5 01       	movw	r24, r10
    2b16:	b4 01       	movw	r22, r8
    2b18:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
    2b1c:	4b 01       	movw	r8, r22
    2b1e:	5c 01       	movw	r10, r24
    2b20:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2b22:	71 10       	cpse	r7, r1
    2b24:	d7 cf       	rjmp	.-82     	; 0x2ad4 <_ZN5Print10printFloatEdh+0x114>
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
    2b26:	89 81       	ldd	r24, Y+1	; 0x01
    2b28:	9a 81       	ldd	r25, Y+2	; 0x02
    2b2a:	44 c0       	rjmp	.+136    	; 0x2bb4 <_ZN5Print10printFloatEdh+0x1f4>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    2b2c:	9b 01       	movw	r18, r22
    2b2e:	ac 01       	movw	r20, r24
    2b30:	c5 01       	movw	r24, r10
    2b32:	b4 01       	movw	r22, r8
    2b34:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
    2b38:	4b 01       	movw	r8, r22
    2b3a:	5c 01       	movw	r10, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2b3c:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__fixunssfsi>
    2b40:	69 83       	std	Y+1, r22	; 0x01
    2b42:	7a 83       	std	Y+2, r23	; 0x02
    2b44:	8b 83       	std	Y+3, r24	; 0x03
    2b46:	9c 83       	std	Y+4, r25	; 0x04
  double remainder = number - (double)int_part;
    2b48:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__floatunsisf>
    2b4c:	9b 01       	movw	r18, r22
    2b4e:	ac 01       	movw	r20, r24
    2b50:	c5 01       	movw	r24, r10
    2b52:	b4 01       	movw	r22, r8
    2b54:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__subsf3>
    2b58:	4b 01       	movw	r8, r22
    2b5a:	5c 01       	movw	r10, r24
  n += print(int_part);
    2b5c:	2a e0       	ldi	r18, 0x0A	; 10
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	49 81       	ldd	r20, Y+1	; 0x01
    2b62:	5a 81       	ldd	r21, Y+2	; 0x02
    2b64:	6b 81       	ldd	r22, Y+3	; 0x03
    2b66:	7c 81       	ldd	r23, Y+4	; 0x04
    2b68:	c8 01       	movw	r24, r16
    2b6a:	0e 94 c2 14 	call	0x2984	; 0x2984 <_ZN5Print5printEmi>
    2b6e:	9a 83       	std	Y+2, r25	; 0x02
    2b70:	89 83       	std	Y+1, r24	; 0x01

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    2b72:	6e e2       	ldi	r22, 0x2E	; 46
    2b74:	c8 01       	movw	r24, r16
    2b76:	0e 94 c3 13 	call	0x2786	; 0x2786 <_ZN5Print5printEc>
    2b7a:	29 81       	ldd	r18, Y+1	; 0x01
    2b7c:	3a 81       	ldd	r19, Y+2	; 0x02
    2b7e:	82 0f       	add	r24, r18
    2b80:	93 1f       	adc	r25, r19
    2b82:	9c 01       	movw	r18, r24
    2b84:	2e 0d       	add	r18, r14
    2b86:	3f 1d       	adc	r19, r15
    2b88:	3a 83       	std	Y+2, r19	; 0x02
    2b8a:	29 83       	std	Y+1, r18	; 0x01
    2b8c:	a3 cf       	rjmp	.-186    	; 0x2ad4 <_ZN5Print10printFloatEdh+0x114>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	40 e0       	ldi	r20, 0x00	; 0
    2b94:	5f e3       	ldi	r21, 0x3F	; 63
    2b96:	c5 01       	movw	r24, r10
    2b98:	b4 01       	movw	r22, r8
    2b9a:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__addsf3>
    2b9e:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__fixunssfsi>
    2ba2:	ab 01       	movw	r20, r22
    2ba4:	bc 01       	movw	r22, r24
    2ba6:	2a e0       	ldi	r18, 0x0A	; 10
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	c8 01       	movw	r24, r16
    2bac:	0e 94 c2 14 	call	0x2984	; 0x2984 <_ZN5Print5printEmi>
    2bb0:	8e 0d       	add	r24, r14
    2bb2:	9f 1d       	adc	r25, r15
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2bb4:	0f 90       	pop	r0
    2bb6:	0f 90       	pop	r0
    2bb8:	0f 90       	pop	r0
    2bba:	0f 90       	pop	r0
    2bbc:	df 91       	pop	r29
    2bbe:	cf 91       	pop	r28
    2bc0:	1f 91       	pop	r17
    2bc2:	0f 91       	pop	r16
    2bc4:	ff 90       	pop	r15
    2bc6:	ef 90       	pop	r14
    2bc8:	df 90       	pop	r13
    2bca:	cf 90       	pop	r12
    2bcc:	bf 90       	pop	r11
    2bce:	af 90       	pop	r10
    2bd0:	9f 90       	pop	r9
    2bd2:	8f 90       	pop	r8
    2bd4:	7f 90       	pop	r7
    2bd6:	08 95       	ret

00002bd8 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2bd8:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <_ZN5Print10printFloatEdh>
}
    2bdc:	08 95       	ret

00002bde <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    2bde:	0f 93       	push	r16
    2be0:	1f 93       	push	r17
    2be2:	cf 93       	push	r28
    2be4:	df 93       	push	r29
    2be6:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2be8:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <_ZN5Print10printFloatEdh>
    2bec:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    2bee:	ce 01       	movw	r24, r28
    2bf0:	0e 94 cb 13 	call	0x2796	; 0x2796 <_ZN5Print7printlnEv>
  return n;
}
    2bf4:	80 0f       	add	r24, r16
    2bf6:	91 1f       	adc	r25, r17
    2bf8:	df 91       	pop	r29
    2bfa:	cf 91       	pop	r28
    2bfc:	1f 91       	pop	r17
    2bfe:	0f 91       	pop	r16
    2c00:	08 95       	ret

00002c02 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2c02:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <_ZN7TwoWire14rxBufferLengthE>
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	20 91 15 05 	lds	r18, 0x0515	; 0x800515 <_ZN7TwoWire13rxBufferIndexE>
    2c0c:	82 1b       	sub	r24, r18
    2c0e:	91 09       	sbc	r25, r1
    2c10:	08 95       	ret

00002c12 <_ZN7TwoWire4readEv>:
    2c12:	90 91 15 05 	lds	r25, 0x0515	; 0x800515 <_ZN7TwoWire13rxBufferIndexE>
    2c16:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <_ZN7TwoWire14rxBufferLengthE>
    2c1a:	98 17       	cp	r25, r24
    2c1c:	50 f4       	brcc	.+20     	; 0x2c32 <_ZN7TwoWire4readEv+0x20>
    2c1e:	e9 2f       	mov	r30, r25
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	ea 5e       	subi	r30, 0xEA	; 234
    2c24:	fa 4f       	sbci	r31, 0xFA	; 250
    2c26:	20 81       	ld	r18, Z
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	9f 5f       	subi	r25, 0xFF	; 255
    2c2c:	90 93 15 05 	sts	0x0515, r25	; 0x800515 <_ZN7TwoWire13rxBufferIndexE>
    2c30:	02 c0       	rjmp	.+4      	; 0x2c36 <_ZN7TwoWire4readEv+0x24>
    2c32:	2f ef       	ldi	r18, 0xFF	; 255
    2c34:	3f ef       	ldi	r19, 0xFF	; 255
    2c36:	c9 01       	movw	r24, r18
    2c38:	08 95       	ret

00002c3a <_ZN7TwoWire4peekEv>:
    2c3a:	e0 91 15 05 	lds	r30, 0x0515	; 0x800515 <_ZN7TwoWire13rxBufferIndexE>
    2c3e:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <_ZN7TwoWire14rxBufferLengthE>
    2c42:	e8 17       	cp	r30, r24
    2c44:	30 f4       	brcc	.+12     	; 0x2c52 <_ZN7TwoWire4peekEv+0x18>
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	ea 5e       	subi	r30, 0xEA	; 234
    2c4a:	fa 4f       	sbci	r31, 0xFA	; 250
    2c4c:	80 81       	ld	r24, Z
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	08 95       	ret
    2c52:	8f ef       	ldi	r24, 0xFF	; 255
    2c54:	9f ef       	ldi	r25, 0xFF	; 255
    2c56:	08 95       	ret

00002c58 <_ZN7TwoWire5flushEv>:
    2c58:	08 95       	ret

00002c5a <_ZN7TwoWire5writeEPKhj>:
    2c5a:	cf 92       	push	r12
    2c5c:	df 92       	push	r13
    2c5e:	ef 92       	push	r14
    2c60:	ff 92       	push	r15
    2c62:	0f 93       	push	r16
    2c64:	1f 93       	push	r17
    2c66:	cf 93       	push	r28
    2c68:	df 93       	push	r29
    2c6a:	8c 01       	movw	r16, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	6a 01       	movw	r12, r20
    2c70:	20 91 f0 04 	lds	r18, 0x04F0	; 0x8004f0 <_ZN7TwoWire12transmittingE>
    2c74:	22 23       	and	r18, r18
    2c76:	a1 f0       	breq	.+40     	; 0x2ca0 <_ZN7TwoWire5writeEPKhj+0x46>
    2c78:	41 15       	cp	r20, r1
    2c7a:	51 05       	cpc	r21, r1
    2c7c:	a1 f0       	breq	.+40     	; 0x2ca6 <_ZN7TwoWire5writeEPKhj+0x4c>
    2c7e:	eb 01       	movw	r28, r22
    2c80:	7b 01       	movw	r14, r22
    2c82:	e4 0e       	add	r14, r20
    2c84:	f5 1e       	adc	r15, r21
    2c86:	69 91       	ld	r22, Y+
    2c88:	d8 01       	movw	r26, r16
    2c8a:	ed 91       	ld	r30, X+
    2c8c:	fc 91       	ld	r31, X
    2c8e:	01 90       	ld	r0, Z+
    2c90:	f0 81       	ld	r31, Z
    2c92:	e0 2d       	mov	r30, r0
    2c94:	c8 01       	movw	r24, r16
    2c96:	09 95       	icall
    2c98:	ce 15       	cp	r28, r14
    2c9a:	df 05       	cpc	r29, r15
    2c9c:	a1 f7       	brne	.-24     	; 0x2c86 <_ZN7TwoWire5writeEPKhj+0x2c>
    2c9e:	03 c0       	rjmp	.+6      	; 0x2ca6 <_ZN7TwoWire5writeEPKhj+0x4c>
    2ca0:	64 2f       	mov	r22, r20
    2ca2:	0e 94 c7 19 	call	0x338e	; 0x338e <twi_transmit>
    2ca6:	c6 01       	movw	r24, r12
    2ca8:	df 91       	pop	r29
    2caa:	cf 91       	pop	r28
    2cac:	1f 91       	pop	r17
    2cae:	0f 91       	pop	r16
    2cb0:	ff 90       	pop	r15
    2cb2:	ef 90       	pop	r14
    2cb4:	df 90       	pop	r13
    2cb6:	cf 90       	pop	r12
    2cb8:	08 95       	ret

00002cba <_ZN7TwoWire5writeEh>:
    2cba:	cf 93       	push	r28
    2cbc:	df 93       	push	r29
    2cbe:	1f 92       	push	r1
    2cc0:	cd b7       	in	r28, 0x3d	; 61
    2cc2:	de b7       	in	r29, 0x3e	; 62
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	69 83       	std	Y+1, r22	; 0x01
    2cc8:	90 91 f0 04 	lds	r25, 0x04F0	; 0x8004f0 <_ZN7TwoWire12transmittingE>
    2ccc:	99 23       	and	r25, r25
    2cce:	d9 f0       	breq	.+54     	; 0x2d06 <_ZN7TwoWire5writeEh+0x4c>
    2cd0:	90 91 f1 04 	lds	r25, 0x04F1	; 0x8004f1 <_ZN7TwoWire14txBufferLengthE>
    2cd4:	90 32       	cpi	r25, 0x20	; 32
    2cd6:	38 f0       	brcs	.+14     	; 0x2ce6 <_ZN7TwoWire5writeEh+0x2c>
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	93 83       	std	Z+3, r25	; 0x03
    2cde:	82 83       	std	Z+2, r24	; 0x02
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	17 c0       	rjmp	.+46     	; 0x2d14 <_ZN7TwoWire5writeEh+0x5a>
    2ce6:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <_ZN7TwoWire13txBufferIndexE>
    2cea:	e8 2f       	mov	r30, r24
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	ed 50       	subi	r30, 0x0D	; 13
    2cf0:	fb 4f       	sbci	r31, 0xFB	; 251
    2cf2:	99 81       	ldd	r25, Y+1	; 0x01
    2cf4:	90 83       	st	Z, r25
    2cf6:	8f 5f       	subi	r24, 0xFF	; 255
    2cf8:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <_ZN7TwoWire13txBufferIndexE>
    2cfc:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <_ZN7TwoWire14txBufferLengthE>
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	07 c0       	rjmp	.+14     	; 0x2d14 <_ZN7TwoWire5writeEh+0x5a>
    2d06:	61 e0       	ldi	r22, 0x01	; 1
    2d08:	ce 01       	movw	r24, r28
    2d0a:	01 96       	adiw	r24, 0x01	; 1
    2d0c:	0e 94 c7 19 	call	0x338e	; 0x338e <twi_transmit>
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	0f 90       	pop	r0
    2d16:	df 91       	pop	r29
    2d18:	cf 91       	pop	r28
    2d1a:	08 95       	ret

00002d1c <_ZN7TwoWireC1Ev>:
    2d1c:	fc 01       	movw	r30, r24
    2d1e:	13 82       	std	Z+3, r1	; 0x03
    2d20:	12 82       	std	Z+2, r1	; 0x02
    2d22:	88 ee       	ldi	r24, 0xE8	; 232
    2d24:	93 e0       	ldi	r25, 0x03	; 3
    2d26:	a0 e0       	ldi	r26, 0x00	; 0
    2d28:	b0 e0       	ldi	r27, 0x00	; 0
    2d2a:	84 83       	std	Z+4, r24	; 0x04
    2d2c:	95 83       	std	Z+5, r25	; 0x05
    2d2e:	a6 83       	std	Z+6, r26	; 0x06
    2d30:	b7 83       	std	Z+7, r27	; 0x07
    2d32:	89 ef       	ldi	r24, 0xF9	; 249
    2d34:	92 e0       	ldi	r25, 0x02	; 2
    2d36:	91 83       	std	Z+1, r25	; 0x01
    2d38:	80 83       	st	Z, r24
    2d3a:	08 95       	ret

00002d3c <_ZN7TwoWire5beginEv>:
    2d3c:	10 92 15 05 	sts	0x0515, r1	; 0x800515 <_ZN7TwoWire13rxBufferIndexE>
    2d40:	10 92 14 05 	sts	0x0514, r1	; 0x800514 <_ZN7TwoWire14rxBufferLengthE>
    2d44:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <_ZN7TwoWire13txBufferIndexE>
    2d48:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <_ZN7TwoWire14txBufferLengthE>
    2d4c:	0e 94 0b 19 	call	0x3216	; 0x3216 <twi_init>
    2d50:	08 95       	ret

00002d52 <_ZN7TwoWire17beginTransmissionEh>:
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <_ZN7TwoWire12transmittingE>
    2d58:	60 93 13 05 	sts	0x0513, r22	; 0x800513 <_ZN7TwoWire9txAddressE>
    2d5c:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <_ZN7TwoWire13txBufferIndexE>
    2d60:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <_ZN7TwoWire14txBufferLengthE>
    2d64:	08 95       	ret

00002d66 <_ZN7TwoWire17beginTransmissionEi>:
    2d66:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <_ZN7TwoWire17beginTransmissionEh>
    2d6a:	08 95       	ret

00002d6c <_ZN7TwoWire15endTransmissionEh>:
    2d6c:	0f 93       	push	r16
    2d6e:	06 2f       	mov	r16, r22
    2d70:	21 e0       	ldi	r18, 0x01	; 1
    2d72:	40 91 f1 04 	lds	r20, 0x04F1	; 0x8004f1 <_ZN7TwoWire14txBufferLengthE>
    2d76:	63 ef       	ldi	r22, 0xF3	; 243
    2d78:	74 e0       	ldi	r23, 0x04	; 4
    2d7a:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <_ZN7TwoWire9txAddressE>
    2d7e:	0e 94 71 19 	call	0x32e2	; 0x32e2 <twi_writeTo>
    2d82:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <_ZN7TwoWire13txBufferIndexE>
    2d86:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <_ZN7TwoWire14txBufferLengthE>
    2d8a:	10 92 f0 04 	sts	0x04F0, r1	; 0x8004f0 <_ZN7TwoWire12transmittingE>
    2d8e:	0f 91       	pop	r16
    2d90:	08 95       	ret

00002d92 <_ZN7TwoWire11requestFromEhhmhh>:
    2d92:	4f 92       	push	r4
    2d94:	5f 92       	push	r5
    2d96:	6f 92       	push	r6
    2d98:	7f 92       	push	r7
    2d9a:	af 92       	push	r10
    2d9c:	bf 92       	push	r11
    2d9e:	cf 92       	push	r12
    2da0:	ef 92       	push	r14
    2da2:	ff 92       	push	r15
    2da4:	0f 93       	push	r16
    2da6:	1f 93       	push	r17
    2da8:	cf 93       	push	r28
    2daa:	df 93       	push	r29
    2dac:	5c 01       	movw	r10, r24
    2dae:	f6 2e       	mov	r15, r22
    2db0:	d4 2f       	mov	r29, r20
    2db2:	28 01       	movw	r4, r16
    2db4:	39 01       	movw	r6, r18
    2db6:	ee 20       	and	r14, r14
    2db8:	49 f1       	breq	.+82     	; 0x2e0c <_ZN7TwoWire11requestFromEhhmhh+0x7a>
    2dba:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <_ZN7TwoWire17beginTransmissionEh>
    2dbe:	8e 2d       	mov	r24, r14
    2dc0:	84 30       	cpi	r24, 0x04	; 4
    2dc2:	08 f0       	brcs	.+2      	; 0x2dc6 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2dc4:	83 e0       	ldi	r24, 0x03	; 3
    2dc6:	cf ef       	ldi	r28, 0xFF	; 255
    2dc8:	c8 0f       	add	r28, r24
    2dca:	88 23       	and	r24, r24
    2dcc:	d9 f0       	breq	.+54     	; 0x2e04 <_ZN7TwoWire11requestFromEhhmhh+0x72>
    2dce:	8c 2f       	mov	r24, r28
    2dd0:	88 0f       	add	r24, r24
    2dd2:	88 0f       	add	r24, r24
    2dd4:	88 0f       	add	r24, r24
    2dd6:	a3 01       	movw	r20, r6
    2dd8:	92 01       	movw	r18, r4
    2dda:	04 c0       	rjmp	.+8      	; 0x2de4 <_ZN7TwoWire11requestFromEhhmhh+0x52>
    2ddc:	56 95       	lsr	r21
    2dde:	47 95       	ror	r20
    2de0:	37 95       	ror	r19
    2de2:	27 95       	ror	r18
    2de4:	8a 95       	dec	r24
    2de6:	d2 f7       	brpl	.-12     	; 0x2ddc <_ZN7TwoWire11requestFromEhhmhh+0x4a>
    2de8:	ca 01       	movw	r24, r20
    2dea:	b9 01       	movw	r22, r18
    2dec:	d5 01       	movw	r26, r10
    2dee:	ed 91       	ld	r30, X+
    2df0:	fc 91       	ld	r31, X
    2df2:	01 90       	ld	r0, Z+
    2df4:	f0 81       	ld	r31, Z
    2df6:	e0 2d       	mov	r30, r0
    2df8:	c5 01       	movw	r24, r10
    2dfa:	09 95       	icall
    2dfc:	8c 2f       	mov	r24, r28
    2dfe:	c1 50       	subi	r28, 0x01	; 1
    2e00:	81 11       	cpse	r24, r1
    2e02:	e5 cf       	rjmp	.-54     	; 0x2dce <_ZN7TwoWire11requestFromEhhmhh+0x3c>
    2e04:	60 e0       	ldi	r22, 0x00	; 0
    2e06:	c5 01       	movw	r24, r10
    2e08:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <_ZN7TwoWire15endTransmissionEh>
    2e0c:	4d 2f       	mov	r20, r29
    2e0e:	d1 32       	cpi	r29, 0x21	; 33
    2e10:	08 f0       	brcs	.+2      	; 0x2e14 <_ZN7TwoWire11requestFromEhhmhh+0x82>
    2e12:	40 e2       	ldi	r20, 0x20	; 32
    2e14:	2c 2d       	mov	r18, r12
    2e16:	66 e1       	ldi	r22, 0x16	; 22
    2e18:	75 e0       	ldi	r23, 0x05	; 5
    2e1a:	8f 2d       	mov	r24, r15
    2e1c:	0e 94 29 19 	call	0x3252	; 0x3252 <twi_readFrom>
    2e20:	10 92 15 05 	sts	0x0515, r1	; 0x800515 <_ZN7TwoWire13rxBufferIndexE>
    2e24:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <_ZN7TwoWire14rxBufferLengthE>
    2e28:	df 91       	pop	r29
    2e2a:	cf 91       	pop	r28
    2e2c:	1f 91       	pop	r17
    2e2e:	0f 91       	pop	r16
    2e30:	ff 90       	pop	r15
    2e32:	ef 90       	pop	r14
    2e34:	cf 90       	pop	r12
    2e36:	bf 90       	pop	r11
    2e38:	af 90       	pop	r10
    2e3a:	7f 90       	pop	r7
    2e3c:	6f 90       	pop	r6
    2e3e:	5f 90       	pop	r5
    2e40:	4f 90       	pop	r4
    2e42:	08 95       	ret

00002e44 <_ZN7TwoWire11requestFromEhhh>:
    2e44:	cf 92       	push	r12
    2e46:	ef 92       	push	r14
    2e48:	0f 93       	push	r16
    2e4a:	1f 93       	push	r17
    2e4c:	c2 2e       	mov	r12, r18
    2e4e:	e1 2c       	mov	r14, r1
    2e50:	00 e0       	ldi	r16, 0x00	; 0
    2e52:	10 e0       	ldi	r17, 0x00	; 0
    2e54:	98 01       	movw	r18, r16
    2e56:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN7TwoWire11requestFromEhhmhh>
    2e5a:	1f 91       	pop	r17
    2e5c:	0f 91       	pop	r16
    2e5e:	ef 90       	pop	r14
    2e60:	cf 90       	pop	r12
    2e62:	08 95       	ret

00002e64 <_ZN7TwoWire11requestFromEii>:
    2e64:	21 e0       	ldi	r18, 0x01	; 1
    2e66:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN7TwoWire11requestFromEhhh>
    2e6a:	08 95       	ret

00002e6c <_ZN7TwoWire15endTransmissionEv>:
    2e6c:	61 e0       	ldi	r22, 0x01	; 1
    2e6e:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <_ZN7TwoWire15endTransmissionEh>
    2e72:	08 95       	ret

00002e74 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2e74:	84 ee       	ldi	r24, 0xE4	; 228
    2e76:	94 e0       	ldi	r25, 0x04	; 4
    2e78:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN7TwoWireC1Ev>
    2e7c:	08 95       	ret

00002e7e <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    2e7e:	1f 92       	push	r1
    2e80:	0f 92       	push	r0
    2e82:	0f b6       	in	r0, 0x3f	; 63
    2e84:	0f 92       	push	r0
    2e86:	11 24       	eor	r1, r1
    2e88:	2f 93       	push	r18
    2e8a:	3f 93       	push	r19
    2e8c:	8f 93       	push	r24
    2e8e:	9f 93       	push	r25
    2e90:	af 93       	push	r26
    2e92:	bf 93       	push	r27
    2e94:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <timer0_millis>
    2e98:	90 91 38 05 	lds	r25, 0x0538	; 0x800538 <timer0_millis+0x1>
    2e9c:	a0 91 39 05 	lds	r26, 0x0539	; 0x800539 <timer0_millis+0x2>
    2ea0:	b0 91 3a 05 	lds	r27, 0x053A	; 0x80053a <timer0_millis+0x3>
    2ea4:	30 91 36 05 	lds	r19, 0x0536	; 0x800536 <timer0_fract>
    2ea8:	23 e0       	ldi	r18, 0x03	; 3
    2eaa:	23 0f       	add	r18, r19
    2eac:	2d 37       	cpi	r18, 0x7D	; 125
    2eae:	20 f4       	brcc	.+8      	; 0x2eb8 <__vector_16+0x3a>
    2eb0:	01 96       	adiw	r24, 0x01	; 1
    2eb2:	a1 1d       	adc	r26, r1
    2eb4:	b1 1d       	adc	r27, r1
    2eb6:	05 c0       	rjmp	.+10     	; 0x2ec2 <__vector_16+0x44>
    2eb8:	26 e8       	ldi	r18, 0x86	; 134
    2eba:	23 0f       	add	r18, r19
    2ebc:	02 96       	adiw	r24, 0x02	; 2
    2ebe:	a1 1d       	adc	r26, r1
    2ec0:	b1 1d       	adc	r27, r1
    2ec2:	20 93 36 05 	sts	0x0536, r18	; 0x800536 <timer0_fract>
    2ec6:	80 93 37 05 	sts	0x0537, r24	; 0x800537 <timer0_millis>
    2eca:	90 93 38 05 	sts	0x0538, r25	; 0x800538 <timer0_millis+0x1>
    2ece:	a0 93 39 05 	sts	0x0539, r26	; 0x800539 <timer0_millis+0x2>
    2ed2:	b0 93 3a 05 	sts	0x053A, r27	; 0x80053a <timer0_millis+0x3>
    2ed6:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <timer0_overflow_count>
    2eda:	90 91 3c 05 	lds	r25, 0x053C	; 0x80053c <timer0_overflow_count+0x1>
    2ede:	a0 91 3d 05 	lds	r26, 0x053D	; 0x80053d <timer0_overflow_count+0x2>
    2ee2:	b0 91 3e 05 	lds	r27, 0x053E	; 0x80053e <timer0_overflow_count+0x3>
    2ee6:	01 96       	adiw	r24, 0x01	; 1
    2ee8:	a1 1d       	adc	r26, r1
    2eea:	b1 1d       	adc	r27, r1
    2eec:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <timer0_overflow_count>
    2ef0:	90 93 3c 05 	sts	0x053C, r25	; 0x80053c <timer0_overflow_count+0x1>
    2ef4:	a0 93 3d 05 	sts	0x053D, r26	; 0x80053d <timer0_overflow_count+0x2>
    2ef8:	b0 93 3e 05 	sts	0x053E, r27	; 0x80053e <timer0_overflow_count+0x3>
    2efc:	bf 91       	pop	r27
    2efe:	af 91       	pop	r26
    2f00:	9f 91       	pop	r25
    2f02:	8f 91       	pop	r24
    2f04:	3f 91       	pop	r19
    2f06:	2f 91       	pop	r18
    2f08:	0f 90       	pop	r0
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	0f 90       	pop	r0
    2f0e:	1f 90       	pop	r1
    2f10:	18 95       	reti

00002f12 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2f12:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2f14:	f8 94       	cli
	m = timer0_overflow_count;
    2f16:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <timer0_overflow_count>
    2f1a:	90 91 3c 05 	lds	r25, 0x053C	; 0x80053c <timer0_overflow_count+0x1>
    2f1e:	a0 91 3d 05 	lds	r26, 0x053D	; 0x80053d <timer0_overflow_count+0x2>
    2f22:	b0 91 3e 05 	lds	r27, 0x053E	; 0x80053e <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    2f26:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2f28:	a8 9b       	sbis	0x15, 0	; 21
    2f2a:	05 c0       	rjmp	.+10     	; 0x2f36 <micros+0x24>
    2f2c:	2f 3f       	cpi	r18, 0xFF	; 255
    2f2e:	19 f0       	breq	.+6      	; 0x2f36 <micros+0x24>
		m++;
    2f30:	01 96       	adiw	r24, 0x01	; 1
    2f32:	a1 1d       	adc	r26, r1
    2f34:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2f36:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2f38:	ba 2f       	mov	r27, r26
    2f3a:	a9 2f       	mov	r26, r25
    2f3c:	98 2f       	mov	r25, r24
    2f3e:	88 27       	eor	r24, r24
    2f40:	82 0f       	add	r24, r18
    2f42:	91 1d       	adc	r25, r1
    2f44:	a1 1d       	adc	r26, r1
    2f46:	b1 1d       	adc	r27, r1
    2f48:	bc 01       	movw	r22, r24
    2f4a:	cd 01       	movw	r24, r26
    2f4c:	42 e0       	ldi	r20, 0x02	; 2
    2f4e:	66 0f       	add	r22, r22
    2f50:	77 1f       	adc	r23, r23
    2f52:	88 1f       	adc	r24, r24
    2f54:	99 1f       	adc	r25, r25
    2f56:	4a 95       	dec	r20
    2f58:	d1 f7       	brne	.-12     	; 0x2f4e <micros+0x3c>
}
    2f5a:	08 95       	ret

00002f5c <delay>:

void delay(unsigned long ms)
{
    2f5c:	8f 92       	push	r8
    2f5e:	9f 92       	push	r9
    2f60:	af 92       	push	r10
    2f62:	bf 92       	push	r11
    2f64:	cf 92       	push	r12
    2f66:	df 92       	push	r13
    2f68:	ef 92       	push	r14
    2f6a:	ff 92       	push	r15
    2f6c:	6b 01       	movw	r12, r22
    2f6e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    2f70:	0e 94 89 17 	call	0x2f12	; 0x2f12 <micros>
    2f74:	4b 01       	movw	r8, r22
    2f76:	5c 01       	movw	r10, r24

	while (ms > 0) {
    2f78:	c1 14       	cp	r12, r1
    2f7a:	d1 04       	cpc	r13, r1
    2f7c:	e1 04       	cpc	r14, r1
    2f7e:	f1 04       	cpc	r15, r1
    2f80:	01 f1       	breq	.+64     	; 0x2fc2 <delay+0x66>
		yield();
    2f82:	0e 94 0a 19 	call	0x3214	; 0x3214 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    2f86:	0e 94 89 17 	call	0x2f12	; 0x2f12 <micros>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	88 19       	sub	r24, r8
    2f90:	99 09       	sbc	r25, r9
    2f92:	aa 09       	sbc	r26, r10
    2f94:	bb 09       	sbc	r27, r11
    2f96:	88 3e       	cpi	r24, 0xE8	; 232
    2f98:	93 40       	sbci	r25, 0x03	; 3
    2f9a:	a1 05       	cpc	r26, r1
    2f9c:	b1 05       	cpc	r27, r1
    2f9e:	60 f3       	brcs	.-40     	; 0x2f78 <delay+0x1c>
			ms--;
    2fa0:	21 e0       	ldi	r18, 0x01	; 1
    2fa2:	c2 1a       	sub	r12, r18
    2fa4:	d1 08       	sbc	r13, r1
    2fa6:	e1 08       	sbc	r14, r1
    2fa8:	f1 08       	sbc	r15, r1
			start += 1000;
    2faa:	88 ee       	ldi	r24, 0xE8	; 232
    2fac:	88 0e       	add	r8, r24
    2fae:	83 e0       	ldi	r24, 0x03	; 3
    2fb0:	98 1e       	adc	r9, r24
    2fb2:	a1 1c       	adc	r10, r1
    2fb4:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2fb6:	c1 14       	cp	r12, r1
    2fb8:	d1 04       	cpc	r13, r1
    2fba:	e1 04       	cpc	r14, r1
    2fbc:	f1 04       	cpc	r15, r1
    2fbe:	19 f7       	brne	.-58     	; 0x2f86 <delay+0x2a>
    2fc0:	db cf       	rjmp	.-74     	; 0x2f78 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    2fc2:	ff 90       	pop	r15
    2fc4:	ef 90       	pop	r14
    2fc6:	df 90       	pop	r13
    2fc8:	cf 90       	pop	r12
    2fca:	bf 90       	pop	r11
    2fcc:	af 90       	pop	r10
    2fce:	9f 90       	pop	r9
    2fd0:	8f 90       	pop	r8
    2fd2:	08 95       	ret

00002fd4 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2fd4:	82 30       	cpi	r24, 0x02	; 2
    2fd6:	91 05       	cpc	r25, r1
    2fd8:	38 f0       	brcs	.+14     	; 0x2fe8 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    2fda:	88 0f       	add	r24, r24
    2fdc:	99 1f       	adc	r25, r25
    2fde:	88 0f       	add	r24, r24
    2fe0:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    2fe2:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	f1 f7       	brne	.-4      	; 0x2fe4 <delayMicroseconds+0x10>
    2fe8:	08 95       	ret

00002fea <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2fea:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2fec:	84 b5       	in	r24, 0x24	; 36
    2fee:	82 60       	ori	r24, 0x02	; 2
    2ff0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2ff2:	84 b5       	in	r24, 0x24	; 36
    2ff4:	81 60       	ori	r24, 0x01	; 1
    2ff6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2ff8:	85 b5       	in	r24, 0x25	; 37
    2ffa:	82 60       	ori	r24, 0x02	; 2
    2ffc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2ffe:	85 b5       	in	r24, 0x25	; 37
    3000:	81 60       	ori	r24, 0x01	; 1
    3002:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3004:	ee e6       	ldi	r30, 0x6E	; 110
    3006:	f0 e0       	ldi	r31, 0x00	; 0
    3008:	80 81       	ld	r24, Z
    300a:	81 60       	ori	r24, 0x01	; 1
    300c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    300e:	e1 e8       	ldi	r30, 0x81	; 129
    3010:	f0 e0       	ldi	r31, 0x00	; 0
    3012:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3014:	80 81       	ld	r24, Z
    3016:	82 60       	ori	r24, 0x02	; 2
    3018:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    301a:	80 81       	ld	r24, Z
    301c:	81 60       	ori	r24, 0x01	; 1
    301e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3020:	e0 e8       	ldi	r30, 0x80	; 128
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	80 81       	ld	r24, Z
    3026:	81 60       	ori	r24, 0x01	; 1
    3028:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    302a:	e1 eb       	ldi	r30, 0xB1	; 177
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	80 81       	ld	r24, Z
    3030:	84 60       	ori	r24, 0x04	; 4
    3032:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3034:	e0 eb       	ldi	r30, 0xB0	; 176
    3036:	f0 e0       	ldi	r31, 0x00	; 0
    3038:	80 81       	ld	r24, Z
    303a:	81 60       	ori	r24, 0x01	; 1
    303c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    303e:	ea e7       	ldi	r30, 0x7A	; 122
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	80 81       	ld	r24, Z
    3044:	84 60       	ori	r24, 0x04	; 4
    3046:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3048:	80 81       	ld	r24, Z
    304a:	82 60       	ori	r24, 0x02	; 2
    304c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    304e:	80 81       	ld	r24, Z
    3050:	81 60       	ori	r24, 0x01	; 1
    3052:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3054:	80 81       	ld	r24, Z
    3056:	80 68       	ori	r24, 0x80	; 128
    3058:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    305a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    305e:	08 95       	ret

00003060 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    3060:	8e 30       	cpi	r24, 0x0E	; 14
    3062:	08 f0       	brcs	.+2      	; 0x3066 <analogRead+0x6>
    3064:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    3066:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    306a:	90 e4       	ldi	r25, 0x40	; 64
    306c:	29 9f       	mul	r18, r25
    306e:	90 01       	movw	r18, r0
    3070:	11 24       	eor	r1, r1
    3072:	87 70       	andi	r24, 0x07	; 7
    3074:	82 2b       	or	r24, r18
    3076:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    307a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    307e:	80 64       	ori	r24, 0x40	; 64
    3080:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    3084:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3088:	86 fd       	sbrc	r24, 6
    308a:	fc cf       	rjmp	.-8      	; 0x3084 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    308c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    3090:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    3094:	90 e0       	ldi	r25, 0x00	; 0
}
    3096:	92 2b       	or	r25, r18
    3098:	08 95       	ret

0000309a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    309a:	83 30       	cpi	r24, 0x03	; 3
    309c:	81 f0       	breq	.+32     	; 0x30be <turnOffPWM+0x24>
    309e:	28 f4       	brcc	.+10     	; 0x30aa <turnOffPWM+0x10>
    30a0:	81 30       	cpi	r24, 0x01	; 1
    30a2:	99 f0       	breq	.+38     	; 0x30ca <turnOffPWM+0x30>
    30a4:	82 30       	cpi	r24, 0x02	; 2
    30a6:	a1 f0       	breq	.+40     	; 0x30d0 <turnOffPWM+0x36>
    30a8:	08 95       	ret
    30aa:	87 30       	cpi	r24, 0x07	; 7
    30ac:	a9 f0       	breq	.+42     	; 0x30d8 <turnOffPWM+0x3e>
    30ae:	88 30       	cpi	r24, 0x08	; 8
    30b0:	b9 f0       	breq	.+46     	; 0x30e0 <turnOffPWM+0x46>
    30b2:	84 30       	cpi	r24, 0x04	; 4
    30b4:	d1 f4       	brne	.+52     	; 0x30ea <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    30b6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    30ba:	8f 7d       	andi	r24, 0xDF	; 223
    30bc:	03 c0       	rjmp	.+6      	; 0x30c4 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    30be:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    30c2:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    30c4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    30c8:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    30ca:	84 b5       	in	r24, 0x24	; 36
    30cc:	8f 77       	andi	r24, 0x7F	; 127
    30ce:	02 c0       	rjmp	.+4      	; 0x30d4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    30d0:	84 b5       	in	r24, 0x24	; 36
    30d2:	8f 7d       	andi	r24, 0xDF	; 223
    30d4:	84 bd       	out	0x24, r24	; 36
    30d6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    30d8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    30dc:	8f 77       	andi	r24, 0x7F	; 127
    30de:	03 c0       	rjmp	.+6      	; 0x30e6 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    30e0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    30e4:	8f 7d       	andi	r24, 0xDF	; 223
    30e6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    30ea:	08 95       	ret

000030ec <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    30ec:	cf 93       	push	r28
    30ee:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	fc 01       	movw	r30, r24
    30f4:	ea 52       	subi	r30, 0x2A	; 42
    30f6:	ff 4f       	sbci	r31, 0xFF	; 255
    30f8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    30fa:	fc 01       	movw	r30, r24
    30fc:	e6 51       	subi	r30, 0x16	; 22
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3102:	88 23       	and	r24, r24
    3104:	61 f1       	breq	.+88     	; 0x315e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	88 0f       	add	r24, r24
    310a:	99 1f       	adc	r25, r25
    310c:	fc 01       	movw	r30, r24
    310e:	ee 5e       	subi	r30, 0xEE	; 238
    3110:	fe 4f       	sbci	r31, 0xFE	; 254
    3112:	c5 91       	lpm	r28, Z+
    3114:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3116:	fc 01       	movw	r30, r24
    3118:	e8 5f       	subi	r30, 0xF8	; 248
    311a:	fe 4f       	sbci	r31, 0xFE	; 254
    311c:	a5 91       	lpm	r26, Z+
    311e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3120:	61 11       	cpse	r22, r1
    3122:	09 c0       	rjmp	.+18     	; 0x3136 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3124:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3126:	f8 94       	cli
		*reg &= ~bit;
    3128:	88 81       	ld	r24, Y
    312a:	20 95       	com	r18
    312c:	82 23       	and	r24, r18
    312e:	88 83       	st	Y, r24
		*out &= ~bit;
    3130:	ec 91       	ld	r30, X
    3132:	2e 23       	and	r18, r30
    3134:	0b c0       	rjmp	.+22     	; 0x314c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3136:	62 30       	cpi	r22, 0x02	; 2
    3138:	61 f4       	brne	.+24     	; 0x3152 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    313a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    313c:	f8 94       	cli
		*reg &= ~bit;
    313e:	88 81       	ld	r24, Y
    3140:	32 2f       	mov	r19, r18
    3142:	30 95       	com	r19
    3144:	83 23       	and	r24, r19
    3146:	88 83       	st	Y, r24
		*out |= bit;
    3148:	ec 91       	ld	r30, X
    314a:	2e 2b       	or	r18, r30
    314c:	2c 93       	st	X, r18
		SREG = oldSREG;
    314e:	9f bf       	out	0x3f, r25	; 63
    3150:	06 c0       	rjmp	.+12     	; 0x315e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3152:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3154:	f8 94       	cli
		*reg |= bit;
    3156:	e8 81       	ld	r30, Y
    3158:	2e 2b       	or	r18, r30
    315a:	28 83       	st	Y, r18
		SREG = oldSREG;
    315c:	8f bf       	out	0x3f, r24	; 63
	}
}
    315e:	df 91       	pop	r29
    3160:	cf 91       	pop	r28
    3162:	08 95       	ret

00003164 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3164:	1f 93       	push	r17
    3166:	cf 93       	push	r28
    3168:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    316a:	28 2f       	mov	r18, r24
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	f9 01       	movw	r30, r18
    3170:	ee 53       	subi	r30, 0x3E	; 62
    3172:	ff 4f       	sbci	r31, 0xFF	; 255
    3174:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3176:	f9 01       	movw	r30, r18
    3178:	ea 52       	subi	r30, 0x2A	; 42
    317a:	ff 4f       	sbci	r31, 0xFF	; 255
    317c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    317e:	f9 01       	movw	r30, r18
    3180:	e6 51       	subi	r30, 0x16	; 22
    3182:	ff 4f       	sbci	r31, 0xFF	; 255
    3184:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3186:	cc 23       	and	r28, r28
    3188:	c1 f0       	breq	.+48     	; 0x31ba <digitalWrite+0x56>
    318a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    318c:	81 11       	cpse	r24, r1
    318e:	0e 94 4d 18 	call	0x309a	; 0x309a <turnOffPWM>

	out = portOutputRegister(port);
    3192:	ec 2f       	mov	r30, r28
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	ee 0f       	add	r30, r30
    3198:	ff 1f       	adc	r31, r31
    319a:	e8 5f       	subi	r30, 0xF8	; 248
    319c:	fe 4f       	sbci	r31, 0xFE	; 254
    319e:	a5 91       	lpm	r26, Z+
    31a0:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    31a2:	9f b7       	in	r25, 0x3f	; 63
	cli();
    31a4:	f8 94       	cli

	if (val == LOW) {
    31a6:	11 11       	cpse	r17, r1
    31a8:	04 c0       	rjmp	.+8      	; 0x31b2 <digitalWrite+0x4e>
		*out &= ~bit;
    31aa:	8c 91       	ld	r24, X
    31ac:	d0 95       	com	r29
    31ae:	d8 23       	and	r29, r24
    31b0:	02 c0       	rjmp	.+4      	; 0x31b6 <digitalWrite+0x52>
	} else {
		*out |= bit;
    31b2:	ec 91       	ld	r30, X
    31b4:	de 2b       	or	r29, r30
    31b6:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    31b8:	9f bf       	out	0x3f, r25	; 63
}
    31ba:	df 91       	pop	r29
    31bc:	cf 91       	pop	r28
    31be:	1f 91       	pop	r17
    31c0:	08 95       	ret

000031c2 <digitalRead>:

int digitalRead(uint8_t pin)
{
    31c2:	cf 93       	push	r28
    31c4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    31c6:	28 2f       	mov	r18, r24
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	f9 01       	movw	r30, r18
    31cc:	ee 53       	subi	r30, 0x3E	; 62
    31ce:	ff 4f       	sbci	r31, 0xFF	; 255
    31d0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    31d2:	f9 01       	movw	r30, r18
    31d4:	ea 52       	subi	r30, 0x2A	; 42
    31d6:	ff 4f       	sbci	r31, 0xFF	; 255
    31d8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    31da:	f9 01       	movw	r30, r18
    31dc:	e6 51       	subi	r30, 0x16	; 22
    31de:	ff 4f       	sbci	r31, 0xFF	; 255
    31e0:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    31e2:	cc 23       	and	r28, r28
    31e4:	91 f0       	breq	.+36     	; 0x320a <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    31e6:	81 11       	cpse	r24, r1
    31e8:	0e 94 4d 18 	call	0x309a	; 0x309a <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    31ec:	ec 2f       	mov	r30, r28
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	ee 0f       	add	r30, r30
    31f2:	ff 1f       	adc	r31, r31
    31f4:	e2 50       	subi	r30, 0x02	; 2
    31f6:	ff 4f       	sbci	r31, 0xFF	; 255
    31f8:	a5 91       	lpm	r26, Z+
    31fa:	b4 91       	lpm	r27, Z
    31fc:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    31fe:	ed 23       	and	r30, r29
    3200:	81 e0       	ldi	r24, 0x01	; 1
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	21 f4       	brne	.+8      	; 0x320e <digitalRead+0x4c>
    3206:	80 e0       	ldi	r24, 0x00	; 0
    3208:	02 c0       	rjmp	.+4      	; 0x320e <digitalRead+0x4c>
    320a:	80 e0       	ldi	r24, 0x00	; 0
    320c:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    320e:	df 91       	pop	r29
    3210:	cf 91       	pop	r28
    3212:	08 95       	ret

00003214 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3214:	08 95       	ret

00003216 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3216:	10 92 ac 05 	sts	0x05AC, r1	; 0x8005ac <twi_state>
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <twi_sendStop>
    3220:	10 92 a9 05 	sts	0x05A9, r1	; 0x8005a9 <twi_inRepStart>
    3224:	61 e0       	ldi	r22, 0x01	; 1
    3226:	82 e1       	ldi	r24, 0x12	; 18
    3228:	0e 94 b2 18 	call	0x3164	; 0x3164 <digitalWrite>
    322c:	61 e0       	ldi	r22, 0x01	; 1
    322e:	83 e1       	ldi	r24, 0x13	; 19
    3230:	0e 94 b2 18 	call	0x3164	; 0x3164 <digitalWrite>
    3234:	e9 eb       	ldi	r30, 0xB9	; 185
    3236:	f0 e0       	ldi	r31, 0x00	; 0
    3238:	80 81       	ld	r24, Z
    323a:	8e 7f       	andi	r24, 0xFE	; 254
    323c:	80 83       	st	Z, r24
    323e:	80 81       	ld	r24, Z
    3240:	8d 7f       	andi	r24, 0xFD	; 253
    3242:	80 83       	st	Z, r24
    3244:	88 e4       	ldi	r24, 0x48	; 72
    3246:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    324a:	85 e4       	ldi	r24, 0x45	; 69
    324c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3250:	08 95       	ret

00003252 <twi_readFrom>:
    3252:	41 32       	cpi	r20, 0x21	; 33
    3254:	08 f0       	brcs	.+2      	; 0x3258 <twi_readFrom+0x6>
    3256:	43 c0       	rjmp	.+134    	; 0x32de <twi_readFrom+0x8c>
    3258:	90 91 ac 05 	lds	r25, 0x05AC	; 0x8005ac <twi_state>
    325c:	91 11       	cpse	r25, r1
    325e:	fc cf       	rjmp	.-8      	; 0x3258 <twi_readFrom+0x6>
    3260:	91 e0       	ldi	r25, 0x01	; 1
    3262:	90 93 ac 05 	sts	0x05AC, r25	; 0x8005ac <twi_state>
    3266:	20 93 aa 05 	sts	0x05AA, r18	; 0x8005aa <twi_sendStop>
    326a:	2f ef       	ldi	r18, 0xFF	; 255
    326c:	20 93 3f 05 	sts	0x053F, r18	; 0x80053f <twi_error>
    3270:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <twi_masterBufferIndex>
    3274:	24 0f       	add	r18, r20
    3276:	20 93 83 05 	sts	0x0583, r18	; 0x800583 <twi_masterBufferLength>
    327a:	90 93 ab 05 	sts	0x05AB, r25	; 0x8005ab <twi_slarw>
    327e:	90 91 ab 05 	lds	r25, 0x05AB	; 0x8005ab <twi_slarw>
    3282:	88 0f       	add	r24, r24
    3284:	89 2b       	or	r24, r25
    3286:	80 93 ab 05 	sts	0x05AB, r24	; 0x8005ab <twi_slarw>
    328a:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <twi_inRepStart>
    328e:	81 30       	cpi	r24, 0x01	; 1
    3290:	61 f4       	brne	.+24     	; 0x32aa <twi_readFrom+0x58>
    3292:	10 92 a9 05 	sts	0x05A9, r1	; 0x8005a9 <twi_inRepStart>
    3296:	80 91 ab 05 	lds	r24, 0x05AB	; 0x8005ab <twi_slarw>
    329a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    329e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    32a2:	83 fd       	sbrc	r24, 3
    32a4:	f8 cf       	rjmp	.-16     	; 0x3296 <twi_readFrom+0x44>
    32a6:	85 ec       	ldi	r24, 0xC5	; 197
    32a8:	01 c0       	rjmp	.+2      	; 0x32ac <twi_readFrom+0x5a>
    32aa:	85 ee       	ldi	r24, 0xE5	; 229
    32ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    32b0:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <twi_state>
    32b4:	81 30       	cpi	r24, 0x01	; 1
    32b6:	e1 f3       	breq	.-8      	; 0x32b0 <twi_readFrom+0x5e>
    32b8:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <twi_masterBufferIndex>
    32bc:	84 17       	cp	r24, r20
    32be:	10 f4       	brcc	.+4      	; 0x32c4 <twi_readFrom+0x72>
    32c0:	40 91 84 05 	lds	r20, 0x0584	; 0x800584 <twi_masterBufferIndex>
    32c4:	a5 e8       	ldi	r26, 0x85	; 133
    32c6:	b5 e0       	ldi	r27, 0x05	; 5
    32c8:	96 2f       	mov	r25, r22
    32ca:	fb 01       	movw	r30, r22
    32cc:	8e 2f       	mov	r24, r30
    32ce:	89 1b       	sub	r24, r25
    32d0:	84 17       	cp	r24, r20
    32d2:	18 f4       	brcc	.+6      	; 0x32da <twi_readFrom+0x88>
    32d4:	8d 91       	ld	r24, X+
    32d6:	81 93       	st	Z+, r24
    32d8:	f9 cf       	rjmp	.-14     	; 0x32cc <twi_readFrom+0x7a>
    32da:	84 2f       	mov	r24, r20
    32dc:	08 95       	ret
    32de:	80 e0       	ldi	r24, 0x00	; 0
    32e0:	08 95       	ret

000032e2 <twi_writeTo>:
    32e2:	0f 93       	push	r16
    32e4:	41 32       	cpi	r20, 0x21	; 33
    32e6:	08 f0       	brcs	.+2      	; 0x32ea <twi_writeTo+0x8>
    32e8:	4a c0       	rjmp	.+148    	; 0x337e <twi_writeTo+0x9c>
    32ea:	90 91 ac 05 	lds	r25, 0x05AC	; 0x8005ac <twi_state>
    32ee:	91 11       	cpse	r25, r1
    32f0:	fc cf       	rjmp	.-8      	; 0x32ea <twi_writeTo+0x8>
    32f2:	32 e0       	ldi	r19, 0x02	; 2
    32f4:	30 93 ac 05 	sts	0x05AC, r19	; 0x8005ac <twi_state>
    32f8:	00 93 aa 05 	sts	0x05AA, r16	; 0x8005aa <twi_sendStop>
    32fc:	3f ef       	ldi	r19, 0xFF	; 255
    32fe:	30 93 3f 05 	sts	0x053F, r19	; 0x80053f <twi_error>
    3302:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <twi_masterBufferIndex>
    3306:	40 93 83 05 	sts	0x0583, r20	; 0x800583 <twi_masterBufferLength>
    330a:	56 2f       	mov	r21, r22
    330c:	a5 e8       	ldi	r26, 0x85	; 133
    330e:	b5 e0       	ldi	r27, 0x05	; 5
    3310:	fb 01       	movw	r30, r22
    3312:	3e 2f       	mov	r19, r30
    3314:	35 1b       	sub	r19, r21
    3316:	34 17       	cp	r19, r20
    3318:	18 f4       	brcc	.+6      	; 0x3320 <twi_writeTo+0x3e>
    331a:	31 91       	ld	r19, Z+
    331c:	3d 93       	st	X+, r19
    331e:	f9 cf       	rjmp	.-14     	; 0x3312 <twi_writeTo+0x30>
    3320:	10 92 ab 05 	sts	0x05AB, r1	; 0x8005ab <twi_slarw>
    3324:	30 91 ab 05 	lds	r19, 0x05AB	; 0x8005ab <twi_slarw>
    3328:	88 0f       	add	r24, r24
    332a:	83 2b       	or	r24, r19
    332c:	80 93 ab 05 	sts	0x05AB, r24	; 0x8005ab <twi_slarw>
    3330:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <twi_inRepStart>
    3334:	81 30       	cpi	r24, 0x01	; 1
    3336:	61 f4       	brne	.+24     	; 0x3350 <twi_writeTo+0x6e>
    3338:	10 92 a9 05 	sts	0x05A9, r1	; 0x8005a9 <twi_inRepStart>
    333c:	80 91 ab 05 	lds	r24, 0x05AB	; 0x8005ab <twi_slarw>
    3340:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3344:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3348:	83 fd       	sbrc	r24, 3
    334a:	f8 cf       	rjmp	.-16     	; 0x333c <twi_writeTo+0x5a>
    334c:	85 ec       	ldi	r24, 0xC5	; 197
    334e:	01 c0       	rjmp	.+2      	; 0x3352 <twi_writeTo+0x70>
    3350:	85 ee       	ldi	r24, 0xE5	; 229
    3352:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3356:	22 23       	and	r18, r18
    3358:	21 f0       	breq	.+8      	; 0x3362 <twi_writeTo+0x80>
    335a:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <twi_state>
    335e:	82 30       	cpi	r24, 0x02	; 2
    3360:	d1 f3       	breq	.-12     	; 0x3356 <twi_writeTo+0x74>
    3362:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <twi_error>
    3366:	8f 3f       	cpi	r24, 0xFF	; 255
    3368:	79 f0       	breq	.+30     	; 0x3388 <twi_writeTo+0xa6>
    336a:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <twi_error>
    336e:	80 32       	cpi	r24, 0x20	; 32
    3370:	41 f0       	breq	.+16     	; 0x3382 <twi_writeTo+0xa0>
    3372:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <twi_error>
    3376:	80 33       	cpi	r24, 0x30	; 48
    3378:	31 f0       	breq	.+12     	; 0x3386 <twi_writeTo+0xa4>
    337a:	94 e0       	ldi	r25, 0x04	; 4
    337c:	05 c0       	rjmp	.+10     	; 0x3388 <twi_writeTo+0xa6>
    337e:	91 e0       	ldi	r25, 0x01	; 1
    3380:	03 c0       	rjmp	.+6      	; 0x3388 <twi_writeTo+0xa6>
    3382:	92 e0       	ldi	r25, 0x02	; 2
    3384:	01 c0       	rjmp	.+2      	; 0x3388 <twi_writeTo+0xa6>
    3386:	93 e0       	ldi	r25, 0x03	; 3
    3388:	89 2f       	mov	r24, r25
    338a:	0f 91       	pop	r16
    338c:	08 95       	ret

0000338e <twi_transmit>:
    338e:	40 91 61 05 	lds	r20, 0x0561	; 0x800561 <twi_txBufferLength>
    3392:	26 2f       	mov	r18, r22
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	24 0f       	add	r18, r20
    3398:	31 1d       	adc	r19, r1
    339a:	21 32       	cpi	r18, 0x21	; 33
    339c:	31 05       	cpc	r19, r1
    339e:	dc f4       	brge	.+54     	; 0x33d6 <twi_transmit+0x48>
    33a0:	20 91 ac 05 	lds	r18, 0x05AC	; 0x8005ac <twi_state>
    33a4:	24 30       	cpi	r18, 0x04	; 4
    33a6:	c9 f4       	brne	.+50     	; 0x33da <twi_transmit+0x4c>
    33a8:	fc 01       	movw	r30, r24
    33aa:	80 e0       	ldi	r24, 0x00	; 0
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	86 17       	cp	r24, r22
    33b0:	58 f4       	brcc	.+22     	; 0x33c8 <twi_transmit+0x3a>
    33b2:	30 91 61 05 	lds	r19, 0x0561	; 0x800561 <twi_txBufferLength>
    33b6:	21 91       	ld	r18, Z+
    33b8:	dc 01       	movw	r26, r24
    33ba:	ad 59       	subi	r26, 0x9D	; 157
    33bc:	ba 4f       	sbci	r27, 0xFA	; 250
    33be:	a3 0f       	add	r26, r19
    33c0:	b1 1d       	adc	r27, r1
    33c2:	2c 93       	st	X, r18
    33c4:	01 96       	adiw	r24, 0x01	; 1
    33c6:	f3 cf       	rjmp	.-26     	; 0x33ae <twi_transmit+0x20>
    33c8:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <twi_txBufferLength>
    33cc:	68 0f       	add	r22, r24
    33ce:	60 93 61 05 	sts	0x0561, r22	; 0x800561 <twi_txBufferLength>
    33d2:	80 e0       	ldi	r24, 0x00	; 0
    33d4:	08 95       	ret
    33d6:	81 e0       	ldi	r24, 0x01	; 1
    33d8:	08 95       	ret
    33da:	82 e0       	ldi	r24, 0x02	; 2
    33dc:	08 95       	ret

000033de <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    33de:	85 ed       	ldi	r24, 0xD5	; 213
    33e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    33e4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    33e8:	84 fd       	sbrc	r24, 4
    33ea:	fc cf       	rjmp	.-8      	; 0x33e4 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    33ec:	10 92 ac 05 	sts	0x05AC, r1	; 0x8005ac <twi_state>
    33f0:	08 95       	ret

000033f2 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    33f2:	85 ec       	ldi	r24, 0xC5	; 197
    33f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    33f8:	10 92 ac 05 	sts	0x05AC, r1	; 0x8005ac <twi_state>
    33fc:	08 95       	ret

000033fe <__vector_24>:
}

ISR(TWI_vect)
{
    33fe:	1f 92       	push	r1
    3400:	0f 92       	push	r0
    3402:	0f b6       	in	r0, 0x3f	; 63
    3404:	0f 92       	push	r0
    3406:	11 24       	eor	r1, r1
    3408:	2f 93       	push	r18
    340a:	3f 93       	push	r19
    340c:	4f 93       	push	r20
    340e:	5f 93       	push	r21
    3410:	6f 93       	push	r22
    3412:	7f 93       	push	r23
    3414:	8f 93       	push	r24
    3416:	9f 93       	push	r25
    3418:	af 93       	push	r26
    341a:	bf 93       	push	r27
    341c:	ef 93       	push	r30
    341e:	ff 93       	push	r31
  switch(TW_STATUS){
    3420:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    3424:	88 7f       	andi	r24, 0xF8	; 248
    3426:	80 36       	cpi	r24, 0x60	; 96
    3428:	09 f4       	brne	.+2      	; 0x342c <__vector_24+0x2e>
    342a:	9e c0       	rjmp	.+316    	; 0x3568 <__vector_24+0x16a>
    342c:	78 f5       	brcc	.+94     	; 0x348c <__vector_24+0x8e>
    342e:	88 32       	cpi	r24, 0x28	; 40
    3430:	09 f4       	brne	.+2      	; 0x3434 <__vector_24+0x36>
    3432:	5d c0       	rjmp	.+186    	; 0x34ee <__vector_24+0xf0>
    3434:	90 f4       	brcc	.+36     	; 0x345a <__vector_24+0x5c>
    3436:	80 31       	cpi	r24, 0x10	; 16
    3438:	09 f4       	brne	.+2      	; 0x343c <__vector_24+0x3e>
    343a:	56 c0       	rjmp	.+172    	; 0x34e8 <__vector_24+0xea>
    343c:	38 f4       	brcc	.+14     	; 0x344c <__vector_24+0x4e>
    343e:	88 23       	and	r24, r24
    3440:	09 f4       	brne	.+2      	; 0x3444 <__vector_24+0x46>
    3442:	f5 c0       	rjmp	.+490    	; 0x362e <__vector_24+0x230>
    3444:	88 30       	cpi	r24, 0x08	; 8
    3446:	09 f4       	brne	.+2      	; 0x344a <__vector_24+0x4c>
    3448:	4f c0       	rjmp	.+158    	; 0x34e8 <__vector_24+0xea>
    344a:	f5 c0       	rjmp	.+490    	; 0x3636 <__vector_24+0x238>
    344c:	88 31       	cpi	r24, 0x18	; 24
    344e:	09 f4       	brne	.+2      	; 0x3452 <__vector_24+0x54>
    3450:	4e c0       	rjmp	.+156    	; 0x34ee <__vector_24+0xf0>
    3452:	80 32       	cpi	r24, 0x20	; 32
    3454:	09 f4       	brne	.+2      	; 0x3458 <__vector_24+0x5a>
    3456:	5f c0       	rjmp	.+190    	; 0x3516 <__vector_24+0x118>
    3458:	ee c0       	rjmp	.+476    	; 0x3636 <__vector_24+0x238>
    345a:	80 34       	cpi	r24, 0x40	; 64
    345c:	09 f4       	brne	.+2      	; 0x3460 <__vector_24+0x62>
    345e:	6a c0       	rjmp	.+212    	; 0x3534 <__vector_24+0x136>
    3460:	58 f4       	brcc	.+22     	; 0x3478 <__vector_24+0x7a>
    3462:	80 33       	cpi	r24, 0x30	; 48
    3464:	09 f4       	brne	.+2      	; 0x3468 <__vector_24+0x6a>
    3466:	57 c0       	rjmp	.+174    	; 0x3516 <__vector_24+0x118>
    3468:	88 33       	cpi	r24, 0x38	; 56
    346a:	09 f0       	breq	.+2      	; 0x346e <__vector_24+0x70>
    346c:	e4 c0       	rjmp	.+456    	; 0x3636 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    346e:	80 93 3f 05 	sts	0x053F, r24	; 0x80053f <twi_error>
      twi_releaseBus();
    3472:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <twi_releaseBus>
      break;
    3476:	df c0       	rjmp	.+446    	; 0x3636 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3478:	80 35       	cpi	r24, 0x50	; 80
    347a:	09 f4       	brne	.+2      	; 0x347e <__vector_24+0x80>
    347c:	4f c0       	rjmp	.+158    	; 0x351c <__vector_24+0x11e>
    347e:	88 35       	cpi	r24, 0x58	; 88
    3480:	09 f4       	brne	.+2      	; 0x3484 <__vector_24+0x86>
    3482:	5d c0       	rjmp	.+186    	; 0x353e <__vector_24+0x140>
    3484:	88 34       	cpi	r24, 0x48	; 72
    3486:	09 f0       	breq	.+2      	; 0x348a <__vector_24+0x8c>
    3488:	d6 c0       	rjmp	.+428    	; 0x3636 <__vector_24+0x238>
    348a:	d3 c0       	rjmp	.+422    	; 0x3632 <__vector_24+0x234>
    348c:	88 39       	cpi	r24, 0x98	; 152
    348e:	09 f4       	brne	.+2      	; 0x3492 <__vector_24+0x94>
    3490:	c4 c0       	rjmp	.+392    	; 0x361a <__vector_24+0x21c>
    3492:	a8 f4       	brcc	.+42     	; 0x34be <__vector_24+0xc0>
    3494:	88 37       	cpi	r24, 0x78	; 120
    3496:	09 f4       	brne	.+2      	; 0x349a <__vector_24+0x9c>
    3498:	67 c0       	rjmp	.+206    	; 0x3568 <__vector_24+0x16a>
    349a:	38 f4       	brcc	.+14     	; 0x34aa <__vector_24+0xac>
    349c:	88 36       	cpi	r24, 0x68	; 104
    349e:	09 f4       	brne	.+2      	; 0x34a2 <__vector_24+0xa4>
    34a0:	63 c0       	rjmp	.+198    	; 0x3568 <__vector_24+0x16a>
    34a2:	80 37       	cpi	r24, 0x70	; 112
    34a4:	09 f4       	brne	.+2      	; 0x34a8 <__vector_24+0xaa>
    34a6:	60 c0       	rjmp	.+192    	; 0x3568 <__vector_24+0x16a>
    34a8:	c6 c0       	rjmp	.+396    	; 0x3636 <__vector_24+0x238>
    34aa:	88 38       	cpi	r24, 0x88	; 136
    34ac:	09 f4       	brne	.+2      	; 0x34b0 <__vector_24+0xb2>
    34ae:	b5 c0       	rjmp	.+362    	; 0x361a <__vector_24+0x21c>
    34b0:	80 39       	cpi	r24, 0x90	; 144
    34b2:	09 f4       	brne	.+2      	; 0x34b6 <__vector_24+0xb8>
    34b4:	5f c0       	rjmp	.+190    	; 0x3574 <__vector_24+0x176>
    34b6:	80 38       	cpi	r24, 0x80	; 128
    34b8:	09 f0       	breq	.+2      	; 0x34bc <__vector_24+0xbe>
    34ba:	bd c0       	rjmp	.+378    	; 0x3636 <__vector_24+0x238>
    34bc:	5b c0       	rjmp	.+182    	; 0x3574 <__vector_24+0x176>
    34be:	80 3b       	cpi	r24, 0xB0	; 176
    34c0:	09 f4       	brne	.+2      	; 0x34c4 <__vector_24+0xc6>
    34c2:	83 c0       	rjmp	.+262    	; 0x35ca <__vector_24+0x1cc>
    34c4:	38 f4       	brcc	.+14     	; 0x34d4 <__vector_24+0xd6>
    34c6:	80 3a       	cpi	r24, 0xA0	; 160
    34c8:	09 f4       	brne	.+2      	; 0x34cc <__vector_24+0xce>
    34ca:	66 c0       	rjmp	.+204    	; 0x3598 <__vector_24+0x19a>
    34cc:	88 3a       	cpi	r24, 0xA8	; 168
    34ce:	09 f4       	brne	.+2      	; 0x34d2 <__vector_24+0xd4>
    34d0:	7c c0       	rjmp	.+248    	; 0x35ca <__vector_24+0x1cc>
    34d2:	b1 c0       	rjmp	.+354    	; 0x3636 <__vector_24+0x238>
    34d4:	80 3c       	cpi	r24, 0xC0	; 192
    34d6:	09 f4       	brne	.+2      	; 0x34da <__vector_24+0xdc>
    34d8:	a4 c0       	rjmp	.+328    	; 0x3622 <__vector_24+0x224>
    34da:	88 3c       	cpi	r24, 0xC8	; 200
    34dc:	09 f4       	brne	.+2      	; 0x34e0 <__vector_24+0xe2>
    34de:	a1 c0       	rjmp	.+322    	; 0x3622 <__vector_24+0x224>
    34e0:	88 3b       	cpi	r24, 0xB8	; 184
    34e2:	09 f4       	brne	.+2      	; 0x34e6 <__vector_24+0xe8>
    34e4:	87 c0       	rjmp	.+270    	; 0x35f4 <__vector_24+0x1f6>
    34e6:	a7 c0       	rjmp	.+334    	; 0x3636 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    34e8:	80 91 ab 05 	lds	r24, 0x05AB	; 0x8005ab <twi_slarw>
    34ec:	10 c0       	rjmp	.+32     	; 0x350e <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    34ee:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <twi_masterBufferIndex>
    34f2:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <twi_masterBufferLength>
    34f6:	98 17       	cp	r25, r24
    34f8:	70 f5       	brcc	.+92     	; 0x3556 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    34fa:	e0 91 84 05 	lds	r30, 0x0584	; 0x800584 <twi_masterBufferIndex>
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	8e 0f       	add	r24, r30
    3502:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <twi_masterBufferIndex>
    3506:	f0 e0       	ldi	r31, 0x00	; 0
    3508:	eb 57       	subi	r30, 0x7B	; 123
    350a:	fa 4f       	sbci	r31, 0xFA	; 250
    350c:	80 81       	ld	r24, Z
    350e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3512:	85 ec       	ldi	r24, 0xC5	; 197
    3514:	83 c0       	rjmp	.+262    	; 0x361c <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3516:	80 93 3f 05 	sts	0x053F, r24	; 0x80053f <twi_error>
    351a:	8b c0       	rjmp	.+278    	; 0x3632 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    351c:	e0 91 84 05 	lds	r30, 0x0584	; 0x800584 <twi_masterBufferIndex>
    3520:	81 e0       	ldi	r24, 0x01	; 1
    3522:	8e 0f       	add	r24, r30
    3524:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <twi_masterBufferIndex>
    3528:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    352c:	f0 e0       	ldi	r31, 0x00	; 0
    352e:	eb 57       	subi	r30, 0x7B	; 123
    3530:	fa 4f       	sbci	r31, 0xFA	; 250
    3532:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3534:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <twi_masterBufferIndex>
    3538:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <twi_masterBufferLength>
    353c:	6b c0       	rjmp	.+214    	; 0x3614 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    353e:	e0 91 84 05 	lds	r30, 0x0584	; 0x800584 <twi_masterBufferIndex>
    3542:	81 e0       	ldi	r24, 0x01	; 1
    3544:	8e 0f       	add	r24, r30
    3546:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <twi_masterBufferIndex>
    354a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    354e:	f0 e0       	ldi	r31, 0x00	; 0
    3550:	eb 57       	subi	r30, 0x7B	; 123
    3552:	fa 4f       	sbci	r31, 0xFA	; 250
    3554:	80 83       	st	Z, r24
	if (twi_sendStop)
    3556:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <twi_sendStop>
    355a:	81 11       	cpse	r24, r1
    355c:	6a c0       	rjmp	.+212    	; 0x3632 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3564:	84 ea       	ldi	r24, 0xA4	; 164
    3566:	5e c0       	rjmp	.+188    	; 0x3624 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3568:	83 e0       	ldi	r24, 0x03	; 3
    356a:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    356e:	10 92 40 05 	sts	0x0540, r1	; 0x800540 <twi_rxBufferIndex>
    3572:	cf cf       	rjmp	.-98     	; 0x3512 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3574:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <twi_rxBufferIndex>
    3578:	80 32       	cpi	r24, 0x20	; 32
    357a:	08 f0       	brcs	.+2      	; 0x357e <__vector_24+0x180>
    357c:	4e c0       	rjmp	.+156    	; 0x361a <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    357e:	e0 91 40 05 	lds	r30, 0x0540	; 0x800540 <twi_rxBufferIndex>
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	8e 0f       	add	r24, r30
    3586:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <twi_rxBufferIndex>
    358a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    358e:	f0 e0       	ldi	r31, 0x00	; 0
    3590:	ef 5b       	subi	r30, 0xBF	; 191
    3592:	fa 4f       	sbci	r31, 0xFA	; 250
    3594:	80 83       	st	Z, r24
    3596:	bd cf       	rjmp	.-134    	; 0x3512 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3598:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    359c:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <twi_rxBufferIndex>
    35a0:	80 32       	cpi	r24, 0x20	; 32
    35a2:	30 f4       	brcc	.+12     	; 0x35b0 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    35a4:	e0 91 40 05 	lds	r30, 0x0540	; 0x800540 <twi_rxBufferIndex>
    35a8:	f0 e0       	ldi	r31, 0x00	; 0
    35aa:	ef 5b       	subi	r30, 0xBF	; 191
    35ac:	fa 4f       	sbci	r31, 0xFA	; 250
    35ae:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    35b0:	60 91 40 05 	lds	r22, 0x0540	; 0x800540 <twi_rxBufferIndex>
    35b4:	70 e0       	ldi	r23, 0x00	; 0
    35b6:	e0 91 a5 05 	lds	r30, 0x05A5	; 0x8005a5 <twi_onSlaveReceive>
    35ba:	f0 91 a6 05 	lds	r31, 0x05A6	; 0x8005a6 <twi_onSlaveReceive+0x1>
    35be:	81 e4       	ldi	r24, 0x41	; 65
    35c0:	95 e0       	ldi	r25, 0x05	; 5
    35c2:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    35c4:	10 92 40 05 	sts	0x0540, r1	; 0x800540 <twi_rxBufferIndex>
      break;
    35c8:	36 c0       	rjmp	.+108    	; 0x3636 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    35ca:	84 e0       	ldi	r24, 0x04	; 4
    35cc:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    35d0:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    35d4:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    35d8:	e0 91 a7 05 	lds	r30, 0x05A7	; 0x8005a7 <twi_onSlaveTransmit>
    35dc:	f0 91 a8 05 	lds	r31, 0x05A8	; 0x8005a8 <twi_onSlaveTransmit+0x1>
    35e0:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    35e2:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <twi_txBufferLength>
    35e6:	81 11       	cpse	r24, r1
    35e8:	05 c0       	rjmp	.+10     	; 0x35f4 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    35ea:	81 e0       	ldi	r24, 0x01	; 1
    35ec:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    35f0:	10 92 63 05 	sts	0x0563, r1	; 0x800563 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    35f4:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <twi_txBufferIndex>
    35f8:	81 e0       	ldi	r24, 0x01	; 1
    35fa:	8e 0f       	add	r24, r30
    35fc:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <twi_txBufferIndex>
    3600:	f0 e0       	ldi	r31, 0x00	; 0
    3602:	ed 59       	subi	r30, 0x9D	; 157
    3604:	fa 4f       	sbci	r31, 0xFA	; 250
    3606:	80 81       	ld	r24, Z
    3608:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    360c:	90 91 62 05 	lds	r25, 0x0562	; 0x800562 <twi_txBufferIndex>
    3610:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <twi_txBufferLength>
    3614:	98 17       	cp	r25, r24
    3616:	08 f4       	brcc	.+2      	; 0x361a <__vector_24+0x21c>
    3618:	7c cf       	rjmp	.-264    	; 0x3512 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    361a:	85 e8       	ldi	r24, 0x85	; 133
    361c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3620:	0a c0       	rjmp	.+20     	; 0x3636 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3622:	85 ec       	ldi	r24, 0xC5	; 197
    3624:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3628:	10 92 ac 05 	sts	0x05AC, r1	; 0x8005ac <twi_state>
      break;
    362c:	04 c0       	rjmp	.+8      	; 0x3636 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    362e:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <twi_error>
      twi_stop();
    3632:	0e 94 ef 19 	call	0x33de	; 0x33de <twi_stop>
      break;
  }
}
    3636:	ff 91       	pop	r31
    3638:	ef 91       	pop	r30
    363a:	bf 91       	pop	r27
    363c:	af 91       	pop	r26
    363e:	9f 91       	pop	r25
    3640:	8f 91       	pop	r24
    3642:	7f 91       	pop	r23
    3644:	6f 91       	pop	r22
    3646:	5f 91       	pop	r21
    3648:	4f 91       	pop	r20
    364a:	3f 91       	pop	r19
    364c:	2f 91       	pop	r18
    364e:	0f 90       	pop	r0
    3650:	0f be       	out	0x3f, r0	; 63
    3652:	0f 90       	pop	r0
    3654:	1f 90       	pop	r1
    3656:	18 95       	reti

00003658 <__cmpsf2>:
    3658:	0e 94 31 1b 	call	0x3662	; 0x3662 <__fp_cmp>
    365c:	08 f4       	brcc	.+2      	; 0x3660 <__cmpsf2+0x8>
    365e:	81 e0       	ldi	r24, 0x01	; 1
    3660:	08 95       	ret

00003662 <__fp_cmp>:
    3662:	99 0f       	add	r25, r25
    3664:	00 08       	sbc	r0, r0
    3666:	55 0f       	add	r21, r21
    3668:	aa 0b       	sbc	r26, r26
    366a:	e0 e8       	ldi	r30, 0x80	; 128
    366c:	fe ef       	ldi	r31, 0xFE	; 254
    366e:	16 16       	cp	r1, r22
    3670:	17 06       	cpc	r1, r23
    3672:	e8 07       	cpc	r30, r24
    3674:	f9 07       	cpc	r31, r25
    3676:	c0 f0       	brcs	.+48     	; 0x36a8 <__fp_cmp+0x46>
    3678:	12 16       	cp	r1, r18
    367a:	13 06       	cpc	r1, r19
    367c:	e4 07       	cpc	r30, r20
    367e:	f5 07       	cpc	r31, r21
    3680:	98 f0       	brcs	.+38     	; 0x36a8 <__fp_cmp+0x46>
    3682:	62 1b       	sub	r22, r18
    3684:	73 0b       	sbc	r23, r19
    3686:	84 0b       	sbc	r24, r20
    3688:	95 0b       	sbc	r25, r21
    368a:	39 f4       	brne	.+14     	; 0x369a <__fp_cmp+0x38>
    368c:	0a 26       	eor	r0, r26
    368e:	61 f0       	breq	.+24     	; 0x36a8 <__fp_cmp+0x46>
    3690:	23 2b       	or	r18, r19
    3692:	24 2b       	or	r18, r20
    3694:	25 2b       	or	r18, r21
    3696:	21 f4       	brne	.+8      	; 0x36a0 <__fp_cmp+0x3e>
    3698:	08 95       	ret
    369a:	0a 26       	eor	r0, r26
    369c:	09 f4       	brne	.+2      	; 0x36a0 <__fp_cmp+0x3e>
    369e:	a1 40       	sbci	r26, 0x01	; 1
    36a0:	a6 95       	lsr	r26
    36a2:	8f ef       	ldi	r24, 0xFF	; 255
    36a4:	81 1d       	adc	r24, r1
    36a6:	81 1d       	adc	r24, r1
    36a8:	08 95       	ret

000036aa <__gesf2>:
    36aa:	0e 94 31 1b 	call	0x3662	; 0x3662 <__fp_cmp>
    36ae:	08 f4       	brcc	.+2      	; 0x36b2 <__gesf2+0x8>
    36b0:	8f ef       	ldi	r24, 0xFF	; 255
    36b2:	08 95       	ret

000036b4 <__unordsf2>:
    36b4:	0e 94 31 1b 	call	0x3662	; 0x3662 <__fp_cmp>
    36b8:	88 0b       	sbc	r24, r24
    36ba:	99 0b       	sbc	r25, r25
    36bc:	08 95       	ret

000036be <__mulsi3>:
    36be:	db 01       	movw	r26, r22
    36c0:	8f 93       	push	r24
    36c2:	9f 93       	push	r25
    36c4:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <__muluhisi3>
    36c8:	bf 91       	pop	r27
    36ca:	af 91       	pop	r26
    36cc:	a2 9f       	mul	r26, r18
    36ce:	80 0d       	add	r24, r0
    36d0:	91 1d       	adc	r25, r1
    36d2:	a3 9f       	mul	r26, r19
    36d4:	90 0d       	add	r25, r0
    36d6:	b2 9f       	mul	r27, r18
    36d8:	90 0d       	add	r25, r0
    36da:	11 24       	eor	r1, r1
    36dc:	08 95       	ret

000036de <__divmodhi4>:
    36de:	97 fb       	bst	r25, 7
    36e0:	07 2e       	mov	r0, r23
    36e2:	16 f4       	brtc	.+4      	; 0x36e8 <__divmodhi4+0xa>
    36e4:	00 94       	com	r0
    36e6:	07 d0       	rcall	.+14     	; 0x36f6 <__divmodhi4_neg1>
    36e8:	77 fd       	sbrc	r23, 7
    36ea:	09 d0       	rcall	.+18     	; 0x36fe <__divmodhi4_neg2>
    36ec:	0e 94 ed 1b 	call	0x37da	; 0x37da <__udivmodhi4>
    36f0:	07 fc       	sbrc	r0, 7
    36f2:	05 d0       	rcall	.+10     	; 0x36fe <__divmodhi4_neg2>
    36f4:	3e f4       	brtc	.+14     	; 0x3704 <__divmodhi4_exit>

000036f6 <__divmodhi4_neg1>:
    36f6:	90 95       	com	r25
    36f8:	81 95       	neg	r24
    36fa:	9f 4f       	sbci	r25, 0xFF	; 255
    36fc:	08 95       	ret

000036fe <__divmodhi4_neg2>:
    36fe:	70 95       	com	r23
    3700:	61 95       	neg	r22
    3702:	7f 4f       	sbci	r23, 0xFF	; 255

00003704 <__divmodhi4_exit>:
    3704:	08 95       	ret

00003706 <__udivmodsi4>:
    3706:	a1 e2       	ldi	r26, 0x21	; 33
    3708:	1a 2e       	mov	r1, r26
    370a:	aa 1b       	sub	r26, r26
    370c:	bb 1b       	sub	r27, r27
    370e:	fd 01       	movw	r30, r26
    3710:	0d c0       	rjmp	.+26     	; 0x372c <__udivmodsi4_ep>

00003712 <__udivmodsi4_loop>:
    3712:	aa 1f       	adc	r26, r26
    3714:	bb 1f       	adc	r27, r27
    3716:	ee 1f       	adc	r30, r30
    3718:	ff 1f       	adc	r31, r31
    371a:	a2 17       	cp	r26, r18
    371c:	b3 07       	cpc	r27, r19
    371e:	e4 07       	cpc	r30, r20
    3720:	f5 07       	cpc	r31, r21
    3722:	20 f0       	brcs	.+8      	; 0x372c <__udivmodsi4_ep>
    3724:	a2 1b       	sub	r26, r18
    3726:	b3 0b       	sbc	r27, r19
    3728:	e4 0b       	sbc	r30, r20
    372a:	f5 0b       	sbc	r31, r21

0000372c <__udivmodsi4_ep>:
    372c:	66 1f       	adc	r22, r22
    372e:	77 1f       	adc	r23, r23
    3730:	88 1f       	adc	r24, r24
    3732:	99 1f       	adc	r25, r25
    3734:	1a 94       	dec	r1
    3736:	69 f7       	brne	.-38     	; 0x3712 <__udivmodsi4_loop>
    3738:	60 95       	com	r22
    373a:	70 95       	com	r23
    373c:	80 95       	com	r24
    373e:	90 95       	com	r25
    3740:	9b 01       	movw	r18, r22
    3742:	ac 01       	movw	r20, r24
    3744:	bd 01       	movw	r22, r26
    3746:	cf 01       	movw	r24, r30
    3748:	08 95       	ret

0000374a <__divmodsi4>:
    374a:	05 2e       	mov	r0, r21
    374c:	97 fb       	bst	r25, 7
    374e:	1e f4       	brtc	.+6      	; 0x3756 <__divmodsi4+0xc>
    3750:	00 94       	com	r0
    3752:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__negsi2>
    3756:	57 fd       	sbrc	r21, 7
    3758:	07 d0       	rcall	.+14     	; 0x3768 <__divmodsi4_neg2>
    375a:	0e 94 83 1b 	call	0x3706	; 0x3706 <__udivmodsi4>
    375e:	07 fc       	sbrc	r0, 7
    3760:	03 d0       	rcall	.+6      	; 0x3768 <__divmodsi4_neg2>
    3762:	4e f4       	brtc	.+18     	; 0x3776 <__divmodsi4_exit>
    3764:	0c 94 bc 1b 	jmp	0x3778	; 0x3778 <__negsi2>

00003768 <__divmodsi4_neg2>:
    3768:	50 95       	com	r21
    376a:	40 95       	com	r20
    376c:	30 95       	com	r19
    376e:	21 95       	neg	r18
    3770:	3f 4f       	sbci	r19, 0xFF	; 255
    3772:	4f 4f       	sbci	r20, 0xFF	; 255
    3774:	5f 4f       	sbci	r21, 0xFF	; 255

00003776 <__divmodsi4_exit>:
    3776:	08 95       	ret

00003778 <__negsi2>:
    3778:	90 95       	com	r25
    377a:	80 95       	com	r24
    377c:	70 95       	com	r23
    377e:	61 95       	neg	r22
    3780:	7f 4f       	sbci	r23, 0xFF	; 255
    3782:	8f 4f       	sbci	r24, 0xFF	; 255
    3784:	9f 4f       	sbci	r25, 0xFF	; 255
    3786:	08 95       	ret

00003788 <__mulhisi3>:
    3788:	0e 94 cc 1b 	call	0x3798	; 0x3798 <__umulhisi3>
    378c:	33 23       	and	r19, r19
    378e:	12 f4       	brpl	.+4      	; 0x3794 <__mulhisi3+0xc>
    3790:	8a 1b       	sub	r24, r26
    3792:	9b 0b       	sbc	r25, r27
    3794:	0c 94 dd 1b 	jmp	0x37ba	; 0x37ba <__usmulhisi3_tail>

00003798 <__umulhisi3>:
    3798:	a2 9f       	mul	r26, r18
    379a:	b0 01       	movw	r22, r0
    379c:	b3 9f       	mul	r27, r19
    379e:	c0 01       	movw	r24, r0
    37a0:	a3 9f       	mul	r26, r19
    37a2:	70 0d       	add	r23, r0
    37a4:	81 1d       	adc	r24, r1
    37a6:	11 24       	eor	r1, r1
    37a8:	91 1d       	adc	r25, r1
    37aa:	b2 9f       	mul	r27, r18
    37ac:	70 0d       	add	r23, r0
    37ae:	81 1d       	adc	r24, r1
    37b0:	11 24       	eor	r1, r1
    37b2:	91 1d       	adc	r25, r1
    37b4:	08 95       	ret

000037b6 <__usmulhisi3>:
    37b6:	0e 94 cc 1b 	call	0x3798	; 0x3798 <__umulhisi3>

000037ba <__usmulhisi3_tail>:
    37ba:	b7 ff       	sbrs	r27, 7
    37bc:	08 95       	ret
    37be:	82 1b       	sub	r24, r18
    37c0:	93 0b       	sbc	r25, r19
    37c2:	08 95       	ret

000037c4 <__muluhisi3>:
    37c4:	0e 94 cc 1b 	call	0x3798	; 0x3798 <__umulhisi3>
    37c8:	a5 9f       	mul	r26, r21
    37ca:	90 0d       	add	r25, r0
    37cc:	b4 9f       	mul	r27, r20
    37ce:	90 0d       	add	r25, r0
    37d0:	a4 9f       	mul	r26, r20
    37d2:	80 0d       	add	r24, r0
    37d4:	91 1d       	adc	r25, r1
    37d6:	11 24       	eor	r1, r1
    37d8:	08 95       	ret

000037da <__udivmodhi4>:
    37da:	aa 1b       	sub	r26, r26
    37dc:	bb 1b       	sub	r27, r27
    37de:	51 e1       	ldi	r21, 0x11	; 17
    37e0:	07 c0       	rjmp	.+14     	; 0x37f0 <__udivmodhi4_ep>

000037e2 <__udivmodhi4_loop>:
    37e2:	aa 1f       	adc	r26, r26
    37e4:	bb 1f       	adc	r27, r27
    37e6:	a6 17       	cp	r26, r22
    37e8:	b7 07       	cpc	r27, r23
    37ea:	10 f0       	brcs	.+4      	; 0x37f0 <__udivmodhi4_ep>
    37ec:	a6 1b       	sub	r26, r22
    37ee:	b7 0b       	sbc	r27, r23

000037f0 <__udivmodhi4_ep>:
    37f0:	88 1f       	adc	r24, r24
    37f2:	99 1f       	adc	r25, r25
    37f4:	5a 95       	dec	r21
    37f6:	a9 f7       	brne	.-22     	; 0x37e2 <__udivmodhi4_loop>
    37f8:	80 95       	com	r24
    37fa:	90 95       	com	r25
    37fc:	bc 01       	movw	r22, r24
    37fe:	cd 01       	movw	r24, r26
    3800:	08 95       	ret

00003802 <__tablejump2__>:
    3802:	ee 0f       	add	r30, r30
    3804:	ff 1f       	adc	r31, r31
    3806:	05 90       	lpm	r0, Z+
    3808:	f4 91       	lpm	r31, Z
    380a:	e0 2d       	mov	r30, r0
    380c:	09 94       	ijmp

0000380e <eeprom_read_byte>:
    380e:	f9 99       	sbic	0x1f, 1	; 31
    3810:	fe cf       	rjmp	.-4      	; 0x380e <eeprom_read_byte>
    3812:	92 bd       	out	0x22, r25	; 34
    3814:	81 bd       	out	0x21, r24	; 33
    3816:	f8 9a       	sbi	0x1f, 0	; 31
    3818:	99 27       	eor	r25, r25
    381a:	80 b5       	in	r24, 0x20	; 32
    381c:	08 95       	ret

0000381e <_exit>:
    381e:	f8 94       	cli

00003820 <__stop_program>:
    3820:	ff cf       	rjmp	.-2      	; 0x3820 <__stop_program>
