
AL-ESC-Calibrate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ea  00800100  000036d0  00003764  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000036d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002a7  008002ea  008002ea  0000394e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000394e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003980  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000498  00000000  00000000  000039c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c4d9  00000000  00000000  00003e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002440  00000000  00000000  00010331  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000032da  00000000  00000000  00012771  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d1c  00000000  00000000  00015a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002b14  00000000  00000000  00016768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004555  00000000  00000000  0001927c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000428  00000000  00000000  0001d7d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 90 00 	jmp	0x120	; 0x120 <__ctors_end>
       4:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
       8:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
       c:	0c 94 97 01 	jmp	0x32e	; 0x32e <__vector_3>
      10:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      14:	0c 94 2a 01 	jmp	0x254	; 0x254 <__vector_5>
      18:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      1c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      20:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      24:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      28:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      2c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      30:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      34:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      38:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      3c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      40:	0c 94 95 16 	jmp	0x2d2a	; 0x2d2a <__vector_16>
      44:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      48:	0c 94 8d 12 	jmp	0x251a	; 0x251a <__vector_18>
      4c:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__vector_19>
      50:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      54:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      58:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      5c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      60:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <__vector_24>
      64:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      68:	03 6e       	ori	r16, 0xE3	; 227
      6a:	db 36       	cpi	r29, 0x6B	; 107
      6c:	3d 9a       	sbi	0x07, 5	; 7
      6e:	99 99       	sbic	0x13, 1	; 19
      70:	99 3d       	cpi	r25, 0xD9	; 217
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	3e 00       	.word	0x003e	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	07 2c       	mov	r0, r7
      7e:	7a a5       	ldd	r23, Y+42	; 0x2a
      80:	ba 6c       	ori	r27, 0xCA	; 202
      82:	c5 90       	lpm	r12, Z+
      84:	da 3b       	cpi	r29, 0xBA	; 186
      86:	93 65       	ori	r25, 0x53	; 83
      88:	fc 8b       	std	Y+20, r31	; 0x14
      8a:	bc 53       	subi	r27, 0x3C	; 60
      8c:	f8 10       	cpse	r15, r8
      8e:	fd 3c       	cpi	r31, 0xCD	; 205
      90:	56 92       	lac	Z, r5
      92:	83 4d       	sbci	r24, 0xD3	; 211
      94:	bd 87       	std	Y+13, r27	; 0x0d
      96:	9d 3a       	cpi	r25, 0xAD	; 173
      98:	b6 3d       	cpi	r27, 0xD6	; 214
      9a:	cb c9       	rjmp	.-3178   	; 0xfffff432 <__eeprom_end+0xff7ef432>
      9c:	bf 5b       	subi	r27, 0xBF	; 191
      9e:	be 73       	andi	r27, 0x3E	; 62
      a0:	da 0f       	add	r29, r26
      a2:	c9 3f       	cpi	r28, 0xF9	; 249
      a4:	05 a8       	ldd	r0, Z+53	; 0x35
      a6:	4c cd       	rjmp	.-1384   	; 0xfffffb40 <__eeprom_end+0xff7efb40>
      a8:	b2 d4       	rcall	.+2404   	; 0xa0e <setup+0x8c>
      aa:	4e b9       	out	0x0e, r20	; 14
      ac:	38 36       	cpi	r19, 0x68	; 104
      ae:	a9 02       	muls	r26, r25
      b0:	0c 50       	subi	r16, 0x0C	; 12
      b2:	b9 91       	ld	r27, Y+
      b4:	86 88       	ldd	r8, Z+22	; 0x16
      b6:	08 3c       	cpi	r16, 0xC8	; 200
      b8:	a6 aa       	std	Z+54, r10	; 0x36
      ba:	aa 2a       	or	r10, r26
      bc:	be 00       	.word	0x00be	; ????
      be:	00 00       	nop
      c0:	80 3f       	cpi	r24, 0xF0	; 240

000000c2 <__trampolines_end>:
      c2:	00 00       	nop
      c4:	00 08       	sbc	r0, r0
      c6:	00 02       	muls	r16, r16
      c8:	01 00       	.word	0x0001	; ????
      ca:	00 03       	mulsu	r16, r16
      cc:	04 07       	cpc	r16, r20
	...

000000d6 <digital_pin_to_bit_mask_PGM>:
      d6:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      e6:	04 08 10 20                                         ... 

000000ea <digital_pin_to_port_PGM>:
      ea:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      fa:	03 03 03 03                                         ....

000000fe <port_to_input_PGM>:
      fe:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000108 <port_to_output_PGM>:
     108:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000112 <port_to_mode_PGM>:
     112:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000011c <__ctors_start>:
     11c:	ef 12       	cpse	r14, r31
     11e:	91 16       	cp	r9, r17

00000120 <__ctors_end>:
     120:	11 24       	eor	r1, r1
     122:	1f be       	out	0x3f, r1	; 63
     124:	cf ef       	ldi	r28, 0xFF	; 255
     126:	d8 e0       	ldi	r29, 0x08	; 8
     128:	de bf       	out	0x3e, r29	; 62
     12a:	cd bf       	out	0x3d, r28	; 61

0000012c <__do_copy_data>:
     12c:	12 e0       	ldi	r17, 0x02	; 2
     12e:	a0 e0       	ldi	r26, 0x00	; 0
     130:	b1 e0       	ldi	r27, 0x01	; 1
     132:	e0 ed       	ldi	r30, 0xD0	; 208
     134:	f6 e3       	ldi	r31, 0x36	; 54
     136:	02 c0       	rjmp	.+4      	; 0x13c <__do_copy_data+0x10>
     138:	05 90       	lpm	r0, Z+
     13a:	0d 92       	st	X+, r0
     13c:	aa 3e       	cpi	r26, 0xEA	; 234
     13e:	b1 07       	cpc	r27, r17
     140:	d9 f7       	brne	.-10     	; 0x138 <__do_copy_data+0xc>

00000142 <__do_clear_bss>:
     142:	25 e0       	ldi	r18, 0x05	; 5
     144:	aa ee       	ldi	r26, 0xEA	; 234
     146:	b2 e0       	ldi	r27, 0x02	; 2
     148:	01 c0       	rjmp	.+2      	; 0x14c <.do_clear_bss_start>

0000014a <.do_clear_bss_loop>:
     14a:	1d 92       	st	X+, r1

0000014c <.do_clear_bss_start>:
     14c:	a1 39       	cpi	r26, 0x91	; 145
     14e:	b2 07       	cpc	r27, r18
     150:	e1 f7       	brne	.-8      	; 0x14a <.do_clear_bss_loop>

00000152 <__do_global_ctors>:
     152:	10 e0       	ldi	r17, 0x00	; 0
     154:	c0 e9       	ldi	r28, 0x90	; 144
     156:	d0 e0       	ldi	r29, 0x00	; 0
     158:	04 c0       	rjmp	.+8      	; 0x162 <__do_global_ctors+0x10>
     15a:	21 97       	sbiw	r28, 0x01	; 1
     15c:	fe 01       	movw	r30, r28
     15e:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__tablejump2__>
     162:	ce 38       	cpi	r28, 0x8E	; 142
     164:	d1 07       	cpc	r29, r17
     166:	c9 f7       	brne	.-14     	; 0x15a <__do_global_ctors+0x8>
     168:	0e 94 1d 13 	call	0x263a	; 0x263a <main>
     16c:	0c 94 66 1b 	jmp	0x36cc	; 0x36cc <_exit>

00000170 <__bad_interrupt>:
     170:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000174 <_Z24convert_receiver_channelh.part.1>:
	byte channel, reverse;                                                       //First we declare some local variables
	int low, center, high, actual;
	int difference;
	
	if (function > 4) {
		return (receiver_input[function] -3000) * -1;
     174:	cf 93       	push	r28
     176:	e8 2f       	mov	r30, r24
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	e0 50       	subi	r30, 0x00	; 0
     17c:	fc 4f       	sbci	r31, 0xFC	; 252
     17e:	c7 89       	ldd	r28, Z+23	; 0x17
     180:	ec 2f       	mov	r30, r28
     182:	e7 70       	andi	r30, 0x07	; 7
     184:	cc 1f       	adc	r28, r28
     186:	cc 27       	eor	r28, r28
     188:	cc 1f       	adc	r28, r28
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	ee 0f       	add	r30, r30
     18e:	ff 1f       	adc	r31, r31
     190:	df 01       	movw	r26, r30
     192:	aa 52       	subi	r26, 0x2A	; 42
     194:	bc 4f       	sbci	r27, 0xFC	; 252
     196:	8d 91       	ld	r24, X+
     198:	9c 91       	ld	r25, X
     19a:	e0 50       	subi	r30, 0x00	; 0
     19c:	fc 4f       	sbci	r31, 0xFC	; 252
     19e:	77 85       	ldd	r23, Z+15	; 0x0f
     1a0:	36 85       	ldd	r19, Z+14	; 0x0e
     1a2:	df 01       	movw	r26, r30
     1a4:	11 97       	sbiw	r26, 0x01	; 1
     1a6:	4c 91       	ld	r20, X
     1a8:	50 e0       	ldi	r21, 0x00	; 0
     1aa:	54 2f       	mov	r21, r20
     1ac:	44 27       	eor	r20, r20
     1ae:	11 97       	sbiw	r26, 0x01	; 1
     1b0:	2c 91       	ld	r18, X
     1b2:	42 2b       	or	r20, r18
     1b4:	67 81       	ldd	r22, Z+7	; 0x07
     1b6:	26 81       	ldd	r18, Z+6	; 0x06
     1b8:	84 17       	cp	r24, r20
     1ba:	95 07       	cpc	r25, r21
     1bc:	dc f4       	brge	.+54     	; 0x1f4 <_Z24convert_receiver_channelh.part.1+0x80>
     1be:	e3 2f       	mov	r30, r19
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	f7 2b       	or	r31, r23
     1c4:	9f 01       	movw	r18, r30
     1c6:	e8 17       	cp	r30, r24
     1c8:	f9 07       	cpc	r31, r25
     1ca:	0c f4       	brge	.+2      	; 0x1ce <_Z24convert_receiver_channelh.part.1+0x5a>
     1cc:	9c 01       	movw	r18, r24
     1ce:	da 01       	movw	r26, r20
     1d0:	a2 1b       	sub	r26, r18
     1d2:	b3 0b       	sbc	r27, r19
     1d4:	24 ef       	ldi	r18, 0xF4	; 244
     1d6:	31 e0       	ldi	r19, 0x01	; 1
     1d8:	0e 94 32 1b 	call	0x3664	; 0x3664 <__usmulhisi3>
     1dc:	9a 01       	movw	r18, r20
     1de:	2e 1b       	sub	r18, r30
     1e0:	3f 0b       	sbc	r19, r31
     1e2:	03 2e       	mov	r0, r19
     1e4:	00 0c       	add	r0, r0
     1e6:	44 0b       	sbc	r20, r20
     1e8:	55 0b       	sbc	r21, r21
     1ea:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__divmodsi4>
     1ee:	cc 23       	and	r28, r28
     1f0:	e9 f0       	breq	.+58     	; 0x22c <_Z24convert_receiver_channelh.part.1+0xb8>
     1f2:	21 c0       	rjmp	.+66     	; 0x236 <_Z24convert_receiver_channelh.part.1+0xc2>
     1f4:	48 17       	cp	r20, r24
     1f6:	59 07       	cpc	r21, r25
     1f8:	14 f5       	brge	.+68     	; 0x23e <_Z24convert_receiver_channelh.part.1+0xca>
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	f9 01       	movw	r30, r18
     1fe:	f6 2b       	or	r31, r22
     200:	df 01       	movw	r26, r30
     202:	8e 17       	cp	r24, r30
     204:	9f 07       	cpc	r25, r31
     206:	0c f4       	brge	.+2      	; 0x20a <_Z24convert_receiver_channelh.part.1+0x96>
     208:	dc 01       	movw	r26, r24
     20a:	a4 1b       	sub	r26, r20
     20c:	b5 0b       	sbc	r27, r21
     20e:	24 ef       	ldi	r18, 0xF4	; 244
     210:	31 e0       	ldi	r19, 0x01	; 1
     212:	0e 94 32 1b 	call	0x3664	; 0x3664 <__usmulhisi3>
     216:	9f 01       	movw	r18, r30
     218:	24 1b       	sub	r18, r20
     21a:	35 0b       	sbc	r19, r21
     21c:	03 2e       	mov	r0, r19
     21e:	00 0c       	add	r0, r0
     220:	44 0b       	sbc	r20, r20
     222:	55 0b       	sbc	r21, r21
     224:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__divmodsi4>
     228:	cc 23       	and	r28, r28
     22a:	29 f0       	breq	.+10     	; 0x236 <_Z24convert_receiver_channelh.part.1+0xc2>
     22c:	8c ed       	ldi	r24, 0xDC	; 220
     22e:	95 e0       	ldi	r25, 0x05	; 5
     230:	82 1b       	sub	r24, r18
     232:	93 0b       	sbc	r25, r19
     234:	06 c0       	rjmp	.+12     	; 0x242 <_Z24convert_receiver_channelh.part.1+0xce>
     236:	c9 01       	movw	r24, r18
     238:	84 52       	subi	r24, 0x24	; 36
     23a:	9a 4f       	sbci	r25, 0xFA	; 250
     23c:	02 c0       	rjmp	.+4      	; 0x242 <_Z24convert_receiver_channelh.part.1+0xce>
     23e:	8c ed       	ldi	r24, 0xDC	; 220
     240:	95 e0       	ldi	r25, 0x05	; 5
     242:	cf 91       	pop	r28
     244:	08 95       	ret

00000246 <_ZN7TwoWire5writeEi>:
     246:	dc 01       	movw	r26, r24
     248:	ed 91       	ld	r30, X+
     24a:	fc 91       	ld	r31, X
     24c:	01 90       	ld	r0, Z+
     24e:	f0 81       	ld	r31, Z
     250:	e0 2d       	mov	r30, r0
     252:	09 94       	ijmp

00000254 <__vector_5>:
     254:	1f 92       	push	r1
     256:	0f 92       	push	r0
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	0f 92       	push	r0
     25c:	11 24       	eor	r1, r1
     25e:	2f 93       	push	r18
     260:	3f 93       	push	r19
     262:	4f 93       	push	r20
     264:	5f 93       	push	r21
     266:	6f 93       	push	r22
     268:	7f 93       	push	r23
     26a:	8f 93       	push	r24
     26c:	9f 93       	push	r25
     26e:	af 93       	push	r26
     270:	bf 93       	push	r27
     272:	ef 93       	push	r30
     274:	ff 93       	push	r31
     276:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <micros>
     27a:	60 93 2e 03 	sts	0x032E, r22	; 0x80032e <current_timeV2>
     27e:	70 93 2f 03 	sts	0x032F, r23	; 0x80032f <current_timeV2+0x1>
     282:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <current_timeV2+0x2>
     286:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <current_timeV2+0x3>
     28a:	20 91 25 04 	lds	r18, 0x0425	; 0x800425 <last_channel_6>
     28e:	4a 9b       	sbis	0x09, 2	; 9
     290:	0e c0       	rjmp	.+28     	; 0x2ae <__vector_5+0x5a>
     292:	21 11       	cpse	r18, r1
     294:	1b c0       	rjmp	.+54     	; 0x2cc <__vector_5+0x78>
     296:	21 e0       	ldi	r18, 0x01	; 1
     298:	20 93 25 04 	sts	0x0425, r18	; 0x800425 <last_channel_6>
     29c:	60 93 3a 03 	sts	0x033A, r22	; 0x80033a <timer_6>
     2a0:	70 93 3b 03 	sts	0x033B, r23	; 0x80033b <timer_6+0x1>
     2a4:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <timer_6+0x2>
     2a8:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <timer_6+0x3>
     2ac:	0f c0       	rjmp	.+30     	; 0x2cc <__vector_5+0x78>
     2ae:	21 30       	cpi	r18, 0x01	; 1
     2b0:	69 f4       	brne	.+26     	; 0x2cc <__vector_5+0x78>
     2b2:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <last_channel_6>
     2b6:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <timer_6>
     2ba:	30 91 3b 03 	lds	r19, 0x033B	; 0x80033b <timer_6+0x1>
     2be:	ab 01       	movw	r20, r22
     2c0:	42 1b       	sub	r20, r18
     2c2:	53 0b       	sbc	r21, r19
     2c4:	50 93 e3 03 	sts	0x03E3, r21	; 0x8003e3 <receiver_input+0xd>
     2c8:	40 93 e2 03 	sts	0x03E2, r20	; 0x8003e2 <receiver_input+0xc>
     2cc:	20 91 24 04 	lds	r18, 0x0424	; 0x800424 <last_channel_7>
     2d0:	4b 9b       	sbis	0x09, 3	; 9
     2d2:	0e c0       	rjmp	.+28     	; 0x2f0 <__vector_5+0x9c>
     2d4:	21 11       	cpse	r18, r1
     2d6:	1a c0       	rjmp	.+52     	; 0x30c <__vector_5+0xb8>
     2d8:	21 e0       	ldi	r18, 0x01	; 1
     2da:	20 93 24 04 	sts	0x0424, r18	; 0x800424 <last_channel_7>
     2de:	60 93 36 03 	sts	0x0336, r22	; 0x800336 <timer_7>
     2e2:	70 93 37 03 	sts	0x0337, r23	; 0x800337 <timer_7+0x1>
     2e6:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <timer_7+0x2>
     2ea:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <timer_7+0x3>
     2ee:	0e c0       	rjmp	.+28     	; 0x30c <__vector_5+0xb8>
     2f0:	21 30       	cpi	r18, 0x01	; 1
     2f2:	61 f4       	brne	.+24     	; 0x30c <__vector_5+0xb8>
     2f4:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <last_channel_7>
     2f8:	20 91 36 03 	lds	r18, 0x0336	; 0x800336 <timer_7>
     2fc:	30 91 37 03 	lds	r19, 0x0337	; 0x800337 <timer_7+0x1>
     300:	62 1b       	sub	r22, r18
     302:	73 0b       	sbc	r23, r19
     304:	70 93 e5 03 	sts	0x03E5, r23	; 0x8003e5 <receiver_input+0xf>
     308:	60 93 e4 03 	sts	0x03E4, r22	; 0x8003e4 <receiver_input+0xe>
     30c:	ff 91       	pop	r31
     30e:	ef 91       	pop	r30
     310:	bf 91       	pop	r27
     312:	af 91       	pop	r26
     314:	9f 91       	pop	r25
     316:	8f 91       	pop	r24
     318:	7f 91       	pop	r23
     31a:	6f 91       	pop	r22
     31c:	5f 91       	pop	r21
     31e:	4f 91       	pop	r20
     320:	3f 91       	pop	r19
     322:	2f 91       	pop	r18
     324:	0f 90       	pop	r0
     326:	0f be       	out	0x3f, r0	; 63
     328:	0f 90       	pop	r0
     32a:	1f 90       	pop	r1
     32c:	18 95       	reti

0000032e <__vector_3>:
     32e:	1f 92       	push	r1
     330:	0f 92       	push	r0
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	0f 92       	push	r0
     336:	11 24       	eor	r1, r1
     338:	2f 93       	push	r18
     33a:	3f 93       	push	r19
     33c:	4f 93       	push	r20
     33e:	5f 93       	push	r21
     340:	6f 93       	push	r22
     342:	7f 93       	push	r23
     344:	8f 93       	push	r24
     346:	9f 93       	push	r25
     348:	af 93       	push	r26
     34a:	bf 93       	push	r27
     34c:	ef 93       	push	r30
     34e:	ff 93       	push	r31
     350:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <micros>
     354:	60 93 32 03 	sts	0x0332, r22	; 0x800332 <current_timeV1>
     358:	70 93 33 03 	sts	0x0333, r23	; 0x800333 <current_timeV1+0x1>
     35c:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <current_timeV1+0x2>
     360:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <current_timeV1+0x3>
     364:	20 91 2a 04 	lds	r18, 0x042A	; 0x80042a <last_channel_1>
     368:	18 9b       	sbis	0x03, 0	; 3
     36a:	0e c0       	rjmp	.+28     	; 0x388 <__vector_3+0x5a>
     36c:	21 11       	cpse	r18, r1
     36e:	1b c0       	rjmp	.+54     	; 0x3a6 <__vector_3+0x78>
     370:	21 e0       	ldi	r18, 0x01	; 1
     372:	20 93 2a 04 	sts	0x042A, r18	; 0x80042a <last_channel_1>
     376:	60 93 4e 03 	sts	0x034E, r22	; 0x80034e <timer_1>
     37a:	70 93 4f 03 	sts	0x034F, r23	; 0x80034f <timer_1+0x1>
     37e:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <timer_1+0x2>
     382:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <timer_1+0x3>
     386:	0f c0       	rjmp	.+30     	; 0x3a6 <__vector_3+0x78>
     388:	21 30       	cpi	r18, 0x01	; 1
     38a:	69 f4       	brne	.+26     	; 0x3a6 <__vector_3+0x78>
     38c:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <last_channel_1>
     390:	20 91 4e 03 	lds	r18, 0x034E	; 0x80034e <timer_1>
     394:	30 91 4f 03 	lds	r19, 0x034F	; 0x80034f <timer_1+0x1>
     398:	ab 01       	movw	r20, r22
     39a:	42 1b       	sub	r20, r18
     39c:	53 0b       	sbc	r21, r19
     39e:	50 93 d9 03 	sts	0x03D9, r21	; 0x8003d9 <receiver_input+0x3>
     3a2:	40 93 d8 03 	sts	0x03D8, r20	; 0x8003d8 <receiver_input+0x2>
     3a6:	20 91 29 04 	lds	r18, 0x0429	; 0x800429 <last_channel_2>
     3aa:	19 9b       	sbis	0x03, 1	; 3
     3ac:	0e c0       	rjmp	.+28     	; 0x3ca <__vector_3+0x9c>
     3ae:	21 11       	cpse	r18, r1
     3b0:	1b c0       	rjmp	.+54     	; 0x3e8 <__vector_3+0xba>
     3b2:	21 e0       	ldi	r18, 0x01	; 1
     3b4:	20 93 29 04 	sts	0x0429, r18	; 0x800429 <last_channel_2>
     3b8:	60 93 4a 03 	sts	0x034A, r22	; 0x80034a <timer_2>
     3bc:	70 93 4b 03 	sts	0x034B, r23	; 0x80034b <timer_2+0x1>
     3c0:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <timer_2+0x2>
     3c4:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <timer_2+0x3>
     3c8:	0f c0       	rjmp	.+30     	; 0x3e8 <__vector_3+0xba>
     3ca:	21 30       	cpi	r18, 0x01	; 1
     3cc:	69 f4       	brne	.+26     	; 0x3e8 <__vector_3+0xba>
     3ce:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <last_channel_2>
     3d2:	20 91 4a 03 	lds	r18, 0x034A	; 0x80034a <timer_2>
     3d6:	30 91 4b 03 	lds	r19, 0x034B	; 0x80034b <timer_2+0x1>
     3da:	ab 01       	movw	r20, r22
     3dc:	42 1b       	sub	r20, r18
     3de:	53 0b       	sbc	r21, r19
     3e0:	50 93 db 03 	sts	0x03DB, r21	; 0x8003db <receiver_input+0x5>
     3e4:	40 93 da 03 	sts	0x03DA, r20	; 0x8003da <receiver_input+0x4>
     3e8:	20 91 28 04 	lds	r18, 0x0428	; 0x800428 <last_channel_3>
     3ec:	1a 9b       	sbis	0x03, 2	; 3
     3ee:	0e c0       	rjmp	.+28     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3f0:	21 11       	cpse	r18, r1
     3f2:	1b c0       	rjmp	.+54     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     3f4:	21 e0       	ldi	r18, 0x01	; 1
     3f6:	20 93 28 04 	sts	0x0428, r18	; 0x800428 <last_channel_3>
     3fa:	60 93 46 03 	sts	0x0346, r22	; 0x800346 <timer_3>
     3fe:	70 93 47 03 	sts	0x0347, r23	; 0x800347 <timer_3+0x1>
     402:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <timer_3+0x2>
     406:	90 93 49 03 	sts	0x0349, r25	; 0x800349 <timer_3+0x3>
     40a:	0f c0       	rjmp	.+30     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     40c:	21 30       	cpi	r18, 0x01	; 1
     40e:	69 f4       	brne	.+26     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     410:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <last_channel_3>
     414:	20 91 46 03 	lds	r18, 0x0346	; 0x800346 <timer_3>
     418:	30 91 47 03 	lds	r19, 0x0347	; 0x800347 <timer_3+0x1>
     41c:	ab 01       	movw	r20, r22
     41e:	42 1b       	sub	r20, r18
     420:	53 0b       	sbc	r21, r19
     422:	50 93 dd 03 	sts	0x03DD, r21	; 0x8003dd <receiver_input+0x7>
     426:	40 93 dc 03 	sts	0x03DC, r20	; 0x8003dc <receiver_input+0x6>
     42a:	20 91 27 04 	lds	r18, 0x0427	; 0x800427 <last_channel_4>
     42e:	1b 9b       	sbis	0x03, 3	; 3
     430:	0e c0       	rjmp	.+28     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     432:	21 11       	cpse	r18, r1
     434:	1b c0       	rjmp	.+54     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     436:	21 e0       	ldi	r18, 0x01	; 1
     438:	20 93 27 04 	sts	0x0427, r18	; 0x800427 <last_channel_4>
     43c:	60 93 42 03 	sts	0x0342, r22	; 0x800342 <timer_4>
     440:	70 93 43 03 	sts	0x0343, r23	; 0x800343 <timer_4+0x1>
     444:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <timer_4+0x2>
     448:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <timer_4+0x3>
     44c:	0f c0       	rjmp	.+30     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     44e:	21 30       	cpi	r18, 0x01	; 1
     450:	69 f4       	brne	.+26     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     452:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <last_channel_4>
     456:	20 91 42 03 	lds	r18, 0x0342	; 0x800342 <timer_4>
     45a:	30 91 43 03 	lds	r19, 0x0343	; 0x800343 <timer_4+0x1>
     45e:	ab 01       	movw	r20, r22
     460:	42 1b       	sub	r20, r18
     462:	53 0b       	sbc	r21, r19
     464:	50 93 df 03 	sts	0x03DF, r21	; 0x8003df <receiver_input+0x9>
     468:	40 93 de 03 	sts	0x03DE, r20	; 0x8003de <receiver_input+0x8>
     46c:	20 91 26 04 	lds	r18, 0x0426	; 0x800426 <last_channel_5>
     470:	1c 9b       	sbis	0x03, 4	; 3
     472:	0e c0       	rjmp	.+28     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     474:	21 11       	cpse	r18, r1
     476:	1a c0       	rjmp	.+52     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     478:	21 e0       	ldi	r18, 0x01	; 1
     47a:	20 93 26 04 	sts	0x0426, r18	; 0x800426 <last_channel_5>
     47e:	60 93 3e 03 	sts	0x033E, r22	; 0x80033e <timer_5>
     482:	70 93 3f 03 	sts	0x033F, r23	; 0x80033f <timer_5+0x1>
     486:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <timer_5+0x2>
     48a:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <timer_5+0x3>
     48e:	0e c0       	rjmp	.+28     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     490:	21 30       	cpi	r18, 0x01	; 1
     492:	61 f4       	brne	.+24     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     494:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <last_channel_5>
     498:	20 91 3e 03 	lds	r18, 0x033E	; 0x80033e <timer_5>
     49c:	30 91 3f 03 	lds	r19, 0x033F	; 0x80033f <timer_5+0x1>
     4a0:	62 1b       	sub	r22, r18
     4a2:	73 0b       	sbc	r23, r19
     4a4:	70 93 e1 03 	sts	0x03E1, r23	; 0x8003e1 <receiver_input+0xb>
     4a8:	60 93 e0 03 	sts	0x03E0, r22	; 0x8003e0 <receiver_input+0xa>
     4ac:	ff 91       	pop	r31
     4ae:	ef 91       	pop	r30
     4b0:	bf 91       	pop	r27
     4b2:	af 91       	pop	r26
     4b4:	9f 91       	pop	r25
     4b6:	8f 91       	pop	r24
     4b8:	7f 91       	pop	r23
     4ba:	6f 91       	pop	r22
     4bc:	5f 91       	pop	r21
     4be:	4f 91       	pop	r20
     4c0:	3f 91       	pop	r19
     4c2:	2f 91       	pop	r18
     4c4:	0f 90       	pop	r0
     4c6:	0f be       	out	0x3f, r0	; 63
     4c8:	0f 90       	pop	r0
     4ca:	1f 90       	pop	r1
     4cc:	18 95       	reti

000004ce <_Z13print_signalsv>:
	}
	else return 1500;
}

void print_signals(){
	Serial.print("Start:");
     4ce:	61 e0       	ldi	r22, 0x01	; 1
     4d0:	71 e0       	ldi	r23, 0x01	; 1
     4d2:	8b e2       	ldi	r24, 0x2B	; 43
     4d4:	94 e0       	ldi	r25, 0x04	; 4
     4d6:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN5Print5printEPKc>
	Serial.print(start);
     4da:	4a e0       	ldi	r20, 0x0A	; 10
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	60 91 ff 03 	lds	r22, 0x03FF	; 0x8003ff <start>
     4e2:	8b e2       	ldi	r24, 0x2B	; 43
     4e4:	94 e0       	ldi	r25, 0x04	; 4
     4e6:	0e 94 66 14 	call	0x28cc	; 0x28cc <_ZN5Print5printEhi>

	Serial.print("  Roll:");
     4ea:	68 e0       	ldi	r22, 0x08	; 8
     4ec:	71 e0       	ldi	r23, 0x01	; 1
     4ee:	8b e2       	ldi	r24, 0x2B	; 43
     4f0:	94 e0       	ldi	r25, 0x04	; 4
     4f2:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN5Print5printEPKc>
	if(receiver_input_channel_1 - 1480 < 0)Serial.print("<<<");
     4f6:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <receiver_input_channel_1>
     4fa:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <receiver_input_channel_1+0x1>
     4fe:	88 3c       	cpi	r24, 0xC8	; 200
     500:	95 40       	sbci	r25, 0x05	; 5
     502:	1c f4       	brge	.+6      	; 0x50a <_Z13print_signalsv+0x3c>
     504:	60 e1       	ldi	r22, 0x10	; 16
     506:	71 e0       	ldi	r23, 0x01	; 1
     508:	0c c0       	rjmp	.+24     	; 0x522 <_Z13print_signalsv+0x54>
	else if(receiver_input_channel_1 - 1520 > 0)Serial.print(">>>");
     50a:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <receiver_input_channel_1>
     50e:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <receiver_input_channel_1+0x1>
     512:	81 3f       	cpi	r24, 0xF1	; 241
     514:	95 40       	sbci	r25, 0x05	; 5
     516:	1c f0       	brlt	.+6      	; 0x51e <_Z13print_signalsv+0x50>
     518:	64 e1       	ldi	r22, 0x14	; 20
     51a:	71 e0       	ldi	r23, 0x01	; 1
     51c:	02 c0       	rjmp	.+4      	; 0x522 <_Z13print_signalsv+0x54>
	else Serial.print("-+-");
     51e:	68 e1       	ldi	r22, 0x18	; 24
     520:	71 e0       	ldi	r23, 0x01	; 1
     522:	8b e2       	ldi	r24, 0x2B	; 43
     524:	94 e0       	ldi	r25, 0x04	; 4
     526:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN5Print5printEPKc>
	Serial.print(receiver_input_channel_1);
     52a:	60 91 fa 03 	lds	r22, 0x03FA	; 0x8003fa <receiver_input_channel_1>
     52e:	70 91 fb 03 	lds	r23, 0x03FB	; 0x8003fb <receiver_input_channel_1+0x1>
     532:	4a e0       	ldi	r20, 0x0A	; 10
     534:	50 e0       	ldi	r21, 0x00	; 0
     536:	8b e2       	ldi	r24, 0x2B	; 43
     538:	94 e0       	ldi	r25, 0x04	; 4
     53a:	0e 94 29 14 	call	0x2852	; 0x2852 <_ZN5Print5printEii>

	Serial.print("  Pitch:");
     53e:	6c e1       	ldi	r22, 0x1C	; 28
     540:	71 e0       	ldi	r23, 0x01	; 1
     542:	8b e2       	ldi	r24, 0x2B	; 43
     544:	94 e0       	ldi	r25, 0x04	; 4
     546:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN5Print5printEPKc>
	if(receiver_input_channel_2 - 1480 < 0)Serial.print("^^^");
     54a:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <receiver_input_channel_2>
     54e:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <receiver_input_channel_2+0x1>
     552:	88 3c       	cpi	r24, 0xC8	; 200
     554:	95 40       	sbci	r25, 0x05	; 5
     556:	1c f4       	brge	.+6      	; 0x55e <_Z13print_signalsv+0x90>
     558:	65 e2       	ldi	r22, 0x25	; 37
     55a:	71 e0       	ldi	r23, 0x01	; 1
     55c:	0c c0       	rjmp	.+24     	; 0x576 <_Z13print_signalsv+0xa8>
	else if(receiver_input_channel_2 - 1520 > 0)Serial.print("vvv");
     55e:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <receiver_input_channel_2>
     562:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <receiver_input_channel_2+0x1>
     566:	81 3f       	cpi	r24, 0xF1	; 241
     568:	95 40       	sbci	r25, 0x05	; 5
     56a:	1c f0       	brlt	.+6      	; 0x572 <_Z13print_signalsv+0xa4>
     56c:	69 e2       	ldi	r22, 0x29	; 41
     56e:	71 e0       	ldi	r23, 0x01	; 1
     570:	02 c0       	rjmp	.+4      	; 0x576 <_Z13print_signalsv+0xa8>
	else Serial.print("-+-");
     572:	68 e1       	ldi	r22, 0x18	; 24
     574:	71 e0       	ldi	r23, 0x01	; 1
     576:	8b e2       	ldi	r24, 0x2B	; 43
     578:	94 e0       	ldi	r25, 0x04	; 4
     57a:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN5Print5printEPKc>
	Serial.print(receiver_input_channel_2);
     57e:	60 91 f8 03 	lds	r22, 0x03F8	; 0x8003f8 <receiver_input_channel_2>
     582:	70 91 f9 03 	lds	r23, 0x03F9	; 0x8003f9 <receiver_input_channel_2+0x1>
     586:	4a e0       	ldi	r20, 0x0A	; 10
     588:	50 e0       	ldi	r21, 0x00	; 0
     58a:	8b e2       	ldi	r24, 0x2B	; 43
     58c:	94 e0       	ldi	r25, 0x04	; 4
     58e:	0e 94 29 14 	call	0x2852	; 0x2852 <_ZN5Print5printEii>

	Serial.print("  Throttle:");
     592:	6d e2       	ldi	r22, 0x2D	; 45
     594:	71 e0       	ldi	r23, 0x01	; 1
     596:	8b e2       	ldi	r24, 0x2B	; 43
     598:	94 e0       	ldi	r25, 0x04	; 4
     59a:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN5Print5printEPKc>
	if(receiver_input_channel_3 - 1480 < 0)Serial.print("vvv");
     59e:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <receiver_input_channel_3>
     5a2:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <receiver_input_channel_3+0x1>
     5a6:	88 3c       	cpi	r24, 0xC8	; 200
     5a8:	95 40       	sbci	r25, 0x05	; 5
     5aa:	1c f4       	brge	.+6      	; 0x5b2 <_Z13print_signalsv+0xe4>
     5ac:	69 e2       	ldi	r22, 0x29	; 41
     5ae:	71 e0       	ldi	r23, 0x01	; 1
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <_Z13print_signalsv+0xfc>
	else if(receiver_input_channel_3 - 1520 > 0)Serial.print("^^^");
     5b2:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <receiver_input_channel_3>
     5b6:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <receiver_input_channel_3+0x1>
     5ba:	81 3f       	cpi	r24, 0xF1	; 241
     5bc:	95 40       	sbci	r25, 0x05	; 5
     5be:	1c f0       	brlt	.+6      	; 0x5c6 <_Z13print_signalsv+0xf8>
     5c0:	65 e2       	ldi	r22, 0x25	; 37
     5c2:	71 e0       	ldi	r23, 0x01	; 1
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <_Z13print_signalsv+0xfc>
	else Serial.print("-+-");
     5c6:	68 e1       	ldi	r22, 0x18	; 24
     5c8:	71 e0       	ldi	r23, 0x01	; 1
     5ca:	8b e2       	ldi	r24, 0x2B	; 43
     5cc:	94 e0       	ldi	r25, 0x04	; 4
     5ce:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN5Print5printEPKc>
	Serial.print(receiver_input_channel_3);
     5d2:	60 91 f6 03 	lds	r22, 0x03F6	; 0x8003f6 <receiver_input_channel_3>
     5d6:	70 91 f7 03 	lds	r23, 0x03F7	; 0x8003f7 <receiver_input_channel_3+0x1>
     5da:	4a e0       	ldi	r20, 0x0A	; 10
     5dc:	50 e0       	ldi	r21, 0x00	; 0
     5de:	8b e2       	ldi	r24, 0x2B	; 43
     5e0:	94 e0       	ldi	r25, 0x04	; 4
     5e2:	0e 94 29 14 	call	0x2852	; 0x2852 <_ZN5Print5printEii>

	Serial.print("  Yaw:");
     5e6:	69 e3       	ldi	r22, 0x39	; 57
     5e8:	71 e0       	ldi	r23, 0x01	; 1
     5ea:	8b e2       	ldi	r24, 0x2B	; 43
     5ec:	94 e0       	ldi	r25, 0x04	; 4
     5ee:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN5Print5printEPKc>
	if(receiver_input_channel_4 - 1480 < 0)Serial.print("<<<");
     5f2:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <receiver_input_channel_4>
     5f6:	90 91 f5 03 	lds	r25, 0x03F5	; 0x8003f5 <receiver_input_channel_4+0x1>
     5fa:	88 3c       	cpi	r24, 0xC8	; 200
     5fc:	95 40       	sbci	r25, 0x05	; 5
     5fe:	1c f4       	brge	.+6      	; 0x606 <_Z13print_signalsv+0x138>
     600:	60 e1       	ldi	r22, 0x10	; 16
     602:	71 e0       	ldi	r23, 0x01	; 1
     604:	0c c0       	rjmp	.+24     	; 0x61e <_Z13print_signalsv+0x150>
	else if(receiver_input_channel_4 - 1520 > 0)Serial.print(">>>");
     606:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <receiver_input_channel_4>
     60a:	90 91 f5 03 	lds	r25, 0x03F5	; 0x8003f5 <receiver_input_channel_4+0x1>
     60e:	81 3f       	cpi	r24, 0xF1	; 241
     610:	95 40       	sbci	r25, 0x05	; 5
     612:	1c f0       	brlt	.+6      	; 0x61a <_Z13print_signalsv+0x14c>
     614:	64 e1       	ldi	r22, 0x14	; 20
     616:	71 e0       	ldi	r23, 0x01	; 1
     618:	02 c0       	rjmp	.+4      	; 0x61e <_Z13print_signalsv+0x150>
	else Serial.print("-+-");
     61a:	68 e1       	ldi	r22, 0x18	; 24
     61c:	71 e0       	ldi	r23, 0x01	; 1
     61e:	8b e2       	ldi	r24, 0x2B	; 43
     620:	94 e0       	ldi	r25, 0x04	; 4
     622:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN5Print5printEPKc>
	Serial.print(receiver_input_channel_4);
     626:	60 91 f4 03 	lds	r22, 0x03F4	; 0x8003f4 <receiver_input_channel_4>
     62a:	70 91 f5 03 	lds	r23, 0x03F5	; 0x8003f5 <receiver_input_channel_4+0x1>
     62e:	4a e0       	ldi	r20, 0x0A	; 10
     630:	50 e0       	ldi	r21, 0x00	; 0
     632:	8b e2       	ldi	r24, 0x2B	; 43
     634:	94 e0       	ldi	r25, 0x04	; 4
     636:	0e 94 29 14 	call	0x2852	; 0x2852 <_ZN5Print5printEii>


	Serial.print("  CH5:");
     63a:	60 e4       	ldi	r22, 0x40	; 64
     63c:	71 e0       	ldi	r23, 0x01	; 1
     63e:	8b e2       	ldi	r24, 0x2B	; 43
     640:	94 e0       	ldi	r25, 0x04	; 4
     642:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN5Print5printEPKc>
	Serial.print(receiver_input_channel_5);
     646:	60 91 f2 03 	lds	r22, 0x03F2	; 0x8003f2 <receiver_input_channel_5>
     64a:	70 91 f3 03 	lds	r23, 0x03F3	; 0x8003f3 <receiver_input_channel_5+0x1>
     64e:	4a e0       	ldi	r20, 0x0A	; 10
     650:	50 e0       	ldi	r21, 0x00	; 0
     652:	8b e2       	ldi	r24, 0x2B	; 43
     654:	94 e0       	ldi	r25, 0x04	; 4
     656:	0e 94 29 14 	call	0x2852	; 0x2852 <_ZN5Print5printEii>
	Serial.print("  CH6:");
     65a:	67 e4       	ldi	r22, 0x47	; 71
     65c:	71 e0       	ldi	r23, 0x01	; 1
     65e:	8b e2       	ldi	r24, 0x2B	; 43
     660:	94 e0       	ldi	r25, 0x04	; 4
     662:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN5Print5printEPKc>
	Serial.print(receiver_input_channel_6);
     666:	60 91 f0 03 	lds	r22, 0x03F0	; 0x8003f0 <receiver_input_channel_6>
     66a:	70 91 f1 03 	lds	r23, 0x03F1	; 0x8003f1 <receiver_input_channel_6+0x1>
     66e:	4a e0       	ldi	r20, 0x0A	; 10
     670:	50 e0       	ldi	r21, 0x00	; 0
     672:	8b e2       	ldi	r24, 0x2B	; 43
     674:	94 e0       	ldi	r25, 0x04	; 4
     676:	0e 94 29 14 	call	0x2852	; 0x2852 <_ZN5Print5printEii>
	Serial.print("  CH7:");
     67a:	6e e4       	ldi	r22, 0x4E	; 78
     67c:	71 e0       	ldi	r23, 0x01	; 1
     67e:	8b e2       	ldi	r24, 0x2B	; 43
     680:	94 e0       	ldi	r25, 0x04	; 4
     682:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN5Print5printEPKc>
	Serial.print(receiver_input_channel_7);
     686:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <receiver_input_channel_7>
     68a:	70 91 ef 03 	lds	r23, 0x03EF	; 0x8003ef <receiver_input_channel_7+0x1>
     68e:	4a e0       	ldi	r20, 0x0A	; 10
     690:	50 e0       	ldi	r21, 0x00	; 0
     692:	8b e2       	ldi	r24, 0x2B	; 43
     694:	94 e0       	ldi	r25, 0x04	; 4
     696:	0e 94 29 14 	call	0x2852	; 0x2852 <_ZN5Print5printEii>
	
	Serial.print(" Volt:");
     69a:	65 e5       	ldi	r22, 0x55	; 85
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	8b e2       	ldi	r24, 0x2B	; 43
     6a0:	94 e0       	ldi	r25, 0x04	; 4
     6a2:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN5Print5printEPKc>
	Serial.println(battery_voltage);
     6a6:	60 91 2c 03 	lds	r22, 0x032C	; 0x80032c <battery_voltage>
     6aa:	70 91 2d 03 	lds	r23, 0x032D	; 0x80032d <battery_voltage+0x1>
     6ae:	4a e0       	ldi	r20, 0x0A	; 10
     6b0:	50 e0       	ldi	r21, 0x00	; 0
     6b2:	8b e2       	ldi	r24, 0x2B	; 43
     6b4:	94 e0       	ldi	r25, 0x04	; 4
     6b6:	0c 94 30 14 	jmp	0x2860	; 0x2860 <_ZN5Print7printlnEii>

000006ba <_Z16esc_pulse_outputv>:
	
}

void esc_pulse_output(){
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
	zero_timer = micros();
     6be:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <micros>
     6c2:	60 93 52 03 	sts	0x0352, r22	; 0x800352 <zero_timer>
     6c6:	70 93 53 03 	sts	0x0353, r23	; 0x800353 <zero_timer+0x1>
     6ca:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <zero_timer+0x2>
     6ce:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <zero_timer+0x3>
	PORTD |= B11110000;                                            //Set port 4, 5, 6 and 7 high at once
     6d2:	8b b1       	in	r24, 0x0b	; 11
     6d4:	80 6f       	ori	r24, 0xF0	; 240
     6d6:	8b b9       	out	0x0b, r24	; 11
	timer_channel_1 = esc_1 + zero_timer;                          //Calculate the time when digital port 4 is set low.
     6d8:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <zero_timer>
     6dc:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <zero_timer+0x1>
     6e0:	a0 91 54 03 	lds	r26, 0x0354	; 0x800354 <zero_timer+0x2>
     6e4:	b0 91 55 03 	lds	r27, 0x0355	; 0x800355 <zero_timer+0x3>
     6e8:	40 91 ec 03 	lds	r20, 0x03EC	; 0x8003ec <esc_1>
     6ec:	50 91 ed 03 	lds	r21, 0x03ED	; 0x8003ed <esc_1+0x1>
     6f0:	05 2e       	mov	r0, r21
     6f2:	00 0c       	add	r0, r0
     6f4:	66 0b       	sbc	r22, r22
     6f6:	77 0b       	sbc	r23, r23
     6f8:	48 0f       	add	r20, r24
     6fa:	59 1f       	adc	r21, r25
     6fc:	6a 1f       	adc	r22, r26
     6fe:	7b 1f       	adc	r23, r27
     700:	40 93 66 03 	sts	0x0366, r20	; 0x800366 <timer_channel_1>
     704:	50 93 67 03 	sts	0x0367, r21	; 0x800367 <timer_channel_1+0x1>
     708:	60 93 68 03 	sts	0x0368, r22	; 0x800368 <timer_channel_1+0x2>
     70c:	70 93 69 03 	sts	0x0369, r23	; 0x800369 <timer_channel_1+0x3>
	timer_channel_2 = esc_2 + zero_timer;                          //Calculate the time when digital port 5 is set low.
     710:	40 91 ea 03 	lds	r20, 0x03EA	; 0x8003ea <esc_2>
     714:	50 91 eb 03 	lds	r21, 0x03EB	; 0x8003eb <esc_2+0x1>
     718:	05 2e       	mov	r0, r21
     71a:	00 0c       	add	r0, r0
     71c:	66 0b       	sbc	r22, r22
     71e:	77 0b       	sbc	r23, r23
     720:	48 0f       	add	r20, r24
     722:	59 1f       	adc	r21, r25
     724:	6a 1f       	adc	r22, r26
     726:	7b 1f       	adc	r23, r27
     728:	40 93 62 03 	sts	0x0362, r20	; 0x800362 <timer_channel_2>
     72c:	50 93 63 03 	sts	0x0363, r21	; 0x800363 <timer_channel_2+0x1>
     730:	60 93 64 03 	sts	0x0364, r22	; 0x800364 <timer_channel_2+0x2>
     734:	70 93 65 03 	sts	0x0365, r23	; 0x800365 <timer_channel_2+0x3>
	timer_channel_3 = esc_3 + zero_timer;                          //Calculate the time when digital port 6 is set low.
     738:	40 91 e8 03 	lds	r20, 0x03E8	; 0x8003e8 <esc_3>
     73c:	50 91 e9 03 	lds	r21, 0x03E9	; 0x8003e9 <esc_3+0x1>
     740:	05 2e       	mov	r0, r21
     742:	00 0c       	add	r0, r0
     744:	66 0b       	sbc	r22, r22
     746:	77 0b       	sbc	r23, r23
     748:	48 0f       	add	r20, r24
     74a:	59 1f       	adc	r21, r25
     74c:	6a 1f       	adc	r22, r26
     74e:	7b 1f       	adc	r23, r27
     750:	40 93 5e 03 	sts	0x035E, r20	; 0x80035e <timer_channel_3>
     754:	50 93 5f 03 	sts	0x035F, r21	; 0x80035f <timer_channel_3+0x1>
     758:	60 93 60 03 	sts	0x0360, r22	; 0x800360 <timer_channel_3+0x2>
     75c:	70 93 61 03 	sts	0x0361, r23	; 0x800361 <timer_channel_3+0x3>
	timer_channel_4 = esc_4 + zero_timer;                          //Calculate the time when digital port 7 is set low.
     760:	40 91 e6 03 	lds	r20, 0x03E6	; 0x8003e6 <esc_4>
     764:	50 91 e7 03 	lds	r21, 0x03E7	; 0x8003e7 <esc_4+0x1>
     768:	05 2e       	mov	r0, r21
     76a:	00 0c       	add	r0, r0
     76c:	66 0b       	sbc	r22, r22
     76e:	77 0b       	sbc	r23, r23
     770:	84 0f       	add	r24, r20
     772:	95 1f       	adc	r25, r21
     774:	a6 1f       	adc	r26, r22
     776:	b7 1f       	adc	r27, r23
     778:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <timer_channel_4>
     77c:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <timer_channel_4+0x1>
     780:	a0 93 5c 03 	sts	0x035C, r26	; 0x80035c <timer_channel_4+0x2>
     784:	b0 93 5d 03 	sts	0x035D, r27	; 0x80035d <timer_channel_4+0x3>

	while(PORTD >= 16){                                            //Execute the loop until digital port 4 to 7 is low.
     788:	8b b1       	in	r24, 0x0b	; 11
     78a:	80 31       	cpi	r24, 0x10	; 16
     78c:	08 f4       	brcc	.+2      	; 0x790 <_Z16esc_pulse_outputv+0xd6>
     78e:	5c c0       	rjmp	.+184    	; 0x848 <_Z16esc_pulse_outputv+0x18e>
		esc_loop_timer = micros();                                   //Check the current time.
     790:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <micros>
     794:	60 93 56 03 	sts	0x0356, r22	; 0x800356 <esc_loop_timer>
     798:	70 93 57 03 	sts	0x0357, r23	; 0x800357 <esc_loop_timer+0x1>
     79c:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <esc_loop_timer+0x2>
     7a0:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <esc_loop_timer+0x3>
		if(timer_channel_1 <= esc_loop_timer)PORTD &= B11101111;     //When the delay time is expired, digital port 4 is set low.
     7a4:	00 91 66 03 	lds	r16, 0x0366	; 0x800366 <timer_channel_1>
     7a8:	10 91 67 03 	lds	r17, 0x0367	; 0x800367 <timer_channel_1+0x1>
     7ac:	20 91 68 03 	lds	r18, 0x0368	; 0x800368 <timer_channel_1+0x2>
     7b0:	30 91 69 03 	lds	r19, 0x0369	; 0x800369 <timer_channel_1+0x3>
     7b4:	60 17       	cp	r22, r16
     7b6:	71 07       	cpc	r23, r17
     7b8:	82 07       	cpc	r24, r18
     7ba:	93 07       	cpc	r25, r19
     7bc:	08 f0       	brcs	.+2      	; 0x7c0 <_Z16esc_pulse_outputv+0x106>
     7be:	5c 98       	cbi	0x0b, 4	; 11
		if(timer_channel_2 <= esc_loop_timer)PORTD &= B11011111;     //When the delay time is expired, digital port 5 is set low.
     7c0:	40 91 62 03 	lds	r20, 0x0362	; 0x800362 <timer_channel_2>
     7c4:	50 91 63 03 	lds	r21, 0x0363	; 0x800363 <timer_channel_2+0x1>
     7c8:	60 91 64 03 	lds	r22, 0x0364	; 0x800364 <timer_channel_2+0x2>
     7cc:	70 91 65 03 	lds	r23, 0x0365	; 0x800365 <timer_channel_2+0x3>
     7d0:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <esc_loop_timer>
     7d4:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <esc_loop_timer+0x1>
     7d8:	a0 91 58 03 	lds	r26, 0x0358	; 0x800358 <esc_loop_timer+0x2>
     7dc:	b0 91 59 03 	lds	r27, 0x0359	; 0x800359 <esc_loop_timer+0x3>
     7e0:	84 17       	cp	r24, r20
     7e2:	95 07       	cpc	r25, r21
     7e4:	a6 07       	cpc	r26, r22
     7e6:	b7 07       	cpc	r27, r23
     7e8:	08 f0       	brcs	.+2      	; 0x7ec <_Z16esc_pulse_outputv+0x132>
     7ea:	5d 98       	cbi	0x0b, 5	; 11
		if(timer_channel_3 <= esc_loop_timer)PORTD &= B10111111;     //When the delay time is expired, digital port 6 is set low.
     7ec:	40 91 5e 03 	lds	r20, 0x035E	; 0x80035e <timer_channel_3>
     7f0:	50 91 5f 03 	lds	r21, 0x035F	; 0x80035f <timer_channel_3+0x1>
     7f4:	60 91 60 03 	lds	r22, 0x0360	; 0x800360 <timer_channel_3+0x2>
     7f8:	70 91 61 03 	lds	r23, 0x0361	; 0x800361 <timer_channel_3+0x3>
     7fc:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <esc_loop_timer>
     800:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <esc_loop_timer+0x1>
     804:	a0 91 58 03 	lds	r26, 0x0358	; 0x800358 <esc_loop_timer+0x2>
     808:	b0 91 59 03 	lds	r27, 0x0359	; 0x800359 <esc_loop_timer+0x3>
     80c:	84 17       	cp	r24, r20
     80e:	95 07       	cpc	r25, r21
     810:	a6 07       	cpc	r26, r22
     812:	b7 07       	cpc	r27, r23
     814:	08 f0       	brcs	.+2      	; 0x818 <_Z16esc_pulse_outputv+0x15e>
     816:	5e 98       	cbi	0x0b, 6	; 11
		if(timer_channel_4 <= esc_loop_timer)PORTD &= B01111111;     //When the delay time is expired, digital port 7 is set low.
     818:	40 91 5a 03 	lds	r20, 0x035A	; 0x80035a <timer_channel_4>
     81c:	50 91 5b 03 	lds	r21, 0x035B	; 0x80035b <timer_channel_4+0x1>
     820:	60 91 5c 03 	lds	r22, 0x035C	; 0x80035c <timer_channel_4+0x2>
     824:	70 91 5d 03 	lds	r23, 0x035D	; 0x80035d <timer_channel_4+0x3>
     828:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <esc_loop_timer>
     82c:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <esc_loop_timer+0x1>
     830:	a0 91 58 03 	lds	r26, 0x0358	; 0x800358 <esc_loop_timer+0x2>
     834:	b0 91 59 03 	lds	r27, 0x0359	; 0x800359 <esc_loop_timer+0x3>
     838:	84 17       	cp	r24, r20
     83a:	95 07       	cpc	r25, r21
     83c:	a6 07       	cpc	r26, r22
     83e:	b7 07       	cpc	r27, r23
     840:	08 f4       	brcc	.+2      	; 0x844 <_Z16esc_pulse_outputv+0x18a>
     842:	a2 cf       	rjmp	.-188    	; 0x788 <_Z16esc_pulse_outputv+0xce>
     844:	5f 98       	cbi	0x0b, 7	; 11
     846:	a0 cf       	rjmp	.-192    	; 0x788 <_Z16esc_pulse_outputv+0xce>
	}
}
     848:	1f 91       	pop	r17
     84a:	0f 91       	pop	r16
     84c:	08 95       	ret

0000084e <_Z18set_gyro_registersv>:

void set_gyro_registers(){
	//Setup the MPU-6050
	if(eeprom_data[31] == 1){
     84e:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <eeprom_data+0x1f>
     852:	81 30       	cpi	r24, 0x01	; 1
     854:	09 f0       	breq	.+2      	; 0x858 <_Z18set_gyro_registersv+0xa>
     856:	94 c0       	rjmp	.+296    	; 0x980 <__stack+0x81>
		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search.
     858:	60 91 d2 03 	lds	r22, 0x03D2	; 0x8003d2 <gyro_address>
     85c:	70 91 d3 03 	lds	r23, 0x03D3	; 0x8003d3 <gyro_address+0x1>
     860:	88 ec       	ldi	r24, 0xC8	; 200
     862:	94 e0       	ldi	r25, 0x04	; 4
     864:	0e 94 12 16 	call	0x2c24	; 0x2c24 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x6B);                                            //We want to write to the PWR_MGMT_1 register (6B hex)
     868:	6b e6       	ldi	r22, 0x6B	; 107
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	88 ec       	ldi	r24, 0xC8	; 200
     86e:	94 e0       	ldi	r25, 0x04	; 4
     870:	0e 94 23 01 	call	0x246	; 0x246 <_ZN7TwoWire5writeEi>
		Wire.write(0x00);                                            //Set the register bits as 00000000 to activate the gyro
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	88 ec       	ldi	r24, 0xC8	; 200
     87a:	94 e0       	ldi	r25, 0x04	; 4
     87c:	0e 94 23 01 	call	0x246	; 0x246 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro.
     880:	88 ec       	ldi	r24, 0xC8	; 200
     882:	94 e0       	ldi	r25, 0x04	; 4
     884:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN7TwoWire15endTransmissionEv>

		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search.
     888:	60 91 d2 03 	lds	r22, 0x03D2	; 0x8003d2 <gyro_address>
     88c:	70 91 d3 03 	lds	r23, 0x03D3	; 0x8003d3 <gyro_address+0x1>
     890:	88 ec       	ldi	r24, 0xC8	; 200
     892:	94 e0       	ldi	r25, 0x04	; 4
     894:	0e 94 12 16 	call	0x2c24	; 0x2c24 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x1B);                                            //We want to write to the GYRO_CONFIG register (1B hex)
     898:	6b e1       	ldi	r22, 0x1B	; 27
     89a:	70 e0       	ldi	r23, 0x00	; 0
     89c:	88 ec       	ldi	r24, 0xC8	; 200
     89e:	94 e0       	ldi	r25, 0x04	; 4
     8a0:	0e 94 23 01 	call	0x246	; 0x246 <_ZN7TwoWire5writeEi>
		Wire.write(0x08);                                            //Set the register bits as 00001000 (500dps full scale)
     8a4:	68 e0       	ldi	r22, 0x08	; 8
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	88 ec       	ldi	r24, 0xC8	; 200
     8aa:	94 e0       	ldi	r25, 0x04	; 4
     8ac:	0e 94 23 01 	call	0x246	; 0x246 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro
     8b0:	88 ec       	ldi	r24, 0xC8	; 200
     8b2:	94 e0       	ldi	r25, 0x04	; 4
     8b4:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN7TwoWire15endTransmissionEv>

		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search.
     8b8:	60 91 d2 03 	lds	r22, 0x03D2	; 0x8003d2 <gyro_address>
     8bc:	70 91 d3 03 	lds	r23, 0x03D3	; 0x8003d3 <gyro_address+0x1>
     8c0:	88 ec       	ldi	r24, 0xC8	; 200
     8c2:	94 e0       	ldi	r25, 0x04	; 4
     8c4:	0e 94 12 16 	call	0x2c24	; 0x2c24 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x1C);                                            //We want to write to the ACCEL_CONFIG register (1A hex)
     8c8:	6c e1       	ldi	r22, 0x1C	; 28
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	88 ec       	ldi	r24, 0xC8	; 200
     8ce:	94 e0       	ldi	r25, 0x04	; 4
     8d0:	0e 94 23 01 	call	0x246	; 0x246 <_ZN7TwoWire5writeEi>
		Wire.write(0x10);                                            //Set the register bits as 00010000 (+/- 8g full scale range)
     8d4:	60 e1       	ldi	r22, 0x10	; 16
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	88 ec       	ldi	r24, 0xC8	; 200
     8da:	94 e0       	ldi	r25, 0x04	; 4
     8dc:	0e 94 23 01 	call	0x246	; 0x246 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro
     8e0:	88 ec       	ldi	r24, 0xC8	; 200
     8e2:	94 e0       	ldi	r25, 0x04	; 4
     8e4:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN7TwoWire15endTransmissionEv>

		//Let's perform a random register check to see if the values are written correct
		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search
     8e8:	60 91 d2 03 	lds	r22, 0x03D2	; 0x8003d2 <gyro_address>
     8ec:	70 91 d3 03 	lds	r23, 0x03D3	; 0x8003d3 <gyro_address+0x1>
     8f0:	88 ec       	ldi	r24, 0xC8	; 200
     8f2:	94 e0       	ldi	r25, 0x04	; 4
     8f4:	0e 94 12 16 	call	0x2c24	; 0x2c24 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x1B);                                            //Start reading @ register 0x1B
     8f8:	6b e1       	ldi	r22, 0x1B	; 27
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	88 ec       	ldi	r24, 0xC8	; 200
     8fe:	94 e0       	ldi	r25, 0x04	; 4
     900:	0e 94 23 01 	call	0x246	; 0x246 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission
     904:	88 ec       	ldi	r24, 0xC8	; 200
     906:	94 e0       	ldi	r25, 0x04	; 4
     908:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN7TwoWire15endTransmissionEv>
		Wire.requestFrom(gyro_address, 1);                           //Request 1 bytes from the gyro
     90c:	60 91 d2 03 	lds	r22, 0x03D2	; 0x8003d2 <gyro_address>
     910:	70 91 d3 03 	lds	r23, 0x03D3	; 0x8003d3 <gyro_address+0x1>
     914:	41 e0       	ldi	r20, 0x01	; 1
     916:	50 e0       	ldi	r21, 0x00	; 0
     918:	88 ec       	ldi	r24, 0xC8	; 200
     91a:	94 e0       	ldi	r25, 0x04	; 4
     91c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <_ZN7TwoWire11requestFromEii>
		while(Wire.available() < 1);                                 //Wait until the 6 bytes are received
     920:	88 ec       	ldi	r24, 0xC8	; 200
     922:	94 e0       	ldi	r25, 0x04	; 4
     924:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <_ZN7TwoWire9availableEv>
     928:	18 16       	cp	r1, r24
     92a:	19 06       	cpc	r1, r25
     92c:	cc f7       	brge	.-14     	; 0x920 <__stack+0x21>
		if(Wire.read() != 0x08){                                     //Check if the value is 0x08
     92e:	88 ec       	ldi	r24, 0xC8	; 200
     930:	94 e0       	ldi	r25, 0x04	; 4
     932:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN7TwoWire4readEv>
     936:	08 97       	sbiw	r24, 0x08	; 8
     938:	59 f0       	breq	.+22     	; 0x950 <__stack+0x51>
			digitalWrite(LED_STATUS_PIN,HIGH);                                     //Turn on the warning led
     93a:	61 e0       	ldi	r22, 0x01	; 1
     93c:	8d e0       	ldi	r24, 0x0D	; 13
     93e:	0e 94 08 18 	call	0x3010	; 0x3010 <digitalWrite>
			while(1)delay(10);                                         //Stay in this loop for ever
     942:	6a e0       	ldi	r22, 0x0A	; 10
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	0e 94 04 17 	call	0x2e08	; 0x2e08 <delay>
     94e:	f9 cf       	rjmp	.-14     	; 0x942 <__stack+0x43>
		}

		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search
     950:	60 91 d2 03 	lds	r22, 0x03D2	; 0x8003d2 <gyro_address>
     954:	70 91 d3 03 	lds	r23, 0x03D3	; 0x8003d3 <gyro_address+0x1>
     958:	88 ec       	ldi	r24, 0xC8	; 200
     95a:	94 e0       	ldi	r25, 0x04	; 4
     95c:	0e 94 12 16 	call	0x2c24	; 0x2c24 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x1A);                                            //We want to write to the CONFIG register (1A hex)
     960:	6a e1       	ldi	r22, 0x1A	; 26
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	88 ec       	ldi	r24, 0xC8	; 200
     966:	94 e0       	ldi	r25, 0x04	; 4
     968:	0e 94 23 01 	call	0x246	; 0x246 <_ZN7TwoWire5writeEi>
		Wire.write(0x03);                                            //Set the register bits as 00000011 (Set Digital Low Pass Filter to ~43Hz)
     96c:	63 e0       	ldi	r22, 0x03	; 3
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	88 ec       	ldi	r24, 0xC8	; 200
     972:	94 e0       	ldi	r25, 0x04	; 4
     974:	0e 94 23 01 	call	0x246	; 0x246 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro
     978:	88 ec       	ldi	r24, 0xC8	; 200
     97a:	94 e0       	ldi	r25, 0x04	; 4
     97c:	0c 94 8e 16 	jmp	0x2d1c	; 0x2d1c <_ZN7TwoWire15endTransmissionEv>
     980:	08 95       	ret

00000982 <setup>:
float angle_roll_acc, angle_pitch_acc, angle_pitch, angle_roll, angle_yaw;
int cal_int;
double gyro_axis_cal[4];
#define LED_STATUS_PIN 13
//Setup routine
void setup(){
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     988:	26 e0       	ldi	r18, 0x06	; 6
     98a:	40 e0       	ldi	r20, 0x00	; 0
     98c:	51 ee       	ldi	r21, 0xE1	; 225
     98e:	60 e0       	ldi	r22, 0x00	; 0
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	8b e2       	ldi	r24, 0x2B	; 43
     994:	94 e0       	ldi	r25, 0x04	; 4
     996:	0e 94 28 12 	call	0x2450	; 0x2450 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(57600);                                                                  //Start the serial port.
	Wire.begin();                       
     99a:	88 ec       	ldi	r24, 0xC8	; 200
     99c:	94 e0       	ldi	r25, 0x04	; 4
     99e:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <_ZN7TwoWire5beginEv>
		pinMode(LED_STATUS_PIN, OUTPUT);                                                  //Start the wire library as master
     9a2:	61 e0       	ldi	r22, 0x01	; 1
     9a4:	8d e0       	ldi	r24, 0x0D	; 13
     9a6:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <pinMode>
	TWBR = 12;                                                                            //Set the I2C clock speed to 400kHz.
     9aa:	8c e0       	ldi	r24, 0x0C	; 12
     9ac:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	//Arduino Uno pins default to inputs, so they don't need to be explicitly declared as inputs.
	DDRD |= B11110000;                                                        //Configure digital poort 4, 5, 6 and 7 as output.
     9b0:	8a b1       	in	r24, 0x0a	; 10
     9b2:	80 6f       	ori	r24, 0xF0	; 240
     9b4:	8a b9       	out	0x0a, r24	; 10
	DDRB |= B00100000;                                                        //Configure digital poort  13 as output.
     9b6:	25 9a       	sbi	0x04, 5	; 4
	DDRB &= B11101111;                                                        //Configure digital poort  13 as output.
     9b8:	24 98       	cbi	0x04, 4	; 4

	PCICR |= (1 << PCIE0);			//Set PCIE0 to enable PCMSK0 scan.
     9ba:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     9be:	81 60       	ori	r24, 0x01	; 1
     9c0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCICR |= (1 << PCIE2);                                                    //Set PCIE2 to enable PCMSK2 scan.
     9c4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     9c8:	84 60       	ori	r24, 0x04	; 4
     9ca:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK0 |= (1 << PCINT0);                                                  //Set PCINT0 (digital input 8) to trigger an interrupt on state change.
     9ce:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     9d2:	81 60       	ori	r24, 0x01	; 1
     9d4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK0 |= (1 << PCINT1);                                                  //Set PCINT1 (digital input 9)to trigger an interrupt on state change.
     9d8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     9dc:	82 60       	ori	r24, 0x02	; 2
     9de:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK0 |= (1 << PCINT2);                                                  //Set PCINT2 (digital input 10)to trigger an interrupt on state change.
     9e2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     9e6:	84 60       	ori	r24, 0x04	; 4
     9e8:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK0 |= (1 << PCINT3);                                                  //Set PCINT3 (digital input 11)to trigger an interrupt on state change.
     9ec:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     9f0:	88 60       	ori	r24, 0x08	; 8
     9f2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK0 |= (1 << PCINT4);                                                  //Set PCINT3 (digital input 12)to trigger an interrupt on state change.
     9f6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     9fa:	80 61       	ori	r24, 0x10	; 16
     9fc:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK2 |= (1 << PCINT18);
     a00:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
     a04:	84 60       	ori	r24, 0x04	; 4
     a06:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
	PCMSK2 |= (1 << PCINT19);
     a0a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
     a0e:	88 60       	ori	r24, 0x08	; 8
     a10:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>

	for(data = 0; data <= 35; data++)eeprom_data[data] = EEPROM.read(data);               //Read EEPROM for faster data access
     a14:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <data>
     a18:	c0 91 fe 03 	lds	r28, 0x03FE	; 0x8003fe <data>
     a1c:	c4 32       	cpi	r28, 0x24	; 36
     a1e:	68 f4       	brcc	.+26     	; 0xa3a <setup+0xb8>
     a20:	0c 2f       	mov	r16, r28
     a22:	10 e0       	ldi	r17, 0x00	; 0

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     a24:	c8 01       	movw	r24, r16
     a26:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <eeprom_read_byte>
     a2a:	f8 01       	movw	r30, r16
     a2c:	e0 50       	subi	r30, 0x00	; 0
     a2e:	fc 4f       	sbci	r31, 0xFC	; 252
     a30:	80 83       	st	Z, r24
     a32:	cf 5f       	subi	r28, 0xFF	; 255
     a34:	c0 93 fe 03 	sts	0x03FE, r28	; 0x8003fe <data>
     a38:	ef cf       	rjmp	.-34     	; 0xa18 <setup+0x96>

	gyro_address = eeprom_data[32];                                                       //Store the gyro address in the variable.
     a3a:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <eeprom_data+0x20>
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	90 93 d3 03 	sts	0x03D3, r25	; 0x8003d3 <gyro_address+0x1>
     a44:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <gyro_address>

	set_gyro_registers();                                                                 //Set the specific gyro registers.
     a48:	0e 94 27 04 	call	0x84e	; 0x84e <_Z18set_gyro_registersv>

	//Check the EEPROM signature to make sure that the setup program is executed.
	while(eeprom_data[33] != 'J' || eeprom_data[34] != 'M' || eeprom_data[35] != 'B'){
     a4c:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <eeprom_data+0x21>
     a50:	8a 34       	cpi	r24, 0x4A	; 74
     a52:	89 f0       	breq	.+34     	; 0xa76 <setup+0xf4>
		delay(500);                                                                         //Wait for 500ms.
     a54:	64 ef       	ldi	r22, 0xF4	; 244
     a56:	71 e0       	ldi	r23, 0x01	; 1
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 04 17 	call	0x2e08	; 0x2e08 <delay>
		digitalWrite(LED_STATUS_PIN, !digitalRead(LED_STATUS_PIN));                                                 //Change the led status to indicate error.
     a60:	8d e0       	ldi	r24, 0x0D	; 13
     a62:	0e 94 38 18 	call	0x3070	; 0x3070 <digitalRead>
     a66:	61 e0       	ldi	r22, 0x01	; 1
     a68:	89 2b       	or	r24, r25
     a6a:	09 f0       	breq	.+2      	; 0xa6e <setup+0xec>
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	8d e0       	ldi	r24, 0x0D	; 13
     a70:	0e 94 08 18 	call	0x3010	; 0x3010 <digitalWrite>
     a74:	eb cf       	rjmp	.-42     	; 0xa4c <setup+0xca>
	gyro_address = eeprom_data[32];                                                       //Store the gyro address in the variable.

	set_gyro_registers();                                                                 //Set the specific gyro registers.

	//Check the EEPROM signature to make sure that the setup program is executed.
	while(eeprom_data[33] != 'J' || eeprom_data[34] != 'M' || eeprom_data[35] != 'B'){
     a76:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <eeprom_data+0x22>
     a7a:	8d 34       	cpi	r24, 0x4D	; 77
     a7c:	59 f7       	brne	.-42     	; 0xa54 <setup+0xd2>
     a7e:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <eeprom_data+0x23>
     a82:	82 34       	cpi	r24, 0x42	; 66
     a84:	39 f7       	brne	.-50     	; 0xa54 <setup+0xd2>
		delay(500);                                                                         //Wait for 500ms.
		digitalWrite(LED_STATUS_PIN, !digitalRead(LED_STATUS_PIN));                                                 //Change the led status to indicate error.
	}
	//wait_for_receiver();                                                                  //Wait until the receiver is active.
	zero_timer = micros();                                                                //Set the zero_timer for the first loop.
     a86:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <micros>
     a8a:	60 93 52 03 	sts	0x0352, r22	; 0x800352 <zero_timer>
     a8e:	70 93 53 03 	sts	0x0353, r23	; 0x800353 <zero_timer+0x1>
     a92:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <zero_timer+0x2>
     a96:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <zero_timer+0x3>
	battery_voltage = (analogRead(0) + 65) * 1.2317;
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <analogRead>
     aa0:	8f 5b       	subi	r24, 0xBF	; 191
     aa2:	9f 4f       	sbci	r25, 0xFF	; 255
     aa4:	bc 01       	movw	r22, r24
     aa6:	99 0f       	add	r25, r25
     aa8:	88 0b       	sbc	r24, r24
     aaa:	99 0b       	sbc	r25, r25
     aac:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__floatsisf>
     ab0:	28 e5       	ldi	r18, 0x58	; 88
     ab2:	38 ea       	ldi	r19, 0xA8	; 168
     ab4:	4d e9       	ldi	r20, 0x9D	; 157
     ab6:	5f e3       	ldi	r21, 0x3F	; 63
     ab8:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__mulsf3>
     abc:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__fixsfsi>
     ac0:	70 93 2d 03 	sts	0x032D, r23	; 0x80032d <battery_voltage+0x1>
     ac4:	60 93 2c 03 	sts	0x032C, r22	; 0x80032c <battery_voltage>
	while(Serial.available())data = Serial.read();                                        //Empty the serial buffer.
     ac8:	8b e2       	ldi	r24, 0x2B	; 43
     aca:	94 e0       	ldi	r25, 0x04	; 4
     acc:	0e 94 62 11 	call	0x22c4	; 0x22c4 <_ZN14HardwareSerial9availableEv>
     ad0:	89 2b       	or	r24, r25
     ad2:	39 f0       	breq	.+14     	; 0xae2 <setup+0x160>
     ad4:	8b e2       	ldi	r24, 0x2B	; 43
     ad6:	94 e0       	ldi	r25, 0x04	; 4
     ad8:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <_ZN14HardwareSerial4readEv>
     adc:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <data>
     ae0:	f3 cf       	rjmp	.-26     	; 0xac8 <setup+0x146>
	data = 0;                                                                             //Set the data variable back to zero.
     ae2:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <data>
}
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	08 95       	ret

00000aee <_Z13gyro_signalenv>:
		Wire.endTransmission();                                      //End the transmission with the gyro

	}
}

void gyro_signalen(){
     aee:	bf 92       	push	r11
     af0:	cf 92       	push	r12
     af2:	df 92       	push	r13
     af4:	ef 92       	push	r14
     af6:	ff 92       	push	r15
     af8:	0f 93       	push	r16
     afa:	1f 93       	push	r17
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
	//Read the MPU-6050
	if(eeprom_data[31] == 1){
     b00:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <eeprom_data+0x1f>
     b04:	81 30       	cpi	r24, 0x01	; 1
     b06:	09 f0       	breq	.+2      	; 0xb0a <_Z13gyro_signalenv+0x1c>
     b08:	a0 c0       	rjmp	.+320    	; 0xc4a <_Z13gyro_signalenv+0x15c>
		Wire.beginTransmission(gyro_address);                        //Start communication with the gyro.
     b0a:	60 91 d2 03 	lds	r22, 0x03D2	; 0x8003d2 <gyro_address>
     b0e:	70 91 d3 03 	lds	r23, 0x03D3	; 0x8003d3 <gyro_address+0x1>
     b12:	88 ec       	ldi	r24, 0xC8	; 200
     b14:	94 e0       	ldi	r25, 0x04	; 4
     b16:	0e 94 12 16 	call	0x2c24	; 0x2c24 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x3B);                                            //Start reading @ register 43h and auto increment with every read.
     b1a:	6b e3       	ldi	r22, 0x3B	; 59
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	88 ec       	ldi	r24, 0xC8	; 200
     b20:	94 e0       	ldi	r25, 0x04	; 4
     b22:	0e 94 23 01 	call	0x246	; 0x246 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission.
     b26:	88 ec       	ldi	r24, 0xC8	; 200
     b28:	94 e0       	ldi	r25, 0x04	; 4
     b2a:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN7TwoWire15endTransmissionEv>
		Wire.requestFrom(gyro_address,14);                           //Request 14 bytes from the gyro.
     b2e:	60 91 d2 03 	lds	r22, 0x03D2	; 0x8003d2 <gyro_address>
     b32:	70 91 d3 03 	lds	r23, 0x03D3	; 0x8003d3 <gyro_address+0x1>
     b36:	4e e0       	ldi	r20, 0x0E	; 14
     b38:	50 e0       	ldi	r21, 0x00	; 0
     b3a:	88 ec       	ldi	r24, 0xC8	; 200
     b3c:	94 e0       	ldi	r25, 0x04	; 4
     b3e:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <_ZN7TwoWire11requestFromEii>
		while(Wire.available() < 14);                                //Wait until the 14 bytes are received.
     b42:	88 ec       	ldi	r24, 0xC8	; 200
     b44:	94 e0       	ldi	r25, 0x04	; 4
     b46:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <_ZN7TwoWire9availableEv>
     b4a:	0e 97       	sbiw	r24, 0x0e	; 14
     b4c:	d4 f3       	brlt	.-12     	; 0xb42 <_Z13gyro_signalenv+0x54>
		acc_axis[1] = Wire.read()<<8|Wire.read();                    //Add the low and high byte to the acc_x variable.
     b4e:	88 ec       	ldi	r24, 0xC8	; 200
     b50:	94 e0       	ldi	r25, 0x04	; 4
     b52:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN7TwoWire4readEv>
     b56:	c8 2f       	mov	r28, r24
     b58:	88 ec       	ldi	r24, 0xC8	; 200
     b5a:	94 e0       	ldi	r25, 0x04	; 4
     b5c:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN7TwoWire4readEv>
     b60:	20 e0       	ldi	r18, 0x00	; 0
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	3c 2f       	mov	r19, r28
     b66:	82 2b       	or	r24, r18
     b68:	93 2b       	or	r25, r19
     b6a:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <acc_axis+0x3>
     b6e:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <acc_axis+0x2>
		acc_axis[2] = Wire.read()<<8|Wire.read();                    //Add the low and high byte to the acc_y variable.
     b72:	88 ec       	ldi	r24, 0xC8	; 200
     b74:	94 e0       	ldi	r25, 0x04	; 4
     b76:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN7TwoWire4readEv>
     b7a:	c8 2f       	mov	r28, r24
     b7c:	88 ec       	ldi	r24, 0xC8	; 200
     b7e:	94 e0       	ldi	r25, 0x04	; 4
     b80:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN7TwoWire4readEv>
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	3c 2f       	mov	r19, r28
     b8a:	82 2b       	or	r24, r18
     b8c:	93 2b       	or	r25, r19
     b8e:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <acc_axis+0x5>
     b92:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <acc_axis+0x4>
		acc_axis[3] = Wire.read()<<8|Wire.read();                    //Add the low and high byte to the acc_z variable.
     b96:	88 ec       	ldi	r24, 0xC8	; 200
     b98:	94 e0       	ldi	r25, 0x04	; 4
     b9a:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN7TwoWire4readEv>
     b9e:	c8 2f       	mov	r28, r24
     ba0:	88 ec       	ldi	r24, 0xC8	; 200
     ba2:	94 e0       	ldi	r25, 0x04	; 4
     ba4:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN7TwoWire4readEv>
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	3c 2f       	mov	r19, r28
     bae:	82 2b       	or	r24, r18
     bb0:	93 2b       	or	r25, r19
     bb2:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <acc_axis+0x7>
     bb6:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <acc_axis+0x6>
		temperature = Wire.read()<<8|Wire.read();                    //Add the low and high byte to the temperature variable.
     bba:	88 ec       	ldi	r24, 0xC8	; 200
     bbc:	94 e0       	ldi	r25, 0x04	; 4
     bbe:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN7TwoWire4readEv>
     bc2:	c8 2f       	mov	r28, r24
     bc4:	88 ec       	ldi	r24, 0xC8	; 200
     bc6:	94 e0       	ldi	r25, 0x04	; 4
     bc8:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN7TwoWire4readEv>
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	3c 2f       	mov	r19, r28
     bd2:	82 2b       	or	r24, r18
     bd4:	93 2b       	or	r25, r19
     bd6:	90 93 cf 03 	sts	0x03CF, r25	; 0x8003cf <temperature+0x1>
     bda:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <temperature>
		gyro_axis[1] = Wire.read()<<8|Wire.read();                   //Read high and low part of the angular data.
     bde:	88 ec       	ldi	r24, 0xC8	; 200
     be0:	94 e0       	ldi	r25, 0x04	; 4
     be2:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN7TwoWire4readEv>
     be6:	c8 2f       	mov	r28, r24
     be8:	88 ec       	ldi	r24, 0xC8	; 200
     bea:	94 e0       	ldi	r25, 0x04	; 4
     bec:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN7TwoWire4readEv>
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	3c 2f       	mov	r19, r28
     bf6:	82 2b       	or	r24, r18
     bf8:	93 2b       	or	r25, r19
     bfa:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <gyro_axis+0x3>
     bfe:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <gyro_axis+0x2>
		gyro_axis[2] = Wire.read()<<8|Wire.read();                   //Read high and low part of the angular data.
     c02:	88 ec       	ldi	r24, 0xC8	; 200
     c04:	94 e0       	ldi	r25, 0x04	; 4
     c06:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN7TwoWire4readEv>
     c0a:	c8 2f       	mov	r28, r24
     c0c:	88 ec       	ldi	r24, 0xC8	; 200
     c0e:	94 e0       	ldi	r25, 0x04	; 4
     c10:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN7TwoWire4readEv>
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	3c 2f       	mov	r19, r28
     c1a:	82 2b       	or	r24, r18
     c1c:	93 2b       	or	r25, r19
     c1e:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <gyro_axis+0x5>
     c22:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <gyro_axis+0x4>
		gyro_axis[3] = Wire.read()<<8|Wire.read();                   //Read high and low part of the angular data.
     c26:	88 ec       	ldi	r24, 0xC8	; 200
     c28:	94 e0       	ldi	r25, 0x04	; 4
     c2a:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN7TwoWire4readEv>
     c2e:	c8 2f       	mov	r28, r24
     c30:	88 ec       	ldi	r24, 0xC8	; 200
     c32:	94 e0       	ldi	r25, 0x04	; 4
     c34:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN7TwoWire4readEv>
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	3c 2f       	mov	r19, r28
     c3e:	82 2b       	or	r24, r18
     c40:	93 2b       	or	r25, r19
     c42:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <gyro_axis+0x7>
     c46:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <gyro_axis+0x6>
	}

	if(cal_int == 2000){
     c4a:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <cal_int>
     c4e:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <cal_int+0x1>
     c52:	80 3d       	cpi	r24, 0xD0	; 208
     c54:	97 40       	sbci	r25, 0x07	; 7
     c56:	09 f0       	breq	.+2      	; 0xc5a <_Z13gyro_signalenv+0x16c>
     c58:	4e c0       	rjmp	.+156    	; 0xcf6 <_Z13gyro_signalenv+0x208>
		gyro_axis[1] -= gyro_axis_cal[1];                            //Only compensate after the calibration.
     c5a:	60 91 1e 03 	lds	r22, 0x031E	; 0x80031e <gyro_axis+0x2>
     c5e:	70 91 1f 03 	lds	r23, 0x031F	; 0x80031f <gyro_axis+0x3>
     c62:	07 2e       	mov	r0, r23
     c64:	00 0c       	add	r0, r0
     c66:	88 0b       	sbc	r24, r24
     c68:	99 0b       	sbc	r25, r25
     c6a:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__floatsisf>
     c6e:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <__data_end+0x4>
     c72:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <__data_end+0x5>
     c76:	40 91 f0 02 	lds	r20, 0x02F0	; 0x8002f0 <__data_end+0x6>
     c7a:	50 91 f1 02 	lds	r21, 0x02F1	; 0x8002f1 <__data_end+0x7>
     c7e:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__subsf3>
     c82:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__fixsfsi>
     c86:	70 93 1f 03 	sts	0x031F, r23	; 0x80031f <gyro_axis+0x3>
     c8a:	60 93 1e 03 	sts	0x031E, r22	; 0x80031e <gyro_axis+0x2>
		gyro_axis[2] -= gyro_axis_cal[2];                            //Only compensate after the calibration.
     c8e:	60 91 20 03 	lds	r22, 0x0320	; 0x800320 <gyro_axis+0x4>
     c92:	70 91 21 03 	lds	r23, 0x0321	; 0x800321 <gyro_axis+0x5>
     c96:	07 2e       	mov	r0, r23
     c98:	00 0c       	add	r0, r0
     c9a:	88 0b       	sbc	r24, r24
     c9c:	99 0b       	sbc	r25, r25
     c9e:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__floatsisf>
     ca2:	20 91 f2 02 	lds	r18, 0x02F2	; 0x8002f2 <__data_end+0x8>
     ca6:	30 91 f3 02 	lds	r19, 0x02F3	; 0x8002f3 <__data_end+0x9>
     caa:	40 91 f4 02 	lds	r20, 0x02F4	; 0x8002f4 <__data_end+0xa>
     cae:	50 91 f5 02 	lds	r21, 0x02F5	; 0x8002f5 <__data_end+0xb>
     cb2:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__subsf3>
     cb6:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__fixsfsi>
     cba:	70 93 21 03 	sts	0x0321, r23	; 0x800321 <gyro_axis+0x5>
     cbe:	60 93 20 03 	sts	0x0320, r22	; 0x800320 <gyro_axis+0x4>
		gyro_axis[3] -= gyro_axis_cal[3];                            //Only compensate after the calibration.
     cc2:	60 91 22 03 	lds	r22, 0x0322	; 0x800322 <gyro_axis+0x6>
     cc6:	70 91 23 03 	lds	r23, 0x0323	; 0x800323 <gyro_axis+0x7>
     cca:	07 2e       	mov	r0, r23
     ccc:	00 0c       	add	r0, r0
     cce:	88 0b       	sbc	r24, r24
     cd0:	99 0b       	sbc	r25, r25
     cd2:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__floatsisf>
     cd6:	20 91 f6 02 	lds	r18, 0x02F6	; 0x8002f6 <__data_end+0xc>
     cda:	30 91 f7 02 	lds	r19, 0x02F7	; 0x8002f7 <__data_end+0xd>
     cde:	40 91 f8 02 	lds	r20, 0x02F8	; 0x8002f8 <__data_end+0xe>
     ce2:	50 91 f9 02 	lds	r21, 0x02F9	; 0x8002f9 <__data_end+0xf>
     ce6:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__subsf3>
     cea:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__fixsfsi>
     cee:	70 93 23 03 	sts	0x0323, r23	; 0x800323 <gyro_axis+0x7>
     cf2:	60 93 22 03 	sts	0x0322, r22	; 0x800322 <gyro_axis+0x6>
	}
	gyro_roll = gyro_axis[eeprom_data[28] & 0b00000011];           //Set gyro_roll to the correct axis that was stored in the EEPROM.
     cf6:	c0 90 1c 04 	lds	r12, 0x041C	; 0x80041c <eeprom_data+0x1c>
     cfa:	0c 2d       	mov	r16, r12
     cfc:	03 70       	andi	r16, 0x03	; 3
     cfe:	10 e0       	ldi	r17, 0x00	; 0
     d00:	00 0f       	add	r16, r16
     d02:	11 1f       	adc	r17, r17
     d04:	f8 01       	movw	r30, r16
     d06:	e4 5e       	subi	r30, 0xE4	; 228
     d08:	fc 4f       	sbci	r31, 0xFC	; 252
     d0a:	60 81       	ld	r22, Z
     d0c:	71 81       	ldd	r23, Z+1	; 0x01
     d0e:	07 2e       	mov	r0, r23
     d10:	00 0c       	add	r0, r0
     d12:	88 0b       	sbc	r24, r24
     d14:	99 0b       	sbc	r25, r25
     d16:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__floatsisf>
	if(eeprom_data[28] & 0b10000000)gyro_roll *= -1;               //Invert gyro_roll if the MSB of EEPROM bit 28 is set.
     d1a:	c7 fc       	sbrc	r12, 7
     d1c:	09 c0       	rjmp	.+18     	; 0xd30 <_Z13gyro_signalenv+0x242>
	if(cal_int == 2000){
		gyro_axis[1] -= gyro_axis_cal[1];                            //Only compensate after the calibration.
		gyro_axis[2] -= gyro_axis_cal[2];                            //Only compensate after the calibration.
		gyro_axis[3] -= gyro_axis_cal[3];                            //Only compensate after the calibration.
	}
	gyro_roll = gyro_axis[eeprom_data[28] & 0b00000011];           //Set gyro_roll to the correct axis that was stored in the EEPROM.
     d1e:	60 93 14 03 	sts	0x0314, r22	; 0x800314 <gyro_roll>
     d22:	70 93 15 03 	sts	0x0315, r23	; 0x800315 <gyro_roll+0x1>
     d26:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <gyro_roll+0x2>
     d2a:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <gyro_roll+0x3>
     d2e:	0b c0       	rjmp	.+22     	; 0xd46 <_Z13gyro_signalenv+0x258>
	if(eeprom_data[28] & 0b10000000)gyro_roll *= -1;               //Invert gyro_roll if the MSB of EEPROM bit 28 is set.
     d30:	dc 01       	movw	r26, r24
     d32:	cb 01       	movw	r24, r22
     d34:	b0 58       	subi	r27, 0x80	; 128
     d36:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <gyro_roll>
     d3a:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <gyro_roll+0x1>
     d3e:	a0 93 16 03 	sts	0x0316, r26	; 0x800316 <gyro_roll+0x2>
     d42:	b0 93 17 03 	sts	0x0317, r27	; 0x800317 <gyro_roll+0x3>
	gyro_pitch = gyro_axis[eeprom_data[29] & 0b00000011];          //Set gyro_pitch to the correct axis that was stored in the EEPROM.
     d46:	b0 90 1d 04 	lds	r11, 0x041D	; 0x80041d <eeprom_data+0x1d>
     d4a:	8b 2d       	mov	r24, r11
     d4c:	83 70       	andi	r24, 0x03	; 3
     d4e:	e8 2e       	mov	r14, r24
     d50:	f1 2c       	mov	r15, r1
     d52:	ee 0c       	add	r14, r14
     d54:	ff 1c       	adc	r15, r15
     d56:	f7 01       	movw	r30, r14
     d58:	e4 5e       	subi	r30, 0xE4	; 228
     d5a:	fc 4f       	sbci	r31, 0xFC	; 252
     d5c:	60 81       	ld	r22, Z
     d5e:	71 81       	ldd	r23, Z+1	; 0x01
     d60:	07 2e       	mov	r0, r23
     d62:	00 0c       	add	r0, r0
     d64:	88 0b       	sbc	r24, r24
     d66:	99 0b       	sbc	r25, r25
     d68:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__floatsisf>
	if(eeprom_data[29] & 0b10000000)gyro_pitch *= -1;              //Invert gyro_pitch if the MSB of EEPROM bit 29 is set.
     d6c:	b7 fc       	sbrc	r11, 7
     d6e:	09 c0       	rjmp	.+18     	; 0xd82 <_Z13gyro_signalenv+0x294>
		gyro_axis[2] -= gyro_axis_cal[2];                            //Only compensate after the calibration.
		gyro_axis[3] -= gyro_axis_cal[3];                            //Only compensate after the calibration.
	}
	gyro_roll = gyro_axis[eeprom_data[28] & 0b00000011];           //Set gyro_roll to the correct axis that was stored in the EEPROM.
	if(eeprom_data[28] & 0b10000000)gyro_roll *= -1;               //Invert gyro_roll if the MSB of EEPROM bit 28 is set.
	gyro_pitch = gyro_axis[eeprom_data[29] & 0b00000011];          //Set gyro_pitch to the correct axis that was stored in the EEPROM.
     d70:	60 93 18 03 	sts	0x0318, r22	; 0x800318 <gyro_pitch>
     d74:	70 93 19 03 	sts	0x0319, r23	; 0x800319 <gyro_pitch+0x1>
     d78:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <gyro_pitch+0x2>
     d7c:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <gyro_pitch+0x3>
     d80:	0b c0       	rjmp	.+22     	; 0xd98 <_Z13gyro_signalenv+0x2aa>
	if(eeprom_data[29] & 0b10000000)gyro_pitch *= -1;              //Invert gyro_pitch if the MSB of EEPROM bit 29 is set.
     d82:	dc 01       	movw	r26, r24
     d84:	cb 01       	movw	r24, r22
     d86:	b0 58       	subi	r27, 0x80	; 128
     d88:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <gyro_pitch>
     d8c:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <gyro_pitch+0x1>
     d90:	a0 93 1a 03 	sts	0x031A, r26	; 0x80031a <gyro_pitch+0x2>
     d94:	b0 93 1b 03 	sts	0x031B, r27	; 0x80031b <gyro_pitch+0x3>
	gyro_yaw = gyro_axis[eeprom_data[30] & 0b00000011];            //Set gyro_yaw to the correct axis that was stored in the EEPROM.
     d98:	d0 90 1e 04 	lds	r13, 0x041E	; 0x80041e <eeprom_data+0x1e>
     d9c:	cd 2d       	mov	r28, r13
     d9e:	c3 70       	andi	r28, 0x03	; 3
     da0:	d0 e0       	ldi	r29, 0x00	; 0
     da2:	cc 0f       	add	r28, r28
     da4:	dd 1f       	adc	r29, r29
     da6:	fe 01       	movw	r30, r28
     da8:	e4 5e       	subi	r30, 0xE4	; 228
     daa:	fc 4f       	sbci	r31, 0xFC	; 252
     dac:	60 81       	ld	r22, Z
     dae:	71 81       	ldd	r23, Z+1	; 0x01
     db0:	07 2e       	mov	r0, r23
     db2:	00 0c       	add	r0, r0
     db4:	88 0b       	sbc	r24, r24
     db6:	99 0b       	sbc	r25, r25
     db8:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__floatsisf>
	if(eeprom_data[30] & 0b10000000)gyro_yaw *= -1;                //Invert gyro_yaw if the MSB of EEPROM bit 30 is set.
     dbc:	d7 fc       	sbrc	r13, 7
     dbe:	09 c0       	rjmp	.+18     	; 0xdd2 <_Z13gyro_signalenv+0x2e4>
	}
	gyro_roll = gyro_axis[eeprom_data[28] & 0b00000011];           //Set gyro_roll to the correct axis that was stored in the EEPROM.
	if(eeprom_data[28] & 0b10000000)gyro_roll *= -1;               //Invert gyro_roll if the MSB of EEPROM bit 28 is set.
	gyro_pitch = gyro_axis[eeprom_data[29] & 0b00000011];          //Set gyro_pitch to the correct axis that was stored in the EEPROM.
	if(eeprom_data[29] & 0b10000000)gyro_pitch *= -1;              //Invert gyro_pitch if the MSB of EEPROM bit 29 is set.
	gyro_yaw = gyro_axis[eeprom_data[30] & 0b00000011];            //Set gyro_yaw to the correct axis that was stored in the EEPROM.
     dc0:	60 93 10 03 	sts	0x0310, r22	; 0x800310 <gyro_yaw>
     dc4:	70 93 11 03 	sts	0x0311, r23	; 0x800311 <gyro_yaw+0x1>
     dc8:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <gyro_yaw+0x2>
     dcc:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <gyro_yaw+0x3>
     dd0:	0b c0       	rjmp	.+22     	; 0xde8 <_Z13gyro_signalenv+0x2fa>
	if(eeprom_data[30] & 0b10000000)gyro_yaw *= -1;                //Invert gyro_yaw if the MSB of EEPROM bit 30 is set.
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	b0 58       	subi	r27, 0x80	; 128
     dd8:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <gyro_yaw>
     ddc:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <gyro_yaw+0x1>
     de0:	a0 93 12 03 	sts	0x0312, r26	; 0x800312 <gyro_yaw+0x2>
     de4:	b0 93 13 03 	sts	0x0313, r27	; 0x800313 <gyro_yaw+0x3>

	acc_x = acc_axis[eeprom_data[29] & 0b00000011];                //Set acc_x to the correct axis that was stored in the EEPROM.
     de8:	f7 01       	movw	r30, r14
     dea:	ec 5d       	subi	r30, 0xDC	; 220
     dec:	fc 4f       	sbci	r31, 0xFC	; 252
     dee:	80 81       	ld	r24, Z
     df0:	91 81       	ldd	r25, Z+1	; 0x01
     df2:	09 2e       	mov	r0, r25
     df4:	00 0c       	add	r0, r0
     df6:	aa 0b       	sbc	r26, r26
     df8:	bb 0b       	sbc	r27, r27
	if(eeprom_data[29] & 0b10000000)acc_x *= -1;                   //Invert acc_x if the MSB of EEPROM bit 29 is set.
     dfa:	b7 fe       	sbrs	r11, 7
     dfc:	07 c0       	rjmp	.+14     	; 0xe0c <_Z13gyro_signalenv+0x31e>
     dfe:	b0 95       	com	r27
     e00:	a0 95       	com	r26
     e02:	90 95       	com	r25
     e04:	81 95       	neg	r24
     e06:	9f 4f       	sbci	r25, 0xFF	; 255
     e08:	af 4f       	sbci	r26, 0xFF	; 255
     e0a:	bf 4f       	sbci	r27, 0xFF	; 255
     e0c:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <acc_x>
     e10:	90 93 cb 03 	sts	0x03CB, r25	; 0x8003cb <acc_x+0x1>
     e14:	a0 93 cc 03 	sts	0x03CC, r26	; 0x8003cc <acc_x+0x2>
     e18:	b0 93 cd 03 	sts	0x03CD, r27	; 0x8003cd <acc_x+0x3>
	acc_y = acc_axis[eeprom_data[28] & 0b00000011];                //Set acc_y to the correct axis that was stored in the EEPROM.
     e1c:	f8 01       	movw	r30, r16
     e1e:	ec 5d       	subi	r30, 0xDC	; 220
     e20:	fc 4f       	sbci	r31, 0xFC	; 252
     e22:	80 81       	ld	r24, Z
     e24:	91 81       	ldd	r25, Z+1	; 0x01
     e26:	09 2e       	mov	r0, r25
     e28:	00 0c       	add	r0, r0
     e2a:	aa 0b       	sbc	r26, r26
     e2c:	bb 0b       	sbc	r27, r27
	if(eeprom_data[28] & 0b10000000)acc_y *= -1;                   //Invert acc_y if the MSB of EEPROM bit 28 is set.
     e2e:	c7 fe       	sbrs	r12, 7
     e30:	07 c0       	rjmp	.+14     	; 0xe40 <_Z13gyro_signalenv+0x352>
     e32:	b0 95       	com	r27
     e34:	a0 95       	com	r26
     e36:	90 95       	com	r25
     e38:	81 95       	neg	r24
     e3a:	9f 4f       	sbci	r25, 0xFF	; 255
     e3c:	af 4f       	sbci	r26, 0xFF	; 255
     e3e:	bf 4f       	sbci	r27, 0xFF	; 255
     e40:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <acc_y>
     e44:	90 93 c7 03 	sts	0x03C7, r25	; 0x8003c7 <acc_y+0x1>
     e48:	a0 93 c8 03 	sts	0x03C8, r26	; 0x8003c8 <acc_y+0x2>
     e4c:	b0 93 c9 03 	sts	0x03C9, r27	; 0x8003c9 <acc_y+0x3>
	acc_z = acc_axis[eeprom_data[30] & 0b00000011];                //Set acc_z to the correct axis that was stored in the EEPROM.
     e50:	cc 5d       	subi	r28, 0xDC	; 220
     e52:	dc 4f       	sbci	r29, 0xFC	; 252
     e54:	88 81       	ld	r24, Y
     e56:	99 81       	ldd	r25, Y+1	; 0x01
     e58:	09 2e       	mov	r0, r25
     e5a:	00 0c       	add	r0, r0
     e5c:	aa 0b       	sbc	r26, r26
     e5e:	bb 0b       	sbc	r27, r27
	if(eeprom_data[30] & 0b10000000)acc_z *= -1;                   //Invert acc_z if the MSB of EEPROM bit 30 is set.
     e60:	d7 fe       	sbrs	r13, 7
     e62:	07 c0       	rjmp	.+14     	; 0xe72 <_Z13gyro_signalenv+0x384>
     e64:	b0 95       	com	r27
     e66:	a0 95       	com	r26
     e68:	90 95       	com	r25
     e6a:	81 95       	neg	r24
     e6c:	9f 4f       	sbci	r25, 0xFF	; 255
     e6e:	af 4f       	sbci	r26, 0xFF	; 255
     e70:	bf 4f       	sbci	r27, 0xFF	; 255
     e72:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <acc_z>
     e76:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <acc_z+0x1>
     e7a:	a0 93 c4 03 	sts	0x03C4, r26	; 0x8003c4 <acc_z+0x2>
     e7e:	b0 93 c5 03 	sts	0x03C5, r27	; 0x8003c5 <acc_z+0x3>
}
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	1f 91       	pop	r17
     e88:	0f 91       	pop	r16
     e8a:	ff 90       	pop	r15
     e8c:	ef 90       	pop	r14
     e8e:	df 90       	pop	r13
     e90:	cf 90       	pop	r12
     e92:	bf 90       	pop	r11
     e94:	08 95       	ret

00000e96 <loop>:
	while(Serial.available())data = Serial.read();                                        //Empty the serial buffer.
	data = 0;                                                                             //Set the data variable back to zero.
}

//Main program loop
void loop(){
     e96:	4f 92       	push	r4
     e98:	5f 92       	push	r5
     e9a:	6f 92       	push	r6
     e9c:	7f 92       	push	r7
     e9e:	8f 92       	push	r8
     ea0:	9f 92       	push	r9
     ea2:	af 92       	push	r10
     ea4:	bf 92       	push	r11
     ea6:	cf 92       	push	r12
     ea8:	df 92       	push	r13
     eaa:	ef 92       	push	r14
     eac:	ff 92       	push	r15
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	2c 97       	sbiw	r28, 0x0c	; 12
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	cd bf       	out	0x3d, r28	; 61
	while(zero_timer + 4000 > micros());                                                  //Start the pulse after 4000 micro seconds.
     ec6:	c0 90 52 03 	lds	r12, 0x0352	; 0x800352 <zero_timer>
     eca:	d0 90 53 03 	lds	r13, 0x0353	; 0x800353 <zero_timer+0x1>
     ece:	e0 90 54 03 	lds	r14, 0x0354	; 0x800354 <zero_timer+0x2>
     ed2:	f0 90 55 03 	lds	r15, 0x0355	; 0x800355 <zero_timer+0x3>
     ed6:	20 ea       	ldi	r18, 0xA0	; 160
     ed8:	c2 0e       	add	r12, r18
     eda:	2f e0       	ldi	r18, 0x0F	; 15
     edc:	d2 1e       	adc	r13, r18
     ede:	e1 1c       	adc	r14, r1
     ee0:	f1 1c       	adc	r15, r1
     ee2:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <micros>
     ee6:	6c 15       	cp	r22, r12
     ee8:	7d 05       	cpc	r23, r13
     eea:	8e 05       	cpc	r24, r14
     eec:	9f 05       	cpc	r25, r15
     eee:	58 f3       	brcs	.-42     	; 0xec6 <loop+0x30>
	zero_timer = micros();                                                                //Reset the zero timer.
     ef0:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <micros>
     ef4:	60 93 52 03 	sts	0x0352, r22	; 0x800352 <zero_timer>
     ef8:	70 93 53 03 	sts	0x0353, r23	; 0x800353 <zero_timer+0x1>
     efc:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <zero_timer+0x2>
     f00:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <zero_timer+0x3>
	battery_voltage = (analogRead(0) + 65) * 1.2317;
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <analogRead>
     f0a:	8f 5b       	subi	r24, 0xBF	; 191
     f0c:	9f 4f       	sbci	r25, 0xFF	; 255
     f0e:	bc 01       	movw	r22, r24
     f10:	99 0f       	add	r25, r25
     f12:	88 0b       	sbc	r24, r24
     f14:	99 0b       	sbc	r25, r25
     f16:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__floatsisf>
     f1a:	28 e5       	ldi	r18, 0x58	; 88
     f1c:	38 ea       	ldi	r19, 0xA8	; 168
     f1e:	4d e9       	ldi	r20, 0x9D	; 157
     f20:	5f e3       	ldi	r21, 0x3F	; 63
     f22:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__mulsf3>
     f26:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__fixsfsi>
     f2a:	70 93 2d 03 	sts	0x032D, r23	; 0x80032d <battery_voltage+0x1>
     f2e:	60 93 2c 03 	sts	0x032C, r22	; 0x80032c <battery_voltage>
	if(Serial.available() > 0){
     f32:	8b e2       	ldi	r24, 0x2B	; 43
     f34:	94 e0       	ldi	r25, 0x04	; 4
     f36:	0e 94 62 11 	call	0x22c4	; 0x22c4 <_ZN14HardwareSerial9availableEv>
     f3a:	18 16       	cp	r1, r24
     f3c:	19 06       	cpc	r1, r25
     f3e:	0c f0       	brlt	.+2      	; 0xf42 <loop+0xac>
     f40:	96 c0       	rjmp	.+300    	; 0x106e <loop+0x1d8>
		data = Serial.read();                                                               //Read the incomming byte.
     f42:	8b e2       	ldi	r24, 0x2B	; 43
     f44:	94 e0       	ldi	r25, 0x04	; 4
     f46:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <_ZN14HardwareSerial4readEv>
     f4a:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <data>
		new_function_request = true;                                                        //Set the new request flag.
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <new_function_request>
		loop_counter = 0;                                                                   //Reset the loop_counter variable.
     f54:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <loop_counter+0x1>
     f58:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <loop_counter>
		cal_int = 0;                                                                        //Reset the cal_int variable to undo the calibration.
     f5c:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <cal_int+0x1>
     f60:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <cal_int>
		start = 0;      
     f64:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <start>
		first_angle = true;                                                                    //Set start to 0.
     f68:	90 93 fc 03 	sts	0x03FC, r25	; 0x8003fc <first_angle>
		
		//Confirm the choice on the serial monitor.
		if(data == 'r')Serial.println("Reading receiver signals.");
     f6c:	82 37       	cpi	r24, 0x72	; 114
     f6e:	31 f4       	brne	.+12     	; 0xf7c <loop+0xe6>
     f70:	6c e5       	ldi	r22, 0x5C	; 92
     f72:	71 e0       	ldi	r23, 0x01	; 1
     f74:	8b e2       	ldi	r24, 0x2B	; 43
     f76:	94 e0       	ldi	r25, 0x04	; 4
     f78:	0e 94 79 13 	call	0x26f2	; 0x26f2 <_ZN5Print7printlnEPKc>
		if(data == 'a')Serial.println("Print the quadcopter angles.");
     f7c:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <data>
     f80:	81 36       	cpi	r24, 0x61	; 97
     f82:	31 f4       	brne	.+12     	; 0xf90 <loop+0xfa>
     f84:	66 e7       	ldi	r22, 0x76	; 118
     f86:	71 e0       	ldi	r23, 0x01	; 1
     f88:	8b e2       	ldi	r24, 0x2B	; 43
     f8a:	94 e0       	ldi	r25, 0x04	; 4
     f8c:	0e 94 79 13 	call	0x26f2	; 0x26f2 <_ZN5Print7printlnEPKc>
		if(data == 'a')Serial.println("Gyro calibration starts in 2 seconds (don't move the quadcopter).");
     f90:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <data>
     f94:	81 36       	cpi	r24, 0x61	; 97
     f96:	31 f4       	brne	.+12     	; 0xfa4 <loop+0x10e>
     f98:	63 e9       	ldi	r22, 0x93	; 147
     f9a:	71 e0       	ldi	r23, 0x01	; 1
     f9c:	8b e2       	ldi	r24, 0x2B	; 43
     f9e:	94 e0       	ldi	r25, 0x04	; 4
     fa0:	0e 94 79 13 	call	0x26f2	; 0x26f2 <_ZN5Print7printlnEPKc>
		if(data == '1')Serial.println("Test motor 1 (right front CCW.)");
     fa4:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <data>
     fa8:	81 33       	cpi	r24, 0x31	; 49
     faa:	31 f4       	brne	.+12     	; 0xfb8 <loop+0x122>
     fac:	65 ed       	ldi	r22, 0xD5	; 213
     fae:	71 e0       	ldi	r23, 0x01	; 1
     fb0:	8b e2       	ldi	r24, 0x2B	; 43
     fb2:	94 e0       	ldi	r25, 0x04	; 4
     fb4:	0e 94 79 13 	call	0x26f2	; 0x26f2 <_ZN5Print7printlnEPKc>
		if(data == '2')Serial.println("Test motor 2 (right rear CW.)");
     fb8:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <data>
     fbc:	82 33       	cpi	r24, 0x32	; 50
     fbe:	31 f4       	brne	.+12     	; 0xfcc <loop+0x136>
     fc0:	65 ef       	ldi	r22, 0xF5	; 245
     fc2:	71 e0       	ldi	r23, 0x01	; 1
     fc4:	8b e2       	ldi	r24, 0x2B	; 43
     fc6:	94 e0       	ldi	r25, 0x04	; 4
     fc8:	0e 94 79 13 	call	0x26f2	; 0x26f2 <_ZN5Print7printlnEPKc>
		if(data == '3')Serial.println("Test motor 3 (left rear CCW.)");
     fcc:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <data>
     fd0:	83 33       	cpi	r24, 0x33	; 51
     fd2:	31 f4       	brne	.+12     	; 0xfe0 <loop+0x14a>
     fd4:	63 e1       	ldi	r22, 0x13	; 19
     fd6:	72 e0       	ldi	r23, 0x02	; 2
     fd8:	8b e2       	ldi	r24, 0x2B	; 43
     fda:	94 e0       	ldi	r25, 0x04	; 4
     fdc:	0e 94 79 13 	call	0x26f2	; 0x26f2 <_ZN5Print7printlnEPKc>
		if(data == '4')Serial.println("Test motor 4 (left front CW.)");
     fe0:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <data>
     fe4:	84 33       	cpi	r24, 0x34	; 52
     fe6:	31 f4       	brne	.+12     	; 0xff4 <loop+0x15e>
     fe8:	61 e3       	ldi	r22, 0x31	; 49
     fea:	72 e0       	ldi	r23, 0x02	; 2
     fec:	8b e2       	ldi	r24, 0x2B	; 43
     fee:	94 e0       	ldi	r25, 0x04	; 4
     ff0:	0e 94 79 13 	call	0x26f2	; 0x26f2 <_ZN5Print7printlnEPKc>
		if(data == '5')Serial.println("Test all motors together");
     ff4:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <data>
     ff8:	85 33       	cpi	r24, 0x35	; 53
     ffa:	31 f4       	brne	.+12     	; 0x1008 <loop+0x172>
     ffc:	6f e4       	ldi	r22, 0x4F	; 79
     ffe:	72 e0       	ldi	r23, 0x02	; 2
    1000:	8b e2       	ldi	r24, 0x2B	; 43
    1002:	94 e0       	ldi	r25, 0x04	; 4
    1004:	0e 94 79 13 	call	0x26f2	; 0x26f2 <_ZN5Print7printlnEPKc>

		//Let's create a small delay so the message stays visible for 2.5 seconds.
		//We don't want the ESC's to beep and have to send a 1000us pulse to the ESC's.
		for(vibration_counter = 0; vibration_counter < 625; vibration_counter++){           //Do this loop 625 times
    1008:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <vibration_counter+0x1>
    100c:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <vibration_counter>
			delay(3);                                                                         //Wait 3000us.
			esc_1 = 1000;                                                                     //Set the pulse for ESC 1 to 1000us.
    1010:	08 ee       	ldi	r16, 0xE8	; 232
    1012:	13 e0       	ldi	r17, 0x03	; 3
		if(data == '4')Serial.println("Test motor 4 (left front CW.)");
		if(data == '5')Serial.println("Test all motors together");

		//Let's create a small delay so the message stays visible for 2.5 seconds.
		//We don't want the ESC's to beep and have to send a 1000us pulse to the ESC's.
		for(vibration_counter = 0; vibration_counter < 625; vibration_counter++){           //Do this loop 625 times
    1014:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <vibration_counter>
    1018:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <vibration_counter+0x1>
    101c:	81 37       	cpi	r24, 0x71	; 113
    101e:	92 40       	sbci	r25, 0x02	; 2
    1020:	14 f5       	brge	.+68     	; 0x1066 <loop+0x1d0>
			delay(3);                                                                         //Wait 3000us.
    1022:	63 e0       	ldi	r22, 0x03	; 3
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 04 17 	call	0x2e08	; 0x2e08 <delay>
			esc_1 = 1000;                                                                     //Set the pulse for ESC 1 to 1000us.
    102e:	10 93 ed 03 	sts	0x03ED, r17	; 0x8003ed <esc_1+0x1>
    1032:	00 93 ec 03 	sts	0x03EC, r16	; 0x8003ec <esc_1>
			esc_2 = 1000;                                                                     //Set the pulse for ESC 1 to 1000us.
    1036:	10 93 eb 03 	sts	0x03EB, r17	; 0x8003eb <esc_2+0x1>
    103a:	00 93 ea 03 	sts	0x03EA, r16	; 0x8003ea <esc_2>
			esc_3 = 1000;                                                                     //Set the pulse for ESC 1 to 1000us.
    103e:	10 93 e9 03 	sts	0x03E9, r17	; 0x8003e9 <esc_3+0x1>
    1042:	00 93 e8 03 	sts	0x03E8, r16	; 0x8003e8 <esc_3>
			esc_4 = 1000;                                                                     //Set the pulse for ESC 1 to 1000us.
    1046:	10 93 e7 03 	sts	0x03E7, r17	; 0x8003e7 <esc_4+0x1>
    104a:	00 93 e6 03 	sts	0x03E6, r16	; 0x8003e6 <esc_4>
			esc_pulse_output();                                                               //Send the ESC control pulses.
    104e:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_Z16esc_pulse_outputv>
		if(data == '4')Serial.println("Test motor 4 (left front CW.)");
		if(data == '5')Serial.println("Test all motors together");

		//Let's create a small delay so the message stays visible for 2.5 seconds.
		//We don't want the ESC's to beep and have to send a 1000us pulse to the ESC's.
		for(vibration_counter = 0; vibration_counter < 625; vibration_counter++){           //Do this loop 625 times
    1052:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <vibration_counter>
    1056:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <vibration_counter+0x1>
    105a:	01 96       	adiw	r24, 0x01	; 1
    105c:	90 93 d1 03 	sts	0x03D1, r25	; 0x8003d1 <vibration_counter+0x1>
    1060:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <vibration_counter>
    1064:	d7 cf       	rjmp	.-82     	; 0x1014 <loop+0x17e>
			esc_2 = 1000;                                                                     //Set the pulse for ESC 1 to 1000us.
			esc_3 = 1000;                                                                     //Set the pulse for ESC 1 to 1000us.
			esc_4 = 1000;                                                                     //Set the pulse for ESC 1 to 1000us.
			esc_pulse_output();                                                               //Send the ESC control pulses.
		}
		vibration_counter = 0;                                                              //Reset the vibration_counter variable.
    1066:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <vibration_counter+0x1>
    106a:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <vibration_counter>
    106e:	83 e0       	ldi	r24, 0x03	; 3
    1070:	0e 94 ba 00 	call	0x174	; 0x174 <_Z24convert_receiver_channelh.part.1>
	}

	receiver_input_channel_3 = convert_receiver_channel(3);                               //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
    1074:	90 93 f7 03 	sts	0x03F7, r25	; 0x8003f7 <receiver_input_channel_3+0x1>
    1078:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <receiver_input_channel_3>
	if(receiver_input_channel_3 < 1025)new_function_request = false;                      //If the throttle is in the lowest position set the request flag to false.
    107c:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <receiver_input_channel_3>
    1080:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <receiver_input_channel_3+0x1>
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	94 40       	sbci	r25, 0x04	; 4
    1088:	14 f4       	brge	.+4      	; 0x108e <loop+0x1f8>
    108a:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <new_function_request>


	////////////////////////////////////////////////////////////////////////////////////////////
	//Run the ESC calibration program to start with.
	////////////////////////////////////////////////////////////////////////////////////////////
	if(data == 0 && new_function_request == false){                                       //Only start the calibration mode at first start.
    108e:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <data>
    1092:	81 11       	cpse	r24, r1
    1094:	2d c0       	rjmp	.+90     	; 0x10f0 <loop+0x25a>
    1096:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <new_function_request>
    109a:	81 11       	cpse	r24, r1
    109c:	29 c0       	rjmp	.+82     	; 0x10f0 <loop+0x25a>
    109e:	83 e0       	ldi	r24, 0x03	; 3
    10a0:	0e 94 ba 00 	call	0x174	; 0x174 <_Z24convert_receiver_channelh.part.1>
		receiver_input_channel_3 = convert_receiver_channel(3);                             //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
    10a4:	90 93 f7 03 	sts	0x03F7, r25	; 0x8003f7 <receiver_input_channel_3+0x1>
    10a8:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <receiver_input_channel_3>
		esc_1 = receiver_input_channel_3;                                                   //Set the pulse for motor 1 equal to the throttle channel.
    10ac:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <receiver_input_channel_3>
    10b0:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <receiver_input_channel_3+0x1>
    10b4:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <esc_1+0x1>
    10b8:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <esc_1>
		esc_2 = receiver_input_channel_3;                                                   //Set the pulse for motor 2 equal to the throttle channel.
    10bc:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <receiver_input_channel_3>
    10c0:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <receiver_input_channel_3+0x1>
    10c4:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <esc_2+0x1>
    10c8:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <esc_2>
		esc_3 = receiver_input_channel_3;                                                   //Set the pulse for motor 3 equal to the throttle channel.
    10cc:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <receiver_input_channel_3>
    10d0:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <receiver_input_channel_3+0x1>
    10d4:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <esc_3+0x1>
    10d8:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <esc_3>
		esc_4 = receiver_input_channel_3;                                                   //Set the pulse for motor 4 equal to the throttle channel.
    10dc:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <receiver_input_channel_3>
    10e0:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <receiver_input_channel_3+0x1>
    10e4:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <esc_4+0x1>
    10e8:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <esc_4>
		esc_pulse_output();                                                                 //Send the ESC control pulses.
    10ec:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_Z16esc_pulse_outputv>
	}

	////////////////////////////////////////////////////////////////////////////////////////////
	//When user sends a 'r' print the receiver signals.
	////////////////////////////////////////////////////////////////////////////////////////////
	if(data == 'r'){
    10f0:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <data>
    10f4:	82 37       	cpi	r24, 0x72	; 114
    10f6:	09 f0       	breq	.+2      	; 0x10fa <loop+0x264>
    10f8:	9c c0       	rjmp	.+312    	; 0x1232 <loop+0x39c>
		loop_counter ++;                                                                    //Increase the loop_counter variable.
    10fa:	e0 90 d4 03 	lds	r14, 0x03D4	; 0x8003d4 <loop_counter>
    10fe:	f0 90 d5 03 	lds	r15, 0x03D5	; 0x8003d5 <loop_counter+0x1>
    1102:	8f ef       	ldi	r24, 0xFF	; 255
    1104:	e8 1a       	sub	r14, r24
    1106:	f8 0a       	sbc	r15, r24
    1108:	f0 92 d5 03 	sts	0x03D5, r15	; 0x8003d5 <loop_counter+0x1>
    110c:	e0 92 d4 03 	sts	0x03D4, r14	; 0x8003d4 <loop_counter>
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	0e 94 ba 00 	call	0x174	; 0x174 <_Z24convert_receiver_channelh.part.1>
		receiver_input_channel_1 = convert_receiver_channel(1);                           //Convert the actual receiver signals for pitch to the standard 1000 - 2000us.
    1116:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <receiver_input_channel_1+0x1>
    111a:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <receiver_input_channel_1>
    111e:	82 e0       	ldi	r24, 0x02	; 2
    1120:	0e 94 ba 00 	call	0x174	; 0x174 <_Z24convert_receiver_channelh.part.1>
		receiver_input_channel_2 = convert_receiver_channel(2);                           //Convert the actual receiver signals for roll to the standard 1000 - 2000us.
    1124:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <receiver_input_channel_2+0x1>
    1128:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <receiver_input_channel_2>
    112c:	83 e0       	ldi	r24, 0x03	; 3
    112e:	0e 94 ba 00 	call	0x174	; 0x174 <_Z24convert_receiver_channelh.part.1>
		receiver_input_channel_3 = convert_receiver_channel(3);                           //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
    1132:	90 93 f7 03 	sts	0x03F7, r25	; 0x8003f7 <receiver_input_channel_3+0x1>
    1136:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <receiver_input_channel_3>
    113a:	84 e0       	ldi	r24, 0x04	; 4
    113c:	0e 94 ba 00 	call	0x174	; 0x174 <_Z24convert_receiver_channelh.part.1>
		receiver_input_channel_4 = convert_receiver_channel(4);                           //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
    1140:	90 93 f5 03 	sts	0x03F5, r25	; 0x8003f5 <receiver_input_channel_4+0x1>
    1144:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <receiver_input_channel_4>
	byte channel, reverse;                                                       //First we declare some local variables
	int low, center, high, actual;
	int difference;
	
	if (function > 4) {
		return (receiver_input[function] -3000) * -1;
    1148:	88 eb       	ldi	r24, 0xB8	; 184
    114a:	9b e0       	ldi	r25, 0x0B	; 11
    114c:	20 91 e0 03 	lds	r18, 0x03E0	; 0x8003e0 <receiver_input+0xa>
    1150:	30 91 e1 03 	lds	r19, 0x03E1	; 0x8003e1 <receiver_input+0xb>
    1154:	dc 01       	movw	r26, r24
    1156:	a2 1b       	sub	r26, r18
    1158:	b3 0b       	sbc	r27, r19
		loop_counter ++;                                                                    //Increase the loop_counter variable.
		receiver_input_channel_1 = convert_receiver_channel(1);                           //Convert the actual receiver signals for pitch to the standard 1000 - 2000us.
		receiver_input_channel_2 = convert_receiver_channel(2);                           //Convert the actual receiver signals for roll to the standard 1000 - 2000us.
		receiver_input_channel_3 = convert_receiver_channel(3);                           //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
		receiver_input_channel_4 = convert_receiver_channel(4);                           //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
		receiver_input_channel_5 = convert_receiver_channel(5);                           //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
    115a:	b0 93 f3 03 	sts	0x03F3, r27	; 0x8003f3 <receiver_input_channel_5+0x1>
    115e:	a0 93 f2 03 	sts	0x03F2, r26	; 0x8003f2 <receiver_input_channel_5>
	byte channel, reverse;                                                       //First we declare some local variables
	int low, center, high, actual;
	int difference;
	
	if (function > 4) {
		return (receiver_input[function] -3000) * -1;
    1162:	20 91 e2 03 	lds	r18, 0x03E2	; 0x8003e2 <receiver_input+0xc>
    1166:	30 91 e3 03 	lds	r19, 0x03E3	; 0x8003e3 <receiver_input+0xd>
    116a:	fc 01       	movw	r30, r24
    116c:	e2 1b       	sub	r30, r18
    116e:	f3 0b       	sbc	r31, r19
		receiver_input_channel_1 = convert_receiver_channel(1);                           //Convert the actual receiver signals for pitch to the standard 1000 - 2000us.
		receiver_input_channel_2 = convert_receiver_channel(2);                           //Convert the actual receiver signals for roll to the standard 1000 - 2000us.
		receiver_input_channel_3 = convert_receiver_channel(3);                           //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
		receiver_input_channel_4 = convert_receiver_channel(4);                           //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
		receiver_input_channel_5 = convert_receiver_channel(5);                           //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
		receiver_input_channel_6 = convert_receiver_channel(6);                           //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
    1170:	f0 93 f1 03 	sts	0x03F1, r31	; 0x8003f1 <receiver_input_channel_6+0x1>
    1174:	e0 93 f0 03 	sts	0x03F0, r30	; 0x8003f0 <receiver_input_channel_6>
	byte channel, reverse;                                                       //First we declare some local variables
	int low, center, high, actual;
	int difference;
	
	if (function > 4) {
		return (receiver_input[function] -3000) * -1;
    1178:	20 91 e4 03 	lds	r18, 0x03E4	; 0x8003e4 <receiver_input+0xe>
    117c:	30 91 e5 03 	lds	r19, 0x03E5	; 0x8003e5 <receiver_input+0xf>
    1180:	82 1b       	sub	r24, r18
    1182:	93 0b       	sbc	r25, r19
		receiver_input_channel_2 = convert_receiver_channel(2);                           //Convert the actual receiver signals for roll to the standard 1000 - 2000us.
		receiver_input_channel_3 = convert_receiver_channel(3);                           //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
		receiver_input_channel_4 = convert_receiver_channel(4);                           //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
		receiver_input_channel_5 = convert_receiver_channel(5);                           //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
		receiver_input_channel_6 = convert_receiver_channel(6);                           //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
		receiver_input_channel_7 = convert_receiver_channel(7);                           //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
    1184:	90 93 ef 03 	sts	0x03EF, r25	; 0x8003ef <receiver_input_channel_7+0x1>
    1188:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <receiver_input_channel_7>

		if(loop_counter == 125){                                                            //Print the receiver values when the loop_counter variable equals 250.
    118c:	fd e7       	ldi	r31, 0x7D	; 125
    118e:	ef 16       	cp	r14, r31
    1190:	f1 04       	cpc	r15, r1
    1192:	31 f4       	brne	.+12     	; 0x11a0 <loop+0x30a>
			print_signals();                                                                  //Print the receiver values on the serial monitor.
    1194:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z13print_signalsv>
			loop_counter = 0;                                                                 //Reset the loop_counter variable.
    1198:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <loop_counter+0x1>
    119c:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <loop_counter>
		}

		//For starting the motors: throttle low and yaw left (step 1).
		if(receiver_input_channel_3 < 1050 && receiver_input_channel_4 < 1050)start = 1;
    11a0:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <receiver_input_channel_3>
    11a4:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <receiver_input_channel_3+0x1>
    11a8:	8a 31       	cpi	r24, 0x1A	; 26
    11aa:	94 40       	sbci	r25, 0x04	; 4
    11ac:	44 f4       	brge	.+16     	; 0x11be <loop+0x328>
    11ae:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <receiver_input_channel_4>
    11b2:	90 91 f5 03 	lds	r25, 0x03F5	; 0x8003f5 <receiver_input_channel_4+0x1>
    11b6:	8a 31       	cpi	r24, 0x1A	; 26
    11b8:	94 40       	sbci	r25, 0x04	; 4
    11ba:	0c f4       	brge	.+2      	; 0x11be <loop+0x328>
    11bc:	39 c5       	rjmp	.+2674   	; 0x1c30 <loop+0xd9a>
		//When yaw stick is back in the center position start the motors (step 2).
		if(start == 1 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1450)start = 2;
    11be:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <start>
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	79 f4       	brne	.+30     	; 0x11e4 <loop+0x34e>
    11c6:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <receiver_input_channel_3>
    11ca:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <receiver_input_channel_3+0x1>
    11ce:	8a 31       	cpi	r24, 0x1A	; 26
    11d0:	94 40       	sbci	r25, 0x04	; 4
    11d2:	44 f4       	brge	.+16     	; 0x11e4 <loop+0x34e>
    11d4:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <receiver_input_channel_4>
    11d8:	90 91 f5 03 	lds	r25, 0x03F5	; 0x8003f5 <receiver_input_channel_4+0x1>
    11dc:	8b 3a       	cpi	r24, 0xAB	; 171
    11de:	95 40       	sbci	r25, 0x05	; 5
    11e0:	0c f0       	brlt	.+2      	; 0x11e4 <loop+0x34e>
    11e2:	2a c5       	rjmp	.+2644   	; 0x1c38 <loop+0xda2>
		//Stopping the motors: throttle low and yaw right.
		if(start == 2 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1950)start = 0;
    11e4:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <start>
    11e8:	82 30       	cpi	r24, 0x02	; 2
    11ea:	79 f4       	brne	.+30     	; 0x120a <loop+0x374>
    11ec:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <receiver_input_channel_3>
    11f0:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <receiver_input_channel_3+0x1>
    11f4:	8a 31       	cpi	r24, 0x1A	; 26
    11f6:	94 40       	sbci	r25, 0x04	; 4
    11f8:	44 f4       	brge	.+16     	; 0x120a <loop+0x374>
    11fa:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <receiver_input_channel_4>
    11fe:	90 91 f5 03 	lds	r25, 0x03F5	; 0x8003f5 <receiver_input_channel_4+0x1>
    1202:	8f 39       	cpi	r24, 0x9F	; 159
    1204:	97 40       	sbci	r25, 0x07	; 7
    1206:	0c f0       	brlt	.+2      	; 0x120a <loop+0x374>
    1208:	1b c5       	rjmp	.+2614   	; 0x1c40 <loop+0xdaa>

		esc_1 = 1000;                                                                       //Set the pulse for ESC 1 to 1000us.
    120a:	88 ee       	ldi	r24, 0xE8	; 232
    120c:	93 e0       	ldi	r25, 0x03	; 3
    120e:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <esc_1+0x1>
    1212:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <esc_1>
		esc_2 = 1000;                                                                       //Set the pulse for ESC 1 to 1000us.
    1216:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <esc_2+0x1>
    121a:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <esc_2>
		esc_3 = 1000;                                                                       //Set the pulse for ESC 1 to 1000us.
    121e:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <esc_3+0x1>
    1222:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <esc_3>
		esc_4 = 1000;                                                                       //Set the pulse for ESC 1 to 1000us.
    1226:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <esc_4+0x1>
    122a:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <esc_4>
		esc_pulse_output();                                                                 //Send the ESC control pulses.
    122e:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_Z16esc_pulse_outputv>
	}

	///////////////////////////////////////////////////////////////////////////////////////////
	//When user sends a '1, 2, 3, 4 or 5 test the motors.
	////////////////////////////////////////////////////////////////////////////////////////////
	if(data == '1' || data == '2' || data == '3' || data == '4' || data == '5'){          //If motor 1, 2, 3 or 4 is selected by the user.
    1232:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <data>
    1236:	81 53       	subi	r24, 0x31	; 49
    1238:	85 30       	cpi	r24, 0x05	; 5
    123a:	08 f0       	brcs	.+2      	; 0x123e <loop+0x3a8>
    123c:	e7 c1       	rjmp	.+974    	; 0x160c <loop+0x776>
		loop_counter ++;                                                                    //Add 1 to the loop_counter variable.
    123e:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <loop_counter>
    1242:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <loop_counter+0x1>
    1246:	01 96       	adiw	r24, 0x01	; 1
    1248:	90 93 d5 03 	sts	0x03D5, r25	; 0x8003d5 <loop_counter+0x1>
    124c:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <loop_counter>
		if(new_function_request == true && loop_counter == 250){                            //Wait for the throttle to be set to 0.
    1250:	20 91 fd 03 	lds	r18, 0x03FD	; 0x8003fd <new_function_request>
    1254:	22 23       	and	r18, r18
    1256:	b9 f0       	breq	.+46     	; 0x1286 <loop+0x3f0>
    1258:	8a 3f       	cpi	r24, 0xFA	; 250
    125a:	91 05       	cpc	r25, r1
    125c:	a1 f4       	brne	.+40     	; 0x1286 <loop+0x3f0>
			Serial.print("Set throttle to 1000 (low). It's now set to: ");                    //Print message on the serial monitor.
    125e:	68 e6       	ldi	r22, 0x68	; 104
    1260:	72 e0       	ldi	r23, 0x02	; 2
    1262:	8b e2       	ldi	r24, 0x2B	; 43
    1264:	94 e0       	ldi	r25, 0x04	; 4
    1266:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN5Print5printEPKc>
			Serial.println(receiver_input_channel_3);                                         //Print the actual throttle position.
    126a:	60 91 f6 03 	lds	r22, 0x03F6	; 0x8003f6 <receiver_input_channel_3>
    126e:	70 91 f7 03 	lds	r23, 0x03F7	; 0x8003f7 <receiver_input_channel_3+0x1>
    1272:	4a e0       	ldi	r20, 0x0A	; 10
    1274:	50 e0       	ldi	r21, 0x00	; 0
    1276:	8b e2       	ldi	r24, 0x2B	; 43
    1278:	94 e0       	ldi	r25, 0x04	; 4
    127a:	0e 94 30 14 	call	0x2860	; 0x2860 <_ZN5Print7printlnEii>
			loop_counter = 0;                                                                 //Reset the loop_counter variable.
    127e:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <loop_counter+0x1>
    1282:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <loop_counter>
		}
		if(new_function_request == false){                                                  //When the throttle was in the lowest position do this.
    1286:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <new_function_request>
    128a:	81 11       	cpse	r24, r1
    128c:	bf c1       	rjmp	.+894    	; 0x160c <loop+0x776>
    128e:	83 e0       	ldi	r24, 0x03	; 3
    1290:	0e 94 ba 00 	call	0x174	; 0x174 <_Z24convert_receiver_channelh.part.1>
			receiver_input_channel_3 = convert_receiver_channel(3);                           //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
    1294:	90 93 f7 03 	sts	0x03F7, r25	; 0x8003f7 <receiver_input_channel_3+0x1>
    1298:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <receiver_input_channel_3>
			if(data == '1' || data == '5')esc_1 = receiver_input_channel_3;                   //If motor 1 is requested set the pulse for motor 1 equal to the throttle channel.
    129c:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <data>
    12a0:	98 2f       	mov	r25, r24
    12a2:	9b 7f       	andi	r25, 0xFB	; 251
    12a4:	91 33       	cpi	r25, 0x31	; 49
    12a6:	a9 f4       	brne	.+42     	; 0x12d2 <loop+0x43c>
    12a8:	20 91 f6 03 	lds	r18, 0x03F6	; 0x8003f6 <receiver_input_channel_3>
    12ac:	30 91 f7 03 	lds	r19, 0x03F7	; 0x8003f7 <receiver_input_channel_3+0x1>
    12b0:	30 93 ed 03 	sts	0x03ED, r19	; 0x8003ed <esc_1+0x1>
    12b4:	20 93 ec 03 	sts	0x03EC, r18	; 0x8003ec <esc_1>
			else esc_1 = 1000;                                                                //If motor 1 is not requested set the pulse for the ESC to 1000us (off).
			if(data == '2' || data == '5')esc_2 = receiver_input_channel_3;                   //If motor 2 is requested set the pulse for motor 1 equal to the throttle channel.
    12b8:	82 33       	cpi	r24, 0x32	; 50
    12ba:	a1 f4       	brne	.+40     	; 0x12e4 <loop+0x44e>
    12bc:	20 91 f6 03 	lds	r18, 0x03F6	; 0x8003f6 <receiver_input_channel_3>
    12c0:	30 91 f7 03 	lds	r19, 0x03F7	; 0x8003f7 <receiver_input_channel_3+0x1>
    12c4:	30 93 eb 03 	sts	0x03EB, r19	; 0x8003eb <esc_2+0x1>
    12c8:	20 93 ea 03 	sts	0x03EA, r18	; 0x8003ea <esc_2>
			else esc_2 = 1000;                                                                //If motor 2 is not requested set the pulse for the ESC to 1000us (off).
			if(data == '3' || data == '5')esc_3 = receiver_input_channel_3;                   //If motor 3 is requested set the pulse for motor 1 equal to the throttle channel.
    12cc:	83 33       	cpi	r24, 0x33	; 51
    12ce:	c9 f4       	brne	.+50     	; 0x1302 <loop+0x46c>
    12d0:	13 c0       	rjmp	.+38     	; 0x12f8 <loop+0x462>
			loop_counter = 0;                                                                 //Reset the loop_counter variable.
		}
		if(new_function_request == false){                                                  //When the throttle was in the lowest position do this.
			receiver_input_channel_3 = convert_receiver_channel(3);                           //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
			if(data == '1' || data == '5')esc_1 = receiver_input_channel_3;                   //If motor 1 is requested set the pulse for motor 1 equal to the throttle channel.
			else esc_1 = 1000;                                                                //If motor 1 is not requested set the pulse for the ESC to 1000us (off).
    12d2:	28 ee       	ldi	r18, 0xE8	; 232
    12d4:	33 e0       	ldi	r19, 0x03	; 3
    12d6:	30 93 ed 03 	sts	0x03ED, r19	; 0x8003ed <esc_1+0x1>
    12da:	20 93 ec 03 	sts	0x03EC, r18	; 0x8003ec <esc_1>
			if(data == '2' || data == '5')esc_2 = receiver_input_channel_3;                   //If motor 2 is requested set the pulse for motor 1 equal to the throttle channel.
    12de:	82 33       	cpi	r24, 0x32	; 50
    12e0:	19 f4       	brne	.+6      	; 0x12e8 <loop+0x452>
    12e2:	ec cf       	rjmp	.-40     	; 0x12bc <loop+0x426>
    12e4:	85 33       	cpi	r24, 0x35	; 53
    12e6:	51 f3       	breq	.-44     	; 0x12bc <loop+0x426>
			else esc_2 = 1000;                                                                //If motor 2 is not requested set the pulse for the ESC to 1000us (off).
    12e8:	28 ee       	ldi	r18, 0xE8	; 232
    12ea:	33 e0       	ldi	r19, 0x03	; 3
    12ec:	30 93 eb 03 	sts	0x03EB, r19	; 0x8003eb <esc_2+0x1>
    12f0:	20 93 ea 03 	sts	0x03EA, r18	; 0x8003ea <esc_2>
			if(data == '3' || data == '5')esc_3 = receiver_input_channel_3;                   //If motor 3 is requested set the pulse for motor 1 equal to the throttle channel.
    12f4:	83 33       	cpi	r24, 0x33	; 51
    12f6:	39 f4       	brne	.+14     	; 0x1306 <loop+0x470>
    12f8:	20 91 f6 03 	lds	r18, 0x03F6	; 0x8003f6 <receiver_input_channel_3>
    12fc:	30 91 f7 03 	lds	r19, 0x03F7	; 0x8003f7 <receiver_input_channel_3+0x1>
    1300:	04 c0       	rjmp	.+8      	; 0x130a <loop+0x474>
    1302:	85 33       	cpi	r24, 0x35	; 53
    1304:	c9 f3       	breq	.-14     	; 0x12f8 <loop+0x462>
			else esc_3 = 1000;                                                                //If motor 3 is not requested set the pulse for the ESC to 1000us (off).
    1306:	28 ee       	ldi	r18, 0xE8	; 232
    1308:	33 e0       	ldi	r19, 0x03	; 3
    130a:	30 93 e9 03 	sts	0x03E9, r19	; 0x8003e9 <esc_3+0x1>
    130e:	20 93 e8 03 	sts	0x03E8, r18	; 0x8003e8 <esc_3>
			if(data == '4' || data == '5')esc_4 = receiver_input_channel_3;                   //If motor 4 is requested set the pulse for motor 1 equal to the throttle channel.
    1312:	84 53       	subi	r24, 0x34	; 52
    1314:	82 30       	cpi	r24, 0x02	; 2
    1316:	28 f4       	brcc	.+10     	; 0x1322 <loop+0x48c>
    1318:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <receiver_input_channel_3>
    131c:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <receiver_input_channel_3+0x1>
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <loop+0x490>
			else esc_4 = 1000;                                                                //If motor 4 is not requested set the pulse for the ESC to 1000us (off).
    1322:	88 ee       	ldi	r24, 0xE8	; 232
    1324:	93 e0       	ldi	r25, 0x03	; 3
    1326:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <esc_4+0x1>
    132a:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <esc_4>

			esc_pulse_output();                                                               //Send the ESC control pulses.
    132e:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_Z16esc_pulse_outputv>

			//For balancing the propellors it's possible to use the accelerometer to measure the vibrations.
			if(eeprom_data[31] == 1){                                                         //The MPU-6050 is installed
    1332:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <eeprom_data+0x1f>
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	09 f0       	breq	.+2      	; 0x133c <loop+0x4a6>
    133a:	68 c1       	rjmp	.+720    	; 0x160c <loop+0x776>
				Wire.beginTransmission(gyro_address);                                           //Start communication with the gyro.
    133c:	60 91 d2 03 	lds	r22, 0x03D2	; 0x8003d2 <gyro_address>
    1340:	70 91 d3 03 	lds	r23, 0x03D3	; 0x8003d3 <gyro_address+0x1>
    1344:	88 ec       	ldi	r24, 0xC8	; 200
    1346:	94 e0       	ldi	r25, 0x04	; 4
    1348:	0e 94 12 16 	call	0x2c24	; 0x2c24 <_ZN7TwoWire17beginTransmissionEi>
				Wire.write(0x3B);                                                               //Start reading @ register 43h and auto increment with every read.
    134c:	6b e3       	ldi	r22, 0x3B	; 59
    134e:	70 e0       	ldi	r23, 0x00	; 0
    1350:	88 ec       	ldi	r24, 0xC8	; 200
    1352:	94 e0       	ldi	r25, 0x04	; 4
    1354:	0e 94 23 01 	call	0x246	; 0x246 <_ZN7TwoWire5writeEi>
				Wire.endTransmission();                                                         //End the transmission.
    1358:	88 ec       	ldi	r24, 0xC8	; 200
    135a:	94 e0       	ldi	r25, 0x04	; 4
    135c:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN7TwoWire15endTransmissionEv>
				Wire.requestFrom(gyro_address,6);                                               //Request 6 bytes from the gyro.
    1360:	60 91 d2 03 	lds	r22, 0x03D2	; 0x8003d2 <gyro_address>
    1364:	70 91 d3 03 	lds	r23, 0x03D3	; 0x8003d3 <gyro_address+0x1>
    1368:	46 e0       	ldi	r20, 0x06	; 6
    136a:	50 e0       	ldi	r21, 0x00	; 0
    136c:	88 ec       	ldi	r24, 0xC8	; 200
    136e:	94 e0       	ldi	r25, 0x04	; 4
    1370:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <_ZN7TwoWire11requestFromEii>
				while(Wire.available() < 6);                                                    //Wait until the 6 bytes are received.
    1374:	88 ec       	ldi	r24, 0xC8	; 200
    1376:	94 e0       	ldi	r25, 0x04	; 4
    1378:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <_ZN7TwoWire9availableEv>
    137c:	06 97       	sbiw	r24, 0x06	; 6
    137e:	d4 f3       	brlt	.-12     	; 0x1374 <loop+0x4de>
				acc_x = Wire.read()<<8|Wire.read();                                             //Add the low and high byte to the acc_x variable.
    1380:	88 ec       	ldi	r24, 0xC8	; 200
    1382:	94 e0       	ldi	r25, 0x04	; 4
    1384:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN7TwoWire4readEv>
    1388:	18 2f       	mov	r17, r24
    138a:	88 ec       	ldi	r24, 0xC8	; 200
    138c:	94 e0       	ldi	r25, 0x04	; 4
    138e:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN7TwoWire4readEv>
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	31 2f       	mov	r19, r17
    1398:	82 2b       	or	r24, r18
    139a:	93 2b       	or	r25, r19
    139c:	09 2e       	mov	r0, r25
    139e:	00 0c       	add	r0, r0
    13a0:	aa 0b       	sbc	r26, r26
    13a2:	bb 0b       	sbc	r27, r27
    13a4:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <acc_x>
    13a8:	90 93 cb 03 	sts	0x03CB, r25	; 0x8003cb <acc_x+0x1>
    13ac:	a0 93 cc 03 	sts	0x03CC, r26	; 0x8003cc <acc_x+0x2>
    13b0:	b0 93 cd 03 	sts	0x03CD, r27	; 0x8003cd <acc_x+0x3>
				acc_y = Wire.read()<<8|Wire.read();                                             //Add the low and high byte to the acc_y variable.
    13b4:	88 ec       	ldi	r24, 0xC8	; 200
    13b6:	94 e0       	ldi	r25, 0x04	; 4
    13b8:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN7TwoWire4readEv>
    13bc:	18 2f       	mov	r17, r24
    13be:	88 ec       	ldi	r24, 0xC8	; 200
    13c0:	94 e0       	ldi	r25, 0x04	; 4
    13c2:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN7TwoWire4readEv>
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	31 2f       	mov	r19, r17
    13cc:	82 2b       	or	r24, r18
    13ce:	93 2b       	or	r25, r19
    13d0:	09 2e       	mov	r0, r25
    13d2:	00 0c       	add	r0, r0
    13d4:	aa 0b       	sbc	r26, r26
    13d6:	bb 0b       	sbc	r27, r27
    13d8:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <acc_y>
    13dc:	90 93 c7 03 	sts	0x03C7, r25	; 0x8003c7 <acc_y+0x1>
    13e0:	a0 93 c8 03 	sts	0x03C8, r26	; 0x8003c8 <acc_y+0x2>
    13e4:	b0 93 c9 03 	sts	0x03C9, r27	; 0x8003c9 <acc_y+0x3>
				acc_z = Wire.read()<<8|Wire.read();                                             //Add the low and high byte to the acc_z variable.
    13e8:	88 ec       	ldi	r24, 0xC8	; 200
    13ea:	94 e0       	ldi	r25, 0x04	; 4
    13ec:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN7TwoWire4readEv>
    13f0:	18 2f       	mov	r17, r24
    13f2:	88 ec       	ldi	r24, 0xC8	; 200
    13f4:	94 e0       	ldi	r25, 0x04	; 4
    13f6:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN7TwoWire4readEv>
    13fa:	e0 e0       	ldi	r30, 0x00	; 0
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	f1 2f       	mov	r31, r17
    1400:	e8 2b       	or	r30, r24
    1402:	f9 2b       	or	r31, r25
    1404:	cf 01       	movw	r24, r30
    1406:	0f 2e       	mov	r0, r31
    1408:	00 0c       	add	r0, r0
    140a:	aa 0b       	sbc	r26, r26
    140c:	bb 0b       	sbc	r27, r27
    140e:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <acc_z>
    1412:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <acc_z+0x1>
    1416:	a0 93 c4 03 	sts	0x03C4, r26	; 0x8003c4 <acc_z+0x2>
    141a:	b0 93 c5 03 	sts	0x03C5, r27	; 0x8003c5 <acc_z+0x3>

				acc_total_vector[0] = sqrt((acc_x*acc_x)+(acc_y*acc_y)+(acc_z*acc_z));          //Calculate the total accelerometer vector.
    141e:	60 91 ca 03 	lds	r22, 0x03CA	; 0x8003ca <acc_x>
    1422:	70 91 cb 03 	lds	r23, 0x03CB	; 0x8003cb <acc_x+0x1>
    1426:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <acc_x+0x2>
    142a:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <acc_x+0x3>
    142e:	80 90 c6 03 	lds	r8, 0x03C6	; 0x8003c6 <acc_y>
    1432:	90 90 c7 03 	lds	r9, 0x03C7	; 0x8003c7 <acc_y+0x1>
    1436:	a0 90 c8 03 	lds	r10, 0x03C8	; 0x8003c8 <acc_y+0x2>
    143a:	b0 90 c9 03 	lds	r11, 0x03C9	; 0x8003c9 <acc_y+0x3>
    143e:	9b 01       	movw	r18, r22
    1440:	ac 01       	movw	r20, r24
    1442:	0e 94 b6 1a 	call	0x356c	; 0x356c <__mulsi3>
    1446:	6b 01       	movw	r12, r22
    1448:	7c 01       	movw	r14, r24
    144a:	a5 01       	movw	r20, r10
    144c:	94 01       	movw	r18, r8
    144e:	c5 01       	movw	r24, r10
    1450:	b4 01       	movw	r22, r8
    1452:	0e 94 b6 1a 	call	0x356c	; 0x356c <__mulsi3>
    1456:	c6 0e       	add	r12, r22
    1458:	d7 1e       	adc	r13, r23
    145a:	e8 1e       	adc	r14, r24
    145c:	f9 1e       	adc	r15, r25
    145e:	9f 01       	movw	r18, r30
    1460:	df 01       	movw	r26, r30
    1462:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulhisi3>
    1466:	6c 0d       	add	r22, r12
    1468:	7d 1d       	adc	r23, r13
    146a:	8e 1d       	adc	r24, r14
    146c:	9f 1d       	adc	r25, r15
    146e:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__floatsisf>
    1472:	0e 94 ce 10 	call	0x219c	; 0x219c <sqrt>
    1476:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__fixsfsi>
    147a:	60 93 72 03 	sts	0x0372, r22	; 0x800372 <acc_total_vector>
    147e:	70 93 73 03 	sts	0x0373, r23	; 0x800373 <acc_total_vector+0x1>
    1482:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <acc_total_vector+0x2>
    1486:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <acc_total_vector+0x3>

				acc_av_vector = acc_total_vector[0];                                            //Copy the total vector to the accelerometer average vector variable.
    148a:	40 e1       	ldi	r20, 0x10	; 16

				for(start = 16; start > 0; start--){                                            //Do this loop 16 times to create an array of accelrometer vectors.
					acc_total_vector[start] = acc_total_vector[start - 1];                        //Shift every variable one position up in the array.
    148c:	24 2f       	mov	r18, r20
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	f9 01       	movw	r30, r18
    1492:	ee 0f       	add	r30, r30
    1494:	ff 1f       	adc	r31, r31
    1496:	ee 0f       	add	r30, r30
    1498:	ff 1f       	adc	r31, r31
    149a:	e2 59       	subi	r30, 0x92	; 146
    149c:	fc 4f       	sbci	r31, 0xFC	; 252
    149e:	c0 80       	ld	r12, Z
    14a0:	d1 80       	ldd	r13, Z+1	; 0x01
    14a2:	e2 80       	ldd	r14, Z+2	; 0x02
    14a4:	f3 80       	ldd	r15, Z+3	; 0x03
    14a6:	22 0f       	add	r18, r18
    14a8:	33 1f       	adc	r19, r19
    14aa:	22 0f       	add	r18, r18
    14ac:	33 1f       	adc	r19, r19
    14ae:	f9 01       	movw	r30, r18
    14b0:	ee 58       	subi	r30, 0x8E	; 142
    14b2:	fc 4f       	sbci	r31, 0xFC	; 252
    14b4:	c0 82       	st	Z, r12
    14b6:	d1 82       	std	Z+1, r13	; 0x01
    14b8:	e2 82       	std	Z+2, r14	; 0x02
    14ba:	f3 82       	std	Z+3, r15	; 0x03
					acc_av_vector += acc_total_vector[start];                                     //Add the array value to the acc_av_vector variable.
    14bc:	6c 0d       	add	r22, r12
    14be:	7d 1d       	adc	r23, r13
    14c0:	8e 1d       	adc	r24, r14
    14c2:	9f 1d       	adc	r25, r15

				acc_total_vector[0] = sqrt((acc_x*acc_x)+(acc_y*acc_y)+(acc_z*acc_z));          //Calculate the total accelerometer vector.

				acc_av_vector = acc_total_vector[0];                                            //Copy the total vector to the accelerometer average vector variable.

				for(start = 16; start > 0; start--){                                            //Do this loop 16 times to create an array of accelrometer vectors.
    14c4:	41 50       	subi	r20, 0x01	; 1
    14c6:	11 f7       	brne	.-60     	; 0x148c <loop+0x5f6>
    14c8:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <start>
					acc_total_vector[start] = acc_total_vector[start - 1];                        //Shift every variable one position up in the array.
					acc_av_vector += acc_total_vector[start];                                     //Add the array value to the acc_av_vector variable.
				}

				acc_av_vector /= 17;                                                            //Divide the acc_av_vector by 17 to get the avarage total accelerometer vector.
    14cc:	21 e1       	ldi	r18, 0x11	; 17
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	40 e0       	ldi	r20, 0x00	; 0
    14d2:	50 e0       	ldi	r21, 0x00	; 0
    14d4:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__divmodsi4>
    14d8:	20 93 6e 03 	sts	0x036E, r18	; 0x80036e <acc_av_vector>
    14dc:	30 93 6f 03 	sts	0x036F, r19	; 0x80036f <acc_av_vector+0x1>
    14e0:	40 93 70 03 	sts	0x0370, r20	; 0x800370 <acc_av_vector+0x2>
    14e4:	50 93 71 03 	sts	0x0371, r21	; 0x800371 <acc_av_vector+0x3>

				if(vibration_counter < 20){                                                     //If the vibration_counter is less than 20 do this.
    14e8:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <vibration_counter>
    14ec:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <vibration_counter+0x1>
    14f0:	84 31       	cpi	r24, 0x14	; 20
    14f2:	91 05       	cpc	r25, r1
    14f4:	7c f5       	brge	.+94     	; 0x1554 <loop+0x6be>
					vibration_counter ++;                                                         //Increment the vibration_counter variable.
    14f6:	01 96       	adiw	r24, 0x01	; 1
    14f8:	90 93 d1 03 	sts	0x03D1, r25	; 0x8003d1 <vibration_counter+0x1>
    14fc:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <vibration_counter>
					vibration_total_result += abs(acc_total_vector[0] - acc_av_vector);           //Add the absolute difference between the avarage vector and current vector to the vibration_total_result variable.
    1500:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <acc_total_vector>
    1504:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <acc_total_vector+0x1>
    1508:	a0 91 74 03 	lds	r26, 0x0374	; 0x800374 <acc_total_vector+0x2>
    150c:	b0 91 75 03 	lds	r27, 0x0375	; 0x800375 <acc_total_vector+0x3>
    1510:	82 1b       	sub	r24, r18
    1512:	93 0b       	sbc	r25, r19
    1514:	a4 0b       	sbc	r26, r20
    1516:	b5 0b       	sbc	r27, r21
    1518:	b7 ff       	sbrs	r27, 7
    151a:	07 c0       	rjmp	.+14     	; 0x152a <loop+0x694>
    151c:	b0 95       	com	r27
    151e:	a0 95       	com	r26
    1520:	90 95       	com	r25
    1522:	81 95       	neg	r24
    1524:	9f 4f       	sbci	r25, 0xFF	; 255
    1526:	af 4f       	sbci	r26, 0xFF	; 255
    1528:	bf 4f       	sbci	r27, 0xFF	; 255
    152a:	40 91 6a 03 	lds	r20, 0x036A	; 0x80036a <vibration_total_result>
    152e:	50 91 6b 03 	lds	r21, 0x036B	; 0x80036b <vibration_total_result+0x1>
    1532:	60 91 6c 03 	lds	r22, 0x036C	; 0x80036c <vibration_total_result+0x2>
    1536:	70 91 6d 03 	lds	r23, 0x036D	; 0x80036d <vibration_total_result+0x3>
    153a:	84 0f       	add	r24, r20
    153c:	95 1f       	adc	r25, r21
    153e:	a6 1f       	adc	r26, r22
    1540:	b7 1f       	adc	r27, r23
    1542:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <vibration_total_result>
    1546:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <vibration_total_result+0x1>
    154a:	a0 93 6c 03 	sts	0x036C, r26	; 0x80036c <vibration_total_result+0x2>
    154e:	b0 93 6d 03 	sts	0x036D, r27	; 0x80036d <vibration_total_result+0x3>
    1552:	0c c0       	rjmp	.+24     	; 0x156c <loop+0x6d6>
				}
				else{
					vibration_counter = 0;                                                        //If the vibration_counter is equal or larger than 20 do this.
    1554:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <vibration_counter+0x1>
    1558:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <vibration_counter>
					//Serial.print(vibration_total_result/50);                                    //Print the total accelerometer vector divided by 50 on the serial monitor.
					vibration_total_result = 0;                                                   //Reset the vibration_total_result variable.
    155c:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <vibration_total_result>
    1560:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <vibration_total_result+0x1>
    1564:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <vibration_total_result+0x2>
    1568:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <vibration_total_result+0x3>
					//Serial.print(" V:");
					//Serial.println(battery_voltage);
				}
				Serial.print("0:");
    156c:	66 e9       	ldi	r22, 0x96	; 150
    156e:	72 e0       	ldi	r23, 0x02	; 2
    1570:	8b e2       	ldi	r24, 0x2B	; 43
    1572:	94 e0       	ldi	r25, 0x04	; 4
    1574:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN5Print5printEPKc>
				Serial.print(acc_x);
    1578:	40 91 ca 03 	lds	r20, 0x03CA	; 0x8003ca <acc_x>
    157c:	50 91 cb 03 	lds	r21, 0x03CB	; 0x8003cb <acc_x+0x1>
    1580:	60 91 cc 03 	lds	r22, 0x03CC	; 0x8003cc <acc_x+0x2>
    1584:	70 91 cd 03 	lds	r23, 0x03CD	; 0x8003cd <acc_x+0x3>
    1588:	2a e0       	ldi	r18, 0x0A	; 10
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	8b e2       	ldi	r24, 0x2B	; 43
    158e:	94 e0       	ldi	r25, 0x04	; 4
    1590:	0e 94 df 13 	call	0x27be	; 0x27be <_ZN5Print5printEli>
				Serial.print("|1:");
    1594:	69 e9       	ldi	r22, 0x99	; 153
    1596:	72 e0       	ldi	r23, 0x02	; 2
    1598:	8b e2       	ldi	r24, 0x2B	; 43
    159a:	94 e0       	ldi	r25, 0x04	; 4
    159c:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN5Print5printEPKc>
				Serial.print(acc_y);
    15a0:	40 91 c6 03 	lds	r20, 0x03C6	; 0x8003c6 <acc_y>
    15a4:	50 91 c7 03 	lds	r21, 0x03C7	; 0x8003c7 <acc_y+0x1>
    15a8:	60 91 c8 03 	lds	r22, 0x03C8	; 0x8003c8 <acc_y+0x2>
    15ac:	70 91 c9 03 	lds	r23, 0x03C9	; 0x8003c9 <acc_y+0x3>
    15b0:	2a e0       	ldi	r18, 0x0A	; 10
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	8b e2       	ldi	r24, 0x2B	; 43
    15b6:	94 e0       	ldi	r25, 0x04	; 4
    15b8:	0e 94 df 13 	call	0x27be	; 0x27be <_ZN5Print5printEli>
				Serial.print("|2:");
    15bc:	6d e9       	ldi	r22, 0x9D	; 157
    15be:	72 e0       	ldi	r23, 0x02	; 2
    15c0:	8b e2       	ldi	r24, 0x2B	; 43
    15c2:	94 e0       	ldi	r25, 0x04	; 4
    15c4:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN5Print5printEPKc>
				Serial.print(acc_z);
    15c8:	40 91 c2 03 	lds	r20, 0x03C2	; 0x8003c2 <acc_z>
    15cc:	50 91 c3 03 	lds	r21, 0x03C3	; 0x8003c3 <acc_z+0x1>
    15d0:	60 91 c4 03 	lds	r22, 0x03C4	; 0x8003c4 <acc_z+0x2>
    15d4:	70 91 c5 03 	lds	r23, 0x03C5	; 0x8003c5 <acc_z+0x3>
    15d8:	2a e0       	ldi	r18, 0x0A	; 10
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	8b e2       	ldi	r24, 0x2B	; 43
    15de:	94 e0       	ldi	r25, 0x04	; 4
    15e0:	0e 94 df 13 	call	0x27be	; 0x27be <_ZN5Print5printEli>
				Serial.print("|3:");
    15e4:	61 ea       	ldi	r22, 0xA1	; 161
    15e6:	72 e0       	ldi	r23, 0x02	; 2
    15e8:	8b e2       	ldi	r24, 0x2B	; 43
    15ea:	94 e0       	ldi	r25, 0x04	; 4
    15ec:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN5Print5printEPKc>
				Serial.println(acc_total_vector[0]);
    15f0:	40 91 72 03 	lds	r20, 0x0372	; 0x800372 <acc_total_vector>
    15f4:	50 91 73 03 	lds	r21, 0x0373	; 0x800373 <acc_total_vector+0x1>
    15f8:	60 91 74 03 	lds	r22, 0x0374	; 0x800374 <acc_total_vector+0x2>
    15fc:	70 91 75 03 	lds	r23, 0x0375	; 0x800375 <acc_total_vector+0x3>
    1600:	2a e0       	ldi	r18, 0x0A	; 10
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	8b e2       	ldi	r24, 0x2B	; 43
    1606:	94 e0       	ldi	r25, 0x04	; 4
    1608:	0e 94 47 14 	call	0x288e	; 0x288e <_ZN5Print7printlnEli>
		}
	}
	///////////////////////////////////////////////////////////////////////////////////////////
	//When user sends a 'a' display the quadcopter angles.
	////////////////////////////////////////////////////////////////////////////////////////////
	if(data == 'a'){
    160c:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <data>
    1610:	81 36       	cpi	r24, 0x61	; 97
    1612:	09 f0       	breq	.+2      	; 0x1616 <loop+0x780>
    1614:	18 c3       	rjmp	.+1584   	; 0x1c46 <loop+0xdb0>

		if(cal_int != 2000){
    1616:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <cal_int>
    161a:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <cal_int+0x1>
    161e:	80 3d       	cpi	r24, 0xD0	; 208
    1620:	97 40       	sbci	r25, 0x07	; 7
    1622:	09 f4       	brne	.+2      	; 0x1626 <loop+0x790>
    1624:	e9 c0       	rjmp	.+466    	; 0x17f8 <loop+0x962>
			Serial.print("Calibrating the gyro");
    1626:	65 ea       	ldi	r22, 0xA5	; 165
    1628:	72 e0       	ldi	r23, 0x02	; 2
    162a:	8b e2       	ldi	r24, 0x2B	; 43
    162c:	94 e0       	ldi	r25, 0x04	; 4
    162e:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN5Print5printEPKc>
			//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
			for (cal_int = 0; cal_int < 2000 ; cal_int ++){                                   //Take 2000 readings for calibration.
    1632:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <cal_int+0x1>
    1636:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <cal_int>
				if(cal_int % 125 == 0){
    163a:	0d e7       	ldi	r16, 0x7D	; 125
    163c:	10 e0       	ldi	r17, 0x00	; 0
	if(data == 'a'){

		if(cal_int != 2000){
			Serial.print("Calibrating the gyro");
			//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
			for (cal_int = 0; cal_int < 2000 ; cal_int ++){                                   //Take 2000 readings for calibration.
    163e:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <cal_int>
    1642:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <cal_int+0x1>
    1646:	80 3d       	cpi	r24, 0xD0	; 208
    1648:	27 e0       	ldi	r18, 0x07	; 7
    164a:	92 07       	cpc	r25, r18
    164c:	0c f0       	brlt	.+2      	; 0x1650 <loop+0x7ba>
    164e:	8b c0       	rjmp	.+278    	; 0x1766 <loop+0x8d0>
				if(cal_int % 125 == 0){
    1650:	b8 01       	movw	r22, r16
    1652:	0e 94 c6 1a 	call	0x358c	; 0x358c <__divmodhi4>
    1656:	89 2b       	or	r24, r25
    1658:	81 f4       	brne	.+32     	; 0x167a <loop+0x7e4>
					digitalWrite(LED_STATUS_PIN, !digitalRead(LED_STATUS_PIN));   //Change the led status to indicate calibration.
    165a:	8d e0       	ldi	r24, 0x0D	; 13
    165c:	0e 94 38 18 	call	0x3070	; 0x3070 <digitalRead>
    1660:	61 e0       	ldi	r22, 0x01	; 1
    1662:	89 2b       	or	r24, r25
    1664:	09 f0       	breq	.+2      	; 0x1668 <loop+0x7d2>
    1666:	60 e0       	ldi	r22, 0x00	; 0
    1668:	8d e0       	ldi	r24, 0x0D	; 13
    166a:	0e 94 08 18 	call	0x3010	; 0x3010 <digitalWrite>
					Serial.print(".");
    166e:	63 ed       	ldi	r22, 0xD3	; 211
    1670:	71 e0       	ldi	r23, 0x01	; 1
    1672:	8b e2       	ldi	r24, 0x2B	; 43
    1674:	94 e0       	ldi	r25, 0x04	; 4
    1676:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN5Print5printEPKc>
				}
				gyro_signalen();                                                                //Read the gyro output.
    167a:	0e 94 77 05 	call	0xaee	; 0xaee <_Z13gyro_signalenv>
				gyro_axis_cal[1] += gyro_axis[1];                                               //Ad roll value to gyro_roll_cal.
    167e:	60 91 1e 03 	lds	r22, 0x031E	; 0x80031e <gyro_axis+0x2>
    1682:	70 91 1f 03 	lds	r23, 0x031F	; 0x80031f <gyro_axis+0x3>
    1686:	07 2e       	mov	r0, r23
    1688:	00 0c       	add	r0, r0
    168a:	88 0b       	sbc	r24, r24
    168c:	99 0b       	sbc	r25, r25
    168e:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__floatsisf>
    1692:	9b 01       	movw	r18, r22
    1694:	ac 01       	movw	r20, r24
    1696:	60 91 ee 02 	lds	r22, 0x02EE	; 0x8002ee <__data_end+0x4>
    169a:	70 91 ef 02 	lds	r23, 0x02EF	; 0x8002ef <__data_end+0x5>
    169e:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <__data_end+0x6>
    16a2:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <__data_end+0x7>
    16a6:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__addsf3>
    16aa:	60 93 ee 02 	sts	0x02EE, r22	; 0x8002ee <__data_end+0x4>
    16ae:	70 93 ef 02 	sts	0x02EF, r23	; 0x8002ef <__data_end+0x5>
    16b2:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <__data_end+0x6>
    16b6:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <__data_end+0x7>
				gyro_axis_cal[2] += gyro_axis[2];                                               //Ad pitch value to gyro_pitch_cal.
    16ba:	60 91 20 03 	lds	r22, 0x0320	; 0x800320 <gyro_axis+0x4>
    16be:	70 91 21 03 	lds	r23, 0x0321	; 0x800321 <gyro_axis+0x5>
    16c2:	07 2e       	mov	r0, r23
    16c4:	00 0c       	add	r0, r0
    16c6:	88 0b       	sbc	r24, r24
    16c8:	99 0b       	sbc	r25, r25
    16ca:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__floatsisf>
    16ce:	9b 01       	movw	r18, r22
    16d0:	ac 01       	movw	r20, r24
    16d2:	60 91 f2 02 	lds	r22, 0x02F2	; 0x8002f2 <__data_end+0x8>
    16d6:	70 91 f3 02 	lds	r23, 0x02F3	; 0x8002f3 <__data_end+0x9>
    16da:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <__data_end+0xa>
    16de:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <__data_end+0xb>
    16e2:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__addsf3>
    16e6:	60 93 f2 02 	sts	0x02F2, r22	; 0x8002f2 <__data_end+0x8>
    16ea:	70 93 f3 02 	sts	0x02F3, r23	; 0x8002f3 <__data_end+0x9>
    16ee:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <__data_end+0xa>
    16f2:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <__data_end+0xb>
				gyro_axis_cal[3] += gyro_axis[3];                                               //Ad yaw value to gyro_yaw_cal.
    16f6:	60 91 22 03 	lds	r22, 0x0322	; 0x800322 <gyro_axis+0x6>
    16fa:	70 91 23 03 	lds	r23, 0x0323	; 0x800323 <gyro_axis+0x7>
    16fe:	07 2e       	mov	r0, r23
    1700:	00 0c       	add	r0, r0
    1702:	88 0b       	sbc	r24, r24
    1704:	99 0b       	sbc	r25, r25
    1706:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__floatsisf>
    170a:	9b 01       	movw	r18, r22
    170c:	ac 01       	movw	r20, r24
    170e:	60 91 f6 02 	lds	r22, 0x02F6	; 0x8002f6 <__data_end+0xc>
    1712:	70 91 f7 02 	lds	r23, 0x02F7	; 0x8002f7 <__data_end+0xd>
    1716:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <__data_end+0xe>
    171a:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <__data_end+0xf>
    171e:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__addsf3>
    1722:	60 93 f6 02 	sts	0x02F6, r22	; 0x8002f6 <__data_end+0xc>
    1726:	70 93 f7 02 	sts	0x02F7, r23	; 0x8002f7 <__data_end+0xd>
    172a:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <__data_end+0xe>
    172e:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <__data_end+0xf>
				//We don't want the esc's to be beeping annoyingly. So let's give them a 1000us puls while calibrating the gyro.
				PORTD |= B11110000;                                                             //Set digital poort 4, 5, 6 and 7 high.
    1732:	8b b1       	in	r24, 0x0b	; 11
    1734:	80 6f       	ori	r24, 0xF0	; 240
    1736:	8b b9       	out	0x0b, r24	; 11
				delayMicroseconds(1000);                                                        //Wait 1000us.
    1738:	88 ee       	ldi	r24, 0xE8	; 232
    173a:	93 e0       	ldi	r25, 0x03	; 3
    173c:	0e 94 40 17 	call	0x2e80	; 0x2e80 <delayMicroseconds>
				PORTD &= B00001111;                                                             //Set digital poort 4, 5, 6 and 7 low.
    1740:	8b b1       	in	r24, 0x0b	; 11
    1742:	8f 70       	andi	r24, 0x0F	; 15
    1744:	8b b9       	out	0x0b, r24	; 11
				delay(3);                                                                       //Wait 3 milliseconds before the next loop.
    1746:	63 e0       	ldi	r22, 0x03	; 3
    1748:	70 e0       	ldi	r23, 0x00	; 0
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	0e 94 04 17 	call	0x2e08	; 0x2e08 <delay>
	if(data == 'a'){

		if(cal_int != 2000){
			Serial.print("Calibrating the gyro");
			//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
			for (cal_int = 0; cal_int < 2000 ; cal_int ++){                                   //Take 2000 readings for calibration.
    1752:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <cal_int>
    1756:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <cal_int+0x1>
    175a:	01 96       	adiw	r24, 0x01	; 1
    175c:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <cal_int+0x1>
    1760:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <cal_int>
    1764:	6c cf       	rjmp	.-296    	; 0x163e <loop+0x7a8>
				PORTD |= B11110000;                                                             //Set digital poort 4, 5, 6 and 7 high.
				delayMicroseconds(1000);                                                        //Wait 1000us.
				PORTD &= B00001111;                                                             //Set digital poort 4, 5, 6 and 7 low.
				delay(3);                                                                       //Wait 3 milliseconds before the next loop.
			}
			Serial.println(".");
    1766:	63 ed       	ldi	r22, 0xD3	; 211
    1768:	71 e0       	ldi	r23, 0x01	; 1
    176a:	8b e2       	ldi	r24, 0x2B	; 43
    176c:	94 e0       	ldi	r25, 0x04	; 4
    176e:	0e 94 79 13 	call	0x26f2	; 0x26f2 <_ZN5Print7printlnEPKc>
			//Now that we have 2000 measures, we need to devide by 2000 to get the average gyro offset.
			gyro_axis_cal[1] /= 2000;                                                         //Divide the roll total by 2000.
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	4a ef       	ldi	r20, 0xFA	; 250
    1778:	54 e4       	ldi	r21, 0x44	; 68
    177a:	60 91 ee 02 	lds	r22, 0x02EE	; 0x8002ee <__data_end+0x4>
    177e:	70 91 ef 02 	lds	r23, 0x02EF	; 0x8002ef <__data_end+0x5>
    1782:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <__data_end+0x6>
    1786:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <__data_end+0x7>
    178a:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__divsf3>
    178e:	60 93 ee 02 	sts	0x02EE, r22	; 0x8002ee <__data_end+0x4>
    1792:	70 93 ef 02 	sts	0x02EF, r23	; 0x8002ef <__data_end+0x5>
    1796:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <__data_end+0x6>
    179a:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <__data_end+0x7>
			gyro_axis_cal[2] /= 2000;                                                         //Divide the pitch total by 2000.
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	4a ef       	ldi	r20, 0xFA	; 250
    17a4:	54 e4       	ldi	r21, 0x44	; 68
    17a6:	60 91 f2 02 	lds	r22, 0x02F2	; 0x8002f2 <__data_end+0x8>
    17aa:	70 91 f3 02 	lds	r23, 0x02F3	; 0x8002f3 <__data_end+0x9>
    17ae:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <__data_end+0xa>
    17b2:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <__data_end+0xb>
    17b6:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__divsf3>
    17ba:	60 93 f2 02 	sts	0x02F2, r22	; 0x8002f2 <__data_end+0x8>
    17be:	70 93 f3 02 	sts	0x02F3, r23	; 0x8002f3 <__data_end+0x9>
    17c2:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <__data_end+0xa>
    17c6:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <__data_end+0xb>
			gyro_axis_cal[3] /= 2000;                                                         //Divide the yaw total by 2000.
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	4a ef       	ldi	r20, 0xFA	; 250
    17d0:	54 e4       	ldi	r21, 0x44	; 68
    17d2:	60 91 f6 02 	lds	r22, 0x02F6	; 0x8002f6 <__data_end+0xc>
    17d6:	70 91 f7 02 	lds	r23, 0x02F7	; 0x8002f7 <__data_end+0xd>
    17da:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <__data_end+0xe>
    17de:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <__data_end+0xf>
    17e2:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__divsf3>
    17e6:	60 93 f6 02 	sts	0x02F6, r22	; 0x8002f6 <__data_end+0xc>
    17ea:	70 93 f7 02 	sts	0x02F7, r23	; 0x8002f7 <__data_end+0xd>
    17ee:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <__data_end+0xe>
    17f2:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <__data_end+0xf>
    17f6:	27 c2       	rjmp	.+1102   	; 0x1c46 <loop+0xdb0>
		}
		else{
			///We don't want the esc's to be beeping annoyingly. So let's give them a 1000us puls while calibrating the gyro.
			PORTD |= B11110000;                                                               //Set digital poort 4, 5, 6 and 7 high.
    17f8:	8b b1       	in	r24, 0x0b	; 11
    17fa:	80 6f       	ori	r24, 0xF0	; 240
    17fc:	8b b9       	out	0x0b, r24	; 11
			delayMicroseconds(1000);                                                          //Wait 1000us.
    17fe:	88 ee       	ldi	r24, 0xE8	; 232
    1800:	93 e0       	ldi	r25, 0x03	; 3
    1802:	0e 94 40 17 	call	0x2e80	; 0x2e80 <delayMicroseconds>
			PORTD &= B00001111;                                                               //Set digital poort 4, 5, 6 and 7 low.
    1806:	8b b1       	in	r24, 0x0b	; 11
    1808:	8f 70       	andi	r24, 0x0F	; 15
    180a:	8b b9       	out	0x0b, r24	; 11

			//Let's get the current gyro data.
			gyro_signalen();
    180c:	0e 94 77 05 	call	0xaee	; 0xaee <_Z13gyro_signalenv>

			//Gyro angle calculations
			//0.0000611 = 1 / (250Hz / 65.5)
			angle_pitch += gyro_pitch * 0.0000611;                                           //Calculate the traveled pitch angle and add this to the angle_pitch variable.
    1810:	20 ed       	ldi	r18, 0xD0	; 208
    1812:	32 e2       	ldi	r19, 0x22	; 34
    1814:	40 e8       	ldi	r20, 0x80	; 128
    1816:	58 e3       	ldi	r21, 0x38	; 56
    1818:	60 91 18 03 	lds	r22, 0x0318	; 0x800318 <gyro_pitch>
    181c:	70 91 19 03 	lds	r23, 0x0319	; 0x800319 <gyro_pitch+0x1>
    1820:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <gyro_pitch+0x2>
    1824:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <gyro_pitch+0x3>
    1828:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__mulsf3>
    182c:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <angle_pitch>
    1830:	30 91 05 03 	lds	r19, 0x0305	; 0x800305 <angle_pitch+0x1>
    1834:	40 91 06 03 	lds	r20, 0x0306	; 0x800306 <angle_pitch+0x2>
    1838:	50 91 07 03 	lds	r21, 0x0307	; 0x800307 <angle_pitch+0x3>
    183c:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__addsf3>
    1840:	2b 01       	movw	r4, r22
    1842:	3c 01       	movw	r6, r24
			angle_roll += gyro_roll * 0.0000611;                                             //Calculate the traveled roll angle and add this to the angle_roll variable.
    1844:	20 ed       	ldi	r18, 0xD0	; 208
    1846:	32 e2       	ldi	r19, 0x22	; 34
    1848:	40 e8       	ldi	r20, 0x80	; 128
    184a:	58 e3       	ldi	r21, 0x38	; 56
    184c:	60 91 14 03 	lds	r22, 0x0314	; 0x800314 <gyro_roll>
    1850:	70 91 15 03 	lds	r23, 0x0315	; 0x800315 <gyro_roll+0x1>
    1854:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <gyro_roll+0x2>
    1858:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <gyro_roll+0x3>
    185c:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__mulsf3>
    1860:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <angle_roll>
    1864:	30 91 01 03 	lds	r19, 0x0301	; 0x800301 <angle_roll+0x1>
    1868:	40 91 02 03 	lds	r20, 0x0302	; 0x800302 <angle_roll+0x2>
    186c:	50 91 03 03 	lds	r21, 0x0303	; 0x800303 <angle_roll+0x3>
    1870:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__addsf3>
    1874:	6b 01       	movw	r12, r22
    1876:	7c 01       	movw	r14, r24
			angle_yaw += gyro_yaw * 0.0000611;                                             //Calculate the traveled roll angle and add this to the angle_roll variable.
    1878:	80 90 10 03 	lds	r8, 0x0310	; 0x800310 <gyro_yaw>
    187c:	90 90 11 03 	lds	r9, 0x0311	; 0x800311 <gyro_yaw+0x1>
    1880:	a0 90 12 03 	lds	r10, 0x0312	; 0x800312 <gyro_yaw+0x2>
    1884:	b0 90 13 03 	lds	r11, 0x0313	; 0x800313 <gyro_yaw+0x3>
    1888:	20 ed       	ldi	r18, 0xD0	; 208
    188a:	32 e2       	ldi	r19, 0x22	; 34
    188c:	40 e8       	ldi	r20, 0x80	; 128
    188e:	58 e3       	ldi	r21, 0x38	; 56
    1890:	c5 01       	movw	r24, r10
    1892:	b4 01       	movw	r22, r8
    1894:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__mulsf3>
    1898:	9b 01       	movw	r18, r22
    189a:	ac 01       	movw	r20, r24
    189c:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <angle_yaw>
    18a0:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <angle_yaw+0x1>
    18a4:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <angle_yaw+0x2>
    18a8:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <angle_yaw+0x3>
    18ac:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__addsf3>
    18b0:	60 93 fc 02 	sts	0x02FC, r22	; 0x8002fc <angle_yaw>
    18b4:	70 93 fd 02 	sts	0x02FD, r23	; 0x8002fd <angle_yaw+0x1>
    18b8:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <angle_yaw+0x2>
    18bc:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <angle_yaw+0x3>

			//0.000001066 = 0.0000611 * (3.142(PI) / 180degr) The Arduino sin function is in radians
			angle_pitch -= angle_roll * sin(gyro_yaw * 0.000001066);                         //If the IMU has yawed transfer the roll angle to the pitch angel.
    18c0:	2b e7       	ldi	r18, 0x7B	; 123
    18c2:	33 e1       	ldi	r19, 0x13	; 19
    18c4:	4f e8       	ldi	r20, 0x8F	; 143
    18c6:	55 e3       	ldi	r21, 0x35	; 53
    18c8:	c5 01       	movw	r24, r10
    18ca:	b4 01       	movw	r22, r8
    18cc:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__mulsf3>
    18d0:	0e 94 c0 10 	call	0x2180	; 0x2180 <sin>
    18d4:	4b 01       	movw	r8, r22
    18d6:	5c 01       	movw	r10, r24
    18d8:	9b 01       	movw	r18, r22
    18da:	ac 01       	movw	r20, r24
    18dc:	c7 01       	movw	r24, r14
    18de:	b6 01       	movw	r22, r12
    18e0:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__mulsf3>
    18e4:	9b 01       	movw	r18, r22
    18e6:	ac 01       	movw	r20, r24
    18e8:	c3 01       	movw	r24, r6
    18ea:	b2 01       	movw	r22, r4
    18ec:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__subsf3>
    18f0:	6d 83       	std	Y+5, r22	; 0x05
    18f2:	7e 83       	std	Y+6, r23	; 0x06
    18f4:	8f 83       	std	Y+7, r24	; 0x07
    18f6:	98 87       	std	Y+8, r25	; 0x08
			angle_roll += angle_pitch * sin(gyro_yaw * 0.000001066);                         //If the IMU has yawed transfer the pitch angle to the roll angel.
    18f8:	a5 01       	movw	r20, r10
    18fa:	94 01       	movw	r18, r8
    18fc:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__mulsf3>
    1900:	9b 01       	movw	r18, r22
    1902:	ac 01       	movw	r20, r24
    1904:	c7 01       	movw	r24, r14
    1906:	b6 01       	movw	r22, r12
    1908:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__addsf3>
    190c:	69 87       	std	Y+9, r22	; 0x09
    190e:	7a 87       	std	Y+10, r23	; 0x0a
    1910:	8b 87       	std	Y+11, r24	; 0x0b
    1912:	9c 87       	std	Y+12, r25	; 0x0c

			//Accelerometer angle calculations
			acc_total_vector[0] = sqrt((acc_x*acc_x)+(acc_y*acc_y)+(acc_z*acc_z));           //Calculate the total accelerometer vector.
    1914:	40 90 ca 03 	lds	r4, 0x03CA	; 0x8003ca <acc_x>
    1918:	50 90 cb 03 	lds	r5, 0x03CB	; 0x8003cb <acc_x+0x1>
    191c:	60 90 cc 03 	lds	r6, 0x03CC	; 0x8003cc <acc_x+0x2>
    1920:	70 90 cd 03 	lds	r7, 0x03CD	; 0x8003cd <acc_x+0x3>
    1924:	80 90 c6 03 	lds	r8, 0x03C6	; 0x8003c6 <acc_y>
    1928:	90 90 c7 03 	lds	r9, 0x03C7	; 0x8003c7 <acc_y+0x1>
    192c:	a0 90 c8 03 	lds	r10, 0x03C8	; 0x8003c8 <acc_y+0x2>
    1930:	b0 90 c9 03 	lds	r11, 0x03C9	; 0x8003c9 <acc_y+0x3>
    1934:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <acc_z>
    1938:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <acc_z+0x1>
    193c:	a0 91 c4 03 	lds	r26, 0x03C4	; 0x8003c4 <acc_z+0x2>
    1940:	b0 91 c5 03 	lds	r27, 0x03C5	; 0x8003c5 <acc_z+0x3>
    1944:	89 83       	std	Y+1, r24	; 0x01
    1946:	9a 83       	std	Y+2, r25	; 0x02
    1948:	ab 83       	std	Y+3, r26	; 0x03
    194a:	bc 83       	std	Y+4, r27	; 0x04
    194c:	a3 01       	movw	r20, r6
    194e:	92 01       	movw	r18, r4
    1950:	c3 01       	movw	r24, r6
    1952:	b2 01       	movw	r22, r4
    1954:	0e 94 b6 1a 	call	0x356c	; 0x356c <__mulsi3>
    1958:	6b 01       	movw	r12, r22
    195a:	7c 01       	movw	r14, r24
    195c:	a5 01       	movw	r20, r10
    195e:	94 01       	movw	r18, r8
    1960:	c5 01       	movw	r24, r10
    1962:	b4 01       	movw	r22, r8
    1964:	0e 94 b6 1a 	call	0x356c	; 0x356c <__mulsi3>
    1968:	c6 0e       	add	r12, r22
    196a:	d7 1e       	adc	r13, r23
    196c:	e8 1e       	adc	r14, r24
    196e:	f9 1e       	adc	r15, r25
    1970:	29 81       	ldd	r18, Y+1	; 0x01
    1972:	3a 81       	ldd	r19, Y+2	; 0x02
    1974:	4b 81       	ldd	r20, Y+3	; 0x03
    1976:	5c 81       	ldd	r21, Y+4	; 0x04
    1978:	ca 01       	movw	r24, r20
    197a:	b9 01       	movw	r22, r18
    197c:	0e 94 b6 1a 	call	0x356c	; 0x356c <__mulsi3>
    1980:	6c 0d       	add	r22, r12
    1982:	7d 1d       	adc	r23, r13
    1984:	8e 1d       	adc	r24, r14
    1986:	9f 1d       	adc	r25, r15
    1988:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__floatsisf>
    198c:	0e 94 ce 10 	call	0x219c	; 0x219c <sqrt>
    1990:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__fixsfsi>
    1994:	60 93 72 03 	sts	0x0372, r22	; 0x800372 <acc_total_vector>
    1998:	70 93 73 03 	sts	0x0373, r23	; 0x800373 <acc_total_vector+0x1>
    199c:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <acc_total_vector+0x2>
    19a0:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <acc_total_vector+0x3>

			//57.296 = 1 / (3.142 / 180) The Arduino asin function is in radiansa
			angle_pitch_acc = asin((float)acc_y/acc_total_vector[0])* 57.296;                //Calculate the pitch angle.
    19a4:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__floatsisf>
    19a8:	6b 01       	movw	r12, r22
    19aa:	7c 01       	movw	r14, r24
    19ac:	c5 01       	movw	r24, r10
    19ae:	b4 01       	movw	r22, r8
    19b0:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__floatsisf>
    19b4:	a7 01       	movw	r20, r14
    19b6:	96 01       	movw	r18, r12
    19b8:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__divsf3>
    19bc:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <asin>
    19c0:	4b 01       	movw	r8, r22
    19c2:	5c 01       	movw	r10, r24
			angle_roll_acc = asin((float)acc_x/acc_total_vector[0])* -57.296;                //Calculate the roll angle.
    19c4:	c3 01       	movw	r24, r6
    19c6:	b2 01       	movw	r22, r4
    19c8:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__floatsisf>
    19cc:	a7 01       	movw	r20, r14
    19ce:	96 01       	movw	r18, r12
    19d0:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__divsf3>
    19d4:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <asin>
    19d8:	6b 01       	movw	r12, r22
    19da:	7c 01       	movw	r14, r24

			//Accelerometer angle calculations
			acc_total_vector[0] = sqrt((acc_x*acc_x)+(acc_y*acc_y)+(acc_z*acc_z));           //Calculate the total accelerometer vector.

			//57.296 = 1 / (3.142 / 180) The Arduino asin function is in radiansa
			angle_pitch_acc = asin((float)acc_y/acc_total_vector[0])* 57.296;                //Calculate the pitch angle.
    19dc:	2b e1       	ldi	r18, 0x1B	; 27
    19de:	3f e2       	ldi	r19, 0x2F	; 47
    19e0:	45 e6       	ldi	r20, 0x65	; 101
    19e2:	52 e4       	ldi	r21, 0x42	; 66
    19e4:	c5 01       	movw	r24, r10
    19e6:	b4 01       	movw	r22, r8
    19e8:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__mulsf3>
			angle_roll_acc = asin((float)acc_x/acc_total_vector[0])* -57.296;                //Calculate the roll angle.
			
			angle_pitch_acc -= 2.0;
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	40 e0       	ldi	r20, 0x00	; 0
    19f2:	50 e4       	ldi	r21, 0x40	; 64
    19f4:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__subsf3>
    19f8:	4b 01       	movw	r8, r22
    19fa:	5c 01       	movw	r10, r24
    19fc:	60 93 08 03 	sts	0x0308, r22	; 0x800308 <angle_pitch_acc>
    1a00:	70 93 09 03 	sts	0x0309, r23	; 0x800309 <angle_pitch_acc+0x1>
    1a04:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <angle_pitch_acc+0x2>
    1a08:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <angle_pitch_acc+0x3>
			//Accelerometer angle calculations
			acc_total_vector[0] = sqrt((acc_x*acc_x)+(acc_y*acc_y)+(acc_z*acc_z));           //Calculate the total accelerometer vector.

			//57.296 = 1 / (3.142 / 180) The Arduino asin function is in radiansa
			angle_pitch_acc = asin((float)acc_y/acc_total_vector[0])* 57.296;                //Calculate the pitch angle.
			angle_roll_acc = asin((float)acc_x/acc_total_vector[0])* -57.296;                //Calculate the roll angle.
    1a0c:	2b e1       	ldi	r18, 0x1B	; 27
    1a0e:	3f e2       	ldi	r19, 0x2F	; 47
    1a10:	45 e6       	ldi	r20, 0x65	; 101
    1a12:	52 ec       	ldi	r21, 0xC2	; 194
    1a14:	c7 01       	movw	r24, r14
    1a16:	b6 01       	movw	r22, r12
    1a18:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__mulsf3>
			
			angle_pitch_acc -= 2.0;
			angle_roll_acc += 5.5;                                          //Accelerometer calibration value for roll.
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 eb       	ldi	r20, 0xB0	; 176
    1a22:	50 e4       	ldi	r21, 0x40	; 64
    1a24:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__addsf3>
    1a28:	6b 01       	movw	r12, r22
    1a2a:	7c 01       	movw	r14, r24
    1a2c:	60 93 0c 03 	sts	0x030C, r22	; 0x80030c <angle_roll_acc>
    1a30:	70 93 0d 03 	sts	0x030D, r23	; 0x80030d <angle_roll_acc+0x1>
    1a34:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <angle_roll_acc+0x2>
    1a38:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <angle_roll_acc+0x3>

			if(first_angle){
    1a3c:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <first_angle>
    1a40:	88 23       	and	r24, r24
    1a42:	d9 f0       	breq	.+54     	; 0x1a7a <loop+0xbe4>
				angle_pitch = angle_pitch_acc;                                                 //Set the pitch angle to the accelerometer angle.
    1a44:	80 92 04 03 	sts	0x0304, r8	; 0x800304 <angle_pitch>
    1a48:	90 92 05 03 	sts	0x0305, r9	; 0x800305 <angle_pitch+0x1>
    1a4c:	a0 92 06 03 	sts	0x0306, r10	; 0x800306 <angle_pitch+0x2>
    1a50:	b0 92 07 03 	sts	0x0307, r11	; 0x800307 <angle_pitch+0x3>
				angle_roll = angle_roll_acc;                                                   //Set the roll angle to the accelerometer angle.
    1a54:	c0 92 00 03 	sts	0x0300, r12	; 0x800300 <angle_roll>
    1a58:	d0 92 01 03 	sts	0x0301, r13	; 0x800301 <angle_roll+0x1>
    1a5c:	e0 92 02 03 	sts	0x0302, r14	; 0x800302 <angle_roll+0x2>
    1a60:	f0 92 03 03 	sts	0x0303, r15	; 0x800303 <angle_roll+0x3>
				angle_yaw =0;
    1a64:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <angle_yaw>
    1a68:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <angle_yaw+0x1>
    1a6c:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <angle_yaw+0x2>
    1a70:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <angle_yaw+0x3>
				first_angle = false;
    1a74:	10 92 fc 03 	sts	0x03FC, r1	; 0x8003fc <first_angle>
    1a78:	44 c0       	rjmp	.+136    	; 0x1b02 <loop+0xc6c>
			}
			else{
				angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;                 //Correct the drift of the gyro pitch angle with the accelerometer pitch angle.
    1a7a:	29 ec       	ldi	r18, 0xC9	; 201
    1a7c:	35 ee       	ldi	r19, 0xE5	; 229
    1a7e:	4f e7       	ldi	r20, 0x7F	; 127
    1a80:	5f e3       	ldi	r21, 0x3F	; 63
    1a82:	6d 81       	ldd	r22, Y+5	; 0x05
    1a84:	7e 81       	ldd	r23, Y+6	; 0x06
    1a86:	8f 81       	ldd	r24, Y+7	; 0x07
    1a88:	98 85       	ldd	r25, Y+8	; 0x08
    1a8a:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__mulsf3>
    1a8e:	2b 01       	movw	r4, r22
    1a90:	3c 01       	movw	r6, r24
    1a92:	27 e1       	ldi	r18, 0x17	; 23
    1a94:	37 eb       	ldi	r19, 0xB7	; 183
    1a96:	41 ed       	ldi	r20, 0xD1	; 209
    1a98:	59 e3       	ldi	r21, 0x39	; 57
    1a9a:	c5 01       	movw	r24, r10
    1a9c:	b4 01       	movw	r22, r8
    1a9e:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__mulsf3>
    1aa2:	9b 01       	movw	r18, r22
    1aa4:	ac 01       	movw	r20, r24
    1aa6:	c3 01       	movw	r24, r6
    1aa8:	b2 01       	movw	r22, r4
    1aaa:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__addsf3>
    1aae:	60 93 04 03 	sts	0x0304, r22	; 0x800304 <angle_pitch>
    1ab2:	70 93 05 03 	sts	0x0305, r23	; 0x800305 <angle_pitch+0x1>
    1ab6:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <angle_pitch+0x2>
    1aba:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <angle_pitch+0x3>
				angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;                    //Correct the drift of the gyro roll angle with the accelerometer roll angle.
    1abe:	29 ec       	ldi	r18, 0xC9	; 201
    1ac0:	35 ee       	ldi	r19, 0xE5	; 229
    1ac2:	4f e7       	ldi	r20, 0x7F	; 127
    1ac4:	5f e3       	ldi	r21, 0x3F	; 63
    1ac6:	69 85       	ldd	r22, Y+9	; 0x09
    1ac8:	7a 85       	ldd	r23, Y+10	; 0x0a
    1aca:	8b 85       	ldd	r24, Y+11	; 0x0b
    1acc:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ace:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__mulsf3>
    1ad2:	4b 01       	movw	r8, r22
    1ad4:	5c 01       	movw	r10, r24
    1ad6:	27 e1       	ldi	r18, 0x17	; 23
    1ad8:	37 eb       	ldi	r19, 0xB7	; 183
    1ada:	41 ed       	ldi	r20, 0xD1	; 209
    1adc:	59 e3       	ldi	r21, 0x39	; 57
    1ade:	c7 01       	movw	r24, r14
    1ae0:	b6 01       	movw	r22, r12
    1ae2:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__mulsf3>
    1ae6:	9b 01       	movw	r18, r22
    1ae8:	ac 01       	movw	r20, r24
    1aea:	c5 01       	movw	r24, r10
    1aec:	b4 01       	movw	r22, r8
    1aee:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__addsf3>
    1af2:	60 93 00 03 	sts	0x0300, r22	; 0x800300 <angle_roll>
    1af6:	70 93 01 03 	sts	0x0301, r23	; 0x800301 <angle_roll+0x1>
    1afa:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <angle_roll+0x2>
    1afe:	90 93 03 03 	sts	0x0303, r25	; 0x800303 <angle_roll+0x3>
			//if(loop_counter == 5)Serial.print(gyro_yaw / 65.5 ,1);
			//if(loop_counter == 6)Serial.print(" ");
			//if(loop_counter == 7)Serial.println(angle_yaw , 1);

			
			if(loop_counter == 8)Serial.print("0:");
    1b02:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <loop_counter>
    1b06:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <loop_counter+0x1>
    1b0a:	08 97       	sbiw	r24, 0x08	; 8
    1b0c:	31 f4       	brne	.+12     	; 0x1b1a <loop+0xc84>
    1b0e:	66 e9       	ldi	r22, 0x96	; 150
    1b10:	72 e0       	ldi	r23, 0x02	; 2
    1b12:	8b e2       	ldi	r24, 0x2B	; 43
    1b14:	94 e0       	ldi	r25, 0x04	; 4
    1b16:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN5Print5printEPKc>
			if(loop_counter == 9)Serial.print(angle_pitch ,2);
    1b1a:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <loop_counter>
    1b1e:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <loop_counter+0x1>
    1b22:	09 97       	sbiw	r24, 0x09	; 9
    1b24:	71 f4       	brne	.+28     	; 0x1b42 <loop+0xcac>
    1b26:	40 91 04 03 	lds	r20, 0x0304	; 0x800304 <angle_pitch>
    1b2a:	50 91 05 03 	lds	r21, 0x0305	; 0x800305 <angle_pitch+0x1>
    1b2e:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <angle_pitch+0x2>
    1b32:	70 91 07 03 	lds	r23, 0x0307	; 0x800307 <angle_pitch+0x3>
    1b36:	22 e0       	ldi	r18, 0x02	; 2
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	8b e2       	ldi	r24, 0x2B	; 43
    1b3c:	94 e0       	ldi	r25, 0x04	; 4
    1b3e:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <_ZN5Print5printEdi>
			if(loop_counter == 10)Serial.print("|1:");
    1b42:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <loop_counter>
    1b46:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <loop_counter+0x1>
    1b4a:	0a 97       	sbiw	r24, 0x0a	; 10
    1b4c:	31 f4       	brne	.+12     	; 0x1b5a <loop+0xcc4>
    1b4e:	69 e9       	ldi	r22, 0x99	; 153
    1b50:	72 e0       	ldi	r23, 0x02	; 2
    1b52:	8b e2       	ldi	r24, 0x2B	; 43
    1b54:	94 e0       	ldi	r25, 0x04	; 4
    1b56:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN5Print5printEPKc>
			if(loop_counter == 11)Serial.print(angle_roll ,2);
    1b5a:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <loop_counter>
    1b5e:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <loop_counter+0x1>
    1b62:	0b 97       	sbiw	r24, 0x0b	; 11
    1b64:	71 f4       	brne	.+28     	; 0x1b82 <loop+0xcec>
    1b66:	40 91 00 03 	lds	r20, 0x0300	; 0x800300 <angle_roll>
    1b6a:	50 91 01 03 	lds	r21, 0x0301	; 0x800301 <angle_roll+0x1>
    1b6e:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <angle_roll+0x2>
    1b72:	70 91 03 03 	lds	r23, 0x0303	; 0x800303 <angle_roll+0x3>
    1b76:	22 e0       	ldi	r18, 0x02	; 2
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	8b e2       	ldi	r24, 0x2B	; 43
    1b7c:	94 e0       	ldi	r25, 0x04	; 4
    1b7e:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <_ZN5Print5printEdi>
			if(loop_counter == 12)Serial.print("|2:");
    1b82:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <loop_counter>
    1b86:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <loop_counter+0x1>
    1b8a:	0c 97       	sbiw	r24, 0x0c	; 12
    1b8c:	31 f4       	brne	.+12     	; 0x1b9a <loop+0xd04>
    1b8e:	6d e9       	ldi	r22, 0x9D	; 157
    1b90:	72 e0       	ldi	r23, 0x02	; 2
    1b92:	8b e2       	ldi	r24, 0x2B	; 43
    1b94:	94 e0       	ldi	r25, 0x04	; 4
    1b96:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN5Print5printEPKc>
			if(loop_counter == 13)Serial.print(angle_yaw , 2);
    1b9a:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <loop_counter>
    1b9e:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <loop_counter+0x1>
    1ba2:	0d 97       	sbiw	r24, 0x0d	; 13
    1ba4:	71 f4       	brne	.+28     	; 0x1bc2 <loop+0xd2c>
    1ba6:	40 91 fc 02 	lds	r20, 0x02FC	; 0x8002fc <angle_yaw>
    1baa:	50 91 fd 02 	lds	r21, 0x02FD	; 0x8002fd <angle_yaw+0x1>
    1bae:	60 91 fe 02 	lds	r22, 0x02FE	; 0x8002fe <angle_yaw+0x2>
    1bb2:	70 91 ff 02 	lds	r23, 0x02FF	; 0x8002ff <angle_yaw+0x3>
    1bb6:	22 e0       	ldi	r18, 0x02	; 2
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	8b e2       	ldi	r24, 0x2B	; 43
    1bbc:	94 e0       	ldi	r25, 0x04	; 4
    1bbe:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <_ZN5Print5printEdi>
			if(loop_counter == 14)Serial.print("|3:");
    1bc2:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <loop_counter>
    1bc6:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <loop_counter+0x1>
    1bca:	0e 97       	sbiw	r24, 0x0e	; 14
    1bcc:	31 f4       	brne	.+12     	; 0x1bda <loop+0xd44>
    1bce:	61 ea       	ldi	r22, 0xA1	; 161
    1bd0:	72 e0       	ldi	r23, 0x02	; 2
    1bd2:	8b e2       	ldi	r24, 0x2B	; 43
    1bd4:	94 e0       	ldi	r25, 0x04	; 4
    1bd6:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_ZN5Print5printEPKc>
			if(loop_counter == 14)Serial.println(gyro_yaw / 65.5 , 2);
    1bda:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <loop_counter>
    1bde:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <loop_counter+0x1>
    1be2:	0e 97       	sbiw	r24, 0x0e	; 14
    1be4:	b1 f4       	brne	.+44     	; 0x1c12 <loop+0xd7c>
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	43 e8       	ldi	r20, 0x83	; 131
    1bec:	52 e4       	ldi	r21, 0x42	; 66
    1bee:	60 91 10 03 	lds	r22, 0x0310	; 0x800310 <gyro_yaw>
    1bf2:	70 91 11 03 	lds	r23, 0x0311	; 0x800311 <gyro_yaw+0x1>
    1bf6:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <gyro_yaw+0x2>
    1bfa:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <gyro_yaw+0x3>
    1bfe:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__divsf3>
    1c02:	ab 01       	movw	r20, r22
    1c04:	bc 01       	movw	r22, r24
    1c06:	22 e0       	ldi	r18, 0x02	; 2
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	8b e2       	ldi	r24, 0x2B	; 43
    1c0c:	94 e0       	ldi	r25, 0x04	; 4
    1c0e:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <_ZN5Print7printlnEdi>

			

			loop_counter ++;
    1c12:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <loop_counter>
    1c16:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <loop_counter+0x1>
    1c1a:	01 96       	adiw	r24, 0x01	; 1
			if(loop_counter == 15)loop_counter = 8;
    1c1c:	8f 30       	cpi	r24, 0x0F	; 15
    1c1e:	91 05       	cpc	r25, r1
    1c20:	11 f4       	brne	.+4      	; 0x1c26 <loop+0xd90>
    1c22:	88 e0       	ldi	r24, 0x08	; 8
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	90 93 d5 03 	sts	0x03D5, r25	; 0x8003d5 <loop_counter+0x1>
    1c2a:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <loop_counter>
    1c2e:	0b c0       	rjmp	.+22     	; 0x1c46 <loop+0xdb0>
			print_signals();                                                                  //Print the receiver values on the serial monitor.
			loop_counter = 0;                                                                 //Reset the loop_counter variable.
		}

		//For starting the motors: throttle low and yaw left (step 1).
		if(receiver_input_channel_3 < 1050 && receiver_input_channel_4 < 1050)start = 1;
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <start>
    1c36:	c3 ca       	rjmp	.-2682   	; 0x11be <loop+0x328>
		//When yaw stick is back in the center position start the motors (step 2).
		if(start == 1 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1450)start = 2;
    1c38:	82 e0       	ldi	r24, 0x02	; 2
    1c3a:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <start>
    1c3e:	d2 ca       	rjmp	.-2652   	; 0x11e4 <loop+0x34e>
		//Stopping the motors: throttle low and yaw right.
		if(start == 2 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1950)start = 0;
    1c40:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <start>
    1c44:	e2 ca       	rjmp	.-2620   	; 0x120a <loop+0x374>
			loop_counter ++;
			if(loop_counter == 15)loop_counter = 8;
			
		}
	}
}
    1c46:	2c 96       	adiw	r28, 0x0c	; 12
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	f8 94       	cli
    1c4c:	de bf       	out	0x3e, r29	; 62
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	cd bf       	out	0x3d, r28	; 61
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	1f 91       	pop	r17
    1c58:	0f 91       	pop	r16
    1c5a:	ff 90       	pop	r15
    1c5c:	ef 90       	pop	r14
    1c5e:	df 90       	pop	r13
    1c60:	cf 90       	pop	r12
    1c62:	bf 90       	pop	r11
    1c64:	af 90       	pop	r10
    1c66:	9f 90       	pop	r9
    1c68:	8f 90       	pop	r8
    1c6a:	7f 90       	pop	r7
    1c6c:	6f 90       	pop	r6
    1c6e:	5f 90       	pop	r5
    1c70:	4f 90       	pop	r4
    1c72:	08 95       	ret

00001c74 <__subsf3>:
    1c74:	50 58       	subi	r21, 0x80	; 128

00001c76 <__addsf3>:
    1c76:	bb 27       	eor	r27, r27
    1c78:	aa 27       	eor	r26, r26
    1c7a:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__addsf3x>
    1c7e:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__fp_round>
    1c82:	0e 94 0b 10 	call	0x2016	; 0x2016 <__fp_pscA>
    1c86:	38 f0       	brcs	.+14     	; 0x1c96 <__addsf3+0x20>
    1c88:	0e 94 12 10 	call	0x2024	; 0x2024 <__fp_pscB>
    1c8c:	20 f0       	brcs	.+8      	; 0x1c96 <__addsf3+0x20>
    1c8e:	39 f4       	brne	.+14     	; 0x1c9e <__addsf3+0x28>
    1c90:	9f 3f       	cpi	r25, 0xFF	; 255
    1c92:	19 f4       	brne	.+6      	; 0x1c9a <__addsf3+0x24>
    1c94:	26 f4       	brtc	.+8      	; 0x1c9e <__addsf3+0x28>
    1c96:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__fp_nan>
    1c9a:	0e f4       	brtc	.+2      	; 0x1c9e <__addsf3+0x28>
    1c9c:	e0 95       	com	r30
    1c9e:	e7 fb       	bst	r30, 7
    1ca0:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__fp_inf>

00001ca4 <__addsf3x>:
    1ca4:	e9 2f       	mov	r30, r25
    1ca6:	0e 94 2a 10 	call	0x2054	; 0x2054 <__fp_split3>
    1caa:	58 f3       	brcs	.-42     	; 0x1c82 <__addsf3+0xc>
    1cac:	ba 17       	cp	r27, r26
    1cae:	62 07       	cpc	r22, r18
    1cb0:	73 07       	cpc	r23, r19
    1cb2:	84 07       	cpc	r24, r20
    1cb4:	95 07       	cpc	r25, r21
    1cb6:	20 f0       	brcs	.+8      	; 0x1cc0 <__addsf3x+0x1c>
    1cb8:	79 f4       	brne	.+30     	; 0x1cd8 <__addsf3x+0x34>
    1cba:	a6 f5       	brtc	.+104    	; 0x1d24 <__addsf3x+0x80>
    1cbc:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <__fp_zero>
    1cc0:	0e f4       	brtc	.+2      	; 0x1cc4 <__addsf3x+0x20>
    1cc2:	e0 95       	com	r30
    1cc4:	0b 2e       	mov	r0, r27
    1cc6:	ba 2f       	mov	r27, r26
    1cc8:	a0 2d       	mov	r26, r0
    1cca:	0b 01       	movw	r0, r22
    1ccc:	b9 01       	movw	r22, r18
    1cce:	90 01       	movw	r18, r0
    1cd0:	0c 01       	movw	r0, r24
    1cd2:	ca 01       	movw	r24, r20
    1cd4:	a0 01       	movw	r20, r0
    1cd6:	11 24       	eor	r1, r1
    1cd8:	ff 27       	eor	r31, r31
    1cda:	59 1b       	sub	r21, r25
    1cdc:	99 f0       	breq	.+38     	; 0x1d04 <__addsf3x+0x60>
    1cde:	59 3f       	cpi	r21, 0xF9	; 249
    1ce0:	50 f4       	brcc	.+20     	; 0x1cf6 <__addsf3x+0x52>
    1ce2:	50 3e       	cpi	r21, 0xE0	; 224
    1ce4:	68 f1       	brcs	.+90     	; 0x1d40 <__addsf3x+0x9c>
    1ce6:	1a 16       	cp	r1, r26
    1ce8:	f0 40       	sbci	r31, 0x00	; 0
    1cea:	a2 2f       	mov	r26, r18
    1cec:	23 2f       	mov	r18, r19
    1cee:	34 2f       	mov	r19, r20
    1cf0:	44 27       	eor	r20, r20
    1cf2:	58 5f       	subi	r21, 0xF8	; 248
    1cf4:	f3 cf       	rjmp	.-26     	; 0x1cdc <__addsf3x+0x38>
    1cf6:	46 95       	lsr	r20
    1cf8:	37 95       	ror	r19
    1cfa:	27 95       	ror	r18
    1cfc:	a7 95       	ror	r26
    1cfe:	f0 40       	sbci	r31, 0x00	; 0
    1d00:	53 95       	inc	r21
    1d02:	c9 f7       	brne	.-14     	; 0x1cf6 <__addsf3x+0x52>
    1d04:	7e f4       	brtc	.+30     	; 0x1d24 <__addsf3x+0x80>
    1d06:	1f 16       	cp	r1, r31
    1d08:	ba 0b       	sbc	r27, r26
    1d0a:	62 0b       	sbc	r22, r18
    1d0c:	73 0b       	sbc	r23, r19
    1d0e:	84 0b       	sbc	r24, r20
    1d10:	ba f0       	brmi	.+46     	; 0x1d40 <__addsf3x+0x9c>
    1d12:	91 50       	subi	r25, 0x01	; 1
    1d14:	a1 f0       	breq	.+40     	; 0x1d3e <__addsf3x+0x9a>
    1d16:	ff 0f       	add	r31, r31
    1d18:	bb 1f       	adc	r27, r27
    1d1a:	66 1f       	adc	r22, r22
    1d1c:	77 1f       	adc	r23, r23
    1d1e:	88 1f       	adc	r24, r24
    1d20:	c2 f7       	brpl	.-16     	; 0x1d12 <__addsf3x+0x6e>
    1d22:	0e c0       	rjmp	.+28     	; 0x1d40 <__addsf3x+0x9c>
    1d24:	ba 0f       	add	r27, r26
    1d26:	62 1f       	adc	r22, r18
    1d28:	73 1f       	adc	r23, r19
    1d2a:	84 1f       	adc	r24, r20
    1d2c:	48 f4       	brcc	.+18     	; 0x1d40 <__addsf3x+0x9c>
    1d2e:	87 95       	ror	r24
    1d30:	77 95       	ror	r23
    1d32:	67 95       	ror	r22
    1d34:	b7 95       	ror	r27
    1d36:	f7 95       	ror	r31
    1d38:	9e 3f       	cpi	r25, 0xFE	; 254
    1d3a:	08 f0       	brcs	.+2      	; 0x1d3e <__addsf3x+0x9a>
    1d3c:	b0 cf       	rjmp	.-160    	; 0x1c9e <__addsf3+0x28>
    1d3e:	93 95       	inc	r25
    1d40:	88 0f       	add	r24, r24
    1d42:	08 f0       	brcs	.+2      	; 0x1d46 <__addsf3x+0xa2>
    1d44:	99 27       	eor	r25, r25
    1d46:	ee 0f       	add	r30, r30
    1d48:	97 95       	ror	r25
    1d4a:	87 95       	ror	r24
    1d4c:	08 95       	ret

00001d4e <asin>:
    1d4e:	9f 93       	push	r25
    1d50:	9f 77       	andi	r25, 0x7F	; 127
    1d52:	ee e3       	ldi	r30, 0x3E	; 62
    1d54:	89 37       	cpi	r24, 0x79	; 121
    1d56:	9e 07       	cpc	r25, r30
    1d58:	28 f4       	brcc	.+10     	; 0x1d64 <asin+0x16>
    1d5a:	e8 e6       	ldi	r30, 0x68	; 104
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__fp_powsodd>
    1d62:	0c c0       	rjmp	.+24     	; 0x1d7c <asin+0x2e>
    1d64:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__fp_arccos>
    1d68:	90 58       	subi	r25, 0x80	; 128
    1d6a:	a2 ea       	ldi	r26, 0xA2	; 162
    1d6c:	2a ed       	ldi	r18, 0xDA	; 218
    1d6e:	3f e0       	ldi	r19, 0x0F	; 15
    1d70:	49 ec       	ldi	r20, 0xC9	; 201
    1d72:	5f e3       	ldi	r21, 0x3F	; 63
    1d74:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__addsf3x>
    1d78:	0e 94 19 10 	call	0x2032	; 0x2032 <__fp_round>
    1d7c:	0f 90       	pop	r0
    1d7e:	07 fc       	sbrc	r0, 7
    1d80:	90 58       	subi	r25, 0x80	; 128
    1d82:	08 95       	ret

00001d84 <__divsf3>:
    1d84:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__divsf3x>
    1d88:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__fp_round>
    1d8c:	0e 94 12 10 	call	0x2024	; 0x2024 <__fp_pscB>
    1d90:	58 f0       	brcs	.+22     	; 0x1da8 <__divsf3+0x24>
    1d92:	0e 94 0b 10 	call	0x2016	; 0x2016 <__fp_pscA>
    1d96:	40 f0       	brcs	.+16     	; 0x1da8 <__divsf3+0x24>
    1d98:	29 f4       	brne	.+10     	; 0x1da4 <__divsf3+0x20>
    1d9a:	5f 3f       	cpi	r21, 0xFF	; 255
    1d9c:	29 f0       	breq	.+10     	; 0x1da8 <__divsf3+0x24>
    1d9e:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__fp_inf>
    1da2:	51 11       	cpse	r21, r1
    1da4:	0c 94 4d 10 	jmp	0x209a	; 0x209a <__fp_szero>
    1da8:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__fp_nan>

00001dac <__divsf3x>:
    1dac:	0e 94 2a 10 	call	0x2054	; 0x2054 <__fp_split3>
    1db0:	68 f3       	brcs	.-38     	; 0x1d8c <__divsf3+0x8>

00001db2 <__divsf3_pse>:
    1db2:	99 23       	and	r25, r25
    1db4:	b1 f3       	breq	.-20     	; 0x1da2 <__divsf3+0x1e>
    1db6:	55 23       	and	r21, r21
    1db8:	91 f3       	breq	.-28     	; 0x1d9e <__divsf3+0x1a>
    1dba:	95 1b       	sub	r25, r21
    1dbc:	55 0b       	sbc	r21, r21
    1dbe:	bb 27       	eor	r27, r27
    1dc0:	aa 27       	eor	r26, r26
    1dc2:	62 17       	cp	r22, r18
    1dc4:	73 07       	cpc	r23, r19
    1dc6:	84 07       	cpc	r24, r20
    1dc8:	38 f0       	brcs	.+14     	; 0x1dd8 <__divsf3_pse+0x26>
    1dca:	9f 5f       	subi	r25, 0xFF	; 255
    1dcc:	5f 4f       	sbci	r21, 0xFF	; 255
    1dce:	22 0f       	add	r18, r18
    1dd0:	33 1f       	adc	r19, r19
    1dd2:	44 1f       	adc	r20, r20
    1dd4:	aa 1f       	adc	r26, r26
    1dd6:	a9 f3       	breq	.-22     	; 0x1dc2 <__divsf3_pse+0x10>
    1dd8:	35 d0       	rcall	.+106    	; 0x1e44 <__divsf3_pse+0x92>
    1dda:	0e 2e       	mov	r0, r30
    1ddc:	3a f0       	brmi	.+14     	; 0x1dec <__divsf3_pse+0x3a>
    1dde:	e0 e8       	ldi	r30, 0x80	; 128
    1de0:	32 d0       	rcall	.+100    	; 0x1e46 <__divsf3_pse+0x94>
    1de2:	91 50       	subi	r25, 0x01	; 1
    1de4:	50 40       	sbci	r21, 0x00	; 0
    1de6:	e6 95       	lsr	r30
    1de8:	00 1c       	adc	r0, r0
    1dea:	ca f7       	brpl	.-14     	; 0x1dde <__divsf3_pse+0x2c>
    1dec:	2b d0       	rcall	.+86     	; 0x1e44 <__divsf3_pse+0x92>
    1dee:	fe 2f       	mov	r31, r30
    1df0:	29 d0       	rcall	.+82     	; 0x1e44 <__divsf3_pse+0x92>
    1df2:	66 0f       	add	r22, r22
    1df4:	77 1f       	adc	r23, r23
    1df6:	88 1f       	adc	r24, r24
    1df8:	bb 1f       	adc	r27, r27
    1dfa:	26 17       	cp	r18, r22
    1dfc:	37 07       	cpc	r19, r23
    1dfe:	48 07       	cpc	r20, r24
    1e00:	ab 07       	cpc	r26, r27
    1e02:	b0 e8       	ldi	r27, 0x80	; 128
    1e04:	09 f0       	breq	.+2      	; 0x1e08 <__divsf3_pse+0x56>
    1e06:	bb 0b       	sbc	r27, r27
    1e08:	80 2d       	mov	r24, r0
    1e0a:	bf 01       	movw	r22, r30
    1e0c:	ff 27       	eor	r31, r31
    1e0e:	93 58       	subi	r25, 0x83	; 131
    1e10:	5f 4f       	sbci	r21, 0xFF	; 255
    1e12:	3a f0       	brmi	.+14     	; 0x1e22 <__divsf3_pse+0x70>
    1e14:	9e 3f       	cpi	r25, 0xFE	; 254
    1e16:	51 05       	cpc	r21, r1
    1e18:	78 f0       	brcs	.+30     	; 0x1e38 <__divsf3_pse+0x86>
    1e1a:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__fp_inf>
    1e1e:	0c 94 4d 10 	jmp	0x209a	; 0x209a <__fp_szero>
    1e22:	5f 3f       	cpi	r21, 0xFF	; 255
    1e24:	e4 f3       	brlt	.-8      	; 0x1e1e <__divsf3_pse+0x6c>
    1e26:	98 3e       	cpi	r25, 0xE8	; 232
    1e28:	d4 f3       	brlt	.-12     	; 0x1e1e <__divsf3_pse+0x6c>
    1e2a:	86 95       	lsr	r24
    1e2c:	77 95       	ror	r23
    1e2e:	67 95       	ror	r22
    1e30:	b7 95       	ror	r27
    1e32:	f7 95       	ror	r31
    1e34:	9f 5f       	subi	r25, 0xFF	; 255
    1e36:	c9 f7       	brne	.-14     	; 0x1e2a <__divsf3_pse+0x78>
    1e38:	88 0f       	add	r24, r24
    1e3a:	91 1d       	adc	r25, r1
    1e3c:	96 95       	lsr	r25
    1e3e:	87 95       	ror	r24
    1e40:	97 f9       	bld	r25, 7
    1e42:	08 95       	ret
    1e44:	e1 e0       	ldi	r30, 0x01	; 1
    1e46:	66 0f       	add	r22, r22
    1e48:	77 1f       	adc	r23, r23
    1e4a:	88 1f       	adc	r24, r24
    1e4c:	bb 1f       	adc	r27, r27
    1e4e:	62 17       	cp	r22, r18
    1e50:	73 07       	cpc	r23, r19
    1e52:	84 07       	cpc	r24, r20
    1e54:	ba 07       	cpc	r27, r26
    1e56:	20 f0       	brcs	.+8      	; 0x1e60 <__divsf3_pse+0xae>
    1e58:	62 1b       	sub	r22, r18
    1e5a:	73 0b       	sbc	r23, r19
    1e5c:	84 0b       	sbc	r24, r20
    1e5e:	ba 0b       	sbc	r27, r26
    1e60:	ee 1f       	adc	r30, r30
    1e62:	88 f7       	brcc	.-30     	; 0x1e46 <__divsf3_pse+0x94>
    1e64:	e0 95       	com	r30
    1e66:	08 95       	ret

00001e68 <__fixsfsi>:
    1e68:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__fixunssfsi>
    1e6c:	68 94       	set
    1e6e:	b1 11       	cpse	r27, r1
    1e70:	0c 94 4d 10 	jmp	0x209a	; 0x209a <__fp_szero>
    1e74:	08 95       	ret

00001e76 <__fixunssfsi>:
    1e76:	0e 94 32 10 	call	0x2064	; 0x2064 <__fp_splitA>
    1e7a:	88 f0       	brcs	.+34     	; 0x1e9e <__fixunssfsi+0x28>
    1e7c:	9f 57       	subi	r25, 0x7F	; 127
    1e7e:	98 f0       	brcs	.+38     	; 0x1ea6 <__fixunssfsi+0x30>
    1e80:	b9 2f       	mov	r27, r25
    1e82:	99 27       	eor	r25, r25
    1e84:	b7 51       	subi	r27, 0x17	; 23
    1e86:	b0 f0       	brcs	.+44     	; 0x1eb4 <__fixunssfsi+0x3e>
    1e88:	e1 f0       	breq	.+56     	; 0x1ec2 <__fixunssfsi+0x4c>
    1e8a:	66 0f       	add	r22, r22
    1e8c:	77 1f       	adc	r23, r23
    1e8e:	88 1f       	adc	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	1a f0       	brmi	.+6      	; 0x1e9a <__fixunssfsi+0x24>
    1e94:	ba 95       	dec	r27
    1e96:	c9 f7       	brne	.-14     	; 0x1e8a <__fixunssfsi+0x14>
    1e98:	14 c0       	rjmp	.+40     	; 0x1ec2 <__fixunssfsi+0x4c>
    1e9a:	b1 30       	cpi	r27, 0x01	; 1
    1e9c:	91 f0       	breq	.+36     	; 0x1ec2 <__fixunssfsi+0x4c>
    1e9e:	0e 94 4c 10 	call	0x2098	; 0x2098 <__fp_zero>
    1ea2:	b1 e0       	ldi	r27, 0x01	; 1
    1ea4:	08 95       	ret
    1ea6:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <__fp_zero>
    1eaa:	67 2f       	mov	r22, r23
    1eac:	78 2f       	mov	r23, r24
    1eae:	88 27       	eor	r24, r24
    1eb0:	b8 5f       	subi	r27, 0xF8	; 248
    1eb2:	39 f0       	breq	.+14     	; 0x1ec2 <__fixunssfsi+0x4c>
    1eb4:	b9 3f       	cpi	r27, 0xF9	; 249
    1eb6:	cc f3       	brlt	.-14     	; 0x1eaa <__fixunssfsi+0x34>
    1eb8:	86 95       	lsr	r24
    1eba:	77 95       	ror	r23
    1ebc:	67 95       	ror	r22
    1ebe:	b3 95       	inc	r27
    1ec0:	d9 f7       	brne	.-10     	; 0x1eb8 <__fixunssfsi+0x42>
    1ec2:	3e f4       	brtc	.+14     	; 0x1ed2 <__fixunssfsi+0x5c>
    1ec4:	90 95       	com	r25
    1ec6:	80 95       	com	r24
    1ec8:	70 95       	com	r23
    1eca:	61 95       	neg	r22
    1ecc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ece:	8f 4f       	sbci	r24, 0xFF	; 255
    1ed0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed2:	08 95       	ret

00001ed4 <__floatunsisf>:
    1ed4:	e8 94       	clt
    1ed6:	09 c0       	rjmp	.+18     	; 0x1eea <__floatsisf+0x12>

00001ed8 <__floatsisf>:
    1ed8:	97 fb       	bst	r25, 7
    1eda:	3e f4       	brtc	.+14     	; 0x1eea <__floatsisf+0x12>
    1edc:	90 95       	com	r25
    1ede:	80 95       	com	r24
    1ee0:	70 95       	com	r23
    1ee2:	61 95       	neg	r22
    1ee4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ee8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eea:	99 23       	and	r25, r25
    1eec:	a9 f0       	breq	.+42     	; 0x1f18 <__floatsisf+0x40>
    1eee:	f9 2f       	mov	r31, r25
    1ef0:	96 e9       	ldi	r25, 0x96	; 150
    1ef2:	bb 27       	eor	r27, r27
    1ef4:	93 95       	inc	r25
    1ef6:	f6 95       	lsr	r31
    1ef8:	87 95       	ror	r24
    1efa:	77 95       	ror	r23
    1efc:	67 95       	ror	r22
    1efe:	b7 95       	ror	r27
    1f00:	f1 11       	cpse	r31, r1
    1f02:	f8 cf       	rjmp	.-16     	; 0x1ef4 <__floatsisf+0x1c>
    1f04:	fa f4       	brpl	.+62     	; 0x1f44 <__floatsisf+0x6c>
    1f06:	bb 0f       	add	r27, r27
    1f08:	11 f4       	brne	.+4      	; 0x1f0e <__floatsisf+0x36>
    1f0a:	60 ff       	sbrs	r22, 0
    1f0c:	1b c0       	rjmp	.+54     	; 0x1f44 <__floatsisf+0x6c>
    1f0e:	6f 5f       	subi	r22, 0xFF	; 255
    1f10:	7f 4f       	sbci	r23, 0xFF	; 255
    1f12:	8f 4f       	sbci	r24, 0xFF	; 255
    1f14:	9f 4f       	sbci	r25, 0xFF	; 255
    1f16:	16 c0       	rjmp	.+44     	; 0x1f44 <__floatsisf+0x6c>
    1f18:	88 23       	and	r24, r24
    1f1a:	11 f0       	breq	.+4      	; 0x1f20 <__floatsisf+0x48>
    1f1c:	96 e9       	ldi	r25, 0x96	; 150
    1f1e:	11 c0       	rjmp	.+34     	; 0x1f42 <__floatsisf+0x6a>
    1f20:	77 23       	and	r23, r23
    1f22:	21 f0       	breq	.+8      	; 0x1f2c <__floatsisf+0x54>
    1f24:	9e e8       	ldi	r25, 0x8E	; 142
    1f26:	87 2f       	mov	r24, r23
    1f28:	76 2f       	mov	r23, r22
    1f2a:	05 c0       	rjmp	.+10     	; 0x1f36 <__floatsisf+0x5e>
    1f2c:	66 23       	and	r22, r22
    1f2e:	71 f0       	breq	.+28     	; 0x1f4c <__floatsisf+0x74>
    1f30:	96 e8       	ldi	r25, 0x86	; 134
    1f32:	86 2f       	mov	r24, r22
    1f34:	70 e0       	ldi	r23, 0x00	; 0
    1f36:	60 e0       	ldi	r22, 0x00	; 0
    1f38:	2a f0       	brmi	.+10     	; 0x1f44 <__floatsisf+0x6c>
    1f3a:	9a 95       	dec	r25
    1f3c:	66 0f       	add	r22, r22
    1f3e:	77 1f       	adc	r23, r23
    1f40:	88 1f       	adc	r24, r24
    1f42:	da f7       	brpl	.-10     	; 0x1f3a <__floatsisf+0x62>
    1f44:	88 0f       	add	r24, r24
    1f46:	96 95       	lsr	r25
    1f48:	87 95       	ror	r24
    1f4a:	97 f9       	bld	r25, 7
    1f4c:	08 95       	ret

00001f4e <__fp_arccos>:
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	1f 93       	push	r17
    1f54:	0f 93       	push	r16
    1f56:	8b 01       	movw	r16, r22
    1f58:	ec 01       	movw	r28, r24
    1f5a:	ec e7       	ldi	r30, 0x7C	; 124
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__fp_powser>
    1f62:	0e 94 19 10 	call	0x2032	; 0x2032 <__fp_round>
    1f66:	98 01       	movw	r18, r16
    1f68:	ae 01       	movw	r20, r28
    1f6a:	8b 01       	movw	r16, r22
    1f6c:	ec 01       	movw	r28, r24
    1f6e:	60 e0       	ldi	r22, 0x00	; 0
    1f70:	70 e0       	ldi	r23, 0x00	; 0
    1f72:	80 e8       	ldi	r24, 0x80	; 128
    1f74:	9f e3       	ldi	r25, 0x3F	; 63
    1f76:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__subsf3>
    1f7a:	0e 94 ce 10 	call	0x219c	; 0x219c <sqrt>
    1f7e:	98 01       	movw	r18, r16
    1f80:	ae 01       	movw	r20, r28
    1f82:	0f 91       	pop	r16
    1f84:	1f 91       	pop	r17
    1f86:	cf 91       	pop	r28
    1f88:	df 91       	pop	r29
    1f8a:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__mulsf3x>

00001f8e <__fp_inf>:
    1f8e:	97 f9       	bld	r25, 7
    1f90:	9f 67       	ori	r25, 0x7F	; 127
    1f92:	80 e8       	ldi	r24, 0x80	; 128
    1f94:	70 e0       	ldi	r23, 0x00	; 0
    1f96:	60 e0       	ldi	r22, 0x00	; 0
    1f98:	08 95       	ret

00001f9a <__fp_nan>:
    1f9a:	9f ef       	ldi	r25, 0xFF	; 255
    1f9c:	80 ec       	ldi	r24, 0xC0	; 192
    1f9e:	08 95       	ret

00001fa0 <__fp_powser>:
    1fa0:	df 93       	push	r29
    1fa2:	cf 93       	push	r28
    1fa4:	1f 93       	push	r17
    1fa6:	0f 93       	push	r16
    1fa8:	ff 92       	push	r15
    1faa:	ef 92       	push	r14
    1fac:	df 92       	push	r13
    1fae:	7b 01       	movw	r14, r22
    1fb0:	8c 01       	movw	r16, r24
    1fb2:	68 94       	set
    1fb4:	06 c0       	rjmp	.+12     	; 0x1fc2 <__fp_powser+0x22>
    1fb6:	da 2e       	mov	r13, r26
    1fb8:	ef 01       	movw	r28, r30
    1fba:	0e 94 66 10 	call	0x20cc	; 0x20cc <__mulsf3x>
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	e8 94       	clt
    1fc2:	a5 91       	lpm	r26, Z+
    1fc4:	25 91       	lpm	r18, Z+
    1fc6:	35 91       	lpm	r19, Z+
    1fc8:	45 91       	lpm	r20, Z+
    1fca:	55 91       	lpm	r21, Z+
    1fcc:	a6 f3       	brts	.-24     	; 0x1fb6 <__fp_powser+0x16>
    1fce:	ef 01       	movw	r28, r30
    1fd0:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__addsf3x>
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	97 01       	movw	r18, r14
    1fd8:	a8 01       	movw	r20, r16
    1fda:	da 94       	dec	r13
    1fdc:	69 f7       	brne	.-38     	; 0x1fb8 <__fp_powser+0x18>
    1fde:	df 90       	pop	r13
    1fe0:	ef 90       	pop	r14
    1fe2:	ff 90       	pop	r15
    1fe4:	0f 91       	pop	r16
    1fe6:	1f 91       	pop	r17
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <__fp_powsodd>:
    1fee:	9f 93       	push	r25
    1ff0:	8f 93       	push	r24
    1ff2:	7f 93       	push	r23
    1ff4:	6f 93       	push	r22
    1ff6:	ff 93       	push	r31
    1ff8:	ef 93       	push	r30
    1ffa:	9b 01       	movw	r18, r22
    1ffc:	ac 01       	movw	r20, r24
    1ffe:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__mulsf3>
    2002:	ef 91       	pop	r30
    2004:	ff 91       	pop	r31
    2006:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__fp_powser>
    200a:	2f 91       	pop	r18
    200c:	3f 91       	pop	r19
    200e:	4f 91       	pop	r20
    2010:	5f 91       	pop	r21
    2012:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <__mulsf3>

00002016 <__fp_pscA>:
    2016:	00 24       	eor	r0, r0
    2018:	0a 94       	dec	r0
    201a:	16 16       	cp	r1, r22
    201c:	17 06       	cpc	r1, r23
    201e:	18 06       	cpc	r1, r24
    2020:	09 06       	cpc	r0, r25
    2022:	08 95       	ret

00002024 <__fp_pscB>:
    2024:	00 24       	eor	r0, r0
    2026:	0a 94       	dec	r0
    2028:	12 16       	cp	r1, r18
    202a:	13 06       	cpc	r1, r19
    202c:	14 06       	cpc	r1, r20
    202e:	05 06       	cpc	r0, r21
    2030:	08 95       	ret

00002032 <__fp_round>:
    2032:	09 2e       	mov	r0, r25
    2034:	03 94       	inc	r0
    2036:	00 0c       	add	r0, r0
    2038:	11 f4       	brne	.+4      	; 0x203e <__fp_round+0xc>
    203a:	88 23       	and	r24, r24
    203c:	52 f0       	brmi	.+20     	; 0x2052 <__fp_round+0x20>
    203e:	bb 0f       	add	r27, r27
    2040:	40 f4       	brcc	.+16     	; 0x2052 <__fp_round+0x20>
    2042:	bf 2b       	or	r27, r31
    2044:	11 f4       	brne	.+4      	; 0x204a <__fp_round+0x18>
    2046:	60 ff       	sbrs	r22, 0
    2048:	04 c0       	rjmp	.+8      	; 0x2052 <__fp_round+0x20>
    204a:	6f 5f       	subi	r22, 0xFF	; 255
    204c:	7f 4f       	sbci	r23, 0xFF	; 255
    204e:	8f 4f       	sbci	r24, 0xFF	; 255
    2050:	9f 4f       	sbci	r25, 0xFF	; 255
    2052:	08 95       	ret

00002054 <__fp_split3>:
    2054:	57 fd       	sbrc	r21, 7
    2056:	90 58       	subi	r25, 0x80	; 128
    2058:	44 0f       	add	r20, r20
    205a:	55 1f       	adc	r21, r21
    205c:	59 f0       	breq	.+22     	; 0x2074 <__fp_splitA+0x10>
    205e:	5f 3f       	cpi	r21, 0xFF	; 255
    2060:	71 f0       	breq	.+28     	; 0x207e <__fp_splitA+0x1a>
    2062:	47 95       	ror	r20

00002064 <__fp_splitA>:
    2064:	88 0f       	add	r24, r24
    2066:	97 fb       	bst	r25, 7
    2068:	99 1f       	adc	r25, r25
    206a:	61 f0       	breq	.+24     	; 0x2084 <__fp_splitA+0x20>
    206c:	9f 3f       	cpi	r25, 0xFF	; 255
    206e:	79 f0       	breq	.+30     	; 0x208e <__fp_splitA+0x2a>
    2070:	87 95       	ror	r24
    2072:	08 95       	ret
    2074:	12 16       	cp	r1, r18
    2076:	13 06       	cpc	r1, r19
    2078:	14 06       	cpc	r1, r20
    207a:	55 1f       	adc	r21, r21
    207c:	f2 cf       	rjmp	.-28     	; 0x2062 <__fp_split3+0xe>
    207e:	46 95       	lsr	r20
    2080:	f1 df       	rcall	.-30     	; 0x2064 <__fp_splitA>
    2082:	08 c0       	rjmp	.+16     	; 0x2094 <__fp_splitA+0x30>
    2084:	16 16       	cp	r1, r22
    2086:	17 06       	cpc	r1, r23
    2088:	18 06       	cpc	r1, r24
    208a:	99 1f       	adc	r25, r25
    208c:	f1 cf       	rjmp	.-30     	; 0x2070 <__fp_splitA+0xc>
    208e:	86 95       	lsr	r24
    2090:	71 05       	cpc	r23, r1
    2092:	61 05       	cpc	r22, r1
    2094:	08 94       	sec
    2096:	08 95       	ret

00002098 <__fp_zero>:
    2098:	e8 94       	clt

0000209a <__fp_szero>:
    209a:	bb 27       	eor	r27, r27
    209c:	66 27       	eor	r22, r22
    209e:	77 27       	eor	r23, r23
    20a0:	cb 01       	movw	r24, r22
    20a2:	97 f9       	bld	r25, 7
    20a4:	08 95       	ret

000020a6 <__mulsf3>:
    20a6:	0e 94 66 10 	call	0x20cc	; 0x20cc <__mulsf3x>
    20aa:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__fp_round>
    20ae:	0e 94 0b 10 	call	0x2016	; 0x2016 <__fp_pscA>
    20b2:	38 f0       	brcs	.+14     	; 0x20c2 <__mulsf3+0x1c>
    20b4:	0e 94 12 10 	call	0x2024	; 0x2024 <__fp_pscB>
    20b8:	20 f0       	brcs	.+8      	; 0x20c2 <__mulsf3+0x1c>
    20ba:	95 23       	and	r25, r21
    20bc:	11 f0       	breq	.+4      	; 0x20c2 <__mulsf3+0x1c>
    20be:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__fp_inf>
    20c2:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__fp_nan>
    20c6:	11 24       	eor	r1, r1
    20c8:	0c 94 4d 10 	jmp	0x209a	; 0x209a <__fp_szero>

000020cc <__mulsf3x>:
    20cc:	0e 94 2a 10 	call	0x2054	; 0x2054 <__fp_split3>
    20d0:	70 f3       	brcs	.-36     	; 0x20ae <__mulsf3+0x8>

000020d2 <__mulsf3_pse>:
    20d2:	95 9f       	mul	r25, r21
    20d4:	c1 f3       	breq	.-16     	; 0x20c6 <__mulsf3+0x20>
    20d6:	95 0f       	add	r25, r21
    20d8:	50 e0       	ldi	r21, 0x00	; 0
    20da:	55 1f       	adc	r21, r21
    20dc:	62 9f       	mul	r22, r18
    20de:	f0 01       	movw	r30, r0
    20e0:	72 9f       	mul	r23, r18
    20e2:	bb 27       	eor	r27, r27
    20e4:	f0 0d       	add	r31, r0
    20e6:	b1 1d       	adc	r27, r1
    20e8:	63 9f       	mul	r22, r19
    20ea:	aa 27       	eor	r26, r26
    20ec:	f0 0d       	add	r31, r0
    20ee:	b1 1d       	adc	r27, r1
    20f0:	aa 1f       	adc	r26, r26
    20f2:	64 9f       	mul	r22, r20
    20f4:	66 27       	eor	r22, r22
    20f6:	b0 0d       	add	r27, r0
    20f8:	a1 1d       	adc	r26, r1
    20fa:	66 1f       	adc	r22, r22
    20fc:	82 9f       	mul	r24, r18
    20fe:	22 27       	eor	r18, r18
    2100:	b0 0d       	add	r27, r0
    2102:	a1 1d       	adc	r26, r1
    2104:	62 1f       	adc	r22, r18
    2106:	73 9f       	mul	r23, r19
    2108:	b0 0d       	add	r27, r0
    210a:	a1 1d       	adc	r26, r1
    210c:	62 1f       	adc	r22, r18
    210e:	83 9f       	mul	r24, r19
    2110:	a0 0d       	add	r26, r0
    2112:	61 1d       	adc	r22, r1
    2114:	22 1f       	adc	r18, r18
    2116:	74 9f       	mul	r23, r20
    2118:	33 27       	eor	r19, r19
    211a:	a0 0d       	add	r26, r0
    211c:	61 1d       	adc	r22, r1
    211e:	23 1f       	adc	r18, r19
    2120:	84 9f       	mul	r24, r20
    2122:	60 0d       	add	r22, r0
    2124:	21 1d       	adc	r18, r1
    2126:	82 2f       	mov	r24, r18
    2128:	76 2f       	mov	r23, r22
    212a:	6a 2f       	mov	r22, r26
    212c:	11 24       	eor	r1, r1
    212e:	9f 57       	subi	r25, 0x7F	; 127
    2130:	50 40       	sbci	r21, 0x00	; 0
    2132:	9a f0       	brmi	.+38     	; 0x215a <__mulsf3_pse+0x88>
    2134:	f1 f0       	breq	.+60     	; 0x2172 <__mulsf3_pse+0xa0>
    2136:	88 23       	and	r24, r24
    2138:	4a f0       	brmi	.+18     	; 0x214c <__mulsf3_pse+0x7a>
    213a:	ee 0f       	add	r30, r30
    213c:	ff 1f       	adc	r31, r31
    213e:	bb 1f       	adc	r27, r27
    2140:	66 1f       	adc	r22, r22
    2142:	77 1f       	adc	r23, r23
    2144:	88 1f       	adc	r24, r24
    2146:	91 50       	subi	r25, 0x01	; 1
    2148:	50 40       	sbci	r21, 0x00	; 0
    214a:	a9 f7       	brne	.-22     	; 0x2136 <__mulsf3_pse+0x64>
    214c:	9e 3f       	cpi	r25, 0xFE	; 254
    214e:	51 05       	cpc	r21, r1
    2150:	80 f0       	brcs	.+32     	; 0x2172 <__mulsf3_pse+0xa0>
    2152:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__fp_inf>
    2156:	0c 94 4d 10 	jmp	0x209a	; 0x209a <__fp_szero>
    215a:	5f 3f       	cpi	r21, 0xFF	; 255
    215c:	e4 f3       	brlt	.-8      	; 0x2156 <__mulsf3_pse+0x84>
    215e:	98 3e       	cpi	r25, 0xE8	; 232
    2160:	d4 f3       	brlt	.-12     	; 0x2156 <__mulsf3_pse+0x84>
    2162:	86 95       	lsr	r24
    2164:	77 95       	ror	r23
    2166:	67 95       	ror	r22
    2168:	b7 95       	ror	r27
    216a:	f7 95       	ror	r31
    216c:	e7 95       	ror	r30
    216e:	9f 5f       	subi	r25, 0xFF	; 255
    2170:	c1 f7       	brne	.-16     	; 0x2162 <__mulsf3_pse+0x90>
    2172:	fe 2b       	or	r31, r30
    2174:	88 0f       	add	r24, r24
    2176:	91 1d       	adc	r25, r1
    2178:	96 95       	lsr	r25
    217a:	87 95       	ror	r24
    217c:	97 f9       	bld	r25, 7
    217e:	08 95       	ret

00002180 <sin>:
    2180:	9f 93       	push	r25
    2182:	0e 94 25 11 	call	0x224a	; 0x224a <__fp_rempio2>
    2186:	0f 90       	pop	r0
    2188:	07 fc       	sbrc	r0, 7
    218a:	ee 5f       	subi	r30, 0xFE	; 254
    218c:	0c 94 4e 11 	jmp	0x229c	; 0x229c <__fp_sinus>
    2190:	19 f4       	brne	.+6      	; 0x2198 <sin+0x18>
    2192:	16 f4       	brtc	.+4      	; 0x2198 <sin+0x18>
    2194:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__fp_nan>
    2198:	0c 94 0e 11 	jmp	0x221c	; 0x221c <__fp_mpack>

0000219c <sqrt>:
    219c:	0e 94 32 10 	call	0x2064	; 0x2064 <__fp_splitA>
    21a0:	b8 f3       	brcs	.-18     	; 0x2190 <sin+0x10>
    21a2:	99 23       	and	r25, r25
    21a4:	c9 f3       	breq	.-14     	; 0x2198 <sin+0x18>
    21a6:	b6 f3       	brts	.-20     	; 0x2194 <sin+0x14>
    21a8:	9f 57       	subi	r25, 0x7F	; 127
    21aa:	55 0b       	sbc	r21, r21
    21ac:	87 ff       	sbrs	r24, 7
    21ae:	0e 94 1c 11 	call	0x2238	; 0x2238 <__fp_norm2>
    21b2:	00 24       	eor	r0, r0
    21b4:	a0 e6       	ldi	r26, 0x60	; 96
    21b6:	40 ea       	ldi	r20, 0xA0	; 160
    21b8:	90 01       	movw	r18, r0
    21ba:	80 58       	subi	r24, 0x80	; 128
    21bc:	56 95       	lsr	r21
    21be:	97 95       	ror	r25
    21c0:	28 f4       	brcc	.+10     	; 0x21cc <sqrt+0x30>
    21c2:	80 5c       	subi	r24, 0xC0	; 192
    21c4:	66 0f       	add	r22, r22
    21c6:	77 1f       	adc	r23, r23
    21c8:	88 1f       	adc	r24, r24
    21ca:	20 f0       	brcs	.+8      	; 0x21d4 <sqrt+0x38>
    21cc:	26 17       	cp	r18, r22
    21ce:	37 07       	cpc	r19, r23
    21d0:	48 07       	cpc	r20, r24
    21d2:	30 f4       	brcc	.+12     	; 0x21e0 <sqrt+0x44>
    21d4:	62 1b       	sub	r22, r18
    21d6:	73 0b       	sbc	r23, r19
    21d8:	84 0b       	sbc	r24, r20
    21da:	20 29       	or	r18, r0
    21dc:	31 29       	or	r19, r1
    21de:	4a 2b       	or	r20, r26
    21e0:	a6 95       	lsr	r26
    21e2:	17 94       	ror	r1
    21e4:	07 94       	ror	r0
    21e6:	20 25       	eor	r18, r0
    21e8:	31 25       	eor	r19, r1
    21ea:	4a 27       	eor	r20, r26
    21ec:	58 f7       	brcc	.-42     	; 0x21c4 <sqrt+0x28>
    21ee:	66 0f       	add	r22, r22
    21f0:	77 1f       	adc	r23, r23
    21f2:	88 1f       	adc	r24, r24
    21f4:	20 f0       	brcs	.+8      	; 0x21fe <sqrt+0x62>
    21f6:	26 17       	cp	r18, r22
    21f8:	37 07       	cpc	r19, r23
    21fa:	48 07       	cpc	r20, r24
    21fc:	30 f4       	brcc	.+12     	; 0x220a <sqrt+0x6e>
    21fe:	62 0b       	sbc	r22, r18
    2200:	73 0b       	sbc	r23, r19
    2202:	84 0b       	sbc	r24, r20
    2204:	20 0d       	add	r18, r0
    2206:	31 1d       	adc	r19, r1
    2208:	41 1d       	adc	r20, r1
    220a:	a0 95       	com	r26
    220c:	81 f7       	brne	.-32     	; 0x21ee <sqrt+0x52>
    220e:	b9 01       	movw	r22, r18
    2210:	84 2f       	mov	r24, r20
    2212:	91 58       	subi	r25, 0x81	; 129
    2214:	88 0f       	add	r24, r24
    2216:	96 95       	lsr	r25
    2218:	87 95       	ror	r24
    221a:	08 95       	ret

0000221c <__fp_mpack>:
    221c:	9f 3f       	cpi	r25, 0xFF	; 255
    221e:	31 f0       	breq	.+12     	; 0x222c <__fp_mpack_finite+0xc>

00002220 <__fp_mpack_finite>:
    2220:	91 50       	subi	r25, 0x01	; 1
    2222:	20 f4       	brcc	.+8      	; 0x222c <__fp_mpack_finite+0xc>
    2224:	87 95       	ror	r24
    2226:	77 95       	ror	r23
    2228:	67 95       	ror	r22
    222a:	b7 95       	ror	r27
    222c:	88 0f       	add	r24, r24
    222e:	91 1d       	adc	r25, r1
    2230:	96 95       	lsr	r25
    2232:	87 95       	ror	r24
    2234:	97 f9       	bld	r25, 7
    2236:	08 95       	ret

00002238 <__fp_norm2>:
    2238:	91 50       	subi	r25, 0x01	; 1
    223a:	50 40       	sbci	r21, 0x00	; 0
    223c:	66 0f       	add	r22, r22
    223e:	77 1f       	adc	r23, r23
    2240:	88 1f       	adc	r24, r24
    2242:	d2 f7       	brpl	.-12     	; 0x2238 <__fp_norm2>
    2244:	08 95       	ret
    2246:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__fp_nan>

0000224a <__fp_rempio2>:
    224a:	0e 94 32 10 	call	0x2064	; 0x2064 <__fp_splitA>
    224e:	d8 f3       	brcs	.-10     	; 0x2246 <__fp_norm2+0xe>
    2250:	e8 94       	clt
    2252:	e0 e0       	ldi	r30, 0x00	; 0
    2254:	bb 27       	eor	r27, r27
    2256:	9f 57       	subi	r25, 0x7F	; 127
    2258:	f0 f0       	brcs	.+60     	; 0x2296 <__fp_rempio2+0x4c>
    225a:	2a ed       	ldi	r18, 0xDA	; 218
    225c:	3f e0       	ldi	r19, 0x0F	; 15
    225e:	49 ec       	ldi	r20, 0xC9	; 201
    2260:	06 c0       	rjmp	.+12     	; 0x226e <__fp_rempio2+0x24>
    2262:	ee 0f       	add	r30, r30
    2264:	bb 0f       	add	r27, r27
    2266:	66 1f       	adc	r22, r22
    2268:	77 1f       	adc	r23, r23
    226a:	88 1f       	adc	r24, r24
    226c:	28 f0       	brcs	.+10     	; 0x2278 <__fp_rempio2+0x2e>
    226e:	b2 3a       	cpi	r27, 0xA2	; 162
    2270:	62 07       	cpc	r22, r18
    2272:	73 07       	cpc	r23, r19
    2274:	84 07       	cpc	r24, r20
    2276:	28 f0       	brcs	.+10     	; 0x2282 <__fp_rempio2+0x38>
    2278:	b2 5a       	subi	r27, 0xA2	; 162
    227a:	62 0b       	sbc	r22, r18
    227c:	73 0b       	sbc	r23, r19
    227e:	84 0b       	sbc	r24, r20
    2280:	e3 95       	inc	r30
    2282:	9a 95       	dec	r25
    2284:	72 f7       	brpl	.-36     	; 0x2262 <__fp_rempio2+0x18>
    2286:	80 38       	cpi	r24, 0x80	; 128
    2288:	30 f4       	brcc	.+12     	; 0x2296 <__fp_rempio2+0x4c>
    228a:	9a 95       	dec	r25
    228c:	bb 0f       	add	r27, r27
    228e:	66 1f       	adc	r22, r22
    2290:	77 1f       	adc	r23, r23
    2292:	88 1f       	adc	r24, r24
    2294:	d2 f7       	brpl	.-12     	; 0x228a <__fp_rempio2+0x40>
    2296:	90 48       	sbci	r25, 0x80	; 128
    2298:	0c 94 10 11 	jmp	0x2220	; 0x2220 <__fp_mpack_finite>

0000229c <__fp_sinus>:
    229c:	ef 93       	push	r30
    229e:	e0 ff       	sbrs	r30, 0
    22a0:	07 c0       	rjmp	.+14     	; 0x22b0 <__fp_sinus+0x14>
    22a2:	a2 ea       	ldi	r26, 0xA2	; 162
    22a4:	2a ed       	ldi	r18, 0xDA	; 218
    22a6:	3f e0       	ldi	r19, 0x0F	; 15
    22a8:	49 ec       	ldi	r20, 0xC9	; 201
    22aa:	5f eb       	ldi	r21, 0xBF	; 191
    22ac:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__addsf3x>
    22b0:	0e 94 19 10 	call	0x2032	; 0x2032 <__fp_round>
    22b4:	0f 90       	pop	r0
    22b6:	03 94       	inc	r0
    22b8:	01 fc       	sbrc	r0, 1
    22ba:	90 58       	subi	r25, 0x80	; 128
    22bc:	e4 ea       	ldi	r30, 0xA4	; 164
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	0c 94 f7 0f 	jmp	0x1fee	; 0x1fee <__fp_powsodd>

000022c4 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    22c4:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    22c6:	91 8d       	ldd	r25, Z+25	; 0x19
    22c8:	22 8d       	ldd	r18, Z+26	; 0x1a
    22ca:	89 2f       	mov	r24, r25
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	80 5c       	subi	r24, 0xC0	; 192
    22d0:	9f 4f       	sbci	r25, 0xFF	; 255
    22d2:	82 1b       	sub	r24, r18
    22d4:	91 09       	sbc	r25, r1
}
    22d6:	8f 73       	andi	r24, 0x3F	; 63
    22d8:	99 27       	eor	r25, r25
    22da:	08 95       	ret

000022dc <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    22dc:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    22de:	91 8d       	ldd	r25, Z+25	; 0x19
    22e0:	82 8d       	ldd	r24, Z+26	; 0x1a
    22e2:	98 17       	cp	r25, r24
    22e4:	31 f0       	breq	.+12     	; 0x22f2 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    22e6:	82 8d       	ldd	r24, Z+26	; 0x1a
    22e8:	e8 0f       	add	r30, r24
    22ea:	f1 1d       	adc	r31, r1
    22ec:	85 8d       	ldd	r24, Z+29	; 0x1d
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    22f2:	8f ef       	ldi	r24, 0xFF	; 255
    22f4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    22f6:	08 95       	ret

000022f8 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    22f8:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    22fa:	91 8d       	ldd	r25, Z+25	; 0x19
    22fc:	82 8d       	ldd	r24, Z+26	; 0x1a
    22fe:	98 17       	cp	r25, r24
    2300:	61 f0       	breq	.+24     	; 0x231a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2302:	82 8d       	ldd	r24, Z+26	; 0x1a
    2304:	df 01       	movw	r26, r30
    2306:	a8 0f       	add	r26, r24
    2308:	b1 1d       	adc	r27, r1
    230a:	5d 96       	adiw	r26, 0x1d	; 29
    230c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    230e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2310:	9f 5f       	subi	r25, 0xFF	; 255
    2312:	9f 73       	andi	r25, 0x3F	; 63
    2314:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    231a:	8f ef       	ldi	r24, 0xFF	; 255
    231c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    231e:	08 95       	ret

00002320 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2320:	85 ee       	ldi	r24, 0xE5	; 229
    2322:	92 e1       	ldi	r25, 0x12	; 18
    2324:	89 2b       	or	r24, r25
    2326:	49 f0       	breq	.+18     	; 0x233a <_Z14serialEventRunv+0x1a>
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	89 2b       	or	r24, r25
    232e:	29 f0       	breq	.+10     	; 0x233a <_Z14serialEventRunv+0x1a>
    2330:	0e 94 e5 12 	call	0x25ca	; 0x25ca <_Z17Serial0_availablev>
    2334:	81 11       	cpse	r24, r1
    2336:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    233a:	08 95       	ret

0000233c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    233c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    233e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2340:	df 01       	movw	r26, r30
    2342:	a8 0f       	add	r26, r24
    2344:	b1 1d       	adc	r27, r1
    2346:	a3 5a       	subi	r26, 0xA3	; 163
    2348:	bf 4f       	sbci	r27, 0xFF	; 255
    234a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    234c:	84 8d       	ldd	r24, Z+28	; 0x1c
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	01 96       	adiw	r24, 0x01	; 1
    2352:	8f 73       	andi	r24, 0x3F	; 63
    2354:	99 27       	eor	r25, r25
    2356:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    2358:	a6 89       	ldd	r26, Z+22	; 0x16
    235a:	b7 89       	ldd	r27, Z+23	; 0x17
    235c:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    235e:	a0 89       	ldd	r26, Z+16	; 0x10
    2360:	b1 89       	ldd	r27, Z+17	; 0x11
    2362:	8c 91       	ld	r24, X
    2364:	80 64       	ori	r24, 0x40	; 64
    2366:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    2368:	93 8d       	ldd	r25, Z+27	; 0x1b
    236a:	84 8d       	ldd	r24, Z+28	; 0x1c
    236c:	98 13       	cpse	r25, r24
    236e:	06 c0       	rjmp	.+12     	; 0x237c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2370:	02 88       	ldd	r0, Z+18	; 0x12
    2372:	f3 89       	ldd	r31, Z+19	; 0x13
    2374:	e0 2d       	mov	r30, r0
    2376:	80 81       	ld	r24, Z
    2378:	8f 7d       	andi	r24, 0xDF	; 223
    237a:	80 83       	st	Z, r24
    237c:	08 95       	ret

0000237e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    237e:	cf 93       	push	r28
    2380:	df 93       	push	r29
    2382:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2384:	88 8d       	ldd	r24, Y+24	; 0x18
    2386:	88 23       	and	r24, r24
    2388:	c9 f0       	breq	.+50     	; 0x23bc <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    238a:	ea 89       	ldd	r30, Y+18	; 0x12
    238c:	fb 89       	ldd	r31, Y+19	; 0x13
    238e:	80 81       	ld	r24, Z
    2390:	85 fd       	sbrc	r24, 5
    2392:	05 c0       	rjmp	.+10     	; 0x239e <_ZN14HardwareSerial5flushEv+0x20>
    2394:	a8 89       	ldd	r26, Y+16	; 0x10
    2396:	b9 89       	ldd	r27, Y+17	; 0x11
    2398:	8c 91       	ld	r24, X
    239a:	86 fd       	sbrc	r24, 6
    239c:	0f c0       	rjmp	.+30     	; 0x23bc <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	07 fc       	sbrc	r0, 7
    23a2:	f5 cf       	rjmp	.-22     	; 0x238e <_ZN14HardwareSerial5flushEv+0x10>
    23a4:	80 81       	ld	r24, Z
    23a6:	85 ff       	sbrs	r24, 5
    23a8:	f2 cf       	rjmp	.-28     	; 0x238e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    23aa:	a8 89       	ldd	r26, Y+16	; 0x10
    23ac:	b9 89       	ldd	r27, Y+17	; 0x11
    23ae:	8c 91       	ld	r24, X
    23b0:	85 ff       	sbrs	r24, 5
    23b2:	ed cf       	rjmp	.-38     	; 0x238e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    23b4:	ce 01       	movw	r24, r28
    23b6:	0e 94 9e 11 	call	0x233c	; 0x233c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    23ba:	e7 cf       	rjmp	.-50     	; 0x238a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    23bc:	df 91       	pop	r29
    23be:	cf 91       	pop	r28
    23c0:	08 95       	ret

000023c2 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    23c2:	ef 92       	push	r14
    23c4:	ff 92       	push	r15
    23c6:	0f 93       	push	r16
    23c8:	1f 93       	push	r17
    23ca:	cf 93       	push	r28
    23cc:	df 93       	push	r29
    23ce:	ec 01       	movw	r28, r24
  _written = true;
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    23d4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23d8:	98 13       	cpse	r25, r24
    23da:	05 c0       	rjmp	.+10     	; 0x23e6 <_ZN14HardwareSerial5writeEh+0x24>
    23dc:	e8 89       	ldd	r30, Y+16	; 0x10
    23de:	f9 89       	ldd	r31, Y+17	; 0x11
    23e0:	80 81       	ld	r24, Z
    23e2:	85 fd       	sbrc	r24, 5
    23e4:	24 c0       	rjmp	.+72     	; 0x242e <_ZN14HardwareSerial5writeEh+0x6c>
    23e6:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    23e8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    23ea:	10 e0       	ldi	r17, 0x00	; 0
    23ec:	0f 5f       	subi	r16, 0xFF	; 255
    23ee:	1f 4f       	sbci	r17, 0xFF	; 255
    23f0:	0f 73       	andi	r16, 0x3F	; 63
    23f2:	11 27       	eor	r17, r17
    23f4:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    23f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23f8:	e8 12       	cpse	r14, r24
    23fa:	0c c0       	rjmp	.+24     	; 0x2414 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    23fc:	0f b6       	in	r0, 0x3f	; 63
    23fe:	07 fc       	sbrc	r0, 7
    2400:	fa cf       	rjmp	.-12     	; 0x23f6 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2402:	e8 89       	ldd	r30, Y+16	; 0x10
    2404:	f9 89       	ldd	r31, Y+17	; 0x11
    2406:	80 81       	ld	r24, Z
    2408:	85 ff       	sbrs	r24, 5
    240a:	f5 cf       	rjmp	.-22     	; 0x23f6 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    240c:	ce 01       	movw	r24, r28
    240e:	0e 94 9e 11 	call	0x233c	; 0x233c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2412:	f1 cf       	rjmp	.-30     	; 0x23f6 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2414:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2416:	fe 01       	movw	r30, r28
    2418:	e8 0f       	add	r30, r24
    241a:	f1 1d       	adc	r31, r1
    241c:	e3 5a       	subi	r30, 0xA3	; 163
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    2422:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    2424:	ea 89       	ldd	r30, Y+18	; 0x12
    2426:	fb 89       	ldd	r31, Y+19	; 0x13
    2428:	80 81       	ld	r24, Z
    242a:	80 62       	ori	r24, 0x20	; 32
    242c:	07 c0       	rjmp	.+14     	; 0x243c <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    242e:	ee 89       	ldd	r30, Y+22	; 0x16
    2430:	ff 89       	ldd	r31, Y+23	; 0x17
    2432:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    2434:	e8 89       	ldd	r30, Y+16	; 0x10
    2436:	f9 89       	ldd	r31, Y+17	; 0x11
    2438:	80 81       	ld	r24, Z
    243a:	80 64       	ori	r24, 0x40	; 64
    243c:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	df 91       	pop	r29
    2444:	cf 91       	pop	r28
    2446:	1f 91       	pop	r17
    2448:	0f 91       	pop	r16
    244a:	ff 90       	pop	r15
    244c:	ef 90       	pop	r14
    244e:	08 95       	ret

00002450 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2450:	cf 92       	push	r12
    2452:	df 92       	push	r13
    2454:	ef 92       	push	r14
    2456:	ff 92       	push	r15
    2458:	1f 93       	push	r17
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	ec 01       	movw	r28, r24
    2460:	6a 01       	movw	r12, r20
    2462:	7b 01       	movw	r14, r22
    2464:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2466:	e8 89       	ldd	r30, Y+16	; 0x10
    2468:	f9 89       	ldd	r31, Y+17	; 0x11
    246a:	82 e0       	ldi	r24, 0x02	; 2
    246c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    246e:	41 15       	cp	r20, r1
    2470:	51 4e       	sbci	r21, 0xE1	; 225
    2472:	61 05       	cpc	r22, r1
    2474:	71 05       	cpc	r23, r1
    2476:	b1 f0       	breq	.+44     	; 0x24a4 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2478:	60 e0       	ldi	r22, 0x00	; 0
    247a:	79 e0       	ldi	r23, 0x09	; 9
    247c:	8d e3       	ldi	r24, 0x3D	; 61
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	a7 01       	movw	r20, r14
    2482:	96 01       	movw	r18, r12
    2484:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <__udivmodsi4>
    2488:	da 01       	movw	r26, r20
    248a:	c9 01       	movw	r24, r18
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	a1 09       	sbc	r26, r1
    2490:	b1 09       	sbc	r27, r1
    2492:	b6 95       	lsr	r27
    2494:	a7 95       	ror	r26
    2496:	97 95       	ror	r25
    2498:	87 95       	ror	r24
    249a:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    249c:	41 15       	cp	r20, r1
    249e:	80 e1       	ldi	r24, 0x10	; 16
    24a0:	58 07       	cpc	r21, r24
    24a2:	a8 f0       	brcs	.+42     	; 0x24ce <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    24a4:	e8 89       	ldd	r30, Y+16	; 0x10
    24a6:	f9 89       	ldd	r31, Y+17	; 0x11
    24a8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    24aa:	60 e8       	ldi	r22, 0x80	; 128
    24ac:	74 e8       	ldi	r23, 0x84	; 132
    24ae:	8e e1       	ldi	r24, 0x1E	; 30
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	a7 01       	movw	r20, r14
    24b4:	96 01       	movw	r18, r12
    24b6:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <__udivmodsi4>
    24ba:	ba 01       	movw	r22, r20
    24bc:	a9 01       	movw	r20, r18
    24be:	41 50       	subi	r20, 0x01	; 1
    24c0:	51 09       	sbc	r21, r1
    24c2:	61 09       	sbc	r22, r1
    24c4:	71 09       	sbc	r23, r1
    24c6:	76 95       	lsr	r23
    24c8:	67 95       	ror	r22
    24ca:	57 95       	ror	r21
    24cc:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    24ce:	ec 85       	ldd	r30, Y+12	; 0x0c
    24d0:	fd 85       	ldd	r31, Y+13	; 0x0d
    24d2:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    24d4:	ee 85       	ldd	r30, Y+14	; 0x0e
    24d6:	ff 85       	ldd	r31, Y+15	; 0x0f
    24d8:	40 83       	st	Z, r20

  _written = false;
    24da:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    24dc:	ec 89       	ldd	r30, Y+20	; 0x14
    24de:	fd 89       	ldd	r31, Y+21	; 0x15
    24e0:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    24e2:	ea 89       	ldd	r30, Y+18	; 0x12
    24e4:	fb 89       	ldd	r31, Y+19	; 0x13
    24e6:	80 81       	ld	r24, Z
    24e8:	80 61       	ori	r24, 0x10	; 16
    24ea:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    24ec:	ea 89       	ldd	r30, Y+18	; 0x12
    24ee:	fb 89       	ldd	r31, Y+19	; 0x13
    24f0:	80 81       	ld	r24, Z
    24f2:	88 60       	ori	r24, 0x08	; 8
    24f4:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    24f6:	ea 89       	ldd	r30, Y+18	; 0x12
    24f8:	fb 89       	ldd	r31, Y+19	; 0x13
    24fa:	80 81       	ld	r24, Z
    24fc:	80 68       	ori	r24, 0x80	; 128
    24fe:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2500:	ea 89       	ldd	r30, Y+18	; 0x12
    2502:	fb 89       	ldd	r31, Y+19	; 0x13
    2504:	80 81       	ld	r24, Z
    2506:	8f 7d       	andi	r24, 0xDF	; 223
    2508:	80 83       	st	Z, r24
}
    250a:	df 91       	pop	r29
    250c:	cf 91       	pop	r28
    250e:	1f 91       	pop	r17
    2510:	ff 90       	pop	r15
    2512:	ef 90       	pop	r14
    2514:	df 90       	pop	r13
    2516:	cf 90       	pop	r12
    2518:	08 95       	ret

0000251a <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    251a:	1f 92       	push	r1
    251c:	0f 92       	push	r0
    251e:	0f b6       	in	r0, 0x3f	; 63
    2520:	0f 92       	push	r0
    2522:	11 24       	eor	r1, r1
    2524:	2f 93       	push	r18
    2526:	8f 93       	push	r24
    2528:	9f 93       	push	r25
    252a:	ef 93       	push	r30
    252c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    252e:	e0 91 3b 04 	lds	r30, 0x043B	; 0x80043b <Serial+0x10>
    2532:	f0 91 3c 04 	lds	r31, 0x043C	; 0x80043c <Serial+0x11>
    2536:	80 81       	ld	r24, Z
    2538:	e0 91 41 04 	lds	r30, 0x0441	; 0x800441 <Serial+0x16>
    253c:	f0 91 42 04 	lds	r31, 0x0442	; 0x800442 <Serial+0x17>
    2540:	82 fd       	sbrc	r24, 2
    2542:	12 c0       	rjmp	.+36     	; 0x2568 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2544:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2546:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <Serial+0x19>
    254a:	8f 5f       	subi	r24, 0xFF	; 255
    254c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    254e:	20 91 45 04 	lds	r18, 0x0445	; 0x800445 <Serial+0x1a>
    2552:	82 17       	cp	r24, r18
    2554:	51 f0       	breq	.+20     	; 0x256a <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    2556:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <Serial+0x19>
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	e5 5d       	subi	r30, 0xD5	; 213
    255e:	fb 4f       	sbci	r31, 0xFB	; 251
    2560:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2562:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <Serial+0x19>
    2566:	01 c0       	rjmp	.+2      	; 0x256a <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2568:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    256a:	ff 91       	pop	r31
    256c:	ef 91       	pop	r30
    256e:	9f 91       	pop	r25
    2570:	8f 91       	pop	r24
    2572:	2f 91       	pop	r18
    2574:	0f 90       	pop	r0
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	0f 90       	pop	r0
    257a:	1f 90       	pop	r1
    257c:	18 95       	reti

0000257e <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    257e:	1f 92       	push	r1
    2580:	0f 92       	push	r0
    2582:	0f b6       	in	r0, 0x3f	; 63
    2584:	0f 92       	push	r0
    2586:	11 24       	eor	r1, r1
    2588:	2f 93       	push	r18
    258a:	3f 93       	push	r19
    258c:	4f 93       	push	r20
    258e:	5f 93       	push	r21
    2590:	6f 93       	push	r22
    2592:	7f 93       	push	r23
    2594:	8f 93       	push	r24
    2596:	9f 93       	push	r25
    2598:	af 93       	push	r26
    259a:	bf 93       	push	r27
    259c:	ef 93       	push	r30
    259e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    25a0:	8b e2       	ldi	r24, 0x2B	; 43
    25a2:	94 e0       	ldi	r25, 0x04	; 4
    25a4:	0e 94 9e 11 	call	0x233c	; 0x233c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    25a8:	ff 91       	pop	r31
    25aa:	ef 91       	pop	r30
    25ac:	bf 91       	pop	r27
    25ae:	af 91       	pop	r26
    25b0:	9f 91       	pop	r25
    25b2:	8f 91       	pop	r24
    25b4:	7f 91       	pop	r23
    25b6:	6f 91       	pop	r22
    25b8:	5f 91       	pop	r21
    25ba:	4f 91       	pop	r20
    25bc:	3f 91       	pop	r19
    25be:	2f 91       	pop	r18
    25c0:	0f 90       	pop	r0
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	0f 90       	pop	r0
    25c6:	1f 90       	pop	r1
    25c8:	18 95       	reti

000025ca <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    25ca:	8b e2       	ldi	r24, 0x2B	; 43
    25cc:	94 e0       	ldi	r25, 0x04	; 4
    25ce:	0e 94 62 11 	call	0x22c4	; 0x22c4 <_ZN14HardwareSerial9availableEv>
    25d2:	21 e0       	ldi	r18, 0x01	; 1
    25d4:	89 2b       	or	r24, r25
    25d6:	09 f4       	brne	.+2      	; 0x25da <_Z17Serial0_availablev+0x10>
    25d8:	20 e0       	ldi	r18, 0x00	; 0
}
    25da:	82 2f       	mov	r24, r18
    25dc:	08 95       	ret

000025de <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    25de:	eb e2       	ldi	r30, 0x2B	; 43
    25e0:	f4 e0       	ldi	r31, 0x04	; 4
    25e2:	13 82       	std	Z+3, r1	; 0x03
    25e4:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    25e6:	88 ee       	ldi	r24, 0xE8	; 232
    25e8:	93 e0       	ldi	r25, 0x03	; 3
    25ea:	a0 e0       	ldi	r26, 0x00	; 0
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	84 83       	std	Z+4, r24	; 0x04
    25f0:	95 83       	std	Z+5, r25	; 0x05
    25f2:	a6 83       	std	Z+6, r26	; 0x06
    25f4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    25f6:	8e eb       	ldi	r24, 0xBE	; 190
    25f8:	92 e0       	ldi	r25, 0x02	; 2
    25fa:	91 83       	std	Z+1, r25	; 0x01
    25fc:	80 83       	st	Z, r24
    25fe:	85 ec       	ldi	r24, 0xC5	; 197
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	95 87       	std	Z+13, r25	; 0x0d
    2604:	84 87       	std	Z+12, r24	; 0x0c
    2606:	84 ec       	ldi	r24, 0xC4	; 196
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	97 87       	std	Z+15, r25	; 0x0f
    260c:	86 87       	std	Z+14, r24	; 0x0e
    260e:	80 ec       	ldi	r24, 0xC0	; 192
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	91 8b       	std	Z+17, r25	; 0x11
    2614:	80 8b       	std	Z+16, r24	; 0x10
    2616:	81 ec       	ldi	r24, 0xC1	; 193
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	93 8b       	std	Z+19, r25	; 0x13
    261c:	82 8b       	std	Z+18, r24	; 0x12
    261e:	82 ec       	ldi	r24, 0xC2	; 194
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	95 8b       	std	Z+21, r25	; 0x15
    2624:	84 8b       	std	Z+20, r24	; 0x14
    2626:	86 ec       	ldi	r24, 0xC6	; 198
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	97 8b       	std	Z+23, r25	; 0x17
    262c:	86 8b       	std	Z+22, r24	; 0x16
    262e:	11 8e       	std	Z+25, r1	; 0x19
    2630:	12 8e       	std	Z+26, r1	; 0x1a
    2632:	13 8e       	std	Z+27, r1	; 0x1b
    2634:	14 8e       	std	Z+28, r1	; 0x1c
    2636:	08 95       	ret

00002638 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    2638:	08 95       	ret

0000263a <main>:

int main(void)
{
	init();
    263a:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <init>

	initVariant();
    263e:	0e 94 1c 13 	call	0x2638	; 0x2638 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2642:	0e 94 c1 04 	call	0x982	; 0x982 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2646:	c0 e9       	ldi	r28, 0x90	; 144
    2648:	d1 e1       	ldi	r29, 0x11	; 17
#endif
	
	setup();
    
	for (;;) {
		loop();
    264a:	0e 94 4b 07 	call	0xe96	; 0xe96 <loop>
		if (serialEventRun) serialEventRun();
    264e:	20 97       	sbiw	r28, 0x00	; 0
    2650:	e1 f3       	breq	.-8      	; 0x264a <main+0x10>
    2652:	0e 94 90 11 	call	0x2320	; 0x2320 <_Z14serialEventRunv>
    2656:	f9 cf       	rjmp	.-14     	; 0x264a <main+0x10>

00002658 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2658:	cf 92       	push	r12
    265a:	df 92       	push	r13
    265c:	ef 92       	push	r14
    265e:	ff 92       	push	r15
    2660:	0f 93       	push	r16
    2662:	1f 93       	push	r17
    2664:	cf 93       	push	r28
    2666:	df 93       	push	r29
    2668:	6c 01       	movw	r12, r24
    266a:	7a 01       	movw	r14, r20
    266c:	8b 01       	movw	r16, r22
    266e:	c0 e0       	ldi	r28, 0x00	; 0
    2670:	d0 e0       	ldi	r29, 0x00	; 0
    2672:	ce 15       	cp	r28, r14
    2674:	df 05       	cpc	r29, r15
    2676:	89 f0       	breq	.+34     	; 0x269a <_ZN5Print5writeEPKhj+0x42>
    2678:	d8 01       	movw	r26, r16
    267a:	6d 91       	ld	r22, X+
    267c:	8d 01       	movw	r16, r26
    267e:	d6 01       	movw	r26, r12
    2680:	ed 91       	ld	r30, X+
    2682:	fc 91       	ld	r31, X
    2684:	01 90       	ld	r0, Z+
    2686:	f0 81       	ld	r31, Z
    2688:	e0 2d       	mov	r30, r0
    268a:	c6 01       	movw	r24, r12
    268c:	09 95       	icall
    268e:	89 2b       	or	r24, r25
    2690:	11 f4       	brne	.+4      	; 0x2696 <_ZN5Print5writeEPKhj+0x3e>
    2692:	7e 01       	movw	r14, r28
    2694:	02 c0       	rjmp	.+4      	; 0x269a <_ZN5Print5writeEPKhj+0x42>
    2696:	21 96       	adiw	r28, 0x01	; 1
    2698:	ec cf       	rjmp	.-40     	; 0x2672 <_ZN5Print5writeEPKhj+0x1a>
    269a:	c7 01       	movw	r24, r14
    269c:	df 91       	pop	r29
    269e:	cf 91       	pop	r28
    26a0:	1f 91       	pop	r17
    26a2:	0f 91       	pop	r16
    26a4:	ff 90       	pop	r15
    26a6:	ef 90       	pop	r14
    26a8:	df 90       	pop	r13
    26aa:	cf 90       	pop	r12
    26ac:	08 95       	ret

000026ae <_ZN5Print5writeEPKc>:
    26ae:	61 15       	cp	r22, r1
    26b0:	71 05       	cpc	r23, r1
    26b2:	79 f0       	breq	.+30     	; 0x26d2 <_ZN5Print5writeEPKc+0x24>
    26b4:	fb 01       	movw	r30, r22
    26b6:	01 90       	ld	r0, Z+
    26b8:	00 20       	and	r0, r0
    26ba:	e9 f7       	brne	.-6      	; 0x26b6 <_ZN5Print5writeEPKc+0x8>
    26bc:	31 97       	sbiw	r30, 0x01	; 1
    26be:	af 01       	movw	r20, r30
    26c0:	46 1b       	sub	r20, r22
    26c2:	57 0b       	sbc	r21, r23
    26c4:	dc 01       	movw	r26, r24
    26c6:	ed 91       	ld	r30, X+
    26c8:	fc 91       	ld	r31, X
    26ca:	02 80       	ldd	r0, Z+2	; 0x02
    26cc:	f3 81       	ldd	r31, Z+3	; 0x03
    26ce:	e0 2d       	mov	r30, r0
    26d0:	09 94       	ijmp
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	08 95       	ret

000026d8 <_ZN5Print5printEPKc>:
    26d8:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <_ZN5Print5writeEPKc>

000026dc <_ZN5Print5printEc>:
    26dc:	dc 01       	movw	r26, r24
    26de:	ed 91       	ld	r30, X+
    26e0:	fc 91       	ld	r31, X
    26e2:	01 90       	ld	r0, Z+
    26e4:	f0 81       	ld	r31, Z
    26e6:	e0 2d       	mov	r30, r0
    26e8:	09 94       	ijmp

000026ea <_ZN5Print7printlnEv>:
    26ea:	6a ec       	ldi	r22, 0xCA	; 202
    26ec:	72 e0       	ldi	r23, 0x02	; 2
    26ee:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <_ZN5Print5writeEPKc>

000026f2 <_ZN5Print7printlnEPKc>:
    26f2:	0f 93       	push	r16
    26f4:	1f 93       	push	r17
    26f6:	cf 93       	push	r28
    26f8:	df 93       	push	r29
    26fa:	ec 01       	movw	r28, r24
    26fc:	0e 94 57 13 	call	0x26ae	; 0x26ae <_ZN5Print5writeEPKc>
    2700:	8c 01       	movw	r16, r24
    2702:	ce 01       	movw	r24, r28
    2704:	0e 94 75 13 	call	0x26ea	; 0x26ea <_ZN5Print7printlnEv>
    2708:	80 0f       	add	r24, r16
    270a:	91 1f       	adc	r25, r17
    270c:	df 91       	pop	r29
    270e:	cf 91       	pop	r28
    2710:	1f 91       	pop	r17
    2712:	0f 91       	pop	r16
    2714:	08 95       	ret

00002716 <_ZN5Print11printNumberEmh>:
    2716:	8f 92       	push	r8
    2718:	9f 92       	push	r9
    271a:	af 92       	push	r10
    271c:	bf 92       	push	r11
    271e:	cf 92       	push	r12
    2720:	df 92       	push	r13
    2722:	ef 92       	push	r14
    2724:	ff 92       	push	r15
    2726:	0f 93       	push	r16
    2728:	1f 93       	push	r17
    272a:	cf 93       	push	r28
    272c:	df 93       	push	r29
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
    2732:	a1 97       	sbiw	r28, 0x21	; 33
    2734:	0f b6       	in	r0, 0x3f	; 63
    2736:	f8 94       	cli
    2738:	de bf       	out	0x3e, r29	; 62
    273a:	0f be       	out	0x3f, r0	; 63
    273c:	cd bf       	out	0x3d, r28	; 61
    273e:	7c 01       	movw	r14, r24
    2740:	d4 2e       	mov	r13, r20
    2742:	c5 2e       	mov	r12, r21
    2744:	db 01       	movw	r26, r22
    2746:	19 a2       	std	Y+33, r1	; 0x21
    2748:	22 30       	cpi	r18, 0x02	; 2
    274a:	08 f4       	brcc	.+2      	; 0x274e <_ZN5Print11printNumberEmh+0x38>
    274c:	2a e0       	ldi	r18, 0x0A	; 10
    274e:	8e 01       	movw	r16, r28
    2750:	0f 5d       	subi	r16, 0xDF	; 223
    2752:	1f 4f       	sbci	r17, 0xFF	; 255
    2754:	82 2e       	mov	r8, r18
    2756:	91 2c       	mov	r9, r1
    2758:	a1 2c       	mov	r10, r1
    275a:	b1 2c       	mov	r11, r1
    275c:	6d 2d       	mov	r22, r13
    275e:	7c 2d       	mov	r23, r12
    2760:	cd 01       	movw	r24, r26
    2762:	a5 01       	movw	r20, r10
    2764:	94 01       	movw	r18, r8
    2766:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <__udivmodsi4>
    276a:	d2 2e       	mov	r13, r18
    276c:	c3 2e       	mov	r12, r19
    276e:	da 01       	movw	r26, r20
    2770:	01 50       	subi	r16, 0x01	; 1
    2772:	11 09       	sbc	r17, r1
    2774:	6a 30       	cpi	r22, 0x0A	; 10
    2776:	71 05       	cpc	r23, r1
    2778:	81 05       	cpc	r24, r1
    277a:	91 05       	cpc	r25, r1
    277c:	10 f4       	brcc	.+4      	; 0x2782 <_ZN5Print11printNumberEmh+0x6c>
    277e:	60 5d       	subi	r22, 0xD0	; 208
    2780:	01 c0       	rjmp	.+2      	; 0x2784 <_ZN5Print11printNumberEmh+0x6e>
    2782:	69 5c       	subi	r22, 0xC9	; 201
    2784:	f8 01       	movw	r30, r16
    2786:	60 83       	st	Z, r22
    2788:	23 2b       	or	r18, r19
    278a:	24 2b       	or	r18, r20
    278c:	25 2b       	or	r18, r21
    278e:	31 f7       	brne	.-52     	; 0x275c <_ZN5Print11printNumberEmh+0x46>
    2790:	b8 01       	movw	r22, r16
    2792:	c7 01       	movw	r24, r14
    2794:	0e 94 57 13 	call	0x26ae	; 0x26ae <_ZN5Print5writeEPKc>
    2798:	a1 96       	adiw	r28, 0x21	; 33
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	f8 94       	cli
    279e:	de bf       	out	0x3e, r29	; 62
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	cd bf       	out	0x3d, r28	; 61
    27a4:	df 91       	pop	r29
    27a6:	cf 91       	pop	r28
    27a8:	1f 91       	pop	r17
    27aa:	0f 91       	pop	r16
    27ac:	ff 90       	pop	r15
    27ae:	ef 90       	pop	r14
    27b0:	df 90       	pop	r13
    27b2:	cf 90       	pop	r12
    27b4:	bf 90       	pop	r11
    27b6:	af 90       	pop	r10
    27b8:	9f 90       	pop	r9
    27ba:	8f 90       	pop	r8
    27bc:	08 95       	ret

000027be <_ZN5Print5printEli>:
    27be:	cf 92       	push	r12
    27c0:	df 92       	push	r13
    27c2:	ef 92       	push	r14
    27c4:	ff 92       	push	r15
    27c6:	0f 93       	push	r16
    27c8:	1f 93       	push	r17
    27ca:	cf 93       	push	r28
    27cc:	df 93       	push	r29
    27ce:	ec 01       	movw	r28, r24
    27d0:	6a 01       	movw	r12, r20
    27d2:	7b 01       	movw	r14, r22
    27d4:	21 15       	cp	r18, r1
    27d6:	31 05       	cpc	r19, r1
    27d8:	79 f4       	brne	.+30     	; 0x27f8 <_ZN5Print5printEli+0x3a>
    27da:	e8 81       	ld	r30, Y
    27dc:	f9 81       	ldd	r31, Y+1	; 0x01
    27de:	01 90       	ld	r0, Z+
    27e0:	f0 81       	ld	r31, Z
    27e2:	e0 2d       	mov	r30, r0
    27e4:	64 2f       	mov	r22, r20
    27e6:	df 91       	pop	r29
    27e8:	cf 91       	pop	r28
    27ea:	1f 91       	pop	r17
    27ec:	0f 91       	pop	r16
    27ee:	ff 90       	pop	r15
    27f0:	ef 90       	pop	r14
    27f2:	df 90       	pop	r13
    27f4:	cf 90       	pop	r12
    27f6:	09 94       	ijmp
    27f8:	2a 30       	cpi	r18, 0x0A	; 10
    27fa:	31 05       	cpc	r19, r1
    27fc:	e9 f4       	brne	.+58     	; 0x2838 <_ZN5Print5printEli+0x7a>
    27fe:	77 ff       	sbrs	r23, 7
    2800:	1a c0       	rjmp	.+52     	; 0x2836 <_ZN5Print5printEli+0x78>
    2802:	6d e2       	ldi	r22, 0x2D	; 45
    2804:	0e 94 6e 13 	call	0x26dc	; 0x26dc <_ZN5Print5printEc>
    2808:	8c 01       	movw	r16, r24
    280a:	44 27       	eor	r20, r20
    280c:	55 27       	eor	r21, r21
    280e:	ba 01       	movw	r22, r20
    2810:	4c 19       	sub	r20, r12
    2812:	5d 09       	sbc	r21, r13
    2814:	6e 09       	sbc	r22, r14
    2816:	7f 09       	sbc	r23, r15
    2818:	2a e0       	ldi	r18, 0x0A	; 10
    281a:	ce 01       	movw	r24, r28
    281c:	0e 94 8b 13 	call	0x2716	; 0x2716 <_ZN5Print11printNumberEmh>
    2820:	80 0f       	add	r24, r16
    2822:	91 1f       	adc	r25, r17
    2824:	df 91       	pop	r29
    2826:	cf 91       	pop	r28
    2828:	1f 91       	pop	r17
    282a:	0f 91       	pop	r16
    282c:	ff 90       	pop	r15
    282e:	ef 90       	pop	r14
    2830:	df 90       	pop	r13
    2832:	cf 90       	pop	r12
    2834:	08 95       	ret
    2836:	2a e0       	ldi	r18, 0x0A	; 10
    2838:	b7 01       	movw	r22, r14
    283a:	a6 01       	movw	r20, r12
    283c:	ce 01       	movw	r24, r28
    283e:	df 91       	pop	r29
    2840:	cf 91       	pop	r28
    2842:	1f 91       	pop	r17
    2844:	0f 91       	pop	r16
    2846:	ff 90       	pop	r15
    2848:	ef 90       	pop	r14
    284a:	df 90       	pop	r13
    284c:	cf 90       	pop	r12
    284e:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <_ZN5Print11printNumberEmh>

00002852 <_ZN5Print5printEii>:
    2852:	9a 01       	movw	r18, r20
    2854:	ab 01       	movw	r20, r22
    2856:	77 0f       	add	r23, r23
    2858:	66 0b       	sbc	r22, r22
    285a:	77 0b       	sbc	r23, r23
    285c:	0c 94 df 13 	jmp	0x27be	; 0x27be <_ZN5Print5printEli>

00002860 <_ZN5Print7printlnEii>:
    2860:	0f 93       	push	r16
    2862:	1f 93       	push	r17
    2864:	cf 93       	push	r28
    2866:	df 93       	push	r29
    2868:	ec 01       	movw	r28, r24
    286a:	9a 01       	movw	r18, r20
    286c:	ab 01       	movw	r20, r22
    286e:	77 0f       	add	r23, r23
    2870:	66 0b       	sbc	r22, r22
    2872:	77 0b       	sbc	r23, r23
    2874:	0e 94 df 13 	call	0x27be	; 0x27be <_ZN5Print5printEli>
    2878:	8c 01       	movw	r16, r24
    287a:	ce 01       	movw	r24, r28
    287c:	0e 94 75 13 	call	0x26ea	; 0x26ea <_ZN5Print7printlnEv>
    2880:	80 0f       	add	r24, r16
    2882:	91 1f       	adc	r25, r17
    2884:	df 91       	pop	r29
    2886:	cf 91       	pop	r28
    2888:	1f 91       	pop	r17
    288a:	0f 91       	pop	r16
    288c:	08 95       	ret

0000288e <_ZN5Print7printlnEli>:
    288e:	0f 93       	push	r16
    2890:	1f 93       	push	r17
    2892:	cf 93       	push	r28
    2894:	df 93       	push	r29
    2896:	ec 01       	movw	r28, r24
    2898:	0e 94 df 13 	call	0x27be	; 0x27be <_ZN5Print5printEli>
    289c:	8c 01       	movw	r16, r24
    289e:	ce 01       	movw	r24, r28
    28a0:	0e 94 75 13 	call	0x26ea	; 0x26ea <_ZN5Print7printlnEv>
    28a4:	80 0f       	add	r24, r16
    28a6:	91 1f       	adc	r25, r17
    28a8:	df 91       	pop	r29
    28aa:	cf 91       	pop	r28
    28ac:	1f 91       	pop	r17
    28ae:	0f 91       	pop	r16
    28b0:	08 95       	ret

000028b2 <_ZN5Print5printEmi>:
    28b2:	21 15       	cp	r18, r1
    28b4:	31 05       	cpc	r19, r1
    28b6:	41 f4       	brne	.+16     	; 0x28c8 <_ZN5Print5printEmi+0x16>
    28b8:	dc 01       	movw	r26, r24
    28ba:	ed 91       	ld	r30, X+
    28bc:	fc 91       	ld	r31, X
    28be:	01 90       	ld	r0, Z+
    28c0:	f0 81       	ld	r31, Z
    28c2:	e0 2d       	mov	r30, r0
    28c4:	64 2f       	mov	r22, r20
    28c6:	09 94       	ijmp
    28c8:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <_ZN5Print11printNumberEmh>

000028cc <_ZN5Print5printEhi>:
    28cc:	9a 01       	movw	r18, r20
    28ce:	46 2f       	mov	r20, r22
    28d0:	50 e0       	ldi	r21, 0x00	; 0
    28d2:	60 e0       	ldi	r22, 0x00	; 0
    28d4:	70 e0       	ldi	r23, 0x00	; 0
    28d6:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <_ZN5Print5printEmi>

000028da <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    28da:	4f 92       	push	r4
    28dc:	5f 92       	push	r5
    28de:	6f 92       	push	r6
    28e0:	7f 92       	push	r7
    28e2:	8f 92       	push	r8
    28e4:	9f 92       	push	r9
    28e6:	af 92       	push	r10
    28e8:	bf 92       	push	r11
    28ea:	cf 92       	push	r12
    28ec:	df 92       	push	r13
    28ee:	ef 92       	push	r14
    28f0:	ff 92       	push	r15
    28f2:	cf 93       	push	r28
    28f4:	df 93       	push	r29
    28f6:	ec 01       	movw	r28, r24
    28f8:	6a 01       	movw	r12, r20
    28fa:	7b 01       	movw	r14, r22
    28fc:	b2 2e       	mov	r11, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    28fe:	9a 01       	movw	r18, r20
    2900:	ab 01       	movw	r20, r22
    2902:	c7 01       	movw	r24, r14
    2904:	b6 01       	movw	r22, r12
    2906:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__unordsf2>
    290a:	88 23       	and	r24, r24
    290c:	19 f0       	breq	.+6      	; 0x2914 <_ZN5Print10printFloatEdh+0x3a>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    290e:	6d ec       	ldi	r22, 0xCD	; 205
    2910:	72 e0       	ldi	r23, 0x02	; 2
    2912:	27 c0       	rjmp	.+78     	; 0x2962 <_ZN5Print10printFloatEdh+0x88>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    2914:	26 01       	movw	r4, r12
    2916:	37 01       	movw	r6, r14
    2918:	e8 94       	clt
    291a:	77 f8       	bld	r7, 7
    291c:	2f ef       	ldi	r18, 0xFF	; 255
    291e:	3f ef       	ldi	r19, 0xFF	; 255
    2920:	4f e7       	ldi	r20, 0x7F	; 127
    2922:	5f e7       	ldi	r21, 0x7F	; 127
    2924:	c3 01       	movw	r24, r6
    2926:	b2 01       	movw	r22, r4
    2928:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__unordsf2>
    292c:	81 11       	cpse	r24, r1
    292e:	0d c0       	rjmp	.+26     	; 0x294a <_ZN5Print10printFloatEdh+0x70>
    2930:	2f ef       	ldi	r18, 0xFF	; 255
    2932:	3f ef       	ldi	r19, 0xFF	; 255
    2934:	4f e7       	ldi	r20, 0x7F	; 127
    2936:	5f e7       	ldi	r21, 0x7F	; 127
    2938:	c3 01       	movw	r24, r6
    293a:	b2 01       	movw	r22, r4
    293c:	0e 94 83 1a 	call	0x3506	; 0x3506 <__cmpsf2>
    2940:	18 16       	cp	r1, r24
    2942:	1c f4       	brge	.+6      	; 0x294a <_ZN5Print10printFloatEdh+0x70>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2944:	61 ed       	ldi	r22, 0xD1	; 209
    2946:	72 e0       	ldi	r23, 0x02	; 2
    2948:	0c c0       	rjmp	.+24     	; 0x2962 <_ZN5Print10printFloatEdh+0x88>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    294a:	2f ef       	ldi	r18, 0xFF	; 255
    294c:	3f ef       	ldi	r19, 0xFF	; 255
    294e:	4f e7       	ldi	r20, 0x7F	; 127
    2950:	5f e4       	ldi	r21, 0x4F	; 79
    2952:	c7 01       	movw	r24, r14
    2954:	b6 01       	movw	r22, r12
    2956:	0e 94 ac 1a 	call	0x3558	; 0x3558 <__gesf2>
    295a:	18 16       	cp	r1, r24
    295c:	9c f4       	brge	.+38     	; 0x2984 <_ZN5Print10printFloatEdh+0xaa>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    295e:	65 ed       	ldi	r22, 0xD5	; 213
    2960:	72 e0       	ldi	r23, 0x02	; 2
    2962:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2964:	df 91       	pop	r29
    2966:	cf 91       	pop	r28
    2968:	ff 90       	pop	r15
    296a:	ef 90       	pop	r14
    296c:	df 90       	pop	r13
    296e:	cf 90       	pop	r12
    2970:	bf 90       	pop	r11
    2972:	af 90       	pop	r10
    2974:	9f 90       	pop	r9
    2976:	8f 90       	pop	r8
    2978:	7f 90       	pop	r7
    297a:	6f 90       	pop	r6
    297c:	5f 90       	pop	r5
    297e:	4f 90       	pop	r4
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2980:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    2984:	2f ef       	ldi	r18, 0xFF	; 255
    2986:	3f ef       	ldi	r19, 0xFF	; 255
    2988:	4f e7       	ldi	r20, 0x7F	; 127
    298a:	5f ec       	ldi	r21, 0xCF	; 207
    298c:	c7 01       	movw	r24, r14
    298e:	b6 01       	movw	r22, r12
    2990:	0e 94 83 1a 	call	0x3506	; 0x3506 <__cmpsf2>
    2994:	87 fd       	sbrc	r24, 7
    2996:	e3 cf       	rjmp	.-58     	; 0x295e <_ZN5Print10printFloatEdh+0x84>
  
  // Handle negative numbers
  if (number < 0.0)
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	a9 01       	movw	r20, r18
    299e:	c7 01       	movw	r24, r14
    29a0:	b6 01       	movw	r22, r12
    29a2:	0e 94 83 1a 	call	0x3506	; 0x3506 <__cmpsf2>
    29a6:	87 ff       	sbrs	r24, 7
    29a8:	0a c0       	rjmp	.+20     	; 0x29be <_ZN5Print10printFloatEdh+0xe4>
  {
     n += print('-');
    29aa:	6d e2       	ldi	r22, 0x2D	; 45
    29ac:	ce 01       	movw	r24, r28
    29ae:	0e 94 6e 13 	call	0x26dc	; 0x26dc <_ZN5Print5printEc>
    29b2:	4c 01       	movw	r8, r24
     number = -number;
    29b4:	f7 fa       	bst	r15, 7
    29b6:	f0 94       	com	r15
    29b8:	f7 f8       	bld	r15, 7
    29ba:	f0 94       	com	r15
    29bc:	02 c0       	rjmp	.+4      	; 0x29c2 <_ZN5Print10printFloatEdh+0xe8>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    29be:	81 2c       	mov	r8, r1
    29c0:	91 2c       	mov	r9, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    29c2:	a1 2c       	mov	r10, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    29c4:	60 e0       	ldi	r22, 0x00	; 0
    29c6:	70 e0       	ldi	r23, 0x00	; 0
    29c8:	80 e0       	ldi	r24, 0x00	; 0
    29ca:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    29cc:	ab 14       	cp	r10, r11
    29ce:	41 f0       	breq	.+16     	; 0x29e0 <_ZN5Print10printFloatEdh+0x106>
    rounding /= 10.0;
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	40 e2       	ldi	r20, 0x20	; 32
    29d6:	51 e4       	ldi	r21, 0x41	; 65
    29d8:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    29dc:	a3 94       	inc	r10
    29de:	f6 cf       	rjmp	.-20     	; 0x29cc <_ZN5Print10printFloatEdh+0xf2>
    rounding /= 10.0;
  
  number += rounding;
    29e0:	9b 01       	movw	r18, r22
    29e2:	ac 01       	movw	r20, r24
    29e4:	c7 01       	movw	r24, r14
    29e6:	b6 01       	movw	r22, r12
    29e8:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__addsf3>
    29ec:	2b 01       	movw	r4, r22
    29ee:	3c 01       	movw	r6, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    29f0:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__fixunssfsi>
    29f4:	6b 01       	movw	r12, r22
    29f6:	7c 01       	movw	r14, r24
  double remainder = number - (double)int_part;
    29f8:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <__floatunsisf>
    29fc:	9b 01       	movw	r18, r22
    29fe:	ac 01       	movw	r20, r24
    2a00:	c3 01       	movw	r24, r6
    2a02:	b2 01       	movw	r22, r4
    2a04:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__subsf3>
    2a08:	2b 01       	movw	r4, r22
    2a0a:	3c 01       	movw	r6, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    2a0c:	2a e0       	ldi	r18, 0x0A	; 10
    2a0e:	b7 01       	movw	r22, r14
    2a10:	a6 01       	movw	r20, r12
    2a12:	ce 01       	movw	r24, r28
    2a14:	0e 94 8b 13 	call	0x2716	; 0x2716 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2a18:	7c 01       	movw	r14, r24
    2a1a:	e8 0c       	add	r14, r8
    2a1c:	f9 1c       	adc	r15, r9

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    2a1e:	bb 20       	and	r11, r11
    2a20:	31 f0       	breq	.+12     	; 0x2a2e <_ZN5Print10printFloatEdh+0x154>
    n += print('.'); 
    2a22:	6e e2       	ldi	r22, 0x2E	; 46
    2a24:	ce 01       	movw	r24, r28
    2a26:	0e 94 6e 13 	call	0x26dc	; 0x26dc <_ZN5Print5printEc>
    2a2a:	e8 0e       	add	r14, r24
    2a2c:	f9 1e       	adc	r15, r25
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2a2e:	db 2c       	mov	r13, r11
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2a30:	dd 20       	and	r13, r13
    2a32:	29 f1       	breq	.+74     	; 0x2a7e <_ZN5Print10printFloatEdh+0x1a4>
  {
    remainder *= 10.0;
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	40 e2       	ldi	r20, 0x20	; 32
    2a3a:	51 e4       	ldi	r21, 0x41	; 65
    2a3c:	c3 01       	movw	r24, r6
    2a3e:	b2 01       	movw	r22, r4
    2a40:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__mulsf3>
    2a44:	2b 01       	movw	r4, r22
    2a46:	3c 01       	movw	r6, r24
    unsigned int toPrint = (unsigned int)(remainder);
    2a48:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__fixunssfsi>
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    2a4c:	4b 01       	movw	r8, r22
    2a4e:	a1 2c       	mov	r10, r1
    2a50:	b1 2c       	mov	r11, r1
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    2a52:	2a e0       	ldi	r18, 0x0A	; 10
    2a54:	b5 01       	movw	r22, r10
    2a56:	a4 01       	movw	r20, r8
    2a58:	ce 01       	movw	r24, r28
    2a5a:	0e 94 8b 13 	call	0x2716	; 0x2716 <_ZN5Print11printNumberEmh>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
    2a5e:	e8 0e       	add	r14, r24
    2a60:	f9 1e       	adc	r15, r25
    remainder -= toPrint; 
    2a62:	c5 01       	movw	r24, r10
    2a64:	b4 01       	movw	r22, r8
    2a66:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <__floatunsisf>
    2a6a:	9b 01       	movw	r18, r22
    2a6c:	ac 01       	movw	r20, r24
    2a6e:	c3 01       	movw	r24, r6
    2a70:	b2 01       	movw	r22, r4
    2a72:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__subsf3>
    2a76:	2b 01       	movw	r4, r22
    2a78:	3c 01       	movw	r6, r24
    2a7a:	da 94       	dec	r13
    2a7c:	d9 cf       	rjmp	.-78     	; 0x2a30 <_ZN5Print10printFloatEdh+0x156>
  } 
  
  return n;
}
    2a7e:	c7 01       	movw	r24, r14
    2a80:	df 91       	pop	r29
    2a82:	cf 91       	pop	r28
    2a84:	ff 90       	pop	r15
    2a86:	ef 90       	pop	r14
    2a88:	df 90       	pop	r13
    2a8a:	cf 90       	pop	r12
    2a8c:	bf 90       	pop	r11
    2a8e:	af 90       	pop	r10
    2a90:	9f 90       	pop	r9
    2a92:	8f 90       	pop	r8
    2a94:	7f 90       	pop	r7
    2a96:	6f 90       	pop	r6
    2a98:	5f 90       	pop	r5
    2a9a:	4f 90       	pop	r4
    2a9c:	08 95       	ret

00002a9e <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2a9e:	0c 94 6d 14 	jmp	0x28da	; 0x28da <_ZN5Print10printFloatEdh>

00002aa2 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    2aa2:	0f 93       	push	r16
    2aa4:	1f 93       	push	r17
    2aa6:	cf 93       	push	r28
    2aa8:	df 93       	push	r29
    2aaa:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2aac:	0e 94 6d 14 	call	0x28da	; 0x28da <_ZN5Print10printFloatEdh>
    2ab0:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    2ab2:	ce 01       	movw	r24, r28
    2ab4:	0e 94 75 13 	call	0x26ea	; 0x26ea <_ZN5Print7printlnEv>
  return n;
}
    2ab8:	80 0f       	add	r24, r16
    2aba:	91 1f       	adc	r25, r17
    2abc:	df 91       	pop	r29
    2abe:	cf 91       	pop	r28
    2ac0:	1f 91       	pop	r17
    2ac2:	0f 91       	pop	r16
    2ac4:	08 95       	ret

00002ac6 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2ac6:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <_ZN7TwoWire14rxBufferLengthE>
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	20 91 f9 04 	lds	r18, 0x04F9	; 0x8004f9 <_ZN7TwoWire13rxBufferIndexE>
    2ad0:	82 1b       	sub	r24, r18
    2ad2:	91 09       	sbc	r25, r1
    2ad4:	08 95       	ret

00002ad6 <_ZN7TwoWire4readEv>:
    2ad6:	90 91 f9 04 	lds	r25, 0x04F9	; 0x8004f9 <_ZN7TwoWire13rxBufferIndexE>
    2ada:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <_ZN7TwoWire14rxBufferLengthE>
    2ade:	98 17       	cp	r25, r24
    2ae0:	50 f4       	brcc	.+20     	; 0x2af6 <_ZN7TwoWire4readEv+0x20>
    2ae2:	e9 2f       	mov	r30, r25
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	e6 50       	subi	r30, 0x06	; 6
    2ae8:	fb 4f       	sbci	r31, 0xFB	; 251
    2aea:	20 81       	ld	r18, Z
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	9f 5f       	subi	r25, 0xFF	; 255
    2af0:	90 93 f9 04 	sts	0x04F9, r25	; 0x8004f9 <_ZN7TwoWire13rxBufferIndexE>
    2af4:	02 c0       	rjmp	.+4      	; 0x2afa <_ZN7TwoWire4readEv+0x24>
    2af6:	2f ef       	ldi	r18, 0xFF	; 255
    2af8:	3f ef       	ldi	r19, 0xFF	; 255
    2afa:	c9 01       	movw	r24, r18
    2afc:	08 95       	ret

00002afe <_ZN7TwoWire4peekEv>:
    2afe:	e0 91 f9 04 	lds	r30, 0x04F9	; 0x8004f9 <_ZN7TwoWire13rxBufferIndexE>
    2b02:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <_ZN7TwoWire14rxBufferLengthE>
    2b06:	e8 17       	cp	r30, r24
    2b08:	30 f4       	brcc	.+12     	; 0x2b16 <_ZN7TwoWire4peekEv+0x18>
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	e6 50       	subi	r30, 0x06	; 6
    2b0e:	fb 4f       	sbci	r31, 0xFB	; 251
    2b10:	80 81       	ld	r24, Z
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	08 95       	ret
    2b16:	8f ef       	ldi	r24, 0xFF	; 255
    2b18:	9f ef       	ldi	r25, 0xFF	; 255
    2b1a:	08 95       	ret

00002b1c <_ZN7TwoWire5flushEv>:
    2b1c:	08 95       	ret

00002b1e <_ZN7TwoWire5writeEPKhj>:
    2b1e:	cf 92       	push	r12
    2b20:	df 92       	push	r13
    2b22:	ef 92       	push	r14
    2b24:	ff 92       	push	r15
    2b26:	0f 93       	push	r16
    2b28:	1f 93       	push	r17
    2b2a:	cf 93       	push	r28
    2b2c:	df 93       	push	r29
    2b2e:	7c 01       	movw	r14, r24
    2b30:	26 2f       	mov	r18, r22
    2b32:	97 2f       	mov	r25, r23
    2b34:	8a 01       	movw	r16, r20
    2b36:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <_ZN7TwoWire12transmittingE>
    2b3a:	88 23       	and	r24, r24
    2b3c:	91 f0       	breq	.+36     	; 0x2b62 <_ZN7TwoWire5writeEPKhj+0x44>
    2b3e:	c6 2f       	mov	r28, r22
    2b40:	d7 2f       	mov	r29, r23
    2b42:	6e 01       	movw	r12, r28
    2b44:	c4 0e       	add	r12, r20
    2b46:	d5 1e       	adc	r13, r21
    2b48:	cc 15       	cp	r28, r12
    2b4a:	dd 05       	cpc	r29, r13
    2b4c:	71 f0       	breq	.+28     	; 0x2b6a <_ZN7TwoWire5writeEPKhj+0x4c>
    2b4e:	69 91       	ld	r22, Y+
    2b50:	d7 01       	movw	r26, r14
    2b52:	ed 91       	ld	r30, X+
    2b54:	fc 91       	ld	r31, X
    2b56:	01 90       	ld	r0, Z+
    2b58:	f0 81       	ld	r31, Z
    2b5a:	e0 2d       	mov	r30, r0
    2b5c:	c7 01       	movw	r24, r14
    2b5e:	09 95       	icall
    2b60:	f3 cf       	rjmp	.-26     	; 0x2b48 <_ZN7TwoWire5writeEPKhj+0x2a>
    2b62:	64 2f       	mov	r22, r20
    2b64:	82 2f       	mov	r24, r18
    2b66:	0e 94 1e 19 	call	0x323c	; 0x323c <twi_transmit>
    2b6a:	c8 01       	movw	r24, r16
    2b6c:	df 91       	pop	r29
    2b6e:	cf 91       	pop	r28
    2b70:	1f 91       	pop	r17
    2b72:	0f 91       	pop	r16
    2b74:	ff 90       	pop	r15
    2b76:	ef 90       	pop	r14
    2b78:	df 90       	pop	r13
    2b7a:	cf 90       	pop	r12
    2b7c:	08 95       	ret

00002b7e <_ZN7TwoWire5writeEh>:
    2b7e:	cf 93       	push	r28
    2b80:	df 93       	push	r29
    2b82:	1f 92       	push	r1
    2b84:	cd b7       	in	r28, 0x3d	; 61
    2b86:	de b7       	in	r29, 0x3e	; 62
    2b88:	69 83       	std	Y+1, r22	; 0x01
    2b8a:	20 91 d4 04 	lds	r18, 0x04D4	; 0x8004d4 <_ZN7TwoWire12transmittingE>
    2b8e:	22 23       	and	r18, r18
    2b90:	d1 f0       	breq	.+52     	; 0x2bc6 <_ZN7TwoWire5writeEh+0x48>
    2b92:	20 91 d5 04 	lds	r18, 0x04D5	; 0x8004d5 <_ZN7TwoWire14txBufferLengthE>
    2b96:	20 32       	cpi	r18, 0x20	; 32
    2b98:	40 f0       	brcs	.+16     	; 0x2baa <_ZN7TwoWire5writeEh+0x2c>
    2b9a:	21 e0       	ldi	r18, 0x01	; 1
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	fc 01       	movw	r30, r24
    2ba0:	33 83       	std	Z+3, r19	; 0x03
    2ba2:	22 83       	std	Z+2, r18	; 0x02
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	15 c0       	rjmp	.+42     	; 0x2bd4 <_ZN7TwoWire5writeEh+0x56>
    2baa:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <_ZN7TwoWire13txBufferIndexE>
    2bae:	e8 2f       	mov	r30, r24
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	e9 52       	subi	r30, 0x29	; 41
    2bb4:	fb 4f       	sbci	r31, 0xFB	; 251
    2bb6:	99 81       	ldd	r25, Y+1	; 0x01
    2bb8:	90 83       	st	Z, r25
    2bba:	8f 5f       	subi	r24, 0xFF	; 255
    2bbc:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <_ZN7TwoWire13txBufferIndexE>
    2bc0:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <_ZN7TwoWire14txBufferLengthE>
    2bc4:	05 c0       	rjmp	.+10     	; 0x2bd0 <_ZN7TwoWire5writeEh+0x52>
    2bc6:	61 e0       	ldi	r22, 0x01	; 1
    2bc8:	ce 01       	movw	r24, r28
    2bca:	01 96       	adiw	r24, 0x01	; 1
    2bcc:	0e 94 1e 19 	call	0x323c	; 0x323c <twi_transmit>
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	0f 90       	pop	r0
    2bd6:	df 91       	pop	r29
    2bd8:	cf 91       	pop	r28
    2bda:	08 95       	ret

00002bdc <_ZN7TwoWireC1Ev>:
    2bdc:	fc 01       	movw	r30, r24
    2bde:	13 82       	std	Z+3, r1	; 0x03
    2be0:	12 82       	std	Z+2, r1	; 0x02
    2be2:	88 ee       	ldi	r24, 0xE8	; 232
    2be4:	93 e0       	ldi	r25, 0x03	; 3
    2be6:	a0 e0       	ldi	r26, 0x00	; 0
    2be8:	b0 e0       	ldi	r27, 0x00	; 0
    2bea:	84 83       	std	Z+4, r24	; 0x04
    2bec:	95 83       	std	Z+5, r25	; 0x05
    2bee:	a6 83       	std	Z+6, r26	; 0x06
    2bf0:	b7 83       	std	Z+7, r27	; 0x07
    2bf2:	8d ed       	ldi	r24, 0xDD	; 221
    2bf4:	92 e0       	ldi	r25, 0x02	; 2
    2bf6:	91 83       	std	Z+1, r25	; 0x01
    2bf8:	80 83       	st	Z, r24
    2bfa:	08 95       	ret

00002bfc <_ZN7TwoWire5beginEv>:
    2bfc:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <_ZN7TwoWire13rxBufferIndexE>
    2c00:	10 92 f8 04 	sts	0x04F8, r1	; 0x8004f8 <_ZN7TwoWire14rxBufferLengthE>
    2c04:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <_ZN7TwoWire13txBufferIndexE>
    2c08:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <_ZN7TwoWire14txBufferLengthE>
    2c0c:	0c 94 62 18 	jmp	0x30c4	; 0x30c4 <twi_init>

00002c10 <_ZN7TwoWire17beginTransmissionEh>:
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <_ZN7TwoWire12transmittingE>
    2c16:	60 93 f7 04 	sts	0x04F7, r22	; 0x8004f7 <_ZN7TwoWire9txAddressE>
    2c1a:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <_ZN7TwoWire13txBufferIndexE>
    2c1e:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <_ZN7TwoWire14txBufferLengthE>
    2c22:	08 95       	ret

00002c24 <_ZN7TwoWire17beginTransmissionEi>:
    2c24:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <_ZN7TwoWire17beginTransmissionEh>

00002c28 <_ZN7TwoWire15endTransmissionEh>:
    2c28:	0f 93       	push	r16
    2c2a:	06 2f       	mov	r16, r22
    2c2c:	21 e0       	ldi	r18, 0x01	; 1
    2c2e:	40 91 d5 04 	lds	r20, 0x04D5	; 0x8004d5 <_ZN7TwoWire14txBufferLengthE>
    2c32:	67 ed       	ldi	r22, 0xD7	; 215
    2c34:	74 e0       	ldi	r23, 0x04	; 4
    2c36:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <_ZN7TwoWire9txAddressE>
    2c3a:	0e 94 c8 18 	call	0x3190	; 0x3190 <twi_writeTo>
    2c3e:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <_ZN7TwoWire13txBufferIndexE>
    2c42:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <_ZN7TwoWire14txBufferLengthE>
    2c46:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <_ZN7TwoWire12transmittingE>
    2c4a:	0f 91       	pop	r16
    2c4c:	08 95       	ret

00002c4e <_ZN7TwoWire11requestFromEhhmhh>:
    2c4e:	4f 92       	push	r4
    2c50:	5f 92       	push	r5
    2c52:	6f 92       	push	r6
    2c54:	7f 92       	push	r7
    2c56:	af 92       	push	r10
    2c58:	bf 92       	push	r11
    2c5a:	cf 92       	push	r12
    2c5c:	ef 92       	push	r14
    2c5e:	ff 92       	push	r15
    2c60:	0f 93       	push	r16
    2c62:	1f 93       	push	r17
    2c64:	cf 93       	push	r28
    2c66:	df 93       	push	r29
    2c68:	5c 01       	movw	r10, r24
    2c6a:	f6 2e       	mov	r15, r22
    2c6c:	d4 2f       	mov	r29, r20
    2c6e:	28 01       	movw	r4, r16
    2c70:	39 01       	movw	r6, r18
    2c72:	ee 20       	and	r14, r14
    2c74:	21 f1       	breq	.+72     	; 0x2cbe <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2c76:	0e 94 08 16 	call	0x2c10	; 0x2c10 <_ZN7TwoWire17beginTransmissionEh>
    2c7a:	ce 2d       	mov	r28, r14
    2c7c:	c4 30       	cpi	r28, 0x04	; 4
    2c7e:	08 f0       	brcs	.+2      	; 0x2c82 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2c80:	c3 e0       	ldi	r28, 0x03	; 3
    2c82:	c1 50       	subi	r28, 0x01	; 1
    2c84:	c0 f0       	brcs	.+48     	; 0x2cb6 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2c86:	d5 01       	movw	r26, r10
    2c88:	ed 91       	ld	r30, X+
    2c8a:	fc 91       	ld	r31, X
    2c8c:	b8 e0       	ldi	r27, 0x08	; 8
    2c8e:	cb 9f       	mul	r28, r27
    2c90:	c0 01       	movw	r24, r0
    2c92:	11 24       	eor	r1, r1
    2c94:	a3 01       	movw	r20, r6
    2c96:	92 01       	movw	r18, r4
    2c98:	04 c0       	rjmp	.+8      	; 0x2ca2 <_ZN7TwoWire11requestFromEhhmhh+0x54>
    2c9a:	56 95       	lsr	r21
    2c9c:	47 95       	ror	r20
    2c9e:	37 95       	ror	r19
    2ca0:	27 95       	ror	r18
    2ca2:	8a 95       	dec	r24
    2ca4:	d2 f7       	brpl	.-12     	; 0x2c9a <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    2ca6:	ca 01       	movw	r24, r20
    2ca8:	b9 01       	movw	r22, r18
    2caa:	01 90       	ld	r0, Z+
    2cac:	f0 81       	ld	r31, Z
    2cae:	e0 2d       	mov	r30, r0
    2cb0:	c5 01       	movw	r24, r10
    2cb2:	09 95       	icall
    2cb4:	e6 cf       	rjmp	.-52     	; 0x2c82 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2cb6:	60 e0       	ldi	r22, 0x00	; 0
    2cb8:	c5 01       	movw	r24, r10
    2cba:	0e 94 14 16 	call	0x2c28	; 0x2c28 <_ZN7TwoWire15endTransmissionEh>
    2cbe:	4d 2f       	mov	r20, r29
    2cc0:	d1 32       	cpi	r29, 0x21	; 33
    2cc2:	08 f0       	brcs	.+2      	; 0x2cc6 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2cc4:	40 e2       	ldi	r20, 0x20	; 32
    2cc6:	2c 2d       	mov	r18, r12
    2cc8:	6a ef       	ldi	r22, 0xFA	; 250
    2cca:	74 e0       	ldi	r23, 0x04	; 4
    2ccc:	8f 2d       	mov	r24, r15
    2cce:	0e 94 80 18 	call	0x3100	; 0x3100 <twi_readFrom>
    2cd2:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <_ZN7TwoWire13rxBufferIndexE>
    2cd6:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <_ZN7TwoWire14rxBufferLengthE>
    2cda:	df 91       	pop	r29
    2cdc:	cf 91       	pop	r28
    2cde:	1f 91       	pop	r17
    2ce0:	0f 91       	pop	r16
    2ce2:	ff 90       	pop	r15
    2ce4:	ef 90       	pop	r14
    2ce6:	cf 90       	pop	r12
    2ce8:	bf 90       	pop	r11
    2cea:	af 90       	pop	r10
    2cec:	7f 90       	pop	r7
    2cee:	6f 90       	pop	r6
    2cf0:	5f 90       	pop	r5
    2cf2:	4f 90       	pop	r4
    2cf4:	08 95       	ret

00002cf6 <_ZN7TwoWire11requestFromEhhh>:
    2cf6:	cf 92       	push	r12
    2cf8:	ef 92       	push	r14
    2cfa:	0f 93       	push	r16
    2cfc:	1f 93       	push	r17
    2cfe:	c2 2e       	mov	r12, r18
    2d00:	e1 2c       	mov	r14, r1
    2d02:	00 e0       	ldi	r16, 0x00	; 0
    2d04:	10 e0       	ldi	r17, 0x00	; 0
    2d06:	98 01       	movw	r18, r16
    2d08:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <_ZN7TwoWire11requestFromEhhmhh>
    2d0c:	1f 91       	pop	r17
    2d0e:	0f 91       	pop	r16
    2d10:	ef 90       	pop	r14
    2d12:	cf 90       	pop	r12
    2d14:	08 95       	ret

00002d16 <_ZN7TwoWire11requestFromEii>:
    2d16:	21 e0       	ldi	r18, 0x01	; 1
    2d18:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <_ZN7TwoWire11requestFromEhhh>

00002d1c <_ZN7TwoWire15endTransmissionEv>:
    2d1c:	61 e0       	ldi	r22, 0x01	; 1
    2d1e:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <_ZN7TwoWire15endTransmissionEh>

00002d22 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2d22:	88 ec       	ldi	r24, 0xC8	; 200
    2d24:	94 e0       	ldi	r25, 0x04	; 4
    2d26:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <_ZN7TwoWireC1Ev>

00002d2a <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    2d2a:	1f 92       	push	r1
    2d2c:	0f 92       	push	r0
    2d2e:	0f b6       	in	r0, 0x3f	; 63
    2d30:	0f 92       	push	r0
    2d32:	11 24       	eor	r1, r1
    2d34:	2f 93       	push	r18
    2d36:	3f 93       	push	r19
    2d38:	8f 93       	push	r24
    2d3a:	9f 93       	push	r25
    2d3c:	af 93       	push	r26
    2d3e:	bf 93       	push	r27
    2d40:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <timer0_millis>
    2d44:	90 91 1c 05 	lds	r25, 0x051C	; 0x80051c <timer0_millis+0x1>
    2d48:	a0 91 1d 05 	lds	r26, 0x051D	; 0x80051d <timer0_millis+0x2>
    2d4c:	b0 91 1e 05 	lds	r27, 0x051E	; 0x80051e <timer0_millis+0x3>
    2d50:	30 91 1a 05 	lds	r19, 0x051A	; 0x80051a <timer0_fract>
    2d54:	23 e0       	ldi	r18, 0x03	; 3
    2d56:	23 0f       	add	r18, r19
    2d58:	2d 37       	cpi	r18, 0x7D	; 125
    2d5a:	20 f4       	brcc	.+8      	; 0x2d64 <__vector_16+0x3a>
    2d5c:	01 96       	adiw	r24, 0x01	; 1
    2d5e:	a1 1d       	adc	r26, r1
    2d60:	b1 1d       	adc	r27, r1
    2d62:	05 c0       	rjmp	.+10     	; 0x2d6e <__vector_16+0x44>
    2d64:	26 e8       	ldi	r18, 0x86	; 134
    2d66:	23 0f       	add	r18, r19
    2d68:	02 96       	adiw	r24, 0x02	; 2
    2d6a:	a1 1d       	adc	r26, r1
    2d6c:	b1 1d       	adc	r27, r1
    2d6e:	20 93 1a 05 	sts	0x051A, r18	; 0x80051a <timer0_fract>
    2d72:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <timer0_millis>
    2d76:	90 93 1c 05 	sts	0x051C, r25	; 0x80051c <timer0_millis+0x1>
    2d7a:	a0 93 1d 05 	sts	0x051D, r26	; 0x80051d <timer0_millis+0x2>
    2d7e:	b0 93 1e 05 	sts	0x051E, r27	; 0x80051e <timer0_millis+0x3>
    2d82:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <timer0_overflow_count>
    2d86:	90 91 20 05 	lds	r25, 0x0520	; 0x800520 <timer0_overflow_count+0x1>
    2d8a:	a0 91 21 05 	lds	r26, 0x0521	; 0x800521 <timer0_overflow_count+0x2>
    2d8e:	b0 91 22 05 	lds	r27, 0x0522	; 0x800522 <timer0_overflow_count+0x3>
    2d92:	01 96       	adiw	r24, 0x01	; 1
    2d94:	a1 1d       	adc	r26, r1
    2d96:	b1 1d       	adc	r27, r1
    2d98:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <timer0_overflow_count>
    2d9c:	90 93 20 05 	sts	0x0520, r25	; 0x800520 <timer0_overflow_count+0x1>
    2da0:	a0 93 21 05 	sts	0x0521, r26	; 0x800521 <timer0_overflow_count+0x2>
    2da4:	b0 93 22 05 	sts	0x0522, r27	; 0x800522 <timer0_overflow_count+0x3>
    2da8:	bf 91       	pop	r27
    2daa:	af 91       	pop	r26
    2dac:	9f 91       	pop	r25
    2dae:	8f 91       	pop	r24
    2db0:	3f 91       	pop	r19
    2db2:	2f 91       	pop	r18
    2db4:	0f 90       	pop	r0
    2db6:	0f be       	out	0x3f, r0	; 63
    2db8:	0f 90       	pop	r0
    2dba:	1f 90       	pop	r1
    2dbc:	18 95       	reti

00002dbe <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2dbe:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2dc0:	f8 94       	cli
	m = timer0_overflow_count;
    2dc2:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <timer0_overflow_count>
    2dc6:	90 91 20 05 	lds	r25, 0x0520	; 0x800520 <timer0_overflow_count+0x1>
    2dca:	a0 91 21 05 	lds	r26, 0x0521	; 0x800521 <timer0_overflow_count+0x2>
    2dce:	b0 91 22 05 	lds	r27, 0x0522	; 0x800522 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    2dd2:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2dd4:	a8 9b       	sbis	0x15, 0	; 21
    2dd6:	05 c0       	rjmp	.+10     	; 0x2de2 <micros+0x24>
    2dd8:	2f 3f       	cpi	r18, 0xFF	; 255
    2dda:	19 f0       	breq	.+6      	; 0x2de2 <micros+0x24>
		m++;
    2ddc:	01 96       	adiw	r24, 0x01	; 1
    2dde:	a1 1d       	adc	r26, r1
    2de0:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2de2:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2de4:	ba 2f       	mov	r27, r26
    2de6:	a9 2f       	mov	r26, r25
    2de8:	98 2f       	mov	r25, r24
    2dea:	88 27       	eor	r24, r24
    2dec:	82 0f       	add	r24, r18
    2dee:	91 1d       	adc	r25, r1
    2df0:	a1 1d       	adc	r26, r1
    2df2:	b1 1d       	adc	r27, r1
    2df4:	bc 01       	movw	r22, r24
    2df6:	cd 01       	movw	r24, r26
    2df8:	42 e0       	ldi	r20, 0x02	; 2
    2dfa:	66 0f       	add	r22, r22
    2dfc:	77 1f       	adc	r23, r23
    2dfe:	88 1f       	adc	r24, r24
    2e00:	99 1f       	adc	r25, r25
    2e02:	4a 95       	dec	r20
    2e04:	d1 f7       	brne	.-12     	; 0x2dfa <micros+0x3c>
}
    2e06:	08 95       	ret

00002e08 <delay>:

void delay(unsigned long ms)
{
    2e08:	8f 92       	push	r8
    2e0a:	9f 92       	push	r9
    2e0c:	af 92       	push	r10
    2e0e:	bf 92       	push	r11
    2e10:	cf 92       	push	r12
    2e12:	df 92       	push	r13
    2e14:	ef 92       	push	r14
    2e16:	ff 92       	push	r15
    2e18:	6b 01       	movw	r12, r22
    2e1a:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    2e1c:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <micros>
    2e20:	4b 01       	movw	r8, r22
    2e22:	5c 01       	movw	r10, r24

	while (ms > 0) {
    2e24:	c1 14       	cp	r12, r1
    2e26:	d1 04       	cpc	r13, r1
    2e28:	e1 04       	cpc	r14, r1
    2e2a:	f1 04       	cpc	r15, r1
    2e2c:	01 f1       	breq	.+64     	; 0x2e6e <delay+0x66>
		yield();
    2e2e:	0e 94 61 18 	call	0x30c2	; 0x30c2 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    2e32:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <micros>
    2e36:	dc 01       	movw	r26, r24
    2e38:	cb 01       	movw	r24, r22
    2e3a:	88 19       	sub	r24, r8
    2e3c:	99 09       	sbc	r25, r9
    2e3e:	aa 09       	sbc	r26, r10
    2e40:	bb 09       	sbc	r27, r11
    2e42:	88 3e       	cpi	r24, 0xE8	; 232
    2e44:	93 40       	sbci	r25, 0x03	; 3
    2e46:	a1 05       	cpc	r26, r1
    2e48:	b1 05       	cpc	r27, r1
    2e4a:	60 f3       	brcs	.-40     	; 0x2e24 <delay+0x1c>
			ms--;
    2e4c:	21 e0       	ldi	r18, 0x01	; 1
    2e4e:	c2 1a       	sub	r12, r18
    2e50:	d1 08       	sbc	r13, r1
    2e52:	e1 08       	sbc	r14, r1
    2e54:	f1 08       	sbc	r15, r1
			start += 1000;
    2e56:	88 ee       	ldi	r24, 0xE8	; 232
    2e58:	88 0e       	add	r8, r24
    2e5a:	83 e0       	ldi	r24, 0x03	; 3
    2e5c:	98 1e       	adc	r9, r24
    2e5e:	a1 1c       	adc	r10, r1
    2e60:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2e62:	c1 14       	cp	r12, r1
    2e64:	d1 04       	cpc	r13, r1
    2e66:	e1 04       	cpc	r14, r1
    2e68:	f1 04       	cpc	r15, r1
    2e6a:	19 f7       	brne	.-58     	; 0x2e32 <delay+0x2a>
    2e6c:	db cf       	rjmp	.-74     	; 0x2e24 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    2e6e:	ff 90       	pop	r15
    2e70:	ef 90       	pop	r14
    2e72:	df 90       	pop	r13
    2e74:	cf 90       	pop	r12
    2e76:	bf 90       	pop	r11
    2e78:	af 90       	pop	r10
    2e7a:	9f 90       	pop	r9
    2e7c:	8f 90       	pop	r8
    2e7e:	08 95       	ret

00002e80 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2e80:	82 30       	cpi	r24, 0x02	; 2
    2e82:	91 05       	cpc	r25, r1
    2e84:	38 f0       	brcs	.+14     	; 0x2e94 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    2e86:	88 0f       	add	r24, r24
    2e88:	99 1f       	adc	r25, r25
    2e8a:	88 0f       	add	r24, r24
    2e8c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    2e8e:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2e90:	01 97       	sbiw	r24, 0x01	; 1
    2e92:	f1 f7       	brne	.-4      	; 0x2e90 <delayMicroseconds+0x10>
    2e94:	08 95       	ret

00002e96 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2e96:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2e98:	84 b5       	in	r24, 0x24	; 36
    2e9a:	82 60       	ori	r24, 0x02	; 2
    2e9c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2e9e:	84 b5       	in	r24, 0x24	; 36
    2ea0:	81 60       	ori	r24, 0x01	; 1
    2ea2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2ea4:	85 b5       	in	r24, 0x25	; 37
    2ea6:	82 60       	ori	r24, 0x02	; 2
    2ea8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2eaa:	85 b5       	in	r24, 0x25	; 37
    2eac:	81 60       	ori	r24, 0x01	; 1
    2eae:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2eb0:	ee e6       	ldi	r30, 0x6E	; 110
    2eb2:	f0 e0       	ldi	r31, 0x00	; 0
    2eb4:	80 81       	ld	r24, Z
    2eb6:	81 60       	ori	r24, 0x01	; 1
    2eb8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2eba:	e1 e8       	ldi	r30, 0x81	; 129
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2ec0:	80 81       	ld	r24, Z
    2ec2:	82 60       	ori	r24, 0x02	; 2
    2ec4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2ec6:	80 81       	ld	r24, Z
    2ec8:	81 60       	ori	r24, 0x01	; 1
    2eca:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2ecc:	e0 e8       	ldi	r30, 0x80	; 128
    2ece:	f0 e0       	ldi	r31, 0x00	; 0
    2ed0:	80 81       	ld	r24, Z
    2ed2:	81 60       	ori	r24, 0x01	; 1
    2ed4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2ed6:	e1 eb       	ldi	r30, 0xB1	; 177
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	80 81       	ld	r24, Z
    2edc:	84 60       	ori	r24, 0x04	; 4
    2ede:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2ee0:	e0 eb       	ldi	r30, 0xB0	; 176
    2ee2:	f0 e0       	ldi	r31, 0x00	; 0
    2ee4:	80 81       	ld	r24, Z
    2ee6:	81 60       	ori	r24, 0x01	; 1
    2ee8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2eea:	ea e7       	ldi	r30, 0x7A	; 122
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	84 60       	ori	r24, 0x04	; 4
    2ef2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2ef4:	80 81       	ld	r24, Z
    2ef6:	82 60       	ori	r24, 0x02	; 2
    2ef8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2efa:	80 81       	ld	r24, Z
    2efc:	81 60       	ori	r24, 0x01	; 1
    2efe:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2f00:	80 81       	ld	r24, Z
    2f02:	80 68       	ori	r24, 0x80	; 128
    2f04:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2f06:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2f0a:	08 95       	ret

00002f0c <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    2f0c:	8e 30       	cpi	r24, 0x0E	; 14
    2f0e:	08 f0       	brcs	.+2      	; 0x2f12 <analogRead+0x6>
    2f10:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    2f12:	87 70       	andi	r24, 0x07	; 7
    2f14:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2f18:	90 e4       	ldi	r25, 0x40	; 64
    2f1a:	29 9f       	mul	r18, r25
    2f1c:	90 01       	movw	r18, r0
    2f1e:	11 24       	eor	r1, r1
    2f20:	82 2b       	or	r24, r18
    2f22:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    2f26:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2f2a:	80 64       	ori	r24, 0x40	; 64
    2f2c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    2f30:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2f34:	86 fd       	sbrc	r24, 6
    2f36:	fc cf       	rjmp	.-8      	; 0x2f30 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    2f38:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    2f3c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    2f40:	90 e0       	ldi	r25, 0x00	; 0
}
    2f42:	92 2b       	or	r25, r18
    2f44:	08 95       	ret

00002f46 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2f46:	83 30       	cpi	r24, 0x03	; 3
    2f48:	81 f0       	breq	.+32     	; 0x2f6a <turnOffPWM+0x24>
    2f4a:	28 f4       	brcc	.+10     	; 0x2f56 <turnOffPWM+0x10>
    2f4c:	81 30       	cpi	r24, 0x01	; 1
    2f4e:	99 f0       	breq	.+38     	; 0x2f76 <turnOffPWM+0x30>
    2f50:	82 30       	cpi	r24, 0x02	; 2
    2f52:	a1 f0       	breq	.+40     	; 0x2f7c <turnOffPWM+0x36>
    2f54:	08 95       	ret
    2f56:	87 30       	cpi	r24, 0x07	; 7
    2f58:	a9 f0       	breq	.+42     	; 0x2f84 <turnOffPWM+0x3e>
    2f5a:	88 30       	cpi	r24, 0x08	; 8
    2f5c:	b9 f0       	breq	.+46     	; 0x2f8c <turnOffPWM+0x46>
    2f5e:	84 30       	cpi	r24, 0x04	; 4
    2f60:	d1 f4       	brne	.+52     	; 0x2f96 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2f62:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2f66:	8f 7d       	andi	r24, 0xDF	; 223
    2f68:	03 c0       	rjmp	.+6      	; 0x2f70 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2f6a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2f6e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2f70:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2f74:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2f76:	84 b5       	in	r24, 0x24	; 36
    2f78:	8f 77       	andi	r24, 0x7F	; 127
    2f7a:	02 c0       	rjmp	.+4      	; 0x2f80 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2f7c:	84 b5       	in	r24, 0x24	; 36
    2f7e:	8f 7d       	andi	r24, 0xDF	; 223
    2f80:	84 bd       	out	0x24, r24	; 36
    2f82:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2f84:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2f88:	8f 77       	andi	r24, 0x7F	; 127
    2f8a:	03 c0       	rjmp	.+6      	; 0x2f92 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2f8c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2f90:	8f 7d       	andi	r24, 0xDF	; 223
    2f92:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2f96:	08 95       	ret

00002f98 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2f98:	cf 93       	push	r28
    2f9a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	fc 01       	movw	r30, r24
    2fa0:	ea 52       	subi	r30, 0x2A	; 42
    2fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa4:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	e6 51       	subi	r30, 0x16	; 22
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2fae:	88 23       	and	r24, r24
    2fb0:	61 f1       	breq	.+88     	; 0x300a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	88 0f       	add	r24, r24
    2fb6:	99 1f       	adc	r25, r25
    2fb8:	fc 01       	movw	r30, r24
    2fba:	ee 5e       	subi	r30, 0xEE	; 238
    2fbc:	fe 4f       	sbci	r31, 0xFE	; 254
    2fbe:	c5 91       	lpm	r28, Z+
    2fc0:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2fc2:	fc 01       	movw	r30, r24
    2fc4:	e8 5f       	subi	r30, 0xF8	; 248
    2fc6:	fe 4f       	sbci	r31, 0xFE	; 254
    2fc8:	a5 91       	lpm	r26, Z+
    2fca:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2fcc:	61 11       	cpse	r22, r1
    2fce:	09 c0       	rjmp	.+18     	; 0x2fe2 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2fd0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2fd2:	f8 94       	cli
		*reg &= ~bit;
    2fd4:	88 81       	ld	r24, Y
    2fd6:	20 95       	com	r18
    2fd8:	82 23       	and	r24, r18
    2fda:	88 83       	st	Y, r24
		*out &= ~bit;
    2fdc:	ec 91       	ld	r30, X
    2fde:	2e 23       	and	r18, r30
    2fe0:	0b c0       	rjmp	.+22     	; 0x2ff8 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2fe2:	62 30       	cpi	r22, 0x02	; 2
    2fe4:	61 f4       	brne	.+24     	; 0x2ffe <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2fe6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2fe8:	f8 94       	cli
		*reg &= ~bit;
    2fea:	38 81       	ld	r19, Y
    2fec:	82 2f       	mov	r24, r18
    2fee:	80 95       	com	r24
    2ff0:	83 23       	and	r24, r19
    2ff2:	88 83       	st	Y, r24
		*out |= bit;
    2ff4:	ec 91       	ld	r30, X
    2ff6:	2e 2b       	or	r18, r30
    2ff8:	2c 93       	st	X, r18
		SREG = oldSREG;
    2ffa:	9f bf       	out	0x3f, r25	; 63
    2ffc:	06 c0       	rjmp	.+12     	; 0x300a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2ffe:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3000:	f8 94       	cli
		*reg |= bit;
    3002:	e8 81       	ld	r30, Y
    3004:	2e 2b       	or	r18, r30
    3006:	28 83       	st	Y, r18
		SREG = oldSREG;
    3008:	8f bf       	out	0x3f, r24	; 63
	}
}
    300a:	df 91       	pop	r29
    300c:	cf 91       	pop	r28
    300e:	08 95       	ret

00003010 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3010:	1f 93       	push	r17
    3012:	cf 93       	push	r28
    3014:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3016:	28 2f       	mov	r18, r24
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	f9 01       	movw	r30, r18
    301c:	ee 53       	subi	r30, 0x3E	; 62
    301e:	ff 4f       	sbci	r31, 0xFF	; 255
    3020:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3022:	f9 01       	movw	r30, r18
    3024:	ea 52       	subi	r30, 0x2A	; 42
    3026:	ff 4f       	sbci	r31, 0xFF	; 255
    3028:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    302a:	f9 01       	movw	r30, r18
    302c:	e6 51       	subi	r30, 0x16	; 22
    302e:	ff 4f       	sbci	r31, 0xFF	; 255
    3030:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3032:	cc 23       	and	r28, r28
    3034:	c9 f0       	breq	.+50     	; 0x3068 <digitalWrite+0x58>
    3036:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3038:	81 11       	cpse	r24, r1
    303a:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <turnOffPWM>

	out = portOutputRegister(port);
    303e:	ec 2f       	mov	r30, r28
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	ee 0f       	add	r30, r30
    3044:	ff 1f       	adc	r31, r31
    3046:	e8 5f       	subi	r30, 0xF8	; 248
    3048:	fe 4f       	sbci	r31, 0xFE	; 254
    304a:	a5 91       	lpm	r26, Z+
    304c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    304e:	8f b7       	in	r24, 0x3f	; 63
	cli();
    3050:	f8 94       	cli

	if (val == LOW) {
    3052:	11 11       	cpse	r17, r1
    3054:	05 c0       	rjmp	.+10     	; 0x3060 <digitalWrite+0x50>
		*out &= ~bit;
    3056:	9c 91       	ld	r25, X
    3058:	ed 2f       	mov	r30, r29
    305a:	e0 95       	com	r30
    305c:	e9 23       	and	r30, r25
    305e:	02 c0       	rjmp	.+4      	; 0x3064 <digitalWrite+0x54>
	} else {
		*out |= bit;
    3060:	ec 91       	ld	r30, X
    3062:	ed 2b       	or	r30, r29
    3064:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    3066:	8f bf       	out	0x3f, r24	; 63
}
    3068:	df 91       	pop	r29
    306a:	cf 91       	pop	r28
    306c:	1f 91       	pop	r17
    306e:	08 95       	ret

00003070 <digitalRead>:

int digitalRead(uint8_t pin)
{
    3070:	cf 93       	push	r28
    3072:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3074:	28 2f       	mov	r18, r24
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	f9 01       	movw	r30, r18
    307a:	ee 53       	subi	r30, 0x3E	; 62
    307c:	ff 4f       	sbci	r31, 0xFF	; 255
    307e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3080:	f9 01       	movw	r30, r18
    3082:	ea 52       	subi	r30, 0x2A	; 42
    3084:	ff 4f       	sbci	r31, 0xFF	; 255
    3086:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3088:	f9 01       	movw	r30, r18
    308a:	e6 51       	subi	r30, 0x16	; 22
    308c:	ff 4f       	sbci	r31, 0xFF	; 255
    308e:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    3090:	cc 23       	and	r28, r28
    3092:	91 f0       	breq	.+36     	; 0x30b8 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3094:	81 11       	cpse	r24, r1
    3096:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    309a:	ec 2f       	mov	r30, r28
    309c:	f0 e0       	ldi	r31, 0x00	; 0
    309e:	ee 0f       	add	r30, r30
    30a0:	ff 1f       	adc	r31, r31
    30a2:	e2 50       	subi	r30, 0x02	; 2
    30a4:	ff 4f       	sbci	r31, 0xFF	; 255
    30a6:	a5 91       	lpm	r26, Z+
    30a8:	b4 91       	lpm	r27, Z
    30aa:	ec 91       	ld	r30, X
    30ac:	ed 23       	and	r30, r29
    30ae:	81 e0       	ldi	r24, 0x01	; 1
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	21 f4       	brne	.+8      	; 0x30bc <digitalRead+0x4c>
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	02 c0       	rjmp	.+4      	; 0x30bc <digitalRead+0x4c>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    30b8:	80 e0       	ldi	r24, 0x00	; 0
    30ba:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    30bc:	df 91       	pop	r29
    30be:	cf 91       	pop	r28
    30c0:	08 95       	ret

000030c2 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    30c2:	08 95       	ret

000030c4 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    30c4:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <twi_state>
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <twi_sendStop>
    30ce:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <twi_inRepStart>
    30d2:	61 e0       	ldi	r22, 0x01	; 1
    30d4:	82 e1       	ldi	r24, 0x12	; 18
    30d6:	0e 94 08 18 	call	0x3010	; 0x3010 <digitalWrite>
    30da:	61 e0       	ldi	r22, 0x01	; 1
    30dc:	83 e1       	ldi	r24, 0x13	; 19
    30de:	0e 94 08 18 	call	0x3010	; 0x3010 <digitalWrite>
    30e2:	e9 eb       	ldi	r30, 0xB9	; 185
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	80 81       	ld	r24, Z
    30e8:	8e 7f       	andi	r24, 0xFE	; 254
    30ea:	80 83       	st	Z, r24
    30ec:	80 81       	ld	r24, Z
    30ee:	8d 7f       	andi	r24, 0xFD	; 253
    30f0:	80 83       	st	Z, r24
    30f2:	88 e4       	ldi	r24, 0x48	; 72
    30f4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    30f8:	85 e4       	ldi	r24, 0x45	; 69
    30fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    30fe:	08 95       	ret

00003100 <twi_readFrom>:
    3100:	41 32       	cpi	r20, 0x21	; 33
    3102:	08 f0       	brcs	.+2      	; 0x3106 <twi_readFrom+0x6>
    3104:	43 c0       	rjmp	.+134    	; 0x318c <twi_readFrom+0x8c>
    3106:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <twi_state>
    310a:	91 11       	cpse	r25, r1
    310c:	fc cf       	rjmp	.-8      	; 0x3106 <twi_readFrom+0x6>
    310e:	91 e0       	ldi	r25, 0x01	; 1
    3110:	90 93 90 05 	sts	0x0590, r25	; 0x800590 <twi_state>
    3114:	20 93 8e 05 	sts	0x058E, r18	; 0x80058e <twi_sendStop>
    3118:	2f ef       	ldi	r18, 0xFF	; 255
    311a:	20 93 23 05 	sts	0x0523, r18	; 0x800523 <twi_error>
    311e:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <twi_masterBufferIndex>
    3122:	24 0f       	add	r18, r20
    3124:	20 93 67 05 	sts	0x0567, r18	; 0x800567 <twi_masterBufferLength>
    3128:	90 93 8f 05 	sts	0x058F, r25	; 0x80058f <twi_slarw>
    312c:	90 91 8f 05 	lds	r25, 0x058F	; 0x80058f <twi_slarw>
    3130:	88 0f       	add	r24, r24
    3132:	89 2b       	or	r24, r25
    3134:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <twi_slarw>
    3138:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <twi_inRepStart>
    313c:	81 30       	cpi	r24, 0x01	; 1
    313e:	61 f4       	brne	.+24     	; 0x3158 <twi_readFrom+0x58>
    3140:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <twi_inRepStart>
    3144:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <twi_slarw>
    3148:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    314c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3150:	83 fd       	sbrc	r24, 3
    3152:	f8 cf       	rjmp	.-16     	; 0x3144 <twi_readFrom+0x44>
    3154:	85 ec       	ldi	r24, 0xC5	; 197
    3156:	01 c0       	rjmp	.+2      	; 0x315a <twi_readFrom+0x5a>
    3158:	85 ee       	ldi	r24, 0xE5	; 229
    315a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    315e:	80 91 90 05 	lds	r24, 0x0590	; 0x800590 <twi_state>
    3162:	81 30       	cpi	r24, 0x01	; 1
    3164:	e1 f3       	breq	.-8      	; 0x315e <twi_readFrom+0x5e>
    3166:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <twi_masterBufferIndex>
    316a:	84 17       	cp	r24, r20
    316c:	10 f4       	brcc	.+4      	; 0x3172 <twi_readFrom+0x72>
    316e:	40 91 68 05 	lds	r20, 0x0568	; 0x800568 <twi_masterBufferIndex>
    3172:	29 e6       	ldi	r18, 0x69	; 105
    3174:	35 e0       	ldi	r19, 0x05	; 5
    3176:	fb 01       	movw	r30, r22
    3178:	d9 01       	movw	r26, r18
    317a:	8a 2f       	mov	r24, r26
    317c:	82 1b       	sub	r24, r18
    317e:	84 17       	cp	r24, r20
    3180:	18 f4       	brcc	.+6      	; 0x3188 <twi_readFrom+0x88>
    3182:	8d 91       	ld	r24, X+
    3184:	81 93       	st	Z+, r24
    3186:	f9 cf       	rjmp	.-14     	; 0x317a <twi_readFrom+0x7a>
    3188:	84 2f       	mov	r24, r20
    318a:	08 95       	ret
    318c:	80 e0       	ldi	r24, 0x00	; 0
    318e:	08 95       	ret

00003190 <twi_writeTo>:
    3190:	0f 93       	push	r16
    3192:	41 32       	cpi	r20, 0x21	; 33
    3194:	08 f0       	brcs	.+2      	; 0x3198 <twi_writeTo+0x8>
    3196:	4a c0       	rjmp	.+148    	; 0x322c <twi_writeTo+0x9c>
    3198:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <twi_state>
    319c:	91 11       	cpse	r25, r1
    319e:	fc cf       	rjmp	.-8      	; 0x3198 <twi_writeTo+0x8>
    31a0:	32 e0       	ldi	r19, 0x02	; 2
    31a2:	30 93 90 05 	sts	0x0590, r19	; 0x800590 <twi_state>
    31a6:	00 93 8e 05 	sts	0x058E, r16	; 0x80058e <twi_sendStop>
    31aa:	3f ef       	ldi	r19, 0xFF	; 255
    31ac:	30 93 23 05 	sts	0x0523, r19	; 0x800523 <twi_error>
    31b0:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <twi_masterBufferIndex>
    31b4:	40 93 67 05 	sts	0x0567, r20	; 0x800567 <twi_masterBufferLength>
    31b8:	fb 01       	movw	r30, r22
    31ba:	69 e6       	ldi	r22, 0x69	; 105
    31bc:	75 e0       	ldi	r23, 0x05	; 5
    31be:	db 01       	movw	r26, r22
    31c0:	3a 2f       	mov	r19, r26
    31c2:	36 1b       	sub	r19, r22
    31c4:	34 17       	cp	r19, r20
    31c6:	18 f4       	brcc	.+6      	; 0x31ce <twi_writeTo+0x3e>
    31c8:	31 91       	ld	r19, Z+
    31ca:	3d 93       	st	X+, r19
    31cc:	f9 cf       	rjmp	.-14     	; 0x31c0 <twi_writeTo+0x30>
    31ce:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <twi_slarw>
    31d2:	30 91 8f 05 	lds	r19, 0x058F	; 0x80058f <twi_slarw>
    31d6:	88 0f       	add	r24, r24
    31d8:	83 2b       	or	r24, r19
    31da:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <twi_slarw>
    31de:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <twi_inRepStart>
    31e2:	81 30       	cpi	r24, 0x01	; 1
    31e4:	61 f4       	brne	.+24     	; 0x31fe <twi_writeTo+0x6e>
    31e6:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <twi_inRepStart>
    31ea:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <twi_slarw>
    31ee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    31f2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    31f6:	83 fd       	sbrc	r24, 3
    31f8:	f8 cf       	rjmp	.-16     	; 0x31ea <twi_writeTo+0x5a>
    31fa:	85 ec       	ldi	r24, 0xC5	; 197
    31fc:	01 c0       	rjmp	.+2      	; 0x3200 <twi_writeTo+0x70>
    31fe:	85 ee       	ldi	r24, 0xE5	; 229
    3200:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3204:	22 23       	and	r18, r18
    3206:	21 f0       	breq	.+8      	; 0x3210 <twi_writeTo+0x80>
    3208:	80 91 90 05 	lds	r24, 0x0590	; 0x800590 <twi_state>
    320c:	82 30       	cpi	r24, 0x02	; 2
    320e:	d1 f3       	breq	.-12     	; 0x3204 <twi_writeTo+0x74>
    3210:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <twi_error>
    3214:	8f 3f       	cpi	r24, 0xFF	; 255
    3216:	79 f0       	breq	.+30     	; 0x3236 <twi_writeTo+0xa6>
    3218:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <twi_error>
    321c:	80 32       	cpi	r24, 0x20	; 32
    321e:	41 f0       	breq	.+16     	; 0x3230 <twi_writeTo+0xa0>
    3220:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <twi_error>
    3224:	80 33       	cpi	r24, 0x30	; 48
    3226:	31 f0       	breq	.+12     	; 0x3234 <twi_writeTo+0xa4>
    3228:	94 e0       	ldi	r25, 0x04	; 4
    322a:	05 c0       	rjmp	.+10     	; 0x3236 <twi_writeTo+0xa6>
    322c:	91 e0       	ldi	r25, 0x01	; 1
    322e:	03 c0       	rjmp	.+6      	; 0x3236 <twi_writeTo+0xa6>
    3230:	92 e0       	ldi	r25, 0x02	; 2
    3232:	01 c0       	rjmp	.+2      	; 0x3236 <twi_writeTo+0xa6>
    3234:	93 e0       	ldi	r25, 0x03	; 3
    3236:	89 2f       	mov	r24, r25
    3238:	0f 91       	pop	r16
    323a:	08 95       	ret

0000323c <twi_transmit>:
    323c:	40 91 45 05 	lds	r20, 0x0545	; 0x800545 <twi_txBufferLength>
    3240:	26 2f       	mov	r18, r22
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	24 0f       	add	r18, r20
    3246:	31 1d       	adc	r19, r1
    3248:	21 32       	cpi	r18, 0x21	; 33
    324a:	31 05       	cpc	r19, r1
    324c:	dc f4       	brge	.+54     	; 0x3284 <twi_transmit+0x48>
    324e:	20 91 90 05 	lds	r18, 0x0590	; 0x800590 <twi_state>
    3252:	24 30       	cpi	r18, 0x04	; 4
    3254:	c9 f4       	brne	.+50     	; 0x3288 <twi_transmit+0x4c>
    3256:	fc 01       	movw	r30, r24
    3258:	80 e0       	ldi	r24, 0x00	; 0
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	86 17       	cp	r24, r22
    325e:	58 f4       	brcc	.+22     	; 0x3276 <twi_transmit+0x3a>
    3260:	30 91 45 05 	lds	r19, 0x0545	; 0x800545 <twi_txBufferLength>
    3264:	21 91       	ld	r18, Z+
    3266:	dc 01       	movw	r26, r24
    3268:	a9 5b       	subi	r26, 0xB9	; 185
    326a:	ba 4f       	sbci	r27, 0xFA	; 250
    326c:	a3 0f       	add	r26, r19
    326e:	b1 1d       	adc	r27, r1
    3270:	2c 93       	st	X, r18
    3272:	01 96       	adiw	r24, 0x01	; 1
    3274:	f3 cf       	rjmp	.-26     	; 0x325c <twi_transmit+0x20>
    3276:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <twi_txBufferLength>
    327a:	68 0f       	add	r22, r24
    327c:	60 93 45 05 	sts	0x0545, r22	; 0x800545 <twi_txBufferLength>
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	08 95       	ret
    3284:	81 e0       	ldi	r24, 0x01	; 1
    3286:	08 95       	ret
    3288:	82 e0       	ldi	r24, 0x02	; 2
    328a:	08 95       	ret

0000328c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    328c:	85 ed       	ldi	r24, 0xD5	; 213
    328e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3292:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3296:	84 fd       	sbrc	r24, 4
    3298:	fc cf       	rjmp	.-8      	; 0x3292 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    329a:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <twi_state>
    329e:	08 95       	ret

000032a0 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    32a0:	85 ec       	ldi	r24, 0xC5	; 197
    32a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    32a6:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <twi_state>
    32aa:	08 95       	ret

000032ac <__vector_24>:
}

ISR(TWI_vect)
{
    32ac:	1f 92       	push	r1
    32ae:	0f 92       	push	r0
    32b0:	0f b6       	in	r0, 0x3f	; 63
    32b2:	0f 92       	push	r0
    32b4:	11 24       	eor	r1, r1
    32b6:	2f 93       	push	r18
    32b8:	3f 93       	push	r19
    32ba:	4f 93       	push	r20
    32bc:	5f 93       	push	r21
    32be:	6f 93       	push	r22
    32c0:	7f 93       	push	r23
    32c2:	8f 93       	push	r24
    32c4:	9f 93       	push	r25
    32c6:	af 93       	push	r26
    32c8:	bf 93       	push	r27
    32ca:	ef 93       	push	r30
    32cc:	ff 93       	push	r31
  switch(TW_STATUS){
    32ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    32d2:	88 7f       	andi	r24, 0xF8	; 248
    32d4:	80 36       	cpi	r24, 0x60	; 96
    32d6:	09 f4       	brne	.+2      	; 0x32da <__vector_24+0x2e>
    32d8:	9e c0       	rjmp	.+316    	; 0x3416 <__vector_24+0x16a>
    32da:	78 f5       	brcc	.+94     	; 0x333a <__vector_24+0x8e>
    32dc:	88 32       	cpi	r24, 0x28	; 40
    32de:	09 f4       	brne	.+2      	; 0x32e2 <__vector_24+0x36>
    32e0:	5d c0       	rjmp	.+186    	; 0x339c <__vector_24+0xf0>
    32e2:	90 f4       	brcc	.+36     	; 0x3308 <__vector_24+0x5c>
    32e4:	80 31       	cpi	r24, 0x10	; 16
    32e6:	09 f4       	brne	.+2      	; 0x32ea <__vector_24+0x3e>
    32e8:	56 c0       	rjmp	.+172    	; 0x3396 <__vector_24+0xea>
    32ea:	38 f4       	brcc	.+14     	; 0x32fa <__vector_24+0x4e>
    32ec:	88 23       	and	r24, r24
    32ee:	09 f4       	brne	.+2      	; 0x32f2 <__vector_24+0x46>
    32f0:	f5 c0       	rjmp	.+490    	; 0x34dc <__vector_24+0x230>
    32f2:	88 30       	cpi	r24, 0x08	; 8
    32f4:	09 f4       	brne	.+2      	; 0x32f8 <__vector_24+0x4c>
    32f6:	4f c0       	rjmp	.+158    	; 0x3396 <__vector_24+0xea>
    32f8:	f5 c0       	rjmp	.+490    	; 0x34e4 <__vector_24+0x238>
    32fa:	88 31       	cpi	r24, 0x18	; 24
    32fc:	09 f4       	brne	.+2      	; 0x3300 <__vector_24+0x54>
    32fe:	4e c0       	rjmp	.+156    	; 0x339c <__vector_24+0xf0>
    3300:	80 32       	cpi	r24, 0x20	; 32
    3302:	09 f4       	brne	.+2      	; 0x3306 <__vector_24+0x5a>
    3304:	5f c0       	rjmp	.+190    	; 0x33c4 <__vector_24+0x118>
    3306:	ee c0       	rjmp	.+476    	; 0x34e4 <__vector_24+0x238>
    3308:	80 34       	cpi	r24, 0x40	; 64
    330a:	09 f4       	brne	.+2      	; 0x330e <__vector_24+0x62>
    330c:	6a c0       	rjmp	.+212    	; 0x33e2 <__vector_24+0x136>
    330e:	58 f4       	brcc	.+22     	; 0x3326 <__vector_24+0x7a>
    3310:	80 33       	cpi	r24, 0x30	; 48
    3312:	09 f4       	brne	.+2      	; 0x3316 <__vector_24+0x6a>
    3314:	57 c0       	rjmp	.+174    	; 0x33c4 <__vector_24+0x118>
    3316:	88 33       	cpi	r24, 0x38	; 56
    3318:	09 f0       	breq	.+2      	; 0x331c <__vector_24+0x70>
    331a:	e4 c0       	rjmp	.+456    	; 0x34e4 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    331c:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <twi_error>
      twi_releaseBus();
    3320:	0e 94 50 19 	call	0x32a0	; 0x32a0 <twi_releaseBus>
      break;
    3324:	df c0       	rjmp	.+446    	; 0x34e4 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3326:	80 35       	cpi	r24, 0x50	; 80
    3328:	09 f4       	brne	.+2      	; 0x332c <__vector_24+0x80>
    332a:	4f c0       	rjmp	.+158    	; 0x33ca <__vector_24+0x11e>
    332c:	88 35       	cpi	r24, 0x58	; 88
    332e:	09 f4       	brne	.+2      	; 0x3332 <__vector_24+0x86>
    3330:	5d c0       	rjmp	.+186    	; 0x33ec <__vector_24+0x140>
    3332:	88 34       	cpi	r24, 0x48	; 72
    3334:	09 f0       	breq	.+2      	; 0x3338 <__vector_24+0x8c>
    3336:	d6 c0       	rjmp	.+428    	; 0x34e4 <__vector_24+0x238>
    3338:	d3 c0       	rjmp	.+422    	; 0x34e0 <__vector_24+0x234>
    333a:	88 39       	cpi	r24, 0x98	; 152
    333c:	09 f4       	brne	.+2      	; 0x3340 <__vector_24+0x94>
    333e:	c4 c0       	rjmp	.+392    	; 0x34c8 <__vector_24+0x21c>
    3340:	a8 f4       	brcc	.+42     	; 0x336c <__vector_24+0xc0>
    3342:	88 37       	cpi	r24, 0x78	; 120
    3344:	09 f4       	brne	.+2      	; 0x3348 <__vector_24+0x9c>
    3346:	67 c0       	rjmp	.+206    	; 0x3416 <__vector_24+0x16a>
    3348:	38 f4       	brcc	.+14     	; 0x3358 <__vector_24+0xac>
    334a:	88 36       	cpi	r24, 0x68	; 104
    334c:	09 f4       	brne	.+2      	; 0x3350 <__vector_24+0xa4>
    334e:	63 c0       	rjmp	.+198    	; 0x3416 <__vector_24+0x16a>
    3350:	80 37       	cpi	r24, 0x70	; 112
    3352:	09 f4       	brne	.+2      	; 0x3356 <__vector_24+0xaa>
    3354:	60 c0       	rjmp	.+192    	; 0x3416 <__vector_24+0x16a>
    3356:	c6 c0       	rjmp	.+396    	; 0x34e4 <__vector_24+0x238>
    3358:	88 38       	cpi	r24, 0x88	; 136
    335a:	09 f4       	brne	.+2      	; 0x335e <__vector_24+0xb2>
    335c:	b5 c0       	rjmp	.+362    	; 0x34c8 <__vector_24+0x21c>
    335e:	80 39       	cpi	r24, 0x90	; 144
    3360:	09 f4       	brne	.+2      	; 0x3364 <__vector_24+0xb8>
    3362:	5f c0       	rjmp	.+190    	; 0x3422 <__vector_24+0x176>
    3364:	80 38       	cpi	r24, 0x80	; 128
    3366:	09 f0       	breq	.+2      	; 0x336a <__vector_24+0xbe>
    3368:	bd c0       	rjmp	.+378    	; 0x34e4 <__vector_24+0x238>
    336a:	5b c0       	rjmp	.+182    	; 0x3422 <__vector_24+0x176>
    336c:	80 3b       	cpi	r24, 0xB0	; 176
    336e:	09 f4       	brne	.+2      	; 0x3372 <__vector_24+0xc6>
    3370:	83 c0       	rjmp	.+262    	; 0x3478 <__vector_24+0x1cc>
    3372:	38 f4       	brcc	.+14     	; 0x3382 <__vector_24+0xd6>
    3374:	80 3a       	cpi	r24, 0xA0	; 160
    3376:	09 f4       	brne	.+2      	; 0x337a <__vector_24+0xce>
    3378:	66 c0       	rjmp	.+204    	; 0x3446 <__vector_24+0x19a>
    337a:	88 3a       	cpi	r24, 0xA8	; 168
    337c:	09 f4       	brne	.+2      	; 0x3380 <__vector_24+0xd4>
    337e:	7c c0       	rjmp	.+248    	; 0x3478 <__vector_24+0x1cc>
    3380:	b1 c0       	rjmp	.+354    	; 0x34e4 <__vector_24+0x238>
    3382:	80 3c       	cpi	r24, 0xC0	; 192
    3384:	09 f4       	brne	.+2      	; 0x3388 <__vector_24+0xdc>
    3386:	a4 c0       	rjmp	.+328    	; 0x34d0 <__vector_24+0x224>
    3388:	88 3c       	cpi	r24, 0xC8	; 200
    338a:	09 f4       	brne	.+2      	; 0x338e <__vector_24+0xe2>
    338c:	a1 c0       	rjmp	.+322    	; 0x34d0 <__vector_24+0x224>
    338e:	88 3b       	cpi	r24, 0xB8	; 184
    3390:	09 f4       	brne	.+2      	; 0x3394 <__vector_24+0xe8>
    3392:	87 c0       	rjmp	.+270    	; 0x34a2 <__vector_24+0x1f6>
    3394:	a7 c0       	rjmp	.+334    	; 0x34e4 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3396:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <twi_slarw>
    339a:	10 c0       	rjmp	.+32     	; 0x33bc <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    339c:	90 91 68 05 	lds	r25, 0x0568	; 0x800568 <twi_masterBufferIndex>
    33a0:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <twi_masterBufferLength>
    33a4:	98 17       	cp	r25, r24
    33a6:	70 f5       	brcc	.+92     	; 0x3404 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    33a8:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <twi_masterBufferIndex>
    33ac:	81 e0       	ldi	r24, 0x01	; 1
    33ae:	8e 0f       	add	r24, r30
    33b0:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <twi_masterBufferIndex>
    33b4:	f0 e0       	ldi	r31, 0x00	; 0
    33b6:	e7 59       	subi	r30, 0x97	; 151
    33b8:	fa 4f       	sbci	r31, 0xFA	; 250
    33ba:	80 81       	ld	r24, Z
    33bc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    33c0:	85 ec       	ldi	r24, 0xC5	; 197
    33c2:	83 c0       	rjmp	.+262    	; 0x34ca <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    33c4:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <twi_error>
    33c8:	8b c0       	rjmp	.+278    	; 0x34e0 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    33ca:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <twi_masterBufferIndex>
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	8e 0f       	add	r24, r30
    33d2:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <twi_masterBufferIndex>
    33d6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    33da:	f0 e0       	ldi	r31, 0x00	; 0
    33dc:	e7 59       	subi	r30, 0x97	; 151
    33de:	fa 4f       	sbci	r31, 0xFA	; 250
    33e0:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    33e2:	90 91 68 05 	lds	r25, 0x0568	; 0x800568 <twi_masterBufferIndex>
    33e6:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <twi_masterBufferLength>
    33ea:	6b c0       	rjmp	.+214    	; 0x34c2 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    33ec:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <twi_masterBufferIndex>
    33f0:	81 e0       	ldi	r24, 0x01	; 1
    33f2:	8e 0f       	add	r24, r30
    33f4:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <twi_masterBufferIndex>
    33f8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    33fc:	f0 e0       	ldi	r31, 0x00	; 0
    33fe:	e7 59       	subi	r30, 0x97	; 151
    3400:	fa 4f       	sbci	r31, 0xFA	; 250
    3402:	80 83       	st	Z, r24
	if (twi_sendStop)
    3404:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <twi_sendStop>
    3408:	81 11       	cpse	r24, r1
    340a:	6a c0       	rjmp	.+212    	; 0x34e0 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    340c:	81 e0       	ldi	r24, 0x01	; 1
    340e:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3412:	84 ea       	ldi	r24, 0xA4	; 164
    3414:	5e c0       	rjmp	.+188    	; 0x34d2 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3416:	83 e0       	ldi	r24, 0x03	; 3
    3418:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    341c:	10 92 24 05 	sts	0x0524, r1	; 0x800524 <twi_rxBufferIndex>
    3420:	cf cf       	rjmp	.-98     	; 0x33c0 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3422:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <twi_rxBufferIndex>
    3426:	80 32       	cpi	r24, 0x20	; 32
    3428:	08 f0       	brcs	.+2      	; 0x342c <__vector_24+0x180>
    342a:	4e c0       	rjmp	.+156    	; 0x34c8 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    342c:	e0 91 24 05 	lds	r30, 0x0524	; 0x800524 <twi_rxBufferIndex>
    3430:	81 e0       	ldi	r24, 0x01	; 1
    3432:	8e 0f       	add	r24, r30
    3434:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <twi_rxBufferIndex>
    3438:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    343c:	f0 e0       	ldi	r31, 0x00	; 0
    343e:	eb 5d       	subi	r30, 0xDB	; 219
    3440:	fa 4f       	sbci	r31, 0xFA	; 250
    3442:	80 83       	st	Z, r24
    3444:	bd cf       	rjmp	.-134    	; 0x33c0 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3446:	0e 94 50 19 	call	0x32a0	; 0x32a0 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    344a:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <twi_rxBufferIndex>
    344e:	80 32       	cpi	r24, 0x20	; 32
    3450:	30 f4       	brcc	.+12     	; 0x345e <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3452:	e0 91 24 05 	lds	r30, 0x0524	; 0x800524 <twi_rxBufferIndex>
    3456:	f0 e0       	ldi	r31, 0x00	; 0
    3458:	eb 5d       	subi	r30, 0xDB	; 219
    345a:	fa 4f       	sbci	r31, 0xFA	; 250
    345c:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    345e:	60 91 24 05 	lds	r22, 0x0524	; 0x800524 <twi_rxBufferIndex>
    3462:	70 e0       	ldi	r23, 0x00	; 0
    3464:	e0 91 89 05 	lds	r30, 0x0589	; 0x800589 <twi_onSlaveReceive>
    3468:	f0 91 8a 05 	lds	r31, 0x058A	; 0x80058a <twi_onSlaveReceive+0x1>
    346c:	85 e2       	ldi	r24, 0x25	; 37
    346e:	95 e0       	ldi	r25, 0x05	; 5
    3470:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3472:	10 92 24 05 	sts	0x0524, r1	; 0x800524 <twi_rxBufferIndex>
      break;
    3476:	36 c0       	rjmp	.+108    	; 0x34e4 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3478:	84 e0       	ldi	r24, 0x04	; 4
    347a:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    347e:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3482:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3486:	e0 91 8b 05 	lds	r30, 0x058B	; 0x80058b <twi_onSlaveTransmit>
    348a:	f0 91 8c 05 	lds	r31, 0x058C	; 0x80058c <twi_onSlaveTransmit+0x1>
    348e:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3490:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <twi_txBufferLength>
    3494:	81 11       	cpse	r24, r1
    3496:	05 c0       	rjmp	.+10     	; 0x34a2 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    3498:	81 e0       	ldi	r24, 0x01	; 1
    349a:	80 93 45 05 	sts	0x0545, r24	; 0x800545 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    349e:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    34a2:	e0 91 46 05 	lds	r30, 0x0546	; 0x800546 <twi_txBufferIndex>
    34a6:	81 e0       	ldi	r24, 0x01	; 1
    34a8:	8e 0f       	add	r24, r30
    34aa:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <twi_txBufferIndex>
    34ae:	f0 e0       	ldi	r31, 0x00	; 0
    34b0:	e9 5b       	subi	r30, 0xB9	; 185
    34b2:	fa 4f       	sbci	r31, 0xFA	; 250
    34b4:	80 81       	ld	r24, Z
    34b6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    34ba:	90 91 46 05 	lds	r25, 0x0546	; 0x800546 <twi_txBufferIndex>
    34be:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <twi_txBufferLength>
    34c2:	98 17       	cp	r25, r24
    34c4:	08 f4       	brcc	.+2      	; 0x34c8 <__vector_24+0x21c>
    34c6:	7c cf       	rjmp	.-264    	; 0x33c0 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    34c8:	85 e8       	ldi	r24, 0x85	; 133
    34ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    34ce:	0a c0       	rjmp	.+20     	; 0x34e4 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    34d0:	85 ec       	ldi	r24, 0xC5	; 197
    34d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    34d6:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <twi_state>
      break;
    34da:	04 c0       	rjmp	.+8      	; 0x34e4 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    34dc:	10 92 23 05 	sts	0x0523, r1	; 0x800523 <twi_error>
      twi_stop();
    34e0:	0e 94 46 19 	call	0x328c	; 0x328c <twi_stop>
      break;
  }
}
    34e4:	ff 91       	pop	r31
    34e6:	ef 91       	pop	r30
    34e8:	bf 91       	pop	r27
    34ea:	af 91       	pop	r26
    34ec:	9f 91       	pop	r25
    34ee:	8f 91       	pop	r24
    34f0:	7f 91       	pop	r23
    34f2:	6f 91       	pop	r22
    34f4:	5f 91       	pop	r21
    34f6:	4f 91       	pop	r20
    34f8:	3f 91       	pop	r19
    34fa:	2f 91       	pop	r18
    34fc:	0f 90       	pop	r0
    34fe:	0f be       	out	0x3f, r0	; 63
    3500:	0f 90       	pop	r0
    3502:	1f 90       	pop	r1
    3504:	18 95       	reti

00003506 <__cmpsf2>:
    3506:	0e 94 88 1a 	call	0x3510	; 0x3510 <__fp_cmp>
    350a:	08 f4       	brcc	.+2      	; 0x350e <__cmpsf2+0x8>
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	08 95       	ret

00003510 <__fp_cmp>:
    3510:	99 0f       	add	r25, r25
    3512:	00 08       	sbc	r0, r0
    3514:	55 0f       	add	r21, r21
    3516:	aa 0b       	sbc	r26, r26
    3518:	e0 e8       	ldi	r30, 0x80	; 128
    351a:	fe ef       	ldi	r31, 0xFE	; 254
    351c:	16 16       	cp	r1, r22
    351e:	17 06       	cpc	r1, r23
    3520:	e8 07       	cpc	r30, r24
    3522:	f9 07       	cpc	r31, r25
    3524:	c0 f0       	brcs	.+48     	; 0x3556 <__fp_cmp+0x46>
    3526:	12 16       	cp	r1, r18
    3528:	13 06       	cpc	r1, r19
    352a:	e4 07       	cpc	r30, r20
    352c:	f5 07       	cpc	r31, r21
    352e:	98 f0       	brcs	.+38     	; 0x3556 <__fp_cmp+0x46>
    3530:	62 1b       	sub	r22, r18
    3532:	73 0b       	sbc	r23, r19
    3534:	84 0b       	sbc	r24, r20
    3536:	95 0b       	sbc	r25, r21
    3538:	39 f4       	brne	.+14     	; 0x3548 <__fp_cmp+0x38>
    353a:	0a 26       	eor	r0, r26
    353c:	61 f0       	breq	.+24     	; 0x3556 <__fp_cmp+0x46>
    353e:	23 2b       	or	r18, r19
    3540:	24 2b       	or	r18, r20
    3542:	25 2b       	or	r18, r21
    3544:	21 f4       	brne	.+8      	; 0x354e <__fp_cmp+0x3e>
    3546:	08 95       	ret
    3548:	0a 26       	eor	r0, r26
    354a:	09 f4       	brne	.+2      	; 0x354e <__fp_cmp+0x3e>
    354c:	a1 40       	sbci	r26, 0x01	; 1
    354e:	a6 95       	lsr	r26
    3550:	8f ef       	ldi	r24, 0xFF	; 255
    3552:	81 1d       	adc	r24, r1
    3554:	81 1d       	adc	r24, r1
    3556:	08 95       	ret

00003558 <__gesf2>:
    3558:	0e 94 88 1a 	call	0x3510	; 0x3510 <__fp_cmp>
    355c:	08 f4       	brcc	.+2      	; 0x3560 <__gesf2+0x8>
    355e:	8f ef       	ldi	r24, 0xFF	; 255
    3560:	08 95       	ret

00003562 <__unordsf2>:
    3562:	0e 94 88 1a 	call	0x3510	; 0x3510 <__fp_cmp>
    3566:	88 0b       	sbc	r24, r24
    3568:	99 0b       	sbc	r25, r25
    356a:	08 95       	ret

0000356c <__mulsi3>:
    356c:	db 01       	movw	r26, r22
    356e:	8f 93       	push	r24
    3570:	9f 93       	push	r25
    3572:	0e 94 39 1b 	call	0x3672	; 0x3672 <__muluhisi3>
    3576:	bf 91       	pop	r27
    3578:	af 91       	pop	r26
    357a:	a2 9f       	mul	r26, r18
    357c:	80 0d       	add	r24, r0
    357e:	91 1d       	adc	r25, r1
    3580:	a3 9f       	mul	r26, r19
    3582:	90 0d       	add	r25, r0
    3584:	b2 9f       	mul	r27, r18
    3586:	90 0d       	add	r25, r0
    3588:	11 24       	eor	r1, r1
    358a:	08 95       	ret

0000358c <__divmodhi4>:
    358c:	97 fb       	bst	r25, 7
    358e:	07 2e       	mov	r0, r23
    3590:	16 f4       	brtc	.+4      	; 0x3596 <__divmodhi4+0xa>
    3592:	00 94       	com	r0
    3594:	07 d0       	rcall	.+14     	; 0x35a4 <__divmodhi4_neg1>
    3596:	77 fd       	sbrc	r23, 7
    3598:	09 d0       	rcall	.+18     	; 0x35ac <__divmodhi4_neg2>
    359a:	0e 94 44 1b 	call	0x3688	; 0x3688 <__udivmodhi4>
    359e:	07 fc       	sbrc	r0, 7
    35a0:	05 d0       	rcall	.+10     	; 0x35ac <__divmodhi4_neg2>
    35a2:	3e f4       	brtc	.+14     	; 0x35b2 <__divmodhi4_exit>

000035a4 <__divmodhi4_neg1>:
    35a4:	90 95       	com	r25
    35a6:	81 95       	neg	r24
    35a8:	9f 4f       	sbci	r25, 0xFF	; 255
    35aa:	08 95       	ret

000035ac <__divmodhi4_neg2>:
    35ac:	70 95       	com	r23
    35ae:	61 95       	neg	r22
    35b0:	7f 4f       	sbci	r23, 0xFF	; 255

000035b2 <__divmodhi4_exit>:
    35b2:	08 95       	ret

000035b4 <__udivmodsi4>:
    35b4:	a1 e2       	ldi	r26, 0x21	; 33
    35b6:	1a 2e       	mov	r1, r26
    35b8:	aa 1b       	sub	r26, r26
    35ba:	bb 1b       	sub	r27, r27
    35bc:	fd 01       	movw	r30, r26
    35be:	0d c0       	rjmp	.+26     	; 0x35da <__udivmodsi4_ep>

000035c0 <__udivmodsi4_loop>:
    35c0:	aa 1f       	adc	r26, r26
    35c2:	bb 1f       	adc	r27, r27
    35c4:	ee 1f       	adc	r30, r30
    35c6:	ff 1f       	adc	r31, r31
    35c8:	a2 17       	cp	r26, r18
    35ca:	b3 07       	cpc	r27, r19
    35cc:	e4 07       	cpc	r30, r20
    35ce:	f5 07       	cpc	r31, r21
    35d0:	20 f0       	brcs	.+8      	; 0x35da <__udivmodsi4_ep>
    35d2:	a2 1b       	sub	r26, r18
    35d4:	b3 0b       	sbc	r27, r19
    35d6:	e4 0b       	sbc	r30, r20
    35d8:	f5 0b       	sbc	r31, r21

000035da <__udivmodsi4_ep>:
    35da:	66 1f       	adc	r22, r22
    35dc:	77 1f       	adc	r23, r23
    35de:	88 1f       	adc	r24, r24
    35e0:	99 1f       	adc	r25, r25
    35e2:	1a 94       	dec	r1
    35e4:	69 f7       	brne	.-38     	; 0x35c0 <__udivmodsi4_loop>
    35e6:	60 95       	com	r22
    35e8:	70 95       	com	r23
    35ea:	80 95       	com	r24
    35ec:	90 95       	com	r25
    35ee:	9b 01       	movw	r18, r22
    35f0:	ac 01       	movw	r20, r24
    35f2:	bd 01       	movw	r22, r26
    35f4:	cf 01       	movw	r24, r30
    35f6:	08 95       	ret

000035f8 <__divmodsi4>:
    35f8:	05 2e       	mov	r0, r21
    35fa:	97 fb       	bst	r25, 7
    35fc:	1e f4       	brtc	.+6      	; 0x3604 <__divmodsi4+0xc>
    35fe:	00 94       	com	r0
    3600:	0e 94 13 1b 	call	0x3626	; 0x3626 <__negsi2>
    3604:	57 fd       	sbrc	r21, 7
    3606:	07 d0       	rcall	.+14     	; 0x3616 <__divmodsi4_neg2>
    3608:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <__udivmodsi4>
    360c:	07 fc       	sbrc	r0, 7
    360e:	03 d0       	rcall	.+6      	; 0x3616 <__divmodsi4_neg2>
    3610:	4e f4       	brtc	.+18     	; 0x3624 <__divmodsi4_exit>
    3612:	0c 94 13 1b 	jmp	0x3626	; 0x3626 <__negsi2>

00003616 <__divmodsi4_neg2>:
    3616:	50 95       	com	r21
    3618:	40 95       	com	r20
    361a:	30 95       	com	r19
    361c:	21 95       	neg	r18
    361e:	3f 4f       	sbci	r19, 0xFF	; 255
    3620:	4f 4f       	sbci	r20, 0xFF	; 255
    3622:	5f 4f       	sbci	r21, 0xFF	; 255

00003624 <__divmodsi4_exit>:
    3624:	08 95       	ret

00003626 <__negsi2>:
    3626:	90 95       	com	r25
    3628:	80 95       	com	r24
    362a:	70 95       	com	r23
    362c:	61 95       	neg	r22
    362e:	7f 4f       	sbci	r23, 0xFF	; 255
    3630:	8f 4f       	sbci	r24, 0xFF	; 255
    3632:	9f 4f       	sbci	r25, 0xFF	; 255
    3634:	08 95       	ret

00003636 <__mulhisi3>:
    3636:	0e 94 23 1b 	call	0x3646	; 0x3646 <__umulhisi3>
    363a:	33 23       	and	r19, r19
    363c:	12 f4       	brpl	.+4      	; 0x3642 <__mulhisi3+0xc>
    363e:	8a 1b       	sub	r24, r26
    3640:	9b 0b       	sbc	r25, r27
    3642:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <__usmulhisi3_tail>

00003646 <__umulhisi3>:
    3646:	a2 9f       	mul	r26, r18
    3648:	b0 01       	movw	r22, r0
    364a:	b3 9f       	mul	r27, r19
    364c:	c0 01       	movw	r24, r0
    364e:	a3 9f       	mul	r26, r19
    3650:	70 0d       	add	r23, r0
    3652:	81 1d       	adc	r24, r1
    3654:	11 24       	eor	r1, r1
    3656:	91 1d       	adc	r25, r1
    3658:	b2 9f       	mul	r27, r18
    365a:	70 0d       	add	r23, r0
    365c:	81 1d       	adc	r24, r1
    365e:	11 24       	eor	r1, r1
    3660:	91 1d       	adc	r25, r1
    3662:	08 95       	ret

00003664 <__usmulhisi3>:
    3664:	0e 94 23 1b 	call	0x3646	; 0x3646 <__umulhisi3>

00003668 <__usmulhisi3_tail>:
    3668:	b7 ff       	sbrs	r27, 7
    366a:	08 95       	ret
    366c:	82 1b       	sub	r24, r18
    366e:	93 0b       	sbc	r25, r19
    3670:	08 95       	ret

00003672 <__muluhisi3>:
    3672:	0e 94 23 1b 	call	0x3646	; 0x3646 <__umulhisi3>
    3676:	a5 9f       	mul	r26, r21
    3678:	90 0d       	add	r25, r0
    367a:	b4 9f       	mul	r27, r20
    367c:	90 0d       	add	r25, r0
    367e:	a4 9f       	mul	r26, r20
    3680:	80 0d       	add	r24, r0
    3682:	91 1d       	adc	r25, r1
    3684:	11 24       	eor	r1, r1
    3686:	08 95       	ret

00003688 <__udivmodhi4>:
    3688:	aa 1b       	sub	r26, r26
    368a:	bb 1b       	sub	r27, r27
    368c:	51 e1       	ldi	r21, 0x11	; 17
    368e:	07 c0       	rjmp	.+14     	; 0x369e <__udivmodhi4_ep>

00003690 <__udivmodhi4_loop>:
    3690:	aa 1f       	adc	r26, r26
    3692:	bb 1f       	adc	r27, r27
    3694:	a6 17       	cp	r26, r22
    3696:	b7 07       	cpc	r27, r23
    3698:	10 f0       	brcs	.+4      	; 0x369e <__udivmodhi4_ep>
    369a:	a6 1b       	sub	r26, r22
    369c:	b7 0b       	sbc	r27, r23

0000369e <__udivmodhi4_ep>:
    369e:	88 1f       	adc	r24, r24
    36a0:	99 1f       	adc	r25, r25
    36a2:	5a 95       	dec	r21
    36a4:	a9 f7       	brne	.-22     	; 0x3690 <__udivmodhi4_loop>
    36a6:	80 95       	com	r24
    36a8:	90 95       	com	r25
    36aa:	bc 01       	movw	r22, r24
    36ac:	cd 01       	movw	r24, r26
    36ae:	08 95       	ret

000036b0 <__tablejump2__>:
    36b0:	ee 0f       	add	r30, r30
    36b2:	ff 1f       	adc	r31, r31
    36b4:	05 90       	lpm	r0, Z+
    36b6:	f4 91       	lpm	r31, Z
    36b8:	e0 2d       	mov	r30, r0
    36ba:	09 94       	ijmp

000036bc <eeprom_read_byte>:
    36bc:	f9 99       	sbic	0x1f, 1	; 31
    36be:	fe cf       	rjmp	.-4      	; 0x36bc <eeprom_read_byte>
    36c0:	92 bd       	out	0x22, r25	; 34
    36c2:	81 bd       	out	0x21, r24	; 33
    36c4:	f8 9a       	sbi	0x1f, 0	; 31
    36c6:	99 27       	eor	r25, r25
    36c8:	80 b5       	in	r24, 0x20	; 32
    36ca:	08 95       	ret

000036cc <_exit>:
    36cc:	f8 94       	cli

000036ce <__stop_program>:
    36ce:	ff cf       	rjmp	.-2      	; 0x36ce <__stop_program>
