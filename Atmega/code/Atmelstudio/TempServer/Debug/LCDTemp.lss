
LCDTemp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  000029e6  00002a7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001e6  008001aa  008001aa  00002b24  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002b24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000718  00000000  00000000  00002bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f534  00000000  00000000  000032d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000033b0  00000000  00000000  0001280c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003abe  00000000  00000000  00015bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001530  00000000  00000000  0001967c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003210  00000000  00000000  0001abac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000769b  00000000  00000000  0001ddbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000730  00000000  00000000  00025457  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__ctors_end>
       4:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
       8:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
       c:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      10:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      14:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      18:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      1c:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      20:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      24:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      28:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      2c:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      30:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      34:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      38:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      3c:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      40:	0c 94 a6 08 	jmp	0x114c	; 0x114c <__vector_16>
      44:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      48:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__vector_18>
      4c:	0c 94 2a 03 	jmp	0x654	; 0x654 <__vector_19>
      50:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      54:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      58:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      5c:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      60:	0c 94 b8 0c 	jmp	0x1970	; 0x1970 <__vector_24>
      64:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 5e       	subi	r16, 0xE0	; 224
      6a:	bc e2       	ldi	r27, 0x2C	; 44
      6c:	61 3f       	cpi	r22, 0xF1	; 241
      6e:	dd 83       	std	Y+5, r29	; 0x05
      70:	c2 9c       	mul	r12, r2
      72:	7e 20       	and	r7, r14
      74:	a3 fd       	sbrc	r26, 3
      76:	1f 41       	sbci	r17, 0x1F	; 31
      78:	9d c3       	rjmp	.+1850   	; 0x7b4 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0xe>
      7a:	21 7f       	andi	r18, 0xF1	; 241
      7c:	fc a2       	std	Y+36, r15	; 0x24
      7e:	40 1e       	adc	r4, r16
      80:	5f 01       	movw	r10, r30
      82:	e3 bd       	out	0x23, r30	; 35
      84:	3e 60       	ori	r19, 0x0E	; 14
      86:	82 dc       	rcall	.-1788   	; 0xfffff98c <__eeprom_end+0xff7ef98c>
      88:	23 7d       	andi	r18, 0xD3	; 211
      8a:	9f c1       	rjmp	.+830    	; 0x3ca <_ZN14HardwareSerial4peekEv+0x18>
      8c:	42 1c       	adc	r4, r2
      8e:	fe a0       	ldd	r15, Y+38	; 0x26
      90:	e1 bf       	out	0x31, r30	; 49
      92:	5d 03       	fmul	r21, r21
      94:	80 de       	rcall	.-768    	; 0xfffffd96 <__eeprom_end+0xff7efd96>
      96:	3c 62       	ori	r19, 0x2C	; 44
      98:	be e0       	ldi	r27, 0x0E	; 14
      9a:	02 5c       	subi	r16, 0xC2	; 194
      9c:	df 81       	ldd	r29, Y+7	; 0x07
      9e:	63 3d       	cpi	r22, 0xD3	; 211
      a0:	7c 22       	and	r7, r28
      a2:	c0 9e       	mul	r12, r16
      a4:	1d 43       	sbci	r17, 0x3D	; 61
      a6:	a1 ff       	sbrs	r26, 1
      a8:	46 18       	sub	r4, r6
      aa:	fa a4       	ldd	r15, Y+42	; 0x2a
      ac:	27 79       	andi	r18, 0x97	; 151
      ae:	9b c5       	rjmp	.+2870   	; 0xbe6 <_ZN7OneWire12reset_searchEv+0x14>
      b0:	84 da       	rcall	.-2808   	; 0xfffff5ba <__eeprom_end+0xff7ef5ba>
      b2:	38 66       	ori	r19, 0x68	; 104
      b4:	e5 bb       	out	0x15, r30	; 21
      b6:	59 07       	cpc	r21, r25
      b8:	db 85       	ldd	r29, Y+11	; 0x0b
      ba:	67 39       	cpi	r22, 0x97	; 151
      bc:	ba e4       	ldi	r27, 0x4A	; 74
      be:	06 58       	subi	r16, 0x86	; 134
      c0:	19 47       	sbci	r17, 0x79	; 121
      c2:	a5 fb       	bst	r26, 5
      c4:	78 26       	eor	r7, r24
      c6:	c4 9a       	sbi	0x18, 4	; 24
      c8:	65 3b       	cpi	r22, 0xB5	; 181
      ca:	d9 87       	std	Y+9, r29	; 0x09
      cc:	04 5a       	subi	r16, 0xA4	; 164
      ce:	b8 e6       	ldi	r27, 0x68	; 104
      d0:	a7 f9       	bld	r26, 7
      d2:	1b 45       	sbci	r17, 0x5B	; 91
      d4:	c6 98       	cbi	0x18, 6	; 24
      d6:	7a 24       	eor	r7, r10
      d8:	f8 a6       	std	Y+40, r15	; 0x28
      da:	44 1a       	sub	r4, r20
      dc:	99 c7       	rjmp	.+3890   	; 0x1010 <_ZN5Print10printFloatEdh+0x8c>
      de:	25 7b       	andi	r18, 0xB5	; 181
      e0:	3a 64       	ori	r19, 0x4A	; 74
      e2:	86 d8       	rcall	.-3828   	; 0xfffff1f0 <__eeprom_end+0xff7ef1f0>
      e4:	5b 05       	cpc	r21, r11
      e6:	e7 b9       	out	0x07, r30	; 7
      e8:	8c d2       	rcall	.+1304   	; 0x602 <__vector_18+0x12>
      ea:	30 6e       	ori	r19, 0xE0	; 224
      ec:	ed b3       	in	r30, 0x1d	; 29
      ee:	51 0f       	add	r21, r17
      f0:	4e 10       	cpse	r4, r14
      f2:	f2 ac       	ldd	r15, Z+58	; 0x3a
      f4:	2f 71       	andi	r18, 0x1F	; 31
      f6:	93 cd       	rjmp	.-1242   	; 0xfffffc1e <__eeprom_end+0xff7efc1e>
      f8:	11 4f       	sbci	r17, 0xF1	; 241
      fa:	ad f3       	brhs	.-22     	; 0xe6 <__trampolines_end+0x7e>
      fc:	70 2e       	mov	r7, r16
      fe:	cc 92       	st	X, r12
     100:	d3 8d       	ldd	r29, Z+27	; 0x1b
     102:	6f 31       	cpi	r22, 0x1F	; 31
     104:	b2 ec       	ldi	r27, 0xC2	; 194
     106:	0e 50       	subi	r16, 0x0E	; 14
     108:	af f1       	brie	.+106    	; 0x174 <digital_pin_to_timer_PGM+0xc>
     10a:	13 4d       	sbci	r17, 0xD3	; 211
     10c:	ce 90       	ld	r12, -X
     10e:	72 2c       	mov	r7, r2
     110:	6d 33       	cpi	r22, 0x3D	; 61
     112:	d1 8f       	std	Z+25, r29	; 0x19
     114:	0c 52       	subi	r16, 0x2C	; 44
     116:	b0 ee       	ldi	r27, 0xE0	; 224
     118:	32 6c       	ori	r19, 0xC2	; 194
     11a:	8e d0       	rcall	.+284    	; 0x238 <_Z15adresseAusgebenv+0x1c>
     11c:	53 0d       	add	r21, r3
     11e:	ef b1       	in	r30, 0x0f	; 15
     120:	f0 ae       	std	Z+56, r15	; 0x38
     122:	4c 12       	cpse	r4, r28
     124:	91 cf       	rjmp	.-222    	; 0x48 <__SREG__+0x9>
     126:	2d 73       	andi	r18, 0x3D	; 61
     128:	ca 94       	dec	r12
     12a:	76 28       	or	r7, r6
     12c:	ab f5       	brvc	.+106    	; 0x198 <digital_pin_to_port_PGM+0x8>
     12e:	17 49       	sbci	r17, 0x97	; 151
     130:	08 56       	subi	r16, 0x68	; 104
     132:	b4 ea       	ldi	r27, 0xA4	; 164
     134:	69 37       	cpi	r22, 0x79	; 121
     136:	d5 8b       	std	Z+21, r29	; 0x15
     138:	57 09       	sbc	r21, r7
     13a:	eb b5       	in	r30, 0x2b	; 43
     13c:	36 68       	ori	r19, 0x86	; 134
     13e:	8a d4       	rcall	.+2324   	; 0xa54 <_ZN7OneWire9write_bitEh+0x54>
     140:	95 cb       	rjmp	.-2262   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
     142:	29 77       	andi	r18, 0x79	; 121
     144:	f4 aa       	std	Z+52, r15	; 0x34
     146:	48 16       	cp	r4, r24
     148:	e9 b7       	in	r30, 0x39	; 57
     14a:	55 0b       	sbc	r21, r21
     14c:	88 d6       	rcall	.+3344   	; 0xe5e <_ZN5Print11printNumberEmh+0x24>
     14e:	34 6a       	ori	r19, 0xA4	; 164
     150:	2b 75       	andi	r18, 0x5B	; 91
     152:	97 c9       	rjmp	.-3282   	; 0xfffff482 <__eeprom_end+0xff7ef482>
     154:	4a 14       	cp	r4, r10
     156:	f6 a8       	ldd	r15, Z+54	; 0x36
     158:	74 2a       	or	r7, r20
     15a:	c8 96       	adiw	r24, 0x38	; 56
     15c:	15 4b       	sbci	r17, 0xB5	; 181
     15e:	a9 f7       	brne	.-22     	; 0x14a <__trampolines_end+0xe2>
     160:	b6 e8       	ldi	r27, 0x86	; 134
     162:	0a 54       	subi	r16, 0x4A	; 74
     164:	d7 89       	ldd	r29, Z+23	; 0x17
     166:	6b 35       	cpi	r22, 0x5B	; 91

00000168 <digital_pin_to_timer_PGM>:
     168:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     178:	00 00 00 00                                         ....

0000017c <digital_pin_to_bit_mask_PGM>:
     17c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     18c:	04 08 10 20                                         ... 

00000190 <digital_pin_to_port_PGM>:
     190:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     1a0:	03 03 03 03                                         ....

000001a4 <port_to_input_PGM>:
     1a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000001ae <port_to_output_PGM>:
     1ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000001b8 <port_to_mode_PGM>:
     1b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000001c2 <__ctors_start>:
     1c2:	a8 01       	movw	r20, r16
     1c4:	5a 03       	fmul	r21, r18
     1c6:	08 0c       	add	r0, r8

000001c8 <__ctors_end>:
     1c8:	11 24       	eor	r1, r1
     1ca:	1f be       	out	0x3f, r1	; 63
     1cc:	cf ef       	ldi	r28, 0xFF	; 255
     1ce:	d8 e0       	ldi	r29, 0x08	; 8
     1d0:	de bf       	out	0x3e, r29	; 62
     1d2:	cd bf       	out	0x3d, r28	; 61

000001d4 <__do_copy_data>:
     1d4:	11 e0       	ldi	r17, 0x01	; 1
     1d6:	a0 e0       	ldi	r26, 0x00	; 0
     1d8:	b1 e0       	ldi	r27, 0x01	; 1
     1da:	e6 ee       	ldi	r30, 0xE6	; 230
     1dc:	f9 e2       	ldi	r31, 0x29	; 41
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <__do_copy_data+0x10>
     1e0:	05 90       	lpm	r0, Z+
     1e2:	0d 92       	st	X+, r0
     1e4:	aa 3a       	cpi	r26, 0xAA	; 170
     1e6:	b1 07       	cpc	r27, r17
     1e8:	d9 f7       	brne	.-10     	; 0x1e0 <__do_copy_data+0xc>

000001ea <__do_clear_bss>:
     1ea:	23 e0       	ldi	r18, 0x03	; 3
     1ec:	aa ea       	ldi	r26, 0xAA	; 170
     1ee:	b1 e0       	ldi	r27, 0x01	; 1
     1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <.do_clear_bss_start>

000001f2 <.do_clear_bss_loop>:
     1f2:	1d 92       	st	X+, r1

000001f4 <.do_clear_bss_start>:
     1f4:	a0 39       	cpi	r26, 0x90	; 144
     1f6:	b2 07       	cpc	r27, r18
     1f8:	e1 f7       	brne	.-8      	; 0x1f2 <.do_clear_bss_loop>

000001fa <__do_global_ctors>:
     1fa:	10 e0       	ldi	r17, 0x00	; 0
     1fc:	c4 ee       	ldi	r28, 0xE4	; 228
     1fe:	d0 e0       	ldi	r29, 0x00	; 0
     200:	04 c0       	rjmp	.+8      	; 0x20a <__do_global_ctors+0x10>
     202:	21 97       	sbiw	r28, 0x01	; 1
     204:	fe 01       	movw	r30, r28
     206:	0e 94 0e 12 	call	0x241c	; 0x241c <__tablejump2__>
     20a:	c1 3e       	cpi	r28, 0xE1	; 225
     20c:	d1 07       	cpc	r29, r17
     20e:	c9 f7       	brne	.-14     	; 0x202 <__do_global_ctors+0x8>
     210:	0e 94 b2 04 	call	0x964	; 0x964 <main>
     214:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <_exit>

00000218 <__bad_interrupt>:
     218:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000021c <_Z15adresseAusgebenv>:
  sensors.Begin();
  adresseAusgeben();
  delay(1000);
}

void adresseAusgeben(void) {
     21c:	0f 93       	push	r16
     21e:	1f 93       	push	r17
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
	byte i;
	byte present = 0;
	
	byte *addr;

	Serial.print(sensors.Devicecount);
     224:	60 91 cc 01 	lds	r22, 0x01CC	; 0x8001cc <sensors+0x2>
     228:	70 91 cd 01 	lds	r23, 0x01CD	; 0x8001cd <sensors+0x3>
     22c:	4a e0       	ldi	r20, 0x0A	; 10
     22e:	50 e0       	ldi	r21, 0x00	; 0
     230:	8a e2       	ldi	r24, 0x2A	; 42
     232:	92 e0       	ldi	r25, 0x02	; 2
     234:	0e 94 bb 07 	call	0xf76	; 0xf76 <_ZN5Print5printEii>
	Serial.println(" Devices found");// "\n\r" is NewLine
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	71 e0       	ldi	r23, 0x01	; 1
     23c:	8a e2       	ldi	r24, 0x2A	; 42
     23e:	92 e0       	ldi	r25, 0x02	; 2
     240:	0e 94 0b 07 	call	0xe16	; 0xe16 <_ZN5Print7printlnEPKc>
     244:	05 ed       	ldi	r16, 0xD5	; 213
     246:	11 e0       	ldi	r17, 0x01	; 1

	for(int dev =0; dev< sensors.Devicecount; dev++)
     248:	c0 e0       	ldi	r28, 0x00	; 0
     24a:	d0 e0       	ldi	r29, 0x00	; 0
     24c:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <sensors+0x2>
     250:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <sensors+0x3>
     254:	c8 17       	cp	r28, r24
     256:	d9 07       	cpc	r29, r25
     258:	0c f0       	brlt	.+2      	; 0x25c <_Z15adresseAusgebenv+0x40>
     25a:	4b c0       	rjmp	.+150    	; 0x2f2 <_Z15adresseAusgebenv+0xd6>
	{
		addr = sensors.sensors[dev];
		Serial.print(dev);
     25c:	4a e0       	ldi	r20, 0x0A	; 10
     25e:	50 e0       	ldi	r21, 0x00	; 0
     260:	be 01       	movw	r22, r28
     262:	8a e2       	ldi	r24, 0x2A	; 42
     264:	92 e0       	ldi	r25, 0x02	; 2
     266:	0e 94 bb 07 	call	0xf76	; 0xf76 <_ZN5Print5printEii>
		Serial.print(":");
     26a:	6f e0       	ldi	r22, 0x0F	; 15
     26c:	71 e0       	ldi	r23, 0x01	; 1
     26e:	8a e2       	ldi	r24, 0x2A	; 42
     270:	92 e0       	ldi	r25, 0x02	; 2
     272:	0e 94 fe 06 	call	0xdfc	; 0xdfc <_ZN5Print5printEPKc>
		Serial.print(sensors.getAdress(dev, buffer));
     276:	4a ea       	ldi	r20, 0xAA	; 170
     278:	51 e0       	ldi	r21, 0x01	; 1
     27a:	be 01       	movw	r22, r28
     27c:	8a ec       	ldi	r24, 0xCA	; 202
     27e:	91 e0       	ldi	r25, 0x01	; 1
     280:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_ZN18Ds18S20Temperature9getAdressEiPc>
     284:	bc 01       	movw	r22, r24
     286:	8a e2       	ldi	r24, 0x2A	; 42
     288:	92 e0       	ldi	r25, 0x02	; 2
     28a:	0e 94 fe 06 	call	0xdfc	; 0xdfc <_ZN5Print5printEPKc>
		if ( OneWire::crc8( addr, 7) != addr[7]) {
     28e:	67 e0       	ldi	r22, 0x07	; 7
     290:	c8 01       	movw	r24, r16
     292:	07 97       	sbiw	r24, 0x07	; 7
     294:	0e 94 b1 06 	call	0xd62	; 0xd62 <_ZN7OneWire4crc8EPKhh>
     298:	08 5f       	subi	r16, 0xF8	; 248
     29a:	1f 4f       	sbci	r17, 0xFF	; 255
     29c:	f8 01       	movw	r30, r16
     29e:	38 97       	sbiw	r30, 0x08	; 8
     2a0:	90 81       	ld	r25, Z
     2a2:	89 17       	cp	r24, r25
     2a4:	51 f0       	breq	.+20     	; 0x2ba <_Z15adresseAusgebenv+0x9e>
			Serial.print("CRC is not valid!\n\r");
     2a6:	61 e1       	ldi	r22, 0x11	; 17
     2a8:	71 e0       	ldi	r23, 0x01	; 1
     2aa:	8a e2       	ldi	r24, 0x2A	; 42
     2ac:	92 e0       	ldi	r25, 0x02	; 2
		}
		Serial.println("");
	}
	Serial.println();
	return;
}
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	1f 91       	pop	r17
     2b4:	0f 91       	pop	r16
		addr = sensors.sensors[dev];
		Serial.print(dev);
		Serial.print(":");
		Serial.print(sensors.getAdress(dev, buffer));
		if ( OneWire::crc8( addr, 7) != addr[7]) {
			Serial.print("CRC is not valid!\n\r");
     2b6:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <_ZN5Print5printEPKc>
			return;
		}
		else
		{
			Serial.print("  -> ");
     2ba:	65 e2       	ldi	r22, 0x25	; 37
     2bc:	71 e0       	ldi	r23, 0x01	; 1
     2be:	8a e2       	ldi	r24, 0x2A	; 42
     2c0:	92 e0       	ldi	r25, 0x02	; 2
     2c2:	0e 94 fe 06 	call	0xdfc	; 0xdfc <_ZN5Print5printEPKc>
			Serial.print(sensors.getTemperatureById(dev, true) );
     2c6:	41 e0       	ldi	r20, 0x01	; 1
     2c8:	6c 2f       	mov	r22, r28
     2ca:	8a ec       	ldi	r24, 0xCA	; 202
     2cc:	91 e0       	ldi	r25, 0x01	; 1
     2ce:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <_ZN18Ds18S20Temperature18getTemperatureByIdEhb>
     2d2:	ab 01       	movw	r20, r22
     2d4:	bc 01       	movw	r22, r24
     2d6:	22 e0       	ldi	r18, 0x02	; 2
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	8a e2       	ldi	r24, 0x2A	; 42
     2dc:	92 e0       	ldi	r25, 0x02	; 2
     2de:	0e 94 a4 08 	call	0x1148	; 0x1148 <_ZN5Print5printEdi>
		}
		Serial.println("");
     2e2:	65 e6       	ldi	r22, 0x65	; 101
     2e4:	71 e0       	ldi	r23, 0x01	; 1
     2e6:	8a e2       	ldi	r24, 0x2A	; 42
     2e8:	92 e0       	ldi	r25, 0x02	; 2
     2ea:	0e 94 0b 07 	call	0xe16	; 0xe16 <_ZN5Print7printlnEPKc>
	byte *addr;

	Serial.print(sensors.Devicecount);
	Serial.println(" Devices found");// "\n\r" is NewLine

	for(int dev =0; dev< sensors.Devicecount; dev++)
     2ee:	21 96       	adiw	r28, 0x01	; 1
     2f0:	ad cf       	rjmp	.-166    	; 0x24c <_Z15adresseAusgebenv+0x30>
			Serial.print("  -> ");
			Serial.print(sensors.getTemperatureById(dev, true) );
		}
		Serial.println("");
	}
	Serial.println();
     2f2:	8a e2       	ldi	r24, 0x2A	; 42
     2f4:	92 e0       	ldi	r25, 0x02	; 2
	return;
}
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	1f 91       	pop	r17
     2fc:	0f 91       	pop	r16
			Serial.print("  -> ");
			Serial.print(sensors.getTemperatureById(dev, true) );
		}
		Serial.println("");
	}
	Serial.println();
     2fe:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <_ZN5Print7printlnEv>

00000302 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     302:	26 e0       	ldi	r18, 0x06	; 6
     304:	40 e0       	ldi	r20, 0x00	; 0
     306:	51 ee       	ldi	r21, 0xE1	; 225
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	70 e0       	ldi	r23, 0x00	; 0
     30c:	8a e2       	ldi	r24, 0x2A	; 42
     30e:	92 e0       	ldi	r25, 0x02	; 2
     310:	0e 94 93 02 	call	0x526	; 0x526 <_ZN14HardwareSerial5beginEmh>
DeviceAddress sensor1 = { 0x10, 0x38, 0x27, 0x57, 0x2, 0x8, 0x0, 0x79 };

void setup()
{
  Serial.begin(57600);
  Serial.println("Temperatur Messprogramm");
     314:	6b e2       	ldi	r22, 0x2B	; 43
     316:	71 e0       	ldi	r23, 0x01	; 1
     318:	8a e2       	ldi	r24, 0x2A	; 42
     31a:	92 e0       	ldi	r25, 0x02	; 2
     31c:	0e 94 0b 07 	call	0xe16	; 0xe16 <_ZN5Print7printlnEPKc>
  delay(300);
     320:	6c e2       	ldi	r22, 0x2C	; 44
     322:	71 e0       	ldi	r23, 0x01	; 1
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 15 09 	call	0x122a	; 0x122a <delay>
  
  sensors.Begin();
     32c:	8a ec       	ldi	r24, 0xCA	; 202
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <_ZN18Ds18S20Temperature5BeginEv>
  adresseAusgeben();
     334:	0c 94 0e 01 	jmp	0x21c	; 0x21c <_Z15adresseAusgebenv>

00000338 <loop>:

int i =0;
char buffer[32];
void loop()
{
  sensors.Begin();
     338:	8a ec       	ldi	r24, 0xCA	; 202
     33a:	91 e0       	ldi	r25, 0x01	; 1
     33c:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <_ZN18Ds18S20Temperature5BeginEv>
  adresseAusgeben();
     340:	0e 94 0e 01 	call	0x21c	; 0x21c <_Z15adresseAusgebenv>
  delay(1000);
     344:	68 ee       	ldi	r22, 0xE8	; 232
     346:	73 e0       	ldi	r23, 0x03	; 3
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0c 94 15 09 	jmp	0x122a	; 0x122a <delay>

00000350 <_GLOBAL__sub_I_lcd>:
		}
		Serial.println("");
	}
	Serial.println();
	return;
}
     350:	8f 92       	push	r8
     352:	af 92       	push	r10
     354:	cf 92       	push	r12
     356:	ef 92       	push	r14
     358:	0f 93       	push	r16
#define BACKLIGHT_PIN 3
#define D4_pin 4
#define D5_pin 5
#define D6_pin 6
#define D7_pin 7
LiquidCrystal_I2C lcd(I2C_ADDR,En_pin,Rw_pin,Rs_pin,D4_pin,D5_pin,D6_pin,D7_pin);
     35a:	87 e0       	ldi	r24, 0x07	; 7
     35c:	88 2e       	mov	r8, r24
     35e:	96 e0       	ldi	r25, 0x06	; 6
     360:	a9 2e       	mov	r10, r25
     362:	25 e0       	ldi	r18, 0x05	; 5
     364:	c2 2e       	mov	r12, r18
     366:	34 e0       	ldi	r19, 0x04	; 4
     368:	e3 2e       	mov	r14, r19
     36a:	00 e0       	ldi	r16, 0x00	; 0
     36c:	21 e0       	ldi	r18, 0x01	; 1
     36e:	42 e0       	ldi	r20, 0x02	; 2
     370:	67 e2       	ldi	r22, 0x27	; 39
     372:	82 e1       	ldi	r24, 0x12	; 18
     374:	92 e0       	ldi	r25, 0x02	; 2
     376:	0e 94 13 04 	call	0x826	; 0x826 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>

#define ONE_WIRE_BUS 2 /* Digitalport Pin 2 definieren */
OneWire ds(ONE_WIRE_BUS); /* Ini oneWire instance */
     37a:	62 e0       	ldi	r22, 0x02	; 2
     37c:	84 e0       	ldi	r24, 0x04	; 4
     37e:	92 e0       	ldi	r25, 0x02	; 2
     380:	0e 94 f5 05 	call	0xbea	; 0xbea <_ZN7OneWireC1Eh>
//DallasTemperature sensors(&ds);/* Dallas Temperature Library für Nutzung der oneWire Library vorbereiten */

Ds18S20Temperature  sensors(&ds);
     384:	64 e0       	ldi	r22, 0x04	; 4
     386:	72 e0       	ldi	r23, 0x02	; 2
     388:	8a ec       	ldi	r24, 0xCA	; 202
     38a:	91 e0       	ldi	r25, 0x01	; 1
		}
		Serial.println("");
	}
	Serial.println();
	return;
}
     38c:	0f 91       	pop	r16
     38e:	ef 90       	pop	r14
     390:	cf 90       	pop	r12
     392:	af 90       	pop	r10
     394:	8f 90       	pop	r8

#define ONE_WIRE_BUS 2 /* Digitalport Pin 2 definieren */
OneWire ds(ONE_WIRE_BUS); /* Ini oneWire instance */
//DallasTemperature sensors(&ds);/* Dallas Temperature Library für Nutzung der oneWire Library vorbereiten */

Ds18S20Temperature  sensors(&ds);
     396:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <_ZN18Ds18S20TemperatureC1EP7OneWire>

0000039a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     39a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     39c:	91 8d       	ldd	r25, Z+25	; 0x19
     39e:	22 8d       	ldd	r18, Z+26	; 0x1a
     3a0:	89 2f       	mov	r24, r25
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	80 5c       	subi	r24, 0xC0	; 192
     3a6:	9f 4f       	sbci	r25, 0xFF	; 255
     3a8:	82 1b       	sub	r24, r18
     3aa:	91 09       	sbc	r25, r1
}
     3ac:	8f 73       	andi	r24, 0x3F	; 63
     3ae:	99 27       	eor	r25, r25
     3b0:	08 95       	ret

000003b2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     3b2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     3b4:	91 8d       	ldd	r25, Z+25	; 0x19
     3b6:	82 8d       	ldd	r24, Z+26	; 0x1a
     3b8:	98 17       	cp	r25, r24
     3ba:	31 f0       	breq	.+12     	; 0x3c8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     3bc:	82 8d       	ldd	r24, Z+26	; 0x1a
     3be:	e8 0f       	add	r30, r24
     3c0:	f1 1d       	adc	r31, r1
     3c2:	85 8d       	ldd	r24, Z+29	; 0x1d
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     3c8:	8f ef       	ldi	r24, 0xFF	; 255
     3ca:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     3cc:	08 95       	ret

000003ce <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     3ce:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     3d0:	91 8d       	ldd	r25, Z+25	; 0x19
     3d2:	82 8d       	ldd	r24, Z+26	; 0x1a
     3d4:	98 17       	cp	r25, r24
     3d6:	61 f0       	breq	.+24     	; 0x3f0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     3d8:	82 8d       	ldd	r24, Z+26	; 0x1a
     3da:	df 01       	movw	r26, r30
     3dc:	a8 0f       	add	r26, r24
     3de:	b1 1d       	adc	r27, r1
     3e0:	5d 96       	adiw	r26, 0x1d	; 29
     3e2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     3e4:	92 8d       	ldd	r25, Z+26	; 0x1a
     3e6:	9f 5f       	subi	r25, 0xFF	; 255
     3e8:	9f 73       	andi	r25, 0x3F	; 63
     3ea:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     3f0:	8f ef       	ldi	r24, 0xFF	; 255
     3f2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     3f4:	08 95       	ret

000003f6 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     3f6:	80 e5       	ldi	r24, 0x50	; 80
     3f8:	93 e0       	ldi	r25, 0x03	; 3
     3fa:	89 2b       	or	r24, r25
     3fc:	49 f0       	breq	.+18     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	89 2b       	or	r24, r25
     404:	29 f0       	breq	.+10     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     406:	0e 94 50 03 	call	0x6a0	; 0x6a0 <_Z17Serial0_availablev>
     40a:	81 11       	cpse	r24, r1
     40c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     410:	08 95       	ret

00000412 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     412:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     414:	84 8d       	ldd	r24, Z+28	; 0x1c
     416:	df 01       	movw	r26, r30
     418:	a8 0f       	add	r26, r24
     41a:	b1 1d       	adc	r27, r1
     41c:	a3 5a       	subi	r26, 0xA3	; 163
     41e:	bf 4f       	sbci	r27, 0xFF	; 255
     420:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     422:	84 8d       	ldd	r24, Z+28	; 0x1c
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	01 96       	adiw	r24, 0x01	; 1
     428:	8f 73       	andi	r24, 0x3F	; 63
     42a:	99 27       	eor	r25, r25
     42c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     42e:	a6 89       	ldd	r26, Z+22	; 0x16
     430:	b7 89       	ldd	r27, Z+23	; 0x17
     432:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     434:	a0 89       	ldd	r26, Z+16	; 0x10
     436:	b1 89       	ldd	r27, Z+17	; 0x11
     438:	8c 91       	ld	r24, X
     43a:	80 64       	ori	r24, 0x40	; 64
     43c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     43e:	93 8d       	ldd	r25, Z+27	; 0x1b
     440:	84 8d       	ldd	r24, Z+28	; 0x1c
     442:	98 13       	cpse	r25, r24
     444:	06 c0       	rjmp	.+12     	; 0x452 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     446:	02 88       	ldd	r0, Z+18	; 0x12
     448:	f3 89       	ldd	r31, Z+19	; 0x13
     44a:	e0 2d       	mov	r30, r0
     44c:	80 81       	ld	r24, Z
     44e:	8f 7d       	andi	r24, 0xDF	; 223
     450:	80 83       	st	Z, r24
     452:	08 95       	ret

00000454 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     45a:	88 8d       	ldd	r24, Y+24	; 0x18
     45c:	88 23       	and	r24, r24
     45e:	c9 f0       	breq	.+50     	; 0x492 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     460:	ea 89       	ldd	r30, Y+18	; 0x12
     462:	fb 89       	ldd	r31, Y+19	; 0x13
     464:	80 81       	ld	r24, Z
     466:	85 fd       	sbrc	r24, 5
     468:	05 c0       	rjmp	.+10     	; 0x474 <_ZN14HardwareSerial5flushEv+0x20>
     46a:	a8 89       	ldd	r26, Y+16	; 0x10
     46c:	b9 89       	ldd	r27, Y+17	; 0x11
     46e:	8c 91       	ld	r24, X
     470:	86 fd       	sbrc	r24, 6
     472:	0f c0       	rjmp	.+30     	; 0x492 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	07 fc       	sbrc	r0, 7
     478:	f5 cf       	rjmp	.-22     	; 0x464 <_ZN14HardwareSerial5flushEv+0x10>
     47a:	80 81       	ld	r24, Z
     47c:	85 ff       	sbrs	r24, 5
     47e:	f2 cf       	rjmp	.-28     	; 0x464 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     480:	a8 89       	ldd	r26, Y+16	; 0x10
     482:	b9 89       	ldd	r27, Y+17	; 0x11
     484:	8c 91       	ld	r24, X
     486:	85 ff       	sbrs	r24, 5
     488:	ed cf       	rjmp	.-38     	; 0x464 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     48a:	ce 01       	movw	r24, r28
     48c:	0e 94 09 02 	call	0x412	; 0x412 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     490:	e7 cf       	rjmp	.-50     	; 0x460 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	08 95       	ret

00000498 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     498:	ef 92       	push	r14
     49a:	ff 92       	push	r15
     49c:	0f 93       	push	r16
     49e:	1f 93       	push	r17
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
     4a4:	ec 01       	movw	r28, r24
  _written = true;
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     4aa:	9b 8d       	ldd	r25, Y+27	; 0x1b
     4ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
     4ae:	98 13       	cpse	r25, r24
     4b0:	05 c0       	rjmp	.+10     	; 0x4bc <_ZN14HardwareSerial5writeEh+0x24>
     4b2:	e8 89       	ldd	r30, Y+16	; 0x10
     4b4:	f9 89       	ldd	r31, Y+17	; 0x11
     4b6:	80 81       	ld	r24, Z
     4b8:	85 fd       	sbrc	r24, 5
     4ba:	24 c0       	rjmp	.+72     	; 0x504 <_ZN14HardwareSerial5writeEh+0x6c>
     4bc:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     4be:	0b 8d       	ldd	r16, Y+27	; 0x1b
     4c0:	10 e0       	ldi	r17, 0x00	; 0
     4c2:	0f 5f       	subi	r16, 0xFF	; 255
     4c4:	1f 4f       	sbci	r17, 0xFF	; 255
     4c6:	0f 73       	andi	r16, 0x3F	; 63
     4c8:	11 27       	eor	r17, r17
     4ca:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     4cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     4ce:	e8 12       	cpse	r14, r24
     4d0:	0c c0       	rjmp	.+24     	; 0x4ea <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     4d2:	0f b6       	in	r0, 0x3f	; 63
     4d4:	07 fc       	sbrc	r0, 7
     4d6:	fa cf       	rjmp	.-12     	; 0x4cc <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     4d8:	e8 89       	ldd	r30, Y+16	; 0x10
     4da:	f9 89       	ldd	r31, Y+17	; 0x11
     4dc:	80 81       	ld	r24, Z
     4de:	85 ff       	sbrs	r24, 5
     4e0:	f5 cf       	rjmp	.-22     	; 0x4cc <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     4e2:	ce 01       	movw	r24, r28
     4e4:	0e 94 09 02 	call	0x412	; 0x412 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     4e8:	f1 cf       	rjmp	.-30     	; 0x4cc <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     4ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4ec:	fe 01       	movw	r30, r28
     4ee:	e8 0f       	add	r30, r24
     4f0:	f1 1d       	adc	r31, r1
     4f2:	e3 5a       	subi	r30, 0xA3	; 163
     4f4:	ff 4f       	sbci	r31, 0xFF	; 255
     4f6:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     4f8:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     4fa:	ea 89       	ldd	r30, Y+18	; 0x12
     4fc:	fb 89       	ldd	r31, Y+19	; 0x13
     4fe:	80 81       	ld	r24, Z
     500:	80 62       	ori	r24, 0x20	; 32
     502:	07 c0       	rjmp	.+14     	; 0x512 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     504:	ee 89       	ldd	r30, Y+22	; 0x16
     506:	ff 89       	ldd	r31, Y+23	; 0x17
     508:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     50a:	e8 89       	ldd	r30, Y+16	; 0x10
     50c:	f9 89       	ldd	r31, Y+17	; 0x11
     50e:	80 81       	ld	r24, Z
     510:	80 64       	ori	r24, 0x40	; 64
     512:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	1f 91       	pop	r17
     51e:	0f 91       	pop	r16
     520:	ff 90       	pop	r15
     522:	ef 90       	pop	r14
     524:	08 95       	ret

00000526 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     526:	cf 92       	push	r12
     528:	df 92       	push	r13
     52a:	ef 92       	push	r14
     52c:	ff 92       	push	r15
     52e:	1f 93       	push	r17
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	ec 01       	movw	r28, r24
     536:	6a 01       	movw	r12, r20
     538:	7b 01       	movw	r14, r22
     53a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     53c:	e8 89       	ldd	r30, Y+16	; 0x10
     53e:	f9 89       	ldd	r31, Y+17	; 0x11
     540:	82 e0       	ldi	r24, 0x02	; 2
     542:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     544:	41 15       	cp	r20, r1
     546:	51 4e       	sbci	r21, 0xE1	; 225
     548:	61 05       	cpc	r22, r1
     54a:	71 05       	cpc	r23, r1
     54c:	b1 f0       	breq	.+44     	; 0x57a <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     54e:	60 e0       	ldi	r22, 0x00	; 0
     550:	79 e0       	ldi	r23, 0x09	; 9
     552:	8d e3       	ldi	r24, 0x3D	; 61
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	a7 01       	movw	r20, r14
     558:	96 01       	movw	r18, r12
     55a:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__udivmodsi4>
     55e:	da 01       	movw	r26, r20
     560:	c9 01       	movw	r24, r18
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	a1 09       	sbc	r26, r1
     566:	b1 09       	sbc	r27, r1
     568:	b6 95       	lsr	r27
     56a:	a7 95       	ror	r26
     56c:	97 95       	ror	r25
     56e:	87 95       	ror	r24
     570:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     572:	41 15       	cp	r20, r1
     574:	80 e1       	ldi	r24, 0x10	; 16
     576:	58 07       	cpc	r21, r24
     578:	a8 f0       	brcs	.+42     	; 0x5a4 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     57a:	e8 89       	ldd	r30, Y+16	; 0x10
     57c:	f9 89       	ldd	r31, Y+17	; 0x11
     57e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     580:	60 e8       	ldi	r22, 0x80	; 128
     582:	74 e8       	ldi	r23, 0x84	; 132
     584:	8e e1       	ldi	r24, 0x1E	; 30
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	a7 01       	movw	r20, r14
     58a:	96 01       	movw	r18, r12
     58c:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__udivmodsi4>
     590:	ba 01       	movw	r22, r20
     592:	a9 01       	movw	r20, r18
     594:	41 50       	subi	r20, 0x01	; 1
     596:	51 09       	sbc	r21, r1
     598:	61 09       	sbc	r22, r1
     59a:	71 09       	sbc	r23, r1
     59c:	76 95       	lsr	r23
     59e:	67 95       	ror	r22
     5a0:	57 95       	ror	r21
     5a2:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     5a4:	ec 85       	ldd	r30, Y+12	; 0x0c
     5a6:	fd 85       	ldd	r31, Y+13	; 0x0d
     5a8:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
     5aa:	ee 85       	ldd	r30, Y+14	; 0x0e
     5ac:	ff 85       	ldd	r31, Y+15	; 0x0f
     5ae:	40 83       	st	Z, r20

  _written = false;
     5b0:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     5b2:	ec 89       	ldd	r30, Y+20	; 0x14
     5b4:	fd 89       	ldd	r31, Y+21	; 0x15
     5b6:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     5b8:	ea 89       	ldd	r30, Y+18	; 0x12
     5ba:	fb 89       	ldd	r31, Y+19	; 0x13
     5bc:	80 81       	ld	r24, Z
     5be:	80 61       	ori	r24, 0x10	; 16
     5c0:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     5c2:	ea 89       	ldd	r30, Y+18	; 0x12
     5c4:	fb 89       	ldd	r31, Y+19	; 0x13
     5c6:	80 81       	ld	r24, Z
     5c8:	88 60       	ori	r24, 0x08	; 8
     5ca:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     5cc:	ea 89       	ldd	r30, Y+18	; 0x12
     5ce:	fb 89       	ldd	r31, Y+19	; 0x13
     5d0:	80 81       	ld	r24, Z
     5d2:	80 68       	ori	r24, 0x80	; 128
     5d4:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     5d6:	ea 89       	ldd	r30, Y+18	; 0x12
     5d8:	fb 89       	ldd	r31, Y+19	; 0x13
     5da:	80 81       	ld	r24, Z
     5dc:	8f 7d       	andi	r24, 0xDF	; 223
     5de:	80 83       	st	Z, r24
}
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	ff 90       	pop	r15
     5e8:	ef 90       	pop	r14
     5ea:	df 90       	pop	r13
     5ec:	cf 90       	pop	r12
     5ee:	08 95       	ret

000005f0 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     5f0:	1f 92       	push	r1
     5f2:	0f 92       	push	r0
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	0f 92       	push	r0
     5f8:	11 24       	eor	r1, r1
     5fa:	2f 93       	push	r18
     5fc:	8f 93       	push	r24
     5fe:	9f 93       	push	r25
     600:	ef 93       	push	r30
     602:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     604:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <Serial+0x10>
     608:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <Serial+0x11>
     60c:	80 81       	ld	r24, Z
     60e:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <Serial+0x16>
     612:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <Serial+0x17>
     616:	82 fd       	sbrc	r24, 2
     618:	12 c0       	rjmp	.+36     	; 0x63e <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     61a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     61c:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <Serial+0x19>
     620:	8f 5f       	subi	r24, 0xFF	; 255
     622:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     624:	20 91 44 02 	lds	r18, 0x0244	; 0x800244 <Serial+0x1a>
     628:	82 17       	cp	r24, r18
     62a:	51 f0       	breq	.+20     	; 0x640 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     62c:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <Serial+0x19>
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	e6 5d       	subi	r30, 0xD6	; 214
     634:	fd 4f       	sbci	r31, 0xFD	; 253
     636:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     638:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <Serial+0x19>
     63c:	01 c0       	rjmp	.+2      	; 0x640 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     63e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     640:	ff 91       	pop	r31
     642:	ef 91       	pop	r30
     644:	9f 91       	pop	r25
     646:	8f 91       	pop	r24
     648:	2f 91       	pop	r18
     64a:	0f 90       	pop	r0
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	0f 90       	pop	r0
     650:	1f 90       	pop	r1
     652:	18 95       	reti

00000654 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     654:	1f 92       	push	r1
     656:	0f 92       	push	r0
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	0f 92       	push	r0
     65c:	11 24       	eor	r1, r1
     65e:	2f 93       	push	r18
     660:	3f 93       	push	r19
     662:	4f 93       	push	r20
     664:	5f 93       	push	r21
     666:	6f 93       	push	r22
     668:	7f 93       	push	r23
     66a:	8f 93       	push	r24
     66c:	9f 93       	push	r25
     66e:	af 93       	push	r26
     670:	bf 93       	push	r27
     672:	ef 93       	push	r30
     674:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     676:	8a e2       	ldi	r24, 0x2A	; 42
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	0e 94 09 02 	call	0x412	; 0x412 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     67e:	ff 91       	pop	r31
     680:	ef 91       	pop	r30
     682:	bf 91       	pop	r27
     684:	af 91       	pop	r26
     686:	9f 91       	pop	r25
     688:	8f 91       	pop	r24
     68a:	7f 91       	pop	r23
     68c:	6f 91       	pop	r22
     68e:	5f 91       	pop	r21
     690:	4f 91       	pop	r20
     692:	3f 91       	pop	r19
     694:	2f 91       	pop	r18
     696:	0f 90       	pop	r0
     698:	0f be       	out	0x3f, r0	; 63
     69a:	0f 90       	pop	r0
     69c:	1f 90       	pop	r1
     69e:	18 95       	reti

000006a0 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     6a0:	8a e2       	ldi	r24, 0x2A	; 42
     6a2:	92 e0       	ldi	r25, 0x02	; 2
     6a4:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN14HardwareSerial9availableEv>
     6a8:	21 e0       	ldi	r18, 0x01	; 1
     6aa:	89 2b       	or	r24, r25
     6ac:	09 f4       	brne	.+2      	; 0x6b0 <_Z17Serial0_availablev+0x10>
     6ae:	20 e0       	ldi	r18, 0x00	; 0
}
     6b0:	82 2f       	mov	r24, r18
     6b2:	08 95       	ret

000006b4 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     6b4:	ea e2       	ldi	r30, 0x2A	; 42
     6b6:	f2 e0       	ldi	r31, 0x02	; 2
     6b8:	13 82       	std	Z+3, r1	; 0x03
     6ba:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     6bc:	88 ee       	ldi	r24, 0xE8	; 232
     6be:	93 e0       	ldi	r25, 0x03	; 3
     6c0:	a0 e0       	ldi	r26, 0x00	; 0
     6c2:	b0 e0       	ldi	r27, 0x00	; 0
     6c4:	84 83       	std	Z+4, r24	; 0x04
     6c6:	95 83       	std	Z+5, r25	; 0x05
     6c8:	a6 83       	std	Z+6, r26	; 0x06
     6ca:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     6cc:	87 e4       	ldi	r24, 0x47	; 71
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	91 83       	std	Z+1, r25	; 0x01
     6d2:	80 83       	st	Z, r24
     6d4:	85 ec       	ldi	r24, 0xC5	; 197
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	95 87       	std	Z+13, r25	; 0x0d
     6da:	84 87       	std	Z+12, r24	; 0x0c
     6dc:	84 ec       	ldi	r24, 0xC4	; 196
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	97 87       	std	Z+15, r25	; 0x0f
     6e2:	86 87       	std	Z+14, r24	; 0x0e
     6e4:	80 ec       	ldi	r24, 0xC0	; 192
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	91 8b       	std	Z+17, r25	; 0x11
     6ea:	80 8b       	std	Z+16, r24	; 0x10
     6ec:	81 ec       	ldi	r24, 0xC1	; 193
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	93 8b       	std	Z+19, r25	; 0x13
     6f2:	82 8b       	std	Z+18, r24	; 0x12
     6f4:	82 ec       	ldi	r24, 0xC2	; 194
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	95 8b       	std	Z+21, r25	; 0x15
     6fa:	84 8b       	std	Z+20, r24	; 0x14
     6fc:	86 ec       	ldi	r24, 0xC6	; 198
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	97 8b       	std	Z+23, r25	; 0x17
     702:	86 8b       	std	Z+22, r24	; 0x16
     704:	11 8e       	std	Z+25, r1	; 0x19
     706:	12 8e       	std	Z+26, r1	; 0x1a
     708:	13 8e       	std	Z+27, r1	; 0x1b
     70a:	14 8e       	std	Z+28, r1	; 0x1c
     70c:	08 95       	ret

0000070e <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>:
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
   setBacklightPin(backlighPin, pol);
     70e:	21 e0       	ldi	r18, 0x01	; 1
     710:	01 c0       	rjmp	.+2      	; 0x714 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x6>
     712:	22 0f       	add	r18, r18
     714:	6a 95       	dec	r22
     716:	ea f7       	brpl	.-6      	; 0x712 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x4>
     718:	dc 01       	movw	r26, r24
     71a:	1b 96       	adiw	r26, 0x0b	; 11
     71c:	2c 93       	st	X, r18
     71e:	1b 97       	sbiw	r26, 0x0b	; 11
     720:	19 96       	adiw	r26, 0x09	; 9
     722:	4c 93       	st	X, r20
     724:	19 97       	sbiw	r26, 0x09	; 9
     726:	ed 91       	ld	r30, X+
     728:	fc 91       	ld	r31, X
     72a:	00 84       	ldd	r0, Z+8	; 0x08
     72c:	f1 85       	ldd	r31, Z+9	; 0x09
     72e:	e0 2d       	mov	r30, r0
     730:	60 e0       	ldi	r22, 0x00	; 0
     732:	09 94       	ijmp

00000734 <_ZN17LiquidCrystal_I2C12setBacklightEh>:
     734:	fc 01       	movw	r30, r24
     736:	83 85       	ldd	r24, Z+11	; 0x0b
     738:	88 23       	and	r24, r24
     73a:	91 f0       	breq	.+36     	; 0x760 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2c>
     73c:	91 85       	ldd	r25, Z+9	; 0x09
     73e:	91 11       	cpse	r25, r1
     740:	03 c0       	rjmp	.+6      	; 0x748 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
     742:	61 11       	cpse	r22, r1
     744:	05 c0       	rjmp	.+10     	; 0x750 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
     746:	06 c0       	rjmp	.+12     	; 0x754 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
     748:	91 30       	cpi	r25, 0x01	; 1
     74a:	21 f4       	brne	.+8      	; 0x754 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
     74c:	61 11       	cpse	r22, r1
     74e:	02 c0       	rjmp	.+4      	; 0x754 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
     750:	84 87       	std	Z+12, r24	; 0x0c
     752:	01 c0       	rjmp	.+2      	; 0x756 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
     754:	14 86       	std	Z+12, r1	; 0x0c
     756:	64 85       	ldd	r22, Z+12	; 0x0c
     758:	cf 01       	movw	r24, r30
     75a:	0d 96       	adiw	r24, 0x0d	; 13
     75c:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <_ZN5I2CIO5writeEh>
     760:	08 95       	ret

00000762 <_ZN17LiquidCrystal_I2C4initEv>:
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	8c 01       	movw	r16, r24
     76c:	ec 01       	movw	r28, r24
     76e:	2d 96       	adiw	r28, 0x0d	; 13
     770:	fc 01       	movw	r30, r24
     772:	62 85       	ldd	r22, Z+10	; 0x0a
     774:	ce 01       	movw	r24, r28
     776:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN5I2CIO5beginEh>
     77a:	01 97       	sbiw	r24, 0x01	; 1
     77c:	69 f4       	brne	.+26     	; 0x798 <_ZN17LiquidCrystal_I2C4initEv+0x36>
     77e:	61 e0       	ldi	r22, 0x01	; 1
     780:	ce 01       	movw	r24, r28
     782:	0e 94 36 0a 	call	0x146c	; 0x146c <_ZN5I2CIO8portModeEh>
     786:	f8 01       	movw	r30, r16
     788:	14 82       	std	Z+4, r1	; 0x04
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	ce 01       	movw	r24, r28
     78e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN5I2CIO5writeEh>
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	02 c0       	rjmp	.+4      	; 0x79c <_ZN17LiquidCrystal_I2C4initEv+0x3a>
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	1f 91       	pop	r17
     7a2:	0f 91       	pop	r16
     7a4:	08 95       	ret

000007a6 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>:
     7a6:	8f 92       	push	r8
     7a8:	af 92       	push	r10
     7aa:	cf 92       	push	r12
     7ac:	ef 92       	push	r14
     7ae:	0f 93       	push	r16
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	cd b7       	in	r28, 0x3d	; 61
     7b6:	de b7       	in	r29, 0x3e	; 62
     7b8:	fc 01       	movw	r30, r24
     7ba:	62 87       	std	Z+10, r22	; 0x0a
     7bc:	13 86       	std	Z+11, r1	; 0x0b
     7be:	14 86       	std	Z+12, r1	; 0x0c
     7c0:	11 86       	std	Z+9, r1	; 0x09
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	98 2f       	mov	r25, r24
     7c6:	01 c0       	rjmp	.+2      	; 0x7ca <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x24>
     7c8:	99 0f       	add	r25, r25
     7ca:	4a 95       	dec	r20
     7cc:	ea f7       	brpl	.-6      	; 0x7c8 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x22>
     7ce:	91 8b       	std	Z+17, r25	; 0x11
     7d0:	98 2f       	mov	r25, r24
     7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x30>
     7d4:	99 0f       	add	r25, r25
     7d6:	2a 95       	dec	r18
     7d8:	ea f7       	brpl	.-6      	; 0x7d4 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x2e>
     7da:	92 8b       	std	Z+18, r25	; 0x12
     7dc:	98 2f       	mov	r25, r24
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3c>
     7e0:	99 0f       	add	r25, r25
     7e2:	0a 95       	dec	r16
     7e4:	ea f7       	brpl	.-6      	; 0x7e0 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3a>
     7e6:	93 8b       	std	Z+19, r25	; 0x13
     7e8:	98 2f       	mov	r25, r24
     7ea:	01 c0       	rjmp	.+2      	; 0x7ee <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x48>
     7ec:	99 0f       	add	r25, r25
     7ee:	ea 94       	dec	r14
     7f0:	ea f7       	brpl	.-6      	; 0x7ec <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x46>
     7f2:	94 8b       	std	Z+20, r25	; 0x14
     7f4:	98 2f       	mov	r25, r24
     7f6:	01 c0       	rjmp	.+2      	; 0x7fa <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x54>
     7f8:	99 0f       	add	r25, r25
     7fa:	ca 94       	dec	r12
     7fc:	ea f7       	brpl	.-6      	; 0x7f8 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x52>
     7fe:	95 8b       	std	Z+21, r25	; 0x15
     800:	98 2f       	mov	r25, r24
     802:	01 c0       	rjmp	.+2      	; 0x806 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x60>
     804:	99 0f       	add	r25, r25
     806:	aa 94       	dec	r10
     808:	ea f7       	brpl	.-6      	; 0x804 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x5e>
     80a:	96 8b       	std	Z+22, r25	; 0x16
     80c:	01 c0       	rjmp	.+2      	; 0x810 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x6a>
     80e:	88 0f       	add	r24, r24
     810:	8a 94       	dec	r8
     812:	ea f7       	brpl	.-6      	; 0x80e <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x68>
     814:	87 8b       	std	Z+23, r24	; 0x17
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	0f 91       	pop	r16
     81c:	ef 90       	pop	r14
     81e:	cf 90       	pop	r12
     820:	af 90       	pop	r10
     822:	8f 90       	pop	r8
     824:	08 95       	ret

00000826 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>:
     826:	6f 92       	push	r6
     828:	7f 92       	push	r7
     82a:	8f 92       	push	r8
     82c:	af 92       	push	r10
     82e:	cf 92       	push	r12
     830:	ef 92       	push	r14
     832:	0f 93       	push	r16
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	00 d0       	rcall	.+0      	; 0x83a <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x14>
     83a:	1f 92       	push	r1
     83c:	cd b7       	in	r28, 0x3d	; 61
     83e:	de b7       	in	r29, 0x3e	; 62
     840:	3c 01       	movw	r6, r24
     842:	2b 83       	std	Y+3, r18	; 0x03
     844:	4a 83       	std	Y+2, r20	; 0x02
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN3LCDC1Ev>
     84c:	87 e5       	ldi	r24, 0x57	; 87
     84e:	91 e0       	ldi	r25, 0x01	; 1
     850:	f3 01       	movw	r30, r6
     852:	91 83       	std	Z+1, r25	; 0x01
     854:	80 83       	st	Z, r24
     856:	c3 01       	movw	r24, r6
     858:	0d 96       	adiw	r24, 0x0d	; 13
     85a:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN5I2CIOC1Ev>
     85e:	2b 81       	ldd	r18, Y+3	; 0x03
     860:	4a 81       	ldd	r20, Y+2	; 0x02
     862:	69 81       	ldd	r22, Y+1	; 0x01
     864:	c3 01       	movw	r24, r6
     866:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
     86e:	0f 90       	pop	r0
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	0f 91       	pop	r16
     876:	ef 90       	pop	r14
     878:	cf 90       	pop	r12
     87a:	af 90       	pop	r10
     87c:	8f 90       	pop	r8
     87e:	7f 90       	pop	r7
     880:	6f 90       	pop	r6
     882:	08 95       	ret

00000884 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
     884:	ff 92       	push	r15
     886:	0f 93       	push	r16
     888:	1f 93       	push	r17
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	ec 01       	movw	r28, r24
     890:	f6 2e       	mov	r15, r22
   _i2cio.write (data | _En);   // En HIGH
     892:	8c 01       	movw	r16, r24
     894:	03 5f       	subi	r16, 0xF3	; 243
     896:	1f 4f       	sbci	r17, 0xFF	; 255
     898:	99 89       	ldd	r25, Y+17	; 0x11
     89a:	69 2b       	or	r22, r25
     89c:	c8 01       	movw	r24, r16
     89e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN5I2CIO5writeEh>
   _i2cio.write (data & ~_En);  // En LOW
     8a2:	99 89       	ldd	r25, Y+17	; 0x11
     8a4:	90 95       	com	r25
     8a6:	6f 2d       	mov	r22, r15
     8a8:	69 23       	and	r22, r25
     8aa:	c8 01       	movw	r24, r16
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	0f 91       	pop	r16
     8b4:	ff 90       	pop	r15
//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
   _i2cio.write (data | _En);   // En HIGH
   _i2cio.write (data & ~_En);  // En LOW
     8b6:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <_ZN5I2CIO5writeEh>

000008ba <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode ) 
{
     8ba:	36 2f       	mov	r19, r22
     8bc:	fc 01       	movw	r30, r24
     8be:	74 96       	adiw	r30, 0x14	; 20
     8c0:	24 e0       	ldi	r18, 0x04	; 4
   uint8_t pinMapValue = 0;
     8c2:	60 e0       	ldi	r22, 0x00	; 0
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
   {
      if ( ( value & 0x1 ) == 1 )
     8c4:	30 ff       	sbrs	r19, 0
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x12>
      {
         pinMapValue |= _data_pins[i];
     8c8:	50 81       	ld	r21, Z
     8ca:	65 2b       	or	r22, r21
      }
      value = ( value >> 1 );
     8cc:	36 95       	lsr	r19
     8ce:	21 50       	subi	r18, 0x01	; 1
     8d0:	31 96       	adiw	r30, 0x01	; 1
{
   uint8_t pinMapValue = 0;
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
     8d2:	21 11       	cpse	r18, r1
     8d4:	f7 cf       	rjmp	.-18     	; 0x8c4 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0xa>
      value = ( value >> 1 );
   }
   
   // Is it a command or data
   // -----------------------
   if ( mode == DATA )
     8d6:	41 30       	cpi	r20, 0x01	; 1
     8d8:	11 f4       	brne	.+4      	; 0x8de <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x24>
   {
      mode = _Rs;
     8da:	fc 01       	movw	r30, r24
     8dc:	43 89       	ldd	r20, Z+19	; 0x13
     8de:	fc 01       	movw	r30, r24
     8e0:	24 85       	ldd	r18, Z+12	; 0x0c
     8e2:	62 2b       	or	r22, r18
   }
   
   pinMapValue |= mode | _backlightStsMask;
     8e4:	64 2b       	or	r22, r20
   pulseEnable ( pinMapValue );
     8e6:	0c 94 42 04 	jmp	0x884	; 0x884 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

000008ea <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) 
{
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	06 2f       	mov	r16, r22
     8f4:	0f 70       	andi	r16, 0x0F	; 15
   // No need to use the delay routines since the time taken to write takes
   // longer that what is needed both for toggling and enable pin an to execute
   // the command.
   
   if ( mode == FOUR_BITS )
     8f6:	42 30       	cpi	r20, 0x02	; 2
     8f8:	19 f4       	brne	.+6      	; 0x900 <__stack+0x1>
   {
      write4bits( (value & 0x0F), COMMAND );
     8fa:	40 e0       	ldi	r20, 0x00	; 0
     8fc:	60 2f       	mov	r22, r16
     8fe:	10 c0       	rjmp	.+32     	; 0x920 <__stack+0x21>
     900:	14 2f       	mov	r17, r20
     902:	26 2f       	mov	r18, r22
     904:	ec 01       	movw	r28, r24
   }
   else 
   {
      write4bits( (value >> 4), mode );
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	b9 01       	movw	r22, r18
     90a:	84 e0       	ldi	r24, 0x04	; 4
     90c:	75 95       	asr	r23
     90e:	67 95       	ror	r22
     910:	8a 95       	dec	r24
     912:	e1 f7       	brne	.-8      	; 0x90c <__stack+0xd>
     914:	ce 01       	movw	r24, r28
     916:	0e 94 5d 04 	call	0x8ba	; 0x8ba <_ZN17LiquidCrystal_I2C10write4bitsEhh>
      write4bits( (value & 0x0F), mode);
     91a:	41 2f       	mov	r20, r17
     91c:	60 2f       	mov	r22, r16
     91e:	ce 01       	movw	r24, r28
   }
}
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
      write4bits( (value & 0x0F), COMMAND );
   }
   else 
   {
      write4bits( (value >> 4), mode );
      write4bits( (value & 0x0F), mode);
     928:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <_ZN17LiquidCrystal_I2C10write4bitsEhh>

0000092c <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	00 d0       	rcall	.+0      	; 0x936 <_ZN17LiquidCrystal_I2C5beginEhhh+0xa>
     936:	1f 92       	push	r1
     938:	cd b7       	in	r28, 0x3d	; 61
     93a:	de b7       	in	r29, 0x3e	; 62
     93c:	8c 01       	movw	r16, r24
   
   init();     // Initialise the I2C expander interface
     93e:	2b 83       	std	Y+3, r18	; 0x03
     940:	4a 83       	std	Y+2, r20	; 0x02
     942:	69 83       	std	Y+1, r22	; 0x01
     944:	0e 94 b1 03 	call	0x762	; 0x762 <_ZN17LiquidCrystal_I2C4initEv>
   LCD::begin ( cols, lines, dotsize );   
     948:	2b 81       	ldd	r18, Y+3	; 0x03
     94a:	4a 81       	ldd	r20, Y+2	; 0x02
     94c:	69 81       	ldd	r22, Y+1	; 0x01
     94e:	c8 01       	movw	r24, r16
}
     950:	0f 90       	pop	r0
     952:	0f 90       	pop	r0
     954:	0f 90       	pop	r0
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
   
   init();     // Initialise the I2C expander interface
   LCD::begin ( cols, lines, dotsize );   
     95e:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <_ZN3LCD5beginEhhh>

00000962 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
     962:	08 95       	ret

00000964 <main>:

int main(void)
{
	init();
     964:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <init>

	initVariant();
     968:	0e 94 b1 04 	call	0x962	; 0x962 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     96c:	0e 94 81 01 	call	0x302	; 0x302 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     970:	cb ef       	ldi	r28, 0xFB	; 251
     972:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
     974:	0e 94 9c 01 	call	0x338	; 0x338 <loop>
		if (serialEventRun) serialEventRun();
     978:	20 97       	sbiw	r28, 0x00	; 0
     97a:	e1 f3       	breq	.-8      	; 0x974 <main+0x10>
     97c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_Z14serialEventRunv>
     980:	f9 cf       	rjmp	.-14     	; 0x974 <main+0x10>

00000982 <_ZN7OneWire5resetEv>:
   ROM_NO[0] = family_code;
   for (uint8_t i = 1; i < 8; i++)
      ROM_NO[i] = 0;
   LastDiscrepancy = 64;
   LastFamilyDiscrepancy = 0;
   LastDeviceFlag = FALSE;
     982:	ff 92       	push	r15
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	fc 01       	movw	r30, r24
     98e:	00 81       	ld	r16, Z
     990:	c1 81       	ldd	r28, Z+1	; 0x01
     992:	d2 81       	ldd	r29, Z+2	; 0x02
     994:	f8 94       	cli
     996:	89 81       	ldd	r24, Y+1	; 0x01
     998:	f0 2e       	mov	r15, r16
     99a:	f0 94       	com	r15
     99c:	8f 21       	and	r24, r15
     99e:	89 83       	std	Y+1, r24	; 0x01
     9a0:	78 94       	sei
     9a2:	1d e7       	ldi	r17, 0x7D	; 125
     9a4:	11 50       	subi	r17, 0x01	; 1
     9a6:	29 f1       	breq	.+74     	; 0x9f2 <_ZN7OneWire5resetEv+0x70>
     9a8:	82 e0       	ldi	r24, 0x02	; 2
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	0e 94 51 09 	call	0x12a2	; 0x12a2 <delayMicroseconds>
     9b0:	88 81       	ld	r24, Y
     9b2:	80 23       	and	r24, r16
     9b4:	b9 f3       	breq	.-18     	; 0x9a4 <_ZN7OneWire5resetEv+0x22>
     9b6:	f8 94       	cli
     9b8:	8a 81       	ldd	r24, Y+2	; 0x02
     9ba:	8f 21       	and	r24, r15
     9bc:	8a 83       	std	Y+2, r24	; 0x02
     9be:	89 81       	ldd	r24, Y+1	; 0x01
     9c0:	80 2b       	or	r24, r16
     9c2:	89 83       	std	Y+1, r24	; 0x01
     9c4:	78 94       	sei
     9c6:	80 ee       	ldi	r24, 0xE0	; 224
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	0e 94 51 09 	call	0x12a2	; 0x12a2 <delayMicroseconds>
     9ce:	f8 94       	cli
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
     9d2:	f8 22       	and	r15, r24
     9d4:	f9 82       	std	Y+1, r15	; 0x01
     9d6:	86 e4       	ldi	r24, 0x46	; 70
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 94 51 09 	call	0x12a2	; 0x12a2 <delayMicroseconds>
     9de:	88 81       	ld	r24, Y
     9e0:	08 23       	and	r16, r24
     9e2:	11 e0       	ldi	r17, 0x01	; 1
     9e4:	09 f0       	breq	.+2      	; 0x9e8 <_ZN7OneWire5resetEv+0x66>
     9e6:	10 e0       	ldi	r17, 0x00	; 0
     9e8:	78 94       	sei
     9ea:	8a e9       	ldi	r24, 0x9A	; 154
     9ec:	91 e0       	ldi	r25, 0x01	; 1
     9ee:	0e 94 51 09 	call	0x12a2	; 0x12a2 <delayMicroseconds>
     9f2:	81 2f       	mov	r24, r17
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	1f 91       	pop	r17
     9fa:	0f 91       	pop	r16
     9fc:	ff 90       	pop	r15
     9fe:	08 95       	ret

00000a00 <_ZN7OneWire9write_bitEh>:
     a00:	1f 93       	push	r17
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	fc 01       	movw	r30, r24
     a08:	10 81       	ld	r17, Z
     a0a:	c1 81       	ldd	r28, Z+1	; 0x01
     a0c:	d2 81       	ldd	r29, Z+2	; 0x02
     a0e:	81 2f       	mov	r24, r17
     a10:	80 95       	com	r24
     a12:	60 ff       	sbrs	r22, 0
     a14:	12 c0       	rjmp	.+36     	; 0xa3a <_ZN7OneWire9write_bitEh+0x3a>
     a16:	f8 94       	cli
     a18:	9a 81       	ldd	r25, Y+2	; 0x02
     a1a:	89 23       	and	r24, r25
     a1c:	8a 83       	std	Y+2, r24	; 0x02
     a1e:	89 81       	ldd	r24, Y+1	; 0x01
     a20:	81 2b       	or	r24, r17
     a22:	89 83       	std	Y+1, r24	; 0x01
     a24:	8a e0       	ldi	r24, 0x0A	; 10
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 51 09 	call	0x12a2	; 0x12a2 <delayMicroseconds>
     a2c:	8a 81       	ldd	r24, Y+2	; 0x02
     a2e:	18 2b       	or	r17, r24
     a30:	1a 83       	std	Y+2, r17	; 0x02
     a32:	78 94       	sei
     a34:	87 e3       	ldi	r24, 0x37	; 55
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	11 c0       	rjmp	.+34     	; 0xa5c <_ZN7OneWire9write_bitEh+0x5c>
     a3a:	f8 94       	cli
     a3c:	9a 81       	ldd	r25, Y+2	; 0x02
     a3e:	89 23       	and	r24, r25
     a40:	8a 83       	std	Y+2, r24	; 0x02
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	81 2b       	or	r24, r17
     a46:	89 83       	std	Y+1, r24	; 0x01
     a48:	81 e4       	ldi	r24, 0x41	; 65
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <delayMicroseconds>
     a50:	8a 81       	ldd	r24, Y+2	; 0x02
     a52:	18 2b       	or	r17, r24
     a54:	1a 83       	std	Y+2, r17	; 0x02
     a56:	78 94       	sei
     a58:	85 e0       	ldi	r24, 0x05	; 5
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	1f 91       	pop	r17
     a62:	0c 94 51 09 	jmp	0x12a2	; 0x12a2 <delayMicroseconds>

00000a66 <_ZN7OneWire8read_bitEv>:
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	fc 01       	movw	r30, r24
     a70:	10 81       	ld	r17, Z
     a72:	c1 81       	ldd	r28, Z+1	; 0x01
     a74:	d2 81       	ldd	r29, Z+2	; 0x02
     a76:	f8 94       	cli
     a78:	89 81       	ldd	r24, Y+1	; 0x01
     a7a:	81 2b       	or	r24, r17
     a7c:	89 83       	std	Y+1, r24	; 0x01
     a7e:	8a 81       	ldd	r24, Y+2	; 0x02
     a80:	01 2f       	mov	r16, r17
     a82:	00 95       	com	r16
     a84:	80 23       	and	r24, r16
     a86:	8a 83       	std	Y+2, r24	; 0x02
     a88:	83 e0       	ldi	r24, 0x03	; 3
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <delayMicroseconds>
     a90:	89 81       	ldd	r24, Y+1	; 0x01
     a92:	08 23       	and	r16, r24
     a94:	09 83       	std	Y+1, r16	; 0x01
     a96:	8a e0       	ldi	r24, 0x0A	; 10
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <delayMicroseconds>
     a9e:	c8 81       	ld	r28, Y
     aa0:	78 94       	sei
     aa2:	85 e3       	ldi	r24, 0x35	; 53
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	0e 94 51 09 	call	0x12a2	; 0x12a2 <delayMicroseconds>
     aaa:	1c 23       	and	r17, r28
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	09 f4       	brne	.+2      	; 0xab2 <_ZN7OneWire8read_bitEv+0x4c>
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	08 95       	ret

00000abc <_ZN7OneWire5writeEhh>:
     abc:	cf 92       	push	r12
     abe:	df 92       	push	r13
     ac0:	ef 92       	push	r14
     ac2:	ff 92       	push	r15
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	1f 92       	push	r1
     ace:	cd b7       	in	r28, 0x3d	; 61
     ad0:	de b7       	in	r29, 0x3e	; 62
     ad2:	6c 01       	movw	r12, r24
     ad4:	e6 2e       	mov	r14, r22
     ad6:	08 e0       	ldi	r16, 0x08	; 8
     ad8:	10 e0       	ldi	r17, 0x00	; 0
     ada:	ff 24       	eor	r15, r15
     adc:	f3 94       	inc	r15
     ade:	61 e0       	ldi	r22, 0x01	; 1
     ae0:	8f 2d       	mov	r24, r15
     ae2:	8e 21       	and	r24, r14
     ae4:	09 f4       	brne	.+2      	; 0xae8 <_ZN7OneWire5writeEhh+0x2c>
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	c6 01       	movw	r24, r12
     aea:	49 83       	std	Y+1, r20	; 0x01
     aec:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZN7OneWire9write_bitEh>
     af0:	ff 0c       	add	r15, r15
     af2:	01 50       	subi	r16, 0x01	; 1
     af4:	11 09       	sbc	r17, r1
     af6:	49 81       	ldd	r20, Y+1	; 0x01
     af8:	01 15       	cp	r16, r1
     afa:	11 05       	cpc	r17, r1
     afc:	81 f7       	brne	.-32     	; 0xade <_ZN7OneWire5writeEhh+0x22>
     afe:	41 11       	cpse	r20, r1
     b00:	15 c0       	rjmp	.+42     	; 0xb2c <_ZN7OneWire5writeEhh+0x70>
     b02:	f8 94       	cli
     b04:	d6 01       	movw	r26, r12
     b06:	11 96       	adiw	r26, 0x01	; 1
     b08:	ed 91       	ld	r30, X+
     b0a:	fc 91       	ld	r31, X
     b0c:	12 97       	sbiw	r26, 0x02	; 2
     b0e:	91 81       	ldd	r25, Z+1	; 0x01
     b10:	8c 91       	ld	r24, X
     b12:	80 95       	com	r24
     b14:	89 23       	and	r24, r25
     b16:	81 83       	std	Z+1, r24	; 0x01
     b18:	11 96       	adiw	r26, 0x01	; 1
     b1a:	ed 91       	ld	r30, X+
     b1c:	fc 91       	ld	r31, X
     b1e:	12 97       	sbiw	r26, 0x02	; 2
     b20:	92 81       	ldd	r25, Z+2	; 0x02
     b22:	8c 91       	ld	r24, X
     b24:	80 95       	com	r24
     b26:	89 23       	and	r24, r25
     b28:	82 83       	std	Z+2, r24	; 0x02
     b2a:	78 94       	sei
     b2c:	0f 90       	pop	r0
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	ff 90       	pop	r15
     b38:	ef 90       	pop	r14
     b3a:	df 90       	pop	r13
     b3c:	cf 90       	pop	r12
     b3e:	08 95       	ret

00000b40 <_ZN7OneWire4readEv>:
     b40:	ef 92       	push	r14
     b42:	ff 92       	push	r15
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	7c 01       	movw	r14, r24
     b4e:	08 e0       	ldi	r16, 0x08	; 8
     b50:	10 e0       	ldi	r17, 0x00	; 0
     b52:	c0 e0       	ldi	r28, 0x00	; 0
     b54:	d1 e0       	ldi	r29, 0x01	; 1
     b56:	c7 01       	movw	r24, r14
     b58:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN7OneWire8read_bitEv>
     b5c:	81 11       	cpse	r24, r1
     b5e:	cd 2b       	or	r28, r29
     b60:	dd 0f       	add	r29, r29
     b62:	01 50       	subi	r16, 0x01	; 1
     b64:	11 09       	sbc	r17, r1
     b66:	b9 f7       	brne	.-18     	; 0xb56 <_ZN7OneWire4readEv+0x16>
     b68:	8c 2f       	mov	r24, r28
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	1f 91       	pop	r17
     b70:	0f 91       	pop	r16
     b72:	ff 90       	pop	r15
     b74:	ef 90       	pop	r14
     b76:	08 95       	ret

00000b78 <_ZN7OneWire6selectEPKh>:
     b78:	cf 92       	push	r12
     b7a:	df 92       	push	r13
     b7c:	ef 92       	push	r14
     b7e:	ff 92       	push	r15
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	1f 92       	push	r1
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
     b8e:	8c 01       	movw	r16, r24
     b90:	f6 2e       	mov	r15, r22
     b92:	40 e0       	ldi	r20, 0x00	; 0
     b94:	65 e5       	ldi	r22, 0x55	; 85
     b96:	79 83       	std	Y+1, r23	; 0x01
     b98:	0e 94 5e 05 	call	0xabc	; 0xabc <_ZN7OneWire5writeEhh>
     b9c:	cf 2c       	mov	r12, r15
     b9e:	79 81       	ldd	r23, Y+1	; 0x01
     ba0:	d7 2e       	mov	r13, r23
     ba2:	76 01       	movw	r14, r12
     ba4:	88 e0       	ldi	r24, 0x08	; 8
     ba6:	e8 0e       	add	r14, r24
     ba8:	f1 1c       	adc	r15, r1
     baa:	f6 01       	movw	r30, r12
     bac:	61 91       	ld	r22, Z+
     bae:	6f 01       	movw	r12, r30
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	c8 01       	movw	r24, r16
     bb4:	0e 94 5e 05 	call	0xabc	; 0xabc <_ZN7OneWire5writeEhh>
     bb8:	ce 14       	cp	r12, r14
     bba:	df 04       	cpc	r13, r15
     bbc:	b1 f7       	brne	.-20     	; 0xbaa <_ZN7OneWire6selectEPKh+0x32>
     bbe:	0f 90       	pop	r0
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	ff 90       	pop	r15
     bca:	ef 90       	pop	r14
     bcc:	df 90       	pop	r13
     bce:	cf 90       	pop	r12
     bd0:	08 95       	ret

00000bd2 <_ZN7OneWire12reset_searchEv>:
     bd2:	fc 01       	movw	r30, r24
     bd4:	13 86       	std	Z+11, r1	; 0x0b
     bd6:	15 86       	std	Z+13, r1	; 0x0d
     bd8:	14 86       	std	Z+12, r1	; 0x0c
     bda:	dc 01       	movw	r26, r24
     bdc:	1b 96       	adiw	r26, 0x0b	; 11
     bde:	33 96       	adiw	r30, 0x03	; 3
     be0:	1e 92       	st	-X, r1
     be2:	ae 17       	cp	r26, r30
     be4:	bf 07       	cpc	r27, r31
     be6:	e1 f7       	brne	.-8      	; 0xbe0 <_ZN7OneWire12reset_searchEv+0xe>
     be8:	08 95       	ret

00000bea <_ZN7OneWireC1Eh>:
     bea:	0f 93       	push	r16
     bec:	1f 93       	push	r17
     bee:	cf 93       	push	r28
     bf0:	8c 01       	movw	r16, r24
     bf2:	c6 2f       	mov	r28, r22
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	8c 2f       	mov	r24, r28
     bf8:	0e 94 c0 09 	call	0x1380	; 0x1380 <pinMode>
     bfc:	6c 2f       	mov	r22, r28
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	fb 01       	movw	r30, r22
     c02:	e4 58       	subi	r30, 0x84	; 132
     c04:	fe 4f       	sbci	r31, 0xFE	; 254
     c06:	e4 91       	lpm	r30, Z
     c08:	d8 01       	movw	r26, r16
     c0a:	ec 93       	st	X, r30
     c0c:	fb 01       	movw	r30, r22
     c0e:	e0 57       	subi	r30, 0x70	; 112
     c10:	fe 4f       	sbci	r31, 0xFE	; 254
     c12:	e4 91       	lpm	r30, Z
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	ee 0f       	add	r30, r30
     c18:	ff 1f       	adc	r31, r31
     c1a:	ec 55       	subi	r30, 0x5C	; 92
     c1c:	fe 4f       	sbci	r31, 0xFE	; 254
     c1e:	85 91       	lpm	r24, Z+
     c20:	94 91       	lpm	r25, Z
     c22:	f8 01       	movw	r30, r16
     c24:	92 83       	std	Z+2, r25	; 0x02
     c26:	81 83       	std	Z+1, r24	; 0x01
     c28:	c8 01       	movw	r24, r16
     c2a:	cf 91       	pop	r28
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <_ZN7OneWire12reset_searchEv>

00000c34 <_ZN7OneWire6searchEPhb>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
     c34:	af 92       	push	r10
     c36:	bf 92       	push	r11
     c38:	cf 92       	push	r12
     c3a:	df 92       	push	r13
     c3c:	ef 92       	push	r14
     c3e:	ff 92       	push	r15
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	1f 92       	push	r1
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	5c 01       	movw	r10, r24
     c50:	d6 2e       	mov	r13, r22
     c52:	e7 2e       	mov	r14, r23
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = 0;

   // if the last call was not the last one
   if (!LastDeviceFlag)
     c54:	fc 01       	movw	r30, r24
     c56:	85 85       	ldd	r24, Z+13	; 0x0d
     c58:	81 11       	cpse	r24, r1
     c5a:	07 c0       	rjmp	.+14     	; 0xc6a <_ZN7OneWire6searchEPhb+0x36>
   {
      // 1-Wire reset
      if (!reset())
     c5c:	c5 01       	movw	r24, r10
     c5e:	49 83       	std	Y+1, r20	; 0x01
     c60:	0e 94 c1 04 	call	0x982	; 0x982 <_ZN7OneWire5resetEv>
     c64:	49 81       	ldd	r20, Y+1	; 0x01
     c66:	81 11       	cpse	r24, r1
     c68:	06 c0       	rjmp	.+12     	; 0xc76 <_ZN7OneWire6searchEPhb+0x42>
      {
         // reset the search
         LastDiscrepancy = 0;
     c6a:	f5 01       	movw	r30, r10
     c6c:	13 86       	std	Z+11, r1	; 0x0b
         LastDeviceFlag = FALSE;
     c6e:	15 86       	std	Z+13, r1	; 0x0d
         LastFamilyDiscrepancy = 0;
     c70:	14 86       	std	Z+12, r1	; 0x0c
         return FALSE;
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	6a c0       	rjmp	.+212    	; 0xd4a <_ZN7OneWire6searchEPhb+0x116>
      }

      // issue the search command
      if (search_mode == true) {
     c76:	44 23       	and	r20, r20
     c78:	19 f0       	breq	.+6      	; 0xc80 <_ZN7OneWire6searchEPhb+0x4c>
        write(0xF0);   // NORMAL SEARCH
     c7a:	40 e0       	ldi	r20, 0x00	; 0
     c7c:	60 ef       	ldi	r22, 0xF0	; 240
     c7e:	02 c0       	rjmp	.+4      	; 0xc84 <_ZN7OneWire6searchEPhb+0x50>
      } else {
        write(0xEC);   // CONDITIONAL SEARCH
     c80:	40 e0       	ldi	r20, 0x00	; 0
     c82:	6c ee       	ldi	r22, 0xEC	; 236
     c84:	c5 01       	movw	r24, r10
     c86:	0e 94 5e 05 	call	0xabc	; 0xabc <_ZN7OneWire5writeEhh>
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
     c8a:	01 e0       	ldi	r16, 0x01	; 1
     c8c:	f1 2c       	mov	r15, r1
     c8e:	c1 2c       	mov	r12, r1
     c90:	11 e0       	ldi	r17, 0x01	; 1

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
     c92:	c5 01       	movw	r24, r10
     c94:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN7OneWire8read_bitEv>
     c98:	68 2f       	mov	r22, r24
         cmp_id_bit = read_bit();
     c9a:	c5 01       	movw	r24, r10
     c9c:	69 83       	std	Y+1, r22	; 0x01
     c9e:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN7OneWire8read_bitEv>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1))
     ca2:	69 81       	ldd	r22, Y+1	; 0x01
     ca4:	61 30       	cpi	r22, 0x01	; 1
     ca6:	19 f4       	brne	.+6      	; 0xcae <_ZN7OneWire6searchEPhb+0x7a>
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	b9 f4       	brne	.+46     	; 0xcda <_ZN7OneWire6searchEPhb+0xa6>
     cac:	33 c0       	rjmp	.+102    	; 0xd14 <_ZN7OneWire6searchEPhb+0xe0>
     cae:	4f 2d       	mov	r20, r15
     cb0:	50 e0       	ldi	r21, 0x00	; 0
            break;
         else
         {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit)
     cb2:	68 13       	cpse	r22, r24
     cb4:	1b c0       	rjmp	.+54     	; 0xcec <_ZN7OneWire6searchEPhb+0xb8>
               search_direction = id_bit;  // bit write value for search
            else
            {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
     cb6:	f5 01       	movw	r30, r10
     cb8:	83 85       	ldd	r24, Z+11	; 0x0b
     cba:	18 17       	cp	r17, r24
     cbc:	30 f4       	brcc	.+12     	; 0xcca <_ZN7OneWire6searchEPhb+0x96>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
     cbe:	e4 0f       	add	r30, r20
     cc0:	f5 1f       	adc	r31, r21
     cc2:	83 81       	ldd	r24, Z+3	; 0x03
     cc4:	80 23       	and	r24, r16
     cc6:	49 f4       	brne	.+18     	; 0xcda <_ZN7OneWire6searchEPhb+0xa6>
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <_ZN7OneWire6searchEPhb+0x9a>
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
     cca:	18 17       	cp	r17, r24
     ccc:	31 f0       	breq	.+12     	; 0xcda <_ZN7OneWire6searchEPhb+0xa6>
     cce:	60 e0       	ldi	r22, 0x00	; 0
               if (search_direction == 0)
               {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
     cd0:	19 30       	cpi	r17, 0x09	; 9
     cd2:	58 f4       	brcc	.+22     	; 0xcea <_ZN7OneWire6searchEPhb+0xb6>
                     LastFamilyDiscrepancy = last_zero;
     cd4:	f5 01       	movw	r30, r10
     cd6:	14 87       	std	Z+12, r17	; 0x0c
     cd8:	08 c0       	rjmp	.+16     	; 0xcea <_ZN7OneWire6searchEPhb+0xb6>
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
     cda:	f5 01       	movw	r30, r10
     cdc:	ef 0d       	add	r30, r15
     cde:	f1 1d       	adc	r31, r1
     ce0:	83 81       	ldd	r24, Z+3	; 0x03
     ce2:	80 2b       	or	r24, r16
     ce4:	83 83       	std	Z+3, r24	; 0x03
     ce6:	61 e0       	ldi	r22, 0x01	; 1
     ce8:	09 c0       	rjmp	.+18     	; 0xcfc <_ZN7OneWire6searchEPhb+0xc8>
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
     cea:	c1 2e       	mov	r12, r17
            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
     cec:	f5 01       	movw	r30, r10
     cee:	e4 0f       	add	r30, r20
     cf0:	f5 1f       	adc	r31, r21
     cf2:	93 81       	ldd	r25, Z+3	; 0x03
     cf4:	80 2f       	mov	r24, r16
     cf6:	80 95       	com	r24
     cf8:	89 23       	and	r24, r25
     cfa:	83 83       	std	Z+3, r24	; 0x03

            // serial number search direction write bit
            write_bit(search_direction);
     cfc:	c5 01       	movw	r24, r10
     cfe:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZN7OneWire9write_bitEh>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
     d02:	1f 5f       	subi	r17, 0xFF	; 255
            rom_byte_mask <<= 1;
     d04:	00 0f       	add	r16, r16

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0)
     d06:	11 f4       	brne	.+4      	; 0xd0c <_ZN7OneWire6searchEPhb+0xd8>
            {
                rom_byte_number++;
     d08:	f3 94       	inc	r15
                rom_byte_mask = 1;
     d0a:	01 e0       	ldi	r16, 0x01	; 1
      } else {
        write(0xEC);   // CONDITIONAL SEARCH
      }

      // loop to do the search
      do
     d0c:	f7 e0       	ldi	r31, 0x07	; 7
     d0e:	ff 15       	cp	r31, r15
     d10:	08 f0       	brcs	.+2      	; 0xd14 <_ZN7OneWire6searchEPhb+0xe0>
     d12:	bf cf       	rjmp	.-130    	; 0xc92 <_ZN7OneWire6searchEPhb+0x5e>
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7

      // if the search was successful then
      if (!(id_bit_number < 65))
     d14:	11 34       	cpi	r17, 0x41	; 65
     d16:	08 f4       	brcc	.+2      	; 0xd1a <_ZN7OneWire6searchEPhb+0xe6>
     d18:	a8 cf       	rjmp	.-176    	; 0xc6a <_ZN7OneWire6searchEPhb+0x36>
      {
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
     d1a:	f5 01       	movw	r30, r10
     d1c:	c3 86       	std	Z+11, r12	; 0x0b

         // check for last device
         if (LastDiscrepancy == 0)
     d1e:	c1 10       	cpse	r12, r1
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <_ZN7OneWire6searchEPhb+0xf2>
            LastDeviceFlag = TRUE;
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	85 87       	std	Z+13, r24	; 0x0d
         search_result = TRUE;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
     d26:	f5 01       	movw	r30, r10
     d28:	83 81       	ldd	r24, Z+3	; 0x03
     d2a:	88 23       	and	r24, r24
     d2c:	09 f4       	brne	.+2      	; 0xd30 <_ZN7OneWire6searchEPhb+0xfc>
     d2e:	9d cf       	rjmp	.-198    	; 0xc6a <_ZN7OneWire6searchEPhb+0x36>
     d30:	d5 01       	movw	r26, r10
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	ed 2d       	mov	r30, r13
     d36:	fe 2d       	mov	r31, r14
     d38:	95 01       	movw	r18, r10
     d3a:	25 5f       	subi	r18, 0xF5	; 245
     d3c:	3f 4f       	sbci	r19, 0xFF	; 255
      LastDiscrepancy = 0;
      LastDeviceFlag = FALSE;
      LastFamilyDiscrepancy = 0;
      search_result = FALSE;
   } else {
      for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
     d3e:	8d 91       	ld	r24, X+
     d40:	81 93       	st	Z+, r24
     d42:	a2 17       	cp	r26, r18
     d44:	b3 07       	cpc	r27, r19
     d46:	d9 f7       	brne	.-10     	; 0xd3e <_ZN7OneWire6searchEPhb+0x10a>
     d48:	81 e0       	ldi	r24, 0x01	; 1
   }
   return search_result;
  }
     d4a:	0f 90       	pop	r0
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	1f 91       	pop	r17
     d52:	0f 91       	pop	r16
     d54:	ff 90       	pop	r15
     d56:	ef 90       	pop	r14
     d58:	df 90       	pop	r13
     d5a:	cf 90       	pop	r12
     d5c:	bf 90       	pop	r11
     d5e:	af 90       	pop	r10
     d60:	08 95       	ret

00000d62 <_ZN7OneWire4crc8EPKhh>:
// table, it would probably be smaller and certainly fast enough
// compared to all those delayMicrosecond() calls.  But I got
// confused, so I use this table from the examples.)
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
     d62:	dc 01       	movw	r26, r24
	uint8_t crc = 0;
     d64:	e0 e0       	ldi	r30, 0x00	; 0

	while (len--) {
     d66:	61 50       	subi	r22, 0x01	; 1
     d68:	38 f0       	brcs	.+14     	; 0xd78 <_ZN7OneWire4crc8EPKhh+0x16>
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
     d6a:	8d 91       	ld	r24, X+
     d6c:	e8 27       	eor	r30, r24
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	e8 59       	subi	r30, 0x98	; 152
     d72:	ff 4f       	sbci	r31, 0xFF	; 255
     d74:	e4 91       	lpm	r30, Z
     d76:	f7 cf       	rjmp	.-18     	; 0xd66 <_ZN7OneWire4crc8EPKhh+0x4>
	}
	return crc;
}
     d78:	8e 2f       	mov	r24, r30
     d7a:	08 95       	ret

00000d7c <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     d7c:	cf 92       	push	r12
     d7e:	df 92       	push	r13
     d80:	ef 92       	push	r14
     d82:	ff 92       	push	r15
     d84:	0f 93       	push	r16
     d86:	1f 93       	push	r17
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	6c 01       	movw	r12, r24
     d8e:	7a 01       	movw	r14, r20
     d90:	8b 01       	movw	r16, r22
     d92:	c0 e0       	ldi	r28, 0x00	; 0
     d94:	d0 e0       	ldi	r29, 0x00	; 0
     d96:	ce 15       	cp	r28, r14
     d98:	df 05       	cpc	r29, r15
     d9a:	89 f0       	breq	.+34     	; 0xdbe <_ZN5Print5writeEPKhj+0x42>
     d9c:	d8 01       	movw	r26, r16
     d9e:	6d 91       	ld	r22, X+
     da0:	8d 01       	movw	r16, r26
     da2:	d6 01       	movw	r26, r12
     da4:	ed 91       	ld	r30, X+
     da6:	fc 91       	ld	r31, X
     da8:	01 90       	ld	r0, Z+
     daa:	f0 81       	ld	r31, Z
     dac:	e0 2d       	mov	r30, r0
     dae:	c6 01       	movw	r24, r12
     db0:	09 95       	icall
     db2:	89 2b       	or	r24, r25
     db4:	11 f4       	brne	.+4      	; 0xdba <_ZN5Print5writeEPKhj+0x3e>
     db6:	7e 01       	movw	r14, r28
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <_ZN5Print5writeEPKhj+0x42>
     dba:	21 96       	adiw	r28, 0x01	; 1
     dbc:	ec cf       	rjmp	.-40     	; 0xd96 <_ZN5Print5writeEPKhj+0x1a>
     dbe:	c7 01       	movw	r24, r14
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	ff 90       	pop	r15
     dca:	ef 90       	pop	r14
     dcc:	df 90       	pop	r13
     dce:	cf 90       	pop	r12
     dd0:	08 95       	ret

00000dd2 <_ZN5Print5writeEPKc>:
     dd2:	61 15       	cp	r22, r1
     dd4:	71 05       	cpc	r23, r1
     dd6:	79 f0       	breq	.+30     	; 0xdf6 <_ZN5Print5writeEPKc+0x24>
     dd8:	fb 01       	movw	r30, r22
     dda:	01 90       	ld	r0, Z+
     ddc:	00 20       	and	r0, r0
     dde:	e9 f7       	brne	.-6      	; 0xdda <_ZN5Print5writeEPKc+0x8>
     de0:	31 97       	sbiw	r30, 0x01	; 1
     de2:	af 01       	movw	r20, r30
     de4:	46 1b       	sub	r20, r22
     de6:	57 0b       	sbc	r21, r23
     de8:	dc 01       	movw	r26, r24
     dea:	ed 91       	ld	r30, X+
     dec:	fc 91       	ld	r31, X
     dee:	02 80       	ldd	r0, Z+2	; 0x02
     df0:	f3 81       	ldd	r31, Z+3	; 0x03
     df2:	e0 2d       	mov	r30, r0
     df4:	09 94       	ijmp
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	08 95       	ret

00000dfc <_ZN5Print5printEPKc>:
     dfc:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <_ZN5Print5writeEPKc>

00000e00 <_ZN5Print5printEc>:
     e00:	dc 01       	movw	r26, r24
     e02:	ed 91       	ld	r30, X+
     e04:	fc 91       	ld	r31, X
     e06:	01 90       	ld	r0, Z+
     e08:	f0 81       	ld	r31, Z
     e0a:	e0 2d       	mov	r30, r0
     e0c:	09 94       	ijmp

00000e0e <_ZN5Print7printlnEv>:
     e0e:	63 e6       	ldi	r22, 0x63	; 99
     e10:	71 e0       	ldi	r23, 0x01	; 1
     e12:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <_ZN5Print5writeEPKc>

00000e16 <_ZN5Print7printlnEPKc>:
     e16:	0f 93       	push	r16
     e18:	1f 93       	push	r17
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	ec 01       	movw	r28, r24
     e20:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <_ZN5Print5writeEPKc>
     e24:	8c 01       	movw	r16, r24
     e26:	ce 01       	movw	r24, r28
     e28:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN5Print7printlnEv>
     e2c:	80 0f       	add	r24, r16
     e2e:	91 1f       	adc	r25, r17
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	1f 91       	pop	r17
     e36:	0f 91       	pop	r16
     e38:	08 95       	ret

00000e3a <_ZN5Print11printNumberEmh>:
     e3a:	8f 92       	push	r8
     e3c:	9f 92       	push	r9
     e3e:	af 92       	push	r10
     e40:	bf 92       	push	r11
     e42:	cf 92       	push	r12
     e44:	df 92       	push	r13
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	a1 97       	sbiw	r28, 0x21	; 33
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	cd bf       	out	0x3d, r28	; 61
     e62:	7c 01       	movw	r14, r24
     e64:	d4 2e       	mov	r13, r20
     e66:	c5 2e       	mov	r12, r21
     e68:	db 01       	movw	r26, r22
     e6a:	19 a2       	std	Y+33, r1	; 0x21
     e6c:	22 30       	cpi	r18, 0x02	; 2
     e6e:	08 f4       	brcc	.+2      	; 0xe72 <_ZN5Print11printNumberEmh+0x38>
     e70:	2a e0       	ldi	r18, 0x0A	; 10
     e72:	8e 01       	movw	r16, r28
     e74:	0f 5d       	subi	r16, 0xDF	; 223
     e76:	1f 4f       	sbci	r17, 0xFF	; 255
     e78:	82 2e       	mov	r8, r18
     e7a:	91 2c       	mov	r9, r1
     e7c:	a1 2c       	mov	r10, r1
     e7e:	b1 2c       	mov	r11, r1
     e80:	6d 2d       	mov	r22, r13
     e82:	7c 2d       	mov	r23, r12
     e84:	cd 01       	movw	r24, r26
     e86:	a5 01       	movw	r20, r10
     e88:	94 01       	movw	r18, r8
     e8a:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__udivmodsi4>
     e8e:	d2 2e       	mov	r13, r18
     e90:	c3 2e       	mov	r12, r19
     e92:	da 01       	movw	r26, r20
     e94:	01 50       	subi	r16, 0x01	; 1
     e96:	11 09       	sbc	r17, r1
     e98:	6a 30       	cpi	r22, 0x0A	; 10
     e9a:	71 05       	cpc	r23, r1
     e9c:	81 05       	cpc	r24, r1
     e9e:	91 05       	cpc	r25, r1
     ea0:	10 f4       	brcc	.+4      	; 0xea6 <_ZN5Print11printNumberEmh+0x6c>
     ea2:	60 5d       	subi	r22, 0xD0	; 208
     ea4:	01 c0       	rjmp	.+2      	; 0xea8 <_ZN5Print11printNumberEmh+0x6e>
     ea6:	69 5c       	subi	r22, 0xC9	; 201
     ea8:	f8 01       	movw	r30, r16
     eaa:	60 83       	st	Z, r22
     eac:	23 2b       	or	r18, r19
     eae:	24 2b       	or	r18, r20
     eb0:	25 2b       	or	r18, r21
     eb2:	31 f7       	brne	.-52     	; 0xe80 <_ZN5Print11printNumberEmh+0x46>
     eb4:	b8 01       	movw	r22, r16
     eb6:	c7 01       	movw	r24, r14
     eb8:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <_ZN5Print5writeEPKc>
     ebc:	a1 96       	adiw	r28, 0x21	; 33
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	ff 90       	pop	r15
     ed2:	ef 90       	pop	r14
     ed4:	df 90       	pop	r13
     ed6:	cf 90       	pop	r12
     ed8:	bf 90       	pop	r11
     eda:	af 90       	pop	r10
     edc:	9f 90       	pop	r9
     ede:	8f 90       	pop	r8
     ee0:	08 95       	ret

00000ee2 <_ZN5Print5printEli>:
     ee2:	cf 92       	push	r12
     ee4:	df 92       	push	r13
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	ec 01       	movw	r28, r24
     ef4:	6a 01       	movw	r12, r20
     ef6:	7b 01       	movw	r14, r22
     ef8:	21 15       	cp	r18, r1
     efa:	31 05       	cpc	r19, r1
     efc:	79 f4       	brne	.+30     	; 0xf1c <_ZN5Print5printEli+0x3a>
     efe:	e8 81       	ld	r30, Y
     f00:	f9 81       	ldd	r31, Y+1	; 0x01
     f02:	01 90       	ld	r0, Z+
     f04:	f0 81       	ld	r31, Z
     f06:	e0 2d       	mov	r30, r0
     f08:	64 2f       	mov	r22, r20
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	1f 91       	pop	r17
     f10:	0f 91       	pop	r16
     f12:	ff 90       	pop	r15
     f14:	ef 90       	pop	r14
     f16:	df 90       	pop	r13
     f18:	cf 90       	pop	r12
     f1a:	09 94       	ijmp
     f1c:	2a 30       	cpi	r18, 0x0A	; 10
     f1e:	31 05       	cpc	r19, r1
     f20:	e9 f4       	brne	.+58     	; 0xf5c <_ZN5Print5printEli+0x7a>
     f22:	77 ff       	sbrs	r23, 7
     f24:	1a c0       	rjmp	.+52     	; 0xf5a <_ZN5Print5printEli+0x78>
     f26:	6d e2       	ldi	r22, 0x2D	; 45
     f28:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print5printEc>
     f2c:	8c 01       	movw	r16, r24
     f2e:	44 27       	eor	r20, r20
     f30:	55 27       	eor	r21, r21
     f32:	ba 01       	movw	r22, r20
     f34:	4c 19       	sub	r20, r12
     f36:	5d 09       	sbc	r21, r13
     f38:	6e 09       	sbc	r22, r14
     f3a:	7f 09       	sbc	r23, r15
     f3c:	2a e0       	ldi	r18, 0x0A	; 10
     f3e:	ce 01       	movw	r24, r28
     f40:	0e 94 1d 07 	call	0xe3a	; 0xe3a <_ZN5Print11printNumberEmh>
     f44:	80 0f       	add	r24, r16
     f46:	91 1f       	adc	r25, r17
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	1f 91       	pop	r17
     f4e:	0f 91       	pop	r16
     f50:	ff 90       	pop	r15
     f52:	ef 90       	pop	r14
     f54:	df 90       	pop	r13
     f56:	cf 90       	pop	r12
     f58:	08 95       	ret
     f5a:	2a e0       	ldi	r18, 0x0A	; 10
     f5c:	b7 01       	movw	r22, r14
     f5e:	a6 01       	movw	r20, r12
     f60:	ce 01       	movw	r24, r28
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	1f 91       	pop	r17
     f68:	0f 91       	pop	r16
     f6a:	ff 90       	pop	r15
     f6c:	ef 90       	pop	r14
     f6e:	df 90       	pop	r13
     f70:	cf 90       	pop	r12
     f72:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <_ZN5Print11printNumberEmh>

00000f76 <_ZN5Print5printEii>:
     f76:	9a 01       	movw	r18, r20
     f78:	ab 01       	movw	r20, r22
     f7a:	77 0f       	add	r23, r23
     f7c:	66 0b       	sbc	r22, r22
     f7e:	77 0b       	sbc	r23, r23
     f80:	0c 94 71 07 	jmp	0xee2	; 0xee2 <_ZN5Print5printEli>

00000f84 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
     f84:	4f 92       	push	r4
     f86:	5f 92       	push	r5
     f88:	6f 92       	push	r6
     f8a:	7f 92       	push	r7
     f8c:	8f 92       	push	r8
     f8e:	9f 92       	push	r9
     f90:	af 92       	push	r10
     f92:	bf 92       	push	r11
     f94:	cf 92       	push	r12
     f96:	df 92       	push	r13
     f98:	ef 92       	push	r14
     f9a:	ff 92       	push	r15
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	ec 01       	movw	r28, r24
     fa2:	6a 01       	movw	r12, r20
     fa4:	7b 01       	movw	r14, r22
     fa6:	b2 2e       	mov	r11, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
     fa8:	9a 01       	movw	r18, r20
     faa:	ab 01       	movw	r20, r22
     fac:	c7 01       	movw	r24, r14
     fae:	b6 01       	movw	r22, r12
     fb0:	0e 94 e7 11 	call	0x23ce	; 0x23ce <__unordsf2>
     fb4:	88 23       	and	r24, r24
     fb6:	19 f0       	breq	.+6      	; 0xfbe <_ZN5Print10printFloatEdh+0x3a>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     fb8:	66 e6       	ldi	r22, 0x66	; 102
     fba:	71 e0       	ldi	r23, 0x01	; 1
     fbc:	27 c0       	rjmp	.+78     	; 0x100c <_ZN5Print10printFloatEdh+0x88>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
     fbe:	26 01       	movw	r4, r12
     fc0:	37 01       	movw	r6, r14
     fc2:	e8 94       	clt
     fc4:	77 f8       	bld	r7, 7
     fc6:	2f ef       	ldi	r18, 0xFF	; 255
     fc8:	3f ef       	ldi	r19, 0xFF	; 255
     fca:	4f e7       	ldi	r20, 0x7F	; 127
     fcc:	5f e7       	ldi	r21, 0x7F	; 127
     fce:	c3 01       	movw	r24, r6
     fd0:	b2 01       	movw	r22, r4
     fd2:	0e 94 e7 11 	call	0x23ce	; 0x23ce <__unordsf2>
     fd6:	81 11       	cpse	r24, r1
     fd8:	0d c0       	rjmp	.+26     	; 0xff4 <_ZN5Print10printFloatEdh+0x70>
     fda:	2f ef       	ldi	r18, 0xFF	; 255
     fdc:	3f ef       	ldi	r19, 0xFF	; 255
     fde:	4f e7       	ldi	r20, 0x7F	; 127
     fe0:	5f e7       	ldi	r21, 0x7F	; 127
     fe2:	c3 01       	movw	r24, r6
     fe4:	b2 01       	movw	r22, r4
     fe6:	0e 94 1d 10 	call	0x203a	; 0x203a <__cmpsf2>
     fea:	18 16       	cp	r1, r24
     fec:	1c f4       	brge	.+6      	; 0xff4 <_ZN5Print10printFloatEdh+0x70>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     fee:	6a e6       	ldi	r22, 0x6A	; 106
     ff0:	71 e0       	ldi	r23, 0x01	; 1
     ff2:	0c c0       	rjmp	.+24     	; 0x100c <_ZN5Print10printFloatEdh+0x88>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     ff4:	2f ef       	ldi	r18, 0xFF	; 255
     ff6:	3f ef       	ldi	r19, 0xFF	; 255
     ff8:	4f e7       	ldi	r20, 0x7F	; 127
     ffa:	5f e4       	ldi	r21, 0x4F	; 79
     ffc:	c7 01       	movw	r24, r14
     ffe:	b6 01       	movw	r22, r12
    1000:	0e 94 75 11 	call	0x22ea	; 0x22ea <__gesf2>
    1004:	18 16       	cp	r1, r24
    1006:	9c f4       	brge	.+38     	; 0x102e <_ZN5Print10printFloatEdh+0xaa>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1008:	6e e6       	ldi	r22, 0x6E	; 110
    100a:	71 e0       	ldi	r23, 0x01	; 1
    100c:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	ff 90       	pop	r15
    1014:	ef 90       	pop	r14
    1016:	df 90       	pop	r13
    1018:	cf 90       	pop	r12
    101a:	bf 90       	pop	r11
    101c:	af 90       	pop	r10
    101e:	9f 90       	pop	r9
    1020:	8f 90       	pop	r8
    1022:	7f 90       	pop	r7
    1024:	6f 90       	pop	r6
    1026:	5f 90       	pop	r5
    1028:	4f 90       	pop	r4
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    102a:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    102e:	2f ef       	ldi	r18, 0xFF	; 255
    1030:	3f ef       	ldi	r19, 0xFF	; 255
    1032:	4f e7       	ldi	r20, 0x7F	; 127
    1034:	5f ec       	ldi	r21, 0xCF	; 207
    1036:	c7 01       	movw	r24, r14
    1038:	b6 01       	movw	r22, r12
    103a:	0e 94 1d 10 	call	0x203a	; 0x203a <__cmpsf2>
    103e:	87 fd       	sbrc	r24, 7
    1040:	e3 cf       	rjmp	.-58     	; 0x1008 <_ZN5Print10printFloatEdh+0x84>
  
  // Handle negative numbers
  if (number < 0.0)
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	a9 01       	movw	r20, r18
    1048:	c7 01       	movw	r24, r14
    104a:	b6 01       	movw	r22, r12
    104c:	0e 94 1d 10 	call	0x203a	; 0x203a <__cmpsf2>
    1050:	87 ff       	sbrs	r24, 7
    1052:	0a c0       	rjmp	.+20     	; 0x1068 <_ZN5Print10printFloatEdh+0xe4>
  {
     n += print('-');
    1054:	6d e2       	ldi	r22, 0x2D	; 45
    1056:	ce 01       	movw	r24, r28
    1058:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print5printEc>
    105c:	4c 01       	movw	r8, r24
     number = -number;
    105e:	f7 fa       	bst	r15, 7
    1060:	f0 94       	com	r15
    1062:	f7 f8       	bld	r15, 7
    1064:	f0 94       	com	r15
    1066:	02 c0       	rjmp	.+4      	; 0x106c <_ZN5Print10printFloatEdh+0xe8>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1068:	81 2c       	mov	r8, r1
    106a:	91 2c       	mov	r9, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    106c:	a1 2c       	mov	r10, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    106e:	60 e0       	ldi	r22, 0x00	; 0
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    1076:	ab 14       	cp	r10, r11
    1078:	41 f0       	breq	.+16     	; 0x108a <_ZN5Print10printFloatEdh+0x106>
    rounding /= 10.0;
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	40 e2       	ldi	r20, 0x20	; 32
    1080:	51 e4       	ldi	r21, 0x41	; 65
    1082:	0e 94 22 10 	call	0x2044	; 0x2044 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1086:	a3 94       	inc	r10
    1088:	f6 cf       	rjmp	.-20     	; 0x1076 <_ZN5Print10printFloatEdh+0xf2>
    rounding /= 10.0;
  
  number += rounding;
    108a:	9b 01       	movw	r18, r22
    108c:	ac 01       	movw	r20, r24
    108e:	c7 01       	movw	r24, r14
    1090:	b6 01       	movw	r22, r12
    1092:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__addsf3>
    1096:	2b 01       	movw	r4, r22
    1098:	3c 01       	movw	r6, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    109a:	0e 94 94 10 	call	0x2128	; 0x2128 <__fixunssfsi>
    109e:	6b 01       	movw	r12, r22
    10a0:	7c 01       	movw	r14, r24
  double remainder = number - (double)int_part;
    10a2:	0e 94 c3 10 	call	0x2186	; 0x2186 <__floatunsisf>
    10a6:	9b 01       	movw	r18, r22
    10a8:	ac 01       	movw	r20, r24
    10aa:	c3 01       	movw	r24, r6
    10ac:	b2 01       	movw	r22, r4
    10ae:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__subsf3>
    10b2:	2b 01       	movw	r4, r22
    10b4:	3c 01       	movw	r6, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    10b6:	2a e0       	ldi	r18, 0x0A	; 10
    10b8:	b7 01       	movw	r22, r14
    10ba:	a6 01       	movw	r20, r12
    10bc:	ce 01       	movw	r24, r28
    10be:	0e 94 1d 07 	call	0xe3a	; 0xe3a <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    10c2:	7c 01       	movw	r14, r24
    10c4:	e8 0c       	add	r14, r8
    10c6:	f9 1c       	adc	r15, r9

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    10c8:	bb 20       	and	r11, r11
    10ca:	31 f0       	breq	.+12     	; 0x10d8 <_ZN5Print10printFloatEdh+0x154>
    n += print('.'); 
    10cc:	6e e2       	ldi	r22, 0x2E	; 46
    10ce:	ce 01       	movw	r24, r28
    10d0:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5Print5printEc>
    10d4:	e8 0e       	add	r14, r24
    10d6:	f9 1e       	adc	r15, r25
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    10d8:	db 2c       	mov	r13, r11
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    10da:	dd 20       	and	r13, r13
    10dc:	29 f1       	breq	.+74     	; 0x1128 <_ZN5Print10printFloatEdh+0x1a4>
  {
    remainder *= 10.0;
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	40 e2       	ldi	r20, 0x20	; 32
    10e4:	51 e4       	ldi	r21, 0x41	; 65
    10e6:	c3 01       	movw	r24, r6
    10e8:	b2 01       	movw	r22, r4
    10ea:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <__mulsf3>
    10ee:	2b 01       	movw	r4, r22
    10f0:	3c 01       	movw	r6, r24
    unsigned int toPrint = (unsigned int)(remainder);
    10f2:	0e 94 94 10 	call	0x2128	; 0x2128 <__fixunssfsi>
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    10f6:	4b 01       	movw	r8, r22
    10f8:	a1 2c       	mov	r10, r1
    10fa:	b1 2c       	mov	r11, r1
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    10fc:	2a e0       	ldi	r18, 0x0A	; 10
    10fe:	b5 01       	movw	r22, r10
    1100:	a4 01       	movw	r20, r8
    1102:	ce 01       	movw	r24, r28
    1104:	0e 94 1d 07 	call	0xe3a	; 0xe3a <_ZN5Print11printNumberEmh>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
    1108:	e8 0e       	add	r14, r24
    110a:	f9 1e       	adc	r15, r25
    remainder -= toPrint; 
    110c:	c5 01       	movw	r24, r10
    110e:	b4 01       	movw	r22, r8
    1110:	0e 94 c3 10 	call	0x2186	; 0x2186 <__floatunsisf>
    1114:	9b 01       	movw	r18, r22
    1116:	ac 01       	movw	r20, r24
    1118:	c3 01       	movw	r24, r6
    111a:	b2 01       	movw	r22, r4
    111c:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__subsf3>
    1120:	2b 01       	movw	r4, r22
    1122:	3c 01       	movw	r6, r24
    1124:	da 94       	dec	r13
    1126:	d9 cf       	rjmp	.-78     	; 0x10da <_ZN5Print10printFloatEdh+0x156>
  } 
  
  return n;
}
    1128:	c7 01       	movw	r24, r14
    112a:	df 91       	pop	r29
    112c:	cf 91       	pop	r28
    112e:	ff 90       	pop	r15
    1130:	ef 90       	pop	r14
    1132:	df 90       	pop	r13
    1134:	cf 90       	pop	r12
    1136:	bf 90       	pop	r11
    1138:	af 90       	pop	r10
    113a:	9f 90       	pop	r9
    113c:	8f 90       	pop	r8
    113e:	7f 90       	pop	r7
    1140:	6f 90       	pop	r6
    1142:	5f 90       	pop	r5
    1144:	4f 90       	pop	r4
    1146:	08 95       	ret

00001148 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1148:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <_ZN5Print10printFloatEdh>

0000114c <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    114c:	1f 92       	push	r1
    114e:	0f 92       	push	r0
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	0f 92       	push	r0
    1154:	11 24       	eor	r1, r1
    1156:	2f 93       	push	r18
    1158:	3f 93       	push	r19
    115a:	8f 93       	push	r24
    115c:	9f 93       	push	r25
    115e:	af 93       	push	r26
    1160:	bf 93       	push	r27
    1162:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <timer0_millis>
    1166:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <timer0_millis+0x1>
    116a:	a0 91 ca 02 	lds	r26, 0x02CA	; 0x8002ca <timer0_millis+0x2>
    116e:	b0 91 cb 02 	lds	r27, 0x02CB	; 0x8002cb <timer0_millis+0x3>
    1172:	30 91 c7 02 	lds	r19, 0x02C7	; 0x8002c7 <timer0_fract>
    1176:	23 e0       	ldi	r18, 0x03	; 3
    1178:	23 0f       	add	r18, r19
    117a:	2d 37       	cpi	r18, 0x7D	; 125
    117c:	20 f4       	brcc	.+8      	; 0x1186 <__vector_16+0x3a>
    117e:	01 96       	adiw	r24, 0x01	; 1
    1180:	a1 1d       	adc	r26, r1
    1182:	b1 1d       	adc	r27, r1
    1184:	05 c0       	rjmp	.+10     	; 0x1190 <__vector_16+0x44>
    1186:	26 e8       	ldi	r18, 0x86	; 134
    1188:	23 0f       	add	r18, r19
    118a:	02 96       	adiw	r24, 0x02	; 2
    118c:	a1 1d       	adc	r26, r1
    118e:	b1 1d       	adc	r27, r1
    1190:	20 93 c7 02 	sts	0x02C7, r18	; 0x8002c7 <timer0_fract>
    1194:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <timer0_millis>
    1198:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <timer0_millis+0x1>
    119c:	a0 93 ca 02 	sts	0x02CA, r26	; 0x8002ca <timer0_millis+0x2>
    11a0:	b0 93 cb 02 	sts	0x02CB, r27	; 0x8002cb <timer0_millis+0x3>
    11a4:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <timer0_overflow_count>
    11a8:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <timer0_overflow_count+0x1>
    11ac:	a0 91 ce 02 	lds	r26, 0x02CE	; 0x8002ce <timer0_overflow_count+0x2>
    11b0:	b0 91 cf 02 	lds	r27, 0x02CF	; 0x8002cf <timer0_overflow_count+0x3>
    11b4:	01 96       	adiw	r24, 0x01	; 1
    11b6:	a1 1d       	adc	r26, r1
    11b8:	b1 1d       	adc	r27, r1
    11ba:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <timer0_overflow_count>
    11be:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <timer0_overflow_count+0x1>
    11c2:	a0 93 ce 02 	sts	0x02CE, r26	; 0x8002ce <timer0_overflow_count+0x2>
    11c6:	b0 93 cf 02 	sts	0x02CF, r27	; 0x8002cf <timer0_overflow_count+0x3>
    11ca:	bf 91       	pop	r27
    11cc:	af 91       	pop	r26
    11ce:	9f 91       	pop	r25
    11d0:	8f 91       	pop	r24
    11d2:	3f 91       	pop	r19
    11d4:	2f 91       	pop	r18
    11d6:	0f 90       	pop	r0
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	0f 90       	pop	r0
    11dc:	1f 90       	pop	r1
    11de:	18 95       	reti

000011e0 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    11e0:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    11e2:	f8 94       	cli
	m = timer0_overflow_count;
    11e4:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <timer0_overflow_count>
    11e8:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <timer0_overflow_count+0x1>
    11ec:	a0 91 ce 02 	lds	r26, 0x02CE	; 0x8002ce <timer0_overflow_count+0x2>
    11f0:	b0 91 cf 02 	lds	r27, 0x02CF	; 0x8002cf <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    11f4:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    11f6:	a8 9b       	sbis	0x15, 0	; 21
    11f8:	05 c0       	rjmp	.+10     	; 0x1204 <micros+0x24>
    11fa:	2f 3f       	cpi	r18, 0xFF	; 255
    11fc:	19 f0       	breq	.+6      	; 0x1204 <micros+0x24>
		m++;
    11fe:	01 96       	adiw	r24, 0x01	; 1
    1200:	a1 1d       	adc	r26, r1
    1202:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1204:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1206:	ba 2f       	mov	r27, r26
    1208:	a9 2f       	mov	r26, r25
    120a:	98 2f       	mov	r25, r24
    120c:	88 27       	eor	r24, r24
    120e:	82 0f       	add	r24, r18
    1210:	91 1d       	adc	r25, r1
    1212:	a1 1d       	adc	r26, r1
    1214:	b1 1d       	adc	r27, r1
    1216:	bc 01       	movw	r22, r24
    1218:	cd 01       	movw	r24, r26
    121a:	42 e0       	ldi	r20, 0x02	; 2
    121c:	66 0f       	add	r22, r22
    121e:	77 1f       	adc	r23, r23
    1220:	88 1f       	adc	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	4a 95       	dec	r20
    1226:	d1 f7       	brne	.-12     	; 0x121c <micros+0x3c>
}
    1228:	08 95       	ret

0000122a <delay>:

void delay(unsigned long ms)
{
    122a:	8f 92       	push	r8
    122c:	9f 92       	push	r9
    122e:	af 92       	push	r10
    1230:	bf 92       	push	r11
    1232:	cf 92       	push	r12
    1234:	df 92       	push	r13
    1236:	ef 92       	push	r14
    1238:	ff 92       	push	r15
    123a:	6b 01       	movw	r12, r22
    123c:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    123e:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <micros>
    1242:	4b 01       	movw	r8, r22
    1244:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1246:	c1 14       	cp	r12, r1
    1248:	d1 04       	cpc	r13, r1
    124a:	e1 04       	cpc	r14, r1
    124c:	f1 04       	cpc	r15, r1
    124e:	01 f1       	breq	.+64     	; 0x1290 <delay+0x66>
		yield();
    1250:	0e 94 2e 0a 	call	0x145c	; 0x145c <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1254:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <micros>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	88 19       	sub	r24, r8
    125e:	99 09       	sbc	r25, r9
    1260:	aa 09       	sbc	r26, r10
    1262:	bb 09       	sbc	r27, r11
    1264:	88 3e       	cpi	r24, 0xE8	; 232
    1266:	93 40       	sbci	r25, 0x03	; 3
    1268:	a1 05       	cpc	r26, r1
    126a:	b1 05       	cpc	r27, r1
    126c:	60 f3       	brcs	.-40     	; 0x1246 <delay+0x1c>
			ms--;
    126e:	21 e0       	ldi	r18, 0x01	; 1
    1270:	c2 1a       	sub	r12, r18
    1272:	d1 08       	sbc	r13, r1
    1274:	e1 08       	sbc	r14, r1
    1276:	f1 08       	sbc	r15, r1
			start += 1000;
    1278:	88 ee       	ldi	r24, 0xE8	; 232
    127a:	88 0e       	add	r8, r24
    127c:	83 e0       	ldi	r24, 0x03	; 3
    127e:	98 1e       	adc	r9, r24
    1280:	a1 1c       	adc	r10, r1
    1282:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1284:	c1 14       	cp	r12, r1
    1286:	d1 04       	cpc	r13, r1
    1288:	e1 04       	cpc	r14, r1
    128a:	f1 04       	cpc	r15, r1
    128c:	19 f7       	brne	.-58     	; 0x1254 <delay+0x2a>
    128e:	db cf       	rjmp	.-74     	; 0x1246 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    1290:	ff 90       	pop	r15
    1292:	ef 90       	pop	r14
    1294:	df 90       	pop	r13
    1296:	cf 90       	pop	r12
    1298:	bf 90       	pop	r11
    129a:	af 90       	pop	r10
    129c:	9f 90       	pop	r9
    129e:	8f 90       	pop	r8
    12a0:	08 95       	ret

000012a2 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    12a2:	82 30       	cpi	r24, 0x02	; 2
    12a4:	91 05       	cpc	r25, r1
    12a6:	38 f0       	brcs	.+14     	; 0x12b6 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    12b0:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	f1 f7       	brne	.-4      	; 0x12b2 <delayMicroseconds+0x10>
    12b6:	08 95       	ret

000012b8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    12b8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    12ba:	84 b5       	in	r24, 0x24	; 36
    12bc:	82 60       	ori	r24, 0x02	; 2
    12be:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    12c0:	84 b5       	in	r24, 0x24	; 36
    12c2:	81 60       	ori	r24, 0x01	; 1
    12c4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    12c6:	85 b5       	in	r24, 0x25	; 37
    12c8:	82 60       	ori	r24, 0x02	; 2
    12ca:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    12cc:	85 b5       	in	r24, 0x25	; 37
    12ce:	81 60       	ori	r24, 0x01	; 1
    12d0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    12d2:	ee e6       	ldi	r30, 0x6E	; 110
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	81 60       	ori	r24, 0x01	; 1
    12da:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    12dc:	e1 e8       	ldi	r30, 0x81	; 129
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    12e2:	80 81       	ld	r24, Z
    12e4:	82 60       	ori	r24, 0x02	; 2
    12e6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    12e8:	80 81       	ld	r24, Z
    12ea:	81 60       	ori	r24, 0x01	; 1
    12ec:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    12ee:	e0 e8       	ldi	r30, 0x80	; 128
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	81 60       	ori	r24, 0x01	; 1
    12f6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    12f8:	e1 eb       	ldi	r30, 0xB1	; 177
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	84 60       	ori	r24, 0x04	; 4
    1300:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1302:	e0 eb       	ldi	r30, 0xB0	; 176
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	81 60       	ori	r24, 0x01	; 1
    130a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    130c:	ea e7       	ldi	r30, 0x7A	; 122
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	84 60       	ori	r24, 0x04	; 4
    1314:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1316:	80 81       	ld	r24, Z
    1318:	82 60       	ori	r24, 0x02	; 2
    131a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    131c:	80 81       	ld	r24, Z
    131e:	81 60       	ori	r24, 0x01	; 1
    1320:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1322:	80 81       	ld	r24, Z
    1324:	80 68       	ori	r24, 0x80	; 128
    1326:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1328:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    132c:	08 95       	ret

0000132e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    132e:	83 30       	cpi	r24, 0x03	; 3
    1330:	81 f0       	breq	.+32     	; 0x1352 <turnOffPWM+0x24>
    1332:	28 f4       	brcc	.+10     	; 0x133e <turnOffPWM+0x10>
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	99 f0       	breq	.+38     	; 0x135e <turnOffPWM+0x30>
    1338:	82 30       	cpi	r24, 0x02	; 2
    133a:	a1 f0       	breq	.+40     	; 0x1364 <turnOffPWM+0x36>
    133c:	08 95       	ret
    133e:	87 30       	cpi	r24, 0x07	; 7
    1340:	a9 f0       	breq	.+42     	; 0x136c <turnOffPWM+0x3e>
    1342:	88 30       	cpi	r24, 0x08	; 8
    1344:	b9 f0       	breq	.+46     	; 0x1374 <turnOffPWM+0x46>
    1346:	84 30       	cpi	r24, 0x04	; 4
    1348:	d1 f4       	brne	.+52     	; 0x137e <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    134a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    134e:	8f 7d       	andi	r24, 0xDF	; 223
    1350:	03 c0       	rjmp	.+6      	; 0x1358 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1352:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1356:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1358:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    135c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    135e:	84 b5       	in	r24, 0x24	; 36
    1360:	8f 77       	andi	r24, 0x7F	; 127
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1364:	84 b5       	in	r24, 0x24	; 36
    1366:	8f 7d       	andi	r24, 0xDF	; 223
    1368:	84 bd       	out	0x24, r24	; 36
    136a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    136c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1370:	8f 77       	andi	r24, 0x7F	; 127
    1372:	03 c0       	rjmp	.+6      	; 0x137a <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1374:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1378:	8f 7d       	andi	r24, 0xDF	; 223
    137a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    137e:	08 95       	ret

00001380 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	fc 01       	movw	r30, r24
    1388:	e4 58       	subi	r30, 0x84	; 132
    138a:	fe 4f       	sbci	r31, 0xFE	; 254
    138c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    138e:	fc 01       	movw	r30, r24
    1390:	e0 57       	subi	r30, 0x70	; 112
    1392:	fe 4f       	sbci	r31, 0xFE	; 254
    1394:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1396:	88 23       	and	r24, r24
    1398:	61 f1       	breq	.+88     	; 0x13f2 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	fc 01       	movw	r30, r24
    13a2:	e8 54       	subi	r30, 0x48	; 72
    13a4:	fe 4f       	sbci	r31, 0xFE	; 254
    13a6:	c5 91       	lpm	r28, Z+
    13a8:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    13aa:	fc 01       	movw	r30, r24
    13ac:	e2 55       	subi	r30, 0x52	; 82
    13ae:	fe 4f       	sbci	r31, 0xFE	; 254
    13b0:	a5 91       	lpm	r26, Z+
    13b2:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    13b4:	61 11       	cpse	r22, r1
    13b6:	09 c0       	rjmp	.+18     	; 0x13ca <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    13b8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    13ba:	f8 94       	cli
		*reg &= ~bit;
    13bc:	88 81       	ld	r24, Y
    13be:	20 95       	com	r18
    13c0:	82 23       	and	r24, r18
    13c2:	88 83       	st	Y, r24
		*out &= ~bit;
    13c4:	ec 91       	ld	r30, X
    13c6:	2e 23       	and	r18, r30
    13c8:	0b c0       	rjmp	.+22     	; 0x13e0 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    13ca:	62 30       	cpi	r22, 0x02	; 2
    13cc:	61 f4       	brne	.+24     	; 0x13e6 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    13ce:	9f b7       	in	r25, 0x3f	; 63
                cli();
    13d0:	f8 94       	cli
		*reg &= ~bit;
    13d2:	38 81       	ld	r19, Y
    13d4:	82 2f       	mov	r24, r18
    13d6:	80 95       	com	r24
    13d8:	83 23       	and	r24, r19
    13da:	88 83       	st	Y, r24
		*out |= bit;
    13dc:	ec 91       	ld	r30, X
    13de:	2e 2b       	or	r18, r30
    13e0:	2c 93       	st	X, r18
		SREG = oldSREG;
    13e2:	9f bf       	out	0x3f, r25	; 63
    13e4:	06 c0       	rjmp	.+12     	; 0x13f2 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    13e6:	8f b7       	in	r24, 0x3f	; 63
                cli();
    13e8:	f8 94       	cli
		*reg |= bit;
    13ea:	e8 81       	ld	r30, Y
    13ec:	2e 2b       	or	r18, r30
    13ee:	28 83       	st	Y, r18
		SREG = oldSREG;
    13f0:	8f bf       	out	0x3f, r24	; 63
	}
}
    13f2:	df 91       	pop	r29
    13f4:	cf 91       	pop	r28
    13f6:	08 95       	ret

000013f8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    13f8:	1f 93       	push	r17
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	f9 01       	movw	r30, r18
    1404:	e8 59       	subi	r30, 0x98	; 152
    1406:	fe 4f       	sbci	r31, 0xFE	; 254
    1408:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    140a:	f9 01       	movw	r30, r18
    140c:	e4 58       	subi	r30, 0x84	; 132
    140e:	fe 4f       	sbci	r31, 0xFE	; 254
    1410:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1412:	f9 01       	movw	r30, r18
    1414:	e0 57       	subi	r30, 0x70	; 112
    1416:	fe 4f       	sbci	r31, 0xFE	; 254
    1418:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    141a:	cc 23       	and	r28, r28
    141c:	c9 f0       	breq	.+50     	; 0x1450 <digitalWrite+0x58>
    141e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1420:	81 11       	cpse	r24, r1
    1422:	0e 94 97 09 	call	0x132e	; 0x132e <turnOffPWM>

	out = portOutputRegister(port);
    1426:	ec 2f       	mov	r30, r28
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	ee 0f       	add	r30, r30
    142c:	ff 1f       	adc	r31, r31
    142e:	e2 55       	subi	r30, 0x52	; 82
    1430:	fe 4f       	sbci	r31, 0xFE	; 254
    1432:	a5 91       	lpm	r26, Z+
    1434:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1436:	8f b7       	in	r24, 0x3f	; 63
	cli();
    1438:	f8 94       	cli

	if (val == LOW) {
    143a:	11 11       	cpse	r17, r1
    143c:	05 c0       	rjmp	.+10     	; 0x1448 <digitalWrite+0x50>
		*out &= ~bit;
    143e:	9c 91       	ld	r25, X
    1440:	ed 2f       	mov	r30, r29
    1442:	e0 95       	com	r30
    1444:	e9 23       	and	r30, r25
    1446:	02 c0       	rjmp	.+4      	; 0x144c <digitalWrite+0x54>
	} else {
		*out |= bit;
    1448:	ec 91       	ld	r30, X
    144a:	ed 2b       	or	r30, r29
    144c:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    144e:	8f bf       	out	0x3f, r24	; 63
}
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	1f 91       	pop	r17
    1456:	08 95       	ret

00001458 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    1458:	0e 94 14 12 	call	0x2428	; 0x2428 <abort>

0000145c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    145c:	08 95       	ret

0000145e <_ZN5I2CIOC1Ev>:
      // Remove the values which are not inputs and get the value of the pin
      pinVal = this->read() & _dirMask;
      pinVal = ( pinVal >> pin ) & 0x01; // Get the pin value
   }
   return (pinVal);
}
    145e:	fc 01       	movw	r30, r24
    1460:	12 82       	std	Z+2, r1	; 0x02
    1462:	8f ef       	ldi	r24, 0xFF	; 255
    1464:	81 83       	std	Z+1, r24	; 0x01
    1466:	10 82       	st	Z, r1
    1468:	13 82       	std	Z+3, r1	; 0x03
    146a:	08 95       	ret

0000146c <_ZN5I2CIO8portModeEh>:
    146c:	fc 01       	movw	r30, r24
    146e:	83 81       	ldd	r24, Z+3	; 0x03
    1470:	88 23       	and	r24, r24
    1472:	31 f0       	breq	.+12     	; 0x1480 <_ZN5I2CIO8portModeEh+0x14>
    1474:	61 11       	cpse	r22, r1
    1476:	03 c0       	rjmp	.+6      	; 0x147e <_ZN5I2CIO8portModeEh+0x12>
    1478:	8f ef       	ldi	r24, 0xFF	; 255
    147a:	81 83       	std	Z+1, r24	; 0x01
    147c:	08 95       	ret
    147e:	11 82       	std	Z+1, r1	; 0x01
    1480:	08 95       	ret

00001482 <_ZN5I2CIO11isAvailableEh>:
    1482:	80 ed       	ldi	r24, 0xD0	; 208
    1484:	92 e0       	ldi	r25, 0x02	; 2
    1486:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <_ZN7TwoWire17beginTransmissionEh>
    148a:	80 ed       	ldi	r24, 0xD0	; 208
    148c:	92 e0       	ldi	r25, 0x02	; 2
    148e:	0e 94 05 0c 	call	0x180a	; 0x180a <_ZN7TwoWire15endTransmissionEv>
    1492:	91 e0       	ldi	r25, 0x01	; 1
    1494:	81 11       	cpse	r24, r1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	89 2f       	mov	r24, r25
    149a:	08 95       	ret

0000149c <_ZN5I2CIO5beginEh>:
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	ec 01       	movw	r28, r24
    14a2:	6a 83       	std	Y+2, r22	; 0x02
    14a4:	80 ed       	ldi	r24, 0xD0	; 208
    14a6:	92 e0       	ldi	r25, 0x02	; 2
    14a8:	0e 94 de 0b 	call	0x17bc	; 0x17bc <_ZN7TwoWire5beginEv>
    14ac:	6a 81       	ldd	r22, Y+2	; 0x02
    14ae:	ce 01       	movw	r24, r28
    14b0:	0e 94 41 0a 	call	0x1482	; 0x1482 <_ZN5I2CIO11isAvailableEh>
    14b4:	8b 83       	std	Y+3, r24	; 0x03
    14b6:	88 23       	and	r24, r24
    14b8:	29 f0       	breq	.+10     	; 0x14c4 <_ZN5I2CIO5beginEh+0x28>
    14ba:	80 ed       	ldi	r24, 0xD0	; 208
    14bc:	92 e0       	ldi	r25, 0x02	; 2
    14be:	0e 94 4b 0b 	call	0x1696	; 0x1696 <_ZN7TwoWire4readEv>
    14c2:	88 83       	st	Y, r24
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	08 95       	ret

000014ce <_ZN5I2CIO5writeEh>:
}

//
// write
int I2CIO::write ( uint8_t value )
{
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
   int status = 0;
   
   if ( _initialised )
    14d2:	fc 01       	movw	r30, r24
    14d4:	23 81       	ldd	r18, Z+3	; 0x03
    14d6:	22 23       	and	r18, r18
    14d8:	b1 f0       	breq	.+44     	; 0x1506 <_ZN5I2CIO5writeEh+0x38>
    14da:	ec 01       	movw	r28, r24
   {
      // Only write HIGH the values of the ports that have been initialised as
      // outputs updating the output shadow of the device
      _shadow = ( value & ~(_dirMask) );
    14dc:	81 81       	ldd	r24, Z+1	; 0x01
    14de:	80 95       	com	r24
    14e0:	68 23       	and	r22, r24
    14e2:	60 83       	st	Z, r22
   
      Wire.beginTransmission ( _i2cAddr );
    14e4:	62 81       	ldd	r22, Z+2	; 0x02
    14e6:	80 ed       	ldi	r24, 0xD0	; 208
    14e8:	92 e0       	ldi	r25, 0x02	; 2
    14ea:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <_ZN7TwoWire17beginTransmissionEh>
#if (ARDUINO <  100)
      Wire.send ( _shadow );
#else
      Wire.write ( _shadow );
    14ee:	68 81       	ld	r22, Y
    14f0:	80 ed       	ldi	r24, 0xD0	; 208
    14f2:	92 e0       	ldi	r25, 0x02	; 2
    14f4:	0e 94 9f 0b 	call	0x173e	; 0x173e <_ZN7TwoWire5writeEh>
#endif  
      status = Wire.endTransmission ();
    14f8:	80 ed       	ldi	r24, 0xD0	; 208
    14fa:	92 e0       	ldi	r25, 0x02	; 2
    14fc:	0e 94 05 0c 	call	0x180a	; 0x180a <_ZN7TwoWire15endTransmissionEv>
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	02 c0       	rjmp	.+4      	; 0x150a <_ZN5I2CIO5writeEh+0x3c>

//
// write
int I2CIO::write ( uint8_t value )
{
   int status = 0;
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
#else
      Wire.write ( _shadow );
#endif  
      status = Wire.endTransmission ();
   }
   return ( (status == 0) );
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	23 2b       	or	r18, r19
    1510:	11 f0       	breq	.+4      	; 0x1516 <_ZN5I2CIO5writeEh+0x48>
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	90 e0       	ldi	r25, 0x00	; 0
}
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	08 95       	ret

0000151c <_ZN3LCD15setBacklightPinEh13t_backlighPol>:
//
// Switch fully on the LCD (backlight and LCD)
void LCD::on ( void )
{
   display();
   backlight();
    151c:	08 95       	ret

0000151e <_ZN3LCD12setBacklightEh>:
    151e:	08 95       	ret

00001520 <_ZN3LCD5writeEh>:
    1520:	dc 01       	movw	r26, r24
    1522:	ed 91       	ld	r30, X+
    1524:	fc 91       	ld	r31, X
    1526:	02 84       	ldd	r0, Z+10	; 0x0a
    1528:	f3 85       	ldd	r31, Z+11	; 0x0b
    152a:	e0 2d       	mov	r30, r0
    152c:	41 e0       	ldi	r20, 0x01	; 1
    152e:	09 95       	icall
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	08 95       	ret

00001536 <_ZN3LCDC1Ev>:
    1536:	fc 01       	movw	r30, r24
    1538:	13 82       	std	Z+3, r1	; 0x03
    153a:	12 82       	std	Z+2, r1	; 0x02
    153c:	26 e7       	ldi	r18, 0x76	; 118
    153e:	31 e0       	ldi	r19, 0x01	; 1
    1540:	31 83       	std	Z+1, r19	; 0x01
    1542:	20 83       	st	Z, r18
    1544:	08 95       	ret

00001546 <_ZN3LCD9backlightEv>:
    1546:	dc 01       	movw	r26, r24
    1548:	ed 91       	ld	r30, X+
    154a:	fc 91       	ld	r31, X
    154c:	00 84       	ldd	r0, Z+8	; 0x08
    154e:	f1 85       	ldd	r31, Z+9	; 0x09
    1550:	e0 2d       	mov	r30, r0
    1552:	6f ef       	ldi	r22, 0xFF	; 255
    1554:	09 94       	ijmp

00001556 <_ZN3LCD7commandEh>:
    1556:	dc 01       	movw	r26, r24
    1558:	ed 91       	ld	r30, X+
    155a:	fc 91       	ld	r31, X
    155c:	02 84       	ldd	r0, Z+10	; 0x0a
    155e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1560:	e0 2d       	mov	r30, r0
    1562:	40 e0       	ldi	r20, 0x00	; 0
    1564:	09 94       	ijmp

00001566 <_ZN3LCD5clearEv>:
    1566:	61 e0       	ldi	r22, 0x01	; 1
    1568:	0e 94 ab 0a 	call	0x1556	; 0x1556 <_ZN3LCD7commandEh>
    156c:	80 ed       	ldi	r24, 0xD0	; 208
    156e:	97 e0       	ldi	r25, 0x07	; 7
    1570:	0c 94 51 09 	jmp	0x12a2	; 0x12a2 <delayMicroseconds>

00001574 <_ZN3LCD7displayEv>:
    1574:	fc 01       	movw	r30, r24
    1576:	65 81       	ldd	r22, Z+5	; 0x05
    1578:	26 2f       	mov	r18, r22
    157a:	24 60       	ori	r18, 0x04	; 4
    157c:	25 83       	std	Z+5, r18	; 0x05
    157e:	6c 60       	ori	r22, 0x0C	; 12
    1580:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <_ZN3LCD7commandEh>

00001584 <_ZN3LCD5beginEhhh>:
// can't assume that its in that state when a application starts (and the
// LiquidCrystal constructor is called).
// A call to begin() will reinitialize the LCD.
//
void LCD::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	ec 01       	movw	r28, r24
   if (lines > 1) 
    158a:	42 30       	cpi	r20, 0x02	; 2
    158c:	18 f0       	brcs	.+6      	; 0x1594 <_ZN3LCD5beginEhhh+0x10>
   {
      _displayfunction |= LCD_2LINE;
    158e:	8c 81       	ldd	r24, Y+4	; 0x04
    1590:	88 60       	ori	r24, 0x08	; 8
    1592:	8c 83       	std	Y+4, r24	; 0x04
   }
   _numlines = lines;
    1594:	4f 83       	std	Y+7, r20	; 0x07
   _cols = cols;
    1596:	68 87       	std	Y+8, r22	; 0x08
   
   // for some 1 line displays you can select a 10 pixel high font
   // ------------------------------------------------------------
   if ((dotsize != LCD_5x8DOTS) && (lines == 1)) 
    1598:	22 23       	and	r18, r18
    159a:	29 f0       	breq	.+10     	; 0x15a6 <_ZN3LCD5beginEhhh+0x22>
    159c:	41 30       	cpi	r20, 0x01	; 1
    159e:	19 f4       	brne	.+6      	; 0x15a6 <_ZN3LCD5beginEhhh+0x22>
   {
      _displayfunction |= LCD_5x10DOTS;
    15a0:	8c 81       	ldd	r24, Y+4	; 0x04
    15a2:	84 60       	ori	r24, 0x04	; 4
    15a4:	8c 83       	std	Y+4, r24	; 0x04
   // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
   // according to datasheet, we need at least 40ms after power rises above 2.7V
   // before sending commands. Arduino can turn on way before 4.5V so we'll wait 
   // 50
   // ---------------------------------------------------------------------------
   delay (100); // 100ms delay
    15a6:	64 e6       	ldi	r22, 0x64	; 100
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	0e 94 15 09 	call	0x122a	; 0x122a <delay>
   
   //put the LCD into 4 bit or 8 bit mode
   // -------------------------------------
   if (! (_displayfunction & LCD_8BITMODE)) 
    15b2:	6c 81       	ldd	r22, Y+4	; 0x04
    15b4:	64 fd       	sbrc	r22, 4
    15b6:	31 c0       	rjmp	.+98     	; 0x161a <_ZN3LCD5beginEhhh+0x96>
      // this is according to the hitachi HD44780 datasheet
      // figure 24, pg 46
      
      // we start in 8bit mode, try to set 4 bit mode
      // Special case of "Function Set"
      send(0x03, FOUR_BITS);
    15b8:	e8 81       	ld	r30, Y
    15ba:	f9 81       	ldd	r31, Y+1	; 0x01
    15bc:	02 84       	ldd	r0, Z+10	; 0x0a
    15be:	f3 85       	ldd	r31, Z+11	; 0x0b
    15c0:	e0 2d       	mov	r30, r0
    15c2:	42 e0       	ldi	r20, 0x02	; 2
    15c4:	63 e0       	ldi	r22, 0x03	; 3
    15c6:	ce 01       	movw	r24, r28
    15c8:	09 95       	icall
      delayMicroseconds(4500); // wait min 4.1ms
    15ca:	84 e9       	ldi	r24, 0x94	; 148
    15cc:	91 e1       	ldi	r25, 0x11	; 17
    15ce:	0e 94 51 09 	call	0x12a2	; 0x12a2 <delayMicroseconds>
      
      // second try
      send ( 0x03, FOUR_BITS );
    15d2:	e8 81       	ld	r30, Y
    15d4:	f9 81       	ldd	r31, Y+1	; 0x01
    15d6:	02 84       	ldd	r0, Z+10	; 0x0a
    15d8:	f3 85       	ldd	r31, Z+11	; 0x0b
    15da:	e0 2d       	mov	r30, r0
    15dc:	42 e0       	ldi	r20, 0x02	; 2
    15de:	63 e0       	ldi	r22, 0x03	; 3
    15e0:	ce 01       	movw	r24, r28
    15e2:	09 95       	icall
      delayMicroseconds(150); // wait min 100us
    15e4:	86 e9       	ldi	r24, 0x96	; 150
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <delayMicroseconds>
      
      // third go!
      send( 0x03, FOUR_BITS );
    15ec:	e8 81       	ld	r30, Y
    15ee:	f9 81       	ldd	r31, Y+1	; 0x01
    15f0:	02 84       	ldd	r0, Z+10	; 0x0a
    15f2:	f3 85       	ldd	r31, Z+11	; 0x0b
    15f4:	e0 2d       	mov	r30, r0
    15f6:	42 e0       	ldi	r20, 0x02	; 2
    15f8:	63 e0       	ldi	r22, 0x03	; 3
    15fa:	ce 01       	movw	r24, r28
    15fc:	09 95       	icall
      delayMicroseconds(150); // wait min of 100us
    15fe:	86 e9       	ldi	r24, 0x96	; 150
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	0e 94 51 09 	call	0x12a2	; 0x12a2 <delayMicroseconds>
      
      // finally, set to 4-bit interface
      send ( 0x02, FOUR_BITS );
    1606:	e8 81       	ld	r30, Y
    1608:	f9 81       	ldd	r31, Y+1	; 0x01
    160a:	02 84       	ldd	r0, Z+10	; 0x0a
    160c:	f3 85       	ldd	r31, Z+11	; 0x0b
    160e:	e0 2d       	mov	r30, r0
    1610:	42 e0       	ldi	r20, 0x02	; 2
    1612:	62 e0       	ldi	r22, 0x02	; 2
    1614:	ce 01       	movw	r24, r28
    1616:	09 95       	icall
    1618:	16 c0       	rjmp	.+44     	; 0x1646 <_ZN3LCD5beginEhhh+0xc2>
   {
      // this is according to the hitachi HD44780 datasheet
      // page 45 figure 23
      
      // Send function set command sequence
      command(LCD_FUNCTIONSET | _displayfunction);
    161a:	60 62       	ori	r22, 0x20	; 32
    161c:	ce 01       	movw	r24, r28
    161e:	0e 94 ab 0a 	call	0x1556	; 0x1556 <_ZN3LCD7commandEh>
      delayMicroseconds(4500);  // wait more than 4.1ms
    1622:	84 e9       	ldi	r24, 0x94	; 148
    1624:	91 e1       	ldi	r25, 0x11	; 17
    1626:	0e 94 51 09 	call	0x12a2	; 0x12a2 <delayMicroseconds>
      
      // second try
      command(LCD_FUNCTIONSET | _displayfunction);
    162a:	6c 81       	ldd	r22, Y+4	; 0x04
    162c:	60 62       	ori	r22, 0x20	; 32
    162e:	ce 01       	movw	r24, r28
    1630:	0e 94 ab 0a 	call	0x1556	; 0x1556 <_ZN3LCD7commandEh>
      delayMicroseconds(150);
    1634:	86 e9       	ldi	r24, 0x96	; 150
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	0e 94 51 09 	call	0x12a2	; 0x12a2 <delayMicroseconds>
      
      // third go
      command(LCD_FUNCTIONSET | _displayfunction);
    163c:	6c 81       	ldd	r22, Y+4	; 0x04
    163e:	60 62       	ori	r22, 0x20	; 32
    1640:	ce 01       	movw	r24, r28
    1642:	0e 94 ab 0a 	call	0x1556	; 0x1556 <_ZN3LCD7commandEh>
      delayMicroseconds(150);
    1646:	86 e9       	ldi	r24, 0x96	; 150
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <delayMicroseconds>

   }
   
   // finally, set # lines, font size, etc.
   command(LCD_FUNCTIONSET | _displayfunction);
    164e:	6c 81       	ldd	r22, Y+4	; 0x04
    1650:	60 62       	ori	r22, 0x20	; 32
    1652:	ce 01       	movw	r24, r28
    1654:	0e 94 ab 0a 	call	0x1556	; 0x1556 <_ZN3LCD7commandEh>
   delayMicroseconds ( 60 );  // wait more
    1658:	8c e3       	ldi	r24, 0x3C	; 60
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <delayMicroseconds>
   
   // turn the display on with no cursor or blinking default
   _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
    1660:	84 e0       	ldi	r24, 0x04	; 4
    1662:	8d 83       	std	Y+5, r24	; 0x05
   display();
    1664:	ce 01       	movw	r24, r28
    1666:	0e 94 ba 0a 	call	0x1574	; 0x1574 <_ZN3LCD7displayEv>
   
   // clear the LCD
   clear();
    166a:	ce 01       	movw	r24, r28
    166c:	0e 94 b3 0a 	call	0x1566	; 0x1566 <_ZN3LCD5clearEv>
   
   // Initialize to default text direction (for romance languages)
   _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    1670:	82 e0       	ldi	r24, 0x02	; 2
    1672:	8e 83       	std	Y+6, r24	; 0x06
   // set the entry mode
   command(LCD_ENTRYMODESET | _displaymode);
    1674:	66 e0       	ldi	r22, 0x06	; 6
    1676:	ce 01       	movw	r24, r28
    1678:	0e 94 ab 0a 	call	0x1556	; 0x1556 <_ZN3LCD7commandEh>

   backlight();
    167c:	ce 01       	movw	r24, r28

}
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
   // Initialize to default text direction (for romance languages)
   _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
   // set the entry mode
   command(LCD_ENTRYMODESET | _displaymode);

   backlight();
    1682:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <_ZN3LCD9backlightEv>

00001686 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1686:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <_ZN7TwoWire14rxBufferLengthE>
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	20 91 01 03 	lds	r18, 0x0301	; 0x800301 <_ZN7TwoWire13rxBufferIndexE>
    1690:	82 1b       	sub	r24, r18
    1692:	91 09       	sbc	r25, r1
    1694:	08 95       	ret

00001696 <_ZN7TwoWire4readEv>:
    1696:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <_ZN7TwoWire13rxBufferIndexE>
    169a:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <_ZN7TwoWire14rxBufferLengthE>
    169e:	98 17       	cp	r25, r24
    16a0:	50 f4       	brcc	.+20     	; 0x16b6 <_ZN7TwoWire4readEv+0x20>
    16a2:	e9 2f       	mov	r30, r25
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	ee 5f       	subi	r30, 0xFE	; 254
    16a8:	fc 4f       	sbci	r31, 0xFC	; 252
    16aa:	20 81       	ld	r18, Z
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	9f 5f       	subi	r25, 0xFF	; 255
    16b0:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <_ZN7TwoWire13rxBufferIndexE>
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <_ZN7TwoWire4readEv+0x24>
    16b6:	2f ef       	ldi	r18, 0xFF	; 255
    16b8:	3f ef       	ldi	r19, 0xFF	; 255
    16ba:	c9 01       	movw	r24, r18
    16bc:	08 95       	ret

000016be <_ZN7TwoWire4peekEv>:
    16be:	e0 91 01 03 	lds	r30, 0x0301	; 0x800301 <_ZN7TwoWire13rxBufferIndexE>
    16c2:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <_ZN7TwoWire14rxBufferLengthE>
    16c6:	e8 17       	cp	r30, r24
    16c8:	30 f4       	brcc	.+12     	; 0x16d6 <_ZN7TwoWire4peekEv+0x18>
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	ee 5f       	subi	r30, 0xFE	; 254
    16ce:	fc 4f       	sbci	r31, 0xFC	; 252
    16d0:	80 81       	ld	r24, Z
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	08 95       	ret
    16d6:	8f ef       	ldi	r24, 0xFF	; 255
    16d8:	9f ef       	ldi	r25, 0xFF	; 255
    16da:	08 95       	ret

000016dc <_ZN7TwoWire5flushEv>:
    16dc:	08 95       	ret

000016de <_ZN7TwoWire5writeEPKhj>:
    16de:	cf 92       	push	r12
    16e0:	df 92       	push	r13
    16e2:	ef 92       	push	r14
    16e4:	ff 92       	push	r15
    16e6:	0f 93       	push	r16
    16e8:	1f 93       	push	r17
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	7c 01       	movw	r14, r24
    16f0:	26 2f       	mov	r18, r22
    16f2:	97 2f       	mov	r25, r23
    16f4:	8a 01       	movw	r16, r20
    16f6:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <_ZN7TwoWire12transmittingE>
    16fa:	88 23       	and	r24, r24
    16fc:	91 f0       	breq	.+36     	; 0x1722 <_ZN7TwoWire5writeEPKhj+0x44>
    16fe:	c6 2f       	mov	r28, r22
    1700:	d7 2f       	mov	r29, r23
    1702:	6e 01       	movw	r12, r28
    1704:	c4 0e       	add	r12, r20
    1706:	d5 1e       	adc	r13, r21
    1708:	cc 15       	cp	r28, r12
    170a:	dd 05       	cpc	r29, r13
    170c:	71 f0       	breq	.+28     	; 0x172a <_ZN7TwoWire5writeEPKhj+0x4c>
    170e:	69 91       	ld	r22, Y+
    1710:	d7 01       	movw	r26, r14
    1712:	ed 91       	ld	r30, X+
    1714:	fc 91       	ld	r31, X
    1716:	01 90       	ld	r0, Z+
    1718:	f0 81       	ld	r31, Z
    171a:	e0 2d       	mov	r30, r0
    171c:	c7 01       	movw	r24, r14
    171e:	09 95       	icall
    1720:	f3 cf       	rjmp	.-26     	; 0x1708 <_ZN7TwoWire5writeEPKhj+0x2a>
    1722:	64 2f       	mov	r22, r20
    1724:	82 2f       	mov	r24, r18
    1726:	0e 94 80 0c 	call	0x1900	; 0x1900 <twi_transmit>
    172a:	c8 01       	movw	r24, r16
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	1f 91       	pop	r17
    1732:	0f 91       	pop	r16
    1734:	ff 90       	pop	r15
    1736:	ef 90       	pop	r14
    1738:	df 90       	pop	r13
    173a:	cf 90       	pop	r12
    173c:	08 95       	ret

0000173e <_ZN7TwoWire5writeEh>:
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	1f 92       	push	r1
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	69 83       	std	Y+1, r22	; 0x01
    174a:	20 91 dc 02 	lds	r18, 0x02DC	; 0x8002dc <_ZN7TwoWire12transmittingE>
    174e:	22 23       	and	r18, r18
    1750:	d1 f0       	breq	.+52     	; 0x1786 <_ZN7TwoWire5writeEh+0x48>
    1752:	20 91 dd 02 	lds	r18, 0x02DD	; 0x8002dd <_ZN7TwoWire14txBufferLengthE>
    1756:	20 32       	cpi	r18, 0x20	; 32
    1758:	40 f0       	brcs	.+16     	; 0x176a <_ZN7TwoWire5writeEh+0x2c>
    175a:	21 e0       	ldi	r18, 0x01	; 1
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	fc 01       	movw	r30, r24
    1760:	33 83       	std	Z+3, r19	; 0x03
    1762:	22 83       	std	Z+2, r18	; 0x02
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	15 c0       	rjmp	.+42     	; 0x1794 <_ZN7TwoWire5writeEh+0x56>
    176a:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <_ZN7TwoWire13txBufferIndexE>
    176e:	e8 2f       	mov	r30, r24
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	e1 52       	subi	r30, 0x21	; 33
    1774:	fd 4f       	sbci	r31, 0xFD	; 253
    1776:	99 81       	ldd	r25, Y+1	; 0x01
    1778:	90 83       	st	Z, r25
    177a:	8f 5f       	subi	r24, 0xFF	; 255
    177c:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <_ZN7TwoWire13txBufferIndexE>
    1780:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <_ZN7TwoWire14txBufferLengthE>
    1784:	05 c0       	rjmp	.+10     	; 0x1790 <_ZN7TwoWire5writeEh+0x52>
    1786:	61 e0       	ldi	r22, 0x01	; 1
    1788:	ce 01       	movw	r24, r28
    178a:	01 96       	adiw	r24, 0x01	; 1
    178c:	0e 94 80 0c 	call	0x1900	; 0x1900 <twi_transmit>
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	0f 90       	pop	r0
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	08 95       	ret

0000179c <_ZN7TwoWireC1Ev>:
    179c:	fc 01       	movw	r30, r24
    179e:	13 82       	std	Z+3, r1	; 0x03
    17a0:	12 82       	std	Z+2, r1	; 0x02
    17a2:	88 ee       	ldi	r24, 0xE8	; 232
    17a4:	93 e0       	ldi	r25, 0x03	; 3
    17a6:	a0 e0       	ldi	r26, 0x00	; 0
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	84 83       	std	Z+4, r24	; 0x04
    17ac:	95 83       	std	Z+5, r25	; 0x05
    17ae:	a6 83       	std	Z+6, r26	; 0x06
    17b0:	b7 83       	std	Z+7, r27	; 0x07
    17b2:	86 e8       	ldi	r24, 0x86	; 134
    17b4:	91 e0       	ldi	r25, 0x01	; 1
    17b6:	91 83       	std	Z+1, r25	; 0x01
    17b8:	80 83       	st	Z, r24
    17ba:	08 95       	ret

000017bc <_ZN7TwoWire5beginEv>:
    17bc:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <_ZN7TwoWire13rxBufferIndexE>
    17c0:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <_ZN7TwoWire14rxBufferLengthE>
    17c4:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <_ZN7TwoWire13txBufferIndexE>
    17c8:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <_ZN7TwoWire14txBufferLengthE>
    17cc:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <twi_init>

000017d0 <_ZN7TwoWire17beginTransmissionEh>:
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <_ZN7TwoWire12transmittingE>
    17d6:	60 93 ff 02 	sts	0x02FF, r22	; 0x8002ff <_ZN7TwoWire9txAddressE>
    17da:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <_ZN7TwoWire13txBufferIndexE>
    17de:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <_ZN7TwoWire14txBufferLengthE>
    17e2:	08 95       	ret

000017e4 <_ZN7TwoWire15endTransmissionEh>:
    17e4:	0f 93       	push	r16
    17e6:	06 2f       	mov	r16, r22
    17e8:	21 e0       	ldi	r18, 0x01	; 1
    17ea:	40 91 dd 02 	lds	r20, 0x02DD	; 0x8002dd <_ZN7TwoWire14txBufferLengthE>
    17ee:	6f ed       	ldi	r22, 0xDF	; 223
    17f0:	72 e0       	ldi	r23, 0x02	; 2
    17f2:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <_ZN7TwoWire9txAddressE>
    17f6:	0e 94 2a 0c 	call	0x1854	; 0x1854 <twi_writeTo>
    17fa:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <_ZN7TwoWire13txBufferIndexE>
    17fe:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <_ZN7TwoWire14txBufferLengthE>
    1802:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <_ZN7TwoWire12transmittingE>
    1806:	0f 91       	pop	r16
    1808:	08 95       	ret

0000180a <_ZN7TwoWire15endTransmissionEv>:
    180a:	61 e0       	ldi	r22, 0x01	; 1
    180c:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <_ZN7TwoWire15endTransmissionEh>

00001810 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1810:	80 ed       	ldi	r24, 0xD0	; 208
    1812:	92 e0       	ldi	r25, 0x02	; 2
    1814:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <_ZN7TwoWireC1Ev>

00001818 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1818:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <twi_state>
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <twi_sendStop>
    1822:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <twi_inRepStart>
    1826:	61 e0       	ldi	r22, 0x01	; 1
    1828:	82 e1       	ldi	r24, 0x12	; 18
    182a:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <digitalWrite>
    182e:	61 e0       	ldi	r22, 0x01	; 1
    1830:	83 e1       	ldi	r24, 0x13	; 19
    1832:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <digitalWrite>
    1836:	e9 eb       	ldi	r30, 0xB9	; 185
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	8e 7f       	andi	r24, 0xFE	; 254
    183e:	80 83       	st	Z, r24
    1840:	80 81       	ld	r24, Z
    1842:	8d 7f       	andi	r24, 0xFD	; 253
    1844:	80 83       	st	Z, r24
    1846:	88 e4       	ldi	r24, 0x48	; 72
    1848:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    184c:	85 e4       	ldi	r24, 0x45	; 69
    184e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1852:	08 95       	ret

00001854 <twi_writeTo>:
    1854:	0f 93       	push	r16
    1856:	41 32       	cpi	r20, 0x21	; 33
    1858:	08 f0       	brcs	.+2      	; 0x185c <twi_writeTo+0x8>
    185a:	4a c0       	rjmp	.+148    	; 0x18f0 <twi_writeTo+0x9c>
    185c:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <twi_state>
    1860:	91 11       	cpse	r25, r1
    1862:	fc cf       	rjmp	.-8      	; 0x185c <twi_writeTo+0x8>
    1864:	32 e0       	ldi	r19, 0x02	; 2
    1866:	30 93 8f 03 	sts	0x038F, r19	; 0x80038f <twi_state>
    186a:	00 93 8d 03 	sts	0x038D, r16	; 0x80038d <twi_sendStop>
    186e:	3f ef       	ldi	r19, 0xFF	; 255
    1870:	30 93 22 03 	sts	0x0322, r19	; 0x800322 <twi_error>
    1874:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <twi_masterBufferIndex>
    1878:	40 93 66 03 	sts	0x0366, r20	; 0x800366 <twi_masterBufferLength>
    187c:	fb 01       	movw	r30, r22
    187e:	68 e6       	ldi	r22, 0x68	; 104
    1880:	73 e0       	ldi	r23, 0x03	; 3
    1882:	db 01       	movw	r26, r22
    1884:	3a 2f       	mov	r19, r26
    1886:	36 1b       	sub	r19, r22
    1888:	34 17       	cp	r19, r20
    188a:	18 f4       	brcc	.+6      	; 0x1892 <twi_writeTo+0x3e>
    188c:	31 91       	ld	r19, Z+
    188e:	3d 93       	st	X+, r19
    1890:	f9 cf       	rjmp	.-14     	; 0x1884 <twi_writeTo+0x30>
    1892:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <twi_slarw>
    1896:	30 91 8e 03 	lds	r19, 0x038E	; 0x80038e <twi_slarw>
    189a:	88 0f       	add	r24, r24
    189c:	83 2b       	or	r24, r19
    189e:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <twi_slarw>
    18a2:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <twi_inRepStart>
    18a6:	81 30       	cpi	r24, 0x01	; 1
    18a8:	61 f4       	brne	.+24     	; 0x18c2 <twi_writeTo+0x6e>
    18aa:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <twi_inRepStart>
    18ae:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <twi_slarw>
    18b2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    18b6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    18ba:	83 fd       	sbrc	r24, 3
    18bc:	f8 cf       	rjmp	.-16     	; 0x18ae <twi_writeTo+0x5a>
    18be:	85 ec       	ldi	r24, 0xC5	; 197
    18c0:	01 c0       	rjmp	.+2      	; 0x18c4 <twi_writeTo+0x70>
    18c2:	85 ee       	ldi	r24, 0xE5	; 229
    18c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    18c8:	22 23       	and	r18, r18
    18ca:	21 f0       	breq	.+8      	; 0x18d4 <twi_writeTo+0x80>
    18cc:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <twi_state>
    18d0:	82 30       	cpi	r24, 0x02	; 2
    18d2:	d1 f3       	breq	.-12     	; 0x18c8 <twi_writeTo+0x74>
    18d4:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <twi_error>
    18d8:	8f 3f       	cpi	r24, 0xFF	; 255
    18da:	79 f0       	breq	.+30     	; 0x18fa <twi_writeTo+0xa6>
    18dc:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <twi_error>
    18e0:	80 32       	cpi	r24, 0x20	; 32
    18e2:	41 f0       	breq	.+16     	; 0x18f4 <twi_writeTo+0xa0>
    18e4:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <twi_error>
    18e8:	80 33       	cpi	r24, 0x30	; 48
    18ea:	31 f0       	breq	.+12     	; 0x18f8 <twi_writeTo+0xa4>
    18ec:	94 e0       	ldi	r25, 0x04	; 4
    18ee:	05 c0       	rjmp	.+10     	; 0x18fa <twi_writeTo+0xa6>
    18f0:	91 e0       	ldi	r25, 0x01	; 1
    18f2:	03 c0       	rjmp	.+6      	; 0x18fa <twi_writeTo+0xa6>
    18f4:	92 e0       	ldi	r25, 0x02	; 2
    18f6:	01 c0       	rjmp	.+2      	; 0x18fa <twi_writeTo+0xa6>
    18f8:	93 e0       	ldi	r25, 0x03	; 3
    18fa:	89 2f       	mov	r24, r25
    18fc:	0f 91       	pop	r16
    18fe:	08 95       	ret

00001900 <twi_transmit>:
    1900:	40 91 44 03 	lds	r20, 0x0344	; 0x800344 <twi_txBufferLength>
    1904:	26 2f       	mov	r18, r22
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	24 0f       	add	r18, r20
    190a:	31 1d       	adc	r19, r1
    190c:	21 32       	cpi	r18, 0x21	; 33
    190e:	31 05       	cpc	r19, r1
    1910:	dc f4       	brge	.+54     	; 0x1948 <twi_transmit+0x48>
    1912:	20 91 8f 03 	lds	r18, 0x038F	; 0x80038f <twi_state>
    1916:	24 30       	cpi	r18, 0x04	; 4
    1918:	c9 f4       	brne	.+50     	; 0x194c <twi_transmit+0x4c>
    191a:	fc 01       	movw	r30, r24
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	86 17       	cp	r24, r22
    1922:	58 f4       	brcc	.+22     	; 0x193a <twi_transmit+0x3a>
    1924:	30 91 44 03 	lds	r19, 0x0344	; 0x800344 <twi_txBufferLength>
    1928:	21 91       	ld	r18, Z+
    192a:	dc 01       	movw	r26, r24
    192c:	aa 5b       	subi	r26, 0xBA	; 186
    192e:	bc 4f       	sbci	r27, 0xFC	; 252
    1930:	a3 0f       	add	r26, r19
    1932:	b1 1d       	adc	r27, r1
    1934:	2c 93       	st	X, r18
    1936:	01 96       	adiw	r24, 0x01	; 1
    1938:	f3 cf       	rjmp	.-26     	; 0x1920 <twi_transmit+0x20>
    193a:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <twi_txBufferLength>
    193e:	68 0f       	add	r22, r24
    1940:	60 93 44 03 	sts	0x0344, r22	; 0x800344 <twi_txBufferLength>
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	08 95       	ret
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	08 95       	ret
    194c:	82 e0       	ldi	r24, 0x02	; 2
    194e:	08 95       	ret

00001950 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1950:	85 ed       	ldi	r24, 0xD5	; 213
    1952:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1956:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    195a:	84 fd       	sbrc	r24, 4
    195c:	fc cf       	rjmp	.-8      	; 0x1956 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    195e:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <twi_state>
    1962:	08 95       	ret

00001964 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1964:	85 ec       	ldi	r24, 0xC5	; 197
    1966:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    196a:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <twi_state>
    196e:	08 95       	ret

00001970 <__vector_24>:
}

ISR(TWI_vect)
{
    1970:	1f 92       	push	r1
    1972:	0f 92       	push	r0
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	0f 92       	push	r0
    1978:	11 24       	eor	r1, r1
    197a:	2f 93       	push	r18
    197c:	3f 93       	push	r19
    197e:	4f 93       	push	r20
    1980:	5f 93       	push	r21
    1982:	6f 93       	push	r22
    1984:	7f 93       	push	r23
    1986:	8f 93       	push	r24
    1988:	9f 93       	push	r25
    198a:	af 93       	push	r26
    198c:	bf 93       	push	r27
    198e:	ef 93       	push	r30
    1990:	ff 93       	push	r31
  switch(TW_STATUS){
    1992:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1996:	88 7f       	andi	r24, 0xF8	; 248
    1998:	80 36       	cpi	r24, 0x60	; 96
    199a:	09 f4       	brne	.+2      	; 0x199e <__vector_24+0x2e>
    199c:	9e c0       	rjmp	.+316    	; 0x1ada <__vector_24+0x16a>
    199e:	78 f5       	brcc	.+94     	; 0x19fe <__vector_24+0x8e>
    19a0:	88 32       	cpi	r24, 0x28	; 40
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <__vector_24+0x36>
    19a4:	5d c0       	rjmp	.+186    	; 0x1a60 <__vector_24+0xf0>
    19a6:	90 f4       	brcc	.+36     	; 0x19cc <__vector_24+0x5c>
    19a8:	80 31       	cpi	r24, 0x10	; 16
    19aa:	09 f4       	brne	.+2      	; 0x19ae <__vector_24+0x3e>
    19ac:	56 c0       	rjmp	.+172    	; 0x1a5a <__vector_24+0xea>
    19ae:	38 f4       	brcc	.+14     	; 0x19be <__vector_24+0x4e>
    19b0:	88 23       	and	r24, r24
    19b2:	09 f4       	brne	.+2      	; 0x19b6 <__vector_24+0x46>
    19b4:	f5 c0       	rjmp	.+490    	; 0x1ba0 <__vector_24+0x230>
    19b6:	88 30       	cpi	r24, 0x08	; 8
    19b8:	09 f4       	brne	.+2      	; 0x19bc <__vector_24+0x4c>
    19ba:	4f c0       	rjmp	.+158    	; 0x1a5a <__vector_24+0xea>
    19bc:	f5 c0       	rjmp	.+490    	; 0x1ba8 <__vector_24+0x238>
    19be:	88 31       	cpi	r24, 0x18	; 24
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <__vector_24+0x54>
    19c2:	4e c0       	rjmp	.+156    	; 0x1a60 <__vector_24+0xf0>
    19c4:	80 32       	cpi	r24, 0x20	; 32
    19c6:	09 f4       	brne	.+2      	; 0x19ca <__vector_24+0x5a>
    19c8:	5f c0       	rjmp	.+190    	; 0x1a88 <__vector_24+0x118>
    19ca:	ee c0       	rjmp	.+476    	; 0x1ba8 <__vector_24+0x238>
    19cc:	80 34       	cpi	r24, 0x40	; 64
    19ce:	09 f4       	brne	.+2      	; 0x19d2 <__vector_24+0x62>
    19d0:	6a c0       	rjmp	.+212    	; 0x1aa6 <__vector_24+0x136>
    19d2:	58 f4       	brcc	.+22     	; 0x19ea <__vector_24+0x7a>
    19d4:	80 33       	cpi	r24, 0x30	; 48
    19d6:	09 f4       	brne	.+2      	; 0x19da <__vector_24+0x6a>
    19d8:	57 c0       	rjmp	.+174    	; 0x1a88 <__vector_24+0x118>
    19da:	88 33       	cpi	r24, 0x38	; 56
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <__vector_24+0x70>
    19de:	e4 c0       	rjmp	.+456    	; 0x1ba8 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    19e0:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <twi_error>
      twi_releaseBus();
    19e4:	0e 94 b2 0c 	call	0x1964	; 0x1964 <twi_releaseBus>
      break;
    19e8:	df c0       	rjmp	.+446    	; 0x1ba8 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    19ea:	80 35       	cpi	r24, 0x50	; 80
    19ec:	09 f4       	brne	.+2      	; 0x19f0 <__vector_24+0x80>
    19ee:	4f c0       	rjmp	.+158    	; 0x1a8e <__vector_24+0x11e>
    19f0:	88 35       	cpi	r24, 0x58	; 88
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <__vector_24+0x86>
    19f4:	5d c0       	rjmp	.+186    	; 0x1ab0 <__vector_24+0x140>
    19f6:	88 34       	cpi	r24, 0x48	; 72
    19f8:	09 f0       	breq	.+2      	; 0x19fc <__vector_24+0x8c>
    19fa:	d6 c0       	rjmp	.+428    	; 0x1ba8 <__vector_24+0x238>
    19fc:	d3 c0       	rjmp	.+422    	; 0x1ba4 <__vector_24+0x234>
    19fe:	88 39       	cpi	r24, 0x98	; 152
    1a00:	09 f4       	brne	.+2      	; 0x1a04 <__vector_24+0x94>
    1a02:	c4 c0       	rjmp	.+392    	; 0x1b8c <__vector_24+0x21c>
    1a04:	a8 f4       	brcc	.+42     	; 0x1a30 <__vector_24+0xc0>
    1a06:	88 37       	cpi	r24, 0x78	; 120
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <__vector_24+0x9c>
    1a0a:	67 c0       	rjmp	.+206    	; 0x1ada <__vector_24+0x16a>
    1a0c:	38 f4       	brcc	.+14     	; 0x1a1c <__vector_24+0xac>
    1a0e:	88 36       	cpi	r24, 0x68	; 104
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <__vector_24+0xa4>
    1a12:	63 c0       	rjmp	.+198    	; 0x1ada <__vector_24+0x16a>
    1a14:	80 37       	cpi	r24, 0x70	; 112
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <__vector_24+0xaa>
    1a18:	60 c0       	rjmp	.+192    	; 0x1ada <__vector_24+0x16a>
    1a1a:	c6 c0       	rjmp	.+396    	; 0x1ba8 <__vector_24+0x238>
    1a1c:	88 38       	cpi	r24, 0x88	; 136
    1a1e:	09 f4       	brne	.+2      	; 0x1a22 <__vector_24+0xb2>
    1a20:	b5 c0       	rjmp	.+362    	; 0x1b8c <__vector_24+0x21c>
    1a22:	80 39       	cpi	r24, 0x90	; 144
    1a24:	09 f4       	brne	.+2      	; 0x1a28 <__vector_24+0xb8>
    1a26:	5f c0       	rjmp	.+190    	; 0x1ae6 <__vector_24+0x176>
    1a28:	80 38       	cpi	r24, 0x80	; 128
    1a2a:	09 f0       	breq	.+2      	; 0x1a2e <__vector_24+0xbe>
    1a2c:	bd c0       	rjmp	.+378    	; 0x1ba8 <__vector_24+0x238>
    1a2e:	5b c0       	rjmp	.+182    	; 0x1ae6 <__vector_24+0x176>
    1a30:	80 3b       	cpi	r24, 0xB0	; 176
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <__vector_24+0xc6>
    1a34:	83 c0       	rjmp	.+262    	; 0x1b3c <__vector_24+0x1cc>
    1a36:	38 f4       	brcc	.+14     	; 0x1a46 <__vector_24+0xd6>
    1a38:	80 3a       	cpi	r24, 0xA0	; 160
    1a3a:	09 f4       	brne	.+2      	; 0x1a3e <__vector_24+0xce>
    1a3c:	66 c0       	rjmp	.+204    	; 0x1b0a <__vector_24+0x19a>
    1a3e:	88 3a       	cpi	r24, 0xA8	; 168
    1a40:	09 f4       	brne	.+2      	; 0x1a44 <__vector_24+0xd4>
    1a42:	7c c0       	rjmp	.+248    	; 0x1b3c <__vector_24+0x1cc>
    1a44:	b1 c0       	rjmp	.+354    	; 0x1ba8 <__vector_24+0x238>
    1a46:	80 3c       	cpi	r24, 0xC0	; 192
    1a48:	09 f4       	brne	.+2      	; 0x1a4c <__vector_24+0xdc>
    1a4a:	a4 c0       	rjmp	.+328    	; 0x1b94 <__vector_24+0x224>
    1a4c:	88 3c       	cpi	r24, 0xC8	; 200
    1a4e:	09 f4       	brne	.+2      	; 0x1a52 <__vector_24+0xe2>
    1a50:	a1 c0       	rjmp	.+322    	; 0x1b94 <__vector_24+0x224>
    1a52:	88 3b       	cpi	r24, 0xB8	; 184
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <__vector_24+0xe8>
    1a56:	87 c0       	rjmp	.+270    	; 0x1b66 <__vector_24+0x1f6>
    1a58:	a7 c0       	rjmp	.+334    	; 0x1ba8 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1a5a:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <twi_slarw>
    1a5e:	10 c0       	rjmp	.+32     	; 0x1a80 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1a60:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <twi_masterBufferIndex>
    1a64:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <twi_masterBufferLength>
    1a68:	98 17       	cp	r25, r24
    1a6a:	70 f5       	brcc	.+92     	; 0x1ac8 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1a6c:	e0 91 67 03 	lds	r30, 0x0367	; 0x800367 <twi_masterBufferIndex>
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	8e 0f       	add	r24, r30
    1a74:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <twi_masterBufferIndex>
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	e8 59       	subi	r30, 0x98	; 152
    1a7c:	fc 4f       	sbci	r31, 0xFC	; 252
    1a7e:	80 81       	ld	r24, Z
    1a80:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1a84:	85 ec       	ldi	r24, 0xC5	; 197
    1a86:	83 c0       	rjmp	.+262    	; 0x1b8e <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1a88:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <twi_error>
    1a8c:	8b c0       	rjmp	.+278    	; 0x1ba4 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1a8e:	e0 91 67 03 	lds	r30, 0x0367	; 0x800367 <twi_masterBufferIndex>
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	8e 0f       	add	r24, r30
    1a96:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <twi_masterBufferIndex>
    1a9a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	e8 59       	subi	r30, 0x98	; 152
    1aa2:	fc 4f       	sbci	r31, 0xFC	; 252
    1aa4:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1aa6:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <twi_masterBufferIndex>
    1aaa:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <twi_masterBufferLength>
    1aae:	6b c0       	rjmp	.+214    	; 0x1b86 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1ab0:	e0 91 67 03 	lds	r30, 0x0367	; 0x800367 <twi_masterBufferIndex>
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	8e 0f       	add	r24, r30
    1ab8:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <twi_masterBufferIndex>
    1abc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	e8 59       	subi	r30, 0x98	; 152
    1ac4:	fc 4f       	sbci	r31, 0xFC	; 252
    1ac6:	80 83       	st	Z, r24
	if (twi_sendStop)
    1ac8:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <twi_sendStop>
    1acc:	81 11       	cpse	r24, r1
    1ace:	6a c0       	rjmp	.+212    	; 0x1ba4 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1ad6:	84 ea       	ldi	r24, 0xA4	; 164
    1ad8:	5e c0       	rjmp	.+188    	; 0x1b96 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1ada:	83 e0       	ldi	r24, 0x03	; 3
    1adc:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1ae0:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <twi_rxBufferIndex>
    1ae4:	cf cf       	rjmp	.-98     	; 0x1a84 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1ae6:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <twi_rxBufferIndex>
    1aea:	80 32       	cpi	r24, 0x20	; 32
    1aec:	08 f0       	brcs	.+2      	; 0x1af0 <__vector_24+0x180>
    1aee:	4e c0       	rjmp	.+156    	; 0x1b8c <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1af0:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <twi_rxBufferIndex>
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	8e 0f       	add	r24, r30
    1af8:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <twi_rxBufferIndex>
    1afc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	ec 5d       	subi	r30, 0xDC	; 220
    1b04:	fc 4f       	sbci	r31, 0xFC	; 252
    1b06:	80 83       	st	Z, r24
    1b08:	bd cf       	rjmp	.-134    	; 0x1a84 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1b0a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1b0e:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <twi_rxBufferIndex>
    1b12:	80 32       	cpi	r24, 0x20	; 32
    1b14:	30 f4       	brcc	.+12     	; 0x1b22 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1b16:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <twi_rxBufferIndex>
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	ec 5d       	subi	r30, 0xDC	; 220
    1b1e:	fc 4f       	sbci	r31, 0xFC	; 252
    1b20:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1b22:	60 91 23 03 	lds	r22, 0x0323	; 0x800323 <twi_rxBufferIndex>
    1b26:	70 e0       	ldi	r23, 0x00	; 0
    1b28:	e0 91 88 03 	lds	r30, 0x0388	; 0x800388 <twi_onSlaveReceive>
    1b2c:	f0 91 89 03 	lds	r31, 0x0389	; 0x800389 <twi_onSlaveReceive+0x1>
    1b30:	84 e2       	ldi	r24, 0x24	; 36
    1b32:	93 e0       	ldi	r25, 0x03	; 3
    1b34:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1b36:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <twi_rxBufferIndex>
      break;
    1b3a:	36 c0       	rjmp	.+108    	; 0x1ba8 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1b3c:	84 e0       	ldi	r24, 0x04	; 4
    1b3e:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1b42:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1b46:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1b4a:	e0 91 8a 03 	lds	r30, 0x038A	; 0x80038a <twi_onSlaveTransmit>
    1b4e:	f0 91 8b 03 	lds	r31, 0x038B	; 0x80038b <twi_onSlaveTransmit+0x1>
    1b52:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1b54:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <twi_txBufferLength>
    1b58:	81 11       	cpse	r24, r1
    1b5a:	05 c0       	rjmp	.+10     	; 0x1b66 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1b62:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1b66:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <twi_txBufferIndex>
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	8e 0f       	add	r24, r30
    1b6e:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <twi_txBufferIndex>
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	ea 5b       	subi	r30, 0xBA	; 186
    1b76:	fc 4f       	sbci	r31, 0xFC	; 252
    1b78:	80 81       	ld	r24, Z
    1b7a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1b7e:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <twi_txBufferIndex>
    1b82:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <twi_txBufferLength>
    1b86:	98 17       	cp	r25, r24
    1b88:	08 f4       	brcc	.+2      	; 0x1b8c <__vector_24+0x21c>
    1b8a:	7c cf       	rjmp	.-264    	; 0x1a84 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1b8c:	85 e8       	ldi	r24, 0x85	; 133
    1b8e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1b92:	0a c0       	rjmp	.+20     	; 0x1ba8 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1b94:	85 ec       	ldi	r24, 0xC5	; 197
    1b96:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1b9a:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <twi_state>
      break;
    1b9e:	04 c0       	rjmp	.+8      	; 0x1ba8 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1ba0:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <twi_error>
      twi_stop();
    1ba4:	0e 94 a8 0c 	call	0x1950	; 0x1950 <twi_stop>
      break;
  }
}
    1ba8:	ff 91       	pop	r31
    1baa:	ef 91       	pop	r30
    1bac:	bf 91       	pop	r27
    1bae:	af 91       	pop	r26
    1bb0:	9f 91       	pop	r25
    1bb2:	8f 91       	pop	r24
    1bb4:	7f 91       	pop	r23
    1bb6:	6f 91       	pop	r22
    1bb8:	5f 91       	pop	r21
    1bba:	4f 91       	pop	r20
    1bbc:	3f 91       	pop	r19
    1bbe:	2f 91       	pop	r18
    1bc0:	0f 90       	pop	r0
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	0f 90       	pop	r0
    1bc6:	1f 90       	pop	r1
    1bc8:	18 95       	reti

00001bca <_ZN18Ds18S20TemperatureC1EP7OneWire>:
#include <OneWire.h>
#include "Ds18S20Min.h"

Ds18S20Temperature::Ds18S20Temperature(OneWire* ow)
{
	onewire = ow;
    1bca:	fc 01       	movw	r30, r24
    1bcc:	71 83       	std	Z+1, r23	; 0x01
    1bce:	60 83       	st	Z, r22
    1bd0:	08 95       	ret

00001bd2 <_ZN18Ds18S20Temperature21writeTimeToScratchpadEPhi>:
{
	readAdresses() ;
}
 
 void Ds18S20Temperature::writeTimeToScratchpad(byte* address, int delaycnt)
 {
    1bd2:	ef 92       	push	r14
    1bd4:	ff 92       	push	r15
    1bd6:	0f 93       	push	r16
    1bd8:	1f 93       	push	r17
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
    1bde:	ec 01       	movw	r28, r24
    1be0:	7b 01       	movw	r14, r22
    1be2:	8a 01       	movw	r16, r20
	 //reset the bus
	 onewire->reset();
    1be4:	88 81       	ld	r24, Y
    1be6:	99 81       	ldd	r25, Y+1	; 0x01
    1be8:	0e 94 c1 04 	call	0x982	; 0x982 <_ZN7OneWire5resetEv>
	 //select our sensor
	 onewire->select(address);
    1bec:	b7 01       	movw	r22, r14
    1bee:	88 81       	ld	r24, Y
    1bf0:	99 81       	ldd	r25, Y+1	; 0x01
    1bf2:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN7OneWire6selectEPKh>
	 //CONVERT T function call (44h) which puts the temperature into the scratchpad
	 onewire->write(0x44,1);
    1bf6:	41 e0       	ldi	r20, 0x01	; 1
    1bf8:	64 e4       	ldi	r22, 0x44	; 68
    1bfa:	88 81       	ld	r24, Y
    1bfc:	99 81       	ldd	r25, Y+1	; 0x01
    1bfe:	0e 94 5e 05 	call	0xabc	; 0xabc <_ZN7OneWire5writeEhh>
	 //sleep a second for the write to take place
	 delay(delaycnt);
    1c02:	b8 01       	movw	r22, r16
    1c04:	11 0f       	add	r17, r17
    1c06:	88 0b       	sbc	r24, r24
    1c08:	99 0b       	sbc	r25, r25
    1c0a:	0e 94 15 09 	call	0x122a	; 0x122a <delay>
 }
    1c0e:	df 91       	pop	r29
    1c10:	cf 91       	pop	r28
    1c12:	1f 91       	pop	r17
    1c14:	0f 91       	pop	r16
    1c16:	ff 90       	pop	r15
    1c18:	ef 90       	pop	r14
    1c1a:	08 95       	ret

00001c1c <_ZN18Ds18S20Temperature22readTimeFromScratchpadEPhS0_>:
 
 void Ds18S20Temperature::readTimeFromScratchpad(byte* address, byte* data)
 {
    1c1c:	ef 92       	push	r14
    1c1e:	ff 92       	push	r15
    1c20:	0f 93       	push	r16
    1c22:	1f 93       	push	r17
    1c24:	cf 93       	push	r28
    1c26:	df 93       	push	r29
    1c28:	7c 01       	movw	r14, r24
    1c2a:	eb 01       	movw	r28, r22
    1c2c:	8a 01       	movw	r16, r20
	 //reset the bus
	 onewire->reset();
    1c2e:	fc 01       	movw	r30, r24
    1c30:	80 81       	ld	r24, Z
    1c32:	91 81       	ldd	r25, Z+1	; 0x01
    1c34:	0e 94 c1 04 	call	0x982	; 0x982 <_ZN7OneWire5resetEv>
	 //select our sensor
	 onewire->select(address);
    1c38:	be 01       	movw	r22, r28
    1c3a:	f7 01       	movw	r30, r14
    1c3c:	80 81       	ld	r24, Z
    1c3e:	91 81       	ldd	r25, Z+1	; 0x01
    1c40:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN7OneWire6selectEPKh>
	 //read the scratchpad (BEh)
	 onewire->write(0xBE);
    1c44:	40 e0       	ldi	r20, 0x00	; 0
    1c46:	6e eb       	ldi	r22, 0xBE	; 190
    1c48:	f7 01       	movw	r30, r14
    1c4a:	80 81       	ld	r24, Z
    1c4c:	91 81       	ldd	r25, Z+1	; 0x01
    1c4e:	0e 94 5e 05 	call	0xabc	; 0xabc <_ZN7OneWire5writeEhh>
    1c52:	e8 01       	movw	r28, r16
    1c54:	07 5f       	subi	r16, 0xF7	; 247
    1c56:	1f 4f       	sbci	r17, 0xFF	; 255
	 for (byte i=0;i<9;i++){
		 data[i] = onewire->read();
    1c58:	f7 01       	movw	r30, r14
    1c5a:	80 81       	ld	r24, Z
    1c5c:	91 81       	ldd	r25, Z+1	; 0x01
    1c5e:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7OneWire4readEv>
    1c62:	89 93       	st	Y+, r24
	 onewire->reset();
	 //select our sensor
	 onewire->select(address);
	 //read the scratchpad (BEh)
	 onewire->write(0xBE);
	 for (byte i=0;i<9;i++){
    1c64:	c0 17       	cp	r28, r16
    1c66:	d1 07       	cpc	r29, r17
    1c68:	b9 f7       	brne	.-18     	; 0x1c58 <_ZN18Ds18S20Temperature22readTimeFromScratchpadEPhS0_+0x3c>
		 data[i] = onewire->read();
	 }
 }
    1c6a:	df 91       	pop	r29
    1c6c:	cf 91       	pop	r28
    1c6e:	1f 91       	pop	r17
    1c70:	0f 91       	pop	r16
    1c72:	ff 90       	pop	r15
    1c74:	ef 90       	pop	r14
    1c76:	08 95       	ret

00001c78 <_ZN18Ds18S20Temperature13getSensortypeEPh>:
}
 
 byte Ds18S20Temperature::getSensortype(byte* address)
 {
 		// the first ROM byte indicates which chip
	switch (address[0]) {
    1c78:	fb 01       	movw	r30, r22
    1c7a:	80 81       	ld	r24, Z
    1c7c:	82 32       	cpi	r24, 0x22	; 34
    1c7e:	29 f0       	breq	.+10     	; 0x1c8a <_ZN18Ds18S20Temperature13getSensortypeEPh+0x12>
    1c80:	88 32       	cpi	r24, 0x28	; 40
    1c82:	19 f0       	breq	.+6      	; 0x1c8a <_ZN18Ds18S20Temperature13getSensortypeEPh+0x12>
    1c84:	80 31       	cpi	r24, 0x10	; 16
    1c86:	19 f4       	brne	.+6      	; 0x1c8e <_ZN18Ds18S20Temperature13getSensortypeEPh+0x16>
    1c88:	04 c0       	rjmp	.+8      	; 0x1c92 <_ZN18Ds18S20Temperature13getSensortypeEPh+0x1a>
		//Serial.println("  Chip = DS18S20");  // or old DS1820
		return 1;
		break;
		case 0x28:
		//Serial.println("  Chip = DS18B20");
		return 0;
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	08 95       	ret
		//Serial.println("  Chip = DS1822");
		return 0;
		break;
		default:
		//Serial.println("Device is not a DS18x20 family device.");
		return -1;
    1c8e:	8f ef       	ldi	r24, 0xFF	; 255
    1c90:	08 95       	ret
 {
 		// the first ROM byte indicates which chip
	switch (address[0]) {
		case 0x10:
		//Serial.println("  Chip = DS18S20");  // or old DS1820
		return 1;
    1c92:	81 e0       	ldi	r24, 0x01	; 1
		default:
		//Serial.println("Device is not a DS18x20 family device.");
		return -1;
	}
	return -1;
 }
    1c94:	08 95       	ret

00001c96 <_ZN18Ds18S20Temperature14getTemperatureEPhb>:
	if (id > Devicecount) return -255;
	return getTemperature(sensors[id], getcelsius);
 }
 
float Ds18S20Temperature::getTemperature(byte* address, bool getcelsius)
{
    1c96:	bf 92       	push	r11
    1c98:	cf 92       	push	r12
    1c9a:	df 92       	push	r13
    1c9c:	ef 92       	push	r14
    1c9e:	ff 92       	push	r15
    1ca0:	0f 93       	push	r16
    1ca2:	1f 93       	push	r17
    1ca4:	cf 93       	push	r28
    1ca6:	df 93       	push	r29
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
    1cac:	2c 97       	sbiw	r28, 0x0c	; 12
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	f8 94       	cli
    1cb2:	de bf       	out	0x3e, r29	; 62
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	cd bf       	out	0x3d, r28	; 61
    1cb8:	8c 01       	movw	r16, r24
    1cba:	7b 01       	movw	r14, r22
    1cbc:	b4 2e       	mov	r11, r20
	byte data[12];
	writeTimeToScratchpad(address, 10);
    1cbe:	4a e0       	ldi	r20, 0x0A	; 10
    1cc0:	50 e0       	ldi	r21, 0x00	; 0
    1cc2:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <_ZN18Ds18S20Temperature21writeTimeToScratchpadEPhi>
	readTimeFromScratchpad(address,data);
    1cc6:	ae 01       	movw	r20, r28
    1cc8:	4f 5f       	subi	r20, 0xFF	; 255
    1cca:	5f 4f       	sbci	r21, 0xFF	; 255
    1ccc:	b7 01       	movw	r22, r14
    1cce:	c8 01       	movw	r24, r16
    1cd0:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <_ZN18Ds18S20Temperature22readTimeFromScratchpadEPhS0_>
 
	// Convert the data to actual temperature
	// because the result is a 16 bit signed integer, it should
	// be stored to an "int16_t" type, which is always 16 bits
	// even when compiled on a 32 bit processor.
	int16_t raw = (data[1] << 8) | data[0];
    1cd4:	2a 81       	ldd	r18, Y+2	; 0x02
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	32 2f       	mov	r19, r18
    1cda:	22 27       	eor	r18, r18
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	69 01       	movw	r12, r18
    1ce0:	c8 2a       	or	r12, r24
	if (getSensortype(address) == 1) 
    1ce2:	b7 01       	movw	r22, r14
    1ce4:	c8 01       	movw	r24, r16
    1ce6:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <_ZN18Ds18S20Temperature13getSensortypeEPh>
    1cea:	81 30       	cpi	r24, 0x01	; 1
    1cec:	a1 f4       	brne	.+40     	; 0x1d16 <_ZN18Ds18S20Temperature14getTemperatureEPhb+0x80>
	{
		raw = raw << 3; // 9 bit resolution default
    1cee:	cc 0c       	add	r12, r12
    1cf0:	dd 1c       	adc	r13, r13
    1cf2:	cc 0c       	add	r12, r12
    1cf4:	dd 1c       	adc	r13, r13
    1cf6:	cc 0c       	add	r12, r12
    1cf8:	dd 1c       	adc	r13, r13
		if (data[7] == 0x10) 
    1cfa:	88 85       	ldd	r24, Y+8	; 0x08
    1cfc:	80 31       	cpi	r24, 0x10	; 16
    1cfe:	d1 f4       	brne	.+52     	; 0x1d34 <_ZN18Ds18S20Temperature14getTemperatureEPhb+0x9e>
		{
			// "count remain" gives full 12 bit resolution
			raw = (raw & 0xFFF0) + 12 - data[6];
    1d00:	2f 81       	ldd	r18, Y+7	; 0x07
    1d02:	8c e0       	ldi	r24, 0x0C	; 12
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	82 1b       	sub	r24, r18
    1d08:	91 09       	sbc	r25, r1
    1d0a:	b6 01       	movw	r22, r12
    1d0c:	60 7f       	andi	r22, 0xF0	; 240
    1d0e:	6c 01       	movw	r12, r24
    1d10:	c6 0e       	add	r12, r22
    1d12:	d7 1e       	adc	r13, r23
    1d14:	0f c0       	rjmp	.+30     	; 0x1d34 <_ZN18Ds18S20Temperature14getTemperatureEPhb+0x9e>
		}
	} 
	else 
	{
		byte cfg = (data[4] & 0x60);
    1d16:	8d 81       	ldd	r24, Y+5	; 0x05
    1d18:	80 76       	andi	r24, 0x60	; 96
		// at lower res, the low bits are undefined, so let's zero them
		if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    1d1a:	19 f4       	brne	.+6      	; 0x1d22 <_ZN18Ds18S20Temperature14getTemperatureEPhb+0x8c>
    1d1c:	88 ef       	ldi	r24, 0xF8	; 248
    1d1e:	c8 22       	and	r12, r24
    1d20:	09 c0       	rjmp	.+18     	; 0x1d34 <_ZN18Ds18S20Temperature14getTemperatureEPhb+0x9e>
		else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    1d22:	80 32       	cpi	r24, 0x20	; 32
    1d24:	19 f4       	brne	.+6      	; 0x1d2c <_ZN18Ds18S20Temperature14getTemperatureEPhb+0x96>
    1d26:	8c ef       	ldi	r24, 0xFC	; 252
    1d28:	c8 22       	and	r12, r24
    1d2a:	04 c0       	rjmp	.+8      	; 0x1d34 <_ZN18Ds18S20Temperature14getTemperatureEPhb+0x9e>
		else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    1d2c:	80 34       	cpi	r24, 0x40	; 64
    1d2e:	11 f4       	brne	.+4      	; 0x1d34 <_ZN18Ds18S20Temperature14getTemperatureEPhb+0x9e>
    1d30:	e8 94       	clt
    1d32:	c0 f8       	bld	r12, 0
		//// default is 12 bit resolution, 750 ms conversion time
	}
	 
	float celsius = (float)raw / 16.0;
    1d34:	b6 01       	movw	r22, r12
    1d36:	dd 0c       	add	r13, r13
    1d38:	88 0b       	sbc	r24, r24
    1d3a:	99 0b       	sbc	r25, r25
    1d3c:	0e 94 c5 10 	call	0x218a	; 0x218a <__floatsisf>
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	40 e8       	ldi	r20, 0x80	; 128
    1d46:	5d e3       	ldi	r21, 0x3D	; 61
    1d48:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <__mulsf3>
	float fahrenheit = celsius * 1.8 + 32.0;
	if (getcelsius)
    1d4c:	b1 10       	cpse	r11, r1
    1d4e:	17 c0       	rjmp	.+46     	; 0x1d7e <_ZN18Ds18S20Temperature14getTemperatureEPhb+0xe8>
		else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
		//// default is 12 bit resolution, 750 ms conversion time
	}
	 
	float celsius = (float)raw / 16.0;
	float fahrenheit = celsius * 1.8 + 32.0;
    1d50:	26 e6       	ldi	r18, 0x66	; 102
    1d52:	36 e6       	ldi	r19, 0x66	; 102
    1d54:	46 ee       	ldi	r20, 0xE6	; 230
    1d56:	5f e3       	ldi	r21, 0x3F	; 63
    1d58:	c6 2e       	mov	r12, r22
    1d5a:	d7 2e       	mov	r13, r23
    1d5c:	e8 2e       	mov	r14, r24
    1d5e:	f9 2e       	mov	r15, r25
    1d60:	c7 01       	movw	r24, r14
    1d62:	b6 01       	movw	r22, r12
    1d64:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <__mulsf3>
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e0       	ldi	r20, 0x00	; 0
    1d6e:	52 e4       	ldi	r21, 0x42	; 66
    1d70:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__addsf3>
	if (getcelsius)
	{
		return celsius;
	}
	return fahrenheit;
    1d74:	56 2f       	mov	r21, r22
    1d76:	47 2f       	mov	r20, r23
    1d78:	38 2f       	mov	r19, r24
    1d7a:	29 2f       	mov	r18, r25
    1d7c:	04 c0       	rjmp	.+8      	; 0x1d86 <_ZN18Ds18S20Temperature14getTemperatureEPhb+0xf0>
	 
	float celsius = (float)raw / 16.0;
	float fahrenheit = celsius * 1.8 + 32.0;
	if (getcelsius)
	{
		return celsius;
    1d7e:	56 2f       	mov	r21, r22
    1d80:	47 2f       	mov	r20, r23
    1d82:	38 2f       	mov	r19, r24
    1d84:	29 2f       	mov	r18, r25
	}
	return fahrenheit;
}
    1d86:	65 2f       	mov	r22, r21
    1d88:	74 2f       	mov	r23, r20
    1d8a:	83 2f       	mov	r24, r19
    1d8c:	92 2f       	mov	r25, r18
    1d8e:	2c 96       	adiw	r28, 0x0c	; 12
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	df 91       	pop	r29
    1d9c:	cf 91       	pop	r28
    1d9e:	1f 91       	pop	r17
    1da0:	0f 91       	pop	r16
    1da2:	ff 90       	pop	r15
    1da4:	ef 90       	pop	r14
    1da6:	df 90       	pop	r13
    1da8:	cf 90       	pop	r12
    1daa:	bf 90       	pop	r11
    1dac:	08 95       	ret

00001dae <_ZN18Ds18S20Temperature18getTemperatureByIdEhb>:
	 }
 }
 
 float Ds18S20Temperature::getTemperatureById(byte id, bool getcelsius)
 {
	if (id > Devicecount) return -255;
    1dae:	70 e0       	ldi	r23, 0x00	; 0
    1db0:	fc 01       	movw	r30, r24
    1db2:	22 81       	ldd	r18, Z+2	; 0x02
    1db4:	33 81       	ldd	r19, Z+3	; 0x03
    1db6:	26 17       	cp	r18, r22
    1db8:	37 07       	cpc	r19, r23
    1dba:	6c f0       	brlt	.+26     	; 0x1dd6 <_ZN18Ds18S20Temperature18getTemperatureByIdEhb+0x28>
	return getTemperature(sensors[id], getcelsius);
    1dbc:	66 0f       	add	r22, r22
    1dbe:	77 1f       	adc	r23, r23
    1dc0:	66 0f       	add	r22, r22
    1dc2:	77 1f       	adc	r23, r23
    1dc4:	66 0f       	add	r22, r22
    1dc6:	77 1f       	adc	r23, r23
    1dc8:	6c 5f       	subi	r22, 0xFC	; 252
    1dca:	7f 4f       	sbci	r23, 0xFF	; 255
    1dcc:	68 0f       	add	r22, r24
    1dce:	79 1f       	adc	r23, r25
    1dd0:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <_ZN18Ds18S20Temperature14getTemperatureEPhb>
    1dd4:	08 95       	ret
	 }
 }
 
 float Ds18S20Temperature::getTemperatureById(byte id, bool getcelsius)
 {
	if (id > Devicecount) return -255;
    1dd6:	60 e0       	ldi	r22, 0x00	; 0
    1dd8:	70 e0       	ldi	r23, 0x00	; 0
    1dda:	8f e7       	ldi	r24, 0x7F	; 127
    1ddc:	93 ec       	ldi	r25, 0xC3	; 195
	return getTemperature(sensors[id], getcelsius);
 }
    1dde:	08 95       	ret

00001de0 <_ZN18Ds18S20Temperature12readAdressesEv>:
		return -1;
	}
	return -1;
 }

 void Ds18S20Temperature::readAdresses(void) {
    1de0:	0f 93       	push	r16
    1de2:	1f 93       	push	r17
    1de4:	cf 93       	push	r28
    1de6:	df 93       	push	r29
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	28 97       	sbiw	r28, 0x08	; 8
    1dee:	0f b6       	in	r0, 0x3f	; 63
    1df0:	f8 94       	cli
    1df2:	de bf       	out	0x3e, r29	; 62
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	cd bf       	out	0x3d, r28	; 61
    1df8:	8c 01       	movw	r16, r24
	 byte addr[8];
	 
	 Devicecount = 0;
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	13 82       	std	Z+3, r1	; 0x03
    1dfe:	12 82       	std	Z+2, r1	; 0x02

	 for(int i =0; i< _maxSensors; i++)
	 {
		sensors[i][0] =0;
    1e00:	14 82       	std	Z+4, r1	; 0x04
    1e02:	14 86       	std	Z+12, r1	; 0x0c
    1e04:	14 8a       	std	Z+20, r1	; 0x14
    1e06:	14 8e       	std	Z+28, r1	; 0x1c
    1e08:	14 a2       	std	Z+36, r1	; 0x24
    1e0a:	14 a6       	std	Z+44, r1	; 0x2c
	 }
	 onewire->reset_search();
    1e0c:	80 81       	ld	r24, Z
    1e0e:	91 81       	ldd	r25, Z+1	; 0x01
    1e10:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <_ZN7OneWire12reset_searchEv>

	 while(onewire->search(addr)) {
    1e14:	0d c0       	rjmp	.+26     	; 0x1e30 <_ZN18Ds18S20Temperature12readAdressesEv+0x50>
		
		if (getSensortype(addr) == -1) continue;
		 for(int i= 0; i< 8; i++)
		 {
			sensors[Devicecount][i] = addr[i];
    1e16:	8d 91       	ld	r24, X+
    1e18:	81 93       	st	Z+, r24
	 onewire->reset_search();

	 while(onewire->search(addr)) {
		
		if (getSensortype(addr) == -1) continue;
		 for(int i= 0; i< 8; i++)
    1e1a:	e2 17       	cp	r30, r18
    1e1c:	f3 07       	cpc	r31, r19
    1e1e:	d9 f7       	brne	.-10     	; 0x1e16 <_ZN18Ds18S20Temperature12readAdressesEv+0x36>
		 {
			sensors[Devicecount][i] = addr[i];
		 }
		 
		 Devicecount++;
    1e20:	f8 01       	movw	r30, r16
    1e22:	82 81       	ldd	r24, Z+2	; 0x02
    1e24:	93 81       	ldd	r25, Z+3	; 0x03
    1e26:	01 96       	adiw	r24, 0x01	; 1
    1e28:	93 83       	std	Z+3, r25	; 0x03
    1e2a:	82 83       	std	Z+2, r24	; 0x02
		 if (Devicecount> _maxSensors ) break;
    1e2c:	07 97       	sbiw	r24, 0x07	; 7
    1e2e:	fc f4       	brge	.+62     	; 0x1e6e <_ZN18Ds18S20Temperature12readAdressesEv+0x8e>
	 {
		sensors[i][0] =0;
	 }
	 onewire->reset_search();

	 while(onewire->search(addr)) {
    1e30:	41 e0       	ldi	r20, 0x01	; 1
    1e32:	be 01       	movw	r22, r28
    1e34:	6f 5f       	subi	r22, 0xFF	; 255
    1e36:	7f 4f       	sbci	r23, 0xFF	; 255
    1e38:	f8 01       	movw	r30, r16
    1e3a:	80 81       	ld	r24, Z
    1e3c:	91 81       	ldd	r25, Z+1	; 0x01
    1e3e:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN7OneWire6searchEPhb>
    1e42:	88 23       	and	r24, r24
    1e44:	a1 f0       	breq	.+40     	; 0x1e6e <_ZN18Ds18S20Temperature12readAdressesEv+0x8e>
    1e46:	de 01       	movw	r26, r28
    1e48:	11 96       	adiw	r26, 0x01	; 1
    1e4a:	f8 01       	movw	r30, r16
    1e4c:	22 81       	ldd	r18, Z+2	; 0x02
    1e4e:	33 81       	ldd	r19, Z+3	; 0x03
    1e50:	22 0f       	add	r18, r18
    1e52:	33 1f       	adc	r19, r19
    1e54:	22 0f       	add	r18, r18
    1e56:	33 1f       	adc	r19, r19
    1e58:	22 0f       	add	r18, r18
    1e5a:	33 1f       	adc	r19, r19
    1e5c:	f9 01       	movw	r30, r18
    1e5e:	34 96       	adiw	r30, 0x04	; 4
    1e60:	e0 0f       	add	r30, r16
    1e62:	f1 1f       	adc	r31, r17
    1e64:	24 5f       	subi	r18, 0xF4	; 244
    1e66:	3f 4f       	sbci	r19, 0xFF	; 255
    1e68:	20 0f       	add	r18, r16
    1e6a:	31 1f       	adc	r19, r17
    1e6c:	d4 cf       	rjmp	.-88     	; 0x1e16 <_ZN18Ds18S20Temperature12readAdressesEv+0x36>
		 
		 Devicecount++;
		 if (Devicecount> _maxSensors ) break;
	 }
	 return;
 }
    1e6e:	28 96       	adiw	r28, 0x08	; 8
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	de bf       	out	0x3e, r29	; 62
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	cd bf       	out	0x3d, r28	; 61
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	1f 91       	pop	r17
    1e80:	0f 91       	pop	r16
    1e82:	08 95       	ret

00001e84 <_ZN18Ds18S20Temperature5BeginEv>:
	onewire = ow;
}

void Ds18S20Temperature::Begin(void)
{
	readAdresses() ;
    1e84:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_ZN18Ds18S20Temperature12readAdressesEv>
    1e88:	08 95       	ret

00001e8a <_ZN18Ds18S20Temperature9getAdressEiPc>:
	 }
	 return;
 }

 char* Ds18S20Temperature::getAdress(int device, char* buffer)
 {
    1e8a:	0f 93       	push	r16
    1e8c:	1f 93       	push	r17
    1e8e:	cf 93       	push	r28
    1e90:	df 93       	push	r29
    1e92:	04 2f       	mov	r16, r20
    1e94:	15 2f       	mov	r17, r21
 	 if (device < 0 || device > _maxSensors	 )
    1e96:	67 30       	cpi	r22, 0x07	; 7
    1e98:	71 05       	cpc	r23, r1
    1e9a:	50 f0       	brcs	.+20     	; 0x1eb0 <_ZN18Ds18S20Temperature9getAdressEiPc+0x26>
	 {
		strcpy(buffer, "(null)");
    1e9c:	87 e0       	ldi	r24, 0x07	; 7
    1e9e:	e2 e9       	ldi	r30, 0x92	; 146
    1ea0:	f1 e0       	ldi	r31, 0x01	; 1
    1ea2:	a4 2f       	mov	r26, r20
    1ea4:	b5 2f       	mov	r27, r21
    1ea6:	01 90       	ld	r0, Z+
    1ea8:	0d 92       	st	X+, r0
    1eaa:	8a 95       	dec	r24
    1eac:	e1 f7       	brne	.-8      	; 0x1ea6 <_ZN18Ds18S20Temperature9getAdressEiPc+0x1c>
		return buffer;
    1eae:	51 c0       	rjmp	.+162    	; 0x1f52 <_ZN18Ds18S20Temperature9getAdressEiPc+0xc8>
	 }
	 
	 if (sensors[device][0] == '\0' )
    1eb0:	eb 01       	movw	r28, r22
    1eb2:	cc 0f       	add	r28, r28
    1eb4:	dd 1f       	adc	r29, r29
    1eb6:	cc 0f       	add	r28, r28
    1eb8:	dd 1f       	adc	r29, r29
    1eba:	cc 0f       	add	r28, r28
    1ebc:	dd 1f       	adc	r29, r29
    1ebe:	c8 0f       	add	r28, r24
    1ec0:	d9 1f       	adc	r29, r25
    1ec2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ec4:	21 11       	cpse	r18, r1
    1ec6:	0a c0       	rjmp	.+20     	; 0x1edc <_ZN18Ds18S20Temperature9getAdressEiPc+0x52>
	 {
		strcpy(buffer, "(null)");
    1ec8:	87 e0       	ldi	r24, 0x07	; 7
    1eca:	e2 e9       	ldi	r30, 0x92	; 146
    1ecc:	f1 e0       	ldi	r31, 0x01	; 1
    1ece:	a4 2f       	mov	r26, r20
    1ed0:	b5 2f       	mov	r27, r21
    1ed2:	01 90       	ld	r0, Z+
    1ed4:	0d 92       	st	X+, r0
    1ed6:	8a 95       	dec	r24
    1ed8:	e1 f7       	brne	.-8      	; 0x1ed2 <_ZN18Ds18S20Temperature9getAdressEiPc+0x48>
		return buffer;
    1eda:	3b c0       	rjmp	.+118    	; 0x1f52 <_ZN18Ds18S20Temperature9getAdressEiPc+0xc8>
	 }
	sprintf(buffer, "%X%X%X%X%X%X%X%X", sensors[device][0], sensors[device][1],sensors[device][2],sensors[device][3],
										sensors[device][4], sensors[device][5],sensors[device][6],sensors[device][7]);
    1edc:	eb 01       	movw	r28, r22
    1ede:	cc 0f       	add	r28, r28
    1ee0:	dd 1f       	adc	r29, r29
    1ee2:	cc 0f       	add	r28, r28
    1ee4:	dd 1f       	adc	r29, r29
    1ee6:	cc 0f       	add	r28, r28
    1ee8:	dd 1f       	adc	r29, r29
    1eea:	c8 0f       	add	r28, r24
    1eec:	d9 1f       	adc	r29, r25
    1eee:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ef0:	1f 92       	push	r1
    1ef2:	3f 93       	push	r19
    1ef4:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ef6:	1f 92       	push	r1
    1ef8:	3f 93       	push	r19
    1efa:	39 85       	ldd	r19, Y+9	; 0x09
    1efc:	1f 92       	push	r1
    1efe:	3f 93       	push	r19
    1f00:	6f 5f       	subi	r22, 0xFF	; 255
    1f02:	7f 4f       	sbci	r23, 0xFF	; 255
    1f04:	66 0f       	add	r22, r22
    1f06:	77 1f       	adc	r23, r23
    1f08:	66 0f       	add	r22, r22
    1f0a:	77 1f       	adc	r23, r23
    1f0c:	66 0f       	add	r22, r22
    1f0e:	77 1f       	adc	r23, r23
    1f10:	fc 01       	movw	r30, r24
    1f12:	e6 0f       	add	r30, r22
    1f14:	f7 1f       	adc	r31, r23
    1f16:	80 81       	ld	r24, Z
    1f18:	1f 92       	push	r1
    1f1a:	8f 93       	push	r24
    1f1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f1e:	1f 92       	push	r1
    1f20:	8f 93       	push	r24
    1f22:	8e 81       	ldd	r24, Y+6	; 0x06
    1f24:	1f 92       	push	r1
    1f26:	8f 93       	push	r24
    1f28:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2a:	1f 92       	push	r1
    1f2c:	8f 93       	push	r24
    1f2e:	1f 92       	push	r1
    1f30:	2f 93       	push	r18
    1f32:	89 e9       	ldi	r24, 0x99	; 153
    1f34:	91 e0       	ldi	r25, 0x01	; 1
    1f36:	9f 93       	push	r25
    1f38:	8f 93       	push	r24
    1f3a:	5f 93       	push	r21
    1f3c:	4f 93       	push	r20
    1f3e:	0e 94 19 12 	call	0x2432	; 0x2432 <sprintf>
	return buffer;
    1f42:	8d b7       	in	r24, 0x3d	; 61
    1f44:	9e b7       	in	r25, 0x3e	; 62
    1f46:	44 96       	adiw	r24, 0x14	; 20
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	f8 94       	cli
    1f4c:	9e bf       	out	0x3e, r25	; 62
    1f4e:	0f be       	out	0x3f, r0	; 63
    1f50:	8d bf       	out	0x3d, r24	; 61
 }
    1f52:	80 2f       	mov	r24, r16
    1f54:	91 2f       	mov	r25, r17
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	1f 91       	pop	r17
    1f5c:	0f 91       	pop	r16
    1f5e:	08 95       	ret

00001f60 <__subsf3>:
    1f60:	50 58       	subi	r21, 0x80	; 128

00001f62 <__addsf3>:
    1f62:	bb 27       	eor	r27, r27
    1f64:	aa 27       	eor	r26, r26
    1f66:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__addsf3x>
    1f6a:	0c 94 3b 11 	jmp	0x2276	; 0x2276 <__fp_round>
    1f6e:	0e 94 2d 11 	call	0x225a	; 0x225a <__fp_pscA>
    1f72:	38 f0       	brcs	.+14     	; 0x1f82 <__addsf3+0x20>
    1f74:	0e 94 34 11 	call	0x2268	; 0x2268 <__fp_pscB>
    1f78:	20 f0       	brcs	.+8      	; 0x1f82 <__addsf3+0x20>
    1f7a:	39 f4       	brne	.+14     	; 0x1f8a <__addsf3+0x28>
    1f7c:	9f 3f       	cpi	r25, 0xFF	; 255
    1f7e:	19 f4       	brne	.+6      	; 0x1f86 <__addsf3+0x24>
    1f80:	26 f4       	brtc	.+8      	; 0x1f8a <__addsf3+0x28>
    1f82:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <__fp_nan>
    1f86:	0e f4       	brtc	.+2      	; 0x1f8a <__addsf3+0x28>
    1f88:	e0 95       	com	r30
    1f8a:	e7 fb       	bst	r30, 7
    1f8c:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__fp_inf>

00001f90 <__addsf3x>:
    1f90:	e9 2f       	mov	r30, r25
    1f92:	0e 94 4c 11 	call	0x2298	; 0x2298 <__fp_split3>
    1f96:	58 f3       	brcs	.-42     	; 0x1f6e <__addsf3+0xc>
    1f98:	ba 17       	cp	r27, r26
    1f9a:	62 07       	cpc	r22, r18
    1f9c:	73 07       	cpc	r23, r19
    1f9e:	84 07       	cpc	r24, r20
    1fa0:	95 07       	cpc	r25, r21
    1fa2:	20 f0       	brcs	.+8      	; 0x1fac <__addsf3x+0x1c>
    1fa4:	79 f4       	brne	.+30     	; 0x1fc4 <__addsf3x+0x34>
    1fa6:	a6 f5       	brtc	.+104    	; 0x2010 <__addsf3x+0x80>
    1fa8:	0c 94 6e 11 	jmp	0x22dc	; 0x22dc <__fp_zero>
    1fac:	0e f4       	brtc	.+2      	; 0x1fb0 <__addsf3x+0x20>
    1fae:	e0 95       	com	r30
    1fb0:	0b 2e       	mov	r0, r27
    1fb2:	ba 2f       	mov	r27, r26
    1fb4:	a0 2d       	mov	r26, r0
    1fb6:	0b 01       	movw	r0, r22
    1fb8:	b9 01       	movw	r22, r18
    1fba:	90 01       	movw	r18, r0
    1fbc:	0c 01       	movw	r0, r24
    1fbe:	ca 01       	movw	r24, r20
    1fc0:	a0 01       	movw	r20, r0
    1fc2:	11 24       	eor	r1, r1
    1fc4:	ff 27       	eor	r31, r31
    1fc6:	59 1b       	sub	r21, r25
    1fc8:	99 f0       	breq	.+38     	; 0x1ff0 <__addsf3x+0x60>
    1fca:	59 3f       	cpi	r21, 0xF9	; 249
    1fcc:	50 f4       	brcc	.+20     	; 0x1fe2 <__addsf3x+0x52>
    1fce:	50 3e       	cpi	r21, 0xE0	; 224
    1fd0:	68 f1       	brcs	.+90     	; 0x202c <__addsf3x+0x9c>
    1fd2:	1a 16       	cp	r1, r26
    1fd4:	f0 40       	sbci	r31, 0x00	; 0
    1fd6:	a2 2f       	mov	r26, r18
    1fd8:	23 2f       	mov	r18, r19
    1fda:	34 2f       	mov	r19, r20
    1fdc:	44 27       	eor	r20, r20
    1fde:	58 5f       	subi	r21, 0xF8	; 248
    1fe0:	f3 cf       	rjmp	.-26     	; 0x1fc8 <__addsf3x+0x38>
    1fe2:	46 95       	lsr	r20
    1fe4:	37 95       	ror	r19
    1fe6:	27 95       	ror	r18
    1fe8:	a7 95       	ror	r26
    1fea:	f0 40       	sbci	r31, 0x00	; 0
    1fec:	53 95       	inc	r21
    1fee:	c9 f7       	brne	.-14     	; 0x1fe2 <__addsf3x+0x52>
    1ff0:	7e f4       	brtc	.+30     	; 0x2010 <__addsf3x+0x80>
    1ff2:	1f 16       	cp	r1, r31
    1ff4:	ba 0b       	sbc	r27, r26
    1ff6:	62 0b       	sbc	r22, r18
    1ff8:	73 0b       	sbc	r23, r19
    1ffa:	84 0b       	sbc	r24, r20
    1ffc:	ba f0       	brmi	.+46     	; 0x202c <__addsf3x+0x9c>
    1ffe:	91 50       	subi	r25, 0x01	; 1
    2000:	a1 f0       	breq	.+40     	; 0x202a <__addsf3x+0x9a>
    2002:	ff 0f       	add	r31, r31
    2004:	bb 1f       	adc	r27, r27
    2006:	66 1f       	adc	r22, r22
    2008:	77 1f       	adc	r23, r23
    200a:	88 1f       	adc	r24, r24
    200c:	c2 f7       	brpl	.-16     	; 0x1ffe <__addsf3x+0x6e>
    200e:	0e c0       	rjmp	.+28     	; 0x202c <__addsf3x+0x9c>
    2010:	ba 0f       	add	r27, r26
    2012:	62 1f       	adc	r22, r18
    2014:	73 1f       	adc	r23, r19
    2016:	84 1f       	adc	r24, r20
    2018:	48 f4       	brcc	.+18     	; 0x202c <__addsf3x+0x9c>
    201a:	87 95       	ror	r24
    201c:	77 95       	ror	r23
    201e:	67 95       	ror	r22
    2020:	b7 95       	ror	r27
    2022:	f7 95       	ror	r31
    2024:	9e 3f       	cpi	r25, 0xFE	; 254
    2026:	08 f0       	brcs	.+2      	; 0x202a <__addsf3x+0x9a>
    2028:	b0 cf       	rjmp	.-160    	; 0x1f8a <__addsf3+0x28>
    202a:	93 95       	inc	r25
    202c:	88 0f       	add	r24, r24
    202e:	08 f0       	brcs	.+2      	; 0x2032 <__addsf3x+0xa2>
    2030:	99 27       	eor	r25, r25
    2032:	ee 0f       	add	r30, r30
    2034:	97 95       	ror	r25
    2036:	87 95       	ror	r24
    2038:	08 95       	ret

0000203a <__cmpsf2>:
    203a:	0e 94 00 11 	call	0x2200	; 0x2200 <__fp_cmp>
    203e:	08 f4       	brcc	.+2      	; 0x2042 <__cmpsf2+0x8>
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	08 95       	ret

00002044 <__divsf3>:
    2044:	0e 94 36 10 	call	0x206c	; 0x206c <__divsf3x>
    2048:	0c 94 3b 11 	jmp	0x2276	; 0x2276 <__fp_round>
    204c:	0e 94 34 11 	call	0x2268	; 0x2268 <__fp_pscB>
    2050:	58 f0       	brcs	.+22     	; 0x2068 <__divsf3+0x24>
    2052:	0e 94 2d 11 	call	0x225a	; 0x225a <__fp_pscA>
    2056:	40 f0       	brcs	.+16     	; 0x2068 <__divsf3+0x24>
    2058:	29 f4       	brne	.+10     	; 0x2064 <__divsf3+0x20>
    205a:	5f 3f       	cpi	r21, 0xFF	; 255
    205c:	29 f0       	breq	.+10     	; 0x2068 <__divsf3+0x24>
    205e:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__fp_inf>
    2062:	51 11       	cpse	r21, r1
    2064:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__fp_szero>
    2068:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <__fp_nan>

0000206c <__divsf3x>:
    206c:	0e 94 4c 11 	call	0x2298	; 0x2298 <__fp_split3>
    2070:	68 f3       	brcs	.-38     	; 0x204c <__divsf3+0x8>

00002072 <__divsf3_pse>:
    2072:	99 23       	and	r25, r25
    2074:	b1 f3       	breq	.-20     	; 0x2062 <__divsf3+0x1e>
    2076:	55 23       	and	r21, r21
    2078:	91 f3       	breq	.-28     	; 0x205e <__divsf3+0x1a>
    207a:	95 1b       	sub	r25, r21
    207c:	55 0b       	sbc	r21, r21
    207e:	bb 27       	eor	r27, r27
    2080:	aa 27       	eor	r26, r26
    2082:	62 17       	cp	r22, r18
    2084:	73 07       	cpc	r23, r19
    2086:	84 07       	cpc	r24, r20
    2088:	38 f0       	brcs	.+14     	; 0x2098 <__divsf3_pse+0x26>
    208a:	9f 5f       	subi	r25, 0xFF	; 255
    208c:	5f 4f       	sbci	r21, 0xFF	; 255
    208e:	22 0f       	add	r18, r18
    2090:	33 1f       	adc	r19, r19
    2092:	44 1f       	adc	r20, r20
    2094:	aa 1f       	adc	r26, r26
    2096:	a9 f3       	breq	.-22     	; 0x2082 <__divsf3_pse+0x10>
    2098:	35 d0       	rcall	.+106    	; 0x2104 <__divsf3_pse+0x92>
    209a:	0e 2e       	mov	r0, r30
    209c:	3a f0       	brmi	.+14     	; 0x20ac <__divsf3_pse+0x3a>
    209e:	e0 e8       	ldi	r30, 0x80	; 128
    20a0:	32 d0       	rcall	.+100    	; 0x2106 <__divsf3_pse+0x94>
    20a2:	91 50       	subi	r25, 0x01	; 1
    20a4:	50 40       	sbci	r21, 0x00	; 0
    20a6:	e6 95       	lsr	r30
    20a8:	00 1c       	adc	r0, r0
    20aa:	ca f7       	brpl	.-14     	; 0x209e <__divsf3_pse+0x2c>
    20ac:	2b d0       	rcall	.+86     	; 0x2104 <__divsf3_pse+0x92>
    20ae:	fe 2f       	mov	r31, r30
    20b0:	29 d0       	rcall	.+82     	; 0x2104 <__divsf3_pse+0x92>
    20b2:	66 0f       	add	r22, r22
    20b4:	77 1f       	adc	r23, r23
    20b6:	88 1f       	adc	r24, r24
    20b8:	bb 1f       	adc	r27, r27
    20ba:	26 17       	cp	r18, r22
    20bc:	37 07       	cpc	r19, r23
    20be:	48 07       	cpc	r20, r24
    20c0:	ab 07       	cpc	r26, r27
    20c2:	b0 e8       	ldi	r27, 0x80	; 128
    20c4:	09 f0       	breq	.+2      	; 0x20c8 <__divsf3_pse+0x56>
    20c6:	bb 0b       	sbc	r27, r27
    20c8:	80 2d       	mov	r24, r0
    20ca:	bf 01       	movw	r22, r30
    20cc:	ff 27       	eor	r31, r31
    20ce:	93 58       	subi	r25, 0x83	; 131
    20d0:	5f 4f       	sbci	r21, 0xFF	; 255
    20d2:	3a f0       	brmi	.+14     	; 0x20e2 <__divsf3_pse+0x70>
    20d4:	9e 3f       	cpi	r25, 0xFE	; 254
    20d6:	51 05       	cpc	r21, r1
    20d8:	78 f0       	brcs	.+30     	; 0x20f8 <__divsf3_pse+0x86>
    20da:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__fp_inf>
    20de:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__fp_szero>
    20e2:	5f 3f       	cpi	r21, 0xFF	; 255
    20e4:	e4 f3       	brlt	.-8      	; 0x20de <__divsf3_pse+0x6c>
    20e6:	98 3e       	cpi	r25, 0xE8	; 232
    20e8:	d4 f3       	brlt	.-12     	; 0x20de <__divsf3_pse+0x6c>
    20ea:	86 95       	lsr	r24
    20ec:	77 95       	ror	r23
    20ee:	67 95       	ror	r22
    20f0:	b7 95       	ror	r27
    20f2:	f7 95       	ror	r31
    20f4:	9f 5f       	subi	r25, 0xFF	; 255
    20f6:	c9 f7       	brne	.-14     	; 0x20ea <__divsf3_pse+0x78>
    20f8:	88 0f       	add	r24, r24
    20fa:	91 1d       	adc	r25, r1
    20fc:	96 95       	lsr	r25
    20fe:	87 95       	ror	r24
    2100:	97 f9       	bld	r25, 7
    2102:	08 95       	ret
    2104:	e1 e0       	ldi	r30, 0x01	; 1
    2106:	66 0f       	add	r22, r22
    2108:	77 1f       	adc	r23, r23
    210a:	88 1f       	adc	r24, r24
    210c:	bb 1f       	adc	r27, r27
    210e:	62 17       	cp	r22, r18
    2110:	73 07       	cpc	r23, r19
    2112:	84 07       	cpc	r24, r20
    2114:	ba 07       	cpc	r27, r26
    2116:	20 f0       	brcs	.+8      	; 0x2120 <__divsf3_pse+0xae>
    2118:	62 1b       	sub	r22, r18
    211a:	73 0b       	sbc	r23, r19
    211c:	84 0b       	sbc	r24, r20
    211e:	ba 0b       	sbc	r27, r26
    2120:	ee 1f       	adc	r30, r30
    2122:	88 f7       	brcc	.-30     	; 0x2106 <__divsf3_pse+0x94>
    2124:	e0 95       	com	r30
    2126:	08 95       	ret

00002128 <__fixunssfsi>:
    2128:	0e 94 54 11 	call	0x22a8	; 0x22a8 <__fp_splitA>
    212c:	88 f0       	brcs	.+34     	; 0x2150 <__fixunssfsi+0x28>
    212e:	9f 57       	subi	r25, 0x7F	; 127
    2130:	98 f0       	brcs	.+38     	; 0x2158 <__fixunssfsi+0x30>
    2132:	b9 2f       	mov	r27, r25
    2134:	99 27       	eor	r25, r25
    2136:	b7 51       	subi	r27, 0x17	; 23
    2138:	b0 f0       	brcs	.+44     	; 0x2166 <__fixunssfsi+0x3e>
    213a:	e1 f0       	breq	.+56     	; 0x2174 <__fixunssfsi+0x4c>
    213c:	66 0f       	add	r22, r22
    213e:	77 1f       	adc	r23, r23
    2140:	88 1f       	adc	r24, r24
    2142:	99 1f       	adc	r25, r25
    2144:	1a f0       	brmi	.+6      	; 0x214c <__fixunssfsi+0x24>
    2146:	ba 95       	dec	r27
    2148:	c9 f7       	brne	.-14     	; 0x213c <__fixunssfsi+0x14>
    214a:	14 c0       	rjmp	.+40     	; 0x2174 <__fixunssfsi+0x4c>
    214c:	b1 30       	cpi	r27, 0x01	; 1
    214e:	91 f0       	breq	.+36     	; 0x2174 <__fixunssfsi+0x4c>
    2150:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__fp_zero>
    2154:	b1 e0       	ldi	r27, 0x01	; 1
    2156:	08 95       	ret
    2158:	0c 94 6e 11 	jmp	0x22dc	; 0x22dc <__fp_zero>
    215c:	67 2f       	mov	r22, r23
    215e:	78 2f       	mov	r23, r24
    2160:	88 27       	eor	r24, r24
    2162:	b8 5f       	subi	r27, 0xF8	; 248
    2164:	39 f0       	breq	.+14     	; 0x2174 <__fixunssfsi+0x4c>
    2166:	b9 3f       	cpi	r27, 0xF9	; 249
    2168:	cc f3       	brlt	.-14     	; 0x215c <__fixunssfsi+0x34>
    216a:	86 95       	lsr	r24
    216c:	77 95       	ror	r23
    216e:	67 95       	ror	r22
    2170:	b3 95       	inc	r27
    2172:	d9 f7       	brne	.-10     	; 0x216a <__fixunssfsi+0x42>
    2174:	3e f4       	brtc	.+14     	; 0x2184 <__fixunssfsi+0x5c>
    2176:	90 95       	com	r25
    2178:	80 95       	com	r24
    217a:	70 95       	com	r23
    217c:	61 95       	neg	r22
    217e:	7f 4f       	sbci	r23, 0xFF	; 255
    2180:	8f 4f       	sbci	r24, 0xFF	; 255
    2182:	9f 4f       	sbci	r25, 0xFF	; 255
    2184:	08 95       	ret

00002186 <__floatunsisf>:
    2186:	e8 94       	clt
    2188:	09 c0       	rjmp	.+18     	; 0x219c <__floatsisf+0x12>

0000218a <__floatsisf>:
    218a:	97 fb       	bst	r25, 7
    218c:	3e f4       	brtc	.+14     	; 0x219c <__floatsisf+0x12>
    218e:	90 95       	com	r25
    2190:	80 95       	com	r24
    2192:	70 95       	com	r23
    2194:	61 95       	neg	r22
    2196:	7f 4f       	sbci	r23, 0xFF	; 255
    2198:	8f 4f       	sbci	r24, 0xFF	; 255
    219a:	9f 4f       	sbci	r25, 0xFF	; 255
    219c:	99 23       	and	r25, r25
    219e:	a9 f0       	breq	.+42     	; 0x21ca <__floatsisf+0x40>
    21a0:	f9 2f       	mov	r31, r25
    21a2:	96 e9       	ldi	r25, 0x96	; 150
    21a4:	bb 27       	eor	r27, r27
    21a6:	93 95       	inc	r25
    21a8:	f6 95       	lsr	r31
    21aa:	87 95       	ror	r24
    21ac:	77 95       	ror	r23
    21ae:	67 95       	ror	r22
    21b0:	b7 95       	ror	r27
    21b2:	f1 11       	cpse	r31, r1
    21b4:	f8 cf       	rjmp	.-16     	; 0x21a6 <__floatsisf+0x1c>
    21b6:	fa f4       	brpl	.+62     	; 0x21f6 <__floatsisf+0x6c>
    21b8:	bb 0f       	add	r27, r27
    21ba:	11 f4       	brne	.+4      	; 0x21c0 <__floatsisf+0x36>
    21bc:	60 ff       	sbrs	r22, 0
    21be:	1b c0       	rjmp	.+54     	; 0x21f6 <__floatsisf+0x6c>
    21c0:	6f 5f       	subi	r22, 0xFF	; 255
    21c2:	7f 4f       	sbci	r23, 0xFF	; 255
    21c4:	8f 4f       	sbci	r24, 0xFF	; 255
    21c6:	9f 4f       	sbci	r25, 0xFF	; 255
    21c8:	16 c0       	rjmp	.+44     	; 0x21f6 <__floatsisf+0x6c>
    21ca:	88 23       	and	r24, r24
    21cc:	11 f0       	breq	.+4      	; 0x21d2 <__floatsisf+0x48>
    21ce:	96 e9       	ldi	r25, 0x96	; 150
    21d0:	11 c0       	rjmp	.+34     	; 0x21f4 <__floatsisf+0x6a>
    21d2:	77 23       	and	r23, r23
    21d4:	21 f0       	breq	.+8      	; 0x21de <__floatsisf+0x54>
    21d6:	9e e8       	ldi	r25, 0x8E	; 142
    21d8:	87 2f       	mov	r24, r23
    21da:	76 2f       	mov	r23, r22
    21dc:	05 c0       	rjmp	.+10     	; 0x21e8 <__floatsisf+0x5e>
    21de:	66 23       	and	r22, r22
    21e0:	71 f0       	breq	.+28     	; 0x21fe <__floatsisf+0x74>
    21e2:	96 e8       	ldi	r25, 0x86	; 134
    21e4:	86 2f       	mov	r24, r22
    21e6:	70 e0       	ldi	r23, 0x00	; 0
    21e8:	60 e0       	ldi	r22, 0x00	; 0
    21ea:	2a f0       	brmi	.+10     	; 0x21f6 <__floatsisf+0x6c>
    21ec:	9a 95       	dec	r25
    21ee:	66 0f       	add	r22, r22
    21f0:	77 1f       	adc	r23, r23
    21f2:	88 1f       	adc	r24, r24
    21f4:	da f7       	brpl	.-10     	; 0x21ec <__floatsisf+0x62>
    21f6:	88 0f       	add	r24, r24
    21f8:	96 95       	lsr	r25
    21fa:	87 95       	ror	r24
    21fc:	97 f9       	bld	r25, 7
    21fe:	08 95       	ret

00002200 <__fp_cmp>:
    2200:	99 0f       	add	r25, r25
    2202:	00 08       	sbc	r0, r0
    2204:	55 0f       	add	r21, r21
    2206:	aa 0b       	sbc	r26, r26
    2208:	e0 e8       	ldi	r30, 0x80	; 128
    220a:	fe ef       	ldi	r31, 0xFE	; 254
    220c:	16 16       	cp	r1, r22
    220e:	17 06       	cpc	r1, r23
    2210:	e8 07       	cpc	r30, r24
    2212:	f9 07       	cpc	r31, r25
    2214:	c0 f0       	brcs	.+48     	; 0x2246 <__fp_cmp+0x46>
    2216:	12 16       	cp	r1, r18
    2218:	13 06       	cpc	r1, r19
    221a:	e4 07       	cpc	r30, r20
    221c:	f5 07       	cpc	r31, r21
    221e:	98 f0       	brcs	.+38     	; 0x2246 <__fp_cmp+0x46>
    2220:	62 1b       	sub	r22, r18
    2222:	73 0b       	sbc	r23, r19
    2224:	84 0b       	sbc	r24, r20
    2226:	95 0b       	sbc	r25, r21
    2228:	39 f4       	brne	.+14     	; 0x2238 <__fp_cmp+0x38>
    222a:	0a 26       	eor	r0, r26
    222c:	61 f0       	breq	.+24     	; 0x2246 <__fp_cmp+0x46>
    222e:	23 2b       	or	r18, r19
    2230:	24 2b       	or	r18, r20
    2232:	25 2b       	or	r18, r21
    2234:	21 f4       	brne	.+8      	; 0x223e <__fp_cmp+0x3e>
    2236:	08 95       	ret
    2238:	0a 26       	eor	r0, r26
    223a:	09 f4       	brne	.+2      	; 0x223e <__fp_cmp+0x3e>
    223c:	a1 40       	sbci	r26, 0x01	; 1
    223e:	a6 95       	lsr	r26
    2240:	8f ef       	ldi	r24, 0xFF	; 255
    2242:	81 1d       	adc	r24, r1
    2244:	81 1d       	adc	r24, r1
    2246:	08 95       	ret

00002248 <__fp_inf>:
    2248:	97 f9       	bld	r25, 7
    224a:	9f 67       	ori	r25, 0x7F	; 127
    224c:	80 e8       	ldi	r24, 0x80	; 128
    224e:	70 e0       	ldi	r23, 0x00	; 0
    2250:	60 e0       	ldi	r22, 0x00	; 0
    2252:	08 95       	ret

00002254 <__fp_nan>:
    2254:	9f ef       	ldi	r25, 0xFF	; 255
    2256:	80 ec       	ldi	r24, 0xC0	; 192
    2258:	08 95       	ret

0000225a <__fp_pscA>:
    225a:	00 24       	eor	r0, r0
    225c:	0a 94       	dec	r0
    225e:	16 16       	cp	r1, r22
    2260:	17 06       	cpc	r1, r23
    2262:	18 06       	cpc	r1, r24
    2264:	09 06       	cpc	r0, r25
    2266:	08 95       	ret

00002268 <__fp_pscB>:
    2268:	00 24       	eor	r0, r0
    226a:	0a 94       	dec	r0
    226c:	12 16       	cp	r1, r18
    226e:	13 06       	cpc	r1, r19
    2270:	14 06       	cpc	r1, r20
    2272:	05 06       	cpc	r0, r21
    2274:	08 95       	ret

00002276 <__fp_round>:
    2276:	09 2e       	mov	r0, r25
    2278:	03 94       	inc	r0
    227a:	00 0c       	add	r0, r0
    227c:	11 f4       	brne	.+4      	; 0x2282 <__fp_round+0xc>
    227e:	88 23       	and	r24, r24
    2280:	52 f0       	brmi	.+20     	; 0x2296 <__fp_round+0x20>
    2282:	bb 0f       	add	r27, r27
    2284:	40 f4       	brcc	.+16     	; 0x2296 <__fp_round+0x20>
    2286:	bf 2b       	or	r27, r31
    2288:	11 f4       	brne	.+4      	; 0x228e <__fp_round+0x18>
    228a:	60 ff       	sbrs	r22, 0
    228c:	04 c0       	rjmp	.+8      	; 0x2296 <__fp_round+0x20>
    228e:	6f 5f       	subi	r22, 0xFF	; 255
    2290:	7f 4f       	sbci	r23, 0xFF	; 255
    2292:	8f 4f       	sbci	r24, 0xFF	; 255
    2294:	9f 4f       	sbci	r25, 0xFF	; 255
    2296:	08 95       	ret

00002298 <__fp_split3>:
    2298:	57 fd       	sbrc	r21, 7
    229a:	90 58       	subi	r25, 0x80	; 128
    229c:	44 0f       	add	r20, r20
    229e:	55 1f       	adc	r21, r21
    22a0:	59 f0       	breq	.+22     	; 0x22b8 <__fp_splitA+0x10>
    22a2:	5f 3f       	cpi	r21, 0xFF	; 255
    22a4:	71 f0       	breq	.+28     	; 0x22c2 <__fp_splitA+0x1a>
    22a6:	47 95       	ror	r20

000022a8 <__fp_splitA>:
    22a8:	88 0f       	add	r24, r24
    22aa:	97 fb       	bst	r25, 7
    22ac:	99 1f       	adc	r25, r25
    22ae:	61 f0       	breq	.+24     	; 0x22c8 <__fp_splitA+0x20>
    22b0:	9f 3f       	cpi	r25, 0xFF	; 255
    22b2:	79 f0       	breq	.+30     	; 0x22d2 <__fp_splitA+0x2a>
    22b4:	87 95       	ror	r24
    22b6:	08 95       	ret
    22b8:	12 16       	cp	r1, r18
    22ba:	13 06       	cpc	r1, r19
    22bc:	14 06       	cpc	r1, r20
    22be:	55 1f       	adc	r21, r21
    22c0:	f2 cf       	rjmp	.-28     	; 0x22a6 <__fp_split3+0xe>
    22c2:	46 95       	lsr	r20
    22c4:	f1 df       	rcall	.-30     	; 0x22a8 <__fp_splitA>
    22c6:	08 c0       	rjmp	.+16     	; 0x22d8 <__fp_splitA+0x30>
    22c8:	16 16       	cp	r1, r22
    22ca:	17 06       	cpc	r1, r23
    22cc:	18 06       	cpc	r1, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	f1 cf       	rjmp	.-30     	; 0x22b4 <__fp_splitA+0xc>
    22d2:	86 95       	lsr	r24
    22d4:	71 05       	cpc	r23, r1
    22d6:	61 05       	cpc	r22, r1
    22d8:	08 94       	sec
    22da:	08 95       	ret

000022dc <__fp_zero>:
    22dc:	e8 94       	clt

000022de <__fp_szero>:
    22de:	bb 27       	eor	r27, r27
    22e0:	66 27       	eor	r22, r22
    22e2:	77 27       	eor	r23, r23
    22e4:	cb 01       	movw	r24, r22
    22e6:	97 f9       	bld	r25, 7
    22e8:	08 95       	ret

000022ea <__gesf2>:
    22ea:	0e 94 00 11 	call	0x2200	; 0x2200 <__fp_cmp>
    22ee:	08 f4       	brcc	.+2      	; 0x22f2 <__gesf2+0x8>
    22f0:	8f ef       	ldi	r24, 0xFF	; 255
    22f2:	08 95       	ret

000022f4 <__mulsf3>:
    22f4:	0e 94 8d 11 	call	0x231a	; 0x231a <__mulsf3x>
    22f8:	0c 94 3b 11 	jmp	0x2276	; 0x2276 <__fp_round>
    22fc:	0e 94 2d 11 	call	0x225a	; 0x225a <__fp_pscA>
    2300:	38 f0       	brcs	.+14     	; 0x2310 <__mulsf3+0x1c>
    2302:	0e 94 34 11 	call	0x2268	; 0x2268 <__fp_pscB>
    2306:	20 f0       	brcs	.+8      	; 0x2310 <__mulsf3+0x1c>
    2308:	95 23       	and	r25, r21
    230a:	11 f0       	breq	.+4      	; 0x2310 <__mulsf3+0x1c>
    230c:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__fp_inf>
    2310:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <__fp_nan>
    2314:	11 24       	eor	r1, r1
    2316:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__fp_szero>

0000231a <__mulsf3x>:
    231a:	0e 94 4c 11 	call	0x2298	; 0x2298 <__fp_split3>
    231e:	70 f3       	brcs	.-36     	; 0x22fc <__mulsf3+0x8>

00002320 <__mulsf3_pse>:
    2320:	95 9f       	mul	r25, r21
    2322:	c1 f3       	breq	.-16     	; 0x2314 <__mulsf3+0x20>
    2324:	95 0f       	add	r25, r21
    2326:	50 e0       	ldi	r21, 0x00	; 0
    2328:	55 1f       	adc	r21, r21
    232a:	62 9f       	mul	r22, r18
    232c:	f0 01       	movw	r30, r0
    232e:	72 9f       	mul	r23, r18
    2330:	bb 27       	eor	r27, r27
    2332:	f0 0d       	add	r31, r0
    2334:	b1 1d       	adc	r27, r1
    2336:	63 9f       	mul	r22, r19
    2338:	aa 27       	eor	r26, r26
    233a:	f0 0d       	add	r31, r0
    233c:	b1 1d       	adc	r27, r1
    233e:	aa 1f       	adc	r26, r26
    2340:	64 9f       	mul	r22, r20
    2342:	66 27       	eor	r22, r22
    2344:	b0 0d       	add	r27, r0
    2346:	a1 1d       	adc	r26, r1
    2348:	66 1f       	adc	r22, r22
    234a:	82 9f       	mul	r24, r18
    234c:	22 27       	eor	r18, r18
    234e:	b0 0d       	add	r27, r0
    2350:	a1 1d       	adc	r26, r1
    2352:	62 1f       	adc	r22, r18
    2354:	73 9f       	mul	r23, r19
    2356:	b0 0d       	add	r27, r0
    2358:	a1 1d       	adc	r26, r1
    235a:	62 1f       	adc	r22, r18
    235c:	83 9f       	mul	r24, r19
    235e:	a0 0d       	add	r26, r0
    2360:	61 1d       	adc	r22, r1
    2362:	22 1f       	adc	r18, r18
    2364:	74 9f       	mul	r23, r20
    2366:	33 27       	eor	r19, r19
    2368:	a0 0d       	add	r26, r0
    236a:	61 1d       	adc	r22, r1
    236c:	23 1f       	adc	r18, r19
    236e:	84 9f       	mul	r24, r20
    2370:	60 0d       	add	r22, r0
    2372:	21 1d       	adc	r18, r1
    2374:	82 2f       	mov	r24, r18
    2376:	76 2f       	mov	r23, r22
    2378:	6a 2f       	mov	r22, r26
    237a:	11 24       	eor	r1, r1
    237c:	9f 57       	subi	r25, 0x7F	; 127
    237e:	50 40       	sbci	r21, 0x00	; 0
    2380:	9a f0       	brmi	.+38     	; 0x23a8 <__mulsf3_pse+0x88>
    2382:	f1 f0       	breq	.+60     	; 0x23c0 <__mulsf3_pse+0xa0>
    2384:	88 23       	and	r24, r24
    2386:	4a f0       	brmi	.+18     	; 0x239a <__mulsf3_pse+0x7a>
    2388:	ee 0f       	add	r30, r30
    238a:	ff 1f       	adc	r31, r31
    238c:	bb 1f       	adc	r27, r27
    238e:	66 1f       	adc	r22, r22
    2390:	77 1f       	adc	r23, r23
    2392:	88 1f       	adc	r24, r24
    2394:	91 50       	subi	r25, 0x01	; 1
    2396:	50 40       	sbci	r21, 0x00	; 0
    2398:	a9 f7       	brne	.-22     	; 0x2384 <__mulsf3_pse+0x64>
    239a:	9e 3f       	cpi	r25, 0xFE	; 254
    239c:	51 05       	cpc	r21, r1
    239e:	80 f0       	brcs	.+32     	; 0x23c0 <__mulsf3_pse+0xa0>
    23a0:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__fp_inf>
    23a4:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__fp_szero>
    23a8:	5f 3f       	cpi	r21, 0xFF	; 255
    23aa:	e4 f3       	brlt	.-8      	; 0x23a4 <__mulsf3_pse+0x84>
    23ac:	98 3e       	cpi	r25, 0xE8	; 232
    23ae:	d4 f3       	brlt	.-12     	; 0x23a4 <__mulsf3_pse+0x84>
    23b0:	86 95       	lsr	r24
    23b2:	77 95       	ror	r23
    23b4:	67 95       	ror	r22
    23b6:	b7 95       	ror	r27
    23b8:	f7 95       	ror	r31
    23ba:	e7 95       	ror	r30
    23bc:	9f 5f       	subi	r25, 0xFF	; 255
    23be:	c1 f7       	brne	.-16     	; 0x23b0 <__mulsf3_pse+0x90>
    23c0:	fe 2b       	or	r31, r30
    23c2:	88 0f       	add	r24, r24
    23c4:	91 1d       	adc	r25, r1
    23c6:	96 95       	lsr	r25
    23c8:	87 95       	ror	r24
    23ca:	97 f9       	bld	r25, 7
    23cc:	08 95       	ret

000023ce <__unordsf2>:
    23ce:	0e 94 00 11 	call	0x2200	; 0x2200 <__fp_cmp>
    23d2:	88 0b       	sbc	r24, r24
    23d4:	99 0b       	sbc	r25, r25
    23d6:	08 95       	ret

000023d8 <__udivmodsi4>:
    23d8:	a1 e2       	ldi	r26, 0x21	; 33
    23da:	1a 2e       	mov	r1, r26
    23dc:	aa 1b       	sub	r26, r26
    23de:	bb 1b       	sub	r27, r27
    23e0:	fd 01       	movw	r30, r26
    23e2:	0d c0       	rjmp	.+26     	; 0x23fe <__udivmodsi4_ep>

000023e4 <__udivmodsi4_loop>:
    23e4:	aa 1f       	adc	r26, r26
    23e6:	bb 1f       	adc	r27, r27
    23e8:	ee 1f       	adc	r30, r30
    23ea:	ff 1f       	adc	r31, r31
    23ec:	a2 17       	cp	r26, r18
    23ee:	b3 07       	cpc	r27, r19
    23f0:	e4 07       	cpc	r30, r20
    23f2:	f5 07       	cpc	r31, r21
    23f4:	20 f0       	brcs	.+8      	; 0x23fe <__udivmodsi4_ep>
    23f6:	a2 1b       	sub	r26, r18
    23f8:	b3 0b       	sbc	r27, r19
    23fa:	e4 0b       	sbc	r30, r20
    23fc:	f5 0b       	sbc	r31, r21

000023fe <__udivmodsi4_ep>:
    23fe:	66 1f       	adc	r22, r22
    2400:	77 1f       	adc	r23, r23
    2402:	88 1f       	adc	r24, r24
    2404:	99 1f       	adc	r25, r25
    2406:	1a 94       	dec	r1
    2408:	69 f7       	brne	.-38     	; 0x23e4 <__udivmodsi4_loop>
    240a:	60 95       	com	r22
    240c:	70 95       	com	r23
    240e:	80 95       	com	r24
    2410:	90 95       	com	r25
    2412:	9b 01       	movw	r18, r22
    2414:	ac 01       	movw	r20, r24
    2416:	bd 01       	movw	r22, r26
    2418:	cf 01       	movw	r24, r30
    241a:	08 95       	ret

0000241c <__tablejump2__>:
    241c:	ee 0f       	add	r30, r30
    241e:	ff 1f       	adc	r31, r31
    2420:	05 90       	lpm	r0, Z+
    2422:	f4 91       	lpm	r31, Z
    2424:	e0 2d       	mov	r30, r0
    2426:	09 94       	ijmp

00002428 <abort>:
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	f8 94       	cli
    242e:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <_exit>

00002432 <sprintf>:
    2432:	ae e0       	ldi	r26, 0x0E	; 14
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	ef e1       	ldi	r30, 0x1F	; 31
    2438:	f2 e1       	ldi	r31, 0x12	; 18
    243a:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__prologue_saves__+0x1c>
    243e:	0d 89       	ldd	r16, Y+21	; 0x15
    2440:	1e 89       	ldd	r17, Y+22	; 0x16
    2442:	86 e0       	ldi	r24, 0x06	; 6
    2444:	8c 83       	std	Y+4, r24	; 0x04
    2446:	1a 83       	std	Y+2, r17	; 0x02
    2448:	09 83       	std	Y+1, r16	; 0x01
    244a:	8f ef       	ldi	r24, 0xFF	; 255
    244c:	9f e7       	ldi	r25, 0x7F	; 127
    244e:	9e 83       	std	Y+6, r25	; 0x06
    2450:	8d 83       	std	Y+5, r24	; 0x05
    2452:	ae 01       	movw	r20, r28
    2454:	47 5e       	subi	r20, 0xE7	; 231
    2456:	5f 4f       	sbci	r21, 0xFF	; 255
    2458:	6f 89       	ldd	r22, Y+23	; 0x17
    245a:	78 8d       	ldd	r23, Y+24	; 0x18
    245c:	ce 01       	movw	r24, r28
    245e:	01 96       	adiw	r24, 0x01	; 1
    2460:	0e 94 3c 12 	call	0x2478	; 0x2478 <vfprintf>
    2464:	2f 81       	ldd	r18, Y+7	; 0x07
    2466:	38 85       	ldd	r19, Y+8	; 0x08
    2468:	f8 01       	movw	r30, r16
    246a:	e2 0f       	add	r30, r18
    246c:	f3 1f       	adc	r31, r19
    246e:	10 82       	st	Z, r1
    2470:	2e 96       	adiw	r28, 0x0e	; 14
    2472:	e4 e0       	ldi	r30, 0x04	; 4
    2474:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__epilogue_restores__+0x1c>

00002478 <vfprintf>:
    2478:	ac e0       	ldi	r26, 0x0C	; 12
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	e2 e4       	ldi	r30, 0x42	; 66
    247e:	f2 e1       	ldi	r31, 0x12	; 18
    2480:	0c 94 ba 14 	jmp	0x2974	; 0x2974 <__prologue_saves__>
    2484:	7c 01       	movw	r14, r24
    2486:	6b 01       	movw	r12, r22
    2488:	8a 01       	movw	r16, r20
    248a:	fc 01       	movw	r30, r24
    248c:	17 82       	std	Z+7, r1	; 0x07
    248e:	16 82       	std	Z+6, r1	; 0x06
    2490:	83 81       	ldd	r24, Z+3	; 0x03
    2492:	81 ff       	sbrs	r24, 1
    2494:	bd c1       	rjmp	.+890    	; 0x2810 <vfprintf+0x398>
    2496:	ce 01       	movw	r24, r28
    2498:	01 96       	adiw	r24, 0x01	; 1
    249a:	4c 01       	movw	r8, r24
    249c:	f7 01       	movw	r30, r14
    249e:	93 81       	ldd	r25, Z+3	; 0x03
    24a0:	f6 01       	movw	r30, r12
    24a2:	93 fd       	sbrc	r25, 3
    24a4:	85 91       	lpm	r24, Z+
    24a6:	93 ff       	sbrs	r25, 3
    24a8:	81 91       	ld	r24, Z+
    24aa:	6f 01       	movw	r12, r30
    24ac:	88 23       	and	r24, r24
    24ae:	09 f4       	brne	.+2      	; 0x24b2 <vfprintf+0x3a>
    24b0:	ab c1       	rjmp	.+854    	; 0x2808 <vfprintf+0x390>
    24b2:	85 32       	cpi	r24, 0x25	; 37
    24b4:	39 f4       	brne	.+14     	; 0x24c4 <vfprintf+0x4c>
    24b6:	93 fd       	sbrc	r25, 3
    24b8:	85 91       	lpm	r24, Z+
    24ba:	93 ff       	sbrs	r25, 3
    24bc:	81 91       	ld	r24, Z+
    24be:	6f 01       	movw	r12, r30
    24c0:	85 32       	cpi	r24, 0x25	; 37
    24c2:	29 f4       	brne	.+10     	; 0x24ce <vfprintf+0x56>
    24c4:	b7 01       	movw	r22, r14
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	0e 94 24 14 	call	0x2848	; 0x2848 <fputc>
    24cc:	e7 cf       	rjmp	.-50     	; 0x249c <vfprintf+0x24>
    24ce:	51 2c       	mov	r5, r1
    24d0:	31 2c       	mov	r3, r1
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	20 32       	cpi	r18, 0x20	; 32
    24d6:	a0 f4       	brcc	.+40     	; 0x2500 <vfprintf+0x88>
    24d8:	8b 32       	cpi	r24, 0x2B	; 43
    24da:	69 f0       	breq	.+26     	; 0x24f6 <vfprintf+0x7e>
    24dc:	30 f4       	brcc	.+12     	; 0x24ea <vfprintf+0x72>
    24de:	80 32       	cpi	r24, 0x20	; 32
    24e0:	59 f0       	breq	.+22     	; 0x24f8 <vfprintf+0x80>
    24e2:	83 32       	cpi	r24, 0x23	; 35
    24e4:	69 f4       	brne	.+26     	; 0x2500 <vfprintf+0x88>
    24e6:	20 61       	ori	r18, 0x10	; 16
    24e8:	2c c0       	rjmp	.+88     	; 0x2542 <vfprintf+0xca>
    24ea:	8d 32       	cpi	r24, 0x2D	; 45
    24ec:	39 f0       	breq	.+14     	; 0x24fc <vfprintf+0x84>
    24ee:	80 33       	cpi	r24, 0x30	; 48
    24f0:	39 f4       	brne	.+14     	; 0x2500 <vfprintf+0x88>
    24f2:	21 60       	ori	r18, 0x01	; 1
    24f4:	26 c0       	rjmp	.+76     	; 0x2542 <vfprintf+0xca>
    24f6:	22 60       	ori	r18, 0x02	; 2
    24f8:	24 60       	ori	r18, 0x04	; 4
    24fa:	23 c0       	rjmp	.+70     	; 0x2542 <vfprintf+0xca>
    24fc:	28 60       	ori	r18, 0x08	; 8
    24fe:	21 c0       	rjmp	.+66     	; 0x2542 <vfprintf+0xca>
    2500:	27 fd       	sbrc	r18, 7
    2502:	27 c0       	rjmp	.+78     	; 0x2552 <vfprintf+0xda>
    2504:	30 ed       	ldi	r19, 0xD0	; 208
    2506:	38 0f       	add	r19, r24
    2508:	3a 30       	cpi	r19, 0x0A	; 10
    250a:	78 f4       	brcc	.+30     	; 0x252a <vfprintf+0xb2>
    250c:	26 ff       	sbrs	r18, 6
    250e:	06 c0       	rjmp	.+12     	; 0x251c <vfprintf+0xa4>
    2510:	fa e0       	ldi	r31, 0x0A	; 10
    2512:	5f 9e       	mul	r5, r31
    2514:	30 0d       	add	r19, r0
    2516:	11 24       	eor	r1, r1
    2518:	53 2e       	mov	r5, r19
    251a:	13 c0       	rjmp	.+38     	; 0x2542 <vfprintf+0xca>
    251c:	8a e0       	ldi	r24, 0x0A	; 10
    251e:	38 9e       	mul	r3, r24
    2520:	30 0d       	add	r19, r0
    2522:	11 24       	eor	r1, r1
    2524:	33 2e       	mov	r3, r19
    2526:	20 62       	ori	r18, 0x20	; 32
    2528:	0c c0       	rjmp	.+24     	; 0x2542 <vfprintf+0xca>
    252a:	8e 32       	cpi	r24, 0x2E	; 46
    252c:	21 f4       	brne	.+8      	; 0x2536 <vfprintf+0xbe>
    252e:	26 fd       	sbrc	r18, 6
    2530:	6b c1       	rjmp	.+726    	; 0x2808 <vfprintf+0x390>
    2532:	20 64       	ori	r18, 0x40	; 64
    2534:	06 c0       	rjmp	.+12     	; 0x2542 <vfprintf+0xca>
    2536:	8c 36       	cpi	r24, 0x6C	; 108
    2538:	11 f4       	brne	.+4      	; 0x253e <vfprintf+0xc6>
    253a:	20 68       	ori	r18, 0x80	; 128
    253c:	02 c0       	rjmp	.+4      	; 0x2542 <vfprintf+0xca>
    253e:	88 36       	cpi	r24, 0x68	; 104
    2540:	41 f4       	brne	.+16     	; 0x2552 <vfprintf+0xda>
    2542:	f6 01       	movw	r30, r12
    2544:	93 fd       	sbrc	r25, 3
    2546:	85 91       	lpm	r24, Z+
    2548:	93 ff       	sbrs	r25, 3
    254a:	81 91       	ld	r24, Z+
    254c:	6f 01       	movw	r12, r30
    254e:	81 11       	cpse	r24, r1
    2550:	c1 cf       	rjmp	.-126    	; 0x24d4 <vfprintf+0x5c>
    2552:	98 2f       	mov	r25, r24
    2554:	9f 7d       	andi	r25, 0xDF	; 223
    2556:	95 54       	subi	r25, 0x45	; 69
    2558:	93 30       	cpi	r25, 0x03	; 3
    255a:	28 f4       	brcc	.+10     	; 0x2566 <vfprintf+0xee>
    255c:	0c 5f       	subi	r16, 0xFC	; 252
    255e:	1f 4f       	sbci	r17, 0xFF	; 255
    2560:	ff e3       	ldi	r31, 0x3F	; 63
    2562:	f9 83       	std	Y+1, r31	; 0x01
    2564:	0d c0       	rjmp	.+26     	; 0x2580 <vfprintf+0x108>
    2566:	83 36       	cpi	r24, 0x63	; 99
    2568:	31 f0       	breq	.+12     	; 0x2576 <vfprintf+0xfe>
    256a:	83 37       	cpi	r24, 0x73	; 115
    256c:	71 f0       	breq	.+28     	; 0x258a <vfprintf+0x112>
    256e:	83 35       	cpi	r24, 0x53	; 83
    2570:	09 f0       	breq	.+2      	; 0x2574 <vfprintf+0xfc>
    2572:	5b c0       	rjmp	.+182    	; 0x262a <vfprintf+0x1b2>
    2574:	22 c0       	rjmp	.+68     	; 0x25ba <vfprintf+0x142>
    2576:	f8 01       	movw	r30, r16
    2578:	80 81       	ld	r24, Z
    257a:	89 83       	std	Y+1, r24	; 0x01
    257c:	0e 5f       	subi	r16, 0xFE	; 254
    257e:	1f 4f       	sbci	r17, 0xFF	; 255
    2580:	44 24       	eor	r4, r4
    2582:	43 94       	inc	r4
    2584:	51 2c       	mov	r5, r1
    2586:	54 01       	movw	r10, r8
    2588:	15 c0       	rjmp	.+42     	; 0x25b4 <vfprintf+0x13c>
    258a:	38 01       	movw	r6, r16
    258c:	f2 e0       	ldi	r31, 0x02	; 2
    258e:	6f 0e       	add	r6, r31
    2590:	71 1c       	adc	r7, r1
    2592:	f8 01       	movw	r30, r16
    2594:	a0 80       	ld	r10, Z
    2596:	b1 80       	ldd	r11, Z+1	; 0x01
    2598:	26 ff       	sbrs	r18, 6
    259a:	03 c0       	rjmp	.+6      	; 0x25a2 <vfprintf+0x12a>
    259c:	65 2d       	mov	r22, r5
    259e:	70 e0       	ldi	r23, 0x00	; 0
    25a0:	02 c0       	rjmp	.+4      	; 0x25a6 <vfprintf+0x12e>
    25a2:	6f ef       	ldi	r22, 0xFF	; 255
    25a4:	7f ef       	ldi	r23, 0xFF	; 255
    25a6:	c5 01       	movw	r24, r10
    25a8:	2c 87       	std	Y+12, r18	; 0x0c
    25aa:	0e 94 19 14 	call	0x2832	; 0x2832 <strnlen>
    25ae:	2c 01       	movw	r4, r24
    25b0:	83 01       	movw	r16, r6
    25b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    25b4:	2f 77       	andi	r18, 0x7F	; 127
    25b6:	22 2e       	mov	r2, r18
    25b8:	17 c0       	rjmp	.+46     	; 0x25e8 <vfprintf+0x170>
    25ba:	38 01       	movw	r6, r16
    25bc:	f2 e0       	ldi	r31, 0x02	; 2
    25be:	6f 0e       	add	r6, r31
    25c0:	71 1c       	adc	r7, r1
    25c2:	f8 01       	movw	r30, r16
    25c4:	a0 80       	ld	r10, Z
    25c6:	b1 80       	ldd	r11, Z+1	; 0x01
    25c8:	26 ff       	sbrs	r18, 6
    25ca:	03 c0       	rjmp	.+6      	; 0x25d2 <vfprintf+0x15a>
    25cc:	65 2d       	mov	r22, r5
    25ce:	70 e0       	ldi	r23, 0x00	; 0
    25d0:	02 c0       	rjmp	.+4      	; 0x25d6 <vfprintf+0x15e>
    25d2:	6f ef       	ldi	r22, 0xFF	; 255
    25d4:	7f ef       	ldi	r23, 0xFF	; 255
    25d6:	c5 01       	movw	r24, r10
    25d8:	2c 87       	std	Y+12, r18	; 0x0c
    25da:	0e 94 0e 14 	call	0x281c	; 0x281c <strnlen_P>
    25de:	2c 01       	movw	r4, r24
    25e0:	2c 85       	ldd	r18, Y+12	; 0x0c
    25e2:	20 68       	ori	r18, 0x80	; 128
    25e4:	22 2e       	mov	r2, r18
    25e6:	83 01       	movw	r16, r6
    25e8:	23 fc       	sbrc	r2, 3
    25ea:	1b c0       	rjmp	.+54     	; 0x2622 <vfprintf+0x1aa>
    25ec:	83 2d       	mov	r24, r3
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	48 16       	cp	r4, r24
    25f2:	59 06       	cpc	r5, r25
    25f4:	b0 f4       	brcc	.+44     	; 0x2622 <vfprintf+0x1aa>
    25f6:	b7 01       	movw	r22, r14
    25f8:	80 e2       	ldi	r24, 0x20	; 32
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	0e 94 24 14 	call	0x2848	; 0x2848 <fputc>
    2600:	3a 94       	dec	r3
    2602:	f4 cf       	rjmp	.-24     	; 0x25ec <vfprintf+0x174>
    2604:	f5 01       	movw	r30, r10
    2606:	27 fc       	sbrc	r2, 7
    2608:	85 91       	lpm	r24, Z+
    260a:	27 fe       	sbrs	r2, 7
    260c:	81 91       	ld	r24, Z+
    260e:	5f 01       	movw	r10, r30
    2610:	b7 01       	movw	r22, r14
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	0e 94 24 14 	call	0x2848	; 0x2848 <fputc>
    2618:	31 10       	cpse	r3, r1
    261a:	3a 94       	dec	r3
    261c:	f1 e0       	ldi	r31, 0x01	; 1
    261e:	4f 1a       	sub	r4, r31
    2620:	51 08       	sbc	r5, r1
    2622:	41 14       	cp	r4, r1
    2624:	51 04       	cpc	r5, r1
    2626:	71 f7       	brne	.-36     	; 0x2604 <vfprintf+0x18c>
    2628:	e5 c0       	rjmp	.+458    	; 0x27f4 <vfprintf+0x37c>
    262a:	84 36       	cpi	r24, 0x64	; 100
    262c:	11 f0       	breq	.+4      	; 0x2632 <vfprintf+0x1ba>
    262e:	89 36       	cpi	r24, 0x69	; 105
    2630:	39 f5       	brne	.+78     	; 0x2680 <vfprintf+0x208>
    2632:	f8 01       	movw	r30, r16
    2634:	27 ff       	sbrs	r18, 7
    2636:	07 c0       	rjmp	.+14     	; 0x2646 <vfprintf+0x1ce>
    2638:	60 81       	ld	r22, Z
    263a:	71 81       	ldd	r23, Z+1	; 0x01
    263c:	82 81       	ldd	r24, Z+2	; 0x02
    263e:	93 81       	ldd	r25, Z+3	; 0x03
    2640:	0c 5f       	subi	r16, 0xFC	; 252
    2642:	1f 4f       	sbci	r17, 0xFF	; 255
    2644:	08 c0       	rjmp	.+16     	; 0x2656 <vfprintf+0x1de>
    2646:	60 81       	ld	r22, Z
    2648:	71 81       	ldd	r23, Z+1	; 0x01
    264a:	07 2e       	mov	r0, r23
    264c:	00 0c       	add	r0, r0
    264e:	88 0b       	sbc	r24, r24
    2650:	99 0b       	sbc	r25, r25
    2652:	0e 5f       	subi	r16, 0xFE	; 254
    2654:	1f 4f       	sbci	r17, 0xFF	; 255
    2656:	2f 76       	andi	r18, 0x6F	; 111
    2658:	72 2e       	mov	r7, r18
    265a:	97 ff       	sbrs	r25, 7
    265c:	09 c0       	rjmp	.+18     	; 0x2670 <vfprintf+0x1f8>
    265e:	90 95       	com	r25
    2660:	80 95       	com	r24
    2662:	70 95       	com	r23
    2664:	61 95       	neg	r22
    2666:	7f 4f       	sbci	r23, 0xFF	; 255
    2668:	8f 4f       	sbci	r24, 0xFF	; 255
    266a:	9f 4f       	sbci	r25, 0xFF	; 255
    266c:	20 68       	ori	r18, 0x80	; 128
    266e:	72 2e       	mov	r7, r18
    2670:	2a e0       	ldi	r18, 0x0A	; 10
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	a4 01       	movw	r20, r8
    2676:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__ultoa_invert>
    267a:	a8 2e       	mov	r10, r24
    267c:	a8 18       	sub	r10, r8
    267e:	44 c0       	rjmp	.+136    	; 0x2708 <vfprintf+0x290>
    2680:	85 37       	cpi	r24, 0x75	; 117
    2682:	29 f4       	brne	.+10     	; 0x268e <vfprintf+0x216>
    2684:	2f 7e       	andi	r18, 0xEF	; 239
    2686:	b2 2e       	mov	r11, r18
    2688:	2a e0       	ldi	r18, 0x0A	; 10
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	25 c0       	rjmp	.+74     	; 0x26d8 <vfprintf+0x260>
    268e:	f2 2f       	mov	r31, r18
    2690:	f9 7f       	andi	r31, 0xF9	; 249
    2692:	bf 2e       	mov	r11, r31
    2694:	8f 36       	cpi	r24, 0x6F	; 111
    2696:	c1 f0       	breq	.+48     	; 0x26c8 <vfprintf+0x250>
    2698:	18 f4       	brcc	.+6      	; 0x26a0 <vfprintf+0x228>
    269a:	88 35       	cpi	r24, 0x58	; 88
    269c:	79 f0       	breq	.+30     	; 0x26bc <vfprintf+0x244>
    269e:	b4 c0       	rjmp	.+360    	; 0x2808 <vfprintf+0x390>
    26a0:	80 37       	cpi	r24, 0x70	; 112
    26a2:	19 f0       	breq	.+6      	; 0x26aa <vfprintf+0x232>
    26a4:	88 37       	cpi	r24, 0x78	; 120
    26a6:	21 f0       	breq	.+8      	; 0x26b0 <vfprintf+0x238>
    26a8:	af c0       	rjmp	.+350    	; 0x2808 <vfprintf+0x390>
    26aa:	2f 2f       	mov	r18, r31
    26ac:	20 61       	ori	r18, 0x10	; 16
    26ae:	b2 2e       	mov	r11, r18
    26b0:	b4 fe       	sbrs	r11, 4
    26b2:	0d c0       	rjmp	.+26     	; 0x26ce <vfprintf+0x256>
    26b4:	8b 2d       	mov	r24, r11
    26b6:	84 60       	ori	r24, 0x04	; 4
    26b8:	b8 2e       	mov	r11, r24
    26ba:	09 c0       	rjmp	.+18     	; 0x26ce <vfprintf+0x256>
    26bc:	24 ff       	sbrs	r18, 4
    26be:	0a c0       	rjmp	.+20     	; 0x26d4 <vfprintf+0x25c>
    26c0:	9f 2f       	mov	r25, r31
    26c2:	96 60       	ori	r25, 0x06	; 6
    26c4:	b9 2e       	mov	r11, r25
    26c6:	06 c0       	rjmp	.+12     	; 0x26d4 <vfprintf+0x25c>
    26c8:	28 e0       	ldi	r18, 0x08	; 8
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	05 c0       	rjmp	.+10     	; 0x26d8 <vfprintf+0x260>
    26ce:	20 e1       	ldi	r18, 0x10	; 16
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	02 c0       	rjmp	.+4      	; 0x26d8 <vfprintf+0x260>
    26d4:	20 e1       	ldi	r18, 0x10	; 16
    26d6:	32 e0       	ldi	r19, 0x02	; 2
    26d8:	f8 01       	movw	r30, r16
    26da:	b7 fe       	sbrs	r11, 7
    26dc:	07 c0       	rjmp	.+14     	; 0x26ec <vfprintf+0x274>
    26de:	60 81       	ld	r22, Z
    26e0:	71 81       	ldd	r23, Z+1	; 0x01
    26e2:	82 81       	ldd	r24, Z+2	; 0x02
    26e4:	93 81       	ldd	r25, Z+3	; 0x03
    26e6:	0c 5f       	subi	r16, 0xFC	; 252
    26e8:	1f 4f       	sbci	r17, 0xFF	; 255
    26ea:	06 c0       	rjmp	.+12     	; 0x26f8 <vfprintf+0x280>
    26ec:	60 81       	ld	r22, Z
    26ee:	71 81       	ldd	r23, Z+1	; 0x01
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	0e 5f       	subi	r16, 0xFE	; 254
    26f6:	1f 4f       	sbci	r17, 0xFF	; 255
    26f8:	a4 01       	movw	r20, r8
    26fa:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__ultoa_invert>
    26fe:	a8 2e       	mov	r10, r24
    2700:	a8 18       	sub	r10, r8
    2702:	fb 2d       	mov	r31, r11
    2704:	ff 77       	andi	r31, 0x7F	; 127
    2706:	7f 2e       	mov	r7, r31
    2708:	76 fe       	sbrs	r7, 6
    270a:	0b c0       	rjmp	.+22     	; 0x2722 <vfprintf+0x2aa>
    270c:	37 2d       	mov	r19, r7
    270e:	3e 7f       	andi	r19, 0xFE	; 254
    2710:	a5 14       	cp	r10, r5
    2712:	50 f4       	brcc	.+20     	; 0x2728 <vfprintf+0x2b0>
    2714:	74 fe       	sbrs	r7, 4
    2716:	0a c0       	rjmp	.+20     	; 0x272c <vfprintf+0x2b4>
    2718:	72 fc       	sbrc	r7, 2
    271a:	08 c0       	rjmp	.+16     	; 0x272c <vfprintf+0x2b4>
    271c:	37 2d       	mov	r19, r7
    271e:	3e 7e       	andi	r19, 0xEE	; 238
    2720:	05 c0       	rjmp	.+10     	; 0x272c <vfprintf+0x2b4>
    2722:	ba 2c       	mov	r11, r10
    2724:	37 2d       	mov	r19, r7
    2726:	03 c0       	rjmp	.+6      	; 0x272e <vfprintf+0x2b6>
    2728:	ba 2c       	mov	r11, r10
    272a:	01 c0       	rjmp	.+2      	; 0x272e <vfprintf+0x2b6>
    272c:	b5 2c       	mov	r11, r5
    272e:	34 ff       	sbrs	r19, 4
    2730:	0d c0       	rjmp	.+26     	; 0x274c <vfprintf+0x2d4>
    2732:	fe 01       	movw	r30, r28
    2734:	ea 0d       	add	r30, r10
    2736:	f1 1d       	adc	r31, r1
    2738:	80 81       	ld	r24, Z
    273a:	80 33       	cpi	r24, 0x30	; 48
    273c:	11 f4       	brne	.+4      	; 0x2742 <vfprintf+0x2ca>
    273e:	39 7e       	andi	r19, 0xE9	; 233
    2740:	09 c0       	rjmp	.+18     	; 0x2754 <vfprintf+0x2dc>
    2742:	32 ff       	sbrs	r19, 2
    2744:	06 c0       	rjmp	.+12     	; 0x2752 <vfprintf+0x2da>
    2746:	b3 94       	inc	r11
    2748:	b3 94       	inc	r11
    274a:	04 c0       	rjmp	.+8      	; 0x2754 <vfprintf+0x2dc>
    274c:	83 2f       	mov	r24, r19
    274e:	86 78       	andi	r24, 0x86	; 134
    2750:	09 f0       	breq	.+2      	; 0x2754 <vfprintf+0x2dc>
    2752:	b3 94       	inc	r11
    2754:	33 fd       	sbrc	r19, 3
    2756:	13 c0       	rjmp	.+38     	; 0x277e <vfprintf+0x306>
    2758:	30 ff       	sbrs	r19, 0
    275a:	06 c0       	rjmp	.+12     	; 0x2768 <vfprintf+0x2f0>
    275c:	5a 2c       	mov	r5, r10
    275e:	b3 14       	cp	r11, r3
    2760:	18 f4       	brcc	.+6      	; 0x2768 <vfprintf+0x2f0>
    2762:	53 0c       	add	r5, r3
    2764:	5b 18       	sub	r5, r11
    2766:	b3 2c       	mov	r11, r3
    2768:	b3 14       	cp	r11, r3
    276a:	68 f4       	brcc	.+26     	; 0x2786 <vfprintf+0x30e>
    276c:	b7 01       	movw	r22, r14
    276e:	80 e2       	ldi	r24, 0x20	; 32
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	3c 87       	std	Y+12, r19	; 0x0c
    2774:	0e 94 24 14 	call	0x2848	; 0x2848 <fputc>
    2778:	b3 94       	inc	r11
    277a:	3c 85       	ldd	r19, Y+12	; 0x0c
    277c:	f5 cf       	rjmp	.-22     	; 0x2768 <vfprintf+0x2f0>
    277e:	b3 14       	cp	r11, r3
    2780:	10 f4       	brcc	.+4      	; 0x2786 <vfprintf+0x30e>
    2782:	3b 18       	sub	r3, r11
    2784:	01 c0       	rjmp	.+2      	; 0x2788 <vfprintf+0x310>
    2786:	31 2c       	mov	r3, r1
    2788:	34 ff       	sbrs	r19, 4
    278a:	12 c0       	rjmp	.+36     	; 0x27b0 <vfprintf+0x338>
    278c:	b7 01       	movw	r22, r14
    278e:	80 e3       	ldi	r24, 0x30	; 48
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	3c 87       	std	Y+12, r19	; 0x0c
    2794:	0e 94 24 14 	call	0x2848	; 0x2848 <fputc>
    2798:	3c 85       	ldd	r19, Y+12	; 0x0c
    279a:	32 ff       	sbrs	r19, 2
    279c:	17 c0       	rjmp	.+46     	; 0x27cc <vfprintf+0x354>
    279e:	31 fd       	sbrc	r19, 1
    27a0:	03 c0       	rjmp	.+6      	; 0x27a8 <vfprintf+0x330>
    27a2:	88 e7       	ldi	r24, 0x78	; 120
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	02 c0       	rjmp	.+4      	; 0x27ac <vfprintf+0x334>
    27a8:	88 e5       	ldi	r24, 0x58	; 88
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	b7 01       	movw	r22, r14
    27ae:	0c c0       	rjmp	.+24     	; 0x27c8 <vfprintf+0x350>
    27b0:	83 2f       	mov	r24, r19
    27b2:	86 78       	andi	r24, 0x86	; 134
    27b4:	59 f0       	breq	.+22     	; 0x27cc <vfprintf+0x354>
    27b6:	31 ff       	sbrs	r19, 1
    27b8:	02 c0       	rjmp	.+4      	; 0x27be <vfprintf+0x346>
    27ba:	8b e2       	ldi	r24, 0x2B	; 43
    27bc:	01 c0       	rjmp	.+2      	; 0x27c0 <vfprintf+0x348>
    27be:	80 e2       	ldi	r24, 0x20	; 32
    27c0:	37 fd       	sbrc	r19, 7
    27c2:	8d e2       	ldi	r24, 0x2D	; 45
    27c4:	b7 01       	movw	r22, r14
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	0e 94 24 14 	call	0x2848	; 0x2848 <fputc>
    27cc:	a5 14       	cp	r10, r5
    27ce:	38 f4       	brcc	.+14     	; 0x27de <vfprintf+0x366>
    27d0:	b7 01       	movw	r22, r14
    27d2:	80 e3       	ldi	r24, 0x30	; 48
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	0e 94 24 14 	call	0x2848	; 0x2848 <fputc>
    27da:	5a 94       	dec	r5
    27dc:	f7 cf       	rjmp	.-18     	; 0x27cc <vfprintf+0x354>
    27de:	aa 94       	dec	r10
    27e0:	f4 01       	movw	r30, r8
    27e2:	ea 0d       	add	r30, r10
    27e4:	f1 1d       	adc	r31, r1
    27e6:	80 81       	ld	r24, Z
    27e8:	b7 01       	movw	r22, r14
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	0e 94 24 14 	call	0x2848	; 0x2848 <fputc>
    27f0:	a1 10       	cpse	r10, r1
    27f2:	f5 cf       	rjmp	.-22     	; 0x27de <vfprintf+0x366>
    27f4:	33 20       	and	r3, r3
    27f6:	09 f4       	brne	.+2      	; 0x27fa <vfprintf+0x382>
    27f8:	51 ce       	rjmp	.-862    	; 0x249c <vfprintf+0x24>
    27fa:	b7 01       	movw	r22, r14
    27fc:	80 e2       	ldi	r24, 0x20	; 32
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	0e 94 24 14 	call	0x2848	; 0x2848 <fputc>
    2804:	3a 94       	dec	r3
    2806:	f6 cf       	rjmp	.-20     	; 0x27f4 <vfprintf+0x37c>
    2808:	f7 01       	movw	r30, r14
    280a:	86 81       	ldd	r24, Z+6	; 0x06
    280c:	97 81       	ldd	r25, Z+7	; 0x07
    280e:	02 c0       	rjmp	.+4      	; 0x2814 <vfprintf+0x39c>
    2810:	8f ef       	ldi	r24, 0xFF	; 255
    2812:	9f ef       	ldi	r25, 0xFF	; 255
    2814:	2c 96       	adiw	r28, 0x0c	; 12
    2816:	e2 e1       	ldi	r30, 0x12	; 18
    2818:	0c 94 d6 14 	jmp	0x29ac	; 0x29ac <__epilogue_restores__>

0000281c <strnlen_P>:
    281c:	fc 01       	movw	r30, r24
    281e:	05 90       	lpm	r0, Z+
    2820:	61 50       	subi	r22, 0x01	; 1
    2822:	70 40       	sbci	r23, 0x00	; 0
    2824:	01 10       	cpse	r0, r1
    2826:	d8 f7       	brcc	.-10     	; 0x281e <strnlen_P+0x2>
    2828:	80 95       	com	r24
    282a:	90 95       	com	r25
    282c:	8e 0f       	add	r24, r30
    282e:	9f 1f       	adc	r25, r31
    2830:	08 95       	ret

00002832 <strnlen>:
    2832:	fc 01       	movw	r30, r24
    2834:	61 50       	subi	r22, 0x01	; 1
    2836:	70 40       	sbci	r23, 0x00	; 0
    2838:	01 90       	ld	r0, Z+
    283a:	01 10       	cpse	r0, r1
    283c:	d8 f7       	brcc	.-10     	; 0x2834 <strnlen+0x2>
    283e:	80 95       	com	r24
    2840:	90 95       	com	r25
    2842:	8e 0f       	add	r24, r30
    2844:	9f 1f       	adc	r25, r31
    2846:	08 95       	ret

00002848 <fputc>:
    2848:	0f 93       	push	r16
    284a:	1f 93       	push	r17
    284c:	cf 93       	push	r28
    284e:	df 93       	push	r29
    2850:	fb 01       	movw	r30, r22
    2852:	23 81       	ldd	r18, Z+3	; 0x03
    2854:	21 fd       	sbrc	r18, 1
    2856:	03 c0       	rjmp	.+6      	; 0x285e <fputc+0x16>
    2858:	8f ef       	ldi	r24, 0xFF	; 255
    285a:	9f ef       	ldi	r25, 0xFF	; 255
    285c:	28 c0       	rjmp	.+80     	; 0x28ae <fputc+0x66>
    285e:	22 ff       	sbrs	r18, 2
    2860:	16 c0       	rjmp	.+44     	; 0x288e <fputc+0x46>
    2862:	46 81       	ldd	r20, Z+6	; 0x06
    2864:	57 81       	ldd	r21, Z+7	; 0x07
    2866:	24 81       	ldd	r18, Z+4	; 0x04
    2868:	35 81       	ldd	r19, Z+5	; 0x05
    286a:	42 17       	cp	r20, r18
    286c:	53 07       	cpc	r21, r19
    286e:	44 f4       	brge	.+16     	; 0x2880 <fputc+0x38>
    2870:	a0 81       	ld	r26, Z
    2872:	b1 81       	ldd	r27, Z+1	; 0x01
    2874:	9d 01       	movw	r18, r26
    2876:	2f 5f       	subi	r18, 0xFF	; 255
    2878:	3f 4f       	sbci	r19, 0xFF	; 255
    287a:	31 83       	std	Z+1, r19	; 0x01
    287c:	20 83       	st	Z, r18
    287e:	8c 93       	st	X, r24
    2880:	26 81       	ldd	r18, Z+6	; 0x06
    2882:	37 81       	ldd	r19, Z+7	; 0x07
    2884:	2f 5f       	subi	r18, 0xFF	; 255
    2886:	3f 4f       	sbci	r19, 0xFF	; 255
    2888:	37 83       	std	Z+7, r19	; 0x07
    288a:	26 83       	std	Z+6, r18	; 0x06
    288c:	10 c0       	rjmp	.+32     	; 0x28ae <fputc+0x66>
    288e:	eb 01       	movw	r28, r22
    2890:	09 2f       	mov	r16, r25
    2892:	18 2f       	mov	r17, r24
    2894:	00 84       	ldd	r0, Z+8	; 0x08
    2896:	f1 85       	ldd	r31, Z+9	; 0x09
    2898:	e0 2d       	mov	r30, r0
    289a:	09 95       	icall
    289c:	89 2b       	or	r24, r25
    289e:	e1 f6       	brne	.-72     	; 0x2858 <fputc+0x10>
    28a0:	8e 81       	ldd	r24, Y+6	; 0x06
    28a2:	9f 81       	ldd	r25, Y+7	; 0x07
    28a4:	01 96       	adiw	r24, 0x01	; 1
    28a6:	9f 83       	std	Y+7, r25	; 0x07
    28a8:	8e 83       	std	Y+6, r24	; 0x06
    28aa:	81 2f       	mov	r24, r17
    28ac:	90 2f       	mov	r25, r16
    28ae:	df 91       	pop	r29
    28b0:	cf 91       	pop	r28
    28b2:	1f 91       	pop	r17
    28b4:	0f 91       	pop	r16
    28b6:	08 95       	ret

000028b8 <__ultoa_invert>:
    28b8:	fa 01       	movw	r30, r20
    28ba:	aa 27       	eor	r26, r26
    28bc:	28 30       	cpi	r18, 0x08	; 8
    28be:	51 f1       	breq	.+84     	; 0x2914 <__ultoa_invert+0x5c>
    28c0:	20 31       	cpi	r18, 0x10	; 16
    28c2:	81 f1       	breq	.+96     	; 0x2924 <__ultoa_invert+0x6c>
    28c4:	e8 94       	clt
    28c6:	6f 93       	push	r22
    28c8:	6e 7f       	andi	r22, 0xFE	; 254
    28ca:	6e 5f       	subi	r22, 0xFE	; 254
    28cc:	7f 4f       	sbci	r23, 0xFF	; 255
    28ce:	8f 4f       	sbci	r24, 0xFF	; 255
    28d0:	9f 4f       	sbci	r25, 0xFF	; 255
    28d2:	af 4f       	sbci	r26, 0xFF	; 255
    28d4:	b1 e0       	ldi	r27, 0x01	; 1
    28d6:	3e d0       	rcall	.+124    	; 0x2954 <__ultoa_invert+0x9c>
    28d8:	b4 e0       	ldi	r27, 0x04	; 4
    28da:	3c d0       	rcall	.+120    	; 0x2954 <__ultoa_invert+0x9c>
    28dc:	67 0f       	add	r22, r23
    28de:	78 1f       	adc	r23, r24
    28e0:	89 1f       	adc	r24, r25
    28e2:	9a 1f       	adc	r25, r26
    28e4:	a1 1d       	adc	r26, r1
    28e6:	68 0f       	add	r22, r24
    28e8:	79 1f       	adc	r23, r25
    28ea:	8a 1f       	adc	r24, r26
    28ec:	91 1d       	adc	r25, r1
    28ee:	a1 1d       	adc	r26, r1
    28f0:	6a 0f       	add	r22, r26
    28f2:	71 1d       	adc	r23, r1
    28f4:	81 1d       	adc	r24, r1
    28f6:	91 1d       	adc	r25, r1
    28f8:	a1 1d       	adc	r26, r1
    28fa:	20 d0       	rcall	.+64     	; 0x293c <__ultoa_invert+0x84>
    28fc:	09 f4       	brne	.+2      	; 0x2900 <__ultoa_invert+0x48>
    28fe:	68 94       	set
    2900:	3f 91       	pop	r19
    2902:	2a e0       	ldi	r18, 0x0A	; 10
    2904:	26 9f       	mul	r18, r22
    2906:	11 24       	eor	r1, r1
    2908:	30 19       	sub	r19, r0
    290a:	30 5d       	subi	r19, 0xD0	; 208
    290c:	31 93       	st	Z+, r19
    290e:	de f6       	brtc	.-74     	; 0x28c6 <__ultoa_invert+0xe>
    2910:	cf 01       	movw	r24, r30
    2912:	08 95       	ret
    2914:	46 2f       	mov	r20, r22
    2916:	47 70       	andi	r20, 0x07	; 7
    2918:	40 5d       	subi	r20, 0xD0	; 208
    291a:	41 93       	st	Z+, r20
    291c:	b3 e0       	ldi	r27, 0x03	; 3
    291e:	0f d0       	rcall	.+30     	; 0x293e <__ultoa_invert+0x86>
    2920:	c9 f7       	brne	.-14     	; 0x2914 <__ultoa_invert+0x5c>
    2922:	f6 cf       	rjmp	.-20     	; 0x2910 <__ultoa_invert+0x58>
    2924:	46 2f       	mov	r20, r22
    2926:	4f 70       	andi	r20, 0x0F	; 15
    2928:	40 5d       	subi	r20, 0xD0	; 208
    292a:	4a 33       	cpi	r20, 0x3A	; 58
    292c:	18 f0       	brcs	.+6      	; 0x2934 <__ultoa_invert+0x7c>
    292e:	49 5d       	subi	r20, 0xD9	; 217
    2930:	31 fd       	sbrc	r19, 1
    2932:	40 52       	subi	r20, 0x20	; 32
    2934:	41 93       	st	Z+, r20
    2936:	02 d0       	rcall	.+4      	; 0x293c <__ultoa_invert+0x84>
    2938:	a9 f7       	brne	.-22     	; 0x2924 <__ultoa_invert+0x6c>
    293a:	ea cf       	rjmp	.-44     	; 0x2910 <__ultoa_invert+0x58>
    293c:	b4 e0       	ldi	r27, 0x04	; 4
    293e:	a6 95       	lsr	r26
    2940:	97 95       	ror	r25
    2942:	87 95       	ror	r24
    2944:	77 95       	ror	r23
    2946:	67 95       	ror	r22
    2948:	ba 95       	dec	r27
    294a:	c9 f7       	brne	.-14     	; 0x293e <__ultoa_invert+0x86>
    294c:	00 97       	sbiw	r24, 0x00	; 0
    294e:	61 05       	cpc	r22, r1
    2950:	71 05       	cpc	r23, r1
    2952:	08 95       	ret
    2954:	9b 01       	movw	r18, r22
    2956:	ac 01       	movw	r20, r24
    2958:	0a 2e       	mov	r0, r26
    295a:	06 94       	lsr	r0
    295c:	57 95       	ror	r21
    295e:	47 95       	ror	r20
    2960:	37 95       	ror	r19
    2962:	27 95       	ror	r18
    2964:	ba 95       	dec	r27
    2966:	c9 f7       	brne	.-14     	; 0x295a <__ultoa_invert+0xa2>
    2968:	62 0f       	add	r22, r18
    296a:	73 1f       	adc	r23, r19
    296c:	84 1f       	adc	r24, r20
    296e:	95 1f       	adc	r25, r21
    2970:	a0 1d       	adc	r26, r0
    2972:	08 95       	ret

00002974 <__prologue_saves__>:
    2974:	2f 92       	push	r2
    2976:	3f 92       	push	r3
    2978:	4f 92       	push	r4
    297a:	5f 92       	push	r5
    297c:	6f 92       	push	r6
    297e:	7f 92       	push	r7
    2980:	8f 92       	push	r8
    2982:	9f 92       	push	r9
    2984:	af 92       	push	r10
    2986:	bf 92       	push	r11
    2988:	cf 92       	push	r12
    298a:	df 92       	push	r13
    298c:	ef 92       	push	r14
    298e:	ff 92       	push	r15
    2990:	0f 93       	push	r16
    2992:	1f 93       	push	r17
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
    299c:	ca 1b       	sub	r28, r26
    299e:	db 0b       	sbc	r29, r27
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	cd bf       	out	0x3d, r28	; 61
    29aa:	09 94       	ijmp

000029ac <__epilogue_restores__>:
    29ac:	2a 88       	ldd	r2, Y+18	; 0x12
    29ae:	39 88       	ldd	r3, Y+17	; 0x11
    29b0:	48 88       	ldd	r4, Y+16	; 0x10
    29b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    29b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    29b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    29b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    29ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    29bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    29be:	b9 84       	ldd	r11, Y+9	; 0x09
    29c0:	c8 84       	ldd	r12, Y+8	; 0x08
    29c2:	df 80       	ldd	r13, Y+7	; 0x07
    29c4:	ee 80       	ldd	r14, Y+6	; 0x06
    29c6:	fd 80       	ldd	r15, Y+5	; 0x05
    29c8:	0c 81       	ldd	r16, Y+4	; 0x04
    29ca:	1b 81       	ldd	r17, Y+3	; 0x03
    29cc:	aa 81       	ldd	r26, Y+2	; 0x02
    29ce:	b9 81       	ldd	r27, Y+1	; 0x01
    29d0:	ce 0f       	add	r28, r30
    29d2:	d1 1d       	adc	r29, r1
    29d4:	0f b6       	in	r0, 0x3f	; 63
    29d6:	f8 94       	cli
    29d8:	de bf       	out	0x3e, r29	; 62
    29da:	0f be       	out	0x3f, r0	; 63
    29dc:	cd bf       	out	0x3d, r28	; 61
    29de:	ed 01       	movw	r28, r26
    29e0:	08 95       	ret

000029e2 <_exit>:
    29e2:	f8 94       	cli

000029e4 <__stop_program>:
    29e4:	ff cf       	rjmp	.-2      	; 0x29e4 <__stop_program>
