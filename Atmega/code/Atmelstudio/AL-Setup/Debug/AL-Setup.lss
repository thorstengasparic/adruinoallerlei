
AL-Setup.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  0000516a  000051fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000516a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001cd  00800138  00800138  00005236  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005236  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a0  00000000  00000000  000052a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d6cd  00000000  00000000  00005748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002031  00000000  00000000  00012e15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003939  00000000  00000000  00014e46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cd0  00000000  00000000  00018780  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002e73  00000000  00000000  00019450  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000420a  00000000  00000000  0001c2c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f0  00000000  00000000  000204cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <__ctors_end>
       4:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
       8:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
       c:	0c 94 04 0d 	jmp	0x1a08	; 0x1a08 <__vector_3>
      10:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      14:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      18:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      1c:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      20:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      24:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      28:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      2c:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      30:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      34:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      38:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      3c:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      40:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__vector_16>
      44:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      48:	0c 94 d9 1f 	jmp	0x3fb2	; 0x3fb2 <__vector_18>
      4c:	0c 94 11 20 	jmp	0x4022	; 0x4022 <__vector_19>
      50:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      54:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      58:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      5c:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      60:	0c 94 ec 26 	jmp	0x4dd8	; 0x4dd8 <__vector_24>
      64:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	48 61       	ori	r20, 0x18	; 24
      6a:	76 65       	ori	r23, 0x56	; 86
      6c:	20 66       	ori	r18, 0x60	; 96
      6e:	75 6e       	ori	r23, 0xE5	; 229
      70:	21 00       	.word	0x0021	; ????

00000072 <_ZZ5introvE3__c_10>:
	...

00000073 <_ZZ5introvE3__c_9>:
      73:	46 6f 72 20 73 75 70 70 6f 72 74 20 61 6e 64 20     For support and 
      83:	71 75 65 73 74 69 6f 6e 73 3a 20 77 77 77 2e 62     questions: www.b
      93:	72 6f 6b 6b 69 6e 67 2e 6e 65 74 00                 rokking.net.

0000009f <_ZZ5introvE3__c_8>:
      9f:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
      af:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
      bf:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
      cf:	3d 3d 3d 00                                         ===.

000000d3 <_ZZ5introvE3__c_7>:
	...

000000d4 <_ZZ5introvE3__c_6>:
      d4:	59 4d 46 43 2d 41 4c 20 53 65 74 75 70 20 50 72     YMFC-AL Setup Pr
      e4:	6f 67 72 61 6d 00                                   ogram.

000000ea <_ZZ5introvE3__c_5>:
	...

000000eb <_ZZ5introvE3__c_4>:
      eb:	20 20 20 20 20 20 43 6f 6e 74 72 6f 6c 6c 65 72           Controller
	...

000000fc <_ZZ5introvE3__c_3>:
      fc:	20 20 20 20 46 6c 69 67 68 74 00                        Flight.

00000107 <_ZZ5introvE3__c_2>:
     107:	20 20 4d 75 6c 74 69 63 6f 70 74 65 72 00             Multicopter.

00000115 <_ZZ5introvE3__c_1>:
     115:	59 6f 75 72 00                                      Your.

0000011a <_ZZ5introvE3__c_0>:
	...

0000011b <_ZZ5introvE3__c>:
     11b:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     12b:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     13b:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     14b:	3d 3d 3d 00                                         ===.

0000014f <_ZZ15check_gyro_axeshE3__c>:
     14f:	4e 6f 20 61 6e 67 75 6c 61 72 20 6d 6f 74 69 6f     No angular motio
     15f:	6e 20 69 73 20 64 65 74 65 63 74 65 64 20 69 6e     n is detected in
     16f:	20 74 68 65 20 6c 61 73 74 20 31 30 20 73 65 63      the last 10 sec
     17f:	6f 6e 64 73 21 21 21 20 28 45 52 52 4f 52 20 34     onds!!! (ERROR 4
     18f:	29 00                                               ).

00000191 <_ZZ16register_min_maxvE3__c>:
     191:	4d 65 61 73 75 72 69 6e 67 20 65 6e 64 70 6f 69     Measuring endpoi
     1a1:	6e 74 73 2e 2e 2e 2e 00                             nts.....

000001a9 <_ZZ17wait_for_receivervE3__c_2>:
     1a9:	20 4f 4b 00                                          OK.

000001ad <_ZZ17wait_for_receivervE3__c_1>:
     1ad:	4e 6f 20 76 61 6c 69 64 20 72 65 63 65 69 76 65     No valid receive
     1bd:	72 20 73 69 67 6e 61 6c 73 20 66 6f 75 6e 64 21     r signals found!
     1cd:	21 21 20 28 45 52 52 4f 52 20 31 29 00              !! (ERROR 1).

000001da <_ZZ17wait_for_receivervE3__c_0>:
     1da:	2e 00                                               ..

000001dc <_ZZ17wait_for_receivervE3__c>:
     1dc:	2e 00                                               ..

000001de <_ZZ21check_receiver_inputshE3__c>:
     1de:	4e 6f 20 73 74 69 63 6b 20 6d 6f 76 65 6d 65 6e     No stick movemen
     1ee:	74 20 64 65 74 65 63 74 65 64 20 69 6e 20 74 68     t detected in th
     1fe:	65 20 6c 61 73 74 20 33 30 20 73 65 63 6f 6e 64     e last 30 second
     20e:	73 21 21 21 20 28 45 52 52 4f 52 20 32 29 00        s!!! (ERROR 2).

0000021d <_ZZ10start_gyrovE3__c_2>:
     21d:	52 65 67 69 73 74 65 72 20 30 78 31 42 20 69 73     Register 0x1B is
     22d:	20 73 65 74 20 74 6f 3a 00                           set to:.

00000236 <_ZZ10start_gyrovE3__c_1>:
     236:	52 65 67 69 73 74 65 72 20 30 78 36 42 20 69 73     Register 0x6B is
     246:	20 73 65 74 20 74 6f 3a 00                           set to:.

0000024f <_ZZ10start_gyrovE3__c_0>:
     24f:	52 65 67 69 73 74 65 72 20 30 78 32 33 20 69 73     Register 0x23 is
     25f:	20 73 65 74 20 74 6f 3a 00                           set to:.

00000268 <_ZZ10start_gyrovE3__c>:
     268:	52 65 67 69 73 74 65 72 20 30 78 32 30 20 69 73     Register 0x20 is
     278:	20 73 65 74 20 74 6f 3a 00                           set to:.

00000281 <_ZZ4loopE3__c_154>:
     281:	77 77 77 2e 62 72 6f 6b 6b 69 6e 67 2e 6e 65 74     www.brokking.net
     291:	20 66 6f 72 20 6d 6f 72 65 20 69 6e 66 6f 72 6d      for more inform
     2a1:	61 74 69 6f 6e 20 61 62 6f 75 74 20 74 68 69 73     ation about this
     2b1:	20 65 72 72 6f 72 2e 00                              error..

000002b9 <_ZZ4loopE3__c_153>:
     2b9:	43 68 65 63 6b 20 74 68 65 20 51 20 61 6e 64 20     Check the Q and 
     2c9:	41 20 70 61 67 65 20 6f 66 20 74 68 65 20 59 4d     A page of the YM
     2d9:	46 43 2d 41 4c 20 70 72 6f 6a 65 63 74 20 6f 6e     FC-AL project on
     2e9:	3a 00                                               :.

000002eb <_ZZ4loopE3__c_152>:
     2eb:	54 68 65 20 73 65 74 75 70 20 69 73 20 61 62 6f     The setup is abo
     2fb:	72 74 65 64 20 64 75 65 20 74 6f 20 61 6e 20 65     rted due to an e
     30b:	72 72 6f 72 2e 00                                   rror..

00000311 <_ZZ4loopE3__c_151>:
     311:	59 6f 75 20 63 61 6e 20 6e 6f 77 20 63 61 6c 69     You can now cali
     321:	62 72 61 74 65 20 74 68 65 20 65 73 63 27 73 20     brate the esc's 
     331:	61 6e 64 20 75 70 6c 6f 61 64 20 74 68 65 20 59     and upload the Y
     341:	4d 46 43 2d 41 4c 20 63 6f 64 65 2e 00              MFC-AL code..

0000034e <_ZZ4loopE3__c_150>:
     34e:	53 65 74 75 70 20 69 73 20 66 69 6e 69 73 68 65     Setup is finishe
     35e:	64 2e 00                                            d..

00000361 <_ZZ4loopE3__c_149>:
     361:	56 65 72 69 66 69 63 61 74 69 6f 6e 20 64 6f 6e     Verification don
     371:	65 00                                               e.

00000373 <_ZZ4loopE3__c_148>:
     373:	45 45 50 52 4f 4d 20 76 65 72 69 66 69 63 61 74     EEPROM verificat
     383:	69 6f 6e 20 66 61 69 6c 65 64 21 21 21 20 28 45     ion failed!!! (E
     393:	52 52 4f 52 20 35 29 00                             RROR 5).

0000039b <_ZZ4loopE3__c_147>:
     39b:	56 65 72 69 66 79 20 45 45 50 52 4f 4d 20 64 61     Verify EEPROM da
     3ab:	74 61 00                                            ta.

000003ae <_ZZ4loopE3__c_146>:
     3ae:	44 6f 6e 65 21 00                                   Done!.

000003b4 <_ZZ4loopE3__c_145>:
     3b4:	57 72 69 74 69 6e 67 20 45 45 50 52 4f 4d 00        Writing EEPROM.

000003c3 <_ZZ4loopE3__c_144>:
     3c3:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     3d3:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     3e3:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     3f3:	3d 3d 3d 00                                         ===.

000003f7 <_ZZ4loopE3__c_143>:
     3f7:	53 74 6f 72 69 6e 67 20 45 45 50 52 4f 4d 20 69     Storing EEPROM i
     407:	6e 66 6f 72 6d 61 74 69 6f 6e 00                    nformation.

00000412 <_ZZ4loopE3__c_142>:
     412:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     422:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     432:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     442:	3d 3d 3d 00                                         ===.

00000446 <_ZZ4loopE3__c_141>:
	...

00000447 <_ZZ4loopE3__c_140>:
     447:	47 79 72 6f 20 65 78 65 73 20 76 65 72 69 66 69     Gyro exes verifi
     457:	63 61 74 69 6f 6e 20 66 61 69 6c 65 64 21 21 21     cation failed!!!
     467:	20 28 45 52 52 4f 52 20 37 29 00                     (ERROR 7).

00000472 <_ZZ4loopE3__c_139>:
     472:	47 79 72 6f 20 61 78 65 73 20 6f 6b 00              Gyro axes ok.

0000047f <_ZZ4loopE3__c_138>:
     47f:	52 65 63 65 69 76 65 72 20 63 68 61 6e 6e 65 6c     Receiver channel
     48f:	20 76 65 72 69 66 69 63 61 74 69 6f 6e 20 66 61      verification fa
     49f:	69 6c 65 64 21 21 21 20 28 45 52 52 4f 52 20 36     iled!!! (ERROR 6
     4af:	29 00                                               ).

000004b1 <_ZZ4loopE3__c_137>:
     4b1:	52 65 63 65 69 76 65 72 20 63 68 61 6e 6e 65 6c     Receiver channel
     4c1:	73 20 6f 6b 00                                      s ok.

000004c6 <_ZZ4loopE3__c_136>:
     4c6:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     4d6:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     4e6:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     4f6:	3d 3d 3d 00                                         ===.

000004fa <_ZZ4loopE3__c_135>:
     4fa:	46 69 6e 61 6c 20 73 65 74 75 70 20 63 68 65 63     Final setup chec
     50a:	6b 00                                               k.

0000050c <_ZZ4loopE3__c_134>:
     50c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     51c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     52c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     53c:	3d 3d 3d 00                                         ===.

00000540 <_ZZ4loopE3__c_133>:
	...

00000541 <_ZZ4loopE3__c_132>:
     541:	4d 6f 76 65 20 73 74 69 63 6b 20 27 6e 6f 73 65     Move stick 'nose
     551:	20 75 70 27 20 61 6e 64 20 62 61 63 6b 20 74 6f      up' and back to
     561:	20 63 65 6e 74 65 72 20 74 6f 20 63 6f 6e 74 69      center to conti
     571:	6e 75 65 00                                         nue.

00000575 <_ZZ4loopE3__c_131>:
     575:	54 68 65 20 4c 45 44 20 73 68 6f 75 6c 64 20 6e     The LED should n
     585:	6f 77 20 62 65 20 6c 69 74 00                       ow be lit.

0000058f <_ZZ4loopE3__c_130>:
     58f:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     59f:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     5af:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     5bf:	3d 3d 3d 00                                         ===.

000005c3 <_ZZ4loopE3__c_129>:
     5c3:	4c 45 44 20 74 65 73 74 00                          LED test.

000005cc <_ZZ4loopE3__c_128>:
     5cc:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     5dc:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     5ec:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     5fc:	3d 3d 3d 00                                         ===.

00000600 <_ZZ4loopE3__c_127>:
	...

00000601 <_ZZ4loopE3__c_126>:
     601:	4d 6f 76 65 20 73 74 69 63 6b 20 27 6e 6f 73 65     Move stick 'nose
     611:	20 75 70 27 20 61 6e 64 20 62 61 63 6b 20 74 6f      up' and back to
     621:	20 63 65 6e 74 65 72 20 74 6f 20 63 6f 6e 74 69      center to conti
     631:	6e 75 65 00                                         nue.

00000635 <_ZZ4loopE3__c_125>:
     635:	50 75 74 20 74 68 65 20 71 75 61 64 63 6f 70 74     Put the quadcopt
     645:	65 72 20 62 61 63 6b 20 69 6e 20 69 74 73 20 6f     er back in its o
     655:	72 69 67 69 6e 61 6c 20 70 6f 73 69 74 69 6f 6e     riginal position
	...

00000666 <_ZZ4loopE3__c_124>:
     666:	41 78 69 73 20 69 6e 76 65 72 74 65 64 20 3d 20     Axis inverted = 
     676:	6e 6f 00                                            no.

00000679 <_ZZ4loopE3__c_123>:
     679:	41 78 69 73 20 69 6e 76 65 72 74 65 64 20 3d 20     Axis inverted = 
     689:	79 65 73 00                                         yes.

0000068d <_ZZ4loopE3__c_122>:
     68d:	41 6e 67 6c 65 20 64 65 74 65 63 74 69 6f 6e 20     Angle detection 
     69d:	3d 20 00                                            = .

000006a0 <_ZZ4loopE3__c_121>:
     6a0:	4f 4b 21 00                                         OK!.

000006a4 <_ZZ4loopE3__c_120>:
     6a4:	52 6f 74 61 74 65 20 74 68 65 20 6e 6f 73 65 20     Rotate the nose 
     6b4:	6f 66 20 74 68 65 20 71 75 61 64 63 6f 70 74 65     of the quadcopte
     6c4:	72 20 34 35 20 64 65 67 72 65 65 20 74 6f 20 74     r 45 degree to t
     6d4:	68 65 20 72 69 67 68 74 20 77 69 74 68 69 6e 20     he right within 
     6e4:	31 30 20 73 65 63 6f 6e 64 73 00                    10 seconds.

000006ef <_ZZ4loopE3__c_119>:
	...

000006f0 <_ZZ4loopE3__c_118>:
	...

000006f1 <_ZZ4loopE3__c_117>:
     6f1:	4d 6f 76 65 20 73 74 69 63 6b 20 27 6e 6f 73 65     Move stick 'nose
     701:	20 75 70 27 20 61 6e 64 20 62 61 63 6b 20 74 6f      up' and back to
     711:	20 63 65 6e 74 65 72 20 74 6f 20 63 6f 6e 74 69      center to conti
     721:	6e 75 65 00                                         nue.

00000725 <_ZZ4loopE3__c_116>:
     725:	50 75 74 20 74 68 65 20 71 75 61 64 63 6f 70 74     Put the quadcopt
     735:	65 72 20 62 61 63 6b 20 69 6e 20 69 74 73 20 6f     er back in its o
     745:	72 69 67 69 6e 61 6c 20 70 6f 73 69 74 69 6f 6e     riginal position
	...

00000756 <_ZZ4loopE3__c_115>:
     756:	41 78 69 73 20 69 6e 76 65 72 74 65 64 20 3d 20     Axis inverted = 
     766:	6e 6f 00                                            no.

00000769 <_ZZ4loopE3__c_114>:
     769:	41 78 69 73 20 69 6e 76 65 72 74 65 64 20 3d 20     Axis inverted = 
     779:	79 65 73 00                                         yes.

0000077d <_ZZ4loopE3__c_113>:
     77d:	41 6e 67 6c 65 20 64 65 74 65 63 74 69 6f 6e 20     Angle detection 
     78d:	3d 20 00                                            = .

00000790 <_ZZ4loopE3__c_112>:
     790:	4f 4b 21 00                                         OK!.

00000794 <_ZZ4loopE3__c_111>:
     794:	4c 69 66 74 20 74 68 65 20 6e 6f 73 65 20 6f 66     Lift the nose of
     7a4:	20 74 68 65 20 71 75 61 64 63 6f 70 74 65 72 20      the quadcopter 
     7b4:	74 6f 20 61 20 34 35 20 64 65 67 72 65 65 20 61     to a 45 degree a
     7c4:	6e 67 6c 65 20 77 69 74 68 69 6e 20 31 30 20 73     ngle within 10 s
     7d4:	65 63 6f 6e 64 73 00                                econds.

000007db <_ZZ4loopE3__c_110>:
	...

000007dc <_ZZ4loopE3__c_109>:
	...

000007dd <_ZZ4loopE3__c_108>:
     7dd:	4d 6f 76 65 20 73 74 69 63 6b 20 27 6e 6f 73 65     Move stick 'nose
     7ed:	20 75 70 27 20 61 6e 64 20 62 61 63 6b 20 74 6f      up' and back to
     7fd:	20 63 65 6e 74 65 72 20 74 6f 20 63 6f 6e 74 69      center to conti
     80d:	6e 75 65 00                                         nue.

00000811 <_ZZ4loopE3__c_107>:
     811:	50 75 74 20 74 68 65 20 71 75 61 64 63 6f 70 74     Put the quadcopt
     821:	65 72 20 62 61 63 6b 20 69 6e 20 69 74 73 20 6f     er back in its o
     831:	72 69 67 69 6e 61 6c 20 70 6f 73 69 74 69 6f 6e     riginal position
	...

00000842 <_ZZ4loopE3__c_106>:
     842:	41 78 69 73 20 69 6e 76 65 72 74 65 64 20 3d 20     Axis inverted = 
     852:	6e 6f 00                                            no.

00000855 <_ZZ4loopE3__c_105>:
     855:	41 78 69 73 20 69 6e 76 65 72 74 65 64 20 3d 20     Axis inverted = 
     865:	79 65 73 00                                         yes.

00000869 <_ZZ4loopE3__c_104>:
     869:	41 6e 67 6c 65 20 64 65 74 65 63 74 69 6f 6e 20     Angle detection 
     879:	3d 20 00                                            = .

0000087c <_ZZ4loopE3__c_103>:
     87c:	4f 4b 21 00                                         OK!.

00000880 <_ZZ4loopE3__c_102>:
     880:	4c 69 66 74 20 74 68 65 20 6c 65 66 74 20 73 69     Lift the left si
     890:	64 65 20 6f 66 20 74 68 65 20 71 75 61 64 63 6f     de of the quadco
     8a0:	70 74 65 72 20 74 6f 20 61 20 34 35 20 64 65 67     pter to a 45 deg
     8b0:	72 65 65 20 61 6e 67 6c 65 20 77 69 74 68 69 6e     ree angle within
     8c0:	20 31 30 20 73 65 63 6f 6e 64 73 00                  10 seconds.

000008cc <_ZZ4loopE3__c_101>:
     8cc:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     8dc:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     8ec:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     8fc:	3d 3d 3d 00                                         ===.

00000900 <_ZZ4loopE3__c_100>:
     900:	47 79 72 6f 20 61 78 65 73 20 63 6f 6e 66 69 67     Gyro axes config
     910:	75 72 61 74 69 6f 6e 00                             uration.

00000918 <_ZZ4loopE3__c_99>:
     918:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     928:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     938:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     948:	3d 3d 3d 00                                         ===.

0000094c <_ZZ4loopE3__c_98>:
	...

0000094d <_ZZ4loopE3__c_97>:
     94d:	41 78 69 73 20 33 20 6f 66 66 73 65 74 3d 00        Axis 3 offset=.

0000095c <_ZZ4loopE3__c_96>:
     95c:	41 78 69 73 20 32 20 6f 66 66 73 65 74 3d 00        Axis 2 offset=.

0000096b <_ZZ4loopE3__c_95>:
     96b:	41 78 69 73 20 31 20 6f 66 66 73 65 74 3d 00        Axis 1 offset=.

0000097a <_ZZ4loopE3__c_94>:
	...

0000097b <_ZZ4loopE3__c_93>:
     97b:	2e 00                                               ..

0000097d <_ZZ4loopE3__c_92>:
     97d:	50 6c 65 61 73 65 20 77 61 69 74 00                 Please wait.

00000989 <_ZZ4loopE3__c_91>:
     989:	43 61 6c 69 62 72 61 74 69 6e 67 20 74 68 65 20     Calibrating the 
     999:	67 79 72 6f 2c 20 74 68 69 73 20 77 69 6c 6c 20     gyro, this will 
     9a9:	74 61 6b 65 20 2b 2f 2d 20 38 20 73 65 63 6f 6e     take +/- 8 secon
     9b9:	64 73 00                                            ds.

000009bc <_ZZ4loopE3__c_90>:
     9bc:	44 6f 6e 27 74 20 6d 6f 76 65 20 74 68 65 20 71     Don't move the q
     9cc:	75 61 64 63 6f 70 74 65 72 21 21 20 43 61 6c 69     uadcopter!! Cali
     9dc:	62 72 61 74 69 6f 6e 20 73 74 61 72 74 73 20 69     bration starts i
     9ec:	6e 20 33 20 73 65 63 6f 6e 64 73 00                 n 3 seconds.

000009f8 <_ZZ4loopE3__c_89>:
     9f8:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a08:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a18:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a28:	3d 3d 3d 00                                         ===.

00000a2c <_ZZ4loopE3__c_88>:
     a2c:	47 79 72 6f 20 63 61 6c 69 62 72 61 74 69 6f 6e     Gyro calibration
	...

00000a3d <_ZZ4loopE3__c_87>:
     a3d:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a4d:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a5d:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a6d:	3d 3d 3d 00                                         ===.

00000a71 <_ZZ4loopE3__c_86>:
	...

00000a72 <_ZZ4loopE3__c_85>:
     a72:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a82:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a92:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     aa2:	3d 3d 3d 00                                         ===.

00000aa6 <_ZZ4loopE3__c_84>:
     aa6:	47 79 72 6f 20 72 65 67 69 73 74 65 72 20 73 65     Gyro register se
     ab6:	74 74 69 6e 67 73 00                                ttings.

00000abd <_ZZ4loopE3__c_83>:
     abd:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     acd:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     add:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     aed:	3d 3d 3d 00                                         ===.

00000af1 <_ZZ4loopE3__c_82>:
	...

00000af2 <_ZZ4loopE3__c_68>:
     af2:	4d 50 55 2d 39 32 35 35 20 66 6f 75 6e 64 20 6f     MPU-9255 found o
     b02:	6e 20 61 64 64 72 65 73 73 20 30 78 36 38 00        n address 0x68.

00000b11 <_ZZ4loopE3__c_67>:
     b11:	53 65 61 72 63 68 69 6e 67 20 66 6f 72 20 4d 50     Searching for MP
     b21:	55 2d 39 32 35 35 20 6f 6e 20 61 64 64 72 65 73     U-9255 on addres
     b31:	73 20 30 78 36 38 2f 31 30 34 00                    s 0x68/104.

00000b3c <_ZZ4loopE3__c_66>:
     b3c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     b4c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     b5c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     b6c:	3d 3d 3d 00                                         ===.

00000b70 <_ZZ4loopE3__c_65>:
     b70:	47 79 72 6f 20 73 65 61 72 63 68 00                 Gyro search.

00000b7c <_ZZ4loopE3__c_64>:
     b7c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     b8c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     b9c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     bac:	3d 3d 3d 00                                         ===.

00000bb0 <_ZZ4loopE3__c_63>:
	...

00000bb1 <_ZZ4loopE3__c_62>:
     bb1:	4d 6f 76 65 20 73 74 69 63 6b 20 27 6e 6f 73 65     Move stick 'nose
     bc1:	20 75 70 27 20 61 6e 64 20 62 61 63 6b 20 74 6f      up' and back to
     bd1:	20 63 65 6e 74 65 72 20 74 6f 20 63 6f 6e 74 69      center to conti
     be1:	6e 75 65 00                                         nue.

00000be5 <_ZZ4loopE3__c_61>:
     be5:	20 2d 20 00                                          - .

00000be9 <_ZZ4loopE3__c_60>:
     be9:	20 2d 20 00                                          - .

00000bed <_ZZ4loopE3__c_59>:
     bed:	44 69 67 69 74 61 6c 20 69 6e 70 75 74 20 31 31     Digital input 11
     bfd:	20 76 61 6c 75 65 73 3a 00                           values:.

00000c06 <_ZZ4loopE3__c_58>:
     c06:	20 2d 20 00                                          - .

00000c0a <_ZZ4loopE3__c_57>:
     c0a:	20 2d 20 00                                          - .

00000c0e <_ZZ4loopE3__c_56>:
     c0e:	44 69 67 69 74 61 6c 20 69 6e 70 75 74 20 31 30     Digital input 10
     c1e:	20 76 61 6c 75 65 73 3a 00                           values:.

00000c27 <_ZZ4loopE3__c_55>:
     c27:	20 2d 20 00                                          - .

00000c2b <_ZZ4loopE3__c_54>:
     c2b:	20 2d 20 00                                          - .

00000c2f <_ZZ4loopE3__c_53>:
     c2f:	44 69 67 69 74 61 6c 20 69 6e 70 75 74 20 30 39     Digital input 09
     c3f:	20 76 61 6c 75 65 73 3a 00                           values:.

00000c48 <_ZZ4loopE3__c_52>:
     c48:	20 2d 20 00                                          - .

00000c4c <_ZZ4loopE3__c_51>:
     c4c:	20 2d 20 00                                          - .

00000c50 <_ZZ4loopE3__c_50>:
     c50:	44 69 67 69 74 61 6c 20 69 6e 70 75 74 20 30 38     Digital input 08
     c60:	20 76 61 6c 75 65 73 3a 00                           values:.

00000c69 <_ZZ4loopE3__c_49>:
     c69:	48 69 67 68 2c 20 6c 6f 77 20 61 6e 64 20 63 65     High, low and ce
     c79:	6e 74 65 72 20 76 61 6c 75 65 73 20 66 6f 75 6e     nter values foun
     c89:	64 20 64 75 72 69 6e 67 20 73 65 74 75 70 00        d during setup.

00000c98 <_ZZ4loopE3__c_48>:
	...

00000c99 <_ZZ4loopE3__c_47>:
	...

00000c9a <_ZZ4loopE3__c_46>:
     c9a:	57 68 65 6e 20 72 65 61 64 79 20 70 75 74 20 74     When ready put t
     caa:	68 65 20 73 74 69 63 6b 73 20 62 61 63 6b 20 69     he sticks back i
     cba:	6e 20 74 68 65 69 72 20 63 65 6e 74 65 72 20 70     n their center p
     cca:	6f 73 69 74 69 6f 6e 73 00                          ositions.

00000cd3 <_ZZ4loopE3__c_45>:
     cd3:	47 65 6e 74 6c 79 20 6d 6f 76 65 20 61 6c 6c 20     Gently move all 
     ce3:	74 68 65 20 73 74 69 63 6b 73 20 73 69 6d 75 6c     the sticks simul
     cf3:	74 61 6e 65 6f 75 73 6c 79 20 74 6f 20 74 68 65     taneously to the
     d03:	69 72 20 65 78 74 65 6e 64 73 00                    ir extends.

00000d0e <_ZZ4loopE3__c_44>:
	...

00000d0f <_ZZ4loopE3__c_43>:
	...

00000d10 <_ZZ4loopE3__c_42>:
     d10:	43 68 61 6e 6e 65 6c 20 69 6e 76 65 72 74 65 64     Channel inverted
     d20:	20 3d 20 6e 6f 00                                    = no.

00000d26 <_ZZ4loopE3__c_41>:
     d26:	43 68 61 6e 6e 65 6c 20 69 6e 76 65 72 74 65 64     Channel inverted
     d36:	20 3d 20 79 65 73 00                                 = yes.

00000d3d <_ZZ4loopE3__c_40>:
     d3d:	59 61 77 20 69 73 20 63 6f 6e 6e 65 63 74 65 64     Yaw is connected
     d4d:	20 74 6f 20 64 69 67 69 74 61 6c 20 69 6e 70 75      to digital inpu
     d5d:	74 20 00                                            t .

00000d60 <_ZZ4loopE3__c_39>:
     d60:	4d 6f 76 65 20 74 68 65 20 79 61 77 20 73 74 69     Move the yaw sti
     d70:	63 6b 20 74 6f 20 73 69 6d 75 6c 61 74 65 20 6e     ck to simulate n
     d80:	6f 73 65 20 72 69 67 68 74 20 61 6e 64 20 62 61     ose right and ba
     d90:	63 6b 20 74 6f 20 63 65 6e 74 65 72 00              ck to center.

00000d9d <_ZZ4loopE3__c_38>:
	...

00000d9e <_ZZ4loopE3__c_37>:
	...

00000d9f <_ZZ4loopE3__c_36>:
     d9f:	43 68 61 6e 6e 65 6c 20 69 6e 76 65 72 74 65 64     Channel inverted
     daf:	20 3d 20 6e 6f 00                                    = no.

00000db5 <_ZZ4loopE3__c_35>:
     db5:	43 68 61 6e 6e 65 6c 20 69 6e 76 65 72 74 65 64     Channel inverted
     dc5:	20 3d 20 79 65 73 00                                 = yes.

00000dcc <_ZZ4loopE3__c_34>:
     dcc:	50 69 74 63 68 20 69 73 20 63 6f 6e 6e 65 63 74     Pitch is connect
     ddc:	65 64 20 74 6f 20 64 69 67 69 74 61 6c 20 69 6e     ed to digital in
     dec:	70 75 74 20 00                                      put .

00000df1 <_ZZ4loopE3__c_33>:
     df1:	4d 6f 76 65 20 74 68 65 20 70 69 74 63 68 20 73     Move the pitch s
     e01:	74 69 63 6b 20 74 6f 20 73 69 6d 75 6c 61 74 65     tick to simulate
     e11:	20 6e 6f 73 65 20 75 70 20 61 6e 64 20 62 61 63      nose up and bac
     e21:	6b 20 74 6f 20 63 65 6e 74 65 72 00                 k to center.

00000e2d <_ZZ4loopE3__c_32>:
	...

00000e2e <_ZZ4loopE3__c_31>:
	...

00000e2f <_ZZ4loopE3__c_30>:
     e2f:	43 68 61 6e 6e 65 6c 20 69 6e 76 65 72 74 65 64     Channel inverted
     e3f:	20 3d 20 6e 6f 00                                    = no.

00000e45 <_ZZ4loopE3__c_29>:
     e45:	43 68 61 6e 6e 65 6c 20 69 6e 76 65 72 74 65 64     Channel inverted
     e55:	20 3d 20 79 65 73 00                                 = yes.

00000e5c <_ZZ4loopE3__c_28>:
     e5c:	52 6f 6c 6c 20 69 73 20 63 6f 6e 6e 65 63 74 65     Roll is connecte
     e6c:	64 20 74 6f 20 64 69 67 69 74 61 6c 20 69 6e 70     d to digital inp
     e7c:	75 74 20 00                                         ut .

00000e80 <_ZZ4loopE3__c_27>:
     e80:	4d 6f 76 65 20 74 68 65 20 72 6f 6c 6c 20 73 74     Move the roll st
     e90:	69 63 6b 20 74 6f 20 73 69 6d 75 6c 61 74 65 20     ick to simulate 
     ea0:	6c 65 66 74 20 77 69 6e 67 20 75 70 20 61 6e 64     left wing up and
     eb0:	20 62 61 63 6b 20 74 6f 20 63 65 6e 74 65 72 00      back to center.

00000ec0 <_ZZ4loopE3__c_26>:
	...

00000ec1 <_ZZ4loopE3__c_25>:
	...

00000ec2 <_ZZ4loopE3__c_24>:
     ec2:	43 68 61 6e 6e 65 6c 20 69 6e 76 65 72 74 65 64     Channel inverted
     ed2:	20 3d 20 6e 6f 00                                    = no.

00000ed8 <_ZZ4loopE3__c_23>:
     ed8:	43 68 61 6e 6e 65 6c 20 69 6e 76 65 72 74 65 64     Channel inverted
     ee8:	20 3d 20 79 65 73 00                                 = yes.

00000eef <_ZZ4loopE3__c_22>:
     eef:	54 68 72 6f 74 74 6c 65 20 69 73 20 63 6f 6e 6e     Throttle is conn
     eff:	65 63 74 65 64 20 74 6f 20 64 69 67 69 74 61 6c     ected to digital
     f0f:	20 69 6e 70 75 74 20 00                              input .

00000f17 <_ZZ4loopE3__c_21>:
     f17:	4d 6f 76 65 20 74 68 65 20 74 68 72 6f 74 74 6c     Move the throttl
     f27:	65 20 73 74 69 63 6b 20 74 6f 20 66 75 6c 6c 20     e stick to full 
     f37:	74 68 72 6f 74 74 6c 65 20 61 6e 64 20 62 61 63     throttle and bac
     f47:	6b 20 74 6f 20 63 65 6e 74 65 72 00                 k to center.

00000f53 <_ZZ4loopE3__c_20>:
	...

00000f54 <_ZZ4loopE3__c_19>:
	...

00000f55 <_ZZ4loopE3__c_18>:
     f55:	44 69 67 69 74 61 6c 20 69 6e 70 75 74 20 31 31     Digital input 11
     f65:	20 3d 20 00                                          = .

00000f69 <_ZZ4loopE3__c_17>:
     f69:	44 69 67 69 74 61 6c 20 69 6e 70 75 74 20 31 30     Digital input 10
     f79:	20 3d 20 00                                          = .

00000f7d <_ZZ4loopE3__c_16>:
     f7d:	44 69 67 69 74 61 6c 20 69 6e 70 75 74 20 30 39     Digital input 09
     f8d:	20 3d 20 00                                          = .

00000f91 <_ZZ4loopE3__c_15>:
     f91:	44 69 67 69 74 61 6c 20 69 6e 70 75 74 20 30 38     Digital input 08
     fa1:	20 3d 20 00                                          = .

00000fa5 <_ZZ4loopE3__c_14>:
     fa5:	43 65 6e 74 65 72 20 70 6f 73 69 74 69 6f 6e 73     Center positions
     fb5:	20 73 74 6f 72 65 64 2e 00                           stored..

00000fbe <_ZZ4loopE3__c_13>:
	...

00000fbf <_ZZ4loopE3__c_12>:
     fbf:	50 6c 61 63 65 20 61 6c 6c 20 73 74 69 63 6b 73     Place all sticks
     fcf:	20 61 6e 64 20 73 75 62 74 72 69 6d 73 20 69 6e      and subtrims in
     fdf:	20 74 68 65 20 63 65 6e 74 65 72 20 70 6f 73 69      the center posi
     fef:	74 69 6f 6e 20 77 69 74 68 69 6e 20 31 30 20 73     tion within 10 s
     fff:	65 63 6f 6e 64 73 2e 00                             econds..

00001007 <_ZZ4loopE3__c_11>:
	...

00001008 <_ZZ4loopE3__c_10>:
    1008:	43 68 65 63 6b 69 6e 67 20 66 6f 72 20 76 61 6c     Checking for val
    1018:	69 64 20 72 65 63 65 69 76 65 72 20 73 69 67 6e     id receiver sign
    1028:	61 6c 73 2e 00                                      als..

0000102d <_ZZ4loopE3__c_9>:
    102d:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    103d:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    104d:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    105d:	3d 3d 3d 00                                         ===.

00001061 <_ZZ4loopE3__c_8>:
    1061:	54 72 61 6e 73 6d 69 74 74 65 72 20 73 65 74 75     Transmitter setu
    1071:	70 00                                               p.

00001073 <_ZZ4loopE3__c_7>:
    1073:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    1083:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    1093:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    10a3:	3d 3d 3d 00                                         ===.

000010a7 <_ZZ4loopE3__c_6>:
	...

000010a8 <_ZZ4loopE3__c_5>:
    10a8:	49 32 43 20 63 6c 6f 63 6b 20 73 70 65 65 64 20     I2C clock speed 
    10b8:	69 73 20 6e 6f 74 20 73 65 74 20 74 6f 20 34 30     is not set to 40
    10c8:	30 6b 48 7a 2e 20 28 45 52 52 4f 52 20 38 29 00     0kHz. (ERROR 8).

000010d8 <_ZZ4loopE3__c_4>:
    10d8:	49 32 43 20 63 6c 6f 63 6b 20 73 70 65 65 64 20     I2C clock speed 
    10e8:	69 73 20 63 6f 72 72 65 63 74 6c 79 20 73 65 74     is correctly set
    10f8:	20 74 6f 20 34 30 30 6b 48 7a 2e 00                  to 400kHz..

00001104 <_ZZ4loopE3__c_3>:
    1104:	43 68 65 63 6b 69 6e 67 20 49 32 43 20 63 6c 6f     Checking I2C clo
    1114:	63 6b 20 73 70 65 65 64 2e 00                       ck speed..

0000111e <_ZZ4loopE3__c_2>:
    111e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    112e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    113e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    114e:	3d 3d 3d 00                                         ===.

00001152 <_ZZ4loopE3__c_1>:
    1152:	53 79 73 74 65 6d 20 63 68 65 63 6b 00              System check.

0000115f <_ZZ4loopE3__c_0>:
    115f:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    116f:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    117f:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    118f:	3d 3d 3d 00                                         ===.

00001193 <_ZZ4loopE3__c>:
	...

00001194 <digital_pin_to_timer_PGM>:
    1194:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
    11a4:	00 00 00 00                                         ....

000011a8 <digital_pin_to_bit_mask_PGM>:
    11a8:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
    11b8:	04 08 10 20                                         ... 

000011bc <digital_pin_to_port_PGM>:
    11bc:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
    11cc:	03 03 03 03                                         ....

000011d0 <port_to_output_PGM>:
    11d0:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000011da <port_to_mode_PGM>:
    11da:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000011e4 <__ctors_start>:
    11e4:	41 20       	and	r4, r1
    11e6:	61 24       	eor	r6, r1

000011e8 <__ctors_end>:
    11e8:	11 24       	eor	r1, r1
    11ea:	1f be       	out	0x3f, r1	; 63
    11ec:	cf ef       	ldi	r28, 0xFF	; 255
    11ee:	d8 e0       	ldi	r29, 0x08	; 8
    11f0:	de bf       	out	0x3e, r29	; 62
    11f2:	cd bf       	out	0x3d, r28	; 61

000011f4 <__do_copy_data>:
    11f4:	11 e0       	ldi	r17, 0x01	; 1
    11f6:	a0 e0       	ldi	r26, 0x00	; 0
    11f8:	b1 e0       	ldi	r27, 0x01	; 1
    11fa:	ea e6       	ldi	r30, 0x6A	; 106
    11fc:	f1 e5       	ldi	r31, 0x51	; 81
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <__do_copy_data+0x10>
    1200:	05 90       	lpm	r0, Z+
    1202:	0d 92       	st	X+, r0
    1204:	a8 33       	cpi	r26, 0x38	; 56
    1206:	b1 07       	cpc	r27, r17
    1208:	d9 f7       	brne	.-10     	; 0x1200 <__do_copy_data+0xc>

0000120a <__do_clear_bss>:
    120a:	23 e0       	ldi	r18, 0x03	; 3
    120c:	a8 e3       	ldi	r26, 0x38	; 56
    120e:	b1 e0       	ldi	r27, 0x01	; 1
    1210:	01 c0       	rjmp	.+2      	; 0x1214 <.do_clear_bss_start>

00001212 <.do_clear_bss_loop>:
    1212:	1d 92       	st	X+, r1

00001214 <.do_clear_bss_start>:
    1214:	a5 30       	cpi	r26, 0x05	; 5
    1216:	b2 07       	cpc	r27, r18
    1218:	e1 f7       	brne	.-8      	; 0x1212 <.do_clear_bss_loop>

0000121a <__do_global_ctors>:
    121a:	18 e0       	ldi	r17, 0x08	; 8
    121c:	c4 ef       	ldi	r28, 0xF4	; 244
    121e:	d8 e0       	ldi	r29, 0x08	; 8
    1220:	04 c0       	rjmp	.+8      	; 0x122a <__do_global_ctors+0x10>
    1222:	21 97       	sbiw	r28, 0x01	; 1
    1224:	fe 01       	movw	r30, r28
    1226:	0e 94 97 28 	call	0x512e	; 0x512e <__tablejump2__>
    122a:	c2 3f       	cpi	r28, 0xF2	; 242
    122c:	d1 07       	cpc	r29, r17
    122e:	c9 f7       	brne	.-14     	; 0x1222 <__do_global_ctors+0x8>
    1230:	0e 94 6f 20 	call	0x40de	; 0x40de <main>
    1234:	0c 94 b3 28 	jmp	0x5166	; 0x5166 <_exit>

00001238 <__bad_interrupt>:
    1238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000123c <_ZN11EEPROMClass4readEi.isra.0>:

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    123c:	0c 94 9d 28 	jmp	0x513a	; 0x513a <eeprom_read_byte>

00001240 <_ZN11EEPROMClass5writeEih.isra.1>:
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    1240:	0c 94 a5 28 	jmp	0x514a	; 0x514a <eeprom_write_byte>

00001244 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    1244:	dc 01       	movw	r26, r24
    1246:	ed 91       	ld	r30, X+
    1248:	fc 91       	ld	r31, X
    124a:	01 90       	ld	r0, Z+
    124c:	f0 81       	ld	r31, Z
    124e:	e0 2d       	mov	r30, r0
    1250:	09 94       	ijmp

00001252 <setup>:
#define LED_STATUS_PIN 13
#define LED_LIGHT_PIN  A1

//Setup routine
void setup(){
	pinMode(LED_STATUS_PIN, OUTPUT);
    1252:	61 e0       	ldi	r22, 0x01	; 1
    1254:	8d e0       	ldi	r24, 0x0D	; 13
    1256:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <pinMode>
	//Arduino (Atmega) pins default to inputs, so they don't need to be explicitly declared as inputs
	PCICR |= (1 << PCIE0);    // set PCIE0 to enable PCMSK0 scan
    125a:	e8 e6       	ldi	r30, 0x68	; 104
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	81 60       	ori	r24, 0x01	; 1
    1262:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0);  // set PCINT0 (digital input 8) to trigger an interrupt on state change
    1264:	eb e6       	ldi	r30, 0x6B	; 107
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	81 60       	ori	r24, 0x01	; 1
    126c:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT1);  // set PCINT1 (digital input 9)to trigger an interrupt on state change
    126e:	80 81       	ld	r24, Z
    1270:	82 60       	ori	r24, 0x02	; 2
    1272:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT2);  // set PCINT2 (digital input 10)to trigger an interrupt on state change
    1274:	80 81       	ld	r24, Z
    1276:	84 60       	ori	r24, 0x04	; 4
    1278:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT3);  // set PCINT3 (digital input 11)to trigger an interrupt on state change
    127a:	80 81       	ld	r24, Z
    127c:	88 60       	ori	r24, 0x08	; 8
    127e:	80 83       	st	Z, r24
	Wire.begin();             //Start the I2C as master
    1280:	8c e3       	ldi	r24, 0x3C	; 60
    1282:	92 e0       	ldi	r25, 0x02	; 2
    1284:	0e 94 c5 23 	call	0x478a	; 0x478a <_ZN7TwoWire5beginEv>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1288:	26 e0       	ldi	r18, 0x06	; 6
    128a:	40 e0       	ldi	r20, 0x00	; 0
    128c:	51 ee       	ldi	r21, 0xE1	; 225
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	8f e9       	ldi	r24, 0x9F	; 159
    1294:	91 e0       	ldi	r25, 0x01	; 1
    1296:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(57600);      //Start the serial connetion @ 57600bps
	delay(250);               //Give the gyro time to start
    129a:	6a ef       	ldi	r22, 0xFA	; 250
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	0c 94 e1 24 	jmp	0x49c2	; 0x49c2 <delay>

000012a6 <_Z21check_receiver_inputsh>:
		if(cal_int == 2000)gyro_yaw -= gyro_yaw_cal;                 //Only compensate after the calibration
	}
}

//Check if a receiver input value is changing within 30 seconds
void check_receiver_inputs(byte movement){
    12a6:	cf 92       	push	r12
    12a8:	df 92       	push	r13
    12aa:	ef 92       	push	r14
    12ac:	ff 92       	push	r15
    12ae:	0f 93       	push	r16
    12b0:	1f 93       	push	r17
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	d8 2f       	mov	r29, r24
	byte trigger = 0;
	int pulse_length;
	timer = millis() + 30000;
    12b8:	0e 94 b0 24 	call	0x4960	; 0x4960 <millis>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	80 5d       	subi	r24, 0xD0	; 208
    12c2:	9a 48       	sbci	r25, 0x8A	; 138
    12c4:	af 4f       	sbci	r26, 0xFF	; 255
    12c6:	bf 4f       	sbci	r27, 0xFF	; 255
    12c8:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timer>
    12cc:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timer+0x1>
    12d0:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <timer+0x2>
    12d4:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <timer+0x3>
	}
}

//Check if a receiver input value is changing within 30 seconds
void check_receiver_inputs(byte movement){
	byte trigger = 0;
    12d8:	c0 e0       	ldi	r28, 0x00	; 0
	int pulse_length;
	timer = millis() + 30000;
	while(timer > millis() && trigger == 0){
    12da:	0e 94 b0 24 	call	0x4960	; 0x4960 <millis>
    12de:	c0 90 64 01 	lds	r12, 0x0164	; 0x800164 <timer>
    12e2:	d0 90 65 01 	lds	r13, 0x0165	; 0x800165 <timer+0x1>
    12e6:	e0 90 66 01 	lds	r14, 0x0166	; 0x800166 <timer+0x2>
    12ea:	f0 90 67 01 	lds	r15, 0x0167	; 0x800167 <timer+0x3>
    12ee:	6c 15       	cp	r22, r12
    12f0:	7d 05       	cpc	r23, r13
    12f2:	8e 05       	cpc	r24, r14
    12f4:	9f 05       	cpc	r25, r15
    12f6:	08 f0       	brcs	.+2      	; 0x12fa <_Z21check_receiver_inputsh+0x54>
    12f8:	60 c0       	rjmp	.+192    	; 0x13ba <_Z21check_receiver_inputsh+0x114>
    12fa:	cc 23       	and	r28, r28
    12fc:	d1 f0       	breq	.+52     	; 0x1332 <_Z21check_receiver_inputsh+0x8c>
		error = 1;
		Serial.println(F("No stick movement detected in the last 30 seconds!!! (ERROR 2)"));
	}
	//Assign the stick to the function.
	else{
		if(movement == 1){
    12fe:	d1 30       	cpi	r29, 0x01	; 1
    1300:	31 f4       	brne	.+12     	; 0x130e <_Z21check_receiver_inputsh+0x68>
			channel_3_assign = trigger;
			if(pulse_length < 1250)channel_3_assign += 0b10000000;
    1302:	02 3e       	cpi	r16, 0xE2	; 226
    1304:	14 40       	sbci	r17, 0x04	; 4
    1306:	0c f0       	brlt	.+2      	; 0x130a <_Z21check_receiver_inputsh+0x64>
    1308:	97 c0       	rjmp	.+302    	; 0x1438 <_Z21check_receiver_inputsh+0x192>
    130a:	c0 58       	subi	r28, 0x80	; 128
    130c:	95 c0       	rjmp	.+298    	; 0x1438 <_Z21check_receiver_inputsh+0x192>
		}
		if(movement == 2){
    130e:	d2 30       	cpi	r29, 0x02	; 2
    1310:	31 f4       	brne	.+12     	; 0x131e <_Z21check_receiver_inputsh+0x78>
			channel_1_assign = trigger;
			if(pulse_length < 1250)channel_1_assign += 0b10000000;
    1312:	02 3e       	cpi	r16, 0xE2	; 226
    1314:	14 40       	sbci	r17, 0x04	; 4
    1316:	0c f0       	brlt	.+2      	; 0x131a <_Z21check_receiver_inputsh+0x74>
    1318:	9b c0       	rjmp	.+310    	; 0x1450 <_Z21check_receiver_inputsh+0x1aa>
    131a:	c0 58       	subi	r28, 0x80	; 128
    131c:	99 c0       	rjmp	.+306    	; 0x1450 <_Z21check_receiver_inputsh+0x1aa>
		}
		if(movement == 3){
    131e:	d3 30       	cpi	r29, 0x03	; 3
    1320:	09 f0       	breq	.+2      	; 0x1324 <_Z21check_receiver_inputsh+0x7e>
    1322:	8d c0       	rjmp	.+282    	; 0x143e <_Z21check_receiver_inputsh+0x198>
			channel_2_assign = trigger;
			if(pulse_length < 1250)channel_2_assign += 0b10000000;
    1324:	02 3e       	cpi	r16, 0xE2	; 226
    1326:	14 40       	sbci	r17, 0x04	; 4
    1328:	0c f4       	brge	.+2      	; 0x132c <_Z21check_receiver_inputsh+0x86>
    132a:	c0 58       	subi	r28, 0x80	; 128
    132c:	c0 93 93 01 	sts	0x0193, r28	; 0x800193 <channel_2_assign>
    1330:	91 c0       	rjmp	.+290    	; 0x1454 <_Z21check_receiver_inputsh+0x1ae>
void check_receiver_inputs(byte movement){
	byte trigger = 0;
	int pulse_length;
	timer = millis() + 30000;
	while(timer > millis() && trigger == 0){
		delay(250);
    1332:	6a ef       	ldi	r22, 0xFA	; 250
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
		if(receiver_input_channel_1 > 1750 || receiver_input_channel_1 < 1250){
    133e:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <receiver_input_channel_1>
    1342:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <receiver_input_channel_1+0x1>
    1346:	87 3d       	cpi	r24, 0xD7	; 215
    1348:	96 40       	sbci	r25, 0x06	; 6
    134a:	0c f0       	brlt	.+2      	; 0x134e <_Z21check_receiver_inputsh+0xa8>
    134c:	49 c0       	rjmp	.+146    	; 0x13e0 <_Z21check_receiver_inputsh+0x13a>
    134e:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <receiver_input_channel_1>
    1352:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <receiver_input_channel_1+0x1>
    1356:	82 3e       	cpi	r24, 0xE2	; 226
    1358:	94 40       	sbci	r25, 0x04	; 4
    135a:	0c f4       	brge	.+2      	; 0x135e <_Z21check_receiver_inputsh+0xb8>
    135c:	41 c0       	rjmp	.+130    	; 0x13e0 <_Z21check_receiver_inputsh+0x13a>
			trigger = 1;
			receiver_check_byte |= 0b00000001;
			pulse_length = receiver_input_channel_1;
		}
		if(receiver_input_channel_2 > 1750 || receiver_input_channel_2 < 1250){
    135e:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <receiver_input_channel_2>
    1362:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <receiver_input_channel_2+0x1>
    1366:	87 3d       	cpi	r24, 0xD7	; 215
    1368:	96 40       	sbci	r25, 0x06	; 6
    136a:	0c f0       	brlt	.+2      	; 0x136e <_Z21check_receiver_inputsh+0xc8>
    136c:	44 c0       	rjmp	.+136    	; 0x13f6 <_Z21check_receiver_inputsh+0x150>
    136e:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <receiver_input_channel_2>
    1372:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <receiver_input_channel_2+0x1>
    1376:	82 3e       	cpi	r24, 0xE2	; 226
    1378:	94 40       	sbci	r25, 0x04	; 4
    137a:	ec f1       	brlt	.+122    	; 0x13f6 <_Z21check_receiver_inputsh+0x150>
			trigger = 2;
			receiver_check_byte |= 0b00000010;
			pulse_length = receiver_input_channel_2;
		}
		if(receiver_input_channel_3 > 1750 || receiver_input_channel_3 < 1250){
    137c:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <receiver_input_channel_3>
    1380:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <receiver_input_channel_3+0x1>
    1384:	87 3d       	cpi	r24, 0xD7	; 215
    1386:	96 40       	sbci	r25, 0x06	; 6
    1388:	0c f0       	brlt	.+2      	; 0x138c <_Z21check_receiver_inputsh+0xe6>
    138a:	40 c0       	rjmp	.+128    	; 0x140c <_Z21check_receiver_inputsh+0x166>
    138c:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <receiver_input_channel_3>
    1390:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <receiver_input_channel_3+0x1>
    1394:	82 3e       	cpi	r24, 0xE2	; 226
    1396:	94 40       	sbci	r25, 0x04	; 4
    1398:	cc f1       	brlt	.+114    	; 0x140c <_Z21check_receiver_inputsh+0x166>
			trigger = 3;
			receiver_check_byte |= 0b00000100;
			pulse_length = receiver_input_channel_3;
		}
		if(receiver_input_channel_4 > 1750 || receiver_input_channel_4 < 1250){
    139a:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <receiver_input_channel_4>
    139e:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <receiver_input_channel_4+0x1>
    13a2:	87 3d       	cpi	r24, 0xD7	; 215
    13a4:	96 40       	sbci	r25, 0x06	; 6
    13a6:	ec f5       	brge	.+122    	; 0x1422 <_Z21check_receiver_inputsh+0x17c>
    13a8:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <receiver_input_channel_4>
    13ac:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <receiver_input_channel_4+0x1>
    13b0:	82 3e       	cpi	r24, 0xE2	; 226
    13b2:	94 40       	sbci	r25, 0x04	; 4
    13b4:	0c f0       	brlt	.+2      	; 0x13b8 <_Z21check_receiver_inputsh+0x112>
    13b6:	91 cf       	rjmp	.-222    	; 0x12da <_Z21check_receiver_inputsh+0x34>
    13b8:	34 c0       	rjmp	.+104    	; 0x1422 <_Z21check_receiver_inputsh+0x17c>
			trigger = 4;
			receiver_check_byte |= 0b00001000;
			pulse_length = receiver_input_channel_4;
		}
	}
	if(trigger == 0){
    13ba:	c1 11       	cpse	r28, r1
    13bc:	a0 cf       	rjmp	.-192    	; 0x12fe <_Z21check_receiver_inputsh+0x58>
		error = 1;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		Serial.println(F("No stick movement detected in the last 30 seconds!!! (ERROR 2)"));
    13c4:	6e ed       	ldi	r22, 0xDE	; 222
    13c6:	71 e0       	ldi	r23, 0x01	; 1
    13c8:	8f e9       	ldi	r24, 0x9F	; 159
    13ca:	91 e0       	ldi	r25, 0x01	; 1
		if(movement == 4){
			channel_4_assign = trigger;
			if(pulse_length < 1250)channel_4_assign += 0b10000000;
		}
	}
}
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	1f 91       	pop	r17
    13d2:	0f 91       	pop	r16
    13d4:	ff 90       	pop	r15
    13d6:	ef 90       	pop	r14
    13d8:	df 90       	pop	r13
    13da:	cf 90       	pop	r12
			pulse_length = receiver_input_channel_4;
		}
	}
	if(trigger == 0){
		error = 1;
		Serial.println(F("No stick movement detected in the last 30 seconds!!! (ERROR 2)"));
    13dc:	0c 94 01 21 	jmp	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
	timer = millis() + 30000;
	while(timer > millis() && trigger == 0){
		delay(250);
		if(receiver_input_channel_1 > 1750 || receiver_input_channel_1 < 1250){
			trigger = 1;
			receiver_check_byte |= 0b00000001;
    13e0:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <receiver_check_byte>
    13e4:	81 60       	ori	r24, 0x01	; 1
    13e6:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <receiver_check_byte>
			pulse_length = receiver_input_channel_1;
    13ea:	00 91 8a 01 	lds	r16, 0x018A	; 0x80018a <receiver_input_channel_1>
    13ee:	10 91 8b 01 	lds	r17, 0x018B	; 0x80018b <receiver_input_channel_1+0x1>
	int pulse_length;
	timer = millis() + 30000;
	while(timer > millis() && trigger == 0){
		delay(250);
		if(receiver_input_channel_1 > 1750 || receiver_input_channel_1 < 1250){
			trigger = 1;
    13f2:	c1 e0       	ldi	r28, 0x01	; 1
    13f4:	b4 cf       	rjmp	.-152    	; 0x135e <_Z21check_receiver_inputsh+0xb8>
			receiver_check_byte |= 0b00000001;
			pulse_length = receiver_input_channel_1;
		}
		if(receiver_input_channel_2 > 1750 || receiver_input_channel_2 < 1250){
			trigger = 2;
			receiver_check_byte |= 0b00000010;
    13f6:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <receiver_check_byte>
    13fa:	82 60       	ori	r24, 0x02	; 2
    13fc:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <receiver_check_byte>
			pulse_length = receiver_input_channel_2;
    1400:	00 91 88 01 	lds	r16, 0x0188	; 0x800188 <receiver_input_channel_2>
    1404:	10 91 89 01 	lds	r17, 0x0189	; 0x800189 <receiver_input_channel_2+0x1>
			trigger = 1;
			receiver_check_byte |= 0b00000001;
			pulse_length = receiver_input_channel_1;
		}
		if(receiver_input_channel_2 > 1750 || receiver_input_channel_2 < 1250){
			trigger = 2;
    1408:	c2 e0       	ldi	r28, 0x02	; 2
    140a:	b8 cf       	rjmp	.-144    	; 0x137c <_Z21check_receiver_inputsh+0xd6>
			receiver_check_byte |= 0b00000010;
			pulse_length = receiver_input_channel_2;
		}
		if(receiver_input_channel_3 > 1750 || receiver_input_channel_3 < 1250){
			trigger = 3;
			receiver_check_byte |= 0b00000100;
    140c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <receiver_check_byte>
    1410:	84 60       	ori	r24, 0x04	; 4
    1412:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <receiver_check_byte>
			pulse_length = receiver_input_channel_3;
    1416:	00 91 86 01 	lds	r16, 0x0186	; 0x800186 <receiver_input_channel_3>
    141a:	10 91 87 01 	lds	r17, 0x0187	; 0x800187 <receiver_input_channel_3+0x1>
			trigger = 2;
			receiver_check_byte |= 0b00000010;
			pulse_length = receiver_input_channel_2;
		}
		if(receiver_input_channel_3 > 1750 || receiver_input_channel_3 < 1250){
			trigger = 3;
    141e:	c3 e0       	ldi	r28, 0x03	; 3
    1420:	bc cf       	rjmp	.-136    	; 0x139a <_Z21check_receiver_inputsh+0xf4>
			receiver_check_byte |= 0b00000100;
			pulse_length = receiver_input_channel_3;
		}
		if(receiver_input_channel_4 > 1750 || receiver_input_channel_4 < 1250){
			trigger = 4;
			receiver_check_byte |= 0b00001000;
    1422:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <receiver_check_byte>
    1426:	88 60       	ori	r24, 0x08	; 8
    1428:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <receiver_check_byte>
			pulse_length = receiver_input_channel_4;
    142c:	00 91 84 01 	lds	r16, 0x0184	; 0x800184 <receiver_input_channel_4>
    1430:	10 91 85 01 	lds	r17, 0x0185	; 0x800185 <receiver_input_channel_4+0x1>
			trigger = 3;
			receiver_check_byte |= 0b00000100;
			pulse_length = receiver_input_channel_3;
		}
		if(receiver_input_channel_4 > 1750 || receiver_input_channel_4 < 1250){
			trigger = 4;
    1434:	c4 e0       	ldi	r28, 0x04	; 4
    1436:	51 cf       	rjmp	.-350    	; 0x12da <_Z21check_receiver_inputsh+0x34>
		Serial.println(F("No stick movement detected in the last 30 seconds!!! (ERROR 2)"));
	}
	//Assign the stick to the function.
	else{
		if(movement == 1){
			channel_3_assign = trigger;
    1438:	c0 93 92 01 	sts	0x0192, r28	; 0x800192 <channel_3_assign>
    143c:	0b c0       	rjmp	.+22     	; 0x1454 <_Z21check_receiver_inputsh+0x1ae>
		}
		if(movement == 3){
			channel_2_assign = trigger;
			if(pulse_length < 1250)channel_2_assign += 0b10000000;
		}
		if(movement == 4){
    143e:	d4 30       	cpi	r29, 0x04	; 4
    1440:	49 f4       	brne	.+18     	; 0x1454 <_Z21check_receiver_inputsh+0x1ae>
			channel_4_assign = trigger;
			if(pulse_length < 1250)channel_4_assign += 0b10000000;
    1442:	02 3e       	cpi	r16, 0xE2	; 226
    1444:	14 40       	sbci	r17, 0x04	; 4
    1446:	0c f4       	brge	.+2      	; 0x144a <_Z21check_receiver_inputsh+0x1a4>
    1448:	c0 58       	subi	r28, 0x80	; 128
    144a:	c0 93 91 01 	sts	0x0191, r28	; 0x800191 <channel_4_assign>
		}
	}
}
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <_Z21check_receiver_inputsh+0x1ae>
		if(movement == 1){
			channel_3_assign = trigger;
			if(pulse_length < 1250)channel_3_assign += 0b10000000;
		}
		if(movement == 2){
			channel_1_assign = trigger;
    1450:	c0 93 94 01 	sts	0x0194, r28	; 0x800194 <channel_1_assign>
		if(movement == 4){
			channel_4_assign = trigger;
			if(pulse_length < 1250)channel_4_assign += 0b10000000;
		}
	}
}
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	1f 91       	pop	r17
    145a:	0f 91       	pop	r16
    145c:	ff 90       	pop	r15
    145e:	ef 90       	pop	r14
    1460:	df 90       	pop	r13
    1462:	cf 90       	pop	r12
    1464:	08 95       	ret

00001466 <_Z16wait_sticks_zerov>:
	}
	wait_sticks_zero();
}

//Check if the transmitter sticks are in the neutral position
void wait_sticks_zero(){
    1466:	cf 93       	push	r28
	byte zero = 0;
    1468:	c0 e0       	ldi	r28, 0x00	; 0
	while(zero < 15){
		if(receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)zero |= 0b00000001;
    146a:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <center_channel_1>
    146e:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <center_channel_1+0x1>
    1472:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <receiver_input_channel_1>
    1476:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <receiver_input_channel_1+0x1>
    147a:	ac 01       	movw	r20, r24
    147c:	4d 5e       	subi	r20, 0xED	; 237
    147e:	5f 4f       	sbci	r21, 0xFF	; 255
    1480:	42 17       	cp	r20, r18
    1482:	53 07       	cpc	r21, r19
    1484:	4c f0       	brlt	.+18     	; 0x1498 <_Z16wait_sticks_zerov+0x32>
    1486:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <receiver_input_channel_1>
    148a:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <receiver_input_channel_1+0x1>
    148e:	43 97       	sbiw	r24, 0x13	; 19
    1490:	28 17       	cp	r18, r24
    1492:	39 07       	cpc	r19, r25
    1494:	0c f0       	brlt	.+2      	; 0x1498 <_Z16wait_sticks_zerov+0x32>
    1496:	4d c0       	rjmp	.+154    	; 0x1532 <_Z16wait_sticks_zerov+0xcc>
		if(receiver_input_channel_2 < center_channel_2 + 20 && receiver_input_channel_2 > center_channel_2 - 20)zero |= 0b00000010;
    1498:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <center_channel_2>
    149c:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <center_channel_2+0x1>
    14a0:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <receiver_input_channel_2>
    14a4:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <receiver_input_channel_2+0x1>
    14a8:	ac 01       	movw	r20, r24
    14aa:	4d 5e       	subi	r20, 0xED	; 237
    14ac:	5f 4f       	sbci	r21, 0xFF	; 255
    14ae:	42 17       	cp	r20, r18
    14b0:	53 07       	cpc	r21, r19
    14b2:	44 f0       	brlt	.+16     	; 0x14c4 <_Z16wait_sticks_zerov+0x5e>
    14b4:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <receiver_input_channel_2>
    14b8:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <receiver_input_channel_2+0x1>
    14bc:	43 97       	sbiw	r24, 0x13	; 19
    14be:	28 17       	cp	r18, r24
    14c0:	39 07       	cpc	r19, r25
    14c2:	cc f5       	brge	.+114    	; 0x1536 <_Z16wait_sticks_zerov+0xd0>
		if(receiver_input_channel_3 < center_channel_3 + 20 && receiver_input_channel_3 > center_channel_3 - 20)zero |= 0b00000100;
    14c4:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <center_channel_3>
    14c8:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <center_channel_3+0x1>
    14cc:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <receiver_input_channel_3>
    14d0:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <receiver_input_channel_3+0x1>
    14d4:	ac 01       	movw	r20, r24
    14d6:	4d 5e       	subi	r20, 0xED	; 237
    14d8:	5f 4f       	sbci	r21, 0xFF	; 255
    14da:	42 17       	cp	r20, r18
    14dc:	53 07       	cpc	r21, r19
    14de:	44 f0       	brlt	.+16     	; 0x14f0 <_Z16wait_sticks_zerov+0x8a>
    14e0:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <receiver_input_channel_3>
    14e4:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <receiver_input_channel_3+0x1>
    14e8:	43 97       	sbiw	r24, 0x13	; 19
    14ea:	28 17       	cp	r18, r24
    14ec:	39 07       	cpc	r19, r25
    14ee:	2c f5       	brge	.+74     	; 0x153a <_Z16wait_sticks_zerov+0xd4>
		if(receiver_input_channel_4 < center_channel_4 + 20 && receiver_input_channel_4 > center_channel_4 - 20)zero |= 0b00001000;
    14f0:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <center_channel_4>
    14f4:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <center_channel_4+0x1>
    14f8:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <receiver_input_channel_4>
    14fc:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <receiver_input_channel_4+0x1>
    1500:	ac 01       	movw	r20, r24
    1502:	4d 5e       	subi	r20, 0xED	; 237
    1504:	5f 4f       	sbci	r21, 0xFF	; 255
    1506:	42 17       	cp	r20, r18
    1508:	53 07       	cpc	r21, r19
    150a:	44 f0       	brlt	.+16     	; 0x151c <_Z16wait_sticks_zerov+0xb6>
    150c:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <receiver_input_channel_4>
    1510:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <receiver_input_channel_4+0x1>
    1514:	43 97       	sbiw	r24, 0x13	; 19
    1516:	28 17       	cp	r18, r24
    1518:	39 07       	cpc	r19, r25
    151a:	8c f4       	brge	.+34     	; 0x153e <_Z16wait_sticks_zerov+0xd8>
		delay(100);
    151c:	64 e6       	ldi	r22, 0x64	; 100
    151e:	70 e0       	ldi	r23, 0x00	; 0
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
}

//Check if the transmitter sticks are in the neutral position
void wait_sticks_zero(){
	byte zero = 0;
	while(zero < 15){
    1528:	cf 30       	cpi	r28, 0x0F	; 15
    152a:	08 f4       	brcc	.+2      	; 0x152e <_Z16wait_sticks_zerov+0xc8>
    152c:	9e cf       	rjmp	.-196    	; 0x146a <_Z16wait_sticks_zerov+0x4>
		if(receiver_input_channel_2 < center_channel_2 + 20 && receiver_input_channel_2 > center_channel_2 - 20)zero |= 0b00000010;
		if(receiver_input_channel_3 < center_channel_3 + 20 && receiver_input_channel_3 > center_channel_3 - 20)zero |= 0b00000100;
		if(receiver_input_channel_4 < center_channel_4 + 20 && receiver_input_channel_4 > center_channel_4 - 20)zero |= 0b00001000;
		delay(100);
	}
}
    152e:	cf 91       	pop	r28
    1530:	08 95       	ret

//Check if the transmitter sticks are in the neutral position
void wait_sticks_zero(){
	byte zero = 0;
	while(zero < 15){
		if(receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)zero |= 0b00000001;
    1532:	c1 60       	ori	r28, 0x01	; 1
    1534:	b1 cf       	rjmp	.-158    	; 0x1498 <_Z16wait_sticks_zerov+0x32>
		if(receiver_input_channel_2 < center_channel_2 + 20 && receiver_input_channel_2 > center_channel_2 - 20)zero |= 0b00000010;
    1536:	c2 60       	ori	r28, 0x02	; 2
    1538:	c5 cf       	rjmp	.-118    	; 0x14c4 <_Z16wait_sticks_zerov+0x5e>
		if(receiver_input_channel_3 < center_channel_3 + 20 && receiver_input_channel_3 > center_channel_3 - 20)zero |= 0b00000100;
    153a:	c4 60       	ori	r28, 0x04	; 4
    153c:	d9 cf       	rjmp	.-78     	; 0x14f0 <_Z16wait_sticks_zerov+0x8a>
		if(receiver_input_channel_4 < center_channel_4 + 20 && receiver_input_channel_4 > center_channel_4 - 20)zero |= 0b00001000;
    153e:	c8 60       	ori	r28, 0x08	; 8
    1540:	ed cf       	rjmp	.-38     	; 0x151c <_Z16wait_sticks_zerov+0xb6>

00001542 <_Z17check_to_continuev>:
			if(pulse_length < 1250)channel_4_assign += 0b10000000;
		}
	}
}

void check_to_continue(){
    1542:	cf 93       	push	r28
	byte continue_byte = 0;
	while(continue_byte == 0){
		if(channel_2_assign == 0b00000001 && receiver_input_channel_1 > center_channel_1 + 150)continue_byte = 1;
    1544:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <channel_2_assign>
    1548:	81 30       	cpi	r24, 0x01	; 1
    154a:	49 f4       	brne	.+18     	; 0x155e <_Z17check_to_continuev+0x1c>
    154c:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <receiver_input_channel_1>
    1550:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <receiver_input_channel_1+0x1>
    1554:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <center_channel_1>
    1558:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <center_channel_1+0x1>
    155c:	1b c0       	rjmp	.+54     	; 0x1594 <_Z17check_to_continuev+0x52>
		if(channel_2_assign == 0b10000001 && receiver_input_channel_1 < center_channel_1 - 150)continue_byte = 1;
    155e:	81 38       	cpi	r24, 0x81	; 129
    1560:	79 f4       	brne	.+30     	; 0x1580 <_Z17check_to_continuev+0x3e>
    1562:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <receiver_input_channel_1>
    1566:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <receiver_input_channel_1+0x1>
    156a:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <center_channel_1>
    156e:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <center_channel_1+0x1>
    1572:	86 59       	subi	r24, 0x96	; 150
    1574:	91 09       	sbc	r25, r1
    1576:	28 17       	cp	r18, r24
    1578:	39 07       	cpc	r19, r25
    157a:	0c f4       	brge	.+2      	; 0x157e <_Z17check_to_continuev+0x3c>
    157c:	5a c0       	rjmp	.+180    	; 0x1632 <_Z17check_to_continuev+0xf0>
    157e:	11 c0       	rjmp	.+34     	; 0x15a2 <_Z17check_to_continuev+0x60>
		if(channel_2_assign == 0b00000010 && receiver_input_channel_2 > center_channel_2 + 150)continue_byte = 1;
    1580:	82 30       	cpi	r24, 0x02	; 2
    1582:	89 f4       	brne	.+34     	; 0x15a6 <_Z17check_to_continuev+0x64>
    1584:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <receiver_input_channel_2>
    1588:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <receiver_input_channel_2+0x1>
    158c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <center_channel_2>
    1590:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <center_channel_2+0x1>
    1594:	8a 56       	subi	r24, 0x6A	; 106
    1596:	9f 4f       	sbci	r25, 0xFF	; 255
    1598:	c1 e0       	ldi	r28, 0x01	; 1
    159a:	82 17       	cp	r24, r18
    159c:	93 07       	cpc	r25, r19
    159e:	0c f4       	brge	.+2      	; 0x15a2 <_Z17check_to_continuev+0x60>
    15a0:	49 c0       	rjmp	.+146    	; 0x1634 <_Z17check_to_continuev+0xf2>
    15a2:	c0 e0       	ldi	r28, 0x00	; 0
    15a4:	47 c0       	rjmp	.+142    	; 0x1634 <_Z17check_to_continuev+0xf2>
    15a6:	c0 e0       	ldi	r28, 0x00	; 0
		if(channel_2_assign == 0b10000010 && receiver_input_channel_2 < center_channel_2 - 150)continue_byte = 1;
    15a8:	82 38       	cpi	r24, 0x82	; 130
    15aa:	49 f4       	brne	.+18     	; 0x15be <_Z17check_to_continuev+0x7c>
    15ac:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <receiver_input_channel_2>
    15b0:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <receiver_input_channel_2+0x1>
    15b4:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <center_channel_2>
    15b8:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <center_channel_2+0x1>
    15bc:	35 c0       	rjmp	.+106    	; 0x1628 <_Z17check_to_continuev+0xe6>
		if(channel_2_assign == 0b00000011 && receiver_input_channel_3 > center_channel_3 + 150)continue_byte = 1;
    15be:	83 30       	cpi	r24, 0x03	; 3
    15c0:	71 f4       	brne	.+28     	; 0x15de <_Z17check_to_continuev+0x9c>
    15c2:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <receiver_input_channel_3>
    15c6:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <receiver_input_channel_3+0x1>
    15ca:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <center_channel_3>
    15ce:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <center_channel_3+0x1>
    15d2:	8a 56       	subi	r24, 0x6A	; 106
    15d4:	9f 4f       	sbci	r25, 0xFF	; 255
    15d6:	82 17       	cp	r24, r18
    15d8:	93 07       	cpc	r25, r19
    15da:	5c f1       	brlt	.+86     	; 0x1632 <_Z17check_to_continuev+0xf0>
    15dc:	2b c0       	rjmp	.+86     	; 0x1634 <_Z17check_to_continuev+0xf2>
		if(channel_2_assign == 0b10000011 && receiver_input_channel_3 < center_channel_3 - 150)continue_byte = 1;
    15de:	83 38       	cpi	r24, 0x83	; 131
    15e0:	49 f4       	brne	.+18     	; 0x15f4 <_Z17check_to_continuev+0xb2>
    15e2:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <receiver_input_channel_3>
    15e6:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <receiver_input_channel_3+0x1>
    15ea:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <center_channel_3>
    15ee:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <center_channel_3+0x1>
    15f2:	1a c0       	rjmp	.+52     	; 0x1628 <_Z17check_to_continuev+0xe6>
		if(channel_2_assign == 0b00000100 && receiver_input_channel_4 > center_channel_4 + 150)continue_byte = 1;
    15f4:	84 30       	cpi	r24, 0x04	; 4
    15f6:	71 f4       	brne	.+28     	; 0x1614 <_Z17check_to_continuev+0xd2>
    15f8:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <receiver_input_channel_4>
    15fc:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <receiver_input_channel_4+0x1>
    1600:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <center_channel_4>
    1604:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <center_channel_4+0x1>
    1608:	8a 56       	subi	r24, 0x6A	; 106
    160a:	9f 4f       	sbci	r25, 0xFF	; 255
    160c:	82 17       	cp	r24, r18
    160e:	93 07       	cpc	r25, r19
    1610:	ec f0       	brlt	.+58     	; 0x164c <_Z17check_to_continuev+0x10a>
    1612:	10 c0       	rjmp	.+32     	; 0x1634 <_Z17check_to_continuev+0xf2>
		if(channel_2_assign == 0b10000100 && receiver_input_channel_4 < center_channel_4 - 150)continue_byte = 1;
    1614:	84 38       	cpi	r24, 0x84	; 132
    1616:	71 f4       	brne	.+28     	; 0x1634 <_Z17check_to_continuev+0xf2>
    1618:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <receiver_input_channel_4>
    161c:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <receiver_input_channel_4+0x1>
    1620:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <center_channel_4>
    1624:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <center_channel_4+0x1>
    1628:	86 59       	subi	r24, 0x96	; 150
    162a:	91 09       	sbc	r25, r1
    162c:	28 17       	cp	r18, r24
    162e:	39 07       	cpc	r19, r25
    1630:	0c f4       	brge	.+2      	; 0x1634 <_Z17check_to_continuev+0xf2>
	while(continue_byte == 0){
		if(channel_2_assign == 0b00000001 && receiver_input_channel_1 > center_channel_1 + 150)continue_byte = 1;
		if(channel_2_assign == 0b10000001 && receiver_input_channel_1 < center_channel_1 - 150)continue_byte = 1;
		if(channel_2_assign == 0b00000010 && receiver_input_channel_2 > center_channel_2 + 150)continue_byte = 1;
		if(channel_2_assign == 0b10000010 && receiver_input_channel_2 < center_channel_2 - 150)continue_byte = 1;
		if(channel_2_assign == 0b00000011 && receiver_input_channel_3 > center_channel_3 + 150)continue_byte = 1;
    1632:	c1 e0       	ldi	r28, 0x01	; 1
		if(channel_2_assign == 0b10000011 && receiver_input_channel_3 < center_channel_3 - 150)continue_byte = 1;
		if(channel_2_assign == 0b00000100 && receiver_input_channel_4 > center_channel_4 + 150)continue_byte = 1;
		if(channel_2_assign == 0b10000100 && receiver_input_channel_4 < center_channel_4 - 150)continue_byte = 1;
		delay(100);
    1634:	64 e6       	ldi	r22, 0x64	; 100
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
	}
}

void check_to_continue(){
	byte continue_byte = 0;
	while(continue_byte == 0){
    1640:	cc 23       	and	r28, r28
    1642:	09 f4       	brne	.+2      	; 0x1646 <_Z17check_to_continuev+0x104>
    1644:	7f cf       	rjmp	.-258    	; 0x1544 <_Z17check_to_continuev+0x2>
		if(channel_2_assign == 0b00000100 && receiver_input_channel_4 > center_channel_4 + 150)continue_byte = 1;
		if(channel_2_assign == 0b10000100 && receiver_input_channel_4 < center_channel_4 - 150)continue_byte = 1;
		delay(100);
	}
	wait_sticks_zero();
}
    1646:	cf 91       	pop	r28
		if(channel_2_assign == 0b10000011 && receiver_input_channel_3 < center_channel_3 - 150)continue_byte = 1;
		if(channel_2_assign == 0b00000100 && receiver_input_channel_4 > center_channel_4 + 150)continue_byte = 1;
		if(channel_2_assign == 0b10000100 && receiver_input_channel_4 < center_channel_4 - 150)continue_byte = 1;
		delay(100);
	}
	wait_sticks_zero();
    1648:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <_Z16wait_sticks_zerov>
		if(channel_2_assign == 0b10000010 && receiver_input_channel_2 < center_channel_2 - 150)continue_byte = 1;
		if(channel_2_assign == 0b00000011 && receiver_input_channel_3 > center_channel_3 + 150)continue_byte = 1;
		if(channel_2_assign == 0b10000011 && receiver_input_channel_3 < center_channel_3 - 150)continue_byte = 1;
		if(channel_2_assign == 0b00000100 && receiver_input_channel_4 > center_channel_4 + 150)continue_byte = 1;
		if(channel_2_assign == 0b10000100 && receiver_input_channel_4 < center_channel_4 - 150)continue_byte = 1;
		delay(100);
    164c:	64 e6       	ldi	r22, 0x64	; 100
    164e:	70 e0       	ldi	r23, 0x00	; 0
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
    1658:	f6 cf       	rjmp	.-20     	; 0x1646 <_Z17check_to_continuev+0x104>

0000165a <_Z17wait_for_receiverv>:
	}
}

//Checck if the receiver values are valid within 10 seconds

void wait_for_receiver(){
    165a:	0f 93       	push	r16
    165c:	1f 93       	push	r17
    165e:	cf 93       	push	r28
	byte zero = 0;
	timer = millis() + 10000;
    1660:	0e 94 b0 24 	call	0x4960	; 0x4960 <millis>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	80 5f       	subi	r24, 0xF0	; 240
    166a:	98 4d       	sbci	r25, 0xD8	; 216
    166c:	af 4f       	sbci	r26, 0xFF	; 255
    166e:	bf 4f       	sbci	r27, 0xFF	; 255
    1670:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timer>
    1674:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timer+0x1>
    1678:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <timer+0x2>
    167c:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <timer+0x3>
}

//Checck if the receiver values are valid within 10 seconds

void wait_for_receiver(){
	byte zero = 0;
    1680:	c0 e0       	ldi	r28, 0x00	; 0
	timer = millis() + 10000;
	while(timer > millis() && zero < 15){
    1682:	0e 94 b0 24 	call	0x4960	; 0x4960 <millis>
    1686:	00 91 64 01 	lds	r16, 0x0164	; 0x800164 <timer>
    168a:	10 91 65 01 	lds	r17, 0x0165	; 0x800165 <timer+0x1>
    168e:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <timer+0x2>
    1692:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <timer+0x3>
    1696:	60 17       	cp	r22, r16
    1698:	71 07       	cpc	r23, r17
    169a:	82 07       	cpc	r24, r18
    169c:	93 07       	cpc	r25, r19
    169e:	08 f0       	brcs	.+2      	; 0x16a2 <_Z17wait_for_receiverv+0x48>
    16a0:	51 c0       	rjmp	.+162    	; 0x1744 <_Z17wait_for_receiverv+0xea>
    16a2:	cf 30       	cpi	r28, 0x0F	; 15
    16a4:	48 f0       	brcs	.+18     	; 0x16b8 <_Z17wait_for_receiverv+0x5e>
	if(zero == 0){
		error = 1;
		Serial.println(F("."));
		Serial.println(F("No valid receiver signals found!!! (ERROR 1)"));
	}
	else Serial.println(F(" OK"));
    16a6:	69 ea       	ldi	r22, 0xA9	; 169
    16a8:	71 e0       	ldi	r23, 0x01	; 1
    16aa:	8f e9       	ldi	r24, 0x9F	; 159
    16ac:	91 e0       	ldi	r25, 0x01	; 1
}
    16ae:	cf 91       	pop	r28
    16b0:	1f 91       	pop	r17
    16b2:	0f 91       	pop	r16
	if(zero == 0){
		error = 1;
		Serial.println(F("."));
		Serial.println(F("No valid receiver signals found!!! (ERROR 1)"));
	}
	else Serial.println(F(" OK"));
    16b4:	0c 94 01 21 	jmp	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>

void wait_for_receiver(){
	byte zero = 0;
	timer = millis() + 10000;
	while(timer > millis() && zero < 15){
		if(receiver_input_channel_1 < 2100 && receiver_input_channel_1 > 900)zero |= 0b00000001;
    16b8:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <receiver_input_channel_1>
    16bc:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <receiver_input_channel_1+0x1>
    16c0:	84 33       	cpi	r24, 0x34	; 52
    16c2:	98 40       	sbci	r25, 0x08	; 8
    16c4:	44 f4       	brge	.+16     	; 0x16d6 <_Z17wait_for_receiverv+0x7c>
    16c6:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <receiver_input_channel_1>
    16ca:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <receiver_input_channel_1+0x1>
    16ce:	85 38       	cpi	r24, 0x85	; 133
    16d0:	93 40       	sbci	r25, 0x03	; 3
    16d2:	0c f0       	brlt	.+2      	; 0x16d6 <_Z17wait_for_receiverv+0x7c>
    16d4:	45 c0       	rjmp	.+138    	; 0x1760 <_Z17wait_for_receiverv+0x106>
		if(receiver_input_channel_2 < 2100 && receiver_input_channel_2 > 900)zero |= 0b00000010;
    16d6:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <receiver_input_channel_2>
    16da:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <receiver_input_channel_2+0x1>
    16de:	84 33       	cpi	r24, 0x34	; 52
    16e0:	98 40       	sbci	r25, 0x08	; 8
    16e2:	3c f4       	brge	.+14     	; 0x16f2 <_Z17wait_for_receiverv+0x98>
    16e4:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <receiver_input_channel_2>
    16e8:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <receiver_input_channel_2+0x1>
    16ec:	85 38       	cpi	r24, 0x85	; 133
    16ee:	93 40       	sbci	r25, 0x03	; 3
    16f0:	cc f5       	brge	.+114    	; 0x1764 <_Z17wait_for_receiverv+0x10a>
		if(receiver_input_channel_3 < 2100 && receiver_input_channel_3 > 900)zero |= 0b00000100;
    16f2:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <receiver_input_channel_3>
    16f6:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <receiver_input_channel_3+0x1>
    16fa:	84 33       	cpi	r24, 0x34	; 52
    16fc:	98 40       	sbci	r25, 0x08	; 8
    16fe:	3c f4       	brge	.+14     	; 0x170e <_Z17wait_for_receiverv+0xb4>
    1700:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <receiver_input_channel_3>
    1704:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <receiver_input_channel_3+0x1>
    1708:	85 38       	cpi	r24, 0x85	; 133
    170a:	93 40       	sbci	r25, 0x03	; 3
    170c:	6c f5       	brge	.+90     	; 0x1768 <_Z17wait_for_receiverv+0x10e>
		if(receiver_input_channel_4 < 2100 && receiver_input_channel_4 > 900)zero |= 0b00001000;
    170e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <receiver_input_channel_4>
    1712:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <receiver_input_channel_4+0x1>
    1716:	84 33       	cpi	r24, 0x34	; 52
    1718:	98 40       	sbci	r25, 0x08	; 8
    171a:	3c f4       	brge	.+14     	; 0x172a <_Z17wait_for_receiverv+0xd0>
    171c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <receiver_input_channel_4>
    1720:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <receiver_input_channel_4+0x1>
    1724:	85 38       	cpi	r24, 0x85	; 133
    1726:	93 40       	sbci	r25, 0x03	; 3
    1728:	0c f5       	brge	.+66     	; 0x176c <_Z17wait_for_receiverv+0x112>
		delay(500);
    172a:	64 ef       	ldi	r22, 0xF4	; 244
    172c:	71 e0       	ldi	r23, 0x01	; 1
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
		Serial.print(F("."));
    1736:	6c ed       	ldi	r22, 0xDC	; 220
    1738:	71 e0       	ldi	r23, 0x01	; 1
    173a:	8f e9       	ldi	r24, 0x9F	; 159
    173c:	91 e0       	ldi	r25, 0x01	; 1
    173e:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
//Checck if the receiver values are valid within 10 seconds

void wait_for_receiver(){
	byte zero = 0;
	timer = millis() + 10000;
	while(timer > millis() && zero < 15){
    1742:	9f cf       	rjmp	.-194    	; 0x1682 <_Z17wait_for_receiverv+0x28>
		if(receiver_input_channel_3 < 2100 && receiver_input_channel_3 > 900)zero |= 0b00000100;
		if(receiver_input_channel_4 < 2100 && receiver_input_channel_4 > 900)zero |= 0b00001000;
		delay(500);
		Serial.print(F("."));
	}
	if(zero == 0){
    1744:	c1 11       	cpse	r28, r1
    1746:	af cf       	rjmp	.-162    	; 0x16a6 <_Z17wait_for_receiverv+0x4c>
		error = 1;
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		Serial.println(F("."));
    174e:	6a ed       	ldi	r22, 0xDA	; 218
    1750:	71 e0       	ldi	r23, 0x01	; 1
    1752:	8f e9       	ldi	r24, 0x9F	; 159
    1754:	91 e0       	ldi	r25, 0x01	; 1
    1756:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("No valid receiver signals found!!! (ERROR 1)"));
    175a:	6d ea       	ldi	r22, 0xAD	; 173
    175c:	71 e0       	ldi	r23, 0x01	; 1
    175e:	a5 cf       	rjmp	.-182    	; 0x16aa <_Z17wait_for_receiverv+0x50>

void wait_for_receiver(){
	byte zero = 0;
	timer = millis() + 10000;
	while(timer > millis() && zero < 15){
		if(receiver_input_channel_1 < 2100 && receiver_input_channel_1 > 900)zero |= 0b00000001;
    1760:	c1 60       	ori	r28, 0x01	; 1
    1762:	b9 cf       	rjmp	.-142    	; 0x16d6 <_Z17wait_for_receiverv+0x7c>
		if(receiver_input_channel_2 < 2100 && receiver_input_channel_2 > 900)zero |= 0b00000010;
    1764:	c2 60       	ori	r28, 0x02	; 2
    1766:	c5 cf       	rjmp	.-118    	; 0x16f2 <_Z17wait_for_receiverv+0x98>
		if(receiver_input_channel_3 < 2100 && receiver_input_channel_3 > 900)zero |= 0b00000100;
    1768:	c4 60       	ori	r28, 0x04	; 4
    176a:	d1 cf       	rjmp	.-94     	; 0x170e <_Z17wait_for_receiverv+0xb4>
		if(receiver_input_channel_4 < 2100 && receiver_input_channel_4 > 900)zero |= 0b00001000;
    176c:	c8 60       	ori	r28, 0x08	; 8
    176e:	dd cf       	rjmp	.-70     	; 0x172a <_Z17wait_for_receiverv+0xd0>

00001770 <_Z16register_min_maxv>:
	}
	else Serial.println(F(" OK"));
}

//Register the min and max receiver values and exit when the sticks are back in the neutral position
void register_min_max(){
    1770:	cf 93       	push	r28
	byte zero = 0;
	low_channel_1 = receiver_input_channel_1;
    1772:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <receiver_input_channel_1>
    1776:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <receiver_input_channel_1+0x1>
    177a:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <low_channel_1+0x1>
    177e:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <low_channel_1>
	low_channel_2 = receiver_input_channel_2;
    1782:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <receiver_input_channel_2>
    1786:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <receiver_input_channel_2+0x1>
    178a:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <low_channel_2+0x1>
    178e:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <low_channel_2>
	low_channel_3 = receiver_input_channel_3;
    1792:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <receiver_input_channel_3>
    1796:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <receiver_input_channel_3+0x1>
    179a:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <low_channel_3+0x1>
    179e:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <low_channel_3>
	low_channel_4 = receiver_input_channel_4;
    17a2:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <receiver_input_channel_4>
    17a6:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <receiver_input_channel_4+0x1>
    17aa:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <low_channel_4+0x1>
    17ae:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <low_channel_4>
	while(receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)delay(250);
    17b2:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <center_channel_1>
    17b6:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <center_channel_1+0x1>
    17ba:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <receiver_input_channel_1>
    17be:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <receiver_input_channel_1+0x1>
    17c2:	ac 01       	movw	r20, r24
    17c4:	4d 5e       	subi	r20, 0xED	; 237
    17c6:	5f 4f       	sbci	r21, 0xFF	; 255
    17c8:	42 17       	cp	r20, r18
    17ca:	53 07       	cpc	r21, r19
    17cc:	7c f0       	brlt	.+30     	; 0x17ec <_Z16register_min_maxv+0x7c>
    17ce:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <receiver_input_channel_1>
    17d2:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <receiver_input_channel_1+0x1>
    17d6:	43 97       	sbiw	r24, 0x13	; 19
    17d8:	28 17       	cp	r18, r24
    17da:	39 07       	cpc	r19, r25
    17dc:	3c f0       	brlt	.+14     	; 0x17ec <_Z16register_min_maxv+0x7c>
    17de:	6a ef       	ldi	r22, 0xFA	; 250
    17e0:	70 e0       	ldi	r23, 0x00	; 0
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
    17ea:	e3 cf       	rjmp	.-58     	; 0x17b2 <_Z16register_min_maxv+0x42>
	Serial.println(F("Measuring endpoints...."));
    17ec:	61 e9       	ldi	r22, 0x91	; 145
    17ee:	71 e0       	ldi	r23, 0x01	; 1
    17f0:	8f e9       	ldi	r24, 0x9F	; 159
    17f2:	91 e0       	ldi	r25, 0x01	; 1
    17f4:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
	else Serial.println(F(" OK"));
}

//Register the min and max receiver values and exit when the sticks are back in the neutral position
void register_min_max(){
	byte zero = 0;
    17f8:	c0 e0       	ldi	r28, 0x00	; 0
	low_channel_3 = receiver_input_channel_3;
	low_channel_4 = receiver_input_channel_4;
	while(receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)delay(250);
	Serial.println(F("Measuring endpoints...."));
	while(zero < 15){
		if(receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)zero |= 0b00000001;
    17fa:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <center_channel_1>
    17fe:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <center_channel_1+0x1>
    1802:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <receiver_input_channel_1>
    1806:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <receiver_input_channel_1+0x1>
    180a:	ac 01       	movw	r20, r24
    180c:	4d 5e       	subi	r20, 0xED	; 237
    180e:	5f 4f       	sbci	r21, 0xFF	; 255
    1810:	42 17       	cp	r20, r18
    1812:	53 07       	cpc	r21, r19
    1814:	4c f0       	brlt	.+18     	; 0x1828 <_Z16register_min_maxv+0xb8>
    1816:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <receiver_input_channel_1>
    181a:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <receiver_input_channel_1+0x1>
    181e:	43 97       	sbiw	r24, 0x13	; 19
    1820:	28 17       	cp	r18, r24
    1822:	39 07       	cpc	r19, r25
    1824:	0c f0       	brlt	.+2      	; 0x1828 <_Z16register_min_maxv+0xb8>
    1826:	e8 c0       	rjmp	.+464    	; 0x19f8 <_Z16register_min_maxv+0x288>
		if(receiver_input_channel_2 < center_channel_2 + 20 && receiver_input_channel_2 > center_channel_2 - 20)zero |= 0b00000010;
    1828:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <center_channel_2>
    182c:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <center_channel_2+0x1>
    1830:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <receiver_input_channel_2>
    1834:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <receiver_input_channel_2+0x1>
    1838:	ac 01       	movw	r20, r24
    183a:	4d 5e       	subi	r20, 0xED	; 237
    183c:	5f 4f       	sbci	r21, 0xFF	; 255
    183e:	42 17       	cp	r20, r18
    1840:	53 07       	cpc	r21, r19
    1842:	4c f0       	brlt	.+18     	; 0x1856 <_Z16register_min_maxv+0xe6>
    1844:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <receiver_input_channel_2>
    1848:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <receiver_input_channel_2+0x1>
    184c:	43 97       	sbiw	r24, 0x13	; 19
    184e:	28 17       	cp	r18, r24
    1850:	39 07       	cpc	r19, r25
    1852:	0c f0       	brlt	.+2      	; 0x1856 <_Z16register_min_maxv+0xe6>
    1854:	d3 c0       	rjmp	.+422    	; 0x19fc <_Z16register_min_maxv+0x28c>
		if(receiver_input_channel_3 < center_channel_3 + 20 && receiver_input_channel_3 > center_channel_3 - 20)zero |= 0b00000100;
    1856:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <center_channel_3>
    185a:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <center_channel_3+0x1>
    185e:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <receiver_input_channel_3>
    1862:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <receiver_input_channel_3+0x1>
    1866:	ac 01       	movw	r20, r24
    1868:	4d 5e       	subi	r20, 0xED	; 237
    186a:	5f 4f       	sbci	r21, 0xFF	; 255
    186c:	42 17       	cp	r20, r18
    186e:	53 07       	cpc	r21, r19
    1870:	4c f0       	brlt	.+18     	; 0x1884 <_Z16register_min_maxv+0x114>
    1872:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <receiver_input_channel_3>
    1876:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <receiver_input_channel_3+0x1>
    187a:	43 97       	sbiw	r24, 0x13	; 19
    187c:	28 17       	cp	r18, r24
    187e:	39 07       	cpc	r19, r25
    1880:	0c f0       	brlt	.+2      	; 0x1884 <_Z16register_min_maxv+0x114>
    1882:	be c0       	rjmp	.+380    	; 0x1a00 <_Z16register_min_maxv+0x290>
		if(receiver_input_channel_4 < center_channel_4 + 20 && receiver_input_channel_4 > center_channel_4 - 20)zero |= 0b00001000;
    1884:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <center_channel_4>
    1888:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <center_channel_4+0x1>
    188c:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <receiver_input_channel_4>
    1890:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <receiver_input_channel_4+0x1>
    1894:	ac 01       	movw	r20, r24
    1896:	4d 5e       	subi	r20, 0xED	; 237
    1898:	5f 4f       	sbci	r21, 0xFF	; 255
    189a:	42 17       	cp	r20, r18
    189c:	53 07       	cpc	r21, r19
    189e:	4c f0       	brlt	.+18     	; 0x18b2 <_Z16register_min_maxv+0x142>
    18a0:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <receiver_input_channel_4>
    18a4:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <receiver_input_channel_4+0x1>
    18a8:	43 97       	sbiw	r24, 0x13	; 19
    18aa:	28 17       	cp	r18, r24
    18ac:	39 07       	cpc	r19, r25
    18ae:	0c f0       	brlt	.+2      	; 0x18b2 <_Z16register_min_maxv+0x142>
    18b0:	a9 c0       	rjmp	.+338    	; 0x1a04 <_Z16register_min_maxv+0x294>
		if(receiver_input_channel_1 < low_channel_1)low_channel_1 = receiver_input_channel_1;
    18b2:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <receiver_input_channel_1>
    18b6:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <receiver_input_channel_1+0x1>
    18ba:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <low_channel_1>
    18be:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <low_channel_1+0x1>
    18c2:	28 17       	cp	r18, r24
    18c4:	39 07       	cpc	r19, r25
    18c6:	44 f4       	brge	.+16     	; 0x18d8 <_Z16register_min_maxv+0x168>
    18c8:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <receiver_input_channel_1>
    18cc:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <receiver_input_channel_1+0x1>
    18d0:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <low_channel_1+0x1>
    18d4:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <low_channel_1>
		if(receiver_input_channel_2 < low_channel_2)low_channel_2 = receiver_input_channel_2;
    18d8:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <receiver_input_channel_2>
    18dc:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <receiver_input_channel_2+0x1>
    18e0:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <low_channel_2>
    18e4:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <low_channel_2+0x1>
    18e8:	28 17       	cp	r18, r24
    18ea:	39 07       	cpc	r19, r25
    18ec:	44 f4       	brge	.+16     	; 0x18fe <_Z16register_min_maxv+0x18e>
    18ee:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <receiver_input_channel_2>
    18f2:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <receiver_input_channel_2+0x1>
    18f6:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <low_channel_2+0x1>
    18fa:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <low_channel_2>
		if(receiver_input_channel_3 < low_channel_3)low_channel_3 = receiver_input_channel_3;
    18fe:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <receiver_input_channel_3>
    1902:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <receiver_input_channel_3+0x1>
    1906:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <low_channel_3>
    190a:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <low_channel_3+0x1>
    190e:	28 17       	cp	r18, r24
    1910:	39 07       	cpc	r19, r25
    1912:	44 f4       	brge	.+16     	; 0x1924 <_Z16register_min_maxv+0x1b4>
    1914:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <receiver_input_channel_3>
    1918:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <receiver_input_channel_3+0x1>
    191c:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <low_channel_3+0x1>
    1920:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <low_channel_3>
		if(receiver_input_channel_4 < low_channel_4)low_channel_4 = receiver_input_channel_4;
    1924:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <receiver_input_channel_4>
    1928:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <receiver_input_channel_4+0x1>
    192c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <low_channel_4>
    1930:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <low_channel_4+0x1>
    1934:	28 17       	cp	r18, r24
    1936:	39 07       	cpc	r19, r25
    1938:	44 f4       	brge	.+16     	; 0x194a <_Z16register_min_maxv+0x1da>
    193a:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <receiver_input_channel_4>
    193e:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <receiver_input_channel_4+0x1>
    1942:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <low_channel_4+0x1>
    1946:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <low_channel_4>
		if(receiver_input_channel_1 > high_channel_1)high_channel_1 = receiver_input_channel_1;
    194a:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <receiver_input_channel_1>
    194e:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <receiver_input_channel_1+0x1>
    1952:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <high_channel_1>
    1956:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <high_channel_1+0x1>
    195a:	82 17       	cp	r24, r18
    195c:	93 07       	cpc	r25, r19
    195e:	44 f4       	brge	.+16     	; 0x1970 <_Z16register_min_maxv+0x200>
    1960:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <receiver_input_channel_1>
    1964:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <receiver_input_channel_1+0x1>
    1968:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <high_channel_1+0x1>
    196c:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <high_channel_1>
		if(receiver_input_channel_2 > high_channel_2)high_channel_2 = receiver_input_channel_2;
    1970:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <receiver_input_channel_2>
    1974:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <receiver_input_channel_2+0x1>
    1978:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <high_channel_2>
    197c:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <high_channel_2+0x1>
    1980:	82 17       	cp	r24, r18
    1982:	93 07       	cpc	r25, r19
    1984:	44 f4       	brge	.+16     	; 0x1996 <_Z16register_min_maxv+0x226>
    1986:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <receiver_input_channel_2>
    198a:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <receiver_input_channel_2+0x1>
    198e:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <high_channel_2+0x1>
    1992:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <high_channel_2>
		if(receiver_input_channel_3 > high_channel_3)high_channel_3 = receiver_input_channel_3;
    1996:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <receiver_input_channel_3>
    199a:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <receiver_input_channel_3+0x1>
    199e:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <high_channel_3>
    19a2:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <high_channel_3+0x1>
    19a6:	82 17       	cp	r24, r18
    19a8:	93 07       	cpc	r25, r19
    19aa:	44 f4       	brge	.+16     	; 0x19bc <_Z16register_min_maxv+0x24c>
    19ac:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <receiver_input_channel_3>
    19b0:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <receiver_input_channel_3+0x1>
    19b4:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <high_channel_3+0x1>
    19b8:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <high_channel_3>
		if(receiver_input_channel_4 > high_channel_4)high_channel_4 = receiver_input_channel_4;
    19bc:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <receiver_input_channel_4>
    19c0:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <receiver_input_channel_4+0x1>
    19c4:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <high_channel_4>
    19c8:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <high_channel_4+0x1>
    19cc:	82 17       	cp	r24, r18
    19ce:	93 07       	cpc	r25, r19
    19d0:	44 f4       	brge	.+16     	; 0x19e2 <_Z16register_min_maxv+0x272>
    19d2:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <receiver_input_channel_4>
    19d6:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <receiver_input_channel_4+0x1>
    19da:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <high_channel_4+0x1>
    19de:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <high_channel_4>
		delay(100);
    19e2:	64 e6       	ldi	r22, 0x64	; 100
    19e4:	70 e0       	ldi	r23, 0x00	; 0
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
	low_channel_2 = receiver_input_channel_2;
	low_channel_3 = receiver_input_channel_3;
	low_channel_4 = receiver_input_channel_4;
	while(receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)delay(250);
	Serial.println(F("Measuring endpoints...."));
	while(zero < 15){
    19ee:	cf 30       	cpi	r28, 0x0F	; 15
    19f0:	08 f4       	brcc	.+2      	; 0x19f4 <_Z16register_min_maxv+0x284>
    19f2:	03 cf       	rjmp	.-506    	; 0x17fa <_Z16register_min_maxv+0x8a>
		if(receiver_input_channel_2 > high_channel_2)high_channel_2 = receiver_input_channel_2;
		if(receiver_input_channel_3 > high_channel_3)high_channel_3 = receiver_input_channel_3;
		if(receiver_input_channel_4 > high_channel_4)high_channel_4 = receiver_input_channel_4;
		delay(100);
	}
}
    19f4:	cf 91       	pop	r28
    19f6:	08 95       	ret
	low_channel_3 = receiver_input_channel_3;
	low_channel_4 = receiver_input_channel_4;
	while(receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)delay(250);
	Serial.println(F("Measuring endpoints...."));
	while(zero < 15){
		if(receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)zero |= 0b00000001;
    19f8:	c1 60       	ori	r28, 0x01	; 1
    19fa:	16 cf       	rjmp	.-468    	; 0x1828 <_Z16register_min_maxv+0xb8>
		if(receiver_input_channel_2 < center_channel_2 + 20 && receiver_input_channel_2 > center_channel_2 - 20)zero |= 0b00000010;
    19fc:	c2 60       	ori	r28, 0x02	; 2
    19fe:	2b cf       	rjmp	.-426    	; 0x1856 <_Z16register_min_maxv+0xe6>
		if(receiver_input_channel_3 < center_channel_3 + 20 && receiver_input_channel_3 > center_channel_3 - 20)zero |= 0b00000100;
    1a00:	c4 60       	ori	r28, 0x04	; 4
    1a02:	40 cf       	rjmp	.-384    	; 0x1884 <_Z16register_min_maxv+0x114>
		if(receiver_input_channel_4 < center_channel_4 + 20 && receiver_input_channel_4 > center_channel_4 - 20)zero |= 0b00001000;
    1a04:	c8 60       	ori	r28, 0x08	; 8
    1a06:	55 cf       	rjmp	.-342    	; 0x18b2 <_Z16register_min_maxv+0x142>

00001a08 <__vector_3>:
	if(movement == 3)yaw_axis = trigger_axis;
	
}

//This routine is called every time input 8, 9, 10 or 11 changed state
ISR(PCINT0_vect){
    1a08:	1f 92       	push	r1
    1a0a:	0f 92       	push	r0
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	0f 92       	push	r0
    1a10:	11 24       	eor	r1, r1
    1a12:	2f 93       	push	r18
    1a14:	3f 93       	push	r19
    1a16:	4f 93       	push	r20
    1a18:	5f 93       	push	r21
    1a1a:	6f 93       	push	r22
    1a1c:	7f 93       	push	r23
    1a1e:	8f 93       	push	r24
    1a20:	9f 93       	push	r25
    1a22:	af 93       	push	r26
    1a24:	bf 93       	push	r27
    1a26:	ef 93       	push	r30
    1a28:	ff 93       	push	r31
	current_time = micros();
    1a2a:	0e 94 bc 24 	call	0x4978	; 0x4978 <micros>
    1a2e:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <current_time>
    1a32:	70 93 51 01 	sts	0x0151, r23	; 0x800151 <current_time+0x1>
    1a36:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <current_time+0x2>
    1a3a:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <current_time+0x3>
    1a3e:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <last_channel_1>
	//Channel 1=========================================
	if(PINB & B00000001){                                        //Is input 8 high?
    1a42:	18 9b       	sbis	0x03, 0	; 3
    1a44:	0e c0       	rjmp	.+28     	; 0x1a62 <__vector_3+0x5a>
		if(last_channel_1 == 0){                                   //Input 8 changed from 0 to 1
    1a46:	21 11       	cpse	r18, r1
    1a48:	1b c0       	rjmp	.+54     	; 0x1a80 <__vector_3+0x78>
			last_channel_1 = 1;                                      //Remember current input state
    1a4a:	21 e0       	ldi	r18, 0x01	; 1
    1a4c:	20 93 9e 01 	sts	0x019E, r18	; 0x80019e <last_channel_1>
			timer_1 = current_time;                                  //Set timer_1 to current_time
    1a50:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <timer_1>
    1a54:	70 93 61 01 	sts	0x0161, r23	; 0x800161 <timer_1+0x1>
    1a58:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timer_1+0x2>
    1a5c:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timer_1+0x3>
    1a60:	0f c0       	rjmp	.+30     	; 0x1a80 <__vector_3+0x78>
		}
	}
	else if(last_channel_1 == 1){                                //Input 8 is not high and changed from 1 to 0
    1a62:	21 30       	cpi	r18, 0x01	; 1
    1a64:	69 f4       	brne	.+26     	; 0x1a80 <__vector_3+0x78>
		last_channel_1 = 0;                                        //Remember current input state
    1a66:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <last_channel_1>
		receiver_input_channel_1 = current_time - timer_1;         //Channel 1 is current_time - timer_1
    1a6a:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <timer_1>
    1a6e:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <timer_1+0x1>
    1a72:	ab 01       	movw	r20, r22
    1a74:	42 1b       	sub	r20, r18
    1a76:	53 0b       	sbc	r21, r19
    1a78:	50 93 8b 01 	sts	0x018B, r21	; 0x80018b <receiver_input_channel_1+0x1>
    1a7c:	40 93 8a 01 	sts	0x018A, r20	; 0x80018a <receiver_input_channel_1>
    1a80:	20 91 9d 01 	lds	r18, 0x019D	; 0x80019d <last_channel_2>
	}
	//Channel 2=========================================
	if(PINB & B00000010 ){                                       //Is input 9 high?
    1a84:	19 9b       	sbis	0x03, 1	; 3
    1a86:	0e c0       	rjmp	.+28     	; 0x1aa4 <__vector_3+0x9c>
		if(last_channel_2 == 0){                                   //Input 9 changed from 0 to 1
    1a88:	21 11       	cpse	r18, r1
    1a8a:	1b c0       	rjmp	.+54     	; 0x1ac2 <__vector_3+0xba>
			last_channel_2 = 1;                                      //Remember current input state
    1a8c:	21 e0       	ldi	r18, 0x01	; 1
    1a8e:	20 93 9d 01 	sts	0x019D, r18	; 0x80019d <last_channel_2>
			timer_2 = current_time;                                  //Set timer_2 to current_time
    1a92:	60 93 5c 01 	sts	0x015C, r22	; 0x80015c <timer_2>
    1a96:	70 93 5d 01 	sts	0x015D, r23	; 0x80015d <timer_2+0x1>
    1a9a:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <timer_2+0x2>
    1a9e:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <timer_2+0x3>
    1aa2:	0f c0       	rjmp	.+30     	; 0x1ac2 <__vector_3+0xba>
		}
	}
	else if(last_channel_2 == 1){                                //Input 9 is not high and changed from 1 to 0
    1aa4:	21 30       	cpi	r18, 0x01	; 1
    1aa6:	69 f4       	brne	.+26     	; 0x1ac2 <__vector_3+0xba>
		last_channel_2 = 0;                                        //Remember current input state
    1aa8:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <last_channel_2>
		receiver_input_channel_2 = current_time - timer_2;         //Channel 2 is current_time - timer_2
    1aac:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <timer_2>
    1ab0:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <timer_2+0x1>
    1ab4:	ab 01       	movw	r20, r22
    1ab6:	42 1b       	sub	r20, r18
    1ab8:	53 0b       	sbc	r21, r19
    1aba:	50 93 89 01 	sts	0x0189, r21	; 0x800189 <receiver_input_channel_2+0x1>
    1abe:	40 93 88 01 	sts	0x0188, r20	; 0x800188 <receiver_input_channel_2>
    1ac2:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <last_channel_3>
	}
	//Channel 3=========================================
	if(PINB & B00000100 ){                                       //Is input 10 high?
    1ac6:	1a 9b       	sbis	0x03, 2	; 3
    1ac8:	0e c0       	rjmp	.+28     	; 0x1ae6 <__vector_3+0xde>
		if(last_channel_3 == 0){                                   //Input 10 changed from 0 to 1
    1aca:	21 11       	cpse	r18, r1
    1acc:	1b c0       	rjmp	.+54     	; 0x1b04 <__vector_3+0xfc>
			last_channel_3 = 1;                                      //Remember current input state
    1ace:	21 e0       	ldi	r18, 0x01	; 1
    1ad0:	20 93 9c 01 	sts	0x019C, r18	; 0x80019c <last_channel_3>
			timer_3 = current_time;                                  //Set timer_3 to current_time
    1ad4:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <timer_3>
    1ad8:	70 93 59 01 	sts	0x0159, r23	; 0x800159 <timer_3+0x1>
    1adc:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <timer_3+0x2>
    1ae0:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <timer_3+0x3>
    1ae4:	0f c0       	rjmp	.+30     	; 0x1b04 <__vector_3+0xfc>
		}
	}
	else if(last_channel_3 == 1){                                //Input 10 is not high and changed from 1 to 0
    1ae6:	21 30       	cpi	r18, 0x01	; 1
    1ae8:	69 f4       	brne	.+26     	; 0x1b04 <__vector_3+0xfc>
		last_channel_3 = 0;                                        //Remember current input state
    1aea:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <last_channel_3>
		receiver_input_channel_3 = current_time - timer_3;         //Channel 3 is current_time - timer_3
    1aee:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <timer_3>
    1af2:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <timer_3+0x1>
    1af6:	ab 01       	movw	r20, r22
    1af8:	42 1b       	sub	r20, r18
    1afa:	53 0b       	sbc	r21, r19
    1afc:	50 93 87 01 	sts	0x0187, r21	; 0x800187 <receiver_input_channel_3+0x1>
    1b00:	40 93 86 01 	sts	0x0186, r20	; 0x800186 <receiver_input_channel_3>
    1b04:	20 91 9b 01 	lds	r18, 0x019B	; 0x80019b <last_channel_4>

	}
	//Channel 4=========================================
	if(PINB & B00001000 ){                                       //Is input 11 high?
    1b08:	1b 9b       	sbis	0x03, 3	; 3
    1b0a:	0e c0       	rjmp	.+28     	; 0x1b28 <__vector_3+0x120>
		if(last_channel_4 == 0){                                   //Input 11 changed from 0 to 1
    1b0c:	21 11       	cpse	r18, r1
    1b0e:	1a c0       	rjmp	.+52     	; 0x1b44 <__vector_3+0x13c>
			last_channel_4 = 1;                                      //Remember current input state
    1b10:	21 e0       	ldi	r18, 0x01	; 1
    1b12:	20 93 9b 01 	sts	0x019B, r18	; 0x80019b <last_channel_4>
			timer_4 = current_time;                                  //Set timer_4 to current_time
    1b16:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <timer_4>
    1b1a:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <timer_4+0x1>
    1b1e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timer_4+0x2>
    1b22:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timer_4+0x3>
    1b26:	0e c0       	rjmp	.+28     	; 0x1b44 <__vector_3+0x13c>
		}
	}
	else if(last_channel_4 == 1){                                //Input 11 is not high and changed from 1 to 0
    1b28:	21 30       	cpi	r18, 0x01	; 1
    1b2a:	61 f4       	brne	.+24     	; 0x1b44 <__vector_3+0x13c>
		last_channel_4 = 0;                                        //Remember current input state
    1b2c:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <last_channel_4>
		receiver_input_channel_4 = current_time - timer_4;         //Channel 4 is current_time - timer_4
    1b30:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <timer_4>
    1b34:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <timer_4+0x1>
    1b38:	62 1b       	sub	r22, r18
    1b3a:	73 0b       	sbc	r23, r19
    1b3c:	70 93 85 01 	sts	0x0185, r23	; 0x800185 <receiver_input_channel_4+0x1>
    1b40:	60 93 84 01 	sts	0x0184, r22	; 0x800184 <receiver_input_channel_4>
	}
}
    1b44:	ff 91       	pop	r31
    1b46:	ef 91       	pop	r30
    1b48:	bf 91       	pop	r27
    1b4a:	af 91       	pop	r26
    1b4c:	9f 91       	pop	r25
    1b4e:	8f 91       	pop	r24
    1b50:	7f 91       	pop	r23
    1b52:	6f 91       	pop	r22
    1b54:	5f 91       	pop	r21
    1b56:	4f 91       	pop	r20
    1b58:	3f 91       	pop	r19
    1b5a:	2f 91       	pop	r18
    1b5c:	0f 90       	pop	r0
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	0f 90       	pop	r0
    1b62:	1f 90       	pop	r1
    1b64:	18 95       	reti

00001b66 <_Z5introv>:

//Intro subroutine
void intro(){
	Serial.println(F("==================================================="));
    1b66:	6b e1       	ldi	r22, 0x1B	; 27
    1b68:	71 e0       	ldi	r23, 0x01	; 1
    1b6a:	8f e9       	ldi	r24, 0x9F	; 159
    1b6c:	91 e0       	ldi	r25, 0x01	; 1
    1b6e:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
	delay(1500);
    1b72:	6c ed       	ldi	r22, 0xDC	; 220
    1b74:	75 e0       	ldi	r23, 0x05	; 5
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
	Serial.println(F(""));
    1b7e:	6a e1       	ldi	r22, 0x1A	; 26
    1b80:	71 e0       	ldi	r23, 0x01	; 1
    1b82:	8f e9       	ldi	r24, 0x9F	; 159
    1b84:	91 e0       	ldi	r25, 0x01	; 1
    1b86:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println(F("Your"));
    1b8a:	65 e1       	ldi	r22, 0x15	; 21
    1b8c:	71 e0       	ldi	r23, 0x01	; 1
    1b8e:	8f e9       	ldi	r24, 0x9F	; 159
    1b90:	91 e0       	ldi	r25, 0x01	; 1
    1b92:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
	delay(500);
    1b96:	64 ef       	ldi	r22, 0xF4	; 244
    1b98:	71 e0       	ldi	r23, 0x01	; 1
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
	Serial.println(F("  Multicopter"));
    1ba2:	67 e0       	ldi	r22, 0x07	; 7
    1ba4:	71 e0       	ldi	r23, 0x01	; 1
    1ba6:	8f e9       	ldi	r24, 0x9F	; 159
    1ba8:	91 e0       	ldi	r25, 0x01	; 1
    1baa:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
	delay(500);
    1bae:	64 ef       	ldi	r22, 0xF4	; 244
    1bb0:	71 e0       	ldi	r23, 0x01	; 1
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
	Serial.println(F("    Flight"));
    1bba:	6c ef       	ldi	r22, 0xFC	; 252
    1bbc:	70 e0       	ldi	r23, 0x00	; 0
    1bbe:	8f e9       	ldi	r24, 0x9F	; 159
    1bc0:	91 e0       	ldi	r25, 0x01	; 1
    1bc2:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
	delay(500);
    1bc6:	64 ef       	ldi	r22, 0xF4	; 244
    1bc8:	71 e0       	ldi	r23, 0x01	; 1
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
	Serial.println(F("      Controller"));
    1bd2:	6b ee       	ldi	r22, 0xEB	; 235
    1bd4:	70 e0       	ldi	r23, 0x00	; 0
    1bd6:	8f e9       	ldi	r24, 0x9F	; 159
    1bd8:	91 e0       	ldi	r25, 0x01	; 1
    1bda:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
	delay(1000);
    1bde:	68 ee       	ldi	r22, 0xE8	; 232
    1be0:	73 e0       	ldi	r23, 0x03	; 3
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
	Serial.println(F(""));
    1bea:	6a ee       	ldi	r22, 0xEA	; 234
    1bec:	70 e0       	ldi	r23, 0x00	; 0
    1bee:	8f e9       	ldi	r24, 0x9F	; 159
    1bf0:	91 e0       	ldi	r25, 0x01	; 1
    1bf2:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println(F("YMFC-AL Setup Program"));
    1bf6:	64 ed       	ldi	r22, 0xD4	; 212
    1bf8:	70 e0       	ldi	r23, 0x00	; 0
    1bfa:	8f e9       	ldi	r24, 0x9F	; 159
    1bfc:	91 e0       	ldi	r25, 0x01	; 1
    1bfe:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println(F(""));
    1c02:	63 ed       	ldi	r22, 0xD3	; 211
    1c04:	70 e0       	ldi	r23, 0x00	; 0
    1c06:	8f e9       	ldi	r24, 0x9F	; 159
    1c08:	91 e0       	ldi	r25, 0x01	; 1
    1c0a:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println(F("==================================================="));
    1c0e:	6f e9       	ldi	r22, 0x9F	; 159
    1c10:	70 e0       	ldi	r23, 0x00	; 0
    1c12:	8f e9       	ldi	r24, 0x9F	; 159
    1c14:	91 e0       	ldi	r25, 0x01	; 1
    1c16:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
	delay(1500);
    1c1a:	6c ed       	ldi	r22, 0xDC	; 220
    1c1c:	75 e0       	ldi	r23, 0x05	; 5
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
	Serial.println(F("For support and questions: www.brokking.net"));
    1c26:	63 e7       	ldi	r22, 0x73	; 115
    1c28:	70 e0       	ldi	r23, 0x00	; 0
    1c2a:	8f e9       	ldi	r24, 0x9F	; 159
    1c2c:	91 e0       	ldi	r25, 0x01	; 1
    1c2e:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println(F(""));
    1c32:	62 e7       	ldi	r22, 0x72	; 114
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	8f e9       	ldi	r24, 0x9F	; 159
    1c38:	91 e0       	ldi	r25, 0x01	; 1
    1c3a:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println(F("Have fun!"));
    1c3e:	68 e6       	ldi	r22, 0x68	; 104
    1c40:	70 e0       	ldi	r23, 0x00	; 0
    1c42:	8f e9       	ldi	r24, 0x9F	; 159
    1c44:	91 e0       	ldi	r25, 0x01	; 1
    1c46:	0c 94 01 21 	jmp	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>

00001c4a <_Z11search_gyroii>:
	}
	while(1);
}

//Search for the gyro and check the Who_am_I register
byte search_gyro(int gyro_address, int who_am_i){
    1c4a:	0f 93       	push	r16
    1c4c:	1f 93       	push	r17
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	ec 01       	movw	r28, r24
    1c54:	8b 01       	movw	r16, r22
	Wire.beginTransmission(gyro_address);
    1c56:	bc 01       	movw	r22, r24
    1c58:	8c e3       	ldi	r24, 0x3C	; 60
    1c5a:	92 e0       	ldi	r25, 0x02	; 2
    1c5c:	0e 94 da 23 	call	0x47b4	; 0x47b4 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(who_am_i);
    1c60:	b8 01       	movw	r22, r16
    1c62:	8c e3       	ldi	r24, 0x3C	; 60
    1c64:	92 e0       	ldi	r25, 0x02	; 2
    1c66:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    1c6a:	8c e3       	ldi	r24, 0x3C	; 60
    1c6c:	92 e0       	ldi	r25, 0x02	; 2
    1c6e:	0e 94 5d 24 	call	0x48ba	; 0x48ba <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(gyro_address, 1);
    1c72:	41 e0       	ldi	r20, 0x01	; 1
    1c74:	50 e0       	ldi	r21, 0x00	; 0
    1c76:	be 01       	movw	r22, r28
    1c78:	8c e3       	ldi	r24, 0x3C	; 60
    1c7a:	92 e0       	ldi	r25, 0x02	; 2
    1c7c:	0e 94 59 24 	call	0x48b2	; 0x48b2 <_ZN7TwoWire11requestFromEii>
	timer = millis() + 1000;
    1c80:	0e 94 b0 24 	call	0x4960	; 0x4960 <millis>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	88 51       	subi	r24, 0x18	; 24
    1c8a:	9c 4f       	sbci	r25, 0xFC	; 252
    1c8c:	af 4f       	sbci	r26, 0xFF	; 255
    1c8e:	bf 4f       	sbci	r27, 0xFF	; 255
    1c90:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timer>
    1c94:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timer+0x1>
    1c98:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <timer+0x2>
    1c9c:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <timer+0x3>
	while(Wire.available() < 1 && timer > millis());
    1ca0:	8c e3       	ldi	r24, 0x3C	; 60
    1ca2:	92 e0       	ldi	r25, 0x02	; 2
    1ca4:	0e 94 28 23 	call	0x4650	; 0x4650 <_ZN7TwoWire9availableEv>
    1ca8:	18 16       	cp	r1, r24
    1caa:	19 06       	cpc	r1, r25
    1cac:	c4 f4       	brge	.+48     	; 0x1cde <_Z11search_gyroii+0x94>
	lowByte = Wire.read();
    1cae:	8c e3       	ldi	r24, 0x3C	; 60
    1cb0:	92 e0       	ldi	r25, 0x02	; 2
    1cb2:	0e 94 30 23 	call	0x4660	; 0x4660 <_ZN7TwoWire4readEv>
    1cb6:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <lowByte>
	address = gyro_address;
    1cba:	d0 93 6b 01 	sts	0x016B, r29	; 0x80016b <address+0x1>
    1cbe:	c0 93 6a 01 	sts	0x016A, r28	; 0x80016a <address>
	Serial.println(lowByte);
    1cc2:	4a e0       	ldi	r20, 0x0A	; 10
    1cc4:	50 e0       	ldi	r21, 0x00	; 0
    1cc6:	68 2f       	mov	r22, r24
    1cc8:	8f e9       	ldi	r24, 0x9F	; 159
    1cca:	91 e0       	ldi	r25, 0x01	; 1
    1ccc:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <_ZN5Print7printlnEhi>
	return lowByte;
    1cd0:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <lowByte>
}
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	1f 91       	pop	r17
    1cda:	0f 91       	pop	r16
    1cdc:	08 95       	ret
	Wire.beginTransmission(gyro_address);
	Wire.write(who_am_i);
	Wire.endTransmission();
	Wire.requestFrom(gyro_address, 1);
	timer = millis() + 1000;
	while(Wire.available() < 1 && timer > millis());
    1cde:	0e 94 b0 24 	call	0x4960	; 0x4960 <millis>
    1ce2:	00 91 64 01 	lds	r16, 0x0164	; 0x800164 <timer>
    1ce6:	10 91 65 01 	lds	r17, 0x0165	; 0x800165 <timer+0x1>
    1cea:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <timer+0x2>
    1cee:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <timer+0x3>
    1cf2:	60 17       	cp	r22, r16
    1cf4:	71 07       	cpc	r23, r17
    1cf6:	82 07       	cpc	r24, r18
    1cf8:	93 07       	cpc	r25, r19
    1cfa:	90 f2       	brcs	.-92     	; 0x1ca0 <_Z11search_gyroii+0x56>
    1cfc:	d8 cf       	rjmp	.-80     	; 0x1cae <_Z11search_gyroii+0x64>

00001cfe <_Z10start_gyrov>:
	return lowByte;
}

void start_gyro(){
	//Setup the L3G4200D or L3GD20H
	if(type == 2 || type == 3){
    1cfe:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <type>
    1d02:	82 50       	subi	r24, 0x02	; 2
    1d04:	82 30       	cpi	r24, 0x02	; 2
    1d06:	08 f0       	brcs	.+2      	; 0x1d0a <_Z10start_gyrov+0xc>
    1d08:	98 c0       	rjmp	.+304    	; 0x1e3a <_Z10start_gyrov+0x13c>
		Wire.beginTransmission(address);                             //Start communication with the gyro with the address found during search
    1d0a:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <address>
    1d0e:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <address+0x1>
    1d12:	8c e3       	ldi	r24, 0x3C	; 60
    1d14:	92 e0       	ldi	r25, 0x02	; 2
    1d16:	0e 94 da 23 	call	0x47b4	; 0x47b4 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x20);                                            //We want to write to register 1 (20 hex)
    1d1a:	60 e2       	ldi	r22, 0x20	; 32
    1d1c:	70 e0       	ldi	r23, 0x00	; 0
    1d1e:	8c e3       	ldi	r24, 0x3C	; 60
    1d20:	92 e0       	ldi	r25, 0x02	; 2
    1d22:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZN7TwoWire5writeEi>
		Wire.write(0x0F);                                            //Set the register bits as 00001111 (Turn on the gyro and enable all axis)
    1d26:	6f e0       	ldi	r22, 0x0F	; 15
    1d28:	70 e0       	ldi	r23, 0x00	; 0
    1d2a:	8c e3       	ldi	r24, 0x3C	; 60
    1d2c:	92 e0       	ldi	r25, 0x02	; 2
    1d2e:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro
    1d32:	8c e3       	ldi	r24, 0x3C	; 60
    1d34:	92 e0       	ldi	r25, 0x02	; 2
    1d36:	0e 94 5d 24 	call	0x48ba	; 0x48ba <_ZN7TwoWire15endTransmissionEv>

		Wire.beginTransmission(address);                             //Start communication with the gyro (adress 1101001)
    1d3a:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <address>
    1d3e:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <address+0x1>
    1d42:	8c e3       	ldi	r24, 0x3C	; 60
    1d44:	92 e0       	ldi	r25, 0x02	; 2
    1d46:	0e 94 da 23 	call	0x47b4	; 0x47b4 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x20);                                            //Start reading @ register 28h and auto increment with every read
    1d4a:	60 e2       	ldi	r22, 0x20	; 32
    1d4c:	70 e0       	ldi	r23, 0x00	; 0
    1d4e:	8c e3       	ldi	r24, 0x3C	; 60
    1d50:	92 e0       	ldi	r25, 0x02	; 2
    1d52:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission
    1d56:	8c e3       	ldi	r24, 0x3C	; 60
    1d58:	92 e0       	ldi	r25, 0x02	; 2
    1d5a:	0e 94 5d 24 	call	0x48ba	; 0x48ba <_ZN7TwoWire15endTransmissionEv>
		Wire.requestFrom(address, 1);                                //Request 6 bytes from the gyro
    1d5e:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <address>
    1d62:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <address+0x1>
    1d66:	41 e0       	ldi	r20, 0x01	; 1
    1d68:	50 e0       	ldi	r21, 0x00	; 0
    1d6a:	8c e3       	ldi	r24, 0x3C	; 60
    1d6c:	92 e0       	ldi	r25, 0x02	; 2
    1d6e:	0e 94 59 24 	call	0x48b2	; 0x48b2 <_ZN7TwoWire11requestFromEii>
		while(Wire.available() < 1);                                 //Wait until the 1 byte is received
    1d72:	8c e3       	ldi	r24, 0x3C	; 60
    1d74:	92 e0       	ldi	r25, 0x02	; 2
    1d76:	0e 94 28 23 	call	0x4650	; 0x4650 <_ZN7TwoWire9availableEv>
    1d7a:	18 16       	cp	r1, r24
    1d7c:	19 06       	cpc	r1, r25
    1d7e:	cc f7       	brge	.-14     	; 0x1d72 <_Z10start_gyrov+0x74>
		Serial.print(F("Register 0x20 is set to:"));
    1d80:	68 e6       	ldi	r22, 0x68	; 104
    1d82:	72 e0       	ldi	r23, 0x02	; 2
    1d84:	8f e9       	ldi	r24, 0x9F	; 159
    1d86:	91 e0       	ldi	r25, 0x01	; 1
    1d88:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(Wire.read(),BIN);
    1d8c:	8c e3       	ldi	r24, 0x3C	; 60
    1d8e:	92 e0       	ldi	r25, 0x02	; 2
    1d90:	0e 94 30 23 	call	0x4660	; 0x4660 <_ZN7TwoWire4readEv>
    1d94:	42 e0       	ldi	r20, 0x02	; 2
    1d96:	50 e0       	ldi	r21, 0x00	; 0
    1d98:	bc 01       	movw	r22, r24
    1d9a:	8f e9       	ldi	r24, 0x9F	; 159
    1d9c:	91 e0       	ldi	r25, 0x01	; 1
    1d9e:	0e 94 c8 21 	call	0x4390	; 0x4390 <_ZN5Print7printlnEii>

		Wire.beginTransmission(address);                             //Start communication with the gyro  with the address found during search
    1da2:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <address>
    1da6:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <address+0x1>
    1daa:	8c e3       	ldi	r24, 0x3C	; 60
    1dac:	92 e0       	ldi	r25, 0x02	; 2
    1dae:	0e 94 da 23 	call	0x47b4	; 0x47b4 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x23);                                            //We want to write to register 4 (23 hex)
    1db2:	63 e2       	ldi	r22, 0x23	; 35
    1db4:	70 e0       	ldi	r23, 0x00	; 0
    1db6:	8c e3       	ldi	r24, 0x3C	; 60
    1db8:	92 e0       	ldi	r25, 0x02	; 2
    1dba:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZN7TwoWire5writeEi>
		Wire.write(0x90);                                            //Set the register bits as 10010000 (Block Data Update active & 500dps full scale)
    1dbe:	60 e9       	ldi	r22, 0x90	; 144
    1dc0:	70 e0       	ldi	r23, 0x00	; 0
    1dc2:	8c e3       	ldi	r24, 0x3C	; 60
    1dc4:	92 e0       	ldi	r25, 0x02	; 2
    1dc6:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro
    1dca:	8c e3       	ldi	r24, 0x3C	; 60
    1dcc:	92 e0       	ldi	r25, 0x02	; 2
    1dce:	0e 94 5d 24 	call	0x48ba	; 0x48ba <_ZN7TwoWire15endTransmissionEv>
		
		Wire.beginTransmission(address);                             //Start communication with the gyro (adress 1101001)
    1dd2:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <address>
    1dd6:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <address+0x1>
    1dda:	8c e3       	ldi	r24, 0x3C	; 60
    1ddc:	92 e0       	ldi	r25, 0x02	; 2
    1dde:	0e 94 da 23 	call	0x47b4	; 0x47b4 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x23);                                            //Start reading @ register 28h and auto increment with every read
    1de2:	63 e2       	ldi	r22, 0x23	; 35
    1de4:	70 e0       	ldi	r23, 0x00	; 0
    1de6:	8c e3       	ldi	r24, 0x3C	; 60
    1de8:	92 e0       	ldi	r25, 0x02	; 2
    1dea:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission
    1dee:	8c e3       	ldi	r24, 0x3C	; 60
    1df0:	92 e0       	ldi	r25, 0x02	; 2
    1df2:	0e 94 5d 24 	call	0x48ba	; 0x48ba <_ZN7TwoWire15endTransmissionEv>
		Wire.requestFrom(address, 1);                                //Request 6 bytes from the gyro
    1df6:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <address>
    1dfa:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <address+0x1>
    1dfe:	41 e0       	ldi	r20, 0x01	; 1
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	8c e3       	ldi	r24, 0x3C	; 60
    1e04:	92 e0       	ldi	r25, 0x02	; 2
    1e06:	0e 94 59 24 	call	0x48b2	; 0x48b2 <_ZN7TwoWire11requestFromEii>
		while(Wire.available() < 1);                                 //Wait until the 1 byte is received
    1e0a:	8c e3       	ldi	r24, 0x3C	; 60
    1e0c:	92 e0       	ldi	r25, 0x02	; 2
    1e0e:	0e 94 28 23 	call	0x4650	; 0x4650 <_ZN7TwoWire9availableEv>
    1e12:	18 16       	cp	r1, r24
    1e14:	19 06       	cpc	r1, r25
    1e16:	cc f7       	brge	.-14     	; 0x1e0a <_Z10start_gyrov+0x10c>
		Serial.print(F("Register 0x23 is set to:"));
    1e18:	6f e4       	ldi	r22, 0x4F	; 79
    1e1a:	72 e0       	ldi	r23, 0x02	; 2
    1e1c:	8f e9       	ldi	r24, 0x9F	; 159
    1e1e:	91 e0       	ldi	r25, 0x01	; 1
    1e20:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(Wire.read(),BIN);
    1e24:	8c e3       	ldi	r24, 0x3C	; 60
    1e26:	92 e0       	ldi	r25, 0x02	; 2
    1e28:	0e 94 30 23 	call	0x4660	; 0x4660 <_ZN7TwoWire4readEv>
    1e2c:	42 e0       	ldi	r20, 0x02	; 2
    1e2e:	50 e0       	ldi	r21, 0x00	; 0
    1e30:	bc 01       	movw	r22, r24
    1e32:	8f e9       	ldi	r24, 0x9F	; 159
    1e34:	91 e0       	ldi	r25, 0x01	; 1
    1e36:	0e 94 c8 21 	call	0x4390	; 0x4390 <_ZN5Print7printlnEii>

	}
	//Setup the MPU-6050
	if(type == 1){
    1e3a:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <type>
    1e3e:	81 30       	cpi	r24, 0x01	; 1
    1e40:	09 f0       	breq	.+2      	; 0x1e44 <_Z10start_gyrov+0x146>
    1e42:	98 c0       	rjmp	.+304    	; 0x1f74 <_Z10start_gyrov+0x276>
		
		Wire.beginTransmission(address);                             //Start communication with the gyro
    1e44:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <address>
    1e48:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <address+0x1>
    1e4c:	8c e3       	ldi	r24, 0x3C	; 60
    1e4e:	92 e0       	ldi	r25, 0x02	; 2
    1e50:	0e 94 da 23 	call	0x47b4	; 0x47b4 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(PWR_MGMT_1);                                            //PWR_MGMT_1 register
    1e54:	6b e6       	ldi	r22, 0x6B	; 107
    1e56:	70 e0       	ldi	r23, 0x00	; 0
    1e58:	8c e3       	ldi	r24, 0x3C	; 60
    1e5a:	92 e0       	ldi	r25, 0x02	; 2
    1e5c:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZN7TwoWire5writeEi>
		Wire.write(0x00);                                            //Set to zero to turn on the gyro
    1e60:	60 e0       	ldi	r22, 0x00	; 0
    1e62:	70 e0       	ldi	r23, 0x00	; 0
    1e64:	8c e3       	ldi	r24, 0x3C	; 60
    1e66:	92 e0       	ldi	r25, 0x02	; 2
    1e68:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission
    1e6c:	8c e3       	ldi	r24, 0x3C	; 60
    1e6e:	92 e0       	ldi	r25, 0x02	; 2
    1e70:	0e 94 5d 24 	call	0x48ba	; 0x48ba <_ZN7TwoWire15endTransmissionEv>
		
		Wire.beginTransmission(address);                             //Start communication with the gyro
    1e74:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <address>
    1e78:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <address+0x1>
    1e7c:	8c e3       	ldi	r24, 0x3C	; 60
    1e7e:	92 e0       	ldi	r25, 0x02	; 2
    1e80:	0e 94 da 23 	call	0x47b4	; 0x47b4 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(PWR_MGMT_1);                                            //Start reading @ register 28h and auto increment with every read
    1e84:	6b e6       	ldi	r22, 0x6B	; 107
    1e86:	70 e0       	ldi	r23, 0x00	; 0
    1e88:	8c e3       	ldi	r24, 0x3C	; 60
    1e8a:	92 e0       	ldi	r25, 0x02	; 2
    1e8c:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission
    1e90:	8c e3       	ldi	r24, 0x3C	; 60
    1e92:	92 e0       	ldi	r25, 0x02	; 2
    1e94:	0e 94 5d 24 	call	0x48ba	; 0x48ba <_ZN7TwoWire15endTransmissionEv>
		Wire.requestFrom(address, 1);                                //Request 1 bytes from the gyro
    1e98:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <address>
    1e9c:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <address+0x1>
    1ea0:	41 e0       	ldi	r20, 0x01	; 1
    1ea2:	50 e0       	ldi	r21, 0x00	; 0
    1ea4:	8c e3       	ldi	r24, 0x3C	; 60
    1ea6:	92 e0       	ldi	r25, 0x02	; 2
    1ea8:	0e 94 59 24 	call	0x48b2	; 0x48b2 <_ZN7TwoWire11requestFromEii>
		while(Wire.available() < 1);                                 //Wait until the 1 byte is received
    1eac:	8c e3       	ldi	r24, 0x3C	; 60
    1eae:	92 e0       	ldi	r25, 0x02	; 2
    1eb0:	0e 94 28 23 	call	0x4650	; 0x4650 <_ZN7TwoWire9availableEv>
    1eb4:	18 16       	cp	r1, r24
    1eb6:	19 06       	cpc	r1, r25
    1eb8:	cc f7       	brge	.-14     	; 0x1eac <_Z10start_gyrov+0x1ae>
		Serial.print(F("Register 0x6B is set to:"));
    1eba:	66 e3       	ldi	r22, 0x36	; 54
    1ebc:	72 e0       	ldi	r23, 0x02	; 2
    1ebe:	8f e9       	ldi	r24, 0x9F	; 159
    1ec0:	91 e0       	ldi	r25, 0x01	; 1
    1ec2:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(Wire.read(),BIN);
    1ec6:	8c e3       	ldi	r24, 0x3C	; 60
    1ec8:	92 e0       	ldi	r25, 0x02	; 2
    1eca:	0e 94 30 23 	call	0x4660	; 0x4660 <_ZN7TwoWire4readEv>
    1ece:	42 e0       	ldi	r20, 0x02	; 2
    1ed0:	50 e0       	ldi	r21, 0x00	; 0
    1ed2:	bc 01       	movw	r22, r24
    1ed4:	8f e9       	ldi	r24, 0x9F	; 159
    1ed6:	91 e0       	ldi	r25, 0x01	; 1
    1ed8:	0e 94 c8 21 	call	0x4390	; 0x4390 <_ZN5Print7printlnEii>
		
		Wire.beginTransmission(address);                             //Start communication with the gyro
    1edc:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <address>
    1ee0:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <address+0x1>
    1ee4:	8c e3       	ldi	r24, 0x3C	; 60
    1ee6:	92 e0       	ldi	r25, 0x02	; 2
    1ee8:	0e 94 da 23 	call	0x47b4	; 0x47b4 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(GYRO_CONFIG);                                            //GYRO_CONFIG register
    1eec:	6b e1       	ldi	r22, 0x1B	; 27
    1eee:	70 e0       	ldi	r23, 0x00	; 0
    1ef0:	8c e3       	ldi	r24, 0x3C	; 60
    1ef2:	92 e0       	ldi	r25, 0x02	; 2
    1ef4:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZN7TwoWire5writeEi>
		Wire.write(0x08);                                            //Set the register bits as 00001000 (500dps full scale)
    1ef8:	68 e0       	ldi	r22, 0x08	; 8
    1efa:	70 e0       	ldi	r23, 0x00	; 0
    1efc:	8c e3       	ldi	r24, 0x3C	; 60
    1efe:	92 e0       	ldi	r25, 0x02	; 2
    1f00:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission
    1f04:	8c e3       	ldi	r24, 0x3C	; 60
    1f06:	92 e0       	ldi	r25, 0x02	; 2
    1f08:	0e 94 5d 24 	call	0x48ba	; 0x48ba <_ZN7TwoWire15endTransmissionEv>
		
		Wire.beginTransmission(address);                             //Start communication with the gyro (adress 1101001)
    1f0c:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <address>
    1f10:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <address+0x1>
    1f14:	8c e3       	ldi	r24, 0x3C	; 60
    1f16:	92 e0       	ldi	r25, 0x02	; 2
    1f18:	0e 94 da 23 	call	0x47b4	; 0x47b4 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(GYRO_CONFIG);                                            //Start reading @ register 28h and auto increment with every read
    1f1c:	6b e1       	ldi	r22, 0x1B	; 27
    1f1e:	70 e0       	ldi	r23, 0x00	; 0
    1f20:	8c e3       	ldi	r24, 0x3C	; 60
    1f22:	92 e0       	ldi	r25, 0x02	; 2
    1f24:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission
    1f28:	8c e3       	ldi	r24, 0x3C	; 60
    1f2a:	92 e0       	ldi	r25, 0x02	; 2
    1f2c:	0e 94 5d 24 	call	0x48ba	; 0x48ba <_ZN7TwoWire15endTransmissionEv>
		Wire.requestFrom(address, 1);                                //Request 1 bytes from the gyro
    1f30:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <address>
    1f34:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <address+0x1>
    1f38:	41 e0       	ldi	r20, 0x01	; 1
    1f3a:	50 e0       	ldi	r21, 0x00	; 0
    1f3c:	8c e3       	ldi	r24, 0x3C	; 60
    1f3e:	92 e0       	ldi	r25, 0x02	; 2
    1f40:	0e 94 59 24 	call	0x48b2	; 0x48b2 <_ZN7TwoWire11requestFromEii>
		while(Wire.available() < 1);                                 //Wait until the 1 byte is received
    1f44:	8c e3       	ldi	r24, 0x3C	; 60
    1f46:	92 e0       	ldi	r25, 0x02	; 2
    1f48:	0e 94 28 23 	call	0x4650	; 0x4650 <_ZN7TwoWire9availableEv>
    1f4c:	18 16       	cp	r1, r24
    1f4e:	19 06       	cpc	r1, r25
    1f50:	cc f7       	brge	.-14     	; 0x1f44 <_Z10start_gyrov+0x246>
		Serial.print(F("Register 0x1B is set to:"));
    1f52:	6d e1       	ldi	r22, 0x1D	; 29
    1f54:	72 e0       	ldi	r23, 0x02	; 2
    1f56:	8f e9       	ldi	r24, 0x9F	; 159
    1f58:	91 e0       	ldi	r25, 0x01	; 1
    1f5a:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(Wire.read(),BIN);
    1f5e:	8c e3       	ldi	r24, 0x3C	; 60
    1f60:	92 e0       	ldi	r25, 0x02	; 2
    1f62:	0e 94 30 23 	call	0x4660	; 0x4660 <_ZN7TwoWire4readEv>
    1f66:	42 e0       	ldi	r20, 0x02	; 2
    1f68:	50 e0       	ldi	r21, 0x00	; 0
    1f6a:	bc 01       	movw	r22, r24
    1f6c:	8f e9       	ldi	r24, 0x9F	; 159
    1f6e:	91 e0       	ldi	r25, 0x01	; 1
    1f70:	0c 94 c8 21 	jmp	0x4390	; 0x4390 <_ZN5Print7printlnEii>
    1f74:	08 95       	ret

00001f76 <_Z13gyro_signalenv>:

	}
}

void gyro_signalen(){
    1f76:	ef 92       	push	r14
    1f78:	ff 92       	push	r15
    1f7a:	0f 93       	push	r16
    1f7c:	1f 93       	push	r17
    1f7e:	cf 93       	push	r28
    1f80:	df 93       	push	r29
	if(type == 2 || type == 3){
    1f82:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <type>
    1f86:	82 50       	subi	r24, 0x02	; 2
    1f88:	82 30       	cpi	r24, 0x02	; 2
    1f8a:	08 f0       	brcs	.+2      	; 0x1f8e <_Z13gyro_signalenv+0x18>
    1f8c:	ce c0       	rjmp	.+412    	; 0x212a <_Z13gyro_signalenv+0x1b4>
		Wire.beginTransmission(address);                             //Start communication with the gyro
    1f8e:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <address>
    1f92:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <address+0x1>
    1f96:	8c e3       	ldi	r24, 0x3C	; 60
    1f98:	92 e0       	ldi	r25, 0x02	; 2
    1f9a:	0e 94 da 23 	call	0x47b4	; 0x47b4 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(168);                                             //Start reading @ register 28h and auto increment with every read
    1f9e:	68 ea       	ldi	r22, 0xA8	; 168
    1fa0:	70 e0       	ldi	r23, 0x00	; 0
    1fa2:	8c e3       	ldi	r24, 0x3C	; 60
    1fa4:	92 e0       	ldi	r25, 0x02	; 2
    1fa6:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission
    1faa:	8c e3       	ldi	r24, 0x3C	; 60
    1fac:	92 e0       	ldi	r25, 0x02	; 2
    1fae:	0e 94 5d 24 	call	0x48ba	; 0x48ba <_ZN7TwoWire15endTransmissionEv>
		Wire.requestFrom(address, 6);                                //Request 6 bytes from the gyro
    1fb2:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <address>
    1fb6:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <address+0x1>
    1fba:	46 e0       	ldi	r20, 0x06	; 6
    1fbc:	50 e0       	ldi	r21, 0x00	; 0
    1fbe:	8c e3       	ldi	r24, 0x3C	; 60
    1fc0:	92 e0       	ldi	r25, 0x02	; 2
    1fc2:	0e 94 59 24 	call	0x48b2	; 0x48b2 <_ZN7TwoWire11requestFromEii>
		while(Wire.available() < 6);                                 //Wait until the 6 bytes are received
    1fc6:	8c e3       	ldi	r24, 0x3C	; 60
    1fc8:	92 e0       	ldi	r25, 0x02	; 2
    1fca:	0e 94 28 23 	call	0x4650	; 0x4650 <_ZN7TwoWire9availableEv>
    1fce:	06 97       	sbiw	r24, 0x06	; 6
    1fd0:	d4 f3       	brlt	.-12     	; 0x1fc6 <_Z13gyro_signalenv+0x50>
		lowByte = Wire.read();                                       //First received byte is the low part of the angular data
    1fd2:	8c e3       	ldi	r24, 0x3C	; 60
    1fd4:	92 e0       	ldi	r25, 0x02	; 2
    1fd6:	0e 94 30 23 	call	0x4660	; 0x4660 <_ZN7TwoWire4readEv>
    1fda:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <lowByte>
		highByte = Wire.read();                                      //Second received byte is the high part of the angular data
    1fde:	8c e3       	ldi	r24, 0x3C	; 60
    1fe0:	92 e0       	ldi	r25, 0x02	; 2
    1fe2:	0e 94 30 23 	call	0x4660	; 0x4660 <_ZN7TwoWire4readEv>
    1fe6:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <highByte>
		gyro_roll = ((highByte<<8)|lowByte);                         //Multiply highByte by 256 (shift left by 8) and ad lowByte
    1fea:	f8 2e       	mov	r15, r24
    1fec:	e1 2c       	mov	r14, r1
    1fee:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <lowByte>
    1ff2:	b7 01       	movw	r22, r14
    1ff4:	68 2b       	or	r22, r24
    1ff6:	07 2e       	mov	r0, r23
    1ff8:	00 0c       	add	r0, r0
    1ffa:	88 0b       	sbc	r24, r24
    1ffc:	99 0b       	sbc	r25, r25
    1ffe:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <__floatsisf>
    2002:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <gyro_roll>
    2006:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <gyro_roll+0x1>
    200a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <gyro_roll+0x2>
    200e:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <gyro_roll+0x3>
		if(cal_int == 2000)gyro_roll -= gyro_roll_cal;               //Only compensate after the calibration
    2012:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <cal_int>
    2016:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <cal_int+0x1>
    201a:	20 3d       	cpi	r18, 0xD0	; 208
    201c:	37 40       	sbci	r19, 0x07	; 7
    201e:	91 f4       	brne	.+36     	; 0x2044 <_Z13gyro_signalenv+0xce>
    2020:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <gyro_roll_cal>
    2024:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <gyro_roll_cal+0x1>
    2028:	40 91 42 01 	lds	r20, 0x0142	; 0x800142 <gyro_roll_cal+0x2>
    202c:	50 91 43 01 	lds	r21, 0x0143	; 0x800143 <gyro_roll_cal+0x3>
    2030:	0e 94 94 1c 	call	0x3928	; 0x3928 <__subsf3>
    2034:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <gyro_roll>
    2038:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <gyro_roll+0x1>
    203c:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <gyro_roll+0x2>
    2040:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <gyro_roll+0x3>
		lowByte = Wire.read();                                       //First received byte is the low part of the angular data
    2044:	8c e3       	ldi	r24, 0x3C	; 60
    2046:	92 e0       	ldi	r25, 0x02	; 2
    2048:	0e 94 30 23 	call	0x4660	; 0x4660 <_ZN7TwoWire4readEv>
    204c:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <lowByte>
		highByte = Wire.read();                                      //Second received byte is the high part of the angular data
    2050:	8c e3       	ldi	r24, 0x3C	; 60
    2052:	92 e0       	ldi	r25, 0x02	; 2
    2054:	0e 94 30 23 	call	0x4660	; 0x4660 <_ZN7TwoWire4readEv>
    2058:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <highByte>
		gyro_pitch = ((highByte<<8)|lowByte);                        //Multiply highByte by 256 (shift left by 8) and ad lowByte
    205c:	18 2f       	mov	r17, r24
    205e:	00 e0       	ldi	r16, 0x00	; 0
    2060:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <lowByte>
    2064:	b8 01       	movw	r22, r16
    2066:	68 2b       	or	r22, r24
    2068:	07 2e       	mov	r0, r23
    206a:	00 0c       	add	r0, r0
    206c:	88 0b       	sbc	r24, r24
    206e:	99 0b       	sbc	r25, r25
    2070:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <__floatsisf>
    2074:	60 93 4c 01 	sts	0x014C, r22	; 0x80014c <gyro_pitch>
    2078:	70 93 4d 01 	sts	0x014D, r23	; 0x80014d <gyro_pitch+0x1>
    207c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <gyro_pitch+0x2>
    2080:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <gyro_pitch+0x3>
		if(cal_int == 2000)gyro_pitch -= gyro_pitch_cal;             //Only compensate after the calibration
    2084:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <cal_int>
    2088:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <cal_int+0x1>
    208c:	20 3d       	cpi	r18, 0xD0	; 208
    208e:	37 40       	sbci	r19, 0x07	; 7
    2090:	91 f4       	brne	.+36     	; 0x20b6 <_Z13gyro_signalenv+0x140>
    2092:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <gyro_pitch_cal>
    2096:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <gyro_pitch_cal+0x1>
    209a:	40 91 3e 01 	lds	r20, 0x013E	; 0x80013e <gyro_pitch_cal+0x2>
    209e:	50 91 3f 01 	lds	r21, 0x013F	; 0x80013f <gyro_pitch_cal+0x3>
    20a2:	0e 94 94 1c 	call	0x3928	; 0x3928 <__subsf3>
    20a6:	60 93 4c 01 	sts	0x014C, r22	; 0x80014c <gyro_pitch>
    20aa:	70 93 4d 01 	sts	0x014D, r23	; 0x80014d <gyro_pitch+0x1>
    20ae:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <gyro_pitch+0x2>
    20b2:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <gyro_pitch+0x3>
		lowByte = Wire.read();                                       //First received byte is the low part of the angular data
    20b6:	8c e3       	ldi	r24, 0x3C	; 60
    20b8:	92 e0       	ldi	r25, 0x02	; 2
    20ba:	0e 94 30 23 	call	0x4660	; 0x4660 <_ZN7TwoWire4readEv>
    20be:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <lowByte>
		highByte = Wire.read();                                      //Second received byte is the high part of the angular data
    20c2:	8c e3       	ldi	r24, 0x3C	; 60
    20c4:	92 e0       	ldi	r25, 0x02	; 2
    20c6:	0e 94 30 23 	call	0x4660	; 0x4660 <_ZN7TwoWire4readEv>
    20ca:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <highByte>
		gyro_yaw = ((highByte<<8)|lowByte);                          //Multiply highByte by 256 (shift left by 8) and ad lowByte
    20ce:	d8 2f       	mov	r29, r24
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	c8 2f       	mov	r28, r24
    20d4:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <lowByte>
    20d8:	be 01       	movw	r22, r28
    20da:	68 2b       	or	r22, r24
    20dc:	07 2e       	mov	r0, r23
    20de:	00 0c       	add	r0, r0
    20e0:	88 0b       	sbc	r24, r24
    20e2:	99 0b       	sbc	r25, r25
    20e4:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <__floatsisf>
    20e8:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <gyro_yaw>
    20ec:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <gyro_yaw+0x1>
    20f0:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <gyro_yaw+0x2>
    20f4:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <gyro_yaw+0x3>
		if(cal_int == 2000)gyro_yaw -= gyro_yaw_cal;                 //Only compensate after the calibration
    20f8:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <cal_int>
    20fc:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <cal_int+0x1>
    2100:	20 3d       	cpi	r18, 0xD0	; 208
    2102:	37 40       	sbci	r19, 0x07	; 7
    2104:	91 f4       	brne	.+36     	; 0x212a <_Z13gyro_signalenv+0x1b4>
    2106:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <__data_end>
    210a:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <__data_end+0x1>
    210e:	40 91 3a 01 	lds	r20, 0x013A	; 0x80013a <__data_end+0x2>
    2112:	50 91 3b 01 	lds	r21, 0x013B	; 0x80013b <__data_end+0x3>
    2116:	0e 94 94 1c 	call	0x3928	; 0x3928 <__subsf3>
    211a:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <gyro_yaw>
    211e:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <gyro_yaw+0x1>
    2122:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <gyro_yaw+0x2>
    2126:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <gyro_yaw+0x3>
	}
	if(type == 1){
    212a:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <type>
    212e:	81 30       	cpi	r24, 0x01	; 1
    2130:	09 f0       	breq	.+2      	; 0x2134 <_Z13gyro_signalenv+0x1be>
    2132:	c1 c0       	rjmp	.+386    	; 0x22b6 <_Z13gyro_signalenv+0x340>
		Wire.beginTransmission(address);                             //Start communication with the gyro
    2134:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <address>
    2138:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <address+0x1>
    213c:	8c e3       	ldi	r24, 0x3C	; 60
    213e:	92 e0       	ldi	r25, 0x02	; 2
    2140:	0e 94 da 23 	call	0x47b4	; 0x47b4 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(GYRO_XOUT_H);                                            //Start reading @ register 43h and auto increment with every read
    2144:	63 e4       	ldi	r22, 0x43	; 67
    2146:	70 e0       	ldi	r23, 0x00	; 0
    2148:	8c e3       	ldi	r24, 0x3C	; 60
    214a:	92 e0       	ldi	r25, 0x02	; 2
    214c:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission
    2150:	8c e3       	ldi	r24, 0x3C	; 60
    2152:	92 e0       	ldi	r25, 0x02	; 2
    2154:	0e 94 5d 24 	call	0x48ba	; 0x48ba <_ZN7TwoWire15endTransmissionEv>
		Wire.requestFrom(address,6);                                 //Request 6 bytes from the gyro
    2158:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <address>
    215c:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <address+0x1>
    2160:	46 e0       	ldi	r20, 0x06	; 6
    2162:	50 e0       	ldi	r21, 0x00	; 0
    2164:	8c e3       	ldi	r24, 0x3C	; 60
    2166:	92 e0       	ldi	r25, 0x02	; 2
    2168:	0e 94 59 24 	call	0x48b2	; 0x48b2 <_ZN7TwoWire11requestFromEii>
		while(Wire.available() < 6);                                 //Wait until the 6 bytes are received
    216c:	8c e3       	ldi	r24, 0x3C	; 60
    216e:	92 e0       	ldi	r25, 0x02	; 2
    2170:	0e 94 28 23 	call	0x4650	; 0x4650 <_ZN7TwoWire9availableEv>
    2174:	06 97       	sbiw	r24, 0x06	; 6
    2176:	d4 f3       	brlt	.-12     	; 0x216c <_Z13gyro_signalenv+0x1f6>
		gyro_roll=Wire.read()<<8|Wire.read();                        //Read high and low part of the angular data
    2178:	8c e3       	ldi	r24, 0x3C	; 60
    217a:	92 e0       	ldi	r25, 0x02	; 2
    217c:	0e 94 30 23 	call	0x4660	; 0x4660 <_ZN7TwoWire4readEv>
    2180:	c8 2f       	mov	r28, r24
    2182:	8c e3       	ldi	r24, 0x3C	; 60
    2184:	92 e0       	ldi	r25, 0x02	; 2
    2186:	0e 94 30 23 	call	0x4660	; 0x4660 <_ZN7TwoWire4readEv>
    218a:	60 e0       	ldi	r22, 0x00	; 0
    218c:	70 e0       	ldi	r23, 0x00	; 0
    218e:	7c 2f       	mov	r23, r28
    2190:	86 2b       	or	r24, r22
    2192:	97 2b       	or	r25, r23
    2194:	bc 01       	movw	r22, r24
    2196:	99 0f       	add	r25, r25
    2198:	88 0b       	sbc	r24, r24
    219a:	99 0b       	sbc	r25, r25
    219c:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <__floatsisf>
    21a0:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <gyro_roll>
    21a4:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <gyro_roll+0x1>
    21a8:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <gyro_roll+0x2>
    21ac:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <gyro_roll+0x3>
		if(cal_int == 2000)gyro_roll -= gyro_roll_cal;               //Only compensate after the calibration
    21b0:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <cal_int>
    21b4:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <cal_int+0x1>
    21b8:	20 3d       	cpi	r18, 0xD0	; 208
    21ba:	37 40       	sbci	r19, 0x07	; 7
    21bc:	91 f4       	brne	.+36     	; 0x21e2 <_Z13gyro_signalenv+0x26c>
    21be:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <gyro_roll_cal>
    21c2:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <gyro_roll_cal+0x1>
    21c6:	40 91 42 01 	lds	r20, 0x0142	; 0x800142 <gyro_roll_cal+0x2>
    21ca:	50 91 43 01 	lds	r21, 0x0143	; 0x800143 <gyro_roll_cal+0x3>
    21ce:	0e 94 94 1c 	call	0x3928	; 0x3928 <__subsf3>
    21d2:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <gyro_roll>
    21d6:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <gyro_roll+0x1>
    21da:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <gyro_roll+0x2>
    21de:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <gyro_roll+0x3>
		gyro_pitch=Wire.read()<<8|Wire.read();                       //Read high and low part of the angular data
    21e2:	8c e3       	ldi	r24, 0x3C	; 60
    21e4:	92 e0       	ldi	r25, 0x02	; 2
    21e6:	0e 94 30 23 	call	0x4660	; 0x4660 <_ZN7TwoWire4readEv>
    21ea:	c8 2f       	mov	r28, r24
    21ec:	8c e3       	ldi	r24, 0x3C	; 60
    21ee:	92 e0       	ldi	r25, 0x02	; 2
    21f0:	0e 94 30 23 	call	0x4660	; 0x4660 <_ZN7TwoWire4readEv>
    21f4:	60 e0       	ldi	r22, 0x00	; 0
    21f6:	70 e0       	ldi	r23, 0x00	; 0
    21f8:	7c 2f       	mov	r23, r28
    21fa:	86 2b       	or	r24, r22
    21fc:	97 2b       	or	r25, r23
    21fe:	bc 01       	movw	r22, r24
    2200:	99 0f       	add	r25, r25
    2202:	88 0b       	sbc	r24, r24
    2204:	99 0b       	sbc	r25, r25
    2206:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <__floatsisf>
    220a:	60 93 4c 01 	sts	0x014C, r22	; 0x80014c <gyro_pitch>
    220e:	70 93 4d 01 	sts	0x014D, r23	; 0x80014d <gyro_pitch+0x1>
    2212:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <gyro_pitch+0x2>
    2216:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <gyro_pitch+0x3>
		if(cal_int == 2000)gyro_pitch -= gyro_pitch_cal;             //Only compensate after the calibration
    221a:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <cal_int>
    221e:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <cal_int+0x1>
    2222:	20 3d       	cpi	r18, 0xD0	; 208
    2224:	37 40       	sbci	r19, 0x07	; 7
    2226:	91 f4       	brne	.+36     	; 0x224c <_Z13gyro_signalenv+0x2d6>
    2228:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <gyro_pitch_cal>
    222c:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <gyro_pitch_cal+0x1>
    2230:	40 91 3e 01 	lds	r20, 0x013E	; 0x80013e <gyro_pitch_cal+0x2>
    2234:	50 91 3f 01 	lds	r21, 0x013F	; 0x80013f <gyro_pitch_cal+0x3>
    2238:	0e 94 94 1c 	call	0x3928	; 0x3928 <__subsf3>
    223c:	60 93 4c 01 	sts	0x014C, r22	; 0x80014c <gyro_pitch>
    2240:	70 93 4d 01 	sts	0x014D, r23	; 0x80014d <gyro_pitch+0x1>
    2244:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <gyro_pitch+0x2>
    2248:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <gyro_pitch+0x3>
		gyro_yaw=Wire.read()<<8|Wire.read();                         //Read high and low part of the angular data
    224c:	8c e3       	ldi	r24, 0x3C	; 60
    224e:	92 e0       	ldi	r25, 0x02	; 2
    2250:	0e 94 30 23 	call	0x4660	; 0x4660 <_ZN7TwoWire4readEv>
    2254:	c8 2f       	mov	r28, r24
    2256:	8c e3       	ldi	r24, 0x3C	; 60
    2258:	92 e0       	ldi	r25, 0x02	; 2
    225a:	0e 94 30 23 	call	0x4660	; 0x4660 <_ZN7TwoWire4readEv>
    225e:	60 e0       	ldi	r22, 0x00	; 0
    2260:	70 e0       	ldi	r23, 0x00	; 0
    2262:	7c 2f       	mov	r23, r28
    2264:	86 2b       	or	r24, r22
    2266:	97 2b       	or	r25, r23
    2268:	bc 01       	movw	r22, r24
    226a:	99 0f       	add	r25, r25
    226c:	88 0b       	sbc	r24, r24
    226e:	99 0b       	sbc	r25, r25
    2270:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <__floatsisf>
    2274:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <gyro_yaw>
    2278:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <gyro_yaw+0x1>
    227c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <gyro_yaw+0x2>
    2280:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <gyro_yaw+0x3>
		if(cal_int == 2000)gyro_yaw -= gyro_yaw_cal;                 //Only compensate after the calibration
    2284:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <cal_int>
    2288:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <cal_int+0x1>
    228c:	20 3d       	cpi	r18, 0xD0	; 208
    228e:	37 40       	sbci	r19, 0x07	; 7
    2290:	91 f4       	brne	.+36     	; 0x22b6 <_Z13gyro_signalenv+0x340>
    2292:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <__data_end>
    2296:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <__data_end+0x1>
    229a:	40 91 3a 01 	lds	r20, 0x013A	; 0x80013a <__data_end+0x2>
    229e:	50 91 3b 01 	lds	r21, 0x013B	; 0x80013b <__data_end+0x3>
    22a2:	0e 94 94 1c 	call	0x3928	; 0x3928 <__subsf3>
    22a6:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <gyro_yaw>
    22aa:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <gyro_yaw+0x1>
    22ae:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <gyro_yaw+0x2>
    22b2:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <gyro_yaw+0x3>
	}
}
    22b6:	df 91       	pop	r29
    22b8:	cf 91       	pop	r28
    22ba:	1f 91       	pop	r17
    22bc:	0f 91       	pop	r16
    22be:	ff 90       	pop	r15
    22c0:	ef 90       	pop	r14
    22c2:	08 95       	ret

000022c4 <_Z15check_gyro_axesh>:
		delay(100);
	}
}

//Check if the angular position of a gyro axis is changing within 10 seconds
void check_gyro_axes(byte movement){
    22c4:	4f 92       	push	r4
    22c6:	5f 92       	push	r5
    22c8:	6f 92       	push	r6
    22ca:	7f 92       	push	r7
    22cc:	8f 92       	push	r8
    22ce:	9f 92       	push	r9
    22d0:	af 92       	push	r10
    22d2:	bf 92       	push	r11
    22d4:	cf 92       	push	r12
    22d6:	df 92       	push	r13
    22d8:	ef 92       	push	r14
    22da:	ff 92       	push	r15
    22dc:	0f 93       	push	r16
    22de:	1f 93       	push	r17
    22e0:	cf 93       	push	r28
    22e2:	df 93       	push	r29
    22e4:	d8 2f       	mov	r29, r24
	float gyro_angle_roll, gyro_angle_pitch, gyro_angle_yaw;
	//Reset all axes
	gyro_angle_roll = 0;
	gyro_angle_pitch = 0;
	gyro_angle_yaw = 0;
	gyro_signalen();
    22e6:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <_Z13gyro_signalenv>
	timer = millis() + 10000;
    22ea:	0e 94 b0 24 	call	0x4960	; 0x4960 <millis>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	80 5f       	subi	r24, 0xF0	; 240
    22f4:	98 4d       	sbci	r25, 0xD8	; 216
    22f6:	af 4f       	sbci	r26, 0xFF	; 255
    22f8:	bf 4f       	sbci	r27, 0xFF	; 255
    22fa:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timer>
    22fe:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timer+0x1>
    2302:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <timer+0x2>
    2306:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <timer+0x3>
	byte trigger_axis = 0;
	float gyro_angle_roll, gyro_angle_pitch, gyro_angle_yaw;
	//Reset all axes
	gyro_angle_roll = 0;
	gyro_angle_pitch = 0;
	gyro_angle_yaw = 0;
    230a:	81 2c       	mov	r8, r1
    230c:	91 2c       	mov	r9, r1
    230e:	54 01       	movw	r10, r8
void check_gyro_axes(byte movement){
	byte trigger_axis = 0;
	float gyro_angle_roll, gyro_angle_pitch, gyro_angle_yaw;
	//Reset all axes
	gyro_angle_roll = 0;
	gyro_angle_pitch = 0;
    2310:	24 01       	movw	r4, r8
    2312:	35 01       	movw	r6, r10
//Check if the angular position of a gyro axis is changing within 10 seconds
void check_gyro_axes(byte movement){
	byte trigger_axis = 0;
	float gyro_angle_roll, gyro_angle_pitch, gyro_angle_yaw;
	//Reset all axes
	gyro_angle_roll = 0;
    2314:	75 01       	movw	r14, r10
    2316:	64 01       	movw	r12, r8
	gyro_angle_pitch = 0;
	gyro_angle_yaw = 0;
	gyro_signalen();
	timer = millis() + 10000;
	while(timer > millis() && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30){
    2318:	0e 94 b0 24 	call	0x4960	; 0x4960 <millis>
    231c:	00 91 64 01 	lds	r16, 0x0164	; 0x800164 <timer>
    2320:	10 91 65 01 	lds	r17, 0x0165	; 0x800165 <timer+0x1>
    2324:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <timer+0x2>
    2328:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <timer+0x3>
    232c:	60 17       	cp	r22, r16
    232e:	71 07       	cpc	r23, r17
    2330:	82 07       	cpc	r24, r18
    2332:	93 07       	cpc	r25, r19
    2334:	08 f0       	brcs	.+2      	; 0x2338 <_Z15check_gyro_axesh+0x74>
    2336:	3e c0       	rjmp	.+124    	; 0x23b4 <_Z15check_gyro_axesh+0xf0>
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 ef       	ldi	r20, 0xF0	; 240
    233e:	51 ec       	ldi	r21, 0xC1	; 193
    2340:	c7 01       	movw	r24, r14
    2342:	b6 01       	movw	r22, r12
    2344:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <__gesf2>
    2348:	18 16       	cp	r1, r24
    234a:	a4 f5       	brge	.+104    	; 0x23b4 <_Z15check_gyro_axesh+0xf0>
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	40 ef       	ldi	r20, 0xF0	; 240
    2352:	51 e4       	ldi	r21, 0x41	; 65
    2354:	c7 01       	movw	r24, r14
    2356:	b6 01       	movw	r22, r12
    2358:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    235c:	87 ff       	sbrs	r24, 7
    235e:	2a c0       	rjmp	.+84     	; 0x23b4 <_Z15check_gyro_axesh+0xf0>
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	40 ef       	ldi	r20, 0xF0	; 240
    2366:	51 ec       	ldi	r21, 0xC1	; 193
    2368:	c3 01       	movw	r24, r6
    236a:	b2 01       	movw	r22, r4
    236c:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <__gesf2>
    2370:	18 16       	cp	r1, r24
    2372:	04 f5       	brge	.+64     	; 0x23b4 <_Z15check_gyro_axesh+0xf0>
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	40 ef       	ldi	r20, 0xF0	; 240
    237a:	51 e4       	ldi	r21, 0x41	; 65
    237c:	c3 01       	movw	r24, r6
    237e:	b2 01       	movw	r22, r4
    2380:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	40 ef       	ldi	r20, 0xF0	; 240
    238a:	51 ec       	ldi	r21, 0xC1	; 193
    238c:	87 ff       	sbrs	r24, 7
    238e:	ae c1       	rjmp	.+860    	; 0x26ec <_Z15check_gyro_axesh+0x428>
    2390:	c5 01       	movw	r24, r10
    2392:	b4 01       	movw	r22, r8
    2394:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <__gesf2>
    2398:	18 16       	cp	r1, r24
    239a:	0c f0       	brlt	.+2      	; 0x239e <_Z15check_gyro_axesh+0xda>
    239c:	ae c1       	rjmp	.+860    	; 0x26fa <_Z15check_gyro_axesh+0x436>
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	40 ef       	ldi	r20, 0xF0	; 240
    23a4:	51 e4       	ldi	r21, 0x41	; 65
    23a6:	c5 01       	movw	r24, r10
    23a8:	b4 01       	movw	r22, r8
    23aa:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    23ae:	87 fd       	sbrc	r24, 7
    23b0:	07 c1       	rjmp	.+526    	; 0x25c0 <_Z15check_gyro_axesh+0x2fc>
    23b2:	ae c1       	rjmp	.+860    	; 0x2710 <_Z15check_gyro_axesh+0x44c>
		}
		
		delayMicroseconds(3700); //Loop is running @ 250Hz. +/-300us is used for communication with the gyro
	}
	//Assign the moved axis to the orresponding function (pitch, roll, yaw)
	if((gyro_angle_roll < -30 || gyro_angle_roll > 30) && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30){
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	40 ef       	ldi	r20, 0xF0	; 240
    23ba:	51 ec       	ldi	r21, 0xC1	; 193
    23bc:	c7 01       	movw	r24, r14
    23be:	b6 01       	movw	r22, r12
    23c0:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    23c4:	87 fd       	sbrc	r24, 7
    23c6:	0b c0       	rjmp	.+22     	; 0x23de <_Z15check_gyro_axesh+0x11a>
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	40 ef       	ldi	r20, 0xF0	; 240
    23ce:	51 e4       	ldi	r21, 0x41	; 65
    23d0:	c7 01       	movw	r24, r14
    23d2:	b6 01       	movw	r22, r12
    23d4:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <__gesf2>
    23d8:	18 16       	cp	r1, r24
    23da:	0c f0       	brlt	.+2      	; 0x23de <_Z15check_gyro_axesh+0x11a>
    23dc:	aa c1       	rjmp	.+852    	; 0x2732 <_Z15check_gyro_axesh+0x46e>
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 ef       	ldi	r20, 0xF0	; 240
    23e4:	51 ec       	ldi	r21, 0xC1	; 193
    23e6:	c3 01       	movw	r24, r6
    23e8:	b2 01       	movw	r22, r4
    23ea:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <__gesf2>
    23ee:	18 16       	cp	r1, r24
    23f0:	0c f0       	brlt	.+2      	; 0x23f4 <_Z15check_gyro_axesh+0x130>
    23f2:	9f c1       	rjmp	.+830    	; 0x2732 <_Z15check_gyro_axesh+0x46e>
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	40 ef       	ldi	r20, 0xF0	; 240
    23fa:	51 e4       	ldi	r21, 0x41	; 65
    23fc:	c3 01       	movw	r24, r6
    23fe:	b2 01       	movw	r22, r4
    2400:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    2404:	87 ff       	sbrs	r24, 7
    2406:	95 c1       	rjmp	.+810    	; 0x2732 <_Z15check_gyro_axesh+0x46e>
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	40 ef       	ldi	r20, 0xF0	; 240
    240e:	51 ec       	ldi	r21, 0xC1	; 193
    2410:	c5 01       	movw	r24, r10
    2412:	b4 01       	movw	r22, r8
    2414:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <__gesf2>
    2418:	18 16       	cp	r1, r24
    241a:	0c f0       	brlt	.+2      	; 0x241e <_Z15check_gyro_axesh+0x15a>
    241c:	8a c1       	rjmp	.+788    	; 0x2732 <_Z15check_gyro_axesh+0x46e>
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 ef       	ldi	r20, 0xF0	; 240
    2424:	51 e4       	ldi	r21, 0x41	; 65
    2426:	c5 01       	movw	r24, r10
    2428:	b4 01       	movw	r22, r8
    242a:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    242e:	87 ff       	sbrs	r24, 7
    2430:	80 c1       	rjmp	.+768    	; 0x2732 <_Z15check_gyro_axesh+0x46e>
		gyro_check_byte |= 0b00000001;
    2432:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <gyro_check_byte>
    2436:	81 60       	ori	r24, 0x01	; 1
    2438:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <gyro_check_byte>
		if(gyro_angle_roll < 0)trigger_axis = 0b10000001;
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	a9 01       	movw	r20, r18
    2442:	c7 01       	movw	r24, r14
    2444:	b6 01       	movw	r22, r12
    2446:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    244a:	87 fd       	sbrc	r24, 7
    244c:	02 c0       	rjmp	.+4      	; 0x2452 <_Z15check_gyro_axesh+0x18e>
		else trigger_axis = 0b00000001;
    244e:	c1 e0       	ldi	r28, 0x01	; 1
    2450:	01 c0       	rjmp	.+2      	; 0x2454 <_Z15check_gyro_axesh+0x190>
		delayMicroseconds(3700); //Loop is running @ 250Hz. +/-300us is used for communication with the gyro
	}
	//Assign the moved axis to the orresponding function (pitch, roll, yaw)
	if((gyro_angle_roll < -30 || gyro_angle_roll > 30) && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30){
		gyro_check_byte |= 0b00000001;
		if(gyro_angle_roll < 0)trigger_axis = 0b10000001;
    2452:	c1 e8       	ldi	r28, 0x81	; 129
		else trigger_axis = 0b00000001;
	}
	if((gyro_angle_pitch < -30 || gyro_angle_pitch > 30) && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30){
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	40 ef       	ldi	r20, 0xF0	; 240
    245a:	51 ec       	ldi	r21, 0xC1	; 193
    245c:	c3 01       	movw	r24, r6
    245e:	b2 01       	movw	r22, r4
    2460:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    2464:	87 fd       	sbrc	r24, 7
    2466:	0a c0       	rjmp	.+20     	; 0x247c <_Z15check_gyro_axesh+0x1b8>
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 ef       	ldi	r20, 0xF0	; 240
    246e:	51 e4       	ldi	r21, 0x41	; 65
    2470:	c3 01       	movw	r24, r6
    2472:	b2 01       	movw	r22, r4
    2474:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <__gesf2>
    2478:	18 16       	cp	r1, r24
    247a:	cc f5       	brge	.+114    	; 0x24ee <_Z15check_gyro_axesh+0x22a>
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	40 ef       	ldi	r20, 0xF0	; 240
    2482:	51 ec       	ldi	r21, 0xC1	; 193
    2484:	c7 01       	movw	r24, r14
    2486:	b6 01       	movw	r22, r12
    2488:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <__gesf2>
    248c:	18 16       	cp	r1, r24
    248e:	7c f5       	brge	.+94     	; 0x24ee <_Z15check_gyro_axesh+0x22a>
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	40 ef       	ldi	r20, 0xF0	; 240
    2496:	51 e4       	ldi	r21, 0x41	; 65
    2498:	c7 01       	movw	r24, r14
    249a:	b6 01       	movw	r22, r12
    249c:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	40 ef       	ldi	r20, 0xF0	; 240
    24a6:	51 ec       	ldi	r21, 0xC1	; 193
    24a8:	87 ff       	sbrs	r24, 7
    24aa:	0d c1       	rjmp	.+538    	; 0x26c6 <_Z15check_gyro_axesh+0x402>
    24ac:	c5 01       	movw	r24, r10
    24ae:	b4 01       	movw	r22, r8
    24b0:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <__gesf2>
    24b4:	18 16       	cp	r1, r24
    24b6:	0c f0       	brlt	.+2      	; 0x24ba <_Z15check_gyro_axesh+0x1f6>
    24b8:	0e c1       	rjmp	.+540    	; 0x26d6 <_Z15check_gyro_axesh+0x412>
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	40 ef       	ldi	r20, 0xF0	; 240
    24c0:	51 e4       	ldi	r21, 0x41	; 65
    24c2:	c5 01       	movw	r24, r10
    24c4:	b4 01       	movw	r22, r8
    24c6:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    24ca:	87 ff       	sbrs	r24, 7
    24cc:	04 c1       	rjmp	.+520    	; 0x26d6 <_Z15check_gyro_axesh+0x412>
		gyro_check_byte |= 0b00000010;
    24ce:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <gyro_check_byte>
    24d2:	82 60       	ori	r24, 0x02	; 2
    24d4:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <gyro_check_byte>
		if(gyro_angle_pitch < 0)trigger_axis = 0b10000010;
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	a9 01       	movw	r20, r18
    24de:	c3 01       	movw	r24, r6
    24e0:	b2 01       	movw	r22, r4
    24e2:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    24e6:	87 fd       	sbrc	r24, 7
    24e8:	f5 c0       	rjmp	.+490    	; 0x26d4 <_Z15check_gyro_axesh+0x410>
		else trigger_axis = 0b00000010;
    24ea:	c2 e0       	ldi	r28, 0x02	; 2
    24ec:	f4 c0       	rjmp	.+488    	; 0x26d6 <_Z15check_gyro_axesh+0x412>
	}
	if((gyro_angle_yaw < -30 || gyro_angle_yaw > 30) && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_pitch > -30 && gyro_angle_pitch < 30){
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	40 ef       	ldi	r20, 0xF0	; 240
    24f4:	51 ec       	ldi	r21, 0xC1	; 193
    24f6:	c5 01       	movw	r24, r10
    24f8:	b4 01       	movw	r22, r8
    24fa:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    24fe:	87 fd       	sbrc	r24, 7
    2500:	0a c0       	rjmp	.+20     	; 0x2516 <_Z15check_gyro_axesh+0x252>
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	40 ef       	ldi	r20, 0xF0	; 240
    2508:	51 e4       	ldi	r21, 0x41	; 65
    250a:	c5 01       	movw	r24, r10
    250c:	b4 01       	movw	r22, r8
    250e:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <__gesf2>
    2512:	18 16       	cp	r1, r24
    2514:	c4 f5       	brge	.+112    	; 0x2586 <_Z15check_gyro_axesh+0x2c2>
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 ef       	ldi	r20, 0xF0	; 240
    251c:	51 ec       	ldi	r21, 0xC1	; 193
    251e:	c7 01       	movw	r24, r14
    2520:	b6 01       	movw	r22, r12
    2522:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <__gesf2>
    2526:	18 16       	cp	r1, r24
    2528:	74 f5       	brge	.+92     	; 0x2586 <_Z15check_gyro_axesh+0x2c2>
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	40 ef       	ldi	r20, 0xF0	; 240
    2530:	51 e4       	ldi	r21, 0x41	; 65
    2532:	c7 01       	movw	r24, r14
    2534:	b6 01       	movw	r22, r12
    2536:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    253a:	87 ff       	sbrs	r24, 7
    253c:	24 c0       	rjmp	.+72     	; 0x2586 <_Z15check_gyro_axesh+0x2c2>
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	40 ef       	ldi	r20, 0xF0	; 240
    2544:	51 ec       	ldi	r21, 0xC1	; 193
    2546:	c3 01       	movw	r24, r6
    2548:	b2 01       	movw	r22, r4
    254a:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <__gesf2>
    254e:	18 16       	cp	r1, r24
    2550:	d4 f4       	brge	.+52     	; 0x2586 <_Z15check_gyro_axesh+0x2c2>
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	40 ef       	ldi	r20, 0xF0	; 240
    2558:	51 e4       	ldi	r21, 0x41	; 65
    255a:	c3 01       	movw	r24, r6
    255c:	b2 01       	movw	r22, r4
    255e:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    2562:	87 ff       	sbrs	r24, 7
    2564:	10 c0       	rjmp	.+32     	; 0x2586 <_Z15check_gyro_axesh+0x2c2>
		gyro_check_byte |= 0b00000100;
    2566:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <gyro_check_byte>
    256a:	84 60       	ori	r24, 0x04	; 4
    256c:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <gyro_check_byte>
		if(gyro_angle_yaw < 0)trigger_axis = 0b10000011;
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	a9 01       	movw	r20, r18
    2576:	c5 01       	movw	r24, r10
    2578:	b4 01       	movw	r22, r8
    257a:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    257e:	87 fd       	sbrc	r24, 7
    2580:	0e c0       	rjmp	.+28     	; 0x259e <_Z15check_gyro_axesh+0x2da>
		else trigger_axis = 0b00000011;
    2582:	c3 e0       	ldi	r28, 0x03	; 3
    2584:	0d c0       	rjmp	.+26     	; 0x25a0 <_Z15check_gyro_axesh+0x2dc>
	}
	
	if(trigger_axis == 0){
    2586:	c1 11       	cpse	r28, r1
    2588:	0b c0       	rjmp	.+22     	; 0x25a0 <_Z15check_gyro_axesh+0x2dc>
		error = 1;
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		Serial.println(F("No angular motion is detected in the last 10 seconds!!! (ERROR 4)"));
    2590:	6f e4       	ldi	r22, 0x4F	; 79
    2592:	71 e0       	ldi	r23, 0x01	; 1
    2594:	8f e9       	ldi	r24, 0x9F	; 159
    2596:	91 e0       	ldi	r25, 0x01	; 1
    2598:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
    259c:	06 c0       	rjmp	.+12     	; 0x25aa <_Z15check_gyro_axesh+0x2e6>
		if(gyro_angle_pitch < 0)trigger_axis = 0b10000010;
		else trigger_axis = 0b00000010;
	}
	if((gyro_angle_yaw < -30 || gyro_angle_yaw > 30) && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_pitch > -30 && gyro_angle_pitch < 30){
		gyro_check_byte |= 0b00000100;
		if(gyro_angle_yaw < 0)trigger_axis = 0b10000011;
    259e:	c3 e8       	ldi	r28, 0x83	; 131
	if(trigger_axis == 0){
		error = 1;
		Serial.println(F("No angular motion is detected in the last 10 seconds!!! (ERROR 4)"));
	}
	else
	if(movement == 1)roll_axis = trigger_axis;
    25a0:	d1 30       	cpi	r29, 0x01	; 1
    25a2:	19 f4       	brne	.+6      	; 0x25aa <_Z15check_gyro_axesh+0x2e6>
    25a4:	c0 93 90 01 	sts	0x0190, r28	; 0x800190 <roll_axis>
    25a8:	cd c0       	rjmp	.+410    	; 0x2744 <_Z15check_gyro_axesh+0x480>
	if(movement == 2)pitch_axis = trigger_axis;
    25aa:	d2 30       	cpi	r29, 0x02	; 2
    25ac:	19 f4       	brne	.+6      	; 0x25b4 <_Z15check_gyro_axesh+0x2f0>
    25ae:	c0 93 8f 01 	sts	0x018F, r28	; 0x80018f <pitch_axis>
    25b2:	c8 c0       	rjmp	.+400    	; 0x2744 <_Z15check_gyro_axesh+0x480>
	if(movement == 3)yaw_axis = trigger_axis;
    25b4:	d3 30       	cpi	r29, 0x03	; 3
    25b6:	09 f0       	breq	.+2      	; 0x25ba <_Z15check_gyro_axesh+0x2f6>
    25b8:	c5 c0       	rjmp	.+394    	; 0x2744 <_Z15check_gyro_axesh+0x480>
    25ba:	c0 93 8e 01 	sts	0x018E, r28	; 0x80018e <yaw_axis>
	
}
    25be:	c2 c0       	rjmp	.+388    	; 0x2744 <_Z15check_gyro_axesh+0x480>
	gyro_angle_pitch = 0;
	gyro_angle_yaw = 0;
	gyro_signalen();
	timer = millis() + 10000;
	while(timer > millis() && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30){
		gyro_signalen();
    25c0:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <_Z13gyro_signalenv>
		if(type == 2 || type == 3){
    25c4:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <type>
    25c8:	9e ef       	ldi	r25, 0xFE	; 254
    25ca:	98 0f       	add	r25, r24
    25cc:	92 30       	cpi	r25, 0x02	; 2
    25ce:	88 f5       	brcc	.+98     	; 0x2632 <_Z15check_gyro_axesh+0x36e>
			gyro_angle_roll += gyro_roll * 0.00007;              //0.00007 = 17.5 (md/s) / 250(Hz)
    25d0:	27 ef       	ldi	r18, 0xF7	; 247
    25d2:	3c ec       	ldi	r19, 0xCC	; 204
    25d4:	42 e9       	ldi	r20, 0x92	; 146
    25d6:	58 e3       	ldi	r21, 0x38	; 56
    25d8:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <gyro_roll>
    25dc:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <gyro_roll+0x1>
    25e0:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <gyro_roll+0x2>
    25e4:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <gyro_roll+0x3>
    25e8:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <__mulsf3>
    25ec:	9b 01       	movw	r18, r22
    25ee:	ac 01       	movw	r20, r24
    25f0:	c7 01       	movw	r24, r14
    25f2:	b6 01       	movw	r22, r12
    25f4:	0e 94 95 1c 	call	0x392a	; 0x392a <__addsf3>
    25f8:	6b 01       	movw	r12, r22
    25fa:	7c 01       	movw	r14, r24
			gyro_angle_pitch += gyro_pitch * 0.00007;
    25fc:	27 ef       	ldi	r18, 0xF7	; 247
    25fe:	3c ec       	ldi	r19, 0xCC	; 204
    2600:	42 e9       	ldi	r20, 0x92	; 146
    2602:	58 e3       	ldi	r21, 0x38	; 56
    2604:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <gyro_pitch>
    2608:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <gyro_pitch+0x1>
    260c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <gyro_pitch+0x2>
    2610:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <gyro_pitch+0x3>
    2614:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <__mulsf3>
    2618:	9b 01       	movw	r18, r22
    261a:	ac 01       	movw	r20, r24
    261c:	c3 01       	movw	r24, r6
    261e:	b2 01       	movw	r22, r4
    2620:	0e 94 95 1c 	call	0x392a	; 0x392a <__addsf3>
    2624:	2b 01       	movw	r4, r22
    2626:	3c 01       	movw	r6, r24
			gyro_angle_yaw += gyro_yaw * 0.00007;
    2628:	27 ef       	ldi	r18, 0xF7	; 247
    262a:	3c ec       	ldi	r19, 0xCC	; 204
    262c:	42 e9       	ldi	r20, 0x92	; 146
    262e:	58 e3       	ldi	r21, 0x38	; 56
    2630:	33 c0       	rjmp	.+102    	; 0x2698 <_Z15check_gyro_axesh+0x3d4>
		}
		if(type == 1){
    2632:	81 30       	cpi	r24, 0x01	; 1
    2634:	09 f0       	breq	.+2      	; 0x2638 <_Z15check_gyro_axesh+0x374>
    2636:	42 c0       	rjmp	.+132    	; 0x26bc <_Z15check_gyro_axesh+0x3f8>
			gyro_angle_roll += gyro_roll * 0.0000611;          // 0.0000611 = 1 / 65.5 (LSB degr/s) / 250(Hz)
    2638:	20 ed       	ldi	r18, 0xD0	; 208
    263a:	32 e2       	ldi	r19, 0x22	; 34
    263c:	40 e8       	ldi	r20, 0x80	; 128
    263e:	58 e3       	ldi	r21, 0x38	; 56
    2640:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <gyro_roll>
    2644:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <gyro_roll+0x1>
    2648:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <gyro_roll+0x2>
    264c:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <gyro_roll+0x3>
    2650:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <__mulsf3>
    2654:	9b 01       	movw	r18, r22
    2656:	ac 01       	movw	r20, r24
    2658:	c7 01       	movw	r24, r14
    265a:	b6 01       	movw	r22, r12
    265c:	0e 94 95 1c 	call	0x392a	; 0x392a <__addsf3>
    2660:	6b 01       	movw	r12, r22
    2662:	7c 01       	movw	r14, r24
			gyro_angle_pitch += gyro_pitch * 0.0000611;
    2664:	20 ed       	ldi	r18, 0xD0	; 208
    2666:	32 e2       	ldi	r19, 0x22	; 34
    2668:	40 e8       	ldi	r20, 0x80	; 128
    266a:	58 e3       	ldi	r21, 0x38	; 56
    266c:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <gyro_pitch>
    2670:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <gyro_pitch+0x1>
    2674:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <gyro_pitch+0x2>
    2678:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <gyro_pitch+0x3>
    267c:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <__mulsf3>
    2680:	9b 01       	movw	r18, r22
    2682:	ac 01       	movw	r20, r24
    2684:	c3 01       	movw	r24, r6
    2686:	b2 01       	movw	r22, r4
    2688:	0e 94 95 1c 	call	0x392a	; 0x392a <__addsf3>
    268c:	2b 01       	movw	r4, r22
    268e:	3c 01       	movw	r6, r24
			gyro_angle_yaw += gyro_yaw * 0.0000611;
    2690:	20 ed       	ldi	r18, 0xD0	; 208
    2692:	32 e2       	ldi	r19, 0x22	; 34
    2694:	40 e8       	ldi	r20, 0x80	; 128
    2696:	58 e3       	ldi	r21, 0x38	; 56
    2698:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <gyro_yaw>
    269c:	70 91 45 01 	lds	r23, 0x0145	; 0x800145 <gyro_yaw+0x1>
    26a0:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <gyro_yaw+0x2>
    26a4:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <gyro_yaw+0x3>
    26a8:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <__mulsf3>
    26ac:	9b 01       	movw	r18, r22
    26ae:	ac 01       	movw	r20, r24
    26b0:	c5 01       	movw	r24, r10
    26b2:	b4 01       	movw	r22, r8
    26b4:	0e 94 95 1c 	call	0x392a	; 0x392a <__addsf3>
    26b8:	4b 01       	movw	r8, r22
    26ba:	5c 01       	movw	r10, r24
		}
		
		delayMicroseconds(3700); //Loop is running @ 250Hz. +/-300us is used for communication with the gyro
    26bc:	84 e7       	ldi	r24, 0x74	; 116
    26be:	9e e0       	ldi	r25, 0x0E	; 14
    26c0:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <delayMicroseconds>
	gyro_angle_roll = 0;
	gyro_angle_pitch = 0;
	gyro_angle_yaw = 0;
	gyro_signalen();
	timer = millis() + 10000;
	while(timer > millis() && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30){
    26c4:	29 ce       	rjmp	.-942    	; 0x2318 <_Z15check_gyro_axesh+0x54>
	if((gyro_angle_pitch < -30 || gyro_angle_pitch > 30) && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30){
		gyro_check_byte |= 0b00000010;
		if(gyro_angle_pitch < 0)trigger_axis = 0b10000010;
		else trigger_axis = 0b00000010;
	}
	if((gyro_angle_yaw < -30 || gyro_angle_yaw > 30) && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_pitch > -30 && gyro_angle_pitch < 30){
    26c6:	c5 01       	movw	r24, r10
    26c8:	b4 01       	movw	r22, r8
    26ca:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    26ce:	87 fd       	sbrc	r24, 7
    26d0:	2c cf       	rjmp	.-424    	; 0x252a <_Z15check_gyro_axesh+0x266>
    26d2:	31 c0       	rjmp	.+98     	; 0x2736 <_Z15check_gyro_axesh+0x472>
		if(gyro_angle_roll < 0)trigger_axis = 0b10000001;
		else trigger_axis = 0b00000001;
	}
	if((gyro_angle_pitch < -30 || gyro_angle_pitch > 30) && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30){
		gyro_check_byte |= 0b00000010;
		if(gyro_angle_pitch < 0)trigger_axis = 0b10000010;
    26d4:	c2 e8       	ldi	r28, 0x82	; 130
		else trigger_axis = 0b00000010;
	}
	if((gyro_angle_yaw < -30 || gyro_angle_yaw > 30) && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_pitch > -30 && gyro_angle_pitch < 30){
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 ef       	ldi	r20, 0xF0	; 240
    26dc:	51 ec       	ldi	r21, 0xC1	; 193
    26de:	c5 01       	movw	r24, r10
    26e0:	b4 01       	movw	r22, r8
    26e2:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    26e6:	87 fd       	sbrc	r24, 7
    26e8:	2a cf       	rjmp	.-428    	; 0x253e <_Z15check_gyro_axesh+0x27a>
    26ea:	25 c0       	rjmp	.+74     	; 0x2736 <_Z15check_gyro_axesh+0x472>
		}
		
		delayMicroseconds(3700); //Loop is running @ 250Hz. +/-300us is used for communication with the gyro
	}
	//Assign the moved axis to the orresponding function (pitch, roll, yaw)
	if((gyro_angle_roll < -30 || gyro_angle_roll > 30) && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30){
    26ec:	c7 01       	movw	r24, r14
    26ee:	b6 01       	movw	r22, r12
    26f0:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    26f4:	87 ff       	sbrs	r24, 7
    26f6:	16 c0       	rjmp	.+44     	; 0x2724 <_Z15check_gyro_axesh+0x460>
    26f8:	7d ce       	rjmp	.-774    	; 0x23f4 <_Z15check_gyro_axesh+0x130>
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	40 ef       	ldi	r20, 0xF0	; 240
    2700:	51 ec       	ldi	r21, 0xC1	; 193
    2702:	c7 01       	movw	r24, r14
    2704:	b6 01       	movw	r22, r12
    2706:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    270a:	87 ff       	sbrs	r24, 7
    270c:	0b c0       	rjmp	.+22     	; 0x2724 <_Z15check_gyro_axesh+0x460>
    270e:	7c ce       	rjmp	.-776    	; 0x2408 <_Z15check_gyro_axesh+0x144>
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	40 ef       	ldi	r20, 0xF0	; 240
    2716:	51 ec       	ldi	r21, 0xC1	; 193
    2718:	c7 01       	movw	r24, r14
    271a:	b6 01       	movw	r22, r12
    271c:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    2720:	87 fd       	sbrc	r24, 7
    2722:	7d ce       	rjmp	.-774    	; 0x241e <_Z15check_gyro_axesh+0x15a>
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 ef       	ldi	r20, 0xF0	; 240
    272a:	51 e4       	ldi	r21, 0x41	; 65
    272c:	c7 01       	movw	r24, r14
    272e:	b6 01       	movw	r22, r12
    2730:	5c ce       	rjmp	.-840    	; 0x23ea <_Z15check_gyro_axesh+0x126>
	}
}

//Check if the angular position of a gyro axis is changing within 10 seconds
void check_gyro_axes(byte movement){
	byte trigger_axis = 0;
    2732:	c0 e0       	ldi	r28, 0x00	; 0
    2734:	8f ce       	rjmp	.-738    	; 0x2454 <_Z15check_gyro_axesh+0x190>
	if((gyro_angle_pitch < -30 || gyro_angle_pitch > 30) && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30){
		gyro_check_byte |= 0b00000010;
		if(gyro_angle_pitch < 0)trigger_axis = 0b10000010;
		else trigger_axis = 0b00000010;
	}
	if((gyro_angle_yaw < -30 || gyro_angle_yaw > 30) && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_pitch > -30 && gyro_angle_pitch < 30){
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	40 ef       	ldi	r20, 0xF0	; 240
    273c:	51 e4       	ldi	r21, 0x41	; 65
    273e:	c5 01       	movw	r24, r10
    2740:	b4 01       	movw	r22, r8
    2742:	ef ce       	rjmp	.-546    	; 0x2522 <_Z15check_gyro_axesh+0x25e>
	else
	if(movement == 1)roll_axis = trigger_axis;
	if(movement == 2)pitch_axis = trigger_axis;
	if(movement == 3)yaw_axis = trigger_axis;
	
}
    2744:	df 91       	pop	r29
    2746:	cf 91       	pop	r28
    2748:	1f 91       	pop	r17
    274a:	0f 91       	pop	r16
    274c:	ff 90       	pop	r15
    274e:	ef 90       	pop	r14
    2750:	df 90       	pop	r13
    2752:	cf 90       	pop	r12
    2754:	bf 90       	pop	r11
    2756:	af 90       	pop	r10
    2758:	9f 90       	pop	r9
    275a:	8f 90       	pop	r8
    275c:	7f 90       	pop	r7
    275e:	6f 90       	pop	r6
    2760:	5f 90       	pop	r5
    2762:	4f 90       	pop	r4
    2764:	08 95       	ret

00002766 <loop>:
	delay(250);               //Give the gyro time to start
}
//Main program
void loop(){
	//Show the YMFC-3D V2 intro
	intro();
    2766:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <_Z5introv>
	
	Serial.println(F(""));
    276a:	63 e9       	ldi	r22, 0x93	; 147
    276c:	71 e1       	ldi	r23, 0x11	; 17
    276e:	8f e9       	ldi	r24, 0x9F	; 159
    2770:	91 e0       	ldi	r25, 0x01	; 1
    2772:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println(F("==================================================="));
    2776:	6f e5       	ldi	r22, 0x5F	; 95
    2778:	71 e1       	ldi	r23, 0x11	; 17
    277a:	8f e9       	ldi	r24, 0x9F	; 159
    277c:	91 e0       	ldi	r25, 0x01	; 1
    277e:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println(F("System check"));
    2782:	62 e5       	ldi	r22, 0x52	; 82
    2784:	71 e1       	ldi	r23, 0x11	; 17
    2786:	8f e9       	ldi	r24, 0x9F	; 159
    2788:	91 e0       	ldi	r25, 0x01	; 1
    278a:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println(F("==================================================="));
    278e:	6e e1       	ldi	r22, 0x1E	; 30
    2790:	71 e1       	ldi	r23, 0x11	; 17
    2792:	8f e9       	ldi	r24, 0x9F	; 159
    2794:	91 e0       	ldi	r25, 0x01	; 1
    2796:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
	delay(1000);
    279a:	68 ee       	ldi	r22, 0xE8	; 232
    279c:	73 e0       	ldi	r23, 0x03	; 3
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
	Serial.println(F("Checking I2C clock speed."));
    27a6:	64 e0       	ldi	r22, 0x04	; 4
    27a8:	71 e1       	ldi	r23, 0x11	; 17
    27aa:	8f e9       	ldi	r24, 0x9F	; 159
    27ac:	91 e0       	ldi	r25, 0x01	; 1
    27ae:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
	delay(1000);
    27b2:	68 ee       	ldi	r22, 0xE8	; 232
    27b4:	73 e0       	ldi	r23, 0x03	; 3
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
	
	TWBR = 12;                      //Set the I2C clock speed to 400kHz.
    27be:	8c e0       	ldi	r24, 0x0C	; 12
    27c0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	
	#if F_CPU == 16000000L          //If the clock speed is 16MHz include the next code line when compiling
	clockspeed_ok = 1;            //Set clockspeed_ok to 1
    27c4:	c1 e0       	ldi	r28, 0x01	; 1
    27c6:	c0 93 95 01 	sts	0x0195, r28	; 0x800195 <clockspeed_ok>
	#endif                          //End of if statement

	if(TWBR == 12 && clockspeed_ok){
    27ca:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    27ce:	8c 30       	cpi	r24, 0x0C	; 12
    27d0:	11 f0       	breq	.+4      	; 0x27d6 <loop+0x70>
    27d2:	0c 94 8a 1c 	jmp	0x3914	; 0x3914 <loop+0x11ae>
		Serial.println(F("I2C clock speed is correctly set to 400kHz."));
    27d6:	68 ed       	ldi	r22, 0xD8	; 216
    27d8:	70 e1       	ldi	r23, 0x10	; 16
    27da:	8f e9       	ldi	r24, 0x9F	; 159
    27dc:	91 e0       	ldi	r25, 0x01	; 1
    27de:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
	else{
		Serial.println(F("I2C clock speed is not set to 400kHz. (ERROR 8)"));
		error = 1;
	}
	
	if(error == 0){
    27e2:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <error>
    27e6:	81 11       	cpse	r24, r1
    27e8:	2c c0       	rjmp	.+88     	; 0x2842 <loop+0xdc>
		Serial.println(F(""));
    27ea:	67 ea       	ldi	r22, 0xA7	; 167
    27ec:	70 e1       	ldi	r23, 0x10	; 16
    27ee:	8f e9       	ldi	r24, 0x9F	; 159
    27f0:	91 e0       	ldi	r25, 0x01	; 1
    27f2:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("==================================================="));
    27f6:	63 e7       	ldi	r22, 0x73	; 115
    27f8:	70 e1       	ldi	r23, 0x10	; 16
    27fa:	8f e9       	ldi	r24, 0x9F	; 159
    27fc:	91 e0       	ldi	r25, 0x01	; 1
    27fe:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Transmitter setup"));
    2802:	61 e6       	ldi	r22, 0x61	; 97
    2804:	70 e1       	ldi	r23, 0x10	; 16
    2806:	8f e9       	ldi	r24, 0x9F	; 159
    2808:	91 e0       	ldi	r25, 0x01	; 1
    280a:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("==================================================="));
    280e:	6d e2       	ldi	r22, 0x2D	; 45
    2810:	70 e1       	ldi	r23, 0x10	; 16
    2812:	8f e9       	ldi	r24, 0x9F	; 159
    2814:	91 e0       	ldi	r25, 0x01	; 1
    2816:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		delay(1000);
    281a:	68 ee       	ldi	r22, 0xE8	; 232
    281c:	73 e0       	ldi	r23, 0x03	; 3
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
		Serial.print(F("Checking for valid receiver signals."));
    2826:	68 e0       	ldi	r22, 0x08	; 8
    2828:	70 e1       	ldi	r23, 0x10	; 16
    282a:	8f e9       	ldi	r24, 0x9F	; 159
    282c:	91 e0       	ldi	r25, 0x01	; 1
    282e:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		//Wait 10 seconds until all receiver inputs are valid
		wait_for_receiver();
    2832:	0e 94 2d 0b 	call	0x165a	; 0x165a <_Z17wait_for_receiverv>
		Serial.println(F(""));
    2836:	67 e0       	ldi	r22, 0x07	; 7
    2838:	70 e1       	ldi	r23, 0x10	; 16
    283a:	8f e9       	ldi	r24, 0x9F	; 159
    283c:	91 e0       	ldi	r25, 0x01	; 1
    283e:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
	}
	//Quit the program in case of an error
	if(error == 0){
    2842:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <error>
    2846:	81 11       	cpse	r24, r1
    2848:	a1 c0       	rjmp	.+322    	; 0x298c <loop+0x226>
		delay(2000);
    284a:	60 ed       	ldi	r22, 0xD0	; 208
    284c:	77 e0       	ldi	r23, 0x07	; 7
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
		Serial.println(F("Place all sticks and subtrims in the center position within 10 seconds."));
    2856:	6f eb       	ldi	r22, 0xBF	; 191
    2858:	7f e0       	ldi	r23, 0x0F	; 15
    285a:	8f e9       	ldi	r24, 0x9F	; 159
    285c:	91 e0       	ldi	r25, 0x01	; 1
    285e:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		for(int i = 9;i > 0;i--){
    2862:	c9 e0       	ldi	r28, 0x09	; 9
    2864:	d0 e0       	ldi	r29, 0x00	; 0
			delay(1000);
    2866:	68 ee       	ldi	r22, 0xE8	; 232
    2868:	73 e0       	ldi	r23, 0x03	; 3
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
			Serial.print(i);
    2872:	4a e0       	ldi	r20, 0x0A	; 10
    2874:	50 e0       	ldi	r21, 0x00	; 0
    2876:	be 01       	movw	r22, r28
    2878:	8f e9       	ldi	r24, 0x9F	; 159
    287a:	91 e0       	ldi	r25, 0x01	; 1
    287c:	0e 94 c0 21 	call	0x4380	; 0x4380 <_ZN5Print5printEii>
			Serial.print(" ");
    2880:	67 e0       	ldi	r22, 0x07	; 7
    2882:	71 e0       	ldi	r23, 0x01	; 1
    2884:	8f e9       	ldi	r24, 0x9F	; 159
    2886:	91 e0       	ldi	r25, 0x01	; 1
    2888:	0e 94 d7 20 	call	0x41ae	; 0x41ae <_ZN5Print5printEPKc>
	}
	//Quit the program in case of an error
	if(error == 0){
		delay(2000);
		Serial.println(F("Place all sticks and subtrims in the center position within 10 seconds."));
		for(int i = 9;i > 0;i--){
    288c:	21 97       	sbiw	r28, 0x01	; 1
    288e:	59 f7       	brne	.-42     	; 0x2866 <loop+0x100>
			delay(1000);
			Serial.print(i);
			Serial.print(" ");
		}
		Serial.println(" ");
    2890:	67 e0       	ldi	r22, 0x07	; 7
    2892:	71 e0       	ldi	r23, 0x01	; 1
    2894:	8f e9       	ldi	r24, 0x9F	; 159
    2896:	91 e0       	ldi	r25, 0x01	; 1
    2898:	0e 94 13 21 	call	0x4226	; 0x4226 <_ZN5Print7printlnEPKc>
		//Store the central stick positions
		center_channel_1 = receiver_input_channel_1;
    289c:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <receiver_input_channel_1>
    28a0:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <receiver_input_channel_1+0x1>
    28a4:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <center_channel_1+0x1>
    28a8:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <center_channel_1>
		center_channel_2 = receiver_input_channel_2;
    28ac:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <receiver_input_channel_2>
    28b0:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <receiver_input_channel_2+0x1>
    28b4:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <center_channel_2+0x1>
    28b8:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <center_channel_2>
		center_channel_3 = receiver_input_channel_3;
    28bc:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <receiver_input_channel_3>
    28c0:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <receiver_input_channel_3+0x1>
    28c4:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <center_channel_3+0x1>
    28c8:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <center_channel_3>
		center_channel_4 = receiver_input_channel_4;
    28cc:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <receiver_input_channel_4>
    28d0:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <receiver_input_channel_4+0x1>
    28d4:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <center_channel_4+0x1>
    28d8:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <center_channel_4>
		Serial.println(F(""));
    28dc:	6e eb       	ldi	r22, 0xBE	; 190
    28de:	7f e0       	ldi	r23, 0x0F	; 15
    28e0:	8f e9       	ldi	r24, 0x9F	; 159
    28e2:	91 e0       	ldi	r25, 0x01	; 1
    28e4:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Center positions stored."));
    28e8:	65 ea       	ldi	r22, 0xA5	; 165
    28ea:	7f e0       	ldi	r23, 0x0F	; 15
    28ec:	8f e9       	ldi	r24, 0x9F	; 159
    28ee:	91 e0       	ldi	r25, 0x01	; 1
    28f0:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.print(F("Digital input 08 = "));
    28f4:	61 e9       	ldi	r22, 0x91	; 145
    28f6:	7f e0       	ldi	r23, 0x0F	; 15
    28f8:	8f e9       	ldi	r24, 0x9F	; 159
    28fa:	91 e0       	ldi	r25, 0x01	; 1
    28fc:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(receiver_input_channel_1);
    2900:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <receiver_input_channel_1>
    2904:	70 91 8b 01 	lds	r23, 0x018B	; 0x80018b <receiver_input_channel_1+0x1>
    2908:	4a e0       	ldi	r20, 0x0A	; 10
    290a:	50 e0       	ldi	r21, 0x00	; 0
    290c:	8f e9       	ldi	r24, 0x9F	; 159
    290e:	91 e0       	ldi	r25, 0x01	; 1
    2910:	0e 94 c8 21 	call	0x4390	; 0x4390 <_ZN5Print7printlnEii>
		Serial.print(F("Digital input 09 = "));
    2914:	6d e7       	ldi	r22, 0x7D	; 125
    2916:	7f e0       	ldi	r23, 0x0F	; 15
    2918:	8f e9       	ldi	r24, 0x9F	; 159
    291a:	91 e0       	ldi	r25, 0x01	; 1
    291c:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(receiver_input_channel_2);
    2920:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <receiver_input_channel_2>
    2924:	70 91 89 01 	lds	r23, 0x0189	; 0x800189 <receiver_input_channel_2+0x1>
    2928:	4a e0       	ldi	r20, 0x0A	; 10
    292a:	50 e0       	ldi	r21, 0x00	; 0
    292c:	8f e9       	ldi	r24, 0x9F	; 159
    292e:	91 e0       	ldi	r25, 0x01	; 1
    2930:	0e 94 c8 21 	call	0x4390	; 0x4390 <_ZN5Print7printlnEii>
		Serial.print(F("Digital input 10 = "));
    2934:	69 e6       	ldi	r22, 0x69	; 105
    2936:	7f e0       	ldi	r23, 0x0F	; 15
    2938:	8f e9       	ldi	r24, 0x9F	; 159
    293a:	91 e0       	ldi	r25, 0x01	; 1
    293c:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(receiver_input_channel_3);
    2940:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <receiver_input_channel_3>
    2944:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <receiver_input_channel_3+0x1>
    2948:	4a e0       	ldi	r20, 0x0A	; 10
    294a:	50 e0       	ldi	r21, 0x00	; 0
    294c:	8f e9       	ldi	r24, 0x9F	; 159
    294e:	91 e0       	ldi	r25, 0x01	; 1
    2950:	0e 94 c8 21 	call	0x4390	; 0x4390 <_ZN5Print7printlnEii>
		Serial.print(F("Digital input 11 = "));
    2954:	65 e5       	ldi	r22, 0x55	; 85
    2956:	7f e0       	ldi	r23, 0x0F	; 15
    2958:	8f e9       	ldi	r24, 0x9F	; 159
    295a:	91 e0       	ldi	r25, 0x01	; 1
    295c:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(receiver_input_channel_4);
    2960:	60 91 84 01 	lds	r22, 0x0184	; 0x800184 <receiver_input_channel_4>
    2964:	70 91 85 01 	lds	r23, 0x0185	; 0x800185 <receiver_input_channel_4+0x1>
    2968:	4a e0       	ldi	r20, 0x0A	; 10
    296a:	50 e0       	ldi	r21, 0x00	; 0
    296c:	8f e9       	ldi	r24, 0x9F	; 159
    296e:	91 e0       	ldi	r25, 0x01	; 1
    2970:	0e 94 c8 21 	call	0x4390	; 0x4390 <_ZN5Print7printlnEii>
		Serial.println(F(""));
    2974:	64 e5       	ldi	r22, 0x54	; 84
    2976:	7f e0       	ldi	r23, 0x0F	; 15
    2978:	8f e9       	ldi	r24, 0x9F	; 159
    297a:	91 e0       	ldi	r25, 0x01	; 1
    297c:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F(""));
    2980:	63 e5       	ldi	r22, 0x53	; 83
    2982:	7f e0       	ldi	r23, 0x0F	; 15
    2984:	8f e9       	ldi	r24, 0x9F	; 159
    2986:	91 e0       	ldi	r25, 0x01	; 1
    2988:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
	}
	if(error == 0){
    298c:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <error>
    2990:	81 11       	cpse	r24, r1
    2992:	60 c0       	rjmp	.+192    	; 0x2a54 <loop+0x2ee>
		Serial.println(F("Move the throttle stick to full throttle and back to center"));
    2994:	67 e1       	ldi	r22, 0x17	; 23
    2996:	7f e0       	ldi	r23, 0x0F	; 15
    2998:	8f e9       	ldi	r24, 0x9F	; 159
    299a:	91 e0       	ldi	r25, 0x01	; 1
    299c:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		//Check for throttle movement
		check_receiver_inputs(1);
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	0e 94 53 09 	call	0x12a6	; 0x12a6 <_Z21check_receiver_inputsh>
		Serial.print(F("Throttle is connected to digital input "));
    29a6:	6f ee       	ldi	r22, 0xEF	; 239
    29a8:	7e e0       	ldi	r23, 0x0E	; 14
    29aa:	8f e9       	ldi	r24, 0x9F	; 159
    29ac:	91 e0       	ldi	r25, 0x01	; 1
    29ae:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println((channel_3_assign & 0b00000111) + 7);
    29b2:	60 91 92 01 	lds	r22, 0x0192	; 0x800192 <channel_3_assign>
    29b6:	67 70       	andi	r22, 0x07	; 7
    29b8:	70 e0       	ldi	r23, 0x00	; 0
    29ba:	69 5f       	subi	r22, 0xF9	; 249
    29bc:	7f 4f       	sbci	r23, 0xFF	; 255
    29be:	4a e0       	ldi	r20, 0x0A	; 10
    29c0:	50 e0       	ldi	r21, 0x00	; 0
    29c2:	8f e9       	ldi	r24, 0x9F	; 159
    29c4:	91 e0       	ldi	r25, 0x01	; 1
    29c6:	0e 94 c8 21 	call	0x4390	; 0x4390 <_ZN5Print7printlnEii>
		if(channel_3_assign & 0b10000000)Serial.println(F("Channel inverted = yes"));
    29ca:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <channel_3_assign>
    29ce:	87 ff       	sbrs	r24, 7
    29d0:	03 c0       	rjmp	.+6      	; 0x29d8 <loop+0x272>
    29d2:	68 ed       	ldi	r22, 0xD8	; 216
    29d4:	7e e0       	ldi	r23, 0x0E	; 14
    29d6:	02 c0       	rjmp	.+4      	; 0x29dc <loop+0x276>
		else Serial.println(F("Channel inverted = no"));
    29d8:	62 ec       	ldi	r22, 0xC2	; 194
    29da:	7e e0       	ldi	r23, 0x0E	; 14
    29dc:	8f e9       	ldi	r24, 0x9F	; 159
    29de:	91 e0       	ldi	r25, 0x01	; 1
    29e0:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		wait_sticks_zero();
    29e4:	0e 94 33 0a 	call	0x1466	; 0x1466 <_Z16wait_sticks_zerov>
		
		Serial.println(F(""));
    29e8:	61 ec       	ldi	r22, 0xC1	; 193
    29ea:	7e e0       	ldi	r23, 0x0E	; 14
    29ec:	8f e9       	ldi	r24, 0x9F	; 159
    29ee:	91 e0       	ldi	r25, 0x01	; 1
    29f0:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F(""));
    29f4:	60 ec       	ldi	r22, 0xC0	; 192
    29f6:	7e e0       	ldi	r23, 0x0E	; 14
    29f8:	8f e9       	ldi	r24, 0x9F	; 159
    29fa:	91 e0       	ldi	r25, 0x01	; 1
    29fc:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Move the roll stick to simulate left wing up and back to center"));
    2a00:	60 e8       	ldi	r22, 0x80	; 128
    2a02:	7e e0       	ldi	r23, 0x0E	; 14
    2a04:	8f e9       	ldi	r24, 0x9F	; 159
    2a06:	91 e0       	ldi	r25, 0x01	; 1
    2a08:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		//Check for throttle movement
		check_receiver_inputs(2);
    2a0c:	82 e0       	ldi	r24, 0x02	; 2
    2a0e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <_Z21check_receiver_inputsh>
		Serial.print(F("Roll is connected to digital input "));
    2a12:	6c e5       	ldi	r22, 0x5C	; 92
    2a14:	7e e0       	ldi	r23, 0x0E	; 14
    2a16:	8f e9       	ldi	r24, 0x9F	; 159
    2a18:	91 e0       	ldi	r25, 0x01	; 1
    2a1a:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println((channel_1_assign & 0b00000111) + 7);
    2a1e:	60 91 94 01 	lds	r22, 0x0194	; 0x800194 <channel_1_assign>
    2a22:	67 70       	andi	r22, 0x07	; 7
    2a24:	70 e0       	ldi	r23, 0x00	; 0
    2a26:	69 5f       	subi	r22, 0xF9	; 249
    2a28:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2a:	4a e0       	ldi	r20, 0x0A	; 10
    2a2c:	50 e0       	ldi	r21, 0x00	; 0
    2a2e:	8f e9       	ldi	r24, 0x9F	; 159
    2a30:	91 e0       	ldi	r25, 0x01	; 1
    2a32:	0e 94 c8 21 	call	0x4390	; 0x4390 <_ZN5Print7printlnEii>
		if(channel_1_assign & 0b10000000)Serial.println(F("Channel inverted = yes"));
    2a36:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <channel_1_assign>
    2a3a:	87 ff       	sbrs	r24, 7
    2a3c:	03 c0       	rjmp	.+6      	; 0x2a44 <loop+0x2de>
    2a3e:	65 e4       	ldi	r22, 0x45	; 69
    2a40:	7e e0       	ldi	r23, 0x0E	; 14
    2a42:	02 c0       	rjmp	.+4      	; 0x2a48 <loop+0x2e2>
		else Serial.println(F("Channel inverted = no"));
    2a44:	6f e2       	ldi	r22, 0x2F	; 47
    2a46:	7e e0       	ldi	r23, 0x0E	; 14
    2a48:	8f e9       	ldi	r24, 0x9F	; 159
    2a4a:	91 e0       	ldi	r25, 0x01	; 1
    2a4c:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		wait_sticks_zero();
    2a50:	0e 94 33 0a 	call	0x1466	; 0x1466 <_Z16wait_sticks_zerov>
	}
	if(error == 0){
    2a54:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <error>
    2a58:	81 11       	cpse	r24, r1
    2a5a:	36 c0       	rjmp	.+108    	; 0x2ac8 <loop+0x362>
		Serial.println(F(""));
    2a5c:	6e e2       	ldi	r22, 0x2E	; 46
    2a5e:	7e e0       	ldi	r23, 0x0E	; 14
    2a60:	8f e9       	ldi	r24, 0x9F	; 159
    2a62:	91 e0       	ldi	r25, 0x01	; 1
    2a64:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F(""));
    2a68:	6d e2       	ldi	r22, 0x2D	; 45
    2a6a:	7e e0       	ldi	r23, 0x0E	; 14
    2a6c:	8f e9       	ldi	r24, 0x9F	; 159
    2a6e:	91 e0       	ldi	r25, 0x01	; 1
    2a70:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Move the pitch stick to simulate nose up and back to center"));
    2a74:	61 ef       	ldi	r22, 0xF1	; 241
    2a76:	7d e0       	ldi	r23, 0x0D	; 13
    2a78:	8f e9       	ldi	r24, 0x9F	; 159
    2a7a:	91 e0       	ldi	r25, 0x01	; 1
    2a7c:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		//Check for throttle movement
		check_receiver_inputs(3);
    2a80:	83 e0       	ldi	r24, 0x03	; 3
    2a82:	0e 94 53 09 	call	0x12a6	; 0x12a6 <_Z21check_receiver_inputsh>
		Serial.print(F("Pitch is connected to digital input "));
    2a86:	6c ec       	ldi	r22, 0xCC	; 204
    2a88:	7d e0       	ldi	r23, 0x0D	; 13
    2a8a:	8f e9       	ldi	r24, 0x9F	; 159
    2a8c:	91 e0       	ldi	r25, 0x01	; 1
    2a8e:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println((channel_2_assign & 0b00000111) + 7);
    2a92:	60 91 93 01 	lds	r22, 0x0193	; 0x800193 <channel_2_assign>
    2a96:	67 70       	andi	r22, 0x07	; 7
    2a98:	70 e0       	ldi	r23, 0x00	; 0
    2a9a:	69 5f       	subi	r22, 0xF9	; 249
    2a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a9e:	4a e0       	ldi	r20, 0x0A	; 10
    2aa0:	50 e0       	ldi	r21, 0x00	; 0
    2aa2:	8f e9       	ldi	r24, 0x9F	; 159
    2aa4:	91 e0       	ldi	r25, 0x01	; 1
    2aa6:	0e 94 c8 21 	call	0x4390	; 0x4390 <_ZN5Print7printlnEii>
		if(channel_2_assign & 0b10000000)Serial.println(F("Channel inverted = yes"));
    2aaa:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <channel_2_assign>
    2aae:	87 ff       	sbrs	r24, 7
    2ab0:	03 c0       	rjmp	.+6      	; 0x2ab8 <loop+0x352>
    2ab2:	65 eb       	ldi	r22, 0xB5	; 181
    2ab4:	7d e0       	ldi	r23, 0x0D	; 13
    2ab6:	02 c0       	rjmp	.+4      	; 0x2abc <loop+0x356>
		else Serial.println(F("Channel inverted = no"));
    2ab8:	6f e9       	ldi	r22, 0x9F	; 159
    2aba:	7d e0       	ldi	r23, 0x0D	; 13
    2abc:	8f e9       	ldi	r24, 0x9F	; 159
    2abe:	91 e0       	ldi	r25, 0x01	; 1
    2ac0:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		wait_sticks_zero();
    2ac4:	0e 94 33 0a 	call	0x1466	; 0x1466 <_Z16wait_sticks_zerov>
	}
	if(error == 0){
    2ac8:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <error>
    2acc:	81 11       	cpse	r24, r1
    2ace:	36 c0       	rjmp	.+108    	; 0x2b3c <loop+0x3d6>
		Serial.println(F(""));
    2ad0:	6e e9       	ldi	r22, 0x9E	; 158
    2ad2:	7d e0       	ldi	r23, 0x0D	; 13
    2ad4:	8f e9       	ldi	r24, 0x9F	; 159
    2ad6:	91 e0       	ldi	r25, 0x01	; 1
    2ad8:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F(""));
    2adc:	6d e9       	ldi	r22, 0x9D	; 157
    2ade:	7d e0       	ldi	r23, 0x0D	; 13
    2ae0:	8f e9       	ldi	r24, 0x9F	; 159
    2ae2:	91 e0       	ldi	r25, 0x01	; 1
    2ae4:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Move the yaw stick to simulate nose right and back to center"));
    2ae8:	60 e6       	ldi	r22, 0x60	; 96
    2aea:	7d e0       	ldi	r23, 0x0D	; 13
    2aec:	8f e9       	ldi	r24, 0x9F	; 159
    2aee:	91 e0       	ldi	r25, 0x01	; 1
    2af0:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		//Check for throttle movement
		check_receiver_inputs(4);
    2af4:	84 e0       	ldi	r24, 0x04	; 4
    2af6:	0e 94 53 09 	call	0x12a6	; 0x12a6 <_Z21check_receiver_inputsh>
		Serial.print(F("Yaw is connected to digital input "));
    2afa:	6d e3       	ldi	r22, 0x3D	; 61
    2afc:	7d e0       	ldi	r23, 0x0D	; 13
    2afe:	8f e9       	ldi	r24, 0x9F	; 159
    2b00:	91 e0       	ldi	r25, 0x01	; 1
    2b02:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println((channel_4_assign & 0b00000111) + 7);
    2b06:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <channel_4_assign>
    2b0a:	67 70       	andi	r22, 0x07	; 7
    2b0c:	70 e0       	ldi	r23, 0x00	; 0
    2b0e:	69 5f       	subi	r22, 0xF9	; 249
    2b10:	7f 4f       	sbci	r23, 0xFF	; 255
    2b12:	4a e0       	ldi	r20, 0x0A	; 10
    2b14:	50 e0       	ldi	r21, 0x00	; 0
    2b16:	8f e9       	ldi	r24, 0x9F	; 159
    2b18:	91 e0       	ldi	r25, 0x01	; 1
    2b1a:	0e 94 c8 21 	call	0x4390	; 0x4390 <_ZN5Print7printlnEii>
		if(channel_4_assign & 0b10000000)Serial.println(F("Channel inverted = yes"));
    2b1e:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <channel_4_assign>
    2b22:	87 ff       	sbrs	r24, 7
    2b24:	03 c0       	rjmp	.+6      	; 0x2b2c <loop+0x3c6>
    2b26:	66 e2       	ldi	r22, 0x26	; 38
    2b28:	7d e0       	ldi	r23, 0x0D	; 13
    2b2a:	02 c0       	rjmp	.+4      	; 0x2b30 <loop+0x3ca>
		else Serial.println(F("Channel inverted = no"));
    2b2c:	60 e1       	ldi	r22, 0x10	; 16
    2b2e:	7d e0       	ldi	r23, 0x0D	; 13
    2b30:	8f e9       	ldi	r24, 0x9F	; 159
    2b32:	91 e0       	ldi	r25, 0x01	; 1
    2b34:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		wait_sticks_zero();
    2b38:	0e 94 33 0a 	call	0x1466	; 0x1466 <_Z16wait_sticks_zerov>
	}
	if(error == 0){
    2b3c:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <error>
    2b40:	81 11       	cpse	r24, r1
    2b42:	f4 c0       	rjmp	.+488    	; 0x2d2c <loop+0x5c6>
		Serial.println(F(""));
    2b44:	6f e0       	ldi	r22, 0x0F	; 15
    2b46:	7d e0       	ldi	r23, 0x0D	; 13
    2b48:	8f e9       	ldi	r24, 0x9F	; 159
    2b4a:	91 e0       	ldi	r25, 0x01	; 1
    2b4c:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F(""));
    2b50:	6e e0       	ldi	r22, 0x0E	; 14
    2b52:	7d e0       	ldi	r23, 0x0D	; 13
    2b54:	8f e9       	ldi	r24, 0x9F	; 159
    2b56:	91 e0       	ldi	r25, 0x01	; 1
    2b58:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Gently move all the sticks simultaneously to their extends"));
    2b5c:	63 ed       	ldi	r22, 0xD3	; 211
    2b5e:	7c e0       	ldi	r23, 0x0C	; 12
    2b60:	8f e9       	ldi	r24, 0x9F	; 159
    2b62:	91 e0       	ldi	r25, 0x01	; 1
    2b64:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("When ready put the sticks back in their center positions"));
    2b68:	6a e9       	ldi	r22, 0x9A	; 154
    2b6a:	7c e0       	ldi	r23, 0x0C	; 12
    2b6c:	8f e9       	ldi	r24, 0x9F	; 159
    2b6e:	91 e0       	ldi	r25, 0x01	; 1
    2b70:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		//Register the min and max values of the receiver channels
		register_min_max();
    2b74:	0e 94 b8 0b 	call	0x1770	; 0x1770 <_Z16register_min_maxv>
		Serial.println(F(""));
    2b78:	69 e9       	ldi	r22, 0x99	; 153
    2b7a:	7c e0       	ldi	r23, 0x0C	; 12
    2b7c:	8f e9       	ldi	r24, 0x9F	; 159
    2b7e:	91 e0       	ldi	r25, 0x01	; 1
    2b80:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F(""));
    2b84:	68 e9       	ldi	r22, 0x98	; 152
    2b86:	7c e0       	ldi	r23, 0x0C	; 12
    2b88:	8f e9       	ldi	r24, 0x9F	; 159
    2b8a:	91 e0       	ldi	r25, 0x01	; 1
    2b8c:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("High, low and center values found during setup"));
    2b90:	69 e6       	ldi	r22, 0x69	; 105
    2b92:	7c e0       	ldi	r23, 0x0C	; 12
    2b94:	8f e9       	ldi	r24, 0x9F	; 159
    2b96:	91 e0       	ldi	r25, 0x01	; 1
    2b98:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.print(F("Digital input 08 values:"));
    2b9c:	60 e5       	ldi	r22, 0x50	; 80
    2b9e:	7c e0       	ldi	r23, 0x0C	; 12
    2ba0:	8f e9       	ldi	r24, 0x9F	; 159
    2ba2:	91 e0       	ldi	r25, 0x01	; 1
    2ba4:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(low_channel_1);
    2ba8:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <low_channel_1>
    2bac:	70 91 73 01 	lds	r23, 0x0173	; 0x800173 <low_channel_1+0x1>
    2bb0:	4a e0       	ldi	r20, 0x0A	; 10
    2bb2:	50 e0       	ldi	r21, 0x00	; 0
    2bb4:	8f e9       	ldi	r24, 0x9F	; 159
    2bb6:	91 e0       	ldi	r25, 0x01	; 1
    2bb8:	0e 94 c0 21 	call	0x4380	; 0x4380 <_ZN5Print5printEii>
		Serial.print(F(" - "));
    2bbc:	6c e4       	ldi	r22, 0x4C	; 76
    2bbe:	7c e0       	ldi	r23, 0x0C	; 12
    2bc0:	8f e9       	ldi	r24, 0x9F	; 159
    2bc2:	91 e0       	ldi	r25, 0x01	; 1
    2bc4:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(center_channel_1);
    2bc8:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <center_channel_1>
    2bcc:	70 91 83 01 	lds	r23, 0x0183	; 0x800183 <center_channel_1+0x1>
    2bd0:	4a e0       	ldi	r20, 0x0A	; 10
    2bd2:	50 e0       	ldi	r21, 0x00	; 0
    2bd4:	8f e9       	ldi	r24, 0x9F	; 159
    2bd6:	91 e0       	ldi	r25, 0x01	; 1
    2bd8:	0e 94 c0 21 	call	0x4380	; 0x4380 <_ZN5Print5printEii>
		Serial.print(F(" - "));
    2bdc:	68 e4       	ldi	r22, 0x48	; 72
    2bde:	7c e0       	ldi	r23, 0x0C	; 12
    2be0:	8f e9       	ldi	r24, 0x9F	; 159
    2be2:	91 e0       	ldi	r25, 0x01	; 1
    2be4:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(high_channel_1);
    2be8:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <high_channel_1>
    2bec:	70 91 7b 01 	lds	r23, 0x017B	; 0x80017b <high_channel_1+0x1>
    2bf0:	4a e0       	ldi	r20, 0x0A	; 10
    2bf2:	50 e0       	ldi	r21, 0x00	; 0
    2bf4:	8f e9       	ldi	r24, 0x9F	; 159
    2bf6:	91 e0       	ldi	r25, 0x01	; 1
    2bf8:	0e 94 c8 21 	call	0x4390	; 0x4390 <_ZN5Print7printlnEii>
		Serial.print(F("Digital input 09 values:"));
    2bfc:	6f e2       	ldi	r22, 0x2F	; 47
    2bfe:	7c e0       	ldi	r23, 0x0C	; 12
    2c00:	8f e9       	ldi	r24, 0x9F	; 159
    2c02:	91 e0       	ldi	r25, 0x01	; 1
    2c04:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(low_channel_2);
    2c08:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <low_channel_2>
    2c0c:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <low_channel_2+0x1>
    2c10:	4a e0       	ldi	r20, 0x0A	; 10
    2c12:	50 e0       	ldi	r21, 0x00	; 0
    2c14:	8f e9       	ldi	r24, 0x9F	; 159
    2c16:	91 e0       	ldi	r25, 0x01	; 1
    2c18:	0e 94 c0 21 	call	0x4380	; 0x4380 <_ZN5Print5printEii>
		Serial.print(F(" - "));
    2c1c:	6b e2       	ldi	r22, 0x2B	; 43
    2c1e:	7c e0       	ldi	r23, 0x0C	; 12
    2c20:	8f e9       	ldi	r24, 0x9F	; 159
    2c22:	91 e0       	ldi	r25, 0x01	; 1
    2c24:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(center_channel_2);
    2c28:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <center_channel_2>
    2c2c:	70 91 81 01 	lds	r23, 0x0181	; 0x800181 <center_channel_2+0x1>
    2c30:	4a e0       	ldi	r20, 0x0A	; 10
    2c32:	50 e0       	ldi	r21, 0x00	; 0
    2c34:	8f e9       	ldi	r24, 0x9F	; 159
    2c36:	91 e0       	ldi	r25, 0x01	; 1
    2c38:	0e 94 c0 21 	call	0x4380	; 0x4380 <_ZN5Print5printEii>
		Serial.print(F(" - "));
    2c3c:	67 e2       	ldi	r22, 0x27	; 39
    2c3e:	7c e0       	ldi	r23, 0x0C	; 12
    2c40:	8f e9       	ldi	r24, 0x9F	; 159
    2c42:	91 e0       	ldi	r25, 0x01	; 1
    2c44:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(high_channel_2);
    2c48:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <high_channel_2>
    2c4c:	70 91 79 01 	lds	r23, 0x0179	; 0x800179 <high_channel_2+0x1>
    2c50:	4a e0       	ldi	r20, 0x0A	; 10
    2c52:	50 e0       	ldi	r21, 0x00	; 0
    2c54:	8f e9       	ldi	r24, 0x9F	; 159
    2c56:	91 e0       	ldi	r25, 0x01	; 1
    2c58:	0e 94 c8 21 	call	0x4390	; 0x4390 <_ZN5Print7printlnEii>
		Serial.print(F("Digital input 10 values:"));
    2c5c:	6e e0       	ldi	r22, 0x0E	; 14
    2c5e:	7c e0       	ldi	r23, 0x0C	; 12
    2c60:	8f e9       	ldi	r24, 0x9F	; 159
    2c62:	91 e0       	ldi	r25, 0x01	; 1
    2c64:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(low_channel_3);
    2c68:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <low_channel_3>
    2c6c:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <low_channel_3+0x1>
    2c70:	4a e0       	ldi	r20, 0x0A	; 10
    2c72:	50 e0       	ldi	r21, 0x00	; 0
    2c74:	8f e9       	ldi	r24, 0x9F	; 159
    2c76:	91 e0       	ldi	r25, 0x01	; 1
    2c78:	0e 94 c0 21 	call	0x4380	; 0x4380 <_ZN5Print5printEii>
		Serial.print(F(" - "));
    2c7c:	6a e0       	ldi	r22, 0x0A	; 10
    2c7e:	7c e0       	ldi	r23, 0x0C	; 12
    2c80:	8f e9       	ldi	r24, 0x9F	; 159
    2c82:	91 e0       	ldi	r25, 0x01	; 1
    2c84:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(center_channel_3);
    2c88:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <center_channel_3>
    2c8c:	70 91 7f 01 	lds	r23, 0x017F	; 0x80017f <center_channel_3+0x1>
    2c90:	4a e0       	ldi	r20, 0x0A	; 10
    2c92:	50 e0       	ldi	r21, 0x00	; 0
    2c94:	8f e9       	ldi	r24, 0x9F	; 159
    2c96:	91 e0       	ldi	r25, 0x01	; 1
    2c98:	0e 94 c0 21 	call	0x4380	; 0x4380 <_ZN5Print5printEii>
		Serial.print(F(" - "));
    2c9c:	66 e0       	ldi	r22, 0x06	; 6
    2c9e:	7c e0       	ldi	r23, 0x0C	; 12
    2ca0:	8f e9       	ldi	r24, 0x9F	; 159
    2ca2:	91 e0       	ldi	r25, 0x01	; 1
    2ca4:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(high_channel_3);
    2ca8:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <high_channel_3>
    2cac:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <high_channel_3+0x1>
    2cb0:	4a e0       	ldi	r20, 0x0A	; 10
    2cb2:	50 e0       	ldi	r21, 0x00	; 0
    2cb4:	8f e9       	ldi	r24, 0x9F	; 159
    2cb6:	91 e0       	ldi	r25, 0x01	; 1
    2cb8:	0e 94 c8 21 	call	0x4390	; 0x4390 <_ZN5Print7printlnEii>
		Serial.print(F("Digital input 11 values:"));
    2cbc:	6d ee       	ldi	r22, 0xED	; 237
    2cbe:	7b e0       	ldi	r23, 0x0B	; 11
    2cc0:	8f e9       	ldi	r24, 0x9F	; 159
    2cc2:	91 e0       	ldi	r25, 0x01	; 1
    2cc4:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(low_channel_4);
    2cc8:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <low_channel_4>
    2ccc:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <low_channel_4+0x1>
    2cd0:	4a e0       	ldi	r20, 0x0A	; 10
    2cd2:	50 e0       	ldi	r21, 0x00	; 0
    2cd4:	8f e9       	ldi	r24, 0x9F	; 159
    2cd6:	91 e0       	ldi	r25, 0x01	; 1
    2cd8:	0e 94 c0 21 	call	0x4380	; 0x4380 <_ZN5Print5printEii>
		Serial.print(F(" - "));
    2cdc:	69 ee       	ldi	r22, 0xE9	; 233
    2cde:	7b e0       	ldi	r23, 0x0B	; 11
    2ce0:	8f e9       	ldi	r24, 0x9F	; 159
    2ce2:	91 e0       	ldi	r25, 0x01	; 1
    2ce4:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(center_channel_4);
    2ce8:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <center_channel_4>
    2cec:	70 91 7d 01 	lds	r23, 0x017D	; 0x80017d <center_channel_4+0x1>
    2cf0:	4a e0       	ldi	r20, 0x0A	; 10
    2cf2:	50 e0       	ldi	r21, 0x00	; 0
    2cf4:	8f e9       	ldi	r24, 0x9F	; 159
    2cf6:	91 e0       	ldi	r25, 0x01	; 1
    2cf8:	0e 94 c0 21 	call	0x4380	; 0x4380 <_ZN5Print5printEii>
		Serial.print(F(" - "));
    2cfc:	65 ee       	ldi	r22, 0xE5	; 229
    2cfe:	7b e0       	ldi	r23, 0x0B	; 11
    2d00:	8f e9       	ldi	r24, 0x9F	; 159
    2d02:	91 e0       	ldi	r25, 0x01	; 1
    2d04:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(high_channel_4);
    2d08:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <high_channel_4>
    2d0c:	70 91 75 01 	lds	r23, 0x0175	; 0x800175 <high_channel_4+0x1>
    2d10:	4a e0       	ldi	r20, 0x0A	; 10
    2d12:	50 e0       	ldi	r21, 0x00	; 0
    2d14:	8f e9       	ldi	r24, 0x9F	; 159
    2d16:	91 e0       	ldi	r25, 0x01	; 1
    2d18:	0e 94 c8 21 	call	0x4390	; 0x4390 <_ZN5Print7printlnEii>
		Serial.println(F("Move stick 'nose up' and back to center to continue"));
    2d1c:	61 eb       	ldi	r22, 0xB1	; 177
    2d1e:	7b e0       	ldi	r23, 0x0B	; 11
    2d20:	8f e9       	ldi	r24, 0x9F	; 159
    2d22:	91 e0       	ldi	r25, 0x01	; 1
    2d24:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		check_to_continue();
    2d28:	0e 94 a1 0a 	call	0x1542	; 0x1542 <_Z17check_to_continuev>
	}
	
	if(error == 0){
    2d2c:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <error>
    2d30:	81 11       	cpse	r24, r1
    2d32:	60 c0       	rjmp	.+192    	; 0x2df4 <loop+0x68e>
		//What gyro is connected
		Serial.println(F(""));
    2d34:	60 eb       	ldi	r22, 0xB0	; 176
    2d36:	7b e0       	ldi	r23, 0x0B	; 11
    2d38:	8f e9       	ldi	r24, 0x9F	; 159
    2d3a:	91 e0       	ldi	r25, 0x01	; 1
    2d3c:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("==================================================="));
    2d40:	6c e7       	ldi	r22, 0x7C	; 124
    2d42:	7b e0       	ldi	r23, 0x0B	; 11
    2d44:	8f e9       	ldi	r24, 0x9F	; 159
    2d46:	91 e0       	ldi	r25, 0x01	; 1
    2d48:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Gyro search"));
    2d4c:	60 e7       	ldi	r22, 0x70	; 112
    2d4e:	7b e0       	ldi	r23, 0x0B	; 11
    2d50:	8f e9       	ldi	r24, 0x9F	; 159
    2d52:	91 e0       	ldi	r25, 0x01	; 1
    2d54:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("==================================================="));
    2d58:	6c e3       	ldi	r22, 0x3C	; 60
    2d5a:	7b e0       	ldi	r23, 0x0B	; 11
    2d5c:	8f e9       	ldi	r24, 0x9F	; 159
    2d5e:	91 e0       	ldi	r25, 0x01	; 1
    2d60:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		delay(2000);
    2d64:	60 ed       	ldi	r22, 0xD0	; 208
    2d66:	77 e0       	ldi	r23, 0x07	; 7
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
		
		Serial.println(F("Searching for MPU-9255 on address 0x68/104"));
    2d70:	61 e1       	ldi	r22, 0x11	; 17
    2d72:	7b e0       	ldi	r23, 0x0B	; 11
    2d74:	8f e9       	ldi	r24, 0x9F	; 159
    2d76:	91 e0       	ldi	r25, 0x01	; 1
    2d78:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		delay(1000);
    2d7c:	68 ee       	ldi	r22, 0xE8	; 232
    2d7e:	73 e0       	ldi	r23, 0x03	; 3
    2d80:	80 e0       	ldi	r24, 0x00	; 0
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
		if(search_gyro(MPU9250_ADDRESS, WHO_AM_I_MPU9250) == 0x73){
    2d88:	65 e7       	ldi	r22, 0x75	; 117
    2d8a:	70 e0       	ldi	r23, 0x00	; 0
    2d8c:	88 e6       	ldi	r24, 0x68	; 104
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <_Z11search_gyroii>
    2d94:	83 37       	cpi	r24, 0x73	; 115
    2d96:	31 f4       	brne	.+12     	; 0x2da4 <loop+0x63e>
			Serial.println(F("MPU-9255 found on address 0x68"));
    2d98:	62 ef       	ldi	r22, 0xF2	; 242
    2d9a:	7a e0       	ldi	r23, 0x0A	; 10
    2d9c:	8f e9       	ldi	r24, 0x9F	; 159
    2d9e:	91 e0       	ldi	r25, 0x01	; 1
    2da0:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
			type = 1;
			gyro_address = MPU9250_ADDRESS;
		}
		error = 0;
    2da4:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <error>
		type = 1;
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <type>
		gyro_address = MPU9250_ADDRESS;
    2dae:	88 e6       	ldi	r24, 0x68	; 104
    2db0:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <gyro_address>
			Serial.println(F("No gyro device found!!! (ERROR 3)"));
			error = 1;
		}
		
		else{
			delay(3000);
    2db4:	68 eb       	ldi	r22, 0xB8	; 184
    2db6:	7b e0       	ldi	r23, 0x0B	; 11
    2db8:	80 e0       	ldi	r24, 0x00	; 0
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
			Serial.println(F(""));
    2dc0:	61 ef       	ldi	r22, 0xF1	; 241
    2dc2:	7a e0       	ldi	r23, 0x0A	; 10
    2dc4:	8f e9       	ldi	r24, 0x9F	; 159
    2dc6:	91 e0       	ldi	r25, 0x01	; 1
    2dc8:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.println(F("==================================================="));
    2dcc:	6d eb       	ldi	r22, 0xBD	; 189
    2dce:	7a e0       	ldi	r23, 0x0A	; 10
    2dd0:	8f e9       	ldi	r24, 0x9F	; 159
    2dd2:	91 e0       	ldi	r25, 0x01	; 1
    2dd4:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.println(F("Gyro register settings"));
    2dd8:	66 ea       	ldi	r22, 0xA6	; 166
    2dda:	7a e0       	ldi	r23, 0x0A	; 10
    2ddc:	8f e9       	ldi	r24, 0x9F	; 159
    2dde:	91 e0       	ldi	r25, 0x01	; 1
    2de0:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.println(F("==================================================="));
    2de4:	62 e7       	ldi	r22, 0x72	; 114
    2de6:	7a e0       	ldi	r23, 0x0A	; 10
    2de8:	8f e9       	ldi	r24, 0x9F	; 159
    2dea:	91 e0       	ldi	r25, 0x01	; 1
    2dec:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
			start_gyro(); //Setup the gyro for further use
    2df0:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <_Z10start_gyrov>
		}
	}
	
	//If the gyro is found we can setup the correct gyro axes.
	if(error == 0){
    2df4:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <error>
    2df8:	81 11       	cpse	r24, r1
    2dfa:	50 c2       	rjmp	.+1184   	; 0x329c <loop+0xb36>
		delay(3000);
    2dfc:	68 eb       	ldi	r22, 0xB8	; 184
    2dfe:	7b e0       	ldi	r23, 0x0B	; 11
    2e00:	80 e0       	ldi	r24, 0x00	; 0
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
		Serial.println(F(""));
    2e08:	61 e7       	ldi	r22, 0x71	; 113
    2e0a:	7a e0       	ldi	r23, 0x0A	; 10
    2e0c:	8f e9       	ldi	r24, 0x9F	; 159
    2e0e:	91 e0       	ldi	r25, 0x01	; 1
    2e10:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("==================================================="));
    2e14:	6d e3       	ldi	r22, 0x3D	; 61
    2e16:	7a e0       	ldi	r23, 0x0A	; 10
    2e18:	8f e9       	ldi	r24, 0x9F	; 159
    2e1a:	91 e0       	ldi	r25, 0x01	; 1
    2e1c:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Gyro calibration"));
    2e20:	6c e2       	ldi	r22, 0x2C	; 44
    2e22:	7a e0       	ldi	r23, 0x0A	; 10
    2e24:	8f e9       	ldi	r24, 0x9F	; 159
    2e26:	91 e0       	ldi	r25, 0x01	; 1
    2e28:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("==================================================="));
    2e2c:	68 ef       	ldi	r22, 0xF8	; 248
    2e2e:	79 e0       	ldi	r23, 0x09	; 9
    2e30:	8f e9       	ldi	r24, 0x9F	; 159
    2e32:	91 e0       	ldi	r25, 0x01	; 1
    2e34:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Don't move the quadcopter!! Calibration starts in 3 seconds"));
    2e38:	6c eb       	ldi	r22, 0xBC	; 188
    2e3a:	79 e0       	ldi	r23, 0x09	; 9
    2e3c:	8f e9       	ldi	r24, 0x9F	; 159
    2e3e:	91 e0       	ldi	r25, 0x01	; 1
    2e40:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		delay(3000);
    2e44:	68 eb       	ldi	r22, 0xB8	; 184
    2e46:	7b e0       	ldi	r23, 0x0B	; 11
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
		Serial.println(F("Calibrating the gyro, this will take +/- 8 seconds"));
    2e50:	69 e8       	ldi	r22, 0x89	; 137
    2e52:	79 e0       	ldi	r23, 0x09	; 9
    2e54:	8f e9       	ldi	r24, 0x9F	; 159
    2e56:	91 e0       	ldi	r25, 0x01	; 1
    2e58:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.print(F("Please wait"));
    2e5c:	6d e7       	ldi	r22, 0x7D	; 125
    2e5e:	79 e0       	ldi	r23, 0x09	; 9
    2e60:	8f e9       	ldi	r24, 0x9F	; 159
    2e62:	91 e0       	ldi	r25, 0x01	; 1
    2e64:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
		for (cal_int = 0; cal_int < 2000 ; cal_int ++){              //Take 2000 readings for calibration.
    2e68:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <cal_int+0x1>
    2e6c:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <cal_int>
			if(cal_int % 100 == 0)Serial.print(F("."));                //Print dot to indicate calibration.
    2e70:	c4 e6       	ldi	r28, 0x64	; 100
    2e72:	d0 e0       	ldi	r29, 0x00	; 0
		Serial.println(F("Don't move the quadcopter!! Calibration starts in 3 seconds"));
		delay(3000);
		Serial.println(F("Calibrating the gyro, this will take +/- 8 seconds"));
		Serial.print(F("Please wait"));
		//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
		for (cal_int = 0; cal_int < 2000 ; cal_int ++){              //Take 2000 readings for calibration.
    2e74:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <cal_int>
    2e78:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <cal_int+0x1>
    2e7c:	80 3d       	cpi	r24, 0xD0	; 208
    2e7e:	27 e0       	ldi	r18, 0x07	; 7
    2e80:	92 07       	cpc	r25, r18
    2e82:	0c f0       	brlt	.+2      	; 0x2e86 <loop+0x720>
    2e84:	6b c0       	rjmp	.+214    	; 0x2f5c <loop+0x7f6>
			if(cal_int % 100 == 0)Serial.print(F("."));                //Print dot to indicate calibration.
    2e86:	be 01       	movw	r22, r28
    2e88:	0e 94 4d 28 	call	0x509a	; 0x509a <__divmodhi4>
    2e8c:	89 2b       	or	r24, r25
    2e8e:	31 f4       	brne	.+12     	; 0x2e9c <loop+0x736>
    2e90:	6b e7       	ldi	r22, 0x7B	; 123
    2e92:	79 e0       	ldi	r23, 0x09	; 9
    2e94:	8f e9       	ldi	r24, 0x9F	; 159
    2e96:	91 e0       	ldi	r25, 0x01	; 1
    2e98:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
			gyro_signalen();                                           //Read the gyro output.
    2e9c:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <_Z13gyro_signalenv>
			gyro_roll_cal += gyro_roll;                                //Ad roll value to gyro_roll_cal.
    2ea0:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <gyro_roll>
    2ea4:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <gyro_roll+0x1>
    2ea8:	40 91 4a 01 	lds	r20, 0x014A	; 0x80014a <gyro_roll+0x2>
    2eac:	50 91 4b 01 	lds	r21, 0x014B	; 0x80014b <gyro_roll+0x3>
    2eb0:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <gyro_roll_cal>
    2eb4:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <gyro_roll_cal+0x1>
    2eb8:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <gyro_roll_cal+0x2>
    2ebc:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <gyro_roll_cal+0x3>
    2ec0:	0e 94 95 1c 	call	0x392a	; 0x392a <__addsf3>
    2ec4:	60 93 40 01 	sts	0x0140, r22	; 0x800140 <gyro_roll_cal>
    2ec8:	70 93 41 01 	sts	0x0141, r23	; 0x800141 <gyro_roll_cal+0x1>
    2ecc:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <gyro_roll_cal+0x2>
    2ed0:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <gyro_roll_cal+0x3>
			gyro_pitch_cal += gyro_pitch;                              //Ad pitch value to gyro_pitch_cal.
    2ed4:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <gyro_pitch>
    2ed8:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <gyro_pitch+0x1>
    2edc:	40 91 4e 01 	lds	r20, 0x014E	; 0x80014e <gyro_pitch+0x2>
    2ee0:	50 91 4f 01 	lds	r21, 0x014F	; 0x80014f <gyro_pitch+0x3>
    2ee4:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <gyro_pitch_cal>
    2ee8:	70 91 3d 01 	lds	r23, 0x013D	; 0x80013d <gyro_pitch_cal+0x1>
    2eec:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <gyro_pitch_cal+0x2>
    2ef0:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <gyro_pitch_cal+0x3>
    2ef4:	0e 94 95 1c 	call	0x392a	; 0x392a <__addsf3>
    2ef8:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <gyro_pitch_cal>
    2efc:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <gyro_pitch_cal+0x1>
    2f00:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <gyro_pitch_cal+0x2>
    2f04:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <gyro_pitch_cal+0x3>
			gyro_yaw_cal += gyro_yaw;                                  //Ad yaw value to gyro_yaw_cal.
    2f08:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <gyro_yaw>
    2f0c:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <gyro_yaw+0x1>
    2f10:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <gyro_yaw+0x2>
    2f14:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <gyro_yaw+0x3>
    2f18:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <__data_end>
    2f1c:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <__data_end+0x1>
    2f20:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end+0x2>
    2f24:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <__data_end+0x3>
    2f28:	0e 94 95 1c 	call	0x392a	; 0x392a <__addsf3>
    2f2c:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <__data_end>
    2f30:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <__data_end+0x1>
    2f34:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end+0x2>
    2f38:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x3>
			delay(4);                                                  //Wait 3 milliseconds before the next loop.
    2f3c:	64 e0       	ldi	r22, 0x04	; 4
    2f3e:	70 e0       	ldi	r23, 0x00	; 0
    2f40:	80 e0       	ldi	r24, 0x00	; 0
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
		Serial.println(F("Don't move the quadcopter!! Calibration starts in 3 seconds"));
		delay(3000);
		Serial.println(F("Calibrating the gyro, this will take +/- 8 seconds"));
		Serial.print(F("Please wait"));
		//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
		for (cal_int = 0; cal_int < 2000 ; cal_int ++){              //Take 2000 readings for calibration.
    2f48:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <cal_int>
    2f4c:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <cal_int+0x1>
    2f50:	01 96       	adiw	r24, 0x01	; 1
    2f52:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <cal_int+0x1>
    2f56:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <cal_int>
    2f5a:	8c cf       	rjmp	.-232    	; 0x2e74 <loop+0x70e>
			gyro_pitch_cal += gyro_pitch;                              //Ad pitch value to gyro_pitch_cal.
			gyro_yaw_cal += gyro_yaw;                                  //Ad yaw value to gyro_yaw_cal.
			delay(4);                                                  //Wait 3 milliseconds before the next loop.
		}
		//Now that we have 2000 measures, we need to devide by 2000 to get the average gyro offset.
		gyro_roll_cal /= 2000;                                       //Divide the roll total by 2000.
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	4a ef       	ldi	r20, 0xFA	; 250
    2f62:	54 e4       	ldi	r21, 0x44	; 68
    2f64:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <gyro_roll_cal>
    2f68:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <gyro_roll_cal+0x1>
    2f6c:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <gyro_roll_cal+0x2>
    2f70:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <gyro_roll_cal+0x3>
    2f74:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <__divsf3>
    2f78:	60 93 40 01 	sts	0x0140, r22	; 0x800140 <gyro_roll_cal>
    2f7c:	70 93 41 01 	sts	0x0141, r23	; 0x800141 <gyro_roll_cal+0x1>
    2f80:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <gyro_roll_cal+0x2>
    2f84:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <gyro_roll_cal+0x3>
		gyro_pitch_cal /= 2000;                                      //Divide the pitch total by 2000.
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	4a ef       	ldi	r20, 0xFA	; 250
    2f8e:	54 e4       	ldi	r21, 0x44	; 68
    2f90:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <gyro_pitch_cal>
    2f94:	70 91 3d 01 	lds	r23, 0x013D	; 0x80013d <gyro_pitch_cal+0x1>
    2f98:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <gyro_pitch_cal+0x2>
    2f9c:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <gyro_pitch_cal+0x3>
    2fa0:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <__divsf3>
    2fa4:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <gyro_pitch_cal>
    2fa8:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <gyro_pitch_cal+0x1>
    2fac:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <gyro_pitch_cal+0x2>
    2fb0:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <gyro_pitch_cal+0x3>
		gyro_yaw_cal /= 2000;                                        //Divide the yaw total by 2000.
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	4a ef       	ldi	r20, 0xFA	; 250
    2fba:	54 e4       	ldi	r21, 0x44	; 68
    2fbc:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <__data_end>
    2fc0:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <__data_end+0x1>
    2fc4:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end+0x2>
    2fc8:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <__data_end+0x3>
    2fcc:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <__divsf3>
    2fd0:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <__data_end>
    2fd4:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <__data_end+0x1>
    2fd8:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end+0x2>
    2fdc:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x3>
		
		//Show the calibration results
		Serial.println(F(""));
    2fe0:	6a e7       	ldi	r22, 0x7A	; 122
    2fe2:	79 e0       	ldi	r23, 0x09	; 9
    2fe4:	8f e9       	ldi	r24, 0x9F	; 159
    2fe6:	91 e0       	ldi	r25, 0x01	; 1
    2fe8:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.print(F("Axis 1 offset="));
    2fec:	6b e6       	ldi	r22, 0x6B	; 107
    2fee:	79 e0       	ldi	r23, 0x09	; 9
    2ff0:	8f e9       	ldi	r24, 0x9F	; 159
    2ff2:	91 e0       	ldi	r25, 0x01	; 1
    2ff4:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(gyro_roll_cal);
    2ff8:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <gyro_roll_cal>
    2ffc:	50 91 41 01 	lds	r21, 0x0141	; 0x800141 <gyro_roll_cal+0x1>
    3000:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <gyro_roll_cal+0x2>
    3004:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <gyro_roll_cal+0x3>
    3008:	22 e0       	ldi	r18, 0x02	; 2
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	8f e9       	ldi	r24, 0x9F	; 159
    300e:	91 e0       	ldi	r25, 0x01	; 1
    3010:	0e 94 16 23 	call	0x462c	; 0x462c <_ZN5Print7printlnEdi>
		Serial.print(F("Axis 2 offset="));
    3014:	6c e5       	ldi	r22, 0x5C	; 92
    3016:	79 e0       	ldi	r23, 0x09	; 9
    3018:	8f e9       	ldi	r24, 0x9F	; 159
    301a:	91 e0       	ldi	r25, 0x01	; 1
    301c:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(gyro_pitch_cal);
    3020:	40 91 3c 01 	lds	r20, 0x013C	; 0x80013c <gyro_pitch_cal>
    3024:	50 91 3d 01 	lds	r21, 0x013D	; 0x80013d <gyro_pitch_cal+0x1>
    3028:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <gyro_pitch_cal+0x2>
    302c:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <gyro_pitch_cal+0x3>
    3030:	22 e0       	ldi	r18, 0x02	; 2
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	8f e9       	ldi	r24, 0x9F	; 159
    3036:	91 e0       	ldi	r25, 0x01	; 1
    3038:	0e 94 16 23 	call	0x462c	; 0x462c <_ZN5Print7printlnEdi>
		Serial.print(F("Axis 3 offset="));
    303c:	6d e4       	ldi	r22, 0x4D	; 77
    303e:	79 e0       	ldi	r23, 0x09	; 9
    3040:	8f e9       	ldi	r24, 0x9F	; 159
    3042:	91 e0       	ldi	r25, 0x01	; 1
    3044:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(gyro_yaw_cal);
    3048:	40 91 38 01 	lds	r20, 0x0138	; 0x800138 <__data_end>
    304c:	50 91 39 01 	lds	r21, 0x0139	; 0x800139 <__data_end+0x1>
    3050:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <__data_end+0x2>
    3054:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <__data_end+0x3>
    3058:	22 e0       	ldi	r18, 0x02	; 2
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	8f e9       	ldi	r24, 0x9F	; 159
    305e:	91 e0       	ldi	r25, 0x01	; 1
    3060:	0e 94 16 23 	call	0x462c	; 0x462c <_ZN5Print7printlnEdi>
		Serial.println(F(""));
    3064:	6c e4       	ldi	r22, 0x4C	; 76
    3066:	79 e0       	ldi	r23, 0x09	; 9
    3068:	8f e9       	ldi	r24, 0x9F	; 159
    306a:	91 e0       	ldi	r25, 0x01	; 1
    306c:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		
		Serial.println(F("==================================================="));
    3070:	68 e1       	ldi	r22, 0x18	; 24
    3072:	79 e0       	ldi	r23, 0x09	; 9
    3074:	8f e9       	ldi	r24, 0x9F	; 159
    3076:	91 e0       	ldi	r25, 0x01	; 1
    3078:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Gyro axes configuration"));
    307c:	60 e0       	ldi	r22, 0x00	; 0
    307e:	79 e0       	ldi	r23, 0x09	; 9
    3080:	8f e9       	ldi	r24, 0x9F	; 159
    3082:	91 e0       	ldi	r25, 0x01	; 1
    3084:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("==================================================="));
    3088:	6c ec       	ldi	r22, 0xCC	; 204
    308a:	78 e0       	ldi	r23, 0x08	; 8
    308c:	8f e9       	ldi	r24, 0x9F	; 159
    308e:	91 e0       	ldi	r25, 0x01	; 1
    3090:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		
		//Detect the left wing up movement
		Serial.println(F("Lift the left side of the quadcopter to a 45 degree angle within 10 seconds"));
    3094:	60 e8       	ldi	r22, 0x80	; 128
    3096:	78 e0       	ldi	r23, 0x08	; 8
    3098:	8f e9       	ldi	r24, 0x9F	; 159
    309a:	91 e0       	ldi	r25, 0x01	; 1
    309c:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		//Check axis movement
		check_gyro_axes(1);
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	0e 94 62 11 	call	0x22c4	; 0x22c4 <_Z15check_gyro_axesh>
		if(error == 0){
    30a6:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <error>
    30aa:	81 11       	cpse	r24, r1
    30ac:	46 c0       	rjmp	.+140    	; 0x313a <loop+0x9d4>
			Serial.println(F("OK!"));
    30ae:	6c e7       	ldi	r22, 0x7C	; 124
    30b0:	78 e0       	ldi	r23, 0x08	; 8
    30b2:	8f e9       	ldi	r24, 0x9F	; 159
    30b4:	91 e0       	ldi	r25, 0x01	; 1
    30b6:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.print(F("Angle detection = "));
    30ba:	69 e6       	ldi	r22, 0x69	; 105
    30bc:	78 e0       	ldi	r23, 0x08	; 8
    30be:	8f e9       	ldi	r24, 0x9F	; 159
    30c0:	91 e0       	ldi	r25, 0x01	; 1
    30c2:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
			Serial.println(roll_axis & 0b00000011);
    30c6:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <roll_axis>
    30ca:	63 70       	andi	r22, 0x03	; 3
    30cc:	70 e0       	ldi	r23, 0x00	; 0
    30ce:	4a e0       	ldi	r20, 0x0A	; 10
    30d0:	50 e0       	ldi	r21, 0x00	; 0
    30d2:	8f e9       	ldi	r24, 0x9F	; 159
    30d4:	91 e0       	ldi	r25, 0x01	; 1
    30d6:	0e 94 c8 21 	call	0x4390	; 0x4390 <_ZN5Print7printlnEii>
			if(roll_axis & 0b10000000)Serial.println(F("Axis inverted = yes"));
    30da:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <roll_axis>
    30de:	87 ff       	sbrs	r24, 7
    30e0:	03 c0       	rjmp	.+6      	; 0x30e8 <loop+0x982>
    30e2:	65 e5       	ldi	r22, 0x55	; 85
    30e4:	78 e0       	ldi	r23, 0x08	; 8
    30e6:	02 c0       	rjmp	.+4      	; 0x30ec <loop+0x986>
			else Serial.println(F("Axis inverted = no"));
    30e8:	62 e4       	ldi	r22, 0x42	; 66
    30ea:	78 e0       	ldi	r23, 0x08	; 8
    30ec:	8f e9       	ldi	r24, 0x9F	; 159
    30ee:	91 e0       	ldi	r25, 0x01	; 1
    30f0:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.println(F("Put the quadcopter back in its original position"));
    30f4:	61 e1       	ldi	r22, 0x11	; 17
    30f6:	78 e0       	ldi	r23, 0x08	; 8
    30f8:	8f e9       	ldi	r24, 0x9F	; 159
    30fa:	91 e0       	ldi	r25, 0x01	; 1
    30fc:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.println(F("Move stick 'nose up' and back to center to continue"));
    3100:	6d ed       	ldi	r22, 0xDD	; 221
    3102:	77 e0       	ldi	r23, 0x07	; 7
    3104:	8f e9       	ldi	r24, 0x9F	; 159
    3106:	91 e0       	ldi	r25, 0x01	; 1
    3108:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
			check_to_continue();
    310c:	0e 94 a1 0a 	call	0x1542	; 0x1542 <_Z17check_to_continuev>

			//Detect the nose up movement
			Serial.println(F(""));
    3110:	6c ed       	ldi	r22, 0xDC	; 220
    3112:	77 e0       	ldi	r23, 0x07	; 7
    3114:	8f e9       	ldi	r24, 0x9F	; 159
    3116:	91 e0       	ldi	r25, 0x01	; 1
    3118:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.println(F(""));
    311c:	6b ed       	ldi	r22, 0xDB	; 219
    311e:	77 e0       	ldi	r23, 0x07	; 7
    3120:	8f e9       	ldi	r24, 0x9F	; 159
    3122:	91 e0       	ldi	r25, 0x01	; 1
    3124:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.println(F("Lift the nose of the quadcopter to a 45 degree angle within 10 seconds"));
    3128:	64 e9       	ldi	r22, 0x94	; 148
    312a:	77 e0       	ldi	r23, 0x07	; 7
    312c:	8f e9       	ldi	r24, 0x9F	; 159
    312e:	91 e0       	ldi	r25, 0x01	; 1
    3130:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
			//Check axis movement
			check_gyro_axes(2);
    3134:	82 e0       	ldi	r24, 0x02	; 2
    3136:	0e 94 62 11 	call	0x22c4	; 0x22c4 <_Z15check_gyro_axesh>
		}
		if(error == 0){
    313a:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <error>
    313e:	81 11       	cpse	r24, r1
    3140:	46 c0       	rjmp	.+140    	; 0x31ce <loop+0xa68>
			Serial.println(F("OK!"));
    3142:	60 e9       	ldi	r22, 0x90	; 144
    3144:	77 e0       	ldi	r23, 0x07	; 7
    3146:	8f e9       	ldi	r24, 0x9F	; 159
    3148:	91 e0       	ldi	r25, 0x01	; 1
    314a:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.print(F("Angle detection = "));
    314e:	6d e7       	ldi	r22, 0x7D	; 125
    3150:	77 e0       	ldi	r23, 0x07	; 7
    3152:	8f e9       	ldi	r24, 0x9F	; 159
    3154:	91 e0       	ldi	r25, 0x01	; 1
    3156:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
			Serial.println(pitch_axis & 0b00000011);
    315a:	60 91 8f 01 	lds	r22, 0x018F	; 0x80018f <pitch_axis>
    315e:	63 70       	andi	r22, 0x03	; 3
    3160:	70 e0       	ldi	r23, 0x00	; 0
    3162:	4a e0       	ldi	r20, 0x0A	; 10
    3164:	50 e0       	ldi	r21, 0x00	; 0
    3166:	8f e9       	ldi	r24, 0x9F	; 159
    3168:	91 e0       	ldi	r25, 0x01	; 1
    316a:	0e 94 c8 21 	call	0x4390	; 0x4390 <_ZN5Print7printlnEii>
			if(pitch_axis & 0b10000000)Serial.println(F("Axis inverted = yes"));
    316e:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <pitch_axis>
    3172:	87 ff       	sbrs	r24, 7
    3174:	03 c0       	rjmp	.+6      	; 0x317c <loop+0xa16>
    3176:	69 e6       	ldi	r22, 0x69	; 105
    3178:	77 e0       	ldi	r23, 0x07	; 7
    317a:	02 c0       	rjmp	.+4      	; 0x3180 <loop+0xa1a>
			else Serial.println(F("Axis inverted = no"));
    317c:	66 e5       	ldi	r22, 0x56	; 86
    317e:	77 e0       	ldi	r23, 0x07	; 7
    3180:	8f e9       	ldi	r24, 0x9F	; 159
    3182:	91 e0       	ldi	r25, 0x01	; 1
    3184:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.println(F("Put the quadcopter back in its original position"));
    3188:	65 e2       	ldi	r22, 0x25	; 37
    318a:	77 e0       	ldi	r23, 0x07	; 7
    318c:	8f e9       	ldi	r24, 0x9F	; 159
    318e:	91 e0       	ldi	r25, 0x01	; 1
    3190:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.println(F("Move stick 'nose up' and back to center to continue"));
    3194:	61 ef       	ldi	r22, 0xF1	; 241
    3196:	76 e0       	ldi	r23, 0x06	; 6
    3198:	8f e9       	ldi	r24, 0x9F	; 159
    319a:	91 e0       	ldi	r25, 0x01	; 1
    319c:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
			check_to_continue();
    31a0:	0e 94 a1 0a 	call	0x1542	; 0x1542 <_Z17check_to_continuev>
			
			//Detect the nose right movement
			Serial.println(F(""));
    31a4:	60 ef       	ldi	r22, 0xF0	; 240
    31a6:	76 e0       	ldi	r23, 0x06	; 6
    31a8:	8f e9       	ldi	r24, 0x9F	; 159
    31aa:	91 e0       	ldi	r25, 0x01	; 1
    31ac:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.println(F(""));
    31b0:	6f ee       	ldi	r22, 0xEF	; 239
    31b2:	76 e0       	ldi	r23, 0x06	; 6
    31b4:	8f e9       	ldi	r24, 0x9F	; 159
    31b6:	91 e0       	ldi	r25, 0x01	; 1
    31b8:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.println(F("Rotate the nose of the quadcopter 45 degree to the right within 10 seconds"));
    31bc:	64 ea       	ldi	r22, 0xA4	; 164
    31be:	76 e0       	ldi	r23, 0x06	; 6
    31c0:	8f e9       	ldi	r24, 0x9F	; 159
    31c2:	91 e0       	ldi	r25, 0x01	; 1
    31c4:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
			//Check axis movement
			check_gyro_axes(3);
    31c8:	83 e0       	ldi	r24, 0x03	; 3
    31ca:	0e 94 62 11 	call	0x22c4	; 0x22c4 <_Z15check_gyro_axesh>
		}
		if(error == 0){
    31ce:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <error>
    31d2:	81 11       	cpse	r24, r1
    31d4:	63 c0       	rjmp	.+198    	; 0x329c <loop+0xb36>
			Serial.println(F("OK!"));
    31d6:	60 ea       	ldi	r22, 0xA0	; 160
    31d8:	76 e0       	ldi	r23, 0x06	; 6
    31da:	8f e9       	ldi	r24, 0x9F	; 159
    31dc:	91 e0       	ldi	r25, 0x01	; 1
    31de:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.print(F("Angle detection = "));
    31e2:	6d e8       	ldi	r22, 0x8D	; 141
    31e4:	76 e0       	ldi	r23, 0x06	; 6
    31e6:	8f e9       	ldi	r24, 0x9F	; 159
    31e8:	91 e0       	ldi	r25, 0x01	; 1
    31ea:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
			Serial.println(yaw_axis & 0b00000011);
    31ee:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <yaw_axis>
    31f2:	63 70       	andi	r22, 0x03	; 3
    31f4:	70 e0       	ldi	r23, 0x00	; 0
    31f6:	4a e0       	ldi	r20, 0x0A	; 10
    31f8:	50 e0       	ldi	r21, 0x00	; 0
    31fa:	8f e9       	ldi	r24, 0x9F	; 159
    31fc:	91 e0       	ldi	r25, 0x01	; 1
    31fe:	0e 94 c8 21 	call	0x4390	; 0x4390 <_ZN5Print7printlnEii>
			if(yaw_axis & 0b10000000)Serial.println(F("Axis inverted = yes"));
    3202:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <yaw_axis>
    3206:	87 ff       	sbrs	r24, 7
    3208:	03 c0       	rjmp	.+6      	; 0x3210 <loop+0xaaa>
    320a:	69 e7       	ldi	r22, 0x79	; 121
    320c:	76 e0       	ldi	r23, 0x06	; 6
    320e:	02 c0       	rjmp	.+4      	; 0x3214 <loop+0xaae>
			else Serial.println(F("Axis inverted = no"));
    3210:	66 e6       	ldi	r22, 0x66	; 102
    3212:	76 e0       	ldi	r23, 0x06	; 6
    3214:	8f e9       	ldi	r24, 0x9F	; 159
    3216:	91 e0       	ldi	r25, 0x01	; 1
    3218:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.println(F("Put the quadcopter back in its original position"));
    321c:	65 e3       	ldi	r22, 0x35	; 53
    321e:	76 e0       	ldi	r23, 0x06	; 6
    3220:	8f e9       	ldi	r24, 0x9F	; 159
    3222:	91 e0       	ldi	r25, 0x01	; 1
    3224:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.println(F("Move stick 'nose up' and back to center to continue"));
    3228:	61 e0       	ldi	r22, 0x01	; 1
    322a:	76 e0       	ldi	r23, 0x06	; 6
    322c:	8f e9       	ldi	r24, 0x9F	; 159
    322e:	91 e0       	ldi	r25, 0x01	; 1
    3230:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
			check_to_continue();
    3234:	0e 94 a1 0a 	call	0x1542	; 0x1542 <_Z17check_to_continuev>
		}
	}
	if(error == 0){
    3238:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <error>
    323c:	81 11       	cpse	r24, r1
    323e:	2e c0       	rjmp	.+92     	; 0x329c <loop+0xb36>
		Serial.println(F(""));
    3240:	60 e0       	ldi	r22, 0x00	; 0
    3242:	76 e0       	ldi	r23, 0x06	; 6
    3244:	8f e9       	ldi	r24, 0x9F	; 159
    3246:	91 e0       	ldi	r25, 0x01	; 1
    3248:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("==================================================="));
    324c:	6c ec       	ldi	r22, 0xCC	; 204
    324e:	75 e0       	ldi	r23, 0x05	; 5
    3250:	8f e9       	ldi	r24, 0x9F	; 159
    3252:	91 e0       	ldi	r25, 0x01	; 1
    3254:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("LED test"));
    3258:	63 ec       	ldi	r22, 0xC3	; 195
    325a:	75 e0       	ldi	r23, 0x05	; 5
    325c:	8f e9       	ldi	r24, 0x9F	; 159
    325e:	91 e0       	ldi	r25, 0x01	; 1
    3260:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("==================================================="));
    3264:	6f e8       	ldi	r22, 0x8F	; 143
    3266:	75 e0       	ldi	r23, 0x05	; 5
    3268:	8f e9       	ldi	r24, 0x9F	; 159
    326a:	91 e0       	ldi	r25, 0x01	; 1
    326c:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		digitalWrite(LED_STATUS_PIN, HIGH);
    3270:	61 e0       	ldi	r22, 0x01	; 1
    3272:	8d e0       	ldi	r24, 0x0D	; 13
    3274:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <digitalWrite>
		Serial.println(F("The LED should now be lit"));
    3278:	65 e7       	ldi	r22, 0x75	; 117
    327a:	75 e0       	ldi	r23, 0x05	; 5
    327c:	8f e9       	ldi	r24, 0x9F	; 159
    327e:	91 e0       	ldi	r25, 0x01	; 1
    3280:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Move stick 'nose up' and back to center to continue"));
    3284:	61 e4       	ldi	r22, 0x41	; 65
    3286:	75 e0       	ldi	r23, 0x05	; 5
    3288:	8f e9       	ldi	r24, 0x9F	; 159
    328a:	91 e0       	ldi	r25, 0x01	; 1
    328c:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		check_to_continue();
    3290:	0e 94 a1 0a 	call	0x1542	; 0x1542 <_Z17check_to_continuev>
		digitalWrite(LED_STATUS_PIN, LOW);
    3294:	60 e0       	ldi	r22, 0x00	; 0
    3296:	8d e0       	ldi	r24, 0x0D	; 13
    3298:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <digitalWrite>
	}
	
	Serial.println(F(""));
    329c:	60 e4       	ldi	r22, 0x40	; 64
    329e:	75 e0       	ldi	r23, 0x05	; 5
    32a0:	8f e9       	ldi	r24, 0x9F	; 159
    32a2:	91 e0       	ldi	r25, 0x01	; 1
    32a4:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	if(error == 0){
    32a8:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <error>
    32ac:	81 11       	cpse	r24, r1
    32ae:	54 c0       	rjmp	.+168    	; 0x3358 <loop+0xbf2>
		Serial.println(F("==================================================="));
    32b0:	6c e0       	ldi	r22, 0x0C	; 12
    32b2:	75 e0       	ldi	r23, 0x05	; 5
    32b4:	8f e9       	ldi	r24, 0x9F	; 159
    32b6:	91 e0       	ldi	r25, 0x01	; 1
    32b8:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Final setup check"));
    32bc:	6a ef       	ldi	r22, 0xFA	; 250
    32be:	74 e0       	ldi	r23, 0x04	; 4
    32c0:	8f e9       	ldi	r24, 0x9F	; 159
    32c2:	91 e0       	ldi	r25, 0x01	; 1
    32c4:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("==================================================="));
    32c8:	66 ec       	ldi	r22, 0xC6	; 198
    32ca:	74 e0       	ldi	r23, 0x04	; 4
    32cc:	8f e9       	ldi	r24, 0x9F	; 159
    32ce:	91 e0       	ldi	r25, 0x01	; 1
    32d0:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		delay(1000);
    32d4:	68 ee       	ldi	r22, 0xE8	; 232
    32d6:	73 e0       	ldi	r23, 0x03	; 3
    32d8:	80 e0       	ldi	r24, 0x00	; 0
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
		if(receiver_check_byte == 0b00001111){
    32e0:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <receiver_check_byte>
    32e4:	8f 30       	cpi	r24, 0x0F	; 15
    32e6:	39 f4       	brne	.+14     	; 0x32f6 <loop+0xb90>
			Serial.println(F("Receiver channels ok"));
    32e8:	61 eb       	ldi	r22, 0xB1	; 177
    32ea:	74 e0       	ldi	r23, 0x04	; 4
    32ec:	8f e9       	ldi	r24, 0x9F	; 159
    32ee:	91 e0       	ldi	r25, 0x01	; 1
    32f0:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
    32f4:	17 c0       	rjmp	.+46     	; 0x3324 <loop+0xbbe>
		}
		else{
			Serial.println(F("Receiver channel verification failed!!! (ERROR 6)"));
    32f6:	6f e7       	ldi	r22, 0x7F	; 127
    32f8:	74 e0       	ldi	r23, 0x04	; 4
    32fa:	8f e9       	ldi	r24, 0x9F	; 159
    32fc:	91 e0       	ldi	r25, 0x01	; 1
    32fe:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.print("Inputs: ");
    3302:	60 e0       	ldi	r22, 0x00	; 0
    3304:	71 e0       	ldi	r23, 0x01	; 1
    3306:	8f e9       	ldi	r24, 0x9F	; 159
    3308:	91 e0       	ldi	r25, 0x01	; 1
    330a:	0e 94 d7 20 	call	0x41ae	; 0x41ae <_ZN5Print5printEPKc>
			Serial.println(receiver_check_byte);
    330e:	4a e0       	ldi	r20, 0x0A	; 10
    3310:	50 e0       	ldi	r21, 0x00	; 0
    3312:	60 91 8d 01 	lds	r22, 0x018D	; 0x80018d <receiver_check_byte>
    3316:	8f e9       	ldi	r24, 0x9F	; 159
    3318:	91 e0       	ldi	r25, 0x01	; 1
    331a:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <_ZN5Print7printlnEhi>
			error = 1;
    331e:	81 e0       	ldi	r24, 0x01	; 1
    3320:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		}
		delay(1000);
    3324:	68 ee       	ldi	r22, 0xE8	; 232
    3326:	73 e0       	ldi	r23, 0x03	; 3
    3328:	80 e0       	ldi	r24, 0x00	; 0
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
		if(gyro_check_byte == 0b00000111){
    3330:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <gyro_check_byte>
    3334:	87 30       	cpi	r24, 0x07	; 7
    3336:	39 f4       	brne	.+14     	; 0x3346 <loop+0xbe0>
			Serial.println(F("Gyro axes ok"));
    3338:	62 e7       	ldi	r22, 0x72	; 114
    333a:	74 e0       	ldi	r23, 0x04	; 4
    333c:	8f e9       	ldi	r24, 0x9F	; 159
    333e:	91 e0       	ldi	r25, 0x01	; 1
    3340:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3344:	09 c0       	rjmp	.+18     	; 0x3358 <loop+0xbf2>
		}
		else{
			Serial.println(F("Gyro exes verification failed!!! (ERROR 7)"));
    3346:	67 e4       	ldi	r22, 0x47	; 71
    3348:	74 e0       	ldi	r23, 0x04	; 4
    334a:	8f e9       	ldi	r24, 0x9F	; 159
    334c:	91 e0       	ldi	r25, 0x01	; 1
    334e:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
			error = 1;
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		}
	}
	
	if(error == 0){
    3358:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <error>
    335c:	81 11       	cpse	r24, r1
    335e:	b6 c2       	rjmp	.+1388   	; 0x38cc <loop+0x1166>
		//If all is good, store the information in the EEPROM
		Serial.println(F(""));
    3360:	66 e4       	ldi	r22, 0x46	; 70
    3362:	74 e0       	ldi	r23, 0x04	; 4
    3364:	8f e9       	ldi	r24, 0x9F	; 159
    3366:	91 e0       	ldi	r25, 0x01	; 1
    3368:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("==================================================="));
    336c:	62 e1       	ldi	r22, 0x12	; 18
    336e:	74 e0       	ldi	r23, 0x04	; 4
    3370:	8f e9       	ldi	r24, 0x9F	; 159
    3372:	91 e0       	ldi	r25, 0x01	; 1
    3374:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Storing EEPROM information"));
    3378:	67 ef       	ldi	r22, 0xF7	; 247
    337a:	73 e0       	ldi	r23, 0x03	; 3
    337c:	8f e9       	ldi	r24, 0x9F	; 159
    337e:	91 e0       	ldi	r25, 0x01	; 1
    3380:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("==================================================="));
    3384:	63 ec       	ldi	r22, 0xC3	; 195
    3386:	73 e0       	ldi	r23, 0x03	; 3
    3388:	8f e9       	ldi	r24, 0x9F	; 159
    338a:	91 e0       	ldi	r25, 0x01	; 1
    338c:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Writing EEPROM"));
    3390:	64 eb       	ldi	r22, 0xB4	; 180
    3392:	73 e0       	ldi	r23, 0x03	; 3
    3394:	8f e9       	ldi	r24, 0x9F	; 159
    3396:	91 e0       	ldi	r25, 0x01	; 1
    3398:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		delay(1000);
    339c:	68 ee       	ldi	r22, 0xE8	; 232
    339e:	73 e0       	ldi	r23, 0x03	; 3
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
		Serial.println(F("Done!"));
    33a8:	6e ea       	ldi	r22, 0xAE	; 174
    33aa:	73 e0       	ldi	r23, 0x03	; 3
    33ac:	8f e9       	ldi	r24, 0x9F	; 159
    33ae:	91 e0       	ldi	r25, 0x01	; 1
    33b0:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		EEPROM.write(0, center_channel_1 & 0b11111111);
    33b4:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <center_channel_1>
    33b8:	80 e0       	ldi	r24, 0x00	; 0
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(1, center_channel_1 >> 8);
    33c0:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <center_channel_1+0x1>
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(2, center_channel_2 & 0b11111111);
    33cc:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <center_channel_2>
    33d0:	82 e0       	ldi	r24, 0x02	; 2
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(3, center_channel_2 >> 8);
    33d8:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <center_channel_2+0x1>
    33dc:	83 e0       	ldi	r24, 0x03	; 3
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(4, center_channel_3 & 0b11111111);
    33e4:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <center_channel_3>
    33e8:	84 e0       	ldi	r24, 0x04	; 4
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(5, center_channel_3 >> 8);
    33f0:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <center_channel_3+0x1>
    33f4:	85 e0       	ldi	r24, 0x05	; 5
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(6, center_channel_4 & 0b11111111);
    33fc:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <center_channel_4>
    3400:	86 e0       	ldi	r24, 0x06	; 6
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(7, center_channel_4 >> 8);
    3408:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <center_channel_4+0x1>
    340c:	87 e0       	ldi	r24, 0x07	; 7
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(8, high_channel_1 & 0b11111111);
    3414:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <high_channel_1>
    3418:	88 e0       	ldi	r24, 0x08	; 8
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(9, high_channel_1 >> 8);
    3420:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <high_channel_1+0x1>
    3424:	89 e0       	ldi	r24, 0x09	; 9
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(10, high_channel_2 & 0b11111111);
    342c:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <high_channel_2>
    3430:	8a e0       	ldi	r24, 0x0A	; 10
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(11, high_channel_2 >> 8);
    3438:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <high_channel_2+0x1>
    343c:	8b e0       	ldi	r24, 0x0B	; 11
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(12, high_channel_3 & 0b11111111);
    3444:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <high_channel_3>
    3448:	8c e0       	ldi	r24, 0x0C	; 12
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(13, high_channel_3 >> 8);
    3450:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <high_channel_3+0x1>
    3454:	8d e0       	ldi	r24, 0x0D	; 13
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(14, high_channel_4 & 0b11111111);
    345c:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <high_channel_4>
    3460:	8e e0       	ldi	r24, 0x0E	; 14
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(15, high_channel_4 >> 8);
    3468:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <high_channel_4+0x1>
    346c:	8f e0       	ldi	r24, 0x0F	; 15
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(16, low_channel_1 & 0b11111111);
    3474:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <low_channel_1>
    3478:	80 e1       	ldi	r24, 0x10	; 16
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(17, low_channel_1 >> 8);
    3480:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <low_channel_1+0x1>
    3484:	81 e1       	ldi	r24, 0x11	; 17
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(18, low_channel_2 & 0b11111111);
    348c:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <low_channel_2>
    3490:	82 e1       	ldi	r24, 0x12	; 18
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(19, low_channel_2 >> 8);
    3498:	60 91 71 01 	lds	r22, 0x0171	; 0x800171 <low_channel_2+0x1>
    349c:	83 e1       	ldi	r24, 0x13	; 19
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(20, low_channel_3 & 0b11111111);
    34a4:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <low_channel_3>
    34a8:	84 e1       	ldi	r24, 0x14	; 20
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(21, low_channel_3 >> 8);
    34b0:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <low_channel_3+0x1>
    34b4:	85 e1       	ldi	r24, 0x15	; 21
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(22, low_channel_4 & 0b11111111);
    34bc:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <low_channel_4>
    34c0:	86 e1       	ldi	r24, 0x16	; 22
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(23, low_channel_4 >> 8);
    34c8:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <low_channel_4+0x1>
    34cc:	87 e1       	ldi	r24, 0x17	; 23
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(24, channel_1_assign);
    34d4:	60 91 94 01 	lds	r22, 0x0194	; 0x800194 <channel_1_assign>
    34d8:	88 e1       	ldi	r24, 0x18	; 24
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(25, channel_2_assign);
    34e0:	60 91 93 01 	lds	r22, 0x0193	; 0x800193 <channel_2_assign>
    34e4:	89 e1       	ldi	r24, 0x19	; 25
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(26, channel_3_assign);
    34ec:	60 91 92 01 	lds	r22, 0x0192	; 0x800192 <channel_3_assign>
    34f0:	8a e1       	ldi	r24, 0x1A	; 26
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(27, channel_4_assign);
    34f8:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <channel_4_assign>
    34fc:	8b e1       	ldi	r24, 0x1B	; 27
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(28, roll_axis);
    3504:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <roll_axis>
    3508:	8c e1       	ldi	r24, 0x1C	; 28
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(29, pitch_axis);
    3510:	60 91 8f 01 	lds	r22, 0x018F	; 0x80018f <pitch_axis>
    3514:	8d e1       	ldi	r24, 0x1D	; 29
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(30, yaw_axis);
    351c:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <yaw_axis>
    3520:	8e e1       	ldi	r24, 0x1E	; 30
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(31, type);
    3528:	60 91 98 01 	lds	r22, 0x0198	; 0x800198 <type>
    352c:	8f e1       	ldi	r24, 0x1F	; 31
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(32, gyro_address);
    3534:	60 91 97 01 	lds	r22, 0x0197	; 0x800197 <gyro_address>
    3538:	80 e2       	ldi	r24, 0x20	; 32
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		//Write the EEPROM signature
		EEPROM.write(33, 'J');
    3540:	6a e4       	ldi	r22, 0x4A	; 74
    3542:	81 e2       	ldi	r24, 0x21	; 33
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(34, 'M');
    354a:	6d e4       	ldi	r22, 0x4D	; 77
    354c:	82 e2       	ldi	r24, 0x22	; 34
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(35, 'B');
    3554:	62 e4       	ldi	r22, 0x42	; 66
    3556:	83 e2       	ldi	r24, 0x23	; 35
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN11EEPROMClass5writeEih.isra.1>
		
		
		//To make sure evrything is ok, verify the EEPROM data.
		Serial.println(F("Verify EEPROM data"));
    355e:	6b e9       	ldi	r22, 0x9B	; 155
    3560:	73 e0       	ldi	r23, 0x03	; 3
    3562:	8f e9       	ldi	r24, 0x9F	; 159
    3564:	91 e0       	ldi	r25, 0x01	; 1
    3566:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		delay(1000);
    356a:	68 ee       	ldi	r22, 0xE8	; 232
    356c:	73 e0       	ldi	r23, 0x03	; 3
    356e:	80 e0       	ldi	r24, 0x00	; 0
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <delay>
		if(center_channel_1 != ((EEPROM.read(1) << 8) | EEPROM.read(0)))error = 1;
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    357e:	c8 2f       	mov	r28, r24
    3580:	80 e0       	ldi	r24, 0x00	; 0
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    3588:	2c 2f       	mov	r18, r28
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	32 2f       	mov	r19, r18
    358e:	22 27       	eor	r18, r18
    3590:	28 2b       	or	r18, r24
    3592:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <center_channel_1>
    3596:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <center_channel_1+0x1>
    359a:	28 17       	cp	r18, r24
    359c:	39 07       	cpc	r19, r25
    359e:	19 f0       	breq	.+6      	; 0x35a6 <loop+0xe40>
    35a0:	81 e0       	ldi	r24, 0x01	; 1
    35a2:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		if(center_channel_2 != ((EEPROM.read(3) << 8) | EEPROM.read(2)))error = 1;
    35a6:	83 e0       	ldi	r24, 0x03	; 3
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    35ae:	c8 2f       	mov	r28, r24
    35b0:	82 e0       	ldi	r24, 0x02	; 2
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    35b8:	2c 2f       	mov	r18, r28
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	32 2f       	mov	r19, r18
    35be:	22 27       	eor	r18, r18
    35c0:	28 2b       	or	r18, r24
    35c2:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <center_channel_2>
    35c6:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <center_channel_2+0x1>
    35ca:	28 17       	cp	r18, r24
    35cc:	39 07       	cpc	r19, r25
    35ce:	19 f0       	breq	.+6      	; 0x35d6 <loop+0xe70>
    35d0:	81 e0       	ldi	r24, 0x01	; 1
    35d2:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		if(center_channel_3 != ((EEPROM.read(5) << 8) | EEPROM.read(4)))error = 1;
    35d6:	85 e0       	ldi	r24, 0x05	; 5
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    35de:	c8 2f       	mov	r28, r24
    35e0:	84 e0       	ldi	r24, 0x04	; 4
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    35e8:	2c 2f       	mov	r18, r28
    35ea:	30 e0       	ldi	r19, 0x00	; 0
    35ec:	32 2f       	mov	r19, r18
    35ee:	22 27       	eor	r18, r18
    35f0:	28 2b       	or	r18, r24
    35f2:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <center_channel_3>
    35f6:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <center_channel_3+0x1>
    35fa:	28 17       	cp	r18, r24
    35fc:	39 07       	cpc	r19, r25
    35fe:	19 f0       	breq	.+6      	; 0x3606 <loop+0xea0>
    3600:	81 e0       	ldi	r24, 0x01	; 1
    3602:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		if(center_channel_4 != ((EEPROM.read(7) << 8) | EEPROM.read(6)))error = 1;
    3606:	87 e0       	ldi	r24, 0x07	; 7
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    360e:	c8 2f       	mov	r28, r24
    3610:	86 e0       	ldi	r24, 0x06	; 6
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    3618:	2c 2f       	mov	r18, r28
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	32 2f       	mov	r19, r18
    361e:	22 27       	eor	r18, r18
    3620:	28 2b       	or	r18, r24
    3622:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <center_channel_4>
    3626:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <center_channel_4+0x1>
    362a:	28 17       	cp	r18, r24
    362c:	39 07       	cpc	r19, r25
    362e:	19 f0       	breq	.+6      	; 0x3636 <loop+0xed0>
    3630:	81 e0       	ldi	r24, 0x01	; 1
    3632:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		
		if(high_channel_1 != ((EEPROM.read(9) << 8) | EEPROM.read(8)))error = 1;
    3636:	89 e0       	ldi	r24, 0x09	; 9
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    363e:	c8 2f       	mov	r28, r24
    3640:	88 e0       	ldi	r24, 0x08	; 8
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    3648:	2c 2f       	mov	r18, r28
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	32 2f       	mov	r19, r18
    364e:	22 27       	eor	r18, r18
    3650:	28 2b       	or	r18, r24
    3652:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <high_channel_1>
    3656:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <high_channel_1+0x1>
    365a:	28 17       	cp	r18, r24
    365c:	39 07       	cpc	r19, r25
    365e:	19 f0       	breq	.+6      	; 0x3666 <loop+0xf00>
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		if(high_channel_2 != ((EEPROM.read(11) << 8) | EEPROM.read(10)))error = 1;
    3666:	8b e0       	ldi	r24, 0x0B	; 11
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    366e:	c8 2f       	mov	r28, r24
    3670:	8a e0       	ldi	r24, 0x0A	; 10
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    3678:	2c 2f       	mov	r18, r28
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	32 2f       	mov	r19, r18
    367e:	22 27       	eor	r18, r18
    3680:	28 2b       	or	r18, r24
    3682:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <high_channel_2>
    3686:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <high_channel_2+0x1>
    368a:	28 17       	cp	r18, r24
    368c:	39 07       	cpc	r19, r25
    368e:	19 f0       	breq	.+6      	; 0x3696 <loop+0xf30>
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		if(high_channel_3 != ((EEPROM.read(13) << 8) | EEPROM.read(12)))error = 1;
    3696:	8d e0       	ldi	r24, 0x0D	; 13
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    369e:	c8 2f       	mov	r28, r24
    36a0:	8c e0       	ldi	r24, 0x0C	; 12
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    36a8:	2c 2f       	mov	r18, r28
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	32 2f       	mov	r19, r18
    36ae:	22 27       	eor	r18, r18
    36b0:	28 2b       	or	r18, r24
    36b2:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <high_channel_3>
    36b6:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <high_channel_3+0x1>
    36ba:	28 17       	cp	r18, r24
    36bc:	39 07       	cpc	r19, r25
    36be:	19 f0       	breq	.+6      	; 0x36c6 <loop+0xf60>
    36c0:	81 e0       	ldi	r24, 0x01	; 1
    36c2:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		if(high_channel_4 != ((EEPROM.read(15) << 8) | EEPROM.read(14)))error = 1;
    36c6:	8f e0       	ldi	r24, 0x0F	; 15
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    36ce:	c8 2f       	mov	r28, r24
    36d0:	8e e0       	ldi	r24, 0x0E	; 14
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    36d8:	2c 2f       	mov	r18, r28
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	32 2f       	mov	r19, r18
    36de:	22 27       	eor	r18, r18
    36e0:	28 2b       	or	r18, r24
    36e2:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <high_channel_4>
    36e6:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <high_channel_4+0x1>
    36ea:	28 17       	cp	r18, r24
    36ec:	39 07       	cpc	r19, r25
    36ee:	19 f0       	breq	.+6      	; 0x36f6 <loop+0xf90>
    36f0:	81 e0       	ldi	r24, 0x01	; 1
    36f2:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		
		if(low_channel_1 != ((EEPROM.read(17) << 8) | EEPROM.read(16)))error = 1;
    36f6:	81 e1       	ldi	r24, 0x11	; 17
    36f8:	90 e0       	ldi	r25, 0x00	; 0
    36fa:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    36fe:	c8 2f       	mov	r28, r24
    3700:	80 e1       	ldi	r24, 0x10	; 16
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    3708:	2c 2f       	mov	r18, r28
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	32 2f       	mov	r19, r18
    370e:	22 27       	eor	r18, r18
    3710:	28 2b       	or	r18, r24
    3712:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <low_channel_1>
    3716:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <low_channel_1+0x1>
    371a:	28 17       	cp	r18, r24
    371c:	39 07       	cpc	r19, r25
    371e:	19 f0       	breq	.+6      	; 0x3726 <loop+0xfc0>
    3720:	81 e0       	ldi	r24, 0x01	; 1
    3722:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		if(low_channel_2 != ((EEPROM.read(19) << 8) | EEPROM.read(18)))error = 1;
    3726:	83 e1       	ldi	r24, 0x13	; 19
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    372e:	c8 2f       	mov	r28, r24
    3730:	82 e1       	ldi	r24, 0x12	; 18
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    3738:	2c 2f       	mov	r18, r28
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	32 2f       	mov	r19, r18
    373e:	22 27       	eor	r18, r18
    3740:	28 2b       	or	r18, r24
    3742:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <low_channel_2>
    3746:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <low_channel_2+0x1>
    374a:	28 17       	cp	r18, r24
    374c:	39 07       	cpc	r19, r25
    374e:	19 f0       	breq	.+6      	; 0x3756 <loop+0xff0>
    3750:	81 e0       	ldi	r24, 0x01	; 1
    3752:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		if(low_channel_3 != ((EEPROM.read(21) << 8) | EEPROM.read(20)))error = 1;
    3756:	85 e1       	ldi	r24, 0x15	; 21
    3758:	90 e0       	ldi	r25, 0x00	; 0
    375a:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    375e:	c8 2f       	mov	r28, r24
    3760:	84 e1       	ldi	r24, 0x14	; 20
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    3768:	2c 2f       	mov	r18, r28
    376a:	30 e0       	ldi	r19, 0x00	; 0
    376c:	32 2f       	mov	r19, r18
    376e:	22 27       	eor	r18, r18
    3770:	28 2b       	or	r18, r24
    3772:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <low_channel_3>
    3776:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <low_channel_3+0x1>
    377a:	28 17       	cp	r18, r24
    377c:	39 07       	cpc	r19, r25
    377e:	19 f0       	breq	.+6      	; 0x3786 <loop+0x1020>
    3780:	81 e0       	ldi	r24, 0x01	; 1
    3782:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		if(low_channel_4 != ((EEPROM.read(23) << 8) | EEPROM.read(22)))error = 1;
    3786:	87 e1       	ldi	r24, 0x17	; 23
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    378e:	c8 2f       	mov	r28, r24
    3790:	86 e1       	ldi	r24, 0x16	; 22
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    3798:	2c 2f       	mov	r18, r28
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	32 2f       	mov	r19, r18
    379e:	22 27       	eor	r18, r18
    37a0:	28 2b       	or	r18, r24
    37a2:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <low_channel_4>
    37a6:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <low_channel_4+0x1>
    37aa:	28 17       	cp	r18, r24
    37ac:	39 07       	cpc	r19, r25
    37ae:	19 f0       	breq	.+6      	; 0x37b6 <loop+0x1050>
    37b0:	81 e0       	ldi	r24, 0x01	; 1
    37b2:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		
		if(channel_1_assign != EEPROM.read(24))error = 1;
    37b6:	88 e1       	ldi	r24, 0x18	; 24
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    37be:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <channel_1_assign>
    37c2:	89 17       	cp	r24, r25
    37c4:	19 f0       	breq	.+6      	; 0x37cc <loop+0x1066>
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		if(channel_2_assign != EEPROM.read(25))error = 1;
    37cc:	89 e1       	ldi	r24, 0x19	; 25
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    37d4:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <channel_2_assign>
    37d8:	89 17       	cp	r24, r25
    37da:	19 f0       	breq	.+6      	; 0x37e2 <loop+0x107c>
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		if(channel_3_assign != EEPROM.read(26))error = 1;
    37e2:	8a e1       	ldi	r24, 0x1A	; 26
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    37ea:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <channel_3_assign>
    37ee:	89 17       	cp	r24, r25
    37f0:	19 f0       	breq	.+6      	; 0x37f8 <loop+0x1092>
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		if(channel_4_assign != EEPROM.read(27))error = 1;
    37f8:	8b e1       	ldi	r24, 0x1B	; 27
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    3800:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <channel_4_assign>
    3804:	89 17       	cp	r24, r25
    3806:	19 f0       	breq	.+6      	; 0x380e <loop+0x10a8>
    3808:	81 e0       	ldi	r24, 0x01	; 1
    380a:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		
		if(roll_axis != EEPROM.read(28))error = 1;
    380e:	8c e1       	ldi	r24, 0x1C	; 28
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    3816:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <roll_axis>
    381a:	89 17       	cp	r24, r25
    381c:	19 f0       	breq	.+6      	; 0x3824 <loop+0x10be>
    381e:	81 e0       	ldi	r24, 0x01	; 1
    3820:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		if(pitch_axis != EEPROM.read(29))error = 1;
    3824:	8d e1       	ldi	r24, 0x1D	; 29
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    382c:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <pitch_axis>
    3830:	89 17       	cp	r24, r25
    3832:	19 f0       	breq	.+6      	; 0x383a <loop+0x10d4>
    3834:	81 e0       	ldi	r24, 0x01	; 1
    3836:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		if(yaw_axis != EEPROM.read(30))error = 1;
    383a:	8e e1       	ldi	r24, 0x1E	; 30
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    3842:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <yaw_axis>
    3846:	89 17       	cp	r24, r25
    3848:	19 f0       	breq	.+6      	; 0x3850 <loop+0x10ea>
    384a:	81 e0       	ldi	r24, 0x01	; 1
    384c:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		if(type != EEPROM.read(31))error = 1;
    3850:	8f e1       	ldi	r24, 0x1F	; 31
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    3858:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <type>
    385c:	89 17       	cp	r24, r25
    385e:	19 f0       	breq	.+6      	; 0x3866 <loop+0x1100>
    3860:	81 e0       	ldi	r24, 0x01	; 1
    3862:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		if(gyro_address != EEPROM.read(32))error = 1;
    3866:	80 e2       	ldi	r24, 0x20	; 32
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    386e:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <gyro_address>
    3872:	89 17       	cp	r24, r25
    3874:	19 f0       	breq	.+6      	; 0x387c <loop+0x1116>
    3876:	81 e0       	ldi	r24, 0x01	; 1
    3878:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		
		if('J' != EEPROM.read(33))error = 1;
    387c:	81 e2       	ldi	r24, 0x21	; 33
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    3884:	8a 34       	cpi	r24, 0x4A	; 74
    3886:	19 f0       	breq	.+6      	; 0x388e <loop+0x1128>
    3888:	81 e0       	ldi	r24, 0x01	; 1
    388a:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		if('M' != EEPROM.read(34))error = 1;
    388e:	82 e2       	ldi	r24, 0x22	; 34
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    3896:	8d 34       	cpi	r24, 0x4D	; 77
    3898:	19 f0       	breq	.+6      	; 0x38a0 <loop+0x113a>
    389a:	81 e0       	ldi	r24, 0x01	; 1
    389c:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		if('B' != EEPROM.read(35))error = 1;
    38a0:	83 e2       	ldi	r24, 0x23	; 35
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN11EEPROMClass4readEi.isra.0>
    38a8:	82 34       	cpi	r24, 0x42	; 66
    38aa:	19 f0       	breq	.+6      	; 0x38b2 <loop+0x114c>
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <error>
		
		if(error == 1)Serial.println(F("EEPROM verification failed!!! (ERROR 5)"));
    38b2:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <error>
    38b6:	81 30       	cpi	r24, 0x01	; 1
    38b8:	19 f4       	brne	.+6      	; 0x38c0 <loop+0x115a>
    38ba:	63 e7       	ldi	r22, 0x73	; 115
    38bc:	73 e0       	ldi	r23, 0x03	; 3
    38be:	02 c0       	rjmp	.+4      	; 0x38c4 <loop+0x115e>
		else Serial.println(F("Verification done"));
    38c0:	61 e6       	ldi	r22, 0x61	; 97
    38c2:	73 e0       	ldi	r23, 0x03	; 3
    38c4:	8f e9       	ldi	r24, 0x9F	; 159
    38c6:	91 e0       	ldi	r25, 0x01	; 1
    38c8:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
	}
	
	
	if(error == 0){
    38cc:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <error>
    38d0:	81 11       	cpse	r24, r1
    38d2:	0d c0       	rjmp	.+26     	; 0x38ee <loop+0x1188>
		Serial.println(F("Setup is finished."));
    38d4:	6e e4       	ldi	r22, 0x4E	; 78
    38d6:	73 e0       	ldi	r23, 0x03	; 3
    38d8:	8f e9       	ldi	r24, 0x9F	; 159
    38da:	91 e0       	ldi	r25, 0x01	; 1
    38dc:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("You can now calibrate the esc's and upload the YMFC-AL code."));
    38e0:	61 e1       	ldi	r22, 0x11	; 17
    38e2:	73 e0       	ldi	r23, 0x03	; 3
    38e4:	8f e9       	ldi	r24, 0x9F	; 159
    38e6:	91 e0       	ldi	r25, 0x01	; 1
    38e8:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
    38ec:	12 c0       	rjmp	.+36     	; 0x3912 <loop+0x11ac>
	}
	else{
		Serial.println(F("The setup is aborted due to an error."));
    38ee:	6b ee       	ldi	r22, 0xEB	; 235
    38f0:	72 e0       	ldi	r23, 0x02	; 2
    38f2:	8f e9       	ldi	r24, 0x9F	; 159
    38f4:	91 e0       	ldi	r25, 0x01	; 1
    38f6:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Check the Q and A page of the YMFC-AL project on:"));
    38fa:	69 eb       	ldi	r22, 0xB9	; 185
    38fc:	72 e0       	ldi	r23, 0x02	; 2
    38fe:	8f e9       	ldi	r24, 0x9F	; 159
    3900:	91 e0       	ldi	r25, 0x01	; 1
    3902:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("www.brokking.net for more information about this error."));
    3906:	61 e8       	ldi	r22, 0x81	; 129
    3908:	72 e0       	ldi	r23, 0x02	; 2
    390a:	8f e9       	ldi	r24, 0x9F	; 159
    390c:	91 e0       	ldi	r25, 0x01	; 1
    390e:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3912:	ff cf       	rjmp	.-2      	; 0x3912 <loop+0x11ac>

	if(TWBR == 12 && clockspeed_ok){
		Serial.println(F("I2C clock speed is correctly set to 400kHz."));
	}
	else{
		Serial.println(F("I2C clock speed is not set to 400kHz. (ERROR 8)"));
    3914:	68 ea       	ldi	r22, 0xA8	; 168
    3916:	70 e1       	ldi	r23, 0x10	; 16
    3918:	8f e9       	ldi	r24, 0x9F	; 159
    391a:	91 e0       	ldi	r25, 0x01	; 1
    391c:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEPK19__FlashStringHelper>
		error = 1;
    3920:	c0 93 96 01 	sts	0x0196, r28	; 0x800196 <error>
    3924:	0c 94 f1 13 	jmp	0x27e2	; 0x27e2 <loop+0x7c>

00003928 <__subsf3>:
    3928:	50 58       	subi	r21, 0x80	; 128

0000392a <__addsf3>:
    392a:	bb 27       	eor	r27, r27
    392c:	aa 27       	eor	r26, r26
    392e:	0e 94 ac 1c 	call	0x3958	; 0x3958 <__addsf3x>
    3932:	0c 94 f0 1d 	jmp	0x3be0	; 0x3be0 <__fp_round>
    3936:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__fp_pscA>
    393a:	38 f0       	brcs	.+14     	; 0x394a <__addsf3+0x20>
    393c:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fp_pscB>
    3940:	20 f0       	brcs	.+8      	; 0x394a <__addsf3+0x20>
    3942:	39 f4       	brne	.+14     	; 0x3952 <__addsf3+0x28>
    3944:	9f 3f       	cpi	r25, 0xFF	; 255
    3946:	19 f4       	brne	.+6      	; 0x394e <__addsf3+0x24>
    3948:	26 f4       	brtc	.+8      	; 0x3952 <__addsf3+0x28>
    394a:	0c 94 df 1d 	jmp	0x3bbe	; 0x3bbe <__fp_nan>
    394e:	0e f4       	brtc	.+2      	; 0x3952 <__addsf3+0x28>
    3950:	e0 95       	com	r30
    3952:	e7 fb       	bst	r30, 7
    3954:	0c 94 d9 1d 	jmp	0x3bb2	; 0x3bb2 <__fp_inf>

00003958 <__addsf3x>:
    3958:	e9 2f       	mov	r30, r25
    395a:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <__fp_split3>
    395e:	58 f3       	brcs	.-42     	; 0x3936 <__addsf3+0xc>
    3960:	ba 17       	cp	r27, r26
    3962:	62 07       	cpc	r22, r18
    3964:	73 07       	cpc	r23, r19
    3966:	84 07       	cpc	r24, r20
    3968:	95 07       	cpc	r25, r21
    396a:	20 f0       	brcs	.+8      	; 0x3974 <__addsf3x+0x1c>
    396c:	79 f4       	brne	.+30     	; 0x398c <__addsf3x+0x34>
    396e:	a6 f5       	brtc	.+104    	; 0x39d8 <__addsf3x+0x80>
    3970:	0c 94 23 1e 	jmp	0x3c46	; 0x3c46 <__fp_zero>
    3974:	0e f4       	brtc	.+2      	; 0x3978 <__addsf3x+0x20>
    3976:	e0 95       	com	r30
    3978:	0b 2e       	mov	r0, r27
    397a:	ba 2f       	mov	r27, r26
    397c:	a0 2d       	mov	r26, r0
    397e:	0b 01       	movw	r0, r22
    3980:	b9 01       	movw	r22, r18
    3982:	90 01       	movw	r18, r0
    3984:	0c 01       	movw	r0, r24
    3986:	ca 01       	movw	r24, r20
    3988:	a0 01       	movw	r20, r0
    398a:	11 24       	eor	r1, r1
    398c:	ff 27       	eor	r31, r31
    398e:	59 1b       	sub	r21, r25
    3990:	99 f0       	breq	.+38     	; 0x39b8 <__addsf3x+0x60>
    3992:	59 3f       	cpi	r21, 0xF9	; 249
    3994:	50 f4       	brcc	.+20     	; 0x39aa <__addsf3x+0x52>
    3996:	50 3e       	cpi	r21, 0xE0	; 224
    3998:	68 f1       	brcs	.+90     	; 0x39f4 <__addsf3x+0x9c>
    399a:	1a 16       	cp	r1, r26
    399c:	f0 40       	sbci	r31, 0x00	; 0
    399e:	a2 2f       	mov	r26, r18
    39a0:	23 2f       	mov	r18, r19
    39a2:	34 2f       	mov	r19, r20
    39a4:	44 27       	eor	r20, r20
    39a6:	58 5f       	subi	r21, 0xF8	; 248
    39a8:	f3 cf       	rjmp	.-26     	; 0x3990 <__addsf3x+0x38>
    39aa:	46 95       	lsr	r20
    39ac:	37 95       	ror	r19
    39ae:	27 95       	ror	r18
    39b0:	a7 95       	ror	r26
    39b2:	f0 40       	sbci	r31, 0x00	; 0
    39b4:	53 95       	inc	r21
    39b6:	c9 f7       	brne	.-14     	; 0x39aa <__addsf3x+0x52>
    39b8:	7e f4       	brtc	.+30     	; 0x39d8 <__addsf3x+0x80>
    39ba:	1f 16       	cp	r1, r31
    39bc:	ba 0b       	sbc	r27, r26
    39be:	62 0b       	sbc	r22, r18
    39c0:	73 0b       	sbc	r23, r19
    39c2:	84 0b       	sbc	r24, r20
    39c4:	ba f0       	brmi	.+46     	; 0x39f4 <__addsf3x+0x9c>
    39c6:	91 50       	subi	r25, 0x01	; 1
    39c8:	a1 f0       	breq	.+40     	; 0x39f2 <__addsf3x+0x9a>
    39ca:	ff 0f       	add	r31, r31
    39cc:	bb 1f       	adc	r27, r27
    39ce:	66 1f       	adc	r22, r22
    39d0:	77 1f       	adc	r23, r23
    39d2:	88 1f       	adc	r24, r24
    39d4:	c2 f7       	brpl	.-16     	; 0x39c6 <__addsf3x+0x6e>
    39d6:	0e c0       	rjmp	.+28     	; 0x39f4 <__addsf3x+0x9c>
    39d8:	ba 0f       	add	r27, r26
    39da:	62 1f       	adc	r22, r18
    39dc:	73 1f       	adc	r23, r19
    39de:	84 1f       	adc	r24, r20
    39e0:	48 f4       	brcc	.+18     	; 0x39f4 <__addsf3x+0x9c>
    39e2:	87 95       	ror	r24
    39e4:	77 95       	ror	r23
    39e6:	67 95       	ror	r22
    39e8:	b7 95       	ror	r27
    39ea:	f7 95       	ror	r31
    39ec:	9e 3f       	cpi	r25, 0xFE	; 254
    39ee:	08 f0       	brcs	.+2      	; 0x39f2 <__addsf3x+0x9a>
    39f0:	b0 cf       	rjmp	.-160    	; 0x3952 <__addsf3+0x28>
    39f2:	93 95       	inc	r25
    39f4:	88 0f       	add	r24, r24
    39f6:	08 f0       	brcs	.+2      	; 0x39fa <__addsf3x+0xa2>
    39f8:	99 27       	eor	r25, r25
    39fa:	ee 0f       	add	r30, r30
    39fc:	97 95       	ror	r25
    39fe:	87 95       	ror	r24
    3a00:	08 95       	ret

00003a02 <__cmpsf2>:
    3a02:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <__fp_cmp>
    3a06:	08 f4       	brcc	.+2      	; 0x3a0a <__cmpsf2+0x8>
    3a08:	81 e0       	ldi	r24, 0x01	; 1
    3a0a:	08 95       	ret

00003a0c <__divsf3>:
    3a0c:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <__divsf3x>
    3a10:	0c 94 f0 1d 	jmp	0x3be0	; 0x3be0 <__fp_round>
    3a14:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fp_pscB>
    3a18:	58 f0       	brcs	.+22     	; 0x3a30 <__divsf3+0x24>
    3a1a:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__fp_pscA>
    3a1e:	40 f0       	brcs	.+16     	; 0x3a30 <__divsf3+0x24>
    3a20:	29 f4       	brne	.+10     	; 0x3a2c <__divsf3+0x20>
    3a22:	5f 3f       	cpi	r21, 0xFF	; 255
    3a24:	29 f0       	breq	.+10     	; 0x3a30 <__divsf3+0x24>
    3a26:	0c 94 d9 1d 	jmp	0x3bb2	; 0x3bb2 <__fp_inf>
    3a2a:	51 11       	cpse	r21, r1
    3a2c:	0c 94 24 1e 	jmp	0x3c48	; 0x3c48 <__fp_szero>
    3a30:	0c 94 df 1d 	jmp	0x3bbe	; 0x3bbe <__fp_nan>

00003a34 <__divsf3x>:
    3a34:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <__fp_split3>
    3a38:	68 f3       	brcs	.-38     	; 0x3a14 <__divsf3+0x8>

00003a3a <__divsf3_pse>:
    3a3a:	99 23       	and	r25, r25
    3a3c:	b1 f3       	breq	.-20     	; 0x3a2a <__divsf3+0x1e>
    3a3e:	55 23       	and	r21, r21
    3a40:	91 f3       	breq	.-28     	; 0x3a26 <__divsf3+0x1a>
    3a42:	95 1b       	sub	r25, r21
    3a44:	55 0b       	sbc	r21, r21
    3a46:	bb 27       	eor	r27, r27
    3a48:	aa 27       	eor	r26, r26
    3a4a:	62 17       	cp	r22, r18
    3a4c:	73 07       	cpc	r23, r19
    3a4e:	84 07       	cpc	r24, r20
    3a50:	38 f0       	brcs	.+14     	; 0x3a60 <__divsf3_pse+0x26>
    3a52:	9f 5f       	subi	r25, 0xFF	; 255
    3a54:	5f 4f       	sbci	r21, 0xFF	; 255
    3a56:	22 0f       	add	r18, r18
    3a58:	33 1f       	adc	r19, r19
    3a5a:	44 1f       	adc	r20, r20
    3a5c:	aa 1f       	adc	r26, r26
    3a5e:	a9 f3       	breq	.-22     	; 0x3a4a <__divsf3_pse+0x10>
    3a60:	35 d0       	rcall	.+106    	; 0x3acc <__divsf3_pse+0x92>
    3a62:	0e 2e       	mov	r0, r30
    3a64:	3a f0       	brmi	.+14     	; 0x3a74 <__divsf3_pse+0x3a>
    3a66:	e0 e8       	ldi	r30, 0x80	; 128
    3a68:	32 d0       	rcall	.+100    	; 0x3ace <__divsf3_pse+0x94>
    3a6a:	91 50       	subi	r25, 0x01	; 1
    3a6c:	50 40       	sbci	r21, 0x00	; 0
    3a6e:	e6 95       	lsr	r30
    3a70:	00 1c       	adc	r0, r0
    3a72:	ca f7       	brpl	.-14     	; 0x3a66 <__divsf3_pse+0x2c>
    3a74:	2b d0       	rcall	.+86     	; 0x3acc <__divsf3_pse+0x92>
    3a76:	fe 2f       	mov	r31, r30
    3a78:	29 d0       	rcall	.+82     	; 0x3acc <__divsf3_pse+0x92>
    3a7a:	66 0f       	add	r22, r22
    3a7c:	77 1f       	adc	r23, r23
    3a7e:	88 1f       	adc	r24, r24
    3a80:	bb 1f       	adc	r27, r27
    3a82:	26 17       	cp	r18, r22
    3a84:	37 07       	cpc	r19, r23
    3a86:	48 07       	cpc	r20, r24
    3a88:	ab 07       	cpc	r26, r27
    3a8a:	b0 e8       	ldi	r27, 0x80	; 128
    3a8c:	09 f0       	breq	.+2      	; 0x3a90 <__divsf3_pse+0x56>
    3a8e:	bb 0b       	sbc	r27, r27
    3a90:	80 2d       	mov	r24, r0
    3a92:	bf 01       	movw	r22, r30
    3a94:	ff 27       	eor	r31, r31
    3a96:	93 58       	subi	r25, 0x83	; 131
    3a98:	5f 4f       	sbci	r21, 0xFF	; 255
    3a9a:	3a f0       	brmi	.+14     	; 0x3aaa <__divsf3_pse+0x70>
    3a9c:	9e 3f       	cpi	r25, 0xFE	; 254
    3a9e:	51 05       	cpc	r21, r1
    3aa0:	78 f0       	brcs	.+30     	; 0x3ac0 <__divsf3_pse+0x86>
    3aa2:	0c 94 d9 1d 	jmp	0x3bb2	; 0x3bb2 <__fp_inf>
    3aa6:	0c 94 24 1e 	jmp	0x3c48	; 0x3c48 <__fp_szero>
    3aaa:	5f 3f       	cpi	r21, 0xFF	; 255
    3aac:	e4 f3       	brlt	.-8      	; 0x3aa6 <__divsf3_pse+0x6c>
    3aae:	98 3e       	cpi	r25, 0xE8	; 232
    3ab0:	d4 f3       	brlt	.-12     	; 0x3aa6 <__divsf3_pse+0x6c>
    3ab2:	86 95       	lsr	r24
    3ab4:	77 95       	ror	r23
    3ab6:	67 95       	ror	r22
    3ab8:	b7 95       	ror	r27
    3aba:	f7 95       	ror	r31
    3abc:	9f 5f       	subi	r25, 0xFF	; 255
    3abe:	c9 f7       	brne	.-14     	; 0x3ab2 <__divsf3_pse+0x78>
    3ac0:	88 0f       	add	r24, r24
    3ac2:	91 1d       	adc	r25, r1
    3ac4:	96 95       	lsr	r25
    3ac6:	87 95       	ror	r24
    3ac8:	97 f9       	bld	r25, 7
    3aca:	08 95       	ret
    3acc:	e1 e0       	ldi	r30, 0x01	; 1
    3ace:	66 0f       	add	r22, r22
    3ad0:	77 1f       	adc	r23, r23
    3ad2:	88 1f       	adc	r24, r24
    3ad4:	bb 1f       	adc	r27, r27
    3ad6:	62 17       	cp	r22, r18
    3ad8:	73 07       	cpc	r23, r19
    3ada:	84 07       	cpc	r24, r20
    3adc:	ba 07       	cpc	r27, r26
    3ade:	20 f0       	brcs	.+8      	; 0x3ae8 <__divsf3_pse+0xae>
    3ae0:	62 1b       	sub	r22, r18
    3ae2:	73 0b       	sbc	r23, r19
    3ae4:	84 0b       	sbc	r24, r20
    3ae6:	ba 0b       	sbc	r27, r26
    3ae8:	ee 1f       	adc	r30, r30
    3aea:	88 f7       	brcc	.-30     	; 0x3ace <__divsf3_pse+0x94>
    3aec:	e0 95       	com	r30
    3aee:	08 95       	ret

00003af0 <__floatunsisf>:
    3af0:	e8 94       	clt
    3af2:	09 c0       	rjmp	.+18     	; 0x3b06 <__floatsisf+0x12>

00003af4 <__floatsisf>:
    3af4:	97 fb       	bst	r25, 7
    3af6:	3e f4       	brtc	.+14     	; 0x3b06 <__floatsisf+0x12>
    3af8:	90 95       	com	r25
    3afa:	80 95       	com	r24
    3afc:	70 95       	com	r23
    3afe:	61 95       	neg	r22
    3b00:	7f 4f       	sbci	r23, 0xFF	; 255
    3b02:	8f 4f       	sbci	r24, 0xFF	; 255
    3b04:	9f 4f       	sbci	r25, 0xFF	; 255
    3b06:	99 23       	and	r25, r25
    3b08:	a9 f0       	breq	.+42     	; 0x3b34 <__floatsisf+0x40>
    3b0a:	f9 2f       	mov	r31, r25
    3b0c:	96 e9       	ldi	r25, 0x96	; 150
    3b0e:	bb 27       	eor	r27, r27
    3b10:	93 95       	inc	r25
    3b12:	f6 95       	lsr	r31
    3b14:	87 95       	ror	r24
    3b16:	77 95       	ror	r23
    3b18:	67 95       	ror	r22
    3b1a:	b7 95       	ror	r27
    3b1c:	f1 11       	cpse	r31, r1
    3b1e:	f8 cf       	rjmp	.-16     	; 0x3b10 <__floatsisf+0x1c>
    3b20:	fa f4       	brpl	.+62     	; 0x3b60 <__floatsisf+0x6c>
    3b22:	bb 0f       	add	r27, r27
    3b24:	11 f4       	brne	.+4      	; 0x3b2a <__floatsisf+0x36>
    3b26:	60 ff       	sbrs	r22, 0
    3b28:	1b c0       	rjmp	.+54     	; 0x3b60 <__floatsisf+0x6c>
    3b2a:	6f 5f       	subi	r22, 0xFF	; 255
    3b2c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b2e:	8f 4f       	sbci	r24, 0xFF	; 255
    3b30:	9f 4f       	sbci	r25, 0xFF	; 255
    3b32:	16 c0       	rjmp	.+44     	; 0x3b60 <__floatsisf+0x6c>
    3b34:	88 23       	and	r24, r24
    3b36:	11 f0       	breq	.+4      	; 0x3b3c <__floatsisf+0x48>
    3b38:	96 e9       	ldi	r25, 0x96	; 150
    3b3a:	11 c0       	rjmp	.+34     	; 0x3b5e <__floatsisf+0x6a>
    3b3c:	77 23       	and	r23, r23
    3b3e:	21 f0       	breq	.+8      	; 0x3b48 <__floatsisf+0x54>
    3b40:	9e e8       	ldi	r25, 0x8E	; 142
    3b42:	87 2f       	mov	r24, r23
    3b44:	76 2f       	mov	r23, r22
    3b46:	05 c0       	rjmp	.+10     	; 0x3b52 <__floatsisf+0x5e>
    3b48:	66 23       	and	r22, r22
    3b4a:	71 f0       	breq	.+28     	; 0x3b68 <__floatsisf+0x74>
    3b4c:	96 e8       	ldi	r25, 0x86	; 134
    3b4e:	86 2f       	mov	r24, r22
    3b50:	70 e0       	ldi	r23, 0x00	; 0
    3b52:	60 e0       	ldi	r22, 0x00	; 0
    3b54:	2a f0       	brmi	.+10     	; 0x3b60 <__floatsisf+0x6c>
    3b56:	9a 95       	dec	r25
    3b58:	66 0f       	add	r22, r22
    3b5a:	77 1f       	adc	r23, r23
    3b5c:	88 1f       	adc	r24, r24
    3b5e:	da f7       	brpl	.-10     	; 0x3b56 <__floatsisf+0x62>
    3b60:	88 0f       	add	r24, r24
    3b62:	96 95       	lsr	r25
    3b64:	87 95       	ror	r24
    3b66:	97 f9       	bld	r25, 7
    3b68:	08 95       	ret

00003b6a <__fp_cmp>:
    3b6a:	99 0f       	add	r25, r25
    3b6c:	00 08       	sbc	r0, r0
    3b6e:	55 0f       	add	r21, r21
    3b70:	aa 0b       	sbc	r26, r26
    3b72:	e0 e8       	ldi	r30, 0x80	; 128
    3b74:	fe ef       	ldi	r31, 0xFE	; 254
    3b76:	16 16       	cp	r1, r22
    3b78:	17 06       	cpc	r1, r23
    3b7a:	e8 07       	cpc	r30, r24
    3b7c:	f9 07       	cpc	r31, r25
    3b7e:	c0 f0       	brcs	.+48     	; 0x3bb0 <__fp_cmp+0x46>
    3b80:	12 16       	cp	r1, r18
    3b82:	13 06       	cpc	r1, r19
    3b84:	e4 07       	cpc	r30, r20
    3b86:	f5 07       	cpc	r31, r21
    3b88:	98 f0       	brcs	.+38     	; 0x3bb0 <__fp_cmp+0x46>
    3b8a:	62 1b       	sub	r22, r18
    3b8c:	73 0b       	sbc	r23, r19
    3b8e:	84 0b       	sbc	r24, r20
    3b90:	95 0b       	sbc	r25, r21
    3b92:	39 f4       	brne	.+14     	; 0x3ba2 <__fp_cmp+0x38>
    3b94:	0a 26       	eor	r0, r26
    3b96:	61 f0       	breq	.+24     	; 0x3bb0 <__fp_cmp+0x46>
    3b98:	23 2b       	or	r18, r19
    3b9a:	24 2b       	or	r18, r20
    3b9c:	25 2b       	or	r18, r21
    3b9e:	21 f4       	brne	.+8      	; 0x3ba8 <__fp_cmp+0x3e>
    3ba0:	08 95       	ret
    3ba2:	0a 26       	eor	r0, r26
    3ba4:	09 f4       	brne	.+2      	; 0x3ba8 <__fp_cmp+0x3e>
    3ba6:	a1 40       	sbci	r26, 0x01	; 1
    3ba8:	a6 95       	lsr	r26
    3baa:	8f ef       	ldi	r24, 0xFF	; 255
    3bac:	81 1d       	adc	r24, r1
    3bae:	81 1d       	adc	r24, r1
    3bb0:	08 95       	ret

00003bb2 <__fp_inf>:
    3bb2:	97 f9       	bld	r25, 7
    3bb4:	9f 67       	ori	r25, 0x7F	; 127
    3bb6:	80 e8       	ldi	r24, 0x80	; 128
    3bb8:	70 e0       	ldi	r23, 0x00	; 0
    3bba:	60 e0       	ldi	r22, 0x00	; 0
    3bbc:	08 95       	ret

00003bbe <__fp_nan>:
    3bbe:	9f ef       	ldi	r25, 0xFF	; 255
    3bc0:	80 ec       	ldi	r24, 0xC0	; 192
    3bc2:	08 95       	ret

00003bc4 <__fp_pscA>:
    3bc4:	00 24       	eor	r0, r0
    3bc6:	0a 94       	dec	r0
    3bc8:	16 16       	cp	r1, r22
    3bca:	17 06       	cpc	r1, r23
    3bcc:	18 06       	cpc	r1, r24
    3bce:	09 06       	cpc	r0, r25
    3bd0:	08 95       	ret

00003bd2 <__fp_pscB>:
    3bd2:	00 24       	eor	r0, r0
    3bd4:	0a 94       	dec	r0
    3bd6:	12 16       	cp	r1, r18
    3bd8:	13 06       	cpc	r1, r19
    3bda:	14 06       	cpc	r1, r20
    3bdc:	05 06       	cpc	r0, r21
    3bde:	08 95       	ret

00003be0 <__fp_round>:
    3be0:	09 2e       	mov	r0, r25
    3be2:	03 94       	inc	r0
    3be4:	00 0c       	add	r0, r0
    3be6:	11 f4       	brne	.+4      	; 0x3bec <__fp_round+0xc>
    3be8:	88 23       	and	r24, r24
    3bea:	52 f0       	brmi	.+20     	; 0x3c00 <__fp_round+0x20>
    3bec:	bb 0f       	add	r27, r27
    3bee:	40 f4       	brcc	.+16     	; 0x3c00 <__fp_round+0x20>
    3bf0:	bf 2b       	or	r27, r31
    3bf2:	11 f4       	brne	.+4      	; 0x3bf8 <__fp_round+0x18>
    3bf4:	60 ff       	sbrs	r22, 0
    3bf6:	04 c0       	rjmp	.+8      	; 0x3c00 <__fp_round+0x20>
    3bf8:	6f 5f       	subi	r22, 0xFF	; 255
    3bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    3bfc:	8f 4f       	sbci	r24, 0xFF	; 255
    3bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    3c00:	08 95       	ret

00003c02 <__fp_split3>:
    3c02:	57 fd       	sbrc	r21, 7
    3c04:	90 58       	subi	r25, 0x80	; 128
    3c06:	44 0f       	add	r20, r20
    3c08:	55 1f       	adc	r21, r21
    3c0a:	59 f0       	breq	.+22     	; 0x3c22 <__fp_splitA+0x10>
    3c0c:	5f 3f       	cpi	r21, 0xFF	; 255
    3c0e:	71 f0       	breq	.+28     	; 0x3c2c <__fp_splitA+0x1a>
    3c10:	47 95       	ror	r20

00003c12 <__fp_splitA>:
    3c12:	88 0f       	add	r24, r24
    3c14:	97 fb       	bst	r25, 7
    3c16:	99 1f       	adc	r25, r25
    3c18:	61 f0       	breq	.+24     	; 0x3c32 <__fp_splitA+0x20>
    3c1a:	9f 3f       	cpi	r25, 0xFF	; 255
    3c1c:	79 f0       	breq	.+30     	; 0x3c3c <__fp_splitA+0x2a>
    3c1e:	87 95       	ror	r24
    3c20:	08 95       	ret
    3c22:	12 16       	cp	r1, r18
    3c24:	13 06       	cpc	r1, r19
    3c26:	14 06       	cpc	r1, r20
    3c28:	55 1f       	adc	r21, r21
    3c2a:	f2 cf       	rjmp	.-28     	; 0x3c10 <__fp_split3+0xe>
    3c2c:	46 95       	lsr	r20
    3c2e:	f1 df       	rcall	.-30     	; 0x3c12 <__fp_splitA>
    3c30:	08 c0       	rjmp	.+16     	; 0x3c42 <__fp_splitA+0x30>
    3c32:	16 16       	cp	r1, r22
    3c34:	17 06       	cpc	r1, r23
    3c36:	18 06       	cpc	r1, r24
    3c38:	99 1f       	adc	r25, r25
    3c3a:	f1 cf       	rjmp	.-30     	; 0x3c1e <__fp_splitA+0xc>
    3c3c:	86 95       	lsr	r24
    3c3e:	71 05       	cpc	r23, r1
    3c40:	61 05       	cpc	r22, r1
    3c42:	08 94       	sec
    3c44:	08 95       	ret

00003c46 <__fp_zero>:
    3c46:	e8 94       	clt

00003c48 <__fp_szero>:
    3c48:	bb 27       	eor	r27, r27
    3c4a:	66 27       	eor	r22, r22
    3c4c:	77 27       	eor	r23, r23
    3c4e:	cb 01       	movw	r24, r22
    3c50:	97 f9       	bld	r25, 7
    3c52:	08 95       	ret

00003c54 <__gesf2>:
    3c54:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <__fp_cmp>
    3c58:	08 f4       	brcc	.+2      	; 0x3c5c <__gesf2+0x8>
    3c5a:	8f ef       	ldi	r24, 0xFF	; 255
    3c5c:	08 95       	ret

00003c5e <__mulsf3>:
    3c5e:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__mulsf3x>
    3c62:	0c 94 f0 1d 	jmp	0x3be0	; 0x3be0 <__fp_round>
    3c66:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__fp_pscA>
    3c6a:	38 f0       	brcs	.+14     	; 0x3c7a <__mulsf3+0x1c>
    3c6c:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fp_pscB>
    3c70:	20 f0       	brcs	.+8      	; 0x3c7a <__mulsf3+0x1c>
    3c72:	95 23       	and	r25, r21
    3c74:	11 f0       	breq	.+4      	; 0x3c7a <__mulsf3+0x1c>
    3c76:	0c 94 d9 1d 	jmp	0x3bb2	; 0x3bb2 <__fp_inf>
    3c7a:	0c 94 df 1d 	jmp	0x3bbe	; 0x3bbe <__fp_nan>
    3c7e:	11 24       	eor	r1, r1
    3c80:	0c 94 24 1e 	jmp	0x3c48	; 0x3c48 <__fp_szero>

00003c84 <__mulsf3x>:
    3c84:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <__fp_split3>
    3c88:	70 f3       	brcs	.-36     	; 0x3c66 <__mulsf3+0x8>

00003c8a <__mulsf3_pse>:
    3c8a:	95 9f       	mul	r25, r21
    3c8c:	c1 f3       	breq	.-16     	; 0x3c7e <__mulsf3+0x20>
    3c8e:	95 0f       	add	r25, r21
    3c90:	50 e0       	ldi	r21, 0x00	; 0
    3c92:	55 1f       	adc	r21, r21
    3c94:	62 9f       	mul	r22, r18
    3c96:	f0 01       	movw	r30, r0
    3c98:	72 9f       	mul	r23, r18
    3c9a:	bb 27       	eor	r27, r27
    3c9c:	f0 0d       	add	r31, r0
    3c9e:	b1 1d       	adc	r27, r1
    3ca0:	63 9f       	mul	r22, r19
    3ca2:	aa 27       	eor	r26, r26
    3ca4:	f0 0d       	add	r31, r0
    3ca6:	b1 1d       	adc	r27, r1
    3ca8:	aa 1f       	adc	r26, r26
    3caa:	64 9f       	mul	r22, r20
    3cac:	66 27       	eor	r22, r22
    3cae:	b0 0d       	add	r27, r0
    3cb0:	a1 1d       	adc	r26, r1
    3cb2:	66 1f       	adc	r22, r22
    3cb4:	82 9f       	mul	r24, r18
    3cb6:	22 27       	eor	r18, r18
    3cb8:	b0 0d       	add	r27, r0
    3cba:	a1 1d       	adc	r26, r1
    3cbc:	62 1f       	adc	r22, r18
    3cbe:	73 9f       	mul	r23, r19
    3cc0:	b0 0d       	add	r27, r0
    3cc2:	a1 1d       	adc	r26, r1
    3cc4:	62 1f       	adc	r22, r18
    3cc6:	83 9f       	mul	r24, r19
    3cc8:	a0 0d       	add	r26, r0
    3cca:	61 1d       	adc	r22, r1
    3ccc:	22 1f       	adc	r18, r18
    3cce:	74 9f       	mul	r23, r20
    3cd0:	33 27       	eor	r19, r19
    3cd2:	a0 0d       	add	r26, r0
    3cd4:	61 1d       	adc	r22, r1
    3cd6:	23 1f       	adc	r18, r19
    3cd8:	84 9f       	mul	r24, r20
    3cda:	60 0d       	add	r22, r0
    3cdc:	21 1d       	adc	r18, r1
    3cde:	82 2f       	mov	r24, r18
    3ce0:	76 2f       	mov	r23, r22
    3ce2:	6a 2f       	mov	r22, r26
    3ce4:	11 24       	eor	r1, r1
    3ce6:	9f 57       	subi	r25, 0x7F	; 127
    3ce8:	50 40       	sbci	r21, 0x00	; 0
    3cea:	9a f0       	brmi	.+38     	; 0x3d12 <__mulsf3_pse+0x88>
    3cec:	f1 f0       	breq	.+60     	; 0x3d2a <__mulsf3_pse+0xa0>
    3cee:	88 23       	and	r24, r24
    3cf0:	4a f0       	brmi	.+18     	; 0x3d04 <__mulsf3_pse+0x7a>
    3cf2:	ee 0f       	add	r30, r30
    3cf4:	ff 1f       	adc	r31, r31
    3cf6:	bb 1f       	adc	r27, r27
    3cf8:	66 1f       	adc	r22, r22
    3cfa:	77 1f       	adc	r23, r23
    3cfc:	88 1f       	adc	r24, r24
    3cfe:	91 50       	subi	r25, 0x01	; 1
    3d00:	50 40       	sbci	r21, 0x00	; 0
    3d02:	a9 f7       	brne	.-22     	; 0x3cee <__mulsf3_pse+0x64>
    3d04:	9e 3f       	cpi	r25, 0xFE	; 254
    3d06:	51 05       	cpc	r21, r1
    3d08:	80 f0       	brcs	.+32     	; 0x3d2a <__mulsf3_pse+0xa0>
    3d0a:	0c 94 d9 1d 	jmp	0x3bb2	; 0x3bb2 <__fp_inf>
    3d0e:	0c 94 24 1e 	jmp	0x3c48	; 0x3c48 <__fp_szero>
    3d12:	5f 3f       	cpi	r21, 0xFF	; 255
    3d14:	e4 f3       	brlt	.-8      	; 0x3d0e <__mulsf3_pse+0x84>
    3d16:	98 3e       	cpi	r25, 0xE8	; 232
    3d18:	d4 f3       	brlt	.-12     	; 0x3d0e <__mulsf3_pse+0x84>
    3d1a:	86 95       	lsr	r24
    3d1c:	77 95       	ror	r23
    3d1e:	67 95       	ror	r22
    3d20:	b7 95       	ror	r27
    3d22:	f7 95       	ror	r31
    3d24:	e7 95       	ror	r30
    3d26:	9f 5f       	subi	r25, 0xFF	; 255
    3d28:	c1 f7       	brne	.-16     	; 0x3d1a <__mulsf3_pse+0x90>
    3d2a:	fe 2b       	or	r31, r30
    3d2c:	88 0f       	add	r24, r24
    3d2e:	91 1d       	adc	r25, r1
    3d30:	96 95       	lsr	r25
    3d32:	87 95       	ror	r24
    3d34:	97 f9       	bld	r25, 7
    3d36:	08 95       	ret

00003d38 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3d38:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    3d3a:	91 8d       	ldd	r25, Z+25	; 0x19
    3d3c:	22 8d       	ldd	r18, Z+26	; 0x1a
    3d3e:	89 2f       	mov	r24, r25
    3d40:	90 e0       	ldi	r25, 0x00	; 0
    3d42:	80 5c       	subi	r24, 0xC0	; 192
    3d44:	9f 4f       	sbci	r25, 0xFF	; 255
    3d46:	82 1b       	sub	r24, r18
    3d48:	91 09       	sbc	r25, r1
}
    3d4a:	8f 73       	andi	r24, 0x3F	; 63
    3d4c:	99 27       	eor	r25, r25
    3d4e:	08 95       	ret

00003d50 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3d50:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3d52:	91 8d       	ldd	r25, Z+25	; 0x19
    3d54:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d56:	98 17       	cp	r25, r24
    3d58:	31 f0       	breq	.+12     	; 0x3d66 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3d5a:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d5c:	e8 0f       	add	r30, r24
    3d5e:	f1 1d       	adc	r31, r1
    3d60:	85 8d       	ldd	r24, Z+29	; 0x1d
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3d66:	8f ef       	ldi	r24, 0xFF	; 255
    3d68:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3d6a:	08 95       	ret

00003d6c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3d6c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3d6e:	91 8d       	ldd	r25, Z+25	; 0x19
    3d70:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d72:	98 17       	cp	r25, r24
    3d74:	61 f0       	breq	.+24     	; 0x3d8e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3d76:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d78:	df 01       	movw	r26, r30
    3d7a:	a8 0f       	add	r26, r24
    3d7c:	b1 1d       	adc	r27, r1
    3d7e:	5d 96       	adiw	r26, 0x1d	; 29
    3d80:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3d82:	92 8d       	ldd	r25, Z+26	; 0x1a
    3d84:	9f 5f       	subi	r25, 0xFF	; 255
    3d86:	9f 73       	andi	r25, 0x3F	; 63
    3d88:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3d8a:	90 e0       	ldi	r25, 0x00	; 0
    3d8c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3d8e:	8f ef       	ldi	r24, 0xFF	; 255
    3d90:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3d92:	08 95       	ret

00003d94 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3d94:	87 e3       	ldi	r24, 0x37	; 55
    3d96:	90 e2       	ldi	r25, 0x20	; 32
    3d98:	89 2b       	or	r24, r25
    3d9a:	49 f0       	breq	.+18     	; 0x3dae <_Z14serialEventRunv+0x1a>
    3d9c:	80 e0       	ldi	r24, 0x00	; 0
    3d9e:	90 e0       	ldi	r25, 0x00	; 0
    3da0:	89 2b       	or	r24, r25
    3da2:	29 f0       	breq	.+10     	; 0x3dae <_Z14serialEventRunv+0x1a>
    3da4:	0e 94 37 20 	call	0x406e	; 0x406e <_Z17Serial0_availablev>
    3da8:	81 11       	cpse	r24, r1
    3daa:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3dae:	08 95       	ret

00003db0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3db0:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3db2:	84 8d       	ldd	r24, Z+28	; 0x1c
    3db4:	df 01       	movw	r26, r30
    3db6:	a8 0f       	add	r26, r24
    3db8:	b1 1d       	adc	r27, r1
    3dba:	a3 5a       	subi	r26, 0xA3	; 163
    3dbc:	bf 4f       	sbci	r27, 0xFF	; 255
    3dbe:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3dc0:	24 8d       	ldd	r18, Z+28	; 0x1c
    3dc2:	30 e0       	ldi	r19, 0x00	; 0
    3dc4:	2f 5f       	subi	r18, 0xFF	; 255
    3dc6:	3f 4f       	sbci	r19, 0xFF	; 255
    3dc8:	2f 73       	andi	r18, 0x3F	; 63
    3dca:	30 78       	andi	r19, 0x80	; 128
    3dcc:	33 23       	and	r19, r19
    3dce:	34 f4       	brge	.+12     	; 0x3ddc <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    3dd0:	21 50       	subi	r18, 0x01	; 1
    3dd2:	31 09       	sbc	r19, r1
    3dd4:	20 6c       	ori	r18, 0xC0	; 192
    3dd6:	3f 6f       	ori	r19, 0xFF	; 255
    3dd8:	2f 5f       	subi	r18, 0xFF	; 255
    3dda:	3f 4f       	sbci	r19, 0xFF	; 255
    3ddc:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
    3dde:	a6 89       	ldd	r26, Z+22	; 0x16
    3de0:	b7 89       	ldd	r27, Z+23	; 0x17
    3de2:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    3de4:	a0 89       	ldd	r26, Z+16	; 0x10
    3de6:	b1 89       	ldd	r27, Z+17	; 0x11
    3de8:	8c 91       	ld	r24, X
    3dea:	80 64       	ori	r24, 0x40	; 64
    3dec:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    3dee:	93 8d       	ldd	r25, Z+27	; 0x1b
    3df0:	84 8d       	ldd	r24, Z+28	; 0x1c
    3df2:	98 13       	cpse	r25, r24
    3df4:	06 c0       	rjmp	.+12     	; 0x3e02 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3df6:	02 88       	ldd	r0, Z+18	; 0x12
    3df8:	f3 89       	ldd	r31, Z+19	; 0x13
    3dfa:	e0 2d       	mov	r30, r0
    3dfc:	80 81       	ld	r24, Z
    3dfe:	8f 7d       	andi	r24, 0xDF	; 223
    3e00:	80 83       	st	Z, r24
    3e02:	08 95       	ret

00003e04 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3e04:	cf 93       	push	r28
    3e06:	df 93       	push	r29
    3e08:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3e0a:	88 8d       	ldd	r24, Y+24	; 0x18
    3e0c:	88 23       	and	r24, r24
    3e0e:	d9 f0       	breq	.+54     	; 0x3e46 <_ZN14HardwareSerial5flushEv+0x42>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3e10:	ea 89       	ldd	r30, Y+18	; 0x12
    3e12:	fb 89       	ldd	r31, Y+19	; 0x13
    3e14:	80 81       	ld	r24, Z
    3e16:	85 fd       	sbrc	r24, 5
    3e18:	05 c0       	rjmp	.+10     	; 0x3e24 <_ZN14HardwareSerial5flushEv+0x20>
    3e1a:	a8 89       	ldd	r26, Y+16	; 0x10
    3e1c:	b9 89       	ldd	r27, Y+17	; 0x11
    3e1e:	8c 91       	ld	r24, X
    3e20:	86 fd       	sbrc	r24, 6
    3e22:	11 c0       	rjmp	.+34     	; 0x3e46 <_ZN14HardwareSerial5flushEv+0x42>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3e24:	0f b6       	in	r0, 0x3f	; 63
    3e26:	07 fc       	sbrc	r0, 7
    3e28:	f5 cf       	rjmp	.-22     	; 0x3e14 <_ZN14HardwareSerial5flushEv+0x10>
    3e2a:	80 81       	ld	r24, Z
    3e2c:	85 ff       	sbrs	r24, 5
    3e2e:	f2 cf       	rjmp	.-28     	; 0x3e14 <_ZN14HardwareSerial5flushEv+0x10>
    3e30:	04 c0       	rjmp	.+8      	; 0x3e3a <_ZN14HardwareSerial5flushEv+0x36>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
    3e32:	ce 01       	movw	r24, r28
    3e34:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3e38:	eb cf       	rjmp	.-42     	; 0x3e10 <_ZN14HardwareSerial5flushEv+0xc>
  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3e3a:	a8 89       	ldd	r26, Y+16	; 0x10
    3e3c:	b9 89       	ldd	r27, Y+17	; 0x11
    3e3e:	8c 91       	ld	r24, X
    3e40:	85 ff       	sbrs	r24, 5
    3e42:	e8 cf       	rjmp	.-48     	; 0x3e14 <_ZN14HardwareSerial5flushEv+0x10>
    3e44:	f6 cf       	rjmp	.-20     	; 0x3e32 <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3e46:	df 91       	pop	r29
    3e48:	cf 91       	pop	r28
    3e4a:	08 95       	ret

00003e4c <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    3e4c:	0f 93       	push	r16
    3e4e:	1f 93       	push	r17
    3e50:	cf 93       	push	r28
    3e52:	df 93       	push	r29
    3e54:	ec 01       	movw	r28, r24
  _written = true;
    3e56:	81 e0       	ldi	r24, 0x01	; 1
    3e58:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3e5a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3e5c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3e5e:	98 13       	cpse	r25, r24
    3e60:	23 c0       	rjmp	.+70     	; 0x3ea8 <_ZN14HardwareSerial5writeEh+0x5c>
    3e62:	e8 89       	ldd	r30, Y+16	; 0x10
    3e64:	f9 89       	ldd	r31, Y+17	; 0x11
    3e66:	80 81       	ld	r24, Z
    3e68:	85 fd       	sbrc	r24, 5
    3e6a:	2f c0       	rjmp	.+94     	; 0x3eca <_ZN14HardwareSerial5writeEh+0x7e>
    3e6c:	1d c0       	rjmp	.+58     	; 0x3ea8 <_ZN14HardwareSerial5writeEh+0x5c>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3e6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e70:	19 13       	cpse	r17, r25
    3e72:	0c c0       	rjmp	.+24     	; 0x3e8c <_ZN14HardwareSerial5writeEh+0x40>
    if (bit_is_clear(SREG, SREG_I)) {
    3e74:	0f b6       	in	r0, 0x3f	; 63
    3e76:	07 fc       	sbrc	r0, 7
    3e78:	fa cf       	rjmp	.-12     	; 0x3e6e <_ZN14HardwareSerial5writeEh+0x22>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3e7a:	e8 89       	ldd	r30, Y+16	; 0x10
    3e7c:	f9 89       	ldd	r31, Y+17	; 0x11
    3e7e:	80 81       	ld	r24, Z
    3e80:	85 ff       	sbrs	r24, 5
    3e82:	f5 cf       	rjmp	.-22     	; 0x3e6e <_ZN14HardwareSerial5writeEh+0x22>
	_tx_udr_empty_irq();
    3e84:	ce 01       	movw	r24, r28
    3e86:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3e8a:	f1 cf       	rjmp	.-30     	; 0x3e6e <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3e8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e8e:	fe 01       	movw	r30, r28
    3e90:	e8 0f       	add	r30, r24
    3e92:	f1 1d       	adc	r31, r1
    3e94:	e3 5a       	subi	r30, 0xA3	; 163
    3e96:	ff 4f       	sbci	r31, 0xFF	; 255
    3e98:	00 83       	st	Z, r16
  _tx_buffer_head = i;
    3e9a:	1b 8f       	std	Y+27, r17	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    3e9c:	ea 89       	ldd	r30, Y+18	; 0x12
    3e9e:	fb 89       	ldd	r31, Y+19	; 0x13
    3ea0:	80 81       	ld	r24, Z
    3ea2:	80 62       	ori	r24, 0x20	; 32
    3ea4:	80 83       	st	Z, r24
  
  return 1;
    3ea6:	19 c0       	rjmp	.+50     	; 0x3eda <_ZN14HardwareSerial5writeEh+0x8e>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3ea8:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3eaa:	30 e0       	ldi	r19, 0x00	; 0
    3eac:	2f 5f       	subi	r18, 0xFF	; 255
    3eae:	3f 4f       	sbci	r19, 0xFF	; 255
    3eb0:	2f 73       	andi	r18, 0x3F	; 63
    3eb2:	30 78       	andi	r19, 0x80	; 128
    3eb4:	33 23       	and	r19, r19
    3eb6:	34 f4       	brge	.+12     	; 0x3ec4 <_ZN14HardwareSerial5writeEh+0x78>
    3eb8:	21 50       	subi	r18, 0x01	; 1
    3eba:	31 09       	sbc	r19, r1
    3ebc:	20 6c       	ori	r18, 0xC0	; 192
    3ebe:	3f 6f       	ori	r19, 0xFF	; 255
    3ec0:	2f 5f       	subi	r18, 0xFF	; 255
    3ec2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ec4:	06 2f       	mov	r16, r22
    3ec6:	12 2f       	mov	r17, r18
    3ec8:	d2 cf       	rjmp	.-92     	; 0x3e6e <_ZN14HardwareSerial5writeEh+0x22>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    3eca:	ee 89       	ldd	r30, Y+22	; 0x16
    3ecc:	ff 89       	ldd	r31, Y+23	; 0x17
    3ece:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    3ed0:	e8 89       	ldd	r30, Y+16	; 0x10
    3ed2:	f9 89       	ldd	r31, Y+17	; 0x11
    3ed4:	80 81       	ld	r24, Z
    3ed6:	80 64       	ori	r24, 0x40	; 64
    3ed8:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    3eda:	81 e0       	ldi	r24, 0x01	; 1
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	df 91       	pop	r29
    3ee0:	cf 91       	pop	r28
    3ee2:	1f 91       	pop	r17
    3ee4:	0f 91       	pop	r16
    3ee6:	08 95       	ret

00003ee8 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3ee8:	cf 92       	push	r12
    3eea:	df 92       	push	r13
    3eec:	ef 92       	push	r14
    3eee:	ff 92       	push	r15
    3ef0:	1f 93       	push	r17
    3ef2:	cf 93       	push	r28
    3ef4:	df 93       	push	r29
    3ef6:	ec 01       	movw	r28, r24
    3ef8:	6a 01       	movw	r12, r20
    3efa:	7b 01       	movw	r14, r22
    3efc:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3efe:	e8 89       	ldd	r30, Y+16	; 0x10
    3f00:	f9 89       	ldd	r31, Y+17	; 0x11
    3f02:	82 e0       	ldi	r24, 0x02	; 2
    3f04:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3f06:	41 15       	cp	r20, r1
    3f08:	51 4e       	sbci	r21, 0xE1	; 225
    3f0a:	61 05       	cpc	r22, r1
    3f0c:	71 05       	cpc	r23, r1
    3f0e:	b1 f0       	breq	.+44     	; 0x3f3c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3f10:	60 e0       	ldi	r22, 0x00	; 0
    3f12:	79 e0       	ldi	r23, 0x09	; 9
    3f14:	8d e3       	ldi	r24, 0x3D	; 61
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	a7 01       	movw	r20, r14
    3f1a:	96 01       	movw	r18, r12
    3f1c:	0e 94 61 28 	call	0x50c2	; 0x50c2 <__udivmodsi4>
    3f20:	da 01       	movw	r26, r20
    3f22:	c9 01       	movw	r24, r18
    3f24:	01 97       	sbiw	r24, 0x01	; 1
    3f26:	a1 09       	sbc	r26, r1
    3f28:	b1 09       	sbc	r27, r1
    3f2a:	b6 95       	lsr	r27
    3f2c:	a7 95       	ror	r26
    3f2e:	97 95       	ror	r25
    3f30:	87 95       	ror	r24
    3f32:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3f34:	21 15       	cp	r18, r1
    3f36:	80 e1       	ldi	r24, 0x10	; 16
    3f38:	38 07       	cpc	r19, r24
    3f3a:	a8 f0       	brcs	.+42     	; 0x3f66 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    3f3c:	e8 89       	ldd	r30, Y+16	; 0x10
    3f3e:	f9 89       	ldd	r31, Y+17	; 0x11
    3f40:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3f42:	60 e8       	ldi	r22, 0x80	; 128
    3f44:	74 e8       	ldi	r23, 0x84	; 132
    3f46:	8e e1       	ldi	r24, 0x1E	; 30
    3f48:	90 e0       	ldi	r25, 0x00	; 0
    3f4a:	a7 01       	movw	r20, r14
    3f4c:	96 01       	movw	r18, r12
    3f4e:	0e 94 61 28 	call	0x50c2	; 0x50c2 <__udivmodsi4>
    3f52:	da 01       	movw	r26, r20
    3f54:	c9 01       	movw	r24, r18
    3f56:	01 97       	sbiw	r24, 0x01	; 1
    3f58:	a1 09       	sbc	r26, r1
    3f5a:	b1 09       	sbc	r27, r1
    3f5c:	b6 95       	lsr	r27
    3f5e:	a7 95       	ror	r26
    3f60:	97 95       	ror	r25
    3f62:	87 95       	ror	r24
    3f64:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3f66:	ec 85       	ldd	r30, Y+12	; 0x0c
    3f68:	fd 85       	ldd	r31, Y+13	; 0x0d
    3f6a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    3f6c:	ee 85       	ldd	r30, Y+14	; 0x0e
    3f6e:	ff 85       	ldd	r31, Y+15	; 0x0f
    3f70:	20 83       	st	Z, r18

  _written = false;
    3f72:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3f74:	ec 89       	ldd	r30, Y+20	; 0x14
    3f76:	fd 89       	ldd	r31, Y+21	; 0x15
    3f78:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    3f7a:	ea 89       	ldd	r30, Y+18	; 0x12
    3f7c:	fb 89       	ldd	r31, Y+19	; 0x13
    3f7e:	80 81       	ld	r24, Z
    3f80:	80 61       	ori	r24, 0x10	; 16
    3f82:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    3f84:	ea 89       	ldd	r30, Y+18	; 0x12
    3f86:	fb 89       	ldd	r31, Y+19	; 0x13
    3f88:	80 81       	ld	r24, Z
    3f8a:	88 60       	ori	r24, 0x08	; 8
    3f8c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3f8e:	ea 89       	ldd	r30, Y+18	; 0x12
    3f90:	fb 89       	ldd	r31, Y+19	; 0x13
    3f92:	80 81       	ld	r24, Z
    3f94:	80 68       	ori	r24, 0x80	; 128
    3f96:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3f98:	ea 89       	ldd	r30, Y+18	; 0x12
    3f9a:	fb 89       	ldd	r31, Y+19	; 0x13
    3f9c:	80 81       	ld	r24, Z
    3f9e:	8f 7d       	andi	r24, 0xDF	; 223
    3fa0:	80 83       	st	Z, r24
}
    3fa2:	df 91       	pop	r29
    3fa4:	cf 91       	pop	r28
    3fa6:	1f 91       	pop	r17
    3fa8:	ff 90       	pop	r15
    3faa:	ef 90       	pop	r14
    3fac:	df 90       	pop	r13
    3fae:	cf 90       	pop	r12
    3fb0:	08 95       	ret

00003fb2 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    3fb2:	1f 92       	push	r1
    3fb4:	0f 92       	push	r0
    3fb6:	0f b6       	in	r0, 0x3f	; 63
    3fb8:	0f 92       	push	r0
    3fba:	11 24       	eor	r1, r1
    3fbc:	2f 93       	push	r18
    3fbe:	8f 93       	push	r24
    3fc0:	9f 93       	push	r25
    3fc2:	af 93       	push	r26
    3fc4:	bf 93       	push	r27
    3fc6:	ef 93       	push	r30
    3fc8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3fca:	e0 91 af 01 	lds	r30, 0x01AF	; 0x8001af <Serial+0x10>
    3fce:	f0 91 b0 01 	lds	r31, 0x01B0	; 0x8001b0 <Serial+0x11>
    3fd2:	80 81       	ld	r24, Z
    3fd4:	82 fd       	sbrc	r24, 2
    3fd6:	14 c0       	rjmp	.+40     	; 0x4000 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3fd8:	ef e9       	ldi	r30, 0x9F	; 159
    3fda:	f1 e0       	ldi	r31, 0x01	; 1
    3fdc:	a6 89       	ldd	r26, Z+22	; 0x16
    3fde:	b7 89       	ldd	r27, Z+23	; 0x17
    3fe0:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3fe2:	81 8d       	ldd	r24, Z+25	; 0x19
    3fe4:	8f 5f       	subi	r24, 0xFF	; 255
    3fe6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3fe8:	92 8d       	ldd	r25, Z+26	; 0x1a
    3fea:	89 17       	cp	r24, r25
    3fec:	71 f0       	breq	.+28     	; 0x400a <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
    3fee:	df 01       	movw	r26, r30
    3ff0:	e1 8d       	ldd	r30, Z+25	; 0x19
    3ff2:	f0 e0       	ldi	r31, 0x00	; 0
    3ff4:	e1 56       	subi	r30, 0x61	; 97
    3ff6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ff8:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    3ffa:	59 96       	adiw	r26, 0x19	; 25
    3ffc:	8c 93       	st	X, r24
    3ffe:	05 c0       	rjmp	.+10     	; 0x400a <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    4000:	e0 91 b5 01 	lds	r30, 0x01B5	; 0x8001b5 <Serial+0x16>
    4004:	f0 91 b6 01 	lds	r31, 0x01B6	; 0x8001b6 <Serial+0x17>
    4008:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    400a:	ff 91       	pop	r31
    400c:	ef 91       	pop	r30
    400e:	bf 91       	pop	r27
    4010:	af 91       	pop	r26
    4012:	9f 91       	pop	r25
    4014:	8f 91       	pop	r24
    4016:	2f 91       	pop	r18
    4018:	0f 90       	pop	r0
    401a:	0f be       	out	0x3f, r0	; 63
    401c:	0f 90       	pop	r0
    401e:	1f 90       	pop	r1
    4020:	18 95       	reti

00004022 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    4022:	1f 92       	push	r1
    4024:	0f 92       	push	r0
    4026:	0f b6       	in	r0, 0x3f	; 63
    4028:	0f 92       	push	r0
    402a:	11 24       	eor	r1, r1
    402c:	2f 93       	push	r18
    402e:	3f 93       	push	r19
    4030:	4f 93       	push	r20
    4032:	5f 93       	push	r21
    4034:	6f 93       	push	r22
    4036:	7f 93       	push	r23
    4038:	8f 93       	push	r24
    403a:	9f 93       	push	r25
    403c:	af 93       	push	r26
    403e:	bf 93       	push	r27
    4040:	ef 93       	push	r30
    4042:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    4044:	8f e9       	ldi	r24, 0x9F	; 159
    4046:	91 e0       	ldi	r25, 0x01	; 1
    4048:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    404c:	ff 91       	pop	r31
    404e:	ef 91       	pop	r30
    4050:	bf 91       	pop	r27
    4052:	af 91       	pop	r26
    4054:	9f 91       	pop	r25
    4056:	8f 91       	pop	r24
    4058:	7f 91       	pop	r23
    405a:	6f 91       	pop	r22
    405c:	5f 91       	pop	r21
    405e:	4f 91       	pop	r20
    4060:	3f 91       	pop	r19
    4062:	2f 91       	pop	r18
    4064:	0f 90       	pop	r0
    4066:	0f be       	out	0x3f, r0	; 63
    4068:	0f 90       	pop	r0
    406a:	1f 90       	pop	r1
    406c:	18 95       	reti

0000406e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    406e:	8f e9       	ldi	r24, 0x9F	; 159
    4070:	91 e0       	ldi	r25, 0x01	; 1
    4072:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <_ZN14HardwareSerial9availableEv>
    4076:	21 e0       	ldi	r18, 0x01	; 1
    4078:	89 2b       	or	r24, r25
    407a:	09 f4       	brne	.+2      	; 0x407e <_Z17Serial0_availablev+0x10>
    407c:	20 e0       	ldi	r18, 0x00	; 0
}
    407e:	82 2f       	mov	r24, r18
    4080:	08 95       	ret

00004082 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4082:	ef e9       	ldi	r30, 0x9F	; 159
    4084:	f1 e0       	ldi	r31, 0x01	; 1
    4086:	13 82       	std	Z+3, r1	; 0x03
    4088:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    408a:	88 ee       	ldi	r24, 0xE8	; 232
    408c:	93 e0       	ldi	r25, 0x03	; 3
    408e:	a0 e0       	ldi	r26, 0x00	; 0
    4090:	b0 e0       	ldi	r27, 0x00	; 0
    4092:	84 83       	std	Z+4, r24	; 0x04
    4094:	95 83       	std	Z+5, r25	; 0x05
    4096:	a6 83       	std	Z+6, r26	; 0x06
    4098:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    409a:	8d e0       	ldi	r24, 0x0D	; 13
    409c:	91 e0       	ldi	r25, 0x01	; 1
    409e:	91 83       	std	Z+1, r25	; 0x01
    40a0:	80 83       	st	Z, r24
    40a2:	85 ec       	ldi	r24, 0xC5	; 197
    40a4:	90 e0       	ldi	r25, 0x00	; 0
    40a6:	95 87       	std	Z+13, r25	; 0x0d
    40a8:	84 87       	std	Z+12, r24	; 0x0c
    40aa:	84 ec       	ldi	r24, 0xC4	; 196
    40ac:	90 e0       	ldi	r25, 0x00	; 0
    40ae:	97 87       	std	Z+15, r25	; 0x0f
    40b0:	86 87       	std	Z+14, r24	; 0x0e
    40b2:	80 ec       	ldi	r24, 0xC0	; 192
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	91 8b       	std	Z+17, r25	; 0x11
    40b8:	80 8b       	std	Z+16, r24	; 0x10
    40ba:	81 ec       	ldi	r24, 0xC1	; 193
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	93 8b       	std	Z+19, r25	; 0x13
    40c0:	82 8b       	std	Z+18, r24	; 0x12
    40c2:	82 ec       	ldi	r24, 0xC2	; 194
    40c4:	90 e0       	ldi	r25, 0x00	; 0
    40c6:	95 8b       	std	Z+21, r25	; 0x15
    40c8:	84 8b       	std	Z+20, r24	; 0x14
    40ca:	86 ec       	ldi	r24, 0xC6	; 198
    40cc:	90 e0       	ldi	r25, 0x00	; 0
    40ce:	97 8b       	std	Z+23, r25	; 0x17
    40d0:	86 8b       	std	Z+22, r24	; 0x16
    40d2:	11 8e       	std	Z+25, r1	; 0x19
    40d4:	12 8e       	std	Z+26, r1	; 0x1a
    40d6:	13 8e       	std	Z+27, r1	; 0x1b
    40d8:	14 8e       	std	Z+28, r1	; 0x1c
    40da:	08 95       	ret

000040dc <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    40dc:	08 95       	ret

000040de <main>:

int main(void)
{
	init();
    40de:	0e 94 28 25 	call	0x4a50	; 0x4a50 <init>

	initVariant();
    40e2:	0e 94 6e 20 	call	0x40dc	; 0x40dc <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    40e6:	0e 94 29 09 	call	0x1252	; 0x1252 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    40ea:	ca ec       	ldi	r28, 0xCA	; 202
    40ec:	de e1       	ldi	r29, 0x1E	; 30
#endif
	
	setup();
    
	for (;;) {
		loop();
    40ee:	0e 94 b3 13 	call	0x2766	; 0x2766 <loop>
		if (serialEventRun) serialEventRun();
    40f2:	20 97       	sbiw	r28, 0x00	; 0
    40f4:	e1 f3       	breq	.-8      	; 0x40ee <main+0x10>
    40f6:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <_Z14serialEventRunv>
    40fa:	f9 cf       	rjmp	.-14     	; 0x40ee <main+0x10>

000040fc <_ZN5Print5writeEPKhj>:
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}
    40fc:	cf 92       	push	r12
    40fe:	df 92       	push	r13
    4100:	ef 92       	push	r14
    4102:	ff 92       	push	r15
    4104:	0f 93       	push	r16
    4106:	1f 93       	push	r17
    4108:	cf 93       	push	r28
    410a:	df 93       	push	r29
    410c:	41 15       	cp	r20, r1
    410e:	51 05       	cpc	r21, r1
    4110:	c1 f0       	breq	.+48     	; 0x4142 <_ZN5Print5writeEPKhj+0x46>
    4112:	6a 01       	movw	r12, r20
    4114:	8c 01       	movw	r16, r24
    4116:	e6 2e       	mov	r14, r22
    4118:	f7 2e       	mov	r15, r23
    411a:	c0 e0       	ldi	r28, 0x00	; 0
    411c:	d0 e0       	ldi	r29, 0x00	; 0
    411e:	d7 01       	movw	r26, r14
    4120:	6d 91       	ld	r22, X+
    4122:	7d 01       	movw	r14, r26
    4124:	d8 01       	movw	r26, r16
    4126:	ed 91       	ld	r30, X+
    4128:	fc 91       	ld	r31, X
    412a:	01 90       	ld	r0, Z+
    412c:	f0 81       	ld	r31, Z
    412e:	e0 2d       	mov	r30, r0
    4130:	c8 01       	movw	r24, r16
    4132:	09 95       	icall
    4134:	89 2b       	or	r24, r25
    4136:	39 f0       	breq	.+14     	; 0x4146 <_ZN5Print5writeEPKhj+0x4a>
    4138:	21 96       	adiw	r28, 0x01	; 1
    413a:	cc 16       	cp	r12, r28
    413c:	dd 06       	cpc	r13, r29
    413e:	79 f7       	brne	.-34     	; 0x411e <_ZN5Print5writeEPKhj+0x22>
    4140:	02 c0       	rjmp	.+4      	; 0x4146 <_ZN5Print5writeEPKhj+0x4a>
    4142:	c0 e0       	ldi	r28, 0x00	; 0
    4144:	d0 e0       	ldi	r29, 0x00	; 0
    4146:	ce 01       	movw	r24, r28
    4148:	df 91       	pop	r29
    414a:	cf 91       	pop	r28
    414c:	1f 91       	pop	r17
    414e:	0f 91       	pop	r16
    4150:	ff 90       	pop	r15
    4152:	ef 90       	pop	r14
    4154:	df 90       	pop	r13
    4156:	cf 90       	pop	r12
    4158:	08 95       	ret

0000415a <_ZN5Print5printEPK19__FlashStringHelper>:
    415a:	ef 92       	push	r14
    415c:	ff 92       	push	r15
    415e:	0f 93       	push	r16
    4160:	1f 93       	push	r17
    4162:	cf 93       	push	r28
    4164:	df 93       	push	r29
    4166:	fb 01       	movw	r30, r22
    4168:	64 91       	lpm	r22, Z
    416a:	66 23       	and	r22, r22
    416c:	b1 f0       	breq	.+44     	; 0x419a <_ZN5Print5printEPK19__FlashStringHelper+0x40>
    416e:	7f 01       	movw	r14, r30
    4170:	8c 01       	movw	r16, r24
    4172:	c0 e0       	ldi	r28, 0x00	; 0
    4174:	d0 e0       	ldi	r29, 0x00	; 0
    4176:	d8 01       	movw	r26, r16
    4178:	ed 91       	ld	r30, X+
    417a:	fc 91       	ld	r31, X
    417c:	01 90       	ld	r0, Z+
    417e:	f0 81       	ld	r31, Z
    4180:	e0 2d       	mov	r30, r0
    4182:	c8 01       	movw	r24, r16
    4184:	09 95       	icall
    4186:	89 2b       	or	r24, r25
    4188:	51 f0       	breq	.+20     	; 0x419e <_ZN5Print5printEPK19__FlashStringHelper+0x44>
    418a:	21 96       	adiw	r28, 0x01	; 1
    418c:	f7 01       	movw	r30, r14
    418e:	ec 0f       	add	r30, r28
    4190:	fd 1f       	adc	r31, r29
    4192:	64 91       	lpm	r22, Z
    4194:	61 11       	cpse	r22, r1
    4196:	ef cf       	rjmp	.-34     	; 0x4176 <_ZN5Print5printEPK19__FlashStringHelper+0x1c>
    4198:	02 c0       	rjmp	.+4      	; 0x419e <_ZN5Print5printEPK19__FlashStringHelper+0x44>
    419a:	c0 e0       	ldi	r28, 0x00	; 0
    419c:	d0 e0       	ldi	r29, 0x00	; 0
    419e:	ce 01       	movw	r24, r28
    41a0:	df 91       	pop	r29
    41a2:	cf 91       	pop	r28
    41a4:	1f 91       	pop	r17
    41a6:	0f 91       	pop	r16
    41a8:	ff 90       	pop	r15
    41aa:	ef 90       	pop	r14
    41ac:	08 95       	ret

000041ae <_ZN5Print5printEPKc>:
    41ae:	61 15       	cp	r22, r1
    41b0:	71 05       	cpc	r23, r1
    41b2:	81 f0       	breq	.+32     	; 0x41d4 <_ZN5Print5printEPKc+0x26>
    41b4:	fb 01       	movw	r30, r22
    41b6:	01 90       	ld	r0, Z+
    41b8:	00 20       	and	r0, r0
    41ba:	e9 f7       	brne	.-6      	; 0x41b6 <_ZN5Print5printEPKc+0x8>
    41bc:	31 97       	sbiw	r30, 0x01	; 1
    41be:	af 01       	movw	r20, r30
    41c0:	46 1b       	sub	r20, r22
    41c2:	57 0b       	sbc	r21, r23
    41c4:	dc 01       	movw	r26, r24
    41c6:	ed 91       	ld	r30, X+
    41c8:	fc 91       	ld	r31, X
    41ca:	02 80       	ldd	r0, Z+2	; 0x02
    41cc:	f3 81       	ldd	r31, Z+3	; 0x03
    41ce:	e0 2d       	mov	r30, r0
    41d0:	09 95       	icall
    41d2:	08 95       	ret
    41d4:	80 e0       	ldi	r24, 0x00	; 0
    41d6:	90 e0       	ldi	r25, 0x00	; 0
    41d8:	08 95       	ret

000041da <_ZN5Print5printEc>:
    41da:	dc 01       	movw	r26, r24
    41dc:	ed 91       	ld	r30, X+
    41de:	fc 91       	ld	r31, X
    41e0:	01 90       	ld	r0, Z+
    41e2:	f0 81       	ld	r31, Z
    41e4:	e0 2d       	mov	r30, r0
    41e6:	09 95       	icall
    41e8:	08 95       	ret

000041ea <_ZN5Print7printlnEv>:
    41ea:	dc 01       	movw	r26, r24
    41ec:	ed 91       	ld	r30, X+
    41ee:	fc 91       	ld	r31, X
    41f0:	02 80       	ldd	r0, Z+2	; 0x02
    41f2:	f3 81       	ldd	r31, Z+3	; 0x03
    41f4:	e0 2d       	mov	r30, r0
    41f6:	42 e0       	ldi	r20, 0x02	; 2
    41f8:	50 e0       	ldi	r21, 0x00	; 0
    41fa:	69 e1       	ldi	r22, 0x19	; 25
    41fc:	71 e0       	ldi	r23, 0x01	; 1
    41fe:	09 95       	icall
    4200:	08 95       	ret

00004202 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    4202:	0f 93       	push	r16
    4204:	1f 93       	push	r17
    4206:	cf 93       	push	r28
    4208:	df 93       	push	r29
    420a:	ec 01       	movw	r28, r24
    420c:	0e 94 ad 20 	call	0x415a	; 0x415a <_ZN5Print5printEPK19__FlashStringHelper>
    4210:	8c 01       	movw	r16, r24
    4212:	ce 01       	movw	r24, r28
    4214:	0e 94 f5 20 	call	0x41ea	; 0x41ea <_ZN5Print7printlnEv>
    4218:	80 0f       	add	r24, r16
    421a:	91 1f       	adc	r25, r17
    421c:	df 91       	pop	r29
    421e:	cf 91       	pop	r28
    4220:	1f 91       	pop	r17
    4222:	0f 91       	pop	r16
    4224:	08 95       	ret

00004226 <_ZN5Print7printlnEPKc>:
    4226:	0f 93       	push	r16
    4228:	1f 93       	push	r17
    422a:	cf 93       	push	r28
    422c:	df 93       	push	r29
    422e:	ec 01       	movw	r28, r24
    4230:	0e 94 d7 20 	call	0x41ae	; 0x41ae <_ZN5Print5printEPKc>
    4234:	8c 01       	movw	r16, r24
    4236:	ce 01       	movw	r24, r28
    4238:	0e 94 f5 20 	call	0x41ea	; 0x41ea <_ZN5Print7printlnEv>
    423c:	80 0f       	add	r24, r16
    423e:	91 1f       	adc	r25, r17
    4240:	df 91       	pop	r29
    4242:	cf 91       	pop	r28
    4244:	1f 91       	pop	r17
    4246:	0f 91       	pop	r16
    4248:	08 95       	ret

0000424a <_ZN5Print11printNumberEmh>:
    424a:	8f 92       	push	r8
    424c:	9f 92       	push	r9
    424e:	af 92       	push	r10
    4250:	bf 92       	push	r11
    4252:	ef 92       	push	r14
    4254:	ff 92       	push	r15
    4256:	0f 93       	push	r16
    4258:	1f 93       	push	r17
    425a:	cf 93       	push	r28
    425c:	df 93       	push	r29
    425e:	cd b7       	in	r28, 0x3d	; 61
    4260:	de b7       	in	r29, 0x3e	; 62
    4262:	a1 97       	sbiw	r28, 0x21	; 33
    4264:	0f b6       	in	r0, 0x3f	; 63
    4266:	f8 94       	cli
    4268:	de bf       	out	0x3e, r29	; 62
    426a:	0f be       	out	0x3f, r0	; 63
    426c:	cd bf       	out	0x3d, r28	; 61
    426e:	7c 01       	movw	r14, r24
    4270:	cb 01       	movw	r24, r22
    4272:	ba 01       	movw	r22, r20
    4274:	19 a2       	std	Y+33, r1	; 0x21
    4276:	22 30       	cpi	r18, 0x02	; 2
    4278:	08 f4       	brcc	.+2      	; 0x427c <_ZN5Print11printNumberEmh+0x32>
    427a:	2a e0       	ldi	r18, 0x0A	; 10
    427c:	8e 01       	movw	r16, r28
    427e:	0f 5d       	subi	r16, 0xDF	; 223
    4280:	1f 4f       	sbci	r17, 0xFF	; 255
    4282:	82 2e       	mov	r8, r18
    4284:	91 2c       	mov	r9, r1
    4286:	a1 2c       	mov	r10, r1
    4288:	b1 2c       	mov	r11, r1
    428a:	a5 01       	movw	r20, r10
    428c:	94 01       	movw	r18, r8
    428e:	0e 94 61 28 	call	0x50c2	; 0x50c2 <__udivmodsi4>
    4292:	e6 2f       	mov	r30, r22
    4294:	62 2f       	mov	r22, r18
    4296:	73 2f       	mov	r23, r19
    4298:	84 2f       	mov	r24, r20
    429a:	95 2f       	mov	r25, r21
    429c:	01 50       	subi	r16, 0x01	; 1
    429e:	11 09       	sbc	r17, r1
    42a0:	ea 30       	cpi	r30, 0x0A	; 10
    42a2:	10 f4       	brcc	.+4      	; 0x42a8 <_ZN5Print11printNumberEmh+0x5e>
    42a4:	e0 5d       	subi	r30, 0xD0	; 208
    42a6:	01 c0       	rjmp	.+2      	; 0x42aa <_ZN5Print11printNumberEmh+0x60>
    42a8:	e9 5c       	subi	r30, 0xC9	; 201
    42aa:	d8 01       	movw	r26, r16
    42ac:	ec 93       	st	X, r30
    42ae:	61 15       	cp	r22, r1
    42b0:	71 05       	cpc	r23, r1
    42b2:	81 05       	cpc	r24, r1
    42b4:	91 05       	cpc	r25, r1
    42b6:	49 f7       	brne	.-46     	; 0x428a <_ZN5Print11printNumberEmh+0x40>
    42b8:	01 15       	cp	r16, r1
    42ba:	11 05       	cpc	r17, r1
    42bc:	91 f0       	breq	.+36     	; 0x42e2 <_ZN5Print11printNumberEmh+0x98>
    42be:	f8 01       	movw	r30, r16
    42c0:	01 90       	ld	r0, Z+
    42c2:	00 20       	and	r0, r0
    42c4:	e9 f7       	brne	.-6      	; 0x42c0 <_ZN5Print11printNumberEmh+0x76>
    42c6:	31 97       	sbiw	r30, 0x01	; 1
    42c8:	af 01       	movw	r20, r30
    42ca:	40 1b       	sub	r20, r16
    42cc:	51 0b       	sbc	r21, r17
    42ce:	d7 01       	movw	r26, r14
    42d0:	ed 91       	ld	r30, X+
    42d2:	fc 91       	ld	r31, X
    42d4:	02 80       	ldd	r0, Z+2	; 0x02
    42d6:	f3 81       	ldd	r31, Z+3	; 0x03
    42d8:	e0 2d       	mov	r30, r0
    42da:	b8 01       	movw	r22, r16
    42dc:	c7 01       	movw	r24, r14
    42de:	09 95       	icall
    42e0:	02 c0       	rjmp	.+4      	; 0x42e6 <_ZN5Print11printNumberEmh+0x9c>
    42e2:	80 e0       	ldi	r24, 0x00	; 0
    42e4:	90 e0       	ldi	r25, 0x00	; 0
    42e6:	a1 96       	adiw	r28, 0x21	; 33
    42e8:	0f b6       	in	r0, 0x3f	; 63
    42ea:	f8 94       	cli
    42ec:	de bf       	out	0x3e, r29	; 62
    42ee:	0f be       	out	0x3f, r0	; 63
    42f0:	cd bf       	out	0x3d, r28	; 61
    42f2:	df 91       	pop	r29
    42f4:	cf 91       	pop	r28
    42f6:	1f 91       	pop	r17
    42f8:	0f 91       	pop	r16
    42fa:	ff 90       	pop	r15
    42fc:	ef 90       	pop	r14
    42fe:	bf 90       	pop	r11
    4300:	af 90       	pop	r10
    4302:	9f 90       	pop	r9
    4304:	8f 90       	pop	r8
    4306:	08 95       	ret

00004308 <_ZN5Print5printEli>:
    4308:	cf 92       	push	r12
    430a:	df 92       	push	r13
    430c:	ef 92       	push	r14
    430e:	ff 92       	push	r15
    4310:	0f 93       	push	r16
    4312:	1f 93       	push	r17
    4314:	cf 93       	push	r28
    4316:	df 93       	push	r29
    4318:	ec 01       	movw	r28, r24
    431a:	6a 01       	movw	r12, r20
    431c:	7b 01       	movw	r14, r22
    431e:	21 15       	cp	r18, r1
    4320:	31 05       	cpc	r19, r1
    4322:	41 f4       	brne	.+16     	; 0x4334 <_ZN5Print5printEli+0x2c>
    4324:	e8 81       	ld	r30, Y
    4326:	f9 81       	ldd	r31, Y+1	; 0x01
    4328:	01 90       	ld	r0, Z+
    432a:	f0 81       	ld	r31, Z
    432c:	e0 2d       	mov	r30, r0
    432e:	64 2f       	mov	r22, r20
    4330:	09 95       	icall
    4332:	1d c0       	rjmp	.+58     	; 0x436e <_ZN5Print5printEli+0x66>
    4334:	2a 30       	cpi	r18, 0x0A	; 10
    4336:	31 05       	cpc	r19, r1
    4338:	c1 f4       	brne	.+48     	; 0x436a <_ZN5Print5printEli+0x62>
    433a:	77 23       	and	r23, r23
    433c:	94 f4       	brge	.+36     	; 0x4362 <_ZN5Print5printEli+0x5a>
    433e:	6d e2       	ldi	r22, 0x2D	; 45
    4340:	0e 94 ed 20 	call	0x41da	; 0x41da <_ZN5Print5printEc>
    4344:	8c 01       	movw	r16, r24
    4346:	44 27       	eor	r20, r20
    4348:	55 27       	eor	r21, r21
    434a:	ba 01       	movw	r22, r20
    434c:	4c 19       	sub	r20, r12
    434e:	5d 09       	sbc	r21, r13
    4350:	6e 09       	sbc	r22, r14
    4352:	7f 09       	sbc	r23, r15
    4354:	2a e0       	ldi	r18, 0x0A	; 10
    4356:	ce 01       	movw	r24, r28
    4358:	0e 94 25 21 	call	0x424a	; 0x424a <_ZN5Print11printNumberEmh>
    435c:	80 0f       	add	r24, r16
    435e:	91 1f       	adc	r25, r17
    4360:	06 c0       	rjmp	.+12     	; 0x436e <_ZN5Print5printEli+0x66>
    4362:	2a e0       	ldi	r18, 0x0A	; 10
    4364:	0e 94 25 21 	call	0x424a	; 0x424a <_ZN5Print11printNumberEmh>
    4368:	02 c0       	rjmp	.+4      	; 0x436e <_ZN5Print5printEli+0x66>
    436a:	0e 94 25 21 	call	0x424a	; 0x424a <_ZN5Print11printNumberEmh>
    436e:	df 91       	pop	r29
    4370:	cf 91       	pop	r28
    4372:	1f 91       	pop	r17
    4374:	0f 91       	pop	r16
    4376:	ff 90       	pop	r15
    4378:	ef 90       	pop	r14
    437a:	df 90       	pop	r13
    437c:	cf 90       	pop	r12
    437e:	08 95       	ret

00004380 <_ZN5Print5printEii>:
    4380:	9a 01       	movw	r18, r20
    4382:	ab 01       	movw	r20, r22
    4384:	77 0f       	add	r23, r23
    4386:	66 0b       	sbc	r22, r22
    4388:	77 0b       	sbc	r23, r23
    438a:	0e 94 84 21 	call	0x4308	; 0x4308 <_ZN5Print5printEli>
    438e:	08 95       	ret

00004390 <_ZN5Print7printlnEii>:
    4390:	0f 93       	push	r16
    4392:	1f 93       	push	r17
    4394:	cf 93       	push	r28
    4396:	df 93       	push	r29
    4398:	ec 01       	movw	r28, r24
    439a:	0e 94 c0 21 	call	0x4380	; 0x4380 <_ZN5Print5printEii>
    439e:	8c 01       	movw	r16, r24
    43a0:	ce 01       	movw	r24, r28
    43a2:	0e 94 f5 20 	call	0x41ea	; 0x41ea <_ZN5Print7printlnEv>
    43a6:	80 0f       	add	r24, r16
    43a8:	91 1f       	adc	r25, r17
    43aa:	df 91       	pop	r29
    43ac:	cf 91       	pop	r28
    43ae:	1f 91       	pop	r17
    43b0:	0f 91       	pop	r16
    43b2:	08 95       	ret

000043b4 <_ZN5Print5printEmi>:
    43b4:	21 15       	cp	r18, r1
    43b6:	31 05       	cpc	r19, r1
    43b8:	49 f4       	brne	.+18     	; 0x43cc <_ZN5Print5printEmi+0x18>
    43ba:	dc 01       	movw	r26, r24
    43bc:	ed 91       	ld	r30, X+
    43be:	fc 91       	ld	r31, X
    43c0:	01 90       	ld	r0, Z+
    43c2:	f0 81       	ld	r31, Z
    43c4:	e0 2d       	mov	r30, r0
    43c6:	64 2f       	mov	r22, r20
    43c8:	09 95       	icall
    43ca:	08 95       	ret
    43cc:	0e 94 25 21 	call	0x424a	; 0x424a <_ZN5Print11printNumberEmh>
    43d0:	08 95       	ret

000043d2 <_ZN5Print5printEhi>:
    43d2:	9a 01       	movw	r18, r20
    43d4:	46 2f       	mov	r20, r22
    43d6:	50 e0       	ldi	r21, 0x00	; 0
    43d8:	60 e0       	ldi	r22, 0x00	; 0
    43da:	70 e0       	ldi	r23, 0x00	; 0
    43dc:	0e 94 da 21 	call	0x43b4	; 0x43b4 <_ZN5Print5printEmi>
    43e0:	08 95       	ret

000043e2 <_ZN5Print7printlnEhi>:
    43e2:	0f 93       	push	r16
    43e4:	1f 93       	push	r17
    43e6:	cf 93       	push	r28
    43e8:	df 93       	push	r29
    43ea:	ec 01       	movw	r28, r24
    43ec:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <_ZN5Print5printEhi>
    43f0:	8c 01       	movw	r16, r24
    43f2:	ce 01       	movw	r24, r28
    43f4:	0e 94 f5 20 	call	0x41ea	; 0x41ea <_ZN5Print7printlnEv>
    43f8:	80 0f       	add	r24, r16
    43fa:	91 1f       	adc	r25, r17
    43fc:	df 91       	pop	r29
    43fe:	cf 91       	pop	r28
    4400:	1f 91       	pop	r17
    4402:	0f 91       	pop	r16
    4404:	08 95       	ret

00004406 <_ZN5Print5printEji>:
    4406:	9a 01       	movw	r18, r20
    4408:	ab 01       	movw	r20, r22
    440a:	60 e0       	ldi	r22, 0x00	; 0
    440c:	70 e0       	ldi	r23, 0x00	; 0
    440e:	0e 94 da 21 	call	0x43b4	; 0x43b4 <_ZN5Print5printEmi>
    4412:	08 95       	ret

00004414 <_ZN5Print10printFloatEdh>:
    4414:	7f 92       	push	r7
    4416:	8f 92       	push	r8
    4418:	9f 92       	push	r9
    441a:	af 92       	push	r10
    441c:	bf 92       	push	r11
    441e:	cf 92       	push	r12
    4420:	df 92       	push	r13
    4422:	ef 92       	push	r14
    4424:	ff 92       	push	r15
    4426:	0f 93       	push	r16
    4428:	1f 93       	push	r17
    442a:	cf 93       	push	r28
    442c:	df 93       	push	r29
    442e:	00 d0       	rcall	.+0      	; 0x4430 <_ZN5Print10printFloatEdh+0x1c>
    4430:	00 d0       	rcall	.+0      	; 0x4432 <_ZN5Print10printFloatEdh+0x1e>
    4432:	cd b7       	in	r28, 0x3d	; 61
    4434:	de b7       	in	r29, 0x3e	; 62
    4436:	8c 01       	movw	r16, r24
    4438:	4a 01       	movw	r8, r20
    443a:	5b 01       	movw	r10, r22
    443c:	72 2e       	mov	r7, r18
    443e:	9a 01       	movw	r18, r20
    4440:	ab 01       	movw	r20, r22
    4442:	c5 01       	movw	r24, r10
    4444:	b4 01       	movw	r22, r8
    4446:	0e 94 48 28 	call	0x5090	; 0x5090 <__unordsf2>
    444a:	88 23       	and	r24, r24
    444c:	31 f0       	breq	.+12     	; 0x445a <_ZN5Print10printFloatEdh+0x46>
    444e:	6c e1       	ldi	r22, 0x1C	; 28
    4450:	71 e0       	ldi	r23, 0x01	; 1
    4452:	c8 01       	movw	r24, r16
    4454:	0e 94 d7 20 	call	0x41ae	; 0x41ae <_ZN5Print5printEPKc>
    4458:	d7 c0       	rjmp	.+430    	; 0x4608 <_ZN5Print10printFloatEdh+0x1f4>
    445a:	75 01       	movw	r14, r10
    445c:	64 01       	movw	r12, r8
    445e:	e8 94       	clt
    4460:	f7 f8       	bld	r15, 7
    4462:	2f ef       	ldi	r18, 0xFF	; 255
    4464:	3f ef       	ldi	r19, 0xFF	; 255
    4466:	4f e7       	ldi	r20, 0x7F	; 127
    4468:	5f e7       	ldi	r21, 0x7F	; 127
    446a:	c7 01       	movw	r24, r14
    446c:	b6 01       	movw	r22, r12
    446e:	0e 94 48 28 	call	0x5090	; 0x5090 <__unordsf2>
    4472:	81 11       	cpse	r24, r1
    4474:	10 c0       	rjmp	.+32     	; 0x4496 <_ZN5Print10printFloatEdh+0x82>
    4476:	2f ef       	ldi	r18, 0xFF	; 255
    4478:	3f ef       	ldi	r19, 0xFF	; 255
    447a:	4f e7       	ldi	r20, 0x7F	; 127
    447c:	5f e7       	ldi	r21, 0x7F	; 127
    447e:	c7 01       	movw	r24, r14
    4480:	b6 01       	movw	r22, r12
    4482:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    4486:	18 16       	cp	r1, r24
    4488:	34 f4       	brge	.+12     	; 0x4496 <_ZN5Print10printFloatEdh+0x82>
    448a:	60 e2       	ldi	r22, 0x20	; 32
    448c:	71 e0       	ldi	r23, 0x01	; 1
    448e:	c8 01       	movw	r24, r16
    4490:	0e 94 d7 20 	call	0x41ae	; 0x41ae <_ZN5Print5printEPKc>
    4494:	b9 c0       	rjmp	.+370    	; 0x4608 <_ZN5Print10printFloatEdh+0x1f4>
    4496:	2f ef       	ldi	r18, 0xFF	; 255
    4498:	3f ef       	ldi	r19, 0xFF	; 255
    449a:	4f e7       	ldi	r20, 0x7F	; 127
    449c:	5f e4       	ldi	r21, 0x4F	; 79
    449e:	c5 01       	movw	r24, r10
    44a0:	b4 01       	movw	r22, r8
    44a2:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <__gesf2>
    44a6:	18 16       	cp	r1, r24
    44a8:	34 f4       	brge	.+12     	; 0x44b6 <_ZN5Print10printFloatEdh+0xa2>
    44aa:	64 e2       	ldi	r22, 0x24	; 36
    44ac:	71 e0       	ldi	r23, 0x01	; 1
    44ae:	c8 01       	movw	r24, r16
    44b0:	0e 94 d7 20 	call	0x41ae	; 0x41ae <_ZN5Print5printEPKc>
    44b4:	a9 c0       	rjmp	.+338    	; 0x4608 <_ZN5Print10printFloatEdh+0x1f4>
    44b6:	2f ef       	ldi	r18, 0xFF	; 255
    44b8:	3f ef       	ldi	r19, 0xFF	; 255
    44ba:	4f e7       	ldi	r20, 0x7F	; 127
    44bc:	5f ec       	ldi	r21, 0xCF	; 207
    44be:	c5 01       	movw	r24, r10
    44c0:	b4 01       	movw	r22, r8
    44c2:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    44c6:	88 23       	and	r24, r24
    44c8:	34 f4       	brge	.+12     	; 0x44d6 <_ZN5Print10printFloatEdh+0xc2>
    44ca:	64 e2       	ldi	r22, 0x24	; 36
    44cc:	71 e0       	ldi	r23, 0x01	; 1
    44ce:	c8 01       	movw	r24, r16
    44d0:	0e 94 d7 20 	call	0x41ae	; 0x41ae <_ZN5Print5printEPKc>
    44d4:	99 c0       	rjmp	.+306    	; 0x4608 <_ZN5Print10printFloatEdh+0x1f4>
    44d6:	20 e0       	ldi	r18, 0x00	; 0
    44d8:	30 e0       	ldi	r19, 0x00	; 0
    44da:	a9 01       	movw	r20, r18
    44dc:	c5 01       	movw	r24, r10
    44de:	b4 01       	movw	r22, r8
    44e0:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__cmpsf2>
    44e4:	88 23       	and	r24, r24
    44e6:	54 f4       	brge	.+20     	; 0x44fc <_ZN5Print10printFloatEdh+0xe8>
    44e8:	6d e2       	ldi	r22, 0x2D	; 45
    44ea:	c8 01       	movw	r24, r16
    44ec:	0e 94 ed 20 	call	0x41da	; 0x41da <_ZN5Print5printEc>
    44f0:	7c 01       	movw	r14, r24
    44f2:	b7 fa       	bst	r11, 7
    44f4:	b0 94       	com	r11
    44f6:	b7 f8       	bld	r11, 7
    44f8:	b0 94       	com	r11
    44fa:	02 c0       	rjmp	.+4      	; 0x4500 <_ZN5Print10printFloatEdh+0xec>
    44fc:	e1 2c       	mov	r14, r1
    44fe:	f1 2c       	mov	r15, r1
    4500:	77 20       	and	r7, r7
    4502:	09 f4       	brne	.+2      	; 0x4506 <_ZN5Print10printFloatEdh+0xf2>
    4504:	6e c0       	rjmp	.+220    	; 0x45e2 <_ZN5Print10printFloatEdh+0x1ce>
    4506:	19 82       	std	Y+1, r1	; 0x01
    4508:	60 e0       	ldi	r22, 0x00	; 0
    450a:	70 e0       	ldi	r23, 0x00	; 0
    450c:	80 e0       	ldi	r24, 0x00	; 0
    450e:	9f e3       	ldi	r25, 0x3F	; 63
    4510:	20 e0       	ldi	r18, 0x00	; 0
    4512:	30 e0       	ldi	r19, 0x00	; 0
    4514:	40 e2       	ldi	r20, 0x20	; 32
    4516:	51 e4       	ldi	r21, 0x41	; 65
    4518:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <__divsf3>
    451c:	29 81       	ldd	r18, Y+1	; 0x01
    451e:	2f 5f       	subi	r18, 0xFF	; 255
    4520:	29 83       	std	Y+1, r18	; 0x01
    4522:	72 12       	cpse	r7, r18
    4524:	f5 cf       	rjmp	.-22     	; 0x4510 <_ZN5Print10printFloatEdh+0xfc>
    4526:	2c c0       	rjmp	.+88     	; 0x4580 <_ZN5Print10printFloatEdh+0x16c>
    4528:	20 e0       	ldi	r18, 0x00	; 0
    452a:	30 e0       	ldi	r19, 0x00	; 0
    452c:	40 e2       	ldi	r20, 0x20	; 32
    452e:	51 e4       	ldi	r21, 0x41	; 65
    4530:	c5 01       	movw	r24, r10
    4532:	b4 01       	movw	r22, r8
    4534:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <__mulsf3>
    4538:	4b 01       	movw	r8, r22
    453a:	5c 01       	movw	r10, r24
    453c:	0e 94 19 28 	call	0x5032	; 0x5032 <__fixunssfsi>
    4540:	6b 01       	movw	r12, r22
    4542:	7c 01       	movw	r14, r24
    4544:	4a e0       	ldi	r20, 0x0A	; 10
    4546:	50 e0       	ldi	r21, 0x00	; 0
    4548:	c8 01       	movw	r24, r16
    454a:	0e 94 03 22 	call	0x4406	; 0x4406 <_ZN5Print5printEji>
    454e:	29 81       	ldd	r18, Y+1	; 0x01
    4550:	3a 81       	ldd	r19, Y+2	; 0x02
    4552:	28 0f       	add	r18, r24
    4554:	39 1f       	adc	r19, r25
    4556:	3a 83       	std	Y+2, r19	; 0x02
    4558:	29 83       	std	Y+1, r18	; 0x01
    455a:	b6 01       	movw	r22, r12
    455c:	80 e0       	ldi	r24, 0x00	; 0
    455e:	90 e0       	ldi	r25, 0x00	; 0
    4560:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__floatunsisf>
    4564:	9b 01       	movw	r18, r22
    4566:	ac 01       	movw	r20, r24
    4568:	c5 01       	movw	r24, r10
    456a:	b4 01       	movw	r22, r8
    456c:	0e 94 94 1c 	call	0x3928	; 0x3928 <__subsf3>
    4570:	4b 01       	movw	r8, r22
    4572:	5c 01       	movw	r10, r24
    4574:	7a 94       	dec	r7
    4576:	71 10       	cpse	r7, r1
    4578:	d7 cf       	rjmp	.-82     	; 0x4528 <_ZN5Print10printFloatEdh+0x114>
    457a:	89 81       	ldd	r24, Y+1	; 0x01
    457c:	9a 81       	ldd	r25, Y+2	; 0x02
    457e:	44 c0       	rjmp	.+136    	; 0x4608 <_ZN5Print10printFloatEdh+0x1f4>
    4580:	9b 01       	movw	r18, r22
    4582:	ac 01       	movw	r20, r24
    4584:	c5 01       	movw	r24, r10
    4586:	b4 01       	movw	r22, r8
    4588:	0e 94 95 1c 	call	0x392a	; 0x392a <__addsf3>
    458c:	4b 01       	movw	r8, r22
    458e:	5c 01       	movw	r10, r24
    4590:	0e 94 19 28 	call	0x5032	; 0x5032 <__fixunssfsi>
    4594:	69 83       	std	Y+1, r22	; 0x01
    4596:	7a 83       	std	Y+2, r23	; 0x02
    4598:	8b 83       	std	Y+3, r24	; 0x03
    459a:	9c 83       	std	Y+4, r25	; 0x04
    459c:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__floatunsisf>
    45a0:	9b 01       	movw	r18, r22
    45a2:	ac 01       	movw	r20, r24
    45a4:	c5 01       	movw	r24, r10
    45a6:	b4 01       	movw	r22, r8
    45a8:	0e 94 94 1c 	call	0x3928	; 0x3928 <__subsf3>
    45ac:	4b 01       	movw	r8, r22
    45ae:	5c 01       	movw	r10, r24
    45b0:	2a e0       	ldi	r18, 0x0A	; 10
    45b2:	30 e0       	ldi	r19, 0x00	; 0
    45b4:	49 81       	ldd	r20, Y+1	; 0x01
    45b6:	5a 81       	ldd	r21, Y+2	; 0x02
    45b8:	6b 81       	ldd	r22, Y+3	; 0x03
    45ba:	7c 81       	ldd	r23, Y+4	; 0x04
    45bc:	c8 01       	movw	r24, r16
    45be:	0e 94 da 21 	call	0x43b4	; 0x43b4 <_ZN5Print5printEmi>
    45c2:	9a 83       	std	Y+2, r25	; 0x02
    45c4:	89 83       	std	Y+1, r24	; 0x01
    45c6:	6e e2       	ldi	r22, 0x2E	; 46
    45c8:	c8 01       	movw	r24, r16
    45ca:	0e 94 ed 20 	call	0x41da	; 0x41da <_ZN5Print5printEc>
    45ce:	29 81       	ldd	r18, Y+1	; 0x01
    45d0:	3a 81       	ldd	r19, Y+2	; 0x02
    45d2:	82 0f       	add	r24, r18
    45d4:	93 1f       	adc	r25, r19
    45d6:	9c 01       	movw	r18, r24
    45d8:	2e 0d       	add	r18, r14
    45da:	3f 1d       	adc	r19, r15
    45dc:	3a 83       	std	Y+2, r19	; 0x02
    45de:	29 83       	std	Y+1, r18	; 0x01
    45e0:	a3 cf       	rjmp	.-186    	; 0x4528 <_ZN5Print10printFloatEdh+0x114>
    45e2:	20 e0       	ldi	r18, 0x00	; 0
    45e4:	30 e0       	ldi	r19, 0x00	; 0
    45e6:	40 e0       	ldi	r20, 0x00	; 0
    45e8:	5f e3       	ldi	r21, 0x3F	; 63
    45ea:	c5 01       	movw	r24, r10
    45ec:	b4 01       	movw	r22, r8
    45ee:	0e 94 95 1c 	call	0x392a	; 0x392a <__addsf3>
    45f2:	0e 94 19 28 	call	0x5032	; 0x5032 <__fixunssfsi>
    45f6:	ab 01       	movw	r20, r22
    45f8:	bc 01       	movw	r22, r24
    45fa:	2a e0       	ldi	r18, 0x0A	; 10
    45fc:	30 e0       	ldi	r19, 0x00	; 0
    45fe:	c8 01       	movw	r24, r16
    4600:	0e 94 da 21 	call	0x43b4	; 0x43b4 <_ZN5Print5printEmi>
    4604:	8e 0d       	add	r24, r14
    4606:	9f 1d       	adc	r25, r15
    4608:	0f 90       	pop	r0
    460a:	0f 90       	pop	r0
    460c:	0f 90       	pop	r0
    460e:	0f 90       	pop	r0
    4610:	df 91       	pop	r29
    4612:	cf 91       	pop	r28
    4614:	1f 91       	pop	r17
    4616:	0f 91       	pop	r16
    4618:	ff 90       	pop	r15
    461a:	ef 90       	pop	r14
    461c:	df 90       	pop	r13
    461e:	cf 90       	pop	r12
    4620:	bf 90       	pop	r11
    4622:	af 90       	pop	r10
    4624:	9f 90       	pop	r9
    4626:	8f 90       	pop	r8
    4628:	7f 90       	pop	r7
    462a:	08 95       	ret

0000462c <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    462c:	0f 93       	push	r16
    462e:	1f 93       	push	r17
    4630:	cf 93       	push	r28
    4632:	df 93       	push	r29
    4634:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    4636:	0e 94 0a 22 	call	0x4414	; 0x4414 <_ZN5Print10printFloatEdh>
    463a:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    463c:	ce 01       	movw	r24, r28
    463e:	0e 94 f5 20 	call	0x41ea	; 0x41ea <_ZN5Print7printlnEv>
  return n;
}
    4642:	80 0f       	add	r24, r16
    4644:	91 1f       	adc	r25, r17
    4646:	df 91       	pop	r29
    4648:	cf 91       	pop	r28
    464a:	1f 91       	pop	r17
    464c:	0f 91       	pop	r16
    464e:	08 95       	ret

00004650 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    4650:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <_ZN7TwoWire14rxBufferLengthE>
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	20 91 6d 02 	lds	r18, 0x026D	; 0x80026d <_ZN7TwoWire13rxBufferIndexE>
    465a:	82 1b       	sub	r24, r18
    465c:	91 09       	sbc	r25, r1
    465e:	08 95       	ret

00004660 <_ZN7TwoWire4readEv>:
    4660:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <_ZN7TwoWire13rxBufferIndexE>
    4664:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <_ZN7TwoWire14rxBufferLengthE>
    4668:	98 17       	cp	r25, r24
    466a:	50 f4       	brcc	.+20     	; 0x4680 <_ZN7TwoWire4readEv+0x20>
    466c:	e9 2f       	mov	r30, r25
    466e:	f0 e0       	ldi	r31, 0x00	; 0
    4670:	e2 59       	subi	r30, 0x92	; 146
    4672:	fd 4f       	sbci	r31, 0xFD	; 253
    4674:	20 81       	ld	r18, Z
    4676:	30 e0       	ldi	r19, 0x00	; 0
    4678:	9f 5f       	subi	r25, 0xFF	; 255
    467a:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <_ZN7TwoWire13rxBufferIndexE>
    467e:	02 c0       	rjmp	.+4      	; 0x4684 <_ZN7TwoWire4readEv+0x24>
    4680:	2f ef       	ldi	r18, 0xFF	; 255
    4682:	3f ef       	ldi	r19, 0xFF	; 255
    4684:	c9 01       	movw	r24, r18
    4686:	08 95       	ret

00004688 <_ZN7TwoWire4peekEv>:
    4688:	e0 91 6d 02 	lds	r30, 0x026D	; 0x80026d <_ZN7TwoWire13rxBufferIndexE>
    468c:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <_ZN7TwoWire14rxBufferLengthE>
    4690:	e8 17       	cp	r30, r24
    4692:	30 f4       	brcc	.+12     	; 0x46a0 <_ZN7TwoWire4peekEv+0x18>
    4694:	f0 e0       	ldi	r31, 0x00	; 0
    4696:	e2 59       	subi	r30, 0x92	; 146
    4698:	fd 4f       	sbci	r31, 0xFD	; 253
    469a:	80 81       	ld	r24, Z
    469c:	90 e0       	ldi	r25, 0x00	; 0
    469e:	08 95       	ret
    46a0:	8f ef       	ldi	r24, 0xFF	; 255
    46a2:	9f ef       	ldi	r25, 0xFF	; 255
    46a4:	08 95       	ret

000046a6 <_ZN7TwoWire5flushEv>:
    46a6:	08 95       	ret

000046a8 <_ZN7TwoWire5writeEPKhj>:
    46a8:	cf 92       	push	r12
    46aa:	df 92       	push	r13
    46ac:	ef 92       	push	r14
    46ae:	ff 92       	push	r15
    46b0:	0f 93       	push	r16
    46b2:	1f 93       	push	r17
    46b4:	cf 93       	push	r28
    46b6:	df 93       	push	r29
    46b8:	8c 01       	movw	r16, r24
    46ba:	cb 01       	movw	r24, r22
    46bc:	6a 01       	movw	r12, r20
    46be:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <_ZN7TwoWire12transmittingE>
    46c2:	22 23       	and	r18, r18
    46c4:	a1 f0       	breq	.+40     	; 0x46ee <_ZN7TwoWire5writeEPKhj+0x46>
    46c6:	41 15       	cp	r20, r1
    46c8:	51 05       	cpc	r21, r1
    46ca:	a1 f0       	breq	.+40     	; 0x46f4 <_ZN7TwoWire5writeEPKhj+0x4c>
    46cc:	eb 01       	movw	r28, r22
    46ce:	7b 01       	movw	r14, r22
    46d0:	e4 0e       	add	r14, r20
    46d2:	f5 1e       	adc	r15, r21
    46d4:	69 91       	ld	r22, Y+
    46d6:	d8 01       	movw	r26, r16
    46d8:	ed 91       	ld	r30, X+
    46da:	fc 91       	ld	r31, X
    46dc:	01 90       	ld	r0, Z+
    46de:	f0 81       	ld	r31, Z
    46e0:	e0 2d       	mov	r30, r0
    46e2:	c8 01       	movw	r24, r16
    46e4:	09 95       	icall
    46e6:	ce 15       	cp	r28, r14
    46e8:	df 05       	cpc	r29, r15
    46ea:	a1 f7       	brne	.-24     	; 0x46d4 <_ZN7TwoWire5writeEPKhj+0x2c>
    46ec:	03 c0       	rjmp	.+6      	; 0x46f4 <_ZN7TwoWire5writeEPKhj+0x4c>
    46ee:	64 2f       	mov	r22, r20
    46f0:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <twi_transmit>
    46f4:	c6 01       	movw	r24, r12
    46f6:	df 91       	pop	r29
    46f8:	cf 91       	pop	r28
    46fa:	1f 91       	pop	r17
    46fc:	0f 91       	pop	r16
    46fe:	ff 90       	pop	r15
    4700:	ef 90       	pop	r14
    4702:	df 90       	pop	r13
    4704:	cf 90       	pop	r12
    4706:	08 95       	ret

00004708 <_ZN7TwoWire5writeEh>:
    4708:	cf 93       	push	r28
    470a:	df 93       	push	r29
    470c:	1f 92       	push	r1
    470e:	cd b7       	in	r28, 0x3d	; 61
    4710:	de b7       	in	r29, 0x3e	; 62
    4712:	fc 01       	movw	r30, r24
    4714:	69 83       	std	Y+1, r22	; 0x01
    4716:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <_ZN7TwoWire12transmittingE>
    471a:	99 23       	and	r25, r25
    471c:	d9 f0       	breq	.+54     	; 0x4754 <_ZN7TwoWire5writeEh+0x4c>
    471e:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <_ZN7TwoWire14txBufferLengthE>
    4722:	90 32       	cpi	r25, 0x20	; 32
    4724:	38 f0       	brcs	.+14     	; 0x4734 <_ZN7TwoWire5writeEh+0x2c>
    4726:	81 e0       	ldi	r24, 0x01	; 1
    4728:	90 e0       	ldi	r25, 0x00	; 0
    472a:	93 83       	std	Z+3, r25	; 0x03
    472c:	82 83       	std	Z+2, r24	; 0x02
    472e:	80 e0       	ldi	r24, 0x00	; 0
    4730:	90 e0       	ldi	r25, 0x00	; 0
    4732:	17 c0       	rjmp	.+46     	; 0x4762 <_ZN7TwoWire5writeEh+0x5a>
    4734:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <_ZN7TwoWire13txBufferIndexE>
    4738:	e8 2f       	mov	r30, r24
    473a:	f0 e0       	ldi	r31, 0x00	; 0
    473c:	e5 5b       	subi	r30, 0xB5	; 181
    473e:	fd 4f       	sbci	r31, 0xFD	; 253
    4740:	99 81       	ldd	r25, Y+1	; 0x01
    4742:	90 83       	st	Z, r25
    4744:	8f 5f       	subi	r24, 0xFF	; 255
    4746:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <_ZN7TwoWire13txBufferIndexE>
    474a:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <_ZN7TwoWire14txBufferLengthE>
    474e:	81 e0       	ldi	r24, 0x01	; 1
    4750:	90 e0       	ldi	r25, 0x00	; 0
    4752:	07 c0       	rjmp	.+14     	; 0x4762 <_ZN7TwoWire5writeEh+0x5a>
    4754:	61 e0       	ldi	r22, 0x01	; 1
    4756:	ce 01       	movw	r24, r28
    4758:	01 96       	adiw	r24, 0x01	; 1
    475a:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <twi_transmit>
    475e:	81 e0       	ldi	r24, 0x01	; 1
    4760:	90 e0       	ldi	r25, 0x00	; 0
    4762:	0f 90       	pop	r0
    4764:	df 91       	pop	r29
    4766:	cf 91       	pop	r28
    4768:	08 95       	ret

0000476a <_ZN7TwoWireC1Ev>:
    476a:	fc 01       	movw	r30, r24
    476c:	13 82       	std	Z+3, r1	; 0x03
    476e:	12 82       	std	Z+2, r1	; 0x02
    4770:	88 ee       	ldi	r24, 0xE8	; 232
    4772:	93 e0       	ldi	r25, 0x03	; 3
    4774:	a0 e0       	ldi	r26, 0x00	; 0
    4776:	b0 e0       	ldi	r27, 0x00	; 0
    4778:	84 83       	std	Z+4, r24	; 0x04
    477a:	95 83       	std	Z+5, r25	; 0x05
    477c:	a6 83       	std	Z+6, r26	; 0x06
    477e:	b7 83       	std	Z+7, r27	; 0x07
    4780:	8c e2       	ldi	r24, 0x2C	; 44
    4782:	91 e0       	ldi	r25, 0x01	; 1
    4784:	91 83       	std	Z+1, r25	; 0x01
    4786:	80 83       	st	Z, r24
    4788:	08 95       	ret

0000478a <_ZN7TwoWire5beginEv>:
    478a:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <_ZN7TwoWire13rxBufferIndexE>
    478e:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <_ZN7TwoWire14rxBufferLengthE>
    4792:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <_ZN7TwoWire13txBufferIndexE>
    4796:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <_ZN7TwoWire14txBufferLengthE>
    479a:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <twi_init>
    479e:	08 95       	ret

000047a0 <_ZN7TwoWire17beginTransmissionEh>:
    47a0:	81 e0       	ldi	r24, 0x01	; 1
    47a2:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <_ZN7TwoWire12transmittingE>
    47a6:	60 93 6b 02 	sts	0x026B, r22	; 0x80026b <_ZN7TwoWire9txAddressE>
    47aa:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <_ZN7TwoWire13txBufferIndexE>
    47ae:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <_ZN7TwoWire14txBufferLengthE>
    47b2:	08 95       	ret

000047b4 <_ZN7TwoWire17beginTransmissionEi>:
    47b4:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <_ZN7TwoWire17beginTransmissionEh>
    47b8:	08 95       	ret

000047ba <_ZN7TwoWire15endTransmissionEh>:
    47ba:	0f 93       	push	r16
    47bc:	06 2f       	mov	r16, r22
    47be:	21 e0       	ldi	r18, 0x01	; 1
    47c0:	40 91 49 02 	lds	r20, 0x0249	; 0x800249 <_ZN7TwoWire14txBufferLengthE>
    47c4:	6b e4       	ldi	r22, 0x4B	; 75
    47c6:	72 e0       	ldi	r23, 0x02	; 2
    47c8:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <_ZN7TwoWire9txAddressE>
    47cc:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <twi_writeTo>
    47d0:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <_ZN7TwoWire13txBufferIndexE>
    47d4:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <_ZN7TwoWire14txBufferLengthE>
    47d8:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <_ZN7TwoWire12transmittingE>
    47dc:	0f 91       	pop	r16
    47de:	08 95       	ret

000047e0 <_ZN7TwoWire11requestFromEhhmhh>:
    47e0:	4f 92       	push	r4
    47e2:	5f 92       	push	r5
    47e4:	6f 92       	push	r6
    47e6:	7f 92       	push	r7
    47e8:	af 92       	push	r10
    47ea:	bf 92       	push	r11
    47ec:	cf 92       	push	r12
    47ee:	ef 92       	push	r14
    47f0:	ff 92       	push	r15
    47f2:	0f 93       	push	r16
    47f4:	1f 93       	push	r17
    47f6:	cf 93       	push	r28
    47f8:	df 93       	push	r29
    47fa:	5c 01       	movw	r10, r24
    47fc:	f6 2e       	mov	r15, r22
    47fe:	d4 2f       	mov	r29, r20
    4800:	28 01       	movw	r4, r16
    4802:	39 01       	movw	r6, r18
    4804:	ee 20       	and	r14, r14
    4806:	49 f1       	breq	.+82     	; 0x485a <_ZN7TwoWire11requestFromEhhmhh+0x7a>
    4808:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <_ZN7TwoWire17beginTransmissionEh>
    480c:	8e 2d       	mov	r24, r14
    480e:	84 30       	cpi	r24, 0x04	; 4
    4810:	08 f0       	brcs	.+2      	; 0x4814 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    4812:	83 e0       	ldi	r24, 0x03	; 3
    4814:	cf ef       	ldi	r28, 0xFF	; 255
    4816:	c8 0f       	add	r28, r24
    4818:	88 23       	and	r24, r24
    481a:	d9 f0       	breq	.+54     	; 0x4852 <_ZN7TwoWire11requestFromEhhmhh+0x72>
    481c:	8c 2f       	mov	r24, r28
    481e:	88 0f       	add	r24, r24
    4820:	88 0f       	add	r24, r24
    4822:	88 0f       	add	r24, r24
    4824:	a3 01       	movw	r20, r6
    4826:	92 01       	movw	r18, r4
    4828:	04 c0       	rjmp	.+8      	; 0x4832 <_ZN7TwoWire11requestFromEhhmhh+0x52>
    482a:	56 95       	lsr	r21
    482c:	47 95       	ror	r20
    482e:	37 95       	ror	r19
    4830:	27 95       	ror	r18
    4832:	8a 95       	dec	r24
    4834:	d2 f7       	brpl	.-12     	; 0x482a <_ZN7TwoWire11requestFromEhhmhh+0x4a>
    4836:	ca 01       	movw	r24, r20
    4838:	b9 01       	movw	r22, r18
    483a:	d5 01       	movw	r26, r10
    483c:	ed 91       	ld	r30, X+
    483e:	fc 91       	ld	r31, X
    4840:	01 90       	ld	r0, Z+
    4842:	f0 81       	ld	r31, Z
    4844:	e0 2d       	mov	r30, r0
    4846:	c5 01       	movw	r24, r10
    4848:	09 95       	icall
    484a:	8c 2f       	mov	r24, r28
    484c:	c1 50       	subi	r28, 0x01	; 1
    484e:	81 11       	cpse	r24, r1
    4850:	e5 cf       	rjmp	.-54     	; 0x481c <_ZN7TwoWire11requestFromEhhmhh+0x3c>
    4852:	60 e0       	ldi	r22, 0x00	; 0
    4854:	c5 01       	movw	r24, r10
    4856:	0e 94 dd 23 	call	0x47ba	; 0x47ba <_ZN7TwoWire15endTransmissionEh>
    485a:	4d 2f       	mov	r20, r29
    485c:	d1 32       	cpi	r29, 0x21	; 33
    485e:	08 f0       	brcs	.+2      	; 0x4862 <_ZN7TwoWire11requestFromEhhmhh+0x82>
    4860:	40 e2       	ldi	r20, 0x20	; 32
    4862:	2c 2d       	mov	r18, r12
    4864:	6e e6       	ldi	r22, 0x6E	; 110
    4866:	72 e0       	ldi	r23, 0x02	; 2
    4868:	8f 2d       	mov	r24, r15
    486a:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <twi_readFrom>
    486e:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <_ZN7TwoWire13rxBufferIndexE>
    4872:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <_ZN7TwoWire14rxBufferLengthE>
    4876:	df 91       	pop	r29
    4878:	cf 91       	pop	r28
    487a:	1f 91       	pop	r17
    487c:	0f 91       	pop	r16
    487e:	ff 90       	pop	r15
    4880:	ef 90       	pop	r14
    4882:	cf 90       	pop	r12
    4884:	bf 90       	pop	r11
    4886:	af 90       	pop	r10
    4888:	7f 90       	pop	r7
    488a:	6f 90       	pop	r6
    488c:	5f 90       	pop	r5
    488e:	4f 90       	pop	r4
    4890:	08 95       	ret

00004892 <_ZN7TwoWire11requestFromEhhh>:
    4892:	cf 92       	push	r12
    4894:	ef 92       	push	r14
    4896:	0f 93       	push	r16
    4898:	1f 93       	push	r17
    489a:	c2 2e       	mov	r12, r18
    489c:	e1 2c       	mov	r14, r1
    489e:	00 e0       	ldi	r16, 0x00	; 0
    48a0:	10 e0       	ldi	r17, 0x00	; 0
    48a2:	98 01       	movw	r18, r16
    48a4:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <_ZN7TwoWire11requestFromEhhmhh>
    48a8:	1f 91       	pop	r17
    48aa:	0f 91       	pop	r16
    48ac:	ef 90       	pop	r14
    48ae:	cf 90       	pop	r12
    48b0:	08 95       	ret

000048b2 <_ZN7TwoWire11requestFromEii>:
    48b2:	21 e0       	ldi	r18, 0x01	; 1
    48b4:	0e 94 49 24 	call	0x4892	; 0x4892 <_ZN7TwoWire11requestFromEhhh>
    48b8:	08 95       	ret

000048ba <_ZN7TwoWire15endTransmissionEv>:
    48ba:	61 e0       	ldi	r22, 0x01	; 1
    48bc:	0e 94 dd 23 	call	0x47ba	; 0x47ba <_ZN7TwoWire15endTransmissionEh>
    48c0:	08 95       	ret

000048c2 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    48c2:	8c e3       	ldi	r24, 0x3C	; 60
    48c4:	92 e0       	ldi	r25, 0x02	; 2
    48c6:	0e 94 b5 23 	call	0x476a	; 0x476a <_ZN7TwoWireC1Ev>
    48ca:	08 95       	ret

000048cc <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    48cc:	1f 92       	push	r1
    48ce:	0f 92       	push	r0
    48d0:	0f b6       	in	r0, 0x3f	; 63
    48d2:	0f 92       	push	r0
    48d4:	11 24       	eor	r1, r1
    48d6:	2f 93       	push	r18
    48d8:	3f 93       	push	r19
    48da:	8f 93       	push	r24
    48dc:	9f 93       	push	r25
    48de:	af 93       	push	r26
    48e0:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    48e2:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <timer0_millis>
    48e6:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <timer0_millis+0x1>
    48ea:	a0 91 91 02 	lds	r26, 0x0291	; 0x800291 <timer0_millis+0x2>
    48ee:	b0 91 92 02 	lds	r27, 0x0292	; 0x800292 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    48f2:	30 91 8e 02 	lds	r19, 0x028E	; 0x80028e <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    48f6:	23 e0       	ldi	r18, 0x03	; 3
    48f8:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    48fa:	2d 37       	cpi	r18, 0x7D	; 125
    48fc:	20 f4       	brcc	.+8      	; 0x4906 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    48fe:	01 96       	adiw	r24, 0x01	; 1
    4900:	a1 1d       	adc	r26, r1
    4902:	b1 1d       	adc	r27, r1
    4904:	05 c0       	rjmp	.+10     	; 0x4910 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    4906:	26 e8       	ldi	r18, 0x86	; 134
    4908:	23 0f       	add	r18, r19
		m += 1;
    490a:	02 96       	adiw	r24, 0x02	; 2
    490c:	a1 1d       	adc	r26, r1
    490e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    4910:	20 93 8e 02 	sts	0x028E, r18	; 0x80028e <timer0_fract>
	timer0_millis = m;
    4914:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <timer0_millis>
    4918:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <timer0_millis+0x1>
    491c:	a0 93 91 02 	sts	0x0291, r26	; 0x800291 <timer0_millis+0x2>
    4920:	b0 93 92 02 	sts	0x0292, r27	; 0x800292 <timer0_millis+0x3>
	timer0_overflow_count++;
    4924:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <timer0_overflow_count>
    4928:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <timer0_overflow_count+0x1>
    492c:	a0 91 95 02 	lds	r26, 0x0295	; 0x800295 <timer0_overflow_count+0x2>
    4930:	b0 91 96 02 	lds	r27, 0x0296	; 0x800296 <timer0_overflow_count+0x3>
    4934:	01 96       	adiw	r24, 0x01	; 1
    4936:	a1 1d       	adc	r26, r1
    4938:	b1 1d       	adc	r27, r1
    493a:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <timer0_overflow_count>
    493e:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <timer0_overflow_count+0x1>
    4942:	a0 93 95 02 	sts	0x0295, r26	; 0x800295 <timer0_overflow_count+0x2>
    4946:	b0 93 96 02 	sts	0x0296, r27	; 0x800296 <timer0_overflow_count+0x3>
}
    494a:	bf 91       	pop	r27
    494c:	af 91       	pop	r26
    494e:	9f 91       	pop	r25
    4950:	8f 91       	pop	r24
    4952:	3f 91       	pop	r19
    4954:	2f 91       	pop	r18
    4956:	0f 90       	pop	r0
    4958:	0f be       	out	0x3f, r0	; 63
    495a:	0f 90       	pop	r0
    495c:	1f 90       	pop	r1
    495e:	18 95       	reti

00004960 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    4960:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    4962:	f8 94       	cli
	m = timer0_millis;
    4964:	60 91 8f 02 	lds	r22, 0x028F	; 0x80028f <timer0_millis>
    4968:	70 91 90 02 	lds	r23, 0x0290	; 0x800290 <timer0_millis+0x1>
    496c:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <timer0_millis+0x2>
    4970:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <timer0_millis+0x3>
	SREG = oldSREG;
    4974:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    4976:	08 95       	ret

00004978 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    4978:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    497a:	f8 94       	cli
	m = timer0_overflow_count;
    497c:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <timer0_overflow_count>
    4980:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <timer0_overflow_count+0x1>
    4984:	a0 91 95 02 	lds	r26, 0x0295	; 0x800295 <timer0_overflow_count+0x2>
    4988:	b0 91 96 02 	lds	r27, 0x0296	; 0x800296 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    498c:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    498e:	a8 9b       	sbis	0x15, 0	; 21
    4990:	05 c0       	rjmp	.+10     	; 0x499c <micros+0x24>
    4992:	2f 3f       	cpi	r18, 0xFF	; 255
    4994:	19 f0       	breq	.+6      	; 0x499c <micros+0x24>
		m++;
    4996:	01 96       	adiw	r24, 0x01	; 1
    4998:	a1 1d       	adc	r26, r1
    499a:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    499c:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    499e:	ba 2f       	mov	r27, r26
    49a0:	a9 2f       	mov	r26, r25
    49a2:	98 2f       	mov	r25, r24
    49a4:	88 27       	eor	r24, r24
    49a6:	82 0f       	add	r24, r18
    49a8:	91 1d       	adc	r25, r1
    49aa:	a1 1d       	adc	r26, r1
    49ac:	b1 1d       	adc	r27, r1
    49ae:	bc 01       	movw	r22, r24
    49b0:	cd 01       	movw	r24, r26
    49b2:	42 e0       	ldi	r20, 0x02	; 2
    49b4:	66 0f       	add	r22, r22
    49b6:	77 1f       	adc	r23, r23
    49b8:	88 1f       	adc	r24, r24
    49ba:	99 1f       	adc	r25, r25
    49bc:	4a 95       	dec	r20
    49be:	d1 f7       	brne	.-12     	; 0x49b4 <micros+0x3c>
}
    49c0:	08 95       	ret

000049c2 <delay>:

void delay(unsigned long ms)
{
    49c2:	8f 92       	push	r8
    49c4:	9f 92       	push	r9
    49c6:	af 92       	push	r10
    49c8:	bf 92       	push	r11
    49ca:	cf 92       	push	r12
    49cc:	df 92       	push	r13
    49ce:	ef 92       	push	r14
    49d0:	ff 92       	push	r15
    49d2:	6b 01       	movw	r12, r22
    49d4:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    49d6:	0e 94 bc 24 	call	0x4978	; 0x4978 <micros>
    49da:	4b 01       	movw	r8, r22
    49dc:	5c 01       	movw	r10, r24

	while (ms > 0) {
    49de:	c1 14       	cp	r12, r1
    49e0:	d1 04       	cpc	r13, r1
    49e2:	e1 04       	cpc	r14, r1
    49e4:	f1 04       	cpc	r15, r1
    49e6:	01 f1       	breq	.+64     	; 0x4a28 <delay+0x66>
		yield();
    49e8:	0e 94 f7 25 	call	0x4bee	; 0x4bee <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    49ec:	0e 94 bc 24 	call	0x4978	; 0x4978 <micros>
    49f0:	dc 01       	movw	r26, r24
    49f2:	cb 01       	movw	r24, r22
    49f4:	88 19       	sub	r24, r8
    49f6:	99 09       	sbc	r25, r9
    49f8:	aa 09       	sbc	r26, r10
    49fa:	bb 09       	sbc	r27, r11
    49fc:	88 3e       	cpi	r24, 0xE8	; 232
    49fe:	93 40       	sbci	r25, 0x03	; 3
    4a00:	a1 05       	cpc	r26, r1
    4a02:	b1 05       	cpc	r27, r1
    4a04:	60 f3       	brcs	.-40     	; 0x49de <delay+0x1c>
			ms--;
    4a06:	21 e0       	ldi	r18, 0x01	; 1
    4a08:	c2 1a       	sub	r12, r18
    4a0a:	d1 08       	sbc	r13, r1
    4a0c:	e1 08       	sbc	r14, r1
    4a0e:	f1 08       	sbc	r15, r1
			start += 1000;
    4a10:	88 ee       	ldi	r24, 0xE8	; 232
    4a12:	88 0e       	add	r8, r24
    4a14:	83 e0       	ldi	r24, 0x03	; 3
    4a16:	98 1e       	adc	r9, r24
    4a18:	a1 1c       	adc	r10, r1
    4a1a:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    4a1c:	c1 14       	cp	r12, r1
    4a1e:	d1 04       	cpc	r13, r1
    4a20:	e1 04       	cpc	r14, r1
    4a22:	f1 04       	cpc	r15, r1
    4a24:	19 f7       	brne	.-58     	; 0x49ec <delay+0x2a>
    4a26:	db cf       	rjmp	.-74     	; 0x49de <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    4a28:	ff 90       	pop	r15
    4a2a:	ef 90       	pop	r14
    4a2c:	df 90       	pop	r13
    4a2e:	cf 90       	pop	r12
    4a30:	bf 90       	pop	r11
    4a32:	af 90       	pop	r10
    4a34:	9f 90       	pop	r9
    4a36:	8f 90       	pop	r8
    4a38:	08 95       	ret

00004a3a <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    4a3a:	82 30       	cpi	r24, 0x02	; 2
    4a3c:	91 05       	cpc	r25, r1
    4a3e:	38 f0       	brcs	.+14     	; 0x4a4e <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    4a40:	88 0f       	add	r24, r24
    4a42:	99 1f       	adc	r25, r25
    4a44:	88 0f       	add	r24, r24
    4a46:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    4a48:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    4a4a:	01 97       	sbiw	r24, 0x01	; 1
    4a4c:	f1 f7       	brne	.-4      	; 0x4a4a <delayMicroseconds+0x10>
    4a4e:	08 95       	ret

00004a50 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    4a50:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    4a52:	84 b5       	in	r24, 0x24	; 36
    4a54:	82 60       	ori	r24, 0x02	; 2
    4a56:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    4a58:	84 b5       	in	r24, 0x24	; 36
    4a5a:	81 60       	ori	r24, 0x01	; 1
    4a5c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    4a5e:	85 b5       	in	r24, 0x25	; 37
    4a60:	82 60       	ori	r24, 0x02	; 2
    4a62:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    4a64:	85 b5       	in	r24, 0x25	; 37
    4a66:	81 60       	ori	r24, 0x01	; 1
    4a68:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    4a6a:	ee e6       	ldi	r30, 0x6E	; 110
    4a6c:	f0 e0       	ldi	r31, 0x00	; 0
    4a6e:	80 81       	ld	r24, Z
    4a70:	81 60       	ori	r24, 0x01	; 1
    4a72:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    4a74:	e1 e8       	ldi	r30, 0x81	; 129
    4a76:	f0 e0       	ldi	r31, 0x00	; 0
    4a78:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    4a7a:	80 81       	ld	r24, Z
    4a7c:	82 60       	ori	r24, 0x02	; 2
    4a7e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    4a80:	80 81       	ld	r24, Z
    4a82:	81 60       	ori	r24, 0x01	; 1
    4a84:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    4a86:	e0 e8       	ldi	r30, 0x80	; 128
    4a88:	f0 e0       	ldi	r31, 0x00	; 0
    4a8a:	80 81       	ld	r24, Z
    4a8c:	81 60       	ori	r24, 0x01	; 1
    4a8e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    4a90:	e1 eb       	ldi	r30, 0xB1	; 177
    4a92:	f0 e0       	ldi	r31, 0x00	; 0
    4a94:	80 81       	ld	r24, Z
    4a96:	84 60       	ori	r24, 0x04	; 4
    4a98:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    4a9a:	e0 eb       	ldi	r30, 0xB0	; 176
    4a9c:	f0 e0       	ldi	r31, 0x00	; 0
    4a9e:	80 81       	ld	r24, Z
    4aa0:	81 60       	ori	r24, 0x01	; 1
    4aa2:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    4aa4:	ea e7       	ldi	r30, 0x7A	; 122
    4aa6:	f0 e0       	ldi	r31, 0x00	; 0
    4aa8:	80 81       	ld	r24, Z
    4aaa:	84 60       	ori	r24, 0x04	; 4
    4aac:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    4aae:	80 81       	ld	r24, Z
    4ab0:	82 60       	ori	r24, 0x02	; 2
    4ab2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    4ab4:	80 81       	ld	r24, Z
    4ab6:	81 60       	ori	r24, 0x01	; 1
    4ab8:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    4aba:	80 81       	ld	r24, Z
    4abc:	80 68       	ori	r24, 0x80	; 128
    4abe:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    4ac0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    4ac4:	08 95       	ret

00004ac6 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    4ac6:	83 30       	cpi	r24, 0x03	; 3
    4ac8:	81 f0       	breq	.+32     	; 0x4aea <turnOffPWM+0x24>
    4aca:	28 f4       	brcc	.+10     	; 0x4ad6 <turnOffPWM+0x10>
    4acc:	81 30       	cpi	r24, 0x01	; 1
    4ace:	99 f0       	breq	.+38     	; 0x4af6 <turnOffPWM+0x30>
    4ad0:	82 30       	cpi	r24, 0x02	; 2
    4ad2:	a1 f0       	breq	.+40     	; 0x4afc <turnOffPWM+0x36>
    4ad4:	08 95       	ret
    4ad6:	87 30       	cpi	r24, 0x07	; 7
    4ad8:	a9 f0       	breq	.+42     	; 0x4b04 <turnOffPWM+0x3e>
    4ada:	88 30       	cpi	r24, 0x08	; 8
    4adc:	b9 f0       	breq	.+46     	; 0x4b0c <turnOffPWM+0x46>
    4ade:	84 30       	cpi	r24, 0x04	; 4
    4ae0:	d1 f4       	brne	.+52     	; 0x4b16 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4ae2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4ae6:	8f 7d       	andi	r24, 0xDF	; 223
    4ae8:	03 c0       	rjmp	.+6      	; 0x4af0 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    4aea:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4aee:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4af0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4af4:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    4af6:	84 b5       	in	r24, 0x24	; 36
    4af8:	8f 77       	andi	r24, 0x7F	; 127
    4afa:	02 c0       	rjmp	.+4      	; 0x4b00 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    4afc:	84 b5       	in	r24, 0x24	; 36
    4afe:	8f 7d       	andi	r24, 0xDF	; 223
    4b00:	84 bd       	out	0x24, r24	; 36
    4b02:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    4b04:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    4b08:	8f 77       	andi	r24, 0x7F	; 127
    4b0a:	03 c0       	rjmp	.+6      	; 0x4b12 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    4b0c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    4b10:	8f 7d       	andi	r24, 0xDF	; 223
    4b12:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    4b16:	08 95       	ret

00004b18 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    4b18:	cf 93       	push	r28
    4b1a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    4b1c:	90 e0       	ldi	r25, 0x00	; 0
    4b1e:	fc 01       	movw	r30, r24
    4b20:	e8 55       	subi	r30, 0x58	; 88
    4b22:	fe 4e       	sbci	r31, 0xEE	; 238
    4b24:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    4b26:	fc 01       	movw	r30, r24
    4b28:	e4 54       	subi	r30, 0x44	; 68
    4b2a:	fe 4e       	sbci	r31, 0xEE	; 238
    4b2c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    4b2e:	88 23       	and	r24, r24
    4b30:	61 f1       	breq	.+88     	; 0x4b8a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    4b32:	90 e0       	ldi	r25, 0x00	; 0
    4b34:	88 0f       	add	r24, r24
    4b36:	99 1f       	adc	r25, r25
    4b38:	fc 01       	movw	r30, r24
    4b3a:	e6 52       	subi	r30, 0x26	; 38
    4b3c:	fe 4e       	sbci	r31, 0xEE	; 238
    4b3e:	c5 91       	lpm	r28, Z+
    4b40:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    4b42:	fc 01       	movw	r30, r24
    4b44:	e0 53       	subi	r30, 0x30	; 48
    4b46:	fe 4e       	sbci	r31, 0xEE	; 238
    4b48:	a5 91       	lpm	r26, Z+
    4b4a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    4b4c:	61 11       	cpse	r22, r1
    4b4e:	09 c0       	rjmp	.+18     	; 0x4b62 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    4b50:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4b52:	f8 94       	cli
		*reg &= ~bit;
    4b54:	88 81       	ld	r24, Y
    4b56:	20 95       	com	r18
    4b58:	82 23       	and	r24, r18
    4b5a:	88 83       	st	Y, r24
		*out &= ~bit;
    4b5c:	ec 91       	ld	r30, X
    4b5e:	2e 23       	and	r18, r30
    4b60:	0b c0       	rjmp	.+22     	; 0x4b78 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    4b62:	62 30       	cpi	r22, 0x02	; 2
    4b64:	61 f4       	brne	.+24     	; 0x4b7e <pinMode+0x66>
		uint8_t oldSREG = SREG;
    4b66:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4b68:	f8 94       	cli
		*reg &= ~bit;
    4b6a:	88 81       	ld	r24, Y
    4b6c:	32 2f       	mov	r19, r18
    4b6e:	30 95       	com	r19
    4b70:	83 23       	and	r24, r19
    4b72:	88 83       	st	Y, r24
		*out |= bit;
    4b74:	ec 91       	ld	r30, X
    4b76:	2e 2b       	or	r18, r30
    4b78:	2c 93       	st	X, r18
		SREG = oldSREG;
    4b7a:	9f bf       	out	0x3f, r25	; 63
    4b7c:	06 c0       	rjmp	.+12     	; 0x4b8a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    4b7e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    4b80:	f8 94       	cli
		*reg |= bit;
    4b82:	e8 81       	ld	r30, Y
    4b84:	2e 2b       	or	r18, r30
    4b86:	28 83       	st	Y, r18
		SREG = oldSREG;
    4b88:	8f bf       	out	0x3f, r24	; 63
	}
}
    4b8a:	df 91       	pop	r29
    4b8c:	cf 91       	pop	r28
    4b8e:	08 95       	ret

00004b90 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    4b90:	1f 93       	push	r17
    4b92:	cf 93       	push	r28
    4b94:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    4b96:	28 2f       	mov	r18, r24
    4b98:	30 e0       	ldi	r19, 0x00	; 0
    4b9a:	f9 01       	movw	r30, r18
    4b9c:	ec 56       	subi	r30, 0x6C	; 108
    4b9e:	fe 4e       	sbci	r31, 0xEE	; 238
    4ba0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    4ba2:	f9 01       	movw	r30, r18
    4ba4:	e8 55       	subi	r30, 0x58	; 88
    4ba6:	fe 4e       	sbci	r31, 0xEE	; 238
    4ba8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    4baa:	f9 01       	movw	r30, r18
    4bac:	e4 54       	subi	r30, 0x44	; 68
    4bae:	fe 4e       	sbci	r31, 0xEE	; 238
    4bb0:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    4bb2:	cc 23       	and	r28, r28
    4bb4:	c1 f0       	breq	.+48     	; 0x4be6 <digitalWrite+0x56>
    4bb6:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4bb8:	81 11       	cpse	r24, r1
    4bba:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <turnOffPWM>

	out = portOutputRegister(port);
    4bbe:	ec 2f       	mov	r30, r28
    4bc0:	f0 e0       	ldi	r31, 0x00	; 0
    4bc2:	ee 0f       	add	r30, r30
    4bc4:	ff 1f       	adc	r31, r31
    4bc6:	e0 53       	subi	r30, 0x30	; 48
    4bc8:	fe 4e       	sbci	r31, 0xEE	; 238
    4bca:	a5 91       	lpm	r26, Z+
    4bcc:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    4bce:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4bd0:	f8 94       	cli

	if (val == LOW) {
    4bd2:	11 11       	cpse	r17, r1
    4bd4:	04 c0       	rjmp	.+8      	; 0x4bde <digitalWrite+0x4e>
		*out &= ~bit;
    4bd6:	8c 91       	ld	r24, X
    4bd8:	d0 95       	com	r29
    4bda:	d8 23       	and	r29, r24
    4bdc:	02 c0       	rjmp	.+4      	; 0x4be2 <digitalWrite+0x52>
	} else {
		*out |= bit;
    4bde:	ec 91       	ld	r30, X
    4be0:	de 2b       	or	r29, r30
    4be2:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    4be4:	9f bf       	out	0x3f, r25	; 63
}
    4be6:	df 91       	pop	r29
    4be8:	cf 91       	pop	r28
    4bea:	1f 91       	pop	r17
    4bec:	08 95       	ret

00004bee <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    4bee:	08 95       	ret

00004bf0 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4bf0:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <twi_state>
    4bf4:	81 e0       	ldi	r24, 0x01	; 1
    4bf6:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <twi_sendStop>
    4bfa:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <twi_inRepStart>
    4bfe:	61 e0       	ldi	r22, 0x01	; 1
    4c00:	82 e1       	ldi	r24, 0x12	; 18
    4c02:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <digitalWrite>
    4c06:	61 e0       	ldi	r22, 0x01	; 1
    4c08:	83 e1       	ldi	r24, 0x13	; 19
    4c0a:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <digitalWrite>
    4c0e:	e9 eb       	ldi	r30, 0xB9	; 185
    4c10:	f0 e0       	ldi	r31, 0x00	; 0
    4c12:	80 81       	ld	r24, Z
    4c14:	8e 7f       	andi	r24, 0xFE	; 254
    4c16:	80 83       	st	Z, r24
    4c18:	80 81       	ld	r24, Z
    4c1a:	8d 7f       	andi	r24, 0xFD	; 253
    4c1c:	80 83       	st	Z, r24
    4c1e:	88 e4       	ldi	r24, 0x48	; 72
    4c20:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    4c24:	85 e4       	ldi	r24, 0x45	; 69
    4c26:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4c2a:	08 95       	ret

00004c2c <twi_readFrom>:
    4c2c:	41 32       	cpi	r20, 0x21	; 33
    4c2e:	08 f0       	brcs	.+2      	; 0x4c32 <twi_readFrom+0x6>
    4c30:	43 c0       	rjmp	.+134    	; 0x4cb8 <twi_readFrom+0x8c>
    4c32:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <twi_state>
    4c36:	91 11       	cpse	r25, r1
    4c38:	fc cf       	rjmp	.-8      	; 0x4c32 <twi_readFrom+0x6>
    4c3a:	91 e0       	ldi	r25, 0x01	; 1
    4c3c:	90 93 04 03 	sts	0x0304, r25	; 0x800304 <twi_state>
    4c40:	20 93 02 03 	sts	0x0302, r18	; 0x800302 <twi_sendStop>
    4c44:	2f ef       	ldi	r18, 0xFF	; 255
    4c46:	20 93 97 02 	sts	0x0297, r18	; 0x800297 <twi_error>
    4c4a:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <twi_masterBufferIndex>
    4c4e:	24 0f       	add	r18, r20
    4c50:	20 93 db 02 	sts	0x02DB, r18	; 0x8002db <twi_masterBufferLength>
    4c54:	90 93 03 03 	sts	0x0303, r25	; 0x800303 <twi_slarw>
    4c58:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <twi_slarw>
    4c5c:	88 0f       	add	r24, r24
    4c5e:	89 2b       	or	r24, r25
    4c60:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <twi_slarw>
    4c64:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <twi_inRepStart>
    4c68:	81 30       	cpi	r24, 0x01	; 1
    4c6a:	61 f4       	brne	.+24     	; 0x4c84 <twi_readFrom+0x58>
    4c6c:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <twi_inRepStart>
    4c70:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <twi_slarw>
    4c74:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    4c78:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4c7c:	83 fd       	sbrc	r24, 3
    4c7e:	f8 cf       	rjmp	.-16     	; 0x4c70 <twi_readFrom+0x44>
    4c80:	85 ec       	ldi	r24, 0xC5	; 197
    4c82:	01 c0       	rjmp	.+2      	; 0x4c86 <twi_readFrom+0x5a>
    4c84:	85 ee       	ldi	r24, 0xE5	; 229
    4c86:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4c8a:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <twi_state>
    4c8e:	81 30       	cpi	r24, 0x01	; 1
    4c90:	e1 f3       	breq	.-8      	; 0x4c8a <twi_readFrom+0x5e>
    4c92:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <twi_masterBufferIndex>
    4c96:	84 17       	cp	r24, r20
    4c98:	10 f4       	brcc	.+4      	; 0x4c9e <twi_readFrom+0x72>
    4c9a:	40 91 dc 02 	lds	r20, 0x02DC	; 0x8002dc <twi_masterBufferIndex>
    4c9e:	ad ed       	ldi	r26, 0xDD	; 221
    4ca0:	b2 e0       	ldi	r27, 0x02	; 2
    4ca2:	96 2f       	mov	r25, r22
    4ca4:	fb 01       	movw	r30, r22
    4ca6:	8e 2f       	mov	r24, r30
    4ca8:	89 1b       	sub	r24, r25
    4caa:	84 17       	cp	r24, r20
    4cac:	18 f4       	brcc	.+6      	; 0x4cb4 <twi_readFrom+0x88>
    4cae:	8d 91       	ld	r24, X+
    4cb0:	81 93       	st	Z+, r24
    4cb2:	f9 cf       	rjmp	.-14     	; 0x4ca6 <twi_readFrom+0x7a>
    4cb4:	84 2f       	mov	r24, r20
    4cb6:	08 95       	ret
    4cb8:	80 e0       	ldi	r24, 0x00	; 0
    4cba:	08 95       	ret

00004cbc <twi_writeTo>:
    4cbc:	0f 93       	push	r16
    4cbe:	41 32       	cpi	r20, 0x21	; 33
    4cc0:	08 f0       	brcs	.+2      	; 0x4cc4 <twi_writeTo+0x8>
    4cc2:	4a c0       	rjmp	.+148    	; 0x4d58 <twi_writeTo+0x9c>
    4cc4:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <twi_state>
    4cc8:	91 11       	cpse	r25, r1
    4cca:	fc cf       	rjmp	.-8      	; 0x4cc4 <twi_writeTo+0x8>
    4ccc:	32 e0       	ldi	r19, 0x02	; 2
    4cce:	30 93 04 03 	sts	0x0304, r19	; 0x800304 <twi_state>
    4cd2:	00 93 02 03 	sts	0x0302, r16	; 0x800302 <twi_sendStop>
    4cd6:	3f ef       	ldi	r19, 0xFF	; 255
    4cd8:	30 93 97 02 	sts	0x0297, r19	; 0x800297 <twi_error>
    4cdc:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <twi_masterBufferIndex>
    4ce0:	40 93 db 02 	sts	0x02DB, r20	; 0x8002db <twi_masterBufferLength>
    4ce4:	56 2f       	mov	r21, r22
    4ce6:	ad ed       	ldi	r26, 0xDD	; 221
    4ce8:	b2 e0       	ldi	r27, 0x02	; 2
    4cea:	fb 01       	movw	r30, r22
    4cec:	3e 2f       	mov	r19, r30
    4cee:	35 1b       	sub	r19, r21
    4cf0:	34 17       	cp	r19, r20
    4cf2:	18 f4       	brcc	.+6      	; 0x4cfa <twi_writeTo+0x3e>
    4cf4:	31 91       	ld	r19, Z+
    4cf6:	3d 93       	st	X+, r19
    4cf8:	f9 cf       	rjmp	.-14     	; 0x4cec <twi_writeTo+0x30>
    4cfa:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <twi_slarw>
    4cfe:	30 91 03 03 	lds	r19, 0x0303	; 0x800303 <twi_slarw>
    4d02:	88 0f       	add	r24, r24
    4d04:	83 2b       	or	r24, r19
    4d06:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <twi_slarw>
    4d0a:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <twi_inRepStart>
    4d0e:	81 30       	cpi	r24, 0x01	; 1
    4d10:	61 f4       	brne	.+24     	; 0x4d2a <twi_writeTo+0x6e>
    4d12:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <twi_inRepStart>
    4d16:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <twi_slarw>
    4d1a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    4d1e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4d22:	83 fd       	sbrc	r24, 3
    4d24:	f8 cf       	rjmp	.-16     	; 0x4d16 <twi_writeTo+0x5a>
    4d26:	85 ec       	ldi	r24, 0xC5	; 197
    4d28:	01 c0       	rjmp	.+2      	; 0x4d2c <twi_writeTo+0x70>
    4d2a:	85 ee       	ldi	r24, 0xE5	; 229
    4d2c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4d30:	22 23       	and	r18, r18
    4d32:	21 f0       	breq	.+8      	; 0x4d3c <twi_writeTo+0x80>
    4d34:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <twi_state>
    4d38:	82 30       	cpi	r24, 0x02	; 2
    4d3a:	d1 f3       	breq	.-12     	; 0x4d30 <twi_writeTo+0x74>
    4d3c:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <twi_error>
    4d40:	8f 3f       	cpi	r24, 0xFF	; 255
    4d42:	79 f0       	breq	.+30     	; 0x4d62 <twi_writeTo+0xa6>
    4d44:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <twi_error>
    4d48:	80 32       	cpi	r24, 0x20	; 32
    4d4a:	41 f0       	breq	.+16     	; 0x4d5c <twi_writeTo+0xa0>
    4d4c:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <twi_error>
    4d50:	80 33       	cpi	r24, 0x30	; 48
    4d52:	31 f0       	breq	.+12     	; 0x4d60 <twi_writeTo+0xa4>
    4d54:	94 e0       	ldi	r25, 0x04	; 4
    4d56:	05 c0       	rjmp	.+10     	; 0x4d62 <twi_writeTo+0xa6>
    4d58:	91 e0       	ldi	r25, 0x01	; 1
    4d5a:	03 c0       	rjmp	.+6      	; 0x4d62 <twi_writeTo+0xa6>
    4d5c:	92 e0       	ldi	r25, 0x02	; 2
    4d5e:	01 c0       	rjmp	.+2      	; 0x4d62 <twi_writeTo+0xa6>
    4d60:	93 e0       	ldi	r25, 0x03	; 3
    4d62:	89 2f       	mov	r24, r25
    4d64:	0f 91       	pop	r16
    4d66:	08 95       	ret

00004d68 <twi_transmit>:
    4d68:	40 91 b9 02 	lds	r20, 0x02B9	; 0x8002b9 <twi_txBufferLength>
    4d6c:	26 2f       	mov	r18, r22
    4d6e:	30 e0       	ldi	r19, 0x00	; 0
    4d70:	24 0f       	add	r18, r20
    4d72:	31 1d       	adc	r19, r1
    4d74:	21 32       	cpi	r18, 0x21	; 33
    4d76:	31 05       	cpc	r19, r1
    4d78:	dc f4       	brge	.+54     	; 0x4db0 <twi_transmit+0x48>
    4d7a:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <twi_state>
    4d7e:	24 30       	cpi	r18, 0x04	; 4
    4d80:	c9 f4       	brne	.+50     	; 0x4db4 <twi_transmit+0x4c>
    4d82:	fc 01       	movw	r30, r24
    4d84:	80 e0       	ldi	r24, 0x00	; 0
    4d86:	90 e0       	ldi	r25, 0x00	; 0
    4d88:	86 17       	cp	r24, r22
    4d8a:	58 f4       	brcc	.+22     	; 0x4da2 <twi_transmit+0x3a>
    4d8c:	30 91 b9 02 	lds	r19, 0x02B9	; 0x8002b9 <twi_txBufferLength>
    4d90:	21 91       	ld	r18, Z+
    4d92:	dc 01       	movw	r26, r24
    4d94:	a5 54       	subi	r26, 0x45	; 69
    4d96:	bd 4f       	sbci	r27, 0xFD	; 253
    4d98:	a3 0f       	add	r26, r19
    4d9a:	b1 1d       	adc	r27, r1
    4d9c:	2c 93       	st	X, r18
    4d9e:	01 96       	adiw	r24, 0x01	; 1
    4da0:	f3 cf       	rjmp	.-26     	; 0x4d88 <twi_transmit+0x20>
    4da2:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <twi_txBufferLength>
    4da6:	68 0f       	add	r22, r24
    4da8:	60 93 b9 02 	sts	0x02B9, r22	; 0x8002b9 <twi_txBufferLength>
    4dac:	80 e0       	ldi	r24, 0x00	; 0
    4dae:	08 95       	ret
    4db0:	81 e0       	ldi	r24, 0x01	; 1
    4db2:	08 95       	ret
    4db4:	82 e0       	ldi	r24, 0x02	; 2
    4db6:	08 95       	ret

00004db8 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4db8:	85 ed       	ldi	r24, 0xD5	; 213
    4dba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4dbe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4dc2:	84 fd       	sbrc	r24, 4
    4dc4:	fc cf       	rjmp	.-8      	; 0x4dbe <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    4dc6:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <twi_state>
    4dca:	08 95       	ret

00004dcc <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    4dcc:	85 ec       	ldi	r24, 0xC5	; 197
    4dce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    4dd2:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <twi_state>
    4dd6:	08 95       	ret

00004dd8 <__vector_24>:
}

ISR(TWI_vect)
{
    4dd8:	1f 92       	push	r1
    4dda:	0f 92       	push	r0
    4ddc:	0f b6       	in	r0, 0x3f	; 63
    4dde:	0f 92       	push	r0
    4de0:	11 24       	eor	r1, r1
    4de2:	2f 93       	push	r18
    4de4:	3f 93       	push	r19
    4de6:	4f 93       	push	r20
    4de8:	5f 93       	push	r21
    4dea:	6f 93       	push	r22
    4dec:	7f 93       	push	r23
    4dee:	8f 93       	push	r24
    4df0:	9f 93       	push	r25
    4df2:	af 93       	push	r26
    4df4:	bf 93       	push	r27
    4df6:	ef 93       	push	r30
    4df8:	ff 93       	push	r31
  switch(TW_STATUS){
    4dfa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    4dfe:	88 7f       	andi	r24, 0xF8	; 248
    4e00:	80 36       	cpi	r24, 0x60	; 96
    4e02:	09 f4       	brne	.+2      	; 0x4e06 <__vector_24+0x2e>
    4e04:	9e c0       	rjmp	.+316    	; 0x4f42 <__vector_24+0x16a>
    4e06:	78 f5       	brcc	.+94     	; 0x4e66 <__vector_24+0x8e>
    4e08:	88 32       	cpi	r24, 0x28	; 40
    4e0a:	09 f4       	brne	.+2      	; 0x4e0e <__vector_24+0x36>
    4e0c:	5d c0       	rjmp	.+186    	; 0x4ec8 <__vector_24+0xf0>
    4e0e:	90 f4       	brcc	.+36     	; 0x4e34 <__vector_24+0x5c>
    4e10:	80 31       	cpi	r24, 0x10	; 16
    4e12:	09 f4       	brne	.+2      	; 0x4e16 <__vector_24+0x3e>
    4e14:	56 c0       	rjmp	.+172    	; 0x4ec2 <__vector_24+0xea>
    4e16:	38 f4       	brcc	.+14     	; 0x4e26 <__vector_24+0x4e>
    4e18:	88 23       	and	r24, r24
    4e1a:	09 f4       	brne	.+2      	; 0x4e1e <__vector_24+0x46>
    4e1c:	f5 c0       	rjmp	.+490    	; 0x5008 <__vector_24+0x230>
    4e1e:	88 30       	cpi	r24, 0x08	; 8
    4e20:	09 f4       	brne	.+2      	; 0x4e24 <__vector_24+0x4c>
    4e22:	4f c0       	rjmp	.+158    	; 0x4ec2 <__vector_24+0xea>
    4e24:	f5 c0       	rjmp	.+490    	; 0x5010 <__vector_24+0x238>
    4e26:	88 31       	cpi	r24, 0x18	; 24
    4e28:	09 f4       	brne	.+2      	; 0x4e2c <__vector_24+0x54>
    4e2a:	4e c0       	rjmp	.+156    	; 0x4ec8 <__vector_24+0xf0>
    4e2c:	80 32       	cpi	r24, 0x20	; 32
    4e2e:	09 f4       	brne	.+2      	; 0x4e32 <__vector_24+0x5a>
    4e30:	5f c0       	rjmp	.+190    	; 0x4ef0 <__vector_24+0x118>
    4e32:	ee c0       	rjmp	.+476    	; 0x5010 <__vector_24+0x238>
    4e34:	80 34       	cpi	r24, 0x40	; 64
    4e36:	09 f4       	brne	.+2      	; 0x4e3a <__vector_24+0x62>
    4e38:	6a c0       	rjmp	.+212    	; 0x4f0e <__vector_24+0x136>
    4e3a:	58 f4       	brcc	.+22     	; 0x4e52 <__vector_24+0x7a>
    4e3c:	80 33       	cpi	r24, 0x30	; 48
    4e3e:	09 f4       	brne	.+2      	; 0x4e42 <__vector_24+0x6a>
    4e40:	57 c0       	rjmp	.+174    	; 0x4ef0 <__vector_24+0x118>
    4e42:	88 33       	cpi	r24, 0x38	; 56
    4e44:	09 f0       	breq	.+2      	; 0x4e48 <__vector_24+0x70>
    4e46:	e4 c0       	rjmp	.+456    	; 0x5010 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4e48:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <twi_error>
      twi_releaseBus();
    4e4c:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <twi_releaseBus>
      break;
    4e50:	df c0       	rjmp	.+446    	; 0x5010 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4e52:	80 35       	cpi	r24, 0x50	; 80
    4e54:	09 f4       	brne	.+2      	; 0x4e58 <__vector_24+0x80>
    4e56:	4f c0       	rjmp	.+158    	; 0x4ef6 <__vector_24+0x11e>
    4e58:	88 35       	cpi	r24, 0x58	; 88
    4e5a:	09 f4       	brne	.+2      	; 0x4e5e <__vector_24+0x86>
    4e5c:	5d c0       	rjmp	.+186    	; 0x4f18 <__vector_24+0x140>
    4e5e:	88 34       	cpi	r24, 0x48	; 72
    4e60:	09 f0       	breq	.+2      	; 0x4e64 <__vector_24+0x8c>
    4e62:	d6 c0       	rjmp	.+428    	; 0x5010 <__vector_24+0x238>
    4e64:	d3 c0       	rjmp	.+422    	; 0x500c <__vector_24+0x234>
    4e66:	88 39       	cpi	r24, 0x98	; 152
    4e68:	09 f4       	brne	.+2      	; 0x4e6c <__vector_24+0x94>
    4e6a:	c4 c0       	rjmp	.+392    	; 0x4ff4 <__vector_24+0x21c>
    4e6c:	a8 f4       	brcc	.+42     	; 0x4e98 <__vector_24+0xc0>
    4e6e:	88 37       	cpi	r24, 0x78	; 120
    4e70:	09 f4       	brne	.+2      	; 0x4e74 <__vector_24+0x9c>
    4e72:	67 c0       	rjmp	.+206    	; 0x4f42 <__vector_24+0x16a>
    4e74:	38 f4       	brcc	.+14     	; 0x4e84 <__vector_24+0xac>
    4e76:	88 36       	cpi	r24, 0x68	; 104
    4e78:	09 f4       	brne	.+2      	; 0x4e7c <__vector_24+0xa4>
    4e7a:	63 c0       	rjmp	.+198    	; 0x4f42 <__vector_24+0x16a>
    4e7c:	80 37       	cpi	r24, 0x70	; 112
    4e7e:	09 f4       	brne	.+2      	; 0x4e82 <__vector_24+0xaa>
    4e80:	60 c0       	rjmp	.+192    	; 0x4f42 <__vector_24+0x16a>
    4e82:	c6 c0       	rjmp	.+396    	; 0x5010 <__vector_24+0x238>
    4e84:	88 38       	cpi	r24, 0x88	; 136
    4e86:	09 f4       	brne	.+2      	; 0x4e8a <__vector_24+0xb2>
    4e88:	b5 c0       	rjmp	.+362    	; 0x4ff4 <__vector_24+0x21c>
    4e8a:	80 39       	cpi	r24, 0x90	; 144
    4e8c:	09 f4       	brne	.+2      	; 0x4e90 <__vector_24+0xb8>
    4e8e:	5f c0       	rjmp	.+190    	; 0x4f4e <__vector_24+0x176>
    4e90:	80 38       	cpi	r24, 0x80	; 128
    4e92:	09 f0       	breq	.+2      	; 0x4e96 <__vector_24+0xbe>
    4e94:	bd c0       	rjmp	.+378    	; 0x5010 <__vector_24+0x238>
    4e96:	5b c0       	rjmp	.+182    	; 0x4f4e <__vector_24+0x176>
    4e98:	80 3b       	cpi	r24, 0xB0	; 176
    4e9a:	09 f4       	brne	.+2      	; 0x4e9e <__vector_24+0xc6>
    4e9c:	83 c0       	rjmp	.+262    	; 0x4fa4 <__vector_24+0x1cc>
    4e9e:	38 f4       	brcc	.+14     	; 0x4eae <__vector_24+0xd6>
    4ea0:	80 3a       	cpi	r24, 0xA0	; 160
    4ea2:	09 f4       	brne	.+2      	; 0x4ea6 <__vector_24+0xce>
    4ea4:	66 c0       	rjmp	.+204    	; 0x4f72 <__vector_24+0x19a>
    4ea6:	88 3a       	cpi	r24, 0xA8	; 168
    4ea8:	09 f4       	brne	.+2      	; 0x4eac <__vector_24+0xd4>
    4eaa:	7c c0       	rjmp	.+248    	; 0x4fa4 <__vector_24+0x1cc>
    4eac:	b1 c0       	rjmp	.+354    	; 0x5010 <__vector_24+0x238>
    4eae:	80 3c       	cpi	r24, 0xC0	; 192
    4eb0:	09 f4       	brne	.+2      	; 0x4eb4 <__vector_24+0xdc>
    4eb2:	a4 c0       	rjmp	.+328    	; 0x4ffc <__vector_24+0x224>
    4eb4:	88 3c       	cpi	r24, 0xC8	; 200
    4eb6:	09 f4       	brne	.+2      	; 0x4eba <__vector_24+0xe2>
    4eb8:	a1 c0       	rjmp	.+322    	; 0x4ffc <__vector_24+0x224>
    4eba:	88 3b       	cpi	r24, 0xB8	; 184
    4ebc:	09 f4       	brne	.+2      	; 0x4ec0 <__vector_24+0xe8>
    4ebe:	87 c0       	rjmp	.+270    	; 0x4fce <__vector_24+0x1f6>
    4ec0:	a7 c0       	rjmp	.+334    	; 0x5010 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4ec2:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <twi_slarw>
    4ec6:	10 c0       	rjmp	.+32     	; 0x4ee8 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4ec8:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <twi_masterBufferIndex>
    4ecc:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <twi_masterBufferLength>
    4ed0:	98 17       	cp	r25, r24
    4ed2:	70 f5       	brcc	.+92     	; 0x4f30 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4ed4:	e0 91 dc 02 	lds	r30, 0x02DC	; 0x8002dc <twi_masterBufferIndex>
    4ed8:	81 e0       	ldi	r24, 0x01	; 1
    4eda:	8e 0f       	add	r24, r30
    4edc:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <twi_masterBufferIndex>
    4ee0:	f0 e0       	ldi	r31, 0x00	; 0
    4ee2:	e3 52       	subi	r30, 0x23	; 35
    4ee4:	fd 4f       	sbci	r31, 0xFD	; 253
    4ee6:	80 81       	ld	r24, Z
    4ee8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4eec:	85 ec       	ldi	r24, 0xC5	; 197
    4eee:	83 c0       	rjmp	.+262    	; 0x4ff6 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4ef0:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <twi_error>
    4ef4:	8b c0       	rjmp	.+278    	; 0x500c <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4ef6:	e0 91 dc 02 	lds	r30, 0x02DC	; 0x8002dc <twi_masterBufferIndex>
    4efa:	81 e0       	ldi	r24, 0x01	; 1
    4efc:	8e 0f       	add	r24, r30
    4efe:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <twi_masterBufferIndex>
    4f02:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    4f06:	f0 e0       	ldi	r31, 0x00	; 0
    4f08:	e3 52       	subi	r30, 0x23	; 35
    4f0a:	fd 4f       	sbci	r31, 0xFD	; 253
    4f0c:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4f0e:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <twi_masterBufferIndex>
    4f12:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <twi_masterBufferLength>
    4f16:	6b c0       	rjmp	.+214    	; 0x4fee <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4f18:	e0 91 dc 02 	lds	r30, 0x02DC	; 0x8002dc <twi_masterBufferIndex>
    4f1c:	81 e0       	ldi	r24, 0x01	; 1
    4f1e:	8e 0f       	add	r24, r30
    4f20:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <twi_masterBufferIndex>
    4f24:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    4f28:	f0 e0       	ldi	r31, 0x00	; 0
    4f2a:	e3 52       	subi	r30, 0x23	; 35
    4f2c:	fd 4f       	sbci	r31, 0xFD	; 253
    4f2e:	80 83       	st	Z, r24
	if (twi_sendStop)
    4f30:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <twi_sendStop>
    4f34:	81 11       	cpse	r24, r1
    4f36:	6a c0       	rjmp	.+212    	; 0x500c <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    4f38:	81 e0       	ldi	r24, 0x01	; 1
    4f3a:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4f3e:	84 ea       	ldi	r24, 0xA4	; 164
    4f40:	5e c0       	rjmp	.+188    	; 0x4ffe <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4f42:	83 e0       	ldi	r24, 0x03	; 3
    4f44:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4f48:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <twi_rxBufferIndex>
    4f4c:	cf cf       	rjmp	.-98     	; 0x4eec <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4f4e:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <twi_rxBufferIndex>
    4f52:	80 32       	cpi	r24, 0x20	; 32
    4f54:	08 f0       	brcs	.+2      	; 0x4f58 <__vector_24+0x180>
    4f56:	4e c0       	rjmp	.+156    	; 0x4ff4 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    4f58:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <twi_rxBufferIndex>
    4f5c:	81 e0       	ldi	r24, 0x01	; 1
    4f5e:	8e 0f       	add	r24, r30
    4f60:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <twi_rxBufferIndex>
    4f64:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    4f68:	f0 e0       	ldi	r31, 0x00	; 0
    4f6a:	e7 56       	subi	r30, 0x67	; 103
    4f6c:	fd 4f       	sbci	r31, 0xFD	; 253
    4f6e:	80 83       	st	Z, r24
    4f70:	bd cf       	rjmp	.-134    	; 0x4eec <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    4f72:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4f76:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <twi_rxBufferIndex>
    4f7a:	80 32       	cpi	r24, 0x20	; 32
    4f7c:	30 f4       	brcc	.+12     	; 0x4f8a <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4f7e:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <twi_rxBufferIndex>
    4f82:	f0 e0       	ldi	r31, 0x00	; 0
    4f84:	e7 56       	subi	r30, 0x67	; 103
    4f86:	fd 4f       	sbci	r31, 0xFD	; 253
    4f88:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    4f8a:	60 91 98 02 	lds	r22, 0x0298	; 0x800298 <twi_rxBufferIndex>
    4f8e:	70 e0       	ldi	r23, 0x00	; 0
    4f90:	e0 91 fd 02 	lds	r30, 0x02FD	; 0x8002fd <twi_onSlaveReceive>
    4f94:	f0 91 fe 02 	lds	r31, 0x02FE	; 0x8002fe <twi_onSlaveReceive+0x1>
    4f98:	89 e9       	ldi	r24, 0x99	; 153
    4f9a:	92 e0       	ldi	r25, 0x02	; 2
    4f9c:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4f9e:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <twi_rxBufferIndex>
      break;
    4fa2:	36 c0       	rjmp	.+108    	; 0x5010 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4fa4:	84 e0       	ldi	r24, 0x04	; 4
    4fa6:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    4faa:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4fae:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4fb2:	e0 91 ff 02 	lds	r30, 0x02FF	; 0x8002ff <twi_onSlaveTransmit>
    4fb6:	f0 91 00 03 	lds	r31, 0x0300	; 0x800300 <twi_onSlaveTransmit+0x1>
    4fba:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4fbc:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <twi_txBufferLength>
    4fc0:	81 11       	cpse	r24, r1
    4fc2:	05 c0       	rjmp	.+10     	; 0x4fce <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    4fc4:	81 e0       	ldi	r24, 0x01	; 1
    4fc6:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    4fca:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4fce:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <twi_txBufferIndex>
    4fd2:	81 e0       	ldi	r24, 0x01	; 1
    4fd4:	8e 0f       	add	r24, r30
    4fd6:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <twi_txBufferIndex>
    4fda:	f0 e0       	ldi	r31, 0x00	; 0
    4fdc:	e5 54       	subi	r30, 0x45	; 69
    4fde:	fd 4f       	sbci	r31, 0xFD	; 253
    4fe0:	80 81       	ld	r24, Z
    4fe2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4fe6:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <twi_txBufferIndex>
    4fea:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <twi_txBufferLength>
    4fee:	98 17       	cp	r25, r24
    4ff0:	08 f4       	brcc	.+2      	; 0x4ff4 <__vector_24+0x21c>
    4ff2:	7c cf       	rjmp	.-264    	; 0x4eec <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4ff4:	85 e8       	ldi	r24, 0x85	; 133
    4ff6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4ffa:	0a c0       	rjmp	.+20     	; 0x5010 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4ffc:	85 ec       	ldi	r24, 0xC5	; 197
    4ffe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    5002:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <twi_state>
      break;
    5006:	04 c0       	rjmp	.+8      	; 0x5010 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    5008:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <twi_error>
      twi_stop();
    500c:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <twi_stop>
      break;
  }
}
    5010:	ff 91       	pop	r31
    5012:	ef 91       	pop	r30
    5014:	bf 91       	pop	r27
    5016:	af 91       	pop	r26
    5018:	9f 91       	pop	r25
    501a:	8f 91       	pop	r24
    501c:	7f 91       	pop	r23
    501e:	6f 91       	pop	r22
    5020:	5f 91       	pop	r21
    5022:	4f 91       	pop	r20
    5024:	3f 91       	pop	r19
    5026:	2f 91       	pop	r18
    5028:	0f 90       	pop	r0
    502a:	0f be       	out	0x3f, r0	; 63
    502c:	0f 90       	pop	r0
    502e:	1f 90       	pop	r1
    5030:	18 95       	reti

00005032 <__fixunssfsi>:
    5032:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <__fp_splitA>
    5036:	88 f0       	brcs	.+34     	; 0x505a <__fixunssfsi+0x28>
    5038:	9f 57       	subi	r25, 0x7F	; 127
    503a:	98 f0       	brcs	.+38     	; 0x5062 <__fixunssfsi+0x30>
    503c:	b9 2f       	mov	r27, r25
    503e:	99 27       	eor	r25, r25
    5040:	b7 51       	subi	r27, 0x17	; 23
    5042:	b0 f0       	brcs	.+44     	; 0x5070 <__fixunssfsi+0x3e>
    5044:	e1 f0       	breq	.+56     	; 0x507e <__fixunssfsi+0x4c>
    5046:	66 0f       	add	r22, r22
    5048:	77 1f       	adc	r23, r23
    504a:	88 1f       	adc	r24, r24
    504c:	99 1f       	adc	r25, r25
    504e:	1a f0       	brmi	.+6      	; 0x5056 <__fixunssfsi+0x24>
    5050:	ba 95       	dec	r27
    5052:	c9 f7       	brne	.-14     	; 0x5046 <__fixunssfsi+0x14>
    5054:	14 c0       	rjmp	.+40     	; 0x507e <__fixunssfsi+0x4c>
    5056:	b1 30       	cpi	r27, 0x01	; 1
    5058:	91 f0       	breq	.+36     	; 0x507e <__fixunssfsi+0x4c>
    505a:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <__fp_zero>
    505e:	b1 e0       	ldi	r27, 0x01	; 1
    5060:	08 95       	ret
    5062:	0c 94 23 1e 	jmp	0x3c46	; 0x3c46 <__fp_zero>
    5066:	67 2f       	mov	r22, r23
    5068:	78 2f       	mov	r23, r24
    506a:	88 27       	eor	r24, r24
    506c:	b8 5f       	subi	r27, 0xF8	; 248
    506e:	39 f0       	breq	.+14     	; 0x507e <__fixunssfsi+0x4c>
    5070:	b9 3f       	cpi	r27, 0xF9	; 249
    5072:	cc f3       	brlt	.-14     	; 0x5066 <__fixunssfsi+0x34>
    5074:	86 95       	lsr	r24
    5076:	77 95       	ror	r23
    5078:	67 95       	ror	r22
    507a:	b3 95       	inc	r27
    507c:	d9 f7       	brne	.-10     	; 0x5074 <__fixunssfsi+0x42>
    507e:	3e f4       	brtc	.+14     	; 0x508e <__fixunssfsi+0x5c>
    5080:	90 95       	com	r25
    5082:	80 95       	com	r24
    5084:	70 95       	com	r23
    5086:	61 95       	neg	r22
    5088:	7f 4f       	sbci	r23, 0xFF	; 255
    508a:	8f 4f       	sbci	r24, 0xFF	; 255
    508c:	9f 4f       	sbci	r25, 0xFF	; 255
    508e:	08 95       	ret

00005090 <__unordsf2>:
    5090:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <__fp_cmp>
    5094:	88 0b       	sbc	r24, r24
    5096:	99 0b       	sbc	r25, r25
    5098:	08 95       	ret

0000509a <__divmodhi4>:
    509a:	97 fb       	bst	r25, 7
    509c:	07 2e       	mov	r0, r23
    509e:	16 f4       	brtc	.+4      	; 0x50a4 <__divmodhi4+0xa>
    50a0:	00 94       	com	r0
    50a2:	07 d0       	rcall	.+14     	; 0x50b2 <__divmodhi4_neg1>
    50a4:	77 fd       	sbrc	r23, 7
    50a6:	09 d0       	rcall	.+18     	; 0x50ba <__divmodhi4_neg2>
    50a8:	0e 94 83 28 	call	0x5106	; 0x5106 <__udivmodhi4>
    50ac:	07 fc       	sbrc	r0, 7
    50ae:	05 d0       	rcall	.+10     	; 0x50ba <__divmodhi4_neg2>
    50b0:	3e f4       	brtc	.+14     	; 0x50c0 <__divmodhi4_exit>

000050b2 <__divmodhi4_neg1>:
    50b2:	90 95       	com	r25
    50b4:	81 95       	neg	r24
    50b6:	9f 4f       	sbci	r25, 0xFF	; 255
    50b8:	08 95       	ret

000050ba <__divmodhi4_neg2>:
    50ba:	70 95       	com	r23
    50bc:	61 95       	neg	r22
    50be:	7f 4f       	sbci	r23, 0xFF	; 255

000050c0 <__divmodhi4_exit>:
    50c0:	08 95       	ret

000050c2 <__udivmodsi4>:
    50c2:	a1 e2       	ldi	r26, 0x21	; 33
    50c4:	1a 2e       	mov	r1, r26
    50c6:	aa 1b       	sub	r26, r26
    50c8:	bb 1b       	sub	r27, r27
    50ca:	fd 01       	movw	r30, r26
    50cc:	0d c0       	rjmp	.+26     	; 0x50e8 <__udivmodsi4_ep>

000050ce <__udivmodsi4_loop>:
    50ce:	aa 1f       	adc	r26, r26
    50d0:	bb 1f       	adc	r27, r27
    50d2:	ee 1f       	adc	r30, r30
    50d4:	ff 1f       	adc	r31, r31
    50d6:	a2 17       	cp	r26, r18
    50d8:	b3 07       	cpc	r27, r19
    50da:	e4 07       	cpc	r30, r20
    50dc:	f5 07       	cpc	r31, r21
    50de:	20 f0       	brcs	.+8      	; 0x50e8 <__udivmodsi4_ep>
    50e0:	a2 1b       	sub	r26, r18
    50e2:	b3 0b       	sbc	r27, r19
    50e4:	e4 0b       	sbc	r30, r20
    50e6:	f5 0b       	sbc	r31, r21

000050e8 <__udivmodsi4_ep>:
    50e8:	66 1f       	adc	r22, r22
    50ea:	77 1f       	adc	r23, r23
    50ec:	88 1f       	adc	r24, r24
    50ee:	99 1f       	adc	r25, r25
    50f0:	1a 94       	dec	r1
    50f2:	69 f7       	brne	.-38     	; 0x50ce <__udivmodsi4_loop>
    50f4:	60 95       	com	r22
    50f6:	70 95       	com	r23
    50f8:	80 95       	com	r24
    50fa:	90 95       	com	r25
    50fc:	9b 01       	movw	r18, r22
    50fe:	ac 01       	movw	r20, r24
    5100:	bd 01       	movw	r22, r26
    5102:	cf 01       	movw	r24, r30
    5104:	08 95       	ret

00005106 <__udivmodhi4>:
    5106:	aa 1b       	sub	r26, r26
    5108:	bb 1b       	sub	r27, r27
    510a:	51 e1       	ldi	r21, 0x11	; 17
    510c:	07 c0       	rjmp	.+14     	; 0x511c <__udivmodhi4_ep>

0000510e <__udivmodhi4_loop>:
    510e:	aa 1f       	adc	r26, r26
    5110:	bb 1f       	adc	r27, r27
    5112:	a6 17       	cp	r26, r22
    5114:	b7 07       	cpc	r27, r23
    5116:	10 f0       	brcs	.+4      	; 0x511c <__udivmodhi4_ep>
    5118:	a6 1b       	sub	r26, r22
    511a:	b7 0b       	sbc	r27, r23

0000511c <__udivmodhi4_ep>:
    511c:	88 1f       	adc	r24, r24
    511e:	99 1f       	adc	r25, r25
    5120:	5a 95       	dec	r21
    5122:	a9 f7       	brne	.-22     	; 0x510e <__udivmodhi4_loop>
    5124:	80 95       	com	r24
    5126:	90 95       	com	r25
    5128:	bc 01       	movw	r22, r24
    512a:	cd 01       	movw	r24, r26
    512c:	08 95       	ret

0000512e <__tablejump2__>:
    512e:	ee 0f       	add	r30, r30
    5130:	ff 1f       	adc	r31, r31
    5132:	05 90       	lpm	r0, Z+
    5134:	f4 91       	lpm	r31, Z
    5136:	e0 2d       	mov	r30, r0
    5138:	09 94       	ijmp

0000513a <eeprom_read_byte>:
    513a:	f9 99       	sbic	0x1f, 1	; 31
    513c:	fe cf       	rjmp	.-4      	; 0x513a <eeprom_read_byte>
    513e:	92 bd       	out	0x22, r25	; 34
    5140:	81 bd       	out	0x21, r24	; 33
    5142:	f8 9a       	sbi	0x1f, 0	; 31
    5144:	99 27       	eor	r25, r25
    5146:	80 b5       	in	r24, 0x20	; 32
    5148:	08 95       	ret

0000514a <eeprom_write_byte>:
    514a:	26 2f       	mov	r18, r22

0000514c <eeprom_write_r18>:
    514c:	f9 99       	sbic	0x1f, 1	; 31
    514e:	fe cf       	rjmp	.-4      	; 0x514c <eeprom_write_r18>
    5150:	1f ba       	out	0x1f, r1	; 31
    5152:	92 bd       	out	0x22, r25	; 34
    5154:	81 bd       	out	0x21, r24	; 33
    5156:	20 bd       	out	0x20, r18	; 32
    5158:	0f b6       	in	r0, 0x3f	; 63
    515a:	f8 94       	cli
    515c:	fa 9a       	sbi	0x1f, 2	; 31
    515e:	f9 9a       	sbi	0x1f, 1	; 31
    5160:	0f be       	out	0x3f, r0	; 63
    5162:	01 96       	adiw	r24, 0x01	; 1
    5164:	08 95       	ret

00005166 <_exit>:
    5166:	f8 94       	cli

00005168 <__stop_program>:
    5168:	ff cf       	rjmp	.-2      	; 0x5168 <__stop_program>
