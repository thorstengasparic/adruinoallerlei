
GyroTest9250Dof9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000414  00800100  00005c3c  00005cd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005c3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000238  00800514  00800514  000060e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000060e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006114  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004e0  00000000  00000000  00006154  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d969  00000000  00000000  00006634  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020f1  00000000  00000000  00013f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003416  00000000  00000000  0001608e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000fe8  00000000  00000000  000194a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002ca1  00000000  00000000  0001a48c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006a41  00000000  00000000  0001d12d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000458  00000000  00000000  00023b6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__ctors_end>
       4:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
       8:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
       c:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      10:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      14:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      18:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      1c:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      20:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      24:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      28:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      2c:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      30:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      34:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      38:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      3c:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      40:	0c 94 bb 29 	jmp	0x5376	; 0x5376 <__vector_16>
      44:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      48:	0c 94 6a 25 	jmp	0x4ad4	; 0x4ad4 <__vector_18>
      4c:	0c 94 a2 25 	jmp	0x4b44	; 0x4b44 <__vector_19>
      50:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      54:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      58:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      5c:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      60:	0c 94 60 2c 	jmp	0x58c0	; 0x58c0 <__vector_24>
      64:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      68:	03 6e       	ori	r16, 0xE3	; 227
      6a:	db 36       	cpi	r29, 0x6B	; 107
      6c:	3d 9a       	sbi	0x07, 5	; 7
      6e:	99 99       	sbic	0x13, 1	; 19
      70:	99 3d       	cpi	r25, 0xD9	; 217
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	3e 00       	.word	0x003e	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 4a       	sbci	r16, 0xA8	; 168
      7e:	d7 3b       	cpi	r29, 0xB7	; 183
      80:	3b ce       	rjmp	.-906    	; 0xfffffcf8 <__eeprom_end+0xff7efcf8>
      82:	01 6e       	ori	r16, 0xE1	; 225
      84:	84 bc       	out	0x24, r8	; 36
      86:	bf fd       	.word	0xfdbf	; ????
      88:	c1 2f       	mov	r28, r17
      8a:	3d 6c       	ori	r19, 0xCD	; 205
      8c:	74 31       	cpi	r23, 0x14	; 20
      8e:	9a bd       	out	0x2a, r25	; 42
      90:	56 83       	std	Z+6, r21	; 0x06
      92:	3d da       	rcall	.-2950   	; 0xfffff50e <__eeprom_end+0xff7ef50e>
      94:	3d 00       	.word	0x003d	; ????
      96:	c7 7f       	andi	r28, 0xF7	; 247
      98:	11 be       	out	0x31, r1	; 49
      9a:	d9 e4       	ldi	r29, 0x49	; 73
      9c:	bb 4c       	sbci	r27, 0xCB	; 203
      9e:	3e 91       	ld	r19, -X
      a0:	6b aa       	std	Y+51, r6	; 0x33
      a2:	aa be       	out	0x3a, r10	; 58
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	3f 07       	cpc	r19, r31
      aa:	2c 7a       	andi	r18, 0xAC	; 172
      ac:	a5 ba       	out	0x15, r10	; 21
      ae:	6c c5       	rjmp	.+2776   	; 0xb88 <__stack+0x289>
      b0:	90 da       	rcall	.-2784   	; 0xfffff5d2 <__eeprom_end+0xff7ef5d2>
      b2:	3b 93       	.word	0x933b	; ????
      b4:	65 fc       	sbrc	r6, 5
      b6:	8b bc       	out	0x2b, r8	; 43
      b8:	53 f8       	bld	r5, 3
      ba:	10 fd       	sbrc	r17, 0
      bc:	3c 56       	subi	r19, 0x6C	; 108
      be:	92 83       	std	Z+2, r25	; 0x02
      c0:	4d bd       	out	0x2d, r20	; 45
      c2:	87 9d       	mul	r24, r7
      c4:	3a b6       	in	r3, 0x3a	; 58
      c6:	3d cb       	rjmp	.-2438   	; 0xfffff742 <__eeprom_end+0xff7ef742>
      c8:	c9 bf       	out	0x39, r28	; 57
      ca:	5b be       	out	0x3b, r5	; 59
      cc:	73 da       	rcall	.-2842   	; 0xfffff5b4 <__eeprom_end+0xff7ef5b4>
      ce:	0f c9       	rjmp	.-3554   	; 0xfffff2ee <__eeprom_end+0xff7ef2ee>
      d0:	3f 07       	cpc	r19, r31
      d2:	63 42       	sbci	r22, 0x23	; 35
      d4:	36 b7       	in	r19, 0x36	; 54
      d6:	9b d8       	rcall	.-3786   	; 0xfffff20e <__eeprom_end+0xff7ef20e>
      d8:	a7 1a       	sub	r10, r23
      da:	39 68       	ori	r19, 0x89	; 137
      dc:	56 18       	sub	r5, r6
      de:	ae ba       	out	0x1e, r10	; 30
      e0:	ab 55       	subi	r26, 0x5B	; 91
      e2:	8c 1d       	adc	r24, r12
      e4:	3c b7       	in	r19, 0x3c	; 60
      e6:	cc 57       	subi	r28, 0x7C	; 124
      e8:	63 bd       	out	0x23, r22	; 35
      ea:	6d ed       	ldi	r22, 0xDD	; 221
      ec:	fd 75       	andi	r31, 0x5D	; 93
      ee:	3e f6       	brtc	.-114    	; 0x7e <__SREG__+0x3f>
      f0:	17 72       	andi	r17, 0x27	; 39
      f2:	31 bf       	out	0x31, r19	; 49
      f4:	00 00       	nop
      f6:	00 80       	ld	r0, Z
      f8:	3f 08       	sbc	r3, r15
      fa:	00 00       	nop
      fc:	00 be       	out	0x30, r0	; 48
      fe:	92 24       	eor	r9, r2
     100:	49 12       	cpse	r4, r25
     102:	3e ab       	std	Y+54, r19	; 0x36
     104:	aa aa       	std	Y+50, r10	; 0x32
     106:	2a be       	out	0x3a, r2	; 58
     108:	cd cc       	rjmp	.-1638   	; 0xfffffaa4 <__eeprom_end+0xff7efaa4>
     10a:	cc 4c       	sbci	r28, 0xCC	; 204
     10c:	3e 00       	.word	0x003e	; ????
     10e:	00 00       	nop
     110:	80 be       	out	0x30, r8	; 48
     112:	ab aa       	std	Y+51, r10	; 0x33
     114:	aa aa       	std	Y+50, r10	; 0x32
     116:	3e 00       	.word	0x003e	; ????
     118:	00 00       	nop
     11a:	00 bf       	out	0x30, r16	; 48
     11c:	00 00       	nop
     11e:	00 80       	ld	r0, Z
     120:	3f 00       	.word	0x003f	; ????
     122:	00 00       	nop
     124:	00 00       	nop
     126:	08 41       	sbci	r16, 0x18	; 24
     128:	78 d3       	rcall	.+1776   	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
     12a:	bb 43       	sbci	r27, 0x3B	; 59
     12c:	87 d1       	rcall	.+782    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     12e:	13 3d       	cpi	r17, 0xD3	; 211
     130:	19 0e       	add	r1, r25
     132:	3c c3       	rjmp	.+1656   	; 0x7ac <__LOCK_REGION_LENGTH__+0x3ac>
     134:	bd 42       	sbci	r27, 0x2D	; 45
     136:	82 ad       	ldd	r24, Z+58	; 0x3a
     138:	2b 3e       	cpi	r18, 0xEB	; 235
     13a:	68 ec       	ldi	r22, 0xC8	; 200
     13c:	82 76       	andi	r24, 0x62	; 98
     13e:	be d9       	rcall	.-3204   	; 0xfffff4bc <__eeprom_end+0xff7ef4bc>
     140:	8f e1       	ldi	r24, 0x1F	; 31
     142:	a9 3e       	cpi	r26, 0xE9	; 233
     144:	4c 80       	ldd	r4, Y+4	; 0x04
     146:	ef ff       	.word	0xffef	; ????
     148:	be 01       	movw	r22, r28
     14a:	c4 ff       	sbrs	r28, 4
     14c:	7f 3f       	cpi	r23, 0xFF	; 255
     14e:	00 00       	nop
     150:	00 00       	nop
	...

00000154 <__trampolines_end>:
     154:	00 00       	nop
     156:	00 08       	sbc	r0, r0
     158:	00 02       	muls	r16, r16
     15a:	01 00       	.word	0x0001	; ????
     15c:	00 03       	mulsu	r16, r16
     15e:	04 07       	cpc	r16, r20
	...

00000168 <digital_pin_to_bit_mask_PGM>:
     168:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     178:	04 08 10 20                                         ... 

0000017c <digital_pin_to_port_PGM>:
     17c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     18c:	03 03 03 03                                         ....

00000190 <port_to_input_PGM>:
     190:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000019a <port_to_output_PGM>:
     19a:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000001a4 <port_to_mode_PGM>:
     1a4:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000001ae <__ctors_start>:
     1ae:	3a 0c       	add	r3, r10
     1b0:	d2 25       	eor	r29, r2
     1b2:	b6 29       	or	r27, r6

000001b4 <__ctors_end>:
     1b4:	11 24       	eor	r1, r1
     1b6:	1f be       	out	0x3f, r1	; 63
     1b8:	cf ef       	ldi	r28, 0xFF	; 255
     1ba:	d8 e0       	ldi	r29, 0x08	; 8
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	cd bf       	out	0x3d, r28	; 61

000001c0 <__do_copy_data>:
     1c0:	15 e0       	ldi	r17, 0x05	; 5
     1c2:	a0 e0       	ldi	r26, 0x00	; 0
     1c4:	b1 e0       	ldi	r27, 0x01	; 1
     1c6:	ec e3       	ldi	r30, 0x3C	; 60
     1c8:	fc e5       	ldi	r31, 0x5C	; 92
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <__do_copy_data+0x10>
     1cc:	05 90       	lpm	r0, Z+
     1ce:	0d 92       	st	X+, r0
     1d0:	a4 31       	cpi	r26, 0x14	; 20
     1d2:	b1 07       	cpc	r27, r17
     1d4:	d9 f7       	brne	.-10     	; 0x1cc <__do_copy_data+0xc>

000001d6 <__do_clear_bss>:
     1d6:	27 e0       	ldi	r18, 0x07	; 7
     1d8:	a4 e1       	ldi	r26, 0x14	; 20
     1da:	b5 e0       	ldi	r27, 0x05	; 5
     1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <.do_clear_bss_start>

000001de <.do_clear_bss_loop>:
     1de:	1d 92       	st	X+, r1

000001e0 <.do_clear_bss_start>:
     1e0:	ac 34       	cpi	r26, 0x4C	; 76
     1e2:	b2 07       	cpc	r27, r18
     1e4:	e1 f7       	brne	.-8      	; 0x1de <.do_clear_bss_loop>

000001e6 <__do_global_ctors>:
     1e6:	10 e0       	ldi	r17, 0x00	; 0
     1e8:	ca ed       	ldi	r28, 0xDA	; 218
     1ea:	d0 e0       	ldi	r29, 0x00	; 0
     1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <__do_global_ctors+0x10>
     1ee:	21 97       	sbiw	r28, 0x01	; 1
     1f0:	fe 01       	movw	r30, r28
     1f2:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__tablejump2__>
     1f6:	c7 3d       	cpi	r28, 0xD7	; 215
     1f8:	d1 07       	cpc	r29, r17
     1fa:	c9 f7       	brne	.-14     	; 0x1ee <__do_global_ctors+0x8>
     1fc:	0e 94 00 26 	call	0x4c00	; 0x4c00 <main>
     200:	0c 94 1c 2e 	jmp	0x5c38	; 0x5c38 <_exit>

00000204 <__bad_interrupt>:
     204:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000208 <_Z7getMresv>:
 if (ST_Value <= 0xF) {
 writeByte(MPL3115A2_ADDRESS, MPL3115A2_CTRL_REG2, (c | ST_Value)); // Set time step n from 0x0 to 0xF (bits 0 - 3) for time intervals from 1 to 32768 (2^n) seconds
 }
 
 MPL3115A2Active(); // Set to active to start reading
}
     208:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <Mscale>
     20c:	88 23       	and	r24, r24
     20e:	19 f0       	breq	.+6      	; 0x216 <_Z7getMresv+0xe>
     210:	81 30       	cpi	r24, 0x01	; 1
     212:	71 f0       	breq	.+28     	; 0x230 <_Z7getMresv+0x28>
     214:	08 95       	ret
     216:	8f ef       	ldi	r24, 0xFF	; 255
     218:	9b ee       	ldi	r25, 0xEB	; 235
     21a:	af eb       	ldi	r26, 0xBF	; 191
     21c:	b0 e4       	ldi	r27, 0x40	; 64
     21e:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <mRes>
     222:	90 93 d9 05 	sts	0x05D9, r25	; 0x8005d9 <mRes+0x1>
     226:	a0 93 da 05 	sts	0x05DA, r26	; 0x8005da <mRes+0x2>
     22a:	b0 93 db 05 	sts	0x05DB, r27	; 0x8005db <mRes+0x3>
     22e:	08 95       	ret
     230:	8f ef       	ldi	r24, 0xFF	; 255
     232:	9b ee       	ldi	r25, 0xEB	; 235
     234:	af eb       	ldi	r26, 0xBF	; 191
     236:	bf e3       	ldi	r27, 0x3F	; 63
     238:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <mRes>
     23c:	90 93 d9 05 	sts	0x05D9, r25	; 0x8005d9 <mRes+0x1>
     240:	a0 93 da 05 	sts	0x05DA, r26	; 0x8005da <mRes+0x2>
     244:	b0 93 db 05 	sts	0x05DB, r27	; 0x8005db <mRes+0x3>
     248:	08 95       	ret

0000024a <_Z7getGresv>:
     24a:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <Gscale>
     24e:	81 30       	cpi	r24, 0x01	; 1
     250:	99 f0       	breq	.+38     	; 0x278 <_Z7getGresv+0x2e>
     252:	28 f0       	brcs	.+10     	; 0x25e <_Z7getGresv+0x14>
     254:	82 30       	cpi	r24, 0x02	; 2
     256:	e9 f0       	breq	.+58     	; 0x292 <_Z7getGresv+0x48>
     258:	83 30       	cpi	r24, 0x03	; 3
     25a:	41 f1       	breq	.+80     	; 0x2ac <_Z7getGresv+0x62>
     25c:	08 95       	ret
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	aa ef       	ldi	r26, 0xFA	; 250
     264:	bb e3       	ldi	r27, 0x3B	; 59
     266:	80 93 dc 05 	sts	0x05DC, r24	; 0x8005dc <gRes>
     26a:	90 93 dd 05 	sts	0x05DD, r25	; 0x8005dd <gRes+0x1>
     26e:	a0 93 de 05 	sts	0x05DE, r26	; 0x8005de <gRes+0x2>
     272:	b0 93 df 05 	sts	0x05DF, r27	; 0x8005df <gRes+0x3>
     276:	08 95       	ret
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	aa e7       	ldi	r26, 0x7A	; 122
     27e:	bc e3       	ldi	r27, 0x3C	; 60
     280:	80 93 dc 05 	sts	0x05DC, r24	; 0x8005dc <gRes>
     284:	90 93 dd 05 	sts	0x05DD, r25	; 0x8005dd <gRes+0x1>
     288:	a0 93 de 05 	sts	0x05DE, r26	; 0x8005de <gRes+0x2>
     28c:	b0 93 df 05 	sts	0x05DF, r27	; 0x8005df <gRes+0x3>
     290:	08 95       	ret
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	aa ef       	ldi	r26, 0xFA	; 250
     298:	bc e3       	ldi	r27, 0x3C	; 60
     29a:	80 93 dc 05 	sts	0x05DC, r24	; 0x8005dc <gRes>
     29e:	90 93 dd 05 	sts	0x05DD, r25	; 0x8005dd <gRes+0x1>
     2a2:	a0 93 de 05 	sts	0x05DE, r26	; 0x8005de <gRes+0x2>
     2a6:	b0 93 df 05 	sts	0x05DF, r27	; 0x8005df <gRes+0x3>
     2aa:	08 95       	ret
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	aa e7       	ldi	r26, 0x7A	; 122
     2b2:	bd e3       	ldi	r27, 0x3D	; 61
     2b4:	80 93 dc 05 	sts	0x05DC, r24	; 0x8005dc <gRes>
     2b8:	90 93 dd 05 	sts	0x05DD, r25	; 0x8005dd <gRes+0x1>
     2bc:	a0 93 de 05 	sts	0x05DE, r26	; 0x8005de <gRes+0x2>
     2c0:	b0 93 df 05 	sts	0x05DF, r27	; 0x8005df <gRes+0x3>
     2c4:	08 95       	ret

000002c6 <_Z7getAresv>:
     2c6:	80 91 e4 05 	lds	r24, 0x05E4	; 0x8005e4 <Ascale>
     2ca:	81 30       	cpi	r24, 0x01	; 1
     2cc:	99 f0       	breq	.+38     	; 0x2f4 <_Z7getAresv+0x2e>
     2ce:	28 f0       	brcs	.+10     	; 0x2da <_Z7getAresv+0x14>
     2d0:	82 30       	cpi	r24, 0x02	; 2
     2d2:	e9 f0       	breq	.+58     	; 0x30e <_Z7getAresv+0x48>
     2d4:	83 30       	cpi	r24, 0x03	; 3
     2d6:	41 f1       	breq	.+80     	; 0x328 <_Z7getAresv+0x62>
     2d8:	08 95       	ret
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	a0 e8       	ldi	r26, 0x80	; 128
     2e0:	b8 e3       	ldi	r27, 0x38	; 56
     2e2:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <aRes>
     2e6:	90 93 e1 05 	sts	0x05E1, r25	; 0x8005e1 <aRes+0x1>
     2ea:	a0 93 e2 05 	sts	0x05E2, r26	; 0x8005e2 <aRes+0x2>
     2ee:	b0 93 e3 05 	sts	0x05E3, r27	; 0x8005e3 <aRes+0x3>
     2f2:	08 95       	ret
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	a0 e0       	ldi	r26, 0x00	; 0
     2fa:	b9 e3       	ldi	r27, 0x39	; 57
     2fc:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <aRes>
     300:	90 93 e1 05 	sts	0x05E1, r25	; 0x8005e1 <aRes+0x1>
     304:	a0 93 e2 05 	sts	0x05E2, r26	; 0x8005e2 <aRes+0x2>
     308:	b0 93 e3 05 	sts	0x05E3, r27	; 0x8005e3 <aRes+0x3>
     30c:	08 95       	ret
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	a0 e8       	ldi	r26, 0x80	; 128
     314:	b9 e3       	ldi	r27, 0x39	; 57
     316:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <aRes>
     31a:	90 93 e1 05 	sts	0x05E1, r25	; 0x8005e1 <aRes+0x1>
     31e:	a0 93 e2 05 	sts	0x05E2, r26	; 0x8005e2 <aRes+0x2>
     322:	b0 93 e3 05 	sts	0x05E3, r27	; 0x8005e3 <aRes+0x3>
     326:	08 95       	ret
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	a0 e0       	ldi	r26, 0x00	; 0
     32e:	ba e3       	ldi	r27, 0x3A	; 58
     330:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <aRes>
     334:	90 93 e1 05 	sts	0x05E1, r25	; 0x8005e1 <aRes+0x1>
     338:	a0 93 e2 05 	sts	0x05E2, r26	; 0x8005e2 <aRes+0x2>
     33c:	b0 93 e3 05 	sts	0x05E3, r27	; 0x8005e3 <aRes+0x3>
     340:	08 95       	ret

00000342 <_Z24MadgwickQuaternionUpdatefffffffff>:
     342:	4f 92       	push	r4
     344:	5f 92       	push	r5
     346:	6f 92       	push	r6
     348:	7f 92       	push	r7
     34a:	8f 92       	push	r8
     34c:	9f 92       	push	r9
     34e:	af 92       	push	r10
     350:	bf 92       	push	r11
     352:	cf 92       	push	r12
     354:	df 92       	push	r13
     356:	ef 92       	push	r14
     358:	ff 92       	push	r15
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
     366:	cc 56       	subi	r28, 0x6C	; 108
     368:	d1 09       	sbc	r29, r1
     36a:	0f b6       	in	r0, 0x3f	; 63
     36c:	f8 94       	cli
     36e:	de bf       	out	0x3e, r29	; 62
     370:	0f be       	out	0x3f, r0	; 63
     372:	cd bf       	out	0x3d, r28	; 61
     374:	6d 8f       	std	Y+29, r22	; 0x1d
     376:	7e 8f       	std	Y+30, r23	; 0x1e
     378:	8f 8f       	std	Y+31, r24	; 0x1f
     37a:	98 a3       	std	Y+32, r25	; 0x20
     37c:	29 8b       	std	Y+17, r18	; 0x11
     37e:	3a 8b       	std	Y+18, r19	; 0x12
     380:	4b 8b       	std	Y+19, r20	; 0x13
     382:	5c 8b       	std	Y+20, r21	; 0x14
     384:	ed 86       	std	Y+13, r14	; 0x0d
     386:	fe 86       	std	Y+14, r15	; 0x0e
     388:	0f 87       	std	Y+15, r16	; 0x0f
     38a:	18 8b       	std	Y+16, r17	; 0x10
     38c:	29 96       	adiw	r28, 0x09	; 9
     38e:	ac ae       	std	Y+60, r10	; 0x3c
     390:	bd ae       	std	Y+61, r11	; 0x3d
     392:	ce ae       	std	Y+62, r12	; 0x3e
     394:	df ae       	std	Y+63, r13	; 0x3f
     396:	29 97       	sbiw	r28, 0x09	; 9
     398:	e0 e0       	ldi	r30, 0x00	; 0
     39a:	f1 e0       	ldi	r31, 0x01	; 1
     39c:	80 81       	ld	r24, Z
     39e:	91 81       	ldd	r25, Z+1	; 0x01
     3a0:	a2 81       	ldd	r26, Z+2	; 0x02
     3a2:	b3 81       	ldd	r27, Z+3	; 0x03
     3a4:	89 a7       	std	Y+41, r24	; 0x29
     3a6:	9a a7       	std	Y+42, r25	; 0x2a
     3a8:	ab a7       	std	Y+43, r26	; 0x2b
     3aa:	bc a7       	std	Y+44, r27	; 0x2c
     3ac:	44 80       	ldd	r4, Z+4	; 0x04
     3ae:	55 80       	ldd	r5, Z+5	; 0x05
     3b0:	66 80       	ldd	r6, Z+6	; 0x06
     3b2:	77 80       	ldd	r7, Z+7	; 0x07
     3b4:	80 85       	ldd	r24, Z+8	; 0x08
     3b6:	91 85       	ldd	r25, Z+9	; 0x09
     3b8:	a2 85       	ldd	r26, Z+10	; 0x0a
     3ba:	b3 85       	ldd	r27, Z+11	; 0x0b
     3bc:	89 8f       	std	Y+25, r24	; 0x19
     3be:	9a 8f       	std	Y+26, r25	; 0x1a
     3c0:	ab 8f       	std	Y+27, r26	; 0x1b
     3c2:	bc 8f       	std	Y+28, r27	; 0x1c
     3c4:	84 85       	ldd	r24, Z+12	; 0x0c
     3c6:	95 85       	ldd	r25, Z+13	; 0x0d
     3c8:	a6 85       	ldd	r26, Z+14	; 0x0e
     3ca:	b7 85       	ldd	r27, Z+15	; 0x0f
     3cc:	8d 8b       	std	Y+21, r24	; 0x15
     3ce:	9e 8b       	std	Y+22, r25	; 0x16
     3d0:	af 8b       	std	Y+23, r26	; 0x17
     3d2:	b8 8f       	std	Y+24, r27	; 0x18
     3d4:	2d 8d       	ldd	r18, Y+29	; 0x1d
     3d6:	3e 8d       	ldd	r19, Y+30	; 0x1e
     3d8:	4f 8d       	ldd	r20, Y+31	; 0x1f
     3da:	58 a1       	ldd	r21, Y+32	; 0x20
     3dc:	ca 01       	movw	r24, r20
     3de:	b9 01       	movw	r22, r18
     3e0:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     3e4:	4b 01       	movw	r8, r22
     3e6:	5c 01       	movw	r10, r24
     3e8:	29 89       	ldd	r18, Y+17	; 0x11
     3ea:	3a 89       	ldd	r19, Y+18	; 0x12
     3ec:	4b 89       	ldd	r20, Y+19	; 0x13
     3ee:	5c 89       	ldd	r21, Y+20	; 0x14
     3f0:	ca 01       	movw	r24, r20
     3f2:	b9 01       	movw	r22, r18
     3f4:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     3f8:	69 a3       	std	Y+33, r22	; 0x21
     3fa:	7a a3       	std	Y+34, r23	; 0x22
     3fc:	8b a3       	std	Y+35, r24	; 0x23
     3fe:	9c a3       	std	Y+36, r25	; 0x24
     400:	9b 01       	movw	r18, r22
     402:	ac 01       	movw	r20, r24
     404:	c5 01       	movw	r24, r10
     406:	b4 01       	movw	r22, r8
     408:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     40c:	6d a3       	std	Y+37, r22	; 0x25
     40e:	7e a3       	std	Y+38, r23	; 0x26
     410:	8f a3       	std	Y+39, r24	; 0x27
     412:	98 a7       	std	Y+40, r25	; 0x28
     414:	a8 01       	movw	r20, r16
     416:	97 01       	movw	r18, r14
     418:	c8 01       	movw	r24, r16
     41a:	b7 01       	movw	r22, r14
     41c:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     420:	6b 01       	movw	r12, r22
     422:	7c 01       	movw	r14, r24
     424:	29 a1       	ldd	r18, Y+33	; 0x21
     426:	3a a1       	ldd	r19, Y+34	; 0x22
     428:	4b a1       	ldd	r20, Y+35	; 0x23
     42a:	5c a1       	ldd	r21, Y+36	; 0x24
     42c:	c5 01       	movw	r24, r10
     42e:	b4 01       	movw	r22, r8
     430:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     434:	4b 01       	movw	r8, r22
     436:	5c 01       	movw	r10, r24
     438:	a7 01       	movw	r20, r14
     43a:	96 01       	movw	r18, r12
     43c:	c5 01       	movw	r24, r10
     43e:	b4 01       	movw	r22, r8
     440:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     444:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <sqrt>
     448:	6d a3       	std	Y+37, r22	; 0x25
     44a:	7e a3       	std	Y+38, r23	; 0x26
     44c:	8f a3       	std	Y+39, r24	; 0x27
     44e:	98 a7       	std	Y+40, r25	; 0x28
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	a9 01       	movw	r20, r18
     456:	0e 94 8a 20 	call	0x4114	; 0x4114 <__cmpsf2>
     45a:	88 23       	and	r24, r24
     45c:	11 f4       	brne	.+4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     45e:	0c 94 22 0c 	jmp	0x1844	; 0x1844 <__stack+0xf45>
     462:	c9 57       	subi	r28, 0x79	; 121
     464:	df 4f       	sbci	r29, 0xFF	; 255
     466:	28 81       	ld	r18, Y
     468:	39 81       	ldd	r19, Y+1	; 0x01
     46a:	4a 81       	ldd	r20, Y+2	; 0x02
     46c:	5b 81       	ldd	r21, Y+3	; 0x03
     46e:	c7 58       	subi	r28, 0x87	; 135
     470:	d0 40       	sbci	r29, 0x00	; 0
     472:	ca 01       	movw	r24, r20
     474:	b9 01       	movw	r22, r18
     476:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     47a:	4b 01       	movw	r8, r22
     47c:	5c 01       	movw	r10, r24
     47e:	c5 57       	subi	r28, 0x75	; 117
     480:	df 4f       	sbci	r29, 0xFF	; 255
     482:	28 81       	ld	r18, Y
     484:	39 81       	ldd	r19, Y+1	; 0x01
     486:	4a 81       	ldd	r20, Y+2	; 0x02
     488:	5b 81       	ldd	r21, Y+3	; 0x03
     48a:	cb 58       	subi	r28, 0x8B	; 139
     48c:	d0 40       	sbci	r29, 0x00	; 0
     48e:	ca 01       	movw	r24, r20
     490:	b9 01       	movw	r22, r18
     492:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     496:	69 a3       	std	Y+33, r22	; 0x21
     498:	7a a3       	std	Y+34, r23	; 0x22
     49a:	8b a3       	std	Y+35, r24	; 0x23
     49c:	9c a3       	std	Y+36, r25	; 0x24
     49e:	9b 01       	movw	r18, r22
     4a0:	ac 01       	movw	r20, r24
     4a2:	c5 01       	movw	r24, r10
     4a4:	b4 01       	movw	r22, r8
     4a6:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     4aa:	6d a7       	std	Y+45, r22	; 0x2d
     4ac:	7e a7       	std	Y+46, r23	; 0x2e
     4ae:	8f a7       	std	Y+47, r24	; 0x2f
     4b0:	98 ab       	std	Y+48, r25	; 0x30
     4b2:	c1 57       	subi	r28, 0x71	; 113
     4b4:	df 4f       	sbci	r29, 0xFF	; 255
     4b6:	28 81       	ld	r18, Y
     4b8:	39 81       	ldd	r19, Y+1	; 0x01
     4ba:	4a 81       	ldd	r20, Y+2	; 0x02
     4bc:	5b 81       	ldd	r21, Y+3	; 0x03
     4be:	cf 58       	subi	r28, 0x8F	; 143
     4c0:	d0 40       	sbci	r29, 0x00	; 0
     4c2:	ca 01       	movw	r24, r20
     4c4:	b9 01       	movw	r22, r18
     4c6:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     4ca:	6b 01       	movw	r12, r22
     4cc:	7c 01       	movw	r14, r24
     4ce:	29 a1       	ldd	r18, Y+33	; 0x21
     4d0:	3a a1       	ldd	r19, Y+34	; 0x22
     4d2:	4b a1       	ldd	r20, Y+35	; 0x23
     4d4:	5c a1       	ldd	r21, Y+36	; 0x24
     4d6:	c5 01       	movw	r24, r10
     4d8:	b4 01       	movw	r22, r8
     4da:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     4de:	4b 01       	movw	r8, r22
     4e0:	5c 01       	movw	r10, r24
     4e2:	a7 01       	movw	r20, r14
     4e4:	96 01       	movw	r18, r12
     4e6:	c5 01       	movw	r24, r10
     4e8:	b4 01       	movw	r22, r8
     4ea:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     4ee:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <sqrt>
     4f2:	6b 01       	movw	r12, r22
     4f4:	7c 01       	movw	r14, r24
     4f6:	20 e0       	ldi	r18, 0x00	; 0
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	a9 01       	movw	r20, r18
     4fc:	0e 94 8a 20 	call	0x4114	; 0x4114 <__cmpsf2>
     500:	88 23       	and	r24, r24
     502:	11 f4       	brne	.+4      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     504:	0c 94 22 0c 	jmp	0x1844	; 0x1844 <__stack+0xf45>
     508:	29 a5       	ldd	r18, Y+41	; 0x29
     50a:	3a a5       	ldd	r19, Y+42	; 0x2a
     50c:	4b a5       	ldd	r20, Y+43	; 0x2b
     50e:	5c a5       	ldd	r21, Y+44	; 0x2c
     510:	ca 01       	movw	r24, r20
     512:	b9 01       	movw	r22, r18
     514:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     518:	6d a7       	std	Y+45, r22	; 0x2d
     51a:	7e a7       	std	Y+46, r23	; 0x2e
     51c:	8f a7       	std	Y+47, r24	; 0x2f
     51e:	98 ab       	std	Y+48, r25	; 0x30
     520:	a3 01       	movw	r20, r6
     522:	92 01       	movw	r18, r4
     524:	c3 01       	movw	r24, r6
     526:	b2 01       	movw	r22, r4
     528:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     52c:	2d 96       	adiw	r28, 0x0d	; 13
     52e:	6c af       	std	Y+60, r22	; 0x3c
     530:	7d af       	std	Y+61, r23	; 0x3d
     532:	8e af       	std	Y+62, r24	; 0x3e
     534:	9f af       	std	Y+63, r25	; 0x3f
     536:	2d 97       	sbiw	r28, 0x0d	; 13
     538:	29 8d       	ldd	r18, Y+25	; 0x19
     53a:	3a 8d       	ldd	r19, Y+26	; 0x1a
     53c:	4b 8d       	ldd	r20, Y+27	; 0x1b
     53e:	5c 8d       	ldd	r21, Y+28	; 0x1c
     540:	ca 01       	movw	r24, r20
     542:	b9 01       	movw	r22, r18
     544:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     548:	61 96       	adiw	r28, 0x11	; 17
     54a:	6c af       	std	Y+60, r22	; 0x3c
     54c:	7d af       	std	Y+61, r23	; 0x3d
     54e:	8e af       	std	Y+62, r24	; 0x3e
     550:	9f af       	std	Y+63, r25	; 0x3f
     552:	61 97       	sbiw	r28, 0x11	; 17
     554:	2d 89       	ldd	r18, Y+21	; 0x15
     556:	3e 89       	ldd	r19, Y+22	; 0x16
     558:	4f 89       	ldd	r20, Y+23	; 0x17
     55a:	58 8d       	ldd	r21, Y+24	; 0x18
     55c:	ca 01       	movw	r24, r20
     55e:	b9 01       	movw	r22, r18
     560:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     564:	a5 96       	adiw	r28, 0x25	; 37
     566:	6c af       	std	Y+60, r22	; 0x3c
     568:	7d af       	std	Y+61, r23	; 0x3d
     56a:	8e af       	std	Y+62, r24	; 0x3e
     56c:	9f af       	std	Y+63, r25	; 0x3f
     56e:	a5 97       	sbiw	r28, 0x25	; 37
     570:	29 a5       	ldd	r18, Y+41	; 0x29
     572:	3a a5       	ldd	r19, Y+42	; 0x2a
     574:	4b a5       	ldd	r20, Y+43	; 0x2b
     576:	5c a5       	ldd	r21, Y+44	; 0x2c
     578:	ca 01       	movw	r24, r20
     57a:	b9 01       	movw	r22, r18
     57c:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     580:	6d ab       	std	Y+53, r22	; 0x35
     582:	7e ab       	std	Y+54, r23	; 0x36
     584:	8f ab       	std	Y+55, r24	; 0x37
     586:	98 af       	std	Y+56, r25	; 0x38
     588:	a3 01       	movw	r20, r6
     58a:	92 01       	movw	r18, r4
     58c:	69 a5       	ldd	r22, Y+41	; 0x29
     58e:	7a a5       	ldd	r23, Y+42	; 0x2a
     590:	8b a5       	ldd	r24, Y+43	; 0x2b
     592:	9c a5       	ldd	r25, Y+44	; 0x2c
     594:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     598:	6d 96       	adiw	r28, 0x1d	; 29
     59a:	6c af       	std	Y+60, r22	; 0x3c
     59c:	7d af       	std	Y+61, r23	; 0x3d
     59e:	8e af       	std	Y+62, r24	; 0x3e
     5a0:	9f af       	std	Y+63, r25	; 0x3f
     5a2:	6d 97       	sbiw	r28, 0x1d	; 29
     5a4:	29 8d       	ldd	r18, Y+25	; 0x19
     5a6:	3a 8d       	ldd	r19, Y+26	; 0x1a
     5a8:	4b 8d       	ldd	r20, Y+27	; 0x1b
     5aa:	5c 8d       	ldd	r21, Y+28	; 0x1c
     5ac:	69 a5       	ldd	r22, Y+41	; 0x29
     5ae:	7a a5       	ldd	r23, Y+42	; 0x2a
     5b0:	8b a5       	ldd	r24, Y+43	; 0x2b
     5b2:	9c a5       	ldd	r25, Y+44	; 0x2c
     5b4:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     5b8:	a9 96       	adiw	r28, 0x29	; 41
     5ba:	6c af       	std	Y+60, r22	; 0x3c
     5bc:	7d af       	std	Y+61, r23	; 0x3d
     5be:	8e af       	std	Y+62, r24	; 0x3e
     5c0:	9f af       	std	Y+63, r25	; 0x3f
     5c2:	a9 97       	sbiw	r28, 0x29	; 41
     5c4:	a3 01       	movw	r20, r6
     5c6:	92 01       	movw	r18, r4
     5c8:	c3 01       	movw	r24, r6
     5ca:	b2 01       	movw	r22, r4
     5cc:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     5d0:	69 ab       	std	Y+49, r22	; 0x31
     5d2:	7a ab       	std	Y+50, r23	; 0x32
     5d4:	8b ab       	std	Y+51, r24	; 0x33
     5d6:	9c ab       	std	Y+52, r25	; 0x34
     5d8:	2d 89       	ldd	r18, Y+21	; 0x15
     5da:	3e 89       	ldd	r19, Y+22	; 0x16
     5dc:	4f 89       	ldd	r20, Y+23	; 0x17
     5de:	58 8d       	ldd	r21, Y+24	; 0x18
     5e0:	c3 01       	movw	r24, r6
     5e2:	b2 01       	movw	r22, r4
     5e4:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     5e8:	69 af       	std	Y+57, r22	; 0x39
     5ea:	7a af       	std	Y+58, r23	; 0x3a
     5ec:	8b af       	std	Y+59, r24	; 0x3b
     5ee:	9c af       	std	Y+60, r25	; 0x3c
     5f0:	29 8d       	ldd	r18, Y+25	; 0x19
     5f2:	3a 8d       	ldd	r19, Y+26	; 0x1a
     5f4:	4b 8d       	ldd	r20, Y+27	; 0x1b
     5f6:	5c 8d       	ldd	r21, Y+28	; 0x1c
     5f8:	ca 01       	movw	r24, r20
     5fa:	b9 01       	movw	r22, r18
     5fc:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     600:	69 a3       	std	Y+33, r22	; 0x21
     602:	7a a3       	std	Y+34, r23	; 0x22
     604:	8b a3       	std	Y+35, r24	; 0x23
     606:	9c a3       	std	Y+36, r25	; 0x24
     608:	2d 89       	ldd	r18, Y+21	; 0x15
     60a:	3e 89       	ldd	r19, Y+22	; 0x16
     60c:	4f 89       	ldd	r20, Y+23	; 0x17
     60e:	58 8d       	ldd	r21, Y+24	; 0x18
     610:	ca 01       	movw	r24, r20
     612:	b9 01       	movw	r22, r18
     614:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     618:	21 96       	adiw	r28, 0x01	; 1
     61a:	6c af       	std	Y+60, r22	; 0x3c
     61c:	7d af       	std	Y+61, r23	; 0x3d
     61e:	8e af       	std	Y+62, r24	; 0x3e
     620:	9f af       	std	Y+63, r25	; 0x3f
     622:	21 97       	sbiw	r28, 0x01	; 1
     624:	2d a1       	ldd	r18, Y+37	; 0x25
     626:	3e a1       	ldd	r19, Y+38	; 0x26
     628:	4f a1       	ldd	r20, Y+39	; 0x27
     62a:	58 a5       	ldd	r21, Y+40	; 0x28
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	80 e8       	ldi	r24, 0x80	; 128
     632:	9f e3       	ldi	r25, 0x3F	; 63
     634:	0e 94 8f 20 	call	0x411e	; 0x411e <__divsf3>
     638:	a1 96       	adiw	r28, 0x21	; 33
     63a:	6c af       	std	Y+60, r22	; 0x3c
     63c:	7d af       	std	Y+61, r23	; 0x3d
     63e:	8e af       	std	Y+62, r24	; 0x3e
     640:	9f af       	std	Y+63, r25	; 0x3f
     642:	a1 97       	sbiw	r28, 0x21	; 33
     644:	a7 01       	movw	r20, r14
     646:	96 01       	movw	r18, r12
     648:	60 e0       	ldi	r22, 0x00	; 0
     64a:	70 e0       	ldi	r23, 0x00	; 0
     64c:	80 e8       	ldi	r24, 0x80	; 128
     64e:	9f e3       	ldi	r25, 0x3F	; 63
     650:	0e 94 8f 20 	call	0x411e	; 0x411e <__divsf3>
     654:	6b 01       	movw	r12, r22
     656:	7c 01       	movw	r14, r24
     658:	9b 01       	movw	r18, r22
     65a:	ac 01       	movw	r20, r24
     65c:	c9 57       	subi	r28, 0x79	; 121
     65e:	df 4f       	sbci	r29, 0xFF	; 255
     660:	68 81       	ld	r22, Y
     662:	79 81       	ldd	r23, Y+1	; 0x01
     664:	8a 81       	ldd	r24, Y+2	; 0x02
     666:	9b 81       	ldd	r25, Y+3	; 0x03
     668:	c7 58       	subi	r28, 0x87	; 135
     66a:	d0 40       	sbci	r29, 0x00	; 0
     66c:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     670:	6d a3       	std	Y+37, r22	; 0x25
     672:	7e a3       	std	Y+38, r23	; 0x26
     674:	8f a3       	std	Y+39, r24	; 0x27
     676:	98 a7       	std	Y+40, r25	; 0x28
     678:	a7 01       	movw	r20, r14
     67a:	96 01       	movw	r18, r12
     67c:	c5 57       	subi	r28, 0x75	; 117
     67e:	df 4f       	sbci	r29, 0xFF	; 255
     680:	68 81       	ld	r22, Y
     682:	79 81       	ldd	r23, Y+1	; 0x01
     684:	8a 81       	ldd	r24, Y+2	; 0x02
     686:	9b 81       	ldd	r25, Y+3	; 0x03
     688:	cb 58       	subi	r28, 0x8B	; 139
     68a:	d0 40       	sbci	r29, 0x00	; 0
     68c:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     690:	6d 83       	std	Y+5, r22	; 0x05
     692:	7e 83       	std	Y+6, r23	; 0x06
     694:	8f 83       	std	Y+7, r24	; 0x07
     696:	98 87       	std	Y+8, r25	; 0x08
     698:	a7 01       	movw	r20, r14
     69a:	96 01       	movw	r18, r12
     69c:	c1 57       	subi	r28, 0x71	; 113
     69e:	df 4f       	sbci	r29, 0xFF	; 255
     6a0:	68 81       	ld	r22, Y
     6a2:	79 81       	ldd	r23, Y+1	; 0x01
     6a4:	8a 81       	ldd	r24, Y+2	; 0x02
     6a6:	9b 81       	ldd	r25, Y+3	; 0x03
     6a8:	cf 58       	subi	r28, 0x8F	; 143
     6aa:	d0 40       	sbci	r29, 0x00	; 0
     6ac:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     6b0:	69 87       	std	Y+9, r22	; 0x09
     6b2:	7a 87       	std	Y+10, r23	; 0x0a
     6b4:	8b 87       	std	Y+11, r24	; 0x0b
     6b6:	9c 87       	std	Y+12, r25	; 0x0c
     6b8:	2d a1       	ldd	r18, Y+37	; 0x25
     6ba:	3e a1       	ldd	r19, Y+38	; 0x26
     6bc:	4f a1       	ldd	r20, Y+39	; 0x27
     6be:	58 a5       	ldd	r21, Y+40	; 0x28
     6c0:	6d a5       	ldd	r22, Y+45	; 0x2d
     6c2:	7e a5       	ldd	r23, Y+46	; 0x2e
     6c4:	8f a5       	ldd	r24, Y+47	; 0x2f
     6c6:	98 a9       	ldd	r25, Y+48	; 0x30
     6c8:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     6cc:	25 96       	adiw	r28, 0x05	; 5
     6ce:	6c af       	std	Y+60, r22	; 0x3c
     6d0:	7d af       	std	Y+61, r23	; 0x3d
     6d2:	8e af       	std	Y+62, r24	; 0x3e
     6d4:	9f af       	std	Y+63, r25	; 0x3f
     6d6:	25 97       	sbiw	r28, 0x05	; 5
     6d8:	2d 81       	ldd	r18, Y+5	; 0x05
     6da:	3e 81       	ldd	r19, Y+6	; 0x06
     6dc:	4f 81       	ldd	r20, Y+7	; 0x07
     6de:	58 85       	ldd	r21, Y+8	; 0x08
     6e0:	6d a5       	ldd	r22, Y+45	; 0x2d
     6e2:	7e a5       	ldd	r23, Y+46	; 0x2e
     6e4:	8f a5       	ldd	r24, Y+47	; 0x2f
     6e6:	98 a9       	ldd	r25, Y+48	; 0x30
     6e8:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     6ec:	65 96       	adiw	r28, 0x15	; 21
     6ee:	6c af       	std	Y+60, r22	; 0x3c
     6f0:	7d af       	std	Y+61, r23	; 0x3d
     6f2:	8e af       	std	Y+62, r24	; 0x3e
     6f4:	9f af       	std	Y+63, r25	; 0x3f
     6f6:	65 97       	sbiw	r28, 0x15	; 21
     6f8:	29 85       	ldd	r18, Y+9	; 0x09
     6fa:	3a 85       	ldd	r19, Y+10	; 0x0a
     6fc:	4b 85       	ldd	r20, Y+11	; 0x0b
     6fe:	5c 85       	ldd	r21, Y+12	; 0x0c
     700:	6d a5       	ldd	r22, Y+45	; 0x2d
     702:	7e a5       	ldd	r23, Y+46	; 0x2e
     704:	8f a5       	ldd	r24, Y+47	; 0x2f
     706:	98 a9       	ldd	r25, Y+48	; 0x30
     708:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     70c:	6b 01       	movw	r12, r22
     70e:	7c 01       	movw	r14, r24
     710:	2d a1       	ldd	r18, Y+37	; 0x25
     712:	3e a1       	ldd	r19, Y+38	; 0x26
     714:	4f a1       	ldd	r20, Y+39	; 0x27
     716:	58 a5       	ldd	r21, Y+40	; 0x28
     718:	2d 96       	adiw	r28, 0x0d	; 13
     71a:	6c ad       	ldd	r22, Y+60	; 0x3c
     71c:	7d ad       	ldd	r23, Y+61	; 0x3d
     71e:	8e ad       	ldd	r24, Y+62	; 0x3e
     720:	9f ad       	ldd	r25, Y+63	; 0x3f
     722:	2d 97       	sbiw	r28, 0x0d	; 13
     724:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     728:	69 96       	adiw	r28, 0x19	; 25
     72a:	6c af       	std	Y+60, r22	; 0x3c
     72c:	7d af       	std	Y+61, r23	; 0x3d
     72e:	8e af       	std	Y+62, r24	; 0x3e
     730:	9f af       	std	Y+63, r25	; 0x3f
     732:	69 97       	sbiw	r28, 0x19	; 25
     734:	2d a9       	ldd	r18, Y+53	; 0x35
     736:	3e a9       	ldd	r19, Y+54	; 0x36
     738:	4f a9       	ldd	r20, Y+55	; 0x37
     73a:	58 ad       	ldd	r21, Y+56	; 0x38
     73c:	6d a1       	ldd	r22, Y+37	; 0x25
     73e:	7e a1       	ldd	r23, Y+38	; 0x26
     740:	8f a1       	ldd	r24, Y+39	; 0x27
     742:	98 a5       	ldd	r25, Y+40	; 0x28
     744:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     748:	4b 01       	movw	r8, r22
     74a:	5c 01       	movw	r10, r24
     74c:	2d 89       	ldd	r18, Y+21	; 0x15
     74e:	3e 89       	ldd	r19, Y+22	; 0x16
     750:	4f 89       	ldd	r20, Y+23	; 0x17
     752:	58 8d       	ldd	r21, Y+24	; 0x18
     754:	65 96       	adiw	r28, 0x15	; 21
     756:	6c ad       	ldd	r22, Y+60	; 0x3c
     758:	7d ad       	ldd	r23, Y+61	; 0x3d
     75a:	8e ad       	ldd	r24, Y+62	; 0x3e
     75c:	9f ad       	ldd	r25, Y+63	; 0x3f
     75e:	65 97       	sbiw	r28, 0x15	; 21
     760:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     764:	9b 01       	movw	r18, r22
     766:	ac 01       	movw	r20, r24
     768:	c5 01       	movw	r24, r10
     76a:	b4 01       	movw	r22, r8
     76c:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
     770:	4b 01       	movw	r8, r22
     772:	5c 01       	movw	r10, r24
     774:	29 8d       	ldd	r18, Y+25	; 0x19
     776:	3a 8d       	ldd	r19, Y+26	; 0x1a
     778:	4b 8d       	ldd	r20, Y+27	; 0x1b
     77a:	5c 8d       	ldd	r21, Y+28	; 0x1c
     77c:	c7 01       	movw	r24, r14
     77e:	b6 01       	movw	r22, r12
     780:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     784:	9b 01       	movw	r18, r22
     786:	ac 01       	movw	r20, r24
     788:	c5 01       	movw	r24, r10
     78a:	b4 01       	movw	r22, r8
     78c:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     790:	4b 01       	movw	r8, r22
     792:	5c 01       	movw	r10, r24
     794:	29 a9       	ldd	r18, Y+49	; 0x31
     796:	3a a9       	ldd	r19, Y+50	; 0x32
     798:	4b a9       	ldd	r20, Y+51	; 0x33
     79a:	5c a9       	ldd	r21, Y+52	; 0x34
     79c:	6d a1       	ldd	r22, Y+37	; 0x25
     79e:	7e a1       	ldd	r23, Y+38	; 0x26
     7a0:	8f a1       	ldd	r24, Y+39	; 0x27
     7a2:	98 a5       	ldd	r25, Y+40	; 0x28
     7a4:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     7a8:	9b 01       	movw	r18, r22
     7aa:	ac 01       	movw	r20, r24
     7ac:	c5 01       	movw	r24, r10
     7ae:	b4 01       	movw	r22, r8
     7b0:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     7b4:	4b 01       	movw	r8, r22
     7b6:	5c 01       	movw	r10, r24
     7b8:	2d 81       	ldd	r18, Y+5	; 0x05
     7ba:	3e 81       	ldd	r19, Y+6	; 0x06
     7bc:	4f 81       	ldd	r20, Y+7	; 0x07
     7be:	58 85       	ldd	r21, Y+8	; 0x08
     7c0:	2d 96       	adiw	r28, 0x0d	; 13
     7c2:	6c ad       	ldd	r22, Y+60	; 0x3c
     7c4:	7d ad       	ldd	r23, Y+61	; 0x3d
     7c6:	8e ad       	ldd	r24, Y+62	; 0x3e
     7c8:	9f ad       	ldd	r25, Y+63	; 0x3f
     7ca:	2d 97       	sbiw	r28, 0x0d	; 13
     7cc:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     7d0:	29 8d       	ldd	r18, Y+25	; 0x19
     7d2:	3a 8d       	ldd	r19, Y+26	; 0x1a
     7d4:	4b 8d       	ldd	r20, Y+27	; 0x1b
     7d6:	5c 8d       	ldd	r21, Y+28	; 0x1c
     7d8:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     7dc:	9b 01       	movw	r18, r22
     7de:	ac 01       	movw	r20, r24
     7e0:	c5 01       	movw	r24, r10
     7e2:	b4 01       	movw	r22, r8
     7e4:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     7e8:	4b 01       	movw	r8, r22
     7ea:	5c 01       	movw	r10, r24
     7ec:	29 85       	ldd	r18, Y+9	; 0x09
     7ee:	3a 85       	ldd	r19, Y+10	; 0x0a
     7f0:	4b 85       	ldd	r20, Y+11	; 0x0b
     7f2:	5c 85       	ldd	r21, Y+12	; 0x0c
     7f4:	2d 96       	adiw	r28, 0x0d	; 13
     7f6:	6c ad       	ldd	r22, Y+60	; 0x3c
     7f8:	7d ad       	ldd	r23, Y+61	; 0x3d
     7fa:	8e ad       	ldd	r24, Y+62	; 0x3e
     7fc:	9f ad       	ldd	r25, Y+63	; 0x3f
     7fe:	2d 97       	sbiw	r28, 0x0d	; 13
     800:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     804:	2d 89       	ldd	r18, Y+21	; 0x15
     806:	3e 89       	ldd	r19, Y+22	; 0x16
     808:	4f 89       	ldd	r20, Y+23	; 0x17
     80a:	58 8d       	ldd	r21, Y+24	; 0x18
     80c:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     810:	9b 01       	movw	r18, r22
     812:	ac 01       	movw	r20, r24
     814:	c5 01       	movw	r24, r10
     816:	b4 01       	movw	r22, r8
     818:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     81c:	4b 01       	movw	r8, r22
     81e:	5c 01       	movw	r10, r24
     820:	29 a1       	ldd	r18, Y+33	; 0x21
     822:	3a a1       	ldd	r19, Y+34	; 0x22
     824:	4b a1       	ldd	r20, Y+35	; 0x23
     826:	5c a1       	ldd	r21, Y+36	; 0x24
     828:	6d a1       	ldd	r22, Y+37	; 0x25
     82a:	7e a1       	ldd	r23, Y+38	; 0x26
     82c:	8f a1       	ldd	r24, Y+39	; 0x27
     82e:	98 a5       	ldd	r25, Y+40	; 0x28
     830:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     834:	9b 01       	movw	r18, r22
     836:	ac 01       	movw	r20, r24
     838:	c5 01       	movw	r24, r10
     83a:	b4 01       	movw	r22, r8
     83c:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
     840:	4b 01       	movw	r8, r22
     842:	5c 01       	movw	r10, r24
     844:	21 96       	adiw	r28, 0x01	; 1
     846:	2c ad       	ldd	r18, Y+60	; 0x3c
     848:	3d ad       	ldd	r19, Y+61	; 0x3d
     84a:	4e ad       	ldd	r20, Y+62	; 0x3e
     84c:	5f ad       	ldd	r21, Y+63	; 0x3f
     84e:	21 97       	sbiw	r28, 0x01	; 1
     850:	6d a1       	ldd	r22, Y+37	; 0x25
     852:	7e a1       	ldd	r23, Y+38	; 0x26
     854:	8f a1       	ldd	r24, Y+39	; 0x27
     856:	98 a5       	ldd	r25, Y+40	; 0x28
     858:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     85c:	9b 01       	movw	r18, r22
     85e:	ac 01       	movw	r20, r24
     860:	c5 01       	movw	r24, r10
     862:	b4 01       	movw	r22, r8
     864:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
     868:	4b 01       	movw	r8, r22
     86a:	5c 01       	movw	r10, r24
     86c:	2d 89       	ldd	r18, Y+21	; 0x15
     86e:	3e 89       	ldd	r19, Y+22	; 0x16
     870:	4f 89       	ldd	r20, Y+23	; 0x17
     872:	58 8d       	ldd	r21, Y+24	; 0x18
     874:	25 96       	adiw	r28, 0x05	; 5
     876:	6c ad       	ldd	r22, Y+60	; 0x3c
     878:	7d ad       	ldd	r23, Y+61	; 0x3d
     87a:	8e ad       	ldd	r24, Y+62	; 0x3e
     87c:	9f ad       	ldd	r25, Y+63	; 0x3f
     87e:	25 97       	sbiw	r28, 0x05	; 5
     880:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     884:	69 83       	std	Y+1, r22	; 0x01
     886:	7a 83       	std	Y+2, r23	; 0x02
     888:	8b 83       	std	Y+3, r24	; 0x03
     88a:	9c 83       	std	Y+4, r25	; 0x04
     88c:	2d a9       	ldd	r18, Y+53	; 0x35
     88e:	3e a9       	ldd	r19, Y+54	; 0x36
     890:	4f a9       	ldd	r20, Y+55	; 0x37
     892:	58 ad       	ldd	r21, Y+56	; 0x38
     894:	6d 81       	ldd	r22, Y+5	; 0x05
     896:	7e 81       	ldd	r23, Y+6	; 0x06
     898:	8f 81       	ldd	r24, Y+7	; 0x07
     89a:	98 85       	ldd	r25, Y+8	; 0x08
     89c:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     8a0:	9b 01       	movw	r18, r22
     8a2:	ac 01       	movw	r20, r24
     8a4:	69 81       	ldd	r22, Y+1	; 0x01
     8a6:	7a 81       	ldd	r23, Y+2	; 0x02
     8a8:	8b 81       	ldd	r24, Y+3	; 0x03
     8aa:	9c 81       	ldd	r25, Y+4	; 0x04
     8ac:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     8b0:	69 83       	std	Y+1, r22	; 0x01
     8b2:	7a 83       	std	Y+2, r23	; 0x02
     8b4:	8b 83       	std	Y+3, r24	; 0x03
     8b6:	9c 83       	std	Y+4, r25	; 0x04
     8b8:	a3 01       	movw	r20, r6
     8ba:	92 01       	movw	r18, r4
     8bc:	c7 01       	movw	r24, r14
     8be:	b6 01       	movw	r22, r12
     8c0:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     8c4:	9b 01       	movw	r18, r22
     8c6:	ac 01       	movw	r20, r24
     8c8:	69 81       	ldd	r22, Y+1	; 0x01
     8ca:	7a 81       	ldd	r23, Y+2	; 0x02
     8cc:	8b 81       	ldd	r24, Y+3	; 0x03
     8ce:	9c 81       	ldd	r25, Y+4	; 0x04
     8d0:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
     8d4:	6b 01       	movw	r12, r22
     8d6:	7c 01       	movw	r14, r24
     8d8:	29 8d       	ldd	r18, Y+25	; 0x19
     8da:	3a 8d       	ldd	r19, Y+26	; 0x1a
     8dc:	4b 8d       	ldd	r20, Y+27	; 0x1b
     8de:	5c 8d       	ldd	r21, Y+28	; 0x1c
     8e0:	69 96       	adiw	r28, 0x19	; 25
     8e2:	6c ad       	ldd	r22, Y+60	; 0x3c
     8e4:	7d ad       	ldd	r23, Y+61	; 0x3d
     8e6:	8e ad       	ldd	r24, Y+62	; 0x3e
     8e8:	9f ad       	ldd	r25, Y+63	; 0x3f
     8ea:	69 97       	sbiw	r28, 0x19	; 25
     8ec:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     8f0:	9b 01       	movw	r18, r22
     8f2:	ac 01       	movw	r20, r24
     8f4:	c7 01       	movw	r24, r14
     8f6:	b6 01       	movw	r22, r12
     8f8:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     8fc:	6b 01       	movw	r12, r22
     8fe:	7c 01       	movw	r14, r24
     900:	29 a9       	ldd	r18, Y+49	; 0x31
     902:	3a a9       	ldd	r19, Y+50	; 0x32
     904:	4b a9       	ldd	r20, Y+51	; 0x33
     906:	5c a9       	ldd	r21, Y+52	; 0x34
     908:	6d 81       	ldd	r22, Y+5	; 0x05
     90a:	7e 81       	ldd	r23, Y+6	; 0x06
     90c:	8f 81       	ldd	r24, Y+7	; 0x07
     90e:	98 85       	ldd	r25, Y+8	; 0x08
     910:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     914:	9b 01       	movw	r18, r22
     916:	ac 01       	movw	r20, r24
     918:	c7 01       	movw	r24, r14
     91a:	b6 01       	movw	r22, r12
     91c:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
     920:	6b 01       	movw	r12, r22
     922:	7c 01       	movw	r14, r24
     924:	29 a1       	ldd	r18, Y+33	; 0x21
     926:	3a a1       	ldd	r19, Y+34	; 0x22
     928:	4b a1       	ldd	r20, Y+35	; 0x23
     92a:	5c a1       	ldd	r21, Y+36	; 0x24
     92c:	6d 81       	ldd	r22, Y+5	; 0x05
     92e:	7e 81       	ldd	r23, Y+6	; 0x06
     930:	8f 81       	ldd	r24, Y+7	; 0x07
     932:	98 85       	ldd	r25, Y+8	; 0x08
     934:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     938:	9b 01       	movw	r18, r22
     93a:	ac 01       	movw	r20, r24
     93c:	c7 01       	movw	r24, r14
     93e:	b6 01       	movw	r22, r12
     940:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     944:	6b 01       	movw	r12, r22
     946:	7c 01       	movw	r14, r24
     948:	29 85       	ldd	r18, Y+9	; 0x09
     94a:	3a 85       	ldd	r19, Y+10	; 0x0a
     94c:	4b 85       	ldd	r20, Y+11	; 0x0b
     94e:	5c 85       	ldd	r21, Y+12	; 0x0c
     950:	61 96       	adiw	r28, 0x11	; 17
     952:	6c ad       	ldd	r22, Y+60	; 0x3c
     954:	7d ad       	ldd	r23, Y+61	; 0x3d
     956:	8e ad       	ldd	r24, Y+62	; 0x3e
     958:	9f ad       	ldd	r25, Y+63	; 0x3f
     95a:	61 97       	sbiw	r28, 0x11	; 17
     95c:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     960:	2d 89       	ldd	r18, Y+21	; 0x15
     962:	3e 89       	ldd	r19, Y+22	; 0x16
     964:	4f 89       	ldd	r20, Y+23	; 0x17
     966:	58 8d       	ldd	r21, Y+24	; 0x18
     968:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     96c:	9b 01       	movw	r18, r22
     96e:	ac 01       	movw	r20, r24
     970:	c7 01       	movw	r24, r14
     972:	b6 01       	movw	r22, r12
     974:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     978:	6b 01       	movw	r12, r22
     97a:	7c 01       	movw	r14, r24
     97c:	21 96       	adiw	r28, 0x01	; 1
     97e:	2c ad       	ldd	r18, Y+60	; 0x3c
     980:	3d ad       	ldd	r19, Y+61	; 0x3d
     982:	4e ad       	ldd	r20, Y+62	; 0x3e
     984:	5f ad       	ldd	r21, Y+63	; 0x3f
     986:	21 97       	sbiw	r28, 0x01	; 1
     988:	6d 81       	ldd	r22, Y+5	; 0x05
     98a:	7e 81       	ldd	r23, Y+6	; 0x06
     98c:	8f 81       	ldd	r24, Y+7	; 0x07
     98e:	98 85       	ldd	r25, Y+8	; 0x08
     990:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     994:	9b 01       	movw	r18, r22
     996:	ac 01       	movw	r20, r24
     998:	c7 01       	movw	r24, r14
     99a:	b6 01       	movw	r22, r12
     99c:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
     9a0:	6b 01       	movw	r12, r22
     9a2:	7c 01       	movw	r14, r24
     9a4:	a5 01       	movw	r20, r10
     9a6:	94 01       	movw	r18, r8
     9a8:	c5 01       	movw	r24, r10
     9aa:	b4 01       	movw	r22, r8
     9ac:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     9b0:	69 83       	std	Y+1, r22	; 0x01
     9b2:	7a 83       	std	Y+2, r23	; 0x02
     9b4:	8b 83       	std	Y+3, r24	; 0x03
     9b6:	9c 83       	std	Y+4, r25	; 0x04
     9b8:	a5 01       	movw	r20, r10
     9ba:	94 01       	movw	r18, r8
     9bc:	c5 01       	movw	r24, r10
     9be:	b4 01       	movw	r22, r8
     9c0:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     9c4:	4b 01       	movw	r8, r22
     9c6:	5c 01       	movw	r10, r24
     9c8:	a7 01       	movw	r20, r14
     9ca:	96 01       	movw	r18, r12
     9cc:	c7 01       	movw	r24, r14
     9ce:	b6 01       	movw	r22, r12
     9d0:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     9d4:	9b 01       	movw	r18, r22
     9d6:	ac 01       	movw	r20, r24
     9d8:	c5 01       	movw	r24, r10
     9da:	b4 01       	movw	r22, r8
     9dc:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     9e0:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <sqrt>
     9e4:	69 83       	std	Y+1, r22	; 0x01
     9e6:	7a 83       	std	Y+2, r23	; 0x02
     9e8:	8b 83       	std	Y+3, r24	; 0x03
     9ea:	9c 83       	std	Y+4, r25	; 0x04
     9ec:	25 96       	adiw	r28, 0x05	; 5
     9ee:	6c ad       	ldd	r22, Y+60	; 0x3c
     9f0:	7d ad       	ldd	r23, Y+61	; 0x3d
     9f2:	8e ad       	ldd	r24, Y+62	; 0x3e
     9f4:	9f ad       	ldd	r25, Y+63	; 0x3f
     9f6:	25 97       	sbiw	r28, 0x05	; 5
     9f8:	90 58       	subi	r25, 0x80	; 128
     9fa:	29 8d       	ldd	r18, Y+25	; 0x19
     9fc:	3a 8d       	ldd	r19, Y+26	; 0x1a
     9fe:	4b 8d       	ldd	r20, Y+27	; 0x1b
     a00:	5c 8d       	ldd	r21, Y+28	; 0x1c
     a02:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     a06:	6b 01       	movw	r12, r22
     a08:	7c 01       	movw	r14, r24
     a0a:	a3 01       	movw	r20, r6
     a0c:	92 01       	movw	r18, r4
     a0e:	65 96       	adiw	r28, 0x15	; 21
     a10:	6c ad       	ldd	r22, Y+60	; 0x3c
     a12:	7d ad       	ldd	r23, Y+61	; 0x3d
     a14:	8e ad       	ldd	r24, Y+62	; 0x3e
     a16:	9f ad       	ldd	r25, Y+63	; 0x3f
     a18:	65 97       	sbiw	r28, 0x15	; 21
     a1a:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     a1e:	9b 01       	movw	r18, r22
     a20:	ac 01       	movw	r20, r24
     a22:	c7 01       	movw	r24, r14
     a24:	b6 01       	movw	r22, r12
     a26:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     a2a:	6b 01       	movw	r12, r22
     a2c:	7c 01       	movw	r14, r24
     a2e:	2d a9       	ldd	r18, Y+53	; 0x35
     a30:	3e a9       	ldd	r19, Y+54	; 0x36
     a32:	4f a9       	ldd	r20, Y+55	; 0x37
     a34:	58 ad       	ldd	r21, Y+56	; 0x38
     a36:	69 85       	ldd	r22, Y+9	; 0x09
     a38:	7a 85       	ldd	r23, Y+10	; 0x0a
     a3a:	8b 85       	ldd	r24, Y+11	; 0x0b
     a3c:	9c 85       	ldd	r25, Y+12	; 0x0c
     a3e:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     a42:	9b 01       	movw	r18, r22
     a44:	ac 01       	movw	r20, r24
     a46:	c7 01       	movw	r24, r14
     a48:	b6 01       	movw	r22, r12
     a4a:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     a4e:	6b 01       	movw	r12, r22
     a50:	7c 01       	movw	r14, r24
     a52:	2d 89       	ldd	r18, Y+21	; 0x15
     a54:	3e 89       	ldd	r19, Y+22	; 0x16
     a56:	4f 89       	ldd	r20, Y+23	; 0x17
     a58:	58 8d       	ldd	r21, Y+24	; 0x18
     a5a:	69 96       	adiw	r28, 0x19	; 25
     a5c:	6c ad       	ldd	r22, Y+60	; 0x3c
     a5e:	7d ad       	ldd	r23, Y+61	; 0x3d
     a60:	8e ad       	ldd	r24, Y+62	; 0x3e
     a62:	9f ad       	ldd	r25, Y+63	; 0x3f
     a64:	69 97       	sbiw	r28, 0x19	; 25
     a66:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     a6a:	9b 01       	movw	r18, r22
     a6c:	ac 01       	movw	r20, r24
     a6e:	c7 01       	movw	r24, r14
     a70:	b6 01       	movw	r22, r12
     a72:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     a76:	6b 01       	movw	r12, r22
     a78:	7c 01       	movw	r14, r24
     a7a:	29 a9       	ldd	r18, Y+49	; 0x31
     a7c:	3a a9       	ldd	r19, Y+50	; 0x32
     a7e:	4b a9       	ldd	r20, Y+51	; 0x33
     a80:	5c a9       	ldd	r21, Y+52	; 0x34
     a82:	69 85       	ldd	r22, Y+9	; 0x09
     a84:	7a 85       	ldd	r23, Y+10	; 0x0a
     a86:	8b 85       	ldd	r24, Y+11	; 0x0b
     a88:	9c 85       	ldd	r25, Y+12	; 0x0c
     a8a:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     a8e:	9b 01       	movw	r18, r22
     a90:	ac 01       	movw	r20, r24
     a92:	c7 01       	movw	r24, r14
     a94:	b6 01       	movw	r22, r12
     a96:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
     a9a:	6b 01       	movw	r12, r22
     a9c:	7c 01       	movw	r14, r24
     a9e:	2d 81       	ldd	r18, Y+5	; 0x05
     aa0:	3e 81       	ldd	r19, Y+6	; 0x06
     aa2:	4f 81       	ldd	r20, Y+7	; 0x07
     aa4:	58 85       	ldd	r21, Y+8	; 0x08
     aa6:	61 96       	adiw	r28, 0x11	; 17
     aa8:	6c ad       	ldd	r22, Y+60	; 0x3c
     aaa:	7d ad       	ldd	r23, Y+61	; 0x3d
     aac:	8e ad       	ldd	r24, Y+62	; 0x3e
     aae:	9f ad       	ldd	r25, Y+63	; 0x3f
     ab0:	61 97       	sbiw	r28, 0x11	; 17
     ab2:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     ab6:	2d 89       	ldd	r18, Y+21	; 0x15
     ab8:	3e 89       	ldd	r19, Y+22	; 0x16
     aba:	4f 89       	ldd	r20, Y+23	; 0x17
     abc:	58 8d       	ldd	r21, Y+24	; 0x18
     abe:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     ac2:	9b 01       	movw	r18, r22
     ac4:	ac 01       	movw	r20, r24
     ac6:	c7 01       	movw	r24, r14
     ac8:	b6 01       	movw	r22, r12
     aca:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     ace:	6b 01       	movw	r12, r22
     ad0:	7c 01       	movw	r14, r24
     ad2:	29 a1       	ldd	r18, Y+33	; 0x21
     ad4:	3a a1       	ldd	r19, Y+34	; 0x22
     ad6:	4b a1       	ldd	r20, Y+35	; 0x23
     ad8:	5c a1       	ldd	r21, Y+36	; 0x24
     ada:	69 85       	ldd	r22, Y+9	; 0x09
     adc:	7a 85       	ldd	r23, Y+10	; 0x0a
     ade:	8b 85       	ldd	r24, Y+11	; 0x0b
     ae0:	9c 85       	ldd	r25, Y+12	; 0x0c
     ae2:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     ae6:	9b 01       	movw	r18, r22
     ae8:	ac 01       	movw	r20, r24
     aea:	c7 01       	movw	r24, r14
     aec:	b6 01       	movw	r22, r12
     aee:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
     af2:	6b 01       	movw	r12, r22
     af4:	7c 01       	movw	r14, r24
     af6:	21 96       	adiw	r28, 0x01	; 1
     af8:	2c ad       	ldd	r18, Y+60	; 0x3c
     afa:	3d ad       	ldd	r19, Y+61	; 0x3d
     afc:	4e ad       	ldd	r20, Y+62	; 0x3e
     afe:	5f ad       	ldd	r21, Y+63	; 0x3f
     b00:	21 97       	sbiw	r28, 0x01	; 1
     b02:	69 85       	ldd	r22, Y+9	; 0x09
     b04:	7a 85       	ldd	r23, Y+10	; 0x0a
     b06:	8b 85       	ldd	r24, Y+11	; 0x0b
     b08:	9c 85       	ldd	r25, Y+12	; 0x0c
     b0a:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     b0e:	9b 01       	movw	r18, r22
     b10:	ac 01       	movw	r20, r24
     b12:	c7 01       	movw	r24, r14
     b14:	b6 01       	movw	r22, r12
     b16:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     b1a:	6b 01       	movw	r12, r22
     b1c:	7c 01       	movw	r14, r24
     b1e:	9b 01       	movw	r18, r22
     b20:	ac 01       	movw	r20, r24
     b22:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     b26:	65 96       	adiw	r28, 0x15	; 21
     b28:	6c af       	std	Y+60, r22	; 0x3c
     b2a:	7d af       	std	Y+61, r23	; 0x3d
     b2c:	8e af       	std	Y+62, r24	; 0x3e
     b2e:	9f af       	std	Y+63, r25	; 0x3f
     b30:	65 97       	sbiw	r28, 0x15	; 21
     b32:	29 ad       	ldd	r18, Y+57	; 0x39
     b34:	3a ad       	ldd	r19, Y+58	; 0x3a
     b36:	4b ad       	ldd	r20, Y+59	; 0x3b
     b38:	5c ad       	ldd	r21, Y+60	; 0x3c
     b3a:	ca 01       	movw	r24, r20
     b3c:	b9 01       	movw	r22, r18
     b3e:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     b42:	4b 01       	movw	r8, r22
     b44:	5c 01       	movw	r10, r24
     b46:	2d a5       	ldd	r18, Y+45	; 0x2d
     b48:	3e a5       	ldd	r19, Y+46	; 0x2e
     b4a:	4f a5       	ldd	r20, Y+47	; 0x2f
     b4c:	58 a9       	ldd	r21, Y+48	; 0x30
     b4e:	69 8d       	ldd	r22, Y+25	; 0x19
     b50:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b52:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b54:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b56:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     b5a:	9b 01       	movw	r18, r22
     b5c:	ac 01       	movw	r20, r24
     b5e:	c5 01       	movw	r24, r10
     b60:	b4 01       	movw	r22, r8
     b62:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
     b66:	4b 01       	movw	r8, r22
     b68:	5c 01       	movw	r10, r24
     b6a:	a1 96       	adiw	r28, 0x21	; 33
     b6c:	2c ad       	ldd	r18, Y+60	; 0x3c
     b6e:	3d ad       	ldd	r19, Y+61	; 0x3d
     b70:	4e ad       	ldd	r20, Y+62	; 0x3e
     b72:	5f ad       	ldd	r21, Y+63	; 0x3f
     b74:	a1 97       	sbiw	r28, 0x21	; 33
     b76:	6d 8d       	ldd	r22, Y+29	; 0x1d
     b78:	7e 8d       	ldd	r23, Y+30	; 0x1e
     b7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b7c:	98 a1       	ldd	r25, Y+32	; 0x20
     b7e:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     b82:	9b 01       	movw	r18, r22
     b84:	ac 01       	movw	r20, r24
     b86:	c5 01       	movw	r24, r10
     b88:	b4 01       	movw	r22, r8
     b8a:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
     b8e:	6d ab       	std	Y+53, r22	; 0x35
     b90:	7e ab       	std	Y+54, r23	; 0x36
     b92:	8f ab       	std	Y+55, r24	; 0x37
     b94:	98 af       	std	Y+56, r25	; 0x38
     b96:	6d 96       	adiw	r28, 0x1d	; 29
     b98:	2c ad       	ldd	r18, Y+60	; 0x3c
     b9a:	3d ad       	ldd	r19, Y+61	; 0x3d
     b9c:	4e ad       	ldd	r20, Y+62	; 0x3e
     b9e:	5f ad       	ldd	r21, Y+63	; 0x3f
     ba0:	6d 97       	sbiw	r28, 0x1d	; 29
     ba2:	ca 01       	movw	r24, r20
     ba4:	b9 01       	movw	r22, r18
     ba6:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     baa:	4b 01       	movw	r8, r22
     bac:	5c 01       	movw	r10, r24
     bae:	61 96       	adiw	r28, 0x11	; 17
     bb0:	2c ad       	ldd	r18, Y+60	; 0x3c
     bb2:	3d ad       	ldd	r19, Y+61	; 0x3d
     bb4:	4e ad       	ldd	r20, Y+62	; 0x3e
     bb6:	5f ad       	ldd	r21, Y+63	; 0x3f
     bb8:	61 97       	sbiw	r28, 0x11	; 17
     bba:	6d 89       	ldd	r22, Y+21	; 0x15
     bbc:	7e 89       	ldd	r23, Y+22	; 0x16
     bbe:	8f 89       	ldd	r24, Y+23	; 0x17
     bc0:	98 8d       	ldd	r25, Y+24	; 0x18
     bc2:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     bc6:	9b 01       	movw	r18, r22
     bc8:	ac 01       	movw	r20, r24
     bca:	c5 01       	movw	r24, r10
     bcc:	b4 01       	movw	r22, r8
     bce:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     bd2:	4b 01       	movw	r8, r22
     bd4:	5c 01       	movw	r10, r24
     bd6:	a1 96       	adiw	r28, 0x21	; 33
     bd8:	2c ad       	ldd	r18, Y+60	; 0x3c
     bda:	3d ad       	ldd	r19, Y+61	; 0x3d
     bdc:	4e ad       	ldd	r20, Y+62	; 0x3e
     bde:	5f ad       	ldd	r21, Y+63	; 0x3f
     be0:	a1 97       	sbiw	r28, 0x21	; 33
     be2:	69 89       	ldd	r22, Y+17	; 0x11
     be4:	7a 89       	ldd	r23, Y+18	; 0x12
     be6:	8b 89       	ldd	r24, Y+19	; 0x13
     be8:	9c 89       	ldd	r25, Y+20	; 0x14
     bea:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     bee:	9b 01       	movw	r18, r22
     bf0:	ac 01       	movw	r20, r24
     bf2:	c5 01       	movw	r24, r10
     bf4:	b4 01       	movw	r22, r8
     bf6:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
     bfa:	25 96       	adiw	r28, 0x05	; 5
     bfc:	6c af       	std	Y+60, r22	; 0x3c
     bfe:	7d af       	std	Y+61, r23	; 0x3d
     c00:	8e af       	std	Y+62, r24	; 0x3e
     c02:	9f af       	std	Y+63, r25	; 0x3f
     c04:	25 97       	sbiw	r28, 0x05	; 5
     c06:	29 8d       	ldd	r18, Y+25	; 0x19
     c08:	3a 8d       	ldd	r19, Y+26	; 0x1a
     c0a:	4b 8d       	ldd	r20, Y+27	; 0x1b
     c0c:	5c 8d       	ldd	r21, Y+28	; 0x1c
     c0e:	c7 01       	movw	r24, r14
     c10:	b6 01       	movw	r22, r12
     c12:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     c16:	69 96       	adiw	r28, 0x19	; 25
     c18:	6c af       	std	Y+60, r22	; 0x3c
     c1a:	7d af       	std	Y+61, r23	; 0x3d
     c1c:	8e af       	std	Y+62, r24	; 0x3e
     c1e:	9f af       	std	Y+63, r25	; 0x3f
     c20:	69 97       	sbiw	r28, 0x19	; 25
     c22:	29 a1       	ldd	r18, Y+33	; 0x21
     c24:	3a a1       	ldd	r19, Y+34	; 0x22
     c26:	4b a1       	ldd	r20, Y+35	; 0x23
     c28:	5c a1       	ldd	r21, Y+36	; 0x24
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	9f e3       	ldi	r25, 0x3F	; 63
     c32:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
     c36:	21 96       	adiw	r28, 0x01	; 1
     c38:	2c ad       	ldd	r18, Y+60	; 0x3c
     c3a:	3d ad       	ldd	r19, Y+61	; 0x3d
     c3c:	4e ad       	ldd	r20, Y+62	; 0x3e
     c3e:	5f ad       	ldd	r21, Y+63	; 0x3f
     c40:	21 97       	sbiw	r28, 0x01	; 1
     c42:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
     c46:	29 81       	ldd	r18, Y+1	; 0x01
     c48:	3a 81       	ldd	r19, Y+2	; 0x02
     c4a:	4b 81       	ldd	r20, Y+3	; 0x03
     c4c:	5c 81       	ldd	r21, Y+4	; 0x04
     c4e:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     c52:	4b 01       	movw	r8, r22
     c54:	5c 01       	movw	r10, r24
     c56:	a9 96       	adiw	r28, 0x29	; 41
     c58:	2c ad       	ldd	r18, Y+60	; 0x3c
     c5a:	3d ad       	ldd	r19, Y+61	; 0x3d
     c5c:	4e ad       	ldd	r20, Y+62	; 0x3e
     c5e:	5f ad       	ldd	r21, Y+63	; 0x3f
     c60:	a9 97       	sbiw	r28, 0x29	; 41
     c62:	69 ad       	ldd	r22, Y+57	; 0x39
     c64:	7a ad       	ldd	r23, Y+58	; 0x3a
     c66:	8b ad       	ldd	r24, Y+59	; 0x3b
     c68:	9c ad       	ldd	r25, Y+60	; 0x3c
     c6a:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
     c6e:	a7 01       	movw	r20, r14
     c70:	96 01       	movw	r18, r12
     c72:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     c76:	9b 01       	movw	r18, r22
     c78:	ac 01       	movw	r20, r24
     c7a:	c5 01       	movw	r24, r10
     c7c:	b4 01       	movw	r22, r8
     c7e:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     c82:	2d a1       	ldd	r18, Y+37	; 0x25
     c84:	3e a1       	ldd	r19, Y+38	; 0x26
     c86:	4f a1       	ldd	r20, Y+39	; 0x27
     c88:	58 a5       	ldd	r21, Y+40	; 0x28
     c8a:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
     c8e:	6d a3       	std	Y+37, r22	; 0x25
     c90:	7e a3       	std	Y+38, r23	; 0x26
     c92:	8f a3       	std	Y+39, r24	; 0x27
     c94:	98 a7       	std	Y+40, r25	; 0x28
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	9a 81       	ldd	r25, Y+2	; 0x02
     c9a:	ab 81       	ldd	r26, Y+3	; 0x03
     c9c:	bc 81       	ldd	r27, Y+4	; 0x04
     c9e:	b0 58       	subi	r27, 0x80	; 128
     ca0:	21 96       	adiw	r28, 0x01	; 1
     ca2:	8c af       	std	Y+60, r24	; 0x3c
     ca4:	9d af       	std	Y+61, r25	; 0x3d
     ca6:	ae af       	std	Y+62, r26	; 0x3e
     ca8:	bf af       	std	Y+63, r27	; 0x3f
     caa:	21 97       	sbiw	r28, 0x01	; 1
     cac:	a3 01       	movw	r20, r6
     cae:	92 01       	movw	r18, r4
     cb0:	c7 01       	movw	r24, r14
     cb2:	b6 01       	movw	r22, r12
     cb4:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     cb8:	ad 96       	adiw	r28, 0x2d	; 45
     cba:	6c af       	std	Y+60, r22	; 0x3c
     cbc:	7d af       	std	Y+61, r23	; 0x3d
     cbe:	8e af       	std	Y+62, r24	; 0x3e
     cc0:	9f af       	std	Y+63, r25	; 0x3f
     cc2:	ad 97       	sbiw	r28, 0x2d	; 45
     cc4:	29 8d       	ldd	r18, Y+25	; 0x19
     cc6:	3a 8d       	ldd	r19, Y+26	; 0x1a
     cc8:	4b 8d       	ldd	r20, Y+27	; 0x1b
     cca:	5c 8d       	ldd	r21, Y+28	; 0x1c
     ccc:	c3 01       	movw	r24, r6
     cce:	b2 01       	movw	r22, r4
     cd0:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     cd4:	4b 01       	movw	r8, r22
     cd6:	5c 01       	movw	r10, r24
     cd8:	2d 89       	ldd	r18, Y+21	; 0x15
     cda:	3e 89       	ldd	r19, Y+22	; 0x16
     cdc:	4f 89       	ldd	r20, Y+23	; 0x17
     cde:	58 8d       	ldd	r21, Y+24	; 0x18
     ce0:	69 a5       	ldd	r22, Y+41	; 0x29
     ce2:	7a a5       	ldd	r23, Y+42	; 0x2a
     ce4:	8b a5       	ldd	r24, Y+43	; 0x2b
     ce6:	9c a5       	ldd	r25, Y+44	; 0x2c
     ce8:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     cec:	9b 01       	movw	r18, r22
     cee:	ac 01       	movw	r20, r24
     cf0:	c5 01       	movw	r24, r10
     cf2:	b4 01       	movw	r22, r8
     cf4:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
     cf8:	29 81       	ldd	r18, Y+1	; 0x01
     cfa:	3a 81       	ldd	r19, Y+2	; 0x02
     cfc:	4b 81       	ldd	r20, Y+3	; 0x03
     cfe:	5c 81       	ldd	r21, Y+4	; 0x04
     d00:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     d04:	4b 01       	movw	r8, r22
     d06:	5c 01       	movw	r10, r24
     d08:	2d 89       	ldd	r18, Y+21	; 0x15
     d0a:	3e 89       	ldd	r19, Y+22	; 0x16
     d0c:	4f 89       	ldd	r20, Y+23	; 0x17
     d0e:	58 8d       	ldd	r21, Y+24	; 0x18
     d10:	69 8d       	ldd	r22, Y+25	; 0x19
     d12:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d14:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d16:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d18:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     d1c:	9b 01       	movw	r18, r22
     d1e:	ac 01       	movw	r20, r24
     d20:	6d 96       	adiw	r28, 0x1d	; 29
     d22:	6c ad       	ldd	r22, Y+60	; 0x3c
     d24:	7d ad       	ldd	r23, Y+61	; 0x3d
     d26:	8e ad       	ldd	r24, Y+62	; 0x3e
     d28:	9f ad       	ldd	r25, Y+63	; 0x3f
     d2a:	6d 97       	sbiw	r28, 0x1d	; 29
     d2c:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     d30:	a7 01       	movw	r20, r14
     d32:	96 01       	movw	r18, r12
     d34:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     d38:	9b 01       	movw	r18, r22
     d3a:	ac 01       	movw	r20, r24
     d3c:	c5 01       	movw	r24, r10
     d3e:	b4 01       	movw	r22, r8
     d40:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     d44:	2d 81       	ldd	r18, Y+5	; 0x05
     d46:	3e 81       	ldd	r19, Y+6	; 0x06
     d48:	4f 81       	ldd	r20, Y+7	; 0x07
     d4a:	58 85       	ldd	r21, Y+8	; 0x08
     d4c:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
     d50:	6d 83       	std	Y+5, r22	; 0x05
     d52:	7e 83       	std	Y+6, r23	; 0x06
     d54:	8f 83       	std	Y+7, r24	; 0x07
     d56:	98 87       	std	Y+8, r25	; 0x08
     d58:	29 8d       	ldd	r18, Y+25	; 0x19
     d5a:	3a 8d       	ldd	r19, Y+26	; 0x1a
     d5c:	4b 8d       	ldd	r20, Y+27	; 0x1b
     d5e:	5c 8d       	ldd	r21, Y+28	; 0x1c
     d60:	69 81       	ldd	r22, Y+1	; 0x01
     d62:	7a 81       	ldd	r23, Y+2	; 0x02
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	9c 81       	ldd	r25, Y+4	; 0x04
     d68:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     d6c:	69 8b       	std	Y+17, r22	; 0x11
     d6e:	7a 8b       	std	Y+18, r23	; 0x12
     d70:	8b 8b       	std	Y+19, r24	; 0x13
     d72:	9c 8b       	std	Y+20, r25	; 0x14
     d74:	29 ad       	ldd	r18, Y+57	; 0x39
     d76:	3a ad       	ldd	r19, Y+58	; 0x3a
     d78:	4b ad       	ldd	r20, Y+59	; 0x3b
     d7a:	5c ad       	ldd	r21, Y+60	; 0x3c
     d7c:	a9 96       	adiw	r28, 0x29	; 41
     d7e:	6c ad       	ldd	r22, Y+60	; 0x3c
     d80:	7d ad       	ldd	r23, Y+61	; 0x3d
     d82:	8e ad       	ldd	r24, Y+62	; 0x3e
     d84:	9f ad       	ldd	r25, Y+63	; 0x3f
     d86:	a9 97       	sbiw	r28, 0x29	; 41
     d88:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     d8c:	29 81       	ldd	r18, Y+1	; 0x01
     d8e:	3a 81       	ldd	r19, Y+2	; 0x02
     d90:	4b 81       	ldd	r20, Y+3	; 0x03
     d92:	5c 81       	ldd	r21, Y+4	; 0x04
     d94:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     d98:	4b 01       	movw	r8, r22
     d9a:	5c 01       	movw	r10, r24
     d9c:	29 a9       	ldd	r18, Y+49	; 0x31
     d9e:	3a a9       	ldd	r19, Y+50	; 0x32
     da0:	4b a9       	ldd	r20, Y+51	; 0x33
     da2:	5c a9       	ldd	r21, Y+52	; 0x34
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	9f e3       	ldi	r25, 0x3F	; 63
     dac:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
     db0:	29 a1       	ldd	r18, Y+33	; 0x21
     db2:	3a a1       	ldd	r19, Y+34	; 0x22
     db4:	4b a1       	ldd	r20, Y+35	; 0x23
     db6:	5c a1       	ldd	r21, Y+36	; 0x24
     db8:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
     dbc:	a7 01       	movw	r20, r14
     dbe:	96 01       	movw	r18, r12
     dc0:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     dc4:	9b 01       	movw	r18, r22
     dc6:	ac 01       	movw	r20, r24
     dc8:	c5 01       	movw	r24, r10
     dca:	b4 01       	movw	r22, r8
     dcc:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     dd0:	29 85       	ldd	r18, Y+9	; 0x09
     dd2:	3a 85       	ldd	r19, Y+10	; 0x0a
     dd4:	4b 85       	ldd	r20, Y+11	; 0x0b
     dd6:	5c 85       	ldd	r21, Y+12	; 0x0c
     dd8:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
     ddc:	69 87       	std	Y+9, r22	; 0x09
     dde:	7a 87       	std	Y+10, r23	; 0x0a
     de0:	8b 87       	std	Y+11, r24	; 0x0b
     de2:	9c 87       	std	Y+12, r25	; 0x0c
     de4:	61 96       	adiw	r28, 0x11	; 17
     de6:	6c ad       	ldd	r22, Y+60	; 0x3c
     de8:	7d ad       	ldd	r23, Y+61	; 0x3d
     dea:	8e ad       	ldd	r24, Y+62	; 0x3e
     dec:	9f ad       	ldd	r25, Y+63	; 0x3f
     dee:	61 97       	sbiw	r28, 0x11	; 17
     df0:	90 58       	subi	r25, 0x80	; 128
     df2:	2d a9       	ldd	r18, Y+53	; 0x35
     df4:	3e a9       	ldd	r19, Y+54	; 0x36
     df6:	4f a9       	ldd	r20, Y+55	; 0x37
     df8:	58 ad       	ldd	r21, Y+56	; 0x38
     dfa:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     dfe:	4b 01       	movw	r8, r22
     e00:	5c 01       	movw	r10, r24
     e02:	2d 96       	adiw	r28, 0x0d	; 13
     e04:	2c ad       	ldd	r18, Y+60	; 0x3c
     e06:	3d ad       	ldd	r19, Y+61	; 0x3d
     e08:	4e ad       	ldd	r20, Y+62	; 0x3e
     e0a:	5f ad       	ldd	r21, Y+63	; 0x3f
     e0c:	2d 97       	sbiw	r28, 0x0d	; 13
     e0e:	25 96       	adiw	r28, 0x05	; 5
     e10:	6c ad       	ldd	r22, Y+60	; 0x3c
     e12:	7d ad       	ldd	r23, Y+61	; 0x3d
     e14:	8e ad       	ldd	r24, Y+62	; 0x3e
     e16:	9f ad       	ldd	r25, Y+63	; 0x3f
     e18:	25 97       	sbiw	r28, 0x05	; 5
     e1a:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     e1e:	9b 01       	movw	r18, r22
     e20:	ac 01       	movw	r20, r24
     e22:	c5 01       	movw	r24, r10
     e24:	b4 01       	movw	r22, r8
     e26:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     e2a:	4b 01       	movw	r8, r22
     e2c:	5c 01       	movw	r10, r24
     e2e:	2d a1       	ldd	r18, Y+37	; 0x25
     e30:	3e a1       	ldd	r19, Y+38	; 0x26
     e32:	4f a1       	ldd	r20, Y+39	; 0x27
     e34:	58 a5       	ldd	r21, Y+40	; 0x28
     e36:	69 96       	adiw	r28, 0x19	; 25
     e38:	6c ad       	ldd	r22, Y+60	; 0x3c
     e3a:	7d ad       	ldd	r23, Y+61	; 0x3d
     e3c:	8e ad       	ldd	r24, Y+62	; 0x3e
     e3e:	9f ad       	ldd	r25, Y+63	; 0x3f
     e40:	69 97       	sbiw	r28, 0x19	; 25
     e42:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     e46:	9b 01       	movw	r18, r22
     e48:	ac 01       	movw	r20, r24
     e4a:	c5 01       	movw	r24, r10
     e4c:	b4 01       	movw	r22, r8
     e4e:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
     e52:	4b 01       	movw	r8, r22
     e54:	5c 01       	movw	r10, r24
     e56:	2d 89       	ldd	r18, Y+21	; 0x15
     e58:	3e 89       	ldd	r19, Y+22	; 0x16
     e5a:	4f 89       	ldd	r20, Y+23	; 0x17
     e5c:	58 8d       	ldd	r21, Y+24	; 0x18
     e5e:	21 96       	adiw	r28, 0x01	; 1
     e60:	6c ad       	ldd	r22, Y+60	; 0x3c
     e62:	7d ad       	ldd	r23, Y+61	; 0x3d
     e64:	8e ad       	ldd	r24, Y+62	; 0x3e
     e66:	9f ad       	ldd	r25, Y+63	; 0x3f
     e68:	21 97       	sbiw	r28, 0x01	; 1
     e6a:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     e6e:	ad 96       	adiw	r28, 0x2d	; 45
     e70:	2c ad       	ldd	r18, Y+60	; 0x3c
     e72:	3d ad       	ldd	r19, Y+61	; 0x3d
     e74:	4e ad       	ldd	r20, Y+62	; 0x3e
     e76:	5f ad       	ldd	r21, Y+63	; 0x3f
     e78:	ad 97       	sbiw	r28, 0x2d	; 45
     e7a:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     e7e:	2d 81       	ldd	r18, Y+5	; 0x05
     e80:	3e 81       	ldd	r19, Y+6	; 0x06
     e82:	4f 81       	ldd	r20, Y+7	; 0x07
     e84:	58 85       	ldd	r21, Y+8	; 0x08
     e86:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     e8a:	9b 01       	movw	r18, r22
     e8c:	ac 01       	movw	r20, r24
     e8e:	c5 01       	movw	r24, r10
     e90:	b4 01       	movw	r22, r8
     e92:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     e96:	4b 01       	movw	r8, r22
     e98:	5c 01       	movw	r10, r24
     e9a:	29 85       	ldd	r18, Y+9	; 0x09
     e9c:	3a 85       	ldd	r19, Y+10	; 0x0a
     e9e:	4b 85       	ldd	r20, Y+11	; 0x0b
     ea0:	5c 85       	ldd	r21, Y+12	; 0x0c
     ea2:	69 89       	ldd	r22, Y+17	; 0x11
     ea4:	7a 89       	ldd	r23, Y+18	; 0x12
     ea6:	8b 89       	ldd	r24, Y+19	; 0x13
     ea8:	9c 89       	ldd	r25, Y+20	; 0x14
     eaa:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     eae:	9b 01       	movw	r18, r22
     eb0:	ac 01       	movw	r20, r24
     eb2:	c5 01       	movw	r24, r10
     eb4:	b4 01       	movw	r22, r8
     eb6:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     eba:	6d 8f       	std	Y+29, r22	; 0x1d
     ebc:	7e 8f       	std	Y+30, r23	; 0x1e
     ebe:	8f 8f       	std	Y+31, r24	; 0x1f
     ec0:	98 a3       	std	Y+32, r25	; 0x20
     ec2:	29 a9       	ldd	r18, Y+49	; 0x31
     ec4:	3a a9       	ldd	r19, Y+50	; 0x32
     ec6:	4b a9       	ldd	r20, Y+51	; 0x33
     ec8:	5c a9       	ldd	r21, Y+52	; 0x34
     eca:	ca 01       	movw	r24, r20
     ecc:	b9 01       	movw	r22, r18
     ece:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     ed2:	9b 01       	movw	r18, r22
     ed4:	ac 01       	movw	r20, r24
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	80 e8       	ldi	r24, 0x80	; 128
     edc:	9f e3       	ldi	r25, 0x3F	; 63
     ede:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
     ee2:	4b 01       	movw	r8, r22
     ee4:	5c 01       	movw	r10, r24
     ee6:	29 a1       	ldd	r18, Y+33	; 0x21
     ee8:	3a a1       	ldd	r19, Y+34	; 0x22
     eea:	4b a1       	ldd	r20, Y+35	; 0x23
     eec:	5c a1       	ldd	r21, Y+36	; 0x24
     eee:	ca 01       	movw	r24, r20
     ef0:	b9 01       	movw	r22, r18
     ef2:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     ef6:	9b 01       	movw	r18, r22
     ef8:	ac 01       	movw	r20, r24
     efa:	c5 01       	movw	r24, r10
     efc:	b4 01       	movw	r22, r8
     efe:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
     f02:	4b 01       	movw	r8, r22
     f04:	5c 01       	movw	r10, r24
     f06:	a1 96       	adiw	r28, 0x21	; 33
     f08:	2c ad       	ldd	r18, Y+60	; 0x3c
     f0a:	3d ad       	ldd	r19, Y+61	; 0x3d
     f0c:	4e ad       	ldd	r20, Y+62	; 0x3e
     f0e:	5f ad       	ldd	r21, Y+63	; 0x3f
     f10:	a1 97       	sbiw	r28, 0x21	; 33
     f12:	6d 85       	ldd	r22, Y+13	; 0x0d
     f14:	7e 85       	ldd	r23, Y+14	; 0x0e
     f16:	8f 85       	ldd	r24, Y+15	; 0x0f
     f18:	98 89       	ldd	r25, Y+16	; 0x10
     f1a:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     f1e:	9b 01       	movw	r18, r22
     f20:	ac 01       	movw	r20, r24
     f22:	c5 01       	movw	r24, r10
     f24:	b4 01       	movw	r22, r8
     f26:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
     f2a:	6d 87       	std	Y+13, r22	; 0x0d
     f2c:	7e 87       	std	Y+14, r23	; 0x0e
     f2e:	8f 87       	std	Y+15, r24	; 0x0f
     f30:	98 8b       	std	Y+16, r25	; 0x10
     f32:	2d 89       	ldd	r18, Y+21	; 0x15
     f34:	3e 89       	ldd	r19, Y+22	; 0x16
     f36:	4f 89       	ldd	r20, Y+23	; 0x17
     f38:	58 8d       	ldd	r21, Y+24	; 0x18
     f3a:	c7 01       	movw	r24, r14
     f3c:	b6 01       	movw	r22, r12
     f3e:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     f42:	69 a3       	std	Y+33, r22	; 0x21
     f44:	7a a3       	std	Y+34, r23	; 0x22
     f46:	8b a3       	std	Y+35, r24	; 0x23
     f48:	9c a3       	std	Y+36, r25	; 0x24
     f4a:	29 a5       	ldd	r18, Y+41	; 0x29
     f4c:	3a a5       	ldd	r19, Y+42	; 0x2a
     f4e:	4b a5       	ldd	r20, Y+43	; 0x2b
     f50:	5c a5       	ldd	r21, Y+44	; 0x2c
     f52:	c7 01       	movw	r24, r14
     f54:	b6 01       	movw	r22, r12
     f56:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     f5a:	69 ab       	std	Y+49, r22	; 0x31
     f5c:	7a ab       	std	Y+50, r23	; 0x32
     f5e:	8b ab       	std	Y+51, r24	; 0x33
     f60:	9c ab       	std	Y+52, r25	; 0x34
     f62:	2d a9       	ldd	r18, Y+53	; 0x35
     f64:	3e a9       	ldd	r19, Y+54	; 0x36
     f66:	4f a9       	ldd	r20, Y+55	; 0x37
     f68:	58 ad       	ldd	r21, Y+56	; 0x38
     f6a:	a5 96       	adiw	r28, 0x25	; 37
     f6c:	6c ad       	ldd	r22, Y+60	; 0x3c
     f6e:	7d ad       	ldd	r23, Y+61	; 0x3d
     f70:	8e ad       	ldd	r24, Y+62	; 0x3e
     f72:	9f ad       	ldd	r25, Y+63	; 0x3f
     f74:	a5 97       	sbiw	r28, 0x25	; 37
     f76:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     f7a:	6b 01       	movw	r12, r22
     f7c:	7c 01       	movw	r14, r24
     f7e:	25 96       	adiw	r28, 0x05	; 5
     f80:	2c ad       	ldd	r18, Y+60	; 0x3c
     f82:	3d ad       	ldd	r19, Y+61	; 0x3d
     f84:	4e ad       	ldd	r20, Y+62	; 0x3e
     f86:	5f ad       	ldd	r21, Y+63	; 0x3f
     f88:	25 97       	sbiw	r28, 0x05	; 5
     f8a:	6d a5       	ldd	r22, Y+45	; 0x2d
     f8c:	7e a5       	ldd	r23, Y+46	; 0x2e
     f8e:	8f a5       	ldd	r24, Y+47	; 0x2f
     f90:	98 a9       	ldd	r25, Y+48	; 0x30
     f92:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     f96:	9b 01       	movw	r18, r22
     f98:	ac 01       	movw	r20, r24
     f9a:	c7 01       	movw	r24, r14
     f9c:	b6 01       	movw	r22, r12
     f9e:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     fa2:	6b 01       	movw	r12, r22
     fa4:	7c 01       	movw	r14, r24
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e8       	ldi	r20, 0x80	; 128
     fac:	50 e4       	ldi	r21, 0x40	; 64
     fae:	c3 01       	movw	r24, r6
     fb0:	b2 01       	movw	r22, r4
     fb2:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     fb6:	2d 85       	ldd	r18, Y+13	; 0x0d
     fb8:	3e 85       	ldd	r19, Y+14	; 0x0e
     fba:	4f 85       	ldd	r20, Y+15	; 0x0f
     fbc:	58 89       	ldd	r21, Y+16	; 0x10
     fbe:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     fc2:	9b 01       	movw	r18, r22
     fc4:	ac 01       	movw	r20, r24
     fc6:	c7 01       	movw	r24, r14
     fc8:	b6 01       	movw	r22, r12
     fca:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
     fce:	6b 01       	movw	r12, r22
     fd0:	7c 01       	movw	r14, r24
     fd2:	29 a1       	ldd	r18, Y+33	; 0x21
     fd4:	3a a1       	ldd	r19, Y+34	; 0x22
     fd6:	4b a1       	ldd	r20, Y+35	; 0x23
     fd8:	5c a1       	ldd	r21, Y+36	; 0x24
     fda:	6d a1       	ldd	r22, Y+37	; 0x25
     fdc:	7e a1       	ldd	r23, Y+38	; 0x26
     fde:	8f a1       	ldd	r24, Y+39	; 0x27
     fe0:	98 a5       	ldd	r25, Y+40	; 0x28
     fe2:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
     fe6:	9b 01       	movw	r18, r22
     fe8:	ac 01       	movw	r20, r24
     fea:	c7 01       	movw	r24, r14
     fec:	b6 01       	movw	r22, r12
     fee:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
     ff2:	6b 01       	movw	r12, r22
     ff4:	7c 01       	movw	r14, r24
     ff6:	29 a9       	ldd	r18, Y+49	; 0x31
     ff8:	3a a9       	ldd	r19, Y+50	; 0x32
     ffa:	4b a9       	ldd	r20, Y+51	; 0x33
     ffc:	5c a9       	ldd	r21, Y+52	; 0x34
     ffe:	69 89       	ldd	r22, Y+17	; 0x11
    1000:	7a 89       	ldd	r23, Y+18	; 0x12
    1002:	8b 89       	ldd	r24, Y+19	; 0x13
    1004:	9c 89       	ldd	r25, Y+20	; 0x14
    1006:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    100a:	9b 01       	movw	r18, r22
    100c:	ac 01       	movw	r20, r24
    100e:	6d 81       	ldd	r22, Y+5	; 0x05
    1010:	7e 81       	ldd	r23, Y+6	; 0x06
    1012:	8f 81       	ldd	r24, Y+7	; 0x07
    1014:	98 85       	ldd	r25, Y+8	; 0x08
    1016:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    101a:	9b 01       	movw	r18, r22
    101c:	ac 01       	movw	r20, r24
    101e:	c7 01       	movw	r24, r14
    1020:	b6 01       	movw	r22, r12
    1022:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    1026:	6b 01       	movw	r12, r22
    1028:	7c 01       	movw	r14, r24
    102a:	2d 89       	ldd	r18, Y+21	; 0x15
    102c:	3e 89       	ldd	r19, Y+22	; 0x16
    102e:	4f 89       	ldd	r20, Y+23	; 0x17
    1030:	58 8d       	ldd	r21, Y+24	; 0x18
    1032:	69 81       	ldd	r22, Y+1	; 0x01
    1034:	7a 81       	ldd	r23, Y+2	; 0x02
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	9c 81       	ldd	r25, Y+4	; 0x04
    103a:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    103e:	4b 01       	movw	r8, r22
    1040:	5c 01       	movw	r10, r24
    1042:	a3 01       	movw	r20, r6
    1044:	92 01       	movw	r18, r4
    1046:	65 96       	adiw	r28, 0x15	; 21
    1048:	6c ad       	ldd	r22, Y+60	; 0x3c
    104a:	7d ad       	ldd	r23, Y+61	; 0x3d
    104c:	8e ad       	ldd	r24, Y+62	; 0x3e
    104e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1050:	65 97       	sbiw	r28, 0x15	; 21
    1052:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1056:	9b 01       	movw	r18, r22
    1058:	ac 01       	movw	r20, r24
    105a:	c5 01       	movw	r24, r10
    105c:	b4 01       	movw	r22, r8
    105e:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    1062:	9b 01       	movw	r18, r22
    1064:	ac 01       	movw	r20, r24
    1066:	69 85       	ldd	r22, Y+9	; 0x09
    1068:	7a 85       	ldd	r23, Y+10	; 0x0a
    106a:	8b 85       	ldd	r24, Y+11	; 0x0b
    106c:	9c 85       	ldd	r25, Y+12	; 0x0c
    106e:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1072:	9b 01       	movw	r18, r22
    1074:	ac 01       	movw	r20, r24
    1076:	c7 01       	movw	r24, r14
    1078:	b6 01       	movw	r22, r12
    107a:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    107e:	69 8b       	std	Y+17, r22	; 0x11
    1080:	7a 8b       	std	Y+18, r23	; 0x12
    1082:	8b 8b       	std	Y+19, r24	; 0x13
    1084:	9c 8b       	std	Y+20, r25	; 0x14
    1086:	29 81       	ldd	r18, Y+1	; 0x01
    1088:	3a 81       	ldd	r19, Y+2	; 0x02
    108a:	4b 81       	ldd	r20, Y+3	; 0x03
    108c:	5c 81       	ldd	r21, Y+4	; 0x04
    108e:	ca 01       	movw	r24, r20
    1090:	b9 01       	movw	r22, r18
    1092:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    1096:	4b 01       	movw	r8, r22
    1098:	5c 01       	movw	r10, r24
    109a:	b7 fa       	bst	r11, 7
    109c:	b0 94       	com	r11
    109e:	b7 f8       	bld	r11, 7
    10a0:	b0 94       	com	r11
    10a2:	a3 01       	movw	r20, r6
    10a4:	92 01       	movw	r18, r4
    10a6:	69 81       	ldd	r22, Y+1	; 0x01
    10a8:	7a 81       	ldd	r23, Y+2	; 0x02
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	9c 81       	ldd	r25, Y+4	; 0x04
    10ae:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    10b2:	69 af       	std	Y+57, r22	; 0x39
    10b4:	7a af       	std	Y+58, r23	; 0x3a
    10b6:	8b af       	std	Y+59, r24	; 0x3b
    10b8:	9c af       	std	Y+60, r25	; 0x3c
    10ba:	2d a5       	ldd	r18, Y+45	; 0x2d
    10bc:	3e a5       	ldd	r19, Y+46	; 0x2e
    10be:	4f a5       	ldd	r20, Y+47	; 0x2f
    10c0:	58 a9       	ldd	r21, Y+48	; 0x30
    10c2:	50 58       	subi	r21, 0x80	; 128
    10c4:	6d a9       	ldd	r22, Y+53	; 0x35
    10c6:	7e a9       	ldd	r23, Y+54	; 0x36
    10c8:	8f a9       	ldd	r24, Y+55	; 0x37
    10ca:	98 ad       	ldd	r25, Y+56	; 0x38
    10cc:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    10d0:	6b 01       	movw	r12, r22
    10d2:	7c 01       	movw	r14, r24
    10d4:	25 96       	adiw	r28, 0x05	; 5
    10d6:	2c ad       	ldd	r18, Y+60	; 0x3c
    10d8:	3d ad       	ldd	r19, Y+61	; 0x3d
    10da:	4e ad       	ldd	r20, Y+62	; 0x3e
    10dc:	5f ad       	ldd	r21, Y+63	; 0x3f
    10de:	25 97       	sbiw	r28, 0x05	; 5
    10e0:	a5 96       	adiw	r28, 0x25	; 37
    10e2:	6c ad       	ldd	r22, Y+60	; 0x3c
    10e4:	7d ad       	ldd	r23, Y+61	; 0x3d
    10e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    10e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    10ea:	a5 97       	sbiw	r28, 0x25	; 37
    10ec:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    10f0:	9b 01       	movw	r18, r22
    10f2:	ac 01       	movw	r20, r24
    10f4:	c7 01       	movw	r24, r14
    10f6:	b6 01       	movw	r22, r12
    10f8:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    10fc:	6b 01       	movw	r12, r22
    10fe:	7c 01       	movw	r14, r24
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	40 e8       	ldi	r20, 0x80	; 128
    1106:	50 e4       	ldi	r21, 0x40	; 64
    1108:	69 8d       	ldd	r22, Y+25	; 0x19
    110a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    110c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    110e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1110:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1114:	9b 01       	movw	r18, r22
    1116:	ac 01       	movw	r20, r24
    1118:	6d 85       	ldd	r22, Y+13	; 0x0d
    111a:	7e 85       	ldd	r23, Y+14	; 0x0e
    111c:	8f 85       	ldd	r24, Y+15	; 0x0f
    111e:	98 89       	ldd	r25, Y+16	; 0x10
    1120:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1124:	9b 01       	movw	r18, r22
    1126:	ac 01       	movw	r20, r24
    1128:	c7 01       	movw	r24, r14
    112a:	b6 01       	movw	r22, r12
    112c:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    1130:	6b 01       	movw	r12, r22
    1132:	7c 01       	movw	r14, r24
    1134:	29 8d       	ldd	r18, Y+25	; 0x19
    1136:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1138:	4b 8d       	ldd	r20, Y+27	; 0x1b
    113a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    113c:	c5 01       	movw	r24, r10
    113e:	b4 01       	movw	r22, r8
    1140:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1144:	29 a9       	ldd	r18, Y+49	; 0x31
    1146:	3a a9       	ldd	r19, Y+50	; 0x32
    1148:	4b a9       	ldd	r20, Y+51	; 0x33
    114a:	5c a9       	ldd	r21, Y+52	; 0x34
    114c:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    1150:	9b 01       	movw	r18, r22
    1152:	ac 01       	movw	r20, r24
    1154:	6d a1       	ldd	r22, Y+37	; 0x25
    1156:	7e a1       	ldd	r23, Y+38	; 0x26
    1158:	8f a1       	ldd	r24, Y+39	; 0x27
    115a:	98 a5       	ldd	r25, Y+40	; 0x28
    115c:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1160:	9b 01       	movw	r18, r22
    1162:	ac 01       	movw	r20, r24
    1164:	c7 01       	movw	r24, r14
    1166:	b6 01       	movw	r22, r12
    1168:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    116c:	6b 01       	movw	r12, r22
    116e:	7c 01       	movw	r14, r24
    1170:	29 ad       	ldd	r18, Y+57	; 0x39
    1172:	3a ad       	ldd	r19, Y+58	; 0x3a
    1174:	4b ad       	ldd	r20, Y+59	; 0x3b
    1176:	5c ad       	ldd	r21, Y+60	; 0x3c
    1178:	69 a1       	ldd	r22, Y+33	; 0x21
    117a:	7a a1       	ldd	r23, Y+34	; 0x22
    117c:	8b a1       	ldd	r24, Y+35	; 0x23
    117e:	9c a1       	ldd	r25, Y+36	; 0x24
    1180:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    1184:	9b 01       	movw	r18, r22
    1186:	ac 01       	movw	r20, r24
    1188:	6d 81       	ldd	r22, Y+5	; 0x05
    118a:	7e 81       	ldd	r23, Y+6	; 0x06
    118c:	8f 81       	ldd	r24, Y+7	; 0x07
    118e:	98 85       	ldd	r25, Y+8	; 0x08
    1190:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1194:	9b 01       	movw	r18, r22
    1196:	ac 01       	movw	r20, r24
    1198:	c7 01       	movw	r24, r14
    119a:	b6 01       	movw	r22, r12
    119c:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    11a0:	6b 01       	movw	r12, r22
    11a2:	7c 01       	movw	r14, r24
    11a4:	29 a5       	ldd	r18, Y+41	; 0x29
    11a6:	3a a5       	ldd	r19, Y+42	; 0x2a
    11a8:	4b a5       	ldd	r20, Y+43	; 0x2b
    11aa:	5c a5       	ldd	r21, Y+44	; 0x2c
    11ac:	69 81       	ldd	r22, Y+1	; 0x01
    11ae:	7a 81       	ldd	r23, Y+2	; 0x02
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	9c 81       	ldd	r25, Y+4	; 0x04
    11b4:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    11b8:	6d 87       	std	Y+13, r22	; 0x0d
    11ba:	7e 87       	std	Y+14, r23	; 0x0e
    11bc:	8f 87       	std	Y+15, r24	; 0x0f
    11be:	98 8b       	std	Y+16, r25	; 0x10
    11c0:	29 8d       	ldd	r18, Y+25	; 0x19
    11c2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    11c4:	4b 8d       	ldd	r20, Y+27	; 0x1b
    11c6:	5c 8d       	ldd	r21, Y+28	; 0x1c
    11c8:	65 96       	adiw	r28, 0x15	; 21
    11ca:	6c ad       	ldd	r22, Y+60	; 0x3c
    11cc:	7d ad       	ldd	r23, Y+61	; 0x3d
    11ce:	8e ad       	ldd	r24, Y+62	; 0x3e
    11d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    11d2:	65 97       	sbiw	r28, 0x15	; 21
    11d4:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    11d8:	9b 01       	movw	r18, r22
    11da:	ac 01       	movw	r20, r24
    11dc:	6d 85       	ldd	r22, Y+13	; 0x0d
    11de:	7e 85       	ldd	r23, Y+14	; 0x0e
    11e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e2:	98 89       	ldd	r25, Y+16	; 0x10
    11e4:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    11e8:	9b 01       	movw	r18, r22
    11ea:	ac 01       	movw	r20, r24
    11ec:	69 85       	ldd	r22, Y+9	; 0x09
    11ee:	7a 85       	ldd	r23, Y+10	; 0x0a
    11f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    11f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    11f4:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    11f8:	9b 01       	movw	r18, r22
    11fa:	ac 01       	movw	r20, r24
    11fc:	c7 01       	movw	r24, r14
    11fe:	b6 01       	movw	r22, r12
    1200:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    1204:	6d 87       	std	Y+13, r22	; 0x0d
    1206:	7e 87       	std	Y+14, r23	; 0x0e
    1208:	8f 87       	std	Y+15, r24	; 0x0f
    120a:	98 8b       	std	Y+16, r25	; 0x10
    120c:	2d a9       	ldd	r18, Y+53	; 0x35
    120e:	3e a9       	ldd	r19, Y+54	; 0x36
    1210:	4f a9       	ldd	r20, Y+55	; 0x37
    1212:	58 ad       	ldd	r21, Y+56	; 0x38
    1214:	2d 96       	adiw	r28, 0x0d	; 13
    1216:	6c ad       	ldd	r22, Y+60	; 0x3c
    1218:	7d ad       	ldd	r23, Y+61	; 0x3d
    121a:	8e ad       	ldd	r24, Y+62	; 0x3e
    121c:	9f ad       	ldd	r25, Y+63	; 0x3f
    121e:	2d 97       	sbiw	r28, 0x0d	; 13
    1220:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1224:	6b 01       	movw	r12, r22
    1226:	7c 01       	movw	r14, r24
    1228:	25 96       	adiw	r28, 0x05	; 5
    122a:	2c ad       	ldd	r18, Y+60	; 0x3c
    122c:	3d ad       	ldd	r19, Y+61	; 0x3d
    122e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1230:	5f ad       	ldd	r21, Y+63	; 0x3f
    1232:	25 97       	sbiw	r28, 0x05	; 5
    1234:	61 96       	adiw	r28, 0x11	; 17
    1236:	6c ad       	ldd	r22, Y+60	; 0x3c
    1238:	7d ad       	ldd	r23, Y+61	; 0x3d
    123a:	8e ad       	ldd	r24, Y+62	; 0x3e
    123c:	9f ad       	ldd	r25, Y+63	; 0x3f
    123e:	61 97       	sbiw	r28, 0x11	; 17
    1240:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1244:	9b 01       	movw	r18, r22
    1246:	ac 01       	movw	r20, r24
    1248:	c7 01       	movw	r24, r14
    124a:	b6 01       	movw	r22, r12
    124c:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    1250:	6b 01       	movw	r12, r22
    1252:	7c 01       	movw	r14, r24
    1254:	a5 01       	movw	r20, r10
    1256:	94 01       	movw	r18, r8
    1258:	6d 89       	ldd	r22, Y+21	; 0x15
    125a:	7e 89       	ldd	r23, Y+22	; 0x16
    125c:	8f 89       	ldd	r24, Y+23	; 0x17
    125e:	98 8d       	ldd	r25, Y+24	; 0x18
    1260:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1264:	9b 01       	movw	r18, r22
    1266:	ac 01       	movw	r20, r24
    1268:	ad 96       	adiw	r28, 0x2d	; 45
    126a:	6c ad       	ldd	r22, Y+60	; 0x3c
    126c:	7d ad       	ldd	r23, Y+61	; 0x3d
    126e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1270:	9f ad       	ldd	r25, Y+63	; 0x3f
    1272:	ad 97       	sbiw	r28, 0x2d	; 45
    1274:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    1278:	9b 01       	movw	r18, r22
    127a:	ac 01       	movw	r20, r24
    127c:	6d a1       	ldd	r22, Y+37	; 0x25
    127e:	7e a1       	ldd	r23, Y+38	; 0x26
    1280:	8f a1       	ldd	r24, Y+39	; 0x27
    1282:	98 a5       	ldd	r25, Y+40	; 0x28
    1284:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1288:	9b 01       	movw	r18, r22
    128a:	ac 01       	movw	r20, r24
    128c:	c7 01       	movw	r24, r14
    128e:	b6 01       	movw	r22, r12
    1290:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    1294:	6b 01       	movw	r12, r22
    1296:	7c 01       	movw	r14, r24
    1298:	21 96       	adiw	r28, 0x01	; 1
    129a:	2c ad       	ldd	r18, Y+60	; 0x3c
    129c:	3d ad       	ldd	r19, Y+61	; 0x3d
    129e:	4e ad       	ldd	r20, Y+62	; 0x3e
    12a0:	5f ad       	ldd	r21, Y+63	; 0x3f
    12a2:	21 97       	sbiw	r28, 0x01	; 1
    12a4:	69 a5       	ldd	r22, Y+41	; 0x29
    12a6:	7a a5       	ldd	r23, Y+42	; 0x2a
    12a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    12aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    12ac:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    12b0:	9b 01       	movw	r18, r22
    12b2:	ac 01       	movw	r20, r24
    12b4:	69 96       	adiw	r28, 0x19	; 25
    12b6:	6c ad       	ldd	r22, Y+60	; 0x3c
    12b8:	7d ad       	ldd	r23, Y+61	; 0x3d
    12ba:	8e ad       	ldd	r24, Y+62	; 0x3e
    12bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    12be:	69 97       	sbiw	r28, 0x19	; 25
    12c0:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    12c4:	9b 01       	movw	r18, r22
    12c6:	ac 01       	movw	r20, r24
    12c8:	6d 81       	ldd	r22, Y+5	; 0x05
    12ca:	7e 81       	ldd	r23, Y+6	; 0x06
    12cc:	8f 81       	ldd	r24, Y+7	; 0x07
    12ce:	98 85       	ldd	r25, Y+8	; 0x08
    12d0:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    12d4:	9b 01       	movw	r18, r22
    12d6:	ac 01       	movw	r20, r24
    12d8:	c7 01       	movw	r24, r14
    12da:	b6 01       	movw	r22, r12
    12dc:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    12e0:	6b 01       	movw	r12, r22
    12e2:	7c 01       	movw	r14, r24
    12e4:	29 ad       	ldd	r18, Y+57	; 0x39
    12e6:	3a ad       	ldd	r19, Y+58	; 0x3a
    12e8:	4b ad       	ldd	r20, Y+59	; 0x3b
    12ea:	5c ad       	ldd	r21, Y+60	; 0x3c
    12ec:	69 85       	ldd	r22, Y+9	; 0x09
    12ee:	7a 85       	ldd	r23, Y+10	; 0x0a
    12f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    12f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    12f4:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    12f8:	9b 01       	movw	r18, r22
    12fa:	ac 01       	movw	r20, r24
    12fc:	c7 01       	movw	r24, r14
    12fe:	b6 01       	movw	r22, r12
    1300:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    1304:	69 83       	std	Y+1, r22	; 0x01
    1306:	7a 83       	std	Y+2, r23	; 0x02
    1308:	8b 83       	std	Y+3, r24	; 0x03
    130a:	9c 83       	std	Y+4, r25	; 0x04
    130c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    130e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1310:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1312:	58 a1       	ldd	r21, Y+32	; 0x20
    1314:	ca 01       	movw	r24, r20
    1316:	b9 01       	movw	r22, r18
    1318:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    131c:	4b 01       	movw	r8, r22
    131e:	5c 01       	movw	r10, r24
    1320:	29 89       	ldd	r18, Y+17	; 0x11
    1322:	3a 89       	ldd	r19, Y+18	; 0x12
    1324:	4b 89       	ldd	r20, Y+19	; 0x13
    1326:	5c 89       	ldd	r21, Y+20	; 0x14
    1328:	ca 01       	movw	r24, r20
    132a:	b9 01       	movw	r22, r18
    132c:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1330:	6d 83       	std	Y+5, r22	; 0x05
    1332:	7e 83       	std	Y+6, r23	; 0x06
    1334:	8f 83       	std	Y+7, r24	; 0x07
    1336:	98 87       	std	Y+8, r25	; 0x08
    1338:	9b 01       	movw	r18, r22
    133a:	ac 01       	movw	r20, r24
    133c:	c5 01       	movw	r24, r10
    133e:	b4 01       	movw	r22, r8
    1340:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    1344:	6b 01       	movw	r12, r22
    1346:	7c 01       	movw	r14, r24
    1348:	2d 85       	ldd	r18, Y+13	; 0x0d
    134a:	3e 85       	ldd	r19, Y+14	; 0x0e
    134c:	4f 85       	ldd	r20, Y+15	; 0x0f
    134e:	58 89       	ldd	r21, Y+16	; 0x10
    1350:	ca 01       	movw	r24, r20
    1352:	b9 01       	movw	r22, r18
    1354:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1358:	69 87       	std	Y+9, r22	; 0x09
    135a:	7a 87       	std	Y+10, r23	; 0x0a
    135c:	8b 87       	std	Y+11, r24	; 0x0b
    135e:	9c 87       	std	Y+12, r25	; 0x0c
    1360:	9b 01       	movw	r18, r22
    1362:	ac 01       	movw	r20, r24
    1364:	c7 01       	movw	r24, r14
    1366:	b6 01       	movw	r22, r12
    1368:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    136c:	69 a3       	std	Y+33, r22	; 0x21
    136e:	7a a3       	std	Y+34, r23	; 0x22
    1370:	8b a3       	std	Y+35, r24	; 0x23
    1372:	9c a3       	std	Y+36, r25	; 0x24
    1374:	29 81       	ldd	r18, Y+1	; 0x01
    1376:	3a 81       	ldd	r19, Y+2	; 0x02
    1378:	4b 81       	ldd	r20, Y+3	; 0x03
    137a:	5c 81       	ldd	r21, Y+4	; 0x04
    137c:	ca 01       	movw	r24, r20
    137e:	b9 01       	movw	r22, r18
    1380:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1384:	6b 01       	movw	r12, r22
    1386:	7c 01       	movw	r14, r24
    1388:	2d 81       	ldd	r18, Y+5	; 0x05
    138a:	3e 81       	ldd	r19, Y+6	; 0x06
    138c:	4f 81       	ldd	r20, Y+7	; 0x07
    138e:	58 85       	ldd	r21, Y+8	; 0x08
    1390:	c5 01       	movw	r24, r10
    1392:	b4 01       	movw	r22, r8
    1394:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    1398:	4b 01       	movw	r8, r22
    139a:	5c 01       	movw	r10, r24
    139c:	29 85       	ldd	r18, Y+9	; 0x09
    139e:	3a 85       	ldd	r19, Y+10	; 0x0a
    13a0:	4b 85       	ldd	r20, Y+11	; 0x0b
    13a2:	5c 85       	ldd	r21, Y+12	; 0x0c
    13a4:	c5 01       	movw	r24, r10
    13a6:	b4 01       	movw	r22, r8
    13a8:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    13ac:	4b 01       	movw	r8, r22
    13ae:	5c 01       	movw	r10, r24
    13b0:	a7 01       	movw	r20, r14
    13b2:	96 01       	movw	r18, r12
    13b4:	c5 01       	movw	r24, r10
    13b6:	b4 01       	movw	r22, r8
    13b8:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    13bc:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <sqrt>
    13c0:	9b 01       	movw	r18, r22
    13c2:	ac 01       	movw	r20, r24
    13c4:	60 e0       	ldi	r22, 0x00	; 0
    13c6:	70 e0       	ldi	r23, 0x00	; 0
    13c8:	80 e8       	ldi	r24, 0x80	; 128
    13ca:	9f e3       	ldi	r25, 0x3F	; 63
    13cc:	0e 94 8f 20 	call	0x411e	; 0x411e <__divsf3>
    13d0:	69 87       	std	Y+9, r22	; 0x09
    13d2:	7a 87       	std	Y+10, r23	; 0x0a
    13d4:	8b 87       	std	Y+11, r24	; 0x0b
    13d6:	9c 87       	std	Y+12, r25	; 0x0c
    13d8:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <beta>
    13dc:	90 91 65 05 	lds	r25, 0x0565	; 0x800565 <beta+0x1>
    13e0:	a0 91 66 05 	lds	r26, 0x0566	; 0x800566 <beta+0x2>
    13e4:	b0 91 67 05 	lds	r27, 0x0567	; 0x800567 <beta+0x3>
    13e8:	8d 83       	std	Y+5, r24	; 0x05
    13ea:	9e 83       	std	Y+6, r25	; 0x06
    13ec:	af 83       	std	Y+7, r26	; 0x07
    13ee:	b8 87       	std	Y+8, r27	; 0x08
    13f0:	80 90 44 05 	lds	r8, 0x0544	; 0x800544 <deltat>
    13f4:	90 90 45 05 	lds	r9, 0x0545	; 0x800545 <deltat+0x1>
    13f8:	a0 90 46 05 	lds	r10, 0x0546	; 0x800546 <deltat+0x2>
    13fc:	b0 90 47 05 	lds	r11, 0x0547	; 0x800547 <deltat+0x3>
    1400:	c3 01       	movw	r24, r6
    1402:	b2 01       	movw	r22, r4
    1404:	90 58       	subi	r25, 0x80	; 128
    1406:	29 96       	adiw	r28, 0x09	; 9
    1408:	2c ad       	ldd	r18, Y+60	; 0x3c
    140a:	3d ad       	ldd	r19, Y+61	; 0x3d
    140c:	4e ad       	ldd	r20, Y+62	; 0x3e
    140e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1410:	29 97       	sbiw	r28, 0x09	; 9
    1412:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1416:	6b 01       	movw	r12, r22
    1418:	7c 01       	movw	r14, r24
    141a:	c1 58       	subi	r28, 0x81	; 129
    141c:	df 4f       	sbci	r29, 0xFF	; 255
    141e:	28 81       	ld	r18, Y
    1420:	39 81       	ldd	r19, Y+1	; 0x01
    1422:	4a 81       	ldd	r20, Y+2	; 0x02
    1424:	5b 81       	ldd	r21, Y+3	; 0x03
    1426:	cf 57       	subi	r28, 0x7F	; 127
    1428:	d0 40       	sbci	r29, 0x00	; 0
    142a:	69 8d       	ldd	r22, Y+25	; 0x19
    142c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    142e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1430:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1432:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1436:	9b 01       	movw	r18, r22
    1438:	ac 01       	movw	r20, r24
    143a:	c7 01       	movw	r24, r14
    143c:	b6 01       	movw	r22, r12
    143e:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    1442:	6b 01       	movw	r12, r22
    1444:	7c 01       	movw	r14, r24
    1446:	cd 57       	subi	r28, 0x7D	; 125
    1448:	df 4f       	sbci	r29, 0xFF	; 255
    144a:	28 81       	ld	r18, Y
    144c:	39 81       	ldd	r19, Y+1	; 0x01
    144e:	4a 81       	ldd	r20, Y+2	; 0x02
    1450:	5b 81       	ldd	r21, Y+3	; 0x03
    1452:	c3 58       	subi	r28, 0x83	; 131
    1454:	d0 40       	sbci	r29, 0x00	; 0
    1456:	6d 89       	ldd	r22, Y+21	; 0x15
    1458:	7e 89       	ldd	r23, Y+22	; 0x16
    145a:	8f 89       	ldd	r24, Y+23	; 0x17
    145c:	98 8d       	ldd	r25, Y+24	; 0x18
    145e:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1462:	9b 01       	movw	r18, r22
    1464:	ac 01       	movw	r20, r24
    1466:	c7 01       	movw	r24, r14
    1468:	b6 01       	movw	r22, r12
    146a:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	40 e0       	ldi	r20, 0x00	; 0
    1474:	5f e3       	ldi	r21, 0x3F	; 63
    1476:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    147a:	6b 01       	movw	r12, r22
    147c:	7c 01       	movw	r14, r24
    147e:	29 85       	ldd	r18, Y+9	; 0x09
    1480:	3a 85       	ldd	r19, Y+10	; 0x0a
    1482:	4b 85       	ldd	r20, Y+11	; 0x0b
    1484:	5c 85       	ldd	r21, Y+12	; 0x0c
    1486:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1488:	7e 8d       	ldd	r23, Y+30	; 0x1e
    148a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    148c:	98 a1       	ldd	r25, Y+32	; 0x20
    148e:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1492:	9b 01       	movw	r18, r22
    1494:	ac 01       	movw	r20, r24
    1496:	6d 81       	ldd	r22, Y+5	; 0x05
    1498:	7e 81       	ldd	r23, Y+6	; 0x06
    149a:	8f 81       	ldd	r24, Y+7	; 0x07
    149c:	98 85       	ldd	r25, Y+8	; 0x08
    149e:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    14a2:	9b 01       	movw	r18, r22
    14a4:	ac 01       	movw	r20, r24
    14a6:	c7 01       	movw	r24, r14
    14a8:	b6 01       	movw	r22, r12
    14aa:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    14ae:	a5 01       	movw	r20, r10
    14b0:	94 01       	movw	r18, r8
    14b2:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    14b6:	29 a5       	ldd	r18, Y+41	; 0x29
    14b8:	3a a5       	ldd	r19, Y+42	; 0x2a
    14ba:	4b a5       	ldd	r20, Y+43	; 0x2b
    14bc:	5c a5       	ldd	r21, Y+44	; 0x2c
    14be:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    14c2:	6d 8f       	std	Y+29, r22	; 0x1d
    14c4:	7e 8f       	std	Y+30, r23	; 0x1e
    14c6:	8f 8f       	std	Y+31, r24	; 0x1f
    14c8:	98 a3       	std	Y+32, r25	; 0x20
    14ca:	29 96       	adiw	r28, 0x09	; 9
    14cc:	2c ad       	ldd	r18, Y+60	; 0x3c
    14ce:	3d ad       	ldd	r19, Y+61	; 0x3d
    14d0:	4e ad       	ldd	r20, Y+62	; 0x3e
    14d2:	5f ad       	ldd	r21, Y+63	; 0x3f
    14d4:	29 97       	sbiw	r28, 0x09	; 9
    14d6:	69 a5       	ldd	r22, Y+41	; 0x29
    14d8:	7a a5       	ldd	r23, Y+42	; 0x2a
    14da:	8b a5       	ldd	r24, Y+43	; 0x2b
    14dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    14de:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    14e2:	6b 01       	movw	r12, r22
    14e4:	7c 01       	movw	r14, r24
    14e6:	cd 57       	subi	r28, 0x7D	; 125
    14e8:	df 4f       	sbci	r29, 0xFF	; 255
    14ea:	28 81       	ld	r18, Y
    14ec:	39 81       	ldd	r19, Y+1	; 0x01
    14ee:	4a 81       	ldd	r20, Y+2	; 0x02
    14f0:	5b 81       	ldd	r21, Y+3	; 0x03
    14f2:	c3 58       	subi	r28, 0x83	; 131
    14f4:	d0 40       	sbci	r29, 0x00	; 0
    14f6:	69 8d       	ldd	r22, Y+25	; 0x19
    14f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14fe:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1502:	9b 01       	movw	r18, r22
    1504:	ac 01       	movw	r20, r24
    1506:	c7 01       	movw	r24, r14
    1508:	b6 01       	movw	r22, r12
    150a:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    150e:	6b 01       	movw	r12, r22
    1510:	7c 01       	movw	r14, r24
    1512:	c1 58       	subi	r28, 0x81	; 129
    1514:	df 4f       	sbci	r29, 0xFF	; 255
    1516:	28 81       	ld	r18, Y
    1518:	39 81       	ldd	r19, Y+1	; 0x01
    151a:	4a 81       	ldd	r20, Y+2	; 0x02
    151c:	5b 81       	ldd	r21, Y+3	; 0x03
    151e:	cf 57       	subi	r28, 0x7F	; 127
    1520:	d0 40       	sbci	r29, 0x00	; 0
    1522:	6d 89       	ldd	r22, Y+21	; 0x15
    1524:	7e 89       	ldd	r23, Y+22	; 0x16
    1526:	8f 89       	ldd	r24, Y+23	; 0x17
    1528:	98 8d       	ldd	r25, Y+24	; 0x18
    152a:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    152e:	9b 01       	movw	r18, r22
    1530:	ac 01       	movw	r20, r24
    1532:	c7 01       	movw	r24, r14
    1534:	b6 01       	movw	r22, r12
    1536:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	40 e0       	ldi	r20, 0x00	; 0
    1540:	5f e3       	ldi	r21, 0x3F	; 63
    1542:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1546:	6b 01       	movw	r12, r22
    1548:	7c 01       	movw	r14, r24
    154a:	29 85       	ldd	r18, Y+9	; 0x09
    154c:	3a 85       	ldd	r19, Y+10	; 0x0a
    154e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1550:	5c 85       	ldd	r21, Y+12	; 0x0c
    1552:	69 89       	ldd	r22, Y+17	; 0x11
    1554:	7a 89       	ldd	r23, Y+18	; 0x12
    1556:	8b 89       	ldd	r24, Y+19	; 0x13
    1558:	9c 89       	ldd	r25, Y+20	; 0x14
    155a:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    155e:	2d 81       	ldd	r18, Y+5	; 0x05
    1560:	3e 81       	ldd	r19, Y+6	; 0x06
    1562:	4f 81       	ldd	r20, Y+7	; 0x07
    1564:	58 85       	ldd	r21, Y+8	; 0x08
    1566:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    156a:	9b 01       	movw	r18, r22
    156c:	ac 01       	movw	r20, r24
    156e:	c7 01       	movw	r24, r14
    1570:	b6 01       	movw	r22, r12
    1572:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    1576:	a5 01       	movw	r20, r10
    1578:	94 01       	movw	r18, r8
    157a:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    157e:	a3 01       	movw	r20, r6
    1580:	92 01       	movw	r18, r4
    1582:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    1586:	69 8b       	std	Y+17, r22	; 0x11
    1588:	7a 8b       	std	Y+18, r23	; 0x12
    158a:	8b 8b       	std	Y+19, r24	; 0x13
    158c:	9c 8b       	std	Y+20, r25	; 0x14
    158e:	c1 58       	subi	r28, 0x81	; 129
    1590:	df 4f       	sbci	r29, 0xFF	; 255
    1592:	28 81       	ld	r18, Y
    1594:	39 81       	ldd	r19, Y+1	; 0x01
    1596:	4a 81       	ldd	r20, Y+2	; 0x02
    1598:	5b 81       	ldd	r21, Y+3	; 0x03
    159a:	cf 57       	subi	r28, 0x7F	; 127
    159c:	d0 40       	sbci	r29, 0x00	; 0
    159e:	69 a5       	ldd	r22, Y+41	; 0x29
    15a0:	7a a5       	ldd	r23, Y+42	; 0x2a
    15a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    15a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    15a6:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    15aa:	6b 01       	movw	r12, r22
    15ac:	7c 01       	movw	r14, r24
    15ae:	cd 57       	subi	r28, 0x7D	; 125
    15b0:	df 4f       	sbci	r29, 0xFF	; 255
    15b2:	28 81       	ld	r18, Y
    15b4:	39 81       	ldd	r19, Y+1	; 0x01
    15b6:	4a 81       	ldd	r20, Y+2	; 0x02
    15b8:	5b 81       	ldd	r21, Y+3	; 0x03
    15ba:	c3 58       	subi	r28, 0x83	; 131
    15bc:	d0 40       	sbci	r29, 0x00	; 0
    15be:	c3 01       	movw	r24, r6
    15c0:	b2 01       	movw	r22, r4
    15c2:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    15c6:	9b 01       	movw	r18, r22
    15c8:	ac 01       	movw	r20, r24
    15ca:	c7 01       	movw	r24, r14
    15cc:	b6 01       	movw	r22, r12
    15ce:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    15d2:	6b 01       	movw	r12, r22
    15d4:	7c 01       	movw	r14, r24
    15d6:	29 96       	adiw	r28, 0x09	; 9
    15d8:	2c ad       	ldd	r18, Y+60	; 0x3c
    15da:	3d ad       	ldd	r19, Y+61	; 0x3d
    15dc:	4e ad       	ldd	r20, Y+62	; 0x3e
    15de:	5f ad       	ldd	r21, Y+63	; 0x3f
    15e0:	29 97       	sbiw	r28, 0x09	; 9
    15e2:	6d 89       	ldd	r22, Y+21	; 0x15
    15e4:	7e 89       	ldd	r23, Y+22	; 0x16
    15e6:	8f 89       	ldd	r24, Y+23	; 0x17
    15e8:	98 8d       	ldd	r25, Y+24	; 0x18
    15ea:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    15ee:	9b 01       	movw	r18, r22
    15f0:	ac 01       	movw	r20, r24
    15f2:	c7 01       	movw	r24, r14
    15f4:	b6 01       	movw	r22, r12
    15f6:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e0       	ldi	r20, 0x00	; 0
    1600:	5f e3       	ldi	r21, 0x3F	; 63
    1602:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1606:	6b 01       	movw	r12, r22
    1608:	7c 01       	movw	r14, r24
    160a:	29 85       	ldd	r18, Y+9	; 0x09
    160c:	3a 85       	ldd	r19, Y+10	; 0x0a
    160e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1610:	5c 85       	ldd	r21, Y+12	; 0x0c
    1612:	6d 85       	ldd	r22, Y+13	; 0x0d
    1614:	7e 85       	ldd	r23, Y+14	; 0x0e
    1616:	8f 85       	ldd	r24, Y+15	; 0x0f
    1618:	98 89       	ldd	r25, Y+16	; 0x10
    161a:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    161e:	2d 81       	ldd	r18, Y+5	; 0x05
    1620:	3e 81       	ldd	r19, Y+6	; 0x06
    1622:	4f 81       	ldd	r20, Y+7	; 0x07
    1624:	58 85       	ldd	r21, Y+8	; 0x08
    1626:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    162a:	9b 01       	movw	r18, r22
    162c:	ac 01       	movw	r20, r24
    162e:	c7 01       	movw	r24, r14
    1630:	b6 01       	movw	r22, r12
    1632:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    1636:	a5 01       	movw	r20, r10
    1638:	94 01       	movw	r18, r8
    163a:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    163e:	29 8d       	ldd	r18, Y+25	; 0x19
    1640:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1642:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1644:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1646:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    164a:	6d 87       	std	Y+13, r22	; 0x0d
    164c:	7e 87       	std	Y+14, r23	; 0x0e
    164e:	8f 87       	std	Y+15, r24	; 0x0f
    1650:	98 8b       	std	Y+16, r25	; 0x10
    1652:	cd 57       	subi	r28, 0x7D	; 125
    1654:	df 4f       	sbci	r29, 0xFF	; 255
    1656:	28 81       	ld	r18, Y
    1658:	39 81       	ldd	r19, Y+1	; 0x01
    165a:	4a 81       	ldd	r20, Y+2	; 0x02
    165c:	5b 81       	ldd	r21, Y+3	; 0x03
    165e:	c3 58       	subi	r28, 0x83	; 131
    1660:	d0 40       	sbci	r29, 0x00	; 0
    1662:	69 a5       	ldd	r22, Y+41	; 0x29
    1664:	7a a5       	ldd	r23, Y+42	; 0x2a
    1666:	8b a5       	ldd	r24, Y+43	; 0x2b
    1668:	9c a5       	ldd	r25, Y+44	; 0x2c
    166a:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    166e:	6b 01       	movw	r12, r22
    1670:	7c 01       	movw	r14, r24
    1672:	c1 58       	subi	r28, 0x81	; 129
    1674:	df 4f       	sbci	r29, 0xFF	; 255
    1676:	28 81       	ld	r18, Y
    1678:	39 81       	ldd	r19, Y+1	; 0x01
    167a:	4a 81       	ldd	r20, Y+2	; 0x02
    167c:	5b 81       	ldd	r21, Y+3	; 0x03
    167e:	cf 57       	subi	r28, 0x7F	; 127
    1680:	d0 40       	sbci	r29, 0x00	; 0
    1682:	c3 01       	movw	r24, r6
    1684:	b2 01       	movw	r22, r4
    1686:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    168a:	9b 01       	movw	r18, r22
    168c:	ac 01       	movw	r20, r24
    168e:	c7 01       	movw	r24, r14
    1690:	b6 01       	movw	r22, r12
    1692:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    1696:	6b 01       	movw	r12, r22
    1698:	7c 01       	movw	r14, r24
    169a:	29 96       	adiw	r28, 0x09	; 9
    169c:	2c ad       	ldd	r18, Y+60	; 0x3c
    169e:	3d ad       	ldd	r19, Y+61	; 0x3d
    16a0:	4e ad       	ldd	r20, Y+62	; 0x3e
    16a2:	5f ad       	ldd	r21, Y+63	; 0x3f
    16a4:	29 97       	sbiw	r28, 0x09	; 9
    16a6:	69 8d       	ldd	r22, Y+25	; 0x19
    16a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ae:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    16b2:	9b 01       	movw	r18, r22
    16b4:	ac 01       	movw	r20, r24
    16b6:	c7 01       	movw	r24, r14
    16b8:	b6 01       	movw	r22, r12
    16ba:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	40 e0       	ldi	r20, 0x00	; 0
    16c4:	5f e3       	ldi	r21, 0x3F	; 63
    16c6:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    16ca:	6b 01       	movw	r12, r22
    16cc:	7c 01       	movw	r14, r24
    16ce:	29 85       	ldd	r18, Y+9	; 0x09
    16d0:	3a 85       	ldd	r19, Y+10	; 0x0a
    16d2:	4b 85       	ldd	r20, Y+11	; 0x0b
    16d4:	5c 85       	ldd	r21, Y+12	; 0x0c
    16d6:	69 81       	ldd	r22, Y+1	; 0x01
    16d8:	7a 81       	ldd	r23, Y+2	; 0x02
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	9c 81       	ldd	r25, Y+4	; 0x04
    16de:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    16e2:	2d 81       	ldd	r18, Y+5	; 0x05
    16e4:	3e 81       	ldd	r19, Y+6	; 0x06
    16e6:	4f 81       	ldd	r20, Y+7	; 0x07
    16e8:	58 85       	ldd	r21, Y+8	; 0x08
    16ea:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    16ee:	9b 01       	movw	r18, r22
    16f0:	ac 01       	movw	r20, r24
    16f2:	c7 01       	movw	r24, r14
    16f4:	b6 01       	movw	r22, r12
    16f6:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    16fa:	a5 01       	movw	r20, r10
    16fc:	94 01       	movw	r18, r8
    16fe:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1702:	2d 89       	ldd	r18, Y+21	; 0x15
    1704:	3e 89       	ldd	r19, Y+22	; 0x16
    1706:	4f 89       	ldd	r20, Y+23	; 0x17
    1708:	58 8d       	ldd	r21, Y+24	; 0x18
    170a:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    170e:	6b 01       	movw	r12, r22
    1710:	7c 01       	movw	r14, r24
    1712:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1714:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1716:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1718:	58 a1       	ldd	r21, Y+32	; 0x20
    171a:	ca 01       	movw	r24, r20
    171c:	b9 01       	movw	r22, r18
    171e:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1722:	4b 01       	movw	r8, r22
    1724:	5c 01       	movw	r10, r24
    1726:	29 89       	ldd	r18, Y+17	; 0x11
    1728:	3a 89       	ldd	r19, Y+18	; 0x12
    172a:	4b 89       	ldd	r20, Y+19	; 0x13
    172c:	5c 89       	ldd	r21, Y+20	; 0x14
    172e:	ca 01       	movw	r24, r20
    1730:	b9 01       	movw	r22, r18
    1732:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1736:	6d 8b       	std	Y+21, r22	; 0x15
    1738:	7e 8b       	std	Y+22, r23	; 0x16
    173a:	8f 8b       	std	Y+23, r24	; 0x17
    173c:	98 8f       	std	Y+24, r25	; 0x18
    173e:	9b 01       	movw	r18, r22
    1740:	ac 01       	movw	r20, r24
    1742:	c5 01       	movw	r24, r10
    1744:	b4 01       	movw	r22, r8
    1746:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    174a:	2b 01       	movw	r4, r22
    174c:	3c 01       	movw	r6, r24
    174e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1750:	3e 85       	ldd	r19, Y+14	; 0x0e
    1752:	4f 85       	ldd	r20, Y+15	; 0x0f
    1754:	58 89       	ldd	r21, Y+16	; 0x10
    1756:	ca 01       	movw	r24, r20
    1758:	b9 01       	movw	r22, r18
    175a:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    175e:	69 8f       	std	Y+25, r22	; 0x19
    1760:	7a 8f       	std	Y+26, r23	; 0x1a
    1762:	8b 8f       	std	Y+27, r24	; 0x1b
    1764:	9c 8f       	std	Y+28, r25	; 0x1c
    1766:	9b 01       	movw	r18, r22
    1768:	ac 01       	movw	r20, r24
    176a:	c3 01       	movw	r24, r6
    176c:	b2 01       	movw	r22, r4
    176e:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    1772:	69 a7       	std	Y+41, r22	; 0x29
    1774:	7a a7       	std	Y+42, r23	; 0x2a
    1776:	8b a7       	std	Y+43, r24	; 0x2b
    1778:	9c a7       	std	Y+44, r25	; 0x2c
    177a:	a7 01       	movw	r20, r14
    177c:	96 01       	movw	r18, r12
    177e:	c7 01       	movw	r24, r14
    1780:	b6 01       	movw	r22, r12
    1782:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1786:	2b 01       	movw	r4, r22
    1788:	3c 01       	movw	r6, r24
    178a:	2d 89       	ldd	r18, Y+21	; 0x15
    178c:	3e 89       	ldd	r19, Y+22	; 0x16
    178e:	4f 89       	ldd	r20, Y+23	; 0x17
    1790:	58 8d       	ldd	r21, Y+24	; 0x18
    1792:	c5 01       	movw	r24, r10
    1794:	b4 01       	movw	r22, r8
    1796:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    179a:	4b 01       	movw	r8, r22
    179c:	5c 01       	movw	r10, r24
    179e:	29 8d       	ldd	r18, Y+25	; 0x19
    17a0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    17a2:	4b 8d       	ldd	r20, Y+27	; 0x1b
    17a4:	5c 8d       	ldd	r21, Y+28	; 0x1c
    17a6:	c5 01       	movw	r24, r10
    17a8:	b4 01       	movw	r22, r8
    17aa:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    17ae:	4b 01       	movw	r8, r22
    17b0:	5c 01       	movw	r10, r24
    17b2:	a3 01       	movw	r20, r6
    17b4:	92 01       	movw	r18, r4
    17b6:	c5 01       	movw	r24, r10
    17b8:	b4 01       	movw	r22, r8
    17ba:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    17be:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <sqrt>
    17c2:	9b 01       	movw	r18, r22
    17c4:	ac 01       	movw	r20, r24
    17c6:	60 e0       	ldi	r22, 0x00	; 0
    17c8:	70 e0       	ldi	r23, 0x00	; 0
    17ca:	80 e8       	ldi	r24, 0x80	; 128
    17cc:	9f e3       	ldi	r25, 0x3F	; 63
    17ce:	0e 94 8f 20 	call	0x411e	; 0x411e <__divsf3>
    17d2:	4b 01       	movw	r8, r22
    17d4:	5c 01       	movw	r10, r24
    17d6:	00 e0       	ldi	r16, 0x00	; 0
    17d8:	11 e0       	ldi	r17, 0x01	; 1
    17da:	9b 01       	movw	r18, r22
    17dc:	ac 01       	movw	r20, r24
    17de:	6d 8d       	ldd	r22, Y+29	; 0x1d
    17e0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    17e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17e4:	98 a1       	ldd	r25, Y+32	; 0x20
    17e6:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    17ea:	d8 01       	movw	r26, r16
    17ec:	6d 93       	st	X+, r22
    17ee:	7d 93       	st	X+, r23
    17f0:	8d 93       	st	X+, r24
    17f2:	9c 93       	st	X, r25
    17f4:	13 97       	sbiw	r26, 0x03	; 3
    17f6:	a5 01       	movw	r20, r10
    17f8:	94 01       	movw	r18, r8
    17fa:	69 89       	ldd	r22, Y+17	; 0x11
    17fc:	7a 89       	ldd	r23, Y+18	; 0x12
    17fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1800:	9c 89       	ldd	r25, Y+20	; 0x14
    1802:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1806:	f8 01       	movw	r30, r16
    1808:	64 83       	std	Z+4, r22	; 0x04
    180a:	75 83       	std	Z+5, r23	; 0x05
    180c:	86 83       	std	Z+6, r24	; 0x06
    180e:	97 83       	std	Z+7, r25	; 0x07
    1810:	a5 01       	movw	r20, r10
    1812:	94 01       	movw	r18, r8
    1814:	6d 85       	ldd	r22, Y+13	; 0x0d
    1816:	7e 85       	ldd	r23, Y+14	; 0x0e
    1818:	8f 85       	ldd	r24, Y+15	; 0x0f
    181a:	98 89       	ldd	r25, Y+16	; 0x10
    181c:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1820:	d8 01       	movw	r26, r16
    1822:	18 96       	adiw	r26, 0x08	; 8
    1824:	6d 93       	st	X+, r22
    1826:	7d 93       	st	X+, r23
    1828:	8d 93       	st	X+, r24
    182a:	9c 93       	st	X, r25
    182c:	1b 97       	sbiw	r26, 0x0b	; 11
    182e:	a5 01       	movw	r20, r10
    1830:	94 01       	movw	r18, r8
    1832:	c7 01       	movw	r24, r14
    1834:	b6 01       	movw	r22, r12
    1836:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    183a:	f8 01       	movw	r30, r16
    183c:	64 87       	std	Z+12, r22	; 0x0c
    183e:	75 87       	std	Z+13, r23	; 0x0d
    1840:	86 87       	std	Z+14, r24	; 0x0e
    1842:	97 87       	std	Z+15, r25	; 0x0f
    1844:	c4 59       	subi	r28, 0x94	; 148
    1846:	df 4f       	sbci	r29, 0xFF	; 255
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	df 91       	pop	r29
    1854:	cf 91       	pop	r28
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
    185a:	ff 90       	pop	r15
    185c:	ef 90       	pop	r14
    185e:	df 90       	pop	r13
    1860:	cf 90       	pop	r12
    1862:	bf 90       	pop	r11
    1864:	af 90       	pop	r10
    1866:	9f 90       	pop	r9
    1868:	8f 90       	pop	r8
    186a:	7f 90       	pop	r7
    186c:	6f 90       	pop	r6
    186e:	5f 90       	pop	r5
    1870:	4f 90       	pop	r4
    1872:	08 95       	ret

00001874 <_GLOBAL__sub_I_Gscale>:
    1874:	27 ed       	ldi	r18, 0xD7	; 215
    1876:	33 eb       	ldi	r19, 0xB3	; 179
    1878:	4d e5       	ldi	r20, 0x5D	; 93
    187a:	5f e3       	ldi	r21, 0x3F	; 63
    187c:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <GyroMeasError>
    1880:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <GyroMeasError+0x1>
    1884:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <GyroMeasError+0x2>
    1888:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <GyroMeasError+0x3>
    188c:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1890:	60 93 64 05 	sts	0x0564, r22	; 0x800564 <beta>
    1894:	70 93 65 05 	sts	0x0565, r23	; 0x800565 <beta+0x1>
    1898:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <beta+0x2>
    189c:	90 93 67 05 	sts	0x0567, r25	; 0x800567 <beta+0x3>
    18a0:	27 ed       	ldi	r18, 0xD7	; 215
    18a2:	33 eb       	ldi	r19, 0xB3	; 179
    18a4:	4d e5       	ldi	r20, 0x5D	; 93
    18a6:	5f e3       	ldi	r21, 0x3F	; 63
    18a8:	60 91 68 05 	lds	r22, 0x0568	; 0x800568 <GyroMeasDrift>
    18ac:	70 91 69 05 	lds	r23, 0x0569	; 0x800569 <GyroMeasDrift+0x1>
    18b0:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <GyroMeasDrift+0x2>
    18b4:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <GyroMeasDrift+0x3>
    18b8:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    18bc:	60 93 60 05 	sts	0x0560, r22	; 0x800560 <zeta>
    18c0:	70 93 61 05 	sts	0x0561, r23	; 0x800561 <zeta+0x1>
    18c4:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <zeta+0x2>
    18c8:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <zeta+0x3>
    18cc:	08 95       	ret

000018ce <_Z9writeBytehhh>:
    18ce:	cf 93       	push	r28
    18d0:	df 93       	push	r29
    18d2:	d6 2f       	mov	r29, r22
    18d4:	c4 2f       	mov	r28, r20
    18d6:	68 2f       	mov	r22, r24
    18d8:	83 e8       	ldi	r24, 0x83	; 131
    18da:	96 e0       	ldi	r25, 0x06	; 6
    18dc:	0e 94 28 29 	call	0x5250	; 0x5250 <_ZN7TwoWire17beginTransmissionEh>
    18e0:	6d 2f       	mov	r22, r29
    18e2:	83 e8       	ldi	r24, 0x83	; 131
    18e4:	96 e0       	ldi	r25, 0x06	; 6
    18e6:	0e 94 dc 28 	call	0x51b8	; 0x51b8 <_ZN7TwoWire5writeEh>
    18ea:	6c 2f       	mov	r22, r28
    18ec:	83 e8       	ldi	r24, 0x83	; 131
    18ee:	96 e0       	ldi	r25, 0x06	; 6
    18f0:	0e 94 dc 28 	call	0x51b8	; 0x51b8 <_ZN7TwoWire5writeEh>
    18f4:	83 e8       	ldi	r24, 0x83	; 131
    18f6:	96 e0       	ldi	r25, 0x06	; 6
    18f8:	0e 94 b2 29 	call	0x5364	; 0x5364 <_ZN7TwoWire15endTransmissionEv>
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	08 95       	ret

00001902 <_Z14MPL3115A2Resetv>:
    1902:	44 e0       	ldi	r20, 0x04	; 4
    1904:	66 e2       	ldi	r22, 0x26	; 38
    1906:	80 e6       	ldi	r24, 0x60	; 96
    1908:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
    190c:	08 95       	ret

0000190e <_Z8readBytehh>:
    190e:	cf 93       	push	r28
    1910:	df 93       	push	r29
    1912:	c8 2f       	mov	r28, r24
    1914:	d6 2f       	mov	r29, r22
    1916:	68 2f       	mov	r22, r24
    1918:	83 e8       	ldi	r24, 0x83	; 131
    191a:	96 e0       	ldi	r25, 0x06	; 6
    191c:	0e 94 28 29 	call	0x5250	; 0x5250 <_ZN7TwoWire17beginTransmissionEh>
    1920:	6d 2f       	mov	r22, r29
    1922:	83 e8       	ldi	r24, 0x83	; 131
    1924:	96 e0       	ldi	r25, 0x06	; 6
    1926:	0e 94 dc 28 	call	0x51b8	; 0x51b8 <_ZN7TwoWire5writeEh>
    192a:	83 e8       	ldi	r24, 0x83	; 131
    192c:	96 e0       	ldi	r25, 0x06	; 6
    192e:	0e 94 b2 29 	call	0x5364	; 0x5364 <_ZN7TwoWire15endTransmissionEv>
    1932:	41 e0       	ldi	r20, 0x01	; 1
    1934:	6c 2f       	mov	r22, r28
    1936:	83 e8       	ldi	r24, 0x83	; 131
    1938:	96 e0       	ldi	r25, 0x06	; 6
    193a:	0e 94 ae 29 	call	0x535c	; 0x535c <_ZN7TwoWire11requestFromEhh>
    193e:	83 e8       	ldi	r24, 0x83	; 131
    1940:	96 e0       	ldi	r25, 0x06	; 6
    1942:	0e 94 88 28 	call	0x5110	; 0x5110 <_ZN7TwoWire4readEv>
    1946:	df 91       	pop	r29
    1948:	cf 91       	pop	r28
    194a:	08 95       	ret

0000194c <_Z11initMPU9250v>:
    194c:	40 e0       	ldi	r20, 0x00	; 0
    194e:	6b e6       	ldi	r22, 0x6B	; 107
    1950:	88 e6       	ldi	r24, 0x68	; 104
    1952:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
    1956:	64 e6       	ldi	r22, 0x64	; 100
    1958:	70 e0       	ldi	r23, 0x00	; 0
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	0e 94 36 2a 	call	0x546c	; 0x546c <delay>
    1962:	41 e0       	ldi	r20, 0x01	; 1
    1964:	6b e6       	ldi	r22, 0x6B	; 107
    1966:	88 e6       	ldi	r24, 0x68	; 104
    1968:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
    196c:	68 ec       	ldi	r22, 0xC8	; 200
    196e:	70 e0       	ldi	r23, 0x00	; 0
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	0e 94 36 2a 	call	0x546c	; 0x546c <delay>
    1978:	43 e0       	ldi	r20, 0x03	; 3
    197a:	6a e1       	ldi	r22, 0x1A	; 26
    197c:	88 e6       	ldi	r24, 0x68	; 104
    197e:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
    1982:	44 e0       	ldi	r20, 0x04	; 4
    1984:	69 e1       	ldi	r22, 0x19	; 25
    1986:	88 e6       	ldi	r24, 0x68	; 104
    1988:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
    198c:	6b e1       	ldi	r22, 0x1B	; 27
    198e:	88 e6       	ldi	r24, 0x68	; 104
    1990:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    1994:	84 7e       	andi	r24, 0xE4	; 228
    1996:	40 91 e5 05 	lds	r20, 0x05E5	; 0x8005e5 <Gscale>
    199a:	44 0f       	add	r20, r20
    199c:	44 0f       	add	r20, r20
    199e:	44 0f       	add	r20, r20
    19a0:	48 2b       	or	r20, r24
    19a2:	6b e1       	ldi	r22, 0x1B	; 27
    19a4:	88 e6       	ldi	r24, 0x68	; 104
    19a6:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
    19aa:	6c e1       	ldi	r22, 0x1C	; 28
    19ac:	88 e6       	ldi	r24, 0x68	; 104
    19ae:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    19b2:	87 7e       	andi	r24, 0xE7	; 231
    19b4:	40 91 e4 05 	lds	r20, 0x05E4	; 0x8005e4 <Ascale>
    19b8:	44 0f       	add	r20, r20
    19ba:	44 0f       	add	r20, r20
    19bc:	44 0f       	add	r20, r20
    19be:	48 2b       	or	r20, r24
    19c0:	6c e1       	ldi	r22, 0x1C	; 28
    19c2:	88 e6       	ldi	r24, 0x68	; 104
    19c4:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
    19c8:	6d e1       	ldi	r22, 0x1D	; 29
    19ca:	88 e6       	ldi	r24, 0x68	; 104
    19cc:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    19d0:	80 7f       	andi	r24, 0xF0	; 240
    19d2:	48 2f       	mov	r20, r24
    19d4:	43 60       	ori	r20, 0x03	; 3
    19d6:	6d e1       	ldi	r22, 0x1D	; 29
    19d8:	88 e6       	ldi	r24, 0x68	; 104
    19da:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
    19de:	42 e2       	ldi	r20, 0x22	; 34
    19e0:	67 e3       	ldi	r22, 0x37	; 55
    19e2:	88 e6       	ldi	r24, 0x68	; 104
    19e4:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
    19e8:	41 e0       	ldi	r20, 0x01	; 1
    19ea:	68 e3       	ldi	r22, 0x38	; 56
    19ec:	88 e6       	ldi	r24, 0x68	; 104
    19ee:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
    19f2:	64 e6       	ldi	r22, 0x64	; 100
    19f4:	70 e0       	ldi	r23, 0x00	; 0
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	0e 94 36 2a 	call	0x546c	; 0x546c <delay>
    19fe:	08 95       	ret

00001a00 <_Z16MPL3115A2Standbyv>:
    1a00:	66 e2       	ldi	r22, 0x26	; 38
    1a02:	80 e6       	ldi	r24, 0x60	; 96
    1a04:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    1a08:	48 2f       	mov	r20, r24
    1a0a:	4e 7f       	andi	r20, 0xFE	; 254
    1a0c:	66 e2       	ldi	r22, 0x26	; 38
    1a0e:	80 e6       	ldi	r24, 0x60	; 96
    1a10:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
    1a14:	08 95       	ret

00001a16 <_Z15MPL3115A2Activev>:
    1a16:	66 e2       	ldi	r22, 0x26	; 38
    1a18:	80 e6       	ldi	r24, 0x60	; 96
    1a1a:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    1a1e:	48 2f       	mov	r20, r24
    1a20:	41 60       	ori	r20, 0x01	; 1
    1a22:	66 e2       	ldi	r22, 0x26	; 38
    1a24:	80 e6       	ldi	r24, 0x60	; 96
    1a26:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
    1a2a:	08 95       	ret

00001a2c <_Z25MPL3115A2enableEventflagsv>:
    1a2c:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <_Z16MPL3115A2Standbyv>
    1a30:	47 e0       	ldi	r20, 0x07	; 7
    1a32:	63 e1       	ldi	r22, 0x13	; 19
    1a34:	80 e6       	ldi	r24, 0x60	; 96
    1a36:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
    1a3a:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <_Z15MPL3115A2Activev>
    1a3e:	08 95       	ret

00001a40 <_Z22MPL3115A2toggleOneShotv>:
    1a40:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <_Z15MPL3115A2Activev>
    1a44:	66 e2       	ldi	r22, 0x26	; 38
    1a46:	80 e6       	ldi	r24, 0x60	; 96
    1a48:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    1a4c:	48 2f       	mov	r20, r24
    1a4e:	4d 7f       	andi	r20, 0xFD	; 253
    1a50:	66 e2       	ldi	r22, 0x26	; 38
    1a52:	80 e6       	ldi	r24, 0x60	; 96
    1a54:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
    1a58:	66 e2       	ldi	r22, 0x26	; 38
    1a5a:	80 e6       	ldi	r24, 0x60	; 96
    1a5c:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    1a60:	48 2f       	mov	r20, r24
    1a62:	42 60       	ori	r20, 0x02	; 2
    1a64:	66 e2       	ldi	r22, 0x26	; 38
    1a66:	80 e6       	ldi	r24, 0x60	; 96
    1a68:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
    1a6c:	08 95       	ret

00001a6e <_Z19MPL3115A2SampleRateh>:
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
    1a72:	d8 2f       	mov	r29, r24
    1a74:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <_Z16MPL3115A2Standbyv>
    1a78:	66 e2       	ldi	r22, 0x26	; 38
    1a7a:	80 e6       	ldi	r24, 0x60	; 96
    1a7c:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    1a80:	c8 2f       	mov	r28, r24
    1a82:	48 2f       	mov	r20, r24
    1a84:	47 7c       	andi	r20, 0xC7	; 199
    1a86:	66 e2       	ldi	r22, 0x26	; 38
    1a88:	80 e6       	ldi	r24, 0x60	; 96
    1a8a:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
    1a8e:	d8 30       	cpi	r29, 0x08	; 8
    1a90:	48 f4       	brcc	.+18     	; 0x1aa4 <_Z19MPL3115A2SampleRateh+0x36>
    1a92:	4d 2f       	mov	r20, r29
    1a94:	44 0f       	add	r20, r20
    1a96:	44 0f       	add	r20, r20
    1a98:	44 0f       	add	r20, r20
    1a9a:	4c 2b       	or	r20, r28
    1a9c:	66 e2       	ldi	r22, 0x26	; 38
    1a9e:	80 e6       	ldi	r24, 0x60	; 96
    1aa0:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
    1aa4:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <_Z15MPL3115A2Activev>
    1aa8:	df 91       	pop	r29
    1aaa:	cf 91       	pop	r28
    1aac:	08 95       	ret

00001aae <_Z21initRealTimeMPL3115A2v>:
    1aae:	61 e0       	ldi	r22, 0x01	; 1
    1ab0:	80 e6       	ldi	r24, 0x60	; 96
    1ab2:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    1ab6:	62 e0       	ldi	r22, 0x02	; 2
    1ab8:	80 e6       	ldi	r24, 0x60	; 96
    1aba:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    1abe:	63 e0       	ldi	r22, 0x03	; 3
    1ac0:	80 e6       	ldi	r24, 0x60	; 96
    1ac2:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    1ac6:	64 e0       	ldi	r22, 0x04	; 4
    1ac8:	80 e6       	ldi	r24, 0x60	; 96
    1aca:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    1ace:	65 e0       	ldi	r22, 0x05	; 5
    1ad0:	80 e6       	ldi	r24, 0x60	; 96
    1ad2:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    1ad6:	6d e0       	ldi	r22, 0x0D	; 13
    1ad8:	80 e6       	ldi	r24, 0x60	; 96
    1ada:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    1ade:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <_Z16MPL3115A2Standbyv>
    1ae2:	40 e8       	ldi	r20, 0x80	; 128
    1ae4:	69 e2       	ldi	r22, 0x29	; 41
    1ae6:	80 e6       	ldi	r24, 0x60	; 96
    1ae8:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
    1aec:	40 e8       	ldi	r20, 0x80	; 128
    1aee:	6a e2       	ldi	r22, 0x2A	; 42
    1af0:	80 e6       	ldi	r24, 0x60	; 96
    1af2:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
    1af6:	42 e2       	ldi	r20, 0x22	; 34
    1af8:	68 e2       	ldi	r22, 0x28	; 40
    1afa:	80 e6       	ldi	r24, 0x60	; 96
    1afc:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
    1b00:	40 e0       	ldi	r20, 0x00	; 0
    1b02:	6f e0       	ldi	r22, 0x0F	; 15
    1b04:	80 e6       	ldi	r24, 0x60	; 96
    1b06:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
    1b0a:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <_Z15MPL3115A2Activev>
    1b0e:	08 95       	ret

00001b10 <_Z28MPL3115A2ActiveAltimeterModev>:

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Enter Active Altimeter mode
void MPL3115A2ActiveAltimeterMode()
{
 MPL3115A2Standby(); // First put device in standby mode to allow write to registers
    1b10:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <_Z16MPL3115A2Standbyv>
 uint8_t c = readByte(MPL3115A2_ADDRESS, MPL3115A2_CTRL_REG1); // Read contents of register CTRL_REG1
    1b14:	66 e2       	ldi	r22, 0x26	; 38
    1b16:	80 e6       	ldi	r24, 0x60	; 96
    1b18:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
 writeByte(MPL3115A2_ADDRESS, MPL3115A2_CTRL_REG1, c | (0x80)); // Set ALT (bit 7) to 1
    1b1c:	48 2f       	mov	r20, r24
    1b1e:	40 68       	ori	r20, 0x80	; 128
    1b20:	66 e2       	ldi	r22, 0x26	; 38
    1b22:	80 e6       	ldi	r24, 0x60	; 96
    1b24:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
 MPL3115A2Active(); // Set to active to start reading
    1b28:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <_Z15MPL3115A2Activev>
    1b2c:	08 95       	ret

00001b2e <_Z28MPL3115A2ActiveBarometerModev>:

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Enter Active Barometer mode
void MPL3115A2ActiveBarometerMode()
{
 MPL3115A2Standby(); // First put device in standby mode to allow write to registers
    1b2e:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <_Z16MPL3115A2Standbyv>
 uint8_t c = readByte(MPL3115A2_ADDRESS, MPL3115A2_CTRL_REG1); // Read contents of register CTRL_REG1
    1b32:	66 e2       	ldi	r22, 0x26	; 38
    1b34:	80 e6       	ldi	r24, 0x60	; 96
    1b36:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
 writeByte(MPL3115A2_ADDRESS, MPL3115A2_CTRL_REG1, c & ~(0x80)); // Set ALT (bit 7) to 0
    1b3a:	48 2f       	mov	r20, r24
    1b3c:	4f 77       	andi	r20, 0x7F	; 127
    1b3e:	66 e2       	ldi	r22, 0x26	; 38
    1b40:	80 e6       	ldi	r24, 0x60	; 96
    1b42:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
 MPL3115A2Active(); // Set to active to start reading
    1b46:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <_Z15MPL3115A2Activev>
    1b4a:	08 95       	ret

00001b4c <_Z9readByteshhhPh>:
	data = Wire.read();                      // Fill Rx buffer with result
	return data;                             // Return data read from slave register
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{  
    1b4c:	ef 92       	push	r14
    1b4e:	ff 92       	push	r15
    1b50:	0f 93       	push	r16
    1b52:	1f 93       	push	r17
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
    1b58:	c8 2f       	mov	r28, r24
    1b5a:	16 2f       	mov	r17, r22
    1b5c:	d4 2f       	mov	r29, r20
    1b5e:	79 01       	movw	r14, r18
	Wire.beginTransmission(address);   // Initialize the Tx buffer
    1b60:	68 2f       	mov	r22, r24
    1b62:	83 e8       	ldi	r24, 0x83	; 131
    1b64:	96 e0       	ldi	r25, 0x06	; 6
    1b66:	0e 94 28 29 	call	0x5250	; 0x5250 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);            // Put slave register address in Tx buffer
    1b6a:	61 2f       	mov	r22, r17
    1b6c:	83 e8       	ldi	r24, 0x83	; 131
    1b6e:	96 e0       	ldi	r25, 0x06	; 6
    1b70:	0e 94 dc 28 	call	0x51b8	; 0x51b8 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();  // Send the Tx buffer, but send a restart to keep connection alive
    1b74:	83 e8       	ldi	r24, 0x83	; 131
    1b76:	96 e0       	ldi	r25, 0x06	; 6
    1b78:	0e 94 b2 29 	call	0x5364	; 0x5364 <_ZN7TwoWire15endTransmissionEv>
//	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
	uint8_t i = 0;
//        Wire.requestFrom(address, count);  // Read bytes from slave register address 
        Wire.requestFrom(address, (size_t) count);  // Read bytes from slave register address 
    1b7c:	4d 2f       	mov	r20, r29
    1b7e:	6c 2f       	mov	r22, r28
    1b80:	83 e8       	ldi	r24, 0x83	; 131
    1b82:	96 e0       	ldi	r25, 0x06	; 6
    1b84:	0e 94 ae 29 	call	0x535c	; 0x535c <_ZN7TwoWire11requestFromEhh>
{  
	Wire.beginTransmission(address);   // Initialize the Tx buffer
	Wire.write(subAddress);            // Put slave register address in Tx buffer
	Wire.endTransmission();  // Send the Tx buffer, but send a restart to keep connection alive
//	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
	uint8_t i = 0;
    1b88:	c0 e0       	ldi	r28, 0x00	; 0
//        Wire.requestFrom(address, count);  // Read bytes from slave register address 
        Wire.requestFrom(address, (size_t) count);  // Read bytes from slave register address 
	while (Wire.available()) {
    1b8a:	0c c0       	rjmp	.+24     	; 0x1ba4 <_Z9readByteshhhPh+0x58>
        dest[i++] = Wire.read(); }         // Put read results in the Rx buffer
    1b8c:	d1 e0       	ldi	r29, 0x01	; 1
    1b8e:	dc 0f       	add	r29, r28
    1b90:	87 01       	movw	r16, r14
    1b92:	0c 0f       	add	r16, r28
    1b94:	11 1d       	adc	r17, r1
    1b96:	83 e8       	ldi	r24, 0x83	; 131
    1b98:	96 e0       	ldi	r25, 0x06	; 6
    1b9a:	0e 94 88 28 	call	0x5110	; 0x5110 <_ZN7TwoWire4readEv>
    1b9e:	f8 01       	movw	r30, r16
    1ba0:	80 83       	st	Z, r24
    1ba2:	cd 2f       	mov	r28, r29
	Wire.endTransmission();  // Send the Tx buffer, but send a restart to keep connection alive
//	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
	uint8_t i = 0;
//        Wire.requestFrom(address, count);  // Read bytes from slave register address 
        Wire.requestFrom(address, (size_t) count);  // Read bytes from slave register address 
	while (Wire.available()) {
    1ba4:	83 e8       	ldi	r24, 0x83	; 131
    1ba6:	96 e0       	ldi	r25, 0x06	; 6
    1ba8:	0e 94 80 28 	call	0x5100	; 0x5100 <_ZN7TwoWire9availableEv>
    1bac:	89 2b       	or	r24, r25
    1bae:	71 f7       	brne	.-36     	; 0x1b8c <_Z9readByteshhhPh+0x40>
        dest[i++] = Wire.read(); }         // Put read results in the Rx buffer
}
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	1f 91       	pop	r17
    1bb6:	0f 91       	pop	r16
    1bb8:	ff 90       	pop	r15
    1bba:	ef 90       	pop	r14
    1bbc:	08 95       	ret

00001bbe <_Z13readAccelDataPi>:
          break;
  }
}

void readAccelData(int16_t * destination)
{
    1bbe:	0f 93       	push	r16
    1bc0:	1f 93       	push	r17
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	00 d0       	rcall	.+0      	; 0x1bc8 <_Z13readAccelDataPi+0xa>
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <_Z13readAccelDataPi+0xc>
    1bca:	00 d0       	rcall	.+0      	; 0x1bcc <_Z13readAccelDataPi+0xe>
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	8c 01       	movw	r16, r24
  uint8_t rawData[6];  // x/y/z accel register data stored here
  readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
    1bd2:	9e 01       	movw	r18, r28
    1bd4:	2f 5f       	subi	r18, 0xFF	; 255
    1bd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd8:	46 e0       	ldi	r20, 0x06	; 6
    1bda:	6b e3       	ldi	r22, 0x3B	; 59
    1bdc:	88 e6       	ldi	r24, 0x68	; 104
    1bde:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_Z9readByteshhhPh>
  destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;  // Turn the MSB and LSB into a signed 16-bit value
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	98 2f       	mov	r25, r24
    1be8:	88 27       	eor	r24, r24
    1bea:	2a 81       	ldd	r18, Y+2	; 0x02
    1bec:	82 2b       	or	r24, r18
    1bee:	f8 01       	movw	r30, r16
    1bf0:	91 83       	std	Z+1, r25	; 0x01
    1bf2:	80 83       	st	Z, r24
  destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;  
    1bf4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	32 2f       	mov	r19, r18
    1bfa:	22 27       	eor	r18, r18
    1bfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bfe:	28 2b       	or	r18, r24
    1c00:	33 83       	std	Z+3, r19	; 0x03
    1c02:	22 83       	std	Z+2, r18	; 0x02
  destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ; 
    1c04:	2d 81       	ldd	r18, Y+5	; 0x05
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	32 2f       	mov	r19, r18
    1c0a:	22 27       	eor	r18, r18
    1c0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c0e:	28 2b       	or	r18, r24
    1c10:	35 83       	std	Z+5, r19	; 0x05
    1c12:	24 83       	std	Z+4, r18	; 0x04
}
    1c14:	26 96       	adiw	r28, 0x06	; 6
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	de bf       	out	0x3e, r29	; 62
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	cd bf       	out	0x3d, r28	; 61
    1c20:	df 91       	pop	r29
    1c22:	cf 91       	pop	r28
    1c24:	1f 91       	pop	r17
    1c26:	0f 91       	pop	r16
    1c28:	08 95       	ret

00001c2a <_Z12readGyroDataPi>:


void readGyroData(int16_t * destination)
{
    1c2a:	0f 93       	push	r16
    1c2c:	1f 93       	push	r17
    1c2e:	cf 93       	push	r28
    1c30:	df 93       	push	r29
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <_Z12readGyroDataPi+0xa>
    1c34:	00 d0       	rcall	.+0      	; 0x1c36 <_Z12readGyroDataPi+0xc>
    1c36:	00 d0       	rcall	.+0      	; 0x1c38 <_Z12readGyroDataPi+0xe>
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
    1c3c:	8c 01       	movw	r16, r24
  uint8_t rawData[6];  // x/y/z gyro register data stored here
  readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
    1c3e:	9e 01       	movw	r18, r28
    1c40:	2f 5f       	subi	r18, 0xFF	; 255
    1c42:	3f 4f       	sbci	r19, 0xFF	; 255
    1c44:	46 e0       	ldi	r20, 0x06	; 6
    1c46:	63 e4       	ldi	r22, 0x43	; 67
    1c48:	88 e6       	ldi	r24, 0x68	; 104
    1c4a:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_Z9readByteshhhPh>
  destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;  // Turn the MSB and LSB into a signed 16-bit value
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	98 2f       	mov	r25, r24
    1c54:	88 27       	eor	r24, r24
    1c56:	2a 81       	ldd	r18, Y+2	; 0x02
    1c58:	82 2b       	or	r24, r18
    1c5a:	f8 01       	movw	r30, r16
    1c5c:	91 83       	std	Z+1, r25	; 0x01
    1c5e:	80 83       	st	Z, r24
  destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;  
    1c60:	2b 81       	ldd	r18, Y+3	; 0x03
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	32 2f       	mov	r19, r18
    1c66:	22 27       	eor	r18, r18
    1c68:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6a:	28 2b       	or	r18, r24
    1c6c:	33 83       	std	Z+3, r19	; 0x03
    1c6e:	22 83       	std	Z+2, r18	; 0x02
  destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ; 
    1c70:	2d 81       	ldd	r18, Y+5	; 0x05
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	32 2f       	mov	r19, r18
    1c76:	22 27       	eor	r18, r18
    1c78:	8e 81       	ldd	r24, Y+6	; 0x06
    1c7a:	28 2b       	or	r18, r24
    1c7c:	35 83       	std	Z+5, r19	; 0x05
    1c7e:	24 83       	std	Z+4, r18	; 0x04
}
    1c80:	26 96       	adiw	r28, 0x06	; 6
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	cd bf       	out	0x3d, r28	; 61
    1c8c:	df 91       	pop	r29
    1c8e:	cf 91       	pop	r28
    1c90:	1f 91       	pop	r17
    1c92:	0f 91       	pop	r16
    1c94:	08 95       	ret

00001c96 <_Z11readMagDataPi>:

void readMagData(int16_t * destination)
{
    1c96:	0f 93       	push	r16
    1c98:	1f 93       	push	r17
    1c9a:	cf 93       	push	r28
    1c9c:	df 93       	push	r29
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	27 97       	sbiw	r28, 0x07	; 7
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	de bf       	out	0x3e, r29	; 62
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	cd bf       	out	0x3d, r28	; 61
    1cae:	8c 01       	movw	r16, r24
  uint8_t rawData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
  if(readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set
    1cb0:	62 e0       	ldi	r22, 0x02	; 2
    1cb2:	8c e0       	ldi	r24, 0x0C	; 12
    1cb4:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    1cb8:	80 ff       	sbrs	r24, 0
    1cba:	24 c0       	rjmp	.+72     	; 0x1d04 <_Z11readMagDataPi+0x6e>
  readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &rawData[0]);  // Read the six raw data and ST2 registers sequentially into data array
    1cbc:	9e 01       	movw	r18, r28
    1cbe:	2f 5f       	subi	r18, 0xFF	; 255
    1cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc2:	47 e0       	ldi	r20, 0x07	; 7
    1cc4:	63 e0       	ldi	r22, 0x03	; 3
    1cc6:	8c e0       	ldi	r24, 0x0C	; 12
    1cc8:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_Z9readByteshhhPh>
  uint8_t c = rawData[6]; // End data read by reading ST2 register
    if(!(c & 0x08)) { // Check if magnetic sensor overflow set, if not then report data
    1ccc:	8f 81       	ldd	r24, Y+7	; 0x07
    1cce:	83 fd       	sbrc	r24, 3
    1cd0:	19 c0       	rjmp	.+50     	; 0x1d04 <_Z11readMagDataPi+0x6e>
    destination[0] = ((int16_t)rawData[1] << 8) | rawData[0] ;  // Turn the MSB and LSB into a signed 16-bit value
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	98 2f       	mov	r25, r24
    1cd8:	88 27       	eor	r24, r24
    1cda:	29 81       	ldd	r18, Y+1	; 0x01
    1cdc:	82 2b       	or	r24, r18
    1cde:	f8 01       	movw	r30, r16
    1ce0:	91 83       	std	Z+1, r25	; 0x01
    1ce2:	80 83       	st	Z, r24
    destination[1] = ((int16_t)rawData[3] << 8) | rawData[2] ;  // Data stored as little Endian
    1ce4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	32 2f       	mov	r19, r18
    1cea:	22 27       	eor	r18, r18
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	28 2b       	or	r18, r24
    1cf0:	33 83       	std	Z+3, r19	; 0x03
    1cf2:	22 83       	std	Z+2, r18	; 0x02
    destination[2] = ((int16_t)rawData[5] << 8) | rawData[4] ; 
    1cf4:	2e 81       	ldd	r18, Y+6	; 0x06
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	32 2f       	mov	r19, r18
    1cfa:	22 27       	eor	r18, r18
    1cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfe:	28 2b       	or	r18, r24
    1d00:	35 83       	std	Z+5, r19	; 0x05
    1d02:	24 83       	std	Z+4, r18	; 0x04
   }
  }
}
    1d04:	27 96       	adiw	r28, 0x07	; 7
    1d06:	0f b6       	in	r0, 0x3f	; 63
    1d08:	f8 94       	cli
    1d0a:	de bf       	out	0x3e, r29	; 62
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	cd bf       	out	0x3d, r28	; 61
    1d10:	df 91       	pop	r29
    1d12:	cf 91       	pop	r28
    1d14:	1f 91       	pop	r17
    1d16:	0f 91       	pop	r16
    1d18:	08 95       	ret

00001d1a <_Z12readTempDatav>:


int16_t readTempData()
{
    1d1a:	cf 93       	push	r28
    1d1c:	df 93       	push	r29
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <_Z12readTempDatav+0x6>
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
  uint8_t rawData[2];  // x/y/z gyro register data stored here
  readBytes(MPU9250_ADDRESS, TEMP_OUT_H, 2, &rawData[0]);  // Read the two raw data registers sequentially into data array 
    1d24:	9e 01       	movw	r18, r28
    1d26:	2f 5f       	subi	r18, 0xFF	; 255
    1d28:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2a:	42 e0       	ldi	r20, 0x02	; 2
    1d2c:	61 e4       	ldi	r22, 0x41	; 65
    1d2e:	88 e6       	ldi	r24, 0x68	; 104
    1d30:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_Z9readByteshhhPh>
  return ((int16_t)rawData[0] << 8) | rawData[1] ;  // Turn the MSB and LSB into a 16-bit value
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	98 2f       	mov	r25, r24
    1d3a:	88 27       	eor	r24, r24
    1d3c:	2a 81       	ldd	r18, Y+2	; 0x02
}
    1d3e:	82 2b       	or	r24, r18
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	df 91       	pop	r29
    1d46:	cf 91       	pop	r28
    1d48:	08 95       	ret

00001d4a <_Z10initAK8963Pf>:


void initAK8963(float * destination)
{
    1d4a:	0f 93       	push	r16
    1d4c:	1f 93       	push	r17
    1d4e:	cf 93       	push	r28
    1d50:	df 93       	push	r29
    1d52:	00 d0       	rcall	.+0      	; 0x1d54 <_Z10initAK8963Pf+0xa>
    1d54:	1f 92       	push	r1
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	8c 01       	movw	r16, r24
  // First extract the factory calibration for each magnetometer axis
  uint8_t rawData[3];  // x/y/z gyro calibration data stored here
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer  
    1d5c:	40 e0       	ldi	r20, 0x00	; 0
    1d5e:	6a e0       	ldi	r22, 0x0A	; 10
    1d60:	8c e0       	ldi	r24, 0x0C	; 12
    1d62:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  delay(10);
    1d66:	6a e0       	ldi	r22, 0x0A	; 10
    1d68:	70 e0       	ldi	r23, 0x00	; 0
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	0e 94 36 2a 	call	0x546c	; 0x546c <delay>
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
    1d72:	4f e0       	ldi	r20, 0x0F	; 15
    1d74:	6a e0       	ldi	r22, 0x0A	; 10
    1d76:	8c e0       	ldi	r24, 0x0C	; 12
    1d78:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  delay(10);
    1d7c:	6a e0       	ldi	r22, 0x0A	; 10
    1d7e:	70 e0       	ldi	r23, 0x00	; 0
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	0e 94 36 2a 	call	0x546c	; 0x546c <delay>
  readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
    1d88:	9e 01       	movw	r18, r28
    1d8a:	2f 5f       	subi	r18, 0xFF	; 255
    1d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d8e:	43 e0       	ldi	r20, 0x03	; 3
    1d90:	60 e1       	ldi	r22, 0x10	; 16
    1d92:	8c e0       	ldi	r24, 0x0C	; 12
    1d94:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_Z9readByteshhhPh>
  destination[0] =  (float)(rawData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
    1d98:	69 81       	ldd	r22, Y+1	; 0x01
    1d9a:	70 e0       	ldi	r23, 0x00	; 0
    1d9c:	60 58       	subi	r22, 0x80	; 128
    1d9e:	71 09       	sbc	r23, r1
    1da0:	07 2e       	mov	r0, r23
    1da2:	00 0c       	add	r0, r0
    1da4:	88 0b       	sbc	r24, r24
    1da6:	99 0b       	sbc	r25, r25
    1da8:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e8       	ldi	r20, 0x80	; 128
    1db2:	5b e3       	ldi	r21, 0x3B	; 59
    1db4:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	40 e8       	ldi	r20, 0x80	; 128
    1dbe:	5f e3       	ldi	r21, 0x3F	; 63
    1dc0:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    1dc4:	f8 01       	movw	r30, r16
    1dc6:	60 83       	st	Z, r22
    1dc8:	71 83       	std	Z+1, r23	; 0x01
    1dca:	82 83       	std	Z+2, r24	; 0x02
    1dcc:	93 83       	std	Z+3, r25	; 0x03
  destination[1] =  (float)(rawData[1] - 128)/256. + 1.;  
    1dce:	6a 81       	ldd	r22, Y+2	; 0x02
    1dd0:	70 e0       	ldi	r23, 0x00	; 0
    1dd2:	60 58       	subi	r22, 0x80	; 128
    1dd4:	71 09       	sbc	r23, r1
    1dd6:	07 2e       	mov	r0, r23
    1dd8:	00 0c       	add	r0, r0
    1dda:	88 0b       	sbc	r24, r24
    1ddc:	99 0b       	sbc	r25, r25
    1dde:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e8       	ldi	r20, 0x80	; 128
    1de8:	5b e3       	ldi	r21, 0x3B	; 59
    1dea:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	40 e8       	ldi	r20, 0x80	; 128
    1df4:	5f e3       	ldi	r21, 0x3F	; 63
    1df6:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    1dfa:	f8 01       	movw	r30, r16
    1dfc:	64 83       	std	Z+4, r22	; 0x04
    1dfe:	75 83       	std	Z+5, r23	; 0x05
    1e00:	86 83       	std	Z+6, r24	; 0x06
    1e02:	97 83       	std	Z+7, r25	; 0x07
  destination[2] =  (float)(rawData[2] - 128)/256. + 1.; 
    1e04:	6b 81       	ldd	r22, Y+3	; 0x03
    1e06:	70 e0       	ldi	r23, 0x00	; 0
    1e08:	60 58       	subi	r22, 0x80	; 128
    1e0a:	71 09       	sbc	r23, r1
    1e0c:	07 2e       	mov	r0, r23
    1e0e:	00 0c       	add	r0, r0
    1e10:	88 0b       	sbc	r24, r24
    1e12:	99 0b       	sbc	r25, r25
    1e14:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	40 e8       	ldi	r20, 0x80	; 128
    1e1e:	5b e3       	ldi	r21, 0x3B	; 59
    1e20:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e8       	ldi	r20, 0x80	; 128
    1e2a:	5f e3       	ldi	r21, 0x3F	; 63
    1e2c:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    1e30:	f8 01       	movw	r30, r16
    1e32:	60 87       	std	Z+8, r22	; 0x08
    1e34:	71 87       	std	Z+9, r23	; 0x09
    1e36:	82 87       	std	Z+10, r24	; 0x0a
    1e38:	93 87       	std	Z+11, r25	; 0x0b
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer  
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	6a e0       	ldi	r22, 0x0A	; 10
    1e3e:	8c e0       	ldi	r24, 0x0C	; 12
    1e40:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  delay(10);
    1e44:	6a e0       	ldi	r22, 0x0A	; 10
    1e46:	70 e0       	ldi	r23, 0x00	; 0
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	0e 94 36 2a 	call	0x546c	; 0x546c <delay>
  // Configure the magnetometer for continuous read and highest resolution
  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
  writeByte(AK8963_ADDRESS, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
    1e50:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <Mscale>
    1e54:	f0 e1       	ldi	r31, 0x10	; 16
    1e56:	8f 9f       	mul	r24, r31
    1e58:	c0 01       	movw	r24, r0
    1e5a:	11 24       	eor	r1, r1
    1e5c:	40 91 1d 01 	lds	r20, 0x011D	; 0x80011d <Mmode>
    1e60:	48 2b       	or	r20, r24
    1e62:	6a e0       	ldi	r22, 0x0A	; 10
    1e64:	8c e0       	ldi	r24, 0x0C	; 12
    1e66:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  delay(10);
    1e6a:	6a e0       	ldi	r22, 0x0A	; 10
    1e6c:	70 e0       	ldi	r23, 0x00	; 0
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	0e 94 36 2a 	call	0x546c	; 0x546c <delay>
}
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	df 91       	pop	r29
    1e7e:	cf 91       	pop	r28
    1e80:	1f 91       	pop	r17
    1e82:	0f 91       	pop	r16
    1e84:	08 95       	ret

00001e86 <_Z16calibrateMPU9250PfS_>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(float * dest1, float * dest2)
{  
    1e86:	2f 92       	push	r2
    1e88:	3f 92       	push	r3
    1e8a:	4f 92       	push	r4
    1e8c:	5f 92       	push	r5
    1e8e:	6f 92       	push	r6
    1e90:	7f 92       	push	r7
    1e92:	8f 92       	push	r8
    1e94:	9f 92       	push	r9
    1e96:	af 92       	push	r10
    1e98:	bf 92       	push	r11
    1e9a:	cf 92       	push	r12
    1e9c:	df 92       	push	r13
    1e9e:	ef 92       	push	r14
    1ea0:	ff 92       	push	r15
    1ea2:	0f 93       	push	r16
    1ea4:	1f 93       	push	r17
    1ea6:	cf 93       	push	r28
    1ea8:	df 93       	push	r29
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	a8 97       	sbiw	r28, 0x28	; 40
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	9e 8f       	std	Y+30, r25	; 0x1e
    1ebc:	8d 8f       	std	Y+29, r24	; 0x1d
    1ebe:	78 a3       	std	Y+32, r23	; 0x20
    1ec0:	6f 8f       	std	Y+31, r22	; 0x1f
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
  
 // reset device
  writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
    1ec2:	40 e8       	ldi	r20, 0x80	; 128
    1ec4:	6b e6       	ldi	r22, 0x6B	; 107
    1ec6:	88 e6       	ldi	r24, 0x68	; 104
    1ec8:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  delay(100);
    1ecc:	64 e6       	ldi	r22, 0x64	; 100
    1ece:	70 e0       	ldi	r23, 0x00	; 0
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	0e 94 36 2a 	call	0x546c	; 0x546c <delay>
   
 // get stable time source; Auto select clock source to be PLL gyroscope reference if ready 
 // else use the internal oscillator, bits 2:0 = 001
  writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  
    1ed8:	41 e0       	ldi	r20, 0x01	; 1
    1eda:	6b e6       	ldi	r22, 0x6B	; 107
    1edc:	88 e6       	ldi	r24, 0x68	; 104
    1ede:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
    1ee2:	40 e0       	ldi	r20, 0x00	; 0
    1ee4:	6c e6       	ldi	r22, 0x6C	; 108
    1ee6:	88 e6       	ldi	r24, 0x68	; 104
    1ee8:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  delay(200);                                    
    1eec:	68 ec       	ldi	r22, 0xC8	; 200
    1eee:	70 e0       	ldi	r23, 0x00	; 0
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	0e 94 36 2a 	call	0x546c	; 0x546c <delay>

// Configure device for bias calculation
  writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
    1ef8:	40 e0       	ldi	r20, 0x00	; 0
    1efa:	68 e3       	ldi	r22, 0x38	; 56
    1efc:	88 e6       	ldi	r24, 0x68	; 104
    1efe:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
    1f02:	40 e0       	ldi	r20, 0x00	; 0
    1f04:	63 e2       	ldi	r22, 0x23	; 35
    1f06:	88 e6       	ldi	r24, 0x68	; 104
    1f08:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
    1f0c:	40 e0       	ldi	r20, 0x00	; 0
    1f0e:	6b e6       	ldi	r22, 0x6B	; 107
    1f10:	88 e6       	ldi	r24, 0x68	; 104
    1f12:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
    1f16:	40 e0       	ldi	r20, 0x00	; 0
    1f18:	64 e2       	ldi	r22, 0x24	; 36
    1f1a:	88 e6       	ldi	r24, 0x68	; 104
    1f1c:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	6a e6       	ldi	r22, 0x6A	; 106
    1f24:	88 e6       	ldi	r24, 0x68	; 104
    1f26:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
    1f2a:	4c e0       	ldi	r20, 0x0C	; 12
    1f2c:	6a e6       	ldi	r22, 0x6A	; 106
    1f2e:	88 e6       	ldi	r24, 0x68	; 104
    1f30:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  delay(15);
    1f34:	6f e0       	ldi	r22, 0x0F	; 15
    1f36:	70 e0       	ldi	r23, 0x00	; 0
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	0e 94 36 2a 	call	0x546c	; 0x546c <delay>
  
// Configure MPU6050 gyro and accelerometer for bias calculation
  writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
    1f40:	41 e0       	ldi	r20, 0x01	; 1
    1f42:	6a e1       	ldi	r22, 0x1A	; 26
    1f44:	88 e6       	ldi	r24, 0x68	; 104
    1f46:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
    1f4a:	40 e0       	ldi	r20, 0x00	; 0
    1f4c:	69 e1       	ldi	r22, 0x19	; 25
    1f4e:	88 e6       	ldi	r24, 0x68	; 104
    1f50:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
    1f54:	40 e0       	ldi	r20, 0x00	; 0
    1f56:	6b e1       	ldi	r22, 0x1B	; 27
    1f58:	88 e6       	ldi	r24, 0x68	; 104
    1f5a:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
    1f5e:	40 e0       	ldi	r20, 0x00	; 0
    1f60:	6c e1       	ldi	r22, 0x1C	; 28
    1f62:	88 e6       	ldi	r24, 0x68	; 104
    1f64:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
 
  uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
  uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
  writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO  
    1f68:	40 e4       	ldi	r20, 0x40	; 64
    1f6a:	6a e6       	ldi	r22, 0x6A	; 106
    1f6c:	88 e6       	ldi	r24, 0x68	; 104
    1f6e:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
    1f72:	48 e7       	ldi	r20, 0x78	; 120
    1f74:	63 e2       	ldi	r22, 0x23	; 35
    1f76:	88 e6       	ldi	r24, 0x68	; 104
    1f78:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
    1f7c:	68 e2       	ldi	r22, 0x28	; 40
    1f7e:	70 e0       	ldi	r23, 0x00	; 0
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	0e 94 36 2a 	call	0x546c	; 0x546c <delay>

// At end of sample accumulation, turn off FIFO sensor read
  writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
    1f88:	40 e0       	ldi	r20, 0x00	; 0
    1f8a:	63 e2       	ldi	r22, 0x23	; 35
    1f8c:	88 e6       	ldi	r24, 0x68	; 104
    1f8e:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
    1f92:	9e 01       	movw	r18, r28
    1f94:	2f 5f       	subi	r18, 0xFF	; 255
    1f96:	3f 4f       	sbci	r19, 0xFF	; 255
    1f98:	42 e0       	ldi	r20, 0x02	; 2
    1f9a:	62 e7       	ldi	r22, 0x72	; 114
    1f9c:	88 e6       	ldi	r24, 0x68	; 104
    1f9e:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_Z9readByteshhhPh>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
    1fa2:	29 81       	ldd	r18, Y+1	; 0x01
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	32 2f       	mov	r19, r18
    1fa8:	22 27       	eor	r18, r18
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
    1fac:	28 2b       	or	r18, r24
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
    1fae:	ab ea       	ldi	r26, 0xAB	; 171
    1fb0:	ba ea       	ldi	r27, 0xAA	; 170
    1fb2:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <__umulhisi3>
    1fb6:	1c 01       	movw	r2, r24
    1fb8:	36 94       	lsr	r3
    1fba:	27 94       	ror	r2
    1fbc:	36 94       	lsr	r3
    1fbe:	27 94       	ror	r2
    1fc0:	36 94       	lsr	r3
    1fc2:	27 94       	ror	r2
  
  for (ii = 0; ii < packet_count; ii++) {
    1fc4:	21 14       	cp	r2, r1
    1fc6:	31 04       	cpc	r3, r1
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <_Z16calibrateMPU9250PfS_+0x146>
    1fca:	92 c0       	rjmp	.+292    	; 0x20f0 <_Z16calibrateMPU9250PfS_+0x26a>
    1fcc:	1d 86       	std	Y+13, r1	; 0x0d
    1fce:	1e 86       	std	Y+14, r1	; 0x0e
    1fd0:	1f 86       	std	Y+15, r1	; 0x0f
    1fd2:	18 8a       	std	Y+16, r1	; 0x10
    1fd4:	19 8a       	std	Y+17, r1	; 0x11
    1fd6:	1a 8a       	std	Y+18, r1	; 0x12
    1fd8:	1b 8a       	std	Y+19, r1	; 0x13
    1fda:	1c 8a       	std	Y+20, r1	; 0x14
    1fdc:	1d 8a       	std	Y+21, r1	; 0x15
    1fde:	1e 8a       	std	Y+22, r1	; 0x16
    1fe0:	1f 8a       	std	Y+23, r1	; 0x17
    1fe2:	18 8e       	std	Y+24, r1	; 0x18
    1fe4:	41 2c       	mov	r4, r1
    1fe6:	51 2c       	mov	r5, r1
    1fe8:	32 01       	movw	r6, r4
    1fea:	81 2c       	mov	r8, r1
    1fec:	91 2c       	mov	r9, r1
    1fee:	54 01       	movw	r10, r8
    1ff0:	c1 2c       	mov	r12, r1
    1ff2:	d1 2c       	mov	r13, r1
    1ff4:	76 01       	movw	r14, r12
    1ff6:	00 e0       	ldi	r16, 0x00	; 0
    1ff8:	10 e0       	ldi	r17, 0x00	; 0
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
    readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
    1ffa:	9e 01       	movw	r18, r28
    1ffc:	2f 5f       	subi	r18, 0xFF	; 255
    1ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    2000:	4c e0       	ldi	r20, 0x0C	; 12
    2002:	64 e7       	ldi	r22, 0x74	; 116
    2004:	88 e6       	ldi	r24, 0x68	; 104
    2006:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_Z9readByteshhhPh>
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	98 2f       	mov	r25, r24
    2010:	88 27       	eor	r24, r24
    2012:	2a 81       	ldd	r18, Y+2	; 0x02
    2014:	82 2b       	or	r24, r18
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;    
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
    
    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
    2016:	09 2e       	mov	r0, r25
    2018:	00 0c       	add	r0, r0
    201a:	aa 0b       	sbc	r26, r26
    201c:	bb 0b       	sbc	r27, r27
    201e:	48 0e       	add	r4, r24
    2020:	59 1e       	adc	r5, r25
    2022:	6a 1e       	adc	r6, r26
    2024:	7b 1e       	adc	r7, r27
  
  for (ii = 0; ii < packet_count; ii++) {
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
    readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	98 2f       	mov	r25, r24
    202c:	88 27       	eor	r24, r24
    202e:	2c 81       	ldd	r18, Y+4	; 0x04
    2030:	82 2b       	or	r24, r18
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
    
    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
    accel_bias[1] += (int32_t) accel_temp[1];
    2032:	09 2e       	mov	r0, r25
    2034:	00 0c       	add	r0, r0
    2036:	aa 0b       	sbc	r26, r26
    2038:	bb 0b       	sbc	r27, r27
    203a:	88 0e       	add	r8, r24
    203c:	99 1e       	adc	r9, r25
    203e:	aa 1e       	adc	r10, r26
    2040:	bb 1e       	adc	r11, r27
  for (ii = 0; ii < packet_count; ii++) {
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
    readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;    
    2042:	8d 81       	ldd	r24, Y+5	; 0x05
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	98 2f       	mov	r25, r24
    2048:	88 27       	eor	r24, r24
    204a:	2e 81       	ldd	r18, Y+6	; 0x06
    204c:	82 2b       	or	r24, r18
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
    
    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
    accel_bias[1] += (int32_t) accel_temp[1];
    accel_bias[2] += (int32_t) accel_temp[2];
    204e:	09 2e       	mov	r0, r25
    2050:	00 0c       	add	r0, r0
    2052:	aa 0b       	sbc	r26, r26
    2054:	bb 0b       	sbc	r27, r27
    2056:	c8 0e       	add	r12, r24
    2058:	d9 1e       	adc	r13, r25
    205a:	ea 1e       	adc	r14, r26
    205c:	fb 1e       	adc	r15, r27
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
    readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;    
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
    205e:	8f 81       	ldd	r24, Y+7	; 0x07
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	98 2f       	mov	r25, r24
    2064:	88 27       	eor	r24, r24
    2066:	28 85       	ldd	r18, Y+8	; 0x08
    2068:	82 2b       	or	r24, r18
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
    
    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
    accel_bias[1] += (int32_t) accel_temp[1];
    accel_bias[2] += (int32_t) accel_temp[2];
    gyro_bias[0]  += (int32_t) gyro_temp[0];
    206a:	09 2e       	mov	r0, r25
    206c:	00 0c       	add	r0, r0
    206e:	aa 0b       	sbc	r26, r26
    2070:	bb 0b       	sbc	r27, r27
    2072:	2d 85       	ldd	r18, Y+13	; 0x0d
    2074:	3e 85       	ldd	r19, Y+14	; 0x0e
    2076:	4f 85       	ldd	r20, Y+15	; 0x0f
    2078:	58 89       	ldd	r21, Y+16	; 0x10
    207a:	28 0f       	add	r18, r24
    207c:	39 1f       	adc	r19, r25
    207e:	4a 1f       	adc	r20, r26
    2080:	5b 1f       	adc	r21, r27
    2082:	2d 87       	std	Y+13, r18	; 0x0d
    2084:	3e 87       	std	Y+14, r19	; 0x0e
    2086:	4f 87       	std	Y+15, r20	; 0x0f
    2088:	58 8b       	std	Y+16, r21	; 0x10
    readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;    
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
    208a:	89 85       	ldd	r24, Y+9	; 0x09
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	98 2f       	mov	r25, r24
    2090:	88 27       	eor	r24, r24
    2092:	2a 85       	ldd	r18, Y+10	; 0x0a
    2094:	82 2b       	or	r24, r18
    
    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
    accel_bias[1] += (int32_t) accel_temp[1];
    accel_bias[2] += (int32_t) accel_temp[2];
    gyro_bias[0]  += (int32_t) gyro_temp[0];
    gyro_bias[1]  += (int32_t) gyro_temp[1];
    2096:	09 2e       	mov	r0, r25
    2098:	00 0c       	add	r0, r0
    209a:	aa 0b       	sbc	r26, r26
    209c:	bb 0b       	sbc	r27, r27
    209e:	29 89       	ldd	r18, Y+17	; 0x11
    20a0:	3a 89       	ldd	r19, Y+18	; 0x12
    20a2:	4b 89       	ldd	r20, Y+19	; 0x13
    20a4:	5c 89       	ldd	r21, Y+20	; 0x14
    20a6:	28 0f       	add	r18, r24
    20a8:	39 1f       	adc	r19, r25
    20aa:	4a 1f       	adc	r20, r26
    20ac:	5b 1f       	adc	r21, r27
    20ae:	29 8b       	std	Y+17, r18	; 0x11
    20b0:	3a 8b       	std	Y+18, r19	; 0x12
    20b2:	4b 8b       	std	Y+19, r20	; 0x13
    20b4:	5c 8b       	std	Y+20, r21	; 0x14
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;    
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
    20b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	98 2f       	mov	r25, r24
    20bc:	88 27       	eor	r24, r24
    20be:	2c 85       	ldd	r18, Y+12	; 0x0c
    20c0:	82 2b       	or	r24, r18
    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
    accel_bias[1] += (int32_t) accel_temp[1];
    accel_bias[2] += (int32_t) accel_temp[2];
    gyro_bias[0]  += (int32_t) gyro_temp[0];
    gyro_bias[1]  += (int32_t) gyro_temp[1];
    gyro_bias[2]  += (int32_t) gyro_temp[2];
    20c2:	09 2e       	mov	r0, r25
    20c4:	00 0c       	add	r0, r0
    20c6:	aa 0b       	sbc	r26, r26
    20c8:	bb 0b       	sbc	r27, r27
    20ca:	2d 89       	ldd	r18, Y+21	; 0x15
    20cc:	3e 89       	ldd	r19, Y+22	; 0x16
    20ce:	4f 89       	ldd	r20, Y+23	; 0x17
    20d0:	58 8d       	ldd	r21, Y+24	; 0x18
    20d2:	28 0f       	add	r18, r24
    20d4:	39 1f       	adc	r19, r25
    20d6:	4a 1f       	adc	r20, r26
    20d8:	5b 1f       	adc	r21, r27
    20da:	2d 8b       	std	Y+21, r18	; 0x15
    20dc:	3e 8b       	std	Y+22, r19	; 0x16
    20de:	4f 8b       	std	Y+23, r20	; 0x17
    20e0:	58 8f       	std	Y+24, r21	; 0x18
  writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
  readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
  
  for (ii = 0; ii < packet_count; ii++) {
    20e2:	0f 5f       	subi	r16, 0xFF	; 255
    20e4:	1f 4f       	sbci	r17, 0xFF	; 255
    20e6:	02 15       	cp	r16, r2
    20e8:	13 05       	cpc	r17, r3
    20ea:	09 f0       	breq	.+2      	; 0x20ee <_Z16calibrateMPU9250PfS_+0x268>
    20ec:	86 cf       	rjmp	.-244    	; 0x1ffa <_Z16calibrateMPU9250PfS_+0x174>
    20ee:	15 c0       	rjmp	.+42     	; 0x211a <_Z16calibrateMPU9250PfS_+0x294>
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(float * dest1, float * dest2)
{  
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
    20f0:	1d 86       	std	Y+13, r1	; 0x0d
    20f2:	1e 86       	std	Y+14, r1	; 0x0e
    20f4:	1f 86       	std	Y+15, r1	; 0x0f
    20f6:	18 8a       	std	Y+16, r1	; 0x10
    20f8:	19 8a       	std	Y+17, r1	; 0x11
    20fa:	1a 8a       	std	Y+18, r1	; 0x12
    20fc:	1b 8a       	std	Y+19, r1	; 0x13
    20fe:	1c 8a       	std	Y+20, r1	; 0x14
    2100:	1d 8a       	std	Y+21, r1	; 0x15
    2102:	1e 8a       	std	Y+22, r1	; 0x16
    2104:	1f 8a       	std	Y+23, r1	; 0x17
    2106:	18 8e       	std	Y+24, r1	; 0x18
    2108:	41 2c       	mov	r4, r1
    210a:	51 2c       	mov	r5, r1
    210c:	32 01       	movw	r6, r4
    210e:	81 2c       	mov	r8, r1
    2110:	91 2c       	mov	r9, r1
    2112:	54 01       	movw	r10, r8
    2114:	c1 2c       	mov	r12, r1
    2116:	d1 2c       	mov	r13, r1
    2118:	76 01       	movw	r14, r12
    gyro_bias[0]  += (int32_t) gyro_temp[0];
    gyro_bias[1]  += (int32_t) gyro_temp[1];
    gyro_bias[2]  += (int32_t) gyro_temp[2];
            
}
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
    211a:	c1 01       	movw	r24, r2
    211c:	a0 e0       	ldi	r26, 0x00	; 0
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	89 8f       	std	Y+25, r24	; 0x19
    2122:	9a 8f       	std	Y+26, r25	; 0x1a
    2124:	ab 8f       	std	Y+27, r26	; 0x1b
    2126:	bc 8f       	std	Y+28, r27	; 0x1c
    2128:	c3 01       	movw	r24, r6
    212a:	b2 01       	movw	r22, r4
    212c:	29 8d       	ldd	r18, Y+25	; 0x19
    212e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2130:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2132:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2134:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <__divmodsi4>
    2138:	29 a3       	std	Y+33, r18	; 0x21
    213a:	3a a3       	std	Y+34, r19	; 0x22
    213c:	4b a3       	std	Y+35, r20	; 0x23
    213e:	5c a3       	std	Y+36, r21	; 0x24
    accel_bias[1] /= (int32_t) packet_count;
    2140:	c5 01       	movw	r24, r10
    2142:	b4 01       	movw	r22, r8
    2144:	29 8d       	ldd	r18, Y+25	; 0x19
    2146:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2148:	4b 8d       	ldd	r20, Y+27	; 0x1b
    214a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    214c:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <__divmodsi4>
    2150:	2d a3       	std	Y+37, r18	; 0x25
    2152:	3e a3       	std	Y+38, r19	; 0x26
    2154:	4f a3       	std	Y+39, r20	; 0x27
    2156:	58 a7       	std	Y+40, r21	; 0x28
    accel_bias[2] /= (int32_t) packet_count;
    2158:	c7 01       	movw	r24, r14
    215a:	b6 01       	movw	r22, r12
    215c:	29 8d       	ldd	r18, Y+25	; 0x19
    215e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2160:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2162:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2164:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <__divmodsi4>
    2168:	69 01       	movw	r12, r18
    216a:	7a 01       	movw	r14, r20
    gyro_bias[0]  /= (int32_t) packet_count;
    216c:	6d 85       	ldd	r22, Y+13	; 0x0d
    216e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2170:	8f 85       	ldd	r24, Y+15	; 0x0f
    2172:	98 89       	ldd	r25, Y+16	; 0x10
    2174:	29 8d       	ldd	r18, Y+25	; 0x19
    2176:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2178:	4b 8d       	ldd	r20, Y+27	; 0x1b
    217a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    217c:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <__divmodsi4>
    2180:	2d 87       	std	Y+13, r18	; 0x0d
    2182:	3e 87       	std	Y+14, r19	; 0x0e
    2184:	4f 87       	std	Y+15, r20	; 0x0f
    2186:	58 8b       	std	Y+16, r21	; 0x10
    gyro_bias[1]  /= (int32_t) packet_count;
    2188:	69 89       	ldd	r22, Y+17	; 0x11
    218a:	7a 89       	ldd	r23, Y+18	; 0x12
    218c:	8b 89       	ldd	r24, Y+19	; 0x13
    218e:	9c 89       	ldd	r25, Y+20	; 0x14
    2190:	29 8d       	ldd	r18, Y+25	; 0x19
    2192:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2194:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2196:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2198:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <__divmodsi4>
    219c:	49 01       	movw	r8, r18
    219e:	5a 01       	movw	r10, r20
    gyro_bias[2]  /= (int32_t) packet_count;
    21a0:	6d 89       	ldd	r22, Y+21	; 0x15
    21a2:	7e 89       	ldd	r23, Y+22	; 0x16
    21a4:	8f 89       	ldd	r24, Y+23	; 0x17
    21a6:	98 8d       	ldd	r25, Y+24	; 0x18
    21a8:	29 8d       	ldd	r18, Y+25	; 0x19
    21aa:	3a 8d       	ldd	r19, Y+26	; 0x1a
    21ac:	4b 8d       	ldd	r20, Y+27	; 0x1b
    21ae:	5c 8d       	ldd	r21, Y+28	; 0x1c
    21b0:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <__divmodsi4>
    21b4:	29 01       	movw	r4, r18
    21b6:	3a 01       	movw	r6, r20
    
  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
    21b8:	1c 14       	cp	r1, r12
    21ba:	1d 04       	cpc	r1, r13
    21bc:	1e 04       	cpc	r1, r14
    21be:	1f 04       	cpc	r1, r15
    21c0:	2c f4       	brge	.+10     	; 0x21cc <_Z16calibrateMPU9250PfS_+0x346>
    21c2:	90 e4       	ldi	r25, 0x40	; 64
    21c4:	d9 1a       	sub	r13, r25
    21c6:	e1 08       	sbc	r14, r1
    21c8:	f1 08       	sbc	r15, r1
    21ca:	04 c0       	rjmp	.+8      	; 0x21d4 <_Z16calibrateMPU9250PfS_+0x34e>
  else {accel_bias[2] += (int32_t) accelsensitivity;}
    21cc:	a0 e4       	ldi	r26, 0x40	; 64
    21ce:	da 0e       	add	r13, r26
    21d0:	e1 1c       	adc	r14, r1
    21d2:	f1 1c       	adc	r15, r1
   
// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
    21d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d8:	af 85       	ldd	r26, Y+15	; 0x0f
    21da:	b8 89       	ldd	r27, Y+16	; 0x10
    21dc:	b0 95       	com	r27
    21de:	a0 95       	com	r26
    21e0:	90 95       	com	r25
    21e2:	81 95       	neg	r24
    21e4:	9f 4f       	sbci	r25, 0xFF	; 255
    21e6:	af 4f       	sbci	r26, 0xFF	; 255
    21e8:	bf 4f       	sbci	r27, 0xFF	; 255
    21ea:	1a f4       	brpl	.+6      	; 0x21f2 <_Z16calibrateMPU9250PfS_+0x36c>
    21ec:	03 96       	adiw	r24, 0x03	; 3
    21ee:	a1 1d       	adc	r26, r1
    21f0:	b1 1d       	adc	r27, r1
    21f2:	b5 95       	asr	r27
    21f4:	a7 95       	ror	r26
    21f6:	97 95       	ror	r25
    21f8:	87 95       	ror	r24
    21fa:	b5 95       	asr	r27
    21fc:	a7 95       	ror	r26
    21fe:	97 95       	ror	r25
    2200:	87 95       	ror	r24
    2202:	49 2f       	mov	r20, r25
    2204:	5a 2f       	mov	r21, r26
    2206:	6b 2f       	mov	r22, r27
    2208:	77 27       	eor	r23, r23
    220a:	67 fd       	sbrc	r22, 7
    220c:	7a 95       	dec	r23
    220e:	49 83       	std	Y+1, r20	; 0x01
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
    2210:	8a 83       	std	Y+2, r24	; 0x02
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
    2212:	88 27       	eor	r24, r24
    2214:	99 27       	eor	r25, r25
    2216:	dc 01       	movw	r26, r24
    2218:	88 19       	sub	r24, r8
    221a:	99 09       	sbc	r25, r9
    221c:	aa 09       	sbc	r26, r10
    221e:	bb 09       	sbc	r27, r11
    2220:	1a f4       	brpl	.+6      	; 0x2228 <_Z16calibrateMPU9250PfS_+0x3a2>
    2222:	03 96       	adiw	r24, 0x03	; 3
    2224:	a1 1d       	adc	r26, r1
    2226:	b1 1d       	adc	r27, r1
    2228:	b5 95       	asr	r27
    222a:	a7 95       	ror	r26
    222c:	97 95       	ror	r25
    222e:	87 95       	ror	r24
    2230:	b5 95       	asr	r27
    2232:	a7 95       	ror	r26
    2234:	97 95       	ror	r25
    2236:	87 95       	ror	r24
    2238:	9b 83       	std	Y+3, r25	; 0x03
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
    223a:	8c 83       	std	Y+4, r24	; 0x04
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
    223c:	88 27       	eor	r24, r24
    223e:	99 27       	eor	r25, r25
    2240:	dc 01       	movw	r26, r24
    2242:	84 19       	sub	r24, r4
    2244:	95 09       	sbc	r25, r5
    2246:	a6 09       	sbc	r26, r6
    2248:	b7 09       	sbc	r27, r7
    224a:	1a f4       	brpl	.+6      	; 0x2252 <_Z16calibrateMPU9250PfS_+0x3cc>
    224c:	03 96       	adiw	r24, 0x03	; 3
    224e:	a1 1d       	adc	r26, r1
    2250:	b1 1d       	adc	r27, r1
    2252:	b5 95       	asr	r27
    2254:	a7 95       	ror	r26
    2256:	97 95       	ror	r25
    2258:	87 95       	ror	r24
    225a:	b5 95       	asr	r27
    225c:	a7 95       	ror	r26
    225e:	97 95       	ror	r25
    2260:	87 95       	ror	r24
    2262:	9d 83       	std	Y+5, r25	; 0x05
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
    2264:	8e 83       	std	Y+6, r24	; 0x06
  
// Push gyro biases to hardware registers
  writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
    2266:	63 e1       	ldi	r22, 0x13	; 19
    2268:	88 e6       	ldi	r24, 0x68	; 104
    226a:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
    226e:	4a 81       	ldd	r20, Y+2	; 0x02
    2270:	64 e1       	ldi	r22, 0x14	; 20
    2272:	88 e6       	ldi	r24, 0x68	; 104
    2274:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
    2278:	4b 81       	ldd	r20, Y+3	; 0x03
    227a:	65 e1       	ldi	r22, 0x15	; 21
    227c:	88 e6       	ldi	r24, 0x68	; 104
    227e:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
    2282:	4c 81       	ldd	r20, Y+4	; 0x04
    2284:	66 e1       	ldi	r22, 0x16	; 22
    2286:	88 e6       	ldi	r24, 0x68	; 104
    2288:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
    228c:	4d 81       	ldd	r20, Y+5	; 0x05
    228e:	67 e1       	ldi	r22, 0x17	; 23
    2290:	88 e6       	ldi	r24, 0x68	; 104
    2292:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
    2296:	4e 81       	ldd	r20, Y+6	; 0x06
    2298:	68 e1       	ldi	r22, 0x18	; 24
    229a:	88 e6       	ldi	r24, 0x68	; 104
    229c:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  
// Output scaled gyro biases for display in the main program
  dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;  
    22a0:	6d 85       	ldd	r22, Y+13	; 0x0d
    22a2:	7e 85       	ldd	r23, Y+14	; 0x0e
    22a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    22a6:	98 89       	ldd	r25, Y+16	; 0x10
    22a8:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	43 e0       	ldi	r20, 0x03	; 3
    22b2:	53 e4       	ldi	r21, 0x43	; 67
    22b4:	0e 94 8f 20 	call	0x411e	; 0x411e <__divsf3>
    22b8:	ed 8d       	ldd	r30, Y+29	; 0x1d
    22ba:	fe 8d       	ldd	r31, Y+30	; 0x1e
    22bc:	60 83       	st	Z, r22
    22be:	71 83       	std	Z+1, r23	; 0x01
    22c0:	82 83       	std	Z+2, r24	; 0x02
    22c2:	93 83       	std	Z+3, r25	; 0x03
  dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
    22c4:	c5 01       	movw	r24, r10
    22c6:	b4 01       	movw	r22, r8
    22c8:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	43 e0       	ldi	r20, 0x03	; 3
    22d2:	53 e4       	ldi	r21, 0x43	; 67
    22d4:	0e 94 8f 20 	call	0x411e	; 0x411e <__divsf3>
    22d8:	ad 8d       	ldd	r26, Y+29	; 0x1d
    22da:	be 8d       	ldd	r27, Y+30	; 0x1e
    22dc:	14 96       	adiw	r26, 0x04	; 4
    22de:	6d 93       	st	X+, r22
    22e0:	7d 93       	st	X+, r23
    22e2:	8d 93       	st	X+, r24
    22e4:	9c 93       	st	X, r25
    22e6:	17 97       	sbiw	r26, 0x07	; 7
  dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
    22e8:	c3 01       	movw	r24, r6
    22ea:	b2 01       	movw	r22, r4
    22ec:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	43 e0       	ldi	r20, 0x03	; 3
    22f6:	53 e4       	ldi	r21, 0x43	; 67
    22f8:	0e 94 8f 20 	call	0x411e	; 0x411e <__divsf3>
    22fc:	ed 8d       	ldd	r30, Y+29	; 0x1d
    22fe:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2300:	60 87       	std	Z+8, r22	; 0x08
    2302:	71 87       	std	Z+9, r23	; 0x09
    2304:	82 87       	std	Z+10, r24	; 0x0a
    2306:	93 87       	std	Z+11, r25	; 0x0b
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
  readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
    2308:	9e 01       	movw	r18, r28
    230a:	2f 5f       	subi	r18, 0xFF	; 255
    230c:	3f 4f       	sbci	r19, 0xFF	; 255
    230e:	42 e0       	ldi	r20, 0x02	; 2
    2310:	67 e7       	ldi	r22, 0x77	; 119
    2312:	88 e6       	ldi	r24, 0x68	; 104
    2314:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_Z9readByteshhhPh>
  accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
  readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
    2318:	9e 01       	movw	r18, r28
    231a:	2f 5f       	subi	r18, 0xFF	; 255
    231c:	3f 4f       	sbci	r19, 0xFF	; 255
    231e:	42 e0       	ldi	r20, 0x02	; 2
    2320:	6a e7       	ldi	r22, 0x7A	; 122
    2322:	88 e6       	ldi	r24, 0x68	; 104
    2324:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_Z9readByteshhhPh>
  accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
  readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
    2328:	9e 01       	movw	r18, r28
    232a:	2f 5f       	subi	r18, 0xFF	; 255
    232c:	3f 4f       	sbci	r19, 0xFF	; 255
    232e:	42 e0       	ldi	r20, 0x02	; 2
    2330:	6d e7       	ldi	r22, 0x7D	; 125
    2332:	88 e6       	ldi	r24, 0x68	; 104
    2334:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_Z9readByteshhhPh>
  writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
  writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
  writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
*/
// Output scaled accelerometer biases for display in the main program
   dest2[0] = (float)accel_bias[0]/(float)accelsensitivity; 
    2338:	69 a1       	ldd	r22, Y+33	; 0x21
    233a:	7a a1       	ldd	r23, Y+34	; 0x22
    233c:	8b a1       	ldd	r24, Y+35	; 0x23
    233e:	9c a1       	ldd	r25, Y+36	; 0x24
    2340:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	40 e8       	ldi	r20, 0x80	; 128
    234a:	58 e3       	ldi	r21, 0x38	; 56
    234c:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    2350:	af 8d       	ldd	r26, Y+31	; 0x1f
    2352:	b8 a1       	ldd	r27, Y+32	; 0x20
    2354:	6d 93       	st	X+, r22
    2356:	7d 93       	st	X+, r23
    2358:	8d 93       	st	X+, r24
    235a:	9c 93       	st	X, r25
    235c:	13 97       	sbiw	r26, 0x03	; 3
   dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
    235e:	6d a1       	ldd	r22, Y+37	; 0x25
    2360:	7e a1       	ldd	r23, Y+38	; 0x26
    2362:	8f a1       	ldd	r24, Y+39	; 0x27
    2364:	98 a5       	ldd	r25, Y+40	; 0x28
    2366:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	40 e8       	ldi	r20, 0x80	; 128
    2370:	58 e3       	ldi	r21, 0x38	; 56
    2372:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    2376:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2378:	f8 a1       	ldd	r31, Y+32	; 0x20
    237a:	64 83       	std	Z+4, r22	; 0x04
    237c:	75 83       	std	Z+5, r23	; 0x05
    237e:	86 83       	std	Z+6, r24	; 0x06
    2380:	97 83       	std	Z+7, r25	; 0x07
   dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
    2382:	c7 01       	movw	r24, r14
    2384:	b6 01       	movw	r22, r12
    2386:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e8       	ldi	r20, 0x80	; 128
    2390:	58 e3       	ldi	r21, 0x38	; 56
    2392:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    2396:	af 8d       	ldd	r26, Y+31	; 0x1f
    2398:	b8 a1       	ldd	r27, Y+32	; 0x20
    239a:	18 96       	adiw	r26, 0x08	; 8
    239c:	6d 93       	st	X+, r22
    239e:	7d 93       	st	X+, r23
    23a0:	8d 93       	st	X+, r24
    23a2:	9c 93       	st	X, r25
    23a4:	1b 97       	sbiw	r26, 0x0b	; 11
}
    23a6:	a8 96       	adiw	r28, 0x28	; 40
    23a8:	0f b6       	in	r0, 0x3f	; 63
    23aa:	f8 94       	cli
    23ac:	de bf       	out	0x3e, r29	; 62
    23ae:	0f be       	out	0x3f, r0	; 63
    23b0:	cd bf       	out	0x3d, r28	; 61
    23b2:	df 91       	pop	r29
    23b4:	cf 91       	pop	r28
    23b6:	1f 91       	pop	r17
    23b8:	0f 91       	pop	r16
    23ba:	ff 90       	pop	r15
    23bc:	ef 90       	pop	r14
    23be:	df 90       	pop	r13
    23c0:	cf 90       	pop	r12
    23c2:	bf 90       	pop	r11
    23c4:	af 90       	pop	r10
    23c6:	9f 90       	pop	r9
    23c8:	8f 90       	pop	r8
    23ca:	7f 90       	pop	r7
    23cc:	6f 90       	pop	r6
    23ce:	5f 90       	pop	r5
    23d0:	4f 90       	pop	r4
    23d2:	3f 90       	pop	r3
    23d4:	2f 90       	pop	r2
    23d6:	08 95       	ret

000023d8 <_Z15MPU9250SelfTestPf>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
{
    23d8:	2f 92       	push	r2
    23da:	3f 92       	push	r3
    23dc:	4f 92       	push	r4
    23de:	5f 92       	push	r5
    23e0:	6f 92       	push	r6
    23e2:	7f 92       	push	r7
    23e4:	8f 92       	push	r8
    23e6:	9f 92       	push	r9
    23e8:	af 92       	push	r10
    23ea:	bf 92       	push	r11
    23ec:	cf 92       	push	r12
    23ee:	df 92       	push	r13
    23f0:	ef 92       	push	r14
    23f2:	ff 92       	push	r15
    23f4:	0f 93       	push	r16
    23f6:	1f 93       	push	r17
    23f8:	cf 93       	push	r28
    23fa:	df 93       	push	r29
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
    2400:	ce 54       	subi	r28, 0x4E	; 78
    2402:	d1 09       	sbc	r29, r1
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	f8 94       	cli
    2408:	de bf       	out	0x3e, r29	; 62
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	cd bf       	out	0x3d, r28	; 61
    240e:	88 2e       	mov	r8, r24
    2410:	99 2e       	mov	r9, r25
   uint8_t rawData[6] = {0, 0, 0, 0, 0, 0};
    2412:	fe 01       	movw	r30, r28
    2414:	e7 5b       	subi	r30, 0xB7	; 183
    2416:	ff 4f       	sbci	r31, 0xFF	; 255
    2418:	86 e0       	ldi	r24, 0x06	; 6
    241a:	df 01       	movw	r26, r30
    241c:	1d 92       	st	X+, r1
    241e:	8a 95       	dec	r24
    2420:	e9 f7       	brne	.-6      	; 0x241c <_Z15MPU9250SelfTestPf+0x44>
   uint8_t selfTest[6];
   int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
    2422:	8c e0       	ldi	r24, 0x0C	; 12
    2424:	3c 97       	sbiw	r30, 0x0c	; 12
    2426:	df 01       	movw	r26, r30
    2428:	98 2f       	mov	r25, r24
    242a:	1d 92       	st	X+, r1
    242c:	9a 95       	dec	r25
    242e:	e9 f7       	brne	.-6      	; 0x242a <_Z15MPU9250SelfTestPf+0x52>
    2430:	3c 97       	sbiw	r30, 0x0c	; 12
    2432:	df 01       	movw	r26, r30
    2434:	98 2f       	mov	r25, r24
    2436:	1d 92       	st	X+, r1
    2438:	9a 95       	dec	r25
    243a:	e9 f7       	brne	.-6      	; 0x2436 <_Z15MPU9250SelfTestPf+0x5e>
    243c:	3c 97       	sbiw	r30, 0x0c	; 12
    243e:	df 01       	movw	r26, r30
    2440:	98 2f       	mov	r25, r24
    2442:	1d 92       	st	X+, r1
    2444:	9a 95       	dec	r25
    2446:	e9 f7       	brne	.-6      	; 0x2442 <_Z15MPU9250SelfTestPf+0x6a>
    2448:	3c 97       	sbiw	r30, 0x0c	; 12
    244a:	df 01       	movw	r26, r30
    244c:	1d 92       	st	X+, r1
    244e:	8a 95       	dec	r24
    2450:	e9 f7       	brne	.-6      	; 0x244c <_Z15MPU9250SelfTestPf+0x74>
   float factoryTrim[6];
   uint8_t FS = 0;
   
  writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);    // Set gyro sample rate to 1 kHz
    2452:	40 e0       	ldi	r20, 0x00	; 0
    2454:	69 e1       	ldi	r22, 0x19	; 25
    2456:	88 e6       	ldi	r24, 0x68	; 104
    2458:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  writeByte(MPU9250_ADDRESS, CONFIG, 0x02);        // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
    245c:	42 e0       	ldi	r20, 0x02	; 2
    245e:	6a e1       	ldi	r22, 0x1A	; 26
    2460:	88 e6       	ldi	r24, 0x68	; 104
    2462:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  writeByte(MPU9250_ADDRESS, GYRO_CONFIG, FS<<3);  // Set full scale range for the gyro to 250 dps
    2466:	40 e0       	ldi	r20, 0x00	; 0
    2468:	6b e1       	ldi	r22, 0x1B	; 27
    246a:	88 e6       	ldi	r24, 0x68	; 104
    246c:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
    2470:	42 e0       	ldi	r20, 0x02	; 2
    2472:	6d e1       	ldi	r22, 0x1D	; 29
    2474:	88 e6       	ldi	r24, 0x68	; 104
    2476:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, FS<<3); // Set full scale range for the accelerometer to 2 g
    247a:	40 e0       	ldi	r20, 0x00	; 0
    247c:	6c e1       	ldi	r22, 0x1C	; 28
    247e:	88 e6       	ldi	r24, 0x68	; 104
    2480:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
    2484:	08 ec       	ldi	r16, 0xC8	; 200
    2486:	10 e0       	ldi	r17, 0x00	; 0

  for( int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer
  
  readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);        // Read the six raw data registers into data array
    2488:	9e 01       	movw	r18, r28
    248a:	27 5b       	subi	r18, 0xB7	; 183
    248c:	3f 4f       	sbci	r19, 0xFF	; 255
    248e:	46 e0       	ldi	r20, 0x06	; 6
    2490:	6b e3       	ldi	r22, 0x3B	; 59
    2492:	88 e6       	ldi	r24, 0x68	; 104
    2494:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_Z9readByteshhhPh>
  aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    2498:	2a 96       	adiw	r28, 0x0a	; 10
    249a:	8f ad       	ldd	r24, Y+63	; 0x3f
    249c:	2a 97       	sbiw	r28, 0x0a	; 10
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	98 2f       	mov	r25, r24
    24a2:	88 27       	eor	r24, r24
    24a4:	2b 96       	adiw	r28, 0x0b	; 11
    24a6:	2f ad       	ldd	r18, Y+63	; 0x3f
    24a8:	2b 97       	sbiw	r28, 0x0b	; 11
    24aa:	82 2b       	or	r24, r18
    24ac:	09 2e       	mov	r0, r25
    24ae:	00 0c       	add	r0, r0
    24b0:	aa 0b       	sbc	r26, r26
    24b2:	bb 0b       	sbc	r27, r27
    24b4:	49 a9       	ldd	r20, Y+49	; 0x31
    24b6:	5a a9       	ldd	r21, Y+50	; 0x32
    24b8:	6b a9       	ldd	r22, Y+51	; 0x33
    24ba:	7c a9       	ldd	r23, Y+52	; 0x34
    24bc:	84 0f       	add	r24, r20
    24be:	95 1f       	adc	r25, r21
    24c0:	a6 1f       	adc	r26, r22
    24c2:	b7 1f       	adc	r27, r23
    24c4:	89 ab       	std	Y+49, r24	; 0x31
    24c6:	9a ab       	std	Y+50, r25	; 0x32
    24c8:	ab ab       	std	Y+51, r26	; 0x33
    24ca:	bc ab       	std	Y+52, r27	; 0x34
  aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    24cc:	2c 96       	adiw	r28, 0x0c	; 12
    24ce:	8f ad       	ldd	r24, Y+63	; 0x3f
    24d0:	2c 97       	sbiw	r28, 0x0c	; 12
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	98 2f       	mov	r25, r24
    24d6:	88 27       	eor	r24, r24
    24d8:	2d 96       	adiw	r28, 0x0d	; 13
    24da:	2f ad       	ldd	r18, Y+63	; 0x3f
    24dc:	2d 97       	sbiw	r28, 0x0d	; 13
    24de:	82 2b       	or	r24, r18
    24e0:	09 2e       	mov	r0, r25
    24e2:	00 0c       	add	r0, r0
    24e4:	aa 0b       	sbc	r26, r26
    24e6:	bb 0b       	sbc	r27, r27
    24e8:	4d a9       	ldd	r20, Y+53	; 0x35
    24ea:	5e a9       	ldd	r21, Y+54	; 0x36
    24ec:	6f a9       	ldd	r22, Y+55	; 0x37
    24ee:	78 ad       	ldd	r23, Y+56	; 0x38
    24f0:	84 0f       	add	r24, r20
    24f2:	95 1f       	adc	r25, r21
    24f4:	a6 1f       	adc	r26, r22
    24f6:	b7 1f       	adc	r27, r23
    24f8:	8d ab       	std	Y+53, r24	; 0x35
    24fa:	9e ab       	std	Y+54, r25	; 0x36
    24fc:	af ab       	std	Y+55, r26	; 0x37
    24fe:	b8 af       	std	Y+56, r27	; 0x38
  aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
    2500:	2e 96       	adiw	r28, 0x0e	; 14
    2502:	8f ad       	ldd	r24, Y+63	; 0x3f
    2504:	2e 97       	sbiw	r28, 0x0e	; 14
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	98 2f       	mov	r25, r24
    250a:	88 27       	eor	r24, r24
    250c:	2f 96       	adiw	r28, 0x0f	; 15
    250e:	2f ad       	ldd	r18, Y+63	; 0x3f
    2510:	2f 97       	sbiw	r28, 0x0f	; 15
    2512:	82 2b       	or	r24, r18
    2514:	09 2e       	mov	r0, r25
    2516:	00 0c       	add	r0, r0
    2518:	aa 0b       	sbc	r26, r26
    251a:	bb 0b       	sbc	r27, r27
    251c:	49 ad       	ldd	r20, Y+57	; 0x39
    251e:	5a ad       	ldd	r21, Y+58	; 0x3a
    2520:	6b ad       	ldd	r22, Y+59	; 0x3b
    2522:	7c ad       	ldd	r23, Y+60	; 0x3c
    2524:	84 0f       	add	r24, r20
    2526:	95 1f       	adc	r25, r21
    2528:	a6 1f       	adc	r26, r22
    252a:	b7 1f       	adc	r27, r23
    252c:	89 af       	std	Y+57, r24	; 0x39
    252e:	9a af       	std	Y+58, r25	; 0x3a
    2530:	ab af       	std	Y+59, r26	; 0x3b
    2532:	bc af       	std	Y+60, r27	; 0x3c
  
    readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
    2534:	9e 01       	movw	r18, r28
    2536:	27 5b       	subi	r18, 0xB7	; 183
    2538:	3f 4f       	sbci	r19, 0xFF	; 255
    253a:	46 e0       	ldi	r20, 0x06	; 6
    253c:	63 e4       	ldi	r22, 0x43	; 67
    253e:	88 e6       	ldi	r24, 0x68	; 104
    2540:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_Z9readByteshhhPh>
  gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    2544:	2a 96       	adiw	r28, 0x0a	; 10
    2546:	8f ad       	ldd	r24, Y+63	; 0x3f
    2548:	2a 97       	sbiw	r28, 0x0a	; 10
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	98 2f       	mov	r25, r24
    254e:	88 27       	eor	r24, r24
    2550:	2b 96       	adiw	r28, 0x0b	; 11
    2552:	2f ad       	ldd	r18, Y+63	; 0x3f
    2554:	2b 97       	sbiw	r28, 0x0b	; 11
    2556:	82 2b       	or	r24, r18
    2558:	09 2e       	mov	r0, r25
    255a:	00 0c       	add	r0, r0
    255c:	aa 0b       	sbc	r26, r26
    255e:	bb 0b       	sbc	r27, r27
    2560:	21 96       	adiw	r28, 0x01	; 1
    2562:	4c ad       	ldd	r20, Y+60	; 0x3c
    2564:	5d ad       	ldd	r21, Y+61	; 0x3d
    2566:	6e ad       	ldd	r22, Y+62	; 0x3e
    2568:	7f ad       	ldd	r23, Y+63	; 0x3f
    256a:	21 97       	sbiw	r28, 0x01	; 1
    256c:	84 0f       	add	r24, r20
    256e:	95 1f       	adc	r25, r21
    2570:	a6 1f       	adc	r26, r22
    2572:	b7 1f       	adc	r27, r23
    2574:	21 96       	adiw	r28, 0x01	; 1
    2576:	8c af       	std	Y+60, r24	; 0x3c
    2578:	9d af       	std	Y+61, r25	; 0x3d
    257a:	ae af       	std	Y+62, r26	; 0x3e
    257c:	bf af       	std	Y+63, r27	; 0x3f
    257e:	21 97       	sbiw	r28, 0x01	; 1
  gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    2580:	2c 96       	adiw	r28, 0x0c	; 12
    2582:	8f ad       	ldd	r24, Y+63	; 0x3f
    2584:	2c 97       	sbiw	r28, 0x0c	; 12
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	98 2f       	mov	r25, r24
    258a:	88 27       	eor	r24, r24
    258c:	2d 96       	adiw	r28, 0x0d	; 13
    258e:	2f ad       	ldd	r18, Y+63	; 0x3f
    2590:	2d 97       	sbiw	r28, 0x0d	; 13
    2592:	82 2b       	or	r24, r18
    2594:	09 2e       	mov	r0, r25
    2596:	00 0c       	add	r0, r0
    2598:	aa 0b       	sbc	r26, r26
    259a:	bb 0b       	sbc	r27, r27
    259c:	25 96       	adiw	r28, 0x05	; 5
    259e:	4c ad       	ldd	r20, Y+60	; 0x3c
    25a0:	5d ad       	ldd	r21, Y+61	; 0x3d
    25a2:	6e ad       	ldd	r22, Y+62	; 0x3e
    25a4:	7f ad       	ldd	r23, Y+63	; 0x3f
    25a6:	25 97       	sbiw	r28, 0x05	; 5
    25a8:	84 0f       	add	r24, r20
    25aa:	95 1f       	adc	r25, r21
    25ac:	a6 1f       	adc	r26, r22
    25ae:	b7 1f       	adc	r27, r23
    25b0:	25 96       	adiw	r28, 0x05	; 5
    25b2:	8c af       	std	Y+60, r24	; 0x3c
    25b4:	9d af       	std	Y+61, r25	; 0x3d
    25b6:	ae af       	std	Y+62, r26	; 0x3e
    25b8:	bf af       	std	Y+63, r27	; 0x3f
    25ba:	25 97       	sbiw	r28, 0x05	; 5
  gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
    25bc:	2e 96       	adiw	r28, 0x0e	; 14
    25be:	8f ad       	ldd	r24, Y+63	; 0x3f
    25c0:	2e 97       	sbiw	r28, 0x0e	; 14
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	98 2f       	mov	r25, r24
    25c6:	88 27       	eor	r24, r24
    25c8:	2f 96       	adiw	r28, 0x0f	; 15
    25ca:	2f ad       	ldd	r18, Y+63	; 0x3f
    25cc:	2f 97       	sbiw	r28, 0x0f	; 15
    25ce:	82 2b       	or	r24, r18
    25d0:	09 2e       	mov	r0, r25
    25d2:	00 0c       	add	r0, r0
    25d4:	aa 0b       	sbc	r26, r26
    25d6:	bb 0b       	sbc	r27, r27
    25d8:	29 96       	adiw	r28, 0x09	; 9
    25da:	4c ad       	ldd	r20, Y+60	; 0x3c
    25dc:	5d ad       	ldd	r21, Y+61	; 0x3d
    25de:	6e ad       	ldd	r22, Y+62	; 0x3e
    25e0:	7f ad       	ldd	r23, Y+63	; 0x3f
    25e2:	29 97       	sbiw	r28, 0x09	; 9
    25e4:	84 0f       	add	r24, r20
    25e6:	95 1f       	adc	r25, r21
    25e8:	a6 1f       	adc	r26, r22
    25ea:	b7 1f       	adc	r27, r23
    25ec:	29 96       	adiw	r28, 0x09	; 9
    25ee:	8c af       	std	Y+60, r24	; 0x3c
    25f0:	9d af       	std	Y+61, r25	; 0x3d
    25f2:	ae af       	std	Y+62, r26	; 0x3e
    25f4:	bf af       	std	Y+63, r27	; 0x3f
    25f6:	29 97       	sbiw	r28, 0x09	; 9
    25f8:	01 50       	subi	r16, 0x01	; 1
    25fa:	11 09       	sbc	r17, r1
  writeByte(MPU9250_ADDRESS, CONFIG, 0x02);        // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
  writeByte(MPU9250_ADDRESS, GYRO_CONFIG, FS<<3);  // Set full scale range for the gyro to 250 dps
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, FS<<3); // Set full scale range for the accelerometer to 2 g

  for( int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer
    25fc:	09 f0       	breq	.+2      	; 0x2600 <_Z15MPU9250SelfTestPf+0x228>
    25fe:	44 cf       	rjmp	.-376    	; 0x2488 <_Z15MPU9250SelfTestPf+0xb0>
    2600:	3e 01       	movw	r6, r28
    2602:	b1 e3       	ldi	r27, 0x31	; 49
    2604:	6b 0e       	add	r6, r27
    2606:	71 1c       	adc	r7, r1
    2608:	6e 01       	movw	r12, r28
    260a:	ed e3       	ldi	r30, 0x3D	; 61
    260c:	ce 0e       	add	r12, r30
    260e:	d1 1c       	adc	r13, r1
    2610:	56 01       	movw	r10, r12
    2612:	76 01       	movw	r14, r12
    2614:	83 01       	movw	r16, r6
  gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
  gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  }
  
  for (int ii =0; ii < 3; ii++) {  // Get average of 200 values and store as average current readings
  aAvg[ii] /= 200;
    2616:	0f 2e       	mov	r0, r31
    2618:	f8 ec       	ldi	r31, 0xC8	; 200
    261a:	2f 2e       	mov	r2, r31
    261c:	31 2c       	mov	r3, r1
    261e:	41 2c       	mov	r4, r1
    2620:	51 2c       	mov	r5, r1
    2622:	f0 2d       	mov	r31, r0
    2624:	d8 01       	movw	r26, r16
    2626:	6d 91       	ld	r22, X+
    2628:	7d 91       	ld	r23, X+
    262a:	8d 91       	ld	r24, X+
    262c:	9c 91       	ld	r25, X
    262e:	a2 01       	movw	r20, r4
    2630:	91 01       	movw	r18, r2
    2632:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <__divmodsi4>
    2636:	f8 01       	movw	r30, r16
    2638:	21 93       	st	Z+, r18
    263a:	31 93       	st	Z+, r19
    263c:	41 93       	st	Z+, r20
    263e:	51 93       	st	Z+, r21
    2640:	8f 01       	movw	r16, r30
  gAvg[ii] /= 200;
    2642:	d7 01       	movw	r26, r14
    2644:	6d 91       	ld	r22, X+
    2646:	7d 91       	ld	r23, X+
    2648:	8d 91       	ld	r24, X+
    264a:	9c 91       	ld	r25, X
    264c:	a2 01       	movw	r20, r4
    264e:	91 01       	movw	r18, r2
    2650:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <__divmodsi4>
    2654:	f7 01       	movw	r30, r14
    2656:	21 93       	st	Z+, r18
    2658:	31 93       	st	Z+, r19
    265a:	41 93       	st	Z+, r20
    265c:	51 93       	st	Z+, r21
    265e:	7f 01       	movw	r14, r30
  gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
  gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
  gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  }
  
  for (int ii =0; ii < 3; ii++) {  // Get average of 200 values and store as average current readings
    2660:	0a 15       	cp	r16, r10
    2662:	1b 05       	cpc	r17, r11
    2664:	f9 f6       	brne	.-66     	; 0x2624 <_Z15MPU9250SelfTestPf+0x24c>
  aAvg[ii] /= 200;
  gAvg[ii] /= 200;
  }
  
// Configure the accelerometer for self-test
   writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
    2666:	40 ee       	ldi	r20, 0xE0	; 224
    2668:	6c e1       	ldi	r22, 0x1C	; 28
    266a:	88 e6       	ldi	r24, 0x68	; 104
    266c:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
   writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
    2670:	40 ee       	ldi	r20, 0xE0	; 224
    2672:	6b e1       	ldi	r22, 0x1B	; 27
    2674:	88 e6       	ldi	r24, 0x68	; 104
    2676:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
   delay(25);  // Delay a while to let the device stabilize
    267a:	69 e1       	ldi	r22, 0x19	; 25
    267c:	70 e0       	ldi	r23, 0x00	; 0
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	0e 94 36 2a 	call	0x546c	; 0x546c <delay>
    2686:	08 ec       	ldi	r16, 0xC8	; 200
    2688:	10 e0       	ldi	r17, 0x00	; 0

  for( int ii = 0; ii < 200; ii++) {  // get average self-test values of gyro and acclerometer
  
  readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
    268a:	9e 01       	movw	r18, r28
    268c:	27 5b       	subi	r18, 0xB7	; 183
    268e:	3f 4f       	sbci	r19, 0xFF	; 255
    2690:	46 e0       	ldi	r20, 0x06	; 6
    2692:	6b e3       	ldi	r22, 0x3B	; 59
    2694:	88 e6       	ldi	r24, 0x68	; 104
    2696:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_Z9readByteshhhPh>
  aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    269a:	2a 96       	adiw	r28, 0x0a	; 10
    269c:	8f ad       	ldd	r24, Y+63	; 0x3f
    269e:	2a 97       	sbiw	r28, 0x0a	; 10
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	98 2f       	mov	r25, r24
    26a4:	88 27       	eor	r24, r24
    26a6:	2b 96       	adiw	r28, 0x0b	; 11
    26a8:	2f ad       	ldd	r18, Y+63	; 0x3f
    26aa:	2b 97       	sbiw	r28, 0x0b	; 11
    26ac:	82 2b       	or	r24, r18
    26ae:	09 2e       	mov	r0, r25
    26b0:	00 0c       	add	r0, r0
    26b2:	aa 0b       	sbc	r26, r26
    26b4:	bb 0b       	sbc	r27, r27
    26b6:	4d a1       	ldd	r20, Y+37	; 0x25
    26b8:	5e a1       	ldd	r21, Y+38	; 0x26
    26ba:	6f a1       	ldd	r22, Y+39	; 0x27
    26bc:	78 a5       	ldd	r23, Y+40	; 0x28
    26be:	84 0f       	add	r24, r20
    26c0:	95 1f       	adc	r25, r21
    26c2:	a6 1f       	adc	r26, r22
    26c4:	b7 1f       	adc	r27, r23
    26c6:	8d a3       	std	Y+37, r24	; 0x25
    26c8:	9e a3       	std	Y+38, r25	; 0x26
    26ca:	af a3       	std	Y+39, r26	; 0x27
    26cc:	b8 a7       	std	Y+40, r27	; 0x28
  aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    26ce:	2c 96       	adiw	r28, 0x0c	; 12
    26d0:	8f ad       	ldd	r24, Y+63	; 0x3f
    26d2:	2c 97       	sbiw	r28, 0x0c	; 12
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	98 2f       	mov	r25, r24
    26d8:	88 27       	eor	r24, r24
    26da:	2d 96       	adiw	r28, 0x0d	; 13
    26dc:	2f ad       	ldd	r18, Y+63	; 0x3f
    26de:	2d 97       	sbiw	r28, 0x0d	; 13
    26e0:	82 2b       	or	r24, r18
    26e2:	09 2e       	mov	r0, r25
    26e4:	00 0c       	add	r0, r0
    26e6:	aa 0b       	sbc	r26, r26
    26e8:	bb 0b       	sbc	r27, r27
    26ea:	49 a5       	ldd	r20, Y+41	; 0x29
    26ec:	5a a5       	ldd	r21, Y+42	; 0x2a
    26ee:	6b a5       	ldd	r22, Y+43	; 0x2b
    26f0:	7c a5       	ldd	r23, Y+44	; 0x2c
    26f2:	84 0f       	add	r24, r20
    26f4:	95 1f       	adc	r25, r21
    26f6:	a6 1f       	adc	r26, r22
    26f8:	b7 1f       	adc	r27, r23
    26fa:	89 a7       	std	Y+41, r24	; 0x29
    26fc:	9a a7       	std	Y+42, r25	; 0x2a
    26fe:	ab a7       	std	Y+43, r26	; 0x2b
    2700:	bc a7       	std	Y+44, r27	; 0x2c
  aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
    2702:	2e 96       	adiw	r28, 0x0e	; 14
    2704:	8f ad       	ldd	r24, Y+63	; 0x3f
    2706:	2e 97       	sbiw	r28, 0x0e	; 14
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	98 2f       	mov	r25, r24
    270c:	88 27       	eor	r24, r24
    270e:	2f 96       	adiw	r28, 0x0f	; 15
    2710:	2f ad       	ldd	r18, Y+63	; 0x3f
    2712:	2f 97       	sbiw	r28, 0x0f	; 15
    2714:	82 2b       	or	r24, r18
    2716:	09 2e       	mov	r0, r25
    2718:	00 0c       	add	r0, r0
    271a:	aa 0b       	sbc	r26, r26
    271c:	bb 0b       	sbc	r27, r27
    271e:	4d a5       	ldd	r20, Y+45	; 0x2d
    2720:	5e a5       	ldd	r21, Y+46	; 0x2e
    2722:	6f a5       	ldd	r22, Y+47	; 0x2f
    2724:	78 a9       	ldd	r23, Y+48	; 0x30
    2726:	84 0f       	add	r24, r20
    2728:	95 1f       	adc	r25, r21
    272a:	a6 1f       	adc	r26, r22
    272c:	b7 1f       	adc	r27, r23
    272e:	8d a7       	std	Y+45, r24	; 0x2d
    2730:	9e a7       	std	Y+46, r25	; 0x2e
    2732:	af a7       	std	Y+47, r26	; 0x2f
    2734:	b8 ab       	std	Y+48, r27	; 0x30
  
    readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
    2736:	9e 01       	movw	r18, r28
    2738:	27 5b       	subi	r18, 0xB7	; 183
    273a:	3f 4f       	sbci	r19, 0xFF	; 255
    273c:	46 e0       	ldi	r20, 0x06	; 6
    273e:	63 e4       	ldi	r22, 0x43	; 67
    2740:	88 e6       	ldi	r24, 0x68	; 104
    2742:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_Z9readByteshhhPh>
  gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
    2746:	2a 96       	adiw	r28, 0x0a	; 10
    2748:	8f ad       	ldd	r24, Y+63	; 0x3f
    274a:	2a 97       	sbiw	r28, 0x0a	; 10
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	98 2f       	mov	r25, r24
    2750:	88 27       	eor	r24, r24
    2752:	2b 96       	adiw	r28, 0x0b	; 11
    2754:	2f ad       	ldd	r18, Y+63	; 0x3f
    2756:	2b 97       	sbiw	r28, 0x0b	; 11
    2758:	82 2b       	or	r24, r18
    275a:	09 2e       	mov	r0, r25
    275c:	00 0c       	add	r0, r0
    275e:	aa 0b       	sbc	r26, r26
    2760:	bb 0b       	sbc	r27, r27
    2762:	49 8d       	ldd	r20, Y+25	; 0x19
    2764:	5a 8d       	ldd	r21, Y+26	; 0x1a
    2766:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2768:	7c 8d       	ldd	r23, Y+28	; 0x1c
    276a:	84 0f       	add	r24, r20
    276c:	95 1f       	adc	r25, r21
    276e:	a6 1f       	adc	r26, r22
    2770:	b7 1f       	adc	r27, r23
    2772:	89 8f       	std	Y+25, r24	; 0x19
    2774:	9a 8f       	std	Y+26, r25	; 0x1a
    2776:	ab 8f       	std	Y+27, r26	; 0x1b
    2778:	bc 8f       	std	Y+28, r27	; 0x1c
  gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
    277a:	2c 96       	adiw	r28, 0x0c	; 12
    277c:	8f ad       	ldd	r24, Y+63	; 0x3f
    277e:	2c 97       	sbiw	r28, 0x0c	; 12
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	98 2f       	mov	r25, r24
    2784:	88 27       	eor	r24, r24
    2786:	2d 96       	adiw	r28, 0x0d	; 13
    2788:	2f ad       	ldd	r18, Y+63	; 0x3f
    278a:	2d 97       	sbiw	r28, 0x0d	; 13
    278c:	82 2b       	or	r24, r18
    278e:	09 2e       	mov	r0, r25
    2790:	00 0c       	add	r0, r0
    2792:	aa 0b       	sbc	r26, r26
    2794:	bb 0b       	sbc	r27, r27
    2796:	4d 8d       	ldd	r20, Y+29	; 0x1d
    2798:	5e 8d       	ldd	r21, Y+30	; 0x1e
    279a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    279c:	78 a1       	ldd	r23, Y+32	; 0x20
    279e:	84 0f       	add	r24, r20
    27a0:	95 1f       	adc	r25, r21
    27a2:	a6 1f       	adc	r26, r22
    27a4:	b7 1f       	adc	r27, r23
    27a6:	8d 8f       	std	Y+29, r24	; 0x1d
    27a8:	9e 8f       	std	Y+30, r25	; 0x1e
    27aa:	af 8f       	std	Y+31, r26	; 0x1f
    27ac:	b8 a3       	std	Y+32, r27	; 0x20
  gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
    27ae:	2e 96       	adiw	r28, 0x0e	; 14
    27b0:	8f ad       	ldd	r24, Y+63	; 0x3f
    27b2:	2e 97       	sbiw	r28, 0x0e	; 14
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	98 2f       	mov	r25, r24
    27b8:	88 27       	eor	r24, r24
    27ba:	2f 96       	adiw	r28, 0x0f	; 15
    27bc:	2f ad       	ldd	r18, Y+63	; 0x3f
    27be:	2f 97       	sbiw	r28, 0x0f	; 15
    27c0:	82 2b       	or	r24, r18
    27c2:	09 2e       	mov	r0, r25
    27c4:	00 0c       	add	r0, r0
    27c6:	aa 0b       	sbc	r26, r26
    27c8:	bb 0b       	sbc	r27, r27
    27ca:	49 a1       	ldd	r20, Y+33	; 0x21
    27cc:	5a a1       	ldd	r21, Y+34	; 0x22
    27ce:	6b a1       	ldd	r22, Y+35	; 0x23
    27d0:	7c a1       	ldd	r23, Y+36	; 0x24
    27d2:	84 0f       	add	r24, r20
    27d4:	95 1f       	adc	r25, r21
    27d6:	a6 1f       	adc	r26, r22
    27d8:	b7 1f       	adc	r27, r23
    27da:	89 a3       	std	Y+33, r24	; 0x21
    27dc:	9a a3       	std	Y+34, r25	; 0x22
    27de:	ab a3       	std	Y+35, r26	; 0x23
    27e0:	bc a3       	std	Y+36, r27	; 0x24
    27e2:	01 50       	subi	r16, 0x01	; 1
    27e4:	11 09       	sbc	r17, r1
// Configure the accelerometer for self-test
   writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
   writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
   delay(25);  // Delay a while to let the device stabilize

  for( int ii = 0; ii < 200; ii++) {  // get average self-test values of gyro and acclerometer
    27e6:	09 f0       	breq	.+2      	; 0x27ea <_Z15MPU9250SelfTestPf+0x412>
    27e8:	50 cf       	rjmp	.-352    	; 0x268a <_Z15MPU9250SelfTestPf+0x2b2>
    27ea:	5e 01       	movw	r10, r28
    27ec:	f5 e2       	ldi	r31, 0x25	; 37
    27ee:	af 0e       	add	r10, r31
    27f0:	b1 1c       	adc	r11, r1
    27f2:	1e 01       	movw	r2, r28
    27f4:	89 e1       	ldi	r24, 0x19	; 25
    27f6:	28 0e       	add	r2, r24
    27f8:	31 1c       	adc	r3, r1
    27fa:	2e 01       	movw	r4, r28
    27fc:	91 e3       	ldi	r25, 0x31	; 49
    27fe:	49 0e       	add	r4, r25
    2800:	51 1c       	adc	r5, r1
    2802:	71 01       	movw	r14, r2
    2804:	85 01       	movw	r16, r10
  gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
  gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  }
  
  for (int ii =0; ii < 3; ii++) {  // Get average of 200 values and store as average self-test readings
  aSTAvg[ii] /= 200;
    2806:	d8 01       	movw	r26, r16
    2808:	6d 91       	ld	r22, X+
    280a:	7d 91       	ld	r23, X+
    280c:	8d 91       	ld	r24, X+
    280e:	9c 91       	ld	r25, X
    2810:	28 ec       	ldi	r18, 0xC8	; 200
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	40 e0       	ldi	r20, 0x00	; 0
    2816:	50 e0       	ldi	r21, 0x00	; 0
    2818:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <__divmodsi4>
    281c:	f8 01       	movw	r30, r16
    281e:	21 93       	st	Z+, r18
    2820:	31 93       	st	Z+, r19
    2822:	41 93       	st	Z+, r20
    2824:	51 93       	st	Z+, r21
    2826:	8f 01       	movw	r16, r30
  gSTAvg[ii] /= 200;
    2828:	d7 01       	movw	r26, r14
    282a:	6d 91       	ld	r22, X+
    282c:	7d 91       	ld	r23, X+
    282e:	8d 91       	ld	r24, X+
    2830:	9c 91       	ld	r25, X
    2832:	28 ec       	ldi	r18, 0xC8	; 200
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	40 e0       	ldi	r20, 0x00	; 0
    2838:	50 e0       	ldi	r21, 0x00	; 0
    283a:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <__divmodsi4>
    283e:	f7 01       	movw	r30, r14
    2840:	21 93       	st	Z+, r18
    2842:	31 93       	st	Z+, r19
    2844:	41 93       	st	Z+, r20
    2846:	51 93       	st	Z+, r21
    2848:	7f 01       	movw	r14, r30
  gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
  gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
  gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
  }
  
  for (int ii =0; ii < 3; ii++) {  // Get average of 200 values and store as average self-test readings
    284a:	04 15       	cp	r16, r4
    284c:	15 05       	cpc	r17, r5
    284e:	d9 f6       	brne	.-74     	; 0x2806 <_Z15MPU9250SelfTestPf+0x42e>
  aSTAvg[ii] /= 200;
  gSTAvg[ii] /= 200;
  }   
  
 // Configure the gyro and accelerometer for normal operation
   writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);  
    2850:	40 e0       	ldi	r20, 0x00	; 0
    2852:	6c e1       	ldi	r22, 0x1C	; 28
    2854:	88 e6       	ldi	r24, 0x68	; 104
    2856:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
   writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0x00);  
    285a:	40 e0       	ldi	r20, 0x00	; 0
    285c:	6b e1       	ldi	r22, 0x1B	; 27
    285e:	88 e6       	ldi	r24, 0x68	; 104
    2860:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_Z9writeBytehhh>
   delay(25);  // Delay a while to let the device stabilize
    2864:	69 e1       	ldi	r22, 0x19	; 25
    2866:	70 e0       	ldi	r23, 0x00	; 0
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	0e 94 36 2a 	call	0x546c	; 0x546c <delay>
   
   // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
   selfTest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
    2870:	6d e0       	ldi	r22, 0x0D	; 13
    2872:	88 e6       	ldi	r24, 0x68	; 104
    2874:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    2878:	48 2e       	mov	r4, r24
   selfTest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
    287a:	6e e0       	ldi	r22, 0x0E	; 14
    287c:	88 e6       	ldi	r24, 0x68	; 104
    287e:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    2882:	58 2e       	mov	r5, r24
   selfTest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
    2884:	6f e0       	ldi	r22, 0x0F	; 15
    2886:	88 e6       	ldi	r24, 0x68	; 104
    2888:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    288c:	e8 2e       	mov	r14, r24
   selfTest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
    288e:	60 e0       	ldi	r22, 0x00	; 0
    2890:	88 e6       	ldi	r24, 0x68	; 104
    2892:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    2896:	f8 2e       	mov	r15, r24
   selfTest[4] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO);  // Y-axis gyro self-test results
    2898:	61 e0       	ldi	r22, 0x01	; 1
    289a:	88 e6       	ldi	r24, 0x68	; 104
    289c:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    28a0:	08 2f       	mov	r16, r24
   selfTest[5] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO);  // Z-axis gyro self-test results
    28a2:	62 e0       	ldi	r22, 0x02	; 2
    28a4:	88 e6       	ldi	r24, 0x68	; 104
    28a6:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    28aa:	18 2f       	mov	r17, r24

  // Retrieve factory self-test value from self-test code reads
   factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
    28ac:	64 2d       	mov	r22, r4
    28ae:	70 e0       	ldi	r23, 0x00	; 0
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	0e 94 01 21 	call	0x4202	; 0x4202 <__floatunsisf>
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	40 e8       	ldi	r20, 0x80	; 128
    28be:	5f e3       	ldi	r21, 0x3F	; 63
    28c0:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    28c4:	9b 01       	movw	r18, r22
    28c6:	ac 01       	movw	r20, r24
    28c8:	6e ea       	ldi	r22, 0xAE	; 174
    28ca:	77 e4       	ldi	r23, 0x47	; 71
    28cc:	81 e8       	ldi	r24, 0x81	; 129
    28ce:	9f e3       	ldi	r25, 0x3F	; 63
    28d0:	0e 94 83 22 	call	0x4506	; 0x4506 <pow>
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 ec       	ldi	r19, 0xC0	; 192
    28d8:	43 e2       	ldi	r20, 0x23	; 35
    28da:	55 e4       	ldi	r21, 0x45	; 69
    28dc:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    28e0:	69 83       	std	Y+1, r22	; 0x01
    28e2:	7a 83       	std	Y+2, r23	; 0x02
    28e4:	8b 83       	std	Y+3, r24	; 0x03
    28e6:	9c 83       	std	Y+4, r25	; 0x04
   factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
    28e8:	65 2d       	mov	r22, r5
    28ea:	70 e0       	ldi	r23, 0x00	; 0
    28ec:	80 e0       	ldi	r24, 0x00	; 0
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	0e 94 01 21 	call	0x4202	; 0x4202 <__floatunsisf>
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	40 e8       	ldi	r20, 0x80	; 128
    28fa:	5f e3       	ldi	r21, 0x3F	; 63
    28fc:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    2900:	9b 01       	movw	r18, r22
    2902:	ac 01       	movw	r20, r24
    2904:	6e ea       	ldi	r22, 0xAE	; 174
    2906:	77 e4       	ldi	r23, 0x47	; 71
    2908:	81 e8       	ldi	r24, 0x81	; 129
    290a:	9f e3       	ldi	r25, 0x3F	; 63
    290c:	0e 94 83 22 	call	0x4506	; 0x4506 <pow>
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 ec       	ldi	r19, 0xC0	; 192
    2914:	43 e2       	ldi	r20, 0x23	; 35
    2916:	55 e4       	ldi	r21, 0x45	; 69
    2918:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    291c:	6d 83       	std	Y+5, r22	; 0x05
    291e:	7e 83       	std	Y+6, r23	; 0x06
    2920:	8f 83       	std	Y+7, r24	; 0x07
    2922:	98 87       	std	Y+8, r25	; 0x08
   factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
    2924:	6e 2d       	mov	r22, r14
    2926:	70 e0       	ldi	r23, 0x00	; 0
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	0e 94 01 21 	call	0x4202	; 0x4202 <__floatunsisf>
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e8       	ldi	r20, 0x80	; 128
    2936:	5f e3       	ldi	r21, 0x3F	; 63
    2938:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    293c:	9b 01       	movw	r18, r22
    293e:	ac 01       	movw	r20, r24
    2940:	6e ea       	ldi	r22, 0xAE	; 174
    2942:	77 e4       	ldi	r23, 0x47	; 71
    2944:	81 e8       	ldi	r24, 0x81	; 129
    2946:	9f e3       	ldi	r25, 0x3F	; 63
    2948:	0e 94 83 22 	call	0x4506	; 0x4506 <pow>
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 ec       	ldi	r19, 0xC0	; 192
    2950:	43 e2       	ldi	r20, 0x23	; 35
    2952:	55 e4       	ldi	r21, 0x45	; 69
    2954:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    2958:	69 87       	std	Y+9, r22	; 0x09
    295a:	7a 87       	std	Y+10, r23	; 0x0a
    295c:	8b 87       	std	Y+11, r24	; 0x0b
    295e:	9c 87       	std	Y+12, r25	; 0x0c
   factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
    2960:	6f 2d       	mov	r22, r15
    2962:	70 e0       	ldi	r23, 0x00	; 0
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	0e 94 01 21 	call	0x4202	; 0x4202 <__floatunsisf>
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	40 e8       	ldi	r20, 0x80	; 128
    2972:	5f e3       	ldi	r21, 0x3F	; 63
    2974:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    2978:	9b 01       	movw	r18, r22
    297a:	ac 01       	movw	r20, r24
    297c:	6e ea       	ldi	r22, 0xAE	; 174
    297e:	77 e4       	ldi	r23, 0x47	; 71
    2980:	81 e8       	ldi	r24, 0x81	; 129
    2982:	9f e3       	ldi	r25, 0x3F	; 63
    2984:	0e 94 83 22 	call	0x4506	; 0x4506 <pow>
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 ec       	ldi	r19, 0xC0	; 192
    298c:	43 e2       	ldi	r20, 0x23	; 35
    298e:	55 e4       	ldi	r21, 0x45	; 69
    2990:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    2994:	6d 87       	std	Y+13, r22	; 0x0d
    2996:	7e 87       	std	Y+14, r23	; 0x0e
    2998:	8f 87       	std	Y+15, r24	; 0x0f
    299a:	98 8b       	std	Y+16, r25	; 0x10
   factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
    299c:	60 2f       	mov	r22, r16
    299e:	70 e0       	ldi	r23, 0x00	; 0
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	0e 94 01 21 	call	0x4202	; 0x4202 <__floatunsisf>
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	40 e8       	ldi	r20, 0x80	; 128
    29ae:	5f e3       	ldi	r21, 0x3F	; 63
    29b0:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    29b4:	9b 01       	movw	r18, r22
    29b6:	ac 01       	movw	r20, r24
    29b8:	6e ea       	ldi	r22, 0xAE	; 174
    29ba:	77 e4       	ldi	r23, 0x47	; 71
    29bc:	81 e8       	ldi	r24, 0x81	; 129
    29be:	9f e3       	ldi	r25, 0x3F	; 63
    29c0:	0e 94 83 22 	call	0x4506	; 0x4506 <pow>
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 ec       	ldi	r19, 0xC0	; 192
    29c8:	43 e2       	ldi	r20, 0x23	; 35
    29ca:	55 e4       	ldi	r21, 0x45	; 69
    29cc:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    29d0:	69 8b       	std	Y+17, r22	; 0x11
    29d2:	7a 8b       	std	Y+18, r23	; 0x12
    29d4:	8b 8b       	std	Y+19, r24	; 0x13
    29d6:	9c 8b       	std	Y+20, r25	; 0x14
   factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
    29d8:	61 2f       	mov	r22, r17
    29da:	70 e0       	ldi	r23, 0x00	; 0
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	0e 94 01 21 	call	0x4202	; 0x4202 <__floatunsisf>
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	40 e8       	ldi	r20, 0x80	; 128
    29ea:	5f e3       	ldi	r21, 0x3F	; 63
    29ec:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    29f0:	9b 01       	movw	r18, r22
    29f2:	ac 01       	movw	r20, r24
    29f4:	6e ea       	ldi	r22, 0xAE	; 174
    29f6:	77 e4       	ldi	r23, 0x47	; 71
    29f8:	81 e8       	ldi	r24, 0x81	; 129
    29fa:	9f e3       	ldi	r25, 0x3F	; 63
    29fc:	0e 94 83 22 	call	0x4506	; 0x4506 <pow>
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 ec       	ldi	r19, 0xC0	; 192
    2a04:	43 e2       	ldi	r20, 0x23	; 35
    2a06:	55 e4       	ldi	r21, 0x45	; 69
    2a08:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    2a0c:	6d 8b       	std	Y+21, r22	; 0x15
    2a0e:	7e 8b       	std	Y+22, r23	; 0x16
    2a10:	8f 8b       	std	Y+23, r24	; 0x17
    2a12:	98 8f       	std	Y+24, r25	; 0x18
    2a14:	ce 01       	movw	r24, r28
    2a16:	01 96       	adiw	r24, 0x01	; 1
    2a18:	7c 01       	movw	r14, r24
    2a1a:	08 2d       	mov	r16, r8
    2a1c:	19 2d       	mov	r17, r9
 
 // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
 // To get percent, must multiply by 100
   for (int i = 0; i < 3; i++) {
    2a1e:	81 2c       	mov	r8, r1
    2a20:	91 2c       	mov	r9, r1
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
    2a22:	f5 01       	movw	r30, r10
    2a24:	81 91       	ld	r24, Z+
    2a26:	91 91       	ld	r25, Z+
    2a28:	a1 91       	ld	r26, Z+
    2a2a:	b1 91       	ld	r27, Z+
    2a2c:	5f 01       	movw	r10, r30
    2a2e:	f3 01       	movw	r30, r6
    2a30:	21 91       	ld	r18, Z+
    2a32:	31 91       	ld	r19, Z+
    2a34:	41 91       	ld	r20, Z+
    2a36:	51 91       	ld	r21, Z+
    2a38:	3f 01       	movw	r6, r30
    2a3a:	bc 01       	movw	r22, r24
    2a3c:	cd 01       	movw	r24, r26
    2a3e:	62 1b       	sub	r22, r18
    2a40:	73 0b       	sbc	r23, r19
    2a42:	84 0b       	sbc	r24, r20
    2a44:	95 0b       	sbc	r25, r21
    2a46:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	48 ec       	ldi	r20, 0xC8	; 200
    2a50:	52 e4       	ldi	r21, 0x42	; 66
    2a52:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    2a56:	d7 01       	movw	r26, r14
    2a58:	2d 91       	ld	r18, X+
    2a5a:	3d 91       	ld	r19, X+
    2a5c:	4d 91       	ld	r20, X+
    2a5e:	5c 91       	ld	r21, X
    2a60:	0e 94 8f 20 	call	0x411e	; 0x411e <__divsf3>
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	48 ec       	ldi	r20, 0xC8	; 200
    2a6a:	52 e4       	ldi	r21, 0x42	; 66
    2a6c:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    2a70:	f8 01       	movw	r30, r16
    2a72:	60 83       	st	Z, r22
    2a74:	71 83       	std	Z+1, r23	; 0x01
    2a76:	82 83       	std	Z+2, r24	; 0x02
    2a78:	93 83       	std	Z+3, r25	; 0x03
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
    2a7a:	f1 01       	movw	r30, r2
    2a7c:	81 91       	ld	r24, Z+
    2a7e:	91 91       	ld	r25, Z+
    2a80:	a1 91       	ld	r26, Z+
    2a82:	b1 91       	ld	r27, Z+
    2a84:	1f 01       	movw	r2, r30
    2a86:	f6 01       	movw	r30, r12
    2a88:	21 91       	ld	r18, Z+
    2a8a:	31 91       	ld	r19, Z+
    2a8c:	41 91       	ld	r20, Z+
    2a8e:	51 91       	ld	r21, Z+
    2a90:	6f 01       	movw	r12, r30
    2a92:	bc 01       	movw	r22, r24
    2a94:	cd 01       	movw	r24, r26
    2a96:	62 1b       	sub	r22, r18
    2a98:	73 0b       	sbc	r23, r19
    2a9a:	84 0b       	sbc	r24, r20
    2a9c:	95 0b       	sbc	r25, r21
    2a9e:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	48 ec       	ldi	r20, 0xC8	; 200
    2aa8:	52 e4       	ldi	r21, 0x42	; 66
    2aaa:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    2aae:	d7 01       	movw	r26, r14
    2ab0:	1c 96       	adiw	r26, 0x0c	; 12
    2ab2:	2d 91       	ld	r18, X+
    2ab4:	3d 91       	ld	r19, X+
    2ab6:	4d 91       	ld	r20, X+
    2ab8:	5c 91       	ld	r21, X
    2aba:	1f 97       	sbiw	r26, 0x0f	; 15
    2abc:	0e 94 8f 20 	call	0x411e	; 0x411e <__divsf3>
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	48 ec       	ldi	r20, 0xC8	; 200
    2ac6:	52 e4       	ldi	r21, 0x42	; 66
    2ac8:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    2acc:	f8 01       	movw	r30, r16
    2ace:	64 87       	std	Z+12, r22	; 0x0c
    2ad0:	75 87       	std	Z+13, r23	; 0x0d
    2ad2:	86 87       	std	Z+14, r24	; 0x0e
    2ad4:	97 87       	std	Z+15, r25	; 0x0f
   factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
   factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 
 // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
 // To get percent, must multiply by 100
   for (int i = 0; i < 3; i++) {
    2ad6:	ff ef       	ldi	r31, 0xFF	; 255
    2ad8:	8f 1a       	sub	r8, r31
    2ada:	9f 0a       	sbc	r9, r31
    2adc:	84 e0       	ldi	r24, 0x04	; 4
    2ade:	e8 0e       	add	r14, r24
    2ae0:	f1 1c       	adc	r15, r1
    2ae2:	0c 5f       	subi	r16, 0xFC	; 252
    2ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae6:	93 e0       	ldi	r25, 0x03	; 3
    2ae8:	89 16       	cp	r8, r25
    2aea:	91 04       	cpc	r9, r1
    2aec:	09 f0       	breq	.+2      	; 0x2af0 <_Z15MPU9250SelfTestPf+0x718>
    2aee:	99 cf       	rjmp	.-206    	; 0x2a22 <_Z15MPU9250SelfTestPf+0x64a>
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
   }
   
}
    2af0:	c2 5b       	subi	r28, 0xB2	; 178
    2af2:	df 4f       	sbci	r29, 0xFF	; 255
    2af4:	0f b6       	in	r0, 0x3f	; 63
    2af6:	f8 94       	cli
    2af8:	de bf       	out	0x3e, r29	; 62
    2afa:	0f be       	out	0x3f, r0	; 63
    2afc:	cd bf       	out	0x3d, r28	; 61
    2afe:	df 91       	pop	r29
    2b00:	cf 91       	pop	r28
    2b02:	1f 91       	pop	r17
    2b04:	0f 91       	pop	r16
    2b06:	ff 90       	pop	r15
    2b08:	ef 90       	pop	r14
    2b0a:	df 90       	pop	r13
    2b0c:	cf 90       	pop	r12
    2b0e:	bf 90       	pop	r11
    2b10:	af 90       	pop	r10
    2b12:	9f 90       	pop	r9
    2b14:	8f 90       	pop	r8
    2b16:	7f 90       	pop	r7
    2b18:	6f 90       	pop	r6
    2b1a:	5f 90       	pop	r5
    2b1c:	4f 90       	pop	r4
    2b1e:	3f 90       	pop	r3
    2b20:	2f 90       	pop	r2
    2b22:	08 95       	ret

00002b24 <setup>:
float q[4] = {1.0f, 0.0f, 0.0f, 0.0f};    // vector to hold quaternion
float eInt[3] = {0.0f, 0.0f, 0.0f};       // vector to hold integral error for Mahony method


void setup()
{
    2b24:	cf 93       	push	r28
    2b26:	df 93       	push	r29
  // Setup for Master mode, pins 16/18, external pullups, 400kHz
  Wire.begin();//I2C_MASTER, 0x00, I2C_PINS_16_17, I2C_PULLUP_EXT, I2C_RATE_400);
    2b28:	83 e8       	ldi	r24, 0x83	; 131
    2b2a:	96 e0       	ldi	r25, 0x06	; 6
    2b2c:	0e 94 1d 29 	call	0x523a	; 0x523a <_ZN7TwoWire5beginEv>
  delay(1000);
    2b30:	68 ee       	ldi	r22, 0xE8	; 232
    2b32:	73 e0       	ldi	r23, 0x03	; 3
    2b34:	80 e0       	ldi	r24, 0x00	; 0
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	0e 94 36 2a 	call	0x546c	; 0x546c <delay>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    2b3c:	26 e0       	ldi	r18, 0x06	; 6
    2b3e:	40 e0       	ldi	r20, 0x00	; 0
    2b40:	52 ec       	ldi	r21, 0xC2	; 194
    2b42:	61 e0       	ldi	r22, 0x01	; 1
    2b44:	70 e0       	ldi	r23, 0x00	; 0
    2b46:	86 ee       	ldi	r24, 0xE6	; 230
    2b48:	95 e0       	ldi	r25, 0x05	; 5
    2b4a:	0e 94 01 25 	call	0x4a02	; 0x4a02 <_ZN14HardwareSerial5beginEmh>
  Serial.begin(115200);
  
  // Set up the interrupt pin, its set as active high, push-pull
  pinMode(INTGX,  INPUT);
    2b4e:	60 e0       	ldi	r22, 0x00	; 0
    2b50:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <INTGX>
    2b54:	0e 94 d6 2a 	call	0x55ac	; 0x55ac <pinMode>
  pinMode(INTP1,  INPUT);
    2b58:	60 e0       	ldi	r22, 0x00	; 0
    2b5a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <INTP1>
    2b5e:	0e 94 d6 2a 	call	0x55ac	; 0x55ac <pinMode>
  pinMode(INTP2,  INPUT);
    2b62:	60 e0       	ldi	r22, 0x00	; 0
    2b64:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <INTP2>
    2b68:	0e 94 d6 2a 	call	0x55ac	; 0x55ac <pinMode>
  pinMode(myLed, OUTPUT);
    2b6c:	c4 e1       	ldi	r28, 0x14	; 20
    2b6e:	d1 e0       	ldi	r29, 0x01	; 1
    2b70:	61 e0       	ldi	r22, 0x01	; 1
    2b72:	88 81       	ld	r24, Y
    2b74:	0e 94 d6 2a 	call	0x55ac	; 0x55ac <pinMode>
  digitalWrite(myLed, HIGH);
    2b78:	61 e0       	ldi	r22, 0x01	; 1
    2b7a:	88 81       	ld	r24, Y
    2b7c:	0e 94 12 2b 	call	0x5624	; 0x5624 <digitalWrite>
  //display.setTextSize(1); // Set text size to normal, 2 is twice normal etc.
  //display.setTextColor(BLACK); // Set pixel color; 1 on the monochrome screen
  //display.clearDisplay();   // clears the screen and buffer

  // Read the WHO_AM_I register, this is a good test of communication
  Serial.println("MPU9250 + MPL3115A2 devices...");
    2b80:	6f e1       	ldi	r22, 0x1F	; 31
    2b82:	71 e0       	ldi	r23, 0x01	; 1
    2b84:	86 ee       	ldi	r24, 0xE6	; 230
    2b86:	95 e0       	ldi	r25, 0x05	; 5
    2b88:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <_ZN5Print7printlnEPKc>
  byte c = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);  // Read WHO_AM_I register for MPU-9250
    2b8c:	65 e7       	ldi	r22, 0x75	; 117
    2b8e:	88 e6       	ldi	r24, 0x68	; 104
    2b90:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    2b94:	c8 2f       	mov	r28, r24
  Serial.print("MPU9250 "); Serial.print("I AM "); Serial.print(c, HEX); Serial.print(" I should be "); Serial.println(0x73, HEX);
    2b96:	6e e3       	ldi	r22, 0x3E	; 62
    2b98:	71 e0       	ldi	r23, 0x01	; 1
    2b9a:	86 ee       	ldi	r24, 0xE6	; 230
    2b9c:	95 e0       	ldi	r25, 0x05	; 5
    2b9e:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    2ba2:	67 e4       	ldi	r22, 0x47	; 71
    2ba4:	71 e0       	ldi	r23, 0x01	; 1
    2ba6:	86 ee       	ldi	r24, 0xE6	; 230
    2ba8:	95 e0       	ldi	r25, 0x05	; 5
    2baa:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    2bae:	40 e1       	ldi	r20, 0x10	; 16
    2bb0:	50 e0       	ldi	r21, 0x00	; 0
    2bb2:	6c 2f       	mov	r22, r28
    2bb4:	86 ee       	ldi	r24, 0xE6	; 230
    2bb6:	95 e0       	ldi	r25, 0x05	; 5
    2bb8:	0e 94 43 27 	call	0x4e86	; 0x4e86 <_ZN5Print5printEhi>
    2bbc:	6d e4       	ldi	r22, 0x4D	; 77
    2bbe:	71 e0       	ldi	r23, 0x01	; 1
    2bc0:	86 ee       	ldi	r24, 0xE6	; 230
    2bc2:	95 e0       	ldi	r25, 0x05	; 5
    2bc4:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    2bc8:	40 e1       	ldi	r20, 0x10	; 16
    2bca:	50 e0       	ldi	r21, 0x00	; 0
    2bcc:	63 e7       	ldi	r22, 0x73	; 115
    2bce:	70 e0       	ldi	r23, 0x00	; 0
    2bd0:	86 ee       	ldi	r24, 0xE6	; 230
    2bd2:	95 e0       	ldi	r25, 0x05	; 5
    2bd4:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <_ZN5Print7printlnEii>
  //display.setCursor(0,30); display.print("I Should Be");
//display.setCursor(0,40); display.print(0x71, HEX); 
  //display.display();
  //delay(5000); 

  if (c == 0x73) // WHO_AM_I should always be 0x68
    2bd8:	c3 37       	cpi	r28, 0x73	; 115
    2bda:	09 f0       	breq	.+2      	; 0x2bde <setup+0xba>
    2bdc:	25 c1       	rjmp	.+586    	; 0x2e28 <setup+0x304>
  {  
    Serial.println("MPU9250 is online...");
    2bde:	6b e5       	ldi	r22, 0x5B	; 91
    2be0:	71 e0       	ldi	r23, 0x01	; 1
    2be2:	86 ee       	ldi	r24, 0xE6	; 230
    2be4:	95 e0       	ldi	r25, 0x05	; 5
    2be6:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <_ZN5Print7printlnEPKc>
    
    MPU9250SelfTest(SelfTest); // Start by performing self test and reporting values
    2bea:	8c e6       	ldi	r24, 0x6C	; 108
    2bec:	95 e0       	ldi	r25, 0x05	; 5
    2bee:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <_Z15MPU9250SelfTestPf>
    Serial.print("x-axis self test: acceleration trim within : "); Serial.print(SelfTest[0],1); Serial.println("% of factory value");
    2bf2:	60 e7       	ldi	r22, 0x70	; 112
    2bf4:	71 e0       	ldi	r23, 0x01	; 1
    2bf6:	86 ee       	ldi	r24, 0xE6	; 230
    2bf8:	95 e0       	ldi	r25, 0x05	; 5
    2bfa:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    2bfe:	cc e6       	ldi	r28, 0x6C	; 108
    2c00:	d5 e0       	ldi	r29, 0x05	; 5
    2c02:	48 81       	ld	r20, Y
    2c04:	59 81       	ldd	r21, Y+1	; 0x01
    2c06:	6a 81       	ldd	r22, Y+2	; 0x02
    2c08:	7b 81       	ldd	r23, Y+3	; 0x03
    2c0a:	21 e0       	ldi	r18, 0x01	; 1
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	86 ee       	ldi	r24, 0xE6	; 230
    2c10:	95 e0       	ldi	r25, 0x05	; 5
    2c12:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <_ZN5Print5printEdi>
    2c16:	6e e9       	ldi	r22, 0x9E	; 158
    2c18:	71 e0       	ldi	r23, 0x01	; 1
    2c1a:	86 ee       	ldi	r24, 0xE6	; 230
    2c1c:	95 e0       	ldi	r25, 0x05	; 5
    2c1e:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <_ZN5Print7printlnEPKc>
    Serial.print("y-axis self test: acceleration trim within : "); Serial.print(SelfTest[1],1); Serial.println("% of factory value");
    2c22:	61 eb       	ldi	r22, 0xB1	; 177
    2c24:	71 e0       	ldi	r23, 0x01	; 1
    2c26:	86 ee       	ldi	r24, 0xE6	; 230
    2c28:	95 e0       	ldi	r25, 0x05	; 5
    2c2a:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    2c2e:	4c 81       	ldd	r20, Y+4	; 0x04
    2c30:	5d 81       	ldd	r21, Y+5	; 0x05
    2c32:	6e 81       	ldd	r22, Y+6	; 0x06
    2c34:	7f 81       	ldd	r23, Y+7	; 0x07
    2c36:	21 e0       	ldi	r18, 0x01	; 1
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	86 ee       	ldi	r24, 0xE6	; 230
    2c3c:	95 e0       	ldi	r25, 0x05	; 5
    2c3e:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <_ZN5Print5printEdi>
    2c42:	6e e9       	ldi	r22, 0x9E	; 158
    2c44:	71 e0       	ldi	r23, 0x01	; 1
    2c46:	86 ee       	ldi	r24, 0xE6	; 230
    2c48:	95 e0       	ldi	r25, 0x05	; 5
    2c4a:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <_ZN5Print7printlnEPKc>
    Serial.print("z-axis self test: acceleration trim within : "); Serial.print(SelfTest[2],1); Serial.println("% of factory value");
    2c4e:	6f ed       	ldi	r22, 0xDF	; 223
    2c50:	71 e0       	ldi	r23, 0x01	; 1
    2c52:	86 ee       	ldi	r24, 0xE6	; 230
    2c54:	95 e0       	ldi	r25, 0x05	; 5
    2c56:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    2c5a:	48 85       	ldd	r20, Y+8	; 0x08
    2c5c:	59 85       	ldd	r21, Y+9	; 0x09
    2c5e:	6a 85       	ldd	r22, Y+10	; 0x0a
    2c60:	7b 85       	ldd	r23, Y+11	; 0x0b
    2c62:	21 e0       	ldi	r18, 0x01	; 1
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	86 ee       	ldi	r24, 0xE6	; 230
    2c68:	95 e0       	ldi	r25, 0x05	; 5
    2c6a:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <_ZN5Print5printEdi>
    2c6e:	6e e9       	ldi	r22, 0x9E	; 158
    2c70:	71 e0       	ldi	r23, 0x01	; 1
    2c72:	86 ee       	ldi	r24, 0xE6	; 230
    2c74:	95 e0       	ldi	r25, 0x05	; 5
    2c76:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <_ZN5Print7printlnEPKc>
    Serial.print("x-axis self test: gyration trim within : "); Serial.print(SelfTest[3],1); Serial.println("% of factory value");
    2c7a:	6d e0       	ldi	r22, 0x0D	; 13
    2c7c:	72 e0       	ldi	r23, 0x02	; 2
    2c7e:	86 ee       	ldi	r24, 0xE6	; 230
    2c80:	95 e0       	ldi	r25, 0x05	; 5
    2c82:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    2c86:	4c 85       	ldd	r20, Y+12	; 0x0c
    2c88:	5d 85       	ldd	r21, Y+13	; 0x0d
    2c8a:	6e 85       	ldd	r22, Y+14	; 0x0e
    2c8c:	7f 85       	ldd	r23, Y+15	; 0x0f
    2c8e:	21 e0       	ldi	r18, 0x01	; 1
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	86 ee       	ldi	r24, 0xE6	; 230
    2c94:	95 e0       	ldi	r25, 0x05	; 5
    2c96:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <_ZN5Print5printEdi>
    2c9a:	6e e9       	ldi	r22, 0x9E	; 158
    2c9c:	71 e0       	ldi	r23, 0x01	; 1
    2c9e:	86 ee       	ldi	r24, 0xE6	; 230
    2ca0:	95 e0       	ldi	r25, 0x05	; 5
    2ca2:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <_ZN5Print7printlnEPKc>
    Serial.print("y-axis self test: gyration trim within : "); Serial.print(SelfTest[4],1); Serial.println("% of factory value");
    2ca6:	67 e3       	ldi	r22, 0x37	; 55
    2ca8:	72 e0       	ldi	r23, 0x02	; 2
    2caa:	86 ee       	ldi	r24, 0xE6	; 230
    2cac:	95 e0       	ldi	r25, 0x05	; 5
    2cae:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    2cb2:	48 89       	ldd	r20, Y+16	; 0x10
    2cb4:	59 89       	ldd	r21, Y+17	; 0x11
    2cb6:	6a 89       	ldd	r22, Y+18	; 0x12
    2cb8:	7b 89       	ldd	r23, Y+19	; 0x13
    2cba:	21 e0       	ldi	r18, 0x01	; 1
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	86 ee       	ldi	r24, 0xE6	; 230
    2cc0:	95 e0       	ldi	r25, 0x05	; 5
    2cc2:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <_ZN5Print5printEdi>
    2cc6:	6e e9       	ldi	r22, 0x9E	; 158
    2cc8:	71 e0       	ldi	r23, 0x01	; 1
    2cca:	86 ee       	ldi	r24, 0xE6	; 230
    2ccc:	95 e0       	ldi	r25, 0x05	; 5
    2cce:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <_ZN5Print7printlnEPKc>
    Serial.print("z-axis self test: gyration trim within : "); Serial.print(SelfTest[5],1); Serial.println("% of factory value");
    2cd2:	61 e6       	ldi	r22, 0x61	; 97
    2cd4:	72 e0       	ldi	r23, 0x02	; 2
    2cd6:	86 ee       	ldi	r24, 0xE6	; 230
    2cd8:	95 e0       	ldi	r25, 0x05	; 5
    2cda:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    2cde:	4c 89       	ldd	r20, Y+20	; 0x14
    2ce0:	5d 89       	ldd	r21, Y+21	; 0x15
    2ce2:	6e 89       	ldd	r22, Y+22	; 0x16
    2ce4:	7f 89       	ldd	r23, Y+23	; 0x17
    2ce6:	21 e0       	ldi	r18, 0x01	; 1
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	86 ee       	ldi	r24, 0xE6	; 230
    2cec:	95 e0       	ldi	r25, 0x05	; 5
    2cee:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <_ZN5Print5printEdi>
    2cf2:	6e e9       	ldi	r22, 0x9E	; 158
    2cf4:	71 e0       	ldi	r23, 0x01	; 1
    2cf6:	86 ee       	ldi	r24, 0xE6	; 230
    2cf8:	95 e0       	ldi	r25, 0x05	; 5
    2cfa:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <_ZN5Print7printlnEPKc>
    delay(5000);
    2cfe:	68 e8       	ldi	r22, 0x88	; 136
    2d00:	73 e1       	ldi	r23, 0x13	; 19
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	0e 94 36 2a 	call	0x546c	; 0x546c <delay>
    
  calibrateMPU9250(gyroBias, accelBias); // Calibrate gyro and accelerometers, load biases in bias registers
    2d0a:	6e e8       	ldi	r22, 0x8E	; 142
    2d0c:	75 e0       	ldi	r23, 0x05	; 5
    2d0e:	8a e9       	ldi	r24, 0x9A	; 154
    2d10:	95 e0       	ldi	r25, 0x05	; 5
    2d12:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <_Z16calibrateMPU9250PfS_>
  //display.setCursor(66, 24); display.print("o/s");   
 
  //display.display();
  //delay(1000); 
  
  initMPU9250(); 
    2d16:	0e 94 a6 0c 	call	0x194c	; 0x194c <_Z11initMPU9250v>
  Serial.println("MPU9250 initialized for active data mode...."); // Initialize device for active mode read of acclerometer, gyroscope, and temperature
    2d1a:	6b e8       	ldi	r22, 0x8B	; 139
    2d1c:	72 e0       	ldi	r23, 0x02	; 2
    2d1e:	86 ee       	ldi	r24, 0xE6	; 230
    2d20:	95 e0       	ldi	r25, 0x05	; 5
    2d22:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <_ZN5Print7printlnEPKc>
  
  // Read the WHO_AM_I register of the magnetometer, this is a good test of communication
  byte d = readByte(AK8963_ADDRESS, AK8963_WHO_AM_I);  // Read WHO_AM_I register for AK8963
    2d26:	60 e0       	ldi	r22, 0x00	; 0
    2d28:	8c e0       	ldi	r24, 0x0C	; 12
    2d2a:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    2d2e:	c8 2f       	mov	r28, r24
  Serial.print("AK8963 "); Serial.print("I AM "); Serial.print(d, HEX); Serial.print(" I should be "); Serial.println(0x48, HEX);
    2d30:	68 eb       	ldi	r22, 0xB8	; 184
    2d32:	72 e0       	ldi	r23, 0x02	; 2
    2d34:	86 ee       	ldi	r24, 0xE6	; 230
    2d36:	95 e0       	ldi	r25, 0x05	; 5
    2d38:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    2d3c:	67 e4       	ldi	r22, 0x47	; 71
    2d3e:	71 e0       	ldi	r23, 0x01	; 1
    2d40:	86 ee       	ldi	r24, 0xE6	; 230
    2d42:	95 e0       	ldi	r25, 0x05	; 5
    2d44:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    2d48:	40 e1       	ldi	r20, 0x10	; 16
    2d4a:	50 e0       	ldi	r21, 0x00	; 0
    2d4c:	6c 2f       	mov	r22, r28
    2d4e:	86 ee       	ldi	r24, 0xE6	; 230
    2d50:	95 e0       	ldi	r25, 0x05	; 5
    2d52:	0e 94 43 27 	call	0x4e86	; 0x4e86 <_ZN5Print5printEhi>
    2d56:	6d e4       	ldi	r22, 0x4D	; 77
    2d58:	71 e0       	ldi	r23, 0x01	; 1
    2d5a:	86 ee       	ldi	r24, 0xE6	; 230
    2d5c:	95 e0       	ldi	r25, 0x05	; 5
    2d5e:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    2d62:	40 e1       	ldi	r20, 0x10	; 16
    2d64:	50 e0       	ldi	r21, 0x00	; 0
    2d66:	68 e4       	ldi	r22, 0x48	; 72
    2d68:	70 e0       	ldi	r23, 0x00	; 0
    2d6a:	86 ee       	ldi	r24, 0xE6	; 230
    2d6c:	95 e0       	ldi	r25, 0x05	; 5
    2d6e:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <_ZN5Print7printlnEii>
  //display.setCursor(0,40); display.print(0x48, HEX);  
  //display.display();
  //delay(1000); 
  
  // Get magnetometer calibration from AK8963 ROM
  initAK8963(magCalibration); Serial.println("AK8963 initialized for active data mode...."); // Initialize device for active mode read of magnetometer
    2d72:	82 eb       	ldi	r24, 0xB2	; 178
    2d74:	95 e0       	ldi	r25, 0x05	; 5
    2d76:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <_Z10initAK8963Pf>
    2d7a:	60 ec       	ldi	r22, 0xC0	; 192
    2d7c:	72 e0       	ldi	r23, 0x02	; 2
    2d7e:	86 ee       	ldi	r24, 0xE6	; 230
    2d80:	95 e0       	ldi	r25, 0x05	; 5
    2d82:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <_ZN5Print7printlnEPKc>
  
  if(SerialDebug) {
//  Serial.println("Calibration values: ");
  Serial.print("X-Axis sensitivity adjustment value "); Serial.println(magCalibration[0], 2);
    2d86:	6c ee       	ldi	r22, 0xEC	; 236
    2d88:	72 e0       	ldi	r23, 0x02	; 2
    2d8a:	86 ee       	ldi	r24, 0xE6	; 230
    2d8c:	95 e0       	ldi	r25, 0x05	; 5
    2d8e:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    2d92:	c2 eb       	ldi	r28, 0xB2	; 178
    2d94:	d5 e0       	ldi	r29, 0x05	; 5
    2d96:	48 81       	ld	r20, Y
    2d98:	59 81       	ldd	r21, Y+1	; 0x01
    2d9a:	6a 81       	ldd	r22, Y+2	; 0x02
    2d9c:	7b 81       	ldd	r23, Y+3	; 0x03
    2d9e:	22 e0       	ldi	r18, 0x02	; 2
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	86 ee       	ldi	r24, 0xE6	; 230
    2da4:	95 e0       	ldi	r25, 0x05	; 5
    2da6:	0e 94 6e 28 	call	0x50dc	; 0x50dc <_ZN5Print7printlnEdi>
  Serial.print("Y-Axis sensitivity adjustment value "); Serial.println(magCalibration[1], 2);
    2daa:	61 e1       	ldi	r22, 0x11	; 17
    2dac:	73 e0       	ldi	r23, 0x03	; 3
    2dae:	86 ee       	ldi	r24, 0xE6	; 230
    2db0:	95 e0       	ldi	r25, 0x05	; 5
    2db2:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    2db6:	4c 81       	ldd	r20, Y+4	; 0x04
    2db8:	5d 81       	ldd	r21, Y+5	; 0x05
    2dba:	6e 81       	ldd	r22, Y+6	; 0x06
    2dbc:	7f 81       	ldd	r23, Y+7	; 0x07
    2dbe:	22 e0       	ldi	r18, 0x02	; 2
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	86 ee       	ldi	r24, 0xE6	; 230
    2dc4:	95 e0       	ldi	r25, 0x05	; 5
    2dc6:	0e 94 6e 28 	call	0x50dc	; 0x50dc <_ZN5Print7printlnEdi>
  Serial.print("Z-Axis sensitivity adjustment value "); Serial.println(magCalibration[2], 2);
    2dca:	66 e3       	ldi	r22, 0x36	; 54
    2dcc:	73 e0       	ldi	r23, 0x03	; 3
    2dce:	86 ee       	ldi	r24, 0xE6	; 230
    2dd0:	95 e0       	ldi	r25, 0x05	; 5
    2dd2:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    2dd6:	48 85       	ldd	r20, Y+8	; 0x08
    2dd8:	59 85       	ldd	r21, Y+9	; 0x09
    2dda:	6a 85       	ldd	r22, Y+10	; 0x0a
    2ddc:	7b 85       	ldd	r23, Y+11	; 0x0b
    2dde:	22 e0       	ldi	r18, 0x02	; 2
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	86 ee       	ldi	r24, 0xE6	; 230
    2de4:	95 e0       	ldi	r25, 0x05	; 5
    2de6:	0e 94 6e 28 	call	0x50dc	; 0x50dc <_ZN5Print7printlnEdi>
    while(1) ; // Loop forever if communication doesn't happen
  }
  
    
  // Read the WHO_AM_I register of the MPL3115A2, this is a good test of communication
  c = readByte(MPL3115A2_ADDRESS, MPL3115A2_WHO_AM_I);  // Read WHO_AM_I register
    2dea:	6c e0       	ldi	r22, 0x0C	; 12
    2dec:	80 e6       	ldi	r24, 0x60	; 96
    2dee:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    2df2:	c8 2f       	mov	r28, r24
  Serial.print("MPL3115A2 WHO_AM_I returned: 0x");
    2df4:	6b e5       	ldi	r22, 0x5B	; 91
    2df6:	73 e0       	ldi	r23, 0x03	; 3
    2df8:	86 ee       	ldi	r24, 0xE6	; 230
    2dfa:	95 e0       	ldi	r25, 0x05	; 5
    2dfc:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
  Serial.println(c, HEX);
    2e00:	40 e1       	ldi	r20, 0x10	; 16
    2e02:	50 e0       	ldi	r21, 0x00	; 0
    2e04:	6c 2f       	mov	r22, r28
    2e06:	86 ee       	ldi	r24, 0xE6	; 230
    2e08:	95 e0       	ldi	r25, 0x05	; 5
    2e0a:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <_ZN5Print7printlnEhi>
  Serial.println("Should be 0xC4");
    2e0e:	6b e7       	ldi	r22, 0x7B	; 123
    2e10:	73 e0       	ldi	r23, 0x03	; 3
    2e12:	86 ee       	ldi	r24, 0xE6	; 230
    2e14:	95 e0       	ldi	r25, 0x05	; 5
    2e16:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <_ZN5Print7printlnEPKc>
  Serial.println();
    2e1a:	86 ee       	ldi	r24, 0xE6	; 230
    2e1c:	95 e0       	ldi	r25, 0x05	; 5
    2e1e:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <_ZN5Print7printlnEv>
  //display.setCursor(0,30); display.print("I Should Be");
  //display.setCursor(0,40); display.print(0xC4, HEX); 
  //display.display();
  //delay(1000); 
  
    if (c == 0xC4) // WHO_AM_I should always be 0xC4
    2e22:	c4 3c       	cpi	r28, 0xC4	; 196
    2e24:	a9 f5       	brne	.+106    	; 0x2e90 <setup+0x36c>
    2e26:	0e c0       	rjmp	.+28     	; 0x2e44 <setup+0x320>
  //display.display();
  //delay(1000);  
  }
  else
  {
    Serial.print("Could not connect to MPU9250: 0x");
    2e28:	6a e8       	ldi	r22, 0x8A	; 138
    2e2a:	73 e0       	ldi	r23, 0x03	; 3
    2e2c:	86 ee       	ldi	r24, 0xE6	; 230
    2e2e:	95 e0       	ldi	r25, 0x05	; 5
    2e30:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    Serial.println(c, HEX);
    2e34:	40 e1       	ldi	r20, 0x10	; 16
    2e36:	50 e0       	ldi	r21, 0x00	; 0
    2e38:	6c 2f       	mov	r22, r28
    2e3a:	86 ee       	ldi	r24, 0xE6	; 230
    2e3c:	95 e0       	ldi	r25, 0x05	; 5
    2e3e:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <_ZN5Print7printlnEhi>
  //display.setCursor(0,30); display.print("I Should Be");
//display.setCursor(0,40); display.print(0x71, HEX); 
  //display.display();
  //delay(5000); 

  if (c == 0x73) // WHO_AM_I should always be 0x68
    2e42:	ff cf       	rjmp	.-2      	; 0x2e42 <setup+0x31e>
  //delay(1000); 
  
    if (c == 0xC4) // WHO_AM_I should always be 0xC4
  {  
    
    MPL3115A2Reset();                // Start off by resetting all registers to the default
    2e44:	0e 94 81 0c 	call	0x1902	; 0x1902 <_Z14MPL3115A2Resetv>
    initRealTimeMPL3115A2();         // initialize the accelerometer for realtime data acquisition if communication is OK
    2e48:	0e 94 57 0d 	call	0x1aae	; 0x1aae <_Z21initRealTimeMPL3115A2v>
    MPL3115A2SampleRate(SAMPLERATE); // Set oversampling ratio
    2e4c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <SAMPLERATE>
    2e50:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <_Z19MPL3115A2SampleRateh>
    Serial.print("Oversampling Ratio is "); Serial.println(1<<SAMPLERATE);  
    2e54:	6b ea       	ldi	r22, 0xAB	; 171
    2e56:	73 e0       	ldi	r23, 0x03	; 3
    2e58:	86 ee       	ldi	r24, 0xE6	; 230
    2e5a:	95 e0       	ldi	r25, 0x05	; 5
    2e5c:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    2e60:	61 e0       	ldi	r22, 0x01	; 1
    2e62:	70 e0       	ldi	r23, 0x00	; 0
    2e64:	00 90 1c 01 	lds	r0, 0x011C	; 0x80011c <SAMPLERATE>
    2e68:	02 c0       	rjmp	.+4      	; 0x2e6e <setup+0x34a>
    2e6a:	66 0f       	add	r22, r22
    2e6c:	77 1f       	adc	r23, r23
    2e6e:	0a 94       	dec	r0
    2e70:	e2 f7       	brpl	.-8      	; 0x2e6a <setup+0x346>
    2e72:	4a e0       	ldi	r20, 0x0A	; 10
    2e74:	50 e0       	ldi	r21, 0x00	; 0
    2e76:	86 ee       	ldi	r24, 0xE6	; 230
    2e78:	95 e0       	ldi	r25, 0x05	; 5
    2e7a:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <_ZN5Print7printlnEii>
    MPL3115A2enableEventflags();     // Set data ready enable
    2e7e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <_Z25MPL3115A2enableEventflagsv>
    Serial.println("MPL3115A2 event flags enabled...");
    2e82:	62 ec       	ldi	r22, 0xC2	; 194
    2e84:	73 e0       	ldi	r23, 0x03	; 3
    2e86:	86 ee       	ldi	r24, 0xE6	; 230
    2e88:	95 e0       	ldi	r25, 0x05	; 5
    2e8a:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <_ZN5Print7printlnEPKc>
    2e8e:	0d c0       	rjmp	.+26     	; 0x2eaa <setup+0x386>
    //display.display();
    //delay(1000);
  }
  else
  {
    Serial.print("Could not connect to MPL3115A2: 0x");
    2e90:	63 ee       	ldi	r22, 0xE3	; 227
    2e92:	73 e0       	ldi	r23, 0x03	; 3
    2e94:	86 ee       	ldi	r24, 0xE6	; 230
    2e96:	95 e0       	ldi	r25, 0x05	; 5
    2e98:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    Serial.println(c, HEX);
    2e9c:	40 e1       	ldi	r20, 0x10	; 16
    2e9e:	50 e0       	ldi	r21, 0x00	; 0
    2ea0:	6c 2f       	mov	r22, r28
    2ea2:	86 ee       	ldi	r24, 0xE6	; 230
    2ea4:	95 e0       	ldi	r25, 0x05	; 5
    2ea6:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <_ZN5Print7printlnEhi>
    //display.setCursor(0,10); display.print("Error! on 0x"); display.print(c, HEX);
    //display.display();
    
    //while(1) ; // Loop forever if communication doesn't happen
  }
}
    2eaa:	df 91       	pop	r29
    2eac:	cf 91       	pop	r28
    2eae:	08 95       	ret

00002eb0 <_Z21MPL3115A2readAltitudev>:
   }
   
}

void MPL3115A2readAltitude() // Get altitude in meters and temperature in centigrade
{
    2eb0:	8f 92       	push	r8
    2eb2:	9f 92       	push	r9
    2eb4:	af 92       	push	r10
    2eb6:	bf 92       	push	r11
    2eb8:	cf 92       	push	r12
    2eba:	df 92       	push	r13
    2ebc:	ef 92       	push	r14
    2ebe:	ff 92       	push	r15
    2ec0:	0f 93       	push	r16
    2ec2:	1f 93       	push	r17
    2ec4:	cf 93       	push	r28
    2ec6:	df 93       	push	r29
    2ec8:	00 d0       	rcall	.+0      	; 0x2eca <_Z21MPL3115A2readAltitudev+0x1a>
    2eca:	00 d0       	rcall	.+0      	; 0x2ecc <_Z21MPL3115A2readAltitudev+0x1c>
    2ecc:	1f 92       	push	r1
    2ece:	cd b7       	in	r28, 0x3d	; 61
    2ed0:	de b7       	in	r29, 0x3e	; 62
// while((readByte(MPL3115A2_ADDRESS, MPL3115A2_INT_SOURCE) & 0x80) == 0); // Check that the interrupt source is a data ready interrupt
// or use a polling method
// Check data read status; if PTDR (bit 4) not set, then
// toggle OST bit to cause sensor to immediately take a reading
// Setting the one shot toggle is the way to get faster than 1 Hz data read rates
 while ((readByte(MPL3115A2_ADDRESS, MPL3115A2_STATUS) & 0x08) == 0);  MPL3115A2toggleOneShot(); 
    2ed2:	60 e0       	ldi	r22, 0x00	; 0
    2ed4:	80 e6       	ldi	r24, 0x60	; 96
    2ed6:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    2eda:	83 ff       	sbrs	r24, 3
    2edc:	fa cf       	rjmp	.-12     	; 0x2ed2 <_Z21MPL3115A2readAltitudev+0x22>
    2ede:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_Z22MPL3115A2toggleOneShotv>
  
  readBytes(MPL3115A2_ADDRESS, MPL3115A2_OUT_P_MSB, 5, &rawData[0]);  // Read the five raw data registers into data array
    2ee2:	9e 01       	movw	r18, r28
    2ee4:	2f 5f       	subi	r18, 0xFF	; 255
    2ee6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee8:	45 e0       	ldi	r20, 0x05	; 5
    2eea:	61 e0       	ldi	r22, 0x01	; 1
    2eec:	80 e6       	ldi	r24, 0x60	; 96
    2eee:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_Z9readByteshhhPh>

// Altutude bytes-whole altitude contained defined by msb, csb, and first two bits of lsb, fraction by next two bits of lsb
  uint8_t msbA = rawData[0];
    2ef2:	29 81       	ldd	r18, Y+1	; 0x01
  uint8_t csbA = rawData[1];
    2ef4:	6a 81       	ldd	r22, Y+2	; 0x02
  uint8_t lsbA = rawData[2];
    2ef6:	1b 81       	ldd	r17, Y+3	; 0x03
// Temperature bytes
  uint8_t msbT = rawData[3];
    2ef8:	fc 80       	ldd	r15, Y+4	; 0x04
  uint8_t lsbT = rawData[4];
    2efa:	0d 81       	ldd	r16, Y+5	; 0x05
 
 // Calculate altitude, check for negative sign in altimeter data
 long foo = 0;
 if(msbA > 0x7F) {
    2efc:	22 23       	and	r18, r18
    2efe:	0c f0       	brlt	.+2      	; 0x2f02 <_Z21MPL3115A2readAltitudev+0x52>
    2f00:	43 c0       	rjmp	.+134    	; 0x2f88 <_Z21MPL3115A2readAltitudev+0xd8>
   foo = ~((long)msbA << 16 | (long)csbA << 8 | (long)lsbA) + 1; // 2's complement the data
    2f02:	86 2f       	mov	r24, r22
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	a0 e0       	ldi	r26, 0x00	; 0
    2f08:	b0 e0       	ldi	r27, 0x00	; 0
    2f0a:	ba 2f       	mov	r27, r26
    2f0c:	a9 2f       	mov	r26, r25
    2f0e:	98 2f       	mov	r25, r24
    2f10:	88 27       	eor	r24, r24
    2f12:	a2 2b       	or	r26, r18
    2f14:	81 2b       	or	r24, r17
    2f16:	b0 95       	com	r27
    2f18:	a0 95       	com	r26
    2f1a:	90 95       	com	r25
    2f1c:	81 95       	neg	r24
    2f1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f20:	af 4f       	sbci	r26, 0xFF	; 255
    2f22:	bf 4f       	sbci	r27, 0xFF	; 255
   altitude = (float) (foo >> 8) + (float) ((lsbA >> 4)/16.0); // Whole number plus fraction altitude in meters for negative altitude
    2f24:	69 2f       	mov	r22, r25
    2f26:	7a 2f       	mov	r23, r26
    2f28:	8b 2f       	mov	r24, r27
    2f2a:	99 27       	eor	r25, r25
    2f2c:	87 fd       	sbrc	r24, 7
    2f2e:	9a 95       	dec	r25
    2f30:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    2f34:	4b 01       	movw	r8, r22
    2f36:	5c 01       	movw	r10, r24
    2f38:	81 2f       	mov	r24, r17
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	95 95       	asr	r25
    2f3e:	87 95       	ror	r24
    2f40:	95 95       	asr	r25
    2f42:	87 95       	ror	r24
    2f44:	95 95       	asr	r25
    2f46:	87 95       	ror	r24
    2f48:	95 95       	asr	r25
    2f4a:	87 95       	ror	r24
    2f4c:	bc 01       	movw	r22, r24
    2f4e:	99 0f       	add	r25, r25
    2f50:	88 0b       	sbc	r24, r24
    2f52:	99 0b       	sbc	r25, r25
    2f54:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    2f58:	20 e0       	ldi	r18, 0x00	; 0
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	40 e8       	ldi	r20, 0x80	; 128
    2f5e:	5d e3       	ldi	r21, 0x3D	; 61
    2f60:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    2f64:	9b 01       	movw	r18, r22
    2f66:	ac 01       	movw	r20, r24
    2f68:	c5 01       	movw	r24, r10
    2f6a:	b4 01       	movw	r22, r8
    2f6c:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
   altitude *= -1.;
    2f70:	dc 01       	movw	r26, r24
    2f72:	cb 01       	movw	r24, r22
    2f74:	b0 58       	subi	r27, 0x80	; 128
    2f76:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <altitude>
    2f7a:	90 93 d5 05 	sts	0x05D5, r25	; 0x8005d5 <altitude+0x1>
    2f7e:	a0 93 d6 05 	sts	0x05D6, r26	; 0x8005d6 <altitude+0x2>
    2f82:	b0 93 d7 05 	sts	0x05D7, r27	; 0x8005d7 <altitude+0x3>
    2f86:	2e c0       	rjmp	.+92     	; 0x2fe4 <_Z21MPL3115A2readAltitudev+0x134>
 }
 else {
   altitude = (float) ( (msbA << 8) | csbA) + (float) ((lsbA >> 4)/16.0);  // Whole number plus fraction altitude in meters
    2f88:	70 e0       	ldi	r23, 0x00	; 0
    2f8a:	72 2b       	or	r23, r18
    2f8c:	07 2e       	mov	r0, r23
    2f8e:	00 0c       	add	r0, r0
    2f90:	88 0b       	sbc	r24, r24
    2f92:	99 0b       	sbc	r25, r25
    2f94:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    2f98:	4b 01       	movw	r8, r22
    2f9a:	5c 01       	movw	r10, r24
    2f9c:	81 2f       	mov	r24, r17
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	95 95       	asr	r25
    2fa2:	87 95       	ror	r24
    2fa4:	95 95       	asr	r25
    2fa6:	87 95       	ror	r24
    2fa8:	95 95       	asr	r25
    2faa:	87 95       	ror	r24
    2fac:	95 95       	asr	r25
    2fae:	87 95       	ror	r24
    2fb0:	bc 01       	movw	r22, r24
    2fb2:	99 0f       	add	r25, r25
    2fb4:	88 0b       	sbc	r24, r24
    2fb6:	99 0b       	sbc	r25, r25
    2fb8:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	40 e8       	ldi	r20, 0x80	; 128
    2fc2:	5d e3       	ldi	r21, 0x3D	; 61
    2fc4:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    2fc8:	9b 01       	movw	r18, r22
    2fca:	ac 01       	movw	r20, r24
    2fcc:	c5 01       	movw	r24, r10
    2fce:	b4 01       	movw	r22, r8
    2fd0:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    2fd4:	60 93 d4 05 	sts	0x05D4, r22	; 0x8005d4 <altitude>
    2fd8:	70 93 d5 05 	sts	0x05D5, r23	; 0x8005d5 <altitude+0x1>
    2fdc:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <altitude+0x2>
    2fe0:	90 93 d7 05 	sts	0x05D7, r25	; 0x8005d7 <altitude+0x3>
 }

// Calculate temperature, check for negative sign
if(msbT > 0x7F) {
    2fe4:	ff 20       	and	r15, r15
    2fe6:	d4 f5       	brge	.+116    	; 0x305c <_Z21MPL3115A2readAltitudev+0x1ac>
 foo = ~(msbT << 8 | lsbT) + 1 ; // 2's complement
    2fe8:	10 e0       	ldi	r17, 0x00	; 0
    2fea:	b8 01       	movw	r22, r16
    2fec:	7f 29       	or	r23, r15
    2fee:	71 95       	neg	r23
    2ff0:	61 95       	neg	r22
    2ff2:	71 09       	sbc	r23, r1
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	77 0f       	add	r23, r23
    2ff8:	aa 0b       	sbc	r26, r26
    2ffa:	bb 0b       	sbc	r27, r27
 temperature = (float) (foo >> 8) + (float)((lsbT >> 4)/16.0); // add whole and fractional degrees Centigrade
    2ffc:	69 2f       	mov	r22, r25
    2ffe:	7a 2f       	mov	r23, r26
    3000:	8b 2f       	mov	r24, r27
    3002:	99 27       	eor	r25, r25
    3004:	87 fd       	sbrc	r24, 7
    3006:	9a 95       	dec	r25
    3008:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    300c:	6b 01       	movw	r12, r22
    300e:	7c 01       	movw	r14, r24
    3010:	15 95       	asr	r17
    3012:	07 95       	ror	r16
    3014:	15 95       	asr	r17
    3016:	07 95       	ror	r16
    3018:	15 95       	asr	r17
    301a:	07 95       	ror	r16
    301c:	15 95       	asr	r17
    301e:	07 95       	ror	r16
    3020:	b8 01       	movw	r22, r16
    3022:	11 0f       	add	r17, r17
    3024:	88 0b       	sbc	r24, r24
    3026:	99 0b       	sbc	r25, r25
    3028:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    302c:	20 e0       	ldi	r18, 0x00	; 0
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	40 e8       	ldi	r20, 0x80	; 128
    3032:	5d e3       	ldi	r21, 0x3D	; 61
    3034:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3038:	9b 01       	movw	r18, r22
    303a:	ac 01       	movw	r20, r24
    303c:	c7 01       	movw	r24, r14
    303e:	b6 01       	movw	r22, r12
    3040:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
 temperature *= -1.;
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	b0 58       	subi	r27, 0x80	; 128
    304a:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <temperature>
    304e:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <temperature+0x1>
    3052:	a0 93 8a 05 	sts	0x058A, r26	; 0x80058a <temperature+0x2>
    3056:	b0 93 8b 05 	sts	0x058B, r27	; 0x80058b <temperature+0x3>
    305a:	2b c0       	rjmp	.+86     	; 0x30b2 <_Z21MPL3115A2readAltitudev+0x202>
 }
 else {
   temperature = (float) (msbT) + (float)((lsbT >> 4)/16.0); // add whole and fractional degrees Centigrade
    305c:	6f 2d       	mov	r22, r15
    305e:	70 e0       	ldi	r23, 0x00	; 0
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	0e 94 01 21 	call	0x4202	; 0x4202 <__floatunsisf>
    3068:	6b 01       	movw	r12, r22
    306a:	7c 01       	movw	r14, r24
    306c:	10 e0       	ldi	r17, 0x00	; 0
    306e:	15 95       	asr	r17
    3070:	07 95       	ror	r16
    3072:	15 95       	asr	r17
    3074:	07 95       	ror	r16
    3076:	15 95       	asr	r17
    3078:	07 95       	ror	r16
    307a:	15 95       	asr	r17
    307c:	07 95       	ror	r16
    307e:	b8 01       	movw	r22, r16
    3080:	11 0f       	add	r17, r17
    3082:	88 0b       	sbc	r24, r24
    3084:	99 0b       	sbc	r25, r25
    3086:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    308a:	20 e0       	ldi	r18, 0x00	; 0
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	40 e8       	ldi	r20, 0x80	; 128
    3090:	5d e3       	ldi	r21, 0x3D	; 61
    3092:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3096:	9b 01       	movw	r18, r22
    3098:	ac 01       	movw	r20, r24
    309a:	c7 01       	movw	r24, r14
    309c:	b6 01       	movw	r22, r12
    309e:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    30a2:	60 93 88 05 	sts	0x0588, r22	; 0x800588 <temperature>
    30a6:	70 93 89 05 	sts	0x0589, r23	; 0x800589 <temperature+0x1>
    30aa:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <temperature+0x2>
    30ae:	90 93 8b 05 	sts	0x058B, r25	; 0x80058b <temperature+0x3>
 }
}
    30b2:	0f 90       	pop	r0
    30b4:	0f 90       	pop	r0
    30b6:	0f 90       	pop	r0
    30b8:	0f 90       	pop	r0
    30ba:	0f 90       	pop	r0
    30bc:	df 91       	pop	r29
    30be:	cf 91       	pop	r28
    30c0:	1f 91       	pop	r17
    30c2:	0f 91       	pop	r16
    30c4:	ff 90       	pop	r15
    30c6:	ef 90       	pop	r14
    30c8:	df 90       	pop	r13
    30ca:	cf 90       	pop	r12
    30cc:	bf 90       	pop	r11
    30ce:	af 90       	pop	r10
    30d0:	9f 90       	pop	r9
    30d2:	8f 90       	pop	r8
    30d4:	08 95       	ret

000030d6 <_Z21MPL3115A2readPressurev>:

void MPL3115A2readPressure()
{
    30d6:	8f 92       	push	r8
    30d8:	9f 92       	push	r9
    30da:	af 92       	push	r10
    30dc:	bf 92       	push	r11
    30de:	ef 92       	push	r14
    30e0:	ff 92       	push	r15
    30e2:	0f 93       	push	r16
    30e4:	1f 93       	push	r17
    30e6:	cf 93       	push	r28
    30e8:	df 93       	push	r29
    30ea:	00 d0       	rcall	.+0      	; 0x30ec <_Z21MPL3115A2readPressurev+0x16>
    30ec:	00 d0       	rcall	.+0      	; 0x30ee <_Z21MPL3115A2readPressurev+0x18>
    30ee:	1f 92       	push	r1
    30f0:	cd b7       	in	r28, 0x3d	; 61
    30f2:	de b7       	in	r29, 0x3e	; 62
// while((readByte(MPL3115A2_ADDRESS, MPL3115A2_INT_SOURCE) & 0x80) == 0); // Check that the interrupt source is a data ready interrupt
// or use a polling method
// Check data read status; if PTDR (bit 4) not set, then
// toggle OST bit to cause sensor to immediately take a reading
// Setting the one shot toggle is the way to get faster than 1 Hz data read rates
 while ((readByte(MPL3115A2_ADDRESS, MPL3115A2_STATUS) & 0x08) == 0);  MPL3115A2toggleOneShot(); 
    30f4:	60 e0       	ldi	r22, 0x00	; 0
    30f6:	80 e6       	ldi	r24, 0x60	; 96
    30f8:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    30fc:	83 ff       	sbrs	r24, 3
    30fe:	fa cf       	rjmp	.-12     	; 0x30f4 <_Z21MPL3115A2readPressurev+0x1e>
    3100:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_Z22MPL3115A2toggleOneShotv>
 
  readBytes(MPL3115A2_ADDRESS, MPL3115A2_OUT_P_MSB, 5, &rawData[0]);  // Read the five raw data registers into data array
    3104:	9e 01       	movw	r18, r28
    3106:	2f 5f       	subi	r18, 0xFF	; 255
    3108:	3f 4f       	sbci	r19, 0xFF	; 255
    310a:	45 e0       	ldi	r20, 0x05	; 5
    310c:	61 e0       	ldi	r22, 0x01	; 1
    310e:	80 e6       	ldi	r24, 0x60	; 96
    3110:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_Z9readByteshhhPh>

// Pressure bytes
  uint8_t msbP = rawData[0];
  uint8_t csbP = rawData[1];
  uint8_t lsbP = rawData[2];
    3114:	0b 81       	ldd	r16, Y+3	; 0x03
// Temperature bytes
  uint8_t msbT = rawData[3];
    3116:	ec 80       	ldd	r14, Y+4	; 0x04
  uint8_t lsbT = rawData[4]; 
    3118:	fd 80       	ldd	r15, Y+5	; 0x05
 
  long pressure_whole =   ((long)msbP << 16 |  (long)csbP << 8 |  (long)lsbP) ; // Construct whole number pressure
    311a:	29 81       	ldd	r18, Y+1	; 0x01
    311c:	6a 81       	ldd	r22, Y+2	; 0x02
    311e:	86 2f       	mov	r24, r22
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	a0 e0       	ldi	r26, 0x00	; 0
    3124:	b0 e0       	ldi	r27, 0x00	; 0
    3126:	ba 2f       	mov	r27, r26
    3128:	a9 2f       	mov	r26, r25
    312a:	98 2f       	mov	r25, r24
    312c:	88 27       	eor	r24, r24
    312e:	a2 2b       	or	r26, r18
    3130:	80 2b       	or	r24, r16
  pressure_whole >>= 6; // Only two most significant bits of lsbP contribute to whole pressure; its an 18-bit number
 
  lsbP &= 0x30; // Keep only bits 5 and 6, the fractional pressure
    3132:	00 73       	andi	r16, 0x30	; 48
  lsbP >>= 4; // Shift to get the fractional pressure in terms of quarters of a Pascal
    3134:	10 e0       	ldi	r17, 0x00	; 0
    3136:	15 95       	asr	r17
    3138:	07 95       	ror	r16
    313a:	15 95       	asr	r17
    313c:	07 95       	ror	r16
    313e:	15 95       	asr	r17
    3140:	07 95       	ror	r16
    3142:	15 95       	asr	r17
    3144:	07 95       	ror	r16
// Temperature bytes
  uint8_t msbT = rawData[3];
  uint8_t lsbT = rawData[4]; 
 
  long pressure_whole =   ((long)msbP << 16 |  (long)csbP << 8 |  (long)lsbP) ; // Construct whole number pressure
  pressure_whole >>= 6; // Only two most significant bits of lsbP contribute to whole pressure; its an 18-bit number
    3146:	bc 01       	movw	r22, r24
    3148:	cd 01       	movw	r24, r26
    314a:	68 94       	set
    314c:	15 f8       	bld	r1, 5
    314e:	95 95       	asr	r25
    3150:	87 95       	ror	r24
    3152:	77 95       	ror	r23
    3154:	67 95       	ror	r22
    3156:	16 94       	lsr	r1
    3158:	d1 f7       	brne	.-12     	; 0x314e <_Z21MPL3115A2readPressurev+0x78>
 
  lsbP &= 0x30; // Keep only bits 5 and 6, the fractional pressure
  lsbP >>= 4; // Shift to get the fractional pressure in terms of quarters of a Pascal
  float pressure_frac = (float) lsbP/4.0; // Convert numbers of fractional quarters to fractional pressure n Pasacl

  pressure = (float) (pressure_whole) + pressure_frac; // Combine whole and fractional parts to get entire pressure in Pascal
    315a:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    315e:	4b 01       	movw	r8, r22
    3160:	5c 01       	movw	r10, r24
  long pressure_whole =   ((long)msbP << 16 |  (long)csbP << 8 |  (long)lsbP) ; // Construct whole number pressure
  pressure_whole >>= 6; // Only two most significant bits of lsbP contribute to whole pressure; its an 18-bit number
 
  lsbP &= 0x30; // Keep only bits 5 and 6, the fractional pressure
  lsbP >>= 4; // Shift to get the fractional pressure in terms of quarters of a Pascal
  float pressure_frac = (float) lsbP/4.0; // Convert numbers of fractional quarters to fractional pressure n Pasacl
    3162:	b8 01       	movw	r22, r16
    3164:	80 e0       	ldi	r24, 0x00	; 0
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	0e 94 01 21 	call	0x4202	; 0x4202 <__floatunsisf>
    316c:	20 e0       	ldi	r18, 0x00	; 0
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	40 e8       	ldi	r20, 0x80	; 128
    3172:	5e e3       	ldi	r21, 0x3E	; 62
    3174:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3178:	9b 01       	movw	r18, r22
    317a:	ac 01       	movw	r20, r24

  pressure = (float) (pressure_whole) + pressure_frac; // Combine whole and fractional parts to get entire pressure in Pascal
    317c:	c5 01       	movw	r24, r10
    317e:	b4 01       	movw	r22, r8
    3180:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    3184:	60 93 d0 05 	sts	0x05D0, r22	; 0x8005d0 <pressure>
    3188:	70 93 d1 05 	sts	0x05D1, r23	; 0x8005d1 <pressure+0x1>
    318c:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <pressure+0x2>
    3190:	90 93 d3 05 	sts	0x05D3, r25	; 0x8005d3 <pressure+0x3>

// Calculate temperature, check for negative sign
long foo = 0;
if(msbT > 0x7F) { // Is the most significant bit a 1? Then its a negative number in two's complement form
    3194:	ee 20       	and	r14, r14
    3196:	f4 f5       	brge	.+124    	; 0x3214 <_Z21MPL3115A2readPressurev+0x13e>
 foo = ~((long) msbT << 8 | lsbT) + 1 ; // 2's complement
    3198:	8f 2d       	mov	r24, r15
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	a0 e0       	ldi	r26, 0x00	; 0
    319e:	b0 e0       	ldi	r27, 0x00	; 0
    31a0:	9e 29       	or	r25, r14
    31a2:	b0 95       	com	r27
    31a4:	a0 95       	com	r26
    31a6:	90 95       	com	r25
    31a8:	81 95       	neg	r24
    31aa:	9f 4f       	sbci	r25, 0xFF	; 255
    31ac:	af 4f       	sbci	r26, 0xFF	; 255
    31ae:	bf 4f       	sbci	r27, 0xFF	; 255
 temperature = (float) ((foo >> 8) + ((lsbT >> 4)/16.0)); // add whole and fractional degrees Centigrade
    31b0:	69 2f       	mov	r22, r25
    31b2:	7a 2f       	mov	r23, r26
    31b4:	8b 2f       	mov	r24, r27
    31b6:	99 27       	eor	r25, r25
    31b8:	87 fd       	sbrc	r24, 7
    31ba:	9a 95       	dec	r25
    31bc:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    31c0:	4b 01       	movw	r8, r22
    31c2:	5c 01       	movw	r10, r24
    31c4:	8f 2d       	mov	r24, r15
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	95 95       	asr	r25
    31ca:	87 95       	ror	r24
    31cc:	95 95       	asr	r25
    31ce:	87 95       	ror	r24
    31d0:	95 95       	asr	r25
    31d2:	87 95       	ror	r24
    31d4:	95 95       	asr	r25
    31d6:	87 95       	ror	r24
    31d8:	bc 01       	movw	r22, r24
    31da:	99 0f       	add	r25, r25
    31dc:	88 0b       	sbc	r24, r24
    31de:	99 0b       	sbc	r25, r25
    31e0:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	40 e8       	ldi	r20, 0x80	; 128
    31ea:	5d e3       	ldi	r21, 0x3D	; 61
    31ec:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    31f0:	9b 01       	movw	r18, r22
    31f2:	ac 01       	movw	r20, r24
    31f4:	c5 01       	movw	r24, r10
    31f6:	b4 01       	movw	r22, r8
    31f8:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
 temperature *= -1.;
    31fc:	dc 01       	movw	r26, r24
    31fe:	cb 01       	movw	r24, r22
    3200:	b0 58       	subi	r27, 0x80	; 128
    3202:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <temperature>
    3206:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <temperature+0x1>
    320a:	a0 93 8a 05 	sts	0x058A, r26	; 0x80058a <temperature+0x2>
    320e:	b0 93 8b 05 	sts	0x058B, r27	; 0x80058b <temperature+0x3>
    3212:	2c c0       	rjmp	.+88     	; 0x326c <_Z21MPL3115A2readPressurev+0x196>
 }
 else {
   temperature = (float) (msbT) + (float)((lsbT >> 4)/16.0); // add whole and fractional degrees Centigrade
    3214:	6e 2d       	mov	r22, r14
    3216:	70 e0       	ldi	r23, 0x00	; 0
    3218:	80 e0       	ldi	r24, 0x00	; 0
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	0e 94 01 21 	call	0x4202	; 0x4202 <__floatunsisf>
    3220:	4b 01       	movw	r8, r22
    3222:	5c 01       	movw	r10, r24
    3224:	8f 2d       	mov	r24, r15
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	95 95       	asr	r25
    322a:	87 95       	ror	r24
    322c:	95 95       	asr	r25
    322e:	87 95       	ror	r24
    3230:	95 95       	asr	r25
    3232:	87 95       	ror	r24
    3234:	95 95       	asr	r25
    3236:	87 95       	ror	r24
    3238:	bc 01       	movw	r22, r24
    323a:	99 0f       	add	r25, r25
    323c:	88 0b       	sbc	r24, r24
    323e:	99 0b       	sbc	r25, r25
    3240:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	40 e8       	ldi	r20, 0x80	; 128
    324a:	5d e3       	ldi	r21, 0x3D	; 61
    324c:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3250:	9b 01       	movw	r18, r22
    3252:	ac 01       	movw	r20, r24
    3254:	c5 01       	movw	r24, r10
    3256:	b4 01       	movw	r22, r8
    3258:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    325c:	60 93 88 05 	sts	0x0588, r22	; 0x800588 <temperature>
    3260:	70 93 89 05 	sts	0x0589, r23	; 0x800589 <temperature+0x1>
    3264:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <temperature+0x2>
    3268:	90 93 8b 05 	sts	0x058B, r25	; 0x80058b <temperature+0x3>
 }
}
    326c:	0f 90       	pop	r0
    326e:	0f 90       	pop	r0
    3270:	0f 90       	pop	r0
    3272:	0f 90       	pop	r0
    3274:	0f 90       	pop	r0
    3276:	df 91       	pop	r29
    3278:	cf 91       	pop	r28
    327a:	1f 91       	pop	r17
    327c:	0f 91       	pop	r16
    327e:	ff 90       	pop	r15
    3280:	ef 90       	pop	r14
    3282:	bf 90       	pop	r11
    3284:	af 90       	pop	r10
    3286:	9f 90       	pop	r9
    3288:	8f 90       	pop	r8
    328a:	08 95       	ret

0000328c <loop>:
    //while(1) ; // Loop forever if communication doesn't happen
  }
}

void loop()
{  
    328c:	4f 92       	push	r4
    328e:	5f 92       	push	r5
    3290:	6f 92       	push	r6
    3292:	7f 92       	push	r7
    3294:	8f 92       	push	r8
    3296:	9f 92       	push	r9
    3298:	af 92       	push	r10
    329a:	bf 92       	push	r11
    329c:	cf 92       	push	r12
    329e:	df 92       	push	r13
    32a0:	ef 92       	push	r14
    32a2:	ff 92       	push	r15
    32a4:	0f 93       	push	r16
    32a6:	1f 93       	push	r17
    32a8:	cf 93       	push	r28
    32aa:	df 93       	push	r29
    32ac:	cd b7       	in	r28, 0x3d	; 61
    32ae:	de b7       	in	r29, 0x3e	; 62
    32b0:	6c 97       	sbiw	r28, 0x1c	; 28
    32b2:	0f b6       	in	r0, 0x3f	; 63
    32b4:	f8 94       	cli
    32b6:	de bf       	out	0x3e, r29	; 62
    32b8:	0f be       	out	0x3f, r0	; 63
    32ba:	cd bf       	out	0x3d, r28	; 61
  // If intPin goes high, all data registers have new data
  if (readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01) {  // On interrupt, check if data ready interrupt
    32bc:	6a e3       	ldi	r22, 0x3A	; 58
    32be:	88 e6       	ldi	r24, 0x68	; 104
    32c0:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z8readBytehh>
    32c4:	80 ff       	sbrs	r24, 0
    32c6:	65 c1       	rjmp	.+714    	; 0x3592 <loop+0x306>
    readAccelData(accelCount);  // Read the x/y/z adc values
    32c8:	8a ec       	ldi	r24, 0xCA	; 202
    32ca:	95 e0       	ldi	r25, 0x05	; 5
    32cc:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <_Z13readAccelDataPi>
    getAres();
    32d0:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z7getAresv>
    
    // Now we'll calculate the accleration value into actual g's
    ax = (float)accelCount[0]*aRes - accelBias[0];  // get actual g value, this depends on scale being set
    32d4:	c0 90 e0 05 	lds	r12, 0x05E0	; 0x8005e0 <aRes>
    32d8:	d0 90 e1 05 	lds	r13, 0x05E1	; 0x8005e1 <aRes+0x1>
    32dc:	e0 90 e2 05 	lds	r14, 0x05E2	; 0x8005e2 <aRes+0x2>
    32e0:	f0 90 e3 05 	lds	r15, 0x05E3	; 0x8005e3 <aRes+0x3>
    32e4:	0a ec       	ldi	r16, 0xCA	; 202
    32e6:	15 e0       	ldi	r17, 0x05	; 5
    32e8:	d8 01       	movw	r26, r16
    32ea:	6d 91       	ld	r22, X+
    32ec:	7c 91       	ld	r23, X
    32ee:	07 2e       	mov	r0, r23
    32f0:	00 0c       	add	r0, r0
    32f2:	88 0b       	sbc	r24, r24
    32f4:	99 0b       	sbc	r25, r25
    32f6:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    32fa:	a7 01       	movw	r20, r14
    32fc:	96 01       	movw	r18, r12
    32fe:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3302:	0f 2e       	mov	r0, r31
    3304:	fe e8       	ldi	r31, 0x8E	; 142
    3306:	af 2e       	mov	r10, r31
    3308:	f5 e0       	ldi	r31, 0x05	; 5
    330a:	bf 2e       	mov	r11, r31
    330c:	f0 2d       	mov	r31, r0
    330e:	f5 01       	movw	r30, r10
    3310:	20 81       	ld	r18, Z
    3312:	31 81       	ldd	r19, Z+1	; 0x01
    3314:	42 81       	ldd	r20, Z+2	; 0x02
    3316:	53 81       	ldd	r21, Z+3	; 0x03
    3318:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    331c:	60 93 34 05 	sts	0x0534, r22	; 0x800534 <ax>
    3320:	70 93 35 05 	sts	0x0535, r23	; 0x800535 <ax+0x1>
    3324:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <ax+0x2>
    3328:	90 93 37 05 	sts	0x0537, r25	; 0x800537 <ax+0x3>
    ay = (float)accelCount[1]*aRes - accelBias[1];   
    332c:	d8 01       	movw	r26, r16
    332e:	12 96       	adiw	r26, 0x02	; 2
    3330:	6d 91       	ld	r22, X+
    3332:	7c 91       	ld	r23, X
    3334:	13 97       	sbiw	r26, 0x03	; 3
    3336:	07 2e       	mov	r0, r23
    3338:	00 0c       	add	r0, r0
    333a:	88 0b       	sbc	r24, r24
    333c:	99 0b       	sbc	r25, r25
    333e:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    3342:	9b 01       	movw	r18, r22
    3344:	ac 01       	movw	r20, r24
    3346:	c7 01       	movw	r24, r14
    3348:	b6 01       	movw	r22, r12
    334a:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    334e:	f5 01       	movw	r30, r10
    3350:	24 81       	ldd	r18, Z+4	; 0x04
    3352:	35 81       	ldd	r19, Z+5	; 0x05
    3354:	46 81       	ldd	r20, Z+6	; 0x06
    3356:	57 81       	ldd	r21, Z+7	; 0x07
    3358:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    335c:	60 93 30 05 	sts	0x0530, r22	; 0x800530 <ay>
    3360:	70 93 31 05 	sts	0x0531, r23	; 0x800531 <ay+0x1>
    3364:	80 93 32 05 	sts	0x0532, r24	; 0x800532 <ay+0x2>
    3368:	90 93 33 05 	sts	0x0533, r25	; 0x800533 <ay+0x3>
    az = (float)accelCount[2]*aRes - accelBias[2];  
    336c:	d8 01       	movw	r26, r16
    336e:	14 96       	adiw	r26, 0x04	; 4
    3370:	6d 91       	ld	r22, X+
    3372:	7c 91       	ld	r23, X
    3374:	15 97       	sbiw	r26, 0x05	; 5
    3376:	07 2e       	mov	r0, r23
    3378:	00 0c       	add	r0, r0
    337a:	88 0b       	sbc	r24, r24
    337c:	99 0b       	sbc	r25, r25
    337e:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    3382:	9b 01       	movw	r18, r22
    3384:	ac 01       	movw	r20, r24
    3386:	c7 01       	movw	r24, r14
    3388:	b6 01       	movw	r22, r12
    338a:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    338e:	f5 01       	movw	r30, r10
    3390:	20 85       	ldd	r18, Z+8	; 0x08
    3392:	31 85       	ldd	r19, Z+9	; 0x09
    3394:	42 85       	ldd	r20, Z+10	; 0x0a
    3396:	53 85       	ldd	r21, Z+11	; 0x0b
    3398:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    339c:	60 93 2c 05 	sts	0x052C, r22	; 0x80052c <az>
    33a0:	70 93 2d 05 	sts	0x052D, r23	; 0x80052d <az+0x1>
    33a4:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <az+0x2>
    33a8:	90 93 2f 05 	sts	0x052F, r25	; 0x80052f <az+0x3>
   
    readGyroData(gyroCount);  // Read the x/y/z adc values
    33ac:	84 ec       	ldi	r24, 0xC4	; 196
    33ae:	95 e0       	ldi	r25, 0x05	; 5
    33b0:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_Z12readGyroDataPi>
    getGres();
    33b4:	0e 94 25 01 	call	0x24a	; 0x24a <_Z7getGresv>
 
    // Calculate the gyro value into actual degrees per second
    gx = (float)gyroCount[0]*gRes;  // get actual gyro value, this depends on scale being set
    33b8:	c0 90 dc 05 	lds	r12, 0x05DC	; 0x8005dc <gRes>
    33bc:	d0 90 dd 05 	lds	r13, 0x05DD	; 0x8005dd <gRes+0x1>
    33c0:	e0 90 de 05 	lds	r14, 0x05DE	; 0x8005de <gRes+0x2>
    33c4:	f0 90 df 05 	lds	r15, 0x05DF	; 0x8005df <gRes+0x3>
    33c8:	04 ec       	ldi	r16, 0xC4	; 196
    33ca:	15 e0       	ldi	r17, 0x05	; 5
    33cc:	d8 01       	movw	r26, r16
    33ce:	6d 91       	ld	r22, X+
    33d0:	7c 91       	ld	r23, X
    33d2:	07 2e       	mov	r0, r23
    33d4:	00 0c       	add	r0, r0
    33d6:	88 0b       	sbc	r24, r24
    33d8:	99 0b       	sbc	r25, r25
    33da:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    33de:	a7 01       	movw	r20, r14
    33e0:	96 01       	movw	r18, r12
    33e2:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    33e6:	60 93 28 05 	sts	0x0528, r22	; 0x800528 <gx>
    33ea:	70 93 29 05 	sts	0x0529, r23	; 0x800529 <gx+0x1>
    33ee:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <gx+0x2>
    33f2:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <gx+0x3>
    gy = (float)gyroCount[1]*gRes;  
    33f6:	f8 01       	movw	r30, r16
    33f8:	62 81       	ldd	r22, Z+2	; 0x02
    33fa:	73 81       	ldd	r23, Z+3	; 0x03
    33fc:	07 2e       	mov	r0, r23
    33fe:	00 0c       	add	r0, r0
    3400:	88 0b       	sbc	r24, r24
    3402:	99 0b       	sbc	r25, r25
    3404:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    3408:	9b 01       	movw	r18, r22
    340a:	ac 01       	movw	r20, r24
    340c:	c7 01       	movw	r24, r14
    340e:	b6 01       	movw	r22, r12
    3410:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3414:	60 93 24 05 	sts	0x0524, r22	; 0x800524 <gy>
    3418:	70 93 25 05 	sts	0x0525, r23	; 0x800525 <gy+0x1>
    341c:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <gy+0x2>
    3420:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <gy+0x3>
    gz = (float)gyroCount[2]*gRes;   
    3424:	d8 01       	movw	r26, r16
    3426:	14 96       	adiw	r26, 0x04	; 4
    3428:	6d 91       	ld	r22, X+
    342a:	7c 91       	ld	r23, X
    342c:	15 97       	sbiw	r26, 0x05	; 5
    342e:	07 2e       	mov	r0, r23
    3430:	00 0c       	add	r0, r0
    3432:	88 0b       	sbc	r24, r24
    3434:	99 0b       	sbc	r25, r25
    3436:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    343a:	9b 01       	movw	r18, r22
    343c:	ac 01       	movw	r20, r24
    343e:	c7 01       	movw	r24, r14
    3440:	b6 01       	movw	r22, r12
    3442:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3446:	60 93 20 05 	sts	0x0520, r22	; 0x800520 <gz>
    344a:	70 93 21 05 	sts	0x0521, r23	; 0x800521 <gz+0x1>
    344e:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <gz+0x2>
    3452:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <gz+0x3>
  
    readMagData(magCount);  // Read the x/y/z adc values
    3456:	8e eb       	ldi	r24, 0xBE	; 190
    3458:	95 e0       	ldi	r25, 0x05	; 5
    345a:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <_Z11readMagDataPi>
    getMres();
    345e:	0e 94 04 01 	call	0x208	; 0x208 <_Z7getMresv>

    magbias[0] = +220. ;  // User environmental x-axis correction in milliGauss, should be automatically calculated
    3462:	e6 ea       	ldi	r30, 0xA6	; 166
    3464:	f5 e0       	ldi	r31, 0x05	; 5
    3466:	80 e0       	ldi	r24, 0x00	; 0
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	ac e5       	ldi	r26, 0x5C	; 92
    346c:	b3 e4       	ldi	r27, 0x43	; 67
    346e:	80 83       	st	Z, r24
    3470:	91 83       	std	Z+1, r25	; 0x01
    3472:	a2 83       	std	Z+2, r26	; 0x02
    3474:	b3 83       	std	Z+3, r27	; 0x03
    magbias[1] = -620.;  // User environmental y-axis correction in milliGauss
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	ab e1       	ldi	r26, 0x1B	; 27
    347c:	b4 ec       	ldi	r27, 0xC4	; 196
    347e:	84 83       	std	Z+4, r24	; 0x04
    3480:	95 83       	std	Z+5, r25	; 0x05
    3482:	a6 83       	std	Z+6, r26	; 0x06
    3484:	b7 83       	std	Z+7, r27	; 0x07
    magbias[2] = +240.;  // User environmental z-axis correction in milliGauss
    3486:	80 e0       	ldi	r24, 0x00	; 0
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	a0 e7       	ldi	r26, 0x70	; 112
    348c:	b3 e4       	ldi	r27, 0x43	; 67
    348e:	80 87       	std	Z+8, r24	; 0x08
    3490:	91 87       	std	Z+9, r25	; 0x09
    3492:	a2 87       	std	Z+10, r26	; 0x0a
    3494:	b3 87       	std	Z+11, r27	; 0x0b
    
    // Calculate the magnetometer values in milliGauss
    // Include factory calibration per data sheet and user environmental corrections
    mx = (float)magCount[0]*mRes*magCalibration[0] - magbias[0];  // get actual magnetometer value, this depends on scale being set
    3496:	c0 90 d8 05 	lds	r12, 0x05D8	; 0x8005d8 <mRes>
    349a:	d0 90 d9 05 	lds	r13, 0x05D9	; 0x8005d9 <mRes+0x1>
    349e:	e0 90 da 05 	lds	r14, 0x05DA	; 0x8005da <mRes+0x2>
    34a2:	f0 90 db 05 	lds	r15, 0x05DB	; 0x8005db <mRes+0x3>
    34a6:	0e eb       	ldi	r16, 0xBE	; 190
    34a8:	15 e0       	ldi	r17, 0x05	; 5
    34aa:	f8 01       	movw	r30, r16
    34ac:	60 81       	ld	r22, Z
    34ae:	71 81       	ldd	r23, Z+1	; 0x01
    34b0:	07 2e       	mov	r0, r23
    34b2:	00 0c       	add	r0, r0
    34b4:	88 0b       	sbc	r24, r24
    34b6:	99 0b       	sbc	r25, r25
    34b8:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    34bc:	a7 01       	movw	r20, r14
    34be:	96 01       	movw	r18, r12
    34c0:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    34c4:	0f 2e       	mov	r0, r31
    34c6:	f2 eb       	ldi	r31, 0xB2	; 178
    34c8:	af 2e       	mov	r10, r31
    34ca:	f5 e0       	ldi	r31, 0x05	; 5
    34cc:	bf 2e       	mov	r11, r31
    34ce:	f0 2d       	mov	r31, r0
    34d0:	d5 01       	movw	r26, r10
    34d2:	2d 91       	ld	r18, X+
    34d4:	3d 91       	ld	r19, X+
    34d6:	4d 91       	ld	r20, X+
    34d8:	5c 91       	ld	r21, X
    34da:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	4c e5       	ldi	r20, 0x5C	; 92
    34e4:	53 e4       	ldi	r21, 0x43	; 67
    34e6:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    34ea:	60 93 1c 05 	sts	0x051C, r22	; 0x80051c <mx>
    34ee:	70 93 1d 05 	sts	0x051D, r23	; 0x80051d <mx+0x1>
    34f2:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <mx+0x2>
    34f6:	90 93 1f 05 	sts	0x051F, r25	; 0x80051f <mx+0x3>
    my = (float)magCount[1]*mRes*magCalibration[1] - magbias[1];  
    34fa:	f8 01       	movw	r30, r16
    34fc:	62 81       	ldd	r22, Z+2	; 0x02
    34fe:	73 81       	ldd	r23, Z+3	; 0x03
    3500:	07 2e       	mov	r0, r23
    3502:	00 0c       	add	r0, r0
    3504:	88 0b       	sbc	r24, r24
    3506:	99 0b       	sbc	r25, r25
    3508:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    350c:	9b 01       	movw	r18, r22
    350e:	ac 01       	movw	r20, r24
    3510:	c7 01       	movw	r24, r14
    3512:	b6 01       	movw	r22, r12
    3514:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3518:	d5 01       	movw	r26, r10
    351a:	14 96       	adiw	r26, 0x04	; 4
    351c:	2d 91       	ld	r18, X+
    351e:	3d 91       	ld	r19, X+
    3520:	4d 91       	ld	r20, X+
    3522:	5c 91       	ld	r21, X
    3524:	17 97       	sbiw	r26, 0x07	; 7
    3526:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    352a:	20 e0       	ldi	r18, 0x00	; 0
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	4b e1       	ldi	r20, 0x1B	; 27
    3530:	54 e4       	ldi	r21, 0x44	; 68
    3532:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    3536:	60 93 18 05 	sts	0x0518, r22	; 0x800518 <my>
    353a:	70 93 19 05 	sts	0x0519, r23	; 0x800519 <my+0x1>
    353e:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <my+0x2>
    3542:	90 93 1b 05 	sts	0x051B, r25	; 0x80051b <my+0x3>
    mz = (float)magCount[2]*mRes*magCalibration[2] - magbias[2];   
    3546:	f8 01       	movw	r30, r16
    3548:	64 81       	ldd	r22, Z+4	; 0x04
    354a:	75 81       	ldd	r23, Z+5	; 0x05
    354c:	07 2e       	mov	r0, r23
    354e:	00 0c       	add	r0, r0
    3550:	88 0b       	sbc	r24, r24
    3552:	99 0b       	sbc	r25, r25
    3554:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    3558:	9b 01       	movw	r18, r22
    355a:	ac 01       	movw	r20, r24
    355c:	c7 01       	movw	r24, r14
    355e:	b6 01       	movw	r22, r12
    3560:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3564:	d5 01       	movw	r26, r10
    3566:	18 96       	adiw	r26, 0x08	; 8
    3568:	2d 91       	ld	r18, X+
    356a:	3d 91       	ld	r19, X+
    356c:	4d 91       	ld	r20, X+
    356e:	5c 91       	ld	r21, X
    3570:	1b 97       	sbiw	r26, 0x0b	; 11
    3572:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3576:	20 e0       	ldi	r18, 0x00	; 0
    3578:	30 e0       	ldi	r19, 0x00	; 0
    357a:	40 e7       	ldi	r20, 0x70	; 112
    357c:	53 e4       	ldi	r21, 0x43	; 67
    357e:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    3582:	60 93 14 05 	sts	0x0514, r22	; 0x800514 <__data_end>
    3586:	70 93 15 05 	sts	0x0515, r23	; 0x800515 <__data_end+0x1>
    358a:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <__data_end+0x2>
    358e:	90 93 17 05 	sts	0x0517, r25	; 0x800517 <__data_end+0x3>
  }
  
  Now = micros();
    3592:	0e 94 11 2a 	call	0x5422	; 0x5422 <micros>
    3596:	6b 01       	movw	r12, r22
    3598:	7c 01       	movw	r14, r24
    359a:	60 93 38 05 	sts	0x0538, r22	; 0x800538 <Now>
    359e:	70 93 39 05 	sts	0x0539, r23	; 0x800539 <Now+0x1>
    35a2:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <Now+0x2>
    35a6:	90 93 3b 05 	sts	0x053B, r25	; 0x80053b <Now+0x3>
  deltat = ((Now - lastUpdate)/1000000.0f); // set integration time by time elapsed since last filter update
    35aa:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <lastUpdate>
    35ae:	90 91 3d 05 	lds	r25, 0x053D	; 0x80053d <lastUpdate+0x1>
    35b2:	a0 91 3e 05 	lds	r26, 0x053E	; 0x80053e <lastUpdate+0x2>
    35b6:	b0 91 3f 05 	lds	r27, 0x053F	; 0x80053f <lastUpdate+0x3>
    35ba:	a7 01       	movw	r20, r14
    35bc:	96 01       	movw	r18, r12
    35be:	28 1b       	sub	r18, r24
    35c0:	39 0b       	sbc	r19, r25
    35c2:	4a 0b       	sbc	r20, r26
    35c4:	5b 0b       	sbc	r21, r27
    35c6:	ca 01       	movw	r24, r20
    35c8:	b9 01       	movw	r22, r18
    35ca:	0e 94 01 21 	call	0x4202	; 0x4202 <__floatunsisf>
    35ce:	20 e0       	ldi	r18, 0x00	; 0
    35d0:	34 e2       	ldi	r19, 0x24	; 36
    35d2:	44 e7       	ldi	r20, 0x74	; 116
    35d4:	59 e4       	ldi	r21, 0x49	; 73
    35d6:	0e 94 8f 20 	call	0x411e	; 0x411e <__divsf3>
    35da:	9b 01       	movw	r18, r22
    35dc:	ac 01       	movw	r20, r24
    35de:	60 93 44 05 	sts	0x0544, r22	; 0x800544 <deltat>
    35e2:	70 93 45 05 	sts	0x0545, r23	; 0x800545 <deltat+0x1>
    35e6:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <deltat+0x2>
    35ea:	90 93 47 05 	sts	0x0547, r25	; 0x800547 <deltat+0x3>
  lastUpdate = Now;
    35ee:	c0 92 3c 05 	sts	0x053C, r12	; 0x80053c <lastUpdate>
    35f2:	d0 92 3d 05 	sts	0x053D, r13	; 0x80053d <lastUpdate+0x1>
    35f6:	e0 92 3e 05 	sts	0x053E, r14	; 0x80053e <lastUpdate+0x2>
    35fa:	f0 92 3f 05 	sts	0x053F, r15	; 0x80053f <lastUpdate+0x3>

  sum += deltat; // sum for averaging filter update rate
    35fe:	60 91 40 05 	lds	r22, 0x0540	; 0x800540 <sum>
    3602:	70 91 41 05 	lds	r23, 0x0541	; 0x800541 <sum+0x1>
    3606:	80 91 42 05 	lds	r24, 0x0542	; 0x800542 <sum+0x2>
    360a:	90 91 43 05 	lds	r25, 0x0543	; 0x800543 <sum+0x3>
    360e:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    3612:	60 93 40 05 	sts	0x0540, r22	; 0x800540 <sum>
    3616:	70 93 41 05 	sts	0x0541, r23	; 0x800541 <sum+0x1>
    361a:	80 93 42 05 	sts	0x0542, r24	; 0x800542 <sum+0x2>
    361e:	90 93 43 05 	sts	0x0543, r25	; 0x800543 <sum+0x3>
  sumCount++;
    3622:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <sumCount>
    3626:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <sumCount+0x1>
    362a:	a0 91 56 05 	lds	r26, 0x0556	; 0x800556 <sumCount+0x2>
    362e:	b0 91 57 05 	lds	r27, 0x0557	; 0x800557 <sumCount+0x3>
    3632:	01 96       	adiw	r24, 0x01	; 1
    3634:	a1 1d       	adc	r26, r1
    3636:	b1 1d       	adc	r27, r1
    3638:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <sumCount>
    363c:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <sumCount+0x1>
    3640:	a0 93 56 05 	sts	0x0556, r26	; 0x800556 <sumCount+0x2>
    3644:	b0 93 57 05 	sts	0x0557, r27	; 0x800557 <sumCount+0x3>
  // We have to make some allowance for this orientationmismatch in feeding the output to the quaternion filter.
  // For the MPU-9250, we have chosen a magnetic rotation that keeps the sensor forward along the x-axis just like
  // in the LSM9DS0 sensor. This rotation can be modified to allow any convenient orientation convention.
  // This is ok by aircraft orientation standards!  
  // Pass gyro rate as rad/s
  MadgwickQuaternionUpdate(ax, ay, az, gx*PI/180.0f, gy*PI/180.0f, gz*PI/180.0f,  my,  mx, mz);
    3648:	2b ed       	ldi	r18, 0xDB	; 219
    364a:	3f e0       	ldi	r19, 0x0F	; 15
    364c:	49 e4       	ldi	r20, 0x49	; 73
    364e:	50 e4       	ldi	r21, 0x40	; 64
    3650:	60 91 28 05 	lds	r22, 0x0528	; 0x800528 <gx>
    3654:	70 91 29 05 	lds	r23, 0x0529	; 0x800529 <gx+0x1>
    3658:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <gx+0x2>
    365c:	90 91 2b 05 	lds	r25, 0x052B	; 0x80052b <gx+0x3>
    3660:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3664:	20 e0       	ldi	r18, 0x00	; 0
    3666:	30 e0       	ldi	r19, 0x00	; 0
    3668:	44 e3       	ldi	r20, 0x34	; 52
    366a:	53 e4       	ldi	r21, 0x43	; 67
    366c:	0e 94 8f 20 	call	0x411e	; 0x411e <__divsf3>
    3670:	5b 01       	movw	r10, r22
    3672:	6c 01       	movw	r12, r24
    3674:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <az>
    3678:	90 91 2d 05 	lds	r25, 0x052D	; 0x80052d <az+0x1>
    367c:	a0 91 2e 05 	lds	r26, 0x052E	; 0x80052e <az+0x2>
    3680:	b0 91 2f 05 	lds	r27, 0x052F	; 0x80052f <az+0x3>
    3684:	89 83       	std	Y+1, r24	; 0x01
    3686:	9a 83       	std	Y+2, r25	; 0x02
    3688:	ab 83       	std	Y+3, r26	; 0x03
    368a:	bc 83       	std	Y+4, r27	; 0x04
    368c:	40 90 30 05 	lds	r4, 0x0530	; 0x800530 <ay>
    3690:	50 90 31 05 	lds	r5, 0x0531	; 0x800531 <ay+0x1>
    3694:	60 90 32 05 	lds	r6, 0x0532	; 0x800532 <ay+0x2>
    3698:	70 90 33 05 	lds	r7, 0x0533	; 0x800533 <ay+0x3>
    369c:	20 91 34 05 	lds	r18, 0x0534	; 0x800534 <ax>
    36a0:	30 91 35 05 	lds	r19, 0x0535	; 0x800535 <ax+0x1>
    36a4:	40 91 36 05 	lds	r20, 0x0536	; 0x800536 <ax+0x2>
    36a8:	50 91 37 05 	lds	r21, 0x0537	; 0x800537 <ax+0x3>
    36ac:	2d 83       	std	Y+5, r18	; 0x05
    36ae:	3e 83       	std	Y+6, r19	; 0x06
    36b0:	4f 83       	std	Y+7, r20	; 0x07
    36b2:	58 87       	std	Y+8, r21	; 0x08
    36b4:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <__data_end+0x3>
    36b8:	8f 93       	push	r24
    36ba:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <__data_end+0x2>
    36be:	8f 93       	push	r24
    36c0:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <__data_end+0x1>
    36c4:	8f 93       	push	r24
    36c6:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <__data_end>
    36ca:	8f 93       	push	r24
    36cc:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <mx+0x3>
    36d0:	8f 93       	push	r24
    36d2:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <mx+0x2>
    36d6:	8f 93       	push	r24
    36d8:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <mx+0x1>
    36dc:	8f 93       	push	r24
    36de:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <mx>
    36e2:	8f 93       	push	r24
    36e4:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <my+0x3>
    36e8:	8f 93       	push	r24
    36ea:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <my+0x2>
    36ee:	8f 93       	push	r24
    36f0:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <my+0x1>
    36f4:	8f 93       	push	r24
    36f6:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <my>
    36fa:	8f 93       	push	r24
    36fc:	2b ed       	ldi	r18, 0xDB	; 219
    36fe:	3f e0       	ldi	r19, 0x0F	; 15
    3700:	49 e4       	ldi	r20, 0x49	; 73
    3702:	50 e4       	ldi	r21, 0x40	; 64
    3704:	60 91 20 05 	lds	r22, 0x0520	; 0x800520 <gz>
    3708:	70 91 21 05 	lds	r23, 0x0521	; 0x800521 <gz+0x1>
    370c:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <gz+0x2>
    3710:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <gz+0x3>
    3714:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3718:	20 e0       	ldi	r18, 0x00	; 0
    371a:	30 e0       	ldi	r19, 0x00	; 0
    371c:	44 e3       	ldi	r20, 0x34	; 52
    371e:	53 e4       	ldi	r21, 0x43	; 67
    3720:	0e 94 8f 20 	call	0x411e	; 0x411e <__divsf3>
    3724:	9f 93       	push	r25
    3726:	8f 93       	push	r24
    3728:	7f 93       	push	r23
    372a:	6f 93       	push	r22
    372c:	2b ed       	ldi	r18, 0xDB	; 219
    372e:	3f e0       	ldi	r19, 0x0F	; 15
    3730:	49 e4       	ldi	r20, 0x49	; 73
    3732:	50 e4       	ldi	r21, 0x40	; 64
    3734:	60 91 24 05 	lds	r22, 0x0524	; 0x800524 <gy>
    3738:	70 91 25 05 	lds	r23, 0x0525	; 0x800525 <gy+0x1>
    373c:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <gy+0x2>
    3740:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <gy+0x3>
    3744:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3748:	20 e0       	ldi	r18, 0x00	; 0
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	44 e3       	ldi	r20, 0x34	; 52
    374e:	53 e4       	ldi	r21, 0x43	; 67
    3750:	0e 94 8f 20 	call	0x411e	; 0x411e <__divsf3>
    3754:	9f 93       	push	r25
    3756:	8f 93       	push	r24
    3758:	7f 93       	push	r23
    375a:	6f 93       	push	r22
    375c:	e9 80       	ldd	r14, Y+1	; 0x01
    375e:	fa 80       	ldd	r15, Y+2	; 0x02
    3760:	0b 81       	ldd	r16, Y+3	; 0x03
    3762:	1c 81       	ldd	r17, Y+4	; 0x04
    3764:	a3 01       	movw	r20, r6
    3766:	92 01       	movw	r18, r4
    3768:	6d 81       	ldd	r22, Y+5	; 0x05
    376a:	7e 81       	ldd	r23, Y+6	; 0x06
    376c:	8f 81       	ldd	r24, Y+7	; 0x07
    376e:	98 85       	ldd	r25, Y+8	; 0x08
    3770:	0e 94 a1 01 	call	0x342	; 0x342 <_Z24MadgwickQuaternionUpdatefffffffff>
    }
    }
    else {
      
    // Serial print and/or display at 0.5 s rate independent of data rates
    delt_t = millis() - count;
    3774:	0e 94 05 2a 	call	0x540a	; 0x540a <millis>
    3778:	c0 90 58 05 	lds	r12, 0x0558	; 0x800558 <count>
    377c:	d0 90 59 05 	lds	r13, 0x0559	; 0x800559 <count+0x1>
    3780:	e0 90 5a 05 	lds	r14, 0x055A	; 0x80055a <count+0x2>
    3784:	f0 90 5b 05 	lds	r15, 0x055B	; 0x80055b <count+0x3>
    3788:	dc 01       	movw	r26, r24
    378a:	cb 01       	movw	r24, r22
    378c:	8c 19       	sub	r24, r12
    378e:	9d 09       	sbc	r25, r13
    3790:	ae 09       	sbc	r26, r14
    3792:	bf 09       	sbc	r27, r15
    3794:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <delt_t>
    3798:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <delt_t+0x1>
    379c:	a0 93 5e 05 	sts	0x055E, r26	; 0x80055e <delt_t+0x2>
    37a0:	b0 93 5f 05 	sts	0x055F, r27	; 0x80055f <delt_t+0x3>
    if (delt_t > 500) { // update LCD once per half-second independent of read rate
    37a4:	0f b6       	in	r0, 0x3f	; 63
    37a6:	f8 94       	cli
    37a8:	de bf       	out	0x3e, r29	; 62
    37aa:	0f be       	out	0x3f, r0	; 63
    37ac:	cd bf       	out	0x3d, r28	; 61
    37ae:	85 3f       	cpi	r24, 0xF5	; 245
    37b0:	91 40       	sbci	r25, 0x01	; 1
    37b2:	a1 05       	cpc	r26, r1
    37b4:	b1 05       	cpc	r27, r1
    37b6:	08 f4       	brcc	.+2      	; 0x37ba <loop+0x52e>
    37b8:	9c c3       	rjmp	.+1848   	; 0x3ef2 <loop+0xc66>
    
    MPL3115A2ActiveAltimeterMode(); 
    37ba:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <_Z28MPL3115A2ActiveAltimeterModev>
    MPL3115A2readAltitude();  // Read the altitude
    37be:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <_Z21MPL3115A2readAltitudev>

    MPL3115A2ActiveBarometerMode(); 
    37c2:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <_Z28MPL3115A2ActiveBarometerModev>
    MPL3115A2readPressure();  // Read the pressure
    37c6:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <_Z21MPL3115A2readPressurev>
    float part5 = (1.0 + (part2 * part4));
    float part6 = pow(part5, 5.2553026);
    float altimeter_setting_pressure_mb = part1 * part6; // Output is now in adjusted millibars
    baroin = altimeter_setting_pressure_mb * 0.02953;
    
    Serial.print("pressure is "); Serial.print(pressure, 2); Serial.println(" Pa");  // Print pressure in Pa
    37ca:	66 e0       	ldi	r22, 0x06	; 6
    37cc:	74 e0       	ldi	r23, 0x04	; 4
    37ce:	86 ee       	ldi	r24, 0xE6	; 230
    37d0:	95 e0       	ldi	r25, 0x05	; 5
    37d2:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    37d6:	40 91 d0 05 	lds	r20, 0x05D0	; 0x8005d0 <pressure>
    37da:	50 91 d1 05 	lds	r21, 0x05D1	; 0x8005d1 <pressure+0x1>
    37de:	60 91 d2 05 	lds	r22, 0x05D2	; 0x8005d2 <pressure+0x2>
    37e2:	70 91 d3 05 	lds	r23, 0x05D3	; 0x8005d3 <pressure+0x3>
    37e6:	22 e0       	ldi	r18, 0x02	; 2
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	86 ee       	ldi	r24, 0xE6	; 230
    37ec:	95 e0       	ldi	r25, 0x05	; 5
    37ee:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <_ZN5Print5printEdi>
    37f2:	63 e1       	ldi	r22, 0x13	; 19
    37f4:	74 e0       	ldi	r23, 0x04	; 4
    37f6:	86 ee       	ldi	r24, 0xE6	; 230
    37f8:	95 e0       	ldi	r25, 0x05	; 5
    37fa:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <_ZN5Print7printlnEPKc>
    Serial.print("altitude is "); Serial.print(altitude, 2);  Serial.print(" m, "); // Print altitude in meters   
    37fe:	67 e1       	ldi	r22, 0x17	; 23
    3800:	74 e0       	ldi	r23, 0x04	; 4
    3802:	86 ee       	ldi	r24, 0xE6	; 230
    3804:	95 e0       	ldi	r25, 0x05	; 5
    3806:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    380a:	40 91 d4 05 	lds	r20, 0x05D4	; 0x8005d4 <altitude>
    380e:	50 91 d5 05 	lds	r21, 0x05D5	; 0x8005d5 <altitude+0x1>
    3812:	60 91 d6 05 	lds	r22, 0x05D6	; 0x8005d6 <altitude+0x2>
    3816:	70 91 d7 05 	lds	r23, 0x05D7	; 0x8005d7 <altitude+0x3>
    381a:	22 e0       	ldi	r18, 0x02	; 2
    381c:	30 e0       	ldi	r19, 0x00	; 0
    381e:	86 ee       	ldi	r24, 0xE6	; 230
    3820:	95 e0       	ldi	r25, 0x05	; 5
    3822:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <_ZN5Print5printEdi>
    3826:	64 e2       	ldi	r22, 0x24	; 36
    3828:	74 e0       	ldi	r23, 0x04	; 4
    382a:	86 ee       	ldi	r24, 0xE6	; 230
    382c:	95 e0       	ldi	r25, 0x05	; 5
    382e:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    Serial.print(altitude/0.3048, 2);  Serial.println(" ft"); // Print altitude in feet 
    3832:	2f eb       	ldi	r18, 0xBF	; 191
    3834:	3e e0       	ldi	r19, 0x0E	; 14
    3836:	4c e9       	ldi	r20, 0x9C	; 156
    3838:	5e e3       	ldi	r21, 0x3E	; 62
    383a:	60 91 d4 05 	lds	r22, 0x05D4	; 0x8005d4 <altitude>
    383e:	70 91 d5 05 	lds	r23, 0x05D5	; 0x8005d5 <altitude+0x1>
    3842:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <altitude+0x2>
    3846:	90 91 d7 05 	lds	r25, 0x05D7	; 0x8005d7 <altitude+0x3>
    384a:	0e 94 8f 20 	call	0x411e	; 0x411e <__divsf3>
    384e:	ab 01       	movw	r20, r22
    3850:	bc 01       	movw	r22, r24
    3852:	22 e0       	ldi	r18, 0x02	; 2
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	86 ee       	ldi	r24, 0xE6	; 230
    3858:	95 e0       	ldi	r25, 0x05	; 5
    385a:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <_ZN5Print5printEdi>
    385e:	69 e2       	ldi	r22, 0x29	; 41
    3860:	74 e0       	ldi	r23, 0x04	; 4
    3862:	86 ee       	ldi	r24, 0xE6	; 230
    3864:	95 e0       	ldi	r25, 0x05	; 5
    3866:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <_ZN5Print7printlnEPKc>
    Serial.print("temperature is "); Serial.print(temperature, 2);  Serial.print(" C, "); // Print temperature in C
    386a:	6d e2       	ldi	r22, 0x2D	; 45
    386c:	74 e0       	ldi	r23, 0x04	; 4
    386e:	86 ee       	ldi	r24, 0xE6	; 230
    3870:	95 e0       	ldi	r25, 0x05	; 5
    3872:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    3876:	40 91 88 05 	lds	r20, 0x0588	; 0x800588 <temperature>
    387a:	50 91 89 05 	lds	r21, 0x0589	; 0x800589 <temperature+0x1>
    387e:	60 91 8a 05 	lds	r22, 0x058A	; 0x80058a <temperature+0x2>
    3882:	70 91 8b 05 	lds	r23, 0x058B	; 0x80058b <temperature+0x3>
    3886:	22 e0       	ldi	r18, 0x02	; 2
    3888:	30 e0       	ldi	r19, 0x00	; 0
    388a:	86 ee       	ldi	r24, 0xE6	; 230
    388c:	95 e0       	ldi	r25, 0x05	; 5
    388e:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <_ZN5Print5printEdi>
    3892:	6d e3       	ldi	r22, 0x3D	; 61
    3894:	74 e0       	ldi	r23, 0x04	; 4
    3896:	86 ee       	ldi	r24, 0xE6	; 230
    3898:	95 e0       	ldi	r25, 0x05	; 5
    389a:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    Serial.print((9.*temperature/5. + 32.), 1);  Serial.println(" F"); // Print temperature in C
    389e:	20 e0       	ldi	r18, 0x00	; 0
    38a0:	30 e0       	ldi	r19, 0x00	; 0
    38a2:	40 e1       	ldi	r20, 0x10	; 16
    38a4:	51 e4       	ldi	r21, 0x41	; 65
    38a6:	60 91 88 05 	lds	r22, 0x0588	; 0x800588 <temperature>
    38aa:	70 91 89 05 	lds	r23, 0x0589	; 0x800589 <temperature+0x1>
    38ae:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <temperature+0x2>
    38b2:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <temperature+0x3>
    38b6:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    38ba:	20 e0       	ldi	r18, 0x00	; 0
    38bc:	30 e0       	ldi	r19, 0x00	; 0
    38be:	40 ea       	ldi	r20, 0xA0	; 160
    38c0:	50 e4       	ldi	r21, 0x40	; 64
    38c2:	0e 94 8f 20 	call	0x411e	; 0x411e <__divsf3>
    38c6:	20 e0       	ldi	r18, 0x00	; 0
    38c8:	30 e0       	ldi	r19, 0x00	; 0
    38ca:	40 e0       	ldi	r20, 0x00	; 0
    38cc:	52 e4       	ldi	r21, 0x42	; 66
    38ce:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    38d2:	ab 01       	movw	r20, r22
    38d4:	bc 01       	movw	r22, r24
    38d6:	21 e0       	ldi	r18, 0x01	; 1
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	86 ee       	ldi	r24, 0xE6	; 230
    38dc:	95 e0       	ldi	r25, 0x05	; 5
    38de:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <_ZN5Print5printEdi>
    38e2:	62 e4       	ldi	r22, 0x42	; 66
    38e4:	74 e0       	ldi	r23, 0x04	; 4
    38e6:	86 ee       	ldi	r24, 0xE6	; 230
    38e8:	95 e0       	ldi	r25, 0x05	; 5
    38ea:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <_ZN5Print7printlnEPKc>
    //display.setCursor(0,30); display.print("Alt "); display.setCursor(24,30); display.print(3.28084*altitude, 1);  display.print("   ft");
    //display.setCursor(0,40); display.print("T   "); display.setCursor(30,40); display.print(temperature, 1); display.print("    C");
    //display.display();
    
    if(SerialDebug) {
    Serial.print("ax = "); Serial.print((int)1000*ax);  
    38ee:	65 e4       	ldi	r22, 0x45	; 69
    38f0:	74 e0       	ldi	r23, 0x04	; 4
    38f2:	86 ee       	ldi	r24, 0xE6	; 230
    38f4:	95 e0       	ldi	r25, 0x05	; 5
    38f6:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    38fa:	20 e0       	ldi	r18, 0x00	; 0
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	4a e7       	ldi	r20, 0x7A	; 122
    3900:	54 e4       	ldi	r21, 0x44	; 68
    3902:	60 91 34 05 	lds	r22, 0x0534	; 0x800534 <ax>
    3906:	70 91 35 05 	lds	r23, 0x0535	; 0x800535 <ax+0x1>
    390a:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <ax+0x2>
    390e:	90 91 37 05 	lds	r25, 0x0537	; 0x800537 <ax+0x3>
    3912:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3916:	ab 01       	movw	r20, r22
    3918:	bc 01       	movw	r22, r24
    391a:	22 e0       	ldi	r18, 0x02	; 2
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	86 ee       	ldi	r24, 0xE6	; 230
    3920:	95 e0       	ldi	r25, 0x05	; 5
    3922:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <_ZN5Print5printEdi>
    Serial.print(" ay = "); Serial.print((int)1000*ay); 
    3926:	6b e4       	ldi	r22, 0x4B	; 75
    3928:	74 e0       	ldi	r23, 0x04	; 4
    392a:	86 ee       	ldi	r24, 0xE6	; 230
    392c:	95 e0       	ldi	r25, 0x05	; 5
    392e:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    3932:	20 e0       	ldi	r18, 0x00	; 0
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	4a e7       	ldi	r20, 0x7A	; 122
    3938:	54 e4       	ldi	r21, 0x44	; 68
    393a:	60 91 30 05 	lds	r22, 0x0530	; 0x800530 <ay>
    393e:	70 91 31 05 	lds	r23, 0x0531	; 0x800531 <ay+0x1>
    3942:	80 91 32 05 	lds	r24, 0x0532	; 0x800532 <ay+0x2>
    3946:	90 91 33 05 	lds	r25, 0x0533	; 0x800533 <ay+0x3>
    394a:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    394e:	ab 01       	movw	r20, r22
    3950:	bc 01       	movw	r22, r24
    3952:	22 e0       	ldi	r18, 0x02	; 2
    3954:	30 e0       	ldi	r19, 0x00	; 0
    3956:	86 ee       	ldi	r24, 0xE6	; 230
    3958:	95 e0       	ldi	r25, 0x05	; 5
    395a:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <_ZN5Print5printEdi>
    Serial.print(" az = "); Serial.print((int)1000*az); Serial.println(" mg");
    395e:	62 e5       	ldi	r22, 0x52	; 82
    3960:	74 e0       	ldi	r23, 0x04	; 4
    3962:	86 ee       	ldi	r24, 0xE6	; 230
    3964:	95 e0       	ldi	r25, 0x05	; 5
    3966:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    396a:	20 e0       	ldi	r18, 0x00	; 0
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	4a e7       	ldi	r20, 0x7A	; 122
    3970:	54 e4       	ldi	r21, 0x44	; 68
    3972:	60 91 2c 05 	lds	r22, 0x052C	; 0x80052c <az>
    3976:	70 91 2d 05 	lds	r23, 0x052D	; 0x80052d <az+0x1>
    397a:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <az+0x2>
    397e:	90 91 2f 05 	lds	r25, 0x052F	; 0x80052f <az+0x3>
    3982:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3986:	ab 01       	movw	r20, r22
    3988:	bc 01       	movw	r22, r24
    398a:	22 e0       	ldi	r18, 0x02	; 2
    398c:	30 e0       	ldi	r19, 0x00	; 0
    398e:	86 ee       	ldi	r24, 0xE6	; 230
    3990:	95 e0       	ldi	r25, 0x05	; 5
    3992:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <_ZN5Print5printEdi>
    3996:	69 e5       	ldi	r22, 0x59	; 89
    3998:	74 e0       	ldi	r23, 0x04	; 4
    399a:	86 ee       	ldi	r24, 0xE6	; 230
    399c:	95 e0       	ldi	r25, 0x05	; 5
    399e:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <_ZN5Print7printlnEPKc>
    Serial.print("gx = "); Serial.print( gx, 2); 
    39a2:	6d e5       	ldi	r22, 0x5D	; 93
    39a4:	74 e0       	ldi	r23, 0x04	; 4
    39a6:	86 ee       	ldi	r24, 0xE6	; 230
    39a8:	95 e0       	ldi	r25, 0x05	; 5
    39aa:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    39ae:	40 91 28 05 	lds	r20, 0x0528	; 0x800528 <gx>
    39b2:	50 91 29 05 	lds	r21, 0x0529	; 0x800529 <gx+0x1>
    39b6:	60 91 2a 05 	lds	r22, 0x052A	; 0x80052a <gx+0x2>
    39ba:	70 91 2b 05 	lds	r23, 0x052B	; 0x80052b <gx+0x3>
    39be:	22 e0       	ldi	r18, 0x02	; 2
    39c0:	30 e0       	ldi	r19, 0x00	; 0
    39c2:	86 ee       	ldi	r24, 0xE6	; 230
    39c4:	95 e0       	ldi	r25, 0x05	; 5
    39c6:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <_ZN5Print5printEdi>
    Serial.print(" gy = "); Serial.print( gy, 2); 
    39ca:	63 e6       	ldi	r22, 0x63	; 99
    39cc:	74 e0       	ldi	r23, 0x04	; 4
    39ce:	86 ee       	ldi	r24, 0xE6	; 230
    39d0:	95 e0       	ldi	r25, 0x05	; 5
    39d2:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    39d6:	40 91 24 05 	lds	r20, 0x0524	; 0x800524 <gy>
    39da:	50 91 25 05 	lds	r21, 0x0525	; 0x800525 <gy+0x1>
    39de:	60 91 26 05 	lds	r22, 0x0526	; 0x800526 <gy+0x2>
    39e2:	70 91 27 05 	lds	r23, 0x0527	; 0x800527 <gy+0x3>
    39e6:	22 e0       	ldi	r18, 0x02	; 2
    39e8:	30 e0       	ldi	r19, 0x00	; 0
    39ea:	86 ee       	ldi	r24, 0xE6	; 230
    39ec:	95 e0       	ldi	r25, 0x05	; 5
    39ee:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <_ZN5Print5printEdi>
    Serial.print(" gz = "); Serial.print( gz, 2); Serial.println(" deg/s");
    39f2:	6a e6       	ldi	r22, 0x6A	; 106
    39f4:	74 e0       	ldi	r23, 0x04	; 4
    39f6:	86 ee       	ldi	r24, 0xE6	; 230
    39f8:	95 e0       	ldi	r25, 0x05	; 5
    39fa:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    39fe:	40 91 20 05 	lds	r20, 0x0520	; 0x800520 <gz>
    3a02:	50 91 21 05 	lds	r21, 0x0521	; 0x800521 <gz+0x1>
    3a06:	60 91 22 05 	lds	r22, 0x0522	; 0x800522 <gz+0x2>
    3a0a:	70 91 23 05 	lds	r23, 0x0523	; 0x800523 <gz+0x3>
    3a0e:	22 e0       	ldi	r18, 0x02	; 2
    3a10:	30 e0       	ldi	r19, 0x00	; 0
    3a12:	86 ee       	ldi	r24, 0xE6	; 230
    3a14:	95 e0       	ldi	r25, 0x05	; 5
    3a16:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <_ZN5Print5printEdi>
    3a1a:	61 e7       	ldi	r22, 0x71	; 113
    3a1c:	74 e0       	ldi	r23, 0x04	; 4
    3a1e:	86 ee       	ldi	r24, 0xE6	; 230
    3a20:	95 e0       	ldi	r25, 0x05	; 5
    3a22:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <_ZN5Print7printlnEPKc>
    Serial.print("mx = "); Serial.print( magCount[0],HEX ); 
    3a26:	68 e7       	ldi	r22, 0x78	; 120
    3a28:	74 e0       	ldi	r23, 0x04	; 4
    3a2a:	86 ee       	ldi	r24, 0xE6	; 230
    3a2c:	95 e0       	ldi	r25, 0x05	; 5
    3a2e:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    3a32:	0e eb       	ldi	r16, 0xBE	; 190
    3a34:	15 e0       	ldi	r17, 0x05	; 5
    3a36:	d8 01       	movw	r26, r16
    3a38:	6d 91       	ld	r22, X+
    3a3a:	7c 91       	ld	r23, X
    3a3c:	40 e1       	ldi	r20, 0x10	; 16
    3a3e:	50 e0       	ldi	r21, 0x00	; 0
    3a40:	86 ee       	ldi	r24, 0xE6	; 230
    3a42:	95 e0       	ldi	r25, 0x05	; 5
    3a44:	0e 94 15 27 	call	0x4e2a	; 0x4e2a <_ZN5Print5printEii>
    Serial.print(" my = "); Serial.print(magCount[1],HEX); 
    3a48:	6e e7       	ldi	r22, 0x7E	; 126
    3a4a:	74 e0       	ldi	r23, 0x04	; 4
    3a4c:	86 ee       	ldi	r24, 0xE6	; 230
    3a4e:	95 e0       	ldi	r25, 0x05	; 5
    3a50:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    3a54:	f8 01       	movw	r30, r16
    3a56:	62 81       	ldd	r22, Z+2	; 0x02
    3a58:	73 81       	ldd	r23, Z+3	; 0x03
    3a5a:	40 e1       	ldi	r20, 0x10	; 16
    3a5c:	50 e0       	ldi	r21, 0x00	; 0
    3a5e:	86 ee       	ldi	r24, 0xE6	; 230
    3a60:	95 e0       	ldi	r25, 0x05	; 5
    3a62:	0e 94 15 27 	call	0x4e2a	; 0x4e2a <_ZN5Print5printEii>
    Serial.print(" mz = "); Serial.print( magCount[2],HEX); Serial.println(" mG");
    3a66:	65 e8       	ldi	r22, 0x85	; 133
    3a68:	74 e0       	ldi	r23, 0x04	; 4
    3a6a:	86 ee       	ldi	r24, 0xE6	; 230
    3a6c:	95 e0       	ldi	r25, 0x05	; 5
    3a6e:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    3a72:	d8 01       	movw	r26, r16
    3a74:	14 96       	adiw	r26, 0x04	; 4
    3a76:	6d 91       	ld	r22, X+
    3a78:	7c 91       	ld	r23, X
    3a7a:	15 97       	sbiw	r26, 0x05	; 5
    3a7c:	40 e1       	ldi	r20, 0x10	; 16
    3a7e:	50 e0       	ldi	r21, 0x00	; 0
    3a80:	86 ee       	ldi	r24, 0xE6	; 230
    3a82:	95 e0       	ldi	r25, 0x05	; 5
    3a84:	0e 94 15 27 	call	0x4e2a	; 0x4e2a <_ZN5Print5printEii>
    3a88:	6c e8       	ldi	r22, 0x8C	; 140
    3a8a:	74 e0       	ldi	r23, 0x04	; 4
    3a8c:	86 ee       	ldi	r24, 0xE6	; 230
    3a8e:	95 e0       	ldi	r25, 0x05	; 5
    3a90:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <_ZN5Print7printlnEPKc>
    
    Serial.print("q0 = "); Serial.print(q[0]);
    3a94:	60 e9       	ldi	r22, 0x90	; 144
    3a96:	74 e0       	ldi	r23, 0x04	; 4
    3a98:	86 ee       	ldi	r24, 0xE6	; 230
    3a9a:	95 e0       	ldi	r25, 0x05	; 5
    3a9c:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    3aa0:	00 e0       	ldi	r16, 0x00	; 0
    3aa2:	11 e0       	ldi	r17, 0x01	; 1
    3aa4:	f8 01       	movw	r30, r16
    3aa6:	40 81       	ld	r20, Z
    3aa8:	51 81       	ldd	r21, Z+1	; 0x01
    3aaa:	62 81       	ldd	r22, Z+2	; 0x02
    3aac:	73 81       	ldd	r23, Z+3	; 0x03
    3aae:	22 e0       	ldi	r18, 0x02	; 2
    3ab0:	30 e0       	ldi	r19, 0x00	; 0
    3ab2:	86 ee       	ldi	r24, 0xE6	; 230
    3ab4:	95 e0       	ldi	r25, 0x05	; 5
    3ab6:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <_ZN5Print5printEdi>
    Serial.print(" qx = "); Serial.print(q[1]); 
    3aba:	66 e9       	ldi	r22, 0x96	; 150
    3abc:	74 e0       	ldi	r23, 0x04	; 4
    3abe:	86 ee       	ldi	r24, 0xE6	; 230
    3ac0:	95 e0       	ldi	r25, 0x05	; 5
    3ac2:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    3ac6:	d8 01       	movw	r26, r16
    3ac8:	14 96       	adiw	r26, 0x04	; 4
    3aca:	4d 91       	ld	r20, X+
    3acc:	5d 91       	ld	r21, X+
    3ace:	6d 91       	ld	r22, X+
    3ad0:	7c 91       	ld	r23, X
    3ad2:	17 97       	sbiw	r26, 0x07	; 7
    3ad4:	22 e0       	ldi	r18, 0x02	; 2
    3ad6:	30 e0       	ldi	r19, 0x00	; 0
    3ad8:	86 ee       	ldi	r24, 0xE6	; 230
    3ada:	95 e0       	ldi	r25, 0x05	; 5
    3adc:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <_ZN5Print5printEdi>
    Serial.print(" qy = "); Serial.print(q[2]); 
    3ae0:	6d e9       	ldi	r22, 0x9D	; 157
    3ae2:	74 e0       	ldi	r23, 0x04	; 4
    3ae4:	86 ee       	ldi	r24, 0xE6	; 230
    3ae6:	95 e0       	ldi	r25, 0x05	; 5
    3ae8:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    3aec:	f8 01       	movw	r30, r16
    3aee:	40 85       	ldd	r20, Z+8	; 0x08
    3af0:	51 85       	ldd	r21, Z+9	; 0x09
    3af2:	62 85       	ldd	r22, Z+10	; 0x0a
    3af4:	73 85       	ldd	r23, Z+11	; 0x0b
    3af6:	22 e0       	ldi	r18, 0x02	; 2
    3af8:	30 e0       	ldi	r19, 0x00	; 0
    3afa:	86 ee       	ldi	r24, 0xE6	; 230
    3afc:	95 e0       	ldi	r25, 0x05	; 5
    3afe:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <_ZN5Print5printEdi>
    Serial.print(" qz = "); Serial.println(q[3]); 
    3b02:	64 ea       	ldi	r22, 0xA4	; 164
    3b04:	74 e0       	ldi	r23, 0x04	; 4
    3b06:	86 ee       	ldi	r24, 0xE6	; 230
    3b08:	95 e0       	ldi	r25, 0x05	; 5
    3b0a:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    3b0e:	d8 01       	movw	r26, r16
    3b10:	1c 96       	adiw	r26, 0x0c	; 12
    3b12:	4d 91       	ld	r20, X+
    3b14:	5d 91       	ld	r21, X+
    3b16:	6d 91       	ld	r22, X+
    3b18:	7c 91       	ld	r23, X
    3b1a:	1f 97       	sbiw	r26, 0x0f	; 15
    3b1c:	22 e0       	ldi	r18, 0x02	; 2
    3b1e:	30 e0       	ldi	r19, 0x00	; 0
    3b20:	86 ee       	ldi	r24, 0xE6	; 230
    3b22:	95 e0       	ldi	r25, 0x05	; 5
    3b24:	0e 94 6e 28 	call	0x50dc	; 0x50dc <_ZN5Print7printlnEdi>
    
    tempCount = readTempData();  // Read the adc values
    3b28:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <_Z12readTempDatav>
    3b2c:	90 93 8d 05 	sts	0x058D, r25	; 0x80058d <tempCount+0x1>
    3b30:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <tempCount>
    Temperature = ((float) tempCount) / 333.87 + 21.0; // Temperature in degrees Centigrade
    3b34:	bc 01       	movw	r22, r24
    3b36:	99 0f       	add	r25, r25
    3b38:	88 0b       	sbc	r24, r24
    3b3a:	99 0b       	sbc	r25, r25
    3b3c:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    3b40:	2c e5       	ldi	r18, 0x5C	; 92
    3b42:	3f ee       	ldi	r19, 0xEF	; 239
    3b44:	46 ea       	ldi	r20, 0xA6	; 166
    3b46:	53 e4       	ldi	r21, 0x43	; 67
    3b48:	0e 94 8f 20 	call	0x411e	; 0x411e <__divsf3>
    3b4c:	20 e0       	ldi	r18, 0x00	; 0
    3b4e:	30 e0       	ldi	r19, 0x00	; 0
    3b50:	48 ea       	ldi	r20, 0xA8	; 168
    3b52:	51 e4       	ldi	r21, 0x41	; 65
    3b54:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    3b58:	60 93 84 05 	sts	0x0584, r22	; 0x800584 <Temperature>
    3b5c:	70 93 85 05 	sts	0x0585, r23	; 0x800585 <Temperature+0x1>
    3b60:	80 93 86 05 	sts	0x0586, r24	; 0x800586 <Temperature+0x2>
    3b64:	90 93 87 05 	sts	0x0587, r25	; 0x800587 <Temperature+0x3>
   // Print temperature in degrees Centigrade      
    Serial.print("Temperature is ");  Serial.print(Temperature, 1);  Serial.println(" degrees C"); // Print T values to tenths of s degree C
    3b68:	6b ea       	ldi	r22, 0xAB	; 171
    3b6a:	74 e0       	ldi	r23, 0x04	; 4
    3b6c:	86 ee       	ldi	r24, 0xE6	; 230
    3b6e:	95 e0       	ldi	r25, 0x05	; 5
    3b70:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    3b74:	40 91 84 05 	lds	r20, 0x0584	; 0x800584 <Temperature>
    3b78:	50 91 85 05 	lds	r21, 0x0585	; 0x800585 <Temperature+0x1>
    3b7c:	60 91 86 05 	lds	r22, 0x0586	; 0x800586 <Temperature+0x2>
    3b80:	70 91 87 05 	lds	r23, 0x0587	; 0x800587 <Temperature+0x3>
    3b84:	21 e0       	ldi	r18, 0x01	; 1
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	86 ee       	ldi	r24, 0xE6	; 230
    3b8a:	95 e0       	ldi	r25, 0x05	; 5
    3b8c:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <_ZN5Print5printEdi>
    3b90:	6b eb       	ldi	r22, 0xBB	; 187
    3b92:	74 e0       	ldi	r23, 0x04	; 4
    3b94:	86 ee       	ldi	r24, 0xE6	; 230
    3b96:	95 e0       	ldi	r25, 0x05	; 5
    3b98:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <_ZN5Print7printlnEPKc>
  // Roll is angle between sensor y-axis and Earth ground plane, y-axis up is positive roll.
  // These arise from the definition of the homogeneous rotation matrix constructed from quaternions.
  // Tait-Bryan angles as well as Euler angles are non-commutative; that is, the get the correct orientation the rotations must be
  // applied in the correct order which for this configuration is yaw, pitch, and then roll.
  // For more see http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles which has additional links.
    yaw   = atan2(2.0f * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);   
    3b9c:	f8 01       	movw	r30, r16
    3b9e:	40 80       	ld	r4, Z
    3ba0:	51 80       	ldd	r5, Z+1	; 0x01
    3ba2:	62 80       	ldd	r6, Z+2	; 0x02
    3ba4:	73 80       	ldd	r7, Z+3	; 0x03
    3ba6:	a3 01       	movw	r20, r6
    3ba8:	92 01       	movw	r18, r4
    3baa:	c3 01       	movw	r24, r6
    3bac:	b2 01       	movw	r22, r4
    3bae:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3bb2:	6d 83       	std	Y+5, r22	; 0x05
    3bb4:	7e 83       	std	Y+6, r23	; 0x06
    3bb6:	8f 83       	std	Y+7, r24	; 0x07
    3bb8:	98 87       	std	Y+8, r25	; 0x08
    3bba:	d8 01       	movw	r26, r16
    3bbc:	14 96       	adiw	r26, 0x04	; 4
    3bbe:	2d 91       	ld	r18, X+
    3bc0:	3d 91       	ld	r19, X+
    3bc2:	4d 91       	ld	r20, X+
    3bc4:	5c 91       	ld	r21, X
    3bc6:	17 97       	sbiw	r26, 0x07	; 7
    3bc8:	29 83       	std	Y+1, r18	; 0x01
    3bca:	3a 83       	std	Y+2, r19	; 0x02
    3bcc:	4b 83       	std	Y+3, r20	; 0x03
    3bce:	5c 83       	std	Y+4, r21	; 0x04
    3bd0:	ca 01       	movw	r24, r20
    3bd2:	b9 01       	movw	r22, r18
    3bd4:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3bd8:	69 8b       	std	Y+17, r22	; 0x11
    3bda:	7a 8b       	std	Y+18, r23	; 0x12
    3bdc:	8b 8b       	std	Y+19, r24	; 0x13
    3bde:	9c 8b       	std	Y+20, r25	; 0x14
    3be0:	f8 01       	movw	r30, r16
    3be2:	c0 84       	ldd	r12, Z+8	; 0x08
    3be4:	d1 84       	ldd	r13, Z+9	; 0x09
    3be6:	e2 84       	ldd	r14, Z+10	; 0x0a
    3be8:	f3 84       	ldd	r15, Z+11	; 0x0b
    3bea:	a7 01       	movw	r20, r14
    3bec:	96 01       	movw	r18, r12
    3bee:	c7 01       	movw	r24, r14
    3bf0:	b6 01       	movw	r22, r12
    3bf2:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3bf6:	6d 8b       	std	Y+21, r22	; 0x15
    3bf8:	7e 8b       	std	Y+22, r23	; 0x16
    3bfa:	8f 8b       	std	Y+23, r24	; 0x17
    3bfc:	98 8f       	std	Y+24, r25	; 0x18
    3bfe:	d8 01       	movw	r26, r16
    3c00:	1c 96       	adiw	r26, 0x0c	; 12
    3c02:	8d 90       	ld	r8, X+
    3c04:	9d 90       	ld	r9, X+
    3c06:	ad 90       	ld	r10, X+
    3c08:	bc 90       	ld	r11, X
    3c0a:	1f 97       	sbiw	r26, 0x0f	; 15
    3c0c:	a5 01       	movw	r20, r10
    3c0e:	94 01       	movw	r18, r8
    3c10:	c5 01       	movw	r24, r10
    3c12:	b4 01       	movw	r22, r8
    3c14:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3c18:	69 8f       	std	Y+25, r22	; 0x19
    3c1a:	7a 8f       	std	Y+26, r23	; 0x1a
    3c1c:	8b 8f       	std	Y+27, r24	; 0x1b
    3c1e:	9c 8f       	std	Y+28, r25	; 0x1c
    3c20:	29 89       	ldd	r18, Y+17	; 0x11
    3c22:	3a 89       	ldd	r19, Y+18	; 0x12
    3c24:	4b 89       	ldd	r20, Y+19	; 0x13
    3c26:	5c 89       	ldd	r21, Y+20	; 0x14
    3c28:	6d 81       	ldd	r22, Y+5	; 0x05
    3c2a:	7e 81       	ldd	r23, Y+6	; 0x06
    3c2c:	8f 81       	ldd	r24, Y+7	; 0x07
    3c2e:	98 85       	ldd	r25, Y+8	; 0x08
    3c30:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    3c34:	2d 89       	ldd	r18, Y+21	; 0x15
    3c36:	3e 89       	ldd	r19, Y+22	; 0x16
    3c38:	4f 89       	ldd	r20, Y+23	; 0x17
    3c3a:	58 8d       	ldd	r21, Y+24	; 0x18
    3c3c:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    3c40:	29 8d       	ldd	r18, Y+25	; 0x19
    3c42:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3c44:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3c46:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3c48:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    3c4c:	6d 87       	std	Y+13, r22	; 0x0d
    3c4e:	7e 87       	std	Y+14, r23	; 0x0e
    3c50:	8f 87       	std	Y+15, r24	; 0x0f
    3c52:	98 8b       	std	Y+16, r25	; 0x10
    3c54:	a7 01       	movw	r20, r14
    3c56:	96 01       	movw	r18, r12
    3c58:	69 81       	ldd	r22, Y+1	; 0x01
    3c5a:	7a 81       	ldd	r23, Y+2	; 0x02
    3c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c60:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3c64:	69 87       	std	Y+9, r22	; 0x09
    3c66:	7a 87       	std	Y+10, r23	; 0x0a
    3c68:	8b 87       	std	Y+11, r24	; 0x0b
    3c6a:	9c 87       	std	Y+12, r25	; 0x0c
    3c6c:	a5 01       	movw	r20, r10
    3c6e:	94 01       	movw	r18, r8
    3c70:	c3 01       	movw	r24, r6
    3c72:	b2 01       	movw	r22, r4
    3c74:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3c78:	9b 01       	movw	r18, r22
    3c7a:	ac 01       	movw	r20, r24
    3c7c:	69 85       	ldd	r22, Y+9	; 0x09
    3c7e:	7a 85       	ldd	r23, Y+10	; 0x0a
    3c80:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c82:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c84:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    3c88:	9b 01       	movw	r18, r22
    3c8a:	ac 01       	movw	r20, r24
    3c8c:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    3c90:	2d 85       	ldd	r18, Y+13	; 0x0d
    3c92:	3e 85       	ldd	r19, Y+14	; 0x0e
    3c94:	4f 85       	ldd	r20, Y+15	; 0x0f
    3c96:	58 89       	ldd	r21, Y+16	; 0x10
    3c98:	0e 94 2b 20 	call	0x4056	; 0x4056 <atan2>
    3c9c:	6d 87       	std	Y+13, r22	; 0x0d
    3c9e:	7e 87       	std	Y+14, r23	; 0x0e
    3ca0:	8f 87       	std	Y+15, r24	; 0x0f
    3ca2:	98 8b       	std	Y+16, r25	; 0x10
    pitch = -asin(2.0f * (q[1] * q[3] - q[0] * q[2]));
    3ca4:	a5 01       	movw	r20, r10
    3ca6:	94 01       	movw	r18, r8
    3ca8:	69 81       	ldd	r22, Y+1	; 0x01
    3caa:	7a 81       	ldd	r23, Y+2	; 0x02
    3cac:	8b 81       	ldd	r24, Y+3	; 0x03
    3cae:	9c 81       	ldd	r25, Y+4	; 0x04
    3cb0:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3cb4:	69 87       	std	Y+9, r22	; 0x09
    3cb6:	7a 87       	std	Y+10, r23	; 0x0a
    3cb8:	8b 87       	std	Y+11, r24	; 0x0b
    3cba:	9c 87       	std	Y+12, r25	; 0x0c
    3cbc:	a7 01       	movw	r20, r14
    3cbe:	96 01       	movw	r18, r12
    3cc0:	c3 01       	movw	r24, r6
    3cc2:	b2 01       	movw	r22, r4
    3cc4:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3cc8:	9b 01       	movw	r18, r22
    3cca:	ac 01       	movw	r20, r24
    3ccc:	69 85       	ldd	r22, Y+9	; 0x09
    3cce:	7a 85       	ldd	r23, Y+10	; 0x0a
    3cd0:	8b 85       	ldd	r24, Y+11	; 0x0b
    3cd2:	9c 85       	ldd	r25, Y+12	; 0x0c
    3cd4:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    3cd8:	9b 01       	movw	r18, r22
    3cda:	ac 01       	movw	r20, r24
    3cdc:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    3ce0:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <asin>
    3ce4:	69 87       	std	Y+9, r22	; 0x09
    3ce6:	7a 87       	std	Y+10, r23	; 0x0a
    3ce8:	8b 87       	std	Y+11, r24	; 0x0b
    3cea:	9c 87       	std	Y+12, r25	; 0x0c
    roll  = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
    3cec:	29 89       	ldd	r18, Y+17	; 0x11
    3cee:	3a 89       	ldd	r19, Y+18	; 0x12
    3cf0:	4b 89       	ldd	r20, Y+19	; 0x13
    3cf2:	5c 89       	ldd	r21, Y+20	; 0x14
    3cf4:	6d 81       	ldd	r22, Y+5	; 0x05
    3cf6:	7e 81       	ldd	r23, Y+6	; 0x06
    3cf8:	8f 81       	ldd	r24, Y+7	; 0x07
    3cfa:	98 85       	ldd	r25, Y+8	; 0x08
    3cfc:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    3d00:	2d 89       	ldd	r18, Y+21	; 0x15
    3d02:	3e 89       	ldd	r19, Y+22	; 0x16
    3d04:	4f 89       	ldd	r20, Y+23	; 0x17
    3d06:	58 8d       	ldd	r21, Y+24	; 0x18
    3d08:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    3d0c:	9b 01       	movw	r18, r22
    3d0e:	ac 01       	movw	r20, r24
    3d10:	69 8d       	ldd	r22, Y+25	; 0x19
    3d12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d18:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    3d1c:	6d 83       	std	Y+5, r22	; 0x05
    3d1e:	7e 83       	std	Y+6, r23	; 0x06
    3d20:	8f 83       	std	Y+7, r24	; 0x07
    3d22:	98 87       	std	Y+8, r25	; 0x08
    3d24:	29 81       	ldd	r18, Y+1	; 0x01
    3d26:	3a 81       	ldd	r19, Y+2	; 0x02
    3d28:	4b 81       	ldd	r20, Y+3	; 0x03
    3d2a:	5c 81       	ldd	r21, Y+4	; 0x04
    3d2c:	c3 01       	movw	r24, r6
    3d2e:	b2 01       	movw	r22, r4
    3d30:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3d34:	2b 01       	movw	r4, r22
    3d36:	3c 01       	movw	r6, r24
    3d38:	a5 01       	movw	r20, r10
    3d3a:	94 01       	movw	r18, r8
    3d3c:	c7 01       	movw	r24, r14
    3d3e:	b6 01       	movw	r22, r12
    3d40:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3d44:	9b 01       	movw	r18, r22
    3d46:	ac 01       	movw	r20, r24
    3d48:	c3 01       	movw	r24, r6
    3d4a:	b2 01       	movw	r22, r4
    3d4c:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    3d50:	9b 01       	movw	r18, r22
    3d52:	ac 01       	movw	r20, r24
    3d54:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    3d58:	2d 81       	ldd	r18, Y+5	; 0x05
    3d5a:	3e 81       	ldd	r19, Y+6	; 0x06
    3d5c:	4f 81       	ldd	r20, Y+7	; 0x07
    3d5e:	58 85       	ldd	r21, Y+8	; 0x08
    3d60:	0e 94 2b 20 	call	0x4056	; 0x4056 <atan2>
    3d64:	6b 01       	movw	r12, r22
    3d66:	7c 01       	movw	r14, r24
  // These arise from the definition of the homogeneous rotation matrix constructed from quaternions.
  // Tait-Bryan angles as well as Euler angles are non-commutative; that is, the get the correct orientation the rotations must be
  // applied in the correct order which for this configuration is yaw, pitch, and then roll.
  // For more see http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles which has additional links.
    yaw   = atan2(2.0f * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);   
    pitch = -asin(2.0f * (q[1] * q[3] - q[0] * q[2]));
    3d68:	69 85       	ldd	r22, Y+9	; 0x09
    3d6a:	7a 85       	ldd	r23, Y+10	; 0x0a
    3d6c:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d6e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d70:	90 58       	subi	r25, 0x80	; 128
    roll  = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
    pitch *= 180.0f / PI;
    3d72:	20 ee       	ldi	r18, 0xE0	; 224
    3d74:	3e e2       	ldi	r19, 0x2E	; 46
    3d76:	45 e6       	ldi	r20, 0x65	; 101
    3d78:	52 e4       	ldi	r21, 0x42	; 66
    3d7a:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3d7e:	60 93 50 05 	sts	0x0550, r22	; 0x800550 <pitch>
    3d82:	70 93 51 05 	sts	0x0551, r23	; 0x800551 <pitch+0x1>
    3d86:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <pitch+0x2>
    3d8a:	90 93 53 05 	sts	0x0553, r25	; 0x800553 <pitch+0x3>
    yaw   *= 180.0f / PI; 
    3d8e:	20 ee       	ldi	r18, 0xE0	; 224
    3d90:	3e e2       	ldi	r19, 0x2E	; 46
    3d92:	45 e6       	ldi	r20, 0x65	; 101
    3d94:	52 e4       	ldi	r21, 0x42	; 66
    3d96:	6d 85       	ldd	r22, Y+13	; 0x0d
    3d98:	7e 85       	ldd	r23, Y+14	; 0x0e
    3d9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d9c:	98 89       	ldd	r25, Y+16	; 0x10
    3d9e:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    yaw   -= 13.8; // Declination at Danville, California is 13 degrees 48 minutes and 47 seconds on 2014-04-04
    3da2:	2d ec       	ldi	r18, 0xCD	; 205
    3da4:	3c ec       	ldi	r19, 0xCC	; 204
    3da6:	4c e5       	ldi	r20, 0x5C	; 92
    3da8:	51 e4       	ldi	r21, 0x41	; 65
    3daa:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    3dae:	60 93 4c 05 	sts	0x054C, r22	; 0x80054c <yaw>
    3db2:	70 93 4d 05 	sts	0x054D, r23	; 0x80054d <yaw+0x1>
    3db6:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <yaw+0x2>
    3dba:	90 93 4f 05 	sts	0x054F, r25	; 0x80054f <yaw+0x3>
    roll  *= 180.0f / PI;
    3dbe:	20 ee       	ldi	r18, 0xE0	; 224
    3dc0:	3e e2       	ldi	r19, 0x2E	; 46
    3dc2:	45 e6       	ldi	r20, 0x65	; 101
    3dc4:	52 e4       	ldi	r21, 0x42	; 66
    3dc6:	c7 01       	movw	r24, r14
    3dc8:	b6 01       	movw	r22, r12
    3dca:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    3dce:	60 93 48 05 	sts	0x0548, r22	; 0x800548 <roll>
    3dd2:	70 93 49 05 	sts	0x0549, r23	; 0x800549 <roll+0x1>
    3dd6:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <roll+0x2>
    3dda:	90 93 4b 05 	sts	0x054B, r25	; 0x80054b <roll+0x3>
     
    if(SerialDebug) {
    Serial.print("Yaw, Pitch, Roll: ");
    3dde:	66 ec       	ldi	r22, 0xC6	; 198
    3de0:	74 e0       	ldi	r23, 0x04	; 4
    3de2:	86 ee       	ldi	r24, 0xE6	; 230
    3de4:	95 e0       	ldi	r25, 0x05	; 5
    3de6:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    Serial.print(yaw, 2);
    3dea:	40 91 4c 05 	lds	r20, 0x054C	; 0x80054c <yaw>
    3dee:	50 91 4d 05 	lds	r21, 0x054D	; 0x80054d <yaw+0x1>
    3df2:	60 91 4e 05 	lds	r22, 0x054E	; 0x80054e <yaw+0x2>
    3df6:	70 91 4f 05 	lds	r23, 0x054F	; 0x80054f <yaw+0x3>
    3dfa:	22 e0       	ldi	r18, 0x02	; 2
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	86 ee       	ldi	r24, 0xE6	; 230
    3e00:	95 e0       	ldi	r25, 0x05	; 5
    3e02:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <_ZN5Print5printEdi>
    Serial.print(", ");
    3e06:	6f e3       	ldi	r22, 0x3F	; 63
    3e08:	74 e0       	ldi	r23, 0x04	; 4
    3e0a:	86 ee       	ldi	r24, 0xE6	; 230
    3e0c:	95 e0       	ldi	r25, 0x05	; 5
    3e0e:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    Serial.print(pitch, 2);
    3e12:	40 91 50 05 	lds	r20, 0x0550	; 0x800550 <pitch>
    3e16:	50 91 51 05 	lds	r21, 0x0551	; 0x800551 <pitch+0x1>
    3e1a:	60 91 52 05 	lds	r22, 0x0552	; 0x800552 <pitch+0x2>
    3e1e:	70 91 53 05 	lds	r23, 0x0553	; 0x800553 <pitch+0x3>
    3e22:	22 e0       	ldi	r18, 0x02	; 2
    3e24:	30 e0       	ldi	r19, 0x00	; 0
    3e26:	86 ee       	ldi	r24, 0xE6	; 230
    3e28:	95 e0       	ldi	r25, 0x05	; 5
    3e2a:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <_ZN5Print5printEdi>
    Serial.print(", ");
    3e2e:	6f e3       	ldi	r22, 0x3F	; 63
    3e30:	74 e0       	ldi	r23, 0x04	; 4
    3e32:	86 ee       	ldi	r24, 0xE6	; 230
    3e34:	95 e0       	ldi	r25, 0x05	; 5
    3e36:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    Serial.println(roll, 2);
    3e3a:	40 91 48 05 	lds	r20, 0x0548	; 0x800548 <roll>
    3e3e:	50 91 49 05 	lds	r21, 0x0549	; 0x800549 <roll+0x1>
    3e42:	60 91 4a 05 	lds	r22, 0x054A	; 0x80054a <roll+0x2>
    3e46:	70 91 4b 05 	lds	r23, 0x054B	; 0x80054b <roll+0x3>
    3e4a:	22 e0       	ldi	r18, 0x02	; 2
    3e4c:	30 e0       	ldi	r19, 0x00	; 0
    3e4e:	86 ee       	ldi	r24, 0xE6	; 230
    3e50:	95 e0       	ldi	r25, 0x05	; 5
    3e52:	0e 94 6e 28 	call	0x50dc	; 0x50dc <_ZN5Print7printlnEdi>
    
    Serial.print("rate = "); Serial.print((float)sumCount/sum, 2); Serial.println(" Hz");
    3e56:	69 ed       	ldi	r22, 0xD9	; 217
    3e58:	74 e0       	ldi	r23, 0x04	; 4
    3e5a:	86 ee       	ldi	r24, 0xE6	; 230
    3e5c:	95 e0       	ldi	r25, 0x05	; 5
    3e5e:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    3e62:	60 91 54 05 	lds	r22, 0x0554	; 0x800554 <sumCount>
    3e66:	70 91 55 05 	lds	r23, 0x0555	; 0x800555 <sumCount+0x1>
    3e6a:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <sumCount+0x2>
    3e6e:	90 91 57 05 	lds	r25, 0x0557	; 0x800557 <sumCount+0x3>
    3e72:	0e 94 01 21 	call	0x4202	; 0x4202 <__floatunsisf>
    3e76:	20 91 40 05 	lds	r18, 0x0540	; 0x800540 <sum>
    3e7a:	30 91 41 05 	lds	r19, 0x0541	; 0x800541 <sum+0x1>
    3e7e:	40 91 42 05 	lds	r20, 0x0542	; 0x800542 <sum+0x2>
    3e82:	50 91 43 05 	lds	r21, 0x0543	; 0x800543 <sum+0x3>
    3e86:	0e 94 8f 20 	call	0x411e	; 0x411e <__divsf3>
    3e8a:	ab 01       	movw	r20, r22
    3e8c:	bc 01       	movw	r22, r24
    3e8e:	22 e0       	ldi	r18, 0x02	; 2
    3e90:	30 e0       	ldi	r19, 0x00	; 0
    3e92:	86 ee       	ldi	r24, 0xE6	; 230
    3e94:	95 e0       	ldi	r25, 0x05	; 5
    3e96:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <_ZN5Print5printEdi>
    3e9a:	61 ee       	ldi	r22, 0xE1	; 225
    3e9c:	74 e0       	ldi	r23, 0x04	; 4
    3e9e:	86 ee       	ldi	r24, 0xE6	; 230
    3ea0:	95 e0       	ldi	r25, 0x05	; 5
    3ea2:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <_ZN5Print7printlnEPKc>
    // produced by the on-board Digital Motion Processor of Invensense's MPU6050 6 DoF and MPU9150 9DoF sensors.
    // The 3.3 V 8 MHz Pro Mini is doing pretty well!
    //display.setCursor(0, 40); display.print("rt: "); display.print((float) sumCount / sum, 2); display.print(" Hz"); 
    //display.display();

    digitalWrite(myLed, !digitalRead(myLed));
    3ea6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <myLed>
    3eaa:	0e 94 42 2b 	call	0x5684	; 0x5684 <digitalRead>
    3eae:	61 e0       	ldi	r22, 0x01	; 1
    3eb0:	89 2b       	or	r24, r25
    3eb2:	09 f0       	breq	.+2      	; 0x3eb6 <loop+0xc2a>
    3eb4:	60 e0       	ldi	r22, 0x00	; 0
    3eb6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <myLed>
    3eba:	0e 94 12 2b 	call	0x5624	; 0x5624 <digitalWrite>
    count = millis(); 
    3ebe:	0e 94 05 2a 	call	0x540a	; 0x540a <millis>
    3ec2:	60 93 58 05 	sts	0x0558, r22	; 0x800558 <count>
    3ec6:	70 93 59 05 	sts	0x0559, r23	; 0x800559 <count+0x1>
    3eca:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <count+0x2>
    3ece:	90 93 5b 05 	sts	0x055B, r25	; 0x80055b <count+0x3>
    sumCount = 0;
    3ed2:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <sumCount>
    3ed6:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <sumCount+0x1>
    3eda:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <sumCount+0x2>
    3ede:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <sumCount+0x3>
    sum = 0;    
    3ee2:	10 92 40 05 	sts	0x0540, r1	; 0x800540 <sum>
    3ee6:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <sum+0x1>
    3eea:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <sum+0x2>
    3eee:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <sum+0x3>
    }
    }

}
    3ef2:	6c 96       	adiw	r28, 0x1c	; 28
    3ef4:	0f b6       	in	r0, 0x3f	; 63
    3ef6:	f8 94       	cli
    3ef8:	de bf       	out	0x3e, r29	; 62
    3efa:	0f be       	out	0x3f, r0	; 63
    3efc:	cd bf       	out	0x3d, r28	; 61
    3efe:	df 91       	pop	r29
    3f00:	cf 91       	pop	r28
    3f02:	1f 91       	pop	r17
    3f04:	0f 91       	pop	r16
    3f06:	ff 90       	pop	r15
    3f08:	ef 90       	pop	r14
    3f0a:	df 90       	pop	r13
    3f0c:	cf 90       	pop	r12
    3f0e:	bf 90       	pop	r11
    3f10:	af 90       	pop	r10
    3f12:	9f 90       	pop	r9
    3f14:	8f 90       	pop	r8
    3f16:	7f 90       	pop	r7
    3f18:	6f 90       	pop	r6
    3f1a:	5f 90       	pop	r5
    3f1c:	4f 90       	pop	r4
    3f1e:	08 95       	ret

00003f20 <__subsf3>:
    3f20:	50 58       	subi	r21, 0x80	; 128

00003f22 <__addsf3>:
    3f22:	bb 27       	eor	r27, r27
    3f24:	aa 27       	eor	r26, r26
    3f26:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <__addsf3x>
    3f2a:	0c 94 d4 21 	jmp	0x43a8	; 0x43a8 <__fp_round>
    3f2e:	0e 94 c6 21 	call	0x438c	; 0x438c <__fp_pscA>
    3f32:	38 f0       	brcs	.+14     	; 0x3f42 <__addsf3+0x20>
    3f34:	0e 94 cd 21 	call	0x439a	; 0x439a <__fp_pscB>
    3f38:	20 f0       	brcs	.+8      	; 0x3f42 <__addsf3+0x20>
    3f3a:	39 f4       	brne	.+14     	; 0x3f4a <__addsf3+0x28>
    3f3c:	9f 3f       	cpi	r25, 0xFF	; 255
    3f3e:	19 f4       	brne	.+6      	; 0x3f46 <__addsf3+0x24>
    3f40:	26 f4       	brtc	.+8      	; 0x3f4a <__addsf3+0x28>
    3f42:	0c 94 88 21 	jmp	0x4310	; 0x4310 <__fp_nan>
    3f46:	0e f4       	brtc	.+2      	; 0x3f4a <__addsf3+0x28>
    3f48:	e0 95       	com	r30
    3f4a:	e7 fb       	bst	r30, 7
    3f4c:	0c 94 82 21 	jmp	0x4304	; 0x4304 <__fp_inf>

00003f50 <__addsf3x>:
    3f50:	e9 2f       	mov	r30, r25
    3f52:	0e 94 e5 21 	call	0x43ca	; 0x43ca <__fp_split3>
    3f56:	58 f3       	brcs	.-42     	; 0x3f2e <__addsf3+0xc>
    3f58:	ba 17       	cp	r27, r26
    3f5a:	62 07       	cpc	r22, r18
    3f5c:	73 07       	cpc	r23, r19
    3f5e:	84 07       	cpc	r24, r20
    3f60:	95 07       	cpc	r25, r21
    3f62:	20 f0       	brcs	.+8      	; 0x3f6c <__addsf3x+0x1c>
    3f64:	79 f4       	brne	.+30     	; 0x3f84 <__addsf3x+0x34>
    3f66:	a6 f5       	brtc	.+104    	; 0x3fd0 <__addsf3x+0x80>
    3f68:	0c 94 07 22 	jmp	0x440e	; 0x440e <__fp_zero>
    3f6c:	0e f4       	brtc	.+2      	; 0x3f70 <__addsf3x+0x20>
    3f6e:	e0 95       	com	r30
    3f70:	0b 2e       	mov	r0, r27
    3f72:	ba 2f       	mov	r27, r26
    3f74:	a0 2d       	mov	r26, r0
    3f76:	0b 01       	movw	r0, r22
    3f78:	b9 01       	movw	r22, r18
    3f7a:	90 01       	movw	r18, r0
    3f7c:	0c 01       	movw	r0, r24
    3f7e:	ca 01       	movw	r24, r20
    3f80:	a0 01       	movw	r20, r0
    3f82:	11 24       	eor	r1, r1
    3f84:	ff 27       	eor	r31, r31
    3f86:	59 1b       	sub	r21, r25
    3f88:	99 f0       	breq	.+38     	; 0x3fb0 <__addsf3x+0x60>
    3f8a:	59 3f       	cpi	r21, 0xF9	; 249
    3f8c:	50 f4       	brcc	.+20     	; 0x3fa2 <__addsf3x+0x52>
    3f8e:	50 3e       	cpi	r21, 0xE0	; 224
    3f90:	68 f1       	brcs	.+90     	; 0x3fec <__addsf3x+0x9c>
    3f92:	1a 16       	cp	r1, r26
    3f94:	f0 40       	sbci	r31, 0x00	; 0
    3f96:	a2 2f       	mov	r26, r18
    3f98:	23 2f       	mov	r18, r19
    3f9a:	34 2f       	mov	r19, r20
    3f9c:	44 27       	eor	r20, r20
    3f9e:	58 5f       	subi	r21, 0xF8	; 248
    3fa0:	f3 cf       	rjmp	.-26     	; 0x3f88 <__addsf3x+0x38>
    3fa2:	46 95       	lsr	r20
    3fa4:	37 95       	ror	r19
    3fa6:	27 95       	ror	r18
    3fa8:	a7 95       	ror	r26
    3faa:	f0 40       	sbci	r31, 0x00	; 0
    3fac:	53 95       	inc	r21
    3fae:	c9 f7       	brne	.-14     	; 0x3fa2 <__addsf3x+0x52>
    3fb0:	7e f4       	brtc	.+30     	; 0x3fd0 <__addsf3x+0x80>
    3fb2:	1f 16       	cp	r1, r31
    3fb4:	ba 0b       	sbc	r27, r26
    3fb6:	62 0b       	sbc	r22, r18
    3fb8:	73 0b       	sbc	r23, r19
    3fba:	84 0b       	sbc	r24, r20
    3fbc:	ba f0       	brmi	.+46     	; 0x3fec <__addsf3x+0x9c>
    3fbe:	91 50       	subi	r25, 0x01	; 1
    3fc0:	a1 f0       	breq	.+40     	; 0x3fea <__addsf3x+0x9a>
    3fc2:	ff 0f       	add	r31, r31
    3fc4:	bb 1f       	adc	r27, r27
    3fc6:	66 1f       	adc	r22, r22
    3fc8:	77 1f       	adc	r23, r23
    3fca:	88 1f       	adc	r24, r24
    3fcc:	c2 f7       	brpl	.-16     	; 0x3fbe <__addsf3x+0x6e>
    3fce:	0e c0       	rjmp	.+28     	; 0x3fec <__addsf3x+0x9c>
    3fd0:	ba 0f       	add	r27, r26
    3fd2:	62 1f       	adc	r22, r18
    3fd4:	73 1f       	adc	r23, r19
    3fd6:	84 1f       	adc	r24, r20
    3fd8:	48 f4       	brcc	.+18     	; 0x3fec <__addsf3x+0x9c>
    3fda:	87 95       	ror	r24
    3fdc:	77 95       	ror	r23
    3fde:	67 95       	ror	r22
    3fe0:	b7 95       	ror	r27
    3fe2:	f7 95       	ror	r31
    3fe4:	9e 3f       	cpi	r25, 0xFE	; 254
    3fe6:	08 f0       	brcs	.+2      	; 0x3fea <__addsf3x+0x9a>
    3fe8:	b0 cf       	rjmp	.-160    	; 0x3f4a <__addsf3+0x28>
    3fea:	93 95       	inc	r25
    3fec:	88 0f       	add	r24, r24
    3fee:	08 f0       	brcs	.+2      	; 0x3ff2 <__addsf3x+0xa2>
    3ff0:	99 27       	eor	r25, r25
    3ff2:	ee 0f       	add	r30, r30
    3ff4:	97 95       	ror	r25
    3ff6:	87 95       	ror	r24
    3ff8:	08 95       	ret

00003ffa <asin>:
    3ffa:	9f 93       	push	r25
    3ffc:	9f 77       	andi	r25, 0x7F	; 127
    3ffe:	ee e3       	ldi	r30, 0x3E	; 62
    4000:	89 37       	cpi	r24, 0x79	; 121
    4002:	9e 07       	cpc	r25, r30
    4004:	28 f4       	brcc	.+10     	; 0x4010 <asin+0x16>
    4006:	e8 e6       	ldi	r30, 0x68	; 104
    4008:	f0 e0       	ldi	r31, 0x00	; 0
    400a:	0e 94 b2 21 	call	0x4364	; 0x4364 <__fp_powsodd>
    400e:	0c c0       	rjmp	.+24     	; 0x4028 <asin+0x2e>
    4010:	0e 94 3e 21 	call	0x427c	; 0x427c <__fp_arccos>
    4014:	90 58       	subi	r25, 0x80	; 128
    4016:	a2 ea       	ldi	r26, 0xA2	; 162
    4018:	2a ed       	ldi	r18, 0xDA	; 218
    401a:	3f e0       	ldi	r19, 0x0F	; 15
    401c:	49 ec       	ldi	r20, 0xC9	; 201
    401e:	5f e3       	ldi	r21, 0x3F	; 63
    4020:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <__addsf3x>
    4024:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <__fp_round>
    4028:	0f 90       	pop	r0
    402a:	07 fc       	sbrc	r0, 7
    402c:	90 58       	subi	r25, 0x80	; 128
    402e:	08 95       	ret
    4030:	0e 94 c6 21 	call	0x438c	; 0x438c <__fp_pscA>
    4034:	60 f0       	brcs	.+24     	; 0x404e <asin+0x54>
    4036:	80 e8       	ldi	r24, 0x80	; 128
    4038:	91 e0       	ldi	r25, 0x01	; 1
    403a:	09 f4       	brne	.+2      	; 0x403e <asin+0x44>
    403c:	9e ef       	ldi	r25, 0xFE	; 254
    403e:	0e 94 cd 21 	call	0x439a	; 0x439a <__fp_pscB>
    4042:	28 f0       	brcs	.+10     	; 0x404e <asin+0x54>
    4044:	40 e8       	ldi	r20, 0x80	; 128
    4046:	51 e0       	ldi	r21, 0x01	; 1
    4048:	71 f4       	brne	.+28     	; 0x4066 <atan2+0x10>
    404a:	5e ef       	ldi	r21, 0xFE	; 254
    404c:	0c c0       	rjmp	.+24     	; 0x4066 <atan2+0x10>
    404e:	0c 94 88 21 	jmp	0x4310	; 0x4310 <__fp_nan>
    4052:	0c 94 07 22 	jmp	0x440e	; 0x440e <__fp_zero>

00004056 <atan2>:
    4056:	e9 2f       	mov	r30, r25
    4058:	e0 78       	andi	r30, 0x80	; 128
    405a:	0e 94 e5 21 	call	0x43ca	; 0x43ca <__fp_split3>
    405e:	40 f3       	brcs	.-48     	; 0x4030 <asin+0x36>
    4060:	09 2e       	mov	r0, r25
    4062:	05 2a       	or	r0, r21
    4064:	b1 f3       	breq	.-20     	; 0x4052 <asin+0x58>
    4066:	26 17       	cp	r18, r22
    4068:	37 07       	cpc	r19, r23
    406a:	48 07       	cpc	r20, r24
    406c:	59 07       	cpc	r21, r25
    406e:	38 f0       	brcs	.+14     	; 0x407e <atan2+0x28>
    4070:	0e 2e       	mov	r0, r30
    4072:	07 f8       	bld	r0, 7
    4074:	e0 25       	eor	r30, r0
    4076:	69 f0       	breq	.+26     	; 0x4092 <atan2+0x3c>
    4078:	e0 25       	eor	r30, r0
    407a:	e0 64       	ori	r30, 0x40	; 64
    407c:	0a c0       	rjmp	.+20     	; 0x4092 <atan2+0x3c>
    407e:	ef 63       	ori	r30, 0x3F	; 63
    4080:	07 f8       	bld	r0, 7
    4082:	00 94       	com	r0
    4084:	07 fa       	bst	r0, 7
    4086:	db 01       	movw	r26, r22
    4088:	b9 01       	movw	r22, r18
    408a:	9d 01       	movw	r18, r26
    408c:	dc 01       	movw	r26, r24
    408e:	ca 01       	movw	r24, r20
    4090:	ad 01       	movw	r20, r26
    4092:	ef 93       	push	r30
    4094:	0e 94 a6 20 	call	0x414c	; 0x414c <__divsf3_pse>
    4098:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <__fp_round>
    409c:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <atan>
    40a0:	5f 91       	pop	r21
    40a2:	55 23       	and	r21, r21
    40a4:	39 f0       	breq	.+14     	; 0x40b4 <atan2+0x5e>
    40a6:	2b ed       	ldi	r18, 0xDB	; 219
    40a8:	3f e0       	ldi	r19, 0x0F	; 15
    40aa:	49 e4       	ldi	r20, 0x49	; 73
    40ac:	50 fd       	sbrc	r21, 0
    40ae:	49 ec       	ldi	r20, 0xC9	; 201
    40b0:	0c 94 91 1f 	jmp	0x3f22	; 0x3f22 <__addsf3>
    40b4:	08 95       	ret

000040b6 <atan>:
    40b6:	df 93       	push	r29
    40b8:	dd 27       	eor	r29, r29
    40ba:	b9 2f       	mov	r27, r25
    40bc:	bf 77       	andi	r27, 0x7F	; 127
    40be:	40 e8       	ldi	r20, 0x80	; 128
    40c0:	5f e3       	ldi	r21, 0x3F	; 63
    40c2:	16 16       	cp	r1, r22
    40c4:	17 06       	cpc	r1, r23
    40c6:	48 07       	cpc	r20, r24
    40c8:	5b 07       	cpc	r21, r27
    40ca:	18 f4       	brcc	.+6      	; 0x40d2 <atan+0x1c>
    40cc:	d9 2f       	mov	r29, r25
    40ce:	0e 94 0e 22 	call	0x441c	; 0x441c <inverse>
    40d2:	9f 93       	push	r25
    40d4:	8f 93       	push	r24
    40d6:	7f 93       	push	r23
    40d8:	6f 93       	push	r22
    40da:	0e 94 19 23 	call	0x4632	; 0x4632 <square>
    40de:	ec e7       	ldi	r30, 0x7C	; 124
    40e0:	f0 e0       	ldi	r31, 0x00	; 0
    40e2:	0e 94 8b 21 	call	0x4316	; 0x4316 <__fp_powser>
    40e6:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <__fp_round>
    40ea:	2f 91       	pop	r18
    40ec:	3f 91       	pop	r19
    40ee:	4f 91       	pop	r20
    40f0:	5f 91       	pop	r21
    40f2:	0e 94 29 22 	call	0x4452	; 0x4452 <__mulsf3x>
    40f6:	dd 23       	and	r29, r29
    40f8:	51 f0       	breq	.+20     	; 0x410e <atan+0x58>
    40fa:	90 58       	subi	r25, 0x80	; 128
    40fc:	a2 ea       	ldi	r26, 0xA2	; 162
    40fe:	2a ed       	ldi	r18, 0xDA	; 218
    4100:	3f e0       	ldi	r19, 0x0F	; 15
    4102:	49 ec       	ldi	r20, 0xC9	; 201
    4104:	5f e3       	ldi	r21, 0x3F	; 63
    4106:	d0 78       	andi	r29, 0x80	; 128
    4108:	5d 27       	eor	r21, r29
    410a:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <__addsf3x>
    410e:	df 91       	pop	r29
    4110:	0c 94 d4 21 	jmp	0x43a8	; 0x43a8 <__fp_round>

00004114 <__cmpsf2>:
    4114:	0e 94 5e 21 	call	0x42bc	; 0x42bc <__fp_cmp>
    4118:	08 f4       	brcc	.+2      	; 0x411c <__cmpsf2+0x8>
    411a:	81 e0       	ldi	r24, 0x01	; 1
    411c:	08 95       	ret

0000411e <__divsf3>:
    411e:	0e 94 a3 20 	call	0x4146	; 0x4146 <__divsf3x>
    4122:	0c 94 d4 21 	jmp	0x43a8	; 0x43a8 <__fp_round>
    4126:	0e 94 cd 21 	call	0x439a	; 0x439a <__fp_pscB>
    412a:	58 f0       	brcs	.+22     	; 0x4142 <__divsf3+0x24>
    412c:	0e 94 c6 21 	call	0x438c	; 0x438c <__fp_pscA>
    4130:	40 f0       	brcs	.+16     	; 0x4142 <__divsf3+0x24>
    4132:	29 f4       	brne	.+10     	; 0x413e <__divsf3+0x20>
    4134:	5f 3f       	cpi	r21, 0xFF	; 255
    4136:	29 f0       	breq	.+10     	; 0x4142 <__divsf3+0x24>
    4138:	0c 94 82 21 	jmp	0x4304	; 0x4304 <__fp_inf>
    413c:	51 11       	cpse	r21, r1
    413e:	0c 94 08 22 	jmp	0x4410	; 0x4410 <__fp_szero>
    4142:	0c 94 88 21 	jmp	0x4310	; 0x4310 <__fp_nan>

00004146 <__divsf3x>:
    4146:	0e 94 e5 21 	call	0x43ca	; 0x43ca <__fp_split3>
    414a:	68 f3       	brcs	.-38     	; 0x4126 <__divsf3+0x8>

0000414c <__divsf3_pse>:
    414c:	99 23       	and	r25, r25
    414e:	b1 f3       	breq	.-20     	; 0x413c <__divsf3+0x1e>
    4150:	55 23       	and	r21, r21
    4152:	91 f3       	breq	.-28     	; 0x4138 <__divsf3+0x1a>
    4154:	95 1b       	sub	r25, r21
    4156:	55 0b       	sbc	r21, r21
    4158:	bb 27       	eor	r27, r27
    415a:	aa 27       	eor	r26, r26
    415c:	62 17       	cp	r22, r18
    415e:	73 07       	cpc	r23, r19
    4160:	84 07       	cpc	r24, r20
    4162:	38 f0       	brcs	.+14     	; 0x4172 <__divsf3_pse+0x26>
    4164:	9f 5f       	subi	r25, 0xFF	; 255
    4166:	5f 4f       	sbci	r21, 0xFF	; 255
    4168:	22 0f       	add	r18, r18
    416a:	33 1f       	adc	r19, r19
    416c:	44 1f       	adc	r20, r20
    416e:	aa 1f       	adc	r26, r26
    4170:	a9 f3       	breq	.-22     	; 0x415c <__divsf3_pse+0x10>
    4172:	35 d0       	rcall	.+106    	; 0x41de <__divsf3_pse+0x92>
    4174:	0e 2e       	mov	r0, r30
    4176:	3a f0       	brmi	.+14     	; 0x4186 <__divsf3_pse+0x3a>
    4178:	e0 e8       	ldi	r30, 0x80	; 128
    417a:	32 d0       	rcall	.+100    	; 0x41e0 <__divsf3_pse+0x94>
    417c:	91 50       	subi	r25, 0x01	; 1
    417e:	50 40       	sbci	r21, 0x00	; 0
    4180:	e6 95       	lsr	r30
    4182:	00 1c       	adc	r0, r0
    4184:	ca f7       	brpl	.-14     	; 0x4178 <__divsf3_pse+0x2c>
    4186:	2b d0       	rcall	.+86     	; 0x41de <__divsf3_pse+0x92>
    4188:	fe 2f       	mov	r31, r30
    418a:	29 d0       	rcall	.+82     	; 0x41de <__divsf3_pse+0x92>
    418c:	66 0f       	add	r22, r22
    418e:	77 1f       	adc	r23, r23
    4190:	88 1f       	adc	r24, r24
    4192:	bb 1f       	adc	r27, r27
    4194:	26 17       	cp	r18, r22
    4196:	37 07       	cpc	r19, r23
    4198:	48 07       	cpc	r20, r24
    419a:	ab 07       	cpc	r26, r27
    419c:	b0 e8       	ldi	r27, 0x80	; 128
    419e:	09 f0       	breq	.+2      	; 0x41a2 <__divsf3_pse+0x56>
    41a0:	bb 0b       	sbc	r27, r27
    41a2:	80 2d       	mov	r24, r0
    41a4:	bf 01       	movw	r22, r30
    41a6:	ff 27       	eor	r31, r31
    41a8:	93 58       	subi	r25, 0x83	; 131
    41aa:	5f 4f       	sbci	r21, 0xFF	; 255
    41ac:	3a f0       	brmi	.+14     	; 0x41bc <__divsf3_pse+0x70>
    41ae:	9e 3f       	cpi	r25, 0xFE	; 254
    41b0:	51 05       	cpc	r21, r1
    41b2:	78 f0       	brcs	.+30     	; 0x41d2 <__divsf3_pse+0x86>
    41b4:	0c 94 82 21 	jmp	0x4304	; 0x4304 <__fp_inf>
    41b8:	0c 94 08 22 	jmp	0x4410	; 0x4410 <__fp_szero>
    41bc:	5f 3f       	cpi	r21, 0xFF	; 255
    41be:	e4 f3       	brlt	.-8      	; 0x41b8 <__divsf3_pse+0x6c>
    41c0:	98 3e       	cpi	r25, 0xE8	; 232
    41c2:	d4 f3       	brlt	.-12     	; 0x41b8 <__divsf3_pse+0x6c>
    41c4:	86 95       	lsr	r24
    41c6:	77 95       	ror	r23
    41c8:	67 95       	ror	r22
    41ca:	b7 95       	ror	r27
    41cc:	f7 95       	ror	r31
    41ce:	9f 5f       	subi	r25, 0xFF	; 255
    41d0:	c9 f7       	brne	.-14     	; 0x41c4 <__divsf3_pse+0x78>
    41d2:	88 0f       	add	r24, r24
    41d4:	91 1d       	adc	r25, r1
    41d6:	96 95       	lsr	r25
    41d8:	87 95       	ror	r24
    41da:	97 f9       	bld	r25, 7
    41dc:	08 95       	ret
    41de:	e1 e0       	ldi	r30, 0x01	; 1
    41e0:	66 0f       	add	r22, r22
    41e2:	77 1f       	adc	r23, r23
    41e4:	88 1f       	adc	r24, r24
    41e6:	bb 1f       	adc	r27, r27
    41e8:	62 17       	cp	r22, r18
    41ea:	73 07       	cpc	r23, r19
    41ec:	84 07       	cpc	r24, r20
    41ee:	ba 07       	cpc	r27, r26
    41f0:	20 f0       	brcs	.+8      	; 0x41fa <__divsf3_pse+0xae>
    41f2:	62 1b       	sub	r22, r18
    41f4:	73 0b       	sbc	r23, r19
    41f6:	84 0b       	sbc	r24, r20
    41f8:	ba 0b       	sbc	r27, r26
    41fa:	ee 1f       	adc	r30, r30
    41fc:	88 f7       	brcc	.-30     	; 0x41e0 <__divsf3_pse+0x94>
    41fe:	e0 95       	com	r30
    4200:	08 95       	ret

00004202 <__floatunsisf>:
    4202:	e8 94       	clt
    4204:	09 c0       	rjmp	.+18     	; 0x4218 <__floatsisf+0x12>

00004206 <__floatsisf>:
    4206:	97 fb       	bst	r25, 7
    4208:	3e f4       	brtc	.+14     	; 0x4218 <__floatsisf+0x12>
    420a:	90 95       	com	r25
    420c:	80 95       	com	r24
    420e:	70 95       	com	r23
    4210:	61 95       	neg	r22
    4212:	7f 4f       	sbci	r23, 0xFF	; 255
    4214:	8f 4f       	sbci	r24, 0xFF	; 255
    4216:	9f 4f       	sbci	r25, 0xFF	; 255
    4218:	99 23       	and	r25, r25
    421a:	a9 f0       	breq	.+42     	; 0x4246 <__floatsisf+0x40>
    421c:	f9 2f       	mov	r31, r25
    421e:	96 e9       	ldi	r25, 0x96	; 150
    4220:	bb 27       	eor	r27, r27
    4222:	93 95       	inc	r25
    4224:	f6 95       	lsr	r31
    4226:	87 95       	ror	r24
    4228:	77 95       	ror	r23
    422a:	67 95       	ror	r22
    422c:	b7 95       	ror	r27
    422e:	f1 11       	cpse	r31, r1
    4230:	f8 cf       	rjmp	.-16     	; 0x4222 <__floatsisf+0x1c>
    4232:	fa f4       	brpl	.+62     	; 0x4272 <__floatsisf+0x6c>
    4234:	bb 0f       	add	r27, r27
    4236:	11 f4       	brne	.+4      	; 0x423c <__floatsisf+0x36>
    4238:	60 ff       	sbrs	r22, 0
    423a:	1b c0       	rjmp	.+54     	; 0x4272 <__floatsisf+0x6c>
    423c:	6f 5f       	subi	r22, 0xFF	; 255
    423e:	7f 4f       	sbci	r23, 0xFF	; 255
    4240:	8f 4f       	sbci	r24, 0xFF	; 255
    4242:	9f 4f       	sbci	r25, 0xFF	; 255
    4244:	16 c0       	rjmp	.+44     	; 0x4272 <__floatsisf+0x6c>
    4246:	88 23       	and	r24, r24
    4248:	11 f0       	breq	.+4      	; 0x424e <__floatsisf+0x48>
    424a:	96 e9       	ldi	r25, 0x96	; 150
    424c:	11 c0       	rjmp	.+34     	; 0x4270 <__floatsisf+0x6a>
    424e:	77 23       	and	r23, r23
    4250:	21 f0       	breq	.+8      	; 0x425a <__floatsisf+0x54>
    4252:	9e e8       	ldi	r25, 0x8E	; 142
    4254:	87 2f       	mov	r24, r23
    4256:	76 2f       	mov	r23, r22
    4258:	05 c0       	rjmp	.+10     	; 0x4264 <__floatsisf+0x5e>
    425a:	66 23       	and	r22, r22
    425c:	71 f0       	breq	.+28     	; 0x427a <__floatsisf+0x74>
    425e:	96 e8       	ldi	r25, 0x86	; 134
    4260:	86 2f       	mov	r24, r22
    4262:	70 e0       	ldi	r23, 0x00	; 0
    4264:	60 e0       	ldi	r22, 0x00	; 0
    4266:	2a f0       	brmi	.+10     	; 0x4272 <__floatsisf+0x6c>
    4268:	9a 95       	dec	r25
    426a:	66 0f       	add	r22, r22
    426c:	77 1f       	adc	r23, r23
    426e:	88 1f       	adc	r24, r24
    4270:	da f7       	brpl	.-10     	; 0x4268 <__floatsisf+0x62>
    4272:	88 0f       	add	r24, r24
    4274:	96 95       	lsr	r25
    4276:	87 95       	ror	r24
    4278:	97 f9       	bld	r25, 7
    427a:	08 95       	ret

0000427c <__fp_arccos>:
    427c:	df 93       	push	r29
    427e:	cf 93       	push	r28
    4280:	1f 93       	push	r17
    4282:	0f 93       	push	r16
    4284:	8b 01       	movw	r16, r22
    4286:	ec 01       	movw	r28, r24
    4288:	e9 ea       	ldi	r30, 0xA9	; 169
    428a:	f0 e0       	ldi	r31, 0x00	; 0
    428c:	0e 94 8b 21 	call	0x4316	; 0x4316 <__fp_powser>
    4290:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <__fp_round>
    4294:	98 01       	movw	r18, r16
    4296:	ae 01       	movw	r20, r28
    4298:	8b 01       	movw	r16, r22
    429a:	ec 01       	movw	r28, r24
    429c:	60 e0       	ldi	r22, 0x00	; 0
    429e:	70 e0       	ldi	r23, 0x00	; 0
    42a0:	80 e8       	ldi	r24, 0x80	; 128
    42a2:	9f e3       	ldi	r25, 0x3F	; 63
    42a4:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    42a8:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <sqrt>
    42ac:	98 01       	movw	r18, r16
    42ae:	ae 01       	movw	r20, r28
    42b0:	0f 91       	pop	r16
    42b2:	1f 91       	pop	r17
    42b4:	cf 91       	pop	r28
    42b6:	df 91       	pop	r29
    42b8:	0c 94 29 22 	jmp	0x4452	; 0x4452 <__mulsf3x>

000042bc <__fp_cmp>:
    42bc:	99 0f       	add	r25, r25
    42be:	00 08       	sbc	r0, r0
    42c0:	55 0f       	add	r21, r21
    42c2:	aa 0b       	sbc	r26, r26
    42c4:	e0 e8       	ldi	r30, 0x80	; 128
    42c6:	fe ef       	ldi	r31, 0xFE	; 254
    42c8:	16 16       	cp	r1, r22
    42ca:	17 06       	cpc	r1, r23
    42cc:	e8 07       	cpc	r30, r24
    42ce:	f9 07       	cpc	r31, r25
    42d0:	c0 f0       	brcs	.+48     	; 0x4302 <__fp_cmp+0x46>
    42d2:	12 16       	cp	r1, r18
    42d4:	13 06       	cpc	r1, r19
    42d6:	e4 07       	cpc	r30, r20
    42d8:	f5 07       	cpc	r31, r21
    42da:	98 f0       	brcs	.+38     	; 0x4302 <__fp_cmp+0x46>
    42dc:	62 1b       	sub	r22, r18
    42de:	73 0b       	sbc	r23, r19
    42e0:	84 0b       	sbc	r24, r20
    42e2:	95 0b       	sbc	r25, r21
    42e4:	39 f4       	brne	.+14     	; 0x42f4 <__fp_cmp+0x38>
    42e6:	0a 26       	eor	r0, r26
    42e8:	61 f0       	breq	.+24     	; 0x4302 <__fp_cmp+0x46>
    42ea:	23 2b       	or	r18, r19
    42ec:	24 2b       	or	r18, r20
    42ee:	25 2b       	or	r18, r21
    42f0:	21 f4       	brne	.+8      	; 0x42fa <__fp_cmp+0x3e>
    42f2:	08 95       	ret
    42f4:	0a 26       	eor	r0, r26
    42f6:	09 f4       	brne	.+2      	; 0x42fa <__fp_cmp+0x3e>
    42f8:	a1 40       	sbci	r26, 0x01	; 1
    42fa:	a6 95       	lsr	r26
    42fc:	8f ef       	ldi	r24, 0xFF	; 255
    42fe:	81 1d       	adc	r24, r1
    4300:	81 1d       	adc	r24, r1
    4302:	08 95       	ret

00004304 <__fp_inf>:
    4304:	97 f9       	bld	r25, 7
    4306:	9f 67       	ori	r25, 0x7F	; 127
    4308:	80 e8       	ldi	r24, 0x80	; 128
    430a:	70 e0       	ldi	r23, 0x00	; 0
    430c:	60 e0       	ldi	r22, 0x00	; 0
    430e:	08 95       	ret

00004310 <__fp_nan>:
    4310:	9f ef       	ldi	r25, 0xFF	; 255
    4312:	80 ec       	ldi	r24, 0xC0	; 192
    4314:	08 95       	ret

00004316 <__fp_powser>:
    4316:	df 93       	push	r29
    4318:	cf 93       	push	r28
    431a:	1f 93       	push	r17
    431c:	0f 93       	push	r16
    431e:	ff 92       	push	r15
    4320:	ef 92       	push	r14
    4322:	df 92       	push	r13
    4324:	7b 01       	movw	r14, r22
    4326:	8c 01       	movw	r16, r24
    4328:	68 94       	set
    432a:	06 c0       	rjmp	.+12     	; 0x4338 <__fp_powser+0x22>
    432c:	da 2e       	mov	r13, r26
    432e:	ef 01       	movw	r28, r30
    4330:	0e 94 29 22 	call	0x4452	; 0x4452 <__mulsf3x>
    4334:	fe 01       	movw	r30, r28
    4336:	e8 94       	clt
    4338:	a5 91       	lpm	r26, Z+
    433a:	25 91       	lpm	r18, Z+
    433c:	35 91       	lpm	r19, Z+
    433e:	45 91       	lpm	r20, Z+
    4340:	55 91       	lpm	r21, Z+
    4342:	a6 f3       	brts	.-24     	; 0x432c <__fp_powser+0x16>
    4344:	ef 01       	movw	r28, r30
    4346:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <__addsf3x>
    434a:	fe 01       	movw	r30, r28
    434c:	97 01       	movw	r18, r14
    434e:	a8 01       	movw	r20, r16
    4350:	da 94       	dec	r13
    4352:	69 f7       	brne	.-38     	; 0x432e <__fp_powser+0x18>
    4354:	df 90       	pop	r13
    4356:	ef 90       	pop	r14
    4358:	ff 90       	pop	r15
    435a:	0f 91       	pop	r16
    435c:	1f 91       	pop	r17
    435e:	cf 91       	pop	r28
    4360:	df 91       	pop	r29
    4362:	08 95       	ret

00004364 <__fp_powsodd>:
    4364:	9f 93       	push	r25
    4366:	8f 93       	push	r24
    4368:	7f 93       	push	r23
    436a:	6f 93       	push	r22
    436c:	ff 93       	push	r31
    436e:	ef 93       	push	r30
    4370:	9b 01       	movw	r18, r22
    4372:	ac 01       	movw	r20, r24
    4374:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    4378:	ef 91       	pop	r30
    437a:	ff 91       	pop	r31
    437c:	0e 94 8b 21 	call	0x4316	; 0x4316 <__fp_powser>
    4380:	2f 91       	pop	r18
    4382:	3f 91       	pop	r19
    4384:	4f 91       	pop	r20
    4386:	5f 91       	pop	r21
    4388:	0c 94 16 22 	jmp	0x442c	; 0x442c <__mulsf3>

0000438c <__fp_pscA>:
    438c:	00 24       	eor	r0, r0
    438e:	0a 94       	dec	r0
    4390:	16 16       	cp	r1, r22
    4392:	17 06       	cpc	r1, r23
    4394:	18 06       	cpc	r1, r24
    4396:	09 06       	cpc	r0, r25
    4398:	08 95       	ret

0000439a <__fp_pscB>:
    439a:	00 24       	eor	r0, r0
    439c:	0a 94       	dec	r0
    439e:	12 16       	cp	r1, r18
    43a0:	13 06       	cpc	r1, r19
    43a2:	14 06       	cpc	r1, r20
    43a4:	05 06       	cpc	r0, r21
    43a6:	08 95       	ret

000043a8 <__fp_round>:
    43a8:	09 2e       	mov	r0, r25
    43aa:	03 94       	inc	r0
    43ac:	00 0c       	add	r0, r0
    43ae:	11 f4       	brne	.+4      	; 0x43b4 <__fp_round+0xc>
    43b0:	88 23       	and	r24, r24
    43b2:	52 f0       	brmi	.+20     	; 0x43c8 <__fp_round+0x20>
    43b4:	bb 0f       	add	r27, r27
    43b6:	40 f4       	brcc	.+16     	; 0x43c8 <__fp_round+0x20>
    43b8:	bf 2b       	or	r27, r31
    43ba:	11 f4       	brne	.+4      	; 0x43c0 <__fp_round+0x18>
    43bc:	60 ff       	sbrs	r22, 0
    43be:	04 c0       	rjmp	.+8      	; 0x43c8 <__fp_round+0x20>
    43c0:	6f 5f       	subi	r22, 0xFF	; 255
    43c2:	7f 4f       	sbci	r23, 0xFF	; 255
    43c4:	8f 4f       	sbci	r24, 0xFF	; 255
    43c6:	9f 4f       	sbci	r25, 0xFF	; 255
    43c8:	08 95       	ret

000043ca <__fp_split3>:
    43ca:	57 fd       	sbrc	r21, 7
    43cc:	90 58       	subi	r25, 0x80	; 128
    43ce:	44 0f       	add	r20, r20
    43d0:	55 1f       	adc	r21, r21
    43d2:	59 f0       	breq	.+22     	; 0x43ea <__fp_splitA+0x10>
    43d4:	5f 3f       	cpi	r21, 0xFF	; 255
    43d6:	71 f0       	breq	.+28     	; 0x43f4 <__fp_splitA+0x1a>
    43d8:	47 95       	ror	r20

000043da <__fp_splitA>:
    43da:	88 0f       	add	r24, r24
    43dc:	97 fb       	bst	r25, 7
    43de:	99 1f       	adc	r25, r25
    43e0:	61 f0       	breq	.+24     	; 0x43fa <__fp_splitA+0x20>
    43e2:	9f 3f       	cpi	r25, 0xFF	; 255
    43e4:	79 f0       	breq	.+30     	; 0x4404 <__fp_splitA+0x2a>
    43e6:	87 95       	ror	r24
    43e8:	08 95       	ret
    43ea:	12 16       	cp	r1, r18
    43ec:	13 06       	cpc	r1, r19
    43ee:	14 06       	cpc	r1, r20
    43f0:	55 1f       	adc	r21, r21
    43f2:	f2 cf       	rjmp	.-28     	; 0x43d8 <__fp_split3+0xe>
    43f4:	46 95       	lsr	r20
    43f6:	f1 df       	rcall	.-30     	; 0x43da <__fp_splitA>
    43f8:	08 c0       	rjmp	.+16     	; 0x440a <__fp_splitA+0x30>
    43fa:	16 16       	cp	r1, r22
    43fc:	17 06       	cpc	r1, r23
    43fe:	18 06       	cpc	r1, r24
    4400:	99 1f       	adc	r25, r25
    4402:	f1 cf       	rjmp	.-30     	; 0x43e6 <__fp_splitA+0xc>
    4404:	86 95       	lsr	r24
    4406:	71 05       	cpc	r23, r1
    4408:	61 05       	cpc	r22, r1
    440a:	08 94       	sec
    440c:	08 95       	ret

0000440e <__fp_zero>:
    440e:	e8 94       	clt

00004410 <__fp_szero>:
    4410:	bb 27       	eor	r27, r27
    4412:	66 27       	eor	r22, r22
    4414:	77 27       	eor	r23, r23
    4416:	cb 01       	movw	r24, r22
    4418:	97 f9       	bld	r25, 7
    441a:	08 95       	ret

0000441c <inverse>:
    441c:	9b 01       	movw	r18, r22
    441e:	ac 01       	movw	r20, r24
    4420:	60 e0       	ldi	r22, 0x00	; 0
    4422:	70 e0       	ldi	r23, 0x00	; 0
    4424:	80 e8       	ldi	r24, 0x80	; 128
    4426:	9f e3       	ldi	r25, 0x3F	; 63
    4428:	0c 94 8f 20 	jmp	0x411e	; 0x411e <__divsf3>

0000442c <__mulsf3>:
    442c:	0e 94 29 22 	call	0x4452	; 0x4452 <__mulsf3x>
    4430:	0c 94 d4 21 	jmp	0x43a8	; 0x43a8 <__fp_round>
    4434:	0e 94 c6 21 	call	0x438c	; 0x438c <__fp_pscA>
    4438:	38 f0       	brcs	.+14     	; 0x4448 <__mulsf3+0x1c>
    443a:	0e 94 cd 21 	call	0x439a	; 0x439a <__fp_pscB>
    443e:	20 f0       	brcs	.+8      	; 0x4448 <__mulsf3+0x1c>
    4440:	95 23       	and	r25, r21
    4442:	11 f0       	breq	.+4      	; 0x4448 <__mulsf3+0x1c>
    4444:	0c 94 82 21 	jmp	0x4304	; 0x4304 <__fp_inf>
    4448:	0c 94 88 21 	jmp	0x4310	; 0x4310 <__fp_nan>
    444c:	11 24       	eor	r1, r1
    444e:	0c 94 08 22 	jmp	0x4410	; 0x4410 <__fp_szero>

00004452 <__mulsf3x>:
    4452:	0e 94 e5 21 	call	0x43ca	; 0x43ca <__fp_split3>
    4456:	70 f3       	brcs	.-36     	; 0x4434 <__mulsf3+0x8>

00004458 <__mulsf3_pse>:
    4458:	95 9f       	mul	r25, r21
    445a:	c1 f3       	breq	.-16     	; 0x444c <__mulsf3+0x20>
    445c:	95 0f       	add	r25, r21
    445e:	50 e0       	ldi	r21, 0x00	; 0
    4460:	55 1f       	adc	r21, r21
    4462:	62 9f       	mul	r22, r18
    4464:	f0 01       	movw	r30, r0
    4466:	72 9f       	mul	r23, r18
    4468:	bb 27       	eor	r27, r27
    446a:	f0 0d       	add	r31, r0
    446c:	b1 1d       	adc	r27, r1
    446e:	63 9f       	mul	r22, r19
    4470:	aa 27       	eor	r26, r26
    4472:	f0 0d       	add	r31, r0
    4474:	b1 1d       	adc	r27, r1
    4476:	aa 1f       	adc	r26, r26
    4478:	64 9f       	mul	r22, r20
    447a:	66 27       	eor	r22, r22
    447c:	b0 0d       	add	r27, r0
    447e:	a1 1d       	adc	r26, r1
    4480:	66 1f       	adc	r22, r22
    4482:	82 9f       	mul	r24, r18
    4484:	22 27       	eor	r18, r18
    4486:	b0 0d       	add	r27, r0
    4488:	a1 1d       	adc	r26, r1
    448a:	62 1f       	adc	r22, r18
    448c:	73 9f       	mul	r23, r19
    448e:	b0 0d       	add	r27, r0
    4490:	a1 1d       	adc	r26, r1
    4492:	62 1f       	adc	r22, r18
    4494:	83 9f       	mul	r24, r19
    4496:	a0 0d       	add	r26, r0
    4498:	61 1d       	adc	r22, r1
    449a:	22 1f       	adc	r18, r18
    449c:	74 9f       	mul	r23, r20
    449e:	33 27       	eor	r19, r19
    44a0:	a0 0d       	add	r26, r0
    44a2:	61 1d       	adc	r22, r1
    44a4:	23 1f       	adc	r18, r19
    44a6:	84 9f       	mul	r24, r20
    44a8:	60 0d       	add	r22, r0
    44aa:	21 1d       	adc	r18, r1
    44ac:	82 2f       	mov	r24, r18
    44ae:	76 2f       	mov	r23, r22
    44b0:	6a 2f       	mov	r22, r26
    44b2:	11 24       	eor	r1, r1
    44b4:	9f 57       	subi	r25, 0x7F	; 127
    44b6:	50 40       	sbci	r21, 0x00	; 0
    44b8:	9a f0       	brmi	.+38     	; 0x44e0 <__mulsf3_pse+0x88>
    44ba:	f1 f0       	breq	.+60     	; 0x44f8 <__mulsf3_pse+0xa0>
    44bc:	88 23       	and	r24, r24
    44be:	4a f0       	brmi	.+18     	; 0x44d2 <__mulsf3_pse+0x7a>
    44c0:	ee 0f       	add	r30, r30
    44c2:	ff 1f       	adc	r31, r31
    44c4:	bb 1f       	adc	r27, r27
    44c6:	66 1f       	adc	r22, r22
    44c8:	77 1f       	adc	r23, r23
    44ca:	88 1f       	adc	r24, r24
    44cc:	91 50       	subi	r25, 0x01	; 1
    44ce:	50 40       	sbci	r21, 0x00	; 0
    44d0:	a9 f7       	brne	.-22     	; 0x44bc <__mulsf3_pse+0x64>
    44d2:	9e 3f       	cpi	r25, 0xFE	; 254
    44d4:	51 05       	cpc	r21, r1
    44d6:	80 f0       	brcs	.+32     	; 0x44f8 <__mulsf3_pse+0xa0>
    44d8:	0c 94 82 21 	jmp	0x4304	; 0x4304 <__fp_inf>
    44dc:	0c 94 08 22 	jmp	0x4410	; 0x4410 <__fp_szero>
    44e0:	5f 3f       	cpi	r21, 0xFF	; 255
    44e2:	e4 f3       	brlt	.-8      	; 0x44dc <__mulsf3_pse+0x84>
    44e4:	98 3e       	cpi	r25, 0xE8	; 232
    44e6:	d4 f3       	brlt	.-12     	; 0x44dc <__mulsf3_pse+0x84>
    44e8:	86 95       	lsr	r24
    44ea:	77 95       	ror	r23
    44ec:	67 95       	ror	r22
    44ee:	b7 95       	ror	r27
    44f0:	f7 95       	ror	r31
    44f2:	e7 95       	ror	r30
    44f4:	9f 5f       	subi	r25, 0xFF	; 255
    44f6:	c1 f7       	brne	.-16     	; 0x44e8 <__mulsf3_pse+0x90>
    44f8:	fe 2b       	or	r31, r30
    44fa:	88 0f       	add	r24, r24
    44fc:	91 1d       	adc	r25, r1
    44fe:	96 95       	lsr	r25
    4500:	87 95       	ror	r24
    4502:	97 f9       	bld	r25, 7
    4504:	08 95       	ret

00004506 <pow>:
    4506:	fa 01       	movw	r30, r20
    4508:	ee 0f       	add	r30, r30
    450a:	ff 1f       	adc	r31, r31
    450c:	30 96       	adiw	r30, 0x00	; 0
    450e:	21 05       	cpc	r18, r1
    4510:	31 05       	cpc	r19, r1
    4512:	a1 f1       	breq	.+104    	; 0x457c <pow+0x76>
    4514:	61 15       	cp	r22, r1
    4516:	71 05       	cpc	r23, r1
    4518:	61 f4       	brne	.+24     	; 0x4532 <pow+0x2c>
    451a:	80 38       	cpi	r24, 0x80	; 128
    451c:	bf e3       	ldi	r27, 0x3F	; 63
    451e:	9b 07       	cpc	r25, r27
    4520:	49 f1       	breq	.+82     	; 0x4574 <pow+0x6e>
    4522:	68 94       	set
    4524:	90 38       	cpi	r25, 0x80	; 128
    4526:	81 05       	cpc	r24, r1
    4528:	61 f0       	breq	.+24     	; 0x4542 <pow+0x3c>
    452a:	80 38       	cpi	r24, 0x80	; 128
    452c:	bf ef       	ldi	r27, 0xFF	; 255
    452e:	9b 07       	cpc	r25, r27
    4530:	41 f0       	breq	.+16     	; 0x4542 <pow+0x3c>
    4532:	99 23       	and	r25, r25
    4534:	4a f5       	brpl	.+82     	; 0x4588 <pow+0x82>
    4536:	ff 3f       	cpi	r31, 0xFF	; 255
    4538:	e1 05       	cpc	r30, r1
    453a:	31 05       	cpc	r19, r1
    453c:	21 05       	cpc	r18, r1
    453e:	19 f1       	breq	.+70     	; 0x4586 <pow+0x80>
    4540:	e8 94       	clt
    4542:	08 94       	sec
    4544:	e7 95       	ror	r30
    4546:	d9 01       	movw	r26, r18
    4548:	aa 23       	and	r26, r26
    454a:	29 f4       	brne	.+10     	; 0x4556 <pow+0x50>
    454c:	ab 2f       	mov	r26, r27
    454e:	be 2f       	mov	r27, r30
    4550:	f8 5f       	subi	r31, 0xF8	; 248
    4552:	d0 f3       	brcs	.-12     	; 0x4548 <pow+0x42>
    4554:	10 c0       	rjmp	.+32     	; 0x4576 <pow+0x70>
    4556:	ff 5f       	subi	r31, 0xFF	; 255
    4558:	70 f4       	brcc	.+28     	; 0x4576 <pow+0x70>
    455a:	a6 95       	lsr	r26
    455c:	e0 f7       	brcc	.-8      	; 0x4556 <pow+0x50>
    455e:	f7 39       	cpi	r31, 0x97	; 151
    4560:	50 f0       	brcs	.+20     	; 0x4576 <pow+0x70>
    4562:	19 f0       	breq	.+6      	; 0x456a <pow+0x64>
    4564:	ff 3a       	cpi	r31, 0xAF	; 175
    4566:	38 f4       	brcc	.+14     	; 0x4576 <pow+0x70>
    4568:	9f 77       	andi	r25, 0x7F	; 127
    456a:	9f 93       	push	r25
    456c:	0d d0       	rcall	.+26     	; 0x4588 <pow+0x82>
    456e:	0f 90       	pop	r0
    4570:	07 fc       	sbrc	r0, 7
    4572:	90 58       	subi	r25, 0x80	; 128
    4574:	08 95       	ret
    4576:	46 f0       	brts	.+16     	; 0x4588 <pow+0x82>
    4578:	0c 94 88 21 	jmp	0x4310	; 0x4310 <__fp_nan>
    457c:	60 e0       	ldi	r22, 0x00	; 0
    457e:	70 e0       	ldi	r23, 0x00	; 0
    4580:	80 e8       	ldi	r24, 0x80	; 128
    4582:	9f e3       	ldi	r25, 0x3F	; 63
    4584:	08 95       	ret
    4586:	4f e7       	ldi	r20, 0x7F	; 127
    4588:	9f 77       	andi	r25, 0x7F	; 127
    458a:	5f 93       	push	r21
    458c:	4f 93       	push	r20
    458e:	3f 93       	push	r19
    4590:	2f 93       	push	r18
    4592:	0e 94 ae 23 	call	0x475c	; 0x475c <log>
    4596:	2f 91       	pop	r18
    4598:	3f 91       	pop	r19
    459a:	4f 91       	pop	r20
    459c:	5f 91       	pop	r21
    459e:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    45a2:	0c 94 25 23 	jmp	0x464a	; 0x464a <exp>
    45a6:	19 f4       	brne	.+6      	; 0x45ae <pow+0xa8>
    45a8:	16 f4       	brtc	.+4      	; 0x45ae <pow+0xa8>
    45aa:	0c 94 88 21 	jmp	0x4310	; 0x4310 <__fp_nan>
    45ae:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <__fp_mpack>

000045b2 <sqrt>:
    45b2:	0e 94 ed 21 	call	0x43da	; 0x43da <__fp_splitA>
    45b6:	b8 f3       	brcs	.-18     	; 0x45a6 <pow+0xa0>
    45b8:	99 23       	and	r25, r25
    45ba:	c9 f3       	breq	.-14     	; 0x45ae <pow+0xa8>
    45bc:	b6 f3       	brts	.-20     	; 0x45aa <pow+0xa4>
    45be:	9f 57       	subi	r25, 0x7F	; 127
    45c0:	55 0b       	sbc	r21, r21
    45c2:	87 ff       	sbrs	r24, 7
    45c4:	0e 94 65 23 	call	0x46ca	; 0x46ca <__fp_norm2>
    45c8:	00 24       	eor	r0, r0
    45ca:	a0 e6       	ldi	r26, 0x60	; 96
    45cc:	40 ea       	ldi	r20, 0xA0	; 160
    45ce:	90 01       	movw	r18, r0
    45d0:	80 58       	subi	r24, 0x80	; 128
    45d2:	56 95       	lsr	r21
    45d4:	97 95       	ror	r25
    45d6:	28 f4       	brcc	.+10     	; 0x45e2 <sqrt+0x30>
    45d8:	80 5c       	subi	r24, 0xC0	; 192
    45da:	66 0f       	add	r22, r22
    45dc:	77 1f       	adc	r23, r23
    45de:	88 1f       	adc	r24, r24
    45e0:	20 f0       	brcs	.+8      	; 0x45ea <sqrt+0x38>
    45e2:	26 17       	cp	r18, r22
    45e4:	37 07       	cpc	r19, r23
    45e6:	48 07       	cpc	r20, r24
    45e8:	30 f4       	brcc	.+12     	; 0x45f6 <sqrt+0x44>
    45ea:	62 1b       	sub	r22, r18
    45ec:	73 0b       	sbc	r23, r19
    45ee:	84 0b       	sbc	r24, r20
    45f0:	20 29       	or	r18, r0
    45f2:	31 29       	or	r19, r1
    45f4:	4a 2b       	or	r20, r26
    45f6:	a6 95       	lsr	r26
    45f8:	17 94       	ror	r1
    45fa:	07 94       	ror	r0
    45fc:	20 25       	eor	r18, r0
    45fe:	31 25       	eor	r19, r1
    4600:	4a 27       	eor	r20, r26
    4602:	58 f7       	brcc	.-42     	; 0x45da <sqrt+0x28>
    4604:	66 0f       	add	r22, r22
    4606:	77 1f       	adc	r23, r23
    4608:	88 1f       	adc	r24, r24
    460a:	20 f0       	brcs	.+8      	; 0x4614 <sqrt+0x62>
    460c:	26 17       	cp	r18, r22
    460e:	37 07       	cpc	r19, r23
    4610:	48 07       	cpc	r20, r24
    4612:	30 f4       	brcc	.+12     	; 0x4620 <sqrt+0x6e>
    4614:	62 0b       	sbc	r22, r18
    4616:	73 0b       	sbc	r23, r19
    4618:	84 0b       	sbc	r24, r20
    461a:	20 0d       	add	r18, r0
    461c:	31 1d       	adc	r19, r1
    461e:	41 1d       	adc	r20, r1
    4620:	a0 95       	com	r26
    4622:	81 f7       	brne	.-32     	; 0x4604 <sqrt+0x52>
    4624:	b9 01       	movw	r22, r18
    4626:	84 2f       	mov	r24, r20
    4628:	91 58       	subi	r25, 0x81	; 129
    462a:	88 0f       	add	r24, r24
    462c:	96 95       	lsr	r25
    462e:	87 95       	ror	r24
    4630:	08 95       	ret

00004632 <square>:
    4632:	9b 01       	movw	r18, r22
    4634:	ac 01       	movw	r20, r24
    4636:	0c 94 16 22 	jmp	0x442c	; 0x442c <__mulsf3>
    463a:	29 f4       	brne	.+10     	; 0x4646 <square+0x14>
    463c:	16 f0       	brts	.+4      	; 0x4642 <square+0x10>
    463e:	0c 94 82 21 	jmp	0x4304	; 0x4304 <__fp_inf>
    4642:	0c 94 07 22 	jmp	0x440e	; 0x440e <__fp_zero>
    4646:	0c 94 88 21 	jmp	0x4310	; 0x4310 <__fp_nan>

0000464a <exp>:
    464a:	0e 94 ed 21 	call	0x43da	; 0x43da <__fp_splitA>
    464e:	a8 f3       	brcs	.-22     	; 0x463a <square+0x8>
    4650:	96 38       	cpi	r25, 0x86	; 134
    4652:	a0 f7       	brcc	.-24     	; 0x463c <square+0xa>
    4654:	07 f8       	bld	r0, 7
    4656:	0f 92       	push	r0
    4658:	e8 94       	clt
    465a:	2b e3       	ldi	r18, 0x3B	; 59
    465c:	3a ea       	ldi	r19, 0xAA	; 170
    465e:	48 eb       	ldi	r20, 0xB8	; 184
    4660:	5f e7       	ldi	r21, 0x7F	; 127
    4662:	0e 94 2c 22 	call	0x4458	; 0x4458 <__mulsf3_pse>
    4666:	0f 92       	push	r0
    4668:	0f 92       	push	r0
    466a:	0f 92       	push	r0
    466c:	4d b7       	in	r20, 0x3d	; 61
    466e:	5e b7       	in	r21, 0x3e	; 62
    4670:	0f 92       	push	r0
    4672:	0e 94 f6 23 	call	0x47ec	; 0x47ec <modf>
    4676:	e1 ed       	ldi	r30, 0xD1	; 209
    4678:	f0 e0       	ldi	r31, 0x00	; 0
    467a:	0e 94 8b 21 	call	0x4316	; 0x4316 <__fp_powser>
    467e:	4f 91       	pop	r20
    4680:	5f 91       	pop	r21
    4682:	ef 91       	pop	r30
    4684:	ff 91       	pop	r31
    4686:	e5 95       	asr	r30
    4688:	ee 1f       	adc	r30, r30
    468a:	ff 1f       	adc	r31, r31
    468c:	49 f0       	breq	.+18     	; 0x46a0 <exp+0x56>
    468e:	fe 57       	subi	r31, 0x7E	; 126
    4690:	e0 68       	ori	r30, 0x80	; 128
    4692:	44 27       	eor	r20, r20
    4694:	ee 0f       	add	r30, r30
    4696:	44 1f       	adc	r20, r20
    4698:	fa 95       	dec	r31
    469a:	e1 f7       	brne	.-8      	; 0x4694 <exp+0x4a>
    469c:	41 95       	neg	r20
    469e:	55 0b       	sbc	r21, r21
    46a0:	0e 94 70 23 	call	0x46e0	; 0x46e0 <ldexp>
    46a4:	0f 90       	pop	r0
    46a6:	07 fe       	sbrs	r0, 7
    46a8:	0c 94 0e 22 	jmp	0x441c	; 0x441c <inverse>
    46ac:	08 95       	ret

000046ae <__fp_mpack>:
    46ae:	9f 3f       	cpi	r25, 0xFF	; 255
    46b0:	31 f0       	breq	.+12     	; 0x46be <__fp_mpack_finite+0xc>

000046b2 <__fp_mpack_finite>:
    46b2:	91 50       	subi	r25, 0x01	; 1
    46b4:	20 f4       	brcc	.+8      	; 0x46be <__fp_mpack_finite+0xc>
    46b6:	87 95       	ror	r24
    46b8:	77 95       	ror	r23
    46ba:	67 95       	ror	r22
    46bc:	b7 95       	ror	r27
    46be:	88 0f       	add	r24, r24
    46c0:	91 1d       	adc	r25, r1
    46c2:	96 95       	lsr	r25
    46c4:	87 95       	ror	r24
    46c6:	97 f9       	bld	r25, 7
    46c8:	08 95       	ret

000046ca <__fp_norm2>:
    46ca:	91 50       	subi	r25, 0x01	; 1
    46cc:	50 40       	sbci	r21, 0x00	; 0
    46ce:	66 0f       	add	r22, r22
    46d0:	77 1f       	adc	r23, r23
    46d2:	88 1f       	adc	r24, r24
    46d4:	d2 f7       	brpl	.-12     	; 0x46ca <__fp_norm2>
    46d6:	08 95       	ret
    46d8:	0c 94 82 21 	jmp	0x4304	; 0x4304 <__fp_inf>
    46dc:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <__fp_mpack>

000046e0 <ldexp>:
    46e0:	0e 94 ed 21 	call	0x43da	; 0x43da <__fp_splitA>
    46e4:	d8 f3       	brcs	.-10     	; 0x46dc <__fp_norm2+0x12>
    46e6:	99 23       	and	r25, r25
    46e8:	c9 f3       	breq	.-14     	; 0x46dc <__fp_norm2+0x12>
    46ea:	94 0f       	add	r25, r20
    46ec:	51 1d       	adc	r21, r1
    46ee:	a3 f3       	brvs	.-24     	; 0x46d8 <__fp_norm2+0xe>
    46f0:	91 50       	subi	r25, 0x01	; 1
    46f2:	50 40       	sbci	r21, 0x00	; 0
    46f4:	94 f0       	brlt	.+36     	; 0x471a <ldexp+0x3a>
    46f6:	59 f0       	breq	.+22     	; 0x470e <ldexp+0x2e>
    46f8:	88 23       	and	r24, r24
    46fa:	32 f0       	brmi	.+12     	; 0x4708 <ldexp+0x28>
    46fc:	66 0f       	add	r22, r22
    46fe:	77 1f       	adc	r23, r23
    4700:	88 1f       	adc	r24, r24
    4702:	91 50       	subi	r25, 0x01	; 1
    4704:	50 40       	sbci	r21, 0x00	; 0
    4706:	c1 f7       	brne	.-16     	; 0x46f8 <ldexp+0x18>
    4708:	9e 3f       	cpi	r25, 0xFE	; 254
    470a:	51 05       	cpc	r21, r1
    470c:	2c f7       	brge	.-54     	; 0x46d8 <__fp_norm2+0xe>
    470e:	88 0f       	add	r24, r24
    4710:	91 1d       	adc	r25, r1
    4712:	96 95       	lsr	r25
    4714:	87 95       	ror	r24
    4716:	97 f9       	bld	r25, 7
    4718:	08 95       	ret
    471a:	5f 3f       	cpi	r21, 0xFF	; 255
    471c:	ac f0       	brlt	.+42     	; 0x4748 <ldexp+0x68>
    471e:	98 3e       	cpi	r25, 0xE8	; 232
    4720:	9c f0       	brlt	.+38     	; 0x4748 <ldexp+0x68>
    4722:	bb 27       	eor	r27, r27
    4724:	86 95       	lsr	r24
    4726:	77 95       	ror	r23
    4728:	67 95       	ror	r22
    472a:	b7 95       	ror	r27
    472c:	08 f4       	brcc	.+2      	; 0x4730 <ldexp+0x50>
    472e:	b1 60       	ori	r27, 0x01	; 1
    4730:	93 95       	inc	r25
    4732:	c1 f7       	brne	.-16     	; 0x4724 <ldexp+0x44>
    4734:	bb 0f       	add	r27, r27
    4736:	58 f7       	brcc	.-42     	; 0x470e <ldexp+0x2e>
    4738:	11 f4       	brne	.+4      	; 0x473e <ldexp+0x5e>
    473a:	60 ff       	sbrs	r22, 0
    473c:	e8 cf       	rjmp	.-48     	; 0x470e <ldexp+0x2e>
    473e:	6f 5f       	subi	r22, 0xFF	; 255
    4740:	7f 4f       	sbci	r23, 0xFF	; 255
    4742:	8f 4f       	sbci	r24, 0xFF	; 255
    4744:	9f 4f       	sbci	r25, 0xFF	; 255
    4746:	e3 cf       	rjmp	.-58     	; 0x470e <ldexp+0x2e>
    4748:	0c 94 08 22 	jmp	0x4410	; 0x4410 <__fp_szero>
    474c:	16 f0       	brts	.+4      	; 0x4752 <ldexp+0x72>
    474e:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <__fp_mpack>
    4752:	0c 94 88 21 	jmp	0x4310	; 0x4310 <__fp_nan>
    4756:	68 94       	set
    4758:	0c 94 82 21 	jmp	0x4304	; 0x4304 <__fp_inf>

0000475c <log>:
    475c:	0e 94 ed 21 	call	0x43da	; 0x43da <__fp_splitA>
    4760:	a8 f3       	brcs	.-22     	; 0x474c <ldexp+0x6c>
    4762:	99 23       	and	r25, r25
    4764:	c1 f3       	breq	.-16     	; 0x4756 <ldexp+0x76>
    4766:	ae f3       	brts	.-22     	; 0x4752 <ldexp+0x72>
    4768:	df 93       	push	r29
    476a:	cf 93       	push	r28
    476c:	1f 93       	push	r17
    476e:	0f 93       	push	r16
    4770:	ff 92       	push	r15
    4772:	c9 2f       	mov	r28, r25
    4774:	dd 27       	eor	r29, r29
    4776:	88 23       	and	r24, r24
    4778:	2a f0       	brmi	.+10     	; 0x4784 <log+0x28>
    477a:	21 97       	sbiw	r28, 0x01	; 1
    477c:	66 0f       	add	r22, r22
    477e:	77 1f       	adc	r23, r23
    4780:	88 1f       	adc	r24, r24
    4782:	da f7       	brpl	.-10     	; 0x477a <log+0x1e>
    4784:	20 e0       	ldi	r18, 0x00	; 0
    4786:	30 e0       	ldi	r19, 0x00	; 0
    4788:	40 e8       	ldi	r20, 0x80	; 128
    478a:	5f eb       	ldi	r21, 0xBF	; 191
    478c:	9f e3       	ldi	r25, 0x3F	; 63
    478e:	88 39       	cpi	r24, 0x98	; 152
    4790:	20 f0       	brcs	.+8      	; 0x479a <log+0x3e>
    4792:	80 3e       	cpi	r24, 0xE0	; 224
    4794:	38 f0       	brcs	.+14     	; 0x47a4 <log+0x48>
    4796:	21 96       	adiw	r28, 0x01	; 1
    4798:	8f 77       	andi	r24, 0x7F	; 127
    479a:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    479e:	e9 ef       	ldi	r30, 0xF9	; 249
    47a0:	f0 e0       	ldi	r31, 0x00	; 0
    47a2:	04 c0       	rjmp	.+8      	; 0x47ac <log+0x50>
    47a4:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    47a8:	e6 e2       	ldi	r30, 0x26	; 38
    47aa:	f1 e0       	ldi	r31, 0x01	; 1
    47ac:	0e 94 8b 21 	call	0x4316	; 0x4316 <__fp_powser>
    47b0:	8b 01       	movw	r16, r22
    47b2:	be 01       	movw	r22, r28
    47b4:	ec 01       	movw	r28, r24
    47b6:	fb 2e       	mov	r15, r27
    47b8:	6f 57       	subi	r22, 0x7F	; 127
    47ba:	71 09       	sbc	r23, r1
    47bc:	75 95       	asr	r23
    47be:	77 1f       	adc	r23, r23
    47c0:	88 0b       	sbc	r24, r24
    47c2:	99 0b       	sbc	r25, r25
    47c4:	0e 94 03 21 	call	0x4206	; 0x4206 <__floatsisf>
    47c8:	28 e1       	ldi	r18, 0x18	; 24
    47ca:	32 e7       	ldi	r19, 0x72	; 114
    47cc:	41 e3       	ldi	r20, 0x31	; 49
    47ce:	5f e3       	ldi	r21, 0x3F	; 63
    47d0:	0e 94 29 22 	call	0x4452	; 0x4452 <__mulsf3x>
    47d4:	af 2d       	mov	r26, r15
    47d6:	98 01       	movw	r18, r16
    47d8:	ae 01       	movw	r20, r28
    47da:	ff 90       	pop	r15
    47dc:	0f 91       	pop	r16
    47de:	1f 91       	pop	r17
    47e0:	cf 91       	pop	r28
    47e2:	df 91       	pop	r29
    47e4:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <__addsf3x>
    47e8:	0c 94 d4 21 	jmp	0x43a8	; 0x43a8 <__fp_round>

000047ec <modf>:
    47ec:	fa 01       	movw	r30, r20
    47ee:	dc 01       	movw	r26, r24
    47f0:	aa 0f       	add	r26, r26
    47f2:	bb 1f       	adc	r27, r27
    47f4:	9b 01       	movw	r18, r22
    47f6:	ac 01       	movw	r20, r24
    47f8:	bf 57       	subi	r27, 0x7F	; 127
    47fa:	28 f4       	brcc	.+10     	; 0x4806 <modf+0x1a>
    47fc:	22 27       	eor	r18, r18
    47fe:	33 27       	eor	r19, r19
    4800:	44 27       	eor	r20, r20
    4802:	50 78       	andi	r21, 0x80	; 128
    4804:	20 c0       	rjmp	.+64     	; 0x4846 <modf+0x5a>
    4806:	b7 51       	subi	r27, 0x17	; 23
    4808:	90 f4       	brcc	.+36     	; 0x482e <modf+0x42>
    480a:	ab 2f       	mov	r26, r27
    480c:	00 24       	eor	r0, r0
    480e:	46 95       	lsr	r20
    4810:	37 95       	ror	r19
    4812:	27 95       	ror	r18
    4814:	01 1c       	adc	r0, r1
    4816:	a3 95       	inc	r26
    4818:	d2 f3       	brmi	.-12     	; 0x480e <modf+0x22>
    481a:	00 20       	and	r0, r0
    481c:	71 f0       	breq	.+28     	; 0x483a <modf+0x4e>
    481e:	22 0f       	add	r18, r18
    4820:	33 1f       	adc	r19, r19
    4822:	44 1f       	adc	r20, r20
    4824:	b3 95       	inc	r27
    4826:	da f3       	brmi	.-10     	; 0x481e <modf+0x32>
    4828:	0e d0       	rcall	.+28     	; 0x4846 <modf+0x5a>
    482a:	0c 94 90 1f 	jmp	0x3f20	; 0x3f20 <__subsf3>
    482e:	61 30       	cpi	r22, 0x01	; 1
    4830:	71 05       	cpc	r23, r1
    4832:	a0 e8       	ldi	r26, 0x80	; 128
    4834:	8a 07       	cpc	r24, r26
    4836:	b9 46       	sbci	r27, 0x69	; 105
    4838:	30 f4       	brcc	.+12     	; 0x4846 <modf+0x5a>
    483a:	9b 01       	movw	r18, r22
    483c:	ac 01       	movw	r20, r24
    483e:	66 27       	eor	r22, r22
    4840:	77 27       	eor	r23, r23
    4842:	88 27       	eor	r24, r24
    4844:	90 78       	andi	r25, 0x80	; 128
    4846:	30 96       	adiw	r30, 0x00	; 0
    4848:	21 f0       	breq	.+8      	; 0x4852 <modf+0x66>
    484a:	20 83       	st	Z, r18
    484c:	31 83       	std	Z+1, r19	; 0x01
    484e:	42 83       	std	Z+2, r20	; 0x02
    4850:	53 83       	std	Z+3, r21	; 0x03
    4852:	08 95       	ret

00004854 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    4854:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    4856:	91 8d       	ldd	r25, Z+25	; 0x19
    4858:	22 8d       	ldd	r18, Z+26	; 0x1a
    485a:	89 2f       	mov	r24, r25
    485c:	90 e0       	ldi	r25, 0x00	; 0
    485e:	80 5c       	subi	r24, 0xC0	; 192
    4860:	9f 4f       	sbci	r25, 0xFF	; 255
    4862:	82 1b       	sub	r24, r18
    4864:	91 09       	sbc	r25, r1
}
    4866:	8f 73       	andi	r24, 0x3F	; 63
    4868:	99 27       	eor	r25, r25
    486a:	08 95       	ret

0000486c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    486c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    486e:	91 8d       	ldd	r25, Z+25	; 0x19
    4870:	82 8d       	ldd	r24, Z+26	; 0x1a
    4872:	98 17       	cp	r25, r24
    4874:	31 f0       	breq	.+12     	; 0x4882 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    4876:	82 8d       	ldd	r24, Z+26	; 0x1a
    4878:	e8 0f       	add	r30, r24
    487a:	f1 1d       	adc	r31, r1
    487c:	85 8d       	ldd	r24, Z+29	; 0x1d
    487e:	90 e0       	ldi	r25, 0x00	; 0
    4880:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    4882:	8f ef       	ldi	r24, 0xFF	; 255
    4884:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    4886:	08 95       	ret

00004888 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    4888:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    488a:	91 8d       	ldd	r25, Z+25	; 0x19
    488c:	82 8d       	ldd	r24, Z+26	; 0x1a
    488e:	98 17       	cp	r25, r24
    4890:	61 f0       	breq	.+24     	; 0x48aa <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    4892:	82 8d       	ldd	r24, Z+26	; 0x1a
    4894:	df 01       	movw	r26, r30
    4896:	a8 0f       	add	r26, r24
    4898:	b1 1d       	adc	r27, r1
    489a:	5d 96       	adiw	r26, 0x1d	; 29
    489c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    489e:	92 8d       	ldd	r25, Z+26	; 0x1a
    48a0:	9f 5f       	subi	r25, 0xFF	; 255
    48a2:	9f 73       	andi	r25, 0x3F	; 63
    48a4:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    48a6:	90 e0       	ldi	r25, 0x00	; 0
    48a8:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    48aa:	8f ef       	ldi	r24, 0xFF	; 255
    48ac:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    48ae:	08 95       	ret

000048b0 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    48b0:	88 ec       	ldi	r24, 0xC8	; 200
    48b2:	95 e2       	ldi	r25, 0x25	; 37
    48b4:	89 2b       	or	r24, r25
    48b6:	49 f0       	breq	.+18     	; 0x48ca <_Z14serialEventRunv+0x1a>
    48b8:	80 e0       	ldi	r24, 0x00	; 0
    48ba:	90 e0       	ldi	r25, 0x00	; 0
    48bc:	89 2b       	or	r24, r25
    48be:	29 f0       	breq	.+10     	; 0x48ca <_Z14serialEventRunv+0x1a>
    48c0:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <_Z17Serial0_availablev>
    48c4:	81 11       	cpse	r24, r1
    48c6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    48ca:	08 95       	ret

000048cc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    48cc:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    48ce:	84 8d       	ldd	r24, Z+28	; 0x1c
    48d0:	df 01       	movw	r26, r30
    48d2:	a8 0f       	add	r26, r24
    48d4:	b1 1d       	adc	r27, r1
    48d6:	a3 5a       	subi	r26, 0xA3	; 163
    48d8:	bf 4f       	sbci	r27, 0xFF	; 255
    48da:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    48dc:	24 8d       	ldd	r18, Z+28	; 0x1c
    48de:	30 e0       	ldi	r19, 0x00	; 0
    48e0:	2f 5f       	subi	r18, 0xFF	; 255
    48e2:	3f 4f       	sbci	r19, 0xFF	; 255
    48e4:	2f 73       	andi	r18, 0x3F	; 63
    48e6:	30 78       	andi	r19, 0x80	; 128
    48e8:	33 23       	and	r19, r19
    48ea:	34 f4       	brge	.+12     	; 0x48f8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    48ec:	21 50       	subi	r18, 0x01	; 1
    48ee:	31 09       	sbc	r19, r1
    48f0:	20 6c       	ori	r18, 0xC0	; 192
    48f2:	3f 6f       	ori	r19, 0xFF	; 255
    48f4:	2f 5f       	subi	r18, 0xFF	; 255
    48f6:	3f 4f       	sbci	r19, 0xFF	; 255
    48f8:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
    48fa:	a6 89       	ldd	r26, Z+22	; 0x16
    48fc:	b7 89       	ldd	r27, Z+23	; 0x17
    48fe:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    4900:	a0 89       	ldd	r26, Z+16	; 0x10
    4902:	b1 89       	ldd	r27, Z+17	; 0x11
    4904:	8c 91       	ld	r24, X
    4906:	80 64       	ori	r24, 0x40	; 64
    4908:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    490a:	93 8d       	ldd	r25, Z+27	; 0x1b
    490c:	84 8d       	ldd	r24, Z+28	; 0x1c
    490e:	98 13       	cpse	r25, r24
    4910:	06 c0       	rjmp	.+12     	; 0x491e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    4912:	02 88       	ldd	r0, Z+18	; 0x12
    4914:	f3 89       	ldd	r31, Z+19	; 0x13
    4916:	e0 2d       	mov	r30, r0
    4918:	80 81       	ld	r24, Z
    491a:	8f 7d       	andi	r24, 0xDF	; 223
    491c:	80 83       	st	Z, r24
    491e:	08 95       	ret

00004920 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    4920:	cf 93       	push	r28
    4922:	df 93       	push	r29
    4924:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    4926:	88 8d       	ldd	r24, Y+24	; 0x18
    4928:	81 11       	cpse	r24, r1
    492a:	0f c0       	rjmp	.+30     	; 0x494a <_ZN14HardwareSerial5flushEv+0x2a>
    492c:	18 c0       	rjmp	.+48     	; 0x495e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    492e:	0f b6       	in	r0, 0x3f	; 63
    4930:	07 fc       	sbrc	r0, 7
    4932:	0d c0       	rjmp	.+26     	; 0x494e <_ZN14HardwareSerial5flushEv+0x2e>
    4934:	90 81       	ld	r25, Z
    4936:	95 ff       	sbrs	r25, 5
    4938:	0a c0       	rjmp	.+20     	; 0x494e <_ZN14HardwareSerial5flushEv+0x2e>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    493a:	a8 89       	ldd	r26, Y+16	; 0x10
    493c:	b9 89       	ldd	r27, Y+17	; 0x11
    493e:	8c 91       	ld	r24, X
    4940:	85 ff       	sbrs	r24, 5
    4942:	05 c0       	rjmp	.+10     	; 0x494e <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
    4944:	ce 01       	movw	r24, r28
    4946:	0e 94 66 24 	call	0x48cc	; 0x48cc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    494a:	ea 89       	ldd	r30, Y+18	; 0x12
    494c:	fb 89       	ldd	r31, Y+19	; 0x13
    494e:	90 81       	ld	r25, Z
    4950:	95 fd       	sbrc	r25, 5
    4952:	ed cf       	rjmp	.-38     	; 0x492e <_ZN14HardwareSerial5flushEv+0xe>
    4954:	a8 89       	ldd	r26, Y+16	; 0x10
    4956:	b9 89       	ldd	r27, Y+17	; 0x11
    4958:	8c 91       	ld	r24, X
    495a:	86 ff       	sbrs	r24, 6
    495c:	e8 cf       	rjmp	.-48     	; 0x492e <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    495e:	df 91       	pop	r29
    4960:	cf 91       	pop	r28
    4962:	08 95       	ret

00004964 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    4964:	0f 93       	push	r16
    4966:	1f 93       	push	r17
    4968:	cf 93       	push	r28
    496a:	df 93       	push	r29
    496c:	fc 01       	movw	r30, r24
  _written = true;
    496e:	81 e0       	ldi	r24, 0x01	; 1
    4970:	80 8f       	std	Z+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    4972:	93 8d       	ldd	r25, Z+27	; 0x1b
    4974:	84 8d       	ldd	r24, Z+28	; 0x1c
    4976:	98 13       	cpse	r25, r24
    4978:	22 c0       	rjmp	.+68     	; 0x49be <_ZN14HardwareSerial5writeEh+0x5a>
    497a:	a0 89       	ldd	r26, Z+16	; 0x10
    497c:	b1 89       	ldd	r27, Z+17	; 0x11
    497e:	8c 91       	ld	r24, X
    4980:	85 fd       	sbrc	r24, 5
    4982:	2f c0       	rjmp	.+94     	; 0x49e2 <_ZN14HardwareSerial5writeEh+0x7e>
    4984:	1c c0       	rjmp	.+56     	; 0x49be <_ZN14HardwareSerial5writeEh+0x5a>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
    4986:	0f b6       	in	r0, 0x3f	; 63
    4988:	07 fc       	sbrc	r0, 7
    498a:	08 c0       	rjmp	.+16     	; 0x499c <_ZN14HardwareSerial5writeEh+0x38>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    498c:	e8 89       	ldd	r30, Y+16	; 0x10
    498e:	f9 89       	ldd	r31, Y+17	; 0x11
    4990:	80 81       	ld	r24, Z
    4992:	85 ff       	sbrs	r24, 5
    4994:	03 c0       	rjmp	.+6      	; 0x499c <_ZN14HardwareSerial5writeEh+0x38>
	_tx_udr_empty_irq();
    4996:	ce 01       	movw	r24, r28
    4998:	0e 94 66 24 	call	0x48cc	; 0x48cc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    499c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    499e:	09 17       	cp	r16, r25
    49a0:	91 f3       	breq	.-28     	; 0x4986 <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    49a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    49a4:	fe 01       	movw	r30, r28
    49a6:	e8 0f       	add	r30, r24
    49a8:	f1 1d       	adc	r31, r1
    49aa:	e3 5a       	subi	r30, 0xA3	; 163
    49ac:	ff 4f       	sbci	r31, 0xFF	; 255
    49ae:	10 83       	st	Z, r17
  _tx_buffer_head = i;
    49b0:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    49b2:	ea 89       	ldd	r30, Y+18	; 0x12
    49b4:	fb 89       	ldd	r31, Y+19	; 0x13
    49b6:	80 81       	ld	r24, Z
    49b8:	80 62       	ori	r24, 0x20	; 32
    49ba:	80 83       	st	Z, r24
  
  return 1;
    49bc:	1b c0       	rjmp	.+54     	; 0x49f4 <_ZN14HardwareSerial5writeEh+0x90>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    49be:	23 8d       	ldd	r18, Z+27	; 0x1b
    49c0:	30 e0       	ldi	r19, 0x00	; 0
    49c2:	2f 5f       	subi	r18, 0xFF	; 255
    49c4:	3f 4f       	sbci	r19, 0xFF	; 255
    49c6:	2f 73       	andi	r18, 0x3F	; 63
    49c8:	30 78       	andi	r19, 0x80	; 128
    49ca:	33 23       	and	r19, r19
    49cc:	34 f4       	brge	.+12     	; 0x49da <_ZN14HardwareSerial5writeEh+0x76>
    49ce:	21 50       	subi	r18, 0x01	; 1
    49d0:	31 09       	sbc	r19, r1
    49d2:	20 6c       	ori	r18, 0xC0	; 192
    49d4:	3f 6f       	ori	r19, 0xFF	; 255
    49d6:	2f 5f       	subi	r18, 0xFF	; 255
    49d8:	3f 4f       	sbci	r19, 0xFF	; 255
    49da:	16 2f       	mov	r17, r22
    49dc:	ef 01       	movw	r28, r30
    49de:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    49e0:	dd cf       	rjmp	.-70     	; 0x499c <_ZN14HardwareSerial5writeEh+0x38>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    49e2:	a6 89       	ldd	r26, Z+22	; 0x16
    49e4:	b7 89       	ldd	r27, Z+23	; 0x17
    49e6:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
    49e8:	00 88       	ldd	r0, Z+16	; 0x10
    49ea:	f1 89       	ldd	r31, Z+17	; 0x11
    49ec:	e0 2d       	mov	r30, r0
    49ee:	80 81       	ld	r24, Z
    49f0:	80 64       	ori	r24, 0x40	; 64
    49f2:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    49f4:	81 e0       	ldi	r24, 0x01	; 1
    49f6:	90 e0       	ldi	r25, 0x00	; 0
    49f8:	df 91       	pop	r29
    49fa:	cf 91       	pop	r28
    49fc:	1f 91       	pop	r17
    49fe:	0f 91       	pop	r16
    4a00:	08 95       	ret

00004a02 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    4a02:	bf 92       	push	r11
    4a04:	cf 92       	push	r12
    4a06:	df 92       	push	r13
    4a08:	ef 92       	push	r14
    4a0a:	ff 92       	push	r15
    4a0c:	0f 93       	push	r16
    4a0e:	1f 93       	push	r17
    4a10:	cf 93       	push	r28
    4a12:	df 93       	push	r29
    4a14:	ec 01       	movw	r28, r24
    4a16:	6a 01       	movw	r12, r20
    4a18:	7b 01       	movw	r14, r22
    4a1a:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    4a1c:	e8 89       	ldd	r30, Y+16	; 0x10
    4a1e:	f9 89       	ldd	r31, Y+17	; 0x11
    4a20:	82 e0       	ldi	r24, 0x02	; 2
    4a22:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    4a24:	41 15       	cp	r20, r1
    4a26:	51 4e       	sbci	r21, 0xE1	; 225
    4a28:	61 05       	cpc	r22, r1
    4a2a:	71 05       	cpc	r23, r1
    4a2c:	b1 f0       	breq	.+44     	; 0x4a5a <_ZN14HardwareSerial5beginEmh+0x58>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    4a2e:	60 e0       	ldi	r22, 0x00	; 0
    4a30:	79 e0       	ldi	r23, 0x09	; 9
    4a32:	8d e3       	ldi	r24, 0x3D	; 61
    4a34:	90 e0       	ldi	r25, 0x00	; 0
    4a36:	a7 01       	movw	r20, r14
    4a38:	96 01       	movw	r18, r12
    4a3a:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <__udivmodsi4>
    4a3e:	89 01       	movw	r16, r18
    4a40:	9a 01       	movw	r18, r20
    4a42:	01 50       	subi	r16, 0x01	; 1
    4a44:	11 09       	sbc	r17, r1
    4a46:	21 09       	sbc	r18, r1
    4a48:	31 09       	sbc	r19, r1
    4a4a:	36 95       	lsr	r19
    4a4c:	27 95       	ror	r18
    4a4e:	17 95       	ror	r17
    4a50:	07 95       	ror	r16
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    4a52:	01 15       	cp	r16, r1
    4a54:	80 e1       	ldi	r24, 0x10	; 16
    4a56:	18 07       	cpc	r17, r24
    4a58:	a8 f0       	brcs	.+42     	; 0x4a84 <_ZN14HardwareSerial5beginEmh+0x82>
  {
    *_ucsra = 0;
    4a5a:	e8 89       	ldd	r30, Y+16	; 0x10
    4a5c:	f9 89       	ldd	r31, Y+17	; 0x11
    4a5e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4a60:	60 e8       	ldi	r22, 0x80	; 128
    4a62:	74 e8       	ldi	r23, 0x84	; 132
    4a64:	8e e1       	ldi	r24, 0x1E	; 30
    4a66:	90 e0       	ldi	r25, 0x00	; 0
    4a68:	a7 01       	movw	r20, r14
    4a6a:	96 01       	movw	r18, r12
    4a6c:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <__udivmodsi4>
    4a70:	da 01       	movw	r26, r20
    4a72:	c9 01       	movw	r24, r18
    4a74:	01 97       	sbiw	r24, 0x01	; 1
    4a76:	a1 09       	sbc	r26, r1
    4a78:	b1 09       	sbc	r27, r1
    4a7a:	b6 95       	lsr	r27
    4a7c:	a7 95       	ror	r26
    4a7e:	97 95       	ror	r25
    4a80:	87 95       	ror	r24
    4a82:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    4a84:	ec 85       	ldd	r30, Y+12	; 0x0c
    4a86:	fd 85       	ldd	r31, Y+13	; 0x0d
    4a88:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
    4a8a:	ee 85       	ldd	r30, Y+14	; 0x0e
    4a8c:	ff 85       	ldd	r31, Y+15	; 0x0f
    4a8e:	00 83       	st	Z, r16

  _written = false;
    4a90:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    4a92:	ec 89       	ldd	r30, Y+20	; 0x14
    4a94:	fd 89       	ldd	r31, Y+21	; 0x15
    4a96:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
    4a98:	ea 89       	ldd	r30, Y+18	; 0x12
    4a9a:	fb 89       	ldd	r31, Y+19	; 0x13
    4a9c:	80 81       	ld	r24, Z
    4a9e:	80 61       	ori	r24, 0x10	; 16
    4aa0:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    4aa2:	ea 89       	ldd	r30, Y+18	; 0x12
    4aa4:	fb 89       	ldd	r31, Y+19	; 0x13
    4aa6:	80 81       	ld	r24, Z
    4aa8:	88 60       	ori	r24, 0x08	; 8
    4aaa:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    4aac:	ea 89       	ldd	r30, Y+18	; 0x12
    4aae:	fb 89       	ldd	r31, Y+19	; 0x13
    4ab0:	80 81       	ld	r24, Z
    4ab2:	80 68       	ori	r24, 0x80	; 128
    4ab4:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    4ab6:	ea 89       	ldd	r30, Y+18	; 0x12
    4ab8:	fb 89       	ldd	r31, Y+19	; 0x13
    4aba:	80 81       	ld	r24, Z
    4abc:	8f 7d       	andi	r24, 0xDF	; 223
    4abe:	80 83       	st	Z, r24
}
    4ac0:	df 91       	pop	r29
    4ac2:	cf 91       	pop	r28
    4ac4:	1f 91       	pop	r17
    4ac6:	0f 91       	pop	r16
    4ac8:	ff 90       	pop	r15
    4aca:	ef 90       	pop	r14
    4acc:	df 90       	pop	r13
    4ace:	cf 90       	pop	r12
    4ad0:	bf 90       	pop	r11
    4ad2:	08 95       	ret

00004ad4 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    4ad4:	1f 92       	push	r1
    4ad6:	0f 92       	push	r0
    4ad8:	0f b6       	in	r0, 0x3f	; 63
    4ada:	0f 92       	push	r0
    4adc:	11 24       	eor	r1, r1
    4ade:	2f 93       	push	r18
    4ae0:	8f 93       	push	r24
    4ae2:	9f 93       	push	r25
    4ae4:	af 93       	push	r26
    4ae6:	bf 93       	push	r27
    4ae8:	ef 93       	push	r30
    4aea:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    4aec:	e0 91 f6 05 	lds	r30, 0x05F6	; 0x8005f6 <Serial+0x10>
    4af0:	f0 91 f7 05 	lds	r31, 0x05F7	; 0x8005f7 <Serial+0x11>
    4af4:	80 81       	ld	r24, Z
    4af6:	82 fd       	sbrc	r24, 2
    4af8:	14 c0       	rjmp	.+40     	; 0x4b22 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    4afa:	e6 ee       	ldi	r30, 0xE6	; 230
    4afc:	f5 e0       	ldi	r31, 0x05	; 5
    4afe:	a6 89       	ldd	r26, Z+22	; 0x16
    4b00:	b7 89       	ldd	r27, Z+23	; 0x17
    4b02:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    4b04:	81 8d       	ldd	r24, Z+25	; 0x19
    4b06:	8f 5f       	subi	r24, 0xFF	; 255
    4b08:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    4b0a:	92 8d       	ldd	r25, Z+26	; 0x1a
    4b0c:	89 17       	cp	r24, r25
    4b0e:	71 f0       	breq	.+28     	; 0x4b2c <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
    4b10:	df 01       	movw	r26, r30
    4b12:	e1 8d       	ldd	r30, Z+25	; 0x19
    4b14:	f0 e0       	ldi	r31, 0x00	; 0
    4b16:	ea 51       	subi	r30, 0x1A	; 26
    4b18:	fa 4f       	sbci	r31, 0xFA	; 250
    4b1a:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    4b1c:	59 96       	adiw	r26, 0x19	; 25
    4b1e:	8c 93       	st	X, r24
    4b20:	05 c0       	rjmp	.+10     	; 0x4b2c <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    4b22:	e0 91 fc 05 	lds	r30, 0x05FC	; 0x8005fc <Serial+0x16>
    4b26:	f0 91 fd 05 	lds	r31, 0x05FD	; 0x8005fd <Serial+0x17>
    4b2a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    4b2c:	ff 91       	pop	r31
    4b2e:	ef 91       	pop	r30
    4b30:	bf 91       	pop	r27
    4b32:	af 91       	pop	r26
    4b34:	9f 91       	pop	r25
    4b36:	8f 91       	pop	r24
    4b38:	2f 91       	pop	r18
    4b3a:	0f 90       	pop	r0
    4b3c:	0f be       	out	0x3f, r0	; 63
    4b3e:	0f 90       	pop	r0
    4b40:	1f 90       	pop	r1
    4b42:	18 95       	reti

00004b44 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    4b44:	1f 92       	push	r1
    4b46:	0f 92       	push	r0
    4b48:	0f b6       	in	r0, 0x3f	; 63
    4b4a:	0f 92       	push	r0
    4b4c:	11 24       	eor	r1, r1
    4b4e:	2f 93       	push	r18
    4b50:	3f 93       	push	r19
    4b52:	4f 93       	push	r20
    4b54:	5f 93       	push	r21
    4b56:	6f 93       	push	r22
    4b58:	7f 93       	push	r23
    4b5a:	8f 93       	push	r24
    4b5c:	9f 93       	push	r25
    4b5e:	af 93       	push	r26
    4b60:	bf 93       	push	r27
    4b62:	ef 93       	push	r30
    4b64:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    4b66:	86 ee       	ldi	r24, 0xE6	; 230
    4b68:	95 e0       	ldi	r25, 0x05	; 5
    4b6a:	0e 94 66 24 	call	0x48cc	; 0x48cc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    4b6e:	ff 91       	pop	r31
    4b70:	ef 91       	pop	r30
    4b72:	bf 91       	pop	r27
    4b74:	af 91       	pop	r26
    4b76:	9f 91       	pop	r25
    4b78:	8f 91       	pop	r24
    4b7a:	7f 91       	pop	r23
    4b7c:	6f 91       	pop	r22
    4b7e:	5f 91       	pop	r21
    4b80:	4f 91       	pop	r20
    4b82:	3f 91       	pop	r19
    4b84:	2f 91       	pop	r18
    4b86:	0f 90       	pop	r0
    4b88:	0f be       	out	0x3f, r0	; 63
    4b8a:	0f 90       	pop	r0
    4b8c:	1f 90       	pop	r1
    4b8e:	18 95       	reti

00004b90 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    4b90:	86 ee       	ldi	r24, 0xE6	; 230
    4b92:	95 e0       	ldi	r25, 0x05	; 5
    4b94:	0e 94 2a 24 	call	0x4854	; 0x4854 <_ZN14HardwareSerial9availableEv>
    4b98:	21 e0       	ldi	r18, 0x01	; 1
    4b9a:	89 2b       	or	r24, r25
    4b9c:	09 f4       	brne	.+2      	; 0x4ba0 <_Z17Serial0_availablev+0x10>
    4b9e:	20 e0       	ldi	r18, 0x00	; 0
}
    4ba0:	82 2f       	mov	r24, r18
    4ba2:	08 95       	ret

00004ba4 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4ba4:	e6 ee       	ldi	r30, 0xE6	; 230
    4ba6:	f5 e0       	ldi	r31, 0x05	; 5
    4ba8:	13 82       	std	Z+3, r1	; 0x03
    4baa:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    4bac:	88 ee       	ldi	r24, 0xE8	; 232
    4bae:	93 e0       	ldi	r25, 0x03	; 3
    4bb0:	a0 e0       	ldi	r26, 0x00	; 0
    4bb2:	b0 e0       	ldi	r27, 0x00	; 0
    4bb4:	84 83       	std	Z+4, r24	; 0x04
    4bb6:	95 83       	std	Z+5, r25	; 0x05
    4bb8:	a6 83       	std	Z+6, r26	; 0x06
    4bba:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    4bbc:	89 ee       	ldi	r24, 0xE9	; 233
    4bbe:	94 e0       	ldi	r25, 0x04	; 4
    4bc0:	91 83       	std	Z+1, r25	; 0x01
    4bc2:	80 83       	st	Z, r24
    4bc4:	85 ec       	ldi	r24, 0xC5	; 197
    4bc6:	90 e0       	ldi	r25, 0x00	; 0
    4bc8:	95 87       	std	Z+13, r25	; 0x0d
    4bca:	84 87       	std	Z+12, r24	; 0x0c
    4bcc:	84 ec       	ldi	r24, 0xC4	; 196
    4bce:	90 e0       	ldi	r25, 0x00	; 0
    4bd0:	97 87       	std	Z+15, r25	; 0x0f
    4bd2:	86 87       	std	Z+14, r24	; 0x0e
    4bd4:	80 ec       	ldi	r24, 0xC0	; 192
    4bd6:	90 e0       	ldi	r25, 0x00	; 0
    4bd8:	91 8b       	std	Z+17, r25	; 0x11
    4bda:	80 8b       	std	Z+16, r24	; 0x10
    4bdc:	81 ec       	ldi	r24, 0xC1	; 193
    4bde:	90 e0       	ldi	r25, 0x00	; 0
    4be0:	93 8b       	std	Z+19, r25	; 0x13
    4be2:	82 8b       	std	Z+18, r24	; 0x12
    4be4:	82 ec       	ldi	r24, 0xC2	; 194
    4be6:	90 e0       	ldi	r25, 0x00	; 0
    4be8:	95 8b       	std	Z+21, r25	; 0x15
    4bea:	84 8b       	std	Z+20, r24	; 0x14
    4bec:	86 ec       	ldi	r24, 0xC6	; 198
    4bee:	90 e0       	ldi	r25, 0x00	; 0
    4bf0:	97 8b       	std	Z+23, r25	; 0x17
    4bf2:	86 8b       	std	Z+22, r24	; 0x16
    4bf4:	11 8e       	std	Z+25, r1	; 0x19
    4bf6:	12 8e       	std	Z+26, r1	; 0x1a
    4bf8:	13 8e       	std	Z+27, r1	; 0x1b
    4bfa:	14 8e       	std	Z+28, r1	; 0x1c
    4bfc:	08 95       	ret

00004bfe <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    4bfe:	08 95       	ret

00004c00 <main>:

int main(void)
{
	init();
    4c00:	0e 94 72 2a 	call	0x54e4	; 0x54e4 <init>

	initVariant();
    4c04:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    4c08:	0e 94 92 15 	call	0x2b24	; 0x2b24 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    4c0c:	c8 e5       	ldi	r28, 0x58	; 88
    4c0e:	d4 e2       	ldi	r29, 0x24	; 36
#endif
	
	setup();
    
	for (;;) {
		loop();
    4c10:	0e 94 46 19 	call	0x328c	; 0x328c <loop>
		if (serialEventRun) serialEventRun();
    4c14:	20 97       	sbiw	r28, 0x00	; 0
    4c16:	e1 f3       	breq	.-8      	; 0x4c10 <main+0x10>
    4c18:	0e 94 58 24 	call	0x48b0	; 0x48b0 <_Z14serialEventRunv>
    4c1c:	f9 cf       	rjmp	.-14     	; 0x4c10 <main+0x10>

00004c1e <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    4c1e:	cf 92       	push	r12
    4c20:	df 92       	push	r13
    4c22:	ef 92       	push	r14
    4c24:	ff 92       	push	r15
    4c26:	0f 93       	push	r16
    4c28:	1f 93       	push	r17
    4c2a:	cf 93       	push	r28
    4c2c:	df 93       	push	r29
    4c2e:	41 15       	cp	r20, r1
    4c30:	51 05       	cpc	r21, r1
    4c32:	c1 f0       	breq	.+48     	; 0x4c64 <_ZN5Print5writeEPKhj+0x46>
    4c34:	6a 01       	movw	r12, r20
    4c36:	8c 01       	movw	r16, r24
    4c38:	e6 2e       	mov	r14, r22
    4c3a:	f7 2e       	mov	r15, r23
    4c3c:	c0 e0       	ldi	r28, 0x00	; 0
    4c3e:	d0 e0       	ldi	r29, 0x00	; 0
    4c40:	d7 01       	movw	r26, r14
    4c42:	6d 91       	ld	r22, X+
    4c44:	7d 01       	movw	r14, r26
    4c46:	d8 01       	movw	r26, r16
    4c48:	ed 91       	ld	r30, X+
    4c4a:	fc 91       	ld	r31, X
    4c4c:	01 90       	ld	r0, Z+
    4c4e:	f0 81       	ld	r31, Z
    4c50:	e0 2d       	mov	r30, r0
    4c52:	c8 01       	movw	r24, r16
    4c54:	09 95       	icall
    4c56:	89 2b       	or	r24, r25
    4c58:	39 f0       	breq	.+14     	; 0x4c68 <_ZN5Print5writeEPKhj+0x4a>
    4c5a:	21 96       	adiw	r28, 0x01	; 1
    4c5c:	cc 16       	cp	r12, r28
    4c5e:	dd 06       	cpc	r13, r29
    4c60:	79 f7       	brne	.-34     	; 0x4c40 <_ZN5Print5writeEPKhj+0x22>
    4c62:	02 c0       	rjmp	.+4      	; 0x4c68 <_ZN5Print5writeEPKhj+0x4a>
    4c64:	c0 e0       	ldi	r28, 0x00	; 0
    4c66:	d0 e0       	ldi	r29, 0x00	; 0
    4c68:	ce 01       	movw	r24, r28
    4c6a:	df 91       	pop	r29
    4c6c:	cf 91       	pop	r28
    4c6e:	1f 91       	pop	r17
    4c70:	0f 91       	pop	r16
    4c72:	ff 90       	pop	r15
    4c74:	ef 90       	pop	r14
    4c76:	df 90       	pop	r13
    4c78:	cf 90       	pop	r12
    4c7a:	08 95       	ret

00004c7c <_ZN5Print5printEPKc>:
    4c7c:	61 15       	cp	r22, r1
    4c7e:	71 05       	cpc	r23, r1
    4c80:	81 f0       	breq	.+32     	; 0x4ca2 <_ZN5Print5printEPKc+0x26>
    4c82:	fb 01       	movw	r30, r22
    4c84:	01 90       	ld	r0, Z+
    4c86:	00 20       	and	r0, r0
    4c88:	e9 f7       	brne	.-6      	; 0x4c84 <_ZN5Print5printEPKc+0x8>
    4c8a:	31 97       	sbiw	r30, 0x01	; 1
    4c8c:	af 01       	movw	r20, r30
    4c8e:	46 1b       	sub	r20, r22
    4c90:	57 0b       	sbc	r21, r23
    4c92:	dc 01       	movw	r26, r24
    4c94:	ed 91       	ld	r30, X+
    4c96:	fc 91       	ld	r31, X
    4c98:	02 80       	ldd	r0, Z+2	; 0x02
    4c9a:	f3 81       	ldd	r31, Z+3	; 0x03
    4c9c:	e0 2d       	mov	r30, r0
    4c9e:	09 95       	icall
    4ca0:	08 95       	ret
    4ca2:	80 e0       	ldi	r24, 0x00	; 0
    4ca4:	90 e0       	ldi	r25, 0x00	; 0
    4ca6:	08 95       	ret

00004ca8 <_ZN5Print5printEc>:
    4ca8:	dc 01       	movw	r26, r24
    4caa:	ed 91       	ld	r30, X+
    4cac:	fc 91       	ld	r31, X
    4cae:	01 90       	ld	r0, Z+
    4cb0:	f0 81       	ld	r31, Z
    4cb2:	e0 2d       	mov	r30, r0
    4cb4:	09 95       	icall
    4cb6:	08 95       	ret

00004cb8 <_ZN5Print7printlnEv>:
    4cb8:	dc 01       	movw	r26, r24
    4cba:	ed 91       	ld	r30, X+
    4cbc:	fc 91       	ld	r31, X
    4cbe:	02 80       	ldd	r0, Z+2	; 0x02
    4cc0:	f3 81       	ldd	r31, Z+3	; 0x03
    4cc2:	e0 2d       	mov	r30, r0
    4cc4:	42 e0       	ldi	r20, 0x02	; 2
    4cc6:	50 e0       	ldi	r21, 0x00	; 0
    4cc8:	65 ef       	ldi	r22, 0xF5	; 245
    4cca:	74 e0       	ldi	r23, 0x04	; 4
    4ccc:	09 95       	icall
    4cce:	08 95       	ret

00004cd0 <_ZN5Print7printlnEPKc>:
    4cd0:	0f 93       	push	r16
    4cd2:	1f 93       	push	r17
    4cd4:	cf 93       	push	r28
    4cd6:	df 93       	push	r29
    4cd8:	ec 01       	movw	r28, r24
    4cda:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    4cde:	8c 01       	movw	r16, r24
    4ce0:	ce 01       	movw	r24, r28
    4ce2:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <_ZN5Print7printlnEv>
    4ce6:	80 0f       	add	r24, r16
    4ce8:	91 1f       	adc	r25, r17
    4cea:	df 91       	pop	r29
    4cec:	cf 91       	pop	r28
    4cee:	1f 91       	pop	r17
    4cf0:	0f 91       	pop	r16
    4cf2:	08 95       	ret

00004cf4 <_ZN5Print11printNumberEmh>:
    4cf4:	8f 92       	push	r8
    4cf6:	9f 92       	push	r9
    4cf8:	af 92       	push	r10
    4cfa:	bf 92       	push	r11
    4cfc:	ef 92       	push	r14
    4cfe:	ff 92       	push	r15
    4d00:	0f 93       	push	r16
    4d02:	1f 93       	push	r17
    4d04:	cf 93       	push	r28
    4d06:	df 93       	push	r29
    4d08:	cd b7       	in	r28, 0x3d	; 61
    4d0a:	de b7       	in	r29, 0x3e	; 62
    4d0c:	a1 97       	sbiw	r28, 0x21	; 33
    4d0e:	0f b6       	in	r0, 0x3f	; 63
    4d10:	f8 94       	cli
    4d12:	de bf       	out	0x3e, r29	; 62
    4d14:	0f be       	out	0x3f, r0	; 63
    4d16:	cd bf       	out	0x3d, r28	; 61
    4d18:	7c 01       	movw	r14, r24
    4d1a:	cb 01       	movw	r24, r22
    4d1c:	ba 01       	movw	r22, r20
    4d1e:	19 a2       	std	Y+33, r1	; 0x21
    4d20:	22 30       	cpi	r18, 0x02	; 2
    4d22:	08 f4       	brcc	.+2      	; 0x4d26 <_ZN5Print11printNumberEmh+0x32>
    4d24:	2a e0       	ldi	r18, 0x0A	; 10
    4d26:	8e 01       	movw	r16, r28
    4d28:	0f 5d       	subi	r16, 0xDF	; 223
    4d2a:	1f 4f       	sbci	r17, 0xFF	; 255
    4d2c:	82 2e       	mov	r8, r18
    4d2e:	91 2c       	mov	r9, r1
    4d30:	a1 2c       	mov	r10, r1
    4d32:	b1 2c       	mov	r11, r1
    4d34:	a5 01       	movw	r20, r10
    4d36:	94 01       	movw	r18, r8
    4d38:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <__udivmodsi4>
    4d3c:	e6 2f       	mov	r30, r22
    4d3e:	62 2f       	mov	r22, r18
    4d40:	73 2f       	mov	r23, r19
    4d42:	84 2f       	mov	r24, r20
    4d44:	95 2f       	mov	r25, r21
    4d46:	01 50       	subi	r16, 0x01	; 1
    4d48:	11 09       	sbc	r17, r1
    4d4a:	ea 30       	cpi	r30, 0x0A	; 10
    4d4c:	10 f4       	brcc	.+4      	; 0x4d52 <_ZN5Print11printNumberEmh+0x5e>
    4d4e:	e0 5d       	subi	r30, 0xD0	; 208
    4d50:	01 c0       	rjmp	.+2      	; 0x4d54 <_ZN5Print11printNumberEmh+0x60>
    4d52:	e9 5c       	subi	r30, 0xC9	; 201
    4d54:	d8 01       	movw	r26, r16
    4d56:	ec 93       	st	X, r30
    4d58:	61 15       	cp	r22, r1
    4d5a:	71 05       	cpc	r23, r1
    4d5c:	81 05       	cpc	r24, r1
    4d5e:	91 05       	cpc	r25, r1
    4d60:	49 f7       	brne	.-46     	; 0x4d34 <_ZN5Print11printNumberEmh+0x40>
    4d62:	01 15       	cp	r16, r1
    4d64:	11 05       	cpc	r17, r1
    4d66:	91 f0       	breq	.+36     	; 0x4d8c <_ZN5Print11printNumberEmh+0x98>
    4d68:	f8 01       	movw	r30, r16
    4d6a:	01 90       	ld	r0, Z+
    4d6c:	00 20       	and	r0, r0
    4d6e:	e9 f7       	brne	.-6      	; 0x4d6a <_ZN5Print11printNumberEmh+0x76>
    4d70:	31 97       	sbiw	r30, 0x01	; 1
    4d72:	af 01       	movw	r20, r30
    4d74:	40 1b       	sub	r20, r16
    4d76:	51 0b       	sbc	r21, r17
    4d78:	d7 01       	movw	r26, r14
    4d7a:	ed 91       	ld	r30, X+
    4d7c:	fc 91       	ld	r31, X
    4d7e:	02 80       	ldd	r0, Z+2	; 0x02
    4d80:	f3 81       	ldd	r31, Z+3	; 0x03
    4d82:	e0 2d       	mov	r30, r0
    4d84:	b8 01       	movw	r22, r16
    4d86:	c7 01       	movw	r24, r14
    4d88:	09 95       	icall
    4d8a:	02 c0       	rjmp	.+4      	; 0x4d90 <_ZN5Print11printNumberEmh+0x9c>
    4d8c:	80 e0       	ldi	r24, 0x00	; 0
    4d8e:	90 e0       	ldi	r25, 0x00	; 0
    4d90:	a1 96       	adiw	r28, 0x21	; 33
    4d92:	0f b6       	in	r0, 0x3f	; 63
    4d94:	f8 94       	cli
    4d96:	de bf       	out	0x3e, r29	; 62
    4d98:	0f be       	out	0x3f, r0	; 63
    4d9a:	cd bf       	out	0x3d, r28	; 61
    4d9c:	df 91       	pop	r29
    4d9e:	cf 91       	pop	r28
    4da0:	1f 91       	pop	r17
    4da2:	0f 91       	pop	r16
    4da4:	ff 90       	pop	r15
    4da6:	ef 90       	pop	r14
    4da8:	bf 90       	pop	r11
    4daa:	af 90       	pop	r10
    4dac:	9f 90       	pop	r9
    4dae:	8f 90       	pop	r8
    4db0:	08 95       	ret

00004db2 <_ZN5Print5printEli>:
    4db2:	cf 92       	push	r12
    4db4:	df 92       	push	r13
    4db6:	ef 92       	push	r14
    4db8:	ff 92       	push	r15
    4dba:	0f 93       	push	r16
    4dbc:	1f 93       	push	r17
    4dbe:	cf 93       	push	r28
    4dc0:	df 93       	push	r29
    4dc2:	ec 01       	movw	r28, r24
    4dc4:	6a 01       	movw	r12, r20
    4dc6:	7b 01       	movw	r14, r22
    4dc8:	21 15       	cp	r18, r1
    4dca:	31 05       	cpc	r19, r1
    4dcc:	41 f4       	brne	.+16     	; 0x4dde <_ZN5Print5printEli+0x2c>
    4dce:	e8 81       	ld	r30, Y
    4dd0:	f9 81       	ldd	r31, Y+1	; 0x01
    4dd2:	01 90       	ld	r0, Z+
    4dd4:	f0 81       	ld	r31, Z
    4dd6:	e0 2d       	mov	r30, r0
    4dd8:	64 2f       	mov	r22, r20
    4dda:	09 95       	icall
    4ddc:	1d c0       	rjmp	.+58     	; 0x4e18 <_ZN5Print5printEli+0x66>
    4dde:	2a 30       	cpi	r18, 0x0A	; 10
    4de0:	31 05       	cpc	r19, r1
    4de2:	c1 f4       	brne	.+48     	; 0x4e14 <_ZN5Print5printEli+0x62>
    4de4:	77 23       	and	r23, r23
    4de6:	94 f4       	brge	.+36     	; 0x4e0c <_ZN5Print5printEli+0x5a>
    4de8:	6d e2       	ldi	r22, 0x2D	; 45
    4dea:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <_ZN5Print5printEc>
    4dee:	8c 01       	movw	r16, r24
    4df0:	44 27       	eor	r20, r20
    4df2:	55 27       	eor	r21, r21
    4df4:	ba 01       	movw	r22, r20
    4df6:	4c 19       	sub	r20, r12
    4df8:	5d 09       	sbc	r21, r13
    4dfa:	6e 09       	sbc	r22, r14
    4dfc:	7f 09       	sbc	r23, r15
    4dfe:	2a e0       	ldi	r18, 0x0A	; 10
    4e00:	ce 01       	movw	r24, r28
    4e02:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <_ZN5Print11printNumberEmh>
    4e06:	80 0f       	add	r24, r16
    4e08:	91 1f       	adc	r25, r17
    4e0a:	06 c0       	rjmp	.+12     	; 0x4e18 <_ZN5Print5printEli+0x66>
    4e0c:	2a e0       	ldi	r18, 0x0A	; 10
    4e0e:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <_ZN5Print11printNumberEmh>
    4e12:	02 c0       	rjmp	.+4      	; 0x4e18 <_ZN5Print5printEli+0x66>
    4e14:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <_ZN5Print11printNumberEmh>
    4e18:	df 91       	pop	r29
    4e1a:	cf 91       	pop	r28
    4e1c:	1f 91       	pop	r17
    4e1e:	0f 91       	pop	r16
    4e20:	ff 90       	pop	r15
    4e22:	ef 90       	pop	r14
    4e24:	df 90       	pop	r13
    4e26:	cf 90       	pop	r12
    4e28:	08 95       	ret

00004e2a <_ZN5Print5printEii>:
    4e2a:	9a 01       	movw	r18, r20
    4e2c:	ab 01       	movw	r20, r22
    4e2e:	77 0f       	add	r23, r23
    4e30:	66 0b       	sbc	r22, r22
    4e32:	77 0b       	sbc	r23, r23
    4e34:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <_ZN5Print5printEli>
    4e38:	08 95       	ret

00004e3a <_ZN5Print7printlnEii>:
    4e3a:	0f 93       	push	r16
    4e3c:	1f 93       	push	r17
    4e3e:	cf 93       	push	r28
    4e40:	df 93       	push	r29
    4e42:	ec 01       	movw	r28, r24
    4e44:	9a 01       	movw	r18, r20
    4e46:	ab 01       	movw	r20, r22
    4e48:	77 0f       	add	r23, r23
    4e4a:	66 0b       	sbc	r22, r22
    4e4c:	77 0b       	sbc	r23, r23
    4e4e:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <_ZN5Print5printEli>
    4e52:	8c 01       	movw	r16, r24
    4e54:	ce 01       	movw	r24, r28
    4e56:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <_ZN5Print7printlnEv>
    4e5a:	80 0f       	add	r24, r16
    4e5c:	91 1f       	adc	r25, r17
    4e5e:	df 91       	pop	r29
    4e60:	cf 91       	pop	r28
    4e62:	1f 91       	pop	r17
    4e64:	0f 91       	pop	r16
    4e66:	08 95       	ret

00004e68 <_ZN5Print5printEmi>:
    4e68:	21 15       	cp	r18, r1
    4e6a:	31 05       	cpc	r19, r1
    4e6c:	49 f4       	brne	.+18     	; 0x4e80 <_ZN5Print5printEmi+0x18>
    4e6e:	dc 01       	movw	r26, r24
    4e70:	ed 91       	ld	r30, X+
    4e72:	fc 91       	ld	r31, X
    4e74:	01 90       	ld	r0, Z+
    4e76:	f0 81       	ld	r31, Z
    4e78:	e0 2d       	mov	r30, r0
    4e7a:	64 2f       	mov	r22, r20
    4e7c:	09 95       	icall
    4e7e:	08 95       	ret
    4e80:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <_ZN5Print11printNumberEmh>
    4e84:	08 95       	ret

00004e86 <_ZN5Print5printEhi>:
    4e86:	9a 01       	movw	r18, r20
    4e88:	46 2f       	mov	r20, r22
    4e8a:	50 e0       	ldi	r21, 0x00	; 0
    4e8c:	60 e0       	ldi	r22, 0x00	; 0
    4e8e:	70 e0       	ldi	r23, 0x00	; 0
    4e90:	0e 94 34 27 	call	0x4e68	; 0x4e68 <_ZN5Print5printEmi>
    4e94:	08 95       	ret

00004e96 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    4e96:	0f 93       	push	r16
    4e98:	1f 93       	push	r17
    4e9a:	cf 93       	push	r28
    4e9c:	df 93       	push	r29
    4e9e:	ec 01       	movw	r28, r24
    4ea0:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    4ea2:	46 2f       	mov	r20, r22
    4ea4:	50 e0       	ldi	r21, 0x00	; 0
    4ea6:	60 e0       	ldi	r22, 0x00	; 0
    4ea8:	70 e0       	ldi	r23, 0x00	; 0
    4eaa:	0e 94 34 27 	call	0x4e68	; 0x4e68 <_ZN5Print5printEmi>
    4eae:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    4eb0:	ce 01       	movw	r24, r28
    4eb2:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <_ZN5Print7printlnEv>
  return n;
}
    4eb6:	80 0f       	add	r24, r16
    4eb8:	91 1f       	adc	r25, r17
    4eba:	df 91       	pop	r29
    4ebc:	cf 91       	pop	r28
    4ebe:	1f 91       	pop	r17
    4ec0:	0f 91       	pop	r16
    4ec2:	08 95       	ret

00004ec4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    4ec4:	4f 92       	push	r4
    4ec6:	5f 92       	push	r5
    4ec8:	7f 92       	push	r7
    4eca:	8f 92       	push	r8
    4ecc:	9f 92       	push	r9
    4ece:	af 92       	push	r10
    4ed0:	bf 92       	push	r11
    4ed2:	cf 92       	push	r12
    4ed4:	df 92       	push	r13
    4ed6:	ef 92       	push	r14
    4ed8:	ff 92       	push	r15
    4eda:	0f 93       	push	r16
    4edc:	1f 93       	push	r17
    4ede:	cf 93       	push	r28
    4ee0:	df 93       	push	r29
    4ee2:	00 d0       	rcall	.+0      	; 0x4ee4 <_ZN5Print10printFloatEdh+0x20>
    4ee4:	00 d0       	rcall	.+0      	; 0x4ee6 <_ZN5Print10printFloatEdh+0x22>
    4ee6:	cd b7       	in	r28, 0x3d	; 61
    4ee8:	de b7       	in	r29, 0x3e	; 62
    4eea:	8c 01       	movw	r16, r24
    4eec:	4a 01       	movw	r8, r20
    4eee:	5b 01       	movw	r10, r22
    4ef0:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    4ef2:	9a 01       	movw	r18, r20
    4ef4:	ab 01       	movw	r20, r22
    4ef6:	c5 01       	movw	r24, r10
    4ef8:	b4 01       	movw	r22, r8
    4efa:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <__unordsf2>
    4efe:	88 23       	and	r24, r24
    4f00:	31 f0       	breq	.+12     	; 0x4f0e <_ZN5Print10printFloatEdh+0x4a>
    4f02:	68 ef       	ldi	r22, 0xF8	; 248
    4f04:	74 e0       	ldi	r23, 0x04	; 4
    4f06:	c8 01       	movw	r24, r16
    4f08:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    4f0c:	d0 c0       	rjmp	.+416    	; 0x50ae <_ZN5Print10printFloatEdh+0x1ea>
  if (isinf(number)) return print("inf");
    4f0e:	75 01       	movw	r14, r10
    4f10:	64 01       	movw	r12, r8
    4f12:	e8 94       	clt
    4f14:	f7 f8       	bld	r15, 7
    4f16:	2f ef       	ldi	r18, 0xFF	; 255
    4f18:	3f ef       	ldi	r19, 0xFF	; 255
    4f1a:	4f e7       	ldi	r20, 0x7F	; 127
    4f1c:	5f e7       	ldi	r21, 0x7F	; 127
    4f1e:	c7 01       	movw	r24, r14
    4f20:	b6 01       	movw	r22, r12
    4f22:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <__unordsf2>
    4f26:	81 11       	cpse	r24, r1
    4f28:	10 c0       	rjmp	.+32     	; 0x4f4a <_ZN5Print10printFloatEdh+0x86>
    4f2a:	2f ef       	ldi	r18, 0xFF	; 255
    4f2c:	3f ef       	ldi	r19, 0xFF	; 255
    4f2e:	4f e7       	ldi	r20, 0x7F	; 127
    4f30:	5f e7       	ldi	r21, 0x7F	; 127
    4f32:	c7 01       	movw	r24, r14
    4f34:	b6 01       	movw	r22, r12
    4f36:	0e 94 8a 20 	call	0x4114	; 0x4114 <__cmpsf2>
    4f3a:	18 16       	cp	r1, r24
    4f3c:	34 f4       	brge	.+12     	; 0x4f4a <_ZN5Print10printFloatEdh+0x86>
    4f3e:	6c ef       	ldi	r22, 0xFC	; 252
    4f40:	74 e0       	ldi	r23, 0x04	; 4
    4f42:	c8 01       	movw	r24, r16
    4f44:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    4f48:	b2 c0       	rjmp	.+356    	; 0x50ae <_ZN5Print10printFloatEdh+0x1ea>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    4f4a:	2f ef       	ldi	r18, 0xFF	; 255
    4f4c:	3f ef       	ldi	r19, 0xFF	; 255
    4f4e:	4f e7       	ldi	r20, 0x7F	; 127
    4f50:	5f e4       	ldi	r21, 0x4F	; 79
    4f52:	c5 01       	movw	r24, r10
    4f54:	b4 01       	movw	r22, r8
    4f56:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <__gesf2>
    4f5a:	18 16       	cp	r1, r24
    4f5c:	34 f4       	brge	.+12     	; 0x4f6a <_ZN5Print10printFloatEdh+0xa6>
    4f5e:	60 e0       	ldi	r22, 0x00	; 0
    4f60:	75 e0       	ldi	r23, 0x05	; 5
    4f62:	c8 01       	movw	r24, r16
    4f64:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    4f68:	a2 c0       	rjmp	.+324    	; 0x50ae <_ZN5Print10printFloatEdh+0x1ea>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    4f6a:	2f ef       	ldi	r18, 0xFF	; 255
    4f6c:	3f ef       	ldi	r19, 0xFF	; 255
    4f6e:	4f e7       	ldi	r20, 0x7F	; 127
    4f70:	5f ec       	ldi	r21, 0xCF	; 207
    4f72:	c5 01       	movw	r24, r10
    4f74:	b4 01       	movw	r22, r8
    4f76:	0e 94 8a 20 	call	0x4114	; 0x4114 <__cmpsf2>
    4f7a:	88 23       	and	r24, r24
    4f7c:	34 f4       	brge	.+12     	; 0x4f8a <_ZN5Print10printFloatEdh+0xc6>
    4f7e:	60 e0       	ldi	r22, 0x00	; 0
    4f80:	75 e0       	ldi	r23, 0x05	; 5
    4f82:	c8 01       	movw	r24, r16
    4f84:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <_ZN5Print5printEPKc>
    4f88:	92 c0       	rjmp	.+292    	; 0x50ae <_ZN5Print10printFloatEdh+0x1ea>
  
  // Handle negative numbers
  if (number < 0.0)
    4f8a:	20 e0       	ldi	r18, 0x00	; 0
    4f8c:	30 e0       	ldi	r19, 0x00	; 0
    4f8e:	a9 01       	movw	r20, r18
    4f90:	c5 01       	movw	r24, r10
    4f92:	b4 01       	movw	r22, r8
    4f94:	0e 94 8a 20 	call	0x4114	; 0x4114 <__cmpsf2>
    4f98:	88 23       	and	r24, r24
    4f9a:	54 f4       	brge	.+20     	; 0x4fb0 <_ZN5Print10printFloatEdh+0xec>
  {
     n += print('-');
    4f9c:	6d e2       	ldi	r22, 0x2D	; 45
    4f9e:	c8 01       	movw	r24, r16
    4fa0:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <_ZN5Print5printEc>
    4fa4:	7c 01       	movw	r14, r24
     number = -number;
    4fa6:	b7 fa       	bst	r11, 7
    4fa8:	b0 94       	com	r11
    4faa:	b7 f8       	bld	r11, 7
    4fac:	b0 94       	com	r11
    4fae:	02 c0       	rjmp	.+4      	; 0x4fb4 <_ZN5Print10printFloatEdh+0xf0>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    4fb0:	e1 2c       	mov	r14, r1
    4fb2:	f1 2c       	mov	r15, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    4fb4:	77 20       	and	r7, r7
    4fb6:	09 f4       	brne	.+2      	; 0x4fba <_ZN5Print10printFloatEdh+0xf6>
    4fb8:	65 c0       	rjmp	.+202    	; 0x5084 <_ZN5Print10printFloatEdh+0x1c0>
    4fba:	d1 2c       	mov	r13, r1
    4fbc:	60 e0       	ldi	r22, 0x00	; 0
    4fbe:	70 e0       	ldi	r23, 0x00	; 0
    4fc0:	80 e0       	ldi	r24, 0x00	; 0
    4fc2:	9f e3       	ldi	r25, 0x3F	; 63
    rounding /= 10.0;
    4fc4:	20 e0       	ldi	r18, 0x00	; 0
    4fc6:	30 e0       	ldi	r19, 0x00	; 0
    4fc8:	40 e2       	ldi	r20, 0x20	; 32
    4fca:	51 e4       	ldi	r21, 0x41	; 65
    4fcc:	0e 94 8f 20 	call	0x411e	; 0x411e <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    4fd0:	d3 94       	inc	r13
    4fd2:	d7 10       	cpse	r13, r7
    4fd4:	f7 cf       	rjmp	.-18     	; 0x4fc4 <_ZN5Print10printFloatEdh+0x100>
    4fd6:	2a c0       	rjmp	.+84     	; 0x502c <_ZN5Print10printFloatEdh+0x168>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    4fd8:	20 e0       	ldi	r18, 0x00	; 0
    4fda:	30 e0       	ldi	r19, 0x00	; 0
    4fdc:	40 e2       	ldi	r20, 0x20	; 32
    4fde:	51 e4       	ldi	r21, 0x41	; 65
    4fe0:	c5 01       	movw	r24, r10
    4fe2:	b4 01       	movw	r22, r8
    4fe4:	0e 94 16 22 	call	0x442c	; 0x442c <__mulsf3>
    4fe8:	4b 01       	movw	r8, r22
    4fea:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    4fec:	0e 94 8d 2d 	call	0x5b1a	; 0x5b1a <__fixunssfsi>
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    4ff0:	6b 01       	movw	r12, r22
    4ff2:	e1 2c       	mov	r14, r1
    4ff4:	f1 2c       	mov	r15, r1
    4ff6:	2a e0       	ldi	r18, 0x0A	; 10
    4ff8:	30 e0       	ldi	r19, 0x00	; 0
    4ffa:	b7 01       	movw	r22, r14
    4ffc:	a6 01       	movw	r20, r12
    4ffe:	c8 01       	movw	r24, r16
    5000:	0e 94 34 27 	call	0x4e68	; 0x4e68 <_ZN5Print5printEmi>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
    5004:	48 0e       	add	r4, r24
    5006:	59 1e       	adc	r5, r25
    remainder -= toPrint; 
    5008:	c7 01       	movw	r24, r14
    500a:	b6 01       	movw	r22, r12
    500c:	0e 94 01 21 	call	0x4202	; 0x4202 <__floatunsisf>
    5010:	9b 01       	movw	r18, r22
    5012:	ac 01       	movw	r20, r24
    5014:	c5 01       	movw	r24, r10
    5016:	b4 01       	movw	r22, r8
    5018:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    501c:	4b 01       	movw	r8, r22
    501e:	5c 01       	movw	r10, r24
    5020:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    5022:	71 10       	cpse	r7, r1
    5024:	d9 cf       	rjmp	.-78     	; 0x4fd8 <_ZN5Print10printFloatEdh+0x114>
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
    5026:	84 2d       	mov	r24, r4
    5028:	95 2d       	mov	r25, r5
    502a:	41 c0       	rjmp	.+130    	; 0x50ae <_ZN5Print10printFloatEdh+0x1ea>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    502c:	9b 01       	movw	r18, r22
    502e:	ac 01       	movw	r20, r24
    5030:	c5 01       	movw	r24, r10
    5032:	b4 01       	movw	r22, r8
    5034:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>
    5038:	4b 01       	movw	r8, r22
    503a:	5c 01       	movw	r10, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    503c:	0e 94 8d 2d 	call	0x5b1a	; 0x5b1a <__fixunssfsi>
    5040:	69 83       	std	Y+1, r22	; 0x01
    5042:	7a 83       	std	Y+2, r23	; 0x02
    5044:	8b 83       	std	Y+3, r24	; 0x03
    5046:	9c 83       	std	Y+4, r25	; 0x04
  double remainder = number - (double)int_part;
    5048:	0e 94 01 21 	call	0x4202	; 0x4202 <__floatunsisf>
    504c:	9b 01       	movw	r18, r22
    504e:	ac 01       	movw	r20, r24
    5050:	c5 01       	movw	r24, r10
    5052:	b4 01       	movw	r22, r8
    5054:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__subsf3>
    5058:	4b 01       	movw	r8, r22
    505a:	5c 01       	movw	r10, r24
  n += print(int_part);
    505c:	2a e0       	ldi	r18, 0x0A	; 10
    505e:	30 e0       	ldi	r19, 0x00	; 0
    5060:	49 81       	ldd	r20, Y+1	; 0x01
    5062:	5a 81       	ldd	r21, Y+2	; 0x02
    5064:	6b 81       	ldd	r22, Y+3	; 0x03
    5066:	7c 81       	ldd	r23, Y+4	; 0x04
    5068:	c8 01       	movw	r24, r16
    506a:	0e 94 34 27 	call	0x4e68	; 0x4e68 <_ZN5Print5printEmi>
    506e:	6c 01       	movw	r12, r24

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    5070:	6e e2       	ldi	r22, 0x2E	; 46
    5072:	c8 01       	movw	r24, r16
    5074:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <_ZN5Print5printEc>
    5078:	8c 0d       	add	r24, r12
    507a:	9d 1d       	adc	r25, r13
    507c:	2c 01       	movw	r4, r24
    507e:	4e 0c       	add	r4, r14
    5080:	5f 1c       	adc	r5, r15
    5082:	aa cf       	rjmp	.-172    	; 0x4fd8 <_ZN5Print10printFloatEdh+0x114>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    5084:	20 e0       	ldi	r18, 0x00	; 0
    5086:	30 e0       	ldi	r19, 0x00	; 0
    5088:	40 e0       	ldi	r20, 0x00	; 0
    508a:	5f e3       	ldi	r21, 0x3F	; 63
    508c:	c5 01       	movw	r24, r10
    508e:	b4 01       	movw	r22, r8
    5090:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <__addsf3>

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    5094:	0e 94 8d 2d 	call	0x5b1a	; 0x5b1a <__fixunssfsi>
    5098:	ab 01       	movw	r20, r22
    509a:	bc 01       	movw	r22, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    509c:	2a e0       	ldi	r18, 0x0A	; 10
    509e:	30 e0       	ldi	r19, 0x00	; 0
    50a0:	c8 01       	movw	r24, r16
    50a2:	0e 94 34 27 	call	0x4e68	; 0x4e68 <_ZN5Print5printEmi>
    50a6:	2c 01       	movw	r4, r24
    50a8:	4e 0c       	add	r4, r14
    50aa:	5f 1c       	adc	r5, r15
    50ac:	bc cf       	rjmp	.-136    	; 0x5026 <_ZN5Print10printFloatEdh+0x162>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    50ae:	0f 90       	pop	r0
    50b0:	0f 90       	pop	r0
    50b2:	0f 90       	pop	r0
    50b4:	0f 90       	pop	r0
    50b6:	df 91       	pop	r29
    50b8:	cf 91       	pop	r28
    50ba:	1f 91       	pop	r17
    50bc:	0f 91       	pop	r16
    50be:	ff 90       	pop	r15
    50c0:	ef 90       	pop	r14
    50c2:	df 90       	pop	r13
    50c4:	cf 90       	pop	r12
    50c6:	bf 90       	pop	r11
    50c8:	af 90       	pop	r10
    50ca:	9f 90       	pop	r9
    50cc:	8f 90       	pop	r8
    50ce:	7f 90       	pop	r7
    50d0:	5f 90       	pop	r5
    50d2:	4f 90       	pop	r4
    50d4:	08 95       	ret

000050d6 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    50d6:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <_ZN5Print10printFloatEdh>
}
    50da:	08 95       	ret

000050dc <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    50dc:	0f 93       	push	r16
    50de:	1f 93       	push	r17
    50e0:	cf 93       	push	r28
    50e2:	df 93       	push	r29
    50e4:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    50e6:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <_ZN5Print10printFloatEdh>
    50ea:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    50ec:	ce 01       	movw	r24, r28
    50ee:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <_ZN5Print7printlnEv>
  return n;
}
    50f2:	80 0f       	add	r24, r16
    50f4:	91 1f       	adc	r25, r17
    50f6:	df 91       	pop	r29
    50f8:	cf 91       	pop	r28
    50fa:	1f 91       	pop	r17
    50fc:	0f 91       	pop	r16
    50fe:	08 95       	ret

00005100 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    5100:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <_ZN7TwoWire14rxBufferLengthE>
    5104:	90 e0       	ldi	r25, 0x00	; 0
    5106:	20 91 b4 06 	lds	r18, 0x06B4	; 0x8006b4 <_ZN7TwoWire13rxBufferIndexE>
    510a:	82 1b       	sub	r24, r18
    510c:	91 09       	sbc	r25, r1
    510e:	08 95       	ret

00005110 <_ZN7TwoWire4readEv>:
    5110:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <_ZN7TwoWire13rxBufferIndexE>
    5114:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <_ZN7TwoWire14rxBufferLengthE>
    5118:	98 17       	cp	r25, r24
    511a:	50 f4       	brcc	.+20     	; 0x5130 <_ZN7TwoWire4readEv+0x20>
    511c:	e9 2f       	mov	r30, r25
    511e:	f0 e0       	ldi	r31, 0x00	; 0
    5120:	eb 54       	subi	r30, 0x4B	; 75
    5122:	f9 4f       	sbci	r31, 0xF9	; 249
    5124:	20 81       	ld	r18, Z
    5126:	30 e0       	ldi	r19, 0x00	; 0
    5128:	9f 5f       	subi	r25, 0xFF	; 255
    512a:	90 93 b4 06 	sts	0x06B4, r25	; 0x8006b4 <_ZN7TwoWire13rxBufferIndexE>
    512e:	02 c0       	rjmp	.+4      	; 0x5134 <_ZN7TwoWire4readEv+0x24>
    5130:	2f ef       	ldi	r18, 0xFF	; 255
    5132:	3f ef       	ldi	r19, 0xFF	; 255
    5134:	c9 01       	movw	r24, r18
    5136:	08 95       	ret

00005138 <_ZN7TwoWire4peekEv>:
    5138:	e0 91 b4 06 	lds	r30, 0x06B4	; 0x8006b4 <_ZN7TwoWire13rxBufferIndexE>
    513c:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <_ZN7TwoWire14rxBufferLengthE>
    5140:	e8 17       	cp	r30, r24
    5142:	30 f4       	brcc	.+12     	; 0x5150 <_ZN7TwoWire4peekEv+0x18>
    5144:	f0 e0       	ldi	r31, 0x00	; 0
    5146:	eb 54       	subi	r30, 0x4B	; 75
    5148:	f9 4f       	sbci	r31, 0xF9	; 249
    514a:	80 81       	ld	r24, Z
    514c:	90 e0       	ldi	r25, 0x00	; 0
    514e:	08 95       	ret
    5150:	8f ef       	ldi	r24, 0xFF	; 255
    5152:	9f ef       	ldi	r25, 0xFF	; 255
    5154:	08 95       	ret

00005156 <_ZN7TwoWire5flushEv>:
    5156:	08 95       	ret

00005158 <_ZN7TwoWire5writeEPKhj>:
    5158:	cf 92       	push	r12
    515a:	df 92       	push	r13
    515c:	ef 92       	push	r14
    515e:	ff 92       	push	r15
    5160:	0f 93       	push	r16
    5162:	1f 93       	push	r17
    5164:	cf 93       	push	r28
    5166:	df 93       	push	r29
    5168:	8c 01       	movw	r16, r24
    516a:	cb 01       	movw	r24, r22
    516c:	6a 01       	movw	r12, r20
    516e:	20 91 8f 06 	lds	r18, 0x068F	; 0x80068f <_ZN7TwoWire12transmittingE>
    5172:	22 23       	and	r18, r18
    5174:	a1 f0       	breq	.+40     	; 0x519e <_ZN7TwoWire5writeEPKhj+0x46>
    5176:	41 15       	cp	r20, r1
    5178:	51 05       	cpc	r21, r1
    517a:	a1 f0       	breq	.+40     	; 0x51a4 <_ZN7TwoWire5writeEPKhj+0x4c>
    517c:	eb 01       	movw	r28, r22
    517e:	7b 01       	movw	r14, r22
    5180:	e4 0e       	add	r14, r20
    5182:	f5 1e       	adc	r15, r21
    5184:	69 91       	ld	r22, Y+
    5186:	d8 01       	movw	r26, r16
    5188:	ed 91       	ld	r30, X+
    518a:	fc 91       	ld	r31, X
    518c:	01 90       	ld	r0, Z+
    518e:	f0 81       	ld	r31, Z
    5190:	e0 2d       	mov	r30, r0
    5192:	c8 01       	movw	r24, r16
    5194:	09 95       	icall
    5196:	ce 15       	cp	r28, r14
    5198:	df 05       	cpc	r29, r15
    519a:	a1 f7       	brne	.-24     	; 0x5184 <_ZN7TwoWire5writeEPKhj+0x2c>
    519c:	03 c0       	rjmp	.+6      	; 0x51a4 <_ZN7TwoWire5writeEPKhj+0x4c>
    519e:	64 2f       	mov	r22, r20
    51a0:	0e 94 28 2c 	call	0x5850	; 0x5850 <twi_transmit>
    51a4:	c6 01       	movw	r24, r12
    51a6:	df 91       	pop	r29
    51a8:	cf 91       	pop	r28
    51aa:	1f 91       	pop	r17
    51ac:	0f 91       	pop	r16
    51ae:	ff 90       	pop	r15
    51b0:	ef 90       	pop	r14
    51b2:	df 90       	pop	r13
    51b4:	cf 90       	pop	r12
    51b6:	08 95       	ret

000051b8 <_ZN7TwoWire5writeEh>:
    51b8:	cf 93       	push	r28
    51ba:	df 93       	push	r29
    51bc:	1f 92       	push	r1
    51be:	cd b7       	in	r28, 0x3d	; 61
    51c0:	de b7       	in	r29, 0x3e	; 62
    51c2:	fc 01       	movw	r30, r24
    51c4:	69 83       	std	Y+1, r22	; 0x01
    51c6:	90 91 8f 06 	lds	r25, 0x068F	; 0x80068f <_ZN7TwoWire12transmittingE>
    51ca:	99 23       	and	r25, r25
    51cc:	d9 f0       	breq	.+54     	; 0x5204 <_ZN7TwoWire5writeEh+0x4c>
    51ce:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <_ZN7TwoWire14txBufferLengthE>
    51d2:	90 32       	cpi	r25, 0x20	; 32
    51d4:	38 f0       	brcs	.+14     	; 0x51e4 <_ZN7TwoWire5writeEh+0x2c>
    51d6:	81 e0       	ldi	r24, 0x01	; 1
    51d8:	90 e0       	ldi	r25, 0x00	; 0
    51da:	93 83       	std	Z+3, r25	; 0x03
    51dc:	82 83       	std	Z+2, r24	; 0x02
    51de:	80 e0       	ldi	r24, 0x00	; 0
    51e0:	90 e0       	ldi	r25, 0x00	; 0
    51e2:	17 c0       	rjmp	.+46     	; 0x5212 <_ZN7TwoWire5writeEh+0x5a>
    51e4:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <_ZN7TwoWire13txBufferIndexE>
    51e8:	e8 2f       	mov	r30, r24
    51ea:	f0 e0       	ldi	r31, 0x00	; 0
    51ec:	ee 56       	subi	r30, 0x6E	; 110
    51ee:	f9 4f       	sbci	r31, 0xF9	; 249
    51f0:	99 81       	ldd	r25, Y+1	; 0x01
    51f2:	90 83       	st	Z, r25
    51f4:	8f 5f       	subi	r24, 0xFF	; 255
    51f6:	80 93 91 06 	sts	0x0691, r24	; 0x800691 <_ZN7TwoWire13txBufferIndexE>
    51fa:	80 93 90 06 	sts	0x0690, r24	; 0x800690 <_ZN7TwoWire14txBufferLengthE>
    51fe:	81 e0       	ldi	r24, 0x01	; 1
    5200:	90 e0       	ldi	r25, 0x00	; 0
    5202:	07 c0       	rjmp	.+14     	; 0x5212 <_ZN7TwoWire5writeEh+0x5a>
    5204:	61 e0       	ldi	r22, 0x01	; 1
    5206:	ce 01       	movw	r24, r28
    5208:	01 96       	adiw	r24, 0x01	; 1
    520a:	0e 94 28 2c 	call	0x5850	; 0x5850 <twi_transmit>
    520e:	81 e0       	ldi	r24, 0x01	; 1
    5210:	90 e0       	ldi	r25, 0x00	; 0
    5212:	0f 90       	pop	r0
    5214:	df 91       	pop	r29
    5216:	cf 91       	pop	r28
    5218:	08 95       	ret

0000521a <_ZN7TwoWireC1Ev>:
    521a:	fc 01       	movw	r30, r24
    521c:	13 82       	std	Z+3, r1	; 0x03
    521e:	12 82       	std	Z+2, r1	; 0x02
    5220:	88 ee       	ldi	r24, 0xE8	; 232
    5222:	93 e0       	ldi	r25, 0x03	; 3
    5224:	a0 e0       	ldi	r26, 0x00	; 0
    5226:	b0 e0       	ldi	r27, 0x00	; 0
    5228:	84 83       	std	Z+4, r24	; 0x04
    522a:	95 83       	std	Z+5, r25	; 0x05
    522c:	a6 83       	std	Z+6, r26	; 0x06
    522e:	b7 83       	std	Z+7, r27	; 0x07
    5230:	88 e0       	ldi	r24, 0x08	; 8
    5232:	95 e0       	ldi	r25, 0x05	; 5
    5234:	91 83       	std	Z+1, r25	; 0x01
    5236:	80 83       	st	Z, r24
    5238:	08 95       	ret

0000523a <_ZN7TwoWire5beginEv>:
    523a:	10 92 b4 06 	sts	0x06B4, r1	; 0x8006b4 <_ZN7TwoWire13rxBufferIndexE>
    523e:	10 92 b3 06 	sts	0x06B3, r1	; 0x8006b3 <_ZN7TwoWire14rxBufferLengthE>
    5242:	10 92 91 06 	sts	0x0691, r1	; 0x800691 <_ZN7TwoWire13txBufferIndexE>
    5246:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <_ZN7TwoWire14txBufferLengthE>
    524a:	0e 94 6c 2b 	call	0x56d8	; 0x56d8 <twi_init>
    524e:	08 95       	ret

00005250 <_ZN7TwoWire17beginTransmissionEh>:
    5250:	81 e0       	ldi	r24, 0x01	; 1
    5252:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <_ZN7TwoWire12transmittingE>
    5256:	60 93 b2 06 	sts	0x06B2, r22	; 0x8006b2 <_ZN7TwoWire9txAddressE>
    525a:	10 92 91 06 	sts	0x0691, r1	; 0x800691 <_ZN7TwoWire13txBufferIndexE>
    525e:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <_ZN7TwoWire14txBufferLengthE>
    5262:	08 95       	ret

00005264 <_ZN7TwoWire15endTransmissionEh>:
    5264:	0f 93       	push	r16
    5266:	06 2f       	mov	r16, r22
    5268:	21 e0       	ldi	r18, 0x01	; 1
    526a:	40 91 90 06 	lds	r20, 0x0690	; 0x800690 <_ZN7TwoWire14txBufferLengthE>
    526e:	62 e9       	ldi	r22, 0x92	; 146
    5270:	76 e0       	ldi	r23, 0x06	; 6
    5272:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <_ZN7TwoWire9txAddressE>
    5276:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <twi_writeTo>
    527a:	10 92 91 06 	sts	0x0691, r1	; 0x800691 <_ZN7TwoWire13txBufferIndexE>
    527e:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <_ZN7TwoWire14txBufferLengthE>
    5282:	10 92 8f 06 	sts	0x068F, r1	; 0x80068f <_ZN7TwoWire12transmittingE>
    5286:	0f 91       	pop	r16
    5288:	08 95       	ret

0000528a <_ZN7TwoWire11requestFromEhhmhh>:
    528a:	4f 92       	push	r4
    528c:	5f 92       	push	r5
    528e:	6f 92       	push	r6
    5290:	7f 92       	push	r7
    5292:	af 92       	push	r10
    5294:	bf 92       	push	r11
    5296:	cf 92       	push	r12
    5298:	ef 92       	push	r14
    529a:	ff 92       	push	r15
    529c:	0f 93       	push	r16
    529e:	1f 93       	push	r17
    52a0:	cf 93       	push	r28
    52a2:	df 93       	push	r29
    52a4:	5c 01       	movw	r10, r24
    52a6:	f6 2e       	mov	r15, r22
    52a8:	d4 2f       	mov	r29, r20
    52aa:	28 01       	movw	r4, r16
    52ac:	39 01       	movw	r6, r18
    52ae:	ee 20       	and	r14, r14
    52b0:	49 f1       	breq	.+82     	; 0x5304 <_ZN7TwoWire11requestFromEhhmhh+0x7a>
    52b2:	0e 94 28 29 	call	0x5250	; 0x5250 <_ZN7TwoWire17beginTransmissionEh>
    52b6:	8e 2d       	mov	r24, r14
    52b8:	84 30       	cpi	r24, 0x04	; 4
    52ba:	08 f0       	brcs	.+2      	; 0x52be <_ZN7TwoWire11requestFromEhhmhh+0x34>
    52bc:	83 e0       	ldi	r24, 0x03	; 3
    52be:	cf ef       	ldi	r28, 0xFF	; 255
    52c0:	c8 0f       	add	r28, r24
    52c2:	88 23       	and	r24, r24
    52c4:	d9 f0       	breq	.+54     	; 0x52fc <_ZN7TwoWire11requestFromEhhmhh+0x72>
    52c6:	d5 01       	movw	r26, r10
    52c8:	ed 91       	ld	r30, X+
    52ca:	fc 91       	ld	r31, X
    52cc:	8c 2f       	mov	r24, r28
    52ce:	88 0f       	add	r24, r24
    52d0:	88 0f       	add	r24, r24
    52d2:	88 0f       	add	r24, r24
    52d4:	a3 01       	movw	r20, r6
    52d6:	92 01       	movw	r18, r4
    52d8:	04 c0       	rjmp	.+8      	; 0x52e2 <_ZN7TwoWire11requestFromEhhmhh+0x58>
    52da:	56 95       	lsr	r21
    52dc:	47 95       	ror	r20
    52de:	37 95       	ror	r19
    52e0:	27 95       	ror	r18
    52e2:	8a 95       	dec	r24
    52e4:	d2 f7       	brpl	.-12     	; 0x52da <_ZN7TwoWire11requestFromEhhmhh+0x50>
    52e6:	ca 01       	movw	r24, r20
    52e8:	b9 01       	movw	r22, r18
    52ea:	01 90       	ld	r0, Z+
    52ec:	f0 81       	ld	r31, Z
    52ee:	e0 2d       	mov	r30, r0
    52f0:	c5 01       	movw	r24, r10
    52f2:	09 95       	icall
    52f4:	9c 2f       	mov	r25, r28
    52f6:	c1 50       	subi	r28, 0x01	; 1
    52f8:	91 11       	cpse	r25, r1
    52fa:	e5 cf       	rjmp	.-54     	; 0x52c6 <_ZN7TwoWire11requestFromEhhmhh+0x3c>
    52fc:	60 e0       	ldi	r22, 0x00	; 0
    52fe:	c5 01       	movw	r24, r10
    5300:	0e 94 32 29 	call	0x5264	; 0x5264 <_ZN7TwoWire15endTransmissionEh>
    5304:	4d 2f       	mov	r20, r29
    5306:	d1 32       	cpi	r29, 0x21	; 33
    5308:	08 f0       	brcs	.+2      	; 0x530c <_ZN7TwoWire11requestFromEhhmhh+0x82>
    530a:	40 e2       	ldi	r20, 0x20	; 32
    530c:	2c 2d       	mov	r18, r12
    530e:	65 eb       	ldi	r22, 0xB5	; 181
    5310:	76 e0       	ldi	r23, 0x06	; 6
    5312:	8f 2d       	mov	r24, r15
    5314:	0e 94 8a 2b 	call	0x5714	; 0x5714 <twi_readFrom>
    5318:	10 92 b4 06 	sts	0x06B4, r1	; 0x8006b4 <_ZN7TwoWire13rxBufferIndexE>
    531c:	80 93 b3 06 	sts	0x06B3, r24	; 0x8006b3 <_ZN7TwoWire14rxBufferLengthE>
    5320:	df 91       	pop	r29
    5322:	cf 91       	pop	r28
    5324:	1f 91       	pop	r17
    5326:	0f 91       	pop	r16
    5328:	ff 90       	pop	r15
    532a:	ef 90       	pop	r14
    532c:	cf 90       	pop	r12
    532e:	bf 90       	pop	r11
    5330:	af 90       	pop	r10
    5332:	7f 90       	pop	r7
    5334:	6f 90       	pop	r6
    5336:	5f 90       	pop	r5
    5338:	4f 90       	pop	r4
    533a:	08 95       	ret

0000533c <_ZN7TwoWire11requestFromEhhh>:
    533c:	cf 92       	push	r12
    533e:	ef 92       	push	r14
    5340:	0f 93       	push	r16
    5342:	1f 93       	push	r17
    5344:	c2 2e       	mov	r12, r18
    5346:	e1 2c       	mov	r14, r1
    5348:	00 e0       	ldi	r16, 0x00	; 0
    534a:	10 e0       	ldi	r17, 0x00	; 0
    534c:	98 01       	movw	r18, r16
    534e:	0e 94 45 29 	call	0x528a	; 0x528a <_ZN7TwoWire11requestFromEhhmhh>
    5352:	1f 91       	pop	r17
    5354:	0f 91       	pop	r16
    5356:	ef 90       	pop	r14
    5358:	cf 90       	pop	r12
    535a:	08 95       	ret

0000535c <_ZN7TwoWire11requestFromEhh>:
    535c:	21 e0       	ldi	r18, 0x01	; 1
    535e:	0e 94 9e 29 	call	0x533c	; 0x533c <_ZN7TwoWire11requestFromEhhh>
    5362:	08 95       	ret

00005364 <_ZN7TwoWire15endTransmissionEv>:
    5364:	61 e0       	ldi	r22, 0x01	; 1
    5366:	0e 94 32 29 	call	0x5264	; 0x5264 <_ZN7TwoWire15endTransmissionEh>
    536a:	08 95       	ret

0000536c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    536c:	83 e8       	ldi	r24, 0x83	; 131
    536e:	96 e0       	ldi	r25, 0x06	; 6
    5370:	0e 94 0d 29 	call	0x521a	; 0x521a <_ZN7TwoWireC1Ev>
    5374:	08 95       	ret

00005376 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    5376:	1f 92       	push	r1
    5378:	0f 92       	push	r0
    537a:	0f b6       	in	r0, 0x3f	; 63
    537c:	0f 92       	push	r0
    537e:	11 24       	eor	r1, r1
    5380:	2f 93       	push	r18
    5382:	3f 93       	push	r19
    5384:	8f 93       	push	r24
    5386:	9f 93       	push	r25
    5388:	af 93       	push	r26
    538a:	bf 93       	push	r27
    538c:	80 91 d6 06 	lds	r24, 0x06D6	; 0x8006d6 <timer0_millis>
    5390:	90 91 d7 06 	lds	r25, 0x06D7	; 0x8006d7 <timer0_millis+0x1>
    5394:	a0 91 d8 06 	lds	r26, 0x06D8	; 0x8006d8 <timer0_millis+0x2>
    5398:	b0 91 d9 06 	lds	r27, 0x06D9	; 0x8006d9 <timer0_millis+0x3>
    539c:	30 91 d5 06 	lds	r19, 0x06D5	; 0x8006d5 <timer0_fract>
    53a0:	23 e0       	ldi	r18, 0x03	; 3
    53a2:	23 0f       	add	r18, r19
    53a4:	2d 37       	cpi	r18, 0x7D	; 125
    53a6:	20 f4       	brcc	.+8      	; 0x53b0 <__vector_16+0x3a>
    53a8:	01 96       	adiw	r24, 0x01	; 1
    53aa:	a1 1d       	adc	r26, r1
    53ac:	b1 1d       	adc	r27, r1
    53ae:	05 c0       	rjmp	.+10     	; 0x53ba <__vector_16+0x44>
    53b0:	26 e8       	ldi	r18, 0x86	; 134
    53b2:	23 0f       	add	r18, r19
    53b4:	02 96       	adiw	r24, 0x02	; 2
    53b6:	a1 1d       	adc	r26, r1
    53b8:	b1 1d       	adc	r27, r1
    53ba:	20 93 d5 06 	sts	0x06D5, r18	; 0x8006d5 <timer0_fract>
    53be:	80 93 d6 06 	sts	0x06D6, r24	; 0x8006d6 <timer0_millis>
    53c2:	90 93 d7 06 	sts	0x06D7, r25	; 0x8006d7 <timer0_millis+0x1>
    53c6:	a0 93 d8 06 	sts	0x06D8, r26	; 0x8006d8 <timer0_millis+0x2>
    53ca:	b0 93 d9 06 	sts	0x06D9, r27	; 0x8006d9 <timer0_millis+0x3>
    53ce:	80 91 da 06 	lds	r24, 0x06DA	; 0x8006da <timer0_overflow_count>
    53d2:	90 91 db 06 	lds	r25, 0x06DB	; 0x8006db <timer0_overflow_count+0x1>
    53d6:	a0 91 dc 06 	lds	r26, 0x06DC	; 0x8006dc <timer0_overflow_count+0x2>
    53da:	b0 91 dd 06 	lds	r27, 0x06DD	; 0x8006dd <timer0_overflow_count+0x3>
    53de:	01 96       	adiw	r24, 0x01	; 1
    53e0:	a1 1d       	adc	r26, r1
    53e2:	b1 1d       	adc	r27, r1
    53e4:	80 93 da 06 	sts	0x06DA, r24	; 0x8006da <timer0_overflow_count>
    53e8:	90 93 db 06 	sts	0x06DB, r25	; 0x8006db <timer0_overflow_count+0x1>
    53ec:	a0 93 dc 06 	sts	0x06DC, r26	; 0x8006dc <timer0_overflow_count+0x2>
    53f0:	b0 93 dd 06 	sts	0x06DD, r27	; 0x8006dd <timer0_overflow_count+0x3>
    53f4:	bf 91       	pop	r27
    53f6:	af 91       	pop	r26
    53f8:	9f 91       	pop	r25
    53fa:	8f 91       	pop	r24
    53fc:	3f 91       	pop	r19
    53fe:	2f 91       	pop	r18
    5400:	0f 90       	pop	r0
    5402:	0f be       	out	0x3f, r0	; 63
    5404:	0f 90       	pop	r0
    5406:	1f 90       	pop	r1
    5408:	18 95       	reti

0000540a <millis>:
    540a:	2f b7       	in	r18, 0x3f	; 63
    540c:	f8 94       	cli
    540e:	60 91 d6 06 	lds	r22, 0x06D6	; 0x8006d6 <timer0_millis>
    5412:	70 91 d7 06 	lds	r23, 0x06D7	; 0x8006d7 <timer0_millis+0x1>
    5416:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <timer0_millis+0x2>
    541a:	90 91 d9 06 	lds	r25, 0x06D9	; 0x8006d9 <timer0_millis+0x3>
    541e:	2f bf       	out	0x3f, r18	; 63
    5420:	08 95       	ret

00005422 <micros>:
    5422:	3f b7       	in	r19, 0x3f	; 63
    5424:	f8 94       	cli
    5426:	80 91 da 06 	lds	r24, 0x06DA	; 0x8006da <timer0_overflow_count>
    542a:	90 91 db 06 	lds	r25, 0x06DB	; 0x8006db <timer0_overflow_count+0x1>
    542e:	a0 91 dc 06 	lds	r26, 0x06DC	; 0x8006dc <timer0_overflow_count+0x2>
    5432:	b0 91 dd 06 	lds	r27, 0x06DD	; 0x8006dd <timer0_overflow_count+0x3>
    5436:	26 b5       	in	r18, 0x26	; 38
    5438:	a8 9b       	sbis	0x15, 0	; 21
    543a:	05 c0       	rjmp	.+10     	; 0x5446 <micros+0x24>
    543c:	2f 3f       	cpi	r18, 0xFF	; 255
    543e:	19 f0       	breq	.+6      	; 0x5446 <micros+0x24>
    5440:	01 96       	adiw	r24, 0x01	; 1
    5442:	a1 1d       	adc	r26, r1
    5444:	b1 1d       	adc	r27, r1
    5446:	3f bf       	out	0x3f, r19	; 63
    5448:	ba 2f       	mov	r27, r26
    544a:	a9 2f       	mov	r26, r25
    544c:	98 2f       	mov	r25, r24
    544e:	88 27       	eor	r24, r24
    5450:	82 0f       	add	r24, r18
    5452:	91 1d       	adc	r25, r1
    5454:	a1 1d       	adc	r26, r1
    5456:	b1 1d       	adc	r27, r1
    5458:	bc 01       	movw	r22, r24
    545a:	cd 01       	movw	r24, r26
    545c:	42 e0       	ldi	r20, 0x02	; 2
    545e:	66 0f       	add	r22, r22
    5460:	77 1f       	adc	r23, r23
    5462:	88 1f       	adc	r24, r24
    5464:	99 1f       	adc	r25, r25
    5466:	4a 95       	dec	r20
    5468:	d1 f7       	brne	.-12     	; 0x545e <micros+0x3c>
    546a:	08 95       	ret

0000546c <delay>:
    546c:	8f 92       	push	r8
    546e:	9f 92       	push	r9
    5470:	af 92       	push	r10
    5472:	bf 92       	push	r11
    5474:	cf 92       	push	r12
    5476:	df 92       	push	r13
    5478:	ef 92       	push	r14
    547a:	ff 92       	push	r15
    547c:	6b 01       	movw	r12, r22
    547e:	7c 01       	movw	r14, r24
    5480:	0e 94 11 2a 	call	0x5422	; 0x5422 <micros>
    5484:	4b 01       	movw	r8, r22
    5486:	5c 01       	movw	r10, r24
    5488:	c1 14       	cp	r12, r1
    548a:	d1 04       	cpc	r13, r1
    548c:	e1 04       	cpc	r14, r1
    548e:	f1 04       	cpc	r15, r1
    5490:	01 f1       	breq	.+64     	; 0x54d2 <delay+0x66>
    5492:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <yield>
    5496:	0e 94 11 2a 	call	0x5422	; 0x5422 <micros>
    549a:	dc 01       	movw	r26, r24
    549c:	cb 01       	movw	r24, r22
    549e:	88 19       	sub	r24, r8
    54a0:	99 09       	sbc	r25, r9
    54a2:	aa 09       	sbc	r26, r10
    54a4:	bb 09       	sbc	r27, r11
    54a6:	88 3e       	cpi	r24, 0xE8	; 232
    54a8:	93 40       	sbci	r25, 0x03	; 3
    54aa:	a1 05       	cpc	r26, r1
    54ac:	b1 05       	cpc	r27, r1
    54ae:	60 f3       	brcs	.-40     	; 0x5488 <delay+0x1c>
    54b0:	21 e0       	ldi	r18, 0x01	; 1
    54b2:	c2 1a       	sub	r12, r18
    54b4:	d1 08       	sbc	r13, r1
    54b6:	e1 08       	sbc	r14, r1
    54b8:	f1 08       	sbc	r15, r1
    54ba:	88 ee       	ldi	r24, 0xE8	; 232
    54bc:	88 0e       	add	r8, r24
    54be:	83 e0       	ldi	r24, 0x03	; 3
    54c0:	98 1e       	adc	r9, r24
    54c2:	a1 1c       	adc	r10, r1
    54c4:	b1 1c       	adc	r11, r1
    54c6:	c1 14       	cp	r12, r1
    54c8:	d1 04       	cpc	r13, r1
    54ca:	e1 04       	cpc	r14, r1
    54cc:	f1 04       	cpc	r15, r1
    54ce:	19 f7       	brne	.-58     	; 0x5496 <delay+0x2a>
    54d0:	db cf       	rjmp	.-74     	; 0x5488 <delay+0x1c>
    54d2:	ff 90       	pop	r15
    54d4:	ef 90       	pop	r14
    54d6:	df 90       	pop	r13
    54d8:	cf 90       	pop	r12
    54da:	bf 90       	pop	r11
    54dc:	af 90       	pop	r10
    54de:	9f 90       	pop	r9
    54e0:	8f 90       	pop	r8
    54e2:	08 95       	ret

000054e4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    54e4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    54e6:	84 b5       	in	r24, 0x24	; 36
    54e8:	82 60       	ori	r24, 0x02	; 2
    54ea:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    54ec:	84 b5       	in	r24, 0x24	; 36
    54ee:	81 60       	ori	r24, 0x01	; 1
    54f0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    54f2:	85 b5       	in	r24, 0x25	; 37
    54f4:	82 60       	ori	r24, 0x02	; 2
    54f6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    54f8:	85 b5       	in	r24, 0x25	; 37
    54fa:	81 60       	ori	r24, 0x01	; 1
    54fc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    54fe:	ee e6       	ldi	r30, 0x6E	; 110
    5500:	f0 e0       	ldi	r31, 0x00	; 0
    5502:	80 81       	ld	r24, Z
    5504:	81 60       	ori	r24, 0x01	; 1
    5506:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    5508:	e1 e8       	ldi	r30, 0x81	; 129
    550a:	f0 e0       	ldi	r31, 0x00	; 0
    550c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    550e:	80 81       	ld	r24, Z
    5510:	82 60       	ori	r24, 0x02	; 2
    5512:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    5514:	80 81       	ld	r24, Z
    5516:	81 60       	ori	r24, 0x01	; 1
    5518:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    551a:	e0 e8       	ldi	r30, 0x80	; 128
    551c:	f0 e0       	ldi	r31, 0x00	; 0
    551e:	80 81       	ld	r24, Z
    5520:	81 60       	ori	r24, 0x01	; 1
    5522:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    5524:	e1 eb       	ldi	r30, 0xB1	; 177
    5526:	f0 e0       	ldi	r31, 0x00	; 0
    5528:	80 81       	ld	r24, Z
    552a:	84 60       	ori	r24, 0x04	; 4
    552c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    552e:	e0 eb       	ldi	r30, 0xB0	; 176
    5530:	f0 e0       	ldi	r31, 0x00	; 0
    5532:	80 81       	ld	r24, Z
    5534:	81 60       	ori	r24, 0x01	; 1
    5536:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    5538:	ea e7       	ldi	r30, 0x7A	; 122
    553a:	f0 e0       	ldi	r31, 0x00	; 0
    553c:	80 81       	ld	r24, Z
    553e:	84 60       	ori	r24, 0x04	; 4
    5540:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    5542:	80 81       	ld	r24, Z
    5544:	82 60       	ori	r24, 0x02	; 2
    5546:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    5548:	80 81       	ld	r24, Z
    554a:	81 60       	ori	r24, 0x01	; 1
    554c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    554e:	80 81       	ld	r24, Z
    5550:	80 68       	ori	r24, 0x80	; 128
    5552:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    5554:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    5558:	08 95       	ret

0000555a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    555a:	83 30       	cpi	r24, 0x03	; 3
    555c:	81 f0       	breq	.+32     	; 0x557e <turnOffPWM+0x24>
    555e:	28 f4       	brcc	.+10     	; 0x556a <turnOffPWM+0x10>
    5560:	81 30       	cpi	r24, 0x01	; 1
    5562:	99 f0       	breq	.+38     	; 0x558a <turnOffPWM+0x30>
    5564:	82 30       	cpi	r24, 0x02	; 2
    5566:	a1 f0       	breq	.+40     	; 0x5590 <turnOffPWM+0x36>
    5568:	08 95       	ret
    556a:	87 30       	cpi	r24, 0x07	; 7
    556c:	a9 f0       	breq	.+42     	; 0x5598 <turnOffPWM+0x3e>
    556e:	88 30       	cpi	r24, 0x08	; 8
    5570:	b9 f0       	breq	.+46     	; 0x55a0 <turnOffPWM+0x46>
    5572:	84 30       	cpi	r24, 0x04	; 4
    5574:	d1 f4       	brne	.+52     	; 0x55aa <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5576:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    557a:	8f 7d       	andi	r24, 0xDF	; 223
    557c:	03 c0       	rjmp	.+6      	; 0x5584 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    557e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5582:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5584:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5588:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    558a:	84 b5       	in	r24, 0x24	; 36
    558c:	8f 77       	andi	r24, 0x7F	; 127
    558e:	02 c0       	rjmp	.+4      	; 0x5594 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    5590:	84 b5       	in	r24, 0x24	; 36
    5592:	8f 7d       	andi	r24, 0xDF	; 223
    5594:	84 bd       	out	0x24, r24	; 36
    5596:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    5598:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    559c:	8f 77       	andi	r24, 0x7F	; 127
    559e:	03 c0       	rjmp	.+6      	; 0x55a6 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    55a0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    55a4:	8f 7d       	andi	r24, 0xDF	; 223
    55a6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    55aa:	08 95       	ret

000055ac <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    55ac:	cf 93       	push	r28
    55ae:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    55b0:	90 e0       	ldi	r25, 0x00	; 0
    55b2:	fc 01       	movw	r30, r24
    55b4:	e8 59       	subi	r30, 0x98	; 152
    55b6:	fe 4f       	sbci	r31, 0xFE	; 254
    55b8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    55ba:	fc 01       	movw	r30, r24
    55bc:	e4 58       	subi	r30, 0x84	; 132
    55be:	fe 4f       	sbci	r31, 0xFE	; 254
    55c0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    55c2:	88 23       	and	r24, r24
    55c4:	61 f1       	breq	.+88     	; 0x561e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    55c6:	90 e0       	ldi	r25, 0x00	; 0
    55c8:	88 0f       	add	r24, r24
    55ca:	99 1f       	adc	r25, r25
    55cc:	fc 01       	movw	r30, r24
    55ce:	ec 55       	subi	r30, 0x5C	; 92
    55d0:	fe 4f       	sbci	r31, 0xFE	; 254
    55d2:	c5 91       	lpm	r28, Z+
    55d4:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    55d6:	fc 01       	movw	r30, r24
    55d8:	e6 56       	subi	r30, 0x66	; 102
    55da:	fe 4f       	sbci	r31, 0xFE	; 254
    55dc:	a5 91       	lpm	r26, Z+
    55de:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    55e0:	61 11       	cpse	r22, r1
    55e2:	09 c0       	rjmp	.+18     	; 0x55f6 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    55e4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    55e6:	f8 94       	cli
		*reg &= ~bit;
    55e8:	88 81       	ld	r24, Y
    55ea:	20 95       	com	r18
    55ec:	82 23       	and	r24, r18
    55ee:	88 83       	st	Y, r24
		*out &= ~bit;
    55f0:	ec 91       	ld	r30, X
    55f2:	2e 23       	and	r18, r30
    55f4:	0b c0       	rjmp	.+22     	; 0x560c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    55f6:	62 30       	cpi	r22, 0x02	; 2
    55f8:	61 f4       	brne	.+24     	; 0x5612 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    55fa:	9f b7       	in	r25, 0x3f	; 63
                cli();
    55fc:	f8 94       	cli
		*reg &= ~bit;
    55fe:	38 81       	ld	r19, Y
    5600:	82 2f       	mov	r24, r18
    5602:	80 95       	com	r24
    5604:	83 23       	and	r24, r19
    5606:	88 83       	st	Y, r24
		*out |= bit;
    5608:	ec 91       	ld	r30, X
    560a:	2e 2b       	or	r18, r30
    560c:	2c 93       	st	X, r18
		SREG = oldSREG;
    560e:	9f bf       	out	0x3f, r25	; 63
    5610:	06 c0       	rjmp	.+12     	; 0x561e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    5612:	8f b7       	in	r24, 0x3f	; 63
                cli();
    5614:	f8 94       	cli
		*reg |= bit;
    5616:	e8 81       	ld	r30, Y
    5618:	2e 2b       	or	r18, r30
    561a:	28 83       	st	Y, r18
		SREG = oldSREG;
    561c:	8f bf       	out	0x3f, r24	; 63
	}
}
    561e:	df 91       	pop	r29
    5620:	cf 91       	pop	r28
    5622:	08 95       	ret

00005624 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    5624:	1f 93       	push	r17
    5626:	cf 93       	push	r28
    5628:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    562a:	28 2f       	mov	r18, r24
    562c:	30 e0       	ldi	r19, 0x00	; 0
    562e:	f9 01       	movw	r30, r18
    5630:	ec 5a       	subi	r30, 0xAC	; 172
    5632:	fe 4f       	sbci	r31, 0xFE	; 254
    5634:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    5636:	f9 01       	movw	r30, r18
    5638:	e8 59       	subi	r30, 0x98	; 152
    563a:	fe 4f       	sbci	r31, 0xFE	; 254
    563c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    563e:	f9 01       	movw	r30, r18
    5640:	e4 58       	subi	r30, 0x84	; 132
    5642:	fe 4f       	sbci	r31, 0xFE	; 254
    5644:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    5646:	cc 23       	and	r28, r28
    5648:	c9 f0       	breq	.+50     	; 0x567c <digitalWrite+0x58>
    564a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    564c:	81 11       	cpse	r24, r1
    564e:	0e 94 ad 2a 	call	0x555a	; 0x555a <turnOffPWM>

	out = portOutputRegister(port);
    5652:	ec 2f       	mov	r30, r28
    5654:	f0 e0       	ldi	r31, 0x00	; 0
    5656:	ee 0f       	add	r30, r30
    5658:	ff 1f       	adc	r31, r31
    565a:	e6 56       	subi	r30, 0x66	; 102
    565c:	fe 4f       	sbci	r31, 0xFE	; 254
    565e:	a5 91       	lpm	r26, Z+
    5660:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    5662:	8f b7       	in	r24, 0x3f	; 63
	cli();
    5664:	f8 94       	cli

	if (val == LOW) {
    5666:	11 11       	cpse	r17, r1
    5668:	05 c0       	rjmp	.+10     	; 0x5674 <digitalWrite+0x50>
		*out &= ~bit;
    566a:	9c 91       	ld	r25, X
    566c:	ed 2f       	mov	r30, r29
    566e:	e0 95       	com	r30
    5670:	e9 23       	and	r30, r25
    5672:	02 c0       	rjmp	.+4      	; 0x5678 <digitalWrite+0x54>
	} else {
		*out |= bit;
    5674:	ec 91       	ld	r30, X
    5676:	ed 2b       	or	r30, r29
    5678:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    567a:	8f bf       	out	0x3f, r24	; 63
}
    567c:	df 91       	pop	r29
    567e:	cf 91       	pop	r28
    5680:	1f 91       	pop	r17
    5682:	08 95       	ret

00005684 <digitalRead>:

int digitalRead(uint8_t pin)
{
    5684:	cf 93       	push	r28
    5686:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    5688:	28 2f       	mov	r18, r24
    568a:	30 e0       	ldi	r19, 0x00	; 0
    568c:	f9 01       	movw	r30, r18
    568e:	ec 5a       	subi	r30, 0xAC	; 172
    5690:	fe 4f       	sbci	r31, 0xFE	; 254
    5692:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    5694:	f9 01       	movw	r30, r18
    5696:	e8 59       	subi	r30, 0x98	; 152
    5698:	fe 4f       	sbci	r31, 0xFE	; 254
    569a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    569c:	f9 01       	movw	r30, r18
    569e:	e4 58       	subi	r30, 0x84	; 132
    56a0:	fe 4f       	sbci	r31, 0xFE	; 254
    56a2:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    56a4:	cc 23       	and	r28, r28
    56a6:	91 f0       	breq	.+36     	; 0x56cc <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    56a8:	81 11       	cpse	r24, r1
    56aa:	0e 94 ad 2a 	call	0x555a	; 0x555a <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    56ae:	ec 2f       	mov	r30, r28
    56b0:	f0 e0       	ldi	r31, 0x00	; 0
    56b2:	ee 0f       	add	r30, r30
    56b4:	ff 1f       	adc	r31, r31
    56b6:	e0 57       	subi	r30, 0x70	; 112
    56b8:	fe 4f       	sbci	r31, 0xFE	; 254
    56ba:	a5 91       	lpm	r26, Z+
    56bc:	b4 91       	lpm	r27, Z
    56be:	ec 91       	ld	r30, X
    56c0:	ed 23       	and	r30, r29
    56c2:	81 e0       	ldi	r24, 0x01	; 1
    56c4:	90 e0       	ldi	r25, 0x00	; 0
    56c6:	21 f4       	brne	.+8      	; 0x56d0 <digitalRead+0x4c>
    56c8:	80 e0       	ldi	r24, 0x00	; 0
    56ca:	02 c0       	rjmp	.+4      	; 0x56d0 <digitalRead+0x4c>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    56cc:	80 e0       	ldi	r24, 0x00	; 0
    56ce:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    56d0:	df 91       	pop	r29
    56d2:	cf 91       	pop	r28
    56d4:	08 95       	ret

000056d6 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    56d6:	08 95       	ret

000056d8 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    56d8:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <twi_state>
    56dc:	81 e0       	ldi	r24, 0x01	; 1
    56de:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <twi_sendStop>
    56e2:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <twi_inRepStart>
    56e6:	61 e0       	ldi	r22, 0x01	; 1
    56e8:	82 e1       	ldi	r24, 0x12	; 18
    56ea:	0e 94 12 2b 	call	0x5624	; 0x5624 <digitalWrite>
    56ee:	61 e0       	ldi	r22, 0x01	; 1
    56f0:	83 e1       	ldi	r24, 0x13	; 19
    56f2:	0e 94 12 2b 	call	0x5624	; 0x5624 <digitalWrite>
    56f6:	e9 eb       	ldi	r30, 0xB9	; 185
    56f8:	f0 e0       	ldi	r31, 0x00	; 0
    56fa:	80 81       	ld	r24, Z
    56fc:	8e 7f       	andi	r24, 0xFE	; 254
    56fe:	80 83       	st	Z, r24
    5700:	80 81       	ld	r24, Z
    5702:	8d 7f       	andi	r24, 0xFD	; 253
    5704:	80 83       	st	Z, r24
    5706:	88 e4       	ldi	r24, 0x48	; 72
    5708:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    570c:	85 e4       	ldi	r24, 0x45	; 69
    570e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5712:	08 95       	ret

00005714 <twi_readFrom>:
    5714:	41 32       	cpi	r20, 0x21	; 33
    5716:	08 f0       	brcs	.+2      	; 0x571a <twi_readFrom+0x6>
    5718:	43 c0       	rjmp	.+134    	; 0x57a0 <twi_readFrom+0x8c>
    571a:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <twi_state>
    571e:	91 11       	cpse	r25, r1
    5720:	fc cf       	rjmp	.-8      	; 0x571a <twi_readFrom+0x6>
    5722:	91 e0       	ldi	r25, 0x01	; 1
    5724:	90 93 4b 07 	sts	0x074B, r25	; 0x80074b <twi_state>
    5728:	20 93 49 07 	sts	0x0749, r18	; 0x800749 <twi_sendStop>
    572c:	2f ef       	ldi	r18, 0xFF	; 255
    572e:	20 93 de 06 	sts	0x06DE, r18	; 0x8006de <twi_error>
    5732:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <twi_masterBufferIndex>
    5736:	24 0f       	add	r18, r20
    5738:	20 93 22 07 	sts	0x0722, r18	; 0x800722 <twi_masterBufferLength>
    573c:	90 93 4a 07 	sts	0x074A, r25	; 0x80074a <twi_slarw>
    5740:	90 91 4a 07 	lds	r25, 0x074A	; 0x80074a <twi_slarw>
    5744:	88 0f       	add	r24, r24
    5746:	89 2b       	or	r24, r25
    5748:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <twi_slarw>
    574c:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <twi_inRepStart>
    5750:	81 30       	cpi	r24, 0x01	; 1
    5752:	61 f4       	brne	.+24     	; 0x576c <twi_readFrom+0x58>
    5754:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <twi_inRepStart>
    5758:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <twi_slarw>
    575c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5760:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5764:	83 fd       	sbrc	r24, 3
    5766:	f8 cf       	rjmp	.-16     	; 0x5758 <twi_readFrom+0x44>
    5768:	85 ec       	ldi	r24, 0xC5	; 197
    576a:	01 c0       	rjmp	.+2      	; 0x576e <twi_readFrom+0x5a>
    576c:	85 ee       	ldi	r24, 0xE5	; 229
    576e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5772:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <twi_state>
    5776:	81 30       	cpi	r24, 0x01	; 1
    5778:	e1 f3       	breq	.-8      	; 0x5772 <twi_readFrom+0x5e>
    577a:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <twi_masterBufferIndex>
    577e:	84 17       	cp	r24, r20
    5780:	10 f4       	brcc	.+4      	; 0x5786 <twi_readFrom+0x72>
    5782:	40 91 23 07 	lds	r20, 0x0723	; 0x800723 <twi_masterBufferIndex>
    5786:	24 e2       	ldi	r18, 0x24	; 36
    5788:	37 e0       	ldi	r19, 0x07	; 7
    578a:	fb 01       	movw	r30, r22
    578c:	d9 01       	movw	r26, r18
    578e:	8a 2f       	mov	r24, r26
    5790:	82 1b       	sub	r24, r18
    5792:	84 17       	cp	r24, r20
    5794:	18 f4       	brcc	.+6      	; 0x579c <twi_readFrom+0x88>
    5796:	8d 91       	ld	r24, X+
    5798:	81 93       	st	Z+, r24
    579a:	f9 cf       	rjmp	.-14     	; 0x578e <twi_readFrom+0x7a>
    579c:	84 2f       	mov	r24, r20
    579e:	08 95       	ret
    57a0:	80 e0       	ldi	r24, 0x00	; 0
    57a2:	08 95       	ret

000057a4 <twi_writeTo>:
    57a4:	0f 93       	push	r16
    57a6:	41 32       	cpi	r20, 0x21	; 33
    57a8:	08 f0       	brcs	.+2      	; 0x57ac <twi_writeTo+0x8>
    57aa:	4a c0       	rjmp	.+148    	; 0x5840 <twi_writeTo+0x9c>
    57ac:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <twi_state>
    57b0:	91 11       	cpse	r25, r1
    57b2:	fc cf       	rjmp	.-8      	; 0x57ac <twi_writeTo+0x8>
    57b4:	32 e0       	ldi	r19, 0x02	; 2
    57b6:	30 93 4b 07 	sts	0x074B, r19	; 0x80074b <twi_state>
    57ba:	00 93 49 07 	sts	0x0749, r16	; 0x800749 <twi_sendStop>
    57be:	3f ef       	ldi	r19, 0xFF	; 255
    57c0:	30 93 de 06 	sts	0x06DE, r19	; 0x8006de <twi_error>
    57c4:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <twi_masterBufferIndex>
    57c8:	40 93 22 07 	sts	0x0722, r20	; 0x800722 <twi_masterBufferLength>
    57cc:	fb 01       	movw	r30, r22
    57ce:	64 e2       	ldi	r22, 0x24	; 36
    57d0:	77 e0       	ldi	r23, 0x07	; 7
    57d2:	db 01       	movw	r26, r22
    57d4:	3a 2f       	mov	r19, r26
    57d6:	36 1b       	sub	r19, r22
    57d8:	34 17       	cp	r19, r20
    57da:	18 f4       	brcc	.+6      	; 0x57e2 <twi_writeTo+0x3e>
    57dc:	31 91       	ld	r19, Z+
    57de:	3d 93       	st	X+, r19
    57e0:	f9 cf       	rjmp	.-14     	; 0x57d4 <twi_writeTo+0x30>
    57e2:	10 92 4a 07 	sts	0x074A, r1	; 0x80074a <twi_slarw>
    57e6:	30 91 4a 07 	lds	r19, 0x074A	; 0x80074a <twi_slarw>
    57ea:	88 0f       	add	r24, r24
    57ec:	83 2b       	or	r24, r19
    57ee:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <twi_slarw>
    57f2:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <twi_inRepStart>
    57f6:	81 30       	cpi	r24, 0x01	; 1
    57f8:	61 f4       	brne	.+24     	; 0x5812 <twi_writeTo+0x6e>
    57fa:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <twi_inRepStart>
    57fe:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <twi_slarw>
    5802:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5806:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    580a:	83 fd       	sbrc	r24, 3
    580c:	f8 cf       	rjmp	.-16     	; 0x57fe <twi_writeTo+0x5a>
    580e:	85 ec       	ldi	r24, 0xC5	; 197
    5810:	01 c0       	rjmp	.+2      	; 0x5814 <twi_writeTo+0x70>
    5812:	85 ee       	ldi	r24, 0xE5	; 229
    5814:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5818:	22 23       	and	r18, r18
    581a:	21 f0       	breq	.+8      	; 0x5824 <twi_writeTo+0x80>
    581c:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <twi_state>
    5820:	82 30       	cpi	r24, 0x02	; 2
    5822:	d1 f3       	breq	.-12     	; 0x5818 <twi_writeTo+0x74>
    5824:	80 91 de 06 	lds	r24, 0x06DE	; 0x8006de <twi_error>
    5828:	8f 3f       	cpi	r24, 0xFF	; 255
    582a:	79 f0       	breq	.+30     	; 0x584a <twi_writeTo+0xa6>
    582c:	80 91 de 06 	lds	r24, 0x06DE	; 0x8006de <twi_error>
    5830:	80 32       	cpi	r24, 0x20	; 32
    5832:	41 f0       	breq	.+16     	; 0x5844 <twi_writeTo+0xa0>
    5834:	80 91 de 06 	lds	r24, 0x06DE	; 0x8006de <twi_error>
    5838:	80 33       	cpi	r24, 0x30	; 48
    583a:	31 f0       	breq	.+12     	; 0x5848 <twi_writeTo+0xa4>
    583c:	94 e0       	ldi	r25, 0x04	; 4
    583e:	05 c0       	rjmp	.+10     	; 0x584a <twi_writeTo+0xa6>
    5840:	91 e0       	ldi	r25, 0x01	; 1
    5842:	03 c0       	rjmp	.+6      	; 0x584a <twi_writeTo+0xa6>
    5844:	92 e0       	ldi	r25, 0x02	; 2
    5846:	01 c0       	rjmp	.+2      	; 0x584a <twi_writeTo+0xa6>
    5848:	93 e0       	ldi	r25, 0x03	; 3
    584a:	89 2f       	mov	r24, r25
    584c:	0f 91       	pop	r16
    584e:	08 95       	ret

00005850 <twi_transmit>:
    5850:	40 91 00 07 	lds	r20, 0x0700	; 0x800700 <twi_txBufferLength>
    5854:	26 2f       	mov	r18, r22
    5856:	30 e0       	ldi	r19, 0x00	; 0
    5858:	24 0f       	add	r18, r20
    585a:	31 1d       	adc	r19, r1
    585c:	21 32       	cpi	r18, 0x21	; 33
    585e:	31 05       	cpc	r19, r1
    5860:	dc f4       	brge	.+54     	; 0x5898 <twi_transmit+0x48>
    5862:	20 91 4b 07 	lds	r18, 0x074B	; 0x80074b <twi_state>
    5866:	24 30       	cpi	r18, 0x04	; 4
    5868:	c9 f4       	brne	.+50     	; 0x589c <twi_transmit+0x4c>
    586a:	fc 01       	movw	r30, r24
    586c:	80 e0       	ldi	r24, 0x00	; 0
    586e:	90 e0       	ldi	r25, 0x00	; 0
    5870:	86 17       	cp	r24, r22
    5872:	58 f4       	brcc	.+22     	; 0x588a <twi_transmit+0x3a>
    5874:	30 91 00 07 	lds	r19, 0x0700	; 0x800700 <twi_txBufferLength>
    5878:	21 91       	ld	r18, Z+
    587a:	dc 01       	movw	r26, r24
    587c:	ae 5f       	subi	r26, 0xFE	; 254
    587e:	b8 4f       	sbci	r27, 0xF8	; 248
    5880:	a3 0f       	add	r26, r19
    5882:	b1 1d       	adc	r27, r1
    5884:	2c 93       	st	X, r18
    5886:	01 96       	adiw	r24, 0x01	; 1
    5888:	f3 cf       	rjmp	.-26     	; 0x5870 <twi_transmit+0x20>
    588a:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <twi_txBufferLength>
    588e:	68 0f       	add	r22, r24
    5890:	60 93 00 07 	sts	0x0700, r22	; 0x800700 <twi_txBufferLength>
    5894:	80 e0       	ldi	r24, 0x00	; 0
    5896:	08 95       	ret
    5898:	81 e0       	ldi	r24, 0x01	; 1
    589a:	08 95       	ret
    589c:	82 e0       	ldi	r24, 0x02	; 2
    589e:	08 95       	ret

000058a0 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    58a0:	85 ed       	ldi	r24, 0xD5	; 213
    58a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    58a6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    58aa:	84 fd       	sbrc	r24, 4
    58ac:	fc cf       	rjmp	.-8      	; 0x58a6 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    58ae:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <twi_state>
    58b2:	08 95       	ret

000058b4 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    58b4:	85 ec       	ldi	r24, 0xC5	; 197
    58b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    58ba:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <twi_state>
    58be:	08 95       	ret

000058c0 <__vector_24>:
}

ISR(TWI_vect)
{
    58c0:	1f 92       	push	r1
    58c2:	0f 92       	push	r0
    58c4:	0f b6       	in	r0, 0x3f	; 63
    58c6:	0f 92       	push	r0
    58c8:	11 24       	eor	r1, r1
    58ca:	2f 93       	push	r18
    58cc:	3f 93       	push	r19
    58ce:	4f 93       	push	r20
    58d0:	5f 93       	push	r21
    58d2:	6f 93       	push	r22
    58d4:	7f 93       	push	r23
    58d6:	8f 93       	push	r24
    58d8:	9f 93       	push	r25
    58da:	af 93       	push	r26
    58dc:	bf 93       	push	r27
    58de:	ef 93       	push	r30
    58e0:	ff 93       	push	r31
  switch(TW_STATUS){
    58e2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    58e6:	88 7f       	andi	r24, 0xF8	; 248
    58e8:	80 36       	cpi	r24, 0x60	; 96
    58ea:	09 f4       	brne	.+2      	; 0x58ee <__vector_24+0x2e>
    58ec:	9e c0       	rjmp	.+316    	; 0x5a2a <__vector_24+0x16a>
    58ee:	78 f5       	brcc	.+94     	; 0x594e <__vector_24+0x8e>
    58f0:	88 32       	cpi	r24, 0x28	; 40
    58f2:	09 f4       	brne	.+2      	; 0x58f6 <__vector_24+0x36>
    58f4:	5d c0       	rjmp	.+186    	; 0x59b0 <__vector_24+0xf0>
    58f6:	90 f4       	brcc	.+36     	; 0x591c <__vector_24+0x5c>
    58f8:	80 31       	cpi	r24, 0x10	; 16
    58fa:	09 f4       	brne	.+2      	; 0x58fe <__vector_24+0x3e>
    58fc:	56 c0       	rjmp	.+172    	; 0x59aa <__vector_24+0xea>
    58fe:	38 f4       	brcc	.+14     	; 0x590e <__vector_24+0x4e>
    5900:	88 23       	and	r24, r24
    5902:	09 f4       	brne	.+2      	; 0x5906 <__vector_24+0x46>
    5904:	f5 c0       	rjmp	.+490    	; 0x5af0 <__vector_24+0x230>
    5906:	88 30       	cpi	r24, 0x08	; 8
    5908:	09 f4       	brne	.+2      	; 0x590c <__vector_24+0x4c>
    590a:	4f c0       	rjmp	.+158    	; 0x59aa <__vector_24+0xea>
    590c:	f5 c0       	rjmp	.+490    	; 0x5af8 <__vector_24+0x238>
    590e:	88 31       	cpi	r24, 0x18	; 24
    5910:	09 f4       	brne	.+2      	; 0x5914 <__vector_24+0x54>
    5912:	4e c0       	rjmp	.+156    	; 0x59b0 <__vector_24+0xf0>
    5914:	80 32       	cpi	r24, 0x20	; 32
    5916:	09 f4       	brne	.+2      	; 0x591a <__vector_24+0x5a>
    5918:	5f c0       	rjmp	.+190    	; 0x59d8 <__vector_24+0x118>
    591a:	ee c0       	rjmp	.+476    	; 0x5af8 <__vector_24+0x238>
    591c:	80 34       	cpi	r24, 0x40	; 64
    591e:	09 f4       	brne	.+2      	; 0x5922 <__vector_24+0x62>
    5920:	6a c0       	rjmp	.+212    	; 0x59f6 <__vector_24+0x136>
    5922:	58 f4       	brcc	.+22     	; 0x593a <__vector_24+0x7a>
    5924:	80 33       	cpi	r24, 0x30	; 48
    5926:	09 f4       	brne	.+2      	; 0x592a <__vector_24+0x6a>
    5928:	57 c0       	rjmp	.+174    	; 0x59d8 <__vector_24+0x118>
    592a:	88 33       	cpi	r24, 0x38	; 56
    592c:	09 f0       	breq	.+2      	; 0x5930 <__vector_24+0x70>
    592e:	e4 c0       	rjmp	.+456    	; 0x5af8 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    5930:	80 93 de 06 	sts	0x06DE, r24	; 0x8006de <twi_error>
      twi_releaseBus();
    5934:	0e 94 5a 2c 	call	0x58b4	; 0x58b4 <twi_releaseBus>
      break;
    5938:	df c0       	rjmp	.+446    	; 0x5af8 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    593a:	80 35       	cpi	r24, 0x50	; 80
    593c:	09 f4       	brne	.+2      	; 0x5940 <__vector_24+0x80>
    593e:	4f c0       	rjmp	.+158    	; 0x59de <__vector_24+0x11e>
    5940:	88 35       	cpi	r24, 0x58	; 88
    5942:	09 f4       	brne	.+2      	; 0x5946 <__vector_24+0x86>
    5944:	5d c0       	rjmp	.+186    	; 0x5a00 <__vector_24+0x140>
    5946:	88 34       	cpi	r24, 0x48	; 72
    5948:	09 f0       	breq	.+2      	; 0x594c <__vector_24+0x8c>
    594a:	d6 c0       	rjmp	.+428    	; 0x5af8 <__vector_24+0x238>
    594c:	d3 c0       	rjmp	.+422    	; 0x5af4 <__vector_24+0x234>
    594e:	88 39       	cpi	r24, 0x98	; 152
    5950:	09 f4       	brne	.+2      	; 0x5954 <__vector_24+0x94>
    5952:	c4 c0       	rjmp	.+392    	; 0x5adc <__vector_24+0x21c>
    5954:	a8 f4       	brcc	.+42     	; 0x5980 <__vector_24+0xc0>
    5956:	88 37       	cpi	r24, 0x78	; 120
    5958:	09 f4       	brne	.+2      	; 0x595c <__vector_24+0x9c>
    595a:	67 c0       	rjmp	.+206    	; 0x5a2a <__vector_24+0x16a>
    595c:	38 f4       	brcc	.+14     	; 0x596c <__vector_24+0xac>
    595e:	88 36       	cpi	r24, 0x68	; 104
    5960:	09 f4       	brne	.+2      	; 0x5964 <__vector_24+0xa4>
    5962:	63 c0       	rjmp	.+198    	; 0x5a2a <__vector_24+0x16a>
    5964:	80 37       	cpi	r24, 0x70	; 112
    5966:	09 f4       	brne	.+2      	; 0x596a <__vector_24+0xaa>
    5968:	60 c0       	rjmp	.+192    	; 0x5a2a <__vector_24+0x16a>
    596a:	c6 c0       	rjmp	.+396    	; 0x5af8 <__vector_24+0x238>
    596c:	88 38       	cpi	r24, 0x88	; 136
    596e:	09 f4       	brne	.+2      	; 0x5972 <__vector_24+0xb2>
    5970:	b5 c0       	rjmp	.+362    	; 0x5adc <__vector_24+0x21c>
    5972:	80 39       	cpi	r24, 0x90	; 144
    5974:	09 f4       	brne	.+2      	; 0x5978 <__vector_24+0xb8>
    5976:	5f c0       	rjmp	.+190    	; 0x5a36 <__vector_24+0x176>
    5978:	80 38       	cpi	r24, 0x80	; 128
    597a:	09 f0       	breq	.+2      	; 0x597e <__vector_24+0xbe>
    597c:	bd c0       	rjmp	.+378    	; 0x5af8 <__vector_24+0x238>
    597e:	5b c0       	rjmp	.+182    	; 0x5a36 <__vector_24+0x176>
    5980:	80 3b       	cpi	r24, 0xB0	; 176
    5982:	09 f4       	brne	.+2      	; 0x5986 <__vector_24+0xc6>
    5984:	83 c0       	rjmp	.+262    	; 0x5a8c <__vector_24+0x1cc>
    5986:	38 f4       	brcc	.+14     	; 0x5996 <__vector_24+0xd6>
    5988:	80 3a       	cpi	r24, 0xA0	; 160
    598a:	09 f4       	brne	.+2      	; 0x598e <__vector_24+0xce>
    598c:	66 c0       	rjmp	.+204    	; 0x5a5a <__vector_24+0x19a>
    598e:	88 3a       	cpi	r24, 0xA8	; 168
    5990:	09 f4       	brne	.+2      	; 0x5994 <__vector_24+0xd4>
    5992:	7c c0       	rjmp	.+248    	; 0x5a8c <__vector_24+0x1cc>
    5994:	b1 c0       	rjmp	.+354    	; 0x5af8 <__vector_24+0x238>
    5996:	80 3c       	cpi	r24, 0xC0	; 192
    5998:	09 f4       	brne	.+2      	; 0x599c <__vector_24+0xdc>
    599a:	a4 c0       	rjmp	.+328    	; 0x5ae4 <__vector_24+0x224>
    599c:	88 3c       	cpi	r24, 0xC8	; 200
    599e:	09 f4       	brne	.+2      	; 0x59a2 <__vector_24+0xe2>
    59a0:	a1 c0       	rjmp	.+322    	; 0x5ae4 <__vector_24+0x224>
    59a2:	88 3b       	cpi	r24, 0xB8	; 184
    59a4:	09 f4       	brne	.+2      	; 0x59a8 <__vector_24+0xe8>
    59a6:	87 c0       	rjmp	.+270    	; 0x5ab6 <__vector_24+0x1f6>
    59a8:	a7 c0       	rjmp	.+334    	; 0x5af8 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    59aa:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <twi_slarw>
    59ae:	10 c0       	rjmp	.+32     	; 0x59d0 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    59b0:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <twi_masterBufferIndex>
    59b4:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <twi_masterBufferLength>
    59b8:	98 17       	cp	r25, r24
    59ba:	70 f5       	brcc	.+92     	; 0x5a18 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    59bc:	e0 91 23 07 	lds	r30, 0x0723	; 0x800723 <twi_masterBufferIndex>
    59c0:	81 e0       	ldi	r24, 0x01	; 1
    59c2:	8e 0f       	add	r24, r30
    59c4:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <twi_masterBufferIndex>
    59c8:	f0 e0       	ldi	r31, 0x00	; 0
    59ca:	ec 5d       	subi	r30, 0xDC	; 220
    59cc:	f8 4f       	sbci	r31, 0xF8	; 248
    59ce:	80 81       	ld	r24, Z
    59d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    59d4:	85 ec       	ldi	r24, 0xC5	; 197
    59d6:	83 c0       	rjmp	.+262    	; 0x5ade <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    59d8:	80 93 de 06 	sts	0x06DE, r24	; 0x8006de <twi_error>
    59dc:	8b c0       	rjmp	.+278    	; 0x5af4 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    59de:	e0 91 23 07 	lds	r30, 0x0723	; 0x800723 <twi_masterBufferIndex>
    59e2:	81 e0       	ldi	r24, 0x01	; 1
    59e4:	8e 0f       	add	r24, r30
    59e6:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <twi_masterBufferIndex>
    59ea:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    59ee:	f0 e0       	ldi	r31, 0x00	; 0
    59f0:	ec 5d       	subi	r30, 0xDC	; 220
    59f2:	f8 4f       	sbci	r31, 0xF8	; 248
    59f4:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    59f6:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <twi_masterBufferIndex>
    59fa:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <twi_masterBufferLength>
    59fe:	6b c0       	rjmp	.+214    	; 0x5ad6 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5a00:	e0 91 23 07 	lds	r30, 0x0723	; 0x800723 <twi_masterBufferIndex>
    5a04:	81 e0       	ldi	r24, 0x01	; 1
    5a06:	8e 0f       	add	r24, r30
    5a08:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <twi_masterBufferIndex>
    5a0c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5a10:	f0 e0       	ldi	r31, 0x00	; 0
    5a12:	ec 5d       	subi	r30, 0xDC	; 220
    5a14:	f8 4f       	sbci	r31, 0xF8	; 248
    5a16:	80 83       	st	Z, r24
	if (twi_sendStop)
    5a18:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <twi_sendStop>
    5a1c:	81 11       	cpse	r24, r1
    5a1e:	6a c0       	rjmp	.+212    	; 0x5af4 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    5a20:	81 e0       	ldi	r24, 0x01	; 1
    5a22:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    5a26:	84 ea       	ldi	r24, 0xA4	; 164
    5a28:	5e c0       	rjmp	.+188    	; 0x5ae6 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    5a2a:	83 e0       	ldi	r24, 0x03	; 3
    5a2c:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    5a30:	10 92 df 06 	sts	0x06DF, r1	; 0x8006df <twi_rxBufferIndex>
    5a34:	cf cf       	rjmp	.-98     	; 0x59d4 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    5a36:	80 91 df 06 	lds	r24, 0x06DF	; 0x8006df <twi_rxBufferIndex>
    5a3a:	80 32       	cpi	r24, 0x20	; 32
    5a3c:	08 f0       	brcs	.+2      	; 0x5a40 <__vector_24+0x180>
    5a3e:	4e c0       	rjmp	.+156    	; 0x5adc <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    5a40:	e0 91 df 06 	lds	r30, 0x06DF	; 0x8006df <twi_rxBufferIndex>
    5a44:	81 e0       	ldi	r24, 0x01	; 1
    5a46:	8e 0f       	add	r24, r30
    5a48:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <twi_rxBufferIndex>
    5a4c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5a50:	f0 e0       	ldi	r31, 0x00	; 0
    5a52:	e0 52       	subi	r30, 0x20	; 32
    5a54:	f9 4f       	sbci	r31, 0xF9	; 249
    5a56:	80 83       	st	Z, r24
    5a58:	bd cf       	rjmp	.-134    	; 0x59d4 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    5a5a:	0e 94 5a 2c 	call	0x58b4	; 0x58b4 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    5a5e:	80 91 df 06 	lds	r24, 0x06DF	; 0x8006df <twi_rxBufferIndex>
    5a62:	80 32       	cpi	r24, 0x20	; 32
    5a64:	30 f4       	brcc	.+12     	; 0x5a72 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    5a66:	e0 91 df 06 	lds	r30, 0x06DF	; 0x8006df <twi_rxBufferIndex>
    5a6a:	f0 e0       	ldi	r31, 0x00	; 0
    5a6c:	e0 52       	subi	r30, 0x20	; 32
    5a6e:	f9 4f       	sbci	r31, 0xF9	; 249
    5a70:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    5a72:	60 91 df 06 	lds	r22, 0x06DF	; 0x8006df <twi_rxBufferIndex>
    5a76:	70 e0       	ldi	r23, 0x00	; 0
    5a78:	e0 91 44 07 	lds	r30, 0x0744	; 0x800744 <twi_onSlaveReceive>
    5a7c:	f0 91 45 07 	lds	r31, 0x0745	; 0x800745 <twi_onSlaveReceive+0x1>
    5a80:	80 ee       	ldi	r24, 0xE0	; 224
    5a82:	96 e0       	ldi	r25, 0x06	; 6
    5a84:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    5a86:	10 92 df 06 	sts	0x06DF, r1	; 0x8006df <twi_rxBufferIndex>
      break;
    5a8a:	36 c0       	rjmp	.+108    	; 0x5af8 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    5a8c:	84 e0       	ldi	r24, 0x04	; 4
    5a8e:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    5a92:	10 92 01 07 	sts	0x0701, r1	; 0x800701 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    5a96:	10 92 00 07 	sts	0x0700, r1	; 0x800700 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    5a9a:	e0 91 46 07 	lds	r30, 0x0746	; 0x800746 <twi_onSlaveTransmit>
    5a9e:	f0 91 47 07 	lds	r31, 0x0747	; 0x800747 <twi_onSlaveTransmit+0x1>
    5aa2:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    5aa4:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <twi_txBufferLength>
    5aa8:	81 11       	cpse	r24, r1
    5aaa:	05 c0       	rjmp	.+10     	; 0x5ab6 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    5aac:	81 e0       	ldi	r24, 0x01	; 1
    5aae:	80 93 00 07 	sts	0x0700, r24	; 0x800700 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    5ab2:	10 92 02 07 	sts	0x0702, r1	; 0x800702 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    5ab6:	e0 91 01 07 	lds	r30, 0x0701	; 0x800701 <twi_txBufferIndex>
    5aba:	81 e0       	ldi	r24, 0x01	; 1
    5abc:	8e 0f       	add	r24, r30
    5abe:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <twi_txBufferIndex>
    5ac2:	f0 e0       	ldi	r31, 0x00	; 0
    5ac4:	ee 5f       	subi	r30, 0xFE	; 254
    5ac6:	f8 4f       	sbci	r31, 0xF8	; 248
    5ac8:	80 81       	ld	r24, Z
    5aca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    5ace:	90 91 01 07 	lds	r25, 0x0701	; 0x800701 <twi_txBufferIndex>
    5ad2:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <twi_txBufferLength>
    5ad6:	98 17       	cp	r25, r24
    5ad8:	08 f4       	brcc	.+2      	; 0x5adc <__vector_24+0x21c>
    5ada:	7c cf       	rjmp	.-264    	; 0x59d4 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5adc:	85 e8       	ldi	r24, 0x85	; 133
    5ade:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5ae2:	0a c0       	rjmp	.+20     	; 0x5af8 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5ae4:	85 ec       	ldi	r24, 0xC5	; 197
    5ae6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    5aea:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <twi_state>
      break;
    5aee:	04 c0       	rjmp	.+8      	; 0x5af8 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    5af0:	10 92 de 06 	sts	0x06DE, r1	; 0x8006de <twi_error>
      twi_stop();
    5af4:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <twi_stop>
      break;
  }
}
    5af8:	ff 91       	pop	r31
    5afa:	ef 91       	pop	r30
    5afc:	bf 91       	pop	r27
    5afe:	af 91       	pop	r26
    5b00:	9f 91       	pop	r25
    5b02:	8f 91       	pop	r24
    5b04:	7f 91       	pop	r23
    5b06:	6f 91       	pop	r22
    5b08:	5f 91       	pop	r21
    5b0a:	4f 91       	pop	r20
    5b0c:	3f 91       	pop	r19
    5b0e:	2f 91       	pop	r18
    5b10:	0f 90       	pop	r0
    5b12:	0f be       	out	0x3f, r0	; 63
    5b14:	0f 90       	pop	r0
    5b16:	1f 90       	pop	r1
    5b18:	18 95       	reti

00005b1a <__fixunssfsi>:
    5b1a:	0e 94 ed 21 	call	0x43da	; 0x43da <__fp_splitA>
    5b1e:	88 f0       	brcs	.+34     	; 0x5b42 <__fixunssfsi+0x28>
    5b20:	9f 57       	subi	r25, 0x7F	; 127
    5b22:	98 f0       	brcs	.+38     	; 0x5b4a <__fixunssfsi+0x30>
    5b24:	b9 2f       	mov	r27, r25
    5b26:	99 27       	eor	r25, r25
    5b28:	b7 51       	subi	r27, 0x17	; 23
    5b2a:	b0 f0       	brcs	.+44     	; 0x5b58 <__fixunssfsi+0x3e>
    5b2c:	e1 f0       	breq	.+56     	; 0x5b66 <__fixunssfsi+0x4c>
    5b2e:	66 0f       	add	r22, r22
    5b30:	77 1f       	adc	r23, r23
    5b32:	88 1f       	adc	r24, r24
    5b34:	99 1f       	adc	r25, r25
    5b36:	1a f0       	brmi	.+6      	; 0x5b3e <__fixunssfsi+0x24>
    5b38:	ba 95       	dec	r27
    5b3a:	c9 f7       	brne	.-14     	; 0x5b2e <__fixunssfsi+0x14>
    5b3c:	14 c0       	rjmp	.+40     	; 0x5b66 <__fixunssfsi+0x4c>
    5b3e:	b1 30       	cpi	r27, 0x01	; 1
    5b40:	91 f0       	breq	.+36     	; 0x5b66 <__fixunssfsi+0x4c>
    5b42:	0e 94 07 22 	call	0x440e	; 0x440e <__fp_zero>
    5b46:	b1 e0       	ldi	r27, 0x01	; 1
    5b48:	08 95       	ret
    5b4a:	0c 94 07 22 	jmp	0x440e	; 0x440e <__fp_zero>
    5b4e:	67 2f       	mov	r22, r23
    5b50:	78 2f       	mov	r23, r24
    5b52:	88 27       	eor	r24, r24
    5b54:	b8 5f       	subi	r27, 0xF8	; 248
    5b56:	39 f0       	breq	.+14     	; 0x5b66 <__fixunssfsi+0x4c>
    5b58:	b9 3f       	cpi	r27, 0xF9	; 249
    5b5a:	cc f3       	brlt	.-14     	; 0x5b4e <__fixunssfsi+0x34>
    5b5c:	86 95       	lsr	r24
    5b5e:	77 95       	ror	r23
    5b60:	67 95       	ror	r22
    5b62:	b3 95       	inc	r27
    5b64:	d9 f7       	brne	.-10     	; 0x5b5c <__fixunssfsi+0x42>
    5b66:	3e f4       	brtc	.+14     	; 0x5b76 <__fixunssfsi+0x5c>
    5b68:	90 95       	com	r25
    5b6a:	80 95       	com	r24
    5b6c:	70 95       	com	r23
    5b6e:	61 95       	neg	r22
    5b70:	7f 4f       	sbci	r23, 0xFF	; 255
    5b72:	8f 4f       	sbci	r24, 0xFF	; 255
    5b74:	9f 4f       	sbci	r25, 0xFF	; 255
    5b76:	08 95       	ret

00005b78 <__gesf2>:
    5b78:	0e 94 5e 21 	call	0x42bc	; 0x42bc <__fp_cmp>
    5b7c:	08 f4       	brcc	.+2      	; 0x5b80 <__gesf2+0x8>
    5b7e:	8f ef       	ldi	r24, 0xFF	; 255
    5b80:	08 95       	ret

00005b82 <__unordsf2>:
    5b82:	0e 94 5e 21 	call	0x42bc	; 0x42bc <__fp_cmp>
    5b86:	88 0b       	sbc	r24, r24
    5b88:	99 0b       	sbc	r25, r25
    5b8a:	08 95       	ret

00005b8c <__udivmodsi4>:
    5b8c:	a1 e2       	ldi	r26, 0x21	; 33
    5b8e:	1a 2e       	mov	r1, r26
    5b90:	aa 1b       	sub	r26, r26
    5b92:	bb 1b       	sub	r27, r27
    5b94:	fd 01       	movw	r30, r26
    5b96:	0d c0       	rjmp	.+26     	; 0x5bb2 <__udivmodsi4_ep>

00005b98 <__udivmodsi4_loop>:
    5b98:	aa 1f       	adc	r26, r26
    5b9a:	bb 1f       	adc	r27, r27
    5b9c:	ee 1f       	adc	r30, r30
    5b9e:	ff 1f       	adc	r31, r31
    5ba0:	a2 17       	cp	r26, r18
    5ba2:	b3 07       	cpc	r27, r19
    5ba4:	e4 07       	cpc	r30, r20
    5ba6:	f5 07       	cpc	r31, r21
    5ba8:	20 f0       	brcs	.+8      	; 0x5bb2 <__udivmodsi4_ep>
    5baa:	a2 1b       	sub	r26, r18
    5bac:	b3 0b       	sbc	r27, r19
    5bae:	e4 0b       	sbc	r30, r20
    5bb0:	f5 0b       	sbc	r31, r21

00005bb2 <__udivmodsi4_ep>:
    5bb2:	66 1f       	adc	r22, r22
    5bb4:	77 1f       	adc	r23, r23
    5bb6:	88 1f       	adc	r24, r24
    5bb8:	99 1f       	adc	r25, r25
    5bba:	1a 94       	dec	r1
    5bbc:	69 f7       	brne	.-38     	; 0x5b98 <__udivmodsi4_loop>
    5bbe:	60 95       	com	r22
    5bc0:	70 95       	com	r23
    5bc2:	80 95       	com	r24
    5bc4:	90 95       	com	r25
    5bc6:	9b 01       	movw	r18, r22
    5bc8:	ac 01       	movw	r20, r24
    5bca:	bd 01       	movw	r22, r26
    5bcc:	cf 01       	movw	r24, r30
    5bce:	08 95       	ret

00005bd0 <__divmodsi4>:
    5bd0:	05 2e       	mov	r0, r21
    5bd2:	97 fb       	bst	r25, 7
    5bd4:	1e f4       	brtc	.+6      	; 0x5bdc <__divmodsi4+0xc>
    5bd6:	00 94       	com	r0
    5bd8:	0e 94 ff 2d 	call	0x5bfe	; 0x5bfe <__negsi2>
    5bdc:	57 fd       	sbrc	r21, 7
    5bde:	07 d0       	rcall	.+14     	; 0x5bee <__divmodsi4_neg2>
    5be0:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <__udivmodsi4>
    5be4:	07 fc       	sbrc	r0, 7
    5be6:	03 d0       	rcall	.+6      	; 0x5bee <__divmodsi4_neg2>
    5be8:	4e f4       	brtc	.+18     	; 0x5bfc <__divmodsi4_exit>
    5bea:	0c 94 ff 2d 	jmp	0x5bfe	; 0x5bfe <__negsi2>

00005bee <__divmodsi4_neg2>:
    5bee:	50 95       	com	r21
    5bf0:	40 95       	com	r20
    5bf2:	30 95       	com	r19
    5bf4:	21 95       	neg	r18
    5bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    5bf8:	4f 4f       	sbci	r20, 0xFF	; 255
    5bfa:	5f 4f       	sbci	r21, 0xFF	; 255

00005bfc <__divmodsi4_exit>:
    5bfc:	08 95       	ret

00005bfe <__negsi2>:
    5bfe:	90 95       	com	r25
    5c00:	80 95       	com	r24
    5c02:	70 95       	com	r23
    5c04:	61 95       	neg	r22
    5c06:	7f 4f       	sbci	r23, 0xFF	; 255
    5c08:	8f 4f       	sbci	r24, 0xFF	; 255
    5c0a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c0c:	08 95       	ret

00005c0e <__umulhisi3>:
    5c0e:	a2 9f       	mul	r26, r18
    5c10:	b0 01       	movw	r22, r0
    5c12:	b3 9f       	mul	r27, r19
    5c14:	c0 01       	movw	r24, r0
    5c16:	a3 9f       	mul	r26, r19
    5c18:	70 0d       	add	r23, r0
    5c1a:	81 1d       	adc	r24, r1
    5c1c:	11 24       	eor	r1, r1
    5c1e:	91 1d       	adc	r25, r1
    5c20:	b2 9f       	mul	r27, r18
    5c22:	70 0d       	add	r23, r0
    5c24:	81 1d       	adc	r24, r1
    5c26:	11 24       	eor	r1, r1
    5c28:	91 1d       	adc	r25, r1
    5c2a:	08 95       	ret

00005c2c <__tablejump2__>:
    5c2c:	ee 0f       	add	r30, r30
    5c2e:	ff 1f       	adc	r31, r31
    5c30:	05 90       	lpm	r0, Z+
    5c32:	f4 91       	lpm	r31, Z
    5c34:	e0 2d       	mov	r30, r0
    5c36:	09 94       	ijmp

00005c38 <_exit>:
    5c38:	f8 94       	cli

00005c3a <__stop_program>:
    5c3a:	ff cf       	rjmp	.-2      	; 0x5c3a <__stop_program>
