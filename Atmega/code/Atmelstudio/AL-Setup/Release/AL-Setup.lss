
AL-Setup.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  000050ca  0000515e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000050ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001cd  00800132  00800132  00005190  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005190  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000051c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a8  00000000  00000000  00005200  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dae8  00000000  00000000  000056a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022b2  00000000  00000000  00013190  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000038be  00000000  00000000  00015442  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d00  00000000  00000000  00018d00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002a28  00000000  00000000  00019a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000044f0  00000000  00000000  0001c428  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004a0  00000000  00000000  00020918  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 05 09 	jmp	0x120a	; 0x120a <__ctors_end>
       4:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__bad_interrupt>
       8:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__bad_interrupt>
       c:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__vector_3>
      10:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__bad_interrupt>
      14:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__bad_interrupt>
      18:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__bad_interrupt>
      1c:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__bad_interrupt>
      20:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__bad_interrupt>
      24:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__bad_interrupt>
      28:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__bad_interrupt>
      2c:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__bad_interrupt>
      30:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__bad_interrupt>
      34:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__bad_interrupt>
      38:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__bad_interrupt>
      3c:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__bad_interrupt>
      40:	0c 94 15 24 	jmp	0x482a	; 0x482a <__vector_16>
      44:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__bad_interrupt>
      48:	0c 94 db 1f 	jmp	0x3fb6	; 0x3fb6 <__vector_18>
      4c:	0c 94 0d 20 	jmp	0x401a	; 0x401a <__vector_19>
      50:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__bad_interrupt>
      54:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__bad_interrupt>
      58:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__bad_interrupt>
      5c:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__bad_interrupt>
      60:	0c 94 9c 26 	jmp	0x4d38	; 0x4d38 <__vector_24>
      64:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	48 61       	ori	r20, 0x18	; 24
      6a:	76 65       	ori	r23, 0x56	; 86
      6c:	20 66       	ori	r18, 0x60	; 96
      6e:	75 6e       	ori	r23, 0xE5	; 229
      70:	21 00       	.word	0x0021	; ????

00000072 <_ZZ5introvE3__c_10>:
	...

00000073 <_ZZ5introvE3__c_9>:
      73:	46 6f 72 20 73 75 70 70 6f 72 74 20 61 6e 64 20     For support and 
      83:	71 75 65 73 74 69 6f 6e 73 3a 20 77 77 77 2e 62     questions: www.b
      93:	72 6f 6b 6b 69 6e 67 2e 6e 65 74 00                 rokking.net.

0000009f <_ZZ5introvE3__c_8>:
      9f:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
      af:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
      bf:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
      cf:	3d 3d 3d 00                                         ===.

000000d3 <_ZZ5introvE3__c_7>:
	...

000000d4 <_ZZ5introvE3__c_6>:
      d4:	59 4d 46 43 2d 41 4c 20 53 65 74 75 70 20 50 72     YMFC-AL Setup Pr
      e4:	6f 67 72 61 6d 00                                   ogram.

000000ea <_ZZ5introvE3__c_5>:
	...

000000eb <_ZZ5introvE3__c_4>:
      eb:	20 20 20 20 20 20 43 6f 6e 74 72 6f 6c 6c 65 72           Controller
	...

000000fc <_ZZ5introvE3__c_3>:
      fc:	20 20 20 20 46 6c 69 67 68 74 00                        Flight.

00000107 <_ZZ5introvE3__c_2>:
     107:	20 20 4d 75 6c 74 69 63 6f 70 74 65 72 00             Multicopter.

00000115 <_ZZ5introvE3__c_1>:
     115:	59 6f 75 72 00                                      Your.

0000011a <_ZZ5introvE3__c_0>:
	...

0000011b <_ZZ5introvE3__c>:
     11b:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     12b:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     13b:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     14b:	3d 3d 3d 00                                         ===.

0000014f <_ZZ15check_gyro_axeshE3__c>:
     14f:	4e 6f 20 61 6e 67 75 6c 61 72 20 6d 6f 74 69 6f     No angular motio
     15f:	6e 20 69 73 20 64 65 74 65 63 74 65 64 20 69 6e     n is detected in
     16f:	20 74 68 65 20 6c 61 73 74 20 31 30 20 73 65 63      the last 10 sec
     17f:	6f 6e 64 73 21 21 21 20 28 45 52 52 4f 52 20 34     onds!!! (ERROR 4
     18f:	29 00                                               ).

00000191 <_ZZ16register_min_maxvE3__c>:
     191:	4d 65 61 73 75 72 69 6e 67 20 65 6e 64 70 6f 69     Measuring endpoi
     1a1:	6e 74 73 2e 2e 2e 2e 00                             nts.....

000001a9 <_ZZ17wait_for_receivervE3__c_2>:
     1a9:	20 4f 4b 00                                          OK.

000001ad <_ZZ17wait_for_receivervE3__c_1>:
     1ad:	4e 6f 20 76 61 6c 69 64 20 72 65 63 65 69 76 65     No valid receive
     1bd:	72 20 73 69 67 6e 61 6c 73 20 66 6f 75 6e 64 21     r signals found!
     1cd:	21 21 20 28 45 52 52 4f 52 20 31 29 00              !! (ERROR 1).

000001da <_ZZ17wait_for_receivervE3__c_0>:
     1da:	2e 00                                               ..

000001dc <_ZZ17wait_for_receivervE3__c>:
     1dc:	2e 00                                               ..

000001de <_ZZ21check_receiver_inputshE3__c>:
     1de:	4e 6f 20 73 74 69 63 6b 20 6d 6f 76 65 6d 65 6e     No stick movemen
     1ee:	74 20 64 65 74 65 63 74 65 64 20 69 6e 20 74 68     t detected in th
     1fe:	65 20 6c 61 73 74 20 33 30 20 73 65 63 6f 6e 64     e last 30 second
     20e:	73 21 21 21 20 28 45 52 52 4f 52 20 32 29 00        s!!! (ERROR 2).

0000021d <_ZZ10start_gyrovE3__c_2>:
     21d:	52 65 67 69 73 74 65 72 20 30 78 31 42 20 69 73     Register 0x1B is
     22d:	20 73 65 74 20 74 6f 3a 00                           set to:.

00000236 <_ZZ10start_gyrovE3__c_1>:
     236:	52 65 67 69 73 74 65 72 20 30 78 36 42 20 69 73     Register 0x6B is
     246:	20 73 65 74 20 74 6f 3a 00                           set to:.

0000024f <_ZZ10start_gyrovE3__c_0>:
     24f:	52 65 67 69 73 74 65 72 20 30 78 32 33 20 69 73     Register 0x23 is
     25f:	20 73 65 74 20 74 6f 3a 00                           set to:.

00000268 <_ZZ10start_gyrovE3__c>:
     268:	52 65 67 69 73 74 65 72 20 30 78 32 30 20 69 73     Register 0x20 is
     278:	20 73 65 74 20 74 6f 3a 00                           set to:.

00000281 <_ZZ4loopE3__c_154>:
     281:	77 77 77 2e 62 72 6f 6b 6b 69 6e 67 2e 6e 65 74     www.brokking.net
     291:	20 66 6f 72 20 6d 6f 72 65 20 69 6e 66 6f 72 6d      for more inform
     2a1:	61 74 69 6f 6e 20 61 62 6f 75 74 20 74 68 69 73     ation about this
     2b1:	20 65 72 72 6f 72 2e 00                              error..

000002b9 <_ZZ4loopE3__c_153>:
     2b9:	43 68 65 63 6b 20 74 68 65 20 51 20 61 6e 64 20     Check the Q and 
     2c9:	41 20 70 61 67 65 20 6f 66 20 74 68 65 20 59 4d     A page of the YM
     2d9:	46 43 2d 41 4c 20 70 72 6f 6a 65 63 74 20 6f 6e     FC-AL project on
     2e9:	3a 00                                               :.

000002eb <_ZZ4loopE3__c_152>:
     2eb:	54 68 65 20 73 65 74 75 70 20 69 73 20 61 62 6f     The setup is abo
     2fb:	72 74 65 64 20 64 75 65 20 74 6f 20 61 6e 20 65     rted due to an e
     30b:	72 72 6f 72 2e 00                                   rror..

00000311 <_ZZ4loopE3__c_151>:
     311:	59 6f 75 20 63 61 6e 20 6e 6f 77 20 63 61 6c 69     You can now cali
     321:	62 72 61 74 65 20 74 68 65 20 65 73 63 27 73 20     brate the esc's 
     331:	61 6e 64 20 75 70 6c 6f 61 64 20 74 68 65 20 59     and upload the Y
     341:	4d 46 43 2d 41 4c 20 63 6f 64 65 2e 00              MFC-AL code..

0000034e <_ZZ4loopE3__c_150>:
     34e:	53 65 74 75 70 20 69 73 20 66 69 6e 69 73 68 65     Setup is finishe
     35e:	64 2e 00                                            d..

00000361 <_ZZ4loopE3__c_149>:
     361:	56 65 72 69 66 69 63 61 74 69 6f 6e 20 64 6f 6e     Verification don
     371:	65 00                                               e.

00000373 <_ZZ4loopE3__c_148>:
     373:	45 45 50 52 4f 4d 20 76 65 72 69 66 69 63 61 74     EEPROM verificat
     383:	69 6f 6e 20 66 61 69 6c 65 64 21 21 21 20 28 45     ion failed!!! (E
     393:	52 52 4f 52 20 35 29 00                             RROR 5).

0000039b <_ZZ4loopE3__c_147>:
     39b:	56 65 72 69 66 79 20 45 45 50 52 4f 4d 20 64 61     Verify EEPROM da
     3ab:	74 61 00                                            ta.

000003ae <_ZZ4loopE3__c_146>:
     3ae:	44 6f 6e 65 21 00                                   Done!.

000003b4 <_ZZ4loopE3__c_145>:
     3b4:	57 72 69 74 69 6e 67 20 45 45 50 52 4f 4d 00        Writing EEPROM.

000003c3 <_ZZ4loopE3__c_144>:
     3c3:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     3d3:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     3e3:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     3f3:	3d 3d 3d 00                                         ===.

000003f7 <_ZZ4loopE3__c_143>:
     3f7:	53 74 6f 72 69 6e 67 20 45 45 50 52 4f 4d 20 69     Storing EEPROM i
     407:	6e 66 6f 72 6d 61 74 69 6f 6e 00                    nformation.

00000412 <_ZZ4loopE3__c_142>:
     412:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     422:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     432:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     442:	3d 3d 3d 00                                         ===.

00000446 <_ZZ4loopE3__c_141>:
	...

00000447 <_ZZ4loopE3__c_140>:
     447:	47 79 72 6f 20 65 78 65 73 20 76 65 72 69 66 69     Gyro exes verifi
     457:	63 61 74 69 6f 6e 20 66 61 69 6c 65 64 21 21 21     cation failed!!!
     467:	20 28 45 52 52 4f 52 20 37 29 00                     (ERROR 7).

00000472 <_ZZ4loopE3__c_139>:
     472:	47 79 72 6f 20 61 78 65 73 20 6f 6b 00              Gyro axes ok.

0000047f <_ZZ4loopE3__c_138>:
     47f:	52 65 63 65 69 76 65 72 20 63 68 61 6e 6e 65 6c     Receiver channel
     48f:	20 76 65 72 69 66 69 63 61 74 69 6f 6e 20 66 61      verification fa
     49f:	69 6c 65 64 21 21 21 20 28 45 52 52 4f 52 20 36     iled!!! (ERROR 6
     4af:	29 00                                               ).

000004b1 <_ZZ4loopE3__c_137>:
     4b1:	52 65 63 65 69 76 65 72 20 63 68 61 6e 6e 65 6c     Receiver channel
     4c1:	73 20 6f 6b 00                                      s ok.

000004c6 <_ZZ4loopE3__c_136>:
     4c6:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     4d6:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     4e6:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     4f6:	3d 3d 3d 00                                         ===.

000004fa <_ZZ4loopE3__c_135>:
     4fa:	46 69 6e 61 6c 20 73 65 74 75 70 20 63 68 65 63     Final setup chec
     50a:	6b 00                                               k.

0000050c <_ZZ4loopE3__c_134>:
     50c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     51c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     52c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     53c:	3d 3d 3d 00                                         ===.

00000540 <_ZZ4loopE3__c_133>:
	...

00000541 <_ZZ4loopE3__c_132>:
     541:	4d 6f 76 65 20 73 74 69 63 6b 20 27 6e 6f 73 65     Move stick 'nose
     551:	20 75 70 27 20 61 6e 64 20 62 61 63 6b 20 74 6f      up' and back to
     561:	20 63 65 6e 74 65 72 20 74 6f 20 63 6f 6e 74 69      center to conti
     571:	6e 75 65 00                                         nue.

00000575 <_ZZ4loopE3__c_131>:
     575:	54 68 65 20 4c 45 44 20 73 68 6f 75 6c 64 20 6e     The LED should n
     585:	6f 77 20 62 65 20 6c 69 74 00                       ow be lit.

0000058f <_ZZ4loopE3__c_130>:
     58f:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     59f:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     5af:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     5bf:	3d 3d 3d 00                                         ===.

000005c3 <_ZZ4loopE3__c_129>:
     5c3:	4c 45 44 20 74 65 73 74 00                          LED test.

000005cc <_ZZ4loopE3__c_128>:
     5cc:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     5dc:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     5ec:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     5fc:	3d 3d 3d 00                                         ===.

00000600 <_ZZ4loopE3__c_127>:
	...

00000601 <_ZZ4loopE3__c_126>:
     601:	4d 6f 76 65 20 73 74 69 63 6b 20 27 6e 6f 73 65     Move stick 'nose
     611:	20 75 70 27 20 61 6e 64 20 62 61 63 6b 20 74 6f      up' and back to
     621:	20 63 65 6e 74 65 72 20 74 6f 20 63 6f 6e 74 69      center to conti
     631:	6e 75 65 00                                         nue.

00000635 <_ZZ4loopE3__c_125>:
     635:	50 75 74 20 74 68 65 20 71 75 61 64 63 6f 70 74     Put the quadcopt
     645:	65 72 20 62 61 63 6b 20 69 6e 20 69 74 73 20 6f     er back in its o
     655:	72 69 67 69 6e 61 6c 20 70 6f 73 69 74 69 6f 6e     riginal position
	...

00000666 <_ZZ4loopE3__c_124>:
     666:	41 78 69 73 20 69 6e 76 65 72 74 65 64 20 3d 20     Axis inverted = 
     676:	6e 6f 00                                            no.

00000679 <_ZZ4loopE3__c_123>:
     679:	41 78 69 73 20 69 6e 76 65 72 74 65 64 20 3d 20     Axis inverted = 
     689:	79 65 73 00                                         yes.

0000068d <_ZZ4loopE3__c_122>:
     68d:	41 6e 67 6c 65 20 64 65 74 65 63 74 69 6f 6e 20     Angle detection 
     69d:	3d 20 00                                            = .

000006a0 <_ZZ4loopE3__c_121>:
     6a0:	4f 4b 21 00                                         OK!.

000006a4 <_ZZ4loopE3__c_120>:
     6a4:	52 6f 74 61 74 65 20 74 68 65 20 6e 6f 73 65 20     Rotate the nose 
     6b4:	6f 66 20 74 68 65 20 71 75 61 64 63 6f 70 74 65     of the quadcopte
     6c4:	72 20 34 35 20 64 65 67 72 65 65 20 74 6f 20 74     r 45 degree to t
     6d4:	68 65 20 72 69 67 68 74 20 77 69 74 68 69 6e 20     he right within 
     6e4:	31 30 20 73 65 63 6f 6e 64 73 00                    10 seconds.

000006ef <_ZZ4loopE3__c_119>:
	...

000006f0 <_ZZ4loopE3__c_118>:
	...

000006f1 <_ZZ4loopE3__c_117>:
     6f1:	4d 6f 76 65 20 73 74 69 63 6b 20 27 6e 6f 73 65     Move stick 'nose
     701:	20 75 70 27 20 61 6e 64 20 62 61 63 6b 20 74 6f      up' and back to
     711:	20 63 65 6e 74 65 72 20 74 6f 20 63 6f 6e 74 69      center to conti
     721:	6e 75 65 00                                         nue.

00000725 <_ZZ4loopE3__c_116>:
     725:	50 75 74 20 74 68 65 20 71 75 61 64 63 6f 70 74     Put the quadcopt
     735:	65 72 20 62 61 63 6b 20 69 6e 20 69 74 73 20 6f     er back in its o
     745:	72 69 67 69 6e 61 6c 20 70 6f 73 69 74 69 6f 6e     riginal position
	...

00000756 <_ZZ4loopE3__c_115>:
     756:	41 78 69 73 20 69 6e 76 65 72 74 65 64 20 3d 20     Axis inverted = 
     766:	6e 6f 00                                            no.

00000769 <_ZZ4loopE3__c_114>:
     769:	41 78 69 73 20 69 6e 76 65 72 74 65 64 20 3d 20     Axis inverted = 
     779:	79 65 73 00                                         yes.

0000077d <_ZZ4loopE3__c_113>:
     77d:	41 6e 67 6c 65 20 64 65 74 65 63 74 69 6f 6e 20     Angle detection 
     78d:	3d 20 00                                            = .

00000790 <_ZZ4loopE3__c_112>:
     790:	4f 4b 21 00                                         OK!.

00000794 <_ZZ4loopE3__c_111>:
     794:	4c 69 66 74 20 74 68 65 20 6e 6f 73 65 20 6f 66     Lift the nose of
     7a4:	20 74 68 65 20 71 75 61 64 63 6f 70 74 65 72 20      the quadcopter 
     7b4:	74 6f 20 61 20 34 35 20 64 65 67 72 65 65 20 61     to a 45 degree a
     7c4:	6e 67 6c 65 20 77 69 74 68 69 6e 20 31 30 20 73     ngle within 10 s
     7d4:	65 63 6f 6e 64 73 00                                econds.

000007db <_ZZ4loopE3__c_110>:
	...

000007dc <_ZZ4loopE3__c_109>:
	...

000007dd <_ZZ4loopE3__c_108>:
     7dd:	4d 6f 76 65 20 73 74 69 63 6b 20 27 6e 6f 73 65     Move stick 'nose
     7ed:	20 75 70 27 20 61 6e 64 20 62 61 63 6b 20 74 6f      up' and back to
     7fd:	20 63 65 6e 74 65 72 20 74 6f 20 63 6f 6e 74 69      center to conti
     80d:	6e 75 65 00                                         nue.

00000811 <_ZZ4loopE3__c_107>:
     811:	50 75 74 20 74 68 65 20 71 75 61 64 63 6f 70 74     Put the quadcopt
     821:	65 72 20 62 61 63 6b 20 69 6e 20 69 74 73 20 6f     er back in its o
     831:	72 69 67 69 6e 61 6c 20 70 6f 73 69 74 69 6f 6e     riginal position
	...

00000842 <_ZZ4loopE3__c_106>:
     842:	41 78 69 73 20 69 6e 76 65 72 74 65 64 20 3d 20     Axis inverted = 
     852:	6e 6f 00                                            no.

00000855 <_ZZ4loopE3__c_105>:
     855:	41 78 69 73 20 69 6e 76 65 72 74 65 64 20 3d 20     Axis inverted = 
     865:	79 65 73 00                                         yes.

00000869 <_ZZ4loopE3__c_104>:
     869:	41 6e 67 6c 65 20 64 65 74 65 63 74 69 6f 6e 20     Angle detection 
     879:	3d 20 00                                            = .

0000087c <_ZZ4loopE3__c_103>:
     87c:	4f 4b 21 00                                         OK!.

00000880 <_ZZ4loopE3__c_102>:
     880:	4c 69 66 74 20 74 68 65 20 6c 65 66 74 20 73 69     Lift the left si
     890:	64 65 20 6f 66 20 74 68 65 20 71 75 61 64 63 6f     de of the quadco
     8a0:	70 74 65 72 20 74 6f 20 61 20 34 35 20 64 65 67     pter to a 45 deg
     8b0:	72 65 65 20 61 6e 67 6c 65 20 77 69 74 68 69 6e     ree angle within
     8c0:	20 31 30 20 73 65 63 6f 6e 64 73 00                  10 seconds.

000008cc <_ZZ4loopE3__c_101>:
     8cc:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     8dc:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     8ec:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     8fc:	3d 3d 3d 00                                         ===.

00000900 <_ZZ4loopE3__c_100>:
     900:	47 79 72 6f 20 61 78 65 73 20 63 6f 6e 66 69 67     Gyro axes config
     910:	75 72 61 74 69 6f 6e 00                             uration.

00000918 <_ZZ4loopE3__c_99>:
     918:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     928:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     938:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     948:	3d 3d 3d 00                                         ===.

0000094c <_ZZ4loopE3__c_98>:
	...

0000094d <_ZZ4loopE3__c_97>:
     94d:	41 78 69 73 20 33 20 6f 66 66 73 65 74 3d 00        Axis 3 offset=.

0000095c <_ZZ4loopE3__c_96>:
     95c:	41 78 69 73 20 32 20 6f 66 66 73 65 74 3d 00        Axis 2 offset=.

0000096b <_ZZ4loopE3__c_95>:
     96b:	41 78 69 73 20 31 20 6f 66 66 73 65 74 3d 00        Axis 1 offset=.

0000097a <_ZZ4loopE3__c_94>:
	...

0000097b <_ZZ4loopE3__c_93>:
     97b:	2e 00                                               ..

0000097d <_ZZ4loopE3__c_92>:
     97d:	50 6c 65 61 73 65 20 77 61 69 74 00                 Please wait.

00000989 <_ZZ4loopE3__c_91>:
     989:	43 61 6c 69 62 72 61 74 69 6e 67 20 74 68 65 20     Calibrating the 
     999:	67 79 72 6f 2c 20 74 68 69 73 20 77 69 6c 6c 20     gyro, this will 
     9a9:	74 61 6b 65 20 2b 2f 2d 20 38 20 73 65 63 6f 6e     take +/- 8 secon
     9b9:	64 73 00                                            ds.

000009bc <_ZZ4loopE3__c_90>:
     9bc:	44 6f 6e 27 74 20 6d 6f 76 65 20 74 68 65 20 71     Don't move the q
     9cc:	75 61 64 63 6f 70 74 65 72 21 21 20 43 61 6c 69     uadcopter!! Cali
     9dc:	62 72 61 74 69 6f 6e 20 73 74 61 72 74 73 20 69     bration starts i
     9ec:	6e 20 33 20 73 65 63 6f 6e 64 73 00                 n 3 seconds.

000009f8 <_ZZ4loopE3__c_89>:
     9f8:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a08:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a18:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a28:	3d 3d 3d 00                                         ===.

00000a2c <_ZZ4loopE3__c_88>:
     a2c:	47 79 72 6f 20 63 61 6c 69 62 72 61 74 69 6f 6e     Gyro calibration
	...

00000a3d <_ZZ4loopE3__c_87>:
     a3d:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a4d:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a5d:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a6d:	3d 3d 3d 00                                         ===.

00000a71 <_ZZ4loopE3__c_86>:
	...

00000a72 <_ZZ4loopE3__c_85>:
     a72:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a82:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a92:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     aa2:	3d 3d 3d 00                                         ===.

00000aa6 <_ZZ4loopE3__c_84>:
     aa6:	47 79 72 6f 20 72 65 67 69 73 74 65 72 20 73 65     Gyro register se
     ab6:	74 74 69 6e 67 73 00                                ttings.

00000abd <_ZZ4loopE3__c_83>:
     abd:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     acd:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     add:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     aed:	3d 3d 3d 00                                         ===.

00000af1 <_ZZ4loopE3__c_82>:
	...

00000af2 <_ZZ4loopE3__c_81>:
     af2:	4e 6f 20 67 79 72 6f 20 64 65 76 69 63 65 20 66     No gyro device f
     b02:	6f 75 6e 64 21 21 21 20 28 45 52 52 4f 52 20 33     ound!!! (ERROR 3
     b12:	29 00                                               ).

00000b14 <_ZZ4loopE3__c_68>:
     b14:	4d 50 55 2d 39 32 35 35 20 66 6f 75 6e 64 20 6f     MPU-9255 found o
     b24:	6e 20 61 64 64 72 65 73 73 20 30 78 36 38 00        n address 0x68.

00000b33 <_ZZ4loopE3__c_67>:
     b33:	53 65 61 72 63 68 69 6e 67 20 66 6f 72 20 4d 50     Searching for MP
     b43:	55 2d 39 32 35 35 20 6f 6e 20 61 64 64 72 65 73     U-9255 on addres
     b53:	73 20 30 78 36 38 2f 31 30 34 00                    s 0x68/104.

00000b5e <_ZZ4loopE3__c_66>:
     b5e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     b6e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     b7e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     b8e:	3d 3d 3d 00                                         ===.

00000b92 <_ZZ4loopE3__c_65>:
     b92:	47 79 72 6f 20 73 65 61 72 63 68 00                 Gyro search.

00000b9e <_ZZ4loopE3__c_64>:
     b9e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     bae:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     bbe:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     bce:	3d 3d 3d 00                                         ===.

00000bd2 <_ZZ4loopE3__c_63>:
	...

00000bd3 <_ZZ4loopE3__c_62>:
     bd3:	4d 6f 76 65 20 73 74 69 63 6b 20 27 6e 6f 73 65     Move stick 'nose
     be3:	20 75 70 27 20 61 6e 64 20 62 61 63 6b 20 74 6f      up' and back to
     bf3:	20 63 65 6e 74 65 72 20 74 6f 20 63 6f 6e 74 69      center to conti
     c03:	6e 75 65 00                                         nue.

00000c07 <_ZZ4loopE3__c_61>:
     c07:	20 2d 20 00                                          - .

00000c0b <_ZZ4loopE3__c_60>:
     c0b:	20 2d 20 00                                          - .

00000c0f <_ZZ4loopE3__c_59>:
     c0f:	44 69 67 69 74 61 6c 20 69 6e 70 75 74 20 31 31     Digital input 11
     c1f:	20 76 61 6c 75 65 73 3a 00                           values:.

00000c28 <_ZZ4loopE3__c_58>:
     c28:	20 2d 20 00                                          - .

00000c2c <_ZZ4loopE3__c_57>:
     c2c:	20 2d 20 00                                          - .

00000c30 <_ZZ4loopE3__c_56>:
     c30:	44 69 67 69 74 61 6c 20 69 6e 70 75 74 20 31 30     Digital input 10
     c40:	20 76 61 6c 75 65 73 3a 00                           values:.

00000c49 <_ZZ4loopE3__c_55>:
     c49:	20 2d 20 00                                          - .

00000c4d <_ZZ4loopE3__c_54>:
     c4d:	20 2d 20 00                                          - .

00000c51 <_ZZ4loopE3__c_53>:
     c51:	44 69 67 69 74 61 6c 20 69 6e 70 75 74 20 30 39     Digital input 09
     c61:	20 76 61 6c 75 65 73 3a 00                           values:.

00000c6a <_ZZ4loopE3__c_52>:
     c6a:	20 2d 20 00                                          - .

00000c6e <_ZZ4loopE3__c_51>:
     c6e:	20 2d 20 00                                          - .

00000c72 <_ZZ4loopE3__c_50>:
     c72:	44 69 67 69 74 61 6c 20 69 6e 70 75 74 20 30 38     Digital input 08
     c82:	20 76 61 6c 75 65 73 3a 00                           values:.

00000c8b <_ZZ4loopE3__c_49>:
     c8b:	48 69 67 68 2c 20 6c 6f 77 20 61 6e 64 20 63 65     High, low and ce
     c9b:	6e 74 65 72 20 76 61 6c 75 65 73 20 66 6f 75 6e     nter values foun
     cab:	64 20 64 75 72 69 6e 67 20 73 65 74 75 70 00        d during setup.

00000cba <_ZZ4loopE3__c_48>:
	...

00000cbb <_ZZ4loopE3__c_47>:
	...

00000cbc <_ZZ4loopE3__c_46>:
     cbc:	57 68 65 6e 20 72 65 61 64 79 20 70 75 74 20 74     When ready put t
     ccc:	68 65 20 73 74 69 63 6b 73 20 62 61 63 6b 20 69     he sticks back i
     cdc:	6e 20 74 68 65 69 72 20 63 65 6e 74 65 72 20 70     n their center p
     cec:	6f 73 69 74 69 6f 6e 73 00                          ositions.

00000cf5 <_ZZ4loopE3__c_45>:
     cf5:	47 65 6e 74 6c 79 20 6d 6f 76 65 20 61 6c 6c 20     Gently move all 
     d05:	74 68 65 20 73 74 69 63 6b 73 20 73 69 6d 75 6c     the sticks simul
     d15:	74 61 6e 65 6f 75 73 6c 79 20 74 6f 20 74 68 65     taneously to the
     d25:	69 72 20 65 78 74 65 6e 64 73 00                    ir extends.

00000d30 <_ZZ4loopE3__c_44>:
	...

00000d31 <_ZZ4loopE3__c_43>:
	...

00000d32 <_ZZ4loopE3__c_42>:
     d32:	43 68 61 6e 6e 65 6c 20 69 6e 76 65 72 74 65 64     Channel inverted
     d42:	20 3d 20 6e 6f 00                                    = no.

00000d48 <_ZZ4loopE3__c_41>:
     d48:	43 68 61 6e 6e 65 6c 20 69 6e 76 65 72 74 65 64     Channel inverted
     d58:	20 3d 20 79 65 73 00                                 = yes.

00000d5f <_ZZ4loopE3__c_40>:
     d5f:	59 61 77 20 69 73 20 63 6f 6e 6e 65 63 74 65 64     Yaw is connected
     d6f:	20 74 6f 20 64 69 67 69 74 61 6c 20 69 6e 70 75      to digital inpu
     d7f:	74 20 00                                            t .

00000d82 <_ZZ4loopE3__c_39>:
     d82:	4d 6f 76 65 20 74 68 65 20 79 61 77 20 73 74 69     Move the yaw sti
     d92:	63 6b 20 74 6f 20 73 69 6d 75 6c 61 74 65 20 6e     ck to simulate n
     da2:	6f 73 65 20 72 69 67 68 74 20 61 6e 64 20 62 61     ose right and ba
     db2:	63 6b 20 74 6f 20 63 65 6e 74 65 72 00              ck to center.

00000dbf <_ZZ4loopE3__c_38>:
	...

00000dc0 <_ZZ4loopE3__c_37>:
	...

00000dc1 <_ZZ4loopE3__c_36>:
     dc1:	43 68 61 6e 6e 65 6c 20 69 6e 76 65 72 74 65 64     Channel inverted
     dd1:	20 3d 20 6e 6f 00                                    = no.

00000dd7 <_ZZ4loopE3__c_35>:
     dd7:	43 68 61 6e 6e 65 6c 20 69 6e 76 65 72 74 65 64     Channel inverted
     de7:	20 3d 20 79 65 73 00                                 = yes.

00000dee <_ZZ4loopE3__c_34>:
     dee:	50 69 74 63 68 20 69 73 20 63 6f 6e 6e 65 63 74     Pitch is connect
     dfe:	65 64 20 74 6f 20 64 69 67 69 74 61 6c 20 69 6e     ed to digital in
     e0e:	70 75 74 20 00                                      put .

00000e13 <_ZZ4loopE3__c_33>:
     e13:	4d 6f 76 65 20 74 68 65 20 70 69 74 63 68 20 73     Move the pitch s
     e23:	74 69 63 6b 20 74 6f 20 73 69 6d 75 6c 61 74 65     tick to simulate
     e33:	20 6e 6f 73 65 20 75 70 20 61 6e 64 20 62 61 63      nose up and bac
     e43:	6b 20 74 6f 20 63 65 6e 74 65 72 00                 k to center.

00000e4f <_ZZ4loopE3__c_32>:
	...

00000e50 <_ZZ4loopE3__c_31>:
	...

00000e51 <_ZZ4loopE3__c_30>:
     e51:	43 68 61 6e 6e 65 6c 20 69 6e 76 65 72 74 65 64     Channel inverted
     e61:	20 3d 20 6e 6f 00                                    = no.

00000e67 <_ZZ4loopE3__c_29>:
     e67:	43 68 61 6e 6e 65 6c 20 69 6e 76 65 72 74 65 64     Channel inverted
     e77:	20 3d 20 79 65 73 00                                 = yes.

00000e7e <_ZZ4loopE3__c_28>:
     e7e:	52 6f 6c 6c 20 69 73 20 63 6f 6e 6e 65 63 74 65     Roll is connecte
     e8e:	64 20 74 6f 20 64 69 67 69 74 61 6c 20 69 6e 70     d to digital inp
     e9e:	75 74 20 00                                         ut .

00000ea2 <_ZZ4loopE3__c_27>:
     ea2:	4d 6f 76 65 20 74 68 65 20 72 6f 6c 6c 20 73 74     Move the roll st
     eb2:	69 63 6b 20 74 6f 20 73 69 6d 75 6c 61 74 65 20     ick to simulate 
     ec2:	6c 65 66 74 20 77 69 6e 67 20 75 70 20 61 6e 64     left wing up and
     ed2:	20 62 61 63 6b 20 74 6f 20 63 65 6e 74 65 72 00      back to center.

00000ee2 <_ZZ4loopE3__c_26>:
	...

00000ee3 <_ZZ4loopE3__c_25>:
	...

00000ee4 <_ZZ4loopE3__c_24>:
     ee4:	43 68 61 6e 6e 65 6c 20 69 6e 76 65 72 74 65 64     Channel inverted
     ef4:	20 3d 20 6e 6f 00                                    = no.

00000efa <_ZZ4loopE3__c_23>:
     efa:	43 68 61 6e 6e 65 6c 20 69 6e 76 65 72 74 65 64     Channel inverted
     f0a:	20 3d 20 79 65 73 00                                 = yes.

00000f11 <_ZZ4loopE3__c_22>:
     f11:	54 68 72 6f 74 74 6c 65 20 69 73 20 63 6f 6e 6e     Throttle is conn
     f21:	65 63 74 65 64 20 74 6f 20 64 69 67 69 74 61 6c     ected to digital
     f31:	20 69 6e 70 75 74 20 00                              input .

00000f39 <_ZZ4loopE3__c_21>:
     f39:	4d 6f 76 65 20 74 68 65 20 74 68 72 6f 74 74 6c     Move the throttl
     f49:	65 20 73 74 69 63 6b 20 74 6f 20 66 75 6c 6c 20     e stick to full 
     f59:	74 68 72 6f 74 74 6c 65 20 61 6e 64 20 62 61 63     throttle and bac
     f69:	6b 20 74 6f 20 63 65 6e 74 65 72 00                 k to center.

00000f75 <_ZZ4loopE3__c_20>:
	...

00000f76 <_ZZ4loopE3__c_19>:
	...

00000f77 <_ZZ4loopE3__c_18>:
     f77:	44 69 67 69 74 61 6c 20 69 6e 70 75 74 20 31 31     Digital input 11
     f87:	20 3d 20 00                                          = .

00000f8b <_ZZ4loopE3__c_17>:
     f8b:	44 69 67 69 74 61 6c 20 69 6e 70 75 74 20 31 30     Digital input 10
     f9b:	20 3d 20 00                                          = .

00000f9f <_ZZ4loopE3__c_16>:
     f9f:	44 69 67 69 74 61 6c 20 69 6e 70 75 74 20 30 39     Digital input 09
     faf:	20 3d 20 00                                          = .

00000fb3 <_ZZ4loopE3__c_15>:
     fb3:	44 69 67 69 74 61 6c 20 69 6e 70 75 74 20 30 38     Digital input 08
     fc3:	20 3d 20 00                                          = .

00000fc7 <_ZZ4loopE3__c_14>:
     fc7:	43 65 6e 74 65 72 20 70 6f 73 69 74 69 6f 6e 73     Center positions
     fd7:	20 73 74 6f 72 65 64 2e 00                           stored..

00000fe0 <_ZZ4loopE3__c_13>:
	...

00000fe1 <_ZZ4loopE3__c_12>:
     fe1:	50 6c 61 63 65 20 61 6c 6c 20 73 74 69 63 6b 73     Place all sticks
     ff1:	20 61 6e 64 20 73 75 62 74 72 69 6d 73 20 69 6e      and subtrims in
    1001:	20 74 68 65 20 63 65 6e 74 65 72 20 70 6f 73 69      the center posi
    1011:	74 69 6f 6e 20 77 69 74 68 69 6e 20 31 30 20 73     tion within 10 s
    1021:	65 63 6f 6e 64 73 2e 00                             econds..

00001029 <_ZZ4loopE3__c_11>:
	...

0000102a <_ZZ4loopE3__c_10>:
    102a:	43 68 65 63 6b 69 6e 67 20 66 6f 72 20 76 61 6c     Checking for val
    103a:	69 64 20 72 65 63 65 69 76 65 72 20 73 69 67 6e     id receiver sign
    104a:	61 6c 73 2e 00                                      als..

0000104f <_ZZ4loopE3__c_9>:
    104f:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    105f:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    106f:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    107f:	3d 3d 3d 00                                         ===.

00001083 <_ZZ4loopE3__c_8>:
    1083:	54 72 61 6e 73 6d 69 74 74 65 72 20 73 65 74 75     Transmitter setu
    1093:	70 00                                               p.

00001095 <_ZZ4loopE3__c_7>:
    1095:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    10a5:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    10b5:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    10c5:	3d 3d 3d 00                                         ===.

000010c9 <_ZZ4loopE3__c_6>:
	...

000010ca <_ZZ4loopE3__c_5>:
    10ca:	49 32 43 20 63 6c 6f 63 6b 20 73 70 65 65 64 20     I2C clock speed 
    10da:	69 73 20 6e 6f 74 20 73 65 74 20 74 6f 20 34 30     is not set to 40
    10ea:	30 6b 48 7a 2e 20 28 45 52 52 4f 52 20 38 29 00     0kHz. (ERROR 8).

000010fa <_ZZ4loopE3__c_4>:
    10fa:	49 32 43 20 63 6c 6f 63 6b 20 73 70 65 65 64 20     I2C clock speed 
    110a:	69 73 20 63 6f 72 72 65 63 74 6c 79 20 73 65 74     is correctly set
    111a:	20 74 6f 20 34 30 30 6b 48 7a 2e 00                  to 400kHz..

00001126 <_ZZ4loopE3__c_3>:
    1126:	43 68 65 63 6b 69 6e 67 20 49 32 43 20 63 6c 6f     Checking I2C clo
    1136:	63 6b 20 73 70 65 65 64 2e 00                       ck speed..

00001140 <_ZZ4loopE3__c_2>:
    1140:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    1150:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    1160:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    1170:	3d 3d 3d 00                                         ===.

00001174 <_ZZ4loopE3__c_1>:
    1174:	53 79 73 74 65 6d 20 63 68 65 63 6b 00              System check.

00001181 <_ZZ4loopE3__c_0>:
    1181:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    1191:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    11a1:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    11b1:	3d 3d 3d 00                                         ===.

000011b5 <_ZZ4loopE3__c>:
	...

000011b6 <digital_pin_to_timer_PGM>:
    11b6:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
    11c6:	00 00 00 00                                         ....

000011ca <digital_pin_to_bit_mask_PGM>:
    11ca:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
    11da:	04 08 10 20                                         ... 

000011de <digital_pin_to_port_PGM>:
    11de:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
    11ee:	03 03 03 03                                         ....

000011f2 <port_to_output_PGM>:
    11f2:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000011fc <port_to_mode_PGM>:
    11fc:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00001206 <__ctors_start>:
    1206:	3d 20       	and	r3, r13
    1208:	11 24       	eor	r1, r1

0000120a <__ctors_end>:
    120a:	11 24       	eor	r1, r1
    120c:	1f be       	out	0x3f, r1	; 63
    120e:	cf ef       	ldi	r28, 0xFF	; 255
    1210:	d8 e0       	ldi	r29, 0x08	; 8
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	cd bf       	out	0x3d, r28	; 61

00001216 <__do_copy_data>:
    1216:	11 e0       	ldi	r17, 0x01	; 1
    1218:	a0 e0       	ldi	r26, 0x00	; 0
    121a:	b1 e0       	ldi	r27, 0x01	; 1
    121c:	ea ec       	ldi	r30, 0xCA	; 202
    121e:	f0 e5       	ldi	r31, 0x50	; 80
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <__do_copy_data+0x10>
    1222:	05 90       	lpm	r0, Z+
    1224:	0d 92       	st	X+, r0
    1226:	a2 33       	cpi	r26, 0x32	; 50
    1228:	b1 07       	cpc	r27, r17
    122a:	d9 f7       	brne	.-10     	; 0x1222 <__do_copy_data+0xc>

0000122c <__do_clear_bss>:
    122c:	22 e0       	ldi	r18, 0x02	; 2
    122e:	a2 e3       	ldi	r26, 0x32	; 50
    1230:	b1 e0       	ldi	r27, 0x01	; 1
    1232:	01 c0       	rjmp	.+2      	; 0x1236 <.do_clear_bss_start>

00001234 <.do_clear_bss_loop>:
    1234:	1d 92       	st	X+, r1

00001236 <.do_clear_bss_start>:
    1236:	af 3f       	cpi	r26, 0xFF	; 255
    1238:	b2 07       	cpc	r27, r18
    123a:	e1 f7       	brne	.-8      	; 0x1234 <.do_clear_bss_loop>

0000123c <__do_global_ctors>:
    123c:	19 e0       	ldi	r17, 0x09	; 9
    123e:	c5 e0       	ldi	r28, 0x05	; 5
    1240:	d9 e0       	ldi	r29, 0x09	; 9
    1242:	04 c0       	rjmp	.+8      	; 0x124c <__do_global_ctors+0x10>
    1244:	21 97       	sbiw	r28, 0x01	; 1
    1246:	fe 01       	movw	r30, r28
    1248:	0e 94 47 28 	call	0x508e	; 0x508e <__tablejump2__>
    124c:	c3 30       	cpi	r28, 0x03	; 3
    124e:	d1 07       	cpc	r29, r17
    1250:	c9 f7       	brne	.-14     	; 0x1244 <__do_global_ctors+0x8>
    1252:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <main>
    1256:	0c 94 63 28 	jmp	0x50c6	; 0x50c6 <_exit>

0000125a <__bad_interrupt>:
    125a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000125e <_ZN11EEPROMClass4readEi.isra.0>:

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    125e:	0c 94 4d 28 	jmp	0x509a	; 0x509a <eeprom_read_byte>

00001262 <_ZN11EEPROMClass5writeEih.isra.1>:
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    1262:	0c 94 55 28 	jmp	0x50aa	; 0x50aa <eeprom_write_byte>

00001266 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    1266:	dc 01       	movw	r26, r24
    1268:	ed 91       	ld	r30, X+
    126a:	fc 91       	ld	r31, X
    126c:	01 90       	ld	r0, Z+
    126e:	f0 81       	ld	r31, Z
    1270:	e0 2d       	mov	r30, r0
    1272:	09 94       	ijmp

00001274 <setup>:

#define LED_STATUS_PIN 13

//Setup routine
void setup(){
	pinMode(LED_STATUS_PIN, OUTPUT);
    1274:	61 e0       	ldi	r22, 0x01	; 1
    1276:	8d e0       	ldi	r24, 0x0D	; 13
    1278:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <pinMode>
	//Arduino (Atmega) pins default to inputs, so they don't need to be explicitly declared as inputs
	PCICR |= (1 << PCIE0);    // set PCIE0 to enable PCMSK0 scan
    127c:	e8 e6       	ldi	r30, 0x68	; 104
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	81 60       	ori	r24, 0x01	; 1
    1284:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0);  // set PCINT0 (digital input 8) to trigger an interrupt on state change
    1286:	eb e6       	ldi	r30, 0x6B	; 107
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	81 60       	ori	r24, 0x01	; 1
    128e:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT1);  // set PCINT1 (digital input 9)to trigger an interrupt on state change
    1290:	80 81       	ld	r24, Z
    1292:	82 60       	ori	r24, 0x02	; 2
    1294:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT2);  // set PCINT2 (digital input 10)to trigger an interrupt on state change
    1296:	80 81       	ld	r24, Z
    1298:	84 60       	ori	r24, 0x04	; 4
    129a:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT3);  // set PCINT3 (digital input 11)to trigger an interrupt on state change
    129c:	80 81       	ld	r24, Z
    129e:	88 60       	ori	r24, 0x08	; 8
    12a0:	80 83       	st	Z, r24
	Wire.begin();             //Start the I2C as master
    12a2:	86 e3       	ldi	r24, 0x36	; 54
    12a4:	92 e0       	ldi	r25, 0x02	; 2
    12a6:	0e 94 7e 23 	call	0x46fc	; 0x46fc <_ZN7TwoWire5beginEv>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    12aa:	26 e0       	ldi	r18, 0x06	; 6
    12ac:	40 e0       	ldi	r20, 0x00	; 0
    12ae:	51 ee       	ldi	r21, 0xE1	; 225
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	89 e9       	ldi	r24, 0x99	; 153
    12b6:	91 e0       	ldi	r25, 0x01	; 1
    12b8:	0e 94 76 1f 	call	0x3eec	; 0x3eec <_ZN14HardwareSerial5beginEmh>
	Serial.begin(57600);      //Start the serial connetion @ 57600bps
	delay(250);               //Give the gyro time to start
    12bc:	6a ef       	ldi	r22, 0xFA	; 250
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	0c 94 90 24 	jmp	0x4920	; 0x4920 <delay>

000012c8 <_Z21check_receiver_inputsh>:
		if(cal_int == 2000)gyro_yaw -= gyro_yaw_cal;                 //Only compensate after the calibration
	}
}

//Check if a receiver input value is changing within 30 seconds
void check_receiver_inputs(byte movement){
    12c8:	cf 92       	push	r12
    12ca:	df 92       	push	r13
    12cc:	ef 92       	push	r14
    12ce:	ff 92       	push	r15
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	d8 2f       	mov	r29, r24
	byte trigger = 0;
	int pulse_length;
	timer = millis() + 30000;
    12da:	0e 94 5f 24 	call	0x48be	; 0x48be <millis>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	80 5d       	subi	r24, 0xD0	; 208
    12e4:	9a 48       	sbci	r25, 0x8A	; 138
    12e6:	af 4f       	sbci	r26, 0xFF	; 255
    12e8:	bf 4f       	sbci	r27, 0xFF	; 255
    12ea:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <timer>
    12ee:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <timer+0x1>
    12f2:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <timer+0x2>
    12f6:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <timer+0x3>
	}
}

//Check if a receiver input value is changing within 30 seconds
void check_receiver_inputs(byte movement){
	byte trigger = 0;
    12fa:	c0 e0       	ldi	r28, 0x00	; 0
	int pulse_length;
	timer = millis() + 30000;
	while(timer > millis() && trigger == 0){
    12fc:	c0 90 5e 01 	lds	r12, 0x015E	; 0x80015e <timer>
    1300:	d0 90 5f 01 	lds	r13, 0x015F	; 0x80015f <timer+0x1>
    1304:	e0 90 60 01 	lds	r14, 0x0160	; 0x800160 <timer+0x2>
    1308:	f0 90 61 01 	lds	r15, 0x0161	; 0x800161 <timer+0x3>
    130c:	0e 94 5f 24 	call	0x48be	; 0x48be <millis>
    1310:	6c 15       	cp	r22, r12
    1312:	7d 05       	cpc	r23, r13
    1314:	8e 05       	cpc	r24, r14
    1316:	9f 05       	cpc	r25, r15
    1318:	28 f5       	brcc	.+74     	; 0x1364 <_Z21check_receiver_inputsh+0x9c>
    131a:	cc 23       	and	r28, r28
    131c:	b1 f1       	breq	.+108    	; 0x138a <_Z21check_receiver_inputsh+0xc2>
		error = 1;
		Serial.println(F("No stick movement detected in the last 30 seconds!!! (ERROR 2)"));
	}
	//Assign the stick to the function.
	else{
		if(movement == 1){
    131e:	d1 30       	cpi	r29, 0x01	; 1
    1320:	31 f4       	brne	.+12     	; 0x132e <_Z21check_receiver_inputsh+0x66>
			channel_3_assign = trigger;
			if(pulse_length < 1250)channel_3_assign += 0b10000000;
    1322:	02 3e       	cpi	r16, 0xE2	; 226
    1324:	14 40       	sbci	r17, 0x04	; 4
    1326:	0c f0       	brlt	.+2      	; 0x132a <_Z21check_receiver_inputsh+0x62>
    1328:	9b c0       	rjmp	.+310    	; 0x1460 <_Z21check_receiver_inputsh+0x198>
    132a:	c0 58       	subi	r28, 0x80	; 128
    132c:	99 c0       	rjmp	.+306    	; 0x1460 <_Z21check_receiver_inputsh+0x198>
		}
		if(movement == 2){
    132e:	d2 30       	cpi	r29, 0x02	; 2
    1330:	31 f4       	brne	.+12     	; 0x133e <_Z21check_receiver_inputsh+0x76>
			channel_1_assign = trigger;
			if(pulse_length < 1250)channel_1_assign += 0b10000000;
    1332:	02 3e       	cpi	r16, 0xE2	; 226
    1334:	14 40       	sbci	r17, 0x04	; 4
    1336:	0c f0       	brlt	.+2      	; 0x133a <_Z21check_receiver_inputsh+0x72>
    1338:	96 c0       	rjmp	.+300    	; 0x1466 <_Z21check_receiver_inputsh+0x19e>
    133a:	c0 58       	subi	r28, 0x80	; 128
    133c:	94 c0       	rjmp	.+296    	; 0x1466 <_Z21check_receiver_inputsh+0x19e>
		}
		if(movement == 3){
    133e:	d3 30       	cpi	r29, 0x03	; 3
    1340:	39 f4       	brne	.+14     	; 0x1350 <_Z21check_receiver_inputsh+0x88>
			channel_2_assign = trigger;
			if(pulse_length < 1250)channel_2_assign += 0b10000000;
    1342:	02 3e       	cpi	r16, 0xE2	; 226
    1344:	14 40       	sbci	r17, 0x04	; 4
    1346:	0c f4       	brge	.+2      	; 0x134a <_Z21check_receiver_inputsh+0x82>
    1348:	c0 58       	subi	r28, 0x80	; 128
    134a:	c0 93 8d 01 	sts	0x018D, r28	; 0x80018d <channel_2_assign>
    134e:	8d c0       	rjmp	.+282    	; 0x146a <_Z21check_receiver_inputsh+0x1a2>
		}
		if(movement == 4){
    1350:	d4 30       	cpi	r29, 0x04	; 4
    1352:	09 f0       	breq	.+2      	; 0x1356 <_Z21check_receiver_inputsh+0x8e>
    1354:	8a c0       	rjmp	.+276    	; 0x146a <_Z21check_receiver_inputsh+0x1a2>
			channel_4_assign = trigger;
			if(pulse_length < 1250)channel_4_assign += 0b10000000;
    1356:	02 3e       	cpi	r16, 0xE2	; 226
    1358:	14 40       	sbci	r17, 0x04	; 4
    135a:	0c f4       	brge	.+2      	; 0x135e <_Z21check_receiver_inputsh+0x96>
    135c:	c0 58       	subi	r28, 0x80	; 128
    135e:	c0 93 8b 01 	sts	0x018B, r28	; 0x80018b <channel_4_assign>
    1362:	83 c0       	rjmp	.+262    	; 0x146a <_Z21check_receiver_inputsh+0x1a2>
			trigger = 4;
			receiver_check_byte |= 0b00001000;
			pulse_length = receiver_input_channel_4;
		}
	}
	if(trigger == 0){
    1364:	c1 11       	cpse	r28, r1
    1366:	db cf       	rjmp	.-74     	; 0x131e <_Z21check_receiver_inputsh+0x56>
		error = 1;
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		Serial.println(F("No stick movement detected in the last 30 seconds!!! (ERROR 2)"));
    136e:	6e ed       	ldi	r22, 0xDE	; 222
    1370:	71 e0       	ldi	r23, 0x01	; 1
    1372:	89 e9       	ldi	r24, 0x99	; 153
    1374:	91 e0       	ldi	r25, 0x01	; 1
		if(movement == 4){
			channel_4_assign = trigger;
			if(pulse_length < 1250)channel_4_assign += 0b10000000;
		}
	}
}
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	1f 91       	pop	r17
    137c:	0f 91       	pop	r16
    137e:	ff 90       	pop	r15
    1380:	ef 90       	pop	r14
    1382:	df 90       	pop	r13
    1384:	cf 90       	pop	r12
			pulse_length = receiver_input_channel_4;
		}
	}
	if(trigger == 0){
		error = 1;
		Serial.println(F("No stick movement detected in the last 30 seconds!!! (ERROR 2)"));
    1386:	0c 94 eb 20 	jmp	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
void check_receiver_inputs(byte movement){
	byte trigger = 0;
	int pulse_length;
	timer = millis() + 30000;
	while(timer > millis() && trigger == 0){
		delay(250);
    138a:	6a ef       	ldi	r22, 0xFA	; 250
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
		if(receiver_input_channel_1 > 1750 || receiver_input_channel_1 < 1250){
    1396:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <receiver_input_channel_1>
    139a:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <receiver_input_channel_1+0x1>
    139e:	87 3d       	cpi	r24, 0xD7	; 215
    13a0:	96 40       	sbci	r25, 0x06	; 6
    13a2:	ec f5       	brge	.+122    	; 0x141e <_Z21check_receiver_inputsh+0x156>
    13a4:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <receiver_input_channel_1>
    13a8:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <receiver_input_channel_1+0x1>
    13ac:	82 3e       	cpi	r24, 0xE2	; 226
    13ae:	94 40       	sbci	r25, 0x04	; 4
    13b0:	b4 f1       	brlt	.+108    	; 0x141e <_Z21check_receiver_inputsh+0x156>
			trigger = 1;
			receiver_check_byte |= 0b00000001;
			pulse_length = receiver_input_channel_1;
		}
		if(receiver_input_channel_2 > 1750 || receiver_input_channel_2 < 1250){
    13b2:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <receiver_input_channel_2>
    13b6:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <receiver_input_channel_2+0x1>
    13ba:	87 3d       	cpi	r24, 0xD7	; 215
    13bc:	96 40       	sbci	r25, 0x06	; 6
    13be:	d4 f5       	brge	.+116    	; 0x1434 <_Z21check_receiver_inputsh+0x16c>
    13c0:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <receiver_input_channel_2>
    13c4:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <receiver_input_channel_2+0x1>
    13c8:	82 3e       	cpi	r24, 0xE2	; 226
    13ca:	94 40       	sbci	r25, 0x04	; 4
    13cc:	9c f1       	brlt	.+102    	; 0x1434 <_Z21check_receiver_inputsh+0x16c>
			trigger = 2;
			receiver_check_byte |= 0b00000010;
			pulse_length = receiver_input_channel_2;
		}
		if(receiver_input_channel_3 > 1750 || receiver_input_channel_3 < 1250){
    13ce:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <receiver_input_channel_3>
    13d2:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <receiver_input_channel_3+0x1>
    13d6:	87 3d       	cpi	r24, 0xD7	; 215
    13d8:	96 40       	sbci	r25, 0x06	; 6
    13da:	bc f5       	brge	.+110    	; 0x144a <_Z21check_receiver_inputsh+0x182>
    13dc:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <receiver_input_channel_3>
    13e0:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <receiver_input_channel_3+0x1>
    13e4:	82 3e       	cpi	r24, 0xE2	; 226
    13e6:	94 40       	sbci	r25, 0x04	; 4
    13e8:	84 f1       	brlt	.+96     	; 0x144a <_Z21check_receiver_inputsh+0x182>
			trigger = 3;
			receiver_check_byte |= 0b00000100;
			pulse_length = receiver_input_channel_3;
		}
		if(receiver_input_channel_4 > 1750 || receiver_input_channel_4 < 1250){
    13ea:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <receiver_input_channel_4>
    13ee:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <receiver_input_channel_4+0x1>
    13f2:	87 3d       	cpi	r24, 0xD7	; 215
    13f4:	96 40       	sbci	r25, 0x06	; 6
    13f6:	44 f4       	brge	.+16     	; 0x1408 <_Z21check_receiver_inputsh+0x140>
    13f8:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <receiver_input_channel_4>
    13fc:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <receiver_input_channel_4+0x1>
    1400:	82 3e       	cpi	r24, 0xE2	; 226
    1402:	94 40       	sbci	r25, 0x04	; 4
    1404:	0c f0       	brlt	.+2      	; 0x1408 <_Z21check_receiver_inputsh+0x140>
    1406:	7a cf       	rjmp	.-268    	; 0x12fc <_Z21check_receiver_inputsh+0x34>
			trigger = 4;
			receiver_check_byte |= 0b00001000;
    1408:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <receiver_check_byte>
    140c:	88 60       	ori	r24, 0x08	; 8
    140e:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <receiver_check_byte>
			pulse_length = receiver_input_channel_4;
    1412:	00 91 7e 01 	lds	r16, 0x017E	; 0x80017e <receiver_input_channel_4>
    1416:	10 91 7f 01 	lds	r17, 0x017F	; 0x80017f <receiver_input_channel_4+0x1>
			trigger = 3;
			receiver_check_byte |= 0b00000100;
			pulse_length = receiver_input_channel_3;
		}
		if(receiver_input_channel_4 > 1750 || receiver_input_channel_4 < 1250){
			trigger = 4;
    141a:	c4 e0       	ldi	r28, 0x04	; 4
    141c:	6f cf       	rjmp	.-290    	; 0x12fc <_Z21check_receiver_inputsh+0x34>
	timer = millis() + 30000;
	while(timer > millis() && trigger == 0){
		delay(250);
		if(receiver_input_channel_1 > 1750 || receiver_input_channel_1 < 1250){
			trigger = 1;
			receiver_check_byte |= 0b00000001;
    141e:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <receiver_check_byte>
    1422:	81 60       	ori	r24, 0x01	; 1
    1424:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <receiver_check_byte>
			pulse_length = receiver_input_channel_1;
    1428:	00 91 84 01 	lds	r16, 0x0184	; 0x800184 <receiver_input_channel_1>
    142c:	10 91 85 01 	lds	r17, 0x0185	; 0x800185 <receiver_input_channel_1+0x1>
	int pulse_length;
	timer = millis() + 30000;
	while(timer > millis() && trigger == 0){
		delay(250);
		if(receiver_input_channel_1 > 1750 || receiver_input_channel_1 < 1250){
			trigger = 1;
    1430:	c1 e0       	ldi	r28, 0x01	; 1
    1432:	bf cf       	rjmp	.-130    	; 0x13b2 <_Z21check_receiver_inputsh+0xea>
			receiver_check_byte |= 0b00000001;
			pulse_length = receiver_input_channel_1;
		}
		if(receiver_input_channel_2 > 1750 || receiver_input_channel_2 < 1250){
			trigger = 2;
			receiver_check_byte |= 0b00000010;
    1434:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <receiver_check_byte>
    1438:	82 60       	ori	r24, 0x02	; 2
    143a:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <receiver_check_byte>
			pulse_length = receiver_input_channel_2;
    143e:	00 91 82 01 	lds	r16, 0x0182	; 0x800182 <receiver_input_channel_2>
    1442:	10 91 83 01 	lds	r17, 0x0183	; 0x800183 <receiver_input_channel_2+0x1>
			trigger = 1;
			receiver_check_byte |= 0b00000001;
			pulse_length = receiver_input_channel_1;
		}
		if(receiver_input_channel_2 > 1750 || receiver_input_channel_2 < 1250){
			trigger = 2;
    1446:	c2 e0       	ldi	r28, 0x02	; 2
    1448:	c2 cf       	rjmp	.-124    	; 0x13ce <_Z21check_receiver_inputsh+0x106>
			receiver_check_byte |= 0b00000010;
			pulse_length = receiver_input_channel_2;
		}
		if(receiver_input_channel_3 > 1750 || receiver_input_channel_3 < 1250){
			trigger = 3;
			receiver_check_byte |= 0b00000100;
    144a:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <receiver_check_byte>
    144e:	84 60       	ori	r24, 0x04	; 4
    1450:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <receiver_check_byte>
			pulse_length = receiver_input_channel_3;
    1454:	00 91 80 01 	lds	r16, 0x0180	; 0x800180 <receiver_input_channel_3>
    1458:	10 91 81 01 	lds	r17, 0x0181	; 0x800181 <receiver_input_channel_3+0x1>
			trigger = 2;
			receiver_check_byte |= 0b00000010;
			pulse_length = receiver_input_channel_2;
		}
		if(receiver_input_channel_3 > 1750 || receiver_input_channel_3 < 1250){
			trigger = 3;
    145c:	c3 e0       	ldi	r28, 0x03	; 3
    145e:	c5 cf       	rjmp	.-118    	; 0x13ea <_Z21check_receiver_inputsh+0x122>
		Serial.println(F("No stick movement detected in the last 30 seconds!!! (ERROR 2)"));
	}
	//Assign the stick to the function.
	else{
		if(movement == 1){
			channel_3_assign = trigger;
    1460:	c0 93 8c 01 	sts	0x018C, r28	; 0x80018c <channel_3_assign>
    1464:	02 c0       	rjmp	.+4      	; 0x146a <_Z21check_receiver_inputsh+0x1a2>
			if(pulse_length < 1250)channel_3_assign += 0b10000000;
		}
		if(movement == 2){
			channel_1_assign = trigger;
    1466:	c0 93 8e 01 	sts	0x018E, r28	; 0x80018e <channel_1_assign>
		if(movement == 4){
			channel_4_assign = trigger;
			if(pulse_length < 1250)channel_4_assign += 0b10000000;
		}
	}
}
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	1f 91       	pop	r17
    1470:	0f 91       	pop	r16
    1472:	ff 90       	pop	r15
    1474:	ef 90       	pop	r14
    1476:	df 90       	pop	r13
    1478:	cf 90       	pop	r12
    147a:	08 95       	ret

0000147c <_Z16wait_sticks_zerov>:
	}
	wait_sticks_zero();
}

//Check if the transmitter sticks are in the neutral position
void wait_sticks_zero(){
    147c:	cf 93       	push	r28
	byte zero = 0;
    147e:	c0 e0       	ldi	r28, 0x00	; 0
	while(zero < 15){
		if(receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)zero |= 0b00000001;
    1480:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <center_channel_1>
    1484:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <center_channel_1+0x1>
    1488:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <receiver_input_channel_1>
    148c:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <receiver_input_channel_1+0x1>
    1490:	ac 01       	movw	r20, r24
    1492:	4d 5e       	subi	r20, 0xED	; 237
    1494:	5f 4f       	sbci	r21, 0xFF	; 255
    1496:	42 17       	cp	r20, r18
    1498:	53 07       	cpc	r21, r19
    149a:	4c f0       	brlt	.+18     	; 0x14ae <_Z16wait_sticks_zerov+0x32>
    149c:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <receiver_input_channel_1>
    14a0:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <receiver_input_channel_1+0x1>
    14a4:	43 97       	sbiw	r24, 0x13	; 19
    14a6:	28 17       	cp	r18, r24
    14a8:	39 07       	cpc	r19, r25
    14aa:	0c f0       	brlt	.+2      	; 0x14ae <_Z16wait_sticks_zerov+0x32>
    14ac:	4d c0       	rjmp	.+154    	; 0x1548 <_Z16wait_sticks_zerov+0xcc>
		if(receiver_input_channel_2 < center_channel_2 + 20 && receiver_input_channel_2 > center_channel_2 - 20)zero |= 0b00000010;
    14ae:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <center_channel_2>
    14b2:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <center_channel_2+0x1>
    14b6:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <receiver_input_channel_2>
    14ba:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <receiver_input_channel_2+0x1>
    14be:	ac 01       	movw	r20, r24
    14c0:	4d 5e       	subi	r20, 0xED	; 237
    14c2:	5f 4f       	sbci	r21, 0xFF	; 255
    14c4:	42 17       	cp	r20, r18
    14c6:	53 07       	cpc	r21, r19
    14c8:	44 f0       	brlt	.+16     	; 0x14da <_Z16wait_sticks_zerov+0x5e>
    14ca:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <receiver_input_channel_2>
    14ce:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <receiver_input_channel_2+0x1>
    14d2:	43 97       	sbiw	r24, 0x13	; 19
    14d4:	28 17       	cp	r18, r24
    14d6:	39 07       	cpc	r19, r25
    14d8:	cc f5       	brge	.+114    	; 0x154c <_Z16wait_sticks_zerov+0xd0>
		if(receiver_input_channel_3 < center_channel_3 + 20 && receiver_input_channel_3 > center_channel_3 - 20)zero |= 0b00000100;
    14da:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <center_channel_3>
    14de:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <center_channel_3+0x1>
    14e2:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <receiver_input_channel_3>
    14e6:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <receiver_input_channel_3+0x1>
    14ea:	ac 01       	movw	r20, r24
    14ec:	4d 5e       	subi	r20, 0xED	; 237
    14ee:	5f 4f       	sbci	r21, 0xFF	; 255
    14f0:	42 17       	cp	r20, r18
    14f2:	53 07       	cpc	r21, r19
    14f4:	44 f0       	brlt	.+16     	; 0x1506 <_Z16wait_sticks_zerov+0x8a>
    14f6:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <receiver_input_channel_3>
    14fa:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <receiver_input_channel_3+0x1>
    14fe:	43 97       	sbiw	r24, 0x13	; 19
    1500:	28 17       	cp	r18, r24
    1502:	39 07       	cpc	r19, r25
    1504:	2c f5       	brge	.+74     	; 0x1550 <_Z16wait_sticks_zerov+0xd4>
		if(receiver_input_channel_4 < center_channel_4 + 20 && receiver_input_channel_4 > center_channel_4 - 20)zero |= 0b00001000;
    1506:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <center_channel_4>
    150a:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <center_channel_4+0x1>
    150e:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <receiver_input_channel_4>
    1512:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <receiver_input_channel_4+0x1>
    1516:	ac 01       	movw	r20, r24
    1518:	4d 5e       	subi	r20, 0xED	; 237
    151a:	5f 4f       	sbci	r21, 0xFF	; 255
    151c:	42 17       	cp	r20, r18
    151e:	53 07       	cpc	r21, r19
    1520:	44 f0       	brlt	.+16     	; 0x1532 <_Z16wait_sticks_zerov+0xb6>
    1522:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <receiver_input_channel_4>
    1526:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <receiver_input_channel_4+0x1>
    152a:	43 97       	sbiw	r24, 0x13	; 19
    152c:	28 17       	cp	r18, r24
    152e:	39 07       	cpc	r19, r25
    1530:	8c f4       	brge	.+34     	; 0x1554 <_Z16wait_sticks_zerov+0xd8>
		delay(100);
    1532:	64 e6       	ldi	r22, 0x64	; 100
    1534:	70 e0       	ldi	r23, 0x00	; 0
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
}

//Check if the transmitter sticks are in the neutral position
void wait_sticks_zero(){
	byte zero = 0;
	while(zero < 15){
    153e:	cf 30       	cpi	r28, 0x0F	; 15
    1540:	08 f4       	brcc	.+2      	; 0x1544 <_Z16wait_sticks_zerov+0xc8>
    1542:	9e cf       	rjmp	.-196    	; 0x1480 <_Z16wait_sticks_zerov+0x4>
		if(receiver_input_channel_2 < center_channel_2 + 20 && receiver_input_channel_2 > center_channel_2 - 20)zero |= 0b00000010;
		if(receiver_input_channel_3 < center_channel_3 + 20 && receiver_input_channel_3 > center_channel_3 - 20)zero |= 0b00000100;
		if(receiver_input_channel_4 < center_channel_4 + 20 && receiver_input_channel_4 > center_channel_4 - 20)zero |= 0b00001000;
		delay(100);
	}
}
    1544:	cf 91       	pop	r28
    1546:	08 95       	ret

//Check if the transmitter sticks are in the neutral position
void wait_sticks_zero(){
	byte zero = 0;
	while(zero < 15){
		if(receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)zero |= 0b00000001;
    1548:	c1 60       	ori	r28, 0x01	; 1
    154a:	b1 cf       	rjmp	.-158    	; 0x14ae <_Z16wait_sticks_zerov+0x32>
		if(receiver_input_channel_2 < center_channel_2 + 20 && receiver_input_channel_2 > center_channel_2 - 20)zero |= 0b00000010;
    154c:	c2 60       	ori	r28, 0x02	; 2
    154e:	c5 cf       	rjmp	.-118    	; 0x14da <_Z16wait_sticks_zerov+0x5e>
		if(receiver_input_channel_3 < center_channel_3 + 20 && receiver_input_channel_3 > center_channel_3 - 20)zero |= 0b00000100;
    1550:	c4 60       	ori	r28, 0x04	; 4
    1552:	d9 cf       	rjmp	.-78     	; 0x1506 <_Z16wait_sticks_zerov+0x8a>
		if(receiver_input_channel_4 < center_channel_4 + 20 && receiver_input_channel_4 > center_channel_4 - 20)zero |= 0b00001000;
    1554:	c8 60       	ori	r28, 0x08	; 8
    1556:	ed cf       	rjmp	.-38     	; 0x1532 <_Z16wait_sticks_zerov+0xb6>

00001558 <_Z17check_to_continuev>:
			if(pulse_length < 1250)channel_4_assign += 0b10000000;
		}
	}
}

void check_to_continue(){
    1558:	cf 93       	push	r28
	byte continue_byte = 0;
	while(continue_byte == 0){
		if(channel_2_assign == 0b00000001 && receiver_input_channel_1 > center_channel_1 + 150)continue_byte = 1;
    155a:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <channel_2_assign>
    155e:	81 30       	cpi	r24, 0x01	; 1
    1560:	79 f4       	brne	.+30     	; 0x1580 <_Z17check_to_continuev+0x28>
    1562:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <receiver_input_channel_1>
    1566:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <receiver_input_channel_1+0x1>
    156a:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <center_channel_1>
    156e:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <center_channel_1+0x1>
    1572:	8a 56       	subi	r24, 0x6A	; 106
    1574:	9f 4f       	sbci	r25, 0xFF	; 255
    1576:	82 17       	cp	r24, r18
    1578:	93 07       	cpc	r25, r19
    157a:	0c f4       	brge	.+2      	; 0x157e <_Z17check_to_continuev+0x26>
    157c:	67 c0       	rjmp	.+206    	; 0x164c <_Z17check_to_continuev+0xf4>
    157e:	23 c0       	rjmp	.+70     	; 0x15c6 <_Z17check_to_continuev+0x6e>
		if(channel_2_assign == 0b10000001 && receiver_input_channel_1 < center_channel_1 - 150)continue_byte = 1;
    1580:	81 38       	cpi	r24, 0x81	; 129
    1582:	81 f4       	brne	.+32     	; 0x15a4 <_Z17check_to_continuev+0x4c>
    1584:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <receiver_input_channel_1>
    1588:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <receiver_input_channel_1+0x1>
    158c:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <center_channel_1>
    1590:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <center_channel_1+0x1>
    1594:	86 59       	subi	r24, 0x96	; 150
    1596:	91 09       	sbc	r25, r1
    1598:	c1 e0       	ldi	r28, 0x01	; 1
    159a:	28 17       	cp	r18, r24
    159c:	39 07       	cpc	r19, r25
    159e:	0c f4       	brge	.+2      	; 0x15a2 <_Z17check_to_continuev+0x4a>
    15a0:	56 c0       	rjmp	.+172    	; 0x164e <_Z17check_to_continuev+0xf6>
    15a2:	11 c0       	rjmp	.+34     	; 0x15c6 <_Z17check_to_continuev+0x6e>
		if(channel_2_assign == 0b00000010 && receiver_input_channel_2 > center_channel_2 + 150)continue_byte = 1;
    15a4:	82 30       	cpi	r24, 0x02	; 2
    15a6:	89 f4       	brne	.+34     	; 0x15ca <_Z17check_to_continuev+0x72>
    15a8:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <receiver_input_channel_2>
    15ac:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <receiver_input_channel_2+0x1>
    15b0:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <center_channel_2>
    15b4:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <center_channel_2+0x1>
    15b8:	8a 56       	subi	r24, 0x6A	; 106
    15ba:	9f 4f       	sbci	r25, 0xFF	; 255
    15bc:	c1 e0       	ldi	r28, 0x01	; 1
    15be:	82 17       	cp	r24, r18
    15c0:	93 07       	cpc	r25, r19
    15c2:	0c f4       	brge	.+2      	; 0x15c6 <_Z17check_to_continuev+0x6e>
    15c4:	44 c0       	rjmp	.+136    	; 0x164e <_Z17check_to_continuev+0xf6>
    15c6:	c0 e0       	ldi	r28, 0x00	; 0
    15c8:	42 c0       	rjmp	.+132    	; 0x164e <_Z17check_to_continuev+0xf6>
    15ca:	c0 e0       	ldi	r28, 0x00	; 0
		if(channel_2_assign == 0b10000010 && receiver_input_channel_2 < center_channel_2 - 150)continue_byte = 1;
    15cc:	82 38       	cpi	r24, 0x82	; 130
    15ce:	49 f4       	brne	.+18     	; 0x15e2 <_Z17check_to_continuev+0x8a>
    15d0:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <receiver_input_channel_2>
    15d4:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <receiver_input_channel_2+0x1>
    15d8:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <center_channel_2>
    15dc:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <center_channel_2+0x1>
    15e0:	30 c0       	rjmp	.+96     	; 0x1642 <_Z17check_to_continuev+0xea>
		if(channel_2_assign == 0b00000011 && receiver_input_channel_3 > center_channel_3 + 150)continue_byte = 1;
    15e2:	83 30       	cpi	r24, 0x03	; 3
    15e4:	49 f4       	brne	.+18     	; 0x15f8 <_Z17check_to_continuev+0xa0>
    15e6:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <receiver_input_channel_3>
    15ea:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <receiver_input_channel_3+0x1>
    15ee:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <center_channel_3>
    15f2:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <center_channel_3+0x1>
    15f6:	15 c0       	rjmp	.+42     	; 0x1622 <_Z17check_to_continuev+0xca>
		if(channel_2_assign == 0b10000011 && receiver_input_channel_3 < center_channel_3 - 150)continue_byte = 1;
    15f8:	83 38       	cpi	r24, 0x83	; 131
    15fa:	49 f4       	brne	.+18     	; 0x160e <_Z17check_to_continuev+0xb6>
    15fc:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <receiver_input_channel_3>
    1600:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <receiver_input_channel_3+0x1>
    1604:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <center_channel_3>
    1608:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <center_channel_3+0x1>
    160c:	1a c0       	rjmp	.+52     	; 0x1642 <_Z17check_to_continuev+0xea>
		if(channel_2_assign == 0b00000100 && receiver_input_channel_4 > center_channel_4 + 150)continue_byte = 1;
    160e:	84 30       	cpi	r24, 0x04	; 4
    1610:	71 f4       	brne	.+28     	; 0x162e <_Z17check_to_continuev+0xd6>
    1612:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <receiver_input_channel_4>
    1616:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <receiver_input_channel_4+0x1>
    161a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <center_channel_4>
    161e:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <center_channel_4+0x1>
    1622:	8a 56       	subi	r24, 0x6A	; 106
    1624:	9f 4f       	sbci	r25, 0xFF	; 255
    1626:	82 17       	cp	r24, r18
    1628:	93 07       	cpc	r25, r19
    162a:	8c f4       	brge	.+34     	; 0x164e <_Z17check_to_continuev+0xf6>
    162c:	0f c0       	rjmp	.+30     	; 0x164c <_Z17check_to_continuev+0xf4>
		if(channel_2_assign == 0b10000100 && receiver_input_channel_4 < center_channel_4 - 150)continue_byte = 1;
    162e:	84 38       	cpi	r24, 0x84	; 132
    1630:	71 f4       	brne	.+28     	; 0x164e <_Z17check_to_continuev+0xf6>
    1632:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <receiver_input_channel_4>
    1636:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <receiver_input_channel_4+0x1>
    163a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <center_channel_4>
    163e:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <center_channel_4+0x1>
    1642:	86 59       	subi	r24, 0x96	; 150
    1644:	91 09       	sbc	r25, r1
    1646:	28 17       	cp	r18, r24
    1648:	39 07       	cpc	r19, r25
    164a:	0c f4       	brge	.+2      	; 0x164e <_Z17check_to_continuev+0xf6>
    164c:	c1 e0       	ldi	r28, 0x01	; 1
		delay(100);
    164e:	64 e6       	ldi	r22, 0x64	; 100
    1650:	70 e0       	ldi	r23, 0x00	; 0
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
	}
}

void check_to_continue(){
	byte continue_byte = 0;
	while(continue_byte == 0){
    165a:	cc 23       	and	r28, r28
    165c:	09 f4       	brne	.+2      	; 0x1660 <_Z17check_to_continuev+0x108>
    165e:	7d cf       	rjmp	.-262    	; 0x155a <_Z17check_to_continuev+0x2>
		if(channel_2_assign == 0b00000100 && receiver_input_channel_4 > center_channel_4 + 150)continue_byte = 1;
		if(channel_2_assign == 0b10000100 && receiver_input_channel_4 < center_channel_4 - 150)continue_byte = 1;
		delay(100);
	}
	wait_sticks_zero();
}
    1660:	cf 91       	pop	r28
		if(channel_2_assign == 0b10000011 && receiver_input_channel_3 < center_channel_3 - 150)continue_byte = 1;
		if(channel_2_assign == 0b00000100 && receiver_input_channel_4 > center_channel_4 + 150)continue_byte = 1;
		if(channel_2_assign == 0b10000100 && receiver_input_channel_4 < center_channel_4 - 150)continue_byte = 1;
		delay(100);
	}
	wait_sticks_zero();
    1662:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <_Z16wait_sticks_zerov>

00001666 <_Z17wait_for_receiverv>:
	}
}

//Checck if the receiver values are valid within 10 seconds

void wait_for_receiver(){
    1666:	cf 92       	push	r12
    1668:	df 92       	push	r13
    166a:	ef 92       	push	r14
    166c:	ff 92       	push	r15
    166e:	cf 93       	push	r28
	byte zero = 0;
	timer = millis() + 10000;
    1670:	0e 94 5f 24 	call	0x48be	; 0x48be <millis>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	80 5f       	subi	r24, 0xF0	; 240
    167a:	98 4d       	sbci	r25, 0xD8	; 216
    167c:	af 4f       	sbci	r26, 0xFF	; 255
    167e:	bf 4f       	sbci	r27, 0xFF	; 255
    1680:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <timer>
    1684:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <timer+0x1>
    1688:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <timer+0x2>
    168c:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <timer+0x3>
}

//Checck if the receiver values are valid within 10 seconds

void wait_for_receiver(){
	byte zero = 0;
    1690:	c0 e0       	ldi	r28, 0x00	; 0
	timer = millis() + 10000;
	while(timer > millis() && zero < 15){
    1692:	c0 90 5e 01 	lds	r12, 0x015E	; 0x80015e <timer>
    1696:	d0 90 5f 01 	lds	r13, 0x015F	; 0x80015f <timer+0x1>
    169a:	e0 90 60 01 	lds	r14, 0x0160	; 0x800160 <timer+0x2>
    169e:	f0 90 61 01 	lds	r15, 0x0161	; 0x800161 <timer+0x3>
    16a2:	0e 94 5f 24 	call	0x48be	; 0x48be <millis>
    16a6:	6c 15       	cp	r22, r12
    16a8:	7d 05       	cpc	r23, r13
    16aa:	8e 05       	cpc	r24, r14
    16ac:	9f 05       	cpc	r25, r15
    16ae:	68 f4       	brcc	.+26     	; 0x16ca <_Z17wait_for_receiverv+0x64>
    16b0:	cf 30       	cpi	r28, 0x0F	; 15
    16b2:	c8 f0       	brcs	.+50     	; 0x16e6 <_Z17wait_for_receiverv+0x80>
	if(zero == 0){
		error = 1;
		Serial.println(F("."));
		Serial.println(F("No valid receiver signals found!!! (ERROR 1)"));
	}
	else Serial.println(F(" OK"));
    16b4:	69 ea       	ldi	r22, 0xA9	; 169
    16b6:	71 e0       	ldi	r23, 0x01	; 1
    16b8:	89 e9       	ldi	r24, 0x99	; 153
    16ba:	91 e0       	ldi	r25, 0x01	; 1
}
    16bc:	cf 91       	pop	r28
    16be:	ff 90       	pop	r15
    16c0:	ef 90       	pop	r14
    16c2:	df 90       	pop	r13
    16c4:	cf 90       	pop	r12
	if(zero == 0){
		error = 1;
		Serial.println(F("."));
		Serial.println(F("No valid receiver signals found!!! (ERROR 1)"));
	}
	else Serial.println(F(" OK"));
    16c6:	0c 94 eb 20 	jmp	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		if(receiver_input_channel_3 < 2100 && receiver_input_channel_3 > 900)zero |= 0b00000100;
		if(receiver_input_channel_4 < 2100 && receiver_input_channel_4 > 900)zero |= 0b00001000;
		delay(500);
		Serial.print(F("."));
	}
	if(zero == 0){
    16ca:	c1 11       	cpse	r28, r1
    16cc:	f3 cf       	rjmp	.-26     	; 0x16b4 <_Z17wait_for_receiverv+0x4e>
		error = 1;
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		Serial.println(F("."));
    16d4:	6a ed       	ldi	r22, 0xDA	; 218
    16d6:	71 e0       	ldi	r23, 0x01	; 1
    16d8:	89 e9       	ldi	r24, 0x99	; 153
    16da:	91 e0       	ldi	r25, 0x01	; 1
    16dc:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("No valid receiver signals found!!! (ERROR 1)"));
    16e0:	6d ea       	ldi	r22, 0xAD	; 173
    16e2:	71 e0       	ldi	r23, 0x01	; 1
    16e4:	e9 cf       	rjmp	.-46     	; 0x16b8 <_Z17wait_for_receiverv+0x52>

void wait_for_receiver(){
	byte zero = 0;
	timer = millis() + 10000;
	while(timer > millis() && zero < 15){
		if(receiver_input_channel_1 < 2100 && receiver_input_channel_1 > 900)zero |= 0b00000001;
    16e6:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <receiver_input_channel_1>
    16ea:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <receiver_input_channel_1+0x1>
    16ee:	84 33       	cpi	r24, 0x34	; 52
    16f0:	98 40       	sbci	r25, 0x08	; 8
    16f2:	3c f4       	brge	.+14     	; 0x1702 <_Z17wait_for_receiverv+0x9c>
    16f4:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <receiver_input_channel_1>
    16f8:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <receiver_input_channel_1+0x1>
    16fc:	85 38       	cpi	r24, 0x85	; 133
    16fe:	93 40       	sbci	r25, 0x03	; 3
    1700:	bc f5       	brge	.+110    	; 0x1770 <_Z17wait_for_receiverv+0x10a>
		if(receiver_input_channel_2 < 2100 && receiver_input_channel_2 > 900)zero |= 0b00000010;
    1702:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <receiver_input_channel_2>
    1706:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <receiver_input_channel_2+0x1>
    170a:	84 33       	cpi	r24, 0x34	; 52
    170c:	98 40       	sbci	r25, 0x08	; 8
    170e:	3c f4       	brge	.+14     	; 0x171e <_Z17wait_for_receiverv+0xb8>
    1710:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <receiver_input_channel_2>
    1714:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <receiver_input_channel_2+0x1>
    1718:	85 38       	cpi	r24, 0x85	; 133
    171a:	93 40       	sbci	r25, 0x03	; 3
    171c:	5c f5       	brge	.+86     	; 0x1774 <_Z17wait_for_receiverv+0x10e>
		if(receiver_input_channel_3 < 2100 && receiver_input_channel_3 > 900)zero |= 0b00000100;
    171e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <receiver_input_channel_3>
    1722:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <receiver_input_channel_3+0x1>
    1726:	84 33       	cpi	r24, 0x34	; 52
    1728:	98 40       	sbci	r25, 0x08	; 8
    172a:	3c f4       	brge	.+14     	; 0x173a <_Z17wait_for_receiverv+0xd4>
    172c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <receiver_input_channel_3>
    1730:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <receiver_input_channel_3+0x1>
    1734:	85 38       	cpi	r24, 0x85	; 133
    1736:	93 40       	sbci	r25, 0x03	; 3
    1738:	fc f4       	brge	.+62     	; 0x1778 <_Z17wait_for_receiverv+0x112>
		if(receiver_input_channel_4 < 2100 && receiver_input_channel_4 > 900)zero |= 0b00001000;
    173a:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <receiver_input_channel_4>
    173e:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <receiver_input_channel_4+0x1>
    1742:	84 33       	cpi	r24, 0x34	; 52
    1744:	98 40       	sbci	r25, 0x08	; 8
    1746:	3c f4       	brge	.+14     	; 0x1756 <_Z17wait_for_receiverv+0xf0>
    1748:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <receiver_input_channel_4>
    174c:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <receiver_input_channel_4+0x1>
    1750:	85 38       	cpi	r24, 0x85	; 133
    1752:	93 40       	sbci	r25, 0x03	; 3
    1754:	9c f4       	brge	.+38     	; 0x177c <_Z17wait_for_receiverv+0x116>
		delay(500);
    1756:	64 ef       	ldi	r22, 0xF4	; 244
    1758:	71 e0       	ldi	r23, 0x01	; 1
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
		Serial.print(F("."));
    1762:	6c ed       	ldi	r22, 0xDC	; 220
    1764:	71 e0       	ldi	r23, 0x01	; 1
    1766:	89 e9       	ldi	r24, 0x99	; 153
    1768:	91 e0       	ldi	r25, 0x01	; 1
    176a:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    176e:	91 cf       	rjmp	.-222    	; 0x1692 <_Z17wait_for_receiverv+0x2c>

void wait_for_receiver(){
	byte zero = 0;
	timer = millis() + 10000;
	while(timer > millis() && zero < 15){
		if(receiver_input_channel_1 < 2100 && receiver_input_channel_1 > 900)zero |= 0b00000001;
    1770:	c1 60       	ori	r28, 0x01	; 1
    1772:	c7 cf       	rjmp	.-114    	; 0x1702 <_Z17wait_for_receiverv+0x9c>
		if(receiver_input_channel_2 < 2100 && receiver_input_channel_2 > 900)zero |= 0b00000010;
    1774:	c2 60       	ori	r28, 0x02	; 2
    1776:	d3 cf       	rjmp	.-90     	; 0x171e <_Z17wait_for_receiverv+0xb8>
		if(receiver_input_channel_3 < 2100 && receiver_input_channel_3 > 900)zero |= 0b00000100;
    1778:	c4 60       	ori	r28, 0x04	; 4
    177a:	df cf       	rjmp	.-66     	; 0x173a <_Z17wait_for_receiverv+0xd4>
		if(receiver_input_channel_4 < 2100 && receiver_input_channel_4 > 900)zero |= 0b00001000;
    177c:	c8 60       	ori	r28, 0x08	; 8
    177e:	eb cf       	rjmp	.-42     	; 0x1756 <_Z17wait_for_receiverv+0xf0>

00001780 <_Z16register_min_maxv>:
	}
	else Serial.println(F(" OK"));
}

//Register the min and max receiver values and exit when the sticks are back in the neutral position
void register_min_max(){
    1780:	cf 93       	push	r28
	byte zero = 0;
	low_channel_1 = receiver_input_channel_1;
    1782:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <receiver_input_channel_1>
    1786:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <receiver_input_channel_1+0x1>
    178a:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <low_channel_1+0x1>
    178e:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <low_channel_1>
	low_channel_2 = receiver_input_channel_2;
    1792:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <receiver_input_channel_2>
    1796:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <receiver_input_channel_2+0x1>
    179a:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <low_channel_2+0x1>
    179e:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <low_channel_2>
	low_channel_3 = receiver_input_channel_3;
    17a2:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <receiver_input_channel_3>
    17a6:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <receiver_input_channel_3+0x1>
    17aa:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <low_channel_3+0x1>
    17ae:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <low_channel_3>
	low_channel_4 = receiver_input_channel_4;
    17b2:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <receiver_input_channel_4>
    17b6:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <receiver_input_channel_4+0x1>
    17ba:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <low_channel_4+0x1>
    17be:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <low_channel_4>
	while(receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)delay(250);
    17c2:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <center_channel_1>
    17c6:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <center_channel_1+0x1>
    17ca:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <receiver_input_channel_1>
    17ce:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <receiver_input_channel_1+0x1>
    17d2:	ac 01       	movw	r20, r24
    17d4:	4d 5e       	subi	r20, 0xED	; 237
    17d6:	5f 4f       	sbci	r21, 0xFF	; 255
    17d8:	42 17       	cp	r20, r18
    17da:	53 07       	cpc	r21, r19
    17dc:	7c f0       	brlt	.+30     	; 0x17fc <_Z16register_min_maxv+0x7c>
    17de:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <receiver_input_channel_1>
    17e2:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <receiver_input_channel_1+0x1>
    17e6:	43 97       	sbiw	r24, 0x13	; 19
    17e8:	28 17       	cp	r18, r24
    17ea:	39 07       	cpc	r19, r25
    17ec:	3c f0       	brlt	.+14     	; 0x17fc <_Z16register_min_maxv+0x7c>
    17ee:	6a ef       	ldi	r22, 0xFA	; 250
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
    17fa:	e3 cf       	rjmp	.-58     	; 0x17c2 <_Z16register_min_maxv+0x42>
	Serial.println(F("Measuring endpoints...."));
    17fc:	61 e9       	ldi	r22, 0x91	; 145
    17fe:	71 e0       	ldi	r23, 0x01	; 1
    1800:	89 e9       	ldi	r24, 0x99	; 153
    1802:	91 e0       	ldi	r25, 0x01	; 1
    1804:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	else Serial.println(F(" OK"));
}

//Register the min and max receiver values and exit when the sticks are back in the neutral position
void register_min_max(){
	byte zero = 0;
    1808:	c0 e0       	ldi	r28, 0x00	; 0
	low_channel_3 = receiver_input_channel_3;
	low_channel_4 = receiver_input_channel_4;
	while(receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)delay(250);
	Serial.println(F("Measuring endpoints...."));
	while(zero < 15){
		if(receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)zero |= 0b00000001;
    180a:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <center_channel_1>
    180e:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <center_channel_1+0x1>
    1812:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <receiver_input_channel_1>
    1816:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <receiver_input_channel_1+0x1>
    181a:	ac 01       	movw	r20, r24
    181c:	4d 5e       	subi	r20, 0xED	; 237
    181e:	5f 4f       	sbci	r21, 0xFF	; 255
    1820:	42 17       	cp	r20, r18
    1822:	53 07       	cpc	r21, r19
    1824:	4c f0       	brlt	.+18     	; 0x1838 <_Z16register_min_maxv+0xb8>
    1826:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <receiver_input_channel_1>
    182a:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <receiver_input_channel_1+0x1>
    182e:	43 97       	sbiw	r24, 0x13	; 19
    1830:	28 17       	cp	r18, r24
    1832:	39 07       	cpc	r19, r25
    1834:	0c f0       	brlt	.+2      	; 0x1838 <_Z16register_min_maxv+0xb8>
    1836:	e8 c0       	rjmp	.+464    	; 0x1a08 <_Z16register_min_maxv+0x288>
		if(receiver_input_channel_2 < center_channel_2 + 20 && receiver_input_channel_2 > center_channel_2 - 20)zero |= 0b00000010;
    1838:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <center_channel_2>
    183c:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <center_channel_2+0x1>
    1840:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <receiver_input_channel_2>
    1844:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <receiver_input_channel_2+0x1>
    1848:	ac 01       	movw	r20, r24
    184a:	4d 5e       	subi	r20, 0xED	; 237
    184c:	5f 4f       	sbci	r21, 0xFF	; 255
    184e:	42 17       	cp	r20, r18
    1850:	53 07       	cpc	r21, r19
    1852:	4c f0       	brlt	.+18     	; 0x1866 <_Z16register_min_maxv+0xe6>
    1854:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <receiver_input_channel_2>
    1858:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <receiver_input_channel_2+0x1>
    185c:	43 97       	sbiw	r24, 0x13	; 19
    185e:	28 17       	cp	r18, r24
    1860:	39 07       	cpc	r19, r25
    1862:	0c f0       	brlt	.+2      	; 0x1866 <_Z16register_min_maxv+0xe6>
    1864:	d3 c0       	rjmp	.+422    	; 0x1a0c <_Z16register_min_maxv+0x28c>
		if(receiver_input_channel_3 < center_channel_3 + 20 && receiver_input_channel_3 > center_channel_3 - 20)zero |= 0b00000100;
    1866:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <center_channel_3>
    186a:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <center_channel_3+0x1>
    186e:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <receiver_input_channel_3>
    1872:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <receiver_input_channel_3+0x1>
    1876:	ac 01       	movw	r20, r24
    1878:	4d 5e       	subi	r20, 0xED	; 237
    187a:	5f 4f       	sbci	r21, 0xFF	; 255
    187c:	42 17       	cp	r20, r18
    187e:	53 07       	cpc	r21, r19
    1880:	4c f0       	brlt	.+18     	; 0x1894 <_Z16register_min_maxv+0x114>
    1882:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <receiver_input_channel_3>
    1886:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <receiver_input_channel_3+0x1>
    188a:	43 97       	sbiw	r24, 0x13	; 19
    188c:	28 17       	cp	r18, r24
    188e:	39 07       	cpc	r19, r25
    1890:	0c f0       	brlt	.+2      	; 0x1894 <_Z16register_min_maxv+0x114>
    1892:	be c0       	rjmp	.+380    	; 0x1a10 <_Z16register_min_maxv+0x290>
		if(receiver_input_channel_4 < center_channel_4 + 20 && receiver_input_channel_4 > center_channel_4 - 20)zero |= 0b00001000;
    1894:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <center_channel_4>
    1898:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <center_channel_4+0x1>
    189c:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <receiver_input_channel_4>
    18a0:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <receiver_input_channel_4+0x1>
    18a4:	ac 01       	movw	r20, r24
    18a6:	4d 5e       	subi	r20, 0xED	; 237
    18a8:	5f 4f       	sbci	r21, 0xFF	; 255
    18aa:	42 17       	cp	r20, r18
    18ac:	53 07       	cpc	r21, r19
    18ae:	4c f0       	brlt	.+18     	; 0x18c2 <_Z16register_min_maxv+0x142>
    18b0:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <receiver_input_channel_4>
    18b4:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <receiver_input_channel_4+0x1>
    18b8:	43 97       	sbiw	r24, 0x13	; 19
    18ba:	28 17       	cp	r18, r24
    18bc:	39 07       	cpc	r19, r25
    18be:	0c f0       	brlt	.+2      	; 0x18c2 <_Z16register_min_maxv+0x142>
    18c0:	a9 c0       	rjmp	.+338    	; 0x1a14 <_Z16register_min_maxv+0x294>
		if(receiver_input_channel_1 < low_channel_1)low_channel_1 = receiver_input_channel_1;
    18c2:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <receiver_input_channel_1>
    18c6:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <receiver_input_channel_1+0x1>
    18ca:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <low_channel_1>
    18ce:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <low_channel_1+0x1>
    18d2:	28 17       	cp	r18, r24
    18d4:	39 07       	cpc	r19, r25
    18d6:	44 f4       	brge	.+16     	; 0x18e8 <_Z16register_min_maxv+0x168>
    18d8:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <receiver_input_channel_1>
    18dc:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <receiver_input_channel_1+0x1>
    18e0:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <low_channel_1+0x1>
    18e4:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <low_channel_1>
		if(receiver_input_channel_2 < low_channel_2)low_channel_2 = receiver_input_channel_2;
    18e8:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <receiver_input_channel_2>
    18ec:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <receiver_input_channel_2+0x1>
    18f0:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <low_channel_2>
    18f4:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <low_channel_2+0x1>
    18f8:	28 17       	cp	r18, r24
    18fa:	39 07       	cpc	r19, r25
    18fc:	44 f4       	brge	.+16     	; 0x190e <_Z16register_min_maxv+0x18e>
    18fe:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <receiver_input_channel_2>
    1902:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <receiver_input_channel_2+0x1>
    1906:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <low_channel_2+0x1>
    190a:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <low_channel_2>
		if(receiver_input_channel_3 < low_channel_3)low_channel_3 = receiver_input_channel_3;
    190e:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <receiver_input_channel_3>
    1912:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <receiver_input_channel_3+0x1>
    1916:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <low_channel_3>
    191a:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <low_channel_3+0x1>
    191e:	28 17       	cp	r18, r24
    1920:	39 07       	cpc	r19, r25
    1922:	44 f4       	brge	.+16     	; 0x1934 <_Z16register_min_maxv+0x1b4>
    1924:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <receiver_input_channel_3>
    1928:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <receiver_input_channel_3+0x1>
    192c:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <low_channel_3+0x1>
    1930:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <low_channel_3>
		if(receiver_input_channel_4 < low_channel_4)low_channel_4 = receiver_input_channel_4;
    1934:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <receiver_input_channel_4>
    1938:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <receiver_input_channel_4+0x1>
    193c:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <low_channel_4>
    1940:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <low_channel_4+0x1>
    1944:	28 17       	cp	r18, r24
    1946:	39 07       	cpc	r19, r25
    1948:	44 f4       	brge	.+16     	; 0x195a <_Z16register_min_maxv+0x1da>
    194a:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <receiver_input_channel_4>
    194e:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <receiver_input_channel_4+0x1>
    1952:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <low_channel_4+0x1>
    1956:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <low_channel_4>
		if(receiver_input_channel_1 > high_channel_1)high_channel_1 = receiver_input_channel_1;
    195a:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <receiver_input_channel_1>
    195e:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <receiver_input_channel_1+0x1>
    1962:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <high_channel_1>
    1966:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <high_channel_1+0x1>
    196a:	82 17       	cp	r24, r18
    196c:	93 07       	cpc	r25, r19
    196e:	44 f4       	brge	.+16     	; 0x1980 <_Z16register_min_maxv+0x200>
    1970:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <receiver_input_channel_1>
    1974:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <receiver_input_channel_1+0x1>
    1978:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <high_channel_1+0x1>
    197c:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <high_channel_1>
		if(receiver_input_channel_2 > high_channel_2)high_channel_2 = receiver_input_channel_2;
    1980:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <receiver_input_channel_2>
    1984:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <receiver_input_channel_2+0x1>
    1988:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <high_channel_2>
    198c:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <high_channel_2+0x1>
    1990:	82 17       	cp	r24, r18
    1992:	93 07       	cpc	r25, r19
    1994:	44 f4       	brge	.+16     	; 0x19a6 <_Z16register_min_maxv+0x226>
    1996:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <receiver_input_channel_2>
    199a:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <receiver_input_channel_2+0x1>
    199e:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <high_channel_2+0x1>
    19a2:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <high_channel_2>
		if(receiver_input_channel_3 > high_channel_3)high_channel_3 = receiver_input_channel_3;
    19a6:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <receiver_input_channel_3>
    19aa:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <receiver_input_channel_3+0x1>
    19ae:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <high_channel_3>
    19b2:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <high_channel_3+0x1>
    19b6:	82 17       	cp	r24, r18
    19b8:	93 07       	cpc	r25, r19
    19ba:	44 f4       	brge	.+16     	; 0x19cc <_Z16register_min_maxv+0x24c>
    19bc:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <receiver_input_channel_3>
    19c0:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <receiver_input_channel_3+0x1>
    19c4:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <high_channel_3+0x1>
    19c8:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <high_channel_3>
		if(receiver_input_channel_4 > high_channel_4)high_channel_4 = receiver_input_channel_4;
    19cc:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <receiver_input_channel_4>
    19d0:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <receiver_input_channel_4+0x1>
    19d4:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <high_channel_4>
    19d8:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <high_channel_4+0x1>
    19dc:	82 17       	cp	r24, r18
    19de:	93 07       	cpc	r25, r19
    19e0:	44 f4       	brge	.+16     	; 0x19f2 <_Z16register_min_maxv+0x272>
    19e2:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <receiver_input_channel_4>
    19e6:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <receiver_input_channel_4+0x1>
    19ea:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <high_channel_4+0x1>
    19ee:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <high_channel_4>
		delay(100);
    19f2:	64 e6       	ldi	r22, 0x64	; 100
    19f4:	70 e0       	ldi	r23, 0x00	; 0
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
	low_channel_2 = receiver_input_channel_2;
	low_channel_3 = receiver_input_channel_3;
	low_channel_4 = receiver_input_channel_4;
	while(receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)delay(250);
	Serial.println(F("Measuring endpoints...."));
	while(zero < 15){
    19fe:	cf 30       	cpi	r28, 0x0F	; 15
    1a00:	08 f4       	brcc	.+2      	; 0x1a04 <_Z16register_min_maxv+0x284>
    1a02:	03 cf       	rjmp	.-506    	; 0x180a <_Z16register_min_maxv+0x8a>
		if(receiver_input_channel_2 > high_channel_2)high_channel_2 = receiver_input_channel_2;
		if(receiver_input_channel_3 > high_channel_3)high_channel_3 = receiver_input_channel_3;
		if(receiver_input_channel_4 > high_channel_4)high_channel_4 = receiver_input_channel_4;
		delay(100);
	}
}
    1a04:	cf 91       	pop	r28
    1a06:	08 95       	ret
	low_channel_3 = receiver_input_channel_3;
	low_channel_4 = receiver_input_channel_4;
	while(receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)delay(250);
	Serial.println(F("Measuring endpoints...."));
	while(zero < 15){
		if(receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)zero |= 0b00000001;
    1a08:	c1 60       	ori	r28, 0x01	; 1
    1a0a:	16 cf       	rjmp	.-468    	; 0x1838 <_Z16register_min_maxv+0xb8>
		if(receiver_input_channel_2 < center_channel_2 + 20 && receiver_input_channel_2 > center_channel_2 - 20)zero |= 0b00000010;
    1a0c:	c2 60       	ori	r28, 0x02	; 2
    1a0e:	2b cf       	rjmp	.-426    	; 0x1866 <_Z16register_min_maxv+0xe6>
		if(receiver_input_channel_3 < center_channel_3 + 20 && receiver_input_channel_3 > center_channel_3 - 20)zero |= 0b00000100;
    1a10:	c4 60       	ori	r28, 0x04	; 4
    1a12:	40 cf       	rjmp	.-384    	; 0x1894 <_Z16register_min_maxv+0x114>
		if(receiver_input_channel_4 < center_channel_4 + 20 && receiver_input_channel_4 > center_channel_4 - 20)zero |= 0b00001000;
    1a14:	c8 60       	ori	r28, 0x08	; 8
    1a16:	55 cf       	rjmp	.-342    	; 0x18c2 <_Z16register_min_maxv+0x142>

00001a18 <__vector_3>:
	if(movement == 3)yaw_axis = trigger_axis;
	
}

//This routine is called every time input 8, 9, 10 or 11 changed state
ISR(PCINT0_vect){
    1a18:	1f 92       	push	r1
    1a1a:	0f 92       	push	r0
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	0f 92       	push	r0
    1a20:	11 24       	eor	r1, r1
    1a22:	2f 93       	push	r18
    1a24:	3f 93       	push	r19
    1a26:	4f 93       	push	r20
    1a28:	5f 93       	push	r21
    1a2a:	6f 93       	push	r22
    1a2c:	7f 93       	push	r23
    1a2e:	8f 93       	push	r24
    1a30:	9f 93       	push	r25
    1a32:	af 93       	push	r26
    1a34:	bf 93       	push	r27
    1a36:	ef 93       	push	r30
    1a38:	ff 93       	push	r31
	current_time = micros();
    1a3a:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <micros>
    1a3e:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <current_time>
    1a42:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <current_time+0x1>
    1a46:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <current_time+0x2>
    1a4a:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <current_time+0x3>
    1a4e:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <last_channel_1>
	//Channel 1=========================================
	if(PINB & B00000001){                                        //Is input 8 high?
    1a52:	18 9b       	sbis	0x03, 0	; 3
    1a54:	0e c0       	rjmp	.+28     	; 0x1a72 <__vector_3+0x5a>
		if(last_channel_1 == 0){                                   //Input 8 changed from 0 to 1
    1a56:	21 11       	cpse	r18, r1
    1a58:	1b c0       	rjmp	.+54     	; 0x1a90 <__vector_3+0x78>
			last_channel_1 = 1;                                      //Remember current input state
    1a5a:	21 e0       	ldi	r18, 0x01	; 1
    1a5c:	20 93 98 01 	sts	0x0198, r18	; 0x800198 <last_channel_1>
			timer_1 = current_time;                                  //Set timer_1 to current_time
    1a60:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <timer_1>
    1a64:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <timer_1+0x1>
    1a68:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <timer_1+0x2>
    1a6c:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <timer_1+0x3>
    1a70:	0f c0       	rjmp	.+30     	; 0x1a90 <__vector_3+0x78>
		}
	}
	else if(last_channel_1 == 1){                                //Input 8 is not high and changed from 1 to 0
    1a72:	21 30       	cpi	r18, 0x01	; 1
    1a74:	69 f4       	brne	.+26     	; 0x1a90 <__vector_3+0x78>
		last_channel_1 = 0;                                        //Remember current input state
    1a76:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <last_channel_1>
		receiver_input_channel_1 = current_time - timer_1;         //Channel 1 is current_time - timer_1
    1a7a:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <timer_1>
    1a7e:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <timer_1+0x1>
    1a82:	ab 01       	movw	r20, r22
    1a84:	42 1b       	sub	r20, r18
    1a86:	53 0b       	sbc	r21, r19
    1a88:	50 93 85 01 	sts	0x0185, r21	; 0x800185 <receiver_input_channel_1+0x1>
    1a8c:	40 93 84 01 	sts	0x0184, r20	; 0x800184 <receiver_input_channel_1>
    1a90:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <last_channel_2>
	}
	//Channel 2=========================================
	if(PINB & B00000010 ){                                       //Is input 9 high?
    1a94:	19 9b       	sbis	0x03, 1	; 3
    1a96:	0e c0       	rjmp	.+28     	; 0x1ab4 <__vector_3+0x9c>
		if(last_channel_2 == 0){                                   //Input 9 changed from 0 to 1
    1a98:	21 11       	cpse	r18, r1
    1a9a:	1b c0       	rjmp	.+54     	; 0x1ad2 <__vector_3+0xba>
			last_channel_2 = 1;                                      //Remember current input state
    1a9c:	21 e0       	ldi	r18, 0x01	; 1
    1a9e:	20 93 97 01 	sts	0x0197, r18	; 0x800197 <last_channel_2>
			timer_2 = current_time;                                  //Set timer_2 to current_time
    1aa2:	60 93 56 01 	sts	0x0156, r22	; 0x800156 <timer_2>
    1aa6:	70 93 57 01 	sts	0x0157, r23	; 0x800157 <timer_2+0x1>
    1aaa:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timer_2+0x2>
    1aae:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timer_2+0x3>
    1ab2:	0f c0       	rjmp	.+30     	; 0x1ad2 <__vector_3+0xba>
		}
	}
	else if(last_channel_2 == 1){                                //Input 9 is not high and changed from 1 to 0
    1ab4:	21 30       	cpi	r18, 0x01	; 1
    1ab6:	69 f4       	brne	.+26     	; 0x1ad2 <__vector_3+0xba>
		last_channel_2 = 0;                                        //Remember current input state
    1ab8:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <last_channel_2>
		receiver_input_channel_2 = current_time - timer_2;         //Channel 2 is current_time - timer_2
    1abc:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <timer_2>
    1ac0:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <timer_2+0x1>
    1ac4:	ab 01       	movw	r20, r22
    1ac6:	42 1b       	sub	r20, r18
    1ac8:	53 0b       	sbc	r21, r19
    1aca:	50 93 83 01 	sts	0x0183, r21	; 0x800183 <receiver_input_channel_2+0x1>
    1ace:	40 93 82 01 	sts	0x0182, r20	; 0x800182 <receiver_input_channel_2>
    1ad2:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <last_channel_3>
	}
	//Channel 3=========================================
	if(PINB & B00000100 ){                                       //Is input 10 high?
    1ad6:	1a 9b       	sbis	0x03, 2	; 3
    1ad8:	0e c0       	rjmp	.+28     	; 0x1af6 <__vector_3+0xde>
		if(last_channel_3 == 0){                                   //Input 10 changed from 0 to 1
    1ada:	21 11       	cpse	r18, r1
    1adc:	1b c0       	rjmp	.+54     	; 0x1b14 <__vector_3+0xfc>
			last_channel_3 = 1;                                      //Remember current input state
    1ade:	21 e0       	ldi	r18, 0x01	; 1
    1ae0:	20 93 96 01 	sts	0x0196, r18	; 0x800196 <last_channel_3>
			timer_3 = current_time;                                  //Set timer_3 to current_time
    1ae4:	60 93 52 01 	sts	0x0152, r22	; 0x800152 <timer_3>
    1ae8:	70 93 53 01 	sts	0x0153, r23	; 0x800153 <timer_3+0x1>
    1aec:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timer_3+0x2>
    1af0:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timer_3+0x3>
    1af4:	0f c0       	rjmp	.+30     	; 0x1b14 <__vector_3+0xfc>
		}
	}
	else if(last_channel_3 == 1){                                //Input 10 is not high and changed from 1 to 0
    1af6:	21 30       	cpi	r18, 0x01	; 1
    1af8:	69 f4       	brne	.+26     	; 0x1b14 <__vector_3+0xfc>
		last_channel_3 = 0;                                        //Remember current input state
    1afa:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <last_channel_3>
		receiver_input_channel_3 = current_time - timer_3;         //Channel 3 is current_time - timer_3
    1afe:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <timer_3>
    1b02:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <timer_3+0x1>
    1b06:	ab 01       	movw	r20, r22
    1b08:	42 1b       	sub	r20, r18
    1b0a:	53 0b       	sbc	r21, r19
    1b0c:	50 93 81 01 	sts	0x0181, r21	; 0x800181 <receiver_input_channel_3+0x1>
    1b10:	40 93 80 01 	sts	0x0180, r20	; 0x800180 <receiver_input_channel_3>
    1b14:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <last_channel_4>

	}
	//Channel 4=========================================
	if(PINB & B00001000 ){                                       //Is input 11 high?
    1b18:	1b 9b       	sbis	0x03, 3	; 3
    1b1a:	0e c0       	rjmp	.+28     	; 0x1b38 <__vector_3+0x120>
		if(last_channel_4 == 0){                                   //Input 11 changed from 0 to 1
    1b1c:	21 11       	cpse	r18, r1
    1b1e:	1a c0       	rjmp	.+52     	; 0x1b54 <__vector_3+0x13c>
			last_channel_4 = 1;                                      //Remember current input state
    1b20:	21 e0       	ldi	r18, 0x01	; 1
    1b22:	20 93 95 01 	sts	0x0195, r18	; 0x800195 <last_channel_4>
			timer_4 = current_time;                                  //Set timer_4 to current_time
    1b26:	60 93 4e 01 	sts	0x014E, r22	; 0x80014e <timer_4>
    1b2a:	70 93 4f 01 	sts	0x014F, r23	; 0x80014f <timer_4+0x1>
    1b2e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timer_4+0x2>
    1b32:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timer_4+0x3>
    1b36:	0e c0       	rjmp	.+28     	; 0x1b54 <__vector_3+0x13c>
		}
	}
	else if(last_channel_4 == 1){                                //Input 11 is not high and changed from 1 to 0
    1b38:	21 30       	cpi	r18, 0x01	; 1
    1b3a:	61 f4       	brne	.+24     	; 0x1b54 <__vector_3+0x13c>
		last_channel_4 = 0;                                        //Remember current input state
    1b3c:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <last_channel_4>
		receiver_input_channel_4 = current_time - timer_4;         //Channel 4 is current_time - timer_4
    1b40:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <timer_4>
    1b44:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <timer_4+0x1>
    1b48:	62 1b       	sub	r22, r18
    1b4a:	73 0b       	sbc	r23, r19
    1b4c:	70 93 7f 01 	sts	0x017F, r23	; 0x80017f <receiver_input_channel_4+0x1>
    1b50:	60 93 7e 01 	sts	0x017E, r22	; 0x80017e <receiver_input_channel_4>
	}
}
    1b54:	ff 91       	pop	r31
    1b56:	ef 91       	pop	r30
    1b58:	bf 91       	pop	r27
    1b5a:	af 91       	pop	r26
    1b5c:	9f 91       	pop	r25
    1b5e:	8f 91       	pop	r24
    1b60:	7f 91       	pop	r23
    1b62:	6f 91       	pop	r22
    1b64:	5f 91       	pop	r21
    1b66:	4f 91       	pop	r20
    1b68:	3f 91       	pop	r19
    1b6a:	2f 91       	pop	r18
    1b6c:	0f 90       	pop	r0
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	0f 90       	pop	r0
    1b72:	1f 90       	pop	r1
    1b74:	18 95       	reti

00001b76 <_Z5introv>:

//Intro subroutine
void intro(){
	Serial.println(F("==================================================="));
    1b76:	6b e1       	ldi	r22, 0x1B	; 27
    1b78:	71 e0       	ldi	r23, 0x01	; 1
    1b7a:	89 e9       	ldi	r24, 0x99	; 153
    1b7c:	91 e0       	ldi	r25, 0x01	; 1
    1b7e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	delay(1500);
    1b82:	6c ed       	ldi	r22, 0xDC	; 220
    1b84:	75 e0       	ldi	r23, 0x05	; 5
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
	Serial.println(F(""));
    1b8e:	6a e1       	ldi	r22, 0x1A	; 26
    1b90:	71 e0       	ldi	r23, 0x01	; 1
    1b92:	89 e9       	ldi	r24, 0x99	; 153
    1b94:	91 e0       	ldi	r25, 0x01	; 1
    1b96:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println(F("Your"));
    1b9a:	65 e1       	ldi	r22, 0x15	; 21
    1b9c:	71 e0       	ldi	r23, 0x01	; 1
    1b9e:	89 e9       	ldi	r24, 0x99	; 153
    1ba0:	91 e0       	ldi	r25, 0x01	; 1
    1ba2:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	delay(500);
    1ba6:	64 ef       	ldi	r22, 0xF4	; 244
    1ba8:	71 e0       	ldi	r23, 0x01	; 1
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
	Serial.println(F("  Multicopter"));
    1bb2:	67 e0       	ldi	r22, 0x07	; 7
    1bb4:	71 e0       	ldi	r23, 0x01	; 1
    1bb6:	89 e9       	ldi	r24, 0x99	; 153
    1bb8:	91 e0       	ldi	r25, 0x01	; 1
    1bba:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	delay(500);
    1bbe:	64 ef       	ldi	r22, 0xF4	; 244
    1bc0:	71 e0       	ldi	r23, 0x01	; 1
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
	Serial.println(F("    Flight"));
    1bca:	6c ef       	ldi	r22, 0xFC	; 252
    1bcc:	70 e0       	ldi	r23, 0x00	; 0
    1bce:	89 e9       	ldi	r24, 0x99	; 153
    1bd0:	91 e0       	ldi	r25, 0x01	; 1
    1bd2:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	delay(500);
    1bd6:	64 ef       	ldi	r22, 0xF4	; 244
    1bd8:	71 e0       	ldi	r23, 0x01	; 1
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
	Serial.println(F("      Controller"));
    1be2:	6b ee       	ldi	r22, 0xEB	; 235
    1be4:	70 e0       	ldi	r23, 0x00	; 0
    1be6:	89 e9       	ldi	r24, 0x99	; 153
    1be8:	91 e0       	ldi	r25, 0x01	; 1
    1bea:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	delay(1000);
    1bee:	68 ee       	ldi	r22, 0xE8	; 232
    1bf0:	73 e0       	ldi	r23, 0x03	; 3
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
	Serial.println(F(""));
    1bfa:	6a ee       	ldi	r22, 0xEA	; 234
    1bfc:	70 e0       	ldi	r23, 0x00	; 0
    1bfe:	89 e9       	ldi	r24, 0x99	; 153
    1c00:	91 e0       	ldi	r25, 0x01	; 1
    1c02:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println(F("YMFC-AL Setup Program"));
    1c06:	64 ed       	ldi	r22, 0xD4	; 212
    1c08:	70 e0       	ldi	r23, 0x00	; 0
    1c0a:	89 e9       	ldi	r24, 0x99	; 153
    1c0c:	91 e0       	ldi	r25, 0x01	; 1
    1c0e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println(F(""));
    1c12:	63 ed       	ldi	r22, 0xD3	; 211
    1c14:	70 e0       	ldi	r23, 0x00	; 0
    1c16:	89 e9       	ldi	r24, 0x99	; 153
    1c18:	91 e0       	ldi	r25, 0x01	; 1
    1c1a:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println(F("==================================================="));
    1c1e:	6f e9       	ldi	r22, 0x9F	; 159
    1c20:	70 e0       	ldi	r23, 0x00	; 0
    1c22:	89 e9       	ldi	r24, 0x99	; 153
    1c24:	91 e0       	ldi	r25, 0x01	; 1
    1c26:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	delay(1500);
    1c2a:	6c ed       	ldi	r22, 0xDC	; 220
    1c2c:	75 e0       	ldi	r23, 0x05	; 5
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
	Serial.println(F("For support and questions: www.brokking.net"));
    1c36:	63 e7       	ldi	r22, 0x73	; 115
    1c38:	70 e0       	ldi	r23, 0x00	; 0
    1c3a:	89 e9       	ldi	r24, 0x99	; 153
    1c3c:	91 e0       	ldi	r25, 0x01	; 1
    1c3e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println(F(""));
    1c42:	62 e7       	ldi	r22, 0x72	; 114
    1c44:	70 e0       	ldi	r23, 0x00	; 0
    1c46:	89 e9       	ldi	r24, 0x99	; 153
    1c48:	91 e0       	ldi	r25, 0x01	; 1
    1c4a:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println(F("Have fun!"));
    1c4e:	68 e6       	ldi	r22, 0x68	; 104
    1c50:	70 e0       	ldi	r23, 0x00	; 0
    1c52:	89 e9       	ldi	r24, 0x99	; 153
    1c54:	91 e0       	ldi	r25, 0x01	; 1
    1c56:	0c 94 eb 20 	jmp	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>

00001c5a <_Z11search_gyroii>:
	}
	while(1);
}

//Search for the gyro and check the Who_am_I register
byte search_gyro(int gyro_address, int who_am_i){
    1c5a:	cf 92       	push	r12
    1c5c:	df 92       	push	r13
    1c5e:	ef 92       	push	r14
    1c60:	ff 92       	push	r15
    1c62:	cf 93       	push	r28
    1c64:	df 93       	push	r29
    1c66:	ec 01       	movw	r28, r24
    1c68:	7b 01       	movw	r14, r22
	Wire.beginTransmission(gyro_address);
    1c6a:	bc 01       	movw	r22, r24
    1c6c:	86 e3       	ldi	r24, 0x36	; 54
    1c6e:	92 e0       	ldi	r25, 0x02	; 2
    1c70:	0e 94 92 23 	call	0x4724	; 0x4724 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(who_am_i);
    1c74:	b7 01       	movw	r22, r14
    1c76:	86 e3       	ldi	r24, 0x36	; 54
    1c78:	92 e0       	ldi	r25, 0x02	; 2
    1c7a:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    1c7e:	86 e3       	ldi	r24, 0x36	; 54
    1c80:	92 e0       	ldi	r25, 0x02	; 2
    1c82:	0e 94 0e 24 	call	0x481c	; 0x481c <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(gyro_address, 1);
    1c86:	41 e0       	ldi	r20, 0x01	; 1
    1c88:	50 e0       	ldi	r21, 0x00	; 0
    1c8a:	be 01       	movw	r22, r28
    1c8c:	86 e3       	ldi	r24, 0x36	; 54
    1c8e:	92 e0       	ldi	r25, 0x02	; 2
    1c90:	0e 94 0b 24 	call	0x4816	; 0x4816 <_ZN7TwoWire11requestFromEii>
	timer = millis() + 1000;
    1c94:	0e 94 5f 24 	call	0x48be	; 0x48be <millis>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	88 51       	subi	r24, 0x18	; 24
    1c9e:	9c 4f       	sbci	r25, 0xFC	; 252
    1ca0:	af 4f       	sbci	r26, 0xFF	; 255
    1ca2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ca4:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <timer>
    1ca8:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <timer+0x1>
    1cac:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <timer+0x2>
    1cb0:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <timer+0x3>
	while(Wire.available() < 1 && timer > millis());
    1cb4:	86 e3       	ldi	r24, 0x36	; 54
    1cb6:	92 e0       	ldi	r25, 0x02	; 2
    1cb8:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <_ZN7TwoWire9availableEv>
    1cbc:	18 16       	cp	r1, r24
    1cbe:	19 06       	cpc	r1, r25
    1cc0:	d4 f4       	brge	.+52     	; 0x1cf6 <_Z11search_gyroii+0x9c>
	lowByte = Wire.read();
    1cc2:	86 e3       	ldi	r24, 0x36	; 54
    1cc4:	92 e0       	ldi	r25, 0x02	; 2
    1cc6:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <_ZN7TwoWire4readEv>
    1cca:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <lowByte>
	address = gyro_address;
    1cce:	d0 93 65 01 	sts	0x0165, r29	; 0x800165 <address+0x1>
    1cd2:	c0 93 64 01 	sts	0x0164, r28	; 0x800164 <address>
	Serial.println(lowByte);
    1cd6:	4a e0       	ldi	r20, 0x0A	; 10
    1cd8:	50 e0       	ldi	r21, 0x00	; 0
    1cda:	68 2f       	mov	r22, r24
    1cdc:	89 e9       	ldi	r24, 0x99	; 153
    1cde:	91 e0       	ldi	r25, 0x01	; 1
    1ce0:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <_ZN5Print7printlnEhi>
	return lowByte;
    1ce4:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <lowByte>
}
    1ce8:	df 91       	pop	r29
    1cea:	cf 91       	pop	r28
    1cec:	ff 90       	pop	r15
    1cee:	ef 90       	pop	r14
    1cf0:	df 90       	pop	r13
    1cf2:	cf 90       	pop	r12
    1cf4:	08 95       	ret
	Wire.beginTransmission(gyro_address);
	Wire.write(who_am_i);
	Wire.endTransmission();
	Wire.requestFrom(gyro_address, 1);
	timer = millis() + 1000;
	while(Wire.available() < 1 && timer > millis());
    1cf6:	c0 90 5e 01 	lds	r12, 0x015E	; 0x80015e <timer>
    1cfa:	d0 90 5f 01 	lds	r13, 0x015F	; 0x80015f <timer+0x1>
    1cfe:	e0 90 60 01 	lds	r14, 0x0160	; 0x800160 <timer+0x2>
    1d02:	f0 90 61 01 	lds	r15, 0x0161	; 0x800161 <timer+0x3>
    1d06:	0e 94 5f 24 	call	0x48be	; 0x48be <millis>
    1d0a:	6c 15       	cp	r22, r12
    1d0c:	7d 05       	cpc	r23, r13
    1d0e:	8e 05       	cpc	r24, r14
    1d10:	9f 05       	cpc	r25, r15
    1d12:	80 f2       	brcs	.-96     	; 0x1cb4 <_Z11search_gyroii+0x5a>
    1d14:	d6 cf       	rjmp	.-84     	; 0x1cc2 <_Z11search_gyroii+0x68>

00001d16 <_Z10start_gyrov>:
	return lowByte;
}

void start_gyro(){
	//Setup the L3G4200D or L3GD20H
	if(type == 2 || type == 3){
    1d16:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <type>
    1d1a:	82 50       	subi	r24, 0x02	; 2
    1d1c:	82 30       	cpi	r24, 0x02	; 2
    1d1e:	08 f0       	brcs	.+2      	; 0x1d22 <_Z10start_gyrov+0xc>
    1d20:	98 c0       	rjmp	.+304    	; 0x1e52 <_Z10start_gyrov+0x13c>
		Wire.beginTransmission(address);                             //Start communication with the gyro with the address found during search
    1d22:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <address>
    1d26:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <address+0x1>
    1d2a:	86 e3       	ldi	r24, 0x36	; 54
    1d2c:	92 e0       	ldi	r25, 0x02	; 2
    1d2e:	0e 94 92 23 	call	0x4724	; 0x4724 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x20);                                            //We want to write to register 1 (20 hex)
    1d32:	60 e2       	ldi	r22, 0x20	; 32
    1d34:	70 e0       	ldi	r23, 0x00	; 0
    1d36:	86 e3       	ldi	r24, 0x36	; 54
    1d38:	92 e0       	ldi	r25, 0x02	; 2
    1d3a:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZN7TwoWire5writeEi>
		Wire.write(0x0F);                                            //Set the register bits as 00001111 (Turn on the gyro and enable all axis)
    1d3e:	6f e0       	ldi	r22, 0x0F	; 15
    1d40:	70 e0       	ldi	r23, 0x00	; 0
    1d42:	86 e3       	ldi	r24, 0x36	; 54
    1d44:	92 e0       	ldi	r25, 0x02	; 2
    1d46:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro
    1d4a:	86 e3       	ldi	r24, 0x36	; 54
    1d4c:	92 e0       	ldi	r25, 0x02	; 2
    1d4e:	0e 94 0e 24 	call	0x481c	; 0x481c <_ZN7TwoWire15endTransmissionEv>

		Wire.beginTransmission(address);                             //Start communication with the gyro (adress 1101001)
    1d52:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <address>
    1d56:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <address+0x1>
    1d5a:	86 e3       	ldi	r24, 0x36	; 54
    1d5c:	92 e0       	ldi	r25, 0x02	; 2
    1d5e:	0e 94 92 23 	call	0x4724	; 0x4724 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x20);                                            //Start reading @ register 28h and auto increment with every read
    1d62:	60 e2       	ldi	r22, 0x20	; 32
    1d64:	70 e0       	ldi	r23, 0x00	; 0
    1d66:	86 e3       	ldi	r24, 0x36	; 54
    1d68:	92 e0       	ldi	r25, 0x02	; 2
    1d6a:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission
    1d6e:	86 e3       	ldi	r24, 0x36	; 54
    1d70:	92 e0       	ldi	r25, 0x02	; 2
    1d72:	0e 94 0e 24 	call	0x481c	; 0x481c <_ZN7TwoWire15endTransmissionEv>
		Wire.requestFrom(address, 1);                                //Request 6 bytes from the gyro
    1d76:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <address>
    1d7a:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <address+0x1>
    1d7e:	41 e0       	ldi	r20, 0x01	; 1
    1d80:	50 e0       	ldi	r21, 0x00	; 0
    1d82:	86 e3       	ldi	r24, 0x36	; 54
    1d84:	92 e0       	ldi	r25, 0x02	; 2
    1d86:	0e 94 0b 24 	call	0x4816	; 0x4816 <_ZN7TwoWire11requestFromEii>
		while(Wire.available() < 1);                                 //Wait until the 1 byte is received
    1d8a:	86 e3       	ldi	r24, 0x36	; 54
    1d8c:	92 e0       	ldi	r25, 0x02	; 2
    1d8e:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <_ZN7TwoWire9availableEv>
    1d92:	18 16       	cp	r1, r24
    1d94:	19 06       	cpc	r1, r25
    1d96:	cc f7       	brge	.-14     	; 0x1d8a <_Z10start_gyrov+0x74>
		Serial.print(F("Register 0x20 is set to:"));
    1d98:	68 e6       	ldi	r22, 0x68	; 104
    1d9a:	72 e0       	ldi	r23, 0x02	; 2
    1d9c:	89 e9       	ldi	r24, 0x99	; 153
    1d9e:	91 e0       	ldi	r25, 0x01	; 1
    1da0:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(Wire.read(),BIN);
    1da4:	86 e3       	ldi	r24, 0x36	; 54
    1da6:	92 e0       	ldi	r25, 0x02	; 2
    1da8:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <_ZN7TwoWire4readEv>
    1dac:	42 e0       	ldi	r20, 0x02	; 2
    1dae:	50 e0       	ldi	r21, 0x00	; 0
    1db0:	bc 01       	movw	r22, r24
    1db2:	89 e9       	ldi	r24, 0x99	; 153
    1db4:	91 e0       	ldi	r25, 0x01	; 1
    1db6:	0e 94 b4 21 	call	0x4368	; 0x4368 <_ZN5Print7printlnEii>

		Wire.beginTransmission(address);                             //Start communication with the gyro  with the address found during search
    1dba:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <address>
    1dbe:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <address+0x1>
    1dc2:	86 e3       	ldi	r24, 0x36	; 54
    1dc4:	92 e0       	ldi	r25, 0x02	; 2
    1dc6:	0e 94 92 23 	call	0x4724	; 0x4724 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x23);                                            //We want to write to register 4 (23 hex)
    1dca:	63 e2       	ldi	r22, 0x23	; 35
    1dcc:	70 e0       	ldi	r23, 0x00	; 0
    1dce:	86 e3       	ldi	r24, 0x36	; 54
    1dd0:	92 e0       	ldi	r25, 0x02	; 2
    1dd2:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZN7TwoWire5writeEi>
		Wire.write(0x90);                                            //Set the register bits as 10010000 (Block Data Update active & 500dps full scale)
    1dd6:	60 e9       	ldi	r22, 0x90	; 144
    1dd8:	70 e0       	ldi	r23, 0x00	; 0
    1dda:	86 e3       	ldi	r24, 0x36	; 54
    1ddc:	92 e0       	ldi	r25, 0x02	; 2
    1dde:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro
    1de2:	86 e3       	ldi	r24, 0x36	; 54
    1de4:	92 e0       	ldi	r25, 0x02	; 2
    1de6:	0e 94 0e 24 	call	0x481c	; 0x481c <_ZN7TwoWire15endTransmissionEv>
		
		Wire.beginTransmission(address);                             //Start communication with the gyro (adress 1101001)
    1dea:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <address>
    1dee:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <address+0x1>
    1df2:	86 e3       	ldi	r24, 0x36	; 54
    1df4:	92 e0       	ldi	r25, 0x02	; 2
    1df6:	0e 94 92 23 	call	0x4724	; 0x4724 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x23);                                            //Start reading @ register 28h and auto increment with every read
    1dfa:	63 e2       	ldi	r22, 0x23	; 35
    1dfc:	70 e0       	ldi	r23, 0x00	; 0
    1dfe:	86 e3       	ldi	r24, 0x36	; 54
    1e00:	92 e0       	ldi	r25, 0x02	; 2
    1e02:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission
    1e06:	86 e3       	ldi	r24, 0x36	; 54
    1e08:	92 e0       	ldi	r25, 0x02	; 2
    1e0a:	0e 94 0e 24 	call	0x481c	; 0x481c <_ZN7TwoWire15endTransmissionEv>
		Wire.requestFrom(address, 1);                                //Request 6 bytes from the gyro
    1e0e:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <address>
    1e12:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <address+0x1>
    1e16:	41 e0       	ldi	r20, 0x01	; 1
    1e18:	50 e0       	ldi	r21, 0x00	; 0
    1e1a:	86 e3       	ldi	r24, 0x36	; 54
    1e1c:	92 e0       	ldi	r25, 0x02	; 2
    1e1e:	0e 94 0b 24 	call	0x4816	; 0x4816 <_ZN7TwoWire11requestFromEii>
		while(Wire.available() < 1);                                 //Wait until the 1 byte is received
    1e22:	86 e3       	ldi	r24, 0x36	; 54
    1e24:	92 e0       	ldi	r25, 0x02	; 2
    1e26:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <_ZN7TwoWire9availableEv>
    1e2a:	18 16       	cp	r1, r24
    1e2c:	19 06       	cpc	r1, r25
    1e2e:	cc f7       	brge	.-14     	; 0x1e22 <_Z10start_gyrov+0x10c>
		Serial.print(F("Register 0x23 is set to:"));
    1e30:	6f e4       	ldi	r22, 0x4F	; 79
    1e32:	72 e0       	ldi	r23, 0x02	; 2
    1e34:	89 e9       	ldi	r24, 0x99	; 153
    1e36:	91 e0       	ldi	r25, 0x01	; 1
    1e38:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(Wire.read(),BIN);
    1e3c:	86 e3       	ldi	r24, 0x36	; 54
    1e3e:	92 e0       	ldi	r25, 0x02	; 2
    1e40:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <_ZN7TwoWire4readEv>
    1e44:	42 e0       	ldi	r20, 0x02	; 2
    1e46:	50 e0       	ldi	r21, 0x00	; 0
    1e48:	bc 01       	movw	r22, r24
    1e4a:	89 e9       	ldi	r24, 0x99	; 153
    1e4c:	91 e0       	ldi	r25, 0x01	; 1
    1e4e:	0e 94 b4 21 	call	0x4368	; 0x4368 <_ZN5Print7printlnEii>

	}
	//Setup the MPU-6050
	if(type == 1){
    1e52:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <type>
    1e56:	81 30       	cpi	r24, 0x01	; 1
    1e58:	09 f0       	breq	.+2      	; 0x1e5c <_Z10start_gyrov+0x146>
    1e5a:	98 c0       	rjmp	.+304    	; 0x1f8c <_Z10start_gyrov+0x276>
		
		Wire.beginTransmission(address);                             //Start communication with the gyro
    1e5c:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <address>
    1e60:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <address+0x1>
    1e64:	86 e3       	ldi	r24, 0x36	; 54
    1e66:	92 e0       	ldi	r25, 0x02	; 2
    1e68:	0e 94 92 23 	call	0x4724	; 0x4724 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x6B);                                            //PWR_MGMT_1 register
    1e6c:	6b e6       	ldi	r22, 0x6B	; 107
    1e6e:	70 e0       	ldi	r23, 0x00	; 0
    1e70:	86 e3       	ldi	r24, 0x36	; 54
    1e72:	92 e0       	ldi	r25, 0x02	; 2
    1e74:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZN7TwoWire5writeEi>
		Wire.write(0x00);                                            //Set to zero to turn on the gyro
    1e78:	60 e0       	ldi	r22, 0x00	; 0
    1e7a:	70 e0       	ldi	r23, 0x00	; 0
    1e7c:	86 e3       	ldi	r24, 0x36	; 54
    1e7e:	92 e0       	ldi	r25, 0x02	; 2
    1e80:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission
    1e84:	86 e3       	ldi	r24, 0x36	; 54
    1e86:	92 e0       	ldi	r25, 0x02	; 2
    1e88:	0e 94 0e 24 	call	0x481c	; 0x481c <_ZN7TwoWire15endTransmissionEv>
		
		Wire.beginTransmission(address);                             //Start communication with the gyro
    1e8c:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <address>
    1e90:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <address+0x1>
    1e94:	86 e3       	ldi	r24, 0x36	; 54
    1e96:	92 e0       	ldi	r25, 0x02	; 2
    1e98:	0e 94 92 23 	call	0x4724	; 0x4724 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x6B);                                            //Start reading @ register 28h and auto increment with every read
    1e9c:	6b e6       	ldi	r22, 0x6B	; 107
    1e9e:	70 e0       	ldi	r23, 0x00	; 0
    1ea0:	86 e3       	ldi	r24, 0x36	; 54
    1ea2:	92 e0       	ldi	r25, 0x02	; 2
    1ea4:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission
    1ea8:	86 e3       	ldi	r24, 0x36	; 54
    1eaa:	92 e0       	ldi	r25, 0x02	; 2
    1eac:	0e 94 0e 24 	call	0x481c	; 0x481c <_ZN7TwoWire15endTransmissionEv>
		Wire.requestFrom(address, 1);                                //Request 1 bytes from the gyro
    1eb0:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <address>
    1eb4:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <address+0x1>
    1eb8:	41 e0       	ldi	r20, 0x01	; 1
    1eba:	50 e0       	ldi	r21, 0x00	; 0
    1ebc:	86 e3       	ldi	r24, 0x36	; 54
    1ebe:	92 e0       	ldi	r25, 0x02	; 2
    1ec0:	0e 94 0b 24 	call	0x4816	; 0x4816 <_ZN7TwoWire11requestFromEii>
		while(Wire.available() < 1);                                 //Wait until the 1 byte is received
    1ec4:	86 e3       	ldi	r24, 0x36	; 54
    1ec6:	92 e0       	ldi	r25, 0x02	; 2
    1ec8:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <_ZN7TwoWire9availableEv>
    1ecc:	18 16       	cp	r1, r24
    1ece:	19 06       	cpc	r1, r25
    1ed0:	cc f7       	brge	.-14     	; 0x1ec4 <_Z10start_gyrov+0x1ae>
		Serial.print(F("Register 0x6B is set to:"));
    1ed2:	66 e3       	ldi	r22, 0x36	; 54
    1ed4:	72 e0       	ldi	r23, 0x02	; 2
    1ed6:	89 e9       	ldi	r24, 0x99	; 153
    1ed8:	91 e0       	ldi	r25, 0x01	; 1
    1eda:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(Wire.read(),BIN);
    1ede:	86 e3       	ldi	r24, 0x36	; 54
    1ee0:	92 e0       	ldi	r25, 0x02	; 2
    1ee2:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <_ZN7TwoWire4readEv>
    1ee6:	42 e0       	ldi	r20, 0x02	; 2
    1ee8:	50 e0       	ldi	r21, 0x00	; 0
    1eea:	bc 01       	movw	r22, r24
    1eec:	89 e9       	ldi	r24, 0x99	; 153
    1eee:	91 e0       	ldi	r25, 0x01	; 1
    1ef0:	0e 94 b4 21 	call	0x4368	; 0x4368 <_ZN5Print7printlnEii>
		
		Wire.beginTransmission(address);                             //Start communication with the gyro
    1ef4:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <address>
    1ef8:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <address+0x1>
    1efc:	86 e3       	ldi	r24, 0x36	; 54
    1efe:	92 e0       	ldi	r25, 0x02	; 2
    1f00:	0e 94 92 23 	call	0x4724	; 0x4724 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x1B);                                            //GYRO_CONFIG register
    1f04:	6b e1       	ldi	r22, 0x1B	; 27
    1f06:	70 e0       	ldi	r23, 0x00	; 0
    1f08:	86 e3       	ldi	r24, 0x36	; 54
    1f0a:	92 e0       	ldi	r25, 0x02	; 2
    1f0c:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZN7TwoWire5writeEi>
		Wire.write(0x08);                                            //Set the register bits as 00001000 (500dps full scale)
    1f10:	68 e0       	ldi	r22, 0x08	; 8
    1f12:	70 e0       	ldi	r23, 0x00	; 0
    1f14:	86 e3       	ldi	r24, 0x36	; 54
    1f16:	92 e0       	ldi	r25, 0x02	; 2
    1f18:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission
    1f1c:	86 e3       	ldi	r24, 0x36	; 54
    1f1e:	92 e0       	ldi	r25, 0x02	; 2
    1f20:	0e 94 0e 24 	call	0x481c	; 0x481c <_ZN7TwoWire15endTransmissionEv>
		
		Wire.beginTransmission(address);                             //Start communication with the gyro (adress 1101001)
    1f24:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <address>
    1f28:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <address+0x1>
    1f2c:	86 e3       	ldi	r24, 0x36	; 54
    1f2e:	92 e0       	ldi	r25, 0x02	; 2
    1f30:	0e 94 92 23 	call	0x4724	; 0x4724 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x1B);                                            //Start reading @ register 28h and auto increment with every read
    1f34:	6b e1       	ldi	r22, 0x1B	; 27
    1f36:	70 e0       	ldi	r23, 0x00	; 0
    1f38:	86 e3       	ldi	r24, 0x36	; 54
    1f3a:	92 e0       	ldi	r25, 0x02	; 2
    1f3c:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission
    1f40:	86 e3       	ldi	r24, 0x36	; 54
    1f42:	92 e0       	ldi	r25, 0x02	; 2
    1f44:	0e 94 0e 24 	call	0x481c	; 0x481c <_ZN7TwoWire15endTransmissionEv>
		Wire.requestFrom(address, 1);                                //Request 1 bytes from the gyro
    1f48:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <address>
    1f4c:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <address+0x1>
    1f50:	41 e0       	ldi	r20, 0x01	; 1
    1f52:	50 e0       	ldi	r21, 0x00	; 0
    1f54:	86 e3       	ldi	r24, 0x36	; 54
    1f56:	92 e0       	ldi	r25, 0x02	; 2
    1f58:	0e 94 0b 24 	call	0x4816	; 0x4816 <_ZN7TwoWire11requestFromEii>
		while(Wire.available() < 1);                                 //Wait until the 1 byte is received
    1f5c:	86 e3       	ldi	r24, 0x36	; 54
    1f5e:	92 e0       	ldi	r25, 0x02	; 2
    1f60:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <_ZN7TwoWire9availableEv>
    1f64:	18 16       	cp	r1, r24
    1f66:	19 06       	cpc	r1, r25
    1f68:	cc f7       	brge	.-14     	; 0x1f5c <_Z10start_gyrov+0x246>
		Serial.print(F("Register 0x1B is set to:"));
    1f6a:	6d e1       	ldi	r22, 0x1D	; 29
    1f6c:	72 e0       	ldi	r23, 0x02	; 2
    1f6e:	89 e9       	ldi	r24, 0x99	; 153
    1f70:	91 e0       	ldi	r25, 0x01	; 1
    1f72:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(Wire.read(),BIN);
    1f76:	86 e3       	ldi	r24, 0x36	; 54
    1f78:	92 e0       	ldi	r25, 0x02	; 2
    1f7a:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <_ZN7TwoWire4readEv>
    1f7e:	42 e0       	ldi	r20, 0x02	; 2
    1f80:	50 e0       	ldi	r21, 0x00	; 0
    1f82:	bc 01       	movw	r22, r24
    1f84:	89 e9       	ldi	r24, 0x99	; 153
    1f86:	91 e0       	ldi	r25, 0x01	; 1
    1f88:	0c 94 b4 21 	jmp	0x4368	; 0x4368 <_ZN5Print7printlnEii>
    1f8c:	08 95       	ret

00001f8e <_Z13gyro_signalenv>:

	}
}

void gyro_signalen(){
    1f8e:	ef 92       	push	r14
    1f90:	ff 92       	push	r15
    1f92:	0f 93       	push	r16
    1f94:	1f 93       	push	r17
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
	if(type == 2 || type == 3){
    1f9a:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <type>
    1f9e:	82 50       	subi	r24, 0x02	; 2
    1fa0:	82 30       	cpi	r24, 0x02	; 2
    1fa2:	08 f0       	brcs	.+2      	; 0x1fa6 <_Z13gyro_signalenv+0x18>
    1fa4:	ce c0       	rjmp	.+412    	; 0x2142 <_Z13gyro_signalenv+0x1b4>
		Wire.beginTransmission(address);                             //Start communication with the gyro
    1fa6:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <address>
    1faa:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <address+0x1>
    1fae:	86 e3       	ldi	r24, 0x36	; 54
    1fb0:	92 e0       	ldi	r25, 0x02	; 2
    1fb2:	0e 94 92 23 	call	0x4724	; 0x4724 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(168);                                             //Start reading @ register 28h and auto increment with every read
    1fb6:	68 ea       	ldi	r22, 0xA8	; 168
    1fb8:	70 e0       	ldi	r23, 0x00	; 0
    1fba:	86 e3       	ldi	r24, 0x36	; 54
    1fbc:	92 e0       	ldi	r25, 0x02	; 2
    1fbe:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission
    1fc2:	86 e3       	ldi	r24, 0x36	; 54
    1fc4:	92 e0       	ldi	r25, 0x02	; 2
    1fc6:	0e 94 0e 24 	call	0x481c	; 0x481c <_ZN7TwoWire15endTransmissionEv>
		Wire.requestFrom(address, 6);                                //Request 6 bytes from the gyro
    1fca:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <address>
    1fce:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <address+0x1>
    1fd2:	46 e0       	ldi	r20, 0x06	; 6
    1fd4:	50 e0       	ldi	r21, 0x00	; 0
    1fd6:	86 e3       	ldi	r24, 0x36	; 54
    1fd8:	92 e0       	ldi	r25, 0x02	; 2
    1fda:	0e 94 0b 24 	call	0x4816	; 0x4816 <_ZN7TwoWire11requestFromEii>
		while(Wire.available() < 6);                                 //Wait until the 6 bytes are received
    1fde:	86 e3       	ldi	r24, 0x36	; 54
    1fe0:	92 e0       	ldi	r25, 0x02	; 2
    1fe2:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <_ZN7TwoWire9availableEv>
    1fe6:	06 97       	sbiw	r24, 0x06	; 6
    1fe8:	d4 f3       	brlt	.-12     	; 0x1fde <_Z13gyro_signalenv+0x50>
		lowByte = Wire.read();                                       //First received byte is the low part of the angular data
    1fea:	86 e3       	ldi	r24, 0x36	; 54
    1fec:	92 e0       	ldi	r25, 0x02	; 2
    1fee:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <_ZN7TwoWire4readEv>
    1ff2:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <lowByte>
		highByte = Wire.read();                                      //Second received byte is the high part of the angular data
    1ff6:	86 e3       	ldi	r24, 0x36	; 54
    1ff8:	92 e0       	ldi	r25, 0x02	; 2
    1ffa:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <_ZN7TwoWire4readEv>
    1ffe:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <highByte>
		gyro_roll = ((highByte<<8)|lowByte);                         //Multiply highByte by 256 (shift left by 8) and ad lowByte
    2002:	f8 2e       	mov	r15, r24
    2004:	e1 2c       	mov	r14, r1
    2006:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <lowByte>
    200a:	b7 01       	movw	r22, r14
    200c:	68 2b       	or	r22, r24
    200e:	07 2e       	mov	r0, r23
    2010:	00 0c       	add	r0, r0
    2012:	88 0b       	sbc	r24, r24
    2014:	99 0b       	sbc	r25, r25
    2016:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__floatsisf>
    201a:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <gyro_roll>
    201e:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <gyro_roll+0x1>
    2022:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <gyro_roll+0x2>
    2026:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <gyro_roll+0x3>
		if(cal_int == 2000)gyro_roll -= gyro_roll_cal;               //Only compensate after the calibration
    202a:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <cal_int>
    202e:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <cal_int+0x1>
    2032:	20 3d       	cpi	r18, 0xD0	; 208
    2034:	37 40       	sbci	r19, 0x07	; 7
    2036:	91 f4       	brne	.+36     	; 0x205c <_Z13gyro_signalenv+0xce>
    2038:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <gyro_roll_cal>
    203c:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <gyro_roll_cal+0x1>
    2040:	40 91 3c 01 	lds	r20, 0x013C	; 0x80013c <gyro_roll_cal+0x2>
    2044:	50 91 3d 01 	lds	r21, 0x013D	; 0x80013d <gyro_roll_cal+0x3>
    2048:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__subsf3>
    204c:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <gyro_roll>
    2050:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <gyro_roll+0x1>
    2054:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <gyro_roll+0x2>
    2058:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <gyro_roll+0x3>
		lowByte = Wire.read();                                       //First received byte is the low part of the angular data
    205c:	86 e3       	ldi	r24, 0x36	; 54
    205e:	92 e0       	ldi	r25, 0x02	; 2
    2060:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <_ZN7TwoWire4readEv>
    2064:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <lowByte>
		highByte = Wire.read();                                      //Second received byte is the high part of the angular data
    2068:	86 e3       	ldi	r24, 0x36	; 54
    206a:	92 e0       	ldi	r25, 0x02	; 2
    206c:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <_ZN7TwoWire4readEv>
    2070:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <highByte>
		gyro_pitch = ((highByte<<8)|lowByte);                        //Multiply highByte by 256 (shift left by 8) and ad lowByte
    2074:	18 2f       	mov	r17, r24
    2076:	00 e0       	ldi	r16, 0x00	; 0
    2078:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <lowByte>
    207c:	b8 01       	movw	r22, r16
    207e:	68 2b       	or	r22, r24
    2080:	07 2e       	mov	r0, r23
    2082:	00 0c       	add	r0, r0
    2084:	88 0b       	sbc	r24, r24
    2086:	99 0b       	sbc	r25, r25
    2088:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__floatsisf>
    208c:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <gyro_pitch>
    2090:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <gyro_pitch+0x1>
    2094:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <gyro_pitch+0x2>
    2098:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <gyro_pitch+0x3>
		if(cal_int == 2000)gyro_pitch -= gyro_pitch_cal;             //Only compensate after the calibration
    209c:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <cal_int>
    20a0:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <cal_int+0x1>
    20a4:	20 3d       	cpi	r18, 0xD0	; 208
    20a6:	37 40       	sbci	r19, 0x07	; 7
    20a8:	91 f4       	brne	.+36     	; 0x20ce <_Z13gyro_signalenv+0x140>
    20aa:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <gyro_pitch_cal>
    20ae:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <gyro_pitch_cal+0x1>
    20b2:	40 91 38 01 	lds	r20, 0x0138	; 0x800138 <gyro_pitch_cal+0x2>
    20b6:	50 91 39 01 	lds	r21, 0x0139	; 0x800139 <gyro_pitch_cal+0x3>
    20ba:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__subsf3>
    20be:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <gyro_pitch>
    20c2:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <gyro_pitch+0x1>
    20c6:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <gyro_pitch+0x2>
    20ca:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <gyro_pitch+0x3>
		lowByte = Wire.read();                                       //First received byte is the low part of the angular data
    20ce:	86 e3       	ldi	r24, 0x36	; 54
    20d0:	92 e0       	ldi	r25, 0x02	; 2
    20d2:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <_ZN7TwoWire4readEv>
    20d6:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <lowByte>
		highByte = Wire.read();                                      //Second received byte is the high part of the angular data
    20da:	86 e3       	ldi	r24, 0x36	; 54
    20dc:	92 e0       	ldi	r25, 0x02	; 2
    20de:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <_ZN7TwoWire4readEv>
    20e2:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <highByte>
		gyro_yaw = ((highByte<<8)|lowByte);                          //Multiply highByte by 256 (shift left by 8) and ad lowByte
    20e6:	d8 2f       	mov	r29, r24
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	c8 2f       	mov	r28, r24
    20ec:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <lowByte>
    20f0:	be 01       	movw	r22, r28
    20f2:	68 2b       	or	r22, r24
    20f4:	07 2e       	mov	r0, r23
    20f6:	00 0c       	add	r0, r0
    20f8:	88 0b       	sbc	r24, r24
    20fa:	99 0b       	sbc	r25, r25
    20fc:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__floatsisf>
    2100:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <gyro_yaw>
    2104:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <gyro_yaw+0x1>
    2108:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <gyro_yaw+0x2>
    210c:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <gyro_yaw+0x3>
		if(cal_int == 2000)gyro_yaw -= gyro_yaw_cal;                 //Only compensate after the calibration
    2110:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <cal_int>
    2114:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <cal_int+0x1>
    2118:	20 3d       	cpi	r18, 0xD0	; 208
    211a:	37 40       	sbci	r19, 0x07	; 7
    211c:	91 f4       	brne	.+36     	; 0x2142 <_Z13gyro_signalenv+0x1b4>
    211e:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <__data_end>
    2122:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <__data_end+0x1>
    2126:	40 91 34 01 	lds	r20, 0x0134	; 0x800134 <__data_end+0x2>
    212a:	50 91 35 01 	lds	r21, 0x0135	; 0x800135 <__data_end+0x3>
    212e:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__subsf3>
    2132:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <gyro_yaw>
    2136:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <gyro_yaw+0x1>
    213a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <gyro_yaw+0x2>
    213e:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <gyro_yaw+0x3>
	}
	if(type == 1){
    2142:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <type>
    2146:	81 30       	cpi	r24, 0x01	; 1
    2148:	09 f0       	breq	.+2      	; 0x214c <_Z13gyro_signalenv+0x1be>
    214a:	c1 c0       	rjmp	.+386    	; 0x22ce <_Z13gyro_signalenv+0x340>
		Wire.beginTransmission(address);                             //Start communication with the gyro
    214c:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <address>
    2150:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <address+0x1>
    2154:	86 e3       	ldi	r24, 0x36	; 54
    2156:	92 e0       	ldi	r25, 0x02	; 2
    2158:	0e 94 92 23 	call	0x4724	; 0x4724 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x43);                                            //Start reading @ register 43h and auto increment with every read
    215c:	63 e4       	ldi	r22, 0x43	; 67
    215e:	70 e0       	ldi	r23, 0x00	; 0
    2160:	86 e3       	ldi	r24, 0x36	; 54
    2162:	92 e0       	ldi	r25, 0x02	; 2
    2164:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission
    2168:	86 e3       	ldi	r24, 0x36	; 54
    216a:	92 e0       	ldi	r25, 0x02	; 2
    216c:	0e 94 0e 24 	call	0x481c	; 0x481c <_ZN7TwoWire15endTransmissionEv>
		Wire.requestFrom(address,6);                                 //Request 6 bytes from the gyro
    2170:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <address>
    2174:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <address+0x1>
    2178:	46 e0       	ldi	r20, 0x06	; 6
    217a:	50 e0       	ldi	r21, 0x00	; 0
    217c:	86 e3       	ldi	r24, 0x36	; 54
    217e:	92 e0       	ldi	r25, 0x02	; 2
    2180:	0e 94 0b 24 	call	0x4816	; 0x4816 <_ZN7TwoWire11requestFromEii>
		while(Wire.available() < 6);                                 //Wait until the 6 bytes are received
    2184:	86 e3       	ldi	r24, 0x36	; 54
    2186:	92 e0       	ldi	r25, 0x02	; 2
    2188:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <_ZN7TwoWire9availableEv>
    218c:	06 97       	sbiw	r24, 0x06	; 6
    218e:	d4 f3       	brlt	.-12     	; 0x2184 <_Z13gyro_signalenv+0x1f6>
		gyro_roll=Wire.read()<<8|Wire.read();                        //Read high and low part of the angular data
    2190:	86 e3       	ldi	r24, 0x36	; 54
    2192:	92 e0       	ldi	r25, 0x02	; 2
    2194:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <_ZN7TwoWire4readEv>
    2198:	c8 2f       	mov	r28, r24
    219a:	86 e3       	ldi	r24, 0x36	; 54
    219c:	92 e0       	ldi	r25, 0x02	; 2
    219e:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <_ZN7TwoWire4readEv>
    21a2:	60 e0       	ldi	r22, 0x00	; 0
    21a4:	70 e0       	ldi	r23, 0x00	; 0
    21a6:	7c 2f       	mov	r23, r28
    21a8:	86 2b       	or	r24, r22
    21aa:	97 2b       	or	r25, r23
    21ac:	bc 01       	movw	r22, r24
    21ae:	99 0f       	add	r25, r25
    21b0:	88 0b       	sbc	r24, r24
    21b2:	99 0b       	sbc	r25, r25
    21b4:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__floatsisf>
    21b8:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <gyro_roll>
    21bc:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <gyro_roll+0x1>
    21c0:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <gyro_roll+0x2>
    21c4:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <gyro_roll+0x3>
		if(cal_int == 2000)gyro_roll -= gyro_roll_cal;               //Only compensate after the calibration
    21c8:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <cal_int>
    21cc:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <cal_int+0x1>
    21d0:	20 3d       	cpi	r18, 0xD0	; 208
    21d2:	37 40       	sbci	r19, 0x07	; 7
    21d4:	91 f4       	brne	.+36     	; 0x21fa <_Z13gyro_signalenv+0x26c>
    21d6:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <gyro_roll_cal>
    21da:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <gyro_roll_cal+0x1>
    21de:	40 91 3c 01 	lds	r20, 0x013C	; 0x80013c <gyro_roll_cal+0x2>
    21e2:	50 91 3d 01 	lds	r21, 0x013D	; 0x80013d <gyro_roll_cal+0x3>
    21e6:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__subsf3>
    21ea:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <gyro_roll>
    21ee:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <gyro_roll+0x1>
    21f2:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <gyro_roll+0x2>
    21f6:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <gyro_roll+0x3>
		gyro_pitch=Wire.read()<<8|Wire.read();                       //Read high and low part of the angular data
    21fa:	86 e3       	ldi	r24, 0x36	; 54
    21fc:	92 e0       	ldi	r25, 0x02	; 2
    21fe:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <_ZN7TwoWire4readEv>
    2202:	c8 2f       	mov	r28, r24
    2204:	86 e3       	ldi	r24, 0x36	; 54
    2206:	92 e0       	ldi	r25, 0x02	; 2
    2208:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <_ZN7TwoWire4readEv>
    220c:	60 e0       	ldi	r22, 0x00	; 0
    220e:	70 e0       	ldi	r23, 0x00	; 0
    2210:	7c 2f       	mov	r23, r28
    2212:	86 2b       	or	r24, r22
    2214:	97 2b       	or	r25, r23
    2216:	bc 01       	movw	r22, r24
    2218:	99 0f       	add	r25, r25
    221a:	88 0b       	sbc	r24, r24
    221c:	99 0b       	sbc	r25, r25
    221e:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__floatsisf>
    2222:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <gyro_pitch>
    2226:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <gyro_pitch+0x1>
    222a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <gyro_pitch+0x2>
    222e:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <gyro_pitch+0x3>
		if(cal_int == 2000)gyro_pitch -= gyro_pitch_cal;             //Only compensate after the calibration
    2232:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <cal_int>
    2236:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <cal_int+0x1>
    223a:	20 3d       	cpi	r18, 0xD0	; 208
    223c:	37 40       	sbci	r19, 0x07	; 7
    223e:	91 f4       	brne	.+36     	; 0x2264 <_Z13gyro_signalenv+0x2d6>
    2240:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <gyro_pitch_cal>
    2244:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <gyro_pitch_cal+0x1>
    2248:	40 91 38 01 	lds	r20, 0x0138	; 0x800138 <gyro_pitch_cal+0x2>
    224c:	50 91 39 01 	lds	r21, 0x0139	; 0x800139 <gyro_pitch_cal+0x3>
    2250:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__subsf3>
    2254:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <gyro_pitch>
    2258:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <gyro_pitch+0x1>
    225c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <gyro_pitch+0x2>
    2260:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <gyro_pitch+0x3>
		gyro_yaw=Wire.read()<<8|Wire.read();                         //Read high and low part of the angular data
    2264:	86 e3       	ldi	r24, 0x36	; 54
    2266:	92 e0       	ldi	r25, 0x02	; 2
    2268:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <_ZN7TwoWire4readEv>
    226c:	c8 2f       	mov	r28, r24
    226e:	86 e3       	ldi	r24, 0x36	; 54
    2270:	92 e0       	ldi	r25, 0x02	; 2
    2272:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <_ZN7TwoWire4readEv>
    2276:	60 e0       	ldi	r22, 0x00	; 0
    2278:	70 e0       	ldi	r23, 0x00	; 0
    227a:	7c 2f       	mov	r23, r28
    227c:	86 2b       	or	r24, r22
    227e:	97 2b       	or	r25, r23
    2280:	bc 01       	movw	r22, r24
    2282:	99 0f       	add	r25, r25
    2284:	88 0b       	sbc	r24, r24
    2286:	99 0b       	sbc	r25, r25
    2288:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__floatsisf>
    228c:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <gyro_yaw>
    2290:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <gyro_yaw+0x1>
    2294:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <gyro_yaw+0x2>
    2298:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <gyro_yaw+0x3>
		if(cal_int == 2000)gyro_yaw -= gyro_yaw_cal;                 //Only compensate after the calibration
    229c:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <cal_int>
    22a0:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <cal_int+0x1>
    22a4:	20 3d       	cpi	r18, 0xD0	; 208
    22a6:	37 40       	sbci	r19, 0x07	; 7
    22a8:	91 f4       	brne	.+36     	; 0x22ce <_Z13gyro_signalenv+0x340>
    22aa:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <__data_end>
    22ae:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <__data_end+0x1>
    22b2:	40 91 34 01 	lds	r20, 0x0134	; 0x800134 <__data_end+0x2>
    22b6:	50 91 35 01 	lds	r21, 0x0135	; 0x800135 <__data_end+0x3>
    22ba:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__subsf3>
    22be:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <gyro_yaw>
    22c2:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <gyro_yaw+0x1>
    22c6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <gyro_yaw+0x2>
    22ca:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <gyro_yaw+0x3>
	}
}
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	1f 91       	pop	r17
    22d4:	0f 91       	pop	r16
    22d6:	ff 90       	pop	r15
    22d8:	ef 90       	pop	r14
    22da:	08 95       	ret

000022dc <_Z15check_gyro_axesh>:
		delay(100);
	}
}

//Check if the angular position of a gyro axis is changing within 10 seconds
void check_gyro_axes(byte movement){
    22dc:	4f 92       	push	r4
    22de:	5f 92       	push	r5
    22e0:	6f 92       	push	r6
    22e2:	7f 92       	push	r7
    22e4:	8f 92       	push	r8
    22e6:	9f 92       	push	r9
    22e8:	af 92       	push	r10
    22ea:	bf 92       	push	r11
    22ec:	cf 92       	push	r12
    22ee:	df 92       	push	r13
    22f0:	ef 92       	push	r14
    22f2:	ff 92       	push	r15
    22f4:	0f 93       	push	r16
    22f6:	1f 93       	push	r17
    22f8:	cf 93       	push	r28
    22fa:	df 93       	push	r29
    22fc:	00 d0       	rcall	.+0      	; 0x22fe <_Z15check_gyro_axesh+0x22>
    22fe:	00 d0       	rcall	.+0      	; 0x2300 <_Z15check_gyro_axesh+0x24>
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
    2304:	08 2f       	mov	r16, r24
	float gyro_angle_roll, gyro_angle_pitch, gyro_angle_yaw;
	//Reset all axes
	gyro_angle_roll = 0;
	gyro_angle_pitch = 0;
	gyro_angle_yaw = 0;
	gyro_signalen();
    2306:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <_Z13gyro_signalenv>
	timer = millis() + 10000;
    230a:	0e 94 5f 24 	call	0x48be	; 0x48be <millis>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	80 5f       	subi	r24, 0xF0	; 240
    2314:	98 4d       	sbci	r25, 0xD8	; 216
    2316:	af 4f       	sbci	r26, 0xFF	; 255
    2318:	bf 4f       	sbci	r27, 0xFF	; 255
    231a:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <timer>
    231e:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <timer+0x1>
    2322:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <timer+0x2>
    2326:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <timer+0x3>
	byte trigger_axis = 0;
	float gyro_angle_roll, gyro_angle_pitch, gyro_angle_yaw;
	//Reset all axes
	gyro_angle_roll = 0;
	gyro_angle_pitch = 0;
	gyro_angle_yaw = 0;
    232a:	81 2c       	mov	r8, r1
    232c:	91 2c       	mov	r9, r1
    232e:	54 01       	movw	r10, r8
void check_gyro_axes(byte movement){
	byte trigger_axis = 0;
	float gyro_angle_roll, gyro_angle_pitch, gyro_angle_yaw;
	//Reset all axes
	gyro_angle_roll = 0;
	gyro_angle_pitch = 0;
    2330:	24 01       	movw	r4, r8
    2332:	35 01       	movw	r6, r10
//Check if the angular position of a gyro axis is changing within 10 seconds
void check_gyro_axes(byte movement){
	byte trigger_axis = 0;
	float gyro_angle_roll, gyro_angle_pitch, gyro_angle_yaw;
	//Reset all axes
	gyro_angle_roll = 0;
    2334:	75 01       	movw	r14, r10
    2336:	64 01       	movw	r12, r8
	gyro_angle_pitch = 0;
	gyro_angle_yaw = 0;
	gyro_signalen();
	timer = millis() + 10000;
	while(timer > millis() && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30){
    2338:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <timer>
    233c:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <timer+0x1>
    2340:	40 91 60 01 	lds	r20, 0x0160	; 0x800160 <timer+0x2>
    2344:	50 91 61 01 	lds	r21, 0x0161	; 0x800161 <timer+0x3>
    2348:	29 83       	std	Y+1, r18	; 0x01
    234a:	3a 83       	std	Y+2, r19	; 0x02
    234c:	4b 83       	std	Y+3, r20	; 0x03
    234e:	5c 83       	std	Y+4, r21	; 0x04
    2350:	0e 94 5f 24 	call	0x48be	; 0x48be <millis>
    2354:	29 81       	ldd	r18, Y+1	; 0x01
    2356:	3a 81       	ldd	r19, Y+2	; 0x02
    2358:	4b 81       	ldd	r20, Y+3	; 0x03
    235a:	5c 81       	ldd	r21, Y+4	; 0x04
    235c:	62 17       	cp	r22, r18
    235e:	73 07       	cpc	r23, r19
    2360:	84 07       	cpc	r24, r20
    2362:	95 07       	cpc	r25, r21
    2364:	08 f0       	brcs	.+2      	; 0x2368 <_Z15check_gyro_axesh+0x8c>
    2366:	49 c0       	rjmp	.+146    	; 0x23fa <_Z15check_gyro_axesh+0x11e>
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 ef       	ldi	r20, 0xF0	; 240
    236e:	51 ec       	ldi	r21, 0xC1	; 193
    2370:	c7 01       	movw	r24, r14
    2372:	b6 01       	movw	r22, r12
    2374:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <__gesf2>
    2378:	18 16       	cp	r1, r24
    237a:	0c f0       	brlt	.+2      	; 0x237e <_Z15check_gyro_axesh+0xa2>
    237c:	3e c0       	rjmp	.+124    	; 0x23fa <_Z15check_gyro_axesh+0x11e>
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 ef       	ldi	r20, 0xF0	; 240
    2384:	51 e4       	ldi	r21, 0x41	; 65
    2386:	c7 01       	movw	r24, r14
    2388:	b6 01       	movw	r22, r12
    238a:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__cmpsf2>
    238e:	87 ff       	sbrs	r24, 7
    2390:	34 c0       	rjmp	.+104    	; 0x23fa <_Z15check_gyro_axesh+0x11e>
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	40 ef       	ldi	r20, 0xF0	; 240
    2398:	51 ec       	ldi	r21, 0xC1	; 193
    239a:	c3 01       	movw	r24, r6
    239c:	b2 01       	movw	r22, r4
    239e:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <__gesf2>
    23a2:	18 16       	cp	r1, r24
    23a4:	54 f5       	brge	.+84     	; 0x23fa <_Z15check_gyro_axesh+0x11e>
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	40 ef       	ldi	r20, 0xF0	; 240
    23ac:	51 e4       	ldi	r21, 0x41	; 65
    23ae:	c3 01       	movw	r24, r6
    23b0:	b2 01       	movw	r22, r4
    23b2:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__cmpsf2>
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 ef       	ldi	r20, 0xF0	; 240
    23bc:	51 ec       	ldi	r21, 0xC1	; 193
    23be:	87 ff       	sbrs	r24, 7
    23c0:	b9 c1       	rjmp	.+882    	; 0x2734 <_Z15check_gyro_axesh+0x458>
    23c2:	c5 01       	movw	r24, r10
    23c4:	b4 01       	movw	r22, r8
    23c6:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <__gesf2>
    23ca:	18 16       	cp	r1, r24
    23cc:	0c f0       	brlt	.+2      	; 0x23d0 <_Z15check_gyro_axesh+0xf4>
    23ce:	b9 c1       	rjmp	.+882    	; 0x2742 <_Z15check_gyro_axesh+0x466>
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	40 ef       	ldi	r20, 0xF0	; 240
    23d6:	51 e4       	ldi	r21, 0x41	; 65
    23d8:	c5 01       	movw	r24, r10
    23da:	b4 01       	movw	r22, r8
    23dc:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__cmpsf2>
    23e0:	87 fd       	sbrc	r24, 7
    23e2:	06 c1       	rjmp	.+524    	; 0x25f0 <_Z15check_gyro_axesh+0x314>
		}
		
		delayMicroseconds(3700); //Loop is running @ 250Hz. +/-300us is used for communication with the gyro
	}
	//Assign the moved axis to the orresponding function (pitch, roll, yaw)
	if((gyro_angle_roll < -30 || gyro_angle_roll > 30) && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30){
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	40 ef       	ldi	r20, 0xF0	; 240
    23ea:	51 ec       	ldi	r21, 0xC1	; 193
    23ec:	c7 01       	movw	r24, r14
    23ee:	b6 01       	movw	r22, r12
    23f0:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__cmpsf2>
    23f4:	87 fd       	sbrc	r24, 7
    23f6:	2b c0       	rjmp	.+86     	; 0x244e <_Z15check_gyro_axesh+0x172>
    23f8:	ae c1       	rjmp	.+860    	; 0x2756 <_Z15check_gyro_axesh+0x47a>
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 ef       	ldi	r20, 0xF0	; 240
    2400:	51 ec       	ldi	r21, 0xC1	; 193
    2402:	c7 01       	movw	r24, r14
    2404:	b6 01       	movw	r22, r12
    2406:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__cmpsf2>
    240a:	87 ff       	sbrs	r24, 7
    240c:	74 c1       	rjmp	.+744    	; 0x26f6 <_Z15check_gyro_axesh+0x41a>
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	40 ef       	ldi	r20, 0xF0	; 240
    2414:	51 ec       	ldi	r21, 0xC1	; 193
    2416:	c3 01       	movw	r24, r6
    2418:	b2 01       	movw	r22, r4
    241a:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <__gesf2>
    241e:	18 16       	cp	r1, r24
    2420:	0c f0       	brlt	.+2      	; 0x2424 <_Z15check_gyro_axesh+0x148>
    2422:	a0 c1       	rjmp	.+832    	; 0x2764 <_Z15check_gyro_axesh+0x488>
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	40 ef       	ldi	r20, 0xF0	; 240
    242a:	51 e4       	ldi	r21, 0x41	; 65
    242c:	c3 01       	movw	r24, r6
    242e:	b2 01       	movw	r22, r4
    2430:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__cmpsf2>
    2434:	87 ff       	sbrs	r24, 7
    2436:	96 c1       	rjmp	.+812    	; 0x2764 <_Z15check_gyro_axesh+0x488>
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	40 ef       	ldi	r20, 0xF0	; 240
    243e:	51 ec       	ldi	r21, 0xC1	; 193
    2440:	c5 01       	movw	r24, r10
    2442:	b4 01       	movw	r22, r8
    2444:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <__gesf2>
    2448:	18 16       	cp	r1, r24
    244a:	0c f0       	brlt	.+2      	; 0x244e <_Z15check_gyro_axesh+0x172>
    244c:	8b c1       	rjmp	.+790    	; 0x2764 <_Z15check_gyro_axesh+0x488>
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 ef       	ldi	r20, 0xF0	; 240
    2454:	51 e4       	ldi	r21, 0x41	; 65
    2456:	c5 01       	movw	r24, r10
    2458:	b4 01       	movw	r22, r8
    245a:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__cmpsf2>
    245e:	87 ff       	sbrs	r24, 7
    2460:	81 c1       	rjmp	.+770    	; 0x2764 <_Z15check_gyro_axesh+0x488>
		gyro_check_byte |= 0b00000001;
    2462:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <gyro_check_byte>
    2466:	81 60       	ori	r24, 0x01	; 1
    2468:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <gyro_check_byte>
		if(gyro_angle_roll < 0)trigger_axis = 0b10000001;
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	a9 01       	movw	r20, r18
    2472:	c7 01       	movw	r24, r14
    2474:	b6 01       	movw	r22, r12
    2476:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__cmpsf2>
    247a:	87 fd       	sbrc	r24, 7
    247c:	02 c0       	rjmp	.+4      	; 0x2482 <_Z15check_gyro_axesh+0x1a6>
		else trigger_axis = 0b00000001;
    247e:	11 e0       	ldi	r17, 0x01	; 1
    2480:	01 c0       	rjmp	.+2      	; 0x2484 <_Z15check_gyro_axesh+0x1a8>
		delayMicroseconds(3700); //Loop is running @ 250Hz. +/-300us is used for communication with the gyro
	}
	//Assign the moved axis to the orresponding function (pitch, roll, yaw)
	if((gyro_angle_roll < -30 || gyro_angle_roll > 30) && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30){
		gyro_check_byte |= 0b00000001;
		if(gyro_angle_roll < 0)trigger_axis = 0b10000001;
    2482:	11 e8       	ldi	r17, 0x81	; 129
		else trigger_axis = 0b00000001;
	}
	if((gyro_angle_pitch < -30 || gyro_angle_pitch > 30) && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30){
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 ef       	ldi	r20, 0xF0	; 240
    248a:	51 ec       	ldi	r21, 0xC1	; 193
    248c:	c3 01       	movw	r24, r6
    248e:	b2 01       	movw	r22, r4
    2490:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__cmpsf2>
    2494:	87 fd       	sbrc	r24, 7
    2496:	0a c0       	rjmp	.+20     	; 0x24ac <_Z15check_gyro_axesh+0x1d0>
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	40 ef       	ldi	r20, 0xF0	; 240
    249e:	51 e4       	ldi	r21, 0x41	; 65
    24a0:	c3 01       	movw	r24, r6
    24a2:	b2 01       	movw	r22, r4
    24a4:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <__gesf2>
    24a8:	18 16       	cp	r1, r24
    24aa:	cc f5       	brge	.+114    	; 0x251e <_Z15check_gyro_axesh+0x242>
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	40 ef       	ldi	r20, 0xF0	; 240
    24b2:	51 ec       	ldi	r21, 0xC1	; 193
    24b4:	c7 01       	movw	r24, r14
    24b6:	b6 01       	movw	r22, r12
    24b8:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <__gesf2>
    24bc:	18 16       	cp	r1, r24
    24be:	7c f5       	brge	.+94     	; 0x251e <_Z15check_gyro_axesh+0x242>
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	40 ef       	ldi	r20, 0xF0	; 240
    24c6:	51 e4       	ldi	r21, 0x41	; 65
    24c8:	c7 01       	movw	r24, r14
    24ca:	b6 01       	movw	r22, r12
    24cc:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__cmpsf2>
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	40 ef       	ldi	r20, 0xF0	; 240
    24d6:	51 ec       	ldi	r21, 0xC1	; 193
    24d8:	87 ff       	sbrs	r24, 7
    24da:	19 c1       	rjmp	.+562    	; 0x270e <_Z15check_gyro_axesh+0x432>
    24dc:	c5 01       	movw	r24, r10
    24de:	b4 01       	movw	r22, r8
    24e0:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <__gesf2>
    24e4:	18 16       	cp	r1, r24
    24e6:	0c f0       	brlt	.+2      	; 0x24ea <_Z15check_gyro_axesh+0x20e>
    24e8:	1a c1       	rjmp	.+564    	; 0x271e <_Z15check_gyro_axesh+0x442>
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	40 ef       	ldi	r20, 0xF0	; 240
    24f0:	51 e4       	ldi	r21, 0x41	; 65
    24f2:	c5 01       	movw	r24, r10
    24f4:	b4 01       	movw	r22, r8
    24f6:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__cmpsf2>
    24fa:	87 ff       	sbrs	r24, 7
    24fc:	10 c1       	rjmp	.+544    	; 0x271e <_Z15check_gyro_axesh+0x442>
		gyro_check_byte |= 0b00000010;
    24fe:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <gyro_check_byte>
    2502:	82 60       	ori	r24, 0x02	; 2
    2504:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <gyro_check_byte>
		if(gyro_angle_pitch < 0)trigger_axis = 0b10000010;
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	a9 01       	movw	r20, r18
    250e:	c3 01       	movw	r24, r6
    2510:	b2 01       	movw	r22, r4
    2512:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__cmpsf2>
    2516:	87 fd       	sbrc	r24, 7
    2518:	01 c1       	rjmp	.+514    	; 0x271c <_Z15check_gyro_axesh+0x440>
		else trigger_axis = 0b00000010;
    251a:	12 e0       	ldi	r17, 0x02	; 2
    251c:	00 c1       	rjmp	.+512    	; 0x271e <_Z15check_gyro_axesh+0x442>
	}
	if((gyro_angle_yaw < -30 || gyro_angle_yaw > 30) && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_pitch > -30 && gyro_angle_pitch < 30){
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	40 ef       	ldi	r20, 0xF0	; 240
    2524:	51 ec       	ldi	r21, 0xC1	; 193
    2526:	c5 01       	movw	r24, r10
    2528:	b4 01       	movw	r22, r8
    252a:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__cmpsf2>
    252e:	87 fd       	sbrc	r24, 7
    2530:	0a c0       	rjmp	.+20     	; 0x2546 <_Z15check_gyro_axesh+0x26a>
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 ef       	ldi	r20, 0xF0	; 240
    2538:	51 e4       	ldi	r21, 0x41	; 65
    253a:	c5 01       	movw	r24, r10
    253c:	b4 01       	movw	r22, r8
    253e:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <__gesf2>
    2542:	18 16       	cp	r1, r24
    2544:	c4 f5       	brge	.+112    	; 0x25b6 <_Z15check_gyro_axesh+0x2da>
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	40 ef       	ldi	r20, 0xF0	; 240
    254c:	51 ec       	ldi	r21, 0xC1	; 193
    254e:	c7 01       	movw	r24, r14
    2550:	b6 01       	movw	r22, r12
    2552:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <__gesf2>
    2556:	18 16       	cp	r1, r24
    2558:	74 f5       	brge	.+92     	; 0x25b6 <_Z15check_gyro_axesh+0x2da>
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	40 ef       	ldi	r20, 0xF0	; 240
    2560:	51 e4       	ldi	r21, 0x41	; 65
    2562:	c7 01       	movw	r24, r14
    2564:	b6 01       	movw	r22, r12
    2566:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__cmpsf2>
    256a:	87 ff       	sbrs	r24, 7
    256c:	24 c0       	rjmp	.+72     	; 0x25b6 <_Z15check_gyro_axesh+0x2da>
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	40 ef       	ldi	r20, 0xF0	; 240
    2574:	51 ec       	ldi	r21, 0xC1	; 193
    2576:	c3 01       	movw	r24, r6
    2578:	b2 01       	movw	r22, r4
    257a:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <__gesf2>
    257e:	18 16       	cp	r1, r24
    2580:	d4 f4       	brge	.+52     	; 0x25b6 <_Z15check_gyro_axesh+0x2da>
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	40 ef       	ldi	r20, 0xF0	; 240
    2588:	51 e4       	ldi	r21, 0x41	; 65
    258a:	c3 01       	movw	r24, r6
    258c:	b2 01       	movw	r22, r4
    258e:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__cmpsf2>
    2592:	87 ff       	sbrs	r24, 7
    2594:	10 c0       	rjmp	.+32     	; 0x25b6 <_Z15check_gyro_axesh+0x2da>
		gyro_check_byte |= 0b00000100;
    2596:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <gyro_check_byte>
    259a:	84 60       	ori	r24, 0x04	; 4
    259c:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <gyro_check_byte>
		if(gyro_angle_yaw < 0)trigger_axis = 0b10000011;
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	a9 01       	movw	r20, r18
    25a6:	c5 01       	movw	r24, r10
    25a8:	b4 01       	movw	r22, r8
    25aa:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__cmpsf2>
    25ae:	87 fd       	sbrc	r24, 7
    25b0:	0e c0       	rjmp	.+28     	; 0x25ce <_Z15check_gyro_axesh+0x2f2>
		else trigger_axis = 0b00000011;
    25b2:	13 e0       	ldi	r17, 0x03	; 3
    25b4:	0d c0       	rjmp	.+26     	; 0x25d0 <_Z15check_gyro_axesh+0x2f4>
	}
	
	if(trigger_axis == 0){
    25b6:	11 11       	cpse	r17, r1
    25b8:	0b c0       	rjmp	.+22     	; 0x25d0 <_Z15check_gyro_axesh+0x2f4>
		error = 1;
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		Serial.println(F("No angular motion is detected in the last 10 seconds!!! (ERROR 4)"));
    25c0:	6f e4       	ldi	r22, 0x4F	; 79
    25c2:	71 e0       	ldi	r23, 0x01	; 1
    25c4:	89 e9       	ldi	r24, 0x99	; 153
    25c6:	91 e0       	ldi	r25, 0x01	; 1
    25c8:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    25cc:	06 c0       	rjmp	.+12     	; 0x25da <_Z15check_gyro_axesh+0x2fe>
		if(gyro_angle_pitch < 0)trigger_axis = 0b10000010;
		else trigger_axis = 0b00000010;
	}
	if((gyro_angle_yaw < -30 || gyro_angle_yaw > 30) && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_pitch > -30 && gyro_angle_pitch < 30){
		gyro_check_byte |= 0b00000100;
		if(gyro_angle_yaw < 0)trigger_axis = 0b10000011;
    25ce:	13 e8       	ldi	r17, 0x83	; 131
	if(trigger_axis == 0){
		error = 1;
		Serial.println(F("No angular motion is detected in the last 10 seconds!!! (ERROR 4)"));
	}
	else
	if(movement == 1)roll_axis = trigger_axis;
    25d0:	01 30       	cpi	r16, 0x01	; 1
    25d2:	19 f4       	brne	.+6      	; 0x25da <_Z15check_gyro_axesh+0x2fe>
    25d4:	10 93 8a 01 	sts	0x018A, r17	; 0x80018a <roll_axis>
    25d8:	c7 c0       	rjmp	.+398    	; 0x2768 <_Z15check_gyro_axesh+0x48c>
	if(movement == 2)pitch_axis = trigger_axis;
    25da:	02 30       	cpi	r16, 0x02	; 2
    25dc:	19 f4       	brne	.+6      	; 0x25e4 <_Z15check_gyro_axesh+0x308>
    25de:	10 93 89 01 	sts	0x0189, r17	; 0x800189 <pitch_axis>
    25e2:	c2 c0       	rjmp	.+388    	; 0x2768 <_Z15check_gyro_axesh+0x48c>
	if(movement == 3)yaw_axis = trigger_axis;
    25e4:	03 30       	cpi	r16, 0x03	; 3
    25e6:	09 f0       	breq	.+2      	; 0x25ea <_Z15check_gyro_axesh+0x30e>
    25e8:	bf c0       	rjmp	.+382    	; 0x2768 <_Z15check_gyro_axesh+0x48c>
    25ea:	10 93 88 01 	sts	0x0188, r17	; 0x800188 <yaw_axis>
    25ee:	bc c0       	rjmp	.+376    	; 0x2768 <_Z15check_gyro_axesh+0x48c>
	gyro_angle_pitch = 0;
	gyro_angle_yaw = 0;
	gyro_signalen();
	timer = millis() + 10000;
	while(timer > millis() && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30){
		gyro_signalen();
    25f0:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <_Z13gyro_signalenv>
		if(type == 2 || type == 3){
    25f4:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <type>
    25f8:	9e ef       	ldi	r25, 0xFE	; 254
    25fa:	98 0f       	add	r25, r24
    25fc:	92 30       	cpi	r25, 0x02	; 2
    25fe:	88 f5       	brcc	.+98     	; 0x2662 <_Z15check_gyro_axesh+0x386>
			gyro_angle_roll += gyro_roll * 0.00007;              //0.00007 = 17.5 (md/s) / 250(Hz)
    2600:	27 ef       	ldi	r18, 0xF7	; 247
    2602:	3c ec       	ldi	r19, 0xCC	; 204
    2604:	42 e9       	ldi	r20, 0x92	; 146
    2606:	58 e3       	ldi	r21, 0x38	; 56
    2608:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <gyro_roll>
    260c:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <gyro_roll+0x1>
    2610:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <gyro_roll+0x2>
    2614:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <gyro_roll+0x3>
    2618:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <__mulsf3>
    261c:	9b 01       	movw	r18, r22
    261e:	ac 01       	movw	r20, r24
    2620:	c7 01       	movw	r24, r14
    2622:	b6 01       	movw	r22, r12
    2624:	0e 94 a9 1c 	call	0x3952	; 0x3952 <__addsf3>
    2628:	6b 01       	movw	r12, r22
    262a:	7c 01       	movw	r14, r24
			gyro_angle_pitch += gyro_pitch * 0.00007;
    262c:	27 ef       	ldi	r18, 0xF7	; 247
    262e:	3c ec       	ldi	r19, 0xCC	; 204
    2630:	42 e9       	ldi	r20, 0x92	; 146
    2632:	58 e3       	ldi	r21, 0x38	; 56
    2634:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <gyro_pitch>
    2638:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <gyro_pitch+0x1>
    263c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <gyro_pitch+0x2>
    2640:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <gyro_pitch+0x3>
    2644:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <__mulsf3>
    2648:	9b 01       	movw	r18, r22
    264a:	ac 01       	movw	r20, r24
    264c:	c3 01       	movw	r24, r6
    264e:	b2 01       	movw	r22, r4
    2650:	0e 94 a9 1c 	call	0x3952	; 0x3952 <__addsf3>
    2654:	2b 01       	movw	r4, r22
    2656:	3c 01       	movw	r6, r24
			gyro_angle_yaw += gyro_yaw * 0.00007;
    2658:	27 ef       	ldi	r18, 0xF7	; 247
    265a:	3c ec       	ldi	r19, 0xCC	; 204
    265c:	42 e9       	ldi	r20, 0x92	; 146
    265e:	58 e3       	ldi	r21, 0x38	; 56
    2660:	33 c0       	rjmp	.+102    	; 0x26c8 <_Z15check_gyro_axesh+0x3ec>
		}
		if(type == 1){
    2662:	81 30       	cpi	r24, 0x01	; 1
    2664:	09 f0       	breq	.+2      	; 0x2668 <_Z15check_gyro_axesh+0x38c>
    2666:	42 c0       	rjmp	.+132    	; 0x26ec <_Z15check_gyro_axesh+0x410>
			gyro_angle_roll += gyro_roll * 0.0000611;          // 0.0000611 = 1 / 65.5 (LSB degr/s) / 250(Hz)
    2668:	20 ed       	ldi	r18, 0xD0	; 208
    266a:	32 e2       	ldi	r19, 0x22	; 34
    266c:	40 e8       	ldi	r20, 0x80	; 128
    266e:	58 e3       	ldi	r21, 0x38	; 56
    2670:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <gyro_roll>
    2674:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <gyro_roll+0x1>
    2678:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <gyro_roll+0x2>
    267c:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <gyro_roll+0x3>
    2680:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <__mulsf3>
    2684:	9b 01       	movw	r18, r22
    2686:	ac 01       	movw	r20, r24
    2688:	c7 01       	movw	r24, r14
    268a:	b6 01       	movw	r22, r12
    268c:	0e 94 a9 1c 	call	0x3952	; 0x3952 <__addsf3>
    2690:	6b 01       	movw	r12, r22
    2692:	7c 01       	movw	r14, r24
			gyro_angle_pitch += gyro_pitch * 0.0000611;
    2694:	20 ed       	ldi	r18, 0xD0	; 208
    2696:	32 e2       	ldi	r19, 0x22	; 34
    2698:	40 e8       	ldi	r20, 0x80	; 128
    269a:	58 e3       	ldi	r21, 0x38	; 56
    269c:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <gyro_pitch>
    26a0:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <gyro_pitch+0x1>
    26a4:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <gyro_pitch+0x2>
    26a8:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <gyro_pitch+0x3>
    26ac:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <__mulsf3>
    26b0:	9b 01       	movw	r18, r22
    26b2:	ac 01       	movw	r20, r24
    26b4:	c3 01       	movw	r24, r6
    26b6:	b2 01       	movw	r22, r4
    26b8:	0e 94 a9 1c 	call	0x3952	; 0x3952 <__addsf3>
    26bc:	2b 01       	movw	r4, r22
    26be:	3c 01       	movw	r6, r24
			gyro_angle_yaw += gyro_yaw * 0.0000611;
    26c0:	20 ed       	ldi	r18, 0xD0	; 208
    26c2:	32 e2       	ldi	r19, 0x22	; 34
    26c4:	40 e8       	ldi	r20, 0x80	; 128
    26c6:	58 e3       	ldi	r21, 0x38	; 56
    26c8:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <gyro_yaw>
    26cc:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <gyro_yaw+0x1>
    26d0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <gyro_yaw+0x2>
    26d4:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <gyro_yaw+0x3>
    26d8:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <__mulsf3>
    26dc:	9b 01       	movw	r18, r22
    26de:	ac 01       	movw	r20, r24
    26e0:	c5 01       	movw	r24, r10
    26e2:	b4 01       	movw	r22, r8
    26e4:	0e 94 a9 1c 	call	0x3952	; 0x3952 <__addsf3>
    26e8:	4b 01       	movw	r8, r22
    26ea:	5c 01       	movw	r10, r24
		}
		
		delayMicroseconds(3700); //Loop is running @ 250Hz. +/-300us is used for communication with the gyro
    26ec:	84 e7       	ldi	r24, 0x74	; 116
    26ee:	9e e0       	ldi	r25, 0x0E	; 14
    26f0:	0e 94 cc 24 	call	0x4998	; 0x4998 <delayMicroseconds>
    26f4:	21 ce       	rjmp	.-958    	; 0x2338 <_Z15check_gyro_axesh+0x5c>
	}
	//Assign the moved axis to the orresponding function (pitch, roll, yaw)
	if((gyro_angle_roll < -30 || gyro_angle_roll > 30) && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30){
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	40 ef       	ldi	r20, 0xF0	; 240
    26fc:	51 e4       	ldi	r21, 0x41	; 65
    26fe:	c7 01       	movw	r24, r14
    2700:	b6 01       	movw	r22, r12
    2702:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <__gesf2>
    2706:	18 16       	cp	r1, r24
    2708:	0c f4       	brge	.+2      	; 0x270c <_Z15check_gyro_axesh+0x430>
    270a:	81 ce       	rjmp	.-766    	; 0x240e <_Z15check_gyro_axesh+0x132>
    270c:	2b c0       	rjmp	.+86     	; 0x2764 <_Z15check_gyro_axesh+0x488>
	if((gyro_angle_pitch < -30 || gyro_angle_pitch > 30) && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30){
		gyro_check_byte |= 0b00000010;
		if(gyro_angle_pitch < 0)trigger_axis = 0b10000010;
		else trigger_axis = 0b00000010;
	}
	if((gyro_angle_yaw < -30 || gyro_angle_yaw > 30) && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_pitch > -30 && gyro_angle_pitch < 30){
    270e:	c5 01       	movw	r24, r10
    2710:	b4 01       	movw	r22, r8
    2712:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__cmpsf2>
    2716:	87 fd       	sbrc	r24, 7
    2718:	20 cf       	rjmp	.-448    	; 0x255a <_Z15check_gyro_axesh+0x27e>
    271a:	0b cf       	rjmp	.-490    	; 0x2532 <_Z15check_gyro_axesh+0x256>
		if(gyro_angle_roll < 0)trigger_axis = 0b10000001;
		else trigger_axis = 0b00000001;
	}
	if((gyro_angle_pitch < -30 || gyro_angle_pitch > 30) && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30){
		gyro_check_byte |= 0b00000010;
		if(gyro_angle_pitch < 0)trigger_axis = 0b10000010;
    271c:	12 e8       	ldi	r17, 0x82	; 130
		else trigger_axis = 0b00000010;
	}
	if((gyro_angle_yaw < -30 || gyro_angle_yaw > 30) && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_pitch > -30 && gyro_angle_pitch < 30){
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	40 ef       	ldi	r20, 0xF0	; 240
    2724:	51 ec       	ldi	r21, 0xC1	; 193
    2726:	c5 01       	movw	r24, r10
    2728:	b4 01       	movw	r22, r8
    272a:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__cmpsf2>
    272e:	87 fd       	sbrc	r24, 7
    2730:	1e cf       	rjmp	.-452    	; 0x256e <_Z15check_gyro_axesh+0x292>
    2732:	ff ce       	rjmp	.-514    	; 0x2532 <_Z15check_gyro_axesh+0x256>
		}
		
		delayMicroseconds(3700); //Loop is running @ 250Hz. +/-300us is used for communication with the gyro
	}
	//Assign the moved axis to the orresponding function (pitch, roll, yaw)
	if((gyro_angle_roll < -30 || gyro_angle_roll > 30) && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30){
    2734:	c7 01       	movw	r24, r14
    2736:	b6 01       	movw	r22, r12
    2738:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__cmpsf2>
    273c:	87 fd       	sbrc	r24, 7
    273e:	72 ce       	rjmp	.-796    	; 0x2424 <_Z15check_gyro_axesh+0x148>
    2740:	0a c0       	rjmp	.+20     	; 0x2756 <_Z15check_gyro_axesh+0x47a>
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	40 ef       	ldi	r20, 0xF0	; 240
    2748:	51 ec       	ldi	r21, 0xC1	; 193
    274a:	c7 01       	movw	r24, r14
    274c:	b6 01       	movw	r22, r12
    274e:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__cmpsf2>
    2752:	87 fd       	sbrc	r24, 7
    2754:	71 ce       	rjmp	.-798    	; 0x2438 <_Z15check_gyro_axesh+0x15c>
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 ef       	ldi	r20, 0xF0	; 240
    275c:	51 e4       	ldi	r21, 0x41	; 65
    275e:	c7 01       	movw	r24, r14
    2760:	b6 01       	movw	r22, r12
    2762:	5b ce       	rjmp	.-842    	; 0x241a <_Z15check_gyro_axesh+0x13e>
	}
}

//Check if the angular position of a gyro axis is changing within 10 seconds
void check_gyro_axes(byte movement){
	byte trigger_axis = 0;
    2764:	10 e0       	ldi	r17, 0x00	; 0
    2766:	8e ce       	rjmp	.-740    	; 0x2484 <_Z15check_gyro_axesh+0x1a8>
	else
	if(movement == 1)roll_axis = trigger_axis;
	if(movement == 2)pitch_axis = trigger_axis;
	if(movement == 3)yaw_axis = trigger_axis;
	
}
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	0f 90       	pop	r0
    2770:	df 91       	pop	r29
    2772:	cf 91       	pop	r28
    2774:	1f 91       	pop	r17
    2776:	0f 91       	pop	r16
    2778:	ff 90       	pop	r15
    277a:	ef 90       	pop	r14
    277c:	df 90       	pop	r13
    277e:	cf 90       	pop	r12
    2780:	bf 90       	pop	r11
    2782:	af 90       	pop	r10
    2784:	9f 90       	pop	r9
    2786:	8f 90       	pop	r8
    2788:	7f 90       	pop	r7
    278a:	6f 90       	pop	r6
    278c:	5f 90       	pop	r5
    278e:	4f 90       	pop	r4
    2790:	08 95       	ret

00002792 <loop>:
	delay(250);               //Give the gyro time to start
}
//Main program
void loop(){
	//Show the YMFC-3D V2 intro
	intro();
    2792:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <_Z5introv>
	
	Serial.println(F(""));
    2796:	65 eb       	ldi	r22, 0xB5	; 181
    2798:	71 e1       	ldi	r23, 0x11	; 17
    279a:	89 e9       	ldi	r24, 0x99	; 153
    279c:	91 e0       	ldi	r25, 0x01	; 1
    279e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println(F("==================================================="));
    27a2:	61 e8       	ldi	r22, 0x81	; 129
    27a4:	71 e1       	ldi	r23, 0x11	; 17
    27a6:	89 e9       	ldi	r24, 0x99	; 153
    27a8:	91 e0       	ldi	r25, 0x01	; 1
    27aa:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println(F("System check"));
    27ae:	64 e7       	ldi	r22, 0x74	; 116
    27b0:	71 e1       	ldi	r23, 0x11	; 17
    27b2:	89 e9       	ldi	r24, 0x99	; 153
    27b4:	91 e0       	ldi	r25, 0x01	; 1
    27b6:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println(F("==================================================="));
    27ba:	60 e4       	ldi	r22, 0x40	; 64
    27bc:	71 e1       	ldi	r23, 0x11	; 17
    27be:	89 e9       	ldi	r24, 0x99	; 153
    27c0:	91 e0       	ldi	r25, 0x01	; 1
    27c2:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	delay(1000);
    27c6:	68 ee       	ldi	r22, 0xE8	; 232
    27c8:	73 e0       	ldi	r23, 0x03	; 3
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
	Serial.println(F("Checking I2C clock speed."));
    27d2:	66 e2       	ldi	r22, 0x26	; 38
    27d4:	71 e1       	ldi	r23, 0x11	; 17
    27d6:	89 e9       	ldi	r24, 0x99	; 153
    27d8:	91 e0       	ldi	r25, 0x01	; 1
    27da:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	delay(1000);
    27de:	68 ee       	ldi	r22, 0xE8	; 232
    27e0:	73 e0       	ldi	r23, 0x03	; 3
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
	
	TWBR = 12;                      //Set the I2C clock speed to 400kHz.
    27ea:	8c e0       	ldi	r24, 0x0C	; 12
    27ec:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	
	#if F_CPU == 16000000L          //If the clock speed is 16MHz include the next code line when compiling
	clockspeed_ok = 1;            //Set clockspeed_ok to 1
    27f0:	c1 e0       	ldi	r28, 0x01	; 1
    27f2:	c0 93 8f 01 	sts	0x018F, r28	; 0x80018f <clockspeed_ok>
	#endif                          //End of if statement

	if(TWBR == 12 && clockspeed_ok){
    27f6:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    27fa:	8c 30       	cpi	r24, 0x0C	; 12
    27fc:	11 f0       	breq	.+4      	; 0x2802 <loop+0x70>
    27fe:	0c 94 9e 1c 	jmp	0x393c	; 0x393c <loop+0x11aa>
		Serial.println(F("I2C clock speed is correctly set to 400kHz."));
    2802:	6a ef       	ldi	r22, 0xFA	; 250
    2804:	70 e1       	ldi	r23, 0x10	; 16
    2806:	89 e9       	ldi	r24, 0x99	; 153
    2808:	91 e0       	ldi	r25, 0x01	; 1
    280a:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	else{
		Serial.println(F("I2C clock speed is not set to 400kHz. (ERROR 8)"));
		error = 1;
	}
	
	if(error == 0){
    280e:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <error>
    2812:	81 11       	cpse	r24, r1
    2814:	2c c0       	rjmp	.+88     	; 0x286e <loop+0xdc>
		Serial.println(F(""));
    2816:	69 ec       	ldi	r22, 0xC9	; 201
    2818:	70 e1       	ldi	r23, 0x10	; 16
    281a:	89 e9       	ldi	r24, 0x99	; 153
    281c:	91 e0       	ldi	r25, 0x01	; 1
    281e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("==================================================="));
    2822:	65 e9       	ldi	r22, 0x95	; 149
    2824:	70 e1       	ldi	r23, 0x10	; 16
    2826:	89 e9       	ldi	r24, 0x99	; 153
    2828:	91 e0       	ldi	r25, 0x01	; 1
    282a:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Transmitter setup"));
    282e:	63 e8       	ldi	r22, 0x83	; 131
    2830:	70 e1       	ldi	r23, 0x10	; 16
    2832:	89 e9       	ldi	r24, 0x99	; 153
    2834:	91 e0       	ldi	r25, 0x01	; 1
    2836:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("==================================================="));
    283a:	6f e4       	ldi	r22, 0x4F	; 79
    283c:	70 e1       	ldi	r23, 0x10	; 16
    283e:	89 e9       	ldi	r24, 0x99	; 153
    2840:	91 e0       	ldi	r25, 0x01	; 1
    2842:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		delay(1000);
    2846:	68 ee       	ldi	r22, 0xE8	; 232
    2848:	73 e0       	ldi	r23, 0x03	; 3
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
		Serial.print(F("Checking for valid receiver signals."));
    2852:	6a e2       	ldi	r22, 0x2A	; 42
    2854:	70 e1       	ldi	r23, 0x10	; 16
    2856:	89 e9       	ldi	r24, 0x99	; 153
    2858:	91 e0       	ldi	r25, 0x01	; 1
    285a:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		//Wait 10 seconds until all receiver inputs are valid
		wait_for_receiver();
    285e:	0e 94 33 0b 	call	0x1666	; 0x1666 <_Z17wait_for_receiverv>
		Serial.println(F(""));
    2862:	69 e2       	ldi	r22, 0x29	; 41
    2864:	70 e1       	ldi	r23, 0x10	; 16
    2866:	89 e9       	ldi	r24, 0x99	; 153
    2868:	91 e0       	ldi	r25, 0x01	; 1
    286a:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	}
	//Quit the program in case of an error
	if(error == 0){
    286e:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <error>
    2872:	81 11       	cpse	r24, r1
    2874:	a1 c0       	rjmp	.+322    	; 0x29b8 <loop+0x226>
		delay(2000);
    2876:	60 ed       	ldi	r22, 0xD0	; 208
    2878:	77 e0       	ldi	r23, 0x07	; 7
    287a:	80 e0       	ldi	r24, 0x00	; 0
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
		Serial.println(F("Place all sticks and subtrims in the center position within 10 seconds."));
    2882:	61 ee       	ldi	r22, 0xE1	; 225
    2884:	7f e0       	ldi	r23, 0x0F	; 15
    2886:	89 e9       	ldi	r24, 0x99	; 153
    2888:	91 e0       	ldi	r25, 0x01	; 1
    288a:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		for(int i = 9;i > 0;i--){
    288e:	c9 e0       	ldi	r28, 0x09	; 9
    2890:	d0 e0       	ldi	r29, 0x00	; 0
			delay(1000);
    2892:	68 ee       	ldi	r22, 0xE8	; 232
    2894:	73 e0       	ldi	r23, 0x03	; 3
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
			Serial.print(i);
    289e:	4a e0       	ldi	r20, 0x0A	; 10
    28a0:	50 e0       	ldi	r21, 0x00	; 0
    28a2:	be 01       	movw	r22, r28
    28a4:	89 e9       	ldi	r24, 0x99	; 153
    28a6:	91 e0       	ldi	r25, 0x01	; 1
    28a8:	0e 94 ad 21 	call	0x435a	; 0x435a <_ZN5Print5printEii>
			Serial.print(" ");
    28ac:	60 e0       	ldi	r22, 0x00	; 0
    28ae:	71 e0       	ldi	r23, 0x01	; 1
    28b0:	89 e9       	ldi	r24, 0x99	; 153
    28b2:	91 e0       	ldi	r25, 0x01	; 1
    28b4:	0e 94 de 20 	call	0x41bc	; 0x41bc <_ZN5Print5printEPKc>
	}
	//Quit the program in case of an error
	if(error == 0){
		delay(2000);
		Serial.println(F("Place all sticks and subtrims in the center position within 10 seconds."));
		for(int i = 9;i > 0;i--){
    28b8:	21 97       	sbiw	r28, 0x01	; 1
    28ba:	59 f7       	brne	.-42     	; 0x2892 <loop+0x100>
			delay(1000);
			Serial.print(i);
			Serial.print(" ");
		}
		Serial.println(" ");
    28bc:	60 e0       	ldi	r22, 0x00	; 0
    28be:	71 e0       	ldi	r23, 0x01	; 1
    28c0:	89 e9       	ldi	r24, 0x99	; 153
    28c2:	91 e0       	ldi	r25, 0x01	; 1
    28c4:	0e 94 fd 20 	call	0x41fa	; 0x41fa <_ZN5Print7printlnEPKc>
		//Store the central stick positions
		center_channel_1 = receiver_input_channel_1;
    28c8:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <receiver_input_channel_1>
    28cc:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <receiver_input_channel_1+0x1>
    28d0:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <center_channel_1+0x1>
    28d4:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <center_channel_1>
		center_channel_2 = receiver_input_channel_2;
    28d8:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <receiver_input_channel_2>
    28dc:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <receiver_input_channel_2+0x1>
    28e0:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <center_channel_2+0x1>
    28e4:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <center_channel_2>
		center_channel_3 = receiver_input_channel_3;
    28e8:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <receiver_input_channel_3>
    28ec:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <receiver_input_channel_3+0x1>
    28f0:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <center_channel_3+0x1>
    28f4:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <center_channel_3>
		center_channel_4 = receiver_input_channel_4;
    28f8:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <receiver_input_channel_4>
    28fc:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <receiver_input_channel_4+0x1>
    2900:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <center_channel_4+0x1>
    2904:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <center_channel_4>
		Serial.println(F(""));
    2908:	60 ee       	ldi	r22, 0xE0	; 224
    290a:	7f e0       	ldi	r23, 0x0F	; 15
    290c:	89 e9       	ldi	r24, 0x99	; 153
    290e:	91 e0       	ldi	r25, 0x01	; 1
    2910:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Center positions stored."));
    2914:	67 ec       	ldi	r22, 0xC7	; 199
    2916:	7f e0       	ldi	r23, 0x0F	; 15
    2918:	89 e9       	ldi	r24, 0x99	; 153
    291a:	91 e0       	ldi	r25, 0x01	; 1
    291c:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.print(F("Digital input 08 = "));
    2920:	63 eb       	ldi	r22, 0xB3	; 179
    2922:	7f e0       	ldi	r23, 0x0F	; 15
    2924:	89 e9       	ldi	r24, 0x99	; 153
    2926:	91 e0       	ldi	r25, 0x01	; 1
    2928:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(receiver_input_channel_1);
    292c:	60 91 84 01 	lds	r22, 0x0184	; 0x800184 <receiver_input_channel_1>
    2930:	70 91 85 01 	lds	r23, 0x0185	; 0x800185 <receiver_input_channel_1+0x1>
    2934:	4a e0       	ldi	r20, 0x0A	; 10
    2936:	50 e0       	ldi	r21, 0x00	; 0
    2938:	89 e9       	ldi	r24, 0x99	; 153
    293a:	91 e0       	ldi	r25, 0x01	; 1
    293c:	0e 94 b4 21 	call	0x4368	; 0x4368 <_ZN5Print7printlnEii>
		Serial.print(F("Digital input 09 = "));
    2940:	6f e9       	ldi	r22, 0x9F	; 159
    2942:	7f e0       	ldi	r23, 0x0F	; 15
    2944:	89 e9       	ldi	r24, 0x99	; 153
    2946:	91 e0       	ldi	r25, 0x01	; 1
    2948:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(receiver_input_channel_2);
    294c:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <receiver_input_channel_2>
    2950:	70 91 83 01 	lds	r23, 0x0183	; 0x800183 <receiver_input_channel_2+0x1>
    2954:	4a e0       	ldi	r20, 0x0A	; 10
    2956:	50 e0       	ldi	r21, 0x00	; 0
    2958:	89 e9       	ldi	r24, 0x99	; 153
    295a:	91 e0       	ldi	r25, 0x01	; 1
    295c:	0e 94 b4 21 	call	0x4368	; 0x4368 <_ZN5Print7printlnEii>
		Serial.print(F("Digital input 10 = "));
    2960:	6b e8       	ldi	r22, 0x8B	; 139
    2962:	7f e0       	ldi	r23, 0x0F	; 15
    2964:	89 e9       	ldi	r24, 0x99	; 153
    2966:	91 e0       	ldi	r25, 0x01	; 1
    2968:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(receiver_input_channel_3);
    296c:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <receiver_input_channel_3>
    2970:	70 91 81 01 	lds	r23, 0x0181	; 0x800181 <receiver_input_channel_3+0x1>
    2974:	4a e0       	ldi	r20, 0x0A	; 10
    2976:	50 e0       	ldi	r21, 0x00	; 0
    2978:	89 e9       	ldi	r24, 0x99	; 153
    297a:	91 e0       	ldi	r25, 0x01	; 1
    297c:	0e 94 b4 21 	call	0x4368	; 0x4368 <_ZN5Print7printlnEii>
		Serial.print(F("Digital input 11 = "));
    2980:	67 e7       	ldi	r22, 0x77	; 119
    2982:	7f e0       	ldi	r23, 0x0F	; 15
    2984:	89 e9       	ldi	r24, 0x99	; 153
    2986:	91 e0       	ldi	r25, 0x01	; 1
    2988:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(receiver_input_channel_4);
    298c:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <receiver_input_channel_4>
    2990:	70 91 7f 01 	lds	r23, 0x017F	; 0x80017f <receiver_input_channel_4+0x1>
    2994:	4a e0       	ldi	r20, 0x0A	; 10
    2996:	50 e0       	ldi	r21, 0x00	; 0
    2998:	89 e9       	ldi	r24, 0x99	; 153
    299a:	91 e0       	ldi	r25, 0x01	; 1
    299c:	0e 94 b4 21 	call	0x4368	; 0x4368 <_ZN5Print7printlnEii>
		Serial.println(F(""));
    29a0:	66 e7       	ldi	r22, 0x76	; 118
    29a2:	7f e0       	ldi	r23, 0x0F	; 15
    29a4:	89 e9       	ldi	r24, 0x99	; 153
    29a6:	91 e0       	ldi	r25, 0x01	; 1
    29a8:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F(""));
    29ac:	65 e7       	ldi	r22, 0x75	; 117
    29ae:	7f e0       	ldi	r23, 0x0F	; 15
    29b0:	89 e9       	ldi	r24, 0x99	; 153
    29b2:	91 e0       	ldi	r25, 0x01	; 1
    29b4:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	}
	if(error == 0){
    29b8:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <error>
    29bc:	81 11       	cpse	r24, r1
    29be:	60 c0       	rjmp	.+192    	; 0x2a80 <loop+0x2ee>
		Serial.println(F("Move the throttle stick to full throttle and back to center"));
    29c0:	69 e3       	ldi	r22, 0x39	; 57
    29c2:	7f e0       	ldi	r23, 0x0F	; 15
    29c4:	89 e9       	ldi	r24, 0x99	; 153
    29c6:	91 e0       	ldi	r25, 0x01	; 1
    29c8:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		//Check for throttle movement
		check_receiver_inputs(1);
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_Z21check_receiver_inputsh>
		Serial.print(F("Throttle is connected to digital input "));
    29d2:	61 e1       	ldi	r22, 0x11	; 17
    29d4:	7f e0       	ldi	r23, 0x0F	; 15
    29d6:	89 e9       	ldi	r24, 0x99	; 153
    29d8:	91 e0       	ldi	r25, 0x01	; 1
    29da:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println((channel_3_assign & 0b00000111) + 7);
    29de:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <channel_3_assign>
    29e2:	67 70       	andi	r22, 0x07	; 7
    29e4:	70 e0       	ldi	r23, 0x00	; 0
    29e6:	69 5f       	subi	r22, 0xF9	; 249
    29e8:	7f 4f       	sbci	r23, 0xFF	; 255
    29ea:	4a e0       	ldi	r20, 0x0A	; 10
    29ec:	50 e0       	ldi	r21, 0x00	; 0
    29ee:	89 e9       	ldi	r24, 0x99	; 153
    29f0:	91 e0       	ldi	r25, 0x01	; 1
    29f2:	0e 94 b4 21 	call	0x4368	; 0x4368 <_ZN5Print7printlnEii>
		if(channel_3_assign & 0b10000000)Serial.println(F("Channel inverted = yes"));
    29f6:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <channel_3_assign>
    29fa:	87 ff       	sbrs	r24, 7
    29fc:	03 c0       	rjmp	.+6      	; 0x2a04 <loop+0x272>
    29fe:	6a ef       	ldi	r22, 0xFA	; 250
    2a00:	7e e0       	ldi	r23, 0x0E	; 14
    2a02:	02 c0       	rjmp	.+4      	; 0x2a08 <loop+0x276>
		else Serial.println(F("Channel inverted = no"));
    2a04:	64 ee       	ldi	r22, 0xE4	; 228
    2a06:	7e e0       	ldi	r23, 0x0E	; 14
    2a08:	89 e9       	ldi	r24, 0x99	; 153
    2a0a:	91 e0       	ldi	r25, 0x01	; 1
    2a0c:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		wait_sticks_zero();
    2a10:	0e 94 3e 0a 	call	0x147c	; 0x147c <_Z16wait_sticks_zerov>
		
		Serial.println(F(""));
    2a14:	63 ee       	ldi	r22, 0xE3	; 227
    2a16:	7e e0       	ldi	r23, 0x0E	; 14
    2a18:	89 e9       	ldi	r24, 0x99	; 153
    2a1a:	91 e0       	ldi	r25, 0x01	; 1
    2a1c:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F(""));
    2a20:	62 ee       	ldi	r22, 0xE2	; 226
    2a22:	7e e0       	ldi	r23, 0x0E	; 14
    2a24:	89 e9       	ldi	r24, 0x99	; 153
    2a26:	91 e0       	ldi	r25, 0x01	; 1
    2a28:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Move the roll stick to simulate left wing up and back to center"));
    2a2c:	62 ea       	ldi	r22, 0xA2	; 162
    2a2e:	7e e0       	ldi	r23, 0x0E	; 14
    2a30:	89 e9       	ldi	r24, 0x99	; 153
    2a32:	91 e0       	ldi	r25, 0x01	; 1
    2a34:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		//Check for throttle movement
		check_receiver_inputs(2);
    2a38:	82 e0       	ldi	r24, 0x02	; 2
    2a3a:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_Z21check_receiver_inputsh>
		Serial.print(F("Roll is connected to digital input "));
    2a3e:	6e e7       	ldi	r22, 0x7E	; 126
    2a40:	7e e0       	ldi	r23, 0x0E	; 14
    2a42:	89 e9       	ldi	r24, 0x99	; 153
    2a44:	91 e0       	ldi	r25, 0x01	; 1
    2a46:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println((channel_1_assign & 0b00000111) + 7);
    2a4a:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <channel_1_assign>
    2a4e:	67 70       	andi	r22, 0x07	; 7
    2a50:	70 e0       	ldi	r23, 0x00	; 0
    2a52:	69 5f       	subi	r22, 0xF9	; 249
    2a54:	7f 4f       	sbci	r23, 0xFF	; 255
    2a56:	4a e0       	ldi	r20, 0x0A	; 10
    2a58:	50 e0       	ldi	r21, 0x00	; 0
    2a5a:	89 e9       	ldi	r24, 0x99	; 153
    2a5c:	91 e0       	ldi	r25, 0x01	; 1
    2a5e:	0e 94 b4 21 	call	0x4368	; 0x4368 <_ZN5Print7printlnEii>
		if(channel_1_assign & 0b10000000)Serial.println(F("Channel inverted = yes"));
    2a62:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <channel_1_assign>
    2a66:	87 ff       	sbrs	r24, 7
    2a68:	03 c0       	rjmp	.+6      	; 0x2a70 <loop+0x2de>
    2a6a:	67 e6       	ldi	r22, 0x67	; 103
    2a6c:	7e e0       	ldi	r23, 0x0E	; 14
    2a6e:	02 c0       	rjmp	.+4      	; 0x2a74 <loop+0x2e2>
		else Serial.println(F("Channel inverted = no"));
    2a70:	61 e5       	ldi	r22, 0x51	; 81
    2a72:	7e e0       	ldi	r23, 0x0E	; 14
    2a74:	89 e9       	ldi	r24, 0x99	; 153
    2a76:	91 e0       	ldi	r25, 0x01	; 1
    2a78:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		wait_sticks_zero();
    2a7c:	0e 94 3e 0a 	call	0x147c	; 0x147c <_Z16wait_sticks_zerov>
	}
	if(error == 0){
    2a80:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <error>
    2a84:	81 11       	cpse	r24, r1
    2a86:	36 c0       	rjmp	.+108    	; 0x2af4 <loop+0x362>
		Serial.println(F(""));
    2a88:	60 e5       	ldi	r22, 0x50	; 80
    2a8a:	7e e0       	ldi	r23, 0x0E	; 14
    2a8c:	89 e9       	ldi	r24, 0x99	; 153
    2a8e:	91 e0       	ldi	r25, 0x01	; 1
    2a90:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F(""));
    2a94:	6f e4       	ldi	r22, 0x4F	; 79
    2a96:	7e e0       	ldi	r23, 0x0E	; 14
    2a98:	89 e9       	ldi	r24, 0x99	; 153
    2a9a:	91 e0       	ldi	r25, 0x01	; 1
    2a9c:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Move the pitch stick to simulate nose up and back to center"));
    2aa0:	63 e1       	ldi	r22, 0x13	; 19
    2aa2:	7e e0       	ldi	r23, 0x0E	; 14
    2aa4:	89 e9       	ldi	r24, 0x99	; 153
    2aa6:	91 e0       	ldi	r25, 0x01	; 1
    2aa8:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		//Check for throttle movement
		check_receiver_inputs(3);
    2aac:	83 e0       	ldi	r24, 0x03	; 3
    2aae:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_Z21check_receiver_inputsh>
		Serial.print(F("Pitch is connected to digital input "));
    2ab2:	6e ee       	ldi	r22, 0xEE	; 238
    2ab4:	7d e0       	ldi	r23, 0x0D	; 13
    2ab6:	89 e9       	ldi	r24, 0x99	; 153
    2ab8:	91 e0       	ldi	r25, 0x01	; 1
    2aba:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println((channel_2_assign & 0b00000111) + 7);
    2abe:	60 91 8d 01 	lds	r22, 0x018D	; 0x80018d <channel_2_assign>
    2ac2:	67 70       	andi	r22, 0x07	; 7
    2ac4:	70 e0       	ldi	r23, 0x00	; 0
    2ac6:	69 5f       	subi	r22, 0xF9	; 249
    2ac8:	7f 4f       	sbci	r23, 0xFF	; 255
    2aca:	4a e0       	ldi	r20, 0x0A	; 10
    2acc:	50 e0       	ldi	r21, 0x00	; 0
    2ace:	89 e9       	ldi	r24, 0x99	; 153
    2ad0:	91 e0       	ldi	r25, 0x01	; 1
    2ad2:	0e 94 b4 21 	call	0x4368	; 0x4368 <_ZN5Print7printlnEii>
		if(channel_2_assign & 0b10000000)Serial.println(F("Channel inverted = yes"));
    2ad6:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <channel_2_assign>
    2ada:	87 ff       	sbrs	r24, 7
    2adc:	03 c0       	rjmp	.+6      	; 0x2ae4 <loop+0x352>
    2ade:	67 ed       	ldi	r22, 0xD7	; 215
    2ae0:	7d e0       	ldi	r23, 0x0D	; 13
    2ae2:	02 c0       	rjmp	.+4      	; 0x2ae8 <loop+0x356>
		else Serial.println(F("Channel inverted = no"));
    2ae4:	61 ec       	ldi	r22, 0xC1	; 193
    2ae6:	7d e0       	ldi	r23, 0x0D	; 13
    2ae8:	89 e9       	ldi	r24, 0x99	; 153
    2aea:	91 e0       	ldi	r25, 0x01	; 1
    2aec:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		wait_sticks_zero();
    2af0:	0e 94 3e 0a 	call	0x147c	; 0x147c <_Z16wait_sticks_zerov>
	}
	if(error == 0){
    2af4:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <error>
    2af8:	81 11       	cpse	r24, r1
    2afa:	36 c0       	rjmp	.+108    	; 0x2b68 <loop+0x3d6>
		Serial.println(F(""));
    2afc:	60 ec       	ldi	r22, 0xC0	; 192
    2afe:	7d e0       	ldi	r23, 0x0D	; 13
    2b00:	89 e9       	ldi	r24, 0x99	; 153
    2b02:	91 e0       	ldi	r25, 0x01	; 1
    2b04:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F(""));
    2b08:	6f eb       	ldi	r22, 0xBF	; 191
    2b0a:	7d e0       	ldi	r23, 0x0D	; 13
    2b0c:	89 e9       	ldi	r24, 0x99	; 153
    2b0e:	91 e0       	ldi	r25, 0x01	; 1
    2b10:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Move the yaw stick to simulate nose right and back to center"));
    2b14:	62 e8       	ldi	r22, 0x82	; 130
    2b16:	7d e0       	ldi	r23, 0x0D	; 13
    2b18:	89 e9       	ldi	r24, 0x99	; 153
    2b1a:	91 e0       	ldi	r25, 0x01	; 1
    2b1c:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		//Check for throttle movement
		check_receiver_inputs(4);
    2b20:	84 e0       	ldi	r24, 0x04	; 4
    2b22:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_Z21check_receiver_inputsh>
		Serial.print(F("Yaw is connected to digital input "));
    2b26:	6f e5       	ldi	r22, 0x5F	; 95
    2b28:	7d e0       	ldi	r23, 0x0D	; 13
    2b2a:	89 e9       	ldi	r24, 0x99	; 153
    2b2c:	91 e0       	ldi	r25, 0x01	; 1
    2b2e:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println((channel_4_assign & 0b00000111) + 7);
    2b32:	60 91 8b 01 	lds	r22, 0x018B	; 0x80018b <channel_4_assign>
    2b36:	67 70       	andi	r22, 0x07	; 7
    2b38:	70 e0       	ldi	r23, 0x00	; 0
    2b3a:	69 5f       	subi	r22, 0xF9	; 249
    2b3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b3e:	4a e0       	ldi	r20, 0x0A	; 10
    2b40:	50 e0       	ldi	r21, 0x00	; 0
    2b42:	89 e9       	ldi	r24, 0x99	; 153
    2b44:	91 e0       	ldi	r25, 0x01	; 1
    2b46:	0e 94 b4 21 	call	0x4368	; 0x4368 <_ZN5Print7printlnEii>
		if(channel_4_assign & 0b10000000)Serial.println(F("Channel inverted = yes"));
    2b4a:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <channel_4_assign>
    2b4e:	87 ff       	sbrs	r24, 7
    2b50:	03 c0       	rjmp	.+6      	; 0x2b58 <loop+0x3c6>
    2b52:	68 e4       	ldi	r22, 0x48	; 72
    2b54:	7d e0       	ldi	r23, 0x0D	; 13
    2b56:	02 c0       	rjmp	.+4      	; 0x2b5c <loop+0x3ca>
		else Serial.println(F("Channel inverted = no"));
    2b58:	62 e3       	ldi	r22, 0x32	; 50
    2b5a:	7d e0       	ldi	r23, 0x0D	; 13
    2b5c:	89 e9       	ldi	r24, 0x99	; 153
    2b5e:	91 e0       	ldi	r25, 0x01	; 1
    2b60:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		wait_sticks_zero();
    2b64:	0e 94 3e 0a 	call	0x147c	; 0x147c <_Z16wait_sticks_zerov>
	}
	if(error == 0){
    2b68:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <error>
    2b6c:	81 11       	cpse	r24, r1
    2b6e:	f4 c0       	rjmp	.+488    	; 0x2d58 <loop+0x5c6>
		Serial.println(F(""));
    2b70:	61 e3       	ldi	r22, 0x31	; 49
    2b72:	7d e0       	ldi	r23, 0x0D	; 13
    2b74:	89 e9       	ldi	r24, 0x99	; 153
    2b76:	91 e0       	ldi	r25, 0x01	; 1
    2b78:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F(""));
    2b7c:	60 e3       	ldi	r22, 0x30	; 48
    2b7e:	7d e0       	ldi	r23, 0x0D	; 13
    2b80:	89 e9       	ldi	r24, 0x99	; 153
    2b82:	91 e0       	ldi	r25, 0x01	; 1
    2b84:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Gently move all the sticks simultaneously to their extends"));
    2b88:	65 ef       	ldi	r22, 0xF5	; 245
    2b8a:	7c e0       	ldi	r23, 0x0C	; 12
    2b8c:	89 e9       	ldi	r24, 0x99	; 153
    2b8e:	91 e0       	ldi	r25, 0x01	; 1
    2b90:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("When ready put the sticks back in their center positions"));
    2b94:	6c eb       	ldi	r22, 0xBC	; 188
    2b96:	7c e0       	ldi	r23, 0x0C	; 12
    2b98:	89 e9       	ldi	r24, 0x99	; 153
    2b9a:	91 e0       	ldi	r25, 0x01	; 1
    2b9c:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		//Register the min and max values of the receiver channels
		register_min_max();
    2ba0:	0e 94 c0 0b 	call	0x1780	; 0x1780 <_Z16register_min_maxv>
		Serial.println(F(""));
    2ba4:	6b eb       	ldi	r22, 0xBB	; 187
    2ba6:	7c e0       	ldi	r23, 0x0C	; 12
    2ba8:	89 e9       	ldi	r24, 0x99	; 153
    2baa:	91 e0       	ldi	r25, 0x01	; 1
    2bac:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F(""));
    2bb0:	6a eb       	ldi	r22, 0xBA	; 186
    2bb2:	7c e0       	ldi	r23, 0x0C	; 12
    2bb4:	89 e9       	ldi	r24, 0x99	; 153
    2bb6:	91 e0       	ldi	r25, 0x01	; 1
    2bb8:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("High, low and center values found during setup"));
    2bbc:	6b e8       	ldi	r22, 0x8B	; 139
    2bbe:	7c e0       	ldi	r23, 0x0C	; 12
    2bc0:	89 e9       	ldi	r24, 0x99	; 153
    2bc2:	91 e0       	ldi	r25, 0x01	; 1
    2bc4:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.print(F("Digital input 08 values:"));
    2bc8:	62 e7       	ldi	r22, 0x72	; 114
    2bca:	7c e0       	ldi	r23, 0x0C	; 12
    2bcc:	89 e9       	ldi	r24, 0x99	; 153
    2bce:	91 e0       	ldi	r25, 0x01	; 1
    2bd0:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(low_channel_1);
    2bd4:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <low_channel_1>
    2bd8:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <low_channel_1+0x1>
    2bdc:	4a e0       	ldi	r20, 0x0A	; 10
    2bde:	50 e0       	ldi	r21, 0x00	; 0
    2be0:	89 e9       	ldi	r24, 0x99	; 153
    2be2:	91 e0       	ldi	r25, 0x01	; 1
    2be4:	0e 94 ad 21 	call	0x435a	; 0x435a <_ZN5Print5printEii>
		Serial.print(F(" - "));
    2be8:	6e e6       	ldi	r22, 0x6E	; 110
    2bea:	7c e0       	ldi	r23, 0x0C	; 12
    2bec:	89 e9       	ldi	r24, 0x99	; 153
    2bee:	91 e0       	ldi	r25, 0x01	; 1
    2bf0:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(center_channel_1);
    2bf4:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <center_channel_1>
    2bf8:	70 91 7d 01 	lds	r23, 0x017D	; 0x80017d <center_channel_1+0x1>
    2bfc:	4a e0       	ldi	r20, 0x0A	; 10
    2bfe:	50 e0       	ldi	r21, 0x00	; 0
    2c00:	89 e9       	ldi	r24, 0x99	; 153
    2c02:	91 e0       	ldi	r25, 0x01	; 1
    2c04:	0e 94 ad 21 	call	0x435a	; 0x435a <_ZN5Print5printEii>
		Serial.print(F(" - "));
    2c08:	6a e6       	ldi	r22, 0x6A	; 106
    2c0a:	7c e0       	ldi	r23, 0x0C	; 12
    2c0c:	89 e9       	ldi	r24, 0x99	; 153
    2c0e:	91 e0       	ldi	r25, 0x01	; 1
    2c10:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(high_channel_1);
    2c14:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <high_channel_1>
    2c18:	70 91 75 01 	lds	r23, 0x0175	; 0x800175 <high_channel_1+0x1>
    2c1c:	4a e0       	ldi	r20, 0x0A	; 10
    2c1e:	50 e0       	ldi	r21, 0x00	; 0
    2c20:	89 e9       	ldi	r24, 0x99	; 153
    2c22:	91 e0       	ldi	r25, 0x01	; 1
    2c24:	0e 94 b4 21 	call	0x4368	; 0x4368 <_ZN5Print7printlnEii>
		Serial.print(F("Digital input 09 values:"));
    2c28:	61 e5       	ldi	r22, 0x51	; 81
    2c2a:	7c e0       	ldi	r23, 0x0C	; 12
    2c2c:	89 e9       	ldi	r24, 0x99	; 153
    2c2e:	91 e0       	ldi	r25, 0x01	; 1
    2c30:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(low_channel_2);
    2c34:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <low_channel_2>
    2c38:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <low_channel_2+0x1>
    2c3c:	4a e0       	ldi	r20, 0x0A	; 10
    2c3e:	50 e0       	ldi	r21, 0x00	; 0
    2c40:	89 e9       	ldi	r24, 0x99	; 153
    2c42:	91 e0       	ldi	r25, 0x01	; 1
    2c44:	0e 94 ad 21 	call	0x435a	; 0x435a <_ZN5Print5printEii>
		Serial.print(F(" - "));
    2c48:	6d e4       	ldi	r22, 0x4D	; 77
    2c4a:	7c e0       	ldi	r23, 0x0C	; 12
    2c4c:	89 e9       	ldi	r24, 0x99	; 153
    2c4e:	91 e0       	ldi	r25, 0x01	; 1
    2c50:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(center_channel_2);
    2c54:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <center_channel_2>
    2c58:	70 91 7b 01 	lds	r23, 0x017B	; 0x80017b <center_channel_2+0x1>
    2c5c:	4a e0       	ldi	r20, 0x0A	; 10
    2c5e:	50 e0       	ldi	r21, 0x00	; 0
    2c60:	89 e9       	ldi	r24, 0x99	; 153
    2c62:	91 e0       	ldi	r25, 0x01	; 1
    2c64:	0e 94 ad 21 	call	0x435a	; 0x435a <_ZN5Print5printEii>
		Serial.print(F(" - "));
    2c68:	69 e4       	ldi	r22, 0x49	; 73
    2c6a:	7c e0       	ldi	r23, 0x0C	; 12
    2c6c:	89 e9       	ldi	r24, 0x99	; 153
    2c6e:	91 e0       	ldi	r25, 0x01	; 1
    2c70:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(high_channel_2);
    2c74:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <high_channel_2>
    2c78:	70 91 73 01 	lds	r23, 0x0173	; 0x800173 <high_channel_2+0x1>
    2c7c:	4a e0       	ldi	r20, 0x0A	; 10
    2c7e:	50 e0       	ldi	r21, 0x00	; 0
    2c80:	89 e9       	ldi	r24, 0x99	; 153
    2c82:	91 e0       	ldi	r25, 0x01	; 1
    2c84:	0e 94 b4 21 	call	0x4368	; 0x4368 <_ZN5Print7printlnEii>
		Serial.print(F("Digital input 10 values:"));
    2c88:	60 e3       	ldi	r22, 0x30	; 48
    2c8a:	7c e0       	ldi	r23, 0x0C	; 12
    2c8c:	89 e9       	ldi	r24, 0x99	; 153
    2c8e:	91 e0       	ldi	r25, 0x01	; 1
    2c90:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(low_channel_3);
    2c94:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <low_channel_3>
    2c98:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <low_channel_3+0x1>
    2c9c:	4a e0       	ldi	r20, 0x0A	; 10
    2c9e:	50 e0       	ldi	r21, 0x00	; 0
    2ca0:	89 e9       	ldi	r24, 0x99	; 153
    2ca2:	91 e0       	ldi	r25, 0x01	; 1
    2ca4:	0e 94 ad 21 	call	0x435a	; 0x435a <_ZN5Print5printEii>
		Serial.print(F(" - "));
    2ca8:	6c e2       	ldi	r22, 0x2C	; 44
    2caa:	7c e0       	ldi	r23, 0x0C	; 12
    2cac:	89 e9       	ldi	r24, 0x99	; 153
    2cae:	91 e0       	ldi	r25, 0x01	; 1
    2cb0:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(center_channel_3);
    2cb4:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <center_channel_3>
    2cb8:	70 91 79 01 	lds	r23, 0x0179	; 0x800179 <center_channel_3+0x1>
    2cbc:	4a e0       	ldi	r20, 0x0A	; 10
    2cbe:	50 e0       	ldi	r21, 0x00	; 0
    2cc0:	89 e9       	ldi	r24, 0x99	; 153
    2cc2:	91 e0       	ldi	r25, 0x01	; 1
    2cc4:	0e 94 ad 21 	call	0x435a	; 0x435a <_ZN5Print5printEii>
		Serial.print(F(" - "));
    2cc8:	68 e2       	ldi	r22, 0x28	; 40
    2cca:	7c e0       	ldi	r23, 0x0C	; 12
    2ccc:	89 e9       	ldi	r24, 0x99	; 153
    2cce:	91 e0       	ldi	r25, 0x01	; 1
    2cd0:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(high_channel_3);
    2cd4:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <high_channel_3>
    2cd8:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <high_channel_3+0x1>
    2cdc:	4a e0       	ldi	r20, 0x0A	; 10
    2cde:	50 e0       	ldi	r21, 0x00	; 0
    2ce0:	89 e9       	ldi	r24, 0x99	; 153
    2ce2:	91 e0       	ldi	r25, 0x01	; 1
    2ce4:	0e 94 b4 21 	call	0x4368	; 0x4368 <_ZN5Print7printlnEii>
		Serial.print(F("Digital input 11 values:"));
    2ce8:	6f e0       	ldi	r22, 0x0F	; 15
    2cea:	7c e0       	ldi	r23, 0x0C	; 12
    2cec:	89 e9       	ldi	r24, 0x99	; 153
    2cee:	91 e0       	ldi	r25, 0x01	; 1
    2cf0:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(low_channel_4);
    2cf4:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <low_channel_4>
    2cf8:	70 91 67 01 	lds	r23, 0x0167	; 0x800167 <low_channel_4+0x1>
    2cfc:	4a e0       	ldi	r20, 0x0A	; 10
    2cfe:	50 e0       	ldi	r21, 0x00	; 0
    2d00:	89 e9       	ldi	r24, 0x99	; 153
    2d02:	91 e0       	ldi	r25, 0x01	; 1
    2d04:	0e 94 ad 21 	call	0x435a	; 0x435a <_ZN5Print5printEii>
		Serial.print(F(" - "));
    2d08:	6b e0       	ldi	r22, 0x0B	; 11
    2d0a:	7c e0       	ldi	r23, 0x0C	; 12
    2d0c:	89 e9       	ldi	r24, 0x99	; 153
    2d0e:	91 e0       	ldi	r25, 0x01	; 1
    2d10:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.print(center_channel_4);
    2d14:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <center_channel_4>
    2d18:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <center_channel_4+0x1>
    2d1c:	4a e0       	ldi	r20, 0x0A	; 10
    2d1e:	50 e0       	ldi	r21, 0x00	; 0
    2d20:	89 e9       	ldi	r24, 0x99	; 153
    2d22:	91 e0       	ldi	r25, 0x01	; 1
    2d24:	0e 94 ad 21 	call	0x435a	; 0x435a <_ZN5Print5printEii>
		Serial.print(F(" - "));
    2d28:	67 e0       	ldi	r22, 0x07	; 7
    2d2a:	7c e0       	ldi	r23, 0x0C	; 12
    2d2c:	89 e9       	ldi	r24, 0x99	; 153
    2d2e:	91 e0       	ldi	r25, 0x01	; 1
    2d30:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(high_channel_4);
    2d34:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <high_channel_4>
    2d38:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <high_channel_4+0x1>
    2d3c:	4a e0       	ldi	r20, 0x0A	; 10
    2d3e:	50 e0       	ldi	r21, 0x00	; 0
    2d40:	89 e9       	ldi	r24, 0x99	; 153
    2d42:	91 e0       	ldi	r25, 0x01	; 1
    2d44:	0e 94 b4 21 	call	0x4368	; 0x4368 <_ZN5Print7printlnEii>
		Serial.println(F("Move stick 'nose up' and back to center to continue"));
    2d48:	63 ed       	ldi	r22, 0xD3	; 211
    2d4a:	7b e0       	ldi	r23, 0x0B	; 11
    2d4c:	89 e9       	ldi	r24, 0x99	; 153
    2d4e:	91 e0       	ldi	r25, 0x01	; 1
    2d50:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		check_to_continue();
    2d54:	0e 94 ac 0a 	call	0x1558	; 0x1558 <_Z17check_to_continuev>
	}
	
	if(error == 0){
    2d58:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <error>
    2d5c:	81 11       	cpse	r24, r1
    2d5e:	6c c0       	rjmp	.+216    	; 0x2e38 <loop+0x6a6>
		//What gyro is connected
		Serial.println(F(""));
    2d60:	62 ed       	ldi	r22, 0xD2	; 210
    2d62:	7b e0       	ldi	r23, 0x0B	; 11
    2d64:	89 e9       	ldi	r24, 0x99	; 153
    2d66:	91 e0       	ldi	r25, 0x01	; 1
    2d68:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("==================================================="));
    2d6c:	6e e9       	ldi	r22, 0x9E	; 158
    2d6e:	7b e0       	ldi	r23, 0x0B	; 11
    2d70:	89 e9       	ldi	r24, 0x99	; 153
    2d72:	91 e0       	ldi	r25, 0x01	; 1
    2d74:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Gyro search"));
    2d78:	62 e9       	ldi	r22, 0x92	; 146
    2d7a:	7b e0       	ldi	r23, 0x0B	; 11
    2d7c:	89 e9       	ldi	r24, 0x99	; 153
    2d7e:	91 e0       	ldi	r25, 0x01	; 1
    2d80:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("==================================================="));
    2d84:	6e e5       	ldi	r22, 0x5E	; 94
    2d86:	7b e0       	ldi	r23, 0x0B	; 11
    2d88:	89 e9       	ldi	r24, 0x99	; 153
    2d8a:	91 e0       	ldi	r25, 0x01	; 1
    2d8c:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		delay(2000);
    2d90:	60 ed       	ldi	r22, 0xD0	; 208
    2d92:	77 e0       	ldi	r23, 0x07	; 7
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
		
		Serial.println(F("Searching for MPU-9255 on address 0x68/104"));
    2d9c:	63 e3       	ldi	r22, 0x33	; 51
    2d9e:	7b e0       	ldi	r23, 0x0B	; 11
    2da0:	89 e9       	ldi	r24, 0x99	; 153
    2da2:	91 e0       	ldi	r25, 0x01	; 1
    2da4:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		delay(1000);
    2da8:	68 ee       	ldi	r22, 0xE8	; 232
    2daa:	73 e0       	ldi	r23, 0x03	; 3
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
		if(search_gyro(0x68, 0x75) == 0x73){
    2db4:	65 e7       	ldi	r22, 0x75	; 117
    2db6:	70 e0       	ldi	r23, 0x00	; 0
    2db8:	88 e6       	ldi	r24, 0x68	; 104
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <_Z11search_gyroii>
    2dc0:	83 37       	cpi	r24, 0x73	; 115
    2dc2:	31 f4       	brne	.+12     	; 0x2dd0 <loop+0x63e>
			Serial.println(F("MPU-9255 found on address 0x68"));
    2dc4:	64 e1       	ldi	r22, 0x14	; 20
    2dc6:	7b e0       	ldi	r23, 0x0B	; 11
    2dc8:	89 e9       	ldi	r24, 0x99	; 153
    2dca:	91 e0       	ldi	r25, 0x01	; 1
    2dcc:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
			type = 1;
			gyro_address = 0x68;
		}
		error = 0;
    2dd0:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <error>
		type = 1;
    2dd4:	81 e0       	ldi	r24, 0x01	; 1
    2dd6:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <type>
		gyro_address = 0x68;
    2dda:	98 e6       	ldi	r25, 0x68	; 104
    2ddc:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <gyro_address>
				type = 3;
				gyro_address = 0x6B;
			}
		}
		
		if(type == 0){
    2de0:	81 11       	cpse	r24, r1
    2de2:	0a c0       	rjmp	.+20     	; 0x2df8 <loop+0x666>
			Serial.println(F("No gyro device found!!! (ERROR 3)"));
    2de4:	62 ef       	ldi	r22, 0xF2	; 242
    2de6:	7a e0       	ldi	r23, 0x0A	; 10
    2de8:	89 e9       	ldi	r24, 0x99	; 153
    2dea:	91 e0       	ldi	r25, 0x01	; 1
    2dec:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
			error = 1;
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
    2df6:	20 c0       	rjmp	.+64     	; 0x2e38 <loop+0x6a6>
		}
		
		else{
			delay(3000);
    2df8:	68 eb       	ldi	r22, 0xB8	; 184
    2dfa:	7b e0       	ldi	r23, 0x0B	; 11
    2dfc:	80 e0       	ldi	r24, 0x00	; 0
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
			Serial.println(F(""));
    2e04:	61 ef       	ldi	r22, 0xF1	; 241
    2e06:	7a e0       	ldi	r23, 0x0A	; 10
    2e08:	89 e9       	ldi	r24, 0x99	; 153
    2e0a:	91 e0       	ldi	r25, 0x01	; 1
    2e0c:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.println(F("==================================================="));
    2e10:	6d eb       	ldi	r22, 0xBD	; 189
    2e12:	7a e0       	ldi	r23, 0x0A	; 10
    2e14:	89 e9       	ldi	r24, 0x99	; 153
    2e16:	91 e0       	ldi	r25, 0x01	; 1
    2e18:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.println(F("Gyro register settings"));
    2e1c:	66 ea       	ldi	r22, 0xA6	; 166
    2e1e:	7a e0       	ldi	r23, 0x0A	; 10
    2e20:	89 e9       	ldi	r24, 0x99	; 153
    2e22:	91 e0       	ldi	r25, 0x01	; 1
    2e24:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.println(F("==================================================="));
    2e28:	62 e7       	ldi	r22, 0x72	; 114
    2e2a:	7a e0       	ldi	r23, 0x0A	; 10
    2e2c:	89 e9       	ldi	r24, 0x99	; 153
    2e2e:	91 e0       	ldi	r25, 0x01	; 1
    2e30:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
			start_gyro(); //Setup the gyro for further use
    2e34:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <_Z10start_gyrov>
		}
	}
	
	//If the gyro is found we can setup the correct gyro axes.
	if(error == 0){
    2e38:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <error>
    2e3c:	81 11       	cpse	r24, r1
    2e3e:	1e c2       	rjmp	.+1084   	; 0x327c <loop+0xaea>
		delay(3000);
    2e40:	68 eb       	ldi	r22, 0xB8	; 184
    2e42:	7b e0       	ldi	r23, 0x0B	; 11
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
		Serial.println(F(""));
    2e4c:	61 e7       	ldi	r22, 0x71	; 113
    2e4e:	7a e0       	ldi	r23, 0x0A	; 10
    2e50:	89 e9       	ldi	r24, 0x99	; 153
    2e52:	91 e0       	ldi	r25, 0x01	; 1
    2e54:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("==================================================="));
    2e58:	6d e3       	ldi	r22, 0x3D	; 61
    2e5a:	7a e0       	ldi	r23, 0x0A	; 10
    2e5c:	89 e9       	ldi	r24, 0x99	; 153
    2e5e:	91 e0       	ldi	r25, 0x01	; 1
    2e60:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Gyro calibration"));
    2e64:	6c e2       	ldi	r22, 0x2C	; 44
    2e66:	7a e0       	ldi	r23, 0x0A	; 10
    2e68:	89 e9       	ldi	r24, 0x99	; 153
    2e6a:	91 e0       	ldi	r25, 0x01	; 1
    2e6c:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("==================================================="));
    2e70:	68 ef       	ldi	r22, 0xF8	; 248
    2e72:	79 e0       	ldi	r23, 0x09	; 9
    2e74:	89 e9       	ldi	r24, 0x99	; 153
    2e76:	91 e0       	ldi	r25, 0x01	; 1
    2e78:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Don't move the quadcopter!! Calibration starts in 3 seconds"));
    2e7c:	6c eb       	ldi	r22, 0xBC	; 188
    2e7e:	79 e0       	ldi	r23, 0x09	; 9
    2e80:	89 e9       	ldi	r24, 0x99	; 153
    2e82:	91 e0       	ldi	r25, 0x01	; 1
    2e84:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		delay(3000);
    2e88:	68 eb       	ldi	r22, 0xB8	; 184
    2e8a:	7b e0       	ldi	r23, 0x0B	; 11
    2e8c:	80 e0       	ldi	r24, 0x00	; 0
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
		Serial.println(F("Calibrating the gyro, this will take +/- 8 seconds"));
    2e94:	69 e8       	ldi	r22, 0x89	; 137
    2e96:	79 e0       	ldi	r23, 0x09	; 9
    2e98:	89 e9       	ldi	r24, 0x99	; 153
    2e9a:	91 e0       	ldi	r25, 0x01	; 1
    2e9c:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.print(F("Please wait"));
    2ea0:	6d e7       	ldi	r22, 0x7D	; 125
    2ea2:	79 e0       	ldi	r23, 0x09	; 9
    2ea4:	89 e9       	ldi	r24, 0x99	; 153
    2ea6:	91 e0       	ldi	r25, 0x01	; 1
    2ea8:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
		for (cal_int = 0; cal_int < 2000 ; cal_int ++){              //Take 2000 readings for calibration.
    2eac:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <cal_int+0x1>
    2eb0:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <cal_int>
			if(cal_int % 100 == 0)Serial.print(F("."));                //Print dot to indicate calibration.
    2eb4:	c4 e6       	ldi	r28, 0x64	; 100
    2eb6:	d0 e0       	ldi	r29, 0x00	; 0
		Serial.println(F("Don't move the quadcopter!! Calibration starts in 3 seconds"));
		delay(3000);
		Serial.println(F("Calibrating the gyro, this will take +/- 8 seconds"));
		Serial.print(F("Please wait"));
		//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
		for (cal_int = 0; cal_int < 2000 ; cal_int ++){              //Take 2000 readings for calibration.
    2eb8:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <cal_int>
    2ebc:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <cal_int+0x1>
    2ec0:	80 3d       	cpi	r24, 0xD0	; 208
    2ec2:	27 e0       	ldi	r18, 0x07	; 7
    2ec4:	92 07       	cpc	r25, r18
    2ec6:	0c f0       	brlt	.+2      	; 0x2eca <loop+0x738>
    2ec8:	6b c0       	rjmp	.+214    	; 0x2fa0 <loop+0x80e>
			if(cal_int % 100 == 0)Serial.print(F("."));                //Print dot to indicate calibration.
    2eca:	be 01       	movw	r22, r28
    2ecc:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <__divmodhi4>
    2ed0:	89 2b       	or	r24, r25
    2ed2:	31 f4       	brne	.+12     	; 0x2ee0 <loop+0x74e>
    2ed4:	6b e7       	ldi	r22, 0x7B	; 123
    2ed6:	79 e0       	ldi	r23, 0x09	; 9
    2ed8:	89 e9       	ldi	r24, 0x99	; 153
    2eda:	91 e0       	ldi	r25, 0x01	; 1
    2edc:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
			gyro_signalen();                                           //Read the gyro output.
    2ee0:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <_Z13gyro_signalenv>
			gyro_roll_cal += gyro_roll;                                //Ad roll value to gyro_roll_cal.
    2ee4:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <gyro_roll>
    2ee8:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <gyro_roll+0x1>
    2eec:	40 91 44 01 	lds	r20, 0x0144	; 0x800144 <gyro_roll+0x2>
    2ef0:	50 91 45 01 	lds	r21, 0x0145	; 0x800145 <gyro_roll+0x3>
    2ef4:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <gyro_roll_cal>
    2ef8:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <gyro_roll_cal+0x1>
    2efc:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <gyro_roll_cal+0x2>
    2f00:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <gyro_roll_cal+0x3>
    2f04:	0e 94 a9 1c 	call	0x3952	; 0x3952 <__addsf3>
    2f08:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <gyro_roll_cal>
    2f0c:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <gyro_roll_cal+0x1>
    2f10:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <gyro_roll_cal+0x2>
    2f14:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <gyro_roll_cal+0x3>
			gyro_pitch_cal += gyro_pitch;                              //Ad pitch value to gyro_pitch_cal.
    2f18:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <gyro_pitch>
    2f1c:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <gyro_pitch+0x1>
    2f20:	40 91 48 01 	lds	r20, 0x0148	; 0x800148 <gyro_pitch+0x2>
    2f24:	50 91 49 01 	lds	r21, 0x0149	; 0x800149 <gyro_pitch+0x3>
    2f28:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <gyro_pitch_cal>
    2f2c:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <gyro_pitch_cal+0x1>
    2f30:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <gyro_pitch_cal+0x2>
    2f34:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <gyro_pitch_cal+0x3>
    2f38:	0e 94 a9 1c 	call	0x3952	; 0x3952 <__addsf3>
    2f3c:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <gyro_pitch_cal>
    2f40:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <gyro_pitch_cal+0x1>
    2f44:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <gyro_pitch_cal+0x2>
    2f48:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <gyro_pitch_cal+0x3>
			gyro_yaw_cal += gyro_yaw;                                  //Ad yaw value to gyro_yaw_cal.
    2f4c:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <gyro_yaw>
    2f50:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <gyro_yaw+0x1>
    2f54:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <gyro_yaw+0x2>
    2f58:	50 91 41 01 	lds	r21, 0x0141	; 0x800141 <gyro_yaw+0x3>
    2f5c:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <__data_end>
    2f60:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <__data_end+0x1>
    2f64:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end+0x2>
    2f68:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x3>
    2f6c:	0e 94 a9 1c 	call	0x3952	; 0x3952 <__addsf3>
    2f70:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <__data_end>
    2f74:	70 93 33 01 	sts	0x0133, r23	; 0x800133 <__data_end+0x1>
    2f78:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end+0x2>
    2f7c:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__data_end+0x3>
			delay(4);                                                  //Wait 3 milliseconds before the next loop.
    2f80:	64 e0       	ldi	r22, 0x04	; 4
    2f82:	70 e0       	ldi	r23, 0x00	; 0
    2f84:	80 e0       	ldi	r24, 0x00	; 0
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
		Serial.println(F("Don't move the quadcopter!! Calibration starts in 3 seconds"));
		delay(3000);
		Serial.println(F("Calibrating the gyro, this will take +/- 8 seconds"));
		Serial.print(F("Please wait"));
		//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
		for (cal_int = 0; cal_int < 2000 ; cal_int ++){              //Take 2000 readings for calibration.
    2f8c:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <cal_int>
    2f90:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <cal_int+0x1>
    2f94:	01 96       	adiw	r24, 0x01	; 1
    2f96:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <cal_int+0x1>
    2f9a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <cal_int>
    2f9e:	8c cf       	rjmp	.-232    	; 0x2eb8 <loop+0x726>
			gyro_pitch_cal += gyro_pitch;                              //Ad pitch value to gyro_pitch_cal.
			gyro_yaw_cal += gyro_yaw;                                  //Ad yaw value to gyro_yaw_cal.
			delay(4);                                                  //Wait 3 milliseconds before the next loop.
		}
		//Now that we have 2000 measures, we need to devide by 2000 to get the average gyro offset.
		gyro_roll_cal /= 2000;                                       //Divide the roll total by 2000.
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	4a ef       	ldi	r20, 0xFA	; 250
    2fa6:	54 e4       	ldi	r21, 0x44	; 68
    2fa8:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <gyro_roll_cal>
    2fac:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <gyro_roll_cal+0x1>
    2fb0:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <gyro_roll_cal+0x2>
    2fb4:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <gyro_roll_cal+0x3>
    2fb8:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <__divsf3>
    2fbc:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <gyro_roll_cal>
    2fc0:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <gyro_roll_cal+0x1>
    2fc4:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <gyro_roll_cal+0x2>
    2fc8:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <gyro_roll_cal+0x3>
		gyro_pitch_cal /= 2000;                                      //Divide the pitch total by 2000.
    2fcc:	20 e0       	ldi	r18, 0x00	; 0
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	4a ef       	ldi	r20, 0xFA	; 250
    2fd2:	54 e4       	ldi	r21, 0x44	; 68
    2fd4:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <gyro_pitch_cal>
    2fd8:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <gyro_pitch_cal+0x1>
    2fdc:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <gyro_pitch_cal+0x2>
    2fe0:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <gyro_pitch_cal+0x3>
    2fe4:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <__divsf3>
    2fe8:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <gyro_pitch_cal>
    2fec:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <gyro_pitch_cal+0x1>
    2ff0:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <gyro_pitch_cal+0x2>
    2ff4:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <gyro_pitch_cal+0x3>
		gyro_yaw_cal /= 2000;                                        //Divide the yaw total by 2000.
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	4a ef       	ldi	r20, 0xFA	; 250
    2ffe:	54 e4       	ldi	r21, 0x44	; 68
    3000:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <__data_end>
    3004:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <__data_end+0x1>
    3008:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end+0x2>
    300c:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x3>
    3010:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <__divsf3>
    3014:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <__data_end>
    3018:	70 93 33 01 	sts	0x0133, r23	; 0x800133 <__data_end+0x1>
    301c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end+0x2>
    3020:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__data_end+0x3>
		
		//Show the calibration results
		Serial.println(F(""));
    3024:	6a e7       	ldi	r22, 0x7A	; 122
    3026:	79 e0       	ldi	r23, 0x09	; 9
    3028:	89 e9       	ldi	r24, 0x99	; 153
    302a:	91 e0       	ldi	r25, 0x01	; 1
    302c:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.print(F("Axis 1 offset="));
    3030:	6b e6       	ldi	r22, 0x6B	; 107
    3032:	79 e0       	ldi	r23, 0x09	; 9
    3034:	89 e9       	ldi	r24, 0x99	; 153
    3036:	91 e0       	ldi	r25, 0x01	; 1
    3038:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(gyro_roll_cal);
    303c:	40 91 3a 01 	lds	r20, 0x013A	; 0x80013a <gyro_roll_cal>
    3040:	50 91 3b 01 	lds	r21, 0x013B	; 0x80013b <gyro_roll_cal+0x1>
    3044:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <gyro_roll_cal+0x2>
    3048:	70 91 3d 01 	lds	r23, 0x013D	; 0x80013d <gyro_roll_cal+0x3>
    304c:	22 e0       	ldi	r18, 0x02	; 2
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	89 e9       	ldi	r24, 0x99	; 153
    3052:	91 e0       	ldi	r25, 0x01	; 1
    3054:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <_ZN5Print7printlnEdi>
		Serial.print(F("Axis 2 offset="));
    3058:	6c e5       	ldi	r22, 0x5C	; 92
    305a:	79 e0       	ldi	r23, 0x09	; 9
    305c:	89 e9       	ldi	r24, 0x99	; 153
    305e:	91 e0       	ldi	r25, 0x01	; 1
    3060:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(gyro_pitch_cal);
    3064:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <gyro_pitch_cal>
    3068:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <gyro_pitch_cal+0x1>
    306c:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <gyro_pitch_cal+0x2>
    3070:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <gyro_pitch_cal+0x3>
    3074:	22 e0       	ldi	r18, 0x02	; 2
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	89 e9       	ldi	r24, 0x99	; 153
    307a:	91 e0       	ldi	r25, 0x01	; 1
    307c:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <_ZN5Print7printlnEdi>
		Serial.print(F("Axis 3 offset="));
    3080:	6d e4       	ldi	r22, 0x4D	; 77
    3082:	79 e0       	ldi	r23, 0x09	; 9
    3084:	89 e9       	ldi	r24, 0x99	; 153
    3086:	91 e0       	ldi	r25, 0x01	; 1
    3088:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(gyro_yaw_cal);
    308c:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <__data_end>
    3090:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <__data_end+0x1>
    3094:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <__data_end+0x2>
    3098:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <__data_end+0x3>
    309c:	22 e0       	ldi	r18, 0x02	; 2
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	89 e9       	ldi	r24, 0x99	; 153
    30a2:	91 e0       	ldi	r25, 0x01	; 1
    30a4:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <_ZN5Print7printlnEdi>
		Serial.println(F(""));
    30a8:	6c e4       	ldi	r22, 0x4C	; 76
    30aa:	79 e0       	ldi	r23, 0x09	; 9
    30ac:	89 e9       	ldi	r24, 0x99	; 153
    30ae:	91 e0       	ldi	r25, 0x01	; 1
    30b0:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		
		Serial.println(F("==================================================="));
    30b4:	68 e1       	ldi	r22, 0x18	; 24
    30b6:	79 e0       	ldi	r23, 0x09	; 9
    30b8:	89 e9       	ldi	r24, 0x99	; 153
    30ba:	91 e0       	ldi	r25, 0x01	; 1
    30bc:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Gyro axes configuration"));
    30c0:	60 e0       	ldi	r22, 0x00	; 0
    30c2:	79 e0       	ldi	r23, 0x09	; 9
    30c4:	89 e9       	ldi	r24, 0x99	; 153
    30c6:	91 e0       	ldi	r25, 0x01	; 1
    30c8:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("==================================================="));
    30cc:	6c ec       	ldi	r22, 0xCC	; 204
    30ce:	78 e0       	ldi	r23, 0x08	; 8
    30d0:	89 e9       	ldi	r24, 0x99	; 153
    30d2:	91 e0       	ldi	r25, 0x01	; 1
    30d4:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		
		//Detect the left wing up movement
		Serial.println(F("Lift the left side of the quadcopter to a 45 degree angle within 10 seconds"));
    30d8:	60 e8       	ldi	r22, 0x80	; 128
    30da:	78 e0       	ldi	r23, 0x08	; 8
    30dc:	89 e9       	ldi	r24, 0x99	; 153
    30de:	91 e0       	ldi	r25, 0x01	; 1
    30e0:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		//Check axis movement
		check_gyro_axes(1);
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	0e 94 6e 11 	call	0x22dc	; 0x22dc <_Z15check_gyro_axesh>
		if(error == 0){
    30ea:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <error>
    30ee:	81 11       	cpse	r24, r1
    30f0:	46 c0       	rjmp	.+140    	; 0x317e <loop+0x9ec>
			Serial.println(F("OK!"));
    30f2:	6c e7       	ldi	r22, 0x7C	; 124
    30f4:	78 e0       	ldi	r23, 0x08	; 8
    30f6:	89 e9       	ldi	r24, 0x99	; 153
    30f8:	91 e0       	ldi	r25, 0x01	; 1
    30fa:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.print(F("Angle detection = "));
    30fe:	69 e6       	ldi	r22, 0x69	; 105
    3100:	78 e0       	ldi	r23, 0x08	; 8
    3102:	89 e9       	ldi	r24, 0x99	; 153
    3104:	91 e0       	ldi	r25, 0x01	; 1
    3106:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
			Serial.println(roll_axis & 0b00000011);
    310a:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <roll_axis>
    310e:	63 70       	andi	r22, 0x03	; 3
    3110:	70 e0       	ldi	r23, 0x00	; 0
    3112:	4a e0       	ldi	r20, 0x0A	; 10
    3114:	50 e0       	ldi	r21, 0x00	; 0
    3116:	89 e9       	ldi	r24, 0x99	; 153
    3118:	91 e0       	ldi	r25, 0x01	; 1
    311a:	0e 94 b4 21 	call	0x4368	; 0x4368 <_ZN5Print7printlnEii>
			if(roll_axis & 0b10000000)Serial.println(F("Axis inverted = yes"));
    311e:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <roll_axis>
    3122:	87 ff       	sbrs	r24, 7
    3124:	03 c0       	rjmp	.+6      	; 0x312c <loop+0x99a>
    3126:	65 e5       	ldi	r22, 0x55	; 85
    3128:	78 e0       	ldi	r23, 0x08	; 8
    312a:	02 c0       	rjmp	.+4      	; 0x3130 <loop+0x99e>
			else Serial.println(F("Axis inverted = no"));
    312c:	62 e4       	ldi	r22, 0x42	; 66
    312e:	78 e0       	ldi	r23, 0x08	; 8
    3130:	89 e9       	ldi	r24, 0x99	; 153
    3132:	91 e0       	ldi	r25, 0x01	; 1
    3134:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.println(F("Put the quadcopter back in its original position"));
    3138:	61 e1       	ldi	r22, 0x11	; 17
    313a:	78 e0       	ldi	r23, 0x08	; 8
    313c:	89 e9       	ldi	r24, 0x99	; 153
    313e:	91 e0       	ldi	r25, 0x01	; 1
    3140:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.println(F("Move stick 'nose up' and back to center to continue"));
    3144:	6d ed       	ldi	r22, 0xDD	; 221
    3146:	77 e0       	ldi	r23, 0x07	; 7
    3148:	89 e9       	ldi	r24, 0x99	; 153
    314a:	91 e0       	ldi	r25, 0x01	; 1
    314c:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
			check_to_continue();
    3150:	0e 94 ac 0a 	call	0x1558	; 0x1558 <_Z17check_to_continuev>

			//Detect the nose up movement
			Serial.println(F(""));
    3154:	6c ed       	ldi	r22, 0xDC	; 220
    3156:	77 e0       	ldi	r23, 0x07	; 7
    3158:	89 e9       	ldi	r24, 0x99	; 153
    315a:	91 e0       	ldi	r25, 0x01	; 1
    315c:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.println(F(""));
    3160:	6b ed       	ldi	r22, 0xDB	; 219
    3162:	77 e0       	ldi	r23, 0x07	; 7
    3164:	89 e9       	ldi	r24, 0x99	; 153
    3166:	91 e0       	ldi	r25, 0x01	; 1
    3168:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.println(F("Lift the nose of the quadcopter to a 45 degree angle within 10 seconds"));
    316c:	64 e9       	ldi	r22, 0x94	; 148
    316e:	77 e0       	ldi	r23, 0x07	; 7
    3170:	89 e9       	ldi	r24, 0x99	; 153
    3172:	91 e0       	ldi	r25, 0x01	; 1
    3174:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
			//Check axis movement
			check_gyro_axes(2);
    3178:	82 e0       	ldi	r24, 0x02	; 2
    317a:	0e 94 6e 11 	call	0x22dc	; 0x22dc <_Z15check_gyro_axesh>
		}
		if(error == 0){
    317e:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <error>
    3182:	81 11       	cpse	r24, r1
    3184:	46 c0       	rjmp	.+140    	; 0x3212 <loop+0xa80>
			Serial.println(F("OK!"));
    3186:	60 e9       	ldi	r22, 0x90	; 144
    3188:	77 e0       	ldi	r23, 0x07	; 7
    318a:	89 e9       	ldi	r24, 0x99	; 153
    318c:	91 e0       	ldi	r25, 0x01	; 1
    318e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.print(F("Angle detection = "));
    3192:	6d e7       	ldi	r22, 0x7D	; 125
    3194:	77 e0       	ldi	r23, 0x07	; 7
    3196:	89 e9       	ldi	r24, 0x99	; 153
    3198:	91 e0       	ldi	r25, 0x01	; 1
    319a:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
			Serial.println(pitch_axis & 0b00000011);
    319e:	60 91 89 01 	lds	r22, 0x0189	; 0x800189 <pitch_axis>
    31a2:	63 70       	andi	r22, 0x03	; 3
    31a4:	70 e0       	ldi	r23, 0x00	; 0
    31a6:	4a e0       	ldi	r20, 0x0A	; 10
    31a8:	50 e0       	ldi	r21, 0x00	; 0
    31aa:	89 e9       	ldi	r24, 0x99	; 153
    31ac:	91 e0       	ldi	r25, 0x01	; 1
    31ae:	0e 94 b4 21 	call	0x4368	; 0x4368 <_ZN5Print7printlnEii>
			if(pitch_axis & 0b10000000)Serial.println(F("Axis inverted = yes"));
    31b2:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <pitch_axis>
    31b6:	87 ff       	sbrs	r24, 7
    31b8:	03 c0       	rjmp	.+6      	; 0x31c0 <loop+0xa2e>
    31ba:	69 e6       	ldi	r22, 0x69	; 105
    31bc:	77 e0       	ldi	r23, 0x07	; 7
    31be:	02 c0       	rjmp	.+4      	; 0x31c4 <loop+0xa32>
			else Serial.println(F("Axis inverted = no"));
    31c0:	66 e5       	ldi	r22, 0x56	; 86
    31c2:	77 e0       	ldi	r23, 0x07	; 7
    31c4:	89 e9       	ldi	r24, 0x99	; 153
    31c6:	91 e0       	ldi	r25, 0x01	; 1
    31c8:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.println(F("Put the quadcopter back in its original position"));
    31cc:	65 e2       	ldi	r22, 0x25	; 37
    31ce:	77 e0       	ldi	r23, 0x07	; 7
    31d0:	89 e9       	ldi	r24, 0x99	; 153
    31d2:	91 e0       	ldi	r25, 0x01	; 1
    31d4:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.println(F("Move stick 'nose up' and back to center to continue"));
    31d8:	61 ef       	ldi	r22, 0xF1	; 241
    31da:	76 e0       	ldi	r23, 0x06	; 6
    31dc:	89 e9       	ldi	r24, 0x99	; 153
    31de:	91 e0       	ldi	r25, 0x01	; 1
    31e0:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
			check_to_continue();
    31e4:	0e 94 ac 0a 	call	0x1558	; 0x1558 <_Z17check_to_continuev>
			
			//Detect the nose right movement
			Serial.println(F(""));
    31e8:	60 ef       	ldi	r22, 0xF0	; 240
    31ea:	76 e0       	ldi	r23, 0x06	; 6
    31ec:	89 e9       	ldi	r24, 0x99	; 153
    31ee:	91 e0       	ldi	r25, 0x01	; 1
    31f0:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.println(F(""));
    31f4:	6f ee       	ldi	r22, 0xEF	; 239
    31f6:	76 e0       	ldi	r23, 0x06	; 6
    31f8:	89 e9       	ldi	r24, 0x99	; 153
    31fa:	91 e0       	ldi	r25, 0x01	; 1
    31fc:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.println(F("Rotate the nose of the quadcopter 45 degree to the right within 10 seconds"));
    3200:	64 ea       	ldi	r22, 0xA4	; 164
    3202:	76 e0       	ldi	r23, 0x06	; 6
    3204:	89 e9       	ldi	r24, 0x99	; 153
    3206:	91 e0       	ldi	r25, 0x01	; 1
    3208:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
			//Check axis movement
			check_gyro_axes(3);
    320c:	83 e0       	ldi	r24, 0x03	; 3
    320e:	0e 94 6e 11 	call	0x22dc	; 0x22dc <_Z15check_gyro_axesh>
		}
		if(error == 0){
    3212:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <error>
    3216:	81 11       	cpse	r24, r1
    3218:	31 c0       	rjmp	.+98     	; 0x327c <loop+0xaea>
			Serial.println(F("OK!"));
    321a:	60 ea       	ldi	r22, 0xA0	; 160
    321c:	76 e0       	ldi	r23, 0x06	; 6
    321e:	89 e9       	ldi	r24, 0x99	; 153
    3220:	91 e0       	ldi	r25, 0x01	; 1
    3222:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.print(F("Angle detection = "));
    3226:	6d e8       	ldi	r22, 0x8D	; 141
    3228:	76 e0       	ldi	r23, 0x06	; 6
    322a:	89 e9       	ldi	r24, 0x99	; 153
    322c:	91 e0       	ldi	r25, 0x01	; 1
    322e:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
			Serial.println(yaw_axis & 0b00000011);
    3232:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <yaw_axis>
    3236:	63 70       	andi	r22, 0x03	; 3
    3238:	70 e0       	ldi	r23, 0x00	; 0
    323a:	4a e0       	ldi	r20, 0x0A	; 10
    323c:	50 e0       	ldi	r21, 0x00	; 0
    323e:	89 e9       	ldi	r24, 0x99	; 153
    3240:	91 e0       	ldi	r25, 0x01	; 1
    3242:	0e 94 b4 21 	call	0x4368	; 0x4368 <_ZN5Print7printlnEii>
			if(yaw_axis & 0b10000000)Serial.println(F("Axis inverted = yes"));
    3246:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <yaw_axis>
    324a:	87 ff       	sbrs	r24, 7
    324c:	03 c0       	rjmp	.+6      	; 0x3254 <loop+0xac2>
    324e:	69 e7       	ldi	r22, 0x79	; 121
    3250:	76 e0       	ldi	r23, 0x06	; 6
    3252:	02 c0       	rjmp	.+4      	; 0x3258 <loop+0xac6>
			else Serial.println(F("Axis inverted = no"));
    3254:	66 e6       	ldi	r22, 0x66	; 102
    3256:	76 e0       	ldi	r23, 0x06	; 6
    3258:	89 e9       	ldi	r24, 0x99	; 153
    325a:	91 e0       	ldi	r25, 0x01	; 1
    325c:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.println(F("Put the quadcopter back in its original position"));
    3260:	65 e3       	ldi	r22, 0x35	; 53
    3262:	76 e0       	ldi	r23, 0x06	; 6
    3264:	89 e9       	ldi	r24, 0x99	; 153
    3266:	91 e0       	ldi	r25, 0x01	; 1
    3268:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.println(F("Move stick 'nose up' and back to center to continue"));
    326c:	61 e0       	ldi	r22, 0x01	; 1
    326e:	76 e0       	ldi	r23, 0x06	; 6
    3270:	89 e9       	ldi	r24, 0x99	; 153
    3272:	91 e0       	ldi	r25, 0x01	; 1
    3274:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
			check_to_continue();
    3278:	0e 94 ac 0a 	call	0x1558	; 0x1558 <_Z17check_to_continuev>
		}
	}
	if(error == 0){
    327c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <error>
    3280:	81 11       	cpse	r24, r1
    3282:	2e c0       	rjmp	.+92     	; 0x32e0 <loop+0xb4e>
		Serial.println(F(""));
    3284:	60 e0       	ldi	r22, 0x00	; 0
    3286:	76 e0       	ldi	r23, 0x06	; 6
    3288:	89 e9       	ldi	r24, 0x99	; 153
    328a:	91 e0       	ldi	r25, 0x01	; 1
    328c:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("==================================================="));
    3290:	6c ec       	ldi	r22, 0xCC	; 204
    3292:	75 e0       	ldi	r23, 0x05	; 5
    3294:	89 e9       	ldi	r24, 0x99	; 153
    3296:	91 e0       	ldi	r25, 0x01	; 1
    3298:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("LED test"));
    329c:	63 ec       	ldi	r22, 0xC3	; 195
    329e:	75 e0       	ldi	r23, 0x05	; 5
    32a0:	89 e9       	ldi	r24, 0x99	; 153
    32a2:	91 e0       	ldi	r25, 0x01	; 1
    32a4:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("==================================================="));
    32a8:	6f e8       	ldi	r22, 0x8F	; 143
    32aa:	75 e0       	ldi	r23, 0x05	; 5
    32ac:	89 e9       	ldi	r24, 0x99	; 153
    32ae:	91 e0       	ldi	r25, 0x01	; 1
    32b0:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		digitalWrite(LED_STATUS_PIN, HIGH);
    32b4:	61 e0       	ldi	r22, 0x01	; 1
    32b6:	8d e0       	ldi	r24, 0x0D	; 13
    32b8:	0e 94 77 25 	call	0x4aee	; 0x4aee <digitalWrite>
		Serial.println(F("The LED should now be lit"));
    32bc:	65 e7       	ldi	r22, 0x75	; 117
    32be:	75 e0       	ldi	r23, 0x05	; 5
    32c0:	89 e9       	ldi	r24, 0x99	; 153
    32c2:	91 e0       	ldi	r25, 0x01	; 1
    32c4:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Move stick 'nose up' and back to center to continue"));
    32c8:	61 e4       	ldi	r22, 0x41	; 65
    32ca:	75 e0       	ldi	r23, 0x05	; 5
    32cc:	89 e9       	ldi	r24, 0x99	; 153
    32ce:	91 e0       	ldi	r25, 0x01	; 1
    32d0:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		check_to_continue();
    32d4:	0e 94 ac 0a 	call	0x1558	; 0x1558 <_Z17check_to_continuev>
		digitalWrite(LED_STATUS_PIN, LOW);
    32d8:	60 e0       	ldi	r22, 0x00	; 0
    32da:	8d e0       	ldi	r24, 0x0D	; 13
    32dc:	0e 94 77 25 	call	0x4aee	; 0x4aee <digitalWrite>
	}
	
	Serial.println(F(""));
    32e0:	60 e4       	ldi	r22, 0x40	; 64
    32e2:	75 e0       	ldi	r23, 0x05	; 5
    32e4:	89 e9       	ldi	r24, 0x99	; 153
    32e6:	91 e0       	ldi	r25, 0x01	; 1
    32e8:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	if(error == 0){
    32ec:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <error>
    32f0:	81 11       	cpse	r24, r1
    32f2:	46 c0       	rjmp	.+140    	; 0x3380 <loop+0xbee>
		Serial.println(F("==================================================="));
    32f4:	6c e0       	ldi	r22, 0x0C	; 12
    32f6:	75 e0       	ldi	r23, 0x05	; 5
    32f8:	89 e9       	ldi	r24, 0x99	; 153
    32fa:	91 e0       	ldi	r25, 0x01	; 1
    32fc:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Final setup check"));
    3300:	6a ef       	ldi	r22, 0xFA	; 250
    3302:	74 e0       	ldi	r23, 0x04	; 4
    3304:	89 e9       	ldi	r24, 0x99	; 153
    3306:	91 e0       	ldi	r25, 0x01	; 1
    3308:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("==================================================="));
    330c:	66 ec       	ldi	r22, 0xC6	; 198
    330e:	74 e0       	ldi	r23, 0x04	; 4
    3310:	89 e9       	ldi	r24, 0x99	; 153
    3312:	91 e0       	ldi	r25, 0x01	; 1
    3314:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		delay(1000);
    3318:	68 ee       	ldi	r22, 0xE8	; 232
    331a:	73 e0       	ldi	r23, 0x03	; 3
    331c:	80 e0       	ldi	r24, 0x00	; 0
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
		if(receiver_check_byte == 0b00001111){
    3324:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <receiver_check_byte>
    3328:	8f 30       	cpi	r24, 0x0F	; 15
    332a:	39 f4       	brne	.+14     	; 0x333a <loop+0xba8>
			Serial.println(F("Receiver channels ok"));
    332c:	61 eb       	ldi	r22, 0xB1	; 177
    332e:	74 e0       	ldi	r23, 0x04	; 4
    3330:	89 e9       	ldi	r24, 0x99	; 153
    3332:	91 e0       	ldi	r25, 0x01	; 1
    3334:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3338:	09 c0       	rjmp	.+18     	; 0x334c <loop+0xbba>
		}
		else{
			Serial.println(F("Receiver channel verification failed!!! (ERROR 6)"));
    333a:	6f e7       	ldi	r22, 0x7F	; 127
    333c:	74 e0       	ldi	r23, 0x04	; 4
    333e:	89 e9       	ldi	r24, 0x99	; 153
    3340:	91 e0       	ldi	r25, 0x01	; 1
    3342:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
			error = 1;
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		}
		delay(1000);
    334c:	68 ee       	ldi	r22, 0xE8	; 232
    334e:	73 e0       	ldi	r23, 0x03	; 3
    3350:	80 e0       	ldi	r24, 0x00	; 0
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
		if(gyro_check_byte == 0b00000111){
    3358:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <gyro_check_byte>
    335c:	87 30       	cpi	r24, 0x07	; 7
    335e:	39 f4       	brne	.+14     	; 0x336e <loop+0xbdc>
			Serial.println(F("Gyro axes ok"));
    3360:	62 e7       	ldi	r22, 0x72	; 114
    3362:	74 e0       	ldi	r23, 0x04	; 4
    3364:	89 e9       	ldi	r24, 0x99	; 153
    3366:	91 e0       	ldi	r25, 0x01	; 1
    3368:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    336c:	09 c0       	rjmp	.+18     	; 0x3380 <loop+0xbee>
		}
		else{
			Serial.println(F("Gyro exes verification failed!!! (ERROR 7)"));
    336e:	67 e4       	ldi	r22, 0x47	; 71
    3370:	74 e0       	ldi	r23, 0x04	; 4
    3372:	89 e9       	ldi	r24, 0x99	; 153
    3374:	91 e0       	ldi	r25, 0x01	; 1
    3376:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
			error = 1;
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		}
	}
	
	if(error == 0){
    3380:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <error>
    3384:	81 11       	cpse	r24, r1
    3386:	b6 c2       	rjmp	.+1388   	; 0x38f4 <loop+0x1162>
		//If all is good, store the information in the EEPROM
		Serial.println(F(""));
    3388:	66 e4       	ldi	r22, 0x46	; 70
    338a:	74 e0       	ldi	r23, 0x04	; 4
    338c:	89 e9       	ldi	r24, 0x99	; 153
    338e:	91 e0       	ldi	r25, 0x01	; 1
    3390:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("==================================================="));
    3394:	62 e1       	ldi	r22, 0x12	; 18
    3396:	74 e0       	ldi	r23, 0x04	; 4
    3398:	89 e9       	ldi	r24, 0x99	; 153
    339a:	91 e0       	ldi	r25, 0x01	; 1
    339c:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Storing EEPROM information"));
    33a0:	67 ef       	ldi	r22, 0xF7	; 247
    33a2:	73 e0       	ldi	r23, 0x03	; 3
    33a4:	89 e9       	ldi	r24, 0x99	; 153
    33a6:	91 e0       	ldi	r25, 0x01	; 1
    33a8:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("==================================================="));
    33ac:	63 ec       	ldi	r22, 0xC3	; 195
    33ae:	73 e0       	ldi	r23, 0x03	; 3
    33b0:	89 e9       	ldi	r24, 0x99	; 153
    33b2:	91 e0       	ldi	r25, 0x01	; 1
    33b4:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Writing EEPROM"));
    33b8:	64 eb       	ldi	r22, 0xB4	; 180
    33ba:	73 e0       	ldi	r23, 0x03	; 3
    33bc:	89 e9       	ldi	r24, 0x99	; 153
    33be:	91 e0       	ldi	r25, 0x01	; 1
    33c0:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		delay(1000);
    33c4:	68 ee       	ldi	r22, 0xE8	; 232
    33c6:	73 e0       	ldi	r23, 0x03	; 3
    33c8:	80 e0       	ldi	r24, 0x00	; 0
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
		Serial.println(F("Done!"));
    33d0:	6e ea       	ldi	r22, 0xAE	; 174
    33d2:	73 e0       	ldi	r23, 0x03	; 3
    33d4:	89 e9       	ldi	r24, 0x99	; 153
    33d6:	91 e0       	ldi	r25, 0x01	; 1
    33d8:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		EEPROM.write(0, center_channel_1 & 0b11111111);
    33dc:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <center_channel_1>
    33e0:	80 e0       	ldi	r24, 0x00	; 0
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(1, center_channel_1 >> 8);
    33e8:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <center_channel_1+0x1>
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(2, center_channel_2 & 0b11111111);
    33f4:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <center_channel_2>
    33f8:	82 e0       	ldi	r24, 0x02	; 2
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(3, center_channel_2 >> 8);
    3400:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <center_channel_2+0x1>
    3404:	83 e0       	ldi	r24, 0x03	; 3
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(4, center_channel_3 & 0b11111111);
    340c:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <center_channel_3>
    3410:	84 e0       	ldi	r24, 0x04	; 4
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(5, center_channel_3 >> 8);
    3418:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <center_channel_3+0x1>
    341c:	85 e0       	ldi	r24, 0x05	; 5
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(6, center_channel_4 & 0b11111111);
    3424:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <center_channel_4>
    3428:	86 e0       	ldi	r24, 0x06	; 6
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(7, center_channel_4 >> 8);
    3430:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <center_channel_4+0x1>
    3434:	87 e0       	ldi	r24, 0x07	; 7
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(8, high_channel_1 & 0b11111111);
    343c:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <high_channel_1>
    3440:	88 e0       	ldi	r24, 0x08	; 8
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(9, high_channel_1 >> 8);
    3448:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <high_channel_1+0x1>
    344c:	89 e0       	ldi	r24, 0x09	; 9
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(10, high_channel_2 & 0b11111111);
    3454:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <high_channel_2>
    3458:	8a e0       	ldi	r24, 0x0A	; 10
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(11, high_channel_2 >> 8);
    3460:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <high_channel_2+0x1>
    3464:	8b e0       	ldi	r24, 0x0B	; 11
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(12, high_channel_3 & 0b11111111);
    346c:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <high_channel_3>
    3470:	8c e0       	ldi	r24, 0x0C	; 12
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(13, high_channel_3 >> 8);
    3478:	60 91 71 01 	lds	r22, 0x0171	; 0x800171 <high_channel_3+0x1>
    347c:	8d e0       	ldi	r24, 0x0D	; 13
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(14, high_channel_4 & 0b11111111);
    3484:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <high_channel_4>
    3488:	8e e0       	ldi	r24, 0x0E	; 14
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(15, high_channel_4 >> 8);
    3490:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <high_channel_4+0x1>
    3494:	8f e0       	ldi	r24, 0x0F	; 15
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(16, low_channel_1 & 0b11111111);
    349c:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <low_channel_1>
    34a0:	80 e1       	ldi	r24, 0x10	; 16
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(17, low_channel_1 >> 8);
    34a8:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <low_channel_1+0x1>
    34ac:	81 e1       	ldi	r24, 0x11	; 17
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(18, low_channel_2 & 0b11111111);
    34b4:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <low_channel_2>
    34b8:	82 e1       	ldi	r24, 0x12	; 18
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(19, low_channel_2 >> 8);
    34c0:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <low_channel_2+0x1>
    34c4:	83 e1       	ldi	r24, 0x13	; 19
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(20, low_channel_3 & 0b11111111);
    34cc:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <low_channel_3>
    34d0:	84 e1       	ldi	r24, 0x14	; 20
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(21, low_channel_3 >> 8);
    34d8:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <low_channel_3+0x1>
    34dc:	85 e1       	ldi	r24, 0x15	; 21
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(22, low_channel_4 & 0b11111111);
    34e4:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <low_channel_4>
    34e8:	86 e1       	ldi	r24, 0x16	; 22
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(23, low_channel_4 >> 8);
    34f0:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <low_channel_4+0x1>
    34f4:	87 e1       	ldi	r24, 0x17	; 23
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(24, channel_1_assign);
    34fc:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <channel_1_assign>
    3500:	88 e1       	ldi	r24, 0x18	; 24
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(25, channel_2_assign);
    3508:	60 91 8d 01 	lds	r22, 0x018D	; 0x80018d <channel_2_assign>
    350c:	89 e1       	ldi	r24, 0x19	; 25
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(26, channel_3_assign);
    3514:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <channel_3_assign>
    3518:	8a e1       	ldi	r24, 0x1A	; 26
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(27, channel_4_assign);
    3520:	60 91 8b 01 	lds	r22, 0x018B	; 0x80018b <channel_4_assign>
    3524:	8b e1       	ldi	r24, 0x1B	; 27
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(28, roll_axis);
    352c:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <roll_axis>
    3530:	8c e1       	ldi	r24, 0x1C	; 28
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(29, pitch_axis);
    3538:	60 91 89 01 	lds	r22, 0x0189	; 0x800189 <pitch_axis>
    353c:	8d e1       	ldi	r24, 0x1D	; 29
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(30, yaw_axis);
    3544:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <yaw_axis>
    3548:	8e e1       	ldi	r24, 0x1E	; 30
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(31, type);
    3550:	60 91 92 01 	lds	r22, 0x0192	; 0x800192 <type>
    3554:	8f e1       	ldi	r24, 0x1F	; 31
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(32, gyro_address);
    355c:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <gyro_address>
    3560:	80 e2       	ldi	r24, 0x20	; 32
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		//Write the EEPROM signature
		EEPROM.write(33, 'J');
    3568:	6a e4       	ldi	r22, 0x4A	; 74
    356a:	81 e2       	ldi	r24, 0x21	; 33
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(34, 'M');
    3572:	6d e4       	ldi	r22, 0x4D	; 77
    3574:	82 e2       	ldi	r24, 0x22	; 34
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		EEPROM.write(35, 'B');
    357c:	62 e4       	ldi	r22, 0x42	; 66
    357e:	83 e2       	ldi	r24, 0x23	; 35
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN11EEPROMClass5writeEih.isra.1>
		
		
		//To make sure evrything is ok, verify the EEPROM data.
		Serial.println(F("Verify EEPROM data"));
    3586:	6b e9       	ldi	r22, 0x9B	; 155
    3588:	73 e0       	ldi	r23, 0x03	; 3
    358a:	89 e9       	ldi	r24, 0x99	; 153
    358c:	91 e0       	ldi	r25, 0x01	; 1
    358e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		delay(1000);
    3592:	68 ee       	ldi	r22, 0xE8	; 232
    3594:	73 e0       	ldi	r23, 0x03	; 3
    3596:	80 e0       	ldi	r24, 0x00	; 0
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	0e 94 90 24 	call	0x4920	; 0x4920 <delay>
		if(center_channel_1 != ((EEPROM.read(1) << 8) | EEPROM.read(0)))error = 1;
    359e:	00 91 7c 01 	lds	r16, 0x017C	; 0x80017c <center_channel_1>
    35a2:	10 91 7d 01 	lds	r17, 0x017D	; 0x80017d <center_channel_1+0x1>
    35a6:	81 e0       	ldi	r24, 0x01	; 1
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    35ae:	c8 2f       	mov	r28, r24
    35b0:	80 e0       	ldi	r24, 0x00	; 0
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    35b8:	2c 2f       	mov	r18, r28
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	32 2f       	mov	r19, r18
    35be:	22 27       	eor	r18, r18
    35c0:	28 2b       	or	r18, r24
    35c2:	02 17       	cp	r16, r18
    35c4:	13 07       	cpc	r17, r19
    35c6:	19 f0       	breq	.+6      	; 0x35ce <loop+0xe3c>
    35c8:	81 e0       	ldi	r24, 0x01	; 1
    35ca:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		if(center_channel_2 != ((EEPROM.read(3) << 8) | EEPROM.read(2)))error = 1;
    35ce:	00 91 7a 01 	lds	r16, 0x017A	; 0x80017a <center_channel_2>
    35d2:	10 91 7b 01 	lds	r17, 0x017B	; 0x80017b <center_channel_2+0x1>
    35d6:	83 e0       	ldi	r24, 0x03	; 3
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    35de:	c8 2f       	mov	r28, r24
    35e0:	82 e0       	ldi	r24, 0x02	; 2
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    35e8:	2c 2f       	mov	r18, r28
    35ea:	30 e0       	ldi	r19, 0x00	; 0
    35ec:	32 2f       	mov	r19, r18
    35ee:	22 27       	eor	r18, r18
    35f0:	28 2b       	or	r18, r24
    35f2:	02 17       	cp	r16, r18
    35f4:	13 07       	cpc	r17, r19
    35f6:	19 f0       	breq	.+6      	; 0x35fe <loop+0xe6c>
    35f8:	81 e0       	ldi	r24, 0x01	; 1
    35fa:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		if(center_channel_3 != ((EEPROM.read(5) << 8) | EEPROM.read(4)))error = 1;
    35fe:	00 91 78 01 	lds	r16, 0x0178	; 0x800178 <center_channel_3>
    3602:	10 91 79 01 	lds	r17, 0x0179	; 0x800179 <center_channel_3+0x1>
    3606:	85 e0       	ldi	r24, 0x05	; 5
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    360e:	c8 2f       	mov	r28, r24
    3610:	84 e0       	ldi	r24, 0x04	; 4
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    3618:	2c 2f       	mov	r18, r28
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	32 2f       	mov	r19, r18
    361e:	22 27       	eor	r18, r18
    3620:	28 2b       	or	r18, r24
    3622:	02 17       	cp	r16, r18
    3624:	13 07       	cpc	r17, r19
    3626:	19 f0       	breq	.+6      	; 0x362e <loop+0xe9c>
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		if(center_channel_4 != ((EEPROM.read(7) << 8) | EEPROM.read(6)))error = 1;
    362e:	00 91 76 01 	lds	r16, 0x0176	; 0x800176 <center_channel_4>
    3632:	10 91 77 01 	lds	r17, 0x0177	; 0x800177 <center_channel_4+0x1>
    3636:	87 e0       	ldi	r24, 0x07	; 7
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    363e:	c8 2f       	mov	r28, r24
    3640:	86 e0       	ldi	r24, 0x06	; 6
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    3648:	2c 2f       	mov	r18, r28
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	32 2f       	mov	r19, r18
    364e:	22 27       	eor	r18, r18
    3650:	28 2b       	or	r18, r24
    3652:	02 17       	cp	r16, r18
    3654:	13 07       	cpc	r17, r19
    3656:	19 f0       	breq	.+6      	; 0x365e <loop+0xecc>
    3658:	81 e0       	ldi	r24, 0x01	; 1
    365a:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		
		if(high_channel_1 != ((EEPROM.read(9) << 8) | EEPROM.read(8)))error = 1;
    365e:	00 91 74 01 	lds	r16, 0x0174	; 0x800174 <high_channel_1>
    3662:	10 91 75 01 	lds	r17, 0x0175	; 0x800175 <high_channel_1+0x1>
    3666:	89 e0       	ldi	r24, 0x09	; 9
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    366e:	c8 2f       	mov	r28, r24
    3670:	88 e0       	ldi	r24, 0x08	; 8
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    3678:	2c 2f       	mov	r18, r28
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	32 2f       	mov	r19, r18
    367e:	22 27       	eor	r18, r18
    3680:	28 2b       	or	r18, r24
    3682:	02 17       	cp	r16, r18
    3684:	13 07       	cpc	r17, r19
    3686:	19 f0       	breq	.+6      	; 0x368e <loop+0xefc>
    3688:	81 e0       	ldi	r24, 0x01	; 1
    368a:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		if(high_channel_2 != ((EEPROM.read(11) << 8) | EEPROM.read(10)))error = 1;
    368e:	00 91 72 01 	lds	r16, 0x0172	; 0x800172 <high_channel_2>
    3692:	10 91 73 01 	lds	r17, 0x0173	; 0x800173 <high_channel_2+0x1>
    3696:	8b e0       	ldi	r24, 0x0B	; 11
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    369e:	c8 2f       	mov	r28, r24
    36a0:	8a e0       	ldi	r24, 0x0A	; 10
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    36a8:	2c 2f       	mov	r18, r28
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	32 2f       	mov	r19, r18
    36ae:	22 27       	eor	r18, r18
    36b0:	28 2b       	or	r18, r24
    36b2:	02 17       	cp	r16, r18
    36b4:	13 07       	cpc	r17, r19
    36b6:	19 f0       	breq	.+6      	; 0x36be <loop+0xf2c>
    36b8:	81 e0       	ldi	r24, 0x01	; 1
    36ba:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		if(high_channel_3 != ((EEPROM.read(13) << 8) | EEPROM.read(12)))error = 1;
    36be:	00 91 70 01 	lds	r16, 0x0170	; 0x800170 <high_channel_3>
    36c2:	10 91 71 01 	lds	r17, 0x0171	; 0x800171 <high_channel_3+0x1>
    36c6:	8d e0       	ldi	r24, 0x0D	; 13
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    36ce:	c8 2f       	mov	r28, r24
    36d0:	8c e0       	ldi	r24, 0x0C	; 12
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    36d8:	2c 2f       	mov	r18, r28
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	32 2f       	mov	r19, r18
    36de:	22 27       	eor	r18, r18
    36e0:	28 2b       	or	r18, r24
    36e2:	02 17       	cp	r16, r18
    36e4:	13 07       	cpc	r17, r19
    36e6:	19 f0       	breq	.+6      	; 0x36ee <loop+0xf5c>
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		if(high_channel_4 != ((EEPROM.read(15) << 8) | EEPROM.read(14)))error = 1;
    36ee:	00 91 6e 01 	lds	r16, 0x016E	; 0x80016e <high_channel_4>
    36f2:	10 91 6f 01 	lds	r17, 0x016F	; 0x80016f <high_channel_4+0x1>
    36f6:	8f e0       	ldi	r24, 0x0F	; 15
    36f8:	90 e0       	ldi	r25, 0x00	; 0
    36fa:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    36fe:	c8 2f       	mov	r28, r24
    3700:	8e e0       	ldi	r24, 0x0E	; 14
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    3708:	2c 2f       	mov	r18, r28
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	32 2f       	mov	r19, r18
    370e:	22 27       	eor	r18, r18
    3710:	28 2b       	or	r18, r24
    3712:	02 17       	cp	r16, r18
    3714:	13 07       	cpc	r17, r19
    3716:	19 f0       	breq	.+6      	; 0x371e <loop+0xf8c>
    3718:	81 e0       	ldi	r24, 0x01	; 1
    371a:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		
		if(low_channel_1 != ((EEPROM.read(17) << 8) | EEPROM.read(16)))error = 1;
    371e:	00 91 6c 01 	lds	r16, 0x016C	; 0x80016c <low_channel_1>
    3722:	10 91 6d 01 	lds	r17, 0x016D	; 0x80016d <low_channel_1+0x1>
    3726:	81 e1       	ldi	r24, 0x11	; 17
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    372e:	c8 2f       	mov	r28, r24
    3730:	80 e1       	ldi	r24, 0x10	; 16
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    3738:	2c 2f       	mov	r18, r28
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	32 2f       	mov	r19, r18
    373e:	22 27       	eor	r18, r18
    3740:	28 2b       	or	r18, r24
    3742:	02 17       	cp	r16, r18
    3744:	13 07       	cpc	r17, r19
    3746:	19 f0       	breq	.+6      	; 0x374e <loop+0xfbc>
    3748:	81 e0       	ldi	r24, 0x01	; 1
    374a:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		if(low_channel_2 != ((EEPROM.read(19) << 8) | EEPROM.read(18)))error = 1;
    374e:	00 91 6a 01 	lds	r16, 0x016A	; 0x80016a <low_channel_2>
    3752:	10 91 6b 01 	lds	r17, 0x016B	; 0x80016b <low_channel_2+0x1>
    3756:	83 e1       	ldi	r24, 0x13	; 19
    3758:	90 e0       	ldi	r25, 0x00	; 0
    375a:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    375e:	c8 2f       	mov	r28, r24
    3760:	82 e1       	ldi	r24, 0x12	; 18
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    3768:	2c 2f       	mov	r18, r28
    376a:	30 e0       	ldi	r19, 0x00	; 0
    376c:	32 2f       	mov	r19, r18
    376e:	22 27       	eor	r18, r18
    3770:	28 2b       	or	r18, r24
    3772:	02 17       	cp	r16, r18
    3774:	13 07       	cpc	r17, r19
    3776:	19 f0       	breq	.+6      	; 0x377e <loop+0xfec>
    3778:	81 e0       	ldi	r24, 0x01	; 1
    377a:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		if(low_channel_3 != ((EEPROM.read(21) << 8) | EEPROM.read(20)))error = 1;
    377e:	00 91 68 01 	lds	r16, 0x0168	; 0x800168 <low_channel_3>
    3782:	10 91 69 01 	lds	r17, 0x0169	; 0x800169 <low_channel_3+0x1>
    3786:	85 e1       	ldi	r24, 0x15	; 21
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    378e:	c8 2f       	mov	r28, r24
    3790:	84 e1       	ldi	r24, 0x14	; 20
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    3798:	2c 2f       	mov	r18, r28
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	32 2f       	mov	r19, r18
    379e:	22 27       	eor	r18, r18
    37a0:	28 2b       	or	r18, r24
    37a2:	02 17       	cp	r16, r18
    37a4:	13 07       	cpc	r17, r19
    37a6:	19 f0       	breq	.+6      	; 0x37ae <loop+0x101c>
    37a8:	81 e0       	ldi	r24, 0x01	; 1
    37aa:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		if(low_channel_4 != ((EEPROM.read(23) << 8) | EEPROM.read(22)))error = 1;
    37ae:	00 91 66 01 	lds	r16, 0x0166	; 0x800166 <low_channel_4>
    37b2:	10 91 67 01 	lds	r17, 0x0167	; 0x800167 <low_channel_4+0x1>
    37b6:	87 e1       	ldi	r24, 0x17	; 23
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    37be:	c8 2f       	mov	r28, r24
    37c0:	86 e1       	ldi	r24, 0x16	; 22
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    37c8:	2c 2f       	mov	r18, r28
    37ca:	30 e0       	ldi	r19, 0x00	; 0
    37cc:	32 2f       	mov	r19, r18
    37ce:	22 27       	eor	r18, r18
    37d0:	28 2b       	or	r18, r24
    37d2:	02 17       	cp	r16, r18
    37d4:	13 07       	cpc	r17, r19
    37d6:	19 f0       	breq	.+6      	; 0x37de <loop+0x104c>
    37d8:	81 e0       	ldi	r24, 0x01	; 1
    37da:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		
		if(channel_1_assign != EEPROM.read(24))error = 1;
    37de:	c0 91 8e 01 	lds	r28, 0x018E	; 0x80018e <channel_1_assign>
    37e2:	88 e1       	ldi	r24, 0x18	; 24
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    37ea:	c8 17       	cp	r28, r24
    37ec:	19 f0       	breq	.+6      	; 0x37f4 <loop+0x1062>
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		if(channel_2_assign != EEPROM.read(25))error = 1;
    37f4:	c0 91 8d 01 	lds	r28, 0x018D	; 0x80018d <channel_2_assign>
    37f8:	89 e1       	ldi	r24, 0x19	; 25
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    3800:	c8 17       	cp	r28, r24
    3802:	19 f0       	breq	.+6      	; 0x380a <loop+0x1078>
    3804:	81 e0       	ldi	r24, 0x01	; 1
    3806:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		if(channel_3_assign != EEPROM.read(26))error = 1;
    380a:	c0 91 8c 01 	lds	r28, 0x018C	; 0x80018c <channel_3_assign>
    380e:	8a e1       	ldi	r24, 0x1A	; 26
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    3816:	c8 17       	cp	r28, r24
    3818:	19 f0       	breq	.+6      	; 0x3820 <loop+0x108e>
    381a:	81 e0       	ldi	r24, 0x01	; 1
    381c:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		if(channel_4_assign != EEPROM.read(27))error = 1;
    3820:	c0 91 8b 01 	lds	r28, 0x018B	; 0x80018b <channel_4_assign>
    3824:	8b e1       	ldi	r24, 0x1B	; 27
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    382c:	c8 17       	cp	r28, r24
    382e:	19 f0       	breq	.+6      	; 0x3836 <loop+0x10a4>
    3830:	81 e0       	ldi	r24, 0x01	; 1
    3832:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		
		if(roll_axis != EEPROM.read(28))error = 1;
    3836:	c0 91 8a 01 	lds	r28, 0x018A	; 0x80018a <roll_axis>
    383a:	8c e1       	ldi	r24, 0x1C	; 28
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    3842:	c8 17       	cp	r28, r24
    3844:	19 f0       	breq	.+6      	; 0x384c <loop+0x10ba>
    3846:	81 e0       	ldi	r24, 0x01	; 1
    3848:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		if(pitch_axis != EEPROM.read(29))error = 1;
    384c:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <pitch_axis>
    3850:	8d e1       	ldi	r24, 0x1D	; 29
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    3858:	c8 17       	cp	r28, r24
    385a:	19 f0       	breq	.+6      	; 0x3862 <loop+0x10d0>
    385c:	81 e0       	ldi	r24, 0x01	; 1
    385e:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		if(yaw_axis != EEPROM.read(30))error = 1;
    3862:	c0 91 88 01 	lds	r28, 0x0188	; 0x800188 <yaw_axis>
    3866:	8e e1       	ldi	r24, 0x1E	; 30
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    386e:	c8 17       	cp	r28, r24
    3870:	19 f0       	breq	.+6      	; 0x3878 <loop+0x10e6>
    3872:	81 e0       	ldi	r24, 0x01	; 1
    3874:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		if(type != EEPROM.read(31))error = 1;
    3878:	c0 91 92 01 	lds	r28, 0x0192	; 0x800192 <type>
    387c:	8f e1       	ldi	r24, 0x1F	; 31
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    3884:	c8 17       	cp	r28, r24
    3886:	19 f0       	breq	.+6      	; 0x388e <loop+0x10fc>
    3888:	81 e0       	ldi	r24, 0x01	; 1
    388a:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		if(gyro_address != EEPROM.read(32))error = 1;
    388e:	c0 91 91 01 	lds	r28, 0x0191	; 0x800191 <gyro_address>
    3892:	80 e2       	ldi	r24, 0x20	; 32
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    389a:	c8 17       	cp	r28, r24
    389c:	19 f0       	breq	.+6      	; 0x38a4 <loop+0x1112>
    389e:	81 e0       	ldi	r24, 0x01	; 1
    38a0:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		
		if('J' != EEPROM.read(33))error = 1;
    38a4:	81 e2       	ldi	r24, 0x21	; 33
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    38ac:	8a 34       	cpi	r24, 0x4A	; 74
    38ae:	19 f0       	breq	.+6      	; 0x38b6 <loop+0x1124>
    38b0:	81 e0       	ldi	r24, 0x01	; 1
    38b2:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		if('M' != EEPROM.read(34))error = 1;
    38b6:	82 e2       	ldi	r24, 0x22	; 34
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    38be:	8d 34       	cpi	r24, 0x4D	; 77
    38c0:	19 f0       	breq	.+6      	; 0x38c8 <loop+0x1136>
    38c2:	81 e0       	ldi	r24, 0x01	; 1
    38c4:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		if('B' != EEPROM.read(35))error = 1;
    38c8:	83 e2       	ldi	r24, 0x23	; 35
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN11EEPROMClass4readEi.isra.0>
    38d0:	82 34       	cpi	r24, 0x42	; 66
    38d2:	19 f0       	breq	.+6      	; 0x38da <loop+0x1148>
    38d4:	81 e0       	ldi	r24, 0x01	; 1
    38d6:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <error>
		
		if(error == 1)Serial.println(F("EEPROM verification failed!!! (ERROR 5)"));
    38da:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <error>
    38de:	81 30       	cpi	r24, 0x01	; 1
    38e0:	19 f4       	brne	.+6      	; 0x38e8 <loop+0x1156>
    38e2:	63 e7       	ldi	r22, 0x73	; 115
    38e4:	73 e0       	ldi	r23, 0x03	; 3
    38e6:	02 c0       	rjmp	.+4      	; 0x38ec <loop+0x115a>
		else Serial.println(F("Verification done"));
    38e8:	61 e6       	ldi	r22, 0x61	; 97
    38ea:	73 e0       	ldi	r23, 0x03	; 3
    38ec:	89 e9       	ldi	r24, 0x99	; 153
    38ee:	91 e0       	ldi	r25, 0x01	; 1
    38f0:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	}
	
	
	if(error == 0){
    38f4:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <error>
    38f8:	81 11       	cpse	r24, r1
    38fa:	0d c0       	rjmp	.+26     	; 0x3916 <loop+0x1184>
		Serial.println(F("Setup is finished."));
    38fc:	6e e4       	ldi	r22, 0x4E	; 78
    38fe:	73 e0       	ldi	r23, 0x03	; 3
    3900:	89 e9       	ldi	r24, 0x99	; 153
    3902:	91 e0       	ldi	r25, 0x01	; 1
    3904:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("You can now calibrate the esc's and upload the YMFC-AL code."));
    3908:	61 e1       	ldi	r22, 0x11	; 17
    390a:	73 e0       	ldi	r23, 0x03	; 3
    390c:	89 e9       	ldi	r24, 0x99	; 153
    390e:	91 e0       	ldi	r25, 0x01	; 1
    3910:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3914:	12 c0       	rjmp	.+36     	; 0x393a <loop+0x11a8>
	}
	else{
		Serial.println(F("The setup is aborted due to an error."));
    3916:	6b ee       	ldi	r22, 0xEB	; 235
    3918:	72 e0       	ldi	r23, 0x02	; 2
    391a:	89 e9       	ldi	r24, 0x99	; 153
    391c:	91 e0       	ldi	r25, 0x01	; 1
    391e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Check the Q and A page of the YMFC-AL project on:"));
    3922:	69 eb       	ldi	r22, 0xB9	; 185
    3924:	72 e0       	ldi	r23, 0x02	; 2
    3926:	89 e9       	ldi	r24, 0x99	; 153
    3928:	91 e0       	ldi	r25, 0x01	; 1
    392a:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("www.brokking.net for more information about this error."));
    392e:	61 e8       	ldi	r22, 0x81	; 129
    3930:	72 e0       	ldi	r23, 0x02	; 2
    3932:	89 e9       	ldi	r24, 0x99	; 153
    3934:	91 e0       	ldi	r25, 0x01	; 1
    3936:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	}
	while(1);
    393a:	ff cf       	rjmp	.-2      	; 0x393a <loop+0x11a8>

	if(TWBR == 12 && clockspeed_ok){
		Serial.println(F("I2C clock speed is correctly set to 400kHz."));
	}
	else{
		Serial.println(F("I2C clock speed is not set to 400kHz. (ERROR 8)"));
    393c:	6a ec       	ldi	r22, 0xCA	; 202
    393e:	70 e1       	ldi	r23, 0x10	; 16
    3940:	89 e9       	ldi	r24, 0x99	; 153
    3942:	91 e0       	ldi	r25, 0x01	; 1
    3944:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		error = 1;
    3948:	c0 93 90 01 	sts	0x0190, r28	; 0x800190 <error>
    394c:	0c 94 07 14 	jmp	0x280e	; 0x280e <loop+0x7c>

00003950 <__subsf3>:
    3950:	50 58       	subi	r21, 0x80	; 128

00003952 <__addsf3>:
    3952:	bb 27       	eor	r27, r27
    3954:	aa 27       	eor	r26, r26
    3956:	0e 94 c0 1c 	call	0x3980	; 0x3980 <__addsf3x>
    395a:	0c 94 04 1e 	jmp	0x3c08	; 0x3c08 <__fp_round>
    395e:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__fp_pscA>
    3962:	38 f0       	brcs	.+14     	; 0x3972 <__addsf3+0x20>
    3964:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__fp_pscB>
    3968:	20 f0       	brcs	.+8      	; 0x3972 <__addsf3+0x20>
    396a:	39 f4       	brne	.+14     	; 0x397a <__addsf3+0x28>
    396c:	9f 3f       	cpi	r25, 0xFF	; 255
    396e:	19 f4       	brne	.+6      	; 0x3976 <__addsf3+0x24>
    3970:	26 f4       	brtc	.+8      	; 0x397a <__addsf3+0x28>
    3972:	0c 94 f3 1d 	jmp	0x3be6	; 0x3be6 <__fp_nan>
    3976:	0e f4       	brtc	.+2      	; 0x397a <__addsf3+0x28>
    3978:	e0 95       	com	r30
    397a:	e7 fb       	bst	r30, 7
    397c:	0c 94 ed 1d 	jmp	0x3bda	; 0x3bda <__fp_inf>

00003980 <__addsf3x>:
    3980:	e9 2f       	mov	r30, r25
    3982:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__fp_split3>
    3986:	58 f3       	brcs	.-42     	; 0x395e <__addsf3+0xc>
    3988:	ba 17       	cp	r27, r26
    398a:	62 07       	cpc	r22, r18
    398c:	73 07       	cpc	r23, r19
    398e:	84 07       	cpc	r24, r20
    3990:	95 07       	cpc	r25, r21
    3992:	20 f0       	brcs	.+8      	; 0x399c <__addsf3x+0x1c>
    3994:	79 f4       	brne	.+30     	; 0x39b4 <__addsf3x+0x34>
    3996:	a6 f5       	brtc	.+104    	; 0x3a00 <__addsf3x+0x80>
    3998:	0c 94 37 1e 	jmp	0x3c6e	; 0x3c6e <__fp_zero>
    399c:	0e f4       	brtc	.+2      	; 0x39a0 <__addsf3x+0x20>
    399e:	e0 95       	com	r30
    39a0:	0b 2e       	mov	r0, r27
    39a2:	ba 2f       	mov	r27, r26
    39a4:	a0 2d       	mov	r26, r0
    39a6:	0b 01       	movw	r0, r22
    39a8:	b9 01       	movw	r22, r18
    39aa:	90 01       	movw	r18, r0
    39ac:	0c 01       	movw	r0, r24
    39ae:	ca 01       	movw	r24, r20
    39b0:	a0 01       	movw	r20, r0
    39b2:	11 24       	eor	r1, r1
    39b4:	ff 27       	eor	r31, r31
    39b6:	59 1b       	sub	r21, r25
    39b8:	99 f0       	breq	.+38     	; 0x39e0 <__addsf3x+0x60>
    39ba:	59 3f       	cpi	r21, 0xF9	; 249
    39bc:	50 f4       	brcc	.+20     	; 0x39d2 <__addsf3x+0x52>
    39be:	50 3e       	cpi	r21, 0xE0	; 224
    39c0:	68 f1       	brcs	.+90     	; 0x3a1c <__addsf3x+0x9c>
    39c2:	1a 16       	cp	r1, r26
    39c4:	f0 40       	sbci	r31, 0x00	; 0
    39c6:	a2 2f       	mov	r26, r18
    39c8:	23 2f       	mov	r18, r19
    39ca:	34 2f       	mov	r19, r20
    39cc:	44 27       	eor	r20, r20
    39ce:	58 5f       	subi	r21, 0xF8	; 248
    39d0:	f3 cf       	rjmp	.-26     	; 0x39b8 <__addsf3x+0x38>
    39d2:	46 95       	lsr	r20
    39d4:	37 95       	ror	r19
    39d6:	27 95       	ror	r18
    39d8:	a7 95       	ror	r26
    39da:	f0 40       	sbci	r31, 0x00	; 0
    39dc:	53 95       	inc	r21
    39de:	c9 f7       	brne	.-14     	; 0x39d2 <__addsf3x+0x52>
    39e0:	7e f4       	brtc	.+30     	; 0x3a00 <__addsf3x+0x80>
    39e2:	1f 16       	cp	r1, r31
    39e4:	ba 0b       	sbc	r27, r26
    39e6:	62 0b       	sbc	r22, r18
    39e8:	73 0b       	sbc	r23, r19
    39ea:	84 0b       	sbc	r24, r20
    39ec:	ba f0       	brmi	.+46     	; 0x3a1c <__addsf3x+0x9c>
    39ee:	91 50       	subi	r25, 0x01	; 1
    39f0:	a1 f0       	breq	.+40     	; 0x3a1a <__addsf3x+0x9a>
    39f2:	ff 0f       	add	r31, r31
    39f4:	bb 1f       	adc	r27, r27
    39f6:	66 1f       	adc	r22, r22
    39f8:	77 1f       	adc	r23, r23
    39fa:	88 1f       	adc	r24, r24
    39fc:	c2 f7       	brpl	.-16     	; 0x39ee <__addsf3x+0x6e>
    39fe:	0e c0       	rjmp	.+28     	; 0x3a1c <__addsf3x+0x9c>
    3a00:	ba 0f       	add	r27, r26
    3a02:	62 1f       	adc	r22, r18
    3a04:	73 1f       	adc	r23, r19
    3a06:	84 1f       	adc	r24, r20
    3a08:	48 f4       	brcc	.+18     	; 0x3a1c <__addsf3x+0x9c>
    3a0a:	87 95       	ror	r24
    3a0c:	77 95       	ror	r23
    3a0e:	67 95       	ror	r22
    3a10:	b7 95       	ror	r27
    3a12:	f7 95       	ror	r31
    3a14:	9e 3f       	cpi	r25, 0xFE	; 254
    3a16:	08 f0       	brcs	.+2      	; 0x3a1a <__addsf3x+0x9a>
    3a18:	b0 cf       	rjmp	.-160    	; 0x397a <__addsf3+0x28>
    3a1a:	93 95       	inc	r25
    3a1c:	88 0f       	add	r24, r24
    3a1e:	08 f0       	brcs	.+2      	; 0x3a22 <__addsf3x+0xa2>
    3a20:	99 27       	eor	r25, r25
    3a22:	ee 0f       	add	r30, r30
    3a24:	97 95       	ror	r25
    3a26:	87 95       	ror	r24
    3a28:	08 95       	ret

00003a2a <__cmpsf2>:
    3a2a:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <__fp_cmp>
    3a2e:	08 f4       	brcc	.+2      	; 0x3a32 <__cmpsf2+0x8>
    3a30:	81 e0       	ldi	r24, 0x01	; 1
    3a32:	08 95       	ret

00003a34 <__divsf3>:
    3a34:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <__divsf3x>
    3a38:	0c 94 04 1e 	jmp	0x3c08	; 0x3c08 <__fp_round>
    3a3c:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__fp_pscB>
    3a40:	58 f0       	brcs	.+22     	; 0x3a58 <__divsf3+0x24>
    3a42:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__fp_pscA>
    3a46:	40 f0       	brcs	.+16     	; 0x3a58 <__divsf3+0x24>
    3a48:	29 f4       	brne	.+10     	; 0x3a54 <__divsf3+0x20>
    3a4a:	5f 3f       	cpi	r21, 0xFF	; 255
    3a4c:	29 f0       	breq	.+10     	; 0x3a58 <__divsf3+0x24>
    3a4e:	0c 94 ed 1d 	jmp	0x3bda	; 0x3bda <__fp_inf>
    3a52:	51 11       	cpse	r21, r1
    3a54:	0c 94 38 1e 	jmp	0x3c70	; 0x3c70 <__fp_szero>
    3a58:	0c 94 f3 1d 	jmp	0x3be6	; 0x3be6 <__fp_nan>

00003a5c <__divsf3x>:
    3a5c:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__fp_split3>
    3a60:	68 f3       	brcs	.-38     	; 0x3a3c <__divsf3+0x8>

00003a62 <__divsf3_pse>:
    3a62:	99 23       	and	r25, r25
    3a64:	b1 f3       	breq	.-20     	; 0x3a52 <__divsf3+0x1e>
    3a66:	55 23       	and	r21, r21
    3a68:	91 f3       	breq	.-28     	; 0x3a4e <__divsf3+0x1a>
    3a6a:	95 1b       	sub	r25, r21
    3a6c:	55 0b       	sbc	r21, r21
    3a6e:	bb 27       	eor	r27, r27
    3a70:	aa 27       	eor	r26, r26
    3a72:	62 17       	cp	r22, r18
    3a74:	73 07       	cpc	r23, r19
    3a76:	84 07       	cpc	r24, r20
    3a78:	38 f0       	brcs	.+14     	; 0x3a88 <__divsf3_pse+0x26>
    3a7a:	9f 5f       	subi	r25, 0xFF	; 255
    3a7c:	5f 4f       	sbci	r21, 0xFF	; 255
    3a7e:	22 0f       	add	r18, r18
    3a80:	33 1f       	adc	r19, r19
    3a82:	44 1f       	adc	r20, r20
    3a84:	aa 1f       	adc	r26, r26
    3a86:	a9 f3       	breq	.-22     	; 0x3a72 <__divsf3_pse+0x10>
    3a88:	35 d0       	rcall	.+106    	; 0x3af4 <__divsf3_pse+0x92>
    3a8a:	0e 2e       	mov	r0, r30
    3a8c:	3a f0       	brmi	.+14     	; 0x3a9c <__divsf3_pse+0x3a>
    3a8e:	e0 e8       	ldi	r30, 0x80	; 128
    3a90:	32 d0       	rcall	.+100    	; 0x3af6 <__divsf3_pse+0x94>
    3a92:	91 50       	subi	r25, 0x01	; 1
    3a94:	50 40       	sbci	r21, 0x00	; 0
    3a96:	e6 95       	lsr	r30
    3a98:	00 1c       	adc	r0, r0
    3a9a:	ca f7       	brpl	.-14     	; 0x3a8e <__divsf3_pse+0x2c>
    3a9c:	2b d0       	rcall	.+86     	; 0x3af4 <__divsf3_pse+0x92>
    3a9e:	fe 2f       	mov	r31, r30
    3aa0:	29 d0       	rcall	.+82     	; 0x3af4 <__divsf3_pse+0x92>
    3aa2:	66 0f       	add	r22, r22
    3aa4:	77 1f       	adc	r23, r23
    3aa6:	88 1f       	adc	r24, r24
    3aa8:	bb 1f       	adc	r27, r27
    3aaa:	26 17       	cp	r18, r22
    3aac:	37 07       	cpc	r19, r23
    3aae:	48 07       	cpc	r20, r24
    3ab0:	ab 07       	cpc	r26, r27
    3ab2:	b0 e8       	ldi	r27, 0x80	; 128
    3ab4:	09 f0       	breq	.+2      	; 0x3ab8 <__divsf3_pse+0x56>
    3ab6:	bb 0b       	sbc	r27, r27
    3ab8:	80 2d       	mov	r24, r0
    3aba:	bf 01       	movw	r22, r30
    3abc:	ff 27       	eor	r31, r31
    3abe:	93 58       	subi	r25, 0x83	; 131
    3ac0:	5f 4f       	sbci	r21, 0xFF	; 255
    3ac2:	3a f0       	brmi	.+14     	; 0x3ad2 <__divsf3_pse+0x70>
    3ac4:	9e 3f       	cpi	r25, 0xFE	; 254
    3ac6:	51 05       	cpc	r21, r1
    3ac8:	78 f0       	brcs	.+30     	; 0x3ae8 <__divsf3_pse+0x86>
    3aca:	0c 94 ed 1d 	jmp	0x3bda	; 0x3bda <__fp_inf>
    3ace:	0c 94 38 1e 	jmp	0x3c70	; 0x3c70 <__fp_szero>
    3ad2:	5f 3f       	cpi	r21, 0xFF	; 255
    3ad4:	e4 f3       	brlt	.-8      	; 0x3ace <__divsf3_pse+0x6c>
    3ad6:	98 3e       	cpi	r25, 0xE8	; 232
    3ad8:	d4 f3       	brlt	.-12     	; 0x3ace <__divsf3_pse+0x6c>
    3ada:	86 95       	lsr	r24
    3adc:	77 95       	ror	r23
    3ade:	67 95       	ror	r22
    3ae0:	b7 95       	ror	r27
    3ae2:	f7 95       	ror	r31
    3ae4:	9f 5f       	subi	r25, 0xFF	; 255
    3ae6:	c9 f7       	brne	.-14     	; 0x3ada <__divsf3_pse+0x78>
    3ae8:	88 0f       	add	r24, r24
    3aea:	91 1d       	adc	r25, r1
    3aec:	96 95       	lsr	r25
    3aee:	87 95       	ror	r24
    3af0:	97 f9       	bld	r25, 7
    3af2:	08 95       	ret
    3af4:	e1 e0       	ldi	r30, 0x01	; 1
    3af6:	66 0f       	add	r22, r22
    3af8:	77 1f       	adc	r23, r23
    3afa:	88 1f       	adc	r24, r24
    3afc:	bb 1f       	adc	r27, r27
    3afe:	62 17       	cp	r22, r18
    3b00:	73 07       	cpc	r23, r19
    3b02:	84 07       	cpc	r24, r20
    3b04:	ba 07       	cpc	r27, r26
    3b06:	20 f0       	brcs	.+8      	; 0x3b10 <__divsf3_pse+0xae>
    3b08:	62 1b       	sub	r22, r18
    3b0a:	73 0b       	sbc	r23, r19
    3b0c:	84 0b       	sbc	r24, r20
    3b0e:	ba 0b       	sbc	r27, r26
    3b10:	ee 1f       	adc	r30, r30
    3b12:	88 f7       	brcc	.-30     	; 0x3af6 <__divsf3_pse+0x94>
    3b14:	e0 95       	com	r30
    3b16:	08 95       	ret

00003b18 <__floatunsisf>:
    3b18:	e8 94       	clt
    3b1a:	09 c0       	rjmp	.+18     	; 0x3b2e <__floatsisf+0x12>

00003b1c <__floatsisf>:
    3b1c:	97 fb       	bst	r25, 7
    3b1e:	3e f4       	brtc	.+14     	; 0x3b2e <__floatsisf+0x12>
    3b20:	90 95       	com	r25
    3b22:	80 95       	com	r24
    3b24:	70 95       	com	r23
    3b26:	61 95       	neg	r22
    3b28:	7f 4f       	sbci	r23, 0xFF	; 255
    3b2a:	8f 4f       	sbci	r24, 0xFF	; 255
    3b2c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b2e:	99 23       	and	r25, r25
    3b30:	a9 f0       	breq	.+42     	; 0x3b5c <__floatsisf+0x40>
    3b32:	f9 2f       	mov	r31, r25
    3b34:	96 e9       	ldi	r25, 0x96	; 150
    3b36:	bb 27       	eor	r27, r27
    3b38:	93 95       	inc	r25
    3b3a:	f6 95       	lsr	r31
    3b3c:	87 95       	ror	r24
    3b3e:	77 95       	ror	r23
    3b40:	67 95       	ror	r22
    3b42:	b7 95       	ror	r27
    3b44:	f1 11       	cpse	r31, r1
    3b46:	f8 cf       	rjmp	.-16     	; 0x3b38 <__floatsisf+0x1c>
    3b48:	fa f4       	brpl	.+62     	; 0x3b88 <__floatsisf+0x6c>
    3b4a:	bb 0f       	add	r27, r27
    3b4c:	11 f4       	brne	.+4      	; 0x3b52 <__floatsisf+0x36>
    3b4e:	60 ff       	sbrs	r22, 0
    3b50:	1b c0       	rjmp	.+54     	; 0x3b88 <__floatsisf+0x6c>
    3b52:	6f 5f       	subi	r22, 0xFF	; 255
    3b54:	7f 4f       	sbci	r23, 0xFF	; 255
    3b56:	8f 4f       	sbci	r24, 0xFF	; 255
    3b58:	9f 4f       	sbci	r25, 0xFF	; 255
    3b5a:	16 c0       	rjmp	.+44     	; 0x3b88 <__floatsisf+0x6c>
    3b5c:	88 23       	and	r24, r24
    3b5e:	11 f0       	breq	.+4      	; 0x3b64 <__floatsisf+0x48>
    3b60:	96 e9       	ldi	r25, 0x96	; 150
    3b62:	11 c0       	rjmp	.+34     	; 0x3b86 <__floatsisf+0x6a>
    3b64:	77 23       	and	r23, r23
    3b66:	21 f0       	breq	.+8      	; 0x3b70 <__floatsisf+0x54>
    3b68:	9e e8       	ldi	r25, 0x8E	; 142
    3b6a:	87 2f       	mov	r24, r23
    3b6c:	76 2f       	mov	r23, r22
    3b6e:	05 c0       	rjmp	.+10     	; 0x3b7a <__floatsisf+0x5e>
    3b70:	66 23       	and	r22, r22
    3b72:	71 f0       	breq	.+28     	; 0x3b90 <__floatsisf+0x74>
    3b74:	96 e8       	ldi	r25, 0x86	; 134
    3b76:	86 2f       	mov	r24, r22
    3b78:	70 e0       	ldi	r23, 0x00	; 0
    3b7a:	60 e0       	ldi	r22, 0x00	; 0
    3b7c:	2a f0       	brmi	.+10     	; 0x3b88 <__floatsisf+0x6c>
    3b7e:	9a 95       	dec	r25
    3b80:	66 0f       	add	r22, r22
    3b82:	77 1f       	adc	r23, r23
    3b84:	88 1f       	adc	r24, r24
    3b86:	da f7       	brpl	.-10     	; 0x3b7e <__floatsisf+0x62>
    3b88:	88 0f       	add	r24, r24
    3b8a:	96 95       	lsr	r25
    3b8c:	87 95       	ror	r24
    3b8e:	97 f9       	bld	r25, 7
    3b90:	08 95       	ret

00003b92 <__fp_cmp>:
    3b92:	99 0f       	add	r25, r25
    3b94:	00 08       	sbc	r0, r0
    3b96:	55 0f       	add	r21, r21
    3b98:	aa 0b       	sbc	r26, r26
    3b9a:	e0 e8       	ldi	r30, 0x80	; 128
    3b9c:	fe ef       	ldi	r31, 0xFE	; 254
    3b9e:	16 16       	cp	r1, r22
    3ba0:	17 06       	cpc	r1, r23
    3ba2:	e8 07       	cpc	r30, r24
    3ba4:	f9 07       	cpc	r31, r25
    3ba6:	c0 f0       	brcs	.+48     	; 0x3bd8 <__fp_cmp+0x46>
    3ba8:	12 16       	cp	r1, r18
    3baa:	13 06       	cpc	r1, r19
    3bac:	e4 07       	cpc	r30, r20
    3bae:	f5 07       	cpc	r31, r21
    3bb0:	98 f0       	brcs	.+38     	; 0x3bd8 <__fp_cmp+0x46>
    3bb2:	62 1b       	sub	r22, r18
    3bb4:	73 0b       	sbc	r23, r19
    3bb6:	84 0b       	sbc	r24, r20
    3bb8:	95 0b       	sbc	r25, r21
    3bba:	39 f4       	brne	.+14     	; 0x3bca <__fp_cmp+0x38>
    3bbc:	0a 26       	eor	r0, r26
    3bbe:	61 f0       	breq	.+24     	; 0x3bd8 <__fp_cmp+0x46>
    3bc0:	23 2b       	or	r18, r19
    3bc2:	24 2b       	or	r18, r20
    3bc4:	25 2b       	or	r18, r21
    3bc6:	21 f4       	brne	.+8      	; 0x3bd0 <__fp_cmp+0x3e>
    3bc8:	08 95       	ret
    3bca:	0a 26       	eor	r0, r26
    3bcc:	09 f4       	brne	.+2      	; 0x3bd0 <__fp_cmp+0x3e>
    3bce:	a1 40       	sbci	r26, 0x01	; 1
    3bd0:	a6 95       	lsr	r26
    3bd2:	8f ef       	ldi	r24, 0xFF	; 255
    3bd4:	81 1d       	adc	r24, r1
    3bd6:	81 1d       	adc	r24, r1
    3bd8:	08 95       	ret

00003bda <__fp_inf>:
    3bda:	97 f9       	bld	r25, 7
    3bdc:	9f 67       	ori	r25, 0x7F	; 127
    3bde:	80 e8       	ldi	r24, 0x80	; 128
    3be0:	70 e0       	ldi	r23, 0x00	; 0
    3be2:	60 e0       	ldi	r22, 0x00	; 0
    3be4:	08 95       	ret

00003be6 <__fp_nan>:
    3be6:	9f ef       	ldi	r25, 0xFF	; 255
    3be8:	80 ec       	ldi	r24, 0xC0	; 192
    3bea:	08 95       	ret

00003bec <__fp_pscA>:
    3bec:	00 24       	eor	r0, r0
    3bee:	0a 94       	dec	r0
    3bf0:	16 16       	cp	r1, r22
    3bf2:	17 06       	cpc	r1, r23
    3bf4:	18 06       	cpc	r1, r24
    3bf6:	09 06       	cpc	r0, r25
    3bf8:	08 95       	ret

00003bfa <__fp_pscB>:
    3bfa:	00 24       	eor	r0, r0
    3bfc:	0a 94       	dec	r0
    3bfe:	12 16       	cp	r1, r18
    3c00:	13 06       	cpc	r1, r19
    3c02:	14 06       	cpc	r1, r20
    3c04:	05 06       	cpc	r0, r21
    3c06:	08 95       	ret

00003c08 <__fp_round>:
    3c08:	09 2e       	mov	r0, r25
    3c0a:	03 94       	inc	r0
    3c0c:	00 0c       	add	r0, r0
    3c0e:	11 f4       	brne	.+4      	; 0x3c14 <__fp_round+0xc>
    3c10:	88 23       	and	r24, r24
    3c12:	52 f0       	brmi	.+20     	; 0x3c28 <__fp_round+0x20>
    3c14:	bb 0f       	add	r27, r27
    3c16:	40 f4       	brcc	.+16     	; 0x3c28 <__fp_round+0x20>
    3c18:	bf 2b       	or	r27, r31
    3c1a:	11 f4       	brne	.+4      	; 0x3c20 <__fp_round+0x18>
    3c1c:	60 ff       	sbrs	r22, 0
    3c1e:	04 c0       	rjmp	.+8      	; 0x3c28 <__fp_round+0x20>
    3c20:	6f 5f       	subi	r22, 0xFF	; 255
    3c22:	7f 4f       	sbci	r23, 0xFF	; 255
    3c24:	8f 4f       	sbci	r24, 0xFF	; 255
    3c26:	9f 4f       	sbci	r25, 0xFF	; 255
    3c28:	08 95       	ret

00003c2a <__fp_split3>:
    3c2a:	57 fd       	sbrc	r21, 7
    3c2c:	90 58       	subi	r25, 0x80	; 128
    3c2e:	44 0f       	add	r20, r20
    3c30:	55 1f       	adc	r21, r21
    3c32:	59 f0       	breq	.+22     	; 0x3c4a <__fp_splitA+0x10>
    3c34:	5f 3f       	cpi	r21, 0xFF	; 255
    3c36:	71 f0       	breq	.+28     	; 0x3c54 <__fp_splitA+0x1a>
    3c38:	47 95       	ror	r20

00003c3a <__fp_splitA>:
    3c3a:	88 0f       	add	r24, r24
    3c3c:	97 fb       	bst	r25, 7
    3c3e:	99 1f       	adc	r25, r25
    3c40:	61 f0       	breq	.+24     	; 0x3c5a <__fp_splitA+0x20>
    3c42:	9f 3f       	cpi	r25, 0xFF	; 255
    3c44:	79 f0       	breq	.+30     	; 0x3c64 <__fp_splitA+0x2a>
    3c46:	87 95       	ror	r24
    3c48:	08 95       	ret
    3c4a:	12 16       	cp	r1, r18
    3c4c:	13 06       	cpc	r1, r19
    3c4e:	14 06       	cpc	r1, r20
    3c50:	55 1f       	adc	r21, r21
    3c52:	f2 cf       	rjmp	.-28     	; 0x3c38 <__fp_split3+0xe>
    3c54:	46 95       	lsr	r20
    3c56:	f1 df       	rcall	.-30     	; 0x3c3a <__fp_splitA>
    3c58:	08 c0       	rjmp	.+16     	; 0x3c6a <__fp_splitA+0x30>
    3c5a:	16 16       	cp	r1, r22
    3c5c:	17 06       	cpc	r1, r23
    3c5e:	18 06       	cpc	r1, r24
    3c60:	99 1f       	adc	r25, r25
    3c62:	f1 cf       	rjmp	.-30     	; 0x3c46 <__fp_splitA+0xc>
    3c64:	86 95       	lsr	r24
    3c66:	71 05       	cpc	r23, r1
    3c68:	61 05       	cpc	r22, r1
    3c6a:	08 94       	sec
    3c6c:	08 95       	ret

00003c6e <__fp_zero>:
    3c6e:	e8 94       	clt

00003c70 <__fp_szero>:
    3c70:	bb 27       	eor	r27, r27
    3c72:	66 27       	eor	r22, r22
    3c74:	77 27       	eor	r23, r23
    3c76:	cb 01       	movw	r24, r22
    3c78:	97 f9       	bld	r25, 7
    3c7a:	08 95       	ret

00003c7c <__gesf2>:
    3c7c:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <__fp_cmp>
    3c80:	08 f4       	brcc	.+2      	; 0x3c84 <__gesf2+0x8>
    3c82:	8f ef       	ldi	r24, 0xFF	; 255
    3c84:	08 95       	ret

00003c86 <__mulsf3>:
    3c86:	0e 94 56 1e 	call	0x3cac	; 0x3cac <__mulsf3x>
    3c8a:	0c 94 04 1e 	jmp	0x3c08	; 0x3c08 <__fp_round>
    3c8e:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__fp_pscA>
    3c92:	38 f0       	brcs	.+14     	; 0x3ca2 <__mulsf3+0x1c>
    3c94:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__fp_pscB>
    3c98:	20 f0       	brcs	.+8      	; 0x3ca2 <__mulsf3+0x1c>
    3c9a:	95 23       	and	r25, r21
    3c9c:	11 f0       	breq	.+4      	; 0x3ca2 <__mulsf3+0x1c>
    3c9e:	0c 94 ed 1d 	jmp	0x3bda	; 0x3bda <__fp_inf>
    3ca2:	0c 94 f3 1d 	jmp	0x3be6	; 0x3be6 <__fp_nan>
    3ca6:	11 24       	eor	r1, r1
    3ca8:	0c 94 38 1e 	jmp	0x3c70	; 0x3c70 <__fp_szero>

00003cac <__mulsf3x>:
    3cac:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__fp_split3>
    3cb0:	70 f3       	brcs	.-36     	; 0x3c8e <__mulsf3+0x8>

00003cb2 <__mulsf3_pse>:
    3cb2:	95 9f       	mul	r25, r21
    3cb4:	c1 f3       	breq	.-16     	; 0x3ca6 <__mulsf3+0x20>
    3cb6:	95 0f       	add	r25, r21
    3cb8:	50 e0       	ldi	r21, 0x00	; 0
    3cba:	55 1f       	adc	r21, r21
    3cbc:	62 9f       	mul	r22, r18
    3cbe:	f0 01       	movw	r30, r0
    3cc0:	72 9f       	mul	r23, r18
    3cc2:	bb 27       	eor	r27, r27
    3cc4:	f0 0d       	add	r31, r0
    3cc6:	b1 1d       	adc	r27, r1
    3cc8:	63 9f       	mul	r22, r19
    3cca:	aa 27       	eor	r26, r26
    3ccc:	f0 0d       	add	r31, r0
    3cce:	b1 1d       	adc	r27, r1
    3cd0:	aa 1f       	adc	r26, r26
    3cd2:	64 9f       	mul	r22, r20
    3cd4:	66 27       	eor	r22, r22
    3cd6:	b0 0d       	add	r27, r0
    3cd8:	a1 1d       	adc	r26, r1
    3cda:	66 1f       	adc	r22, r22
    3cdc:	82 9f       	mul	r24, r18
    3cde:	22 27       	eor	r18, r18
    3ce0:	b0 0d       	add	r27, r0
    3ce2:	a1 1d       	adc	r26, r1
    3ce4:	62 1f       	adc	r22, r18
    3ce6:	73 9f       	mul	r23, r19
    3ce8:	b0 0d       	add	r27, r0
    3cea:	a1 1d       	adc	r26, r1
    3cec:	62 1f       	adc	r22, r18
    3cee:	83 9f       	mul	r24, r19
    3cf0:	a0 0d       	add	r26, r0
    3cf2:	61 1d       	adc	r22, r1
    3cf4:	22 1f       	adc	r18, r18
    3cf6:	74 9f       	mul	r23, r20
    3cf8:	33 27       	eor	r19, r19
    3cfa:	a0 0d       	add	r26, r0
    3cfc:	61 1d       	adc	r22, r1
    3cfe:	23 1f       	adc	r18, r19
    3d00:	84 9f       	mul	r24, r20
    3d02:	60 0d       	add	r22, r0
    3d04:	21 1d       	adc	r18, r1
    3d06:	82 2f       	mov	r24, r18
    3d08:	76 2f       	mov	r23, r22
    3d0a:	6a 2f       	mov	r22, r26
    3d0c:	11 24       	eor	r1, r1
    3d0e:	9f 57       	subi	r25, 0x7F	; 127
    3d10:	50 40       	sbci	r21, 0x00	; 0
    3d12:	9a f0       	brmi	.+38     	; 0x3d3a <__mulsf3_pse+0x88>
    3d14:	f1 f0       	breq	.+60     	; 0x3d52 <__mulsf3_pse+0xa0>
    3d16:	88 23       	and	r24, r24
    3d18:	4a f0       	brmi	.+18     	; 0x3d2c <__mulsf3_pse+0x7a>
    3d1a:	ee 0f       	add	r30, r30
    3d1c:	ff 1f       	adc	r31, r31
    3d1e:	bb 1f       	adc	r27, r27
    3d20:	66 1f       	adc	r22, r22
    3d22:	77 1f       	adc	r23, r23
    3d24:	88 1f       	adc	r24, r24
    3d26:	91 50       	subi	r25, 0x01	; 1
    3d28:	50 40       	sbci	r21, 0x00	; 0
    3d2a:	a9 f7       	brne	.-22     	; 0x3d16 <__mulsf3_pse+0x64>
    3d2c:	9e 3f       	cpi	r25, 0xFE	; 254
    3d2e:	51 05       	cpc	r21, r1
    3d30:	80 f0       	brcs	.+32     	; 0x3d52 <__mulsf3_pse+0xa0>
    3d32:	0c 94 ed 1d 	jmp	0x3bda	; 0x3bda <__fp_inf>
    3d36:	0c 94 38 1e 	jmp	0x3c70	; 0x3c70 <__fp_szero>
    3d3a:	5f 3f       	cpi	r21, 0xFF	; 255
    3d3c:	e4 f3       	brlt	.-8      	; 0x3d36 <__mulsf3_pse+0x84>
    3d3e:	98 3e       	cpi	r25, 0xE8	; 232
    3d40:	d4 f3       	brlt	.-12     	; 0x3d36 <__mulsf3_pse+0x84>
    3d42:	86 95       	lsr	r24
    3d44:	77 95       	ror	r23
    3d46:	67 95       	ror	r22
    3d48:	b7 95       	ror	r27
    3d4a:	f7 95       	ror	r31
    3d4c:	e7 95       	ror	r30
    3d4e:	9f 5f       	subi	r25, 0xFF	; 255
    3d50:	c1 f7       	brne	.-16     	; 0x3d42 <__mulsf3_pse+0x90>
    3d52:	fe 2b       	or	r31, r30
    3d54:	88 0f       	add	r24, r24
    3d56:	91 1d       	adc	r25, r1
    3d58:	96 95       	lsr	r25
    3d5a:	87 95       	ror	r24
    3d5c:	97 f9       	bld	r25, 7
    3d5e:	08 95       	ret

00003d60 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3d60:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    3d62:	91 8d       	ldd	r25, Z+25	; 0x19
    3d64:	22 8d       	ldd	r18, Z+26	; 0x1a
    3d66:	89 2f       	mov	r24, r25
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	80 5c       	subi	r24, 0xC0	; 192
    3d6c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d6e:	82 1b       	sub	r24, r18
    3d70:	91 09       	sbc	r25, r1
}
    3d72:	8f 73       	andi	r24, 0x3F	; 63
    3d74:	99 27       	eor	r25, r25
    3d76:	08 95       	ret

00003d78 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3d78:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3d7a:	91 8d       	ldd	r25, Z+25	; 0x19
    3d7c:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d7e:	98 17       	cp	r25, r24
    3d80:	31 f0       	breq	.+12     	; 0x3d8e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3d82:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d84:	e8 0f       	add	r30, r24
    3d86:	f1 1d       	adc	r31, r1
    3d88:	85 8d       	ldd	r24, Z+29	; 0x1d
    3d8a:	90 e0       	ldi	r25, 0x00	; 0
    3d8c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3d8e:	8f ef       	ldi	r24, 0xFF	; 255
    3d90:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3d92:	08 95       	ret

00003d94 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3d94:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3d96:	91 8d       	ldd	r25, Z+25	; 0x19
    3d98:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d9a:	98 17       	cp	r25, r24
    3d9c:	61 f0       	breq	.+24     	; 0x3db6 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3d9e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3da0:	df 01       	movw	r26, r30
    3da2:	a8 0f       	add	r26, r24
    3da4:	b1 1d       	adc	r27, r1
    3da6:	5d 96       	adiw	r26, 0x1d	; 29
    3da8:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3daa:	92 8d       	ldd	r25, Z+26	; 0x1a
    3dac:	9f 5f       	subi	r25, 0xFF	; 255
    3dae:	9f 73       	andi	r25, 0x3F	; 63
    3db0:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3db6:	8f ef       	ldi	r24, 0xFF	; 255
    3db8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3dba:	08 95       	ret

00003dbc <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3dbc:	83 e3       	ldi	r24, 0x33	; 51
    3dbe:	90 e2       	ldi	r25, 0x20	; 32
    3dc0:	89 2b       	or	r24, r25
    3dc2:	49 f0       	breq	.+18     	; 0x3dd6 <_Z14serialEventRunv+0x1a>
    3dc4:	80 e0       	ldi	r24, 0x00	; 0
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	89 2b       	or	r24, r25
    3dca:	29 f0       	breq	.+10     	; 0x3dd6 <_Z14serialEventRunv+0x1a>
    3dcc:	0e 94 33 20 	call	0x4066	; 0x4066 <_Z17Serial0_availablev>
    3dd0:	81 11       	cpse	r24, r1
    3dd2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3dd6:	08 95       	ret

00003dd8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3dd8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3dda:	84 8d       	ldd	r24, Z+28	; 0x1c
    3ddc:	df 01       	movw	r26, r30
    3dde:	a8 0f       	add	r26, r24
    3de0:	b1 1d       	adc	r27, r1
    3de2:	a3 5a       	subi	r26, 0xA3	; 163
    3de4:	bf 4f       	sbci	r27, 0xFF	; 255
    3de6:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3de8:	84 8d       	ldd	r24, Z+28	; 0x1c
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	01 96       	adiw	r24, 0x01	; 1
    3dee:	8f 73       	andi	r24, 0x3F	; 63
    3df0:	99 27       	eor	r25, r25
    3df2:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3df4:	a6 89       	ldd	r26, Z+22	; 0x16
    3df6:	b7 89       	ldd	r27, Z+23	; 0x17
    3df8:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    3dfa:	a0 89       	ldd	r26, Z+16	; 0x10
    3dfc:	b1 89       	ldd	r27, Z+17	; 0x11
    3dfe:	8c 91       	ld	r24, X
    3e00:	80 64       	ori	r24, 0x40	; 64
    3e02:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    3e04:	93 8d       	ldd	r25, Z+27	; 0x1b
    3e06:	84 8d       	ldd	r24, Z+28	; 0x1c
    3e08:	98 13       	cpse	r25, r24
    3e0a:	06 c0       	rjmp	.+12     	; 0x3e18 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3e0c:	02 88       	ldd	r0, Z+18	; 0x12
    3e0e:	f3 89       	ldd	r31, Z+19	; 0x13
    3e10:	e0 2d       	mov	r30, r0
    3e12:	80 81       	ld	r24, Z
    3e14:	8f 7d       	andi	r24, 0xDF	; 223
    3e16:	80 83       	st	Z, r24
    3e18:	08 95       	ret

00003e1a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3e1a:	cf 93       	push	r28
    3e1c:	df 93       	push	r29
    3e1e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3e20:	88 8d       	ldd	r24, Y+24	; 0x18
    3e22:	88 23       	and	r24, r24
    3e24:	c9 f0       	breq	.+50     	; 0x3e58 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3e26:	ea 89       	ldd	r30, Y+18	; 0x12
    3e28:	fb 89       	ldd	r31, Y+19	; 0x13
    3e2a:	80 81       	ld	r24, Z
    3e2c:	85 fd       	sbrc	r24, 5
    3e2e:	05 c0       	rjmp	.+10     	; 0x3e3a <_ZN14HardwareSerial5flushEv+0x20>
    3e30:	a8 89       	ldd	r26, Y+16	; 0x10
    3e32:	b9 89       	ldd	r27, Y+17	; 0x11
    3e34:	8c 91       	ld	r24, X
    3e36:	86 fd       	sbrc	r24, 6
    3e38:	0f c0       	rjmp	.+30     	; 0x3e58 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3e3a:	0f b6       	in	r0, 0x3f	; 63
    3e3c:	07 fc       	sbrc	r0, 7
    3e3e:	f5 cf       	rjmp	.-22     	; 0x3e2a <_ZN14HardwareSerial5flushEv+0x10>
    3e40:	80 81       	ld	r24, Z
    3e42:	85 ff       	sbrs	r24, 5
    3e44:	f2 cf       	rjmp	.-28     	; 0x3e2a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3e46:	a8 89       	ldd	r26, Y+16	; 0x10
    3e48:	b9 89       	ldd	r27, Y+17	; 0x11
    3e4a:	8c 91       	ld	r24, X
    3e4c:	85 ff       	sbrs	r24, 5
    3e4e:	ed cf       	rjmp	.-38     	; 0x3e2a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3e50:	ce 01       	movw	r24, r28
    3e52:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3e56:	e7 cf       	rjmp	.-50     	; 0x3e26 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3e58:	df 91       	pop	r29
    3e5a:	cf 91       	pop	r28
    3e5c:	08 95       	ret

00003e5e <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    3e5e:	ef 92       	push	r14
    3e60:	ff 92       	push	r15
    3e62:	0f 93       	push	r16
    3e64:	1f 93       	push	r17
    3e66:	cf 93       	push	r28
    3e68:	df 93       	push	r29
    3e6a:	ec 01       	movw	r28, r24
  _written = true;
    3e6c:	81 e0       	ldi	r24, 0x01	; 1
    3e6e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3e70:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3e72:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3e74:	98 13       	cpse	r25, r24
    3e76:	05 c0       	rjmp	.+10     	; 0x3e82 <_ZN14HardwareSerial5writeEh+0x24>
    3e78:	e8 89       	ldd	r30, Y+16	; 0x10
    3e7a:	f9 89       	ldd	r31, Y+17	; 0x11
    3e7c:	80 81       	ld	r24, Z
    3e7e:	85 fd       	sbrc	r24, 5
    3e80:	24 c0       	rjmp	.+72     	; 0x3eca <_ZN14HardwareSerial5writeEh+0x6c>
    3e82:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3e84:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3e86:	10 e0       	ldi	r17, 0x00	; 0
    3e88:	0f 5f       	subi	r16, 0xFF	; 255
    3e8a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e8c:	0f 73       	andi	r16, 0x3F	; 63
    3e8e:	11 27       	eor	r17, r17
    3e90:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3e92:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3e94:	e8 12       	cpse	r14, r24
    3e96:	0c c0       	rjmp	.+24     	; 0x3eb0 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    3e98:	0f b6       	in	r0, 0x3f	; 63
    3e9a:	07 fc       	sbrc	r0, 7
    3e9c:	fa cf       	rjmp	.-12     	; 0x3e92 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3e9e:	e8 89       	ldd	r30, Y+16	; 0x10
    3ea0:	f9 89       	ldd	r31, Y+17	; 0x11
    3ea2:	80 81       	ld	r24, Z
    3ea4:	85 ff       	sbrs	r24, 5
    3ea6:	f5 cf       	rjmp	.-22     	; 0x3e92 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3ea8:	ce 01       	movw	r24, r28
    3eaa:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3eae:	f1 cf       	rjmp	.-30     	; 0x3e92 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3eb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3eb2:	fe 01       	movw	r30, r28
    3eb4:	e8 0f       	add	r30, r24
    3eb6:	f1 1d       	adc	r31, r1
    3eb8:	e3 5a       	subi	r30, 0xA3	; 163
    3eba:	ff 4f       	sbci	r31, 0xFF	; 255
    3ebc:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    3ebe:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    3ec0:	ea 89       	ldd	r30, Y+18	; 0x12
    3ec2:	fb 89       	ldd	r31, Y+19	; 0x13
    3ec4:	80 81       	ld	r24, Z
    3ec6:	80 62       	ori	r24, 0x20	; 32
    3ec8:	07 c0       	rjmp	.+14     	; 0x3ed8 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    3eca:	ee 89       	ldd	r30, Y+22	; 0x16
    3ecc:	ff 89       	ldd	r31, Y+23	; 0x17
    3ece:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    3ed0:	e8 89       	ldd	r30, Y+16	; 0x10
    3ed2:	f9 89       	ldd	r31, Y+17	; 0x11
    3ed4:	80 81       	ld	r24, Z
    3ed6:	80 64       	ori	r24, 0x40	; 64
    3ed8:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    3eda:	81 e0       	ldi	r24, 0x01	; 1
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	df 91       	pop	r29
    3ee0:	cf 91       	pop	r28
    3ee2:	1f 91       	pop	r17
    3ee4:	0f 91       	pop	r16
    3ee6:	ff 90       	pop	r15
    3ee8:	ef 90       	pop	r14
    3eea:	08 95       	ret

00003eec <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3eec:	cf 92       	push	r12
    3eee:	df 92       	push	r13
    3ef0:	ef 92       	push	r14
    3ef2:	ff 92       	push	r15
    3ef4:	1f 93       	push	r17
    3ef6:	cf 93       	push	r28
    3ef8:	df 93       	push	r29
    3efa:	ec 01       	movw	r28, r24
    3efc:	6a 01       	movw	r12, r20
    3efe:	7b 01       	movw	r14, r22
    3f00:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3f02:	e8 89       	ldd	r30, Y+16	; 0x10
    3f04:	f9 89       	ldd	r31, Y+17	; 0x11
    3f06:	82 e0       	ldi	r24, 0x02	; 2
    3f08:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3f0a:	41 15       	cp	r20, r1
    3f0c:	51 4e       	sbci	r21, 0xE1	; 225
    3f0e:	61 05       	cpc	r22, r1
    3f10:	71 05       	cpc	r23, r1
    3f12:	b1 f0       	breq	.+44     	; 0x3f40 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3f14:	60 e0       	ldi	r22, 0x00	; 0
    3f16:	79 e0       	ldi	r23, 0x09	; 9
    3f18:	8d e3       	ldi	r24, 0x3D	; 61
    3f1a:	90 e0       	ldi	r25, 0x00	; 0
    3f1c:	a7 01       	movw	r20, r14
    3f1e:	96 01       	movw	r18, r12
    3f20:	0e 94 11 28 	call	0x5022	; 0x5022 <__udivmodsi4>
    3f24:	da 01       	movw	r26, r20
    3f26:	c9 01       	movw	r24, r18
    3f28:	01 97       	sbiw	r24, 0x01	; 1
    3f2a:	a1 09       	sbc	r26, r1
    3f2c:	b1 09       	sbc	r27, r1
    3f2e:	b6 95       	lsr	r27
    3f30:	a7 95       	ror	r26
    3f32:	97 95       	ror	r25
    3f34:	87 95       	ror	r24
    3f36:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3f38:	41 15       	cp	r20, r1
    3f3a:	80 e1       	ldi	r24, 0x10	; 16
    3f3c:	58 07       	cpc	r21, r24
    3f3e:	a8 f0       	brcs	.+42     	; 0x3f6a <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    3f40:	e8 89       	ldd	r30, Y+16	; 0x10
    3f42:	f9 89       	ldd	r31, Y+17	; 0x11
    3f44:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3f46:	60 e8       	ldi	r22, 0x80	; 128
    3f48:	74 e8       	ldi	r23, 0x84	; 132
    3f4a:	8e e1       	ldi	r24, 0x1E	; 30
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	a7 01       	movw	r20, r14
    3f50:	96 01       	movw	r18, r12
    3f52:	0e 94 11 28 	call	0x5022	; 0x5022 <__udivmodsi4>
    3f56:	ba 01       	movw	r22, r20
    3f58:	a9 01       	movw	r20, r18
    3f5a:	41 50       	subi	r20, 0x01	; 1
    3f5c:	51 09       	sbc	r21, r1
    3f5e:	61 09       	sbc	r22, r1
    3f60:	71 09       	sbc	r23, r1
    3f62:	76 95       	lsr	r23
    3f64:	67 95       	ror	r22
    3f66:	57 95       	ror	r21
    3f68:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3f6a:	ec 85       	ldd	r30, Y+12	; 0x0c
    3f6c:	fd 85       	ldd	r31, Y+13	; 0x0d
    3f6e:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    3f70:	ee 85       	ldd	r30, Y+14	; 0x0e
    3f72:	ff 85       	ldd	r31, Y+15	; 0x0f
    3f74:	40 83       	st	Z, r20

  _written = false;
    3f76:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3f78:	ec 89       	ldd	r30, Y+20	; 0x14
    3f7a:	fd 89       	ldd	r31, Y+21	; 0x15
    3f7c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    3f7e:	ea 89       	ldd	r30, Y+18	; 0x12
    3f80:	fb 89       	ldd	r31, Y+19	; 0x13
    3f82:	80 81       	ld	r24, Z
    3f84:	80 61       	ori	r24, 0x10	; 16
    3f86:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    3f88:	ea 89       	ldd	r30, Y+18	; 0x12
    3f8a:	fb 89       	ldd	r31, Y+19	; 0x13
    3f8c:	80 81       	ld	r24, Z
    3f8e:	88 60       	ori	r24, 0x08	; 8
    3f90:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3f92:	ea 89       	ldd	r30, Y+18	; 0x12
    3f94:	fb 89       	ldd	r31, Y+19	; 0x13
    3f96:	80 81       	ld	r24, Z
    3f98:	80 68       	ori	r24, 0x80	; 128
    3f9a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3f9c:	ea 89       	ldd	r30, Y+18	; 0x12
    3f9e:	fb 89       	ldd	r31, Y+19	; 0x13
    3fa0:	80 81       	ld	r24, Z
    3fa2:	8f 7d       	andi	r24, 0xDF	; 223
    3fa4:	80 83       	st	Z, r24
}
    3fa6:	df 91       	pop	r29
    3fa8:	cf 91       	pop	r28
    3faa:	1f 91       	pop	r17
    3fac:	ff 90       	pop	r15
    3fae:	ef 90       	pop	r14
    3fb0:	df 90       	pop	r13
    3fb2:	cf 90       	pop	r12
    3fb4:	08 95       	ret

00003fb6 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    3fb6:	1f 92       	push	r1
    3fb8:	0f 92       	push	r0
    3fba:	0f b6       	in	r0, 0x3f	; 63
    3fbc:	0f 92       	push	r0
    3fbe:	11 24       	eor	r1, r1
    3fc0:	2f 93       	push	r18
    3fc2:	8f 93       	push	r24
    3fc4:	9f 93       	push	r25
    3fc6:	ef 93       	push	r30
    3fc8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3fca:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <Serial+0x10>
    3fce:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <Serial+0x11>
    3fd2:	80 81       	ld	r24, Z
    3fd4:	e0 91 af 01 	lds	r30, 0x01AF	; 0x8001af <Serial+0x16>
    3fd8:	f0 91 b0 01 	lds	r31, 0x01B0	; 0x8001b0 <Serial+0x17>
    3fdc:	82 fd       	sbrc	r24, 2
    3fde:	12 c0       	rjmp	.+36     	; 0x4004 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3fe0:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3fe2:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <Serial+0x19>
    3fe6:	8f 5f       	subi	r24, 0xFF	; 255
    3fe8:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3fea:	20 91 b3 01 	lds	r18, 0x01B3	; 0x8001b3 <Serial+0x1a>
    3fee:	82 17       	cp	r24, r18
    3ff0:	51 f0       	breq	.+20     	; 0x4006 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    3ff2:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <Serial+0x19>
    3ff6:	f0 e0       	ldi	r31, 0x00	; 0
    3ff8:	e7 56       	subi	r30, 0x67	; 103
    3ffa:	fe 4f       	sbci	r31, 0xFE	; 254
    3ffc:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3ffe:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <Serial+0x19>
    4002:	01 c0       	rjmp	.+2      	; 0x4006 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    4004:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    4006:	ff 91       	pop	r31
    4008:	ef 91       	pop	r30
    400a:	9f 91       	pop	r25
    400c:	8f 91       	pop	r24
    400e:	2f 91       	pop	r18
    4010:	0f 90       	pop	r0
    4012:	0f be       	out	0x3f, r0	; 63
    4014:	0f 90       	pop	r0
    4016:	1f 90       	pop	r1
    4018:	18 95       	reti

0000401a <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    401a:	1f 92       	push	r1
    401c:	0f 92       	push	r0
    401e:	0f b6       	in	r0, 0x3f	; 63
    4020:	0f 92       	push	r0
    4022:	11 24       	eor	r1, r1
    4024:	2f 93       	push	r18
    4026:	3f 93       	push	r19
    4028:	4f 93       	push	r20
    402a:	5f 93       	push	r21
    402c:	6f 93       	push	r22
    402e:	7f 93       	push	r23
    4030:	8f 93       	push	r24
    4032:	9f 93       	push	r25
    4034:	af 93       	push	r26
    4036:	bf 93       	push	r27
    4038:	ef 93       	push	r30
    403a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    403c:	89 e9       	ldi	r24, 0x99	; 153
    403e:	91 e0       	ldi	r25, 0x01	; 1
    4040:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    4044:	ff 91       	pop	r31
    4046:	ef 91       	pop	r30
    4048:	bf 91       	pop	r27
    404a:	af 91       	pop	r26
    404c:	9f 91       	pop	r25
    404e:	8f 91       	pop	r24
    4050:	7f 91       	pop	r23
    4052:	6f 91       	pop	r22
    4054:	5f 91       	pop	r21
    4056:	4f 91       	pop	r20
    4058:	3f 91       	pop	r19
    405a:	2f 91       	pop	r18
    405c:	0f 90       	pop	r0
    405e:	0f be       	out	0x3f, r0	; 63
    4060:	0f 90       	pop	r0
    4062:	1f 90       	pop	r1
    4064:	18 95       	reti

00004066 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    4066:	89 e9       	ldi	r24, 0x99	; 153
    4068:	91 e0       	ldi	r25, 0x01	; 1
    406a:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <_ZN14HardwareSerial9availableEv>
    406e:	21 e0       	ldi	r18, 0x01	; 1
    4070:	89 2b       	or	r24, r25
    4072:	09 f4       	brne	.+2      	; 0x4076 <_Z17Serial0_availablev+0x10>
    4074:	20 e0       	ldi	r18, 0x00	; 0
}
    4076:	82 2f       	mov	r24, r18
    4078:	08 95       	ret

0000407a <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    407a:	e9 e9       	ldi	r30, 0x99	; 153
    407c:	f1 e0       	ldi	r31, 0x01	; 1
    407e:	13 82       	std	Z+3, r1	; 0x03
    4080:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    4082:	88 ee       	ldi	r24, 0xE8	; 232
    4084:	93 e0       	ldi	r25, 0x03	; 3
    4086:	a0 e0       	ldi	r26, 0x00	; 0
    4088:	b0 e0       	ldi	r27, 0x00	; 0
    408a:	84 83       	std	Z+4, r24	; 0x04
    408c:	95 83       	std	Z+5, r25	; 0x05
    408e:	a6 83       	std	Z+6, r26	; 0x06
    4090:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    4092:	86 e0       	ldi	r24, 0x06	; 6
    4094:	91 e0       	ldi	r25, 0x01	; 1
    4096:	91 83       	std	Z+1, r25	; 0x01
    4098:	80 83       	st	Z, r24
    409a:	85 ec       	ldi	r24, 0xC5	; 197
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	95 87       	std	Z+13, r25	; 0x0d
    40a0:	84 87       	std	Z+12, r24	; 0x0c
    40a2:	84 ec       	ldi	r24, 0xC4	; 196
    40a4:	90 e0       	ldi	r25, 0x00	; 0
    40a6:	97 87       	std	Z+15, r25	; 0x0f
    40a8:	86 87       	std	Z+14, r24	; 0x0e
    40aa:	80 ec       	ldi	r24, 0xC0	; 192
    40ac:	90 e0       	ldi	r25, 0x00	; 0
    40ae:	91 8b       	std	Z+17, r25	; 0x11
    40b0:	80 8b       	std	Z+16, r24	; 0x10
    40b2:	81 ec       	ldi	r24, 0xC1	; 193
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	93 8b       	std	Z+19, r25	; 0x13
    40b8:	82 8b       	std	Z+18, r24	; 0x12
    40ba:	82 ec       	ldi	r24, 0xC2	; 194
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	95 8b       	std	Z+21, r25	; 0x15
    40c0:	84 8b       	std	Z+20, r24	; 0x14
    40c2:	86 ec       	ldi	r24, 0xC6	; 198
    40c4:	90 e0       	ldi	r25, 0x00	; 0
    40c6:	97 8b       	std	Z+23, r25	; 0x17
    40c8:	86 8b       	std	Z+22, r24	; 0x16
    40ca:	11 8e       	std	Z+25, r1	; 0x19
    40cc:	12 8e       	std	Z+26, r1	; 0x1a
    40ce:	13 8e       	std	Z+27, r1	; 0x1b
    40d0:	14 8e       	std	Z+28, r1	; 0x1c
    40d2:	08 95       	ret

000040d4 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    40d4:	08 95       	ret

000040d6 <main>:

int main(void)
{
	init();
    40d6:	0e 94 d7 24 	call	0x49ae	; 0x49ae <init>

	initVariant();
    40da:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    40de:	0e 94 3a 09 	call	0x1274	; 0x1274 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    40e2:	ce ed       	ldi	r28, 0xDE	; 222
    40e4:	de e1       	ldi	r29, 0x1E	; 30
#endif
	
	setup();
    
	for (;;) {
		loop();
    40e6:	0e 94 c9 13 	call	0x2792	; 0x2792 <loop>
		if (serialEventRun) serialEventRun();
    40ea:	20 97       	sbiw	r28, 0x00	; 0
    40ec:	e1 f3       	breq	.-8      	; 0x40e6 <main+0x10>
    40ee:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <_Z14serialEventRunv>
    40f2:	f9 cf       	rjmp	.-14     	; 0x40e6 <main+0x10>

000040f4 <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    40f4:	cf 92       	push	r12
    40f6:	df 92       	push	r13
    40f8:	ef 92       	push	r14
    40fa:	ff 92       	push	r15
    40fc:	0f 93       	push	r16
    40fe:	1f 93       	push	r17
    4100:	cf 93       	push	r28
    4102:	df 93       	push	r29
    4104:	6c 01       	movw	r12, r24
    4106:	7a 01       	movw	r14, r20
    4108:	8b 01       	movw	r16, r22
    410a:	c0 e0       	ldi	r28, 0x00	; 0
    410c:	d0 e0       	ldi	r29, 0x00	; 0
    410e:	ce 15       	cp	r28, r14
    4110:	df 05       	cpc	r29, r15
    4112:	89 f0       	breq	.+34     	; 0x4136 <_ZN5Print5writeEPKhj+0x42>
    4114:	d8 01       	movw	r26, r16
    4116:	6d 91       	ld	r22, X+
    4118:	8d 01       	movw	r16, r26
    411a:	d6 01       	movw	r26, r12
    411c:	ed 91       	ld	r30, X+
    411e:	fc 91       	ld	r31, X
    4120:	01 90       	ld	r0, Z+
    4122:	f0 81       	ld	r31, Z
    4124:	e0 2d       	mov	r30, r0
    4126:	c6 01       	movw	r24, r12
    4128:	09 95       	icall
    412a:	89 2b       	or	r24, r25
    412c:	11 f4       	brne	.+4      	; 0x4132 <_ZN5Print5writeEPKhj+0x3e>
    412e:	7e 01       	movw	r14, r28
    4130:	02 c0       	rjmp	.+4      	; 0x4136 <_ZN5Print5writeEPKhj+0x42>
    4132:	21 96       	adiw	r28, 0x01	; 1
    4134:	ec cf       	rjmp	.-40     	; 0x410e <_ZN5Print5writeEPKhj+0x1a>
    4136:	c7 01       	movw	r24, r14
    4138:	df 91       	pop	r29
    413a:	cf 91       	pop	r28
    413c:	1f 91       	pop	r17
    413e:	0f 91       	pop	r16
    4140:	ff 90       	pop	r15
    4142:	ef 90       	pop	r14
    4144:	df 90       	pop	r13
    4146:	cf 90       	pop	r12
    4148:	08 95       	ret

0000414a <_ZN5Print5writeEPKc>:
    414a:	61 15       	cp	r22, r1
    414c:	71 05       	cpc	r23, r1
    414e:	79 f0       	breq	.+30     	; 0x416e <_ZN5Print5writeEPKc+0x24>
    4150:	fb 01       	movw	r30, r22
    4152:	01 90       	ld	r0, Z+
    4154:	00 20       	and	r0, r0
    4156:	e9 f7       	brne	.-6      	; 0x4152 <_ZN5Print5writeEPKc+0x8>
    4158:	31 97       	sbiw	r30, 0x01	; 1
    415a:	af 01       	movw	r20, r30
    415c:	46 1b       	sub	r20, r22
    415e:	57 0b       	sbc	r21, r23
    4160:	dc 01       	movw	r26, r24
    4162:	ed 91       	ld	r30, X+
    4164:	fc 91       	ld	r31, X
    4166:	02 80       	ldd	r0, Z+2	; 0x02
    4168:	f3 81       	ldd	r31, Z+3	; 0x03
    416a:	e0 2d       	mov	r30, r0
    416c:	09 94       	ijmp
    416e:	80 e0       	ldi	r24, 0x00	; 0
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	08 95       	ret

00004174 <_ZN5Print5printEPK19__FlashStringHelper>:
    4174:	ef 92       	push	r14
    4176:	ff 92       	push	r15
    4178:	0f 93       	push	r16
    417a:	1f 93       	push	r17
    417c:	cf 93       	push	r28
    417e:	df 93       	push	r29
    4180:	8c 01       	movw	r16, r24
    4182:	7b 01       	movw	r14, r22
    4184:	c0 e0       	ldi	r28, 0x00	; 0
    4186:	d0 e0       	ldi	r29, 0x00	; 0
    4188:	f7 01       	movw	r30, r14
    418a:	ec 0f       	add	r30, r28
    418c:	fd 1f       	adc	r31, r29
    418e:	64 91       	lpm	r22, Z
    4190:	66 23       	and	r22, r22
    4192:	61 f0       	breq	.+24     	; 0x41ac <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    4194:	d8 01       	movw	r26, r16
    4196:	ed 91       	ld	r30, X+
    4198:	fc 91       	ld	r31, X
    419a:	01 90       	ld	r0, Z+
    419c:	f0 81       	ld	r31, Z
    419e:	e0 2d       	mov	r30, r0
    41a0:	c8 01       	movw	r24, r16
    41a2:	09 95       	icall
    41a4:	89 2b       	or	r24, r25
    41a6:	11 f0       	breq	.+4      	; 0x41ac <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    41a8:	21 96       	adiw	r28, 0x01	; 1
    41aa:	ee cf       	rjmp	.-36     	; 0x4188 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    41ac:	ce 01       	movw	r24, r28
    41ae:	df 91       	pop	r29
    41b0:	cf 91       	pop	r28
    41b2:	1f 91       	pop	r17
    41b4:	0f 91       	pop	r16
    41b6:	ff 90       	pop	r15
    41b8:	ef 90       	pop	r14
    41ba:	08 95       	ret

000041bc <_ZN5Print5printEPKc>:
    41bc:	0c 94 a5 20 	jmp	0x414a	; 0x414a <_ZN5Print5writeEPKc>

000041c0 <_ZN5Print5printEc>:
    41c0:	dc 01       	movw	r26, r24
    41c2:	ed 91       	ld	r30, X+
    41c4:	fc 91       	ld	r31, X
    41c6:	01 90       	ld	r0, Z+
    41c8:	f0 81       	ld	r31, Z
    41ca:	e0 2d       	mov	r30, r0
    41cc:	09 94       	ijmp

000041ce <_ZN5Print7printlnEv>:
    41ce:	62 e1       	ldi	r22, 0x12	; 18
    41d0:	71 e0       	ldi	r23, 0x01	; 1
    41d2:	0c 94 a5 20 	jmp	0x414a	; 0x414a <_ZN5Print5writeEPKc>

000041d6 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    41d6:	0f 93       	push	r16
    41d8:	1f 93       	push	r17
    41da:	cf 93       	push	r28
    41dc:	df 93       	push	r29
    41de:	ec 01       	movw	r28, r24
    41e0:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN5Print5printEPK19__FlashStringHelper>
    41e4:	8c 01       	movw	r16, r24
    41e6:	ce 01       	movw	r24, r28
    41e8:	0e 94 e7 20 	call	0x41ce	; 0x41ce <_ZN5Print7printlnEv>
    41ec:	80 0f       	add	r24, r16
    41ee:	91 1f       	adc	r25, r17
    41f0:	df 91       	pop	r29
    41f2:	cf 91       	pop	r28
    41f4:	1f 91       	pop	r17
    41f6:	0f 91       	pop	r16
    41f8:	08 95       	ret

000041fa <_ZN5Print7printlnEPKc>:
    41fa:	0f 93       	push	r16
    41fc:	1f 93       	push	r17
    41fe:	cf 93       	push	r28
    4200:	df 93       	push	r29
    4202:	ec 01       	movw	r28, r24
    4204:	0e 94 a5 20 	call	0x414a	; 0x414a <_ZN5Print5writeEPKc>
    4208:	8c 01       	movw	r16, r24
    420a:	ce 01       	movw	r24, r28
    420c:	0e 94 e7 20 	call	0x41ce	; 0x41ce <_ZN5Print7printlnEv>
    4210:	80 0f       	add	r24, r16
    4212:	91 1f       	adc	r25, r17
    4214:	df 91       	pop	r29
    4216:	cf 91       	pop	r28
    4218:	1f 91       	pop	r17
    421a:	0f 91       	pop	r16
    421c:	08 95       	ret

0000421e <_ZN5Print11printNumberEmh>:
    421e:	8f 92       	push	r8
    4220:	9f 92       	push	r9
    4222:	af 92       	push	r10
    4224:	bf 92       	push	r11
    4226:	cf 92       	push	r12
    4228:	df 92       	push	r13
    422a:	ef 92       	push	r14
    422c:	ff 92       	push	r15
    422e:	0f 93       	push	r16
    4230:	1f 93       	push	r17
    4232:	cf 93       	push	r28
    4234:	df 93       	push	r29
    4236:	cd b7       	in	r28, 0x3d	; 61
    4238:	de b7       	in	r29, 0x3e	; 62
    423a:	a1 97       	sbiw	r28, 0x21	; 33
    423c:	0f b6       	in	r0, 0x3f	; 63
    423e:	f8 94       	cli
    4240:	de bf       	out	0x3e, r29	; 62
    4242:	0f be       	out	0x3f, r0	; 63
    4244:	cd bf       	out	0x3d, r28	; 61
    4246:	7c 01       	movw	r14, r24
    4248:	d4 2e       	mov	r13, r20
    424a:	c5 2e       	mov	r12, r21
    424c:	db 01       	movw	r26, r22
    424e:	19 a2       	std	Y+33, r1	; 0x21
    4250:	22 30       	cpi	r18, 0x02	; 2
    4252:	08 f4       	brcc	.+2      	; 0x4256 <_ZN5Print11printNumberEmh+0x38>
    4254:	2a e0       	ldi	r18, 0x0A	; 10
    4256:	8e 01       	movw	r16, r28
    4258:	0f 5d       	subi	r16, 0xDF	; 223
    425a:	1f 4f       	sbci	r17, 0xFF	; 255
    425c:	82 2e       	mov	r8, r18
    425e:	91 2c       	mov	r9, r1
    4260:	a1 2c       	mov	r10, r1
    4262:	b1 2c       	mov	r11, r1
    4264:	6d 2d       	mov	r22, r13
    4266:	7c 2d       	mov	r23, r12
    4268:	cd 01       	movw	r24, r26
    426a:	a5 01       	movw	r20, r10
    426c:	94 01       	movw	r18, r8
    426e:	0e 94 11 28 	call	0x5022	; 0x5022 <__udivmodsi4>
    4272:	d2 2e       	mov	r13, r18
    4274:	c3 2e       	mov	r12, r19
    4276:	da 01       	movw	r26, r20
    4278:	01 50       	subi	r16, 0x01	; 1
    427a:	11 09       	sbc	r17, r1
    427c:	6a 30       	cpi	r22, 0x0A	; 10
    427e:	71 05       	cpc	r23, r1
    4280:	81 05       	cpc	r24, r1
    4282:	91 05       	cpc	r25, r1
    4284:	10 f4       	brcc	.+4      	; 0x428a <_ZN5Print11printNumberEmh+0x6c>
    4286:	60 5d       	subi	r22, 0xD0	; 208
    4288:	01 c0       	rjmp	.+2      	; 0x428c <_ZN5Print11printNumberEmh+0x6e>
    428a:	69 5c       	subi	r22, 0xC9	; 201
    428c:	f8 01       	movw	r30, r16
    428e:	60 83       	st	Z, r22
    4290:	23 2b       	or	r18, r19
    4292:	24 2b       	or	r18, r20
    4294:	25 2b       	or	r18, r21
    4296:	31 f7       	brne	.-52     	; 0x4264 <_ZN5Print11printNumberEmh+0x46>
    4298:	b8 01       	movw	r22, r16
    429a:	c7 01       	movw	r24, r14
    429c:	0e 94 a5 20 	call	0x414a	; 0x414a <_ZN5Print5writeEPKc>
    42a0:	a1 96       	adiw	r28, 0x21	; 33
    42a2:	0f b6       	in	r0, 0x3f	; 63
    42a4:	f8 94       	cli
    42a6:	de bf       	out	0x3e, r29	; 62
    42a8:	0f be       	out	0x3f, r0	; 63
    42aa:	cd bf       	out	0x3d, r28	; 61
    42ac:	df 91       	pop	r29
    42ae:	cf 91       	pop	r28
    42b0:	1f 91       	pop	r17
    42b2:	0f 91       	pop	r16
    42b4:	ff 90       	pop	r15
    42b6:	ef 90       	pop	r14
    42b8:	df 90       	pop	r13
    42ba:	cf 90       	pop	r12
    42bc:	bf 90       	pop	r11
    42be:	af 90       	pop	r10
    42c0:	9f 90       	pop	r9
    42c2:	8f 90       	pop	r8
    42c4:	08 95       	ret

000042c6 <_ZN5Print5printEli>:
    42c6:	cf 92       	push	r12
    42c8:	df 92       	push	r13
    42ca:	ef 92       	push	r14
    42cc:	ff 92       	push	r15
    42ce:	0f 93       	push	r16
    42d0:	1f 93       	push	r17
    42d2:	cf 93       	push	r28
    42d4:	df 93       	push	r29
    42d6:	ec 01       	movw	r28, r24
    42d8:	6a 01       	movw	r12, r20
    42da:	7b 01       	movw	r14, r22
    42dc:	21 15       	cp	r18, r1
    42de:	31 05       	cpc	r19, r1
    42e0:	79 f4       	brne	.+30     	; 0x4300 <_ZN5Print5printEli+0x3a>
    42e2:	e8 81       	ld	r30, Y
    42e4:	f9 81       	ldd	r31, Y+1	; 0x01
    42e6:	01 90       	ld	r0, Z+
    42e8:	f0 81       	ld	r31, Z
    42ea:	e0 2d       	mov	r30, r0
    42ec:	64 2f       	mov	r22, r20
    42ee:	df 91       	pop	r29
    42f0:	cf 91       	pop	r28
    42f2:	1f 91       	pop	r17
    42f4:	0f 91       	pop	r16
    42f6:	ff 90       	pop	r15
    42f8:	ef 90       	pop	r14
    42fa:	df 90       	pop	r13
    42fc:	cf 90       	pop	r12
    42fe:	09 94       	ijmp
    4300:	2a 30       	cpi	r18, 0x0A	; 10
    4302:	31 05       	cpc	r19, r1
    4304:	e9 f4       	brne	.+58     	; 0x4340 <_ZN5Print5printEli+0x7a>
    4306:	77 ff       	sbrs	r23, 7
    4308:	1a c0       	rjmp	.+52     	; 0x433e <_ZN5Print5printEli+0x78>
    430a:	6d e2       	ldi	r22, 0x2D	; 45
    430c:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <_ZN5Print5printEc>
    4310:	8c 01       	movw	r16, r24
    4312:	44 27       	eor	r20, r20
    4314:	55 27       	eor	r21, r21
    4316:	ba 01       	movw	r22, r20
    4318:	4c 19       	sub	r20, r12
    431a:	5d 09       	sbc	r21, r13
    431c:	6e 09       	sbc	r22, r14
    431e:	7f 09       	sbc	r23, r15
    4320:	2a e0       	ldi	r18, 0x0A	; 10
    4322:	ce 01       	movw	r24, r28
    4324:	0e 94 0f 21 	call	0x421e	; 0x421e <_ZN5Print11printNumberEmh>
    4328:	80 0f       	add	r24, r16
    432a:	91 1f       	adc	r25, r17
    432c:	df 91       	pop	r29
    432e:	cf 91       	pop	r28
    4330:	1f 91       	pop	r17
    4332:	0f 91       	pop	r16
    4334:	ff 90       	pop	r15
    4336:	ef 90       	pop	r14
    4338:	df 90       	pop	r13
    433a:	cf 90       	pop	r12
    433c:	08 95       	ret
    433e:	2a e0       	ldi	r18, 0x0A	; 10
    4340:	b7 01       	movw	r22, r14
    4342:	a6 01       	movw	r20, r12
    4344:	ce 01       	movw	r24, r28
    4346:	df 91       	pop	r29
    4348:	cf 91       	pop	r28
    434a:	1f 91       	pop	r17
    434c:	0f 91       	pop	r16
    434e:	ff 90       	pop	r15
    4350:	ef 90       	pop	r14
    4352:	df 90       	pop	r13
    4354:	cf 90       	pop	r12
    4356:	0c 94 0f 21 	jmp	0x421e	; 0x421e <_ZN5Print11printNumberEmh>

0000435a <_ZN5Print5printEii>:
    435a:	9a 01       	movw	r18, r20
    435c:	ab 01       	movw	r20, r22
    435e:	77 0f       	add	r23, r23
    4360:	66 0b       	sbc	r22, r22
    4362:	77 0b       	sbc	r23, r23
    4364:	0c 94 63 21 	jmp	0x42c6	; 0x42c6 <_ZN5Print5printEli>

00004368 <_ZN5Print7printlnEii>:
    4368:	0f 93       	push	r16
    436a:	1f 93       	push	r17
    436c:	cf 93       	push	r28
    436e:	df 93       	push	r29
    4370:	ec 01       	movw	r28, r24
    4372:	9a 01       	movw	r18, r20
    4374:	ab 01       	movw	r20, r22
    4376:	77 0f       	add	r23, r23
    4378:	66 0b       	sbc	r22, r22
    437a:	77 0b       	sbc	r23, r23
    437c:	0e 94 63 21 	call	0x42c6	; 0x42c6 <_ZN5Print5printEli>
    4380:	8c 01       	movw	r16, r24
    4382:	ce 01       	movw	r24, r28
    4384:	0e 94 e7 20 	call	0x41ce	; 0x41ce <_ZN5Print7printlnEv>
    4388:	80 0f       	add	r24, r16
    438a:	91 1f       	adc	r25, r17
    438c:	df 91       	pop	r29
    438e:	cf 91       	pop	r28
    4390:	1f 91       	pop	r17
    4392:	0f 91       	pop	r16
    4394:	08 95       	ret

00004396 <_ZN5Print5printEmi>:
    4396:	21 15       	cp	r18, r1
    4398:	31 05       	cpc	r19, r1
    439a:	41 f4       	brne	.+16     	; 0x43ac <_ZN5Print5printEmi+0x16>
    439c:	dc 01       	movw	r26, r24
    439e:	ed 91       	ld	r30, X+
    43a0:	fc 91       	ld	r31, X
    43a2:	01 90       	ld	r0, Z+
    43a4:	f0 81       	ld	r31, Z
    43a6:	e0 2d       	mov	r30, r0
    43a8:	64 2f       	mov	r22, r20
    43aa:	09 94       	ijmp
    43ac:	0c 94 0f 21 	jmp	0x421e	; 0x421e <_ZN5Print11printNumberEmh>

000043b0 <_ZN5Print7printlnEhi>:
    43b0:	0f 93       	push	r16
    43b2:	1f 93       	push	r17
    43b4:	cf 93       	push	r28
    43b6:	df 93       	push	r29
    43b8:	ec 01       	movw	r28, r24
    43ba:	9a 01       	movw	r18, r20
    43bc:	46 2f       	mov	r20, r22
    43be:	50 e0       	ldi	r21, 0x00	; 0
    43c0:	60 e0       	ldi	r22, 0x00	; 0
    43c2:	70 e0       	ldi	r23, 0x00	; 0
    43c4:	0e 94 cb 21 	call	0x4396	; 0x4396 <_ZN5Print5printEmi>
    43c8:	8c 01       	movw	r16, r24
    43ca:	ce 01       	movw	r24, r28
    43cc:	0e 94 e7 20 	call	0x41ce	; 0x41ce <_ZN5Print7printlnEv>
    43d0:	80 0f       	add	r24, r16
    43d2:	91 1f       	adc	r25, r17
    43d4:	df 91       	pop	r29
    43d6:	cf 91       	pop	r28
    43d8:	1f 91       	pop	r17
    43da:	0f 91       	pop	r16
    43dc:	08 95       	ret

000043de <_ZN5Print10printFloatEdh>:
    43de:	4f 92       	push	r4
    43e0:	5f 92       	push	r5
    43e2:	6f 92       	push	r6
    43e4:	7f 92       	push	r7
    43e6:	8f 92       	push	r8
    43e8:	9f 92       	push	r9
    43ea:	af 92       	push	r10
    43ec:	bf 92       	push	r11
    43ee:	cf 92       	push	r12
    43f0:	df 92       	push	r13
    43f2:	ef 92       	push	r14
    43f4:	ff 92       	push	r15
    43f6:	cf 93       	push	r28
    43f8:	df 93       	push	r29
    43fa:	ec 01       	movw	r28, r24
    43fc:	6a 01       	movw	r12, r20
    43fe:	7b 01       	movw	r14, r22
    4400:	b2 2e       	mov	r11, r18
    4402:	9a 01       	movw	r18, r20
    4404:	ab 01       	movw	r20, r22
    4406:	c7 01       	movw	r24, r14
    4408:	b6 01       	movw	r22, r12
    440a:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <__unordsf2>
    440e:	88 23       	and	r24, r24
    4410:	19 f0       	breq	.+6      	; 0x4418 <_ZN5Print10printFloatEdh+0x3a>
    4412:	65 e1       	ldi	r22, 0x15	; 21
    4414:	71 e0       	ldi	r23, 0x01	; 1
    4416:	27 c0       	rjmp	.+78     	; 0x4466 <_ZN5Print10printFloatEdh+0x88>
    4418:	26 01       	movw	r4, r12
    441a:	37 01       	movw	r6, r14
    441c:	e8 94       	clt
    441e:	77 f8       	bld	r7, 7
    4420:	2f ef       	ldi	r18, 0xFF	; 255
    4422:	3f ef       	ldi	r19, 0xFF	; 255
    4424:	4f e7       	ldi	r20, 0x7F	; 127
    4426:	5f e7       	ldi	r21, 0x7F	; 127
    4428:	c3 01       	movw	r24, r6
    442a:	b2 01       	movw	r22, r4
    442c:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <__unordsf2>
    4430:	81 11       	cpse	r24, r1
    4432:	0d c0       	rjmp	.+26     	; 0x444e <_ZN5Print10printFloatEdh+0x70>
    4434:	2f ef       	ldi	r18, 0xFF	; 255
    4436:	3f ef       	ldi	r19, 0xFF	; 255
    4438:	4f e7       	ldi	r20, 0x7F	; 127
    443a:	5f e7       	ldi	r21, 0x7F	; 127
    443c:	c3 01       	movw	r24, r6
    443e:	b2 01       	movw	r22, r4
    4440:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__cmpsf2>
    4444:	18 16       	cp	r1, r24
    4446:	1c f4       	brge	.+6      	; 0x444e <_ZN5Print10printFloatEdh+0x70>
    4448:	69 e1       	ldi	r22, 0x19	; 25
    444a:	71 e0       	ldi	r23, 0x01	; 1
    444c:	0c c0       	rjmp	.+24     	; 0x4466 <_ZN5Print10printFloatEdh+0x88>
    444e:	2f ef       	ldi	r18, 0xFF	; 255
    4450:	3f ef       	ldi	r19, 0xFF	; 255
    4452:	4f e7       	ldi	r20, 0x7F	; 127
    4454:	5f e4       	ldi	r21, 0x4F	; 79
    4456:	c7 01       	movw	r24, r14
    4458:	b6 01       	movw	r22, r12
    445a:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <__gesf2>
    445e:	18 16       	cp	r1, r24
    4460:	9c f4       	brge	.+38     	; 0x4488 <_ZN5Print10printFloatEdh+0xaa>
    4462:	6d e1       	ldi	r22, 0x1D	; 29
    4464:	71 e0       	ldi	r23, 0x01	; 1
    4466:	ce 01       	movw	r24, r28
    4468:	df 91       	pop	r29
    446a:	cf 91       	pop	r28
    446c:	ff 90       	pop	r15
    446e:	ef 90       	pop	r14
    4470:	df 90       	pop	r13
    4472:	cf 90       	pop	r12
    4474:	bf 90       	pop	r11
    4476:	af 90       	pop	r10
    4478:	9f 90       	pop	r9
    447a:	8f 90       	pop	r8
    447c:	7f 90       	pop	r7
    447e:	6f 90       	pop	r6
    4480:	5f 90       	pop	r5
    4482:	4f 90       	pop	r4
    4484:	0c 94 a5 20 	jmp	0x414a	; 0x414a <_ZN5Print5writeEPKc>
    4488:	2f ef       	ldi	r18, 0xFF	; 255
    448a:	3f ef       	ldi	r19, 0xFF	; 255
    448c:	4f e7       	ldi	r20, 0x7F	; 127
    448e:	5f ec       	ldi	r21, 0xCF	; 207
    4490:	c7 01       	movw	r24, r14
    4492:	b6 01       	movw	r22, r12
    4494:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__cmpsf2>
    4498:	87 fd       	sbrc	r24, 7
    449a:	e3 cf       	rjmp	.-58     	; 0x4462 <_ZN5Print10printFloatEdh+0x84>
    449c:	20 e0       	ldi	r18, 0x00	; 0
    449e:	30 e0       	ldi	r19, 0x00	; 0
    44a0:	a9 01       	movw	r20, r18
    44a2:	c7 01       	movw	r24, r14
    44a4:	b6 01       	movw	r22, r12
    44a6:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__cmpsf2>
    44aa:	87 ff       	sbrs	r24, 7
    44ac:	0a c0       	rjmp	.+20     	; 0x44c2 <_ZN5Print10printFloatEdh+0xe4>
    44ae:	6d e2       	ldi	r22, 0x2D	; 45
    44b0:	ce 01       	movw	r24, r28
    44b2:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <_ZN5Print5printEc>
    44b6:	4c 01       	movw	r8, r24
    44b8:	f7 fa       	bst	r15, 7
    44ba:	f0 94       	com	r15
    44bc:	f7 f8       	bld	r15, 7
    44be:	f0 94       	com	r15
    44c0:	02 c0       	rjmp	.+4      	; 0x44c6 <_ZN5Print10printFloatEdh+0xe8>
    44c2:	81 2c       	mov	r8, r1
    44c4:	91 2c       	mov	r9, r1
    44c6:	a1 2c       	mov	r10, r1
    44c8:	60 e0       	ldi	r22, 0x00	; 0
    44ca:	70 e0       	ldi	r23, 0x00	; 0
    44cc:	80 e0       	ldi	r24, 0x00	; 0
    44ce:	9f e3       	ldi	r25, 0x3F	; 63
    44d0:	ab 14       	cp	r10, r11
    44d2:	41 f0       	breq	.+16     	; 0x44e4 <_ZN5Print10printFloatEdh+0x106>
    44d4:	20 e0       	ldi	r18, 0x00	; 0
    44d6:	30 e0       	ldi	r19, 0x00	; 0
    44d8:	40 e2       	ldi	r20, 0x20	; 32
    44da:	51 e4       	ldi	r21, 0x41	; 65
    44dc:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <__divsf3>
    44e0:	a3 94       	inc	r10
    44e2:	f6 cf       	rjmp	.-20     	; 0x44d0 <_ZN5Print10printFloatEdh+0xf2>
    44e4:	9b 01       	movw	r18, r22
    44e6:	ac 01       	movw	r20, r24
    44e8:	c7 01       	movw	r24, r14
    44ea:	b6 01       	movw	r22, r12
    44ec:	0e 94 a9 1c 	call	0x3952	; 0x3952 <__addsf3>
    44f0:	2b 01       	movw	r4, r22
    44f2:	3c 01       	movw	r6, r24
    44f4:	0e 94 c9 27 	call	0x4f92	; 0x4f92 <__fixunssfsi>
    44f8:	6b 01       	movw	r12, r22
    44fa:	7c 01       	movw	r14, r24
    44fc:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__floatunsisf>
    4500:	9b 01       	movw	r18, r22
    4502:	ac 01       	movw	r20, r24
    4504:	c3 01       	movw	r24, r6
    4506:	b2 01       	movw	r22, r4
    4508:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__subsf3>
    450c:	2b 01       	movw	r4, r22
    450e:	3c 01       	movw	r6, r24
    4510:	2a e0       	ldi	r18, 0x0A	; 10
    4512:	b7 01       	movw	r22, r14
    4514:	a6 01       	movw	r20, r12
    4516:	ce 01       	movw	r24, r28
    4518:	0e 94 0f 21 	call	0x421e	; 0x421e <_ZN5Print11printNumberEmh>
    451c:	7c 01       	movw	r14, r24
    451e:	e8 0c       	add	r14, r8
    4520:	f9 1c       	adc	r15, r9
    4522:	bb 20       	and	r11, r11
    4524:	31 f0       	breq	.+12     	; 0x4532 <_ZN5Print10printFloatEdh+0x154>
    4526:	6e e2       	ldi	r22, 0x2E	; 46
    4528:	ce 01       	movw	r24, r28
    452a:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <_ZN5Print5printEc>
    452e:	e8 0e       	add	r14, r24
    4530:	f9 1e       	adc	r15, r25
    4532:	db 2c       	mov	r13, r11
    4534:	dd 20       	and	r13, r13
    4536:	29 f1       	breq	.+74     	; 0x4582 <_ZN5Print10printFloatEdh+0x1a4>
    4538:	20 e0       	ldi	r18, 0x00	; 0
    453a:	30 e0       	ldi	r19, 0x00	; 0
    453c:	40 e2       	ldi	r20, 0x20	; 32
    453e:	51 e4       	ldi	r21, 0x41	; 65
    4540:	c3 01       	movw	r24, r6
    4542:	b2 01       	movw	r22, r4
    4544:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <__mulsf3>
    4548:	2b 01       	movw	r4, r22
    454a:	3c 01       	movw	r6, r24
    454c:	0e 94 c9 27 	call	0x4f92	; 0x4f92 <__fixunssfsi>
    4550:	4b 01       	movw	r8, r22
    4552:	a1 2c       	mov	r10, r1
    4554:	b1 2c       	mov	r11, r1
    4556:	2a e0       	ldi	r18, 0x0A	; 10
    4558:	b5 01       	movw	r22, r10
    455a:	a4 01       	movw	r20, r8
    455c:	ce 01       	movw	r24, r28
    455e:	0e 94 0f 21 	call	0x421e	; 0x421e <_ZN5Print11printNumberEmh>
    4562:	e8 0e       	add	r14, r24
    4564:	f9 1e       	adc	r15, r25
    4566:	c5 01       	movw	r24, r10
    4568:	b4 01       	movw	r22, r8
    456a:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__floatunsisf>
    456e:	9b 01       	movw	r18, r22
    4570:	ac 01       	movw	r20, r24
    4572:	c3 01       	movw	r24, r6
    4574:	b2 01       	movw	r22, r4
    4576:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__subsf3>
    457a:	2b 01       	movw	r4, r22
    457c:	3c 01       	movw	r6, r24
    457e:	da 94       	dec	r13
    4580:	d9 cf       	rjmp	.-78     	; 0x4534 <_ZN5Print10printFloatEdh+0x156>
    4582:	c7 01       	movw	r24, r14
    4584:	df 91       	pop	r29
    4586:	cf 91       	pop	r28
    4588:	ff 90       	pop	r15
    458a:	ef 90       	pop	r14
    458c:	df 90       	pop	r13
    458e:	cf 90       	pop	r12
    4590:	bf 90       	pop	r11
    4592:	af 90       	pop	r10
    4594:	9f 90       	pop	r9
    4596:	8f 90       	pop	r8
    4598:	7f 90       	pop	r7
    459a:	6f 90       	pop	r6
    459c:	5f 90       	pop	r5
    459e:	4f 90       	pop	r4
    45a0:	08 95       	ret

000045a2 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    45a2:	0f 93       	push	r16
    45a4:	1f 93       	push	r17
    45a6:	cf 93       	push	r28
    45a8:	df 93       	push	r29
    45aa:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    45ac:	0e 94 ef 21 	call	0x43de	; 0x43de <_ZN5Print10printFloatEdh>
    45b0:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    45b2:	ce 01       	movw	r24, r28
    45b4:	0e 94 e7 20 	call	0x41ce	; 0x41ce <_ZN5Print7printlnEv>
  return n;
}
    45b8:	80 0f       	add	r24, r16
    45ba:	91 1f       	adc	r25, r17
    45bc:	df 91       	pop	r29
    45be:	cf 91       	pop	r28
    45c0:	1f 91       	pop	r17
    45c2:	0f 91       	pop	r16
    45c4:	08 95       	ret

000045c6 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    45c6:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <_ZN7TwoWire14rxBufferLengthE>
    45ca:	90 e0       	ldi	r25, 0x00	; 0
    45cc:	20 91 67 02 	lds	r18, 0x0267	; 0x800267 <_ZN7TwoWire13rxBufferIndexE>
    45d0:	82 1b       	sub	r24, r18
    45d2:	91 09       	sbc	r25, r1
    45d4:	08 95       	ret

000045d6 <_ZN7TwoWire4readEv>:
    45d6:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <_ZN7TwoWire13rxBufferIndexE>
    45da:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <_ZN7TwoWire14rxBufferLengthE>
    45de:	98 17       	cp	r25, r24
    45e0:	50 f4       	brcc	.+20     	; 0x45f6 <_ZN7TwoWire4readEv+0x20>
    45e2:	e9 2f       	mov	r30, r25
    45e4:	f0 e0       	ldi	r31, 0x00	; 0
    45e6:	e8 59       	subi	r30, 0x98	; 152
    45e8:	fd 4f       	sbci	r31, 0xFD	; 253
    45ea:	20 81       	ld	r18, Z
    45ec:	30 e0       	ldi	r19, 0x00	; 0
    45ee:	9f 5f       	subi	r25, 0xFF	; 255
    45f0:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <_ZN7TwoWire13rxBufferIndexE>
    45f4:	02 c0       	rjmp	.+4      	; 0x45fa <_ZN7TwoWire4readEv+0x24>
    45f6:	2f ef       	ldi	r18, 0xFF	; 255
    45f8:	3f ef       	ldi	r19, 0xFF	; 255
    45fa:	c9 01       	movw	r24, r18
    45fc:	08 95       	ret

000045fe <_ZN7TwoWire4peekEv>:
    45fe:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <_ZN7TwoWire13rxBufferIndexE>
    4602:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <_ZN7TwoWire14rxBufferLengthE>
    4606:	e8 17       	cp	r30, r24
    4608:	30 f4       	brcc	.+12     	; 0x4616 <_ZN7TwoWire4peekEv+0x18>
    460a:	f0 e0       	ldi	r31, 0x00	; 0
    460c:	e8 59       	subi	r30, 0x98	; 152
    460e:	fd 4f       	sbci	r31, 0xFD	; 253
    4610:	80 81       	ld	r24, Z
    4612:	90 e0       	ldi	r25, 0x00	; 0
    4614:	08 95       	ret
    4616:	8f ef       	ldi	r24, 0xFF	; 255
    4618:	9f ef       	ldi	r25, 0xFF	; 255
    461a:	08 95       	ret

0000461c <_ZN7TwoWire5flushEv>:
    461c:	08 95       	ret

0000461e <_ZN7TwoWire5writeEPKhj>:
    461e:	cf 92       	push	r12
    4620:	df 92       	push	r13
    4622:	ef 92       	push	r14
    4624:	ff 92       	push	r15
    4626:	0f 93       	push	r16
    4628:	1f 93       	push	r17
    462a:	cf 93       	push	r28
    462c:	df 93       	push	r29
    462e:	7c 01       	movw	r14, r24
    4630:	26 2f       	mov	r18, r22
    4632:	97 2f       	mov	r25, r23
    4634:	8a 01       	movw	r16, r20
    4636:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <_ZN7TwoWire12transmittingE>
    463a:	88 23       	and	r24, r24
    463c:	91 f0       	breq	.+36     	; 0x4662 <_ZN7TwoWire5writeEPKhj+0x44>
    463e:	c6 2f       	mov	r28, r22
    4640:	d7 2f       	mov	r29, r23
    4642:	6e 01       	movw	r12, r28
    4644:	c4 0e       	add	r12, r20
    4646:	d5 1e       	adc	r13, r21
    4648:	cc 15       	cp	r28, r12
    464a:	dd 05       	cpc	r29, r13
    464c:	71 f0       	breq	.+28     	; 0x466a <_ZN7TwoWire5writeEPKhj+0x4c>
    464e:	69 91       	ld	r22, Y+
    4650:	d7 01       	movw	r26, r14
    4652:	ed 91       	ld	r30, X+
    4654:	fc 91       	ld	r31, X
    4656:	01 90       	ld	r0, Z+
    4658:	f0 81       	ld	r31, Z
    465a:	e0 2d       	mov	r30, r0
    465c:	c7 01       	movw	r24, r14
    465e:	09 95       	icall
    4660:	f3 cf       	rjmp	.-26     	; 0x4648 <_ZN7TwoWire5writeEPKhj+0x2a>
    4662:	64 2f       	mov	r22, r20
    4664:	82 2f       	mov	r24, r18
    4666:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <twi_transmit>
    466a:	c8 01       	movw	r24, r16
    466c:	df 91       	pop	r29
    466e:	cf 91       	pop	r28
    4670:	1f 91       	pop	r17
    4672:	0f 91       	pop	r16
    4674:	ff 90       	pop	r15
    4676:	ef 90       	pop	r14
    4678:	df 90       	pop	r13
    467a:	cf 90       	pop	r12
    467c:	08 95       	ret

0000467e <_ZN7TwoWire5writeEh>:
    467e:	cf 93       	push	r28
    4680:	df 93       	push	r29
    4682:	1f 92       	push	r1
    4684:	cd b7       	in	r28, 0x3d	; 61
    4686:	de b7       	in	r29, 0x3e	; 62
    4688:	69 83       	std	Y+1, r22	; 0x01
    468a:	20 91 42 02 	lds	r18, 0x0242	; 0x800242 <_ZN7TwoWire12transmittingE>
    468e:	22 23       	and	r18, r18
    4690:	d1 f0       	breq	.+52     	; 0x46c6 <_ZN7TwoWire5writeEh+0x48>
    4692:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <_ZN7TwoWire14txBufferLengthE>
    4696:	20 32       	cpi	r18, 0x20	; 32
    4698:	40 f0       	brcs	.+16     	; 0x46aa <_ZN7TwoWire5writeEh+0x2c>
    469a:	21 e0       	ldi	r18, 0x01	; 1
    469c:	30 e0       	ldi	r19, 0x00	; 0
    469e:	fc 01       	movw	r30, r24
    46a0:	33 83       	std	Z+3, r19	; 0x03
    46a2:	22 83       	std	Z+2, r18	; 0x02
    46a4:	80 e0       	ldi	r24, 0x00	; 0
    46a6:	90 e0       	ldi	r25, 0x00	; 0
    46a8:	15 c0       	rjmp	.+42     	; 0x46d4 <_ZN7TwoWire5writeEh+0x56>
    46aa:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <_ZN7TwoWire13txBufferIndexE>
    46ae:	e8 2f       	mov	r30, r24
    46b0:	f0 e0       	ldi	r31, 0x00	; 0
    46b2:	eb 5b       	subi	r30, 0xBB	; 187
    46b4:	fd 4f       	sbci	r31, 0xFD	; 253
    46b6:	99 81       	ldd	r25, Y+1	; 0x01
    46b8:	90 83       	st	Z, r25
    46ba:	8f 5f       	subi	r24, 0xFF	; 255
    46bc:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <_ZN7TwoWire13txBufferIndexE>
    46c0:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <_ZN7TwoWire14txBufferLengthE>
    46c4:	05 c0       	rjmp	.+10     	; 0x46d0 <_ZN7TwoWire5writeEh+0x52>
    46c6:	61 e0       	ldi	r22, 0x01	; 1
    46c8:	ce 01       	movw	r24, r28
    46ca:	01 96       	adiw	r24, 0x01	; 1
    46cc:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <twi_transmit>
    46d0:	81 e0       	ldi	r24, 0x01	; 1
    46d2:	90 e0       	ldi	r25, 0x00	; 0
    46d4:	0f 90       	pop	r0
    46d6:	df 91       	pop	r29
    46d8:	cf 91       	pop	r28
    46da:	08 95       	ret

000046dc <_ZN7TwoWireC1Ev>:
    46dc:	fc 01       	movw	r30, r24
    46de:	13 82       	std	Z+3, r1	; 0x03
    46e0:	12 82       	std	Z+2, r1	; 0x02
    46e2:	88 ee       	ldi	r24, 0xE8	; 232
    46e4:	93 e0       	ldi	r25, 0x03	; 3
    46e6:	a0 e0       	ldi	r26, 0x00	; 0
    46e8:	b0 e0       	ldi	r27, 0x00	; 0
    46ea:	84 83       	std	Z+4, r24	; 0x04
    46ec:	95 83       	std	Z+5, r25	; 0x05
    46ee:	a6 83       	std	Z+6, r26	; 0x06
    46f0:	b7 83       	std	Z+7, r27	; 0x07
    46f2:	85 e2       	ldi	r24, 0x25	; 37
    46f4:	91 e0       	ldi	r25, 0x01	; 1
    46f6:	91 83       	std	Z+1, r25	; 0x01
    46f8:	80 83       	st	Z, r24
    46fa:	08 95       	ret

000046fc <_ZN7TwoWire5beginEv>:
    46fc:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <_ZN7TwoWire13rxBufferIndexE>
    4700:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <_ZN7TwoWire14rxBufferLengthE>
    4704:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <_ZN7TwoWire13txBufferIndexE>
    4708:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <_ZN7TwoWire14txBufferLengthE>
    470c:	0c 94 a8 25 	jmp	0x4b50	; 0x4b50 <twi_init>

00004710 <_ZN7TwoWire17beginTransmissionEh>:
    4710:	81 e0       	ldi	r24, 0x01	; 1
    4712:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <_ZN7TwoWire12transmittingE>
    4716:	60 93 65 02 	sts	0x0265, r22	; 0x800265 <_ZN7TwoWire9txAddressE>
    471a:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <_ZN7TwoWire13txBufferIndexE>
    471e:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <_ZN7TwoWire14txBufferLengthE>
    4722:	08 95       	ret

00004724 <_ZN7TwoWire17beginTransmissionEi>:
    4724:	0c 94 88 23 	jmp	0x4710	; 0x4710 <_ZN7TwoWire17beginTransmissionEh>

00004728 <_ZN7TwoWire15endTransmissionEh>:
    4728:	0f 93       	push	r16
    472a:	06 2f       	mov	r16, r22
    472c:	21 e0       	ldi	r18, 0x01	; 1
    472e:	40 91 43 02 	lds	r20, 0x0243	; 0x800243 <_ZN7TwoWire14txBufferLengthE>
    4732:	65 e4       	ldi	r22, 0x45	; 69
    4734:	72 e0       	ldi	r23, 0x02	; 2
    4736:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <_ZN7TwoWire9txAddressE>
    473a:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <twi_writeTo>
    473e:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <_ZN7TwoWire13txBufferIndexE>
    4742:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <_ZN7TwoWire14txBufferLengthE>
    4746:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <_ZN7TwoWire12transmittingE>
    474a:	0f 91       	pop	r16
    474c:	08 95       	ret

0000474e <_ZN7TwoWire11requestFromEhhmhh>:
    474e:	4f 92       	push	r4
    4750:	5f 92       	push	r5
    4752:	6f 92       	push	r6
    4754:	7f 92       	push	r7
    4756:	af 92       	push	r10
    4758:	bf 92       	push	r11
    475a:	cf 92       	push	r12
    475c:	ef 92       	push	r14
    475e:	ff 92       	push	r15
    4760:	0f 93       	push	r16
    4762:	1f 93       	push	r17
    4764:	cf 93       	push	r28
    4766:	df 93       	push	r29
    4768:	5c 01       	movw	r10, r24
    476a:	f6 2e       	mov	r15, r22
    476c:	d4 2f       	mov	r29, r20
    476e:	28 01       	movw	r4, r16
    4770:	39 01       	movw	r6, r18
    4772:	ee 20       	and	r14, r14
    4774:	21 f1       	breq	.+72     	; 0x47be <_ZN7TwoWire11requestFromEhhmhh+0x70>
    4776:	0e 94 88 23 	call	0x4710	; 0x4710 <_ZN7TwoWire17beginTransmissionEh>
    477a:	ce 2d       	mov	r28, r14
    477c:	c4 30       	cpi	r28, 0x04	; 4
    477e:	08 f0       	brcs	.+2      	; 0x4782 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    4780:	c3 e0       	ldi	r28, 0x03	; 3
    4782:	c1 50       	subi	r28, 0x01	; 1
    4784:	c0 f0       	brcs	.+48     	; 0x47b6 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    4786:	d5 01       	movw	r26, r10
    4788:	ed 91       	ld	r30, X+
    478a:	fc 91       	ld	r31, X
    478c:	b8 e0       	ldi	r27, 0x08	; 8
    478e:	cb 9f       	mul	r28, r27
    4790:	c0 01       	movw	r24, r0
    4792:	11 24       	eor	r1, r1
    4794:	a3 01       	movw	r20, r6
    4796:	92 01       	movw	r18, r4
    4798:	04 c0       	rjmp	.+8      	; 0x47a2 <_ZN7TwoWire11requestFromEhhmhh+0x54>
    479a:	56 95       	lsr	r21
    479c:	47 95       	ror	r20
    479e:	37 95       	ror	r19
    47a0:	27 95       	ror	r18
    47a2:	8a 95       	dec	r24
    47a4:	d2 f7       	brpl	.-12     	; 0x479a <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    47a6:	ca 01       	movw	r24, r20
    47a8:	b9 01       	movw	r22, r18
    47aa:	01 90       	ld	r0, Z+
    47ac:	f0 81       	ld	r31, Z
    47ae:	e0 2d       	mov	r30, r0
    47b0:	c5 01       	movw	r24, r10
    47b2:	09 95       	icall
    47b4:	e6 cf       	rjmp	.-52     	; 0x4782 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    47b6:	60 e0       	ldi	r22, 0x00	; 0
    47b8:	c5 01       	movw	r24, r10
    47ba:	0e 94 94 23 	call	0x4728	; 0x4728 <_ZN7TwoWire15endTransmissionEh>
    47be:	4d 2f       	mov	r20, r29
    47c0:	d1 32       	cpi	r29, 0x21	; 33
    47c2:	08 f0       	brcs	.+2      	; 0x47c6 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    47c4:	40 e2       	ldi	r20, 0x20	; 32
    47c6:	2c 2d       	mov	r18, r12
    47c8:	68 e6       	ldi	r22, 0x68	; 104
    47ca:	72 e0       	ldi	r23, 0x02	; 2
    47cc:	8f 2d       	mov	r24, r15
    47ce:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <twi_readFrom>
    47d2:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <_ZN7TwoWire13rxBufferIndexE>
    47d6:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <_ZN7TwoWire14rxBufferLengthE>
    47da:	df 91       	pop	r29
    47dc:	cf 91       	pop	r28
    47de:	1f 91       	pop	r17
    47e0:	0f 91       	pop	r16
    47e2:	ff 90       	pop	r15
    47e4:	ef 90       	pop	r14
    47e6:	cf 90       	pop	r12
    47e8:	bf 90       	pop	r11
    47ea:	af 90       	pop	r10
    47ec:	7f 90       	pop	r7
    47ee:	6f 90       	pop	r6
    47f0:	5f 90       	pop	r5
    47f2:	4f 90       	pop	r4
    47f4:	08 95       	ret

000047f6 <_ZN7TwoWire11requestFromEhhh>:
    47f6:	cf 92       	push	r12
    47f8:	ef 92       	push	r14
    47fa:	0f 93       	push	r16
    47fc:	1f 93       	push	r17
    47fe:	c2 2e       	mov	r12, r18
    4800:	e1 2c       	mov	r14, r1
    4802:	00 e0       	ldi	r16, 0x00	; 0
    4804:	10 e0       	ldi	r17, 0x00	; 0
    4806:	98 01       	movw	r18, r16
    4808:	0e 94 a7 23 	call	0x474e	; 0x474e <_ZN7TwoWire11requestFromEhhmhh>
    480c:	1f 91       	pop	r17
    480e:	0f 91       	pop	r16
    4810:	ef 90       	pop	r14
    4812:	cf 90       	pop	r12
    4814:	08 95       	ret

00004816 <_ZN7TwoWire11requestFromEii>:
    4816:	21 e0       	ldi	r18, 0x01	; 1
    4818:	0c 94 fb 23 	jmp	0x47f6	; 0x47f6 <_ZN7TwoWire11requestFromEhhh>

0000481c <_ZN7TwoWire15endTransmissionEv>:
    481c:	61 e0       	ldi	r22, 0x01	; 1
    481e:	0c 94 94 23 	jmp	0x4728	; 0x4728 <_ZN7TwoWire15endTransmissionEh>

00004822 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    4822:	86 e3       	ldi	r24, 0x36	; 54
    4824:	92 e0       	ldi	r25, 0x02	; 2
    4826:	0c 94 6e 23 	jmp	0x46dc	; 0x46dc <_ZN7TwoWireC1Ev>

0000482a <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    482a:	1f 92       	push	r1
    482c:	0f 92       	push	r0
    482e:	0f b6       	in	r0, 0x3f	; 63
    4830:	0f 92       	push	r0
    4832:	11 24       	eor	r1, r1
    4834:	2f 93       	push	r18
    4836:	3f 93       	push	r19
    4838:	8f 93       	push	r24
    483a:	9f 93       	push	r25
    483c:	af 93       	push	r26
    483e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    4840:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <timer0_millis>
    4844:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <timer0_millis+0x1>
    4848:	a0 91 8b 02 	lds	r26, 0x028B	; 0x80028b <timer0_millis+0x2>
    484c:	b0 91 8c 02 	lds	r27, 0x028C	; 0x80028c <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    4850:	30 91 88 02 	lds	r19, 0x0288	; 0x800288 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    4854:	23 e0       	ldi	r18, 0x03	; 3
    4856:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    4858:	2d 37       	cpi	r18, 0x7D	; 125
    485a:	20 f4       	brcc	.+8      	; 0x4864 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    485c:	01 96       	adiw	r24, 0x01	; 1
    485e:	a1 1d       	adc	r26, r1
    4860:	b1 1d       	adc	r27, r1
    4862:	05 c0       	rjmp	.+10     	; 0x486e <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    4864:	26 e8       	ldi	r18, 0x86	; 134
    4866:	23 0f       	add	r18, r19
		m += 1;
    4868:	02 96       	adiw	r24, 0x02	; 2
    486a:	a1 1d       	adc	r26, r1
    486c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    486e:	20 93 88 02 	sts	0x0288, r18	; 0x800288 <timer0_fract>
	timer0_millis = m;
    4872:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <timer0_millis>
    4876:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <timer0_millis+0x1>
    487a:	a0 93 8b 02 	sts	0x028B, r26	; 0x80028b <timer0_millis+0x2>
    487e:	b0 93 8c 02 	sts	0x028C, r27	; 0x80028c <timer0_millis+0x3>
	timer0_overflow_count++;
    4882:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <timer0_overflow_count>
    4886:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <timer0_overflow_count+0x1>
    488a:	a0 91 8f 02 	lds	r26, 0x028F	; 0x80028f <timer0_overflow_count+0x2>
    488e:	b0 91 90 02 	lds	r27, 0x0290	; 0x800290 <timer0_overflow_count+0x3>
    4892:	01 96       	adiw	r24, 0x01	; 1
    4894:	a1 1d       	adc	r26, r1
    4896:	b1 1d       	adc	r27, r1
    4898:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <timer0_overflow_count>
    489c:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <timer0_overflow_count+0x1>
    48a0:	a0 93 8f 02 	sts	0x028F, r26	; 0x80028f <timer0_overflow_count+0x2>
    48a4:	b0 93 90 02 	sts	0x0290, r27	; 0x800290 <timer0_overflow_count+0x3>
}
    48a8:	bf 91       	pop	r27
    48aa:	af 91       	pop	r26
    48ac:	9f 91       	pop	r25
    48ae:	8f 91       	pop	r24
    48b0:	3f 91       	pop	r19
    48b2:	2f 91       	pop	r18
    48b4:	0f 90       	pop	r0
    48b6:	0f be       	out	0x3f, r0	; 63
    48b8:	0f 90       	pop	r0
    48ba:	1f 90       	pop	r1
    48bc:	18 95       	reti

000048be <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    48be:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    48c0:	f8 94       	cli
	m = timer0_millis;
    48c2:	60 91 89 02 	lds	r22, 0x0289	; 0x800289 <timer0_millis>
    48c6:	70 91 8a 02 	lds	r23, 0x028A	; 0x80028a <timer0_millis+0x1>
    48ca:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <timer0_millis+0x2>
    48ce:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <timer0_millis+0x3>
	SREG = oldSREG;
    48d2:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    48d4:	08 95       	ret

000048d6 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    48d6:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    48d8:	f8 94       	cli
	m = timer0_overflow_count;
    48da:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <timer0_overflow_count>
    48de:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <timer0_overflow_count+0x1>
    48e2:	a0 91 8f 02 	lds	r26, 0x028F	; 0x80028f <timer0_overflow_count+0x2>
    48e6:	b0 91 90 02 	lds	r27, 0x0290	; 0x800290 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    48ea:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    48ec:	a8 9b       	sbis	0x15, 0	; 21
    48ee:	05 c0       	rjmp	.+10     	; 0x48fa <micros+0x24>
    48f0:	2f 3f       	cpi	r18, 0xFF	; 255
    48f2:	19 f0       	breq	.+6      	; 0x48fa <micros+0x24>
		m++;
    48f4:	01 96       	adiw	r24, 0x01	; 1
    48f6:	a1 1d       	adc	r26, r1
    48f8:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    48fa:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    48fc:	ba 2f       	mov	r27, r26
    48fe:	a9 2f       	mov	r26, r25
    4900:	98 2f       	mov	r25, r24
    4902:	88 27       	eor	r24, r24
    4904:	82 0f       	add	r24, r18
    4906:	91 1d       	adc	r25, r1
    4908:	a1 1d       	adc	r26, r1
    490a:	b1 1d       	adc	r27, r1
    490c:	bc 01       	movw	r22, r24
    490e:	cd 01       	movw	r24, r26
    4910:	42 e0       	ldi	r20, 0x02	; 2
    4912:	66 0f       	add	r22, r22
    4914:	77 1f       	adc	r23, r23
    4916:	88 1f       	adc	r24, r24
    4918:	99 1f       	adc	r25, r25
    491a:	4a 95       	dec	r20
    491c:	d1 f7       	brne	.-12     	; 0x4912 <micros+0x3c>
}
    491e:	08 95       	ret

00004920 <delay>:

void delay(unsigned long ms)
{
    4920:	8f 92       	push	r8
    4922:	9f 92       	push	r9
    4924:	af 92       	push	r10
    4926:	bf 92       	push	r11
    4928:	cf 92       	push	r12
    492a:	df 92       	push	r13
    492c:	ef 92       	push	r14
    492e:	ff 92       	push	r15
    4930:	6b 01       	movw	r12, r22
    4932:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    4934:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <micros>
    4938:	4b 01       	movw	r8, r22
    493a:	5c 01       	movw	r10, r24

	while (ms > 0) {
    493c:	c1 14       	cp	r12, r1
    493e:	d1 04       	cpc	r13, r1
    4940:	e1 04       	cpc	r14, r1
    4942:	f1 04       	cpc	r15, r1
    4944:	01 f1       	breq	.+64     	; 0x4986 <delay+0x66>
		yield();
    4946:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    494a:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <micros>
    494e:	dc 01       	movw	r26, r24
    4950:	cb 01       	movw	r24, r22
    4952:	88 19       	sub	r24, r8
    4954:	99 09       	sbc	r25, r9
    4956:	aa 09       	sbc	r26, r10
    4958:	bb 09       	sbc	r27, r11
    495a:	88 3e       	cpi	r24, 0xE8	; 232
    495c:	93 40       	sbci	r25, 0x03	; 3
    495e:	a1 05       	cpc	r26, r1
    4960:	b1 05       	cpc	r27, r1
    4962:	60 f3       	brcs	.-40     	; 0x493c <delay+0x1c>
			ms--;
    4964:	21 e0       	ldi	r18, 0x01	; 1
    4966:	c2 1a       	sub	r12, r18
    4968:	d1 08       	sbc	r13, r1
    496a:	e1 08       	sbc	r14, r1
    496c:	f1 08       	sbc	r15, r1
			start += 1000;
    496e:	88 ee       	ldi	r24, 0xE8	; 232
    4970:	88 0e       	add	r8, r24
    4972:	83 e0       	ldi	r24, 0x03	; 3
    4974:	98 1e       	adc	r9, r24
    4976:	a1 1c       	adc	r10, r1
    4978:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    497a:	c1 14       	cp	r12, r1
    497c:	d1 04       	cpc	r13, r1
    497e:	e1 04       	cpc	r14, r1
    4980:	f1 04       	cpc	r15, r1
    4982:	19 f7       	brne	.-58     	; 0x494a <delay+0x2a>
    4984:	db cf       	rjmp	.-74     	; 0x493c <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    4986:	ff 90       	pop	r15
    4988:	ef 90       	pop	r14
    498a:	df 90       	pop	r13
    498c:	cf 90       	pop	r12
    498e:	bf 90       	pop	r11
    4990:	af 90       	pop	r10
    4992:	9f 90       	pop	r9
    4994:	8f 90       	pop	r8
    4996:	08 95       	ret

00004998 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    4998:	82 30       	cpi	r24, 0x02	; 2
    499a:	91 05       	cpc	r25, r1
    499c:	38 f0       	brcs	.+14     	; 0x49ac <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    499e:	88 0f       	add	r24, r24
    49a0:	99 1f       	adc	r25, r25
    49a2:	88 0f       	add	r24, r24
    49a4:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    49a6:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    49a8:	01 97       	sbiw	r24, 0x01	; 1
    49aa:	f1 f7       	brne	.-4      	; 0x49a8 <delayMicroseconds+0x10>
    49ac:	08 95       	ret

000049ae <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    49ae:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    49b0:	84 b5       	in	r24, 0x24	; 36
    49b2:	82 60       	ori	r24, 0x02	; 2
    49b4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    49b6:	84 b5       	in	r24, 0x24	; 36
    49b8:	81 60       	ori	r24, 0x01	; 1
    49ba:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    49bc:	85 b5       	in	r24, 0x25	; 37
    49be:	82 60       	ori	r24, 0x02	; 2
    49c0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    49c2:	85 b5       	in	r24, 0x25	; 37
    49c4:	81 60       	ori	r24, 0x01	; 1
    49c6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    49c8:	ee e6       	ldi	r30, 0x6E	; 110
    49ca:	f0 e0       	ldi	r31, 0x00	; 0
    49cc:	80 81       	ld	r24, Z
    49ce:	81 60       	ori	r24, 0x01	; 1
    49d0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    49d2:	e1 e8       	ldi	r30, 0x81	; 129
    49d4:	f0 e0       	ldi	r31, 0x00	; 0
    49d6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    49d8:	80 81       	ld	r24, Z
    49da:	82 60       	ori	r24, 0x02	; 2
    49dc:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    49de:	80 81       	ld	r24, Z
    49e0:	81 60       	ori	r24, 0x01	; 1
    49e2:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    49e4:	e0 e8       	ldi	r30, 0x80	; 128
    49e6:	f0 e0       	ldi	r31, 0x00	; 0
    49e8:	80 81       	ld	r24, Z
    49ea:	81 60       	ori	r24, 0x01	; 1
    49ec:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    49ee:	e1 eb       	ldi	r30, 0xB1	; 177
    49f0:	f0 e0       	ldi	r31, 0x00	; 0
    49f2:	80 81       	ld	r24, Z
    49f4:	84 60       	ori	r24, 0x04	; 4
    49f6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    49f8:	e0 eb       	ldi	r30, 0xB0	; 176
    49fa:	f0 e0       	ldi	r31, 0x00	; 0
    49fc:	80 81       	ld	r24, Z
    49fe:	81 60       	ori	r24, 0x01	; 1
    4a00:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    4a02:	ea e7       	ldi	r30, 0x7A	; 122
    4a04:	f0 e0       	ldi	r31, 0x00	; 0
    4a06:	80 81       	ld	r24, Z
    4a08:	84 60       	ori	r24, 0x04	; 4
    4a0a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    4a0c:	80 81       	ld	r24, Z
    4a0e:	82 60       	ori	r24, 0x02	; 2
    4a10:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    4a12:	80 81       	ld	r24, Z
    4a14:	81 60       	ori	r24, 0x01	; 1
    4a16:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    4a18:	80 81       	ld	r24, Z
    4a1a:	80 68       	ori	r24, 0x80	; 128
    4a1c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    4a1e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    4a22:	08 95       	ret

00004a24 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    4a24:	83 30       	cpi	r24, 0x03	; 3
    4a26:	81 f0       	breq	.+32     	; 0x4a48 <turnOffPWM+0x24>
    4a28:	28 f4       	brcc	.+10     	; 0x4a34 <turnOffPWM+0x10>
    4a2a:	81 30       	cpi	r24, 0x01	; 1
    4a2c:	99 f0       	breq	.+38     	; 0x4a54 <turnOffPWM+0x30>
    4a2e:	82 30       	cpi	r24, 0x02	; 2
    4a30:	a1 f0       	breq	.+40     	; 0x4a5a <turnOffPWM+0x36>
    4a32:	08 95       	ret
    4a34:	87 30       	cpi	r24, 0x07	; 7
    4a36:	a9 f0       	breq	.+42     	; 0x4a62 <turnOffPWM+0x3e>
    4a38:	88 30       	cpi	r24, 0x08	; 8
    4a3a:	b9 f0       	breq	.+46     	; 0x4a6a <turnOffPWM+0x46>
    4a3c:	84 30       	cpi	r24, 0x04	; 4
    4a3e:	d1 f4       	brne	.+52     	; 0x4a74 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4a40:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4a44:	8f 7d       	andi	r24, 0xDF	; 223
    4a46:	03 c0       	rjmp	.+6      	; 0x4a4e <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    4a48:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4a4c:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4a4e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4a52:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    4a54:	84 b5       	in	r24, 0x24	; 36
    4a56:	8f 77       	andi	r24, 0x7F	; 127
    4a58:	02 c0       	rjmp	.+4      	; 0x4a5e <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    4a5a:	84 b5       	in	r24, 0x24	; 36
    4a5c:	8f 7d       	andi	r24, 0xDF	; 223
    4a5e:	84 bd       	out	0x24, r24	; 36
    4a60:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    4a62:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    4a66:	8f 77       	andi	r24, 0x7F	; 127
    4a68:	03 c0       	rjmp	.+6      	; 0x4a70 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    4a6a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    4a6e:	8f 7d       	andi	r24, 0xDF	; 223
    4a70:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    4a74:	08 95       	ret

00004a76 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    4a76:	cf 93       	push	r28
    4a78:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    4a7a:	90 e0       	ldi	r25, 0x00	; 0
    4a7c:	fc 01       	movw	r30, r24
    4a7e:	e6 53       	subi	r30, 0x36	; 54
    4a80:	fe 4e       	sbci	r31, 0xEE	; 238
    4a82:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    4a84:	fc 01       	movw	r30, r24
    4a86:	e2 52       	subi	r30, 0x22	; 34
    4a88:	fe 4e       	sbci	r31, 0xEE	; 238
    4a8a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    4a8c:	88 23       	and	r24, r24
    4a8e:	61 f1       	breq	.+88     	; 0x4ae8 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    4a90:	90 e0       	ldi	r25, 0x00	; 0
    4a92:	88 0f       	add	r24, r24
    4a94:	99 1f       	adc	r25, r25
    4a96:	fc 01       	movw	r30, r24
    4a98:	e4 50       	subi	r30, 0x04	; 4
    4a9a:	fe 4e       	sbci	r31, 0xEE	; 238
    4a9c:	c5 91       	lpm	r28, Z+
    4a9e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    4aa0:	fc 01       	movw	r30, r24
    4aa2:	ee 50       	subi	r30, 0x0E	; 14
    4aa4:	fe 4e       	sbci	r31, 0xEE	; 238
    4aa6:	a5 91       	lpm	r26, Z+
    4aa8:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    4aaa:	61 11       	cpse	r22, r1
    4aac:	09 c0       	rjmp	.+18     	; 0x4ac0 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    4aae:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4ab0:	f8 94       	cli
		*reg &= ~bit;
    4ab2:	88 81       	ld	r24, Y
    4ab4:	20 95       	com	r18
    4ab6:	82 23       	and	r24, r18
    4ab8:	88 83       	st	Y, r24
		*out &= ~bit;
    4aba:	ec 91       	ld	r30, X
    4abc:	2e 23       	and	r18, r30
    4abe:	0b c0       	rjmp	.+22     	; 0x4ad6 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    4ac0:	62 30       	cpi	r22, 0x02	; 2
    4ac2:	61 f4       	brne	.+24     	; 0x4adc <pinMode+0x66>
		uint8_t oldSREG = SREG;
    4ac4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4ac6:	f8 94       	cli
		*reg &= ~bit;
    4ac8:	38 81       	ld	r19, Y
    4aca:	82 2f       	mov	r24, r18
    4acc:	80 95       	com	r24
    4ace:	83 23       	and	r24, r19
    4ad0:	88 83       	st	Y, r24
		*out |= bit;
    4ad2:	ec 91       	ld	r30, X
    4ad4:	2e 2b       	or	r18, r30
    4ad6:	2c 93       	st	X, r18
		SREG = oldSREG;
    4ad8:	9f bf       	out	0x3f, r25	; 63
    4ada:	06 c0       	rjmp	.+12     	; 0x4ae8 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    4adc:	8f b7       	in	r24, 0x3f	; 63
                cli();
    4ade:	f8 94       	cli
		*reg |= bit;
    4ae0:	e8 81       	ld	r30, Y
    4ae2:	2e 2b       	or	r18, r30
    4ae4:	28 83       	st	Y, r18
		SREG = oldSREG;
    4ae6:	8f bf       	out	0x3f, r24	; 63
	}
}
    4ae8:	df 91       	pop	r29
    4aea:	cf 91       	pop	r28
    4aec:	08 95       	ret

00004aee <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    4aee:	1f 93       	push	r17
    4af0:	cf 93       	push	r28
    4af2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    4af4:	28 2f       	mov	r18, r24
    4af6:	30 e0       	ldi	r19, 0x00	; 0
    4af8:	f9 01       	movw	r30, r18
    4afa:	ea 54       	subi	r30, 0x4A	; 74
    4afc:	fe 4e       	sbci	r31, 0xEE	; 238
    4afe:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    4b00:	f9 01       	movw	r30, r18
    4b02:	e6 53       	subi	r30, 0x36	; 54
    4b04:	fe 4e       	sbci	r31, 0xEE	; 238
    4b06:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    4b08:	f9 01       	movw	r30, r18
    4b0a:	e2 52       	subi	r30, 0x22	; 34
    4b0c:	fe 4e       	sbci	r31, 0xEE	; 238
    4b0e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    4b10:	cc 23       	and	r28, r28
    4b12:	c9 f0       	breq	.+50     	; 0x4b46 <digitalWrite+0x58>
    4b14:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4b16:	81 11       	cpse	r24, r1
    4b18:	0e 94 12 25 	call	0x4a24	; 0x4a24 <turnOffPWM>

	out = portOutputRegister(port);
    4b1c:	ec 2f       	mov	r30, r28
    4b1e:	f0 e0       	ldi	r31, 0x00	; 0
    4b20:	ee 0f       	add	r30, r30
    4b22:	ff 1f       	adc	r31, r31
    4b24:	ee 50       	subi	r30, 0x0E	; 14
    4b26:	fe 4e       	sbci	r31, 0xEE	; 238
    4b28:	a5 91       	lpm	r26, Z+
    4b2a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    4b2c:	8f b7       	in	r24, 0x3f	; 63
	cli();
    4b2e:	f8 94       	cli

	if (val == LOW) {
    4b30:	11 11       	cpse	r17, r1
    4b32:	05 c0       	rjmp	.+10     	; 0x4b3e <digitalWrite+0x50>
		*out &= ~bit;
    4b34:	9c 91       	ld	r25, X
    4b36:	ed 2f       	mov	r30, r29
    4b38:	e0 95       	com	r30
    4b3a:	e9 23       	and	r30, r25
    4b3c:	02 c0       	rjmp	.+4      	; 0x4b42 <digitalWrite+0x54>
	} else {
		*out |= bit;
    4b3e:	ec 91       	ld	r30, X
    4b40:	ed 2b       	or	r30, r29
    4b42:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    4b44:	8f bf       	out	0x3f, r24	; 63
}
    4b46:	df 91       	pop	r29
    4b48:	cf 91       	pop	r28
    4b4a:	1f 91       	pop	r17
    4b4c:	08 95       	ret

00004b4e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    4b4e:	08 95       	ret

00004b50 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4b50:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <twi_state>
    4b54:	81 e0       	ldi	r24, 0x01	; 1
    4b56:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <twi_sendStop>
    4b5a:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <twi_inRepStart>
    4b5e:	61 e0       	ldi	r22, 0x01	; 1
    4b60:	82 e1       	ldi	r24, 0x12	; 18
    4b62:	0e 94 77 25 	call	0x4aee	; 0x4aee <digitalWrite>
    4b66:	61 e0       	ldi	r22, 0x01	; 1
    4b68:	83 e1       	ldi	r24, 0x13	; 19
    4b6a:	0e 94 77 25 	call	0x4aee	; 0x4aee <digitalWrite>
    4b6e:	e9 eb       	ldi	r30, 0xB9	; 185
    4b70:	f0 e0       	ldi	r31, 0x00	; 0
    4b72:	80 81       	ld	r24, Z
    4b74:	8e 7f       	andi	r24, 0xFE	; 254
    4b76:	80 83       	st	Z, r24
    4b78:	80 81       	ld	r24, Z
    4b7a:	8d 7f       	andi	r24, 0xFD	; 253
    4b7c:	80 83       	st	Z, r24
    4b7e:	88 e4       	ldi	r24, 0x48	; 72
    4b80:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    4b84:	85 e4       	ldi	r24, 0x45	; 69
    4b86:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4b8a:	08 95       	ret

00004b8c <twi_readFrom>:
    4b8c:	41 32       	cpi	r20, 0x21	; 33
    4b8e:	08 f0       	brcs	.+2      	; 0x4b92 <twi_readFrom+0x6>
    4b90:	43 c0       	rjmp	.+134    	; 0x4c18 <twi_readFrom+0x8c>
    4b92:	90 91 fe 02 	lds	r25, 0x02FE	; 0x8002fe <twi_state>
    4b96:	91 11       	cpse	r25, r1
    4b98:	fc cf       	rjmp	.-8      	; 0x4b92 <twi_readFrom+0x6>
    4b9a:	91 e0       	ldi	r25, 0x01	; 1
    4b9c:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <twi_state>
    4ba0:	20 93 fc 02 	sts	0x02FC, r18	; 0x8002fc <twi_sendStop>
    4ba4:	2f ef       	ldi	r18, 0xFF	; 255
    4ba6:	20 93 91 02 	sts	0x0291, r18	; 0x800291 <twi_error>
    4baa:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <twi_masterBufferIndex>
    4bae:	24 0f       	add	r18, r20
    4bb0:	20 93 d5 02 	sts	0x02D5, r18	; 0x8002d5 <twi_masterBufferLength>
    4bb4:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <twi_slarw>
    4bb8:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <twi_slarw>
    4bbc:	88 0f       	add	r24, r24
    4bbe:	89 2b       	or	r24, r25
    4bc0:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <twi_slarw>
    4bc4:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <twi_inRepStart>
    4bc8:	81 30       	cpi	r24, 0x01	; 1
    4bca:	61 f4       	brne	.+24     	; 0x4be4 <twi_readFrom+0x58>
    4bcc:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <twi_inRepStart>
    4bd0:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <twi_slarw>
    4bd4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    4bd8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4bdc:	83 fd       	sbrc	r24, 3
    4bde:	f8 cf       	rjmp	.-16     	; 0x4bd0 <twi_readFrom+0x44>
    4be0:	85 ec       	ldi	r24, 0xC5	; 197
    4be2:	01 c0       	rjmp	.+2      	; 0x4be6 <twi_readFrom+0x5a>
    4be4:	85 ee       	ldi	r24, 0xE5	; 229
    4be6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4bea:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <twi_state>
    4bee:	81 30       	cpi	r24, 0x01	; 1
    4bf0:	e1 f3       	breq	.-8      	; 0x4bea <twi_readFrom+0x5e>
    4bf2:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <twi_masterBufferIndex>
    4bf6:	84 17       	cp	r24, r20
    4bf8:	10 f4       	brcc	.+4      	; 0x4bfe <twi_readFrom+0x72>
    4bfa:	40 91 d6 02 	lds	r20, 0x02D6	; 0x8002d6 <twi_masterBufferIndex>
    4bfe:	27 ed       	ldi	r18, 0xD7	; 215
    4c00:	32 e0       	ldi	r19, 0x02	; 2
    4c02:	fb 01       	movw	r30, r22
    4c04:	d9 01       	movw	r26, r18
    4c06:	8a 2f       	mov	r24, r26
    4c08:	82 1b       	sub	r24, r18
    4c0a:	84 17       	cp	r24, r20
    4c0c:	18 f4       	brcc	.+6      	; 0x4c14 <twi_readFrom+0x88>
    4c0e:	8d 91       	ld	r24, X+
    4c10:	81 93       	st	Z+, r24
    4c12:	f9 cf       	rjmp	.-14     	; 0x4c06 <twi_readFrom+0x7a>
    4c14:	84 2f       	mov	r24, r20
    4c16:	08 95       	ret
    4c18:	80 e0       	ldi	r24, 0x00	; 0
    4c1a:	08 95       	ret

00004c1c <twi_writeTo>:
    4c1c:	0f 93       	push	r16
    4c1e:	41 32       	cpi	r20, 0x21	; 33
    4c20:	08 f0       	brcs	.+2      	; 0x4c24 <twi_writeTo+0x8>
    4c22:	4a c0       	rjmp	.+148    	; 0x4cb8 <twi_writeTo+0x9c>
    4c24:	90 91 fe 02 	lds	r25, 0x02FE	; 0x8002fe <twi_state>
    4c28:	91 11       	cpse	r25, r1
    4c2a:	fc cf       	rjmp	.-8      	; 0x4c24 <twi_writeTo+0x8>
    4c2c:	32 e0       	ldi	r19, 0x02	; 2
    4c2e:	30 93 fe 02 	sts	0x02FE, r19	; 0x8002fe <twi_state>
    4c32:	00 93 fc 02 	sts	0x02FC, r16	; 0x8002fc <twi_sendStop>
    4c36:	3f ef       	ldi	r19, 0xFF	; 255
    4c38:	30 93 91 02 	sts	0x0291, r19	; 0x800291 <twi_error>
    4c3c:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <twi_masterBufferIndex>
    4c40:	40 93 d5 02 	sts	0x02D5, r20	; 0x8002d5 <twi_masterBufferLength>
    4c44:	fb 01       	movw	r30, r22
    4c46:	67 ed       	ldi	r22, 0xD7	; 215
    4c48:	72 e0       	ldi	r23, 0x02	; 2
    4c4a:	db 01       	movw	r26, r22
    4c4c:	3a 2f       	mov	r19, r26
    4c4e:	36 1b       	sub	r19, r22
    4c50:	34 17       	cp	r19, r20
    4c52:	18 f4       	brcc	.+6      	; 0x4c5a <twi_writeTo+0x3e>
    4c54:	31 91       	ld	r19, Z+
    4c56:	3d 93       	st	X+, r19
    4c58:	f9 cf       	rjmp	.-14     	; 0x4c4c <twi_writeTo+0x30>
    4c5a:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <twi_slarw>
    4c5e:	30 91 fd 02 	lds	r19, 0x02FD	; 0x8002fd <twi_slarw>
    4c62:	88 0f       	add	r24, r24
    4c64:	83 2b       	or	r24, r19
    4c66:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <twi_slarw>
    4c6a:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <twi_inRepStart>
    4c6e:	81 30       	cpi	r24, 0x01	; 1
    4c70:	61 f4       	brne	.+24     	; 0x4c8a <twi_writeTo+0x6e>
    4c72:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <twi_inRepStart>
    4c76:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <twi_slarw>
    4c7a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    4c7e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4c82:	83 fd       	sbrc	r24, 3
    4c84:	f8 cf       	rjmp	.-16     	; 0x4c76 <twi_writeTo+0x5a>
    4c86:	85 ec       	ldi	r24, 0xC5	; 197
    4c88:	01 c0       	rjmp	.+2      	; 0x4c8c <twi_writeTo+0x70>
    4c8a:	85 ee       	ldi	r24, 0xE5	; 229
    4c8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4c90:	22 23       	and	r18, r18
    4c92:	21 f0       	breq	.+8      	; 0x4c9c <twi_writeTo+0x80>
    4c94:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <twi_state>
    4c98:	82 30       	cpi	r24, 0x02	; 2
    4c9a:	d1 f3       	breq	.-12     	; 0x4c90 <twi_writeTo+0x74>
    4c9c:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <twi_error>
    4ca0:	8f 3f       	cpi	r24, 0xFF	; 255
    4ca2:	79 f0       	breq	.+30     	; 0x4cc2 <twi_writeTo+0xa6>
    4ca4:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <twi_error>
    4ca8:	80 32       	cpi	r24, 0x20	; 32
    4caa:	41 f0       	breq	.+16     	; 0x4cbc <twi_writeTo+0xa0>
    4cac:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <twi_error>
    4cb0:	80 33       	cpi	r24, 0x30	; 48
    4cb2:	31 f0       	breq	.+12     	; 0x4cc0 <twi_writeTo+0xa4>
    4cb4:	94 e0       	ldi	r25, 0x04	; 4
    4cb6:	05 c0       	rjmp	.+10     	; 0x4cc2 <twi_writeTo+0xa6>
    4cb8:	91 e0       	ldi	r25, 0x01	; 1
    4cba:	03 c0       	rjmp	.+6      	; 0x4cc2 <twi_writeTo+0xa6>
    4cbc:	92 e0       	ldi	r25, 0x02	; 2
    4cbe:	01 c0       	rjmp	.+2      	; 0x4cc2 <twi_writeTo+0xa6>
    4cc0:	93 e0       	ldi	r25, 0x03	; 3
    4cc2:	89 2f       	mov	r24, r25
    4cc4:	0f 91       	pop	r16
    4cc6:	08 95       	ret

00004cc8 <twi_transmit>:
    4cc8:	40 91 b3 02 	lds	r20, 0x02B3	; 0x8002b3 <twi_txBufferLength>
    4ccc:	26 2f       	mov	r18, r22
    4cce:	30 e0       	ldi	r19, 0x00	; 0
    4cd0:	24 0f       	add	r18, r20
    4cd2:	31 1d       	adc	r19, r1
    4cd4:	21 32       	cpi	r18, 0x21	; 33
    4cd6:	31 05       	cpc	r19, r1
    4cd8:	dc f4       	brge	.+54     	; 0x4d10 <twi_transmit+0x48>
    4cda:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <twi_state>
    4cde:	24 30       	cpi	r18, 0x04	; 4
    4ce0:	c9 f4       	brne	.+50     	; 0x4d14 <twi_transmit+0x4c>
    4ce2:	fc 01       	movw	r30, r24
    4ce4:	80 e0       	ldi	r24, 0x00	; 0
    4ce6:	90 e0       	ldi	r25, 0x00	; 0
    4ce8:	86 17       	cp	r24, r22
    4cea:	58 f4       	brcc	.+22     	; 0x4d02 <twi_transmit+0x3a>
    4cec:	30 91 b3 02 	lds	r19, 0x02B3	; 0x8002b3 <twi_txBufferLength>
    4cf0:	21 91       	ld	r18, Z+
    4cf2:	dc 01       	movw	r26, r24
    4cf4:	ab 54       	subi	r26, 0x4B	; 75
    4cf6:	bd 4f       	sbci	r27, 0xFD	; 253
    4cf8:	a3 0f       	add	r26, r19
    4cfa:	b1 1d       	adc	r27, r1
    4cfc:	2c 93       	st	X, r18
    4cfe:	01 96       	adiw	r24, 0x01	; 1
    4d00:	f3 cf       	rjmp	.-26     	; 0x4ce8 <twi_transmit+0x20>
    4d02:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <twi_txBufferLength>
    4d06:	68 0f       	add	r22, r24
    4d08:	60 93 b3 02 	sts	0x02B3, r22	; 0x8002b3 <twi_txBufferLength>
    4d0c:	80 e0       	ldi	r24, 0x00	; 0
    4d0e:	08 95       	ret
    4d10:	81 e0       	ldi	r24, 0x01	; 1
    4d12:	08 95       	ret
    4d14:	82 e0       	ldi	r24, 0x02	; 2
    4d16:	08 95       	ret

00004d18 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4d18:	85 ed       	ldi	r24, 0xD5	; 213
    4d1a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4d1e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4d22:	84 fd       	sbrc	r24, 4
    4d24:	fc cf       	rjmp	.-8      	; 0x4d1e <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    4d26:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <twi_state>
    4d2a:	08 95       	ret

00004d2c <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    4d2c:	85 ec       	ldi	r24, 0xC5	; 197
    4d2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    4d32:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <twi_state>
    4d36:	08 95       	ret

00004d38 <__vector_24>:
}

ISR(TWI_vect)
{
    4d38:	1f 92       	push	r1
    4d3a:	0f 92       	push	r0
    4d3c:	0f b6       	in	r0, 0x3f	; 63
    4d3e:	0f 92       	push	r0
    4d40:	11 24       	eor	r1, r1
    4d42:	2f 93       	push	r18
    4d44:	3f 93       	push	r19
    4d46:	4f 93       	push	r20
    4d48:	5f 93       	push	r21
    4d4a:	6f 93       	push	r22
    4d4c:	7f 93       	push	r23
    4d4e:	8f 93       	push	r24
    4d50:	9f 93       	push	r25
    4d52:	af 93       	push	r26
    4d54:	bf 93       	push	r27
    4d56:	ef 93       	push	r30
    4d58:	ff 93       	push	r31
  switch(TW_STATUS){
    4d5a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    4d5e:	88 7f       	andi	r24, 0xF8	; 248
    4d60:	80 36       	cpi	r24, 0x60	; 96
    4d62:	09 f4       	brne	.+2      	; 0x4d66 <__vector_24+0x2e>
    4d64:	9e c0       	rjmp	.+316    	; 0x4ea2 <__vector_24+0x16a>
    4d66:	78 f5       	brcc	.+94     	; 0x4dc6 <__vector_24+0x8e>
    4d68:	88 32       	cpi	r24, 0x28	; 40
    4d6a:	09 f4       	brne	.+2      	; 0x4d6e <__vector_24+0x36>
    4d6c:	5d c0       	rjmp	.+186    	; 0x4e28 <__vector_24+0xf0>
    4d6e:	90 f4       	brcc	.+36     	; 0x4d94 <__vector_24+0x5c>
    4d70:	80 31       	cpi	r24, 0x10	; 16
    4d72:	09 f4       	brne	.+2      	; 0x4d76 <__vector_24+0x3e>
    4d74:	56 c0       	rjmp	.+172    	; 0x4e22 <__vector_24+0xea>
    4d76:	38 f4       	brcc	.+14     	; 0x4d86 <__vector_24+0x4e>
    4d78:	88 23       	and	r24, r24
    4d7a:	09 f4       	brne	.+2      	; 0x4d7e <__vector_24+0x46>
    4d7c:	f5 c0       	rjmp	.+490    	; 0x4f68 <__vector_24+0x230>
    4d7e:	88 30       	cpi	r24, 0x08	; 8
    4d80:	09 f4       	brne	.+2      	; 0x4d84 <__vector_24+0x4c>
    4d82:	4f c0       	rjmp	.+158    	; 0x4e22 <__vector_24+0xea>
    4d84:	f5 c0       	rjmp	.+490    	; 0x4f70 <__vector_24+0x238>
    4d86:	88 31       	cpi	r24, 0x18	; 24
    4d88:	09 f4       	brne	.+2      	; 0x4d8c <__vector_24+0x54>
    4d8a:	4e c0       	rjmp	.+156    	; 0x4e28 <__vector_24+0xf0>
    4d8c:	80 32       	cpi	r24, 0x20	; 32
    4d8e:	09 f4       	brne	.+2      	; 0x4d92 <__vector_24+0x5a>
    4d90:	5f c0       	rjmp	.+190    	; 0x4e50 <__vector_24+0x118>
    4d92:	ee c0       	rjmp	.+476    	; 0x4f70 <__vector_24+0x238>
    4d94:	80 34       	cpi	r24, 0x40	; 64
    4d96:	09 f4       	brne	.+2      	; 0x4d9a <__vector_24+0x62>
    4d98:	6a c0       	rjmp	.+212    	; 0x4e6e <__vector_24+0x136>
    4d9a:	58 f4       	brcc	.+22     	; 0x4db2 <__vector_24+0x7a>
    4d9c:	80 33       	cpi	r24, 0x30	; 48
    4d9e:	09 f4       	brne	.+2      	; 0x4da2 <__vector_24+0x6a>
    4da0:	57 c0       	rjmp	.+174    	; 0x4e50 <__vector_24+0x118>
    4da2:	88 33       	cpi	r24, 0x38	; 56
    4da4:	09 f0       	breq	.+2      	; 0x4da8 <__vector_24+0x70>
    4da6:	e4 c0       	rjmp	.+456    	; 0x4f70 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4da8:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <twi_error>
      twi_releaseBus();
    4dac:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <twi_releaseBus>
      break;
    4db0:	df c0       	rjmp	.+446    	; 0x4f70 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4db2:	80 35       	cpi	r24, 0x50	; 80
    4db4:	09 f4       	brne	.+2      	; 0x4db8 <__vector_24+0x80>
    4db6:	4f c0       	rjmp	.+158    	; 0x4e56 <__vector_24+0x11e>
    4db8:	88 35       	cpi	r24, 0x58	; 88
    4dba:	09 f4       	brne	.+2      	; 0x4dbe <__vector_24+0x86>
    4dbc:	5d c0       	rjmp	.+186    	; 0x4e78 <__vector_24+0x140>
    4dbe:	88 34       	cpi	r24, 0x48	; 72
    4dc0:	09 f0       	breq	.+2      	; 0x4dc4 <__vector_24+0x8c>
    4dc2:	d6 c0       	rjmp	.+428    	; 0x4f70 <__vector_24+0x238>
    4dc4:	d3 c0       	rjmp	.+422    	; 0x4f6c <__vector_24+0x234>
    4dc6:	88 39       	cpi	r24, 0x98	; 152
    4dc8:	09 f4       	brne	.+2      	; 0x4dcc <__vector_24+0x94>
    4dca:	c4 c0       	rjmp	.+392    	; 0x4f54 <__vector_24+0x21c>
    4dcc:	a8 f4       	brcc	.+42     	; 0x4df8 <__vector_24+0xc0>
    4dce:	88 37       	cpi	r24, 0x78	; 120
    4dd0:	09 f4       	brne	.+2      	; 0x4dd4 <__vector_24+0x9c>
    4dd2:	67 c0       	rjmp	.+206    	; 0x4ea2 <__vector_24+0x16a>
    4dd4:	38 f4       	brcc	.+14     	; 0x4de4 <__vector_24+0xac>
    4dd6:	88 36       	cpi	r24, 0x68	; 104
    4dd8:	09 f4       	brne	.+2      	; 0x4ddc <__vector_24+0xa4>
    4dda:	63 c0       	rjmp	.+198    	; 0x4ea2 <__vector_24+0x16a>
    4ddc:	80 37       	cpi	r24, 0x70	; 112
    4dde:	09 f4       	brne	.+2      	; 0x4de2 <__vector_24+0xaa>
    4de0:	60 c0       	rjmp	.+192    	; 0x4ea2 <__vector_24+0x16a>
    4de2:	c6 c0       	rjmp	.+396    	; 0x4f70 <__vector_24+0x238>
    4de4:	88 38       	cpi	r24, 0x88	; 136
    4de6:	09 f4       	brne	.+2      	; 0x4dea <__vector_24+0xb2>
    4de8:	b5 c0       	rjmp	.+362    	; 0x4f54 <__vector_24+0x21c>
    4dea:	80 39       	cpi	r24, 0x90	; 144
    4dec:	09 f4       	brne	.+2      	; 0x4df0 <__vector_24+0xb8>
    4dee:	5f c0       	rjmp	.+190    	; 0x4eae <__vector_24+0x176>
    4df0:	80 38       	cpi	r24, 0x80	; 128
    4df2:	09 f0       	breq	.+2      	; 0x4df6 <__vector_24+0xbe>
    4df4:	bd c0       	rjmp	.+378    	; 0x4f70 <__vector_24+0x238>
    4df6:	5b c0       	rjmp	.+182    	; 0x4eae <__vector_24+0x176>
    4df8:	80 3b       	cpi	r24, 0xB0	; 176
    4dfa:	09 f4       	brne	.+2      	; 0x4dfe <__vector_24+0xc6>
    4dfc:	83 c0       	rjmp	.+262    	; 0x4f04 <__vector_24+0x1cc>
    4dfe:	38 f4       	brcc	.+14     	; 0x4e0e <__vector_24+0xd6>
    4e00:	80 3a       	cpi	r24, 0xA0	; 160
    4e02:	09 f4       	brne	.+2      	; 0x4e06 <__vector_24+0xce>
    4e04:	66 c0       	rjmp	.+204    	; 0x4ed2 <__vector_24+0x19a>
    4e06:	88 3a       	cpi	r24, 0xA8	; 168
    4e08:	09 f4       	brne	.+2      	; 0x4e0c <__vector_24+0xd4>
    4e0a:	7c c0       	rjmp	.+248    	; 0x4f04 <__vector_24+0x1cc>
    4e0c:	b1 c0       	rjmp	.+354    	; 0x4f70 <__vector_24+0x238>
    4e0e:	80 3c       	cpi	r24, 0xC0	; 192
    4e10:	09 f4       	brne	.+2      	; 0x4e14 <__vector_24+0xdc>
    4e12:	a4 c0       	rjmp	.+328    	; 0x4f5c <__vector_24+0x224>
    4e14:	88 3c       	cpi	r24, 0xC8	; 200
    4e16:	09 f4       	brne	.+2      	; 0x4e1a <__vector_24+0xe2>
    4e18:	a1 c0       	rjmp	.+322    	; 0x4f5c <__vector_24+0x224>
    4e1a:	88 3b       	cpi	r24, 0xB8	; 184
    4e1c:	09 f4       	brne	.+2      	; 0x4e20 <__vector_24+0xe8>
    4e1e:	87 c0       	rjmp	.+270    	; 0x4f2e <__vector_24+0x1f6>
    4e20:	a7 c0       	rjmp	.+334    	; 0x4f70 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4e22:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <twi_slarw>
    4e26:	10 c0       	rjmp	.+32     	; 0x4e48 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4e28:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <twi_masterBufferIndex>
    4e2c:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <twi_masterBufferLength>
    4e30:	98 17       	cp	r25, r24
    4e32:	70 f5       	brcc	.+92     	; 0x4e90 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4e34:	e0 91 d6 02 	lds	r30, 0x02D6	; 0x8002d6 <twi_masterBufferIndex>
    4e38:	81 e0       	ldi	r24, 0x01	; 1
    4e3a:	8e 0f       	add	r24, r30
    4e3c:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <twi_masterBufferIndex>
    4e40:	f0 e0       	ldi	r31, 0x00	; 0
    4e42:	e9 52       	subi	r30, 0x29	; 41
    4e44:	fd 4f       	sbci	r31, 0xFD	; 253
    4e46:	80 81       	ld	r24, Z
    4e48:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4e4c:	85 ec       	ldi	r24, 0xC5	; 197
    4e4e:	83 c0       	rjmp	.+262    	; 0x4f56 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4e50:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <twi_error>
    4e54:	8b c0       	rjmp	.+278    	; 0x4f6c <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4e56:	e0 91 d6 02 	lds	r30, 0x02D6	; 0x8002d6 <twi_masterBufferIndex>
    4e5a:	81 e0       	ldi	r24, 0x01	; 1
    4e5c:	8e 0f       	add	r24, r30
    4e5e:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <twi_masterBufferIndex>
    4e62:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    4e66:	f0 e0       	ldi	r31, 0x00	; 0
    4e68:	e9 52       	subi	r30, 0x29	; 41
    4e6a:	fd 4f       	sbci	r31, 0xFD	; 253
    4e6c:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4e6e:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <twi_masterBufferIndex>
    4e72:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <twi_masterBufferLength>
    4e76:	6b c0       	rjmp	.+214    	; 0x4f4e <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4e78:	e0 91 d6 02 	lds	r30, 0x02D6	; 0x8002d6 <twi_masterBufferIndex>
    4e7c:	81 e0       	ldi	r24, 0x01	; 1
    4e7e:	8e 0f       	add	r24, r30
    4e80:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <twi_masterBufferIndex>
    4e84:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    4e88:	f0 e0       	ldi	r31, 0x00	; 0
    4e8a:	e9 52       	subi	r30, 0x29	; 41
    4e8c:	fd 4f       	sbci	r31, 0xFD	; 253
    4e8e:	80 83       	st	Z, r24
	if (twi_sendStop)
    4e90:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <twi_sendStop>
    4e94:	81 11       	cpse	r24, r1
    4e96:	6a c0       	rjmp	.+212    	; 0x4f6c <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    4e98:	81 e0       	ldi	r24, 0x01	; 1
    4e9a:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4e9e:	84 ea       	ldi	r24, 0xA4	; 164
    4ea0:	5e c0       	rjmp	.+188    	; 0x4f5e <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4ea2:	83 e0       	ldi	r24, 0x03	; 3
    4ea4:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4ea8:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <twi_rxBufferIndex>
    4eac:	cf cf       	rjmp	.-98     	; 0x4e4c <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4eae:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <twi_rxBufferIndex>
    4eb2:	80 32       	cpi	r24, 0x20	; 32
    4eb4:	08 f0       	brcs	.+2      	; 0x4eb8 <__vector_24+0x180>
    4eb6:	4e c0       	rjmp	.+156    	; 0x4f54 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    4eb8:	e0 91 92 02 	lds	r30, 0x0292	; 0x800292 <twi_rxBufferIndex>
    4ebc:	81 e0       	ldi	r24, 0x01	; 1
    4ebe:	8e 0f       	add	r24, r30
    4ec0:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <twi_rxBufferIndex>
    4ec4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    4ec8:	f0 e0       	ldi	r31, 0x00	; 0
    4eca:	ed 56       	subi	r30, 0x6D	; 109
    4ecc:	fd 4f       	sbci	r31, 0xFD	; 253
    4ece:	80 83       	st	Z, r24
    4ed0:	bd cf       	rjmp	.-134    	; 0x4e4c <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    4ed2:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4ed6:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <twi_rxBufferIndex>
    4eda:	80 32       	cpi	r24, 0x20	; 32
    4edc:	30 f4       	brcc	.+12     	; 0x4eea <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4ede:	e0 91 92 02 	lds	r30, 0x0292	; 0x800292 <twi_rxBufferIndex>
    4ee2:	f0 e0       	ldi	r31, 0x00	; 0
    4ee4:	ed 56       	subi	r30, 0x6D	; 109
    4ee6:	fd 4f       	sbci	r31, 0xFD	; 253
    4ee8:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    4eea:	60 91 92 02 	lds	r22, 0x0292	; 0x800292 <twi_rxBufferIndex>
    4eee:	70 e0       	ldi	r23, 0x00	; 0
    4ef0:	e0 91 f7 02 	lds	r30, 0x02F7	; 0x8002f7 <twi_onSlaveReceive>
    4ef4:	f0 91 f8 02 	lds	r31, 0x02F8	; 0x8002f8 <twi_onSlaveReceive+0x1>
    4ef8:	83 e9       	ldi	r24, 0x93	; 147
    4efa:	92 e0       	ldi	r25, 0x02	; 2
    4efc:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4efe:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <twi_rxBufferIndex>
      break;
    4f02:	36 c0       	rjmp	.+108    	; 0x4f70 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4f04:	84 e0       	ldi	r24, 0x04	; 4
    4f06:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    4f0a:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4f0e:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4f12:	e0 91 f9 02 	lds	r30, 0x02F9	; 0x8002f9 <twi_onSlaveTransmit>
    4f16:	f0 91 fa 02 	lds	r31, 0x02FA	; 0x8002fa <twi_onSlaveTransmit+0x1>
    4f1a:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4f1c:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <twi_txBufferLength>
    4f20:	81 11       	cpse	r24, r1
    4f22:	05 c0       	rjmp	.+10     	; 0x4f2e <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    4f24:	81 e0       	ldi	r24, 0x01	; 1
    4f26:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    4f2a:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4f2e:	e0 91 b4 02 	lds	r30, 0x02B4	; 0x8002b4 <twi_txBufferIndex>
    4f32:	81 e0       	ldi	r24, 0x01	; 1
    4f34:	8e 0f       	add	r24, r30
    4f36:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <twi_txBufferIndex>
    4f3a:	f0 e0       	ldi	r31, 0x00	; 0
    4f3c:	eb 54       	subi	r30, 0x4B	; 75
    4f3e:	fd 4f       	sbci	r31, 0xFD	; 253
    4f40:	80 81       	ld	r24, Z
    4f42:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4f46:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <twi_txBufferIndex>
    4f4a:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <twi_txBufferLength>
    4f4e:	98 17       	cp	r25, r24
    4f50:	08 f4       	brcc	.+2      	; 0x4f54 <__vector_24+0x21c>
    4f52:	7c cf       	rjmp	.-264    	; 0x4e4c <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4f54:	85 e8       	ldi	r24, 0x85	; 133
    4f56:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4f5a:	0a c0       	rjmp	.+20     	; 0x4f70 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4f5c:	85 ec       	ldi	r24, 0xC5	; 197
    4f5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    4f62:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <twi_state>
      break;
    4f66:	04 c0       	rjmp	.+8      	; 0x4f70 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    4f68:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <twi_error>
      twi_stop();
    4f6c:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <twi_stop>
      break;
  }
}
    4f70:	ff 91       	pop	r31
    4f72:	ef 91       	pop	r30
    4f74:	bf 91       	pop	r27
    4f76:	af 91       	pop	r26
    4f78:	9f 91       	pop	r25
    4f7a:	8f 91       	pop	r24
    4f7c:	7f 91       	pop	r23
    4f7e:	6f 91       	pop	r22
    4f80:	5f 91       	pop	r21
    4f82:	4f 91       	pop	r20
    4f84:	3f 91       	pop	r19
    4f86:	2f 91       	pop	r18
    4f88:	0f 90       	pop	r0
    4f8a:	0f be       	out	0x3f, r0	; 63
    4f8c:	0f 90       	pop	r0
    4f8e:	1f 90       	pop	r1
    4f90:	18 95       	reti

00004f92 <__fixunssfsi>:
    4f92:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__fp_splitA>
    4f96:	88 f0       	brcs	.+34     	; 0x4fba <__fixunssfsi+0x28>
    4f98:	9f 57       	subi	r25, 0x7F	; 127
    4f9a:	98 f0       	brcs	.+38     	; 0x4fc2 <__fixunssfsi+0x30>
    4f9c:	b9 2f       	mov	r27, r25
    4f9e:	99 27       	eor	r25, r25
    4fa0:	b7 51       	subi	r27, 0x17	; 23
    4fa2:	b0 f0       	brcs	.+44     	; 0x4fd0 <__fixunssfsi+0x3e>
    4fa4:	e1 f0       	breq	.+56     	; 0x4fde <__fixunssfsi+0x4c>
    4fa6:	66 0f       	add	r22, r22
    4fa8:	77 1f       	adc	r23, r23
    4faa:	88 1f       	adc	r24, r24
    4fac:	99 1f       	adc	r25, r25
    4fae:	1a f0       	brmi	.+6      	; 0x4fb6 <__fixunssfsi+0x24>
    4fb0:	ba 95       	dec	r27
    4fb2:	c9 f7       	brne	.-14     	; 0x4fa6 <__fixunssfsi+0x14>
    4fb4:	14 c0       	rjmp	.+40     	; 0x4fde <__fixunssfsi+0x4c>
    4fb6:	b1 30       	cpi	r27, 0x01	; 1
    4fb8:	91 f0       	breq	.+36     	; 0x4fde <__fixunssfsi+0x4c>
    4fba:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__fp_zero>
    4fbe:	b1 e0       	ldi	r27, 0x01	; 1
    4fc0:	08 95       	ret
    4fc2:	0c 94 37 1e 	jmp	0x3c6e	; 0x3c6e <__fp_zero>
    4fc6:	67 2f       	mov	r22, r23
    4fc8:	78 2f       	mov	r23, r24
    4fca:	88 27       	eor	r24, r24
    4fcc:	b8 5f       	subi	r27, 0xF8	; 248
    4fce:	39 f0       	breq	.+14     	; 0x4fde <__fixunssfsi+0x4c>
    4fd0:	b9 3f       	cpi	r27, 0xF9	; 249
    4fd2:	cc f3       	brlt	.-14     	; 0x4fc6 <__fixunssfsi+0x34>
    4fd4:	86 95       	lsr	r24
    4fd6:	77 95       	ror	r23
    4fd8:	67 95       	ror	r22
    4fda:	b3 95       	inc	r27
    4fdc:	d9 f7       	brne	.-10     	; 0x4fd4 <__fixunssfsi+0x42>
    4fde:	3e f4       	brtc	.+14     	; 0x4fee <__fixunssfsi+0x5c>
    4fe0:	90 95       	com	r25
    4fe2:	80 95       	com	r24
    4fe4:	70 95       	com	r23
    4fe6:	61 95       	neg	r22
    4fe8:	7f 4f       	sbci	r23, 0xFF	; 255
    4fea:	8f 4f       	sbci	r24, 0xFF	; 255
    4fec:	9f 4f       	sbci	r25, 0xFF	; 255
    4fee:	08 95       	ret

00004ff0 <__unordsf2>:
    4ff0:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <__fp_cmp>
    4ff4:	88 0b       	sbc	r24, r24
    4ff6:	99 0b       	sbc	r25, r25
    4ff8:	08 95       	ret

00004ffa <__divmodhi4>:
    4ffa:	97 fb       	bst	r25, 7
    4ffc:	07 2e       	mov	r0, r23
    4ffe:	16 f4       	brtc	.+4      	; 0x5004 <__divmodhi4+0xa>
    5000:	00 94       	com	r0
    5002:	07 d0       	rcall	.+14     	; 0x5012 <__divmodhi4_neg1>
    5004:	77 fd       	sbrc	r23, 7
    5006:	09 d0       	rcall	.+18     	; 0x501a <__divmodhi4_neg2>
    5008:	0e 94 33 28 	call	0x5066	; 0x5066 <__udivmodhi4>
    500c:	07 fc       	sbrc	r0, 7
    500e:	05 d0       	rcall	.+10     	; 0x501a <__divmodhi4_neg2>
    5010:	3e f4       	brtc	.+14     	; 0x5020 <__divmodhi4_exit>

00005012 <__divmodhi4_neg1>:
    5012:	90 95       	com	r25
    5014:	81 95       	neg	r24
    5016:	9f 4f       	sbci	r25, 0xFF	; 255
    5018:	08 95       	ret

0000501a <__divmodhi4_neg2>:
    501a:	70 95       	com	r23
    501c:	61 95       	neg	r22
    501e:	7f 4f       	sbci	r23, 0xFF	; 255

00005020 <__divmodhi4_exit>:
    5020:	08 95       	ret

00005022 <__udivmodsi4>:
    5022:	a1 e2       	ldi	r26, 0x21	; 33
    5024:	1a 2e       	mov	r1, r26
    5026:	aa 1b       	sub	r26, r26
    5028:	bb 1b       	sub	r27, r27
    502a:	fd 01       	movw	r30, r26
    502c:	0d c0       	rjmp	.+26     	; 0x5048 <__udivmodsi4_ep>

0000502e <__udivmodsi4_loop>:
    502e:	aa 1f       	adc	r26, r26
    5030:	bb 1f       	adc	r27, r27
    5032:	ee 1f       	adc	r30, r30
    5034:	ff 1f       	adc	r31, r31
    5036:	a2 17       	cp	r26, r18
    5038:	b3 07       	cpc	r27, r19
    503a:	e4 07       	cpc	r30, r20
    503c:	f5 07       	cpc	r31, r21
    503e:	20 f0       	brcs	.+8      	; 0x5048 <__udivmodsi4_ep>
    5040:	a2 1b       	sub	r26, r18
    5042:	b3 0b       	sbc	r27, r19
    5044:	e4 0b       	sbc	r30, r20
    5046:	f5 0b       	sbc	r31, r21

00005048 <__udivmodsi4_ep>:
    5048:	66 1f       	adc	r22, r22
    504a:	77 1f       	adc	r23, r23
    504c:	88 1f       	adc	r24, r24
    504e:	99 1f       	adc	r25, r25
    5050:	1a 94       	dec	r1
    5052:	69 f7       	brne	.-38     	; 0x502e <__udivmodsi4_loop>
    5054:	60 95       	com	r22
    5056:	70 95       	com	r23
    5058:	80 95       	com	r24
    505a:	90 95       	com	r25
    505c:	9b 01       	movw	r18, r22
    505e:	ac 01       	movw	r20, r24
    5060:	bd 01       	movw	r22, r26
    5062:	cf 01       	movw	r24, r30
    5064:	08 95       	ret

00005066 <__udivmodhi4>:
    5066:	aa 1b       	sub	r26, r26
    5068:	bb 1b       	sub	r27, r27
    506a:	51 e1       	ldi	r21, 0x11	; 17
    506c:	07 c0       	rjmp	.+14     	; 0x507c <__udivmodhi4_ep>

0000506e <__udivmodhi4_loop>:
    506e:	aa 1f       	adc	r26, r26
    5070:	bb 1f       	adc	r27, r27
    5072:	a6 17       	cp	r26, r22
    5074:	b7 07       	cpc	r27, r23
    5076:	10 f0       	brcs	.+4      	; 0x507c <__udivmodhi4_ep>
    5078:	a6 1b       	sub	r26, r22
    507a:	b7 0b       	sbc	r27, r23

0000507c <__udivmodhi4_ep>:
    507c:	88 1f       	adc	r24, r24
    507e:	99 1f       	adc	r25, r25
    5080:	5a 95       	dec	r21
    5082:	a9 f7       	brne	.-22     	; 0x506e <__udivmodhi4_loop>
    5084:	80 95       	com	r24
    5086:	90 95       	com	r25
    5088:	bc 01       	movw	r22, r24
    508a:	cd 01       	movw	r24, r26
    508c:	08 95       	ret

0000508e <__tablejump2__>:
    508e:	ee 0f       	add	r30, r30
    5090:	ff 1f       	adc	r31, r31
    5092:	05 90       	lpm	r0, Z+
    5094:	f4 91       	lpm	r31, Z
    5096:	e0 2d       	mov	r30, r0
    5098:	09 94       	ijmp

0000509a <eeprom_read_byte>:
    509a:	f9 99       	sbic	0x1f, 1	; 31
    509c:	fe cf       	rjmp	.-4      	; 0x509a <eeprom_read_byte>
    509e:	92 bd       	out	0x22, r25	; 34
    50a0:	81 bd       	out	0x21, r24	; 33
    50a2:	f8 9a       	sbi	0x1f, 0	; 31
    50a4:	99 27       	eor	r25, r25
    50a6:	80 b5       	in	r24, 0x20	; 32
    50a8:	08 95       	ret

000050aa <eeprom_write_byte>:
    50aa:	26 2f       	mov	r18, r22

000050ac <eeprom_write_r18>:
    50ac:	f9 99       	sbic	0x1f, 1	; 31
    50ae:	fe cf       	rjmp	.-4      	; 0x50ac <eeprom_write_r18>
    50b0:	1f ba       	out	0x1f, r1	; 31
    50b2:	92 bd       	out	0x22, r25	; 34
    50b4:	81 bd       	out	0x21, r24	; 33
    50b6:	20 bd       	out	0x20, r18	; 32
    50b8:	0f b6       	in	r0, 0x3f	; 63
    50ba:	f8 94       	cli
    50bc:	fa 9a       	sbi	0x1f, 2	; 31
    50be:	f9 9a       	sbi	0x1f, 1	; 31
    50c0:	0f be       	out	0x3f, r0	; 63
    50c2:	01 96       	adiw	r24, 0x01	; 1
    50c4:	08 95       	ret

000050c6 <_exit>:
    50c6:	f8 94       	cli

000050c8 <__stop_program>:
    50c8:	ff cf       	rjmp	.-2      	; 0x50c8 <__stop_program>
