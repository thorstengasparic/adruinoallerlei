
AL-2PropBalance.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  00003610  000036a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003610  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000261  00800176  00800176  0000371a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000371a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000374c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000490  00000000  00000000  00003790  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bf11  00000000  00000000  00003c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021f3  00000000  00000000  0000fb31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003209  00000000  00000000  00011d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d70  00000000  00000000  00014f30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002ff4  00000000  00000000  00015ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000045af  00000000  00000000  00018c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f0  00000000  00000000  0001d243  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 81 00 	jmp	0x102	; 0x102 <__ctors_end>
       4:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
       8:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
       c:	0c 94 11 03 	jmp	0x622	; 0x622 <__vector_3>
      10:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      14:	0c 94 a4 02 	jmp	0x548	; 0x548 <__vector_5>
      18:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      1c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      20:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      24:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      28:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      2c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      30:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      34:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      38:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      3c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      40:	0c 94 58 16 	jmp	0x2cb0	; 0x2cb0 <__vector_16>
      44:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      48:	0c 94 3d 12 	jmp	0x247a	; 0x247a <__vector_18>
      4c:	0c 94 75 12 	jmp	0x24ea	; 0x24ea <__vector_19>
      50:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      54:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      58:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      5c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      60:	0c 94 2c 19 	jmp	0x3258	; 0x3258 <__vector_24>
      64:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      68:	03 6e       	ori	r16, 0xE3	; 227
      6a:	db 36       	cpi	r29, 0x6B	; 107
      6c:	3d 9a       	sbi	0x07, 5	; 7
      6e:	99 99       	sbic	0x13, 1	; 19
      70:	99 3d       	cpi	r25, 0xD9	; 217
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	3e 00       	.word	0x003e	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	07 2c       	mov	r0, r7
      7e:	7a a5       	ldd	r23, Y+42	; 0x2a
      80:	ba 6c       	ori	r27, 0xCA	; 202
      82:	c5 90       	lpm	r12, Z+
      84:	da 3b       	cpi	r29, 0xBA	; 186
      86:	93 65       	ori	r25, 0x53	; 83
      88:	fc 8b       	std	Y+20, r31	; 0x14
      8a:	bc 53       	subi	r27, 0x3C	; 60
      8c:	f8 10       	cpse	r15, r8
      8e:	fd 3c       	cpi	r31, 0xCD	; 205
      90:	56 92       	lac	Z, r5
      92:	83 4d       	sbci	r24, 0xD3	; 211
      94:	bd 87       	std	Y+13, r27	; 0x0d
      96:	9d 3a       	cpi	r25, 0xAD	; 173
      98:	b6 3d       	cpi	r27, 0xD6	; 214
      9a:	cb c9       	rjmp	.-3178   	; 0xfffff432 <__eeprom_end+0xff7ef432>
      9c:	bf 5b       	subi	r27, 0xBF	; 191
      9e:	be 73       	andi	r27, 0x3E	; 62
      a0:	da 0f       	add	r29, r26
      a2:	c9 3f       	cpi	r28, 0xF9	; 249

000000a4 <__trampolines_end>:
      a4:	00 00       	nop
      a6:	00 08       	sbc	r0, r0
      a8:	00 02       	muls	r16, r16
      aa:	01 00       	.word	0x0001	; ????
      ac:	00 03       	mulsu	r16, r16
      ae:	04 07       	cpc	r16, r20
	...

000000b8 <digital_pin_to_bit_mask_PGM>:
      b8:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      c8:	04 08 10 20                                         ... 

000000cc <digital_pin_to_port_PGM>:
      cc:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      dc:	03 03 03 03                                         ....

000000e0 <port_to_input_PGM>:
      e0:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ea <port_to_output_PGM>:
      ea:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000f4 <port_to_mode_PGM>:
      f4:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000fe <__ctors_start>:
      fe:	a5 12       	cpse	r10, r21
     100:	53 16       	cp	r5, r19

00000102 <__ctors_end>:
     102:	11 24       	eor	r1, r1
     104:	1f be       	out	0x3f, r1	; 63
     106:	cf ef       	ldi	r28, 0xFF	; 255
     108:	d8 e0       	ldi	r29, 0x08	; 8
     10a:	de bf       	out	0x3e, r29	; 62
     10c:	cd bf       	out	0x3d, r28	; 61

0000010e <__do_copy_data>:
     10e:	11 e0       	ldi	r17, 0x01	; 1
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b1 e0       	ldi	r27, 0x01	; 1
     114:	e0 e1       	ldi	r30, 0x10	; 16
     116:	f6 e3       	ldi	r31, 0x36	; 54
     118:	02 c0       	rjmp	.+4      	; 0x11e <__do_copy_data+0x10>
     11a:	05 90       	lpm	r0, Z+
     11c:	0d 92       	st	X+, r0
     11e:	a6 37       	cpi	r26, 0x76	; 118
     120:	b1 07       	cpc	r27, r17
     122:	d9 f7       	brne	.-10     	; 0x11a <__do_copy_data+0xc>

00000124 <__do_clear_bss>:
     124:	23 e0       	ldi	r18, 0x03	; 3
     126:	a6 e7       	ldi	r26, 0x76	; 118
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	01 c0       	rjmp	.+2      	; 0x12e <.do_clear_bss_start>

0000012c <.do_clear_bss_loop>:
     12c:	1d 92       	st	X+, r1

0000012e <.do_clear_bss_start>:
     12e:	a7 3d       	cpi	r26, 0xD7	; 215
     130:	b2 07       	cpc	r27, r18
     132:	e1 f7       	brne	.-8      	; 0x12c <.do_clear_bss_loop>

00000134 <__do_global_ctors>:
     134:	10 e0       	ldi	r17, 0x00	; 0
     136:	c1 e8       	ldi	r28, 0x81	; 129
     138:	d0 e0       	ldi	r29, 0x00	; 0
     13a:	04 c0       	rjmp	.+8      	; 0x144 <__do_global_ctors+0x10>
     13c:	21 97       	sbiw	r28, 0x01	; 1
     13e:	fe 01       	movw	r30, r28
     140:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__tablejump2__>
     144:	cf 37       	cpi	r28, 0x7F	; 127
     146:	d1 07       	cpc	r29, r17
     148:	c9 f7       	brne	.-14     	; 0x13c <__do_global_ctors+0x8>
     14a:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <main>
     14e:	0c 94 06 1b 	jmp	0x360c	; 0x360c <_exit>

00000152 <__bad_interrupt>:
     152:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000156 <_Z24convert_receiver_channelh.part.1>:
	byte channel, reverse;                                                       //First we declare some local variables
	int low, center, high, actual;
	int difference;

	if (function > 4) {
		return (receiver_input[function] -3000) * -1;
     156:	1f 93       	push	r17
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	e8 2f       	mov	r30, r24
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	ea 5b       	subi	r30, 0xBA	; 186
     162:	fd 4f       	sbci	r31, 0xFD	; 253
     164:	17 89       	ldd	r17, Z+23	; 0x17
     166:	e1 2f       	mov	r30, r17
     168:	e7 70       	andi	r30, 0x07	; 7
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	ee 0f       	add	r30, r30
     16e:	ff 1f       	adc	r31, r31
     170:	df 01       	movw	r26, r30
     172:	a8 5e       	subi	r26, 0xE8	; 232
     174:	bd 4f       	sbci	r27, 0xFD	; 253
     176:	0d 90       	ld	r0, X+
     178:	bc 91       	ld	r27, X
     17a:	a0 2d       	mov	r26, r0
     17c:	ea 5b       	subi	r30, 0xBA	; 186
     17e:	fd 4f       	sbci	r31, 0xFD	; 253
     180:	37 85       	ldd	r19, Z+15	; 0x0f
     182:	86 85       	ldd	r24, Z+14	; 0x0e
     184:	af 01       	movw	r20, r30
     186:	41 50       	subi	r20, 0x01	; 1
     188:	51 09       	sbc	r21, r1
     18a:	ea 01       	movw	r28, r20
     18c:	48 81       	ld	r20, Y
     18e:	50 e0       	ldi	r21, 0x00	; 0
     190:	54 2f       	mov	r21, r20
     192:	44 27       	eor	r20, r20
     194:	bf 01       	movw	r22, r30
     196:	62 50       	subi	r22, 0x02	; 2
     198:	71 09       	sbc	r23, r1
     19a:	eb 01       	movw	r28, r22
     19c:	98 81       	ld	r25, Y
     19e:	49 2b       	or	r20, r25
     1a0:	97 81       	ldd	r25, Z+7	; 0x07
     1a2:	26 81       	ldd	r18, Z+6	; 0x06
     1a4:	a4 17       	cp	r26, r20
     1a6:	b5 07       	cpc	r27, r21
     1a8:	dc f4       	brge	.+54     	; 0x1e0 <_Z24convert_receiver_channelh.part.1+0x8a>
     1aa:	e8 2f       	mov	r30, r24
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	f3 2b       	or	r31, r19
     1b0:	ae 17       	cp	r26, r30
     1b2:	bf 07       	cpc	r27, r31
     1b4:	0c f4       	brge	.+2      	; 0x1b8 <_Z24convert_receiver_channelh.part.1+0x62>
     1b6:	df 01       	movw	r26, r30
     1b8:	ca 01       	movw	r24, r20
     1ba:	8a 1b       	sub	r24, r26
     1bc:	9b 0b       	sbc	r25, r27
     1be:	dc 01       	movw	r26, r24
     1c0:	24 ef       	ldi	r18, 0xF4	; 244
     1c2:	31 e0       	ldi	r19, 0x01	; 1
     1c4:	0e 94 c3 1a 	call	0x3586	; 0x3586 <__usmulhisi3>
     1c8:	9a 01       	movw	r18, r20
     1ca:	2e 1b       	sub	r18, r30
     1cc:	3f 0b       	sbc	r19, r31
     1ce:	03 2e       	mov	r0, r19
     1d0:	00 0c       	add	r0, r0
     1d2:	44 0b       	sbc	r20, r20
     1d4:	55 0b       	sbc	r21, r21
     1d6:	0e 94 a4 1a 	call	0x3548	; 0x3548 <__divmodsi4>
     1da:	17 ff       	sbrs	r17, 7
     1dc:	1c c0       	rjmp	.+56     	; 0x216 <_Z24convert_receiver_channelh.part.1+0xc0>
     1de:	20 c0       	rjmp	.+64     	; 0x220 <_Z24convert_receiver_channelh.part.1+0xca>
     1e0:	4a 17       	cp	r20, r26
     1e2:	5b 07       	cpc	r21, r27
     1e4:	0c f5       	brge	.+66     	; 0x228 <_Z24convert_receiver_channelh.part.1+0xd2>
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	f9 01       	movw	r30, r18
     1ea:	f9 2b       	or	r31, r25
     1ec:	ea 17       	cp	r30, r26
     1ee:	fb 07       	cpc	r31, r27
     1f0:	0c f4       	brge	.+2      	; 0x1f4 <_Z24convert_receiver_channelh.part.1+0x9e>
     1f2:	df 01       	movw	r26, r30
     1f4:	a4 1b       	sub	r26, r20
     1f6:	b5 0b       	sbc	r27, r21
     1f8:	24 ef       	ldi	r18, 0xF4	; 244
     1fa:	31 e0       	ldi	r19, 0x01	; 1
     1fc:	0e 94 c3 1a 	call	0x3586	; 0x3586 <__usmulhisi3>
     200:	9f 01       	movw	r18, r30
     202:	24 1b       	sub	r18, r20
     204:	35 0b       	sbc	r19, r21
     206:	03 2e       	mov	r0, r19
     208:	00 0c       	add	r0, r0
     20a:	44 0b       	sbc	r20, r20
     20c:	55 0b       	sbc	r21, r21
     20e:	0e 94 a4 1a 	call	0x3548	; 0x3548 <__divmodsi4>
     212:	17 ff       	sbrs	r17, 7
     214:	05 c0       	rjmp	.+10     	; 0x220 <_Z24convert_receiver_channelh.part.1+0xca>
     216:	8c ed       	ldi	r24, 0xDC	; 220
     218:	95 e0       	ldi	r25, 0x05	; 5
     21a:	82 1b       	sub	r24, r18
     21c:	93 0b       	sbc	r25, r19
     21e:	06 c0       	rjmp	.+12     	; 0x22c <_Z24convert_receiver_channelh.part.1+0xd6>
     220:	c9 01       	movw	r24, r18
     222:	84 52       	subi	r24, 0x24	; 36
     224:	9a 4f       	sbci	r25, 0xFA	; 250
     226:	02 c0       	rjmp	.+4      	; 0x22c <_Z24convert_receiver_channelh.part.1+0xd6>
     228:	8c ed       	ldi	r24, 0xDC	; 220
     22a:	95 e0       	ldi	r25, 0x05	; 5
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	1f 91       	pop	r17
     232:	08 95       	ret

00000234 <_ZN7TwoWire5writeEi>:
     234:	dc 01       	movw	r26, r24
     236:	ed 91       	ld	r30, X+
     238:	fc 91       	ld	r31, X
     23a:	01 90       	ld	r0, Z+
     23c:	f0 81       	ld	r31, Z
     23e:	e0 2d       	mov	r30, r0
     240:	09 94       	ijmp

00000242 <_Z13PrintDebugMsgv>:
     242:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     246:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     24a:	89 2b       	or	r24, r25
     24c:	51 f4       	brne	.+20     	; 0x262 <_Z13PrintDebugMsgv+0x20>
     24e:	60 91 2a 02 	lds	r22, 0x022A	; 0x80022a <start>
     252:	70 91 2b 02 	lds	r23, 0x022B	; 0x80022b <start+0x1>
     256:	4a e0       	ldi	r20, 0x0A	; 10
     258:	50 e0       	ldi	r21, 0x00	; 0
     25a:	81 e7       	ldi	r24, 0x71	; 113
     25c:	92 e0       	ldi	r25, 0x02	; 2
     25e:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <_ZN5Print5printEii>
     262:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     266:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     26a:	02 97       	sbiw	r24, 0x02	; 2
     26c:	31 f4       	brne	.+12     	; 0x27a <_Z13PrintDebugMsgv+0x38>
     26e:	64 e4       	ldi	r22, 0x44	; 68
     270:	71 e0       	ldi	r23, 0x01	; 1
     272:	81 e7       	ldi	r24, 0x71	; 113
     274:	92 e0       	ldi	r25, 0x02	; 2
     276:	0e 94 11 13 	call	0x2622	; 0x2622 <_ZN5Print5printEPKc>
     27a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     27e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     282:	04 97       	sbiw	r24, 0x04	; 4
     284:	51 f4       	brne	.+20     	; 0x29a <_Z13PrintDebugMsgv+0x58>
     286:	60 91 30 02 	lds	r22, 0x0230	; 0x800230 <throttle>
     28a:	70 91 31 02 	lds	r23, 0x0231	; 0x800231 <throttle+0x1>
     28e:	4a e0       	ldi	r20, 0x0A	; 10
     290:	50 e0       	ldi	r21, 0x00	; 0
     292:	81 e7       	ldi	r24, 0x71	; 113
     294:	92 e0       	ldi	r25, 0x02	; 2
     296:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <_ZN5Print5printEii>
     29a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     29e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     2a2:	06 97       	sbiw	r24, 0x06	; 6
     2a4:	31 f4       	brne	.+12     	; 0x2b2 <_Z13PrintDebugMsgv+0x70>
     2a6:	62 e1       	ldi	r22, 0x12	; 18
     2a8:	71 e0       	ldi	r23, 0x01	; 1
     2aa:	81 e7       	ldi	r24, 0x71	; 113
     2ac:	92 e0       	ldi	r25, 0x02	; 2
     2ae:	0e 94 11 13 	call	0x2622	; 0x2622 <_ZN5Print5printEPKc>
     2b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     2b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     2ba:	08 97       	sbiw	r24, 0x08	; 8
     2bc:	71 f4       	brne	.+28     	; 0x2da <_Z13PrintDebugMsgv+0x98>
     2be:	40 91 7a 01 	lds	r20, 0x017A	; 0x80017a <angle_roll>
     2c2:	50 91 7b 01 	lds	r21, 0x017B	; 0x80017b <angle_roll+0x1>
     2c6:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <angle_roll+0x2>
     2ca:	70 91 7d 01 	lds	r23, 0x017D	; 0x80017d <angle_roll+0x3>
     2ce:	22 e0       	ldi	r18, 0x02	; 2
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	81 e7       	ldi	r24, 0x71	; 113
     2d4:	92 e0       	ldi	r25, 0x02	; 2
     2d6:	0e 94 12 15 	call	0x2a24	; 0x2a24 <_ZN5Print5printEdi>
     2da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     2de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     2e2:	0a 97       	sbiw	r24, 0x0a	; 10
     2e4:	31 f4       	brne	.+12     	; 0x2f2 <_Z13PrintDebugMsgv+0xb0>
     2e6:	68 e1       	ldi	r22, 0x18	; 24
     2e8:	71 e0       	ldi	r23, 0x01	; 1
     2ea:	81 e7       	ldi	r24, 0x71	; 113
     2ec:	92 e0       	ldi	r25, 0x02	; 2
     2ee:	0e 94 11 13 	call	0x2622	; 0x2622 <_ZN5Print5printEPKc>
     2f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     2f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     2fa:	0c 97       	sbiw	r24, 0x0c	; 12
     2fc:	71 f4       	brne	.+28     	; 0x31a <_Z13PrintDebugMsgv+0xd8>
     2fe:	40 91 7e 01 	lds	r20, 0x017E	; 0x80017e <angle_roll_acc>
     302:	50 91 7f 01 	lds	r21, 0x017F	; 0x80017f <angle_roll_acc+0x1>
     306:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <angle_roll_acc+0x2>
     30a:	70 91 81 01 	lds	r23, 0x0181	; 0x800181 <angle_roll_acc+0x3>
     30e:	22 e0       	ldi	r18, 0x02	; 2
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	81 e7       	ldi	r24, 0x71	; 113
     314:	92 e0       	ldi	r25, 0x02	; 2
     316:	0e 94 12 15 	call	0x2a24	; 0x2a24 <_ZN5Print5printEdi>
     31a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     31e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     322:	0e 97       	sbiw	r24, 0x0e	; 14
     324:	31 f4       	brne	.+12     	; 0x332 <_Z13PrintDebugMsgv+0xf0>
     326:	6e e1       	ldi	r22, 0x1E	; 30
     328:	71 e0       	ldi	r23, 0x01	; 1
     32a:	81 e7       	ldi	r24, 0x71	; 113
     32c:	92 e0       	ldi	r25, 0x02	; 2
     32e:	0e 94 11 13 	call	0x2622	; 0x2622 <_ZN5Print5printEPKc>
     332:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     336:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     33a:	40 97       	sbiw	r24, 0x10	; 16
     33c:	71 f4       	brne	.+28     	; 0x35a <_Z13PrintDebugMsgv+0x118>
     33e:	40 91 8e 01 	lds	r20, 0x018E	; 0x80018e <pid_roll_setpoint>
     342:	50 91 8f 01 	lds	r21, 0x018F	; 0x80018f <pid_roll_setpoint+0x1>
     346:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <pid_roll_setpoint+0x2>
     34a:	70 91 91 01 	lds	r23, 0x0191	; 0x800191 <pid_roll_setpoint+0x3>
     34e:	22 e0       	ldi	r18, 0x02	; 2
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	81 e7       	ldi	r24, 0x71	; 113
     354:	92 e0       	ldi	r25, 0x02	; 2
     356:	0e 94 12 15 	call	0x2a24	; 0x2a24 <_ZN5Print5printEdi>
     35a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     35e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     362:	42 97       	sbiw	r24, 0x12	; 18
     364:	31 f4       	brne	.+12     	; 0x372 <_Z13PrintDebugMsgv+0x130>
     366:	64 e2       	ldi	r22, 0x24	; 36
     368:	71 e0       	ldi	r23, 0x01	; 1
     36a:	81 e7       	ldi	r24, 0x71	; 113
     36c:	92 e0       	ldi	r25, 0x02	; 2
     36e:	0e 94 11 13 	call	0x2622	; 0x2622 <_ZN5Print5printEPKc>
     372:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     376:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     37a:	44 97       	sbiw	r24, 0x14	; 20
     37c:	71 f4       	brne	.+28     	; 0x39a <_Z13PrintDebugMsgv+0x158>
     37e:	40 91 8a 01 	lds	r20, 0x018A	; 0x80018a <gyro_roll_input>
     382:	50 91 8b 01 	lds	r21, 0x018B	; 0x80018b <gyro_roll_input+0x1>
     386:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <gyro_roll_input+0x2>
     38a:	70 91 8d 01 	lds	r23, 0x018D	; 0x80018d <gyro_roll_input+0x3>
     38e:	22 e0       	ldi	r18, 0x02	; 2
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	81 e7       	ldi	r24, 0x71	; 113
     394:	92 e0       	ldi	r25, 0x02	; 2
     396:	0e 94 12 15 	call	0x2a24	; 0x2a24 <_ZN5Print5printEdi>
     39a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     39e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     3a2:	46 97       	sbiw	r24, 0x16	; 22
     3a4:	31 f4       	brne	.+12     	; 0x3b2 <_Z13PrintDebugMsgv+0x170>
     3a6:	6a e2       	ldi	r22, 0x2A	; 42
     3a8:	71 e0       	ldi	r23, 0x01	; 1
     3aa:	81 e7       	ldi	r24, 0x71	; 113
     3ac:	92 e0       	ldi	r25, 0x02	; 2
     3ae:	0e 94 11 13 	call	0x2622	; 0x2622 <_ZN5Print5printEPKc>
     3b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     3b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     3ba:	48 97       	sbiw	r24, 0x18	; 24
     3bc:	81 f4       	brne	.+32     	; 0x3de <_Z13PrintDebugMsgv+0x19c>
     3be:	60 91 32 02 	lds	r22, 0x0232	; 0x800232 <esc_4>
     3c2:	70 91 33 02 	lds	r23, 0x0233	; 0x800233 <esc_4+0x1>
     3c6:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <esc_1>
     3ca:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <esc_1+0x1>
     3ce:	68 1b       	sub	r22, r24
     3d0:	79 0b       	sbc	r23, r25
     3d2:	4a e0       	ldi	r20, 0x0A	; 10
     3d4:	50 e0       	ldi	r21, 0x00	; 0
     3d6:	81 e7       	ldi	r24, 0x71	; 113
     3d8:	92 e0       	ldi	r25, 0x02	; 2
     3da:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <_ZN5Print5printEii>
     3de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     3e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     3e6:	4a 97       	sbiw	r24, 0x1a	; 26
     3e8:	31 f4       	brne	.+12     	; 0x3f6 <_Z13PrintDebugMsgv+0x1b4>
     3ea:	61 e3       	ldi	r22, 0x31	; 49
     3ec:	71 e0       	ldi	r23, 0x01	; 1
     3ee:	81 e7       	ldi	r24, 0x71	; 113
     3f0:	92 e0       	ldi	r25, 0x02	; 2
     3f2:	0e 94 11 13 	call	0x2622	; 0x2622 <_ZN5Print5printEPKc>
     3f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     3fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     3fe:	4c 97       	sbiw	r24, 0x1c	; 28
     400:	d1 f4       	brne	.+52     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     402:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <pid_error_temp>
     406:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <pid_error_temp+0x1>
     40a:	40 91 98 01 	lds	r20, 0x0198	; 0x800198 <pid_error_temp+0x2>
     40e:	50 91 99 01 	lds	r21, 0x0199	; 0x800199 <pid_error_temp+0x3>
     412:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <pid_p_gain_roll>
     416:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <pid_p_gain_roll+0x1>
     41a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <pid_p_gain_roll+0x2>
     41e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <pid_p_gain_roll+0x3>
     422:	0e 94 38 10 	call	0x2070	; 0x2070 <__mulsf3>
     426:	ab 01       	movw	r20, r22
     428:	bc 01       	movw	r22, r24
     42a:	22 e0       	ldi	r18, 0x02	; 2
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	81 e7       	ldi	r24, 0x71	; 113
     430:	92 e0       	ldi	r25, 0x02	; 2
     432:	0e 94 12 15 	call	0x2a24	; 0x2a24 <_ZN5Print5printEdi>
     436:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     43a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     43e:	4e 97       	sbiw	r24, 0x1e	; 30
     440:	31 f4       	brne	.+12     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     442:	66 e3       	ldi	r22, 0x36	; 54
     444:	71 e0       	ldi	r23, 0x01	; 1
     446:	81 e7       	ldi	r24, 0x71	; 113
     448:	92 e0       	ldi	r25, 0x02	; 2
     44a:	0e 94 11 13 	call	0x2622	; 0x2622 <_ZN5Print5printEPKc>
     44e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     452:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     456:	80 97       	sbiw	r24, 0x20	; 32
     458:	71 f4       	brne	.+28     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     45a:	40 91 92 01 	lds	r20, 0x0192	; 0x800192 <pid_i_mem_roll>
     45e:	50 91 93 01 	lds	r21, 0x0193	; 0x800193 <pid_i_mem_roll+0x1>
     462:	60 91 94 01 	lds	r22, 0x0194	; 0x800194 <pid_i_mem_roll+0x2>
     466:	70 91 95 01 	lds	r23, 0x0195	; 0x800195 <pid_i_mem_roll+0x3>
     46a:	22 e0       	ldi	r18, 0x02	; 2
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	81 e7       	ldi	r24, 0x71	; 113
     470:	92 e0       	ldi	r25, 0x02	; 2
     472:	0e 94 12 15 	call	0x2a24	; 0x2a24 <_ZN5Print5printEdi>
     476:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     47a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     47e:	82 97       	sbiw	r24, 0x22	; 34
     480:	31 f4       	brne	.+12     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     482:	6b e3       	ldi	r22, 0x3B	; 59
     484:	71 e0       	ldi	r23, 0x01	; 1
     486:	81 e7       	ldi	r24, 0x71	; 113
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	0e 94 11 13 	call	0x2622	; 0x2622 <_ZN5Print5printEPKc>
     48e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     492:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     496:	84 97       	sbiw	r24, 0x24	; 36
     498:	21 f5       	brne	.+72     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
     49a:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <pid_last_roll_d_error>
     49e:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <pid_last_roll_d_error+0x1>
     4a2:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <pid_last_roll_d_error+0x2>
     4a6:	50 91 85 01 	lds	r21, 0x0185	; 0x800185 <pid_last_roll_d_error+0x3>
     4aa:	60 91 96 01 	lds	r22, 0x0196	; 0x800196 <pid_error_temp>
     4ae:	70 91 97 01 	lds	r23, 0x0197	; 0x800197 <pid_error_temp+0x1>
     4b2:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <pid_error_temp+0x2>
     4b6:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <pid_error_temp+0x3>
     4ba:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__subsf3>
     4be:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <pid_d_gain_roll>
     4c2:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <pid_d_gain_roll+0x1>
     4c6:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <pid_d_gain_roll+0x2>
     4ca:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <pid_d_gain_roll+0x3>
     4ce:	0e 94 38 10 	call	0x2070	; 0x2070 <__mulsf3>
     4d2:	ab 01       	movw	r20, r22
     4d4:	bc 01       	movw	r22, r24
     4d6:	22 e0       	ldi	r18, 0x02	; 2
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	81 e7       	ldi	r24, 0x71	; 113
     4dc:	92 e0       	ldi	r25, 0x02	; 2
     4de:	0e 94 12 15 	call	0x2a24	; 0x2a24 <_ZN5Print5printEdi>
     4e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     4e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     4ea:	86 97       	sbiw	r24, 0x26	; 38
     4ec:	31 f4       	brne	.+12     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     4ee:	60 e4       	ldi	r22, 0x40	; 64
     4f0:	71 e0       	ldi	r23, 0x01	; 1
     4f2:	81 e7       	ldi	r24, 0x71	; 113
     4f4:	92 e0       	ldi	r25, 0x02	; 2
     4f6:	0e 94 11 13 	call	0x2622	; 0x2622 <_ZN5Print5printEPKc>
     4fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     4fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     502:	88 97       	sbiw	r24, 0x28	; 40
     504:	51 f4       	brne	.+20     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
     506:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <receiver_input_channel_6>
     50a:	70 91 3b 02 	lds	r23, 0x023B	; 0x80023b <receiver_input_channel_6+0x1>
     50e:	4a e0       	ldi	r20, 0x0A	; 10
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	81 e7       	ldi	r24, 0x71	; 113
     514:	92 e0       	ldi	r25, 0x02	; 2
     516:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <_ZN5Print5printEii>
     51a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     51e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     522:	01 96       	adiw	r24, 0x01	; 1
     524:	84 36       	cpi	r24, 0x64	; 100
     526:	91 05       	cpc	r25, r1
     528:	29 f0       	breq	.+10     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
     52a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     52e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     532:	08 95       	ret
     534:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
     538:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     53c:	68 e5       	ldi	r22, 0x58	; 88
     53e:	71 e0       	ldi	r23, 0x01	; 1
     540:	81 e7       	ldi	r24, 0x71	; 113
     542:	92 e0       	ldi	r25, 0x02	; 2
     544:	0c 94 3b 13 	jmp	0x2676	; 0x2676 <_ZN5Print7printlnEPKc>

00000548 <__vector_5>:
     548:	1f 92       	push	r1
     54a:	0f 92       	push	r0
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	0f 92       	push	r0
     550:	11 24       	eor	r1, r1
     552:	2f 93       	push	r18
     554:	3f 93       	push	r19
     556:	4f 93       	push	r20
     558:	5f 93       	push	r21
     55a:	6f 93       	push	r22
     55c:	7f 93       	push	r23
     55e:	8f 93       	push	r24
     560:	9f 93       	push	r25
     562:	af 93       	push	r26
     564:	bf 93       	push	r27
     566:	ef 93       	push	r30
     568:	ff 93       	push	r31
     56a:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <micros>
     56e:	60 93 ba 01 	sts	0x01BA, r22	; 0x8001ba <current_timeV2>
     572:	70 93 bb 01 	sts	0x01BB, r23	; 0x8001bb <current_timeV2+0x1>
     576:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <current_timeV2+0x2>
     57a:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <current_timeV2+0x3>
     57e:	20 91 6b 02 	lds	r18, 0x026B	; 0x80026b <last_channel_6>
     582:	4a 9b       	sbis	0x09, 2	; 9
     584:	0e c0       	rjmp	.+28     	; 0x5a2 <__vector_5+0x5a>
     586:	21 11       	cpse	r18, r1
     588:	1b c0       	rjmp	.+54     	; 0x5c0 <__vector_5+0x78>
     58a:	21 e0       	ldi	r18, 0x01	; 1
     58c:	20 93 6b 02 	sts	0x026B, r18	; 0x80026b <last_channel_6>
     590:	60 93 c6 01 	sts	0x01C6, r22	; 0x8001c6 <timer_6>
     594:	70 93 c7 01 	sts	0x01C7, r23	; 0x8001c7 <timer_6+0x1>
     598:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <timer_6+0x2>
     59c:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <timer_6+0x3>
     5a0:	0f c0       	rjmp	.+30     	; 0x5c0 <__vector_5+0x78>
     5a2:	21 30       	cpi	r18, 0x01	; 1
     5a4:	69 f4       	brne	.+26     	; 0x5c0 <__vector_5+0x78>
     5a6:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <last_channel_6>
     5aa:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <timer_6>
     5ae:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <timer_6+0x1>
     5b2:	ab 01       	movw	r20, r22
     5b4:	42 1b       	sub	r20, r18
     5b6:	53 0b       	sbc	r21, r19
     5b8:	50 93 25 02 	sts	0x0225, r21	; 0x800225 <receiver_input+0xd>
     5bc:	40 93 24 02 	sts	0x0224, r20	; 0x800224 <receiver_input+0xc>
     5c0:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <last_channel_7>
     5c4:	4b 9b       	sbis	0x09, 3	; 9
     5c6:	0e c0       	rjmp	.+28     	; 0x5e4 <__vector_5+0x9c>
     5c8:	21 11       	cpse	r18, r1
     5ca:	1a c0       	rjmp	.+52     	; 0x600 <__vector_5+0xb8>
     5cc:	21 e0       	ldi	r18, 0x01	; 1
     5ce:	20 93 6a 02 	sts	0x026A, r18	; 0x80026a <last_channel_7>
     5d2:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <timer_7>
     5d6:	70 93 c3 01 	sts	0x01C3, r23	; 0x8001c3 <timer_7+0x1>
     5da:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <timer_7+0x2>
     5de:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <timer_7+0x3>
     5e2:	0e c0       	rjmp	.+28     	; 0x600 <__vector_5+0xb8>
     5e4:	21 30       	cpi	r18, 0x01	; 1
     5e6:	61 f4       	brne	.+24     	; 0x600 <__vector_5+0xb8>
     5e8:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <last_channel_7>
     5ec:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <timer_7>
     5f0:	30 91 c3 01 	lds	r19, 0x01C3	; 0x8001c3 <timer_7+0x1>
     5f4:	62 1b       	sub	r22, r18
     5f6:	73 0b       	sbc	r23, r19
     5f8:	70 93 27 02 	sts	0x0227, r23	; 0x800227 <receiver_input+0xf>
     5fc:	60 93 26 02 	sts	0x0226, r22	; 0x800226 <receiver_input+0xe>
     600:	ff 91       	pop	r31
     602:	ef 91       	pop	r30
     604:	bf 91       	pop	r27
     606:	af 91       	pop	r26
     608:	9f 91       	pop	r25
     60a:	8f 91       	pop	r24
     60c:	7f 91       	pop	r23
     60e:	6f 91       	pop	r22
     610:	5f 91       	pop	r21
     612:	4f 91       	pop	r20
     614:	3f 91       	pop	r19
     616:	2f 91       	pop	r18
     618:	0f 90       	pop	r0
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	0f 90       	pop	r0
     61e:	1f 90       	pop	r1
     620:	18 95       	reti

00000622 <__vector_3>:
     622:	1f 92       	push	r1
     624:	0f 92       	push	r0
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	0f 92       	push	r0
     62a:	11 24       	eor	r1, r1
     62c:	2f 93       	push	r18
     62e:	3f 93       	push	r19
     630:	4f 93       	push	r20
     632:	5f 93       	push	r21
     634:	6f 93       	push	r22
     636:	7f 93       	push	r23
     638:	8f 93       	push	r24
     63a:	9f 93       	push	r25
     63c:	af 93       	push	r26
     63e:	bf 93       	push	r27
     640:	ef 93       	push	r30
     642:	ff 93       	push	r31
     644:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <micros>
     648:	60 93 be 01 	sts	0x01BE, r22	; 0x8001be <current_timeV1>
     64c:	70 93 bf 01 	sts	0x01BF, r23	; 0x8001bf <current_timeV1+0x1>
     650:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <current_timeV1+0x2>
     654:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <current_timeV1+0x3>
     658:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <last_channel_1>
     65c:	18 9b       	sbis	0x03, 0	; 3
     65e:	0e c0       	rjmp	.+28     	; 0x67c <__vector_3+0x5a>
     660:	21 11       	cpse	r18, r1
     662:	1b c0       	rjmp	.+54     	; 0x69a <__vector_3+0x78>
     664:	21 e0       	ldi	r18, 0x01	; 1
     666:	20 93 70 02 	sts	0x0270, r18	; 0x800270 <last_channel_1>
     66a:	60 93 da 01 	sts	0x01DA, r22	; 0x8001da <timer_1>
     66e:	70 93 db 01 	sts	0x01DB, r23	; 0x8001db <timer_1+0x1>
     672:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <timer_1+0x2>
     676:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <timer_1+0x3>
     67a:	0f c0       	rjmp	.+30     	; 0x69a <__vector_3+0x78>
     67c:	21 30       	cpi	r18, 0x01	; 1
     67e:	69 f4       	brne	.+26     	; 0x69a <__vector_3+0x78>
     680:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <last_channel_1>
     684:	20 91 da 01 	lds	r18, 0x01DA	; 0x8001da <timer_1>
     688:	30 91 db 01 	lds	r19, 0x01DB	; 0x8001db <timer_1+0x1>
     68c:	ab 01       	movw	r20, r22
     68e:	42 1b       	sub	r20, r18
     690:	53 0b       	sbc	r21, r19
     692:	50 93 1b 02 	sts	0x021B, r21	; 0x80021b <receiver_input+0x3>
     696:	40 93 1a 02 	sts	0x021A, r20	; 0x80021a <receiver_input+0x2>
     69a:	20 91 6f 02 	lds	r18, 0x026F	; 0x80026f <last_channel_2>
     69e:	19 9b       	sbis	0x03, 1	; 3
     6a0:	0e c0       	rjmp	.+28     	; 0x6be <__vector_3+0x9c>
     6a2:	21 11       	cpse	r18, r1
     6a4:	1b c0       	rjmp	.+54     	; 0x6dc <__vector_3+0xba>
     6a6:	21 e0       	ldi	r18, 0x01	; 1
     6a8:	20 93 6f 02 	sts	0x026F, r18	; 0x80026f <last_channel_2>
     6ac:	60 93 d6 01 	sts	0x01D6, r22	; 0x8001d6 <timer_2>
     6b0:	70 93 d7 01 	sts	0x01D7, r23	; 0x8001d7 <timer_2+0x1>
     6b4:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <timer_2+0x2>
     6b8:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <timer_2+0x3>
     6bc:	0f c0       	rjmp	.+30     	; 0x6dc <__vector_3+0xba>
     6be:	21 30       	cpi	r18, 0x01	; 1
     6c0:	69 f4       	brne	.+26     	; 0x6dc <__vector_3+0xba>
     6c2:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <last_channel_2>
     6c6:	20 91 d6 01 	lds	r18, 0x01D6	; 0x8001d6 <timer_2>
     6ca:	30 91 d7 01 	lds	r19, 0x01D7	; 0x8001d7 <timer_2+0x1>
     6ce:	ab 01       	movw	r20, r22
     6d0:	42 1b       	sub	r20, r18
     6d2:	53 0b       	sbc	r21, r19
     6d4:	50 93 1d 02 	sts	0x021D, r21	; 0x80021d <receiver_input+0x5>
     6d8:	40 93 1c 02 	sts	0x021C, r20	; 0x80021c <receiver_input+0x4>
     6dc:	20 91 6e 02 	lds	r18, 0x026E	; 0x80026e <last_channel_3>
     6e0:	1a 9b       	sbis	0x03, 2	; 3
     6e2:	0e c0       	rjmp	.+28     	; 0x700 <__vector_3+0xde>
     6e4:	21 11       	cpse	r18, r1
     6e6:	1b c0       	rjmp	.+54     	; 0x71e <__vector_3+0xfc>
     6e8:	21 e0       	ldi	r18, 0x01	; 1
     6ea:	20 93 6e 02 	sts	0x026E, r18	; 0x80026e <last_channel_3>
     6ee:	60 93 d2 01 	sts	0x01D2, r22	; 0x8001d2 <timer_3>
     6f2:	70 93 d3 01 	sts	0x01D3, r23	; 0x8001d3 <timer_3+0x1>
     6f6:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <timer_3+0x2>
     6fa:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <timer_3+0x3>
     6fe:	0f c0       	rjmp	.+30     	; 0x71e <__vector_3+0xfc>
     700:	21 30       	cpi	r18, 0x01	; 1
     702:	69 f4       	brne	.+26     	; 0x71e <__vector_3+0xfc>
     704:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <last_channel_3>
     708:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <timer_3>
     70c:	30 91 d3 01 	lds	r19, 0x01D3	; 0x8001d3 <timer_3+0x1>
     710:	ab 01       	movw	r20, r22
     712:	42 1b       	sub	r20, r18
     714:	53 0b       	sbc	r21, r19
     716:	50 93 1f 02 	sts	0x021F, r21	; 0x80021f <receiver_input+0x7>
     71a:	40 93 1e 02 	sts	0x021E, r20	; 0x80021e <receiver_input+0x6>
     71e:	20 91 6d 02 	lds	r18, 0x026D	; 0x80026d <last_channel_4>
     722:	1b 9b       	sbis	0x03, 3	; 3
     724:	0e c0       	rjmp	.+28     	; 0x742 <__vector_3+0x120>
     726:	21 11       	cpse	r18, r1
     728:	1b c0       	rjmp	.+54     	; 0x760 <__vector_3+0x13e>
     72a:	21 e0       	ldi	r18, 0x01	; 1
     72c:	20 93 6d 02 	sts	0x026D, r18	; 0x80026d <last_channel_4>
     730:	60 93 ce 01 	sts	0x01CE, r22	; 0x8001ce <timer_4>
     734:	70 93 cf 01 	sts	0x01CF, r23	; 0x8001cf <timer_4+0x1>
     738:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <timer_4+0x2>
     73c:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <timer_4+0x3>
     740:	0f c0       	rjmp	.+30     	; 0x760 <__vector_3+0x13e>
     742:	21 30       	cpi	r18, 0x01	; 1
     744:	69 f4       	brne	.+26     	; 0x760 <__vector_3+0x13e>
     746:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <last_channel_4>
     74a:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <timer_4>
     74e:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <timer_4+0x1>
     752:	ab 01       	movw	r20, r22
     754:	42 1b       	sub	r20, r18
     756:	53 0b       	sbc	r21, r19
     758:	50 93 21 02 	sts	0x0221, r21	; 0x800221 <receiver_input+0x9>
     75c:	40 93 20 02 	sts	0x0220, r20	; 0x800220 <receiver_input+0x8>
     760:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <last_channel_5>
     764:	1c 9b       	sbis	0x03, 4	; 3
     766:	0e c0       	rjmp	.+28     	; 0x784 <__vector_3+0x162>
     768:	21 11       	cpse	r18, r1
     76a:	1a c0       	rjmp	.+52     	; 0x7a0 <__vector_3+0x17e>
     76c:	21 e0       	ldi	r18, 0x01	; 1
     76e:	20 93 6c 02 	sts	0x026C, r18	; 0x80026c <last_channel_5>
     772:	60 93 ca 01 	sts	0x01CA, r22	; 0x8001ca <timer_5>
     776:	70 93 cb 01 	sts	0x01CB, r23	; 0x8001cb <timer_5+0x1>
     77a:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <timer_5+0x2>
     77e:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <timer_5+0x3>
     782:	0e c0       	rjmp	.+28     	; 0x7a0 <__vector_3+0x17e>
     784:	21 30       	cpi	r18, 0x01	; 1
     786:	61 f4       	brne	.+24     	; 0x7a0 <__vector_3+0x17e>
     788:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <last_channel_5>
     78c:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <timer_5>
     790:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <timer_5+0x1>
     794:	62 1b       	sub	r22, r18
     796:	73 0b       	sbc	r23, r19
     798:	70 93 23 02 	sts	0x0223, r23	; 0x800223 <receiver_input+0xb>
     79c:	60 93 22 02 	sts	0x0222, r22	; 0x800222 <receiver_input+0xa>
     7a0:	ff 91       	pop	r31
     7a2:	ef 91       	pop	r30
     7a4:	bf 91       	pop	r27
     7a6:	af 91       	pop	r26
     7a8:	9f 91       	pop	r25
     7aa:	8f 91       	pop	r24
     7ac:	7f 91       	pop	r23
     7ae:	6f 91       	pop	r22
     7b0:	5f 91       	pop	r21
     7b2:	4f 91       	pop	r20
     7b4:	3f 91       	pop	r19
     7b6:	2f 91       	pop	r18
     7b8:	0f 90       	pop	r0
     7ba:	0f be       	out	0x3f, r0	; 63
     7bc:	0f 90       	pop	r0
     7be:	1f 90       	pop	r1
     7c0:	18 95       	reti

000007c2 <_Z13calculate_pidv>:
     7c2:	4f 92       	push	r4
     7c4:	5f 92       	push	r5
     7c6:	6f 92       	push	r6
     7c8:	7f 92       	push	r7
     7ca:	8f 92       	push	r8
     7cc:	9f 92       	push	r9
     7ce:	af 92       	push	r10
     7d0:	bf 92       	push	r11
     7d2:	cf 92       	push	r12
     7d4:	df 92       	push	r13
     7d6:	ef 92       	push	r14
     7d8:	ff 92       	push	r15
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	00 d0       	rcall	.+0      	; 0x7e0 <_Z13calculate_pidv+0x1e>
     7e0:	00 d0       	rcall	.+0      	; 0x7e2 <_Z13calculate_pidv+0x20>
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <_Z13calculate_pidv+0x22>
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <pid_roll_setpoint>
     7ec:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <pid_roll_setpoint+0x1>
     7f0:	40 91 90 01 	lds	r20, 0x0190	; 0x800190 <pid_roll_setpoint+0x2>
     7f4:	50 91 91 01 	lds	r21, 0x0191	; 0x800191 <pid_roll_setpoint+0x3>
     7f8:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <gyro_roll_input>
     7fc:	70 91 8b 01 	lds	r23, 0x018B	; 0x80018b <gyro_roll_input+0x1>
     800:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <gyro_roll_input+0x2>
     804:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <gyro_roll_input+0x3>
     808:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__subsf3>
     80c:	6b 01       	movw	r12, r22
     80e:	7c 01       	movw	r14, r24
     810:	60 93 96 01 	sts	0x0196, r22	; 0x800196 <pid_error_temp>
     814:	70 93 97 01 	sts	0x0197, r23	; 0x800197 <pid_error_temp+0x1>
     818:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <pid_error_temp+0x2>
     81c:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <pid_error_temp+0x3>
     820:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <pid_i_gain_roll>
     824:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <pid_i_gain_roll+0x1>
     828:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <pid_i_gain_roll+0x2>
     82c:	50 91 0c 01 	lds	r21, 0x010C	; 0x80010c <pid_i_gain_roll+0x3>
     830:	0e 94 38 10 	call	0x2070	; 0x2070 <__mulsf3>
     834:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <pid_i_mem_roll>
     838:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <pid_i_mem_roll+0x1>
     83c:	40 91 94 01 	lds	r20, 0x0194	; 0x800194 <pid_i_mem_roll+0x2>
     840:	50 91 95 01 	lds	r21, 0x0195	; 0x800195 <pid_i_mem_roll+0x3>
     844:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__addsf3>
     848:	2b 01       	movw	r4, r22
     84a:	3c 01       	movw	r6, r24
     84c:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <pid_i_mem_roll>
     850:	70 93 93 01 	sts	0x0193, r23	; 0x800193 <pid_i_mem_roll+0x1>
     854:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <pid_i_mem_roll+0x2>
     858:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <pid_i_mem_roll+0x3>
     85c:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <pid_max_roll>
     860:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <pid_max_roll+0x1>
     864:	3e 83       	std	Y+6, r19	; 0x06
     866:	2d 83       	std	Y+5, r18	; 0x05
     868:	b9 01       	movw	r22, r18
     86a:	33 0f       	add	r19, r19
     86c:	88 0b       	sbc	r24, r24
     86e:	99 0b       	sbc	r25, r25
     870:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatsisf>
     874:	4b 01       	movw	r8, r22
     876:	5c 01       	movw	r10, r24
     878:	9b 01       	movw	r18, r22
     87a:	ac 01       	movw	r20, r24
     87c:	c3 01       	movw	r24, r6
     87e:	b2 01       	movw	r22, r4
     880:	0e 94 33 10 	call	0x2066	; 0x2066 <__gesf2>
     884:	18 16       	cp	r1, r24
     886:	4c f4       	brge	.+18     	; 0x89a <_Z13calculate_pidv+0xd8>
     888:	80 92 92 01 	sts	0x0192, r8	; 0x800192 <pid_i_mem_roll>
     88c:	90 92 93 01 	sts	0x0193, r9	; 0x800193 <pid_i_mem_roll+0x1>
     890:	a0 92 94 01 	sts	0x0194, r10	; 0x800194 <pid_i_mem_roll+0x2>
     894:	b0 92 95 01 	sts	0x0195, r11	; 0x800195 <pid_i_mem_roll+0x3>
     898:	23 c0       	rjmp	.+70     	; 0x8e0 <_Z13calculate_pidv+0x11e>
     89a:	6d 81       	ldd	r22, Y+5	; 0x05
     89c:	7e 81       	ldd	r23, Y+6	; 0x06
     89e:	71 95       	neg	r23
     8a0:	61 95       	neg	r22
     8a2:	71 09       	sbc	r23, r1
     8a4:	07 2e       	mov	r0, r23
     8a6:	00 0c       	add	r0, r0
     8a8:	88 0b       	sbc	r24, r24
     8aa:	99 0b       	sbc	r25, r25
     8ac:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatsisf>
     8b0:	69 83       	std	Y+1, r22	; 0x01
     8b2:	7a 83       	std	Y+2, r23	; 0x02
     8b4:	8b 83       	std	Y+3, r24	; 0x03
     8b6:	9c 83       	std	Y+4, r25	; 0x04
     8b8:	9b 01       	movw	r18, r22
     8ba:	ac 01       	movw	r20, r24
     8bc:	c3 01       	movw	r24, r6
     8be:	b2 01       	movw	r22, r4
     8c0:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__cmpsf2>
     8c4:	87 ff       	sbrs	r24, 7
     8c6:	0c c0       	rjmp	.+24     	; 0x8e0 <_Z13calculate_pidv+0x11e>
     8c8:	89 81       	ldd	r24, Y+1	; 0x01
     8ca:	9a 81       	ldd	r25, Y+2	; 0x02
     8cc:	ab 81       	ldd	r26, Y+3	; 0x03
     8ce:	bc 81       	ldd	r27, Y+4	; 0x04
     8d0:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <pid_i_mem_roll>
     8d4:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <pid_i_mem_roll+0x1>
     8d8:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <pid_i_mem_roll+0x2>
     8dc:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <pid_i_mem_roll+0x3>
     8e0:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <pid_p_gain_roll>
     8e4:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <pid_p_gain_roll+0x1>
     8e8:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <pid_p_gain_roll+0x2>
     8ec:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <pid_p_gain_roll+0x3>
     8f0:	c7 01       	movw	r24, r14
     8f2:	b6 01       	movw	r22, r12
     8f4:	0e 94 38 10 	call	0x2070	; 0x2070 <__mulsf3>
     8f8:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <pid_i_mem_roll>
     8fc:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <pid_i_mem_roll+0x1>
     900:	40 91 94 01 	lds	r20, 0x0194	; 0x800194 <pid_i_mem_roll+0x2>
     904:	50 91 95 01 	lds	r21, 0x0195	; 0x800195 <pid_i_mem_roll+0x3>
     908:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__addsf3>
     90c:	2b 01       	movw	r4, r22
     90e:	3c 01       	movw	r6, r24
     910:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <pid_last_roll_d_error>
     914:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <pid_last_roll_d_error+0x1>
     918:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <pid_last_roll_d_error+0x2>
     91c:	50 91 85 01 	lds	r21, 0x0185	; 0x800185 <pid_last_roll_d_error+0x3>
     920:	c7 01       	movw	r24, r14
     922:	b6 01       	movw	r22, r12
     924:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__subsf3>
     928:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <pid_d_gain_roll>
     92c:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <pid_d_gain_roll+0x1>
     930:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <pid_d_gain_roll+0x2>
     934:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <pid_d_gain_roll+0x3>
     938:	0e 94 38 10 	call	0x2070	; 0x2070 <__mulsf3>
     93c:	9b 01       	movw	r18, r22
     93e:	ac 01       	movw	r20, r24
     940:	c3 01       	movw	r24, r6
     942:	b2 01       	movw	r22, r4
     944:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__addsf3>
     948:	2b 01       	movw	r4, r22
     94a:	3c 01       	movw	r6, r24
     94c:	9b 01       	movw	r18, r22
     94e:	ac 01       	movw	r20, r24
     950:	c5 01       	movw	r24, r10
     952:	b4 01       	movw	r22, r8
     954:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__cmpsf2>
     958:	87 fd       	sbrc	r24, 7
     95a:	1e c0       	rjmp	.+60     	; 0x998 <__stack+0x99>
     95c:	6d 81       	ldd	r22, Y+5	; 0x05
     95e:	7e 81       	ldd	r23, Y+6	; 0x06
     960:	71 95       	neg	r23
     962:	61 95       	neg	r22
     964:	71 09       	sbc	r23, r1
     966:	07 2e       	mov	r0, r23
     968:	00 0c       	add	r0, r0
     96a:	88 0b       	sbc	r24, r24
     96c:	99 0b       	sbc	r25, r25
     96e:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatsisf>
     972:	4b 01       	movw	r8, r22
     974:	5c 01       	movw	r10, r24
     976:	9b 01       	movw	r18, r22
     978:	ac 01       	movw	r20, r24
     97a:	c3 01       	movw	r24, r6
     97c:	b2 01       	movw	r22, r4
     97e:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__cmpsf2>
     982:	87 fd       	sbrc	r24, 7
     984:	09 c0       	rjmp	.+18     	; 0x998 <__stack+0x99>
     986:	40 92 86 01 	sts	0x0186, r4	; 0x800186 <pid_output_roll>
     98a:	50 92 87 01 	sts	0x0187, r5	; 0x800187 <pid_output_roll+0x1>
     98e:	60 92 88 01 	sts	0x0188, r6	; 0x800188 <pid_output_roll+0x2>
     992:	70 92 89 01 	sts	0x0189, r7	; 0x800189 <pid_output_roll+0x3>
     996:	08 c0       	rjmp	.+16     	; 0x9a8 <__stack+0xa9>
     998:	80 92 86 01 	sts	0x0186, r8	; 0x800186 <pid_output_roll>
     99c:	90 92 87 01 	sts	0x0187, r9	; 0x800187 <pid_output_roll+0x1>
     9a0:	a0 92 88 01 	sts	0x0188, r10	; 0x800188 <pid_output_roll+0x2>
     9a4:	b0 92 89 01 	sts	0x0189, r11	; 0x800189 <pid_output_roll+0x3>
     9a8:	c0 92 82 01 	sts	0x0182, r12	; 0x800182 <pid_last_roll_d_error>
     9ac:	d0 92 83 01 	sts	0x0183, r13	; 0x800183 <pid_last_roll_d_error+0x1>
     9b0:	e0 92 84 01 	sts	0x0184, r14	; 0x800184 <pid_last_roll_d_error+0x2>
     9b4:	f0 92 85 01 	sts	0x0185, r15	; 0x800185 <pid_last_roll_d_error+0x3>
     9b8:	26 96       	adiw	r28, 0x06	; 6
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	f8 94       	cli
     9be:	de bf       	out	0x3e, r29	; 62
     9c0:	0f be       	out	0x3f, r0	; 63
     9c2:	cd bf       	out	0x3d, r28	; 61
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	ff 90       	pop	r15
     9ca:	ef 90       	pop	r14
     9cc:	df 90       	pop	r13
     9ce:	cf 90       	pop	r12
     9d0:	bf 90       	pop	r11
     9d2:	af 90       	pop	r10
     9d4:	9f 90       	pop	r9
     9d6:	8f 90       	pop	r8
     9d8:	7f 90       	pop	r7
     9da:	6f 90       	pop	r6
     9dc:	5f 90       	pop	r5
     9de:	4f 90       	pop	r4
     9e0:	08 95       	ret

000009e2 <_Z8GyroReadv>:
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Subroutine for reading the gyro
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GyroRead(){
     9e2:	bf 92       	push	r11
     9e4:	cf 92       	push	r12
     9e6:	df 92       	push	r13
     9e8:	ef 92       	push	r14
     9ea:	ff 92       	push	r15
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
	//Read the MPU-6050
	if(eeprom_data[31] == 1){
     9f4:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <eeprom_data+0x1f>
     9f8:	81 30       	cpi	r24, 0x01	; 1
     9fa:	09 f0       	breq	.+2      	; 0x9fe <_Z8GyroReadv+0x1c>
     9fc:	d3 c0       	rjmp	.+422    	; 0xba4 <_Z8GyroReadv+0x1c2>
		Wire.beginTransmission(gyro_address);                                   //Start communication with the gyro.
     9fe:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <gyro_address>
     a02:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <gyro_address+0x1>
     a06:	8e e0       	ldi	r24, 0x0E	; 14
     a08:	93 e0       	ldi	r25, 0x03	; 3
     a0a:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(ACCEL_XOUT_H);                                            
     a0e:	6b e3       	ldi	r22, 0x3B	; 59
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	8e e0       	ldi	r24, 0x0E	; 14
     a14:	93 e0       	ldi	r25, 0x03	; 3
     a16:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                                 //End the transmission.
     a1a:	8e e0       	ldi	r24, 0x0E	; 14
     a1c:	93 e0       	ldi	r25, 0x03	; 3
     a1e:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <_ZN7TwoWire15endTransmissionEv>
		Wire.requestFrom(gyro_address,14);                                      //Request 14 bytes from the gyro.
     a22:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <gyro_address>
     a26:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <gyro_address+0x1>
     a2a:	4e e0       	ldi	r20, 0x0E	; 14
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	8e e0       	ldi	r24, 0x0E	; 14
     a30:	93 e0       	ldi	r25, 0x03	; 3
     a32:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <_ZN7TwoWire11requestFromEii>
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	0e 94 ab 00 	call	0x156	; 0x156 <_Z24convert_receiver_channelh.part.1>
		
		receiver_input_channel_1 = convert_receiver_channel(1);                 //Convert the actual receiver signals for pitch to the standard 1000 - 2000us.
     a3c:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <receiver_input_channel_1+0x1>
     a40:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <receiver_input_channel_1>
     a44:	82 e0       	ldi	r24, 0x02	; 2
     a46:	0e 94 ab 00 	call	0x156	; 0x156 <_Z24convert_receiver_channelh.part.1>
		receiver_input_channel_2 = convert_receiver_channel(2);                 //Convert the actual receiver signals for roll to the standard 1000 - 2000us.
     a4a:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <receiver_input_channel_2+0x1>
     a4e:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <receiver_input_channel_2>
     a52:	83 e0       	ldi	r24, 0x03	; 3
     a54:	0e 94 ab 00 	call	0x156	; 0x156 <_Z24convert_receiver_channelh.part.1>
		receiver_input_channel_3 = convert_receiver_channel(3);                 //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
     a58:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <receiver_input_channel_3+0x1>
     a5c:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <receiver_input_channel_3>
     a60:	84 e0       	ldi	r24, 0x04	; 4
     a62:	0e 94 ab 00 	call	0x156	; 0x156 <_Z24convert_receiver_channelh.part.1>
		receiver_input_channel_4 = convert_receiver_channel(4);                 //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
     a66:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <receiver_input_channel_4+0x1>
     a6a:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <receiver_input_channel_4>
	byte channel, reverse;                                                       //First we declare some local variables
	int low, center, high, actual;
	int difference;

	if (function > 4) {
		return (receiver_input[function] -3000) * -1;
     a6e:	88 eb       	ldi	r24, 0xB8	; 184
     a70:	9b e0       	ldi	r25, 0x0B	; 11
     a72:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <receiver_input+0xa>
     a76:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <receiver_input+0xb>
     a7a:	ac 01       	movw	r20, r24
     a7c:	42 1b       	sub	r20, r18
     a7e:	53 0b       	sbc	r21, r19
		
		receiver_input_channel_1 = convert_receiver_channel(1);                 //Convert the actual receiver signals for pitch to the standard 1000 - 2000us.
		receiver_input_channel_2 = convert_receiver_channel(2);                 //Convert the actual receiver signals for roll to the standard 1000 - 2000us.
		receiver_input_channel_3 = convert_receiver_channel(3);                 //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
		receiver_input_channel_4 = convert_receiver_channel(4);                 //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
		receiver_input_channel_5 = convert_receiver_channel(5);                 //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
     a80:	50 93 3d 02 	sts	0x023D, r21	; 0x80023d <receiver_input_channel_5+0x1>
     a84:	40 93 3c 02 	sts	0x023C, r20	; 0x80023c <receiver_input_channel_5>
	byte channel, reverse;                                                       //First we declare some local variables
	int low, center, high, actual;
	int difference;

	if (function > 4) {
		return (receiver_input[function] -3000) * -1;
     a88:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <receiver_input+0xc>
     a8c:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <receiver_input+0xd>
     a90:	82 1b       	sub	r24, r18
     a92:	93 0b       	sbc	r25, r19
		receiver_input_channel_1 = convert_receiver_channel(1);                 //Convert the actual receiver signals for pitch to the standard 1000 - 2000us.
		receiver_input_channel_2 = convert_receiver_channel(2);                 //Convert the actual receiver signals for roll to the standard 1000 - 2000us.
		receiver_input_channel_3 = convert_receiver_channel(3);                 //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
		receiver_input_channel_4 = convert_receiver_channel(4);                 //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
		receiver_input_channel_5 = convert_receiver_channel(5);                 //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
		receiver_input_channel_6 = convert_receiver_channel(6);                 //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
     a94:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <receiver_input_channel_6+0x1>
     a98:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <receiver_input_channel_6>
		
		
		while(Wire.available() < 14);                                           //Wait until the 14 bytes are received.
     a9c:	8e e0       	ldi	r24, 0x0E	; 14
     a9e:	93 e0       	ldi	r25, 0x03	; 3
     aa0:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <_ZN7TwoWire9availableEv>
     aa4:	0e 97       	sbiw	r24, 0x0e	; 14
     aa6:	d4 f3       	brlt	.-12     	; 0xa9c <_Z8GyroReadv+0xba>
		acc_axis[1] = Wire.read()<<8|Wire.read();                               //Add the low and high byte to the acc_x variable.
     aa8:	8e e0       	ldi	r24, 0x0E	; 14
     aaa:	93 e0       	ldi	r25, 0x03	; 3
     aac:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <_ZN7TwoWire4readEv>
     ab0:	c8 2f       	mov	r28, r24
     ab2:	8e e0       	ldi	r24, 0x0E	; 14
     ab4:	93 e0       	ldi	r25, 0x03	; 3
     ab6:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <_ZN7TwoWire4readEv>
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	3c 2f       	mov	r19, r28
     ac0:	82 2b       	or	r24, r18
     ac2:	93 2b       	or	r25, r19
     ac4:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <acc_axis+0x3>
     ac8:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <acc_axis+0x2>
		acc_axis[2] = Wire.read()<<8|Wire.read();                               //Add the low and high byte to the acc_y variable.
     acc:	8e e0       	ldi	r24, 0x0E	; 14
     ace:	93 e0       	ldi	r25, 0x03	; 3
     ad0:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <_ZN7TwoWire4readEv>
     ad4:	c8 2f       	mov	r28, r24
     ad6:	8e e0       	ldi	r24, 0x0E	; 14
     ad8:	93 e0       	ldi	r25, 0x03	; 3
     ada:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <_ZN7TwoWire4readEv>
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	3c 2f       	mov	r19, r28
     ae4:	82 2b       	or	r24, r18
     ae6:	93 2b       	or	r25, r19
     ae8:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <acc_axis+0x5>
     aec:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <acc_axis+0x4>
		acc_axis[3] = Wire.read()<<8|Wire.read();                               //Add the low and high byte to the acc_z variable.
     af0:	8e e0       	ldi	r24, 0x0E	; 14
     af2:	93 e0       	ldi	r25, 0x03	; 3
     af4:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <_ZN7TwoWire4readEv>
     af8:	c8 2f       	mov	r28, r24
     afa:	8e e0       	ldi	r24, 0x0E	; 14
     afc:	93 e0       	ldi	r25, 0x03	; 3
     afe:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <_ZN7TwoWire4readEv>
     b02:	20 e0       	ldi	r18, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	3c 2f       	mov	r19, r28
     b08:	82 2b       	or	r24, r18
     b0a:	93 2b       	or	r25, r19
     b0c:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <acc_axis+0x7>
     b10:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <acc_axis+0x6>
		temperature = Wire.read()<<8|Wire.read();                               //Add the low and high byte to the temperature variable.
     b14:	8e e0       	ldi	r24, 0x0E	; 14
     b16:	93 e0       	ldi	r25, 0x03	; 3
     b18:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <_ZN7TwoWire4readEv>
     b1c:	c8 2f       	mov	r28, r24
     b1e:	8e e0       	ldi	r24, 0x0E	; 14
     b20:	93 e0       	ldi	r25, 0x03	; 3
     b22:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <_ZN7TwoWire4readEv>
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	3c 2f       	mov	r19, r28
     b2c:	82 2b       	or	r24, r18
     b2e:	93 2b       	or	r25, r19
     b30:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <temperature+0x1>
     b34:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <temperature>
		gyro_axis[1] = Wire.read()<<8|Wire.read();                              //Read high and low part of the angular data.
     b38:	8e e0       	ldi	r24, 0x0E	; 14
     b3a:	93 e0       	ldi	r25, 0x03	; 3
     b3c:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <_ZN7TwoWire4readEv>
     b40:	c8 2f       	mov	r28, r24
     b42:	8e e0       	ldi	r24, 0x0E	; 14
     b44:	93 e0       	ldi	r25, 0x03	; 3
     b46:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <_ZN7TwoWire4readEv>
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	3c 2f       	mov	r19, r28
     b50:	82 2b       	or	r24, r18
     b52:	93 2b       	or	r25, r19
     b54:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <gyro_axis+0x3>
     b58:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <gyro_axis+0x2>
		gyro_axis[2] = Wire.read()<<8|Wire.read();                              //Read high and low part of the angular data.
     b5c:	8e e0       	ldi	r24, 0x0E	; 14
     b5e:	93 e0       	ldi	r25, 0x03	; 3
     b60:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <_ZN7TwoWire4readEv>
     b64:	c8 2f       	mov	r28, r24
     b66:	8e e0       	ldi	r24, 0x0E	; 14
     b68:	93 e0       	ldi	r25, 0x03	; 3
     b6a:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <_ZN7TwoWire4readEv>
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	3c 2f       	mov	r19, r28
     b74:	82 2b       	or	r24, r18
     b76:	93 2b       	or	r25, r19
     b78:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <gyro_axis+0x5>
     b7c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <gyro_axis+0x4>
		gyro_axis[3] = Wire.read()<<8|Wire.read();                              //Read high and low part of the angular data.
     b80:	8e e0       	ldi	r24, 0x0E	; 14
     b82:	93 e0       	ldi	r25, 0x03	; 3
     b84:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <_ZN7TwoWire4readEv>
     b88:	c8 2f       	mov	r28, r24
     b8a:	8e e0       	ldi	r24, 0x0E	; 14
     b8c:	93 e0       	ldi	r25, 0x03	; 3
     b8e:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <_ZN7TwoWire4readEv>
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	3c 2f       	mov	r19, r28
     b98:	82 2b       	or	r24, r18
     b9a:	93 2b       	or	r25, r19
     b9c:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <gyro_axis+0x7>
     ba0:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <gyro_axis+0x6>
	}

	if(cal_int == 2000){
     ba4:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <cal_int>
     ba8:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <cal_int+0x1>
     bac:	80 3d       	cpi	r24, 0xD0	; 208
     bae:	97 40       	sbci	r25, 0x07	; 7
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <_Z8GyroReadv+0x1d2>
     bb2:	4e c0       	rjmp	.+156    	; 0xc50 <_Z8GyroReadv+0x26e>
		gyro_axis[1] -= gyro_axis_cal[1];                                       //Only compensate after the calibration.
     bb4:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <gyro_axis+0x2>
     bb8:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <gyro_axis+0x3>
     bbc:	07 2e       	mov	r0, r23
     bbe:	00 0c       	add	r0, r0
     bc0:	88 0b       	sbc	r24, r24
     bc2:	99 0b       	sbc	r25, r25
     bc4:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatsisf>
     bc8:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <gyro_axis_cal+0x4>
     bcc:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <gyro_axis_cal+0x5>
     bd0:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <gyro_axis_cal+0x6>
     bd4:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <gyro_axis_cal+0x7>
     bd8:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__subsf3>
     bdc:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__fixsfsi>
     be0:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <gyro_axis+0x3>
     be4:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <gyro_axis+0x2>
		gyro_axis[2] -= gyro_axis_cal[2];                                       //Only compensate after the calibration.
     be8:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <gyro_axis+0x4>
     bec:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <gyro_axis+0x5>
     bf0:	07 2e       	mov	r0, r23
     bf2:	00 0c       	add	r0, r0
     bf4:	88 0b       	sbc	r24, r24
     bf6:	99 0b       	sbc	r25, r25
     bf8:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatsisf>
     bfc:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <gyro_axis_cal+0x8>
     c00:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <gyro_axis_cal+0x9>
     c04:	40 91 a4 01 	lds	r20, 0x01A4	; 0x8001a4 <gyro_axis_cal+0xa>
     c08:	50 91 a5 01 	lds	r21, 0x01A5	; 0x8001a5 <gyro_axis_cal+0xb>
     c0c:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__subsf3>
     c10:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__fixsfsi>
     c14:	70 93 0b 02 	sts	0x020B, r23	; 0x80020b <gyro_axis+0x5>
     c18:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <gyro_axis+0x4>
		gyro_axis[3] -= gyro_axis_cal[3];                                       //Only compensate after the calibration.
     c1c:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <gyro_axis+0x6>
     c20:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <gyro_axis+0x7>
     c24:	07 2e       	mov	r0, r23
     c26:	00 0c       	add	r0, r0
     c28:	88 0b       	sbc	r24, r24
     c2a:	99 0b       	sbc	r25, r25
     c2c:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatsisf>
     c30:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <gyro_axis_cal+0xc>
     c34:	30 91 a7 01 	lds	r19, 0x01A7	; 0x8001a7 <gyro_axis_cal+0xd>
     c38:	40 91 a8 01 	lds	r20, 0x01A8	; 0x8001a8 <gyro_axis_cal+0xe>
     c3c:	50 91 a9 01 	lds	r21, 0x01A9	; 0x8001a9 <gyro_axis_cal+0xf>
     c40:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__subsf3>
     c44:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__fixsfsi>
     c48:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <gyro_axis+0x7>
     c4c:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <gyro_axis+0x6>
	}
	gyro_roll = gyro_axis[eeprom_data[28] & 0b00000011];                      //Set gyro_roll to the correct axis that was stored in the EEPROM.
     c50:	c0 90 62 02 	lds	r12, 0x0262	; 0x800262 <eeprom_data+0x1c>
     c54:	0c 2d       	mov	r16, r12
     c56:	03 70       	andi	r16, 0x03	; 3
     c58:	10 e0       	ldi	r17, 0x00	; 0
     c5a:	00 0f       	add	r16, r16
     c5c:	11 1f       	adc	r17, r17
     c5e:	f8 01       	movw	r30, r16
     c60:	ea 5f       	subi	r30, 0xFA	; 250
     c62:	fd 4f       	sbci	r31, 0xFD	; 253
     c64:	60 81       	ld	r22, Z
     c66:	71 81       	ldd	r23, Z+1	; 0x01
     c68:	07 2e       	mov	r0, r23
     c6a:	00 0c       	add	r0, r0
     c6c:	88 0b       	sbc	r24, r24
     c6e:	99 0b       	sbc	r25, r25
     c70:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatsisf>
	if(eeprom_data[28] & 0b10000000)gyro_roll *= -1;                          //Invert gyro_roll if the MSB of EEPROM bit 28 is set.
     c74:	c7 fc       	sbrc	r12, 7
     c76:	09 c0       	rjmp	.+18     	; 0xc8a <_Z8GyroReadv+0x2a8>
	if(cal_int == 2000){
		gyro_axis[1] -= gyro_axis_cal[1];                                       //Only compensate after the calibration.
		gyro_axis[2] -= gyro_axis_cal[2];                                       //Only compensate after the calibration.
		gyro_axis[3] -= gyro_axis_cal[3];                                       //Only compensate after the calibration.
	}
	gyro_roll = gyro_axis[eeprom_data[28] & 0b00000011];                      //Set gyro_roll to the correct axis that was stored in the EEPROM.
     c78:	60 93 ae 01 	sts	0x01AE, r22	; 0x8001ae <gyro_roll>
     c7c:	70 93 af 01 	sts	0x01AF, r23	; 0x8001af <gyro_roll+0x1>
     c80:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <gyro_roll+0x2>
     c84:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <gyro_roll+0x3>
     c88:	0b c0       	rjmp	.+22     	; 0xca0 <_Z8GyroReadv+0x2be>
	if(eeprom_data[28] & 0b10000000)gyro_roll *= -1;                          //Invert gyro_roll if the MSB of EEPROM bit 28 is set.
     c8a:	dc 01       	movw	r26, r24
     c8c:	cb 01       	movw	r24, r22
     c8e:	b0 58       	subi	r27, 0x80	; 128
     c90:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <gyro_roll>
     c94:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <gyro_roll+0x1>
     c98:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <gyro_roll+0x2>
     c9c:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <gyro_roll+0x3>
	gyro_pitch = gyro_axis[eeprom_data[29] & 0b00000011];                     //Set gyro_pitch to the correct axis that was stored in the EEPROM.
     ca0:	b0 90 63 02 	lds	r11, 0x0263	; 0x800263 <eeprom_data+0x1d>
     ca4:	8b 2d       	mov	r24, r11
     ca6:	83 70       	andi	r24, 0x03	; 3
     ca8:	e8 2e       	mov	r14, r24
     caa:	f1 2c       	mov	r15, r1
     cac:	ee 0c       	add	r14, r14
     cae:	ff 1c       	adc	r15, r15
     cb0:	f7 01       	movw	r30, r14
     cb2:	ea 5f       	subi	r30, 0xFA	; 250
     cb4:	fd 4f       	sbci	r31, 0xFD	; 253
     cb6:	60 81       	ld	r22, Z
     cb8:	71 81       	ldd	r23, Z+1	; 0x01
     cba:	07 2e       	mov	r0, r23
     cbc:	00 0c       	add	r0, r0
     cbe:	88 0b       	sbc	r24, r24
     cc0:	99 0b       	sbc	r25, r25
     cc2:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatsisf>
	if(eeprom_data[29] & 0b10000000)gyro_pitch *= -1;                         //Invert gyro_pitch if the MSB of EEPROM bit 29 is set.
     cc6:	b7 fc       	sbrc	r11, 7
     cc8:	09 c0       	rjmp	.+18     	; 0xcdc <_Z8GyroReadv+0x2fa>
		gyro_axis[2] -= gyro_axis_cal[2];                                       //Only compensate after the calibration.
		gyro_axis[3] -= gyro_axis_cal[3];                                       //Only compensate after the calibration.
	}
	gyro_roll = gyro_axis[eeprom_data[28] & 0b00000011];                      //Set gyro_roll to the correct axis that was stored in the EEPROM.
	if(eeprom_data[28] & 0b10000000)gyro_roll *= -1;                          //Invert gyro_roll if the MSB of EEPROM bit 28 is set.
	gyro_pitch = gyro_axis[eeprom_data[29] & 0b00000011];                     //Set gyro_pitch to the correct axis that was stored in the EEPROM.
     cca:	60 93 b2 01 	sts	0x01B2, r22	; 0x8001b2 <gyro_pitch>
     cce:	70 93 b3 01 	sts	0x01B3, r23	; 0x8001b3 <gyro_pitch+0x1>
     cd2:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <gyro_pitch+0x2>
     cd6:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <gyro_pitch+0x3>
     cda:	0b c0       	rjmp	.+22     	; 0xcf2 <_Z8GyroReadv+0x310>
	if(eeprom_data[29] & 0b10000000)gyro_pitch *= -1;                         //Invert gyro_pitch if the MSB of EEPROM bit 29 is set.
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	b0 58       	subi	r27, 0x80	; 128
     ce2:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <gyro_pitch>
     ce6:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <gyro_pitch+0x1>
     cea:	a0 93 b4 01 	sts	0x01B4, r26	; 0x8001b4 <gyro_pitch+0x2>
     cee:	b0 93 b5 01 	sts	0x01B5, r27	; 0x8001b5 <gyro_pitch+0x3>
	gyro_yaw = gyro_axis[eeprom_data[30] & 0b00000011];                       //Set gyro_yaw to the correct axis that was stored in the EEPROM.
     cf2:	d0 90 64 02 	lds	r13, 0x0264	; 0x800264 <eeprom_data+0x1e>
     cf6:	cd 2d       	mov	r28, r13
     cf8:	c3 70       	andi	r28, 0x03	; 3
     cfa:	d0 e0       	ldi	r29, 0x00	; 0
     cfc:	cc 0f       	add	r28, r28
     cfe:	dd 1f       	adc	r29, r29
     d00:	fe 01       	movw	r30, r28
     d02:	ea 5f       	subi	r30, 0xFA	; 250
     d04:	fd 4f       	sbci	r31, 0xFD	; 253
     d06:	60 81       	ld	r22, Z
     d08:	71 81       	ldd	r23, Z+1	; 0x01
     d0a:	07 2e       	mov	r0, r23
     d0c:	00 0c       	add	r0, r0
     d0e:	88 0b       	sbc	r24, r24
     d10:	99 0b       	sbc	r25, r25
     d12:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatsisf>
	if(eeprom_data[30] & 0b10000000)gyro_yaw *= -1;                           //Invert gyro_yaw if the MSB of EEPROM bit 30 is set.
     d16:	d7 fc       	sbrc	r13, 7
     d18:	09 c0       	rjmp	.+18     	; 0xd2c <_Z8GyroReadv+0x34a>
	}
	gyro_roll = gyro_axis[eeprom_data[28] & 0b00000011];                      //Set gyro_roll to the correct axis that was stored in the EEPROM.
	if(eeprom_data[28] & 0b10000000)gyro_roll *= -1;                          //Invert gyro_roll if the MSB of EEPROM bit 28 is set.
	gyro_pitch = gyro_axis[eeprom_data[29] & 0b00000011];                     //Set gyro_pitch to the correct axis that was stored in the EEPROM.
	if(eeprom_data[29] & 0b10000000)gyro_pitch *= -1;                         //Invert gyro_pitch if the MSB of EEPROM bit 29 is set.
	gyro_yaw = gyro_axis[eeprom_data[30] & 0b00000011];                       //Set gyro_yaw to the correct axis that was stored in the EEPROM.
     d1a:	60 93 aa 01 	sts	0x01AA, r22	; 0x8001aa <gyro_yaw>
     d1e:	70 93 ab 01 	sts	0x01AB, r23	; 0x8001ab <gyro_yaw+0x1>
     d22:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <gyro_yaw+0x2>
     d26:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <gyro_yaw+0x3>
     d2a:	0b c0       	rjmp	.+22     	; 0xd42 <_Z8GyroReadv+0x360>
	if(eeprom_data[30] & 0b10000000)gyro_yaw *= -1;                           //Invert gyro_yaw if the MSB of EEPROM bit 30 is set.
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	b0 58       	subi	r27, 0x80	; 128
     d32:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <gyro_yaw>
     d36:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <gyro_yaw+0x1>
     d3a:	a0 93 ac 01 	sts	0x01AC, r26	; 0x8001ac <gyro_yaw+0x2>
     d3e:	b0 93 ad 01 	sts	0x01AD, r27	; 0x8001ad <gyro_yaw+0x3>

	acc_x = acc_axis[eeprom_data[29] & 0b00000011];                           //Set acc_x to the correct axis that was stored in the EEPROM.
     d42:	f7 01       	movw	r30, r14
     d44:	e2 5f       	subi	r30, 0xF2	; 242
     d46:	fd 4f       	sbci	r31, 0xFD	; 253
     d48:	80 81       	ld	r24, Z
     d4a:	91 81       	ldd	r25, Z+1	; 0x01
     d4c:	09 2e       	mov	r0, r25
     d4e:	00 0c       	add	r0, r0
     d50:	aa 0b       	sbc	r26, r26
     d52:	bb 0b       	sbc	r27, r27
	if(eeprom_data[29] & 0b10000000)acc_x *= -1;                              //Invert acc_x if the MSB of EEPROM bit 29 is set.
     d54:	b7 fe       	sbrs	r11, 7
     d56:	07 c0       	rjmp	.+14     	; 0xd66 <_Z8GyroReadv+0x384>
     d58:	b0 95       	com	r27
     d5a:	a0 95       	com	r26
     d5c:	90 95       	com	r25
     d5e:	81 95       	neg	r24
     d60:	9f 4f       	sbci	r25, 0xFF	; 255
     d62:	af 4f       	sbci	r26, 0xFF	; 255
     d64:	bf 4f       	sbci	r27, 0xFF	; 255
     d66:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <acc_x>
     d6a:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <acc_x+0x1>
     d6e:	a0 93 00 02 	sts	0x0200, r26	; 0x800200 <acc_x+0x2>
     d72:	b0 93 01 02 	sts	0x0201, r27	; 0x800201 <acc_x+0x3>
	acc_y = acc_axis[eeprom_data[28] & 0b00000011];                           //Set acc_y to the correct axis that was stored in the EEPROM.
     d76:	f8 01       	movw	r30, r16
     d78:	e2 5f       	subi	r30, 0xF2	; 242
     d7a:	fd 4f       	sbci	r31, 0xFD	; 253
     d7c:	80 81       	ld	r24, Z
     d7e:	91 81       	ldd	r25, Z+1	; 0x01
     d80:	09 2e       	mov	r0, r25
     d82:	00 0c       	add	r0, r0
     d84:	aa 0b       	sbc	r26, r26
     d86:	bb 0b       	sbc	r27, r27
	if(eeprom_data[28] & 0b10000000)acc_y *= -1;                              //Invert acc_y if the MSB of EEPROM bit 28 is set.
     d88:	c7 fe       	sbrs	r12, 7
     d8a:	07 c0       	rjmp	.+14     	; 0xd9a <_Z8GyroReadv+0x3b8>
     d8c:	b0 95       	com	r27
     d8e:	a0 95       	com	r26
     d90:	90 95       	com	r25
     d92:	81 95       	neg	r24
     d94:	9f 4f       	sbci	r25, 0xFF	; 255
     d96:	af 4f       	sbci	r26, 0xFF	; 255
     d98:	bf 4f       	sbci	r27, 0xFF	; 255
     d9a:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <acc_y>
     d9e:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <acc_y+0x1>
     da2:	a0 93 fc 01 	sts	0x01FC, r26	; 0x8001fc <acc_y+0x2>
     da6:	b0 93 fd 01 	sts	0x01FD, r27	; 0x8001fd <acc_y+0x3>
	acc_z = acc_axis[eeprom_data[30] & 0b00000011];                           //Set acc_z to the correct axis that was stored in the EEPROM.
     daa:	c2 5f       	subi	r28, 0xF2	; 242
     dac:	dd 4f       	sbci	r29, 0xFD	; 253
     dae:	88 81       	ld	r24, Y
     db0:	99 81       	ldd	r25, Y+1	; 0x01
     db2:	09 2e       	mov	r0, r25
     db4:	00 0c       	add	r0, r0
     db6:	aa 0b       	sbc	r26, r26
     db8:	bb 0b       	sbc	r27, r27
	if(eeprom_data[30] & 0b10000000)acc_z *= -1;                              //Invert acc_z if the MSB of EEPROM bit 30 is set.
     dba:	d7 fe       	sbrs	r13, 7
     dbc:	07 c0       	rjmp	.+14     	; 0xdcc <_Z8GyroReadv+0x3ea>
     dbe:	b0 95       	com	r27
     dc0:	a0 95       	com	r26
     dc2:	90 95       	com	r25
     dc4:	81 95       	neg	r24
     dc6:	9f 4f       	sbci	r25, 0xFF	; 255
     dc8:	af 4f       	sbci	r26, 0xFF	; 255
     dca:	bf 4f       	sbci	r27, 0xFF	; 255
     dcc:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <acc_z>
     dd0:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <acc_z+0x1>
     dd4:	a0 93 f8 01 	sts	0x01F8, r26	; 0x8001f8 <acc_z+0x2>
     dd8:	b0 93 f9 01 	sts	0x01F9, r27	; 0x8001f9 <acc_z+0x3>
}
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
     de4:	ff 90       	pop	r15
     de6:	ef 90       	pop	r14
     de8:	df 90       	pop	r13
     dea:	cf 90       	pop	r12
     dec:	bf 90       	pop	r11
     dee:	08 95       	ret

00000df0 <loop>:
float ValFromRec(float curval, float startVal, float maxDelta)
{
	return startVal - ((curval - 1500) / 850) * maxDelta ;
}

void loop(){
     df0:	4f 92       	push	r4
     df2:	5f 92       	push	r5
     df4:	6f 92       	push	r6
     df6:	7f 92       	push	r7
     df8:	8f 92       	push	r8
     dfa:	9f 92       	push	r9
     dfc:	af 92       	push	r10
     dfe:	bf 92       	push	r11
     e00:	cf 92       	push	r12
     e02:	df 92       	push	r13
     e04:	ef 92       	push	r14
     e06:	ff 92       	push	r15
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	28 97       	sbiw	r28, 0x08	; 8
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	f8 94       	cli
     e16:	de bf       	out	0x3e, r29	; 62
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	cd bf       	out	0x3d, r28	; 61

	digitalWrite(LED_STATUS_PIN,HIGH);                                                     
     e1c:	61 e0       	ldi	r22, 0x01	; 1
     e1e:	8d e0       	ldi	r24, 0x0D	; 13
     e20:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <digitalWrite>
	if (receiver_input_channel_6 < 1150) digitalWrite(LED_STATUS_PIN, LOW);
     e24:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <receiver_input_channel_6>
     e28:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <receiver_input_channel_6+0x1>
     e2c:	8e 37       	cpi	r24, 0x7E	; 126
     e2e:	94 40       	sbci	r25, 0x04	; 4
     e30:	24 f4       	brge	.+8      	; 0xe3a <loop+0x4a>
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	8d e0       	ldi	r24, 0x0D	; 13
     e36:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <digitalWrite>
	//pid_p_gain_roll = ValFromRec(receiver_input[5], 5, 10);               //Gain setting for the roll P-controller
	//pid_i_gain_roll = ValFromRec(receiver_input[6], 0.5, 1);               //Gain setting for the roll P-controller
	//pid_d_gain_roll = ValFromRec(receiver_input[7], 10, 20);               //Gain setting for the roll P-controller

	//65.5 = 1 deg/sec (check the datasheet of the MPU-6050 for more information).
	gyro_roll_input = (gyro_roll_input * 0.7) + ((gyro_roll / 65.5) * 0.3);   //Gyro pid input is deg/sec.
     e3a:	c0 90 ae 01 	lds	r12, 0x01AE	; 0x8001ae <gyro_roll>
     e3e:	d0 90 af 01 	lds	r13, 0x01AF	; 0x8001af <gyro_roll+0x1>
     e42:	e0 90 b0 01 	lds	r14, 0x01B0	; 0x8001b0 <gyro_roll+0x2>
     e46:	f0 90 b1 01 	lds	r15, 0x01B1	; 0x8001b1 <gyro_roll+0x3>
     e4a:	23 e3       	ldi	r18, 0x33	; 51
     e4c:	33 e3       	ldi	r19, 0x33	; 51
     e4e:	43 e3       	ldi	r20, 0x33	; 51
     e50:	5f e3       	ldi	r21, 0x3F	; 63
     e52:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <gyro_roll_input>
     e56:	70 91 8b 01 	lds	r23, 0x018B	; 0x80018b <gyro_roll_input+0x1>
     e5a:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <gyro_roll_input+0x2>
     e5e:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <gyro_roll_input+0x3>
     e62:	0e 94 38 10 	call	0x2070	; 0x2070 <__mulsf3>
     e66:	4b 01       	movw	r8, r22
     e68:	5c 01       	movw	r10, r24
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	43 e8       	ldi	r20, 0x83	; 131
     e70:	52 e4       	ldi	r21, 0x42	; 66
     e72:	c7 01       	movw	r24, r14
     e74:	b6 01       	movw	r22, r12
     e76:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__divsf3>
     e7a:	2a e9       	ldi	r18, 0x9A	; 154
     e7c:	39 e9       	ldi	r19, 0x99	; 153
     e7e:	49 e9       	ldi	r20, 0x99	; 153
     e80:	5e e3       	ldi	r21, 0x3E	; 62
     e82:	0e 94 38 10 	call	0x2070	; 0x2070 <__mulsf3>
     e86:	9b 01       	movw	r18, r22
     e88:	ac 01       	movw	r20, r24
     e8a:	c5 01       	movw	r24, r10
     e8c:	b4 01       	movw	r22, r8
     e8e:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__addsf3>
     e92:	60 93 8a 01 	sts	0x018A, r22	; 0x80018a <gyro_roll_input>
     e96:	70 93 8b 01 	sts	0x018B, r23	; 0x80018b <gyro_roll_input+0x1>
     e9a:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <gyro_roll_input+0x2>
     e9e:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <gyro_roll_input+0x3>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	//Gyro angle calculations
	//0.0000611 = 1 / (250Hz / 65.5)
	//angle_pitch += gyro_pitch * 0.0000611;                                    //Calculate the traveled pitch angle and add this to the angle_pitch variable.
	angle_roll += gyro_roll * 0.0000611;                                      //Calculate the traveled roll angle and add this to the angle_roll variable.
     ea2:	20 ed       	ldi	r18, 0xD0	; 208
     ea4:	32 e2       	ldi	r19, 0x22	; 34
     ea6:	40 e8       	ldi	r20, 0x80	; 128
     ea8:	58 e3       	ldi	r21, 0x38	; 56
     eaa:	c7 01       	movw	r24, r14
     eac:	b6 01       	movw	r22, r12
     eae:	0e 94 38 10 	call	0x2070	; 0x2070 <__mulsf3>
     eb2:	20 91 7a 01 	lds	r18, 0x017A	; 0x80017a <angle_roll>
     eb6:	30 91 7b 01 	lds	r19, 0x017B	; 0x80017b <angle_roll+0x1>
     eba:	40 91 7c 01 	lds	r20, 0x017C	; 0x80017c <angle_roll+0x2>
     ebe:	50 91 7d 01 	lds	r21, 0x017D	; 0x80017d <angle_roll+0x3>
     ec2:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__addsf3>
     ec6:	6d 83       	std	Y+5, r22	; 0x05
     ec8:	7e 83       	std	Y+6, r23	; 0x06
     eca:	8f 83       	std	Y+7, r24	; 0x07
     ecc:	98 87       	std	Y+8, r25	; 0x08
	//0.000001066 = 0.0000611 * (3.142(PI) / 180degr) The Arduino sin function is in radians
	//angle_pitch -= angle_roll * sin(gyro_yaw * 0.000001066);                  //If the IMU has yawed transfer the roll angle to the pitch angel.
	//angle_roll += angle_pitch * sin(gyro_yaw * 0.000001066);                  //If the IMU has yawed transfer the pitch angle to the roll angel.

	//Accelerometer angle calculations
	acc_total_vector = sqrt((acc_x*acc_x)+(acc_y*acc_y)+(acc_z*acc_z));       //Calculate the total accelerometer vector.
     ece:	c0 90 fe 01 	lds	r12, 0x01FE	; 0x8001fe <acc_x>
     ed2:	d0 90 ff 01 	lds	r13, 0x01FF	; 0x8001ff <acc_x+0x1>
     ed6:	e0 90 00 02 	lds	r14, 0x0200	; 0x800200 <acc_x+0x2>
     eda:	f0 90 01 02 	lds	r15, 0x0201	; 0x800201 <acc_x+0x3>
     ede:	40 90 fa 01 	lds	r4, 0x01FA	; 0x8001fa <acc_y>
     ee2:	50 90 fb 01 	lds	r5, 0x01FB	; 0x8001fb <acc_y+0x1>
     ee6:	60 90 fc 01 	lds	r6, 0x01FC	; 0x8001fc <acc_y+0x2>
     eea:	70 90 fd 01 	lds	r7, 0x01FD	; 0x8001fd <acc_y+0x3>
     eee:	80 90 f6 01 	lds	r8, 0x01F6	; 0x8001f6 <acc_z>
     ef2:	90 90 f7 01 	lds	r9, 0x01F7	; 0x8001f7 <acc_z+0x1>
     ef6:	a0 90 f8 01 	lds	r10, 0x01F8	; 0x8001f8 <acc_z+0x2>
     efa:	b0 90 f9 01 	lds	r11, 0x01F9	; 0x8001f9 <acc_z+0x3>
     efe:	a7 01       	movw	r20, r14
     f00:	96 01       	movw	r18, r12
     f02:	c7 01       	movw	r24, r14
     f04:	b6 01       	movw	r22, r12
     f06:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__mulsi3>
     f0a:	69 83       	std	Y+1, r22	; 0x01
     f0c:	7a 83       	std	Y+2, r23	; 0x02
     f0e:	8b 83       	std	Y+3, r24	; 0x03
     f10:	9c 83       	std	Y+4, r25	; 0x04
     f12:	a3 01       	movw	r20, r6
     f14:	92 01       	movw	r18, r4
     f16:	c3 01       	movw	r24, r6
     f18:	b2 01       	movw	r22, r4
     f1a:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__mulsi3>
     f1e:	29 81       	ldd	r18, Y+1	; 0x01
     f20:	3a 81       	ldd	r19, Y+2	; 0x02
     f22:	4b 81       	ldd	r20, Y+3	; 0x03
     f24:	5c 81       	ldd	r21, Y+4	; 0x04
     f26:	26 0f       	add	r18, r22
     f28:	37 1f       	adc	r19, r23
     f2a:	48 1f       	adc	r20, r24
     f2c:	59 1f       	adc	r21, r25
     f2e:	29 83       	std	Y+1, r18	; 0x01
     f30:	3a 83       	std	Y+2, r19	; 0x02
     f32:	4b 83       	std	Y+3, r20	; 0x03
     f34:	5c 83       	std	Y+4, r21	; 0x04
     f36:	a5 01       	movw	r20, r10
     f38:	94 01       	movw	r18, r8
     f3a:	c5 01       	movw	r24, r10
     f3c:	b4 01       	movw	r22, r8
     f3e:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__mulsi3>
     f42:	29 81       	ldd	r18, Y+1	; 0x01
     f44:	3a 81       	ldd	r19, Y+2	; 0x02
     f46:	4b 81       	ldd	r20, Y+3	; 0x03
     f48:	5c 81       	ldd	r21, Y+4	; 0x04
     f4a:	62 0f       	add	r22, r18
     f4c:	73 1f       	adc	r23, r19
     f4e:	84 1f       	adc	r24, r20
     f50:	95 1f       	adc	r25, r21
     f52:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatsisf>
     f56:	0e 94 ab 10 	call	0x2156	; 0x2156 <sqrt>
     f5a:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__fixsfsi>
     f5e:	4b 01       	movw	r8, r22
     f60:	5c 01       	movw	r10, r24
     f62:	60 93 f2 01 	sts	0x01F2, r22	; 0x8001f2 <acc_total_vector>
     f66:	70 93 f3 01 	sts	0x01F3, r23	; 0x8001f3 <acc_total_vector+0x1>
     f6a:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <acc_total_vector+0x2>
     f6e:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <acc_total_vector+0x3>
	
	//if(abs(acc_y) < acc_total_vector){                                        //Prevent the asin function to produce a NaN
		//angle_pitch_acc = asin((float)acc_y/acc_total_vector)* 57.296;          //Calculate the pitch angle.
	//}
	if(abs(acc_x) < acc_total_vector){                                        //Prevent the asin function to produce a NaN
     f72:	d7 01       	movw	r26, r14
     f74:	c6 01       	movw	r24, r12
     f76:	f7 fe       	sbrs	r15, 7
     f78:	07 c0       	rjmp	.+14     	; 0xf88 <loop+0x198>
     f7a:	88 27       	eor	r24, r24
     f7c:	99 27       	eor	r25, r25
     f7e:	dc 01       	movw	r26, r24
     f80:	8c 19       	sub	r24, r12
     f82:	9d 09       	sbc	r25, r13
     f84:	ae 09       	sbc	r26, r14
     f86:	bf 09       	sbc	r27, r15
     f88:	88 15       	cp	r24, r8
     f8a:	99 05       	cpc	r25, r9
     f8c:	aa 05       	cpc	r26, r10
     f8e:	bb 05       	cpc	r27, r11
     f90:	04 f5       	brge	.+64     	; 0xfd2 <loop+0x1e2>
		angle_roll_acc = asin((float)acc_x/acc_total_vector)* -57.296;          //Calculate the roll angle.
     f92:	c7 01       	movw	r24, r14
     f94:	b6 01       	movw	r22, r12
     f96:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatsisf>
     f9a:	6b 01       	movw	r12, r22
     f9c:	7c 01       	movw	r14, r24
     f9e:	c5 01       	movw	r24, r10
     fa0:	b4 01       	movw	r22, r8
     fa2:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatsisf>
     fa6:	9b 01       	movw	r18, r22
     fa8:	ac 01       	movw	r20, r24
     faa:	c7 01       	movw	r24, r14
     fac:	b6 01       	movw	r22, r12
     fae:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__divsf3>
     fb2:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <asin>
     fb6:	2b e1       	ldi	r18, 0x1B	; 27
     fb8:	3f e2       	ldi	r19, 0x2F	; 47
     fba:	45 e6       	ldi	r20, 0x65	; 101
     fbc:	52 ec       	ldi	r21, 0xC2	; 194
     fbe:	0e 94 38 10 	call	0x2070	; 0x2070 <__mulsf3>
     fc2:	60 93 7e 01 	sts	0x017E, r22	; 0x80017e <angle_roll_acc>
     fc6:	70 93 7f 01 	sts	0x017F, r23	; 0x80017f <angle_roll_acc+0x1>
     fca:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <angle_roll_acc+0x2>
     fce:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <angle_roll_acc+0x3>
	}
	
	//Place the MPU-6050 spirit level and note the values in the following two lines for calibration.
	//angle_pitch_acc -= 2.5;
	angle_roll_acc -= 0;
     fd2:	c0 90 7e 01 	lds	r12, 0x017E	; 0x80017e <angle_roll_acc>
     fd6:	d0 90 7f 01 	lds	r13, 0x017F	; 0x80017f <angle_roll_acc+0x1>
     fda:	e0 90 80 01 	lds	r14, 0x0180	; 0x800180 <angle_roll_acc+0x2>
     fde:	f0 90 81 01 	lds	r15, 0x0181	; 0x800181 <angle_roll_acc+0x3>
	
	//angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;            //Correct the drift of the gyro pitch angle with the accelerometer pitch angle.
	angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;               //Correct the drift of the gyro roll angle with the accelerometer roll angle.
     fe2:	29 ec       	ldi	r18, 0xC9	; 201
     fe4:	35 ee       	ldi	r19, 0xE5	; 229
     fe6:	4f e7       	ldi	r20, 0x7F	; 127
     fe8:	5f e3       	ldi	r21, 0x3F	; 63
     fea:	6d 81       	ldd	r22, Y+5	; 0x05
     fec:	7e 81       	ldd	r23, Y+6	; 0x06
     fee:	8f 81       	ldd	r24, Y+7	; 0x07
     ff0:	98 85       	ldd	r25, Y+8	; 0x08
     ff2:	0e 94 38 10 	call	0x2070	; 0x2070 <__mulsf3>
     ff6:	4b 01       	movw	r8, r22
     ff8:	5c 01       	movw	r10, r24
     ffa:	27 e1       	ldi	r18, 0x17	; 23
     ffc:	37 eb       	ldi	r19, 0xB7	; 183
     ffe:	41 ed       	ldi	r20, 0xD1	; 209
    1000:	59 e3       	ldi	r21, 0x39	; 57
    1002:	c7 01       	movw	r24, r14
    1004:	b6 01       	movw	r22, r12
    1006:	0e 94 38 10 	call	0x2070	; 0x2070 <__mulsf3>
    100a:	9b 01       	movw	r18, r22
    100c:	ac 01       	movw	r20, r24
    100e:	c5 01       	movw	r24, r10
    1010:	b4 01       	movw	r22, r8
    1012:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__addsf3>
    1016:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <angle_roll>
    101a:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <angle_roll+0x1>
    101e:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <angle_roll+0x2>
    1022:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <angle_roll+0x3>

	//pitch_level_adjust = angle_pitch * 15;                                    //Calculate the pitch angle correction
	roll_level_adjust = angle_roll * 15;                                      //Calculate the roll angle correction
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e7       	ldi	r20, 0x70	; 112
    102c:	51 e4       	ldi	r21, 0x41	; 65
    102e:	0e 94 38 10 	call	0x2070	; 0x2070 <__mulsf3>
    1032:	60 93 02 02 	sts	0x0202, r22	; 0x800202 <roll_level_adjust>
    1036:	70 93 03 02 	sts	0x0203, r23	; 0x800203 <roll_level_adjust+0x1>
    103a:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <roll_level_adjust+0x2>
    103e:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <roll_level_adjust+0x3>

	if(!auto_level){                                                          //If the quadcopter is not in auto-level mode
    1042:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <auto_level>
    1046:	81 11       	cpse	r24, r1
    1048:	08 c0       	rjmp	.+16     	; 0x105a <loop+0x26a>
		//pitch_level_adjust = 0;                                                 //Set the pitch angle correction to zero.
		roll_level_adjust = 0;                                                  //Set the roll angle correcion to zero.
    104a:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <roll_level_adjust>
    104e:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <roll_level_adjust+0x1>
    1052:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <roll_level_adjust+0x2>
    1056:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <roll_level_adjust+0x3>
	}


	//For starting the motors: throttle low and yaw left (step 1).
	if(receiver_input_channel_3 < 1050 && receiver_input_channel_4 < 1050)start = 1;
    105a:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <receiver_input_channel_3>
    105e:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <receiver_input_channel_3+0x1>
    1062:	8a 31       	cpi	r24, 0x1A	; 26
    1064:	94 40       	sbci	r25, 0x04	; 4
    1066:	44 f4       	brge	.+16     	; 0x1078 <loop+0x288>
    1068:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <receiver_input_channel_4>
    106c:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <receiver_input_channel_4+0x1>
    1070:	8a 31       	cpi	r24, 0x1A	; 26
    1072:	94 40       	sbci	r25, 0x04	; 4
    1074:	0c f4       	brge	.+2      	; 0x1078 <loop+0x288>
    1076:	96 c2       	rjmp	.+1324   	; 0x15a4 <loop+0x7b4>
	//When yaw stick is back in the center position start the motors (step 2).
	if(start == 1 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1450){
    1078:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <start>
    107c:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <start+0x1>
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	79 f4       	brne	.+30     	; 0x10a2 <loop+0x2b2>
    1084:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <receiver_input_channel_3>
    1088:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <receiver_input_channel_3+0x1>
    108c:	8a 31       	cpi	r24, 0x1A	; 26
    108e:	94 40       	sbci	r25, 0x04	; 4
    1090:	44 f4       	brge	.+16     	; 0x10a2 <loop+0x2b2>
    1092:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <receiver_input_channel_4>
    1096:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <receiver_input_channel_4+0x1>
    109a:	8b 3a       	cpi	r24, 0xAB	; 171
    109c:	95 40       	sbci	r25, 0x05	; 5
    109e:	0c f0       	brlt	.+2      	; 0x10a2 <loop+0x2b2>
    10a0:	88 c2       	rjmp	.+1296   	; 0x15b2 <loop+0x7c2>
		//pid_last_pitch_d_error = 0;
		//pid_i_mem_yaw = 0;
		//pid_last_yaw_d_error = 0;
	}
	//Stopping the motors: throttle low and yaw right.
	if(start == 2 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1950)start = 0;
    10a2:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <start>
    10a6:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <start+0x1>
    10aa:	02 97       	sbiw	r24, 0x02	; 2
    10ac:	79 f4       	brne	.+30     	; 0x10cc <loop+0x2dc>
    10ae:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <receiver_input_channel_3>
    10b2:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <receiver_input_channel_3+0x1>
    10b6:	8a 31       	cpi	r24, 0x1A	; 26
    10b8:	94 40       	sbci	r25, 0x04	; 4
    10ba:	44 f4       	brge	.+16     	; 0x10cc <loop+0x2dc>
    10bc:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <receiver_input_channel_4>
    10c0:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <receiver_input_channel_4+0x1>
    10c4:	8f 39       	cpi	r24, 0x9F	; 159
    10c6:	97 40       	sbci	r25, 0x07	; 7
    10c8:	0c f0       	brlt	.+2      	; 0x10cc <loop+0x2dc>
    10ca:	95 c2       	rjmp	.+1322   	; 0x15f6 <loop+0x806>

	//The PID set point in degrees per second is determined by the roll receiver input.
	//In the case of deviding by 3 the max roll rate is aprox 164 degrees per second ( (500-8)/3 = 164d/s ).
	pid_roll_setpoint = 0;
    10cc:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <pid_roll_setpoint>
    10d0:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <pid_roll_setpoint+0x1>
    10d4:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <pid_roll_setpoint+0x2>
    10d8:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <pid_roll_setpoint+0x3>
	//We need a little dead band of 16us for better results.
	if(receiver_input_channel_1 > 1508)
    10dc:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <receiver_input_channel_1>
    10e0:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <receiver_input_channel_1+0x1>
    10e4:	85 3e       	cpi	r24, 0xE5	; 229
    10e6:	95 40       	sbci	r25, 0x05	; 5
    10e8:	3c f0       	brlt	.+14     	; 0x10f8 <loop+0x308>
		pid_roll_setpoint = receiver_input_channel_1 - 1508;
    10ea:	60 91 44 02 	lds	r22, 0x0244	; 0x800244 <receiver_input_channel_1>
    10ee:	70 91 45 02 	lds	r23, 0x0245	; 0x800245 <receiver_input_channel_1+0x1>
    10f2:	64 5e       	subi	r22, 0xE4	; 228
    10f4:	75 40       	sbci	r23, 0x05	; 5
    10f6:	0d c0       	rjmp	.+26     	; 0x1112 <loop+0x322>
	else if(receiver_input_channel_1 < 1492)
    10f8:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <receiver_input_channel_1>
    10fc:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <receiver_input_channel_1+0x1>
    1100:	84 3d       	cpi	r24, 0xD4	; 212
    1102:	95 40       	sbci	r25, 0x05	; 5
    1104:	a4 f4       	brge	.+40     	; 0x112e <loop+0x33e>
		pid_roll_setpoint = receiver_input_channel_1 - 1492;
    1106:	60 91 44 02 	lds	r22, 0x0244	; 0x800244 <receiver_input_channel_1>
    110a:	70 91 45 02 	lds	r23, 0x0245	; 0x800245 <receiver_input_channel_1+0x1>
    110e:	64 5d       	subi	r22, 0xD4	; 212
    1110:	75 40       	sbci	r23, 0x05	; 5
    1112:	07 2e       	mov	r0, r23
    1114:	00 0c       	add	r0, r0
    1116:	88 0b       	sbc	r24, r24
    1118:	99 0b       	sbc	r25, r25
    111a:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatsisf>
    111e:	60 93 8e 01 	sts	0x018E, r22	; 0x80018e <pid_roll_setpoint>
    1122:	70 93 8f 01 	sts	0x018F, r23	; 0x80018f <pid_roll_setpoint+0x1>
    1126:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <pid_roll_setpoint+0x2>
    112a:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <pid_roll_setpoint+0x3>

	pid_roll_setpoint -= roll_level_adjust;                                   //Subtract the angle correction from the standardized receiver roll input value.
	pid_roll_setpoint /= 3.0;                                                 //Divide the setpoint for the PID roll controller by 3 to get angles in degrees.
    112e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <roll_level_adjust>
    1132:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <roll_level_adjust+0x1>
    1136:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <roll_level_adjust+0x2>
    113a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <roll_level_adjust+0x3>
    113e:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <pid_roll_setpoint>
    1142:	70 91 8f 01 	lds	r23, 0x018F	; 0x80018f <pid_roll_setpoint+0x1>
    1146:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <pid_roll_setpoint+0x2>
    114a:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <pid_roll_setpoint+0x3>
    114e:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__subsf3>
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e4       	ldi	r20, 0x40	; 64
    1158:	50 e4       	ldi	r21, 0x40	; 64
    115a:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__divsf3>
    115e:	60 93 8e 01 	sts	0x018E, r22	; 0x80018e <pid_roll_setpoint>
    1162:	70 93 8f 01 	sts	0x018F, r23	; 0x80018f <pid_roll_setpoint+0x1>
    1166:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <pid_roll_setpoint+0x2>
    116a:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <pid_roll_setpoint+0x3>
	//else 
		//if(receiver_input_channel_4 < 1492)
			//pid_yaw_setpoint = (receiver_input_channel_4 - 1492)/3.0;
	//}
	
	calculate_pid();                                                            //PID inputs are known. So we can calculate the pid output.
    116e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_Z13calculate_pidv>
	if (receiver_input_channel_6 < 1600) digitalWrite(LED_STATUS_PIN, LOW);
    1172:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <receiver_input_channel_6>
    1176:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <receiver_input_channel_6+0x1>
    117a:	80 34       	cpi	r24, 0x40	; 64
    117c:	96 40       	sbci	r25, 0x06	; 6
    117e:	24 f4       	brge	.+8      	; 0x1188 <loop+0x398>
    1180:	60 e0       	ldi	r22, 0x00	; 0
    1182:	8d e0       	ldi	r24, 0x0D	; 13
    1184:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <digitalWrite>

	//The battery voltage is needed for compensation.
	//A complementary filter is used to reduce noise.
	//0.09853 = 0.08 * 1.2317.
	battery_voltage = battery_voltage * 0.92 + (analogRead(0) + 65) * 0.09853;
    1188:	60 91 2e 02 	lds	r22, 0x022E	; 0x80022e <battery_voltage>
    118c:	70 91 2f 02 	lds	r23, 0x022F	; 0x80022f <battery_voltage+0x1>
    1190:	07 2e       	mov	r0, r23
    1192:	00 0c       	add	r0, r0
    1194:	88 0b       	sbc	r24, r24
    1196:	99 0b       	sbc	r25, r25
    1198:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatsisf>
    119c:	2f e1       	ldi	r18, 0x1F	; 31
    119e:	35 e8       	ldi	r19, 0x85	; 133
    11a0:	4b e6       	ldi	r20, 0x6B	; 107
    11a2:	5f e3       	ldi	r21, 0x3F	; 63
    11a4:	0e 94 38 10 	call	0x2070	; 0x2070 <__mulsf3>
    11a8:	6b 01       	movw	r12, r22
    11aa:	7c 01       	movw	r14, r24
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	0e 94 49 17 	call	0x2e92	; 0x2e92 <analogRead>
    11b2:	8f 5b       	subi	r24, 0xBF	; 191
    11b4:	9f 4f       	sbci	r25, 0xFF	; 255
    11b6:	bc 01       	movw	r22, r24
    11b8:	99 0f       	add	r25, r25
    11ba:	88 0b       	sbc	r24, r24
    11bc:	99 0b       	sbc	r25, r25
    11be:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatsisf>
    11c2:	29 e1       	ldi	r18, 0x19	; 25
    11c4:	3a ec       	ldi	r19, 0xCA	; 202
    11c6:	49 ec       	ldi	r20, 0xC9	; 201
    11c8:	5d e3       	ldi	r21, 0x3D	; 61
    11ca:	0e 94 38 10 	call	0x2070	; 0x2070 <__mulsf3>
    11ce:	a7 01       	movw	r20, r14
    11d0:	96 01       	movw	r18, r12
    11d2:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__addsf3>
    11d6:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__fixsfsi>
    11da:	70 93 2f 02 	sts	0x022F, r23	; 0x80022f <battery_voltage+0x1>
    11de:	60 93 2e 02 	sts	0x022E, r22	; 0x80022e <battery_voltage>

	//Turn on the led if battery voltage is to low.
	if(battery_voltage < 1000 && battery_voltage > 600)digitalWrite(LED_STATUS_PIN, HIGH);
    11e2:	69 55       	subi	r22, 0x59	; 89
    11e4:	72 40       	sbci	r23, 0x02	; 2
    11e6:	6f 38       	cpi	r22, 0x8F	; 143
    11e8:	71 40       	sbci	r23, 0x01	; 1
    11ea:	20 f4       	brcc	.+8      	; 0x11f4 <loop+0x404>
    11ec:	61 e0       	ldi	r22, 0x01	; 1
    11ee:	8d e0       	ldi	r24, 0x0D	; 13
    11f0:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <digitalWrite>
	
	throttle = receiver_input_channel_3;                                      //We need the throttle signal as a base signal.
    11f4:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <receiver_input_channel_3>
    11f8:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <receiver_input_channel_3+0x1>
    11fc:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <throttle+0x1>
    1200:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <throttle>

	if (start == 2){                                                          //The motors are started.
    1204:	20 91 2a 02 	lds	r18, 0x022A	; 0x80022a <start>
    1208:	30 91 2b 02 	lds	r19, 0x022B	; 0x80022b <start+0x1>
    120c:	22 30       	cpi	r18, 0x02	; 2
    120e:	31 05       	cpc	r19, r1
    1210:	09 f0       	breq	.+2      	; 0x1214 <loop+0x424>
    1212:	b4 c0       	rjmp	.+360    	; 0x137c <loop+0x58c>
		if (throttle > 1800) throttle = 1800;                                   //We need some room to keep full control at full throttle.
    1214:	89 30       	cpi	r24, 0x09	; 9
    1216:	97 40       	sbci	r25, 0x07	; 7
    1218:	34 f0       	brlt	.+12     	; 0x1226 <loop+0x436>
    121a:	88 e0       	ldi	r24, 0x08	; 8
    121c:	97 e0       	ldi	r25, 0x07	; 7
    121e:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <throttle+0x1>
    1222:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <throttle>

		if(receiver_input_channel_1_middle ==0)
    1226:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <receiver_input_channel_1_middle>
    122a:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <receiver_input_channel_1_middle+0x1>
    122e:	89 2b       	or	r24, r25
    1230:	41 f4       	brne	.+16     	; 0x1242 <loop+0x452>
			receiver_input_channel_1_middle = receiver_input_channel_1;
    1232:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <receiver_input_channel_1>
    1236:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <receiver_input_channel_1+0x1>
    123a:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <receiver_input_channel_1_middle+0x1>
    123e:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <receiver_input_channel_1_middle>

		esc_1 = receiver_input_channel_3 - (receiver_input_channel_1_middle - receiver_input_channel_1)/10;                                                   //Set the pulse for motor 1 equal to the throttle channel.
    1242:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <receiver_input_channel_1>
    1246:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <receiver_input_channel_1+0x1>
    124a:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <receiver_input_channel_3>
    124e:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <receiver_input_channel_3+0x1>
		esc_2 = receiver_input_channel_3;                                                   //Set the pulse for motor 3 equal to the throttle channel.
    1252:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <receiver_input_channel_3>
    1256:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <receiver_input_channel_3+0x1>
		esc_3 = receiver_input_channel_3;                                                   //Set the pulse for motor 4 equal to the throttle channel.
    125a:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <receiver_input_channel_3>
    125e:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <receiver_input_channel_3+0x1>
		esc_4 = receiver_input_channel_3 + (receiver_input_channel_1_middle - receiver_input_channel_1)/10;                                                   //Set the pulse for motor 2 equal to the throttle channel.
    1262:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <receiver_input_channel_1>
    1266:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <receiver_input_channel_1+0x1>
    126a:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <receiver_input_channel_3>
    126e:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <receiver_input_channel_3+0x1>
		
		esc_1 = throttle - pid_output_roll ;
    1272:	60 91 30 02 	lds	r22, 0x0230	; 0x800230 <throttle>
    1276:	70 91 31 02 	lds	r23, 0x0231	; 0x800231 <throttle+0x1>
    127a:	07 2e       	mov	r0, r23
    127c:	00 0c       	add	r0, r0
    127e:	88 0b       	sbc	r24, r24
    1280:	99 0b       	sbc	r25, r25
    1282:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatsisf>
    1286:	4b 01       	movw	r8, r22
    1288:	5c 01       	movw	r10, r24
    128a:	40 90 86 01 	lds	r4, 0x0186	; 0x800186 <pid_output_roll>
    128e:	50 90 87 01 	lds	r5, 0x0187	; 0x800187 <pid_output_roll+0x1>
    1292:	60 90 88 01 	lds	r6, 0x0188	; 0x800188 <pid_output_roll+0x2>
    1296:	70 90 89 01 	lds	r7, 0x0189	; 0x800189 <pid_output_roll+0x3>
    129a:	a3 01       	movw	r20, r6
    129c:	92 01       	movw	r18, r4
    129e:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__subsf3>
    12a2:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__fixsfsi>
    12a6:	7b 01       	movw	r14, r22
    12a8:	70 93 39 02 	sts	0x0239, r23	; 0x800239 <esc_1+0x1>
    12ac:	60 93 38 02 	sts	0x0238, r22	; 0x800238 <esc_1>
		esc_2 = throttle - pid_output_roll ;
    12b0:	70 93 37 02 	sts	0x0237, r23	; 0x800237 <esc_2+0x1>
    12b4:	60 93 36 02 	sts	0x0236, r22	; 0x800236 <esc_2>
		esc_3 = throttle + pid_output_roll ;
    12b8:	a3 01       	movw	r20, r6
    12ba:	92 01       	movw	r18, r4
    12bc:	c5 01       	movw	r24, r10
    12be:	b4 01       	movw	r22, r8
    12c0:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__addsf3>
    12c4:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__fixsfsi>
    12c8:	9b 01       	movw	r18, r22
    12ca:	70 93 35 02 	sts	0x0235, r23	; 0x800235 <esc_3+0x1>
    12ce:	60 93 34 02 	sts	0x0234, r22	; 0x800234 <esc_3>
		esc_4 = throttle + pid_output_roll ;
    12d2:	70 93 33 02 	sts	0x0233, r23	; 0x800233 <esc_4+0x1>
    12d6:	60 93 32 02 	sts	0x0232, r22	; 0x800232 <esc_4>
		//esc_2 += esc_2 * ((1240 - battery_voltage)/(float)3500);              //Compensate the esc-2 pulse for voltage drop.
		//esc_3 += esc_3 * ((1240 - battery_voltage)/(float)3500);              //Compensate the esc-3 pulse for voltage drop.
		//esc_4 += esc_4 * ((1240 - battery_voltage)/(float)3500);              //Compensate the esc-4 pulse for voltage drop.
		//}
		#define ESC_MINPOS 1100
		if (esc_1 < ESC_MINPOS) esc_1 = ESC_MINPOS;                                         //Keep the motors running.
    12da:	8c e4       	ldi	r24, 0x4C	; 76
    12dc:	e8 16       	cp	r14, r24
    12de:	84 e0       	ldi	r24, 0x04	; 4
    12e0:	f8 06       	cpc	r15, r24
    12e2:	c4 f4       	brge	.+48     	; 0x1314 <loop+0x524>
    12e4:	8c e4       	ldi	r24, 0x4C	; 76
    12e6:	94 e0       	ldi	r25, 0x04	; 4
    12e8:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <esc_1+0x1>
    12ec:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <esc_1>
		if (esc_2 < ESC_MINPOS) esc_2 = ESC_MINPOS;                                         //Keep the motors running.
    12f0:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <esc_2+0x1>
    12f4:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <esc_2>
		if (esc_3 < ESC_MINPOS) esc_3 = ESC_MINPOS;                                         //Keep the motors running.
    12f8:	2c 34       	cpi	r18, 0x4C	; 76
    12fa:	34 40       	sbci	r19, 0x04	; 4
    12fc:	44 f5       	brge	.+80     	; 0x134e <loop+0x55e>
    12fe:	8c e4       	ldi	r24, 0x4C	; 76
    1300:	94 e0       	ldi	r25, 0x04	; 4
    1302:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <esc_3+0x1>
    1306:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <esc_3>
		if (esc_4 < ESC_MINPOS) esc_4 = ESC_MINPOS;                                         //Keep the motors running.
    130a:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <esc_4+0x1>
    130e:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <esc_4>
    1312:	03 c0       	rjmp	.+6      	; 0x131a <loop+0x52a>
		//esc_4 += esc_4 * ((1240 - battery_voltage)/(float)3500);              //Compensate the esc-4 pulse for voltage drop.
		//}
		#define ESC_MINPOS 1100
		if (esc_1 < ESC_MINPOS) esc_1 = ESC_MINPOS;                                         //Keep the motors running.
		if (esc_2 < ESC_MINPOS) esc_2 = ESC_MINPOS;                                         //Keep the motors running.
		if (esc_3 < ESC_MINPOS) esc_3 = ESC_MINPOS;                                         //Keep the motors running.
    1314:	2c 34       	cpi	r18, 0x4C	; 76
    1316:	34 40       	sbci	r19, 0x04	; 4
    1318:	94 f3       	brlt	.-28     	; 0x12fe <loop+0x50e>
		if (esc_4 < ESC_MINPOS) esc_4 = ESC_MINPOS;                                         //Keep the motors running.

		if(esc_1 > 2000)esc_1 = 2000;                                           //Limit the esc-1 pulse to 2000us.
    131a:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <esc_1>
    131e:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <esc_1+0x1>
    1322:	81 3d       	cpi	r24, 0xD1	; 209
    1324:	97 40       	sbci	r25, 0x07	; 7
    1326:	34 f0       	brlt	.+12     	; 0x1334 <loop+0x544>
    1328:	80 ed       	ldi	r24, 0xD0	; 208
    132a:	97 e0       	ldi	r25, 0x07	; 7
    132c:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <esc_1+0x1>
    1330:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <esc_1>
		if(esc_2 > 2000)esc_2 = 2000;                                           //Limit the esc-2 pulse to 2000us.
    1334:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <esc_2>
    1338:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <esc_2+0x1>
    133c:	81 3d       	cpi	r24, 0xD1	; 209
    133e:	97 40       	sbci	r25, 0x07	; 7
    1340:	34 f0       	brlt	.+12     	; 0x134e <loop+0x55e>
    1342:	80 ed       	ldi	r24, 0xD0	; 208
    1344:	97 e0       	ldi	r25, 0x07	; 7
    1346:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <esc_2+0x1>
    134a:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <esc_2>
		if(esc_3 > 2000)esc_3 = 2000;                                           //Limit the esc-3 pulse to 2000us.
    134e:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <esc_3>
    1352:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <esc_3+0x1>
    1356:	81 3d       	cpi	r24, 0xD1	; 209
    1358:	97 40       	sbci	r25, 0x07	; 7
    135a:	34 f0       	brlt	.+12     	; 0x1368 <loop+0x578>
    135c:	80 ed       	ldi	r24, 0xD0	; 208
    135e:	97 e0       	ldi	r25, 0x07	; 7
    1360:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <esc_3+0x1>
    1364:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <esc_3>
		if(esc_4 > 2000)esc_4 = 2000;                                           //Limit the esc-4 pulse to 2000us.
    1368:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <esc_4>
    136c:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <esc_4+0x1>
    1370:	81 3d       	cpi	r24, 0xD1	; 209
    1372:	97 40       	sbci	r25, 0x07	; 7
    1374:	ac f0       	brlt	.+42     	; 0x13a0 <loop+0x5b0>
    1376:	80 ed       	ldi	r24, 0xD0	; 208
    1378:	97 e0       	ldi	r25, 0x07	; 7
    137a:	0e c0       	rjmp	.+28     	; 0x1398 <loop+0x5a8>
	}
	else{
		esc_1 = 1000;                                                           //If start is not 2 keep a 1000us pulse for ess-1.
    137c:	88 ee       	ldi	r24, 0xE8	; 232
    137e:	93 e0       	ldi	r25, 0x03	; 3
    1380:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <esc_1+0x1>
    1384:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <esc_1>
		esc_2 = 1000;                                                           //If start is not 2 keep a 1000us pulse for ess-2.
    1388:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <esc_2+0x1>
    138c:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <esc_2>
		esc_3 = 1000;                                                           //If start is not 2 keep a 1000us pulse for ess-3.
    1390:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <esc_3+0x1>
    1394:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <esc_3>
		esc_4 = 1000;                                                           //If start is not 2 keep a 1000us pulse for ess-4.
    1398:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <esc_4+0x1>
    139c:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <esc_4>
	//longer or shorter than 4000us the angle calculation is off. If you modify the code make sure
	//that the loop time is still 4000us and no longer! More information can be found on
	//the Q&A page:
	//! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !
	
	if(micros() - loop_timer > 4050)digitalWrite(LED_STATUS_PIN, HIGH);                   //Turn on the LED if the loop time exceeds 4050us.
    13a0:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <micros>
    13a4:	c0 90 b6 01 	lds	r12, 0x01B6	; 0x8001b6 <loop_timer>
    13a8:	d0 90 b7 01 	lds	r13, 0x01B7	; 0x8001b7 <loop_timer+0x1>
    13ac:	e0 90 b8 01 	lds	r14, 0x01B8	; 0x8001b8 <loop_timer+0x2>
    13b0:	f0 90 b9 01 	lds	r15, 0x01B9	; 0x8001b9 <loop_timer+0x3>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	8c 19       	sub	r24, r12
    13ba:	9d 09       	sbc	r25, r13
    13bc:	ae 09       	sbc	r26, r14
    13be:	bf 09       	sbc	r27, r15
    13c0:	83 3d       	cpi	r24, 0xD3	; 211
    13c2:	9f 40       	sbci	r25, 0x0F	; 15
    13c4:	a1 05       	cpc	r26, r1
    13c6:	b1 05       	cpc	r27, r1
    13c8:	20 f0       	brcs	.+8      	; 0x13d2 <loop+0x5e2>
    13ca:	61 e0       	ldi	r22, 0x01	; 1
    13cc:	8d e0       	ldi	r24, 0x0D	; 13
    13ce:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <digitalWrite>
	
	//All the information for controlling the motor's is available.
	//The refresh rate is 250Hz. That means the esc's need there pulse every 4ms.
	while(micros() - loop_timer < 4000);                                      //We wait until 4000us are passed.
    13d2:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <micros>
    13d6:	c0 90 b6 01 	lds	r12, 0x01B6	; 0x8001b6 <loop_timer>
    13da:	d0 90 b7 01 	lds	r13, 0x01B7	; 0x8001b7 <loop_timer+0x1>
    13de:	e0 90 b8 01 	lds	r14, 0x01B8	; 0x8001b8 <loop_timer+0x2>
    13e2:	f0 90 b9 01 	lds	r15, 0x01B9	; 0x8001b9 <loop_timer+0x3>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	8c 19       	sub	r24, r12
    13ec:	9d 09       	sbc	r25, r13
    13ee:	ae 09       	sbc	r26, r14
    13f0:	bf 09       	sbc	r27, r15
    13f2:	80 3a       	cpi	r24, 0xA0	; 160
    13f4:	9f 40       	sbci	r25, 0x0F	; 15
    13f6:	a1 05       	cpc	r26, r1
    13f8:	b1 05       	cpc	r27, r1
    13fa:	58 f3       	brcs	.-42     	; 0x13d2 <loop+0x5e2>
	loop_timer = micros();                                                    //Set the timer for the next loop.
    13fc:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <micros>
    1400:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <loop_timer>
    1404:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <loop_timer+0x1>
    1408:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <loop_timer+0x2>
    140c:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <loop_timer+0x3>
	if (receiver_input_channel_6 < 1800) digitalWrite(LED_STATUS_PIN, LOW);
    1410:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <receiver_input_channel_6>
    1414:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <receiver_input_channel_6+0x1>
    1418:	88 30       	cpi	r24, 0x08	; 8
    141a:	97 40       	sbci	r25, 0x07	; 7
    141c:	24 f4       	brge	.+8      	; 0x1426 <loop+0x636>
    141e:	60 e0       	ldi	r22, 0x00	; 0
    1420:	8d e0       	ldi	r24, 0x0D	; 13
    1422:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <digitalWrite>

	PORTD |= B11110000;                                                       //Set digital outputs 4,5,6 and 7 high.
    1426:	8b b1       	in	r24, 0x0b	; 11
    1428:	80 6f       	ori	r24, 0xF0	; 240
    142a:	8b b9       	out	0x0b, r24	; 11
	timer_channel_1 = esc_1 + loop_timer;                                     //Calculate the time of the faling edge of the esc-1 pulse.
    142c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <loop_timer>
    1430:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <loop_timer+0x1>
    1434:	a0 91 b8 01 	lds	r26, 0x01B8	; 0x8001b8 <loop_timer+0x2>
    1438:	b0 91 b9 01 	lds	r27, 0x01B9	; 0x8001b9 <loop_timer+0x3>
    143c:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <esc_1>
    1440:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <esc_1+0x1>
    1444:	05 2e       	mov	r0, r21
    1446:	00 0c       	add	r0, r0
    1448:	66 0b       	sbc	r22, r22
    144a:	77 0b       	sbc	r23, r23
    144c:	48 0f       	add	r20, r24
    144e:	59 1f       	adc	r21, r25
    1450:	6a 1f       	adc	r22, r26
    1452:	7b 1f       	adc	r23, r27
    1454:	40 93 ee 01 	sts	0x01EE, r20	; 0x8001ee <timer_channel_1>
    1458:	50 93 ef 01 	sts	0x01EF, r21	; 0x8001ef <timer_channel_1+0x1>
    145c:	60 93 f0 01 	sts	0x01F0, r22	; 0x8001f0 <timer_channel_1+0x2>
    1460:	70 93 f1 01 	sts	0x01F1, r23	; 0x8001f1 <timer_channel_1+0x3>
	timer_channel_2 = esc_2 + loop_timer;                                     //Calculate the time of the faling edge of the esc-2 pulse.
    1464:	40 91 36 02 	lds	r20, 0x0236	; 0x800236 <esc_2>
    1468:	50 91 37 02 	lds	r21, 0x0237	; 0x800237 <esc_2+0x1>
    146c:	05 2e       	mov	r0, r21
    146e:	00 0c       	add	r0, r0
    1470:	66 0b       	sbc	r22, r22
    1472:	77 0b       	sbc	r23, r23
    1474:	48 0f       	add	r20, r24
    1476:	59 1f       	adc	r21, r25
    1478:	6a 1f       	adc	r22, r26
    147a:	7b 1f       	adc	r23, r27
    147c:	40 93 ea 01 	sts	0x01EA, r20	; 0x8001ea <timer_channel_2>
    1480:	50 93 eb 01 	sts	0x01EB, r21	; 0x8001eb <timer_channel_2+0x1>
    1484:	60 93 ec 01 	sts	0x01EC, r22	; 0x8001ec <timer_channel_2+0x2>
    1488:	70 93 ed 01 	sts	0x01ED, r23	; 0x8001ed <timer_channel_2+0x3>
	timer_channel_3 = esc_3 + loop_timer;                                     //Calculate the time of the faling edge of the esc-3 pulse.
    148c:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <esc_3>
    1490:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <esc_3+0x1>
    1494:	05 2e       	mov	r0, r21
    1496:	00 0c       	add	r0, r0
    1498:	66 0b       	sbc	r22, r22
    149a:	77 0b       	sbc	r23, r23
    149c:	48 0f       	add	r20, r24
    149e:	59 1f       	adc	r21, r25
    14a0:	6a 1f       	adc	r22, r26
    14a2:	7b 1f       	adc	r23, r27
    14a4:	40 93 e6 01 	sts	0x01E6, r20	; 0x8001e6 <timer_channel_3>
    14a8:	50 93 e7 01 	sts	0x01E7, r21	; 0x8001e7 <timer_channel_3+0x1>
    14ac:	60 93 e8 01 	sts	0x01E8, r22	; 0x8001e8 <timer_channel_3+0x2>
    14b0:	70 93 e9 01 	sts	0x01E9, r23	; 0x8001e9 <timer_channel_3+0x3>
	timer_channel_4 = esc_4 + loop_timer;                                     //Calculate the time of the faling edge of the esc-4 pulse.
    14b4:	40 91 32 02 	lds	r20, 0x0232	; 0x800232 <esc_4>
    14b8:	50 91 33 02 	lds	r21, 0x0233	; 0x800233 <esc_4+0x1>
    14bc:	05 2e       	mov	r0, r21
    14be:	00 0c       	add	r0, r0
    14c0:	66 0b       	sbc	r22, r22
    14c2:	77 0b       	sbc	r23, r23
    14c4:	84 0f       	add	r24, r20
    14c6:	95 1f       	adc	r25, r21
    14c8:	a6 1f       	adc	r26, r22
    14ca:	b7 1f       	adc	r27, r23
    14cc:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <timer_channel_4>
    14d0:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <timer_channel_4+0x1>
    14d4:	a0 93 e4 01 	sts	0x01E4, r26	; 0x8001e4 <timer_channel_4+0x2>
    14d8:	b0 93 e5 01 	sts	0x01E5, r27	; 0x8001e5 <timer_channel_4+0x3>
	
	//There is always 1000us of spare time. So let's do something usefull that is very time consuming.
	//Get the current gyro and receiver data and scale it to degrees per second for the pid calculations.
	GyroRead();
    14dc:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_Z8GyroReadv>
	PrintDebugMsg();
    14e0:	0e 94 21 01 	call	0x242	; 0x242 <_Z13PrintDebugMsgv>
	
	
	while(PORTD >= 16){                                                       //Stay in this loop until output 4,5,6 and 7 are low.
    14e4:	8b b1       	in	r24, 0x0b	; 11
    14e6:	80 31       	cpi	r24, 0x10	; 16
    14e8:	08 f4       	brcc	.+2      	; 0x14ec <loop+0x6fc>
    14ea:	8a c0       	rjmp	.+276    	; 0x1600 <loop+0x810>
		esc_loop_timer = micros();                                              //Read the current time.
    14ec:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <micros>
    14f0:	60 93 de 01 	sts	0x01DE, r22	; 0x8001de <esc_loop_timer>
    14f4:	70 93 df 01 	sts	0x01DF, r23	; 0x8001df <esc_loop_timer+0x1>
    14f8:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <esc_loop_timer+0x2>
    14fc:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <esc_loop_timer+0x3>
		if(timer_channel_1 <= esc_loop_timer)PORTD &= B11101111;                //Set digital output 4 to low if the time is expired.
    1500:	c0 90 ee 01 	lds	r12, 0x01EE	; 0x8001ee <timer_channel_1>
    1504:	d0 90 ef 01 	lds	r13, 0x01EF	; 0x8001ef <timer_channel_1+0x1>
    1508:	e0 90 f0 01 	lds	r14, 0x01F0	; 0x8001f0 <timer_channel_1+0x2>
    150c:	f0 90 f1 01 	lds	r15, 0x01F1	; 0x8001f1 <timer_channel_1+0x3>
    1510:	6c 15       	cp	r22, r12
    1512:	7d 05       	cpc	r23, r13
    1514:	8e 05       	cpc	r24, r14
    1516:	9f 05       	cpc	r25, r15
    1518:	08 f0       	brcs	.+2      	; 0x151c <loop+0x72c>
    151a:	5c 98       	cbi	0x0b, 4	; 11
		if(timer_channel_2 <= esc_loop_timer)PORTD &= B11011111;                //Set digital output 5 to low if the time is expired.
    151c:	40 91 ea 01 	lds	r20, 0x01EA	; 0x8001ea <timer_channel_2>
    1520:	50 91 eb 01 	lds	r21, 0x01EB	; 0x8001eb <timer_channel_2+0x1>
    1524:	60 91 ec 01 	lds	r22, 0x01EC	; 0x8001ec <timer_channel_2+0x2>
    1528:	70 91 ed 01 	lds	r23, 0x01ED	; 0x8001ed <timer_channel_2+0x3>
    152c:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <esc_loop_timer>
    1530:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <esc_loop_timer+0x1>
    1534:	a0 91 e0 01 	lds	r26, 0x01E0	; 0x8001e0 <esc_loop_timer+0x2>
    1538:	b0 91 e1 01 	lds	r27, 0x01E1	; 0x8001e1 <esc_loop_timer+0x3>
    153c:	84 17       	cp	r24, r20
    153e:	95 07       	cpc	r25, r21
    1540:	a6 07       	cpc	r26, r22
    1542:	b7 07       	cpc	r27, r23
    1544:	08 f0       	brcs	.+2      	; 0x1548 <loop+0x758>
    1546:	5d 98       	cbi	0x0b, 5	; 11
		if(timer_channel_3 <= esc_loop_timer)PORTD &= B10111111;                //Set digital output 6 to low if the time is expired.
    1548:	40 91 e6 01 	lds	r20, 0x01E6	; 0x8001e6 <timer_channel_3>
    154c:	50 91 e7 01 	lds	r21, 0x01E7	; 0x8001e7 <timer_channel_3+0x1>
    1550:	60 91 e8 01 	lds	r22, 0x01E8	; 0x8001e8 <timer_channel_3+0x2>
    1554:	70 91 e9 01 	lds	r23, 0x01E9	; 0x8001e9 <timer_channel_3+0x3>
    1558:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <esc_loop_timer>
    155c:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <esc_loop_timer+0x1>
    1560:	a0 91 e0 01 	lds	r26, 0x01E0	; 0x8001e0 <esc_loop_timer+0x2>
    1564:	b0 91 e1 01 	lds	r27, 0x01E1	; 0x8001e1 <esc_loop_timer+0x3>
    1568:	84 17       	cp	r24, r20
    156a:	95 07       	cpc	r25, r21
    156c:	a6 07       	cpc	r26, r22
    156e:	b7 07       	cpc	r27, r23
    1570:	08 f0       	brcs	.+2      	; 0x1574 <loop+0x784>
    1572:	5e 98       	cbi	0x0b, 6	; 11
		if(timer_channel_4 <= esc_loop_timer)PORTD &= B01111111;                //Set digital output 7 to low if the time is expired.
    1574:	40 91 e2 01 	lds	r20, 0x01E2	; 0x8001e2 <timer_channel_4>
    1578:	50 91 e3 01 	lds	r21, 0x01E3	; 0x8001e3 <timer_channel_4+0x1>
    157c:	60 91 e4 01 	lds	r22, 0x01E4	; 0x8001e4 <timer_channel_4+0x2>
    1580:	70 91 e5 01 	lds	r23, 0x01E5	; 0x8001e5 <timer_channel_4+0x3>
    1584:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <esc_loop_timer>
    1588:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <esc_loop_timer+0x1>
    158c:	a0 91 e0 01 	lds	r26, 0x01E0	; 0x8001e0 <esc_loop_timer+0x2>
    1590:	b0 91 e1 01 	lds	r27, 0x01E1	; 0x8001e1 <esc_loop_timer+0x3>
    1594:	84 17       	cp	r24, r20
    1596:	95 07       	cpc	r25, r21
    1598:	a6 07       	cpc	r26, r22
    159a:	b7 07       	cpc	r27, r23
    159c:	08 f4       	brcc	.+2      	; 0x15a0 <loop+0x7b0>
    159e:	a2 cf       	rjmp	.-188    	; 0x14e4 <loop+0x6f4>
    15a0:	5f 98       	cbi	0x0b, 7	; 11
    15a2:	a0 cf       	rjmp	.-192    	; 0x14e4 <loop+0x6f4>
		roll_level_adjust = 0;                                                  //Set the roll angle correcion to zero.
	}


	//For starting the motors: throttle low and yaw left (step 1).
	if(receiver_input_channel_3 < 1050 && receiver_input_channel_4 < 1050)start = 1;
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <start+0x1>
    15ac:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <start>
    15b0:	63 cd       	rjmp	.-1338   	; 0x1078 <loop+0x288>
	//When yaw stick is back in the center position start the motors (step 2).
	if(start == 1 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1450){
		start = 2;
    15b2:	82 e0       	ldi	r24, 0x02	; 2
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <start+0x1>
    15ba:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <start>

		//angle_pitch = angle_pitch_acc;                                          //Set the gyro pitch angle equal to the accelerometer pitch angle when the quadcopter is started.
		angle_roll = angle_roll_acc;                                            //Set the gyro roll angle equal to the accelerometer roll angle when the quadcopter is started.
    15be:	c0 92 7a 01 	sts	0x017A, r12	; 0x80017a <angle_roll>
    15c2:	d0 92 7b 01 	sts	0x017B, r13	; 0x80017b <angle_roll+0x1>
    15c6:	e0 92 7c 01 	sts	0x017C, r14	; 0x80017c <angle_roll+0x2>
    15ca:	f0 92 7d 01 	sts	0x017D, r15	; 0x80017d <angle_roll+0x3>
		gyro_angles_set = true;                                                 //Set the IMU started flag.
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <gyro_angles_set>

		//Reset the PID controllers for a bumpless start.
		pid_i_mem_roll = 0;
    15d4:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <pid_i_mem_roll>
    15d8:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <pid_i_mem_roll+0x1>
    15dc:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <pid_i_mem_roll+0x2>
    15e0:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <pid_i_mem_roll+0x3>
		pid_last_roll_d_error = 0;
    15e4:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <pid_last_roll_d_error>
    15e8:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <pid_last_roll_d_error+0x1>
    15ec:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <pid_last_roll_d_error+0x2>
    15f0:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <pid_last_roll_d_error+0x3>
    15f4:	56 cd       	rjmp	.-1364   	; 0x10a2 <loop+0x2b2>
		//pid_last_pitch_d_error = 0;
		//pid_i_mem_yaw = 0;
		//pid_last_yaw_d_error = 0;
	}
	//Stopping the motors: throttle low and yaw right.
	if(start == 2 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1950)start = 0;
    15f6:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <start+0x1>
    15fa:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <start>
    15fe:	66 cd       	rjmp	.-1332   	; 0x10cc <loop+0x2dc>
		if(timer_channel_1 <= esc_loop_timer)PORTD &= B11101111;                //Set digital output 4 to low if the time is expired.
		if(timer_channel_2 <= esc_loop_timer)PORTD &= B11011111;                //Set digital output 5 to low if the time is expired.
		if(timer_channel_3 <= esc_loop_timer)PORTD &= B10111111;                //Set digital output 6 to low if the time is expired.
		if(timer_channel_4 <= esc_loop_timer)PORTD &= B01111111;                //Set digital output 7 to low if the time is expired.
	}
}
    1600:	28 96       	adiw	r28, 0x08	; 8
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	de bf       	out	0x3e, r29	; 62
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	cd bf       	out	0x3d, r28	; 61
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	ff 90       	pop	r15
    1612:	ef 90       	pop	r14
    1614:	df 90       	pop	r13
    1616:	cf 90       	pop	r12
    1618:	bf 90       	pop	r11
    161a:	af 90       	pop	r10
    161c:	9f 90       	pop	r9
    161e:	8f 90       	pop	r8
    1620:	7f 90       	pop	r7
    1622:	6f 90       	pop	r6
    1624:	5f 90       	pop	r5
    1626:	4f 90       	pop	r4
    1628:	08 95       	ret

0000162a <_Z18set_gyro_registersv>:
}


void set_gyro_registers(){
	//Setup the MPU-6050
	if(eeprom_data[31] == 1){
    162a:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <eeprom_data+0x1f>
    162e:	81 30       	cpi	r24, 0x01	; 1
    1630:	09 f0       	breq	.+2      	; 0x1634 <_Z18set_gyro_registersv+0xa>
    1632:	ac c0       	rjmp	.+344    	; 0x178c <_Z18set_gyro_registersv+0x162>
		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search.
    1634:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <gyro_address>
    1638:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <gyro_address+0x1>
    163c:	8e e0       	ldi	r24, 0x0E	; 14
    163e:	93 e0       	ldi	r25, 0x03	; 3
    1640:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(PWR_MGMT_1);                                            //We want to write to the PWR_MGMT_1 register (6B hex)
    1644:	6b e6       	ldi	r22, 0x6B	; 107
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	8e e0       	ldi	r24, 0x0E	; 14
    164a:	93 e0       	ldi	r25, 0x03	; 3
    164c:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7TwoWire5writeEi>
		Wire.write(0x00);                                            //Set the register bits as 00000000 to activate the gyro
    1650:	60 e0       	ldi	r22, 0x00	; 0
    1652:	70 e0       	ldi	r23, 0x00	; 0
    1654:	8e e0       	ldi	r24, 0x0E	; 14
    1656:	93 e0       	ldi	r25, 0x03	; 3
    1658:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro.
    165c:	8e e0       	ldi	r24, 0x0E	; 14
    165e:	93 e0       	ldi	r25, 0x03	; 3
    1660:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <_ZN7TwoWire15endTransmissionEv>

		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search.
    1664:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <gyro_address>
    1668:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <gyro_address+0x1>
    166c:	8e e0       	ldi	r24, 0x0E	; 14
    166e:	93 e0       	ldi	r25, 0x03	; 3
    1670:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(GYRO_CONFIG);                                            //We want to write to the GYRO_CONFIG register (1B hex)
    1674:	6b e1       	ldi	r22, 0x1B	; 27
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	8e e0       	ldi	r24, 0x0E	; 14
    167a:	93 e0       	ldi	r25, 0x03	; 3
    167c:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7TwoWire5writeEi>
		Wire.write(0x08);                                            //Set the register bits as 00001000 (500dps full scale)
    1680:	68 e0       	ldi	r22, 0x08	; 8
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	8e e0       	ldi	r24, 0x0E	; 14
    1686:	93 e0       	ldi	r25, 0x03	; 3
    1688:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro
    168c:	8e e0       	ldi	r24, 0x0E	; 14
    168e:	93 e0       	ldi	r25, 0x03	; 3
    1690:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <_ZN7TwoWire15endTransmissionEv>

		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search.
    1694:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <gyro_address>
    1698:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <gyro_address+0x1>
    169c:	8e e0       	ldi	r24, 0x0E	; 14
    169e:	93 e0       	ldi	r25, 0x03	; 3
    16a0:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(ACCEL_CONFIG);                                            //We want to write to the ACCEL_CONFIG register (1A hex)
    16a4:	6c e1       	ldi	r22, 0x1C	; 28
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	8e e0       	ldi	r24, 0x0E	; 14
    16aa:	93 e0       	ldi	r25, 0x03	; 3
    16ac:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7TwoWire5writeEi>
		Wire.write(0x10);                                            //Set the register bits as 00010000 (+/- 8g full scale range)
    16b0:	60 e1       	ldi	r22, 0x10	; 16
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	8e e0       	ldi	r24, 0x0E	; 14
    16b6:	93 e0       	ldi	r25, 0x03	; 3
    16b8:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro
    16bc:	8e e0       	ldi	r24, 0x0E	; 14
    16be:	93 e0       	ldi	r25, 0x03	; 3
    16c0:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <_ZN7TwoWire15endTransmissionEv>

		//Let's perform a random register check to see if the values are written correct
		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search
    16c4:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <gyro_address>
    16c8:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <gyro_address+0x1>
    16cc:	8e e0       	ldi	r24, 0x0E	; 14
    16ce:	93 e0       	ldi	r25, 0x03	; 3
    16d0:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(GYRO_CONFIG);                                            //Start reading @ register 0x1B
    16d4:	6b e1       	ldi	r22, 0x1B	; 27
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	8e e0       	ldi	r24, 0x0E	; 14
    16da:	93 e0       	ldi	r25, 0x03	; 3
    16dc:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission
    16e0:	8e e0       	ldi	r24, 0x0E	; 14
    16e2:	93 e0       	ldi	r25, 0x03	; 3
    16e4:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <_ZN7TwoWire15endTransmissionEv>
		Wire.requestFrom(gyro_address, 1);                           //Request 1 bytes from the gyro
    16e8:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <gyro_address>
    16ec:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <gyro_address+0x1>
    16f0:	41 e0       	ldi	r20, 0x01	; 1
    16f2:	50 e0       	ldi	r21, 0x00	; 0
    16f4:	8e e0       	ldi	r24, 0x0E	; 14
    16f6:	93 e0       	ldi	r25, 0x03	; 3
    16f8:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <_ZN7TwoWire11requestFromEii>
		while(Wire.available() < 1);                                 //Wait until the 6 bytes are received
    16fc:	8e e0       	ldi	r24, 0x0E	; 14
    16fe:	93 e0       	ldi	r25, 0x03	; 3
    1700:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <_ZN7TwoWire9availableEv>
    1704:	18 16       	cp	r1, r24
    1706:	19 06       	cpc	r1, r25
    1708:	cc f7       	brge	.-14     	; 0x16fc <_Z18set_gyro_registersv+0xd2>
		if(Wire.read() != 0x08){                                     //Check if the value is 0x08
    170a:	8e e0       	ldi	r24, 0x0E	; 14
    170c:	93 e0       	ldi	r25, 0x03	; 3
    170e:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <_ZN7TwoWire4readEv>
    1712:	08 97       	sbiw	r24, 0x08	; 8
    1714:	59 f0       	breq	.+22     	; 0x172c <_Z18set_gyro_registersv+0x102>
			digitalWrite(LED_STATUS_PIN,HIGH);                                     //Turn on the warning led
    1716:	61 e0       	ldi	r22, 0x01	; 1
    1718:	8d e0       	ldi	r24, 0x0D	; 13
    171a:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <digitalWrite>
			while(1)delay(10);                                         //Stay in this loop for ever
    171e:	6a e0       	ldi	r22, 0x0A	; 10
    1720:	70 e0       	ldi	r23, 0x00	; 0
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <delay>
    172a:	f9 cf       	rjmp	.-14     	; 0x171e <_Z18set_gyro_registersv+0xf4>
		}

		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search
    172c:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <gyro_address>
    1730:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <gyro_address+0x1>
    1734:	8e e0       	ldi	r24, 0x0E	; 14
    1736:	93 e0       	ldi	r25, 0x03	; 3
    1738:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(CONFIG);                                            //We want to write to the CONFIG register (1A hex)
    173c:	6a e1       	ldi	r22, 0x1A	; 26
    173e:	70 e0       	ldi	r23, 0x00	; 0
    1740:	8e e0       	ldi	r24, 0x0E	; 14
    1742:	93 e0       	ldi	r25, 0x03	; 3
    1744:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7TwoWire5writeEi>
		Wire.write(0x03);                                            //Set the register bits as 00000011 (Set Digital Low Pass Filter to ~43Hz)
    1748:	63 e0       	ldi	r22, 0x03	; 3
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	8e e0       	ldi	r24, 0x0E	; 14
    174e:	93 e0       	ldi	r25, 0x03	; 3
    1750:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro
    1754:	8e e0       	ldi	r24, 0x0E	; 14
    1756:	93 e0       	ldi	r25, 0x03	; 3
    1758:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <_ZN7TwoWire15endTransmissionEv>

		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search
    175c:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <gyro_address>
    1760:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <gyro_address+0x1>
    1764:	8e e0       	ldi	r24, 0x0E	; 14
    1766:	93 e0       	ldi	r25, 0x03	; 3
    1768:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(ACCEL_CONFIG2);
    176c:	6d e1       	ldi	r22, 0x1D	; 29
    176e:	70 e0       	ldi	r23, 0x00	; 0
    1770:	8e e0       	ldi	r24, 0x0E	; 14
    1772:	93 e0       	ldi	r25, 0x03	; 3
    1774:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7TwoWire5writeEi>
		Wire.write(0x01);                                            // Write new ACCEL_CONFIG2 41Hz  11.80ms delay
    1778:	61 e0       	ldi	r22, 0x01	; 1
    177a:	70 e0       	ldi	r23, 0x00	; 0
    177c:	8e e0       	ldi	r24, 0x0E	; 14
    177e:	93 e0       	ldi	r25, 0x03	; 3
    1780:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro
    1784:	8e e0       	ldi	r24, 0x0E	; 14
    1786:	93 e0       	ldi	r25, 0x03	; 3
    1788:	0c 94 4f 16 	jmp	0x2c9e	; 0x2c9e <_ZN7TwoWire15endTransmissionEv>
    178c:	08 95       	ret

0000178e <setup>:
int receiver_input_channel_1_middle;
byte lightcounter;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Setup routine
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup(){
    178e:	cf 93       	push	r28
    1790:	df 93       	push	r29
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1792:	26 e0       	ldi	r18, 0x06	; 6
    1794:	40 e0       	ldi	r20, 0x00	; 0
    1796:	51 ee       	ldi	r21, 0xE1	; 225
    1798:	60 e0       	ldi	r22, 0x00	; 0
    179a:	70 e0       	ldi	r23, 0x00	; 0
    179c:	81 e7       	ldi	r24, 0x71	; 113
    179e:	92 e0       	ldi	r25, 0x02	; 2
    17a0:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(57600);
	//Copy the EEPROM data for fast access data.
	for(start = 0; start <= 35; start++)eeprom_data[start] = EEPROM.read(start);
    17a4:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <start+0x1>
    17a8:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <start>
    17ac:	c0 91 2a 02 	lds	r28, 0x022A	; 0x80022a <start>
    17b0:	d0 91 2b 02 	lds	r29, 0x022B	; 0x80022b <start+0x1>
    17b4:	c4 32       	cpi	r28, 0x24	; 36
    17b6:	d1 05       	cpc	r29, r1
    17b8:	6c f4       	brge	.+26     	; 0x17d4 <setup+0x46>

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    17ba:	ce 01       	movw	r24, r28
    17bc:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <eeprom_read_byte>
    17c0:	fe 01       	movw	r30, r28
    17c2:	ea 5b       	subi	r30, 0xBA	; 186
    17c4:	fd 4f       	sbci	r31, 0xFD	; 253
    17c6:	80 83       	st	Z, r24
    17c8:	21 96       	adiw	r28, 0x01	; 1
    17ca:	d0 93 2b 02 	sts	0x022B, r29	; 0x80022b <start+0x1>
    17ce:	c0 93 2a 02 	sts	0x022A, r28	; 0x80022a <start>
    17d2:	ec cf       	rjmp	.-40     	; 0x17ac <setup+0x1e>
	start = 0;                                                                //Set start back to zero.
    17d4:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <start+0x1>
    17d8:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <start>
	gyro_address = eeprom_data[32];                                           //Store the gyro address in the variable.
    17dc:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <eeprom_data+0x20>
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <gyro_address+0x1>
    17e6:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <gyro_address>

	Wire.begin();                                                             //Start the I2C as master.
    17ea:	8e e0       	ldi	r24, 0x0E	; 14
    17ec:	93 e0       	ldi	r25, 0x03	; 3
    17ee:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <_ZN7TwoWire5beginEv>
	Wire.setClock(100000);
    17f2:	40 ea       	ldi	r20, 0xA0	; 160
    17f4:	56 e8       	ldi	r21, 0x86	; 134
    17f6:	61 e0       	ldi	r22, 0x01	; 1
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	8e e0       	ldi	r24, 0x0E	; 14
    17fc:	93 e0       	ldi	r25, 0x03	; 3
    17fe:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <_ZN7TwoWire8setClockEm>

	pinMode(SDA, INPUT);
    1802:	60 e0       	ldi	r22, 0x00	; 0
    1804:	82 e1       	ldi	r24, 0x12	; 18
    1806:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <pinMode>
	pinMode(SCL, INPUT);
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	83 e1       	ldi	r24, 0x13	; 19
    180e:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <pinMode>

	TWBR = 12;                                                                //Set the I2C clock speed to 400kHz.
    1812:	8c e0       	ldi	r24, 0x0C	; 12
    1814:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	//Arduino (Atmega) pins default to inputs, so they don't need to be explicitly declared as inputs.
	DDRD |= B11110000;                                                        //Configure digital poort 4, 5, 6 and 7 as output.
    1818:	8a b1       	in	r24, 0x0a	; 10
    181a:	80 6f       	ori	r24, 0xF0	; 240
    181c:	8a b9       	out	0x0a, r24	; 10
	DDRB |= B00100000;                                                        //Configure digital poort  13 as output.
    181e:	25 9a       	sbi	0x04, 5	; 4
	DDRB &= B11101111;                                                        //Configure digital poort  13 as output.
    1820:	24 98       	cbi	0x04, 4	; 4
	
	//Use the led on the Arduino for startup indication.
	digitalWrite(LED_STATUS_PIN,HIGH);                                                    //Turn on the warning led.
    1822:	61 e0       	ldi	r22, 0x01	; 1
    1824:	8d e0       	ldi	r24, 0x0D	; 13
    1826:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <digitalWrite>

	//Check the EEPROM signature to make sure that the setup program is executed.
	while(eeprom_data[33] != 'J' || eeprom_data[34] != 'M' || eeprom_data[35] != 'B')delay(10);
    182a:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <eeprom_data+0x21>
    182e:	8a 34       	cpi	r24, 0x4A	; 74
    1830:	41 f4       	brne	.+16     	; 0x1842 <setup+0xb4>
    1832:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <eeprom_data+0x22>
    1836:	8d 34       	cpi	r24, 0x4D	; 77
    1838:	21 f4       	brne	.+8      	; 0x1842 <setup+0xb4>
    183a:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <eeprom_data+0x23>
    183e:	82 34       	cpi	r24, 0x42	; 66
    1840:	39 f0       	breq	.+14     	; 0x1850 <setup+0xc2>
    1842:	6a e0       	ldi	r22, 0x0A	; 10
    1844:	70 e0       	ldi	r23, 0x00	; 0
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <delay>
    184e:	ed cf       	rjmp	.-38     	; 0x182a <setup+0x9c>

	//The flight controller needs the MPU-6050 with gyro and accelerometer
	//If setup is completed without MPU-6050 stop the flight controller program
	if(eeprom_data[31] == 2 || eeprom_data[31] == 3)delay(10);
    1850:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <eeprom_data+0x1f>
    1854:	82 50       	subi	r24, 0x02	; 2
    1856:	82 30       	cpi	r24, 0x02	; 2
    1858:	30 f4       	brcc	.+12     	; 0x1866 <setup+0xd8>
    185a:	6a e0       	ldi	r22, 0x0A	; 10
    185c:	70 e0       	ldi	r23, 0x00	; 0
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <delay>

	set_gyro_registers();                                                     //Set the specific gyro registers.
    1866:	0e 94 15 0b 	call	0x162a	; 0x162a <_Z18set_gyro_registersv>

	for (cal_int = 0; cal_int < 1250 ; cal_int ++){                           //Wait 5 seconds before continuing.
    186a:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <cal_int+0x1>
    186e:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <cal_int>
		PORTD |= B11110000;                                                     //Set digital poort 4, 5, 6 and 7 high.
		delayMicroseconds(1000);                                                //Wait 1000us.
		PORTD &= B00001111;                                                     //Set digital poort 4, 5, 6 and 7 low.
		delayMicroseconds(3000);                                                //Wait 3000us.
		if(cal_int % 15 == 0)digitalWrite(LED_STATUS_PIN, !digitalRead(LED_STATUS_PIN));                //Change the led status to indicate calibration.
    1872:	cf e0       	ldi	r28, 0x0F	; 15
    1874:	d0 e0       	ldi	r29, 0x00	; 0
	//If setup is completed without MPU-6050 stop the flight controller program
	if(eeprom_data[31] == 2 || eeprom_data[31] == 3)delay(10);

	set_gyro_registers();                                                     //Set the specific gyro registers.

	for (cal_int = 0; cal_int < 1250 ; cal_int ++){                           //Wait 5 seconds before continuing.
    1876:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <cal_int>
    187a:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <cal_int+0x1>
    187e:	82 3e       	cpi	r24, 0xE2	; 226
    1880:	94 40       	sbci	r25, 0x04	; 4
    1882:	5c f5       	brge	.+86     	; 0x18da <setup+0x14c>
		PORTD |= B11110000;                                                     //Set digital poort 4, 5, 6 and 7 high.
    1884:	8b b1       	in	r24, 0x0b	; 11
    1886:	80 6f       	ori	r24, 0xF0	; 240
    1888:	8b b9       	out	0x0b, r24	; 11
		delayMicroseconds(1000);                                                //Wait 1000us.
    188a:	88 ee       	ldi	r24, 0xE8	; 232
    188c:	93 e0       	ldi	r25, 0x03	; 3
    188e:	0e 94 03 17 	call	0x2e06	; 0x2e06 <delayMicroseconds>
		PORTD &= B00001111;                                                     //Set digital poort 4, 5, 6 and 7 low.
    1892:	8b b1       	in	r24, 0x0b	; 11
    1894:	8f 70       	andi	r24, 0x0F	; 15
    1896:	8b b9       	out	0x0b, r24	; 11
		delayMicroseconds(3000);                                                //Wait 3000us.
    1898:	88 eb       	ldi	r24, 0xB8	; 184
    189a:	9b e0       	ldi	r25, 0x0B	; 11
    189c:	0e 94 03 17 	call	0x2e06	; 0x2e06 <delayMicroseconds>
		if(cal_int % 15 == 0)digitalWrite(LED_STATUS_PIN, !digitalRead(LED_STATUS_PIN));                //Change the led status to indicate calibration.
    18a0:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <cal_int>
    18a4:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <cal_int+0x1>
    18a8:	be 01       	movw	r22, r28
    18aa:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <__divmodhi4>
    18ae:	89 2b       	or	r24, r25
    18b0:	51 f4       	brne	.+20     	; 0x18c6 <setup+0x138>
    18b2:	8d e0       	ldi	r24, 0x0D	; 13
    18b4:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <digitalRead>
    18b8:	61 e0       	ldi	r22, 0x01	; 1
    18ba:	89 2b       	or	r24, r25
    18bc:	09 f0       	breq	.+2      	; 0x18c0 <setup+0x132>
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	8d e0       	ldi	r24, 0x0D	; 13
    18c2:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <digitalWrite>
	//If setup is completed without MPU-6050 stop the flight controller program
	if(eeprom_data[31] == 2 || eeprom_data[31] == 3)delay(10);

	set_gyro_registers();                                                     //Set the specific gyro registers.

	for (cal_int = 0; cal_int < 1250 ; cal_int ++){                           //Wait 5 seconds before continuing.
    18c6:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <cal_int>
    18ca:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <cal_int+0x1>
    18ce:	01 96       	adiw	r24, 0x01	; 1
    18d0:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <cal_int+0x1>
    18d4:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <cal_int>
    18d8:	ce cf       	rjmp	.-100    	; 0x1876 <setup+0xe8>
		delayMicroseconds(3000);                                                //Wait 3000us.
		if(cal_int % 15 == 0)digitalWrite(LED_STATUS_PIN, !digitalRead(LED_STATUS_PIN));                //Change the led status to indicate calibration.
	}

	//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
	for (cal_int = 0; cal_int < 2000 ; cal_int ++){                           //Take 2000 readings for calibration.
    18da:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <cal_int+0x1>
    18de:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <cal_int>
		if(cal_int % 15 == 0)digitalWrite(LED_STATUS_PIN, !digitalRead(LED_STATUS_PIN));                //Change the led status to indicate calibration.
    18e2:	cf e0       	ldi	r28, 0x0F	; 15
    18e4:	d0 e0       	ldi	r29, 0x00	; 0
		delayMicroseconds(3000);                                                //Wait 3000us.
		if(cal_int % 15 == 0)digitalWrite(LED_STATUS_PIN, !digitalRead(LED_STATUS_PIN));                //Change the led status to indicate calibration.
	}

	//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
	for (cal_int = 0; cal_int < 2000 ; cal_int ++){                           //Take 2000 readings for calibration.
    18e6:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <cal_int>
    18ea:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <cal_int+0x1>
    18ee:	80 3d       	cpi	r24, 0xD0	; 208
    18f0:	27 e0       	ldi	r18, 0x07	; 7
    18f2:	92 07       	cpc	r25, r18
    18f4:	0c f0       	brlt	.+2      	; 0x18f8 <setup+0x16a>
    18f6:	85 c0       	rjmp	.+266    	; 0x1a02 <setup+0x274>
		if(cal_int % 15 == 0)digitalWrite(LED_STATUS_PIN, !digitalRead(LED_STATUS_PIN));                //Change the led status to indicate calibration.
    18f8:	be 01       	movw	r22, r28
    18fa:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <__divmodhi4>
    18fe:	89 2b       	or	r24, r25
    1900:	51 f4       	brne	.+20     	; 0x1916 <setup+0x188>
    1902:	8d e0       	ldi	r24, 0x0D	; 13
    1904:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <digitalRead>
    1908:	61 e0       	ldi	r22, 0x01	; 1
    190a:	89 2b       	or	r24, r25
    190c:	09 f0       	breq	.+2      	; 0x1910 <setup+0x182>
    190e:	60 e0       	ldi	r22, 0x00	; 0
    1910:	8d e0       	ldi	r24, 0x0D	; 13
    1912:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <digitalWrite>
		GyroRead();                                                        //Read the gyro output.
    1916:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_Z8GyroReadv>
		gyro_axis_cal[1] += gyro_axis[1];                                       //Ad roll value to gyro_roll_cal.
    191a:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <gyro_axis+0x2>
    191e:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <gyro_axis+0x3>
    1922:	07 2e       	mov	r0, r23
    1924:	00 0c       	add	r0, r0
    1926:	88 0b       	sbc	r24, r24
    1928:	99 0b       	sbc	r25, r25
    192a:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatsisf>
    192e:	9b 01       	movw	r18, r22
    1930:	ac 01       	movw	r20, r24
    1932:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <gyro_axis_cal+0x4>
    1936:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <gyro_axis_cal+0x5>
    193a:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <gyro_axis_cal+0x6>
    193e:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <gyro_axis_cal+0x7>
    1942:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__addsf3>
    1946:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <gyro_axis_cal+0x4>
    194a:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <gyro_axis_cal+0x5>
    194e:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <gyro_axis_cal+0x6>
    1952:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <gyro_axis_cal+0x7>
		gyro_axis_cal[2] += gyro_axis[2];                                       //Ad pitch value to gyro_pitch_cal.
    1956:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <gyro_axis+0x4>
    195a:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <gyro_axis+0x5>
    195e:	07 2e       	mov	r0, r23
    1960:	00 0c       	add	r0, r0
    1962:	88 0b       	sbc	r24, r24
    1964:	99 0b       	sbc	r25, r25
    1966:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatsisf>
    196a:	9b 01       	movw	r18, r22
    196c:	ac 01       	movw	r20, r24
    196e:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <gyro_axis_cal+0x8>
    1972:	70 91 a3 01 	lds	r23, 0x01A3	; 0x8001a3 <gyro_axis_cal+0x9>
    1976:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <gyro_axis_cal+0xa>
    197a:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <gyro_axis_cal+0xb>
    197e:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__addsf3>
    1982:	60 93 a2 01 	sts	0x01A2, r22	; 0x8001a2 <gyro_axis_cal+0x8>
    1986:	70 93 a3 01 	sts	0x01A3, r23	; 0x8001a3 <gyro_axis_cal+0x9>
    198a:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <gyro_axis_cal+0xa>
    198e:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <gyro_axis_cal+0xb>
		gyro_axis_cal[3] += gyro_axis[3];                                       //Ad yaw value to gyro_yaw_cal.
    1992:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <gyro_axis+0x6>
    1996:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <gyro_axis+0x7>
    199a:	07 2e       	mov	r0, r23
    199c:	00 0c       	add	r0, r0
    199e:	88 0b       	sbc	r24, r24
    19a0:	99 0b       	sbc	r25, r25
    19a2:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatsisf>
    19a6:	9b 01       	movw	r18, r22
    19a8:	ac 01       	movw	r20, r24
    19aa:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <gyro_axis_cal+0xc>
    19ae:	70 91 a7 01 	lds	r23, 0x01A7	; 0x8001a7 <gyro_axis_cal+0xd>
    19b2:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <gyro_axis_cal+0xe>
    19b6:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <gyro_axis_cal+0xf>
    19ba:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__addsf3>
    19be:	60 93 a6 01 	sts	0x01A6, r22	; 0x8001a6 <gyro_axis_cal+0xc>
    19c2:	70 93 a7 01 	sts	0x01A7, r23	; 0x8001a7 <gyro_axis_cal+0xd>
    19c6:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <gyro_axis_cal+0xe>
    19ca:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <gyro_axis_cal+0xf>
		//We don't want the esc's to be beeping annoyingly. So let's give them a 1000us puls while calibrating the gyro.
		PORTD |= B11110000;                                                     //Set digital poort 4, 5, 6 and 7 high.
    19ce:	8b b1       	in	r24, 0x0b	; 11
    19d0:	80 6f       	ori	r24, 0xF0	; 240
    19d2:	8b b9       	out	0x0b, r24	; 11
		delayMicroseconds(1000);                                                //Wait 1000us.
    19d4:	88 ee       	ldi	r24, 0xE8	; 232
    19d6:	93 e0       	ldi	r25, 0x03	; 3
    19d8:	0e 94 03 17 	call	0x2e06	; 0x2e06 <delayMicroseconds>
		PORTD &= B00001111;                                                     //Set digital poort 4, 5, 6 and 7 low.
    19dc:	8b b1       	in	r24, 0x0b	; 11
    19de:	8f 70       	andi	r24, 0x0F	; 15
    19e0:	8b b9       	out	0x0b, r24	; 11
		delay(3);                                                               //Wait 3 milliseconds before the next loop.
    19e2:	63 e0       	ldi	r22, 0x03	; 3
    19e4:	70 e0       	ldi	r23, 0x00	; 0
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <delay>
		delayMicroseconds(3000);                                                //Wait 3000us.
		if(cal_int % 15 == 0)digitalWrite(LED_STATUS_PIN, !digitalRead(LED_STATUS_PIN));                //Change the led status to indicate calibration.
	}

	//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
	for (cal_int = 0; cal_int < 2000 ; cal_int ++){                           //Take 2000 readings for calibration.
    19ee:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <cal_int>
    19f2:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <cal_int+0x1>
    19f6:	01 96       	adiw	r24, 0x01	; 1
    19f8:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <cal_int+0x1>
    19fc:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <cal_int>
    1a00:	72 cf       	rjmp	.-284    	; 0x18e6 <setup+0x158>
		delayMicroseconds(1000);                                                //Wait 1000us.
		PORTD &= B00001111;                                                     //Set digital poort 4, 5, 6 and 7 low.
		delay(3);                                                               //Wait 3 milliseconds before the next loop.
	}
	//Now that we have 2000 measures, we need to devide by 2000 to get the average gyro offset.
	gyro_axis_cal[1] /= 2000;                                                 //Divide the roll total by 2000.
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	4a ef       	ldi	r20, 0xFA	; 250
    1a08:	54 e4       	ldi	r21, 0x44	; 68
    1a0a:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <gyro_axis_cal+0x4>
    1a0e:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <gyro_axis_cal+0x5>
    1a12:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <gyro_axis_cal+0x6>
    1a16:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <gyro_axis_cal+0x7>
    1a1a:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__divsf3>
    1a1e:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <gyro_axis_cal+0x4>
    1a22:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <gyro_axis_cal+0x5>
    1a26:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <gyro_axis_cal+0x6>
    1a2a:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <gyro_axis_cal+0x7>
	gyro_axis_cal[2] /= 2000;                                                 //Divide the pitch total by 2000.
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	4a ef       	ldi	r20, 0xFA	; 250
    1a34:	54 e4       	ldi	r21, 0x44	; 68
    1a36:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <gyro_axis_cal+0x8>
    1a3a:	70 91 a3 01 	lds	r23, 0x01A3	; 0x8001a3 <gyro_axis_cal+0x9>
    1a3e:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <gyro_axis_cal+0xa>
    1a42:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <gyro_axis_cal+0xb>
    1a46:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__divsf3>
    1a4a:	60 93 a2 01 	sts	0x01A2, r22	; 0x8001a2 <gyro_axis_cal+0x8>
    1a4e:	70 93 a3 01 	sts	0x01A3, r23	; 0x8001a3 <gyro_axis_cal+0x9>
    1a52:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <gyro_axis_cal+0xa>
    1a56:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <gyro_axis_cal+0xb>
	gyro_axis_cal[3] /= 2000;                                                 //Divide the yaw total by 2000.
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	4a ef       	ldi	r20, 0xFA	; 250
    1a60:	54 e4       	ldi	r21, 0x44	; 68
    1a62:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <gyro_axis_cal+0xc>
    1a66:	70 91 a7 01 	lds	r23, 0x01A7	; 0x8001a7 <gyro_axis_cal+0xd>
    1a6a:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <gyro_axis_cal+0xe>
    1a6e:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <gyro_axis_cal+0xf>
    1a72:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__divsf3>
    1a76:	60 93 a6 01 	sts	0x01A6, r22	; 0x8001a6 <gyro_axis_cal+0xc>
    1a7a:	70 93 a7 01 	sts	0x01A7, r23	; 0x8001a7 <gyro_axis_cal+0xd>
    1a7e:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <gyro_axis_cal+0xe>
    1a82:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <gyro_axis_cal+0xf>

	PCICR |= (1 << PCIE0);			//Set PCIE0 to enable PCMSK0 scan.
    1a86:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    1a8a:	81 60       	ori	r24, 0x01	; 1
    1a8c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCICR |= (1 << PCIE2);                                                    //Set PCIE0 to enable PCMSK0 scan.
    1a90:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    1a94:	84 60       	ori	r24, 0x04	; 4
    1a96:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK0 |= (1 << PCINT0);                                                  //Set PCINT0 (digital input 8) to trigger an interrupt on state change.
    1a9a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    1a9e:	81 60       	ori	r24, 0x01	; 1
    1aa0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK0 |= (1 << PCINT1);                                                  //Set PCINT1 (digital input 9)to trigger an interrupt on state change.
    1aa4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    1aa8:	82 60       	ori	r24, 0x02	; 2
    1aaa:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK0 |= (1 << PCINT2);                                                  //Set PCINT2 (digital input 10)to trigger an interrupt on state change.
    1aae:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    1ab2:	84 60       	ori	r24, 0x04	; 4
    1ab4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK0 |= (1 << PCINT3);                                                  //Set PCINT3 (digital input 11)to trigger an interrupt on state change.
    1ab8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    1abc:	88 60       	ori	r24, 0x08	; 8
    1abe:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK0 |= (1 << PCINT4);                                                  //Set PCINT3 (digital input 11)to trigger an interrupt on state change.
    1ac2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    1ac6:	80 61       	ori	r24, 0x10	; 16
    1ac8:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK2 |= (1 << PCINT18);
    1acc:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
    1ad0:	84 60       	ori	r24, 0x04	; 4
    1ad2:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
	PCMSK2 |= (1 << PCINT19);
    1ad6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
    1ada:	88 60       	ori	r24, 0x08	; 8
    1adc:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>


	//Wait until the receiver is active and the throtle is set to the lower position.
	while(receiver_input_channel_3 < 990 || receiver_input_channel_3 > 1020 || receiver_input_channel_4 < 1400){
    1ae0:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <receiver_input_channel_3>
    1ae4:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <receiver_input_channel_3+0x1>
    1ae8:	8e 3d       	cpi	r24, 0xDE	; 222
    1aea:	93 40       	sbci	r25, 0x03	; 3
    1aec:	74 f0       	brlt	.+28     	; 0x1b0a <setup+0x37c>
    1aee:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <receiver_input_channel_3>
    1af2:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <receiver_input_channel_3+0x1>
    1af6:	8d 3f       	cpi	r24, 0xFD	; 253
    1af8:	93 40       	sbci	r25, 0x03	; 3
    1afa:	3c f4       	brge	.+14     	; 0x1b0a <setup+0x37c>
    1afc:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <receiver_input_channel_4>
    1b00:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <receiver_input_channel_4+0x1>
    1b04:	88 37       	cpi	r24, 0x78	; 120
    1b06:	95 40       	sbci	r25, 0x05	; 5
    1b08:	f4 f5       	brge	.+124    	; 0x1b86 <setup+0x3f8>
    1b0a:	83 e0       	ldi	r24, 0x03	; 3
    1b0c:	0e 94 ab 00 	call	0x156	; 0x156 <_Z24convert_receiver_channelh.part.1>
		receiver_input_channel_3 = convert_receiver_channel(3);                 //Convert the actual receiver signals for throttle to the standard 1000 - 2000us
    1b10:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <receiver_input_channel_3+0x1>
    1b14:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <receiver_input_channel_3>
    1b18:	84 e0       	ldi	r24, 0x04	; 4
    1b1a:	0e 94 ab 00 	call	0x156	; 0x156 <_Z24convert_receiver_channelh.part.1>
		receiver_input_channel_4 = convert_receiver_channel(4);                 //Convert the actual receiver signals for yaw to the standard 1000 - 2000us
    1b1e:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <receiver_input_channel_4+0x1>
    1b22:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <receiver_input_channel_4>
		start ++;                                                               //While waiting increment start whith every loop.
    1b26:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <start>
    1b2a:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <start+0x1>
    1b2e:	01 96       	adiw	r24, 0x01	; 1
    1b30:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <start+0x1>
    1b34:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <start>
		//We don't want the esc's to be beeping annoyingly. So let's give them a 1000us puls while waiting for the receiver inputs.
		PORTD |= B11110000;                                                     //Set digital poort 4, 5, 6 and 7 high.
    1b38:	8b b1       	in	r24, 0x0b	; 11
    1b3a:	80 6f       	ori	r24, 0xF0	; 240
    1b3c:	8b b9       	out	0x0b, r24	; 11
		delayMicroseconds(1000);                                                //Wait 1000us.
    1b3e:	88 ee       	ldi	r24, 0xE8	; 232
    1b40:	93 e0       	ldi	r25, 0x03	; 3
    1b42:	0e 94 03 17 	call	0x2e06	; 0x2e06 <delayMicroseconds>
		PORTD &= B00001111;                                                     //Set digital poort 4, 5, 6 and 7 low.
    1b46:	8b b1       	in	r24, 0x0b	; 11
    1b48:	8f 70       	andi	r24, 0x0F	; 15
    1b4a:	8b b9       	out	0x0b, r24	; 11
		delay(3);                                                               //Wait 3 milliseconds before the next loop.
    1b4c:	63 e0       	ldi	r22, 0x03	; 3
    1b4e:	70 e0       	ldi	r23, 0x00	; 0
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <delay>
		if(start == 125){                                                       //Every 125 loops (500ms).
    1b58:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <start>
    1b5c:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <start+0x1>
    1b60:	8d 37       	cpi	r24, 0x7D	; 125
    1b62:	91 05       	cpc	r25, r1
    1b64:	09 f0       	breq	.+2      	; 0x1b68 <setup+0x3da>
    1b66:	bc cf       	rjmp	.-136    	; 0x1ae0 <setup+0x352>
			digitalWrite(LED_STATUS_PIN, !digitalRead(LED_STATUS_PIN));                                   //Change the led status.
    1b68:	8d e0       	ldi	r24, 0x0D	; 13
    1b6a:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <digitalRead>
    1b6e:	61 e0       	ldi	r22, 0x01	; 1
    1b70:	89 2b       	or	r24, r25
    1b72:	09 f0       	breq	.+2      	; 0x1b76 <setup+0x3e8>
    1b74:	60 e0       	ldi	r22, 0x00	; 0
    1b76:	8d e0       	ldi	r24, 0x0D	; 13
    1b78:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <digitalWrite>
			start = 0;                                                            //Start again at 0.
    1b7c:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <start+0x1>
    1b80:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <start>
    1b84:	ad cf       	rjmp	.-166    	; 0x1ae0 <setup+0x352>
		}
//		break;
	}
	start = 0;                                                                //Set start back to 0.
    1b86:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <start+0x1>
    1b8a:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <start>
	//65 is the voltage compensation for the diode.
	//12.6V equals ~5V @ Analog 0.
	//12.6V equals 1023 analogRead(0).
	//1260 / 1023 = 1.2317.
	//The variable battery_voltage holds 1050 if the battery voltage is 10.5V.
	battery_voltage = (analogRead(0) + 65) * 1.2317;
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	0e 94 49 17 	call	0x2e92	; 0x2e92 <analogRead>
    1b94:	8f 5b       	subi	r24, 0xBF	; 191
    1b96:	9f 4f       	sbci	r25, 0xFF	; 255
    1b98:	bc 01       	movw	r22, r24
    1b9a:	99 0f       	add	r25, r25
    1b9c:	88 0b       	sbc	r24, r24
    1b9e:	99 0b       	sbc	r25, r25
    1ba0:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatsisf>
    1ba4:	28 e5       	ldi	r18, 0x58	; 88
    1ba6:	38 ea       	ldi	r19, 0xA8	; 168
    1ba8:	4d e9       	ldi	r20, 0x9D	; 157
    1baa:	5f e3       	ldi	r21, 0x3F	; 63
    1bac:	0e 94 38 10 	call	0x2070	; 0x2070 <__mulsf3>
    1bb0:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__fixsfsi>
    1bb4:	70 93 2f 02 	sts	0x022F, r23	; 0x80022f <battery_voltage+0x1>
    1bb8:	60 93 2e 02 	sts	0x022E, r22	; 0x80022e <battery_voltage>

	loop_timer = micros();                                                    //Set the timer for the next loop.
    1bbc:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <micros>
    1bc0:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <loop_timer>
    1bc4:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <loop_timer+0x1>
    1bc8:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <loop_timer+0x2>
    1bcc:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <loop_timer+0x3>
		//angle_roll = angle_roll_acc;                                            //Set the gyro roll angle equal to the accelerometer roll angle when the quadcopter is started.
		//gyro_angles_set = true;                                                 //Set the IMU started flag.

	//When everything is done, turn off the led.
	digitalWrite(LED_STATUS_PIN,LOW);                                                     //Turn off the warning led.
    1bd0:	60 e0       	ldi	r22, 0x00	; 0
    1bd2:	8d e0       	ldi	r24, 0x0D	; 13
    1bd4:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <digitalWrite>
	lightcounter =0;
    1bd8:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <__data_end>
}
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	08 95       	ret

00001be2 <__subsf3>:
    1be2:	50 58       	subi	r21, 0x80	; 128

00001be4 <__addsf3>:
    1be4:	bb 27       	eor	r27, r27
    1be6:	aa 27       	eor	r26, r26
    1be8:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__addsf3x>
    1bec:	0c 94 f9 0f 	jmp	0x1ff2	; 0x1ff2 <__fp_round>
    1bf0:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fp_pscA>
    1bf4:	38 f0       	brcs	.+14     	; 0x1c04 <__addsf3+0x20>
    1bf6:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <__fp_pscB>
    1bfa:	20 f0       	brcs	.+8      	; 0x1c04 <__addsf3+0x20>
    1bfc:	39 f4       	brne	.+14     	; 0x1c0c <__addsf3+0x28>
    1bfe:	9f 3f       	cpi	r25, 0xFF	; 255
    1c00:	19 f4       	brne	.+6      	; 0x1c08 <__addsf3+0x24>
    1c02:	26 f4       	brtc	.+8      	; 0x1c0c <__addsf3+0x28>
    1c04:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <__fp_nan>
    1c08:	0e f4       	brtc	.+2      	; 0x1c0c <__addsf3+0x28>
    1c0a:	e0 95       	com	r30
    1c0c:	e7 fb       	bst	r30, 7
    1c0e:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__fp_inf>

00001c12 <__addsf3x>:
    1c12:	e9 2f       	mov	r30, r25
    1c14:	0e 94 0a 10 	call	0x2014	; 0x2014 <__fp_split3>
    1c18:	58 f3       	brcs	.-42     	; 0x1bf0 <__addsf3+0xc>
    1c1a:	ba 17       	cp	r27, r26
    1c1c:	62 07       	cpc	r22, r18
    1c1e:	73 07       	cpc	r23, r19
    1c20:	84 07       	cpc	r24, r20
    1c22:	95 07       	cpc	r25, r21
    1c24:	20 f0       	brcs	.+8      	; 0x1c2e <__addsf3x+0x1c>
    1c26:	79 f4       	brne	.+30     	; 0x1c46 <__addsf3x+0x34>
    1c28:	a6 f5       	brtc	.+104    	; 0x1c92 <__addsf3x+0x80>
    1c2a:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <__fp_zero>
    1c2e:	0e f4       	brtc	.+2      	; 0x1c32 <__addsf3x+0x20>
    1c30:	e0 95       	com	r30
    1c32:	0b 2e       	mov	r0, r27
    1c34:	ba 2f       	mov	r27, r26
    1c36:	a0 2d       	mov	r26, r0
    1c38:	0b 01       	movw	r0, r22
    1c3a:	b9 01       	movw	r22, r18
    1c3c:	90 01       	movw	r18, r0
    1c3e:	0c 01       	movw	r0, r24
    1c40:	ca 01       	movw	r24, r20
    1c42:	a0 01       	movw	r20, r0
    1c44:	11 24       	eor	r1, r1
    1c46:	ff 27       	eor	r31, r31
    1c48:	59 1b       	sub	r21, r25
    1c4a:	99 f0       	breq	.+38     	; 0x1c72 <__addsf3x+0x60>
    1c4c:	59 3f       	cpi	r21, 0xF9	; 249
    1c4e:	50 f4       	brcc	.+20     	; 0x1c64 <__addsf3x+0x52>
    1c50:	50 3e       	cpi	r21, 0xE0	; 224
    1c52:	68 f1       	brcs	.+90     	; 0x1cae <__addsf3x+0x9c>
    1c54:	1a 16       	cp	r1, r26
    1c56:	f0 40       	sbci	r31, 0x00	; 0
    1c58:	a2 2f       	mov	r26, r18
    1c5a:	23 2f       	mov	r18, r19
    1c5c:	34 2f       	mov	r19, r20
    1c5e:	44 27       	eor	r20, r20
    1c60:	58 5f       	subi	r21, 0xF8	; 248
    1c62:	f3 cf       	rjmp	.-26     	; 0x1c4a <__addsf3x+0x38>
    1c64:	46 95       	lsr	r20
    1c66:	37 95       	ror	r19
    1c68:	27 95       	ror	r18
    1c6a:	a7 95       	ror	r26
    1c6c:	f0 40       	sbci	r31, 0x00	; 0
    1c6e:	53 95       	inc	r21
    1c70:	c9 f7       	brne	.-14     	; 0x1c64 <__addsf3x+0x52>
    1c72:	7e f4       	brtc	.+30     	; 0x1c92 <__addsf3x+0x80>
    1c74:	1f 16       	cp	r1, r31
    1c76:	ba 0b       	sbc	r27, r26
    1c78:	62 0b       	sbc	r22, r18
    1c7a:	73 0b       	sbc	r23, r19
    1c7c:	84 0b       	sbc	r24, r20
    1c7e:	ba f0       	brmi	.+46     	; 0x1cae <__addsf3x+0x9c>
    1c80:	91 50       	subi	r25, 0x01	; 1
    1c82:	a1 f0       	breq	.+40     	; 0x1cac <__addsf3x+0x9a>
    1c84:	ff 0f       	add	r31, r31
    1c86:	bb 1f       	adc	r27, r27
    1c88:	66 1f       	adc	r22, r22
    1c8a:	77 1f       	adc	r23, r23
    1c8c:	88 1f       	adc	r24, r24
    1c8e:	c2 f7       	brpl	.-16     	; 0x1c80 <__addsf3x+0x6e>
    1c90:	0e c0       	rjmp	.+28     	; 0x1cae <__addsf3x+0x9c>
    1c92:	ba 0f       	add	r27, r26
    1c94:	62 1f       	adc	r22, r18
    1c96:	73 1f       	adc	r23, r19
    1c98:	84 1f       	adc	r24, r20
    1c9a:	48 f4       	brcc	.+18     	; 0x1cae <__addsf3x+0x9c>
    1c9c:	87 95       	ror	r24
    1c9e:	77 95       	ror	r23
    1ca0:	67 95       	ror	r22
    1ca2:	b7 95       	ror	r27
    1ca4:	f7 95       	ror	r31
    1ca6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ca8:	08 f0       	brcs	.+2      	; 0x1cac <__addsf3x+0x9a>
    1caa:	b0 cf       	rjmp	.-160    	; 0x1c0c <__addsf3+0x28>
    1cac:	93 95       	inc	r25
    1cae:	88 0f       	add	r24, r24
    1cb0:	08 f0       	brcs	.+2      	; 0x1cb4 <__addsf3x+0xa2>
    1cb2:	99 27       	eor	r25, r25
    1cb4:	ee 0f       	add	r30, r30
    1cb6:	97 95       	ror	r25
    1cb8:	87 95       	ror	r24
    1cba:	08 95       	ret

00001cbc <asin>:
    1cbc:	9f 93       	push	r25
    1cbe:	9f 77       	andi	r25, 0x7F	; 127
    1cc0:	ee e3       	ldi	r30, 0x3E	; 62
    1cc2:	89 37       	cpi	r24, 0x79	; 121
    1cc4:	9e 07       	cpc	r25, r30
    1cc6:	28 f4       	brcc	.+10     	; 0x1cd2 <asin+0x16>
    1cc8:	e8 e6       	ldi	r30, 0x68	; 104
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <__fp_powsodd>
    1cd0:	0c c0       	rjmp	.+24     	; 0x1cea <asin+0x2e>
    1cd2:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fp_arccos>
    1cd6:	90 58       	subi	r25, 0x80	; 128
    1cd8:	a2 ea       	ldi	r26, 0xA2	; 162
    1cda:	2a ed       	ldi	r18, 0xDA	; 218
    1cdc:	3f e0       	ldi	r19, 0x0F	; 15
    1cde:	49 ec       	ldi	r20, 0xC9	; 201
    1ce0:	5f e3       	ldi	r21, 0x3F	; 63
    1ce2:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__addsf3x>
    1ce6:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__fp_round>
    1cea:	0f 90       	pop	r0
    1cec:	07 fc       	sbrc	r0, 7
    1cee:	90 58       	subi	r25, 0x80	; 128
    1cf0:	08 95       	ret

00001cf2 <__cmpsf2>:
    1cf2:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__fp_cmp>
    1cf6:	08 f4       	brcc	.+2      	; 0x1cfa <__cmpsf2+0x8>
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	08 95       	ret

00001cfc <__divsf3>:
    1cfc:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__divsf3x>
    1d00:	0c 94 f9 0f 	jmp	0x1ff2	; 0x1ff2 <__fp_round>
    1d04:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <__fp_pscB>
    1d08:	58 f0       	brcs	.+22     	; 0x1d20 <__divsf3+0x24>
    1d0a:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fp_pscA>
    1d0e:	40 f0       	brcs	.+16     	; 0x1d20 <__divsf3+0x24>
    1d10:	29 f4       	brne	.+10     	; 0x1d1c <__divsf3+0x20>
    1d12:	5f 3f       	cpi	r21, 0xFF	; 255
    1d14:	29 f0       	breq	.+10     	; 0x1d20 <__divsf3+0x24>
    1d16:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__fp_inf>
    1d1a:	51 11       	cpse	r21, r1
    1d1c:	0c 94 2d 10 	jmp	0x205a	; 0x205a <__fp_szero>
    1d20:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <__fp_nan>

00001d24 <__divsf3x>:
    1d24:	0e 94 0a 10 	call	0x2014	; 0x2014 <__fp_split3>
    1d28:	68 f3       	brcs	.-38     	; 0x1d04 <__divsf3+0x8>

00001d2a <__divsf3_pse>:
    1d2a:	99 23       	and	r25, r25
    1d2c:	b1 f3       	breq	.-20     	; 0x1d1a <__divsf3+0x1e>
    1d2e:	55 23       	and	r21, r21
    1d30:	91 f3       	breq	.-28     	; 0x1d16 <__divsf3+0x1a>
    1d32:	95 1b       	sub	r25, r21
    1d34:	55 0b       	sbc	r21, r21
    1d36:	bb 27       	eor	r27, r27
    1d38:	aa 27       	eor	r26, r26
    1d3a:	62 17       	cp	r22, r18
    1d3c:	73 07       	cpc	r23, r19
    1d3e:	84 07       	cpc	r24, r20
    1d40:	38 f0       	brcs	.+14     	; 0x1d50 <__divsf3_pse+0x26>
    1d42:	9f 5f       	subi	r25, 0xFF	; 255
    1d44:	5f 4f       	sbci	r21, 0xFF	; 255
    1d46:	22 0f       	add	r18, r18
    1d48:	33 1f       	adc	r19, r19
    1d4a:	44 1f       	adc	r20, r20
    1d4c:	aa 1f       	adc	r26, r26
    1d4e:	a9 f3       	breq	.-22     	; 0x1d3a <__divsf3_pse+0x10>
    1d50:	35 d0       	rcall	.+106    	; 0x1dbc <__divsf3_pse+0x92>
    1d52:	0e 2e       	mov	r0, r30
    1d54:	3a f0       	brmi	.+14     	; 0x1d64 <__divsf3_pse+0x3a>
    1d56:	e0 e8       	ldi	r30, 0x80	; 128
    1d58:	32 d0       	rcall	.+100    	; 0x1dbe <__divsf3_pse+0x94>
    1d5a:	91 50       	subi	r25, 0x01	; 1
    1d5c:	50 40       	sbci	r21, 0x00	; 0
    1d5e:	e6 95       	lsr	r30
    1d60:	00 1c       	adc	r0, r0
    1d62:	ca f7       	brpl	.-14     	; 0x1d56 <__divsf3_pse+0x2c>
    1d64:	2b d0       	rcall	.+86     	; 0x1dbc <__divsf3_pse+0x92>
    1d66:	fe 2f       	mov	r31, r30
    1d68:	29 d0       	rcall	.+82     	; 0x1dbc <__divsf3_pse+0x92>
    1d6a:	66 0f       	add	r22, r22
    1d6c:	77 1f       	adc	r23, r23
    1d6e:	88 1f       	adc	r24, r24
    1d70:	bb 1f       	adc	r27, r27
    1d72:	26 17       	cp	r18, r22
    1d74:	37 07       	cpc	r19, r23
    1d76:	48 07       	cpc	r20, r24
    1d78:	ab 07       	cpc	r26, r27
    1d7a:	b0 e8       	ldi	r27, 0x80	; 128
    1d7c:	09 f0       	breq	.+2      	; 0x1d80 <__divsf3_pse+0x56>
    1d7e:	bb 0b       	sbc	r27, r27
    1d80:	80 2d       	mov	r24, r0
    1d82:	bf 01       	movw	r22, r30
    1d84:	ff 27       	eor	r31, r31
    1d86:	93 58       	subi	r25, 0x83	; 131
    1d88:	5f 4f       	sbci	r21, 0xFF	; 255
    1d8a:	3a f0       	brmi	.+14     	; 0x1d9a <__divsf3_pse+0x70>
    1d8c:	9e 3f       	cpi	r25, 0xFE	; 254
    1d8e:	51 05       	cpc	r21, r1
    1d90:	78 f0       	brcs	.+30     	; 0x1db0 <__divsf3_pse+0x86>
    1d92:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__fp_inf>
    1d96:	0c 94 2d 10 	jmp	0x205a	; 0x205a <__fp_szero>
    1d9a:	5f 3f       	cpi	r21, 0xFF	; 255
    1d9c:	e4 f3       	brlt	.-8      	; 0x1d96 <__divsf3_pse+0x6c>
    1d9e:	98 3e       	cpi	r25, 0xE8	; 232
    1da0:	d4 f3       	brlt	.-12     	; 0x1d96 <__divsf3_pse+0x6c>
    1da2:	86 95       	lsr	r24
    1da4:	77 95       	ror	r23
    1da6:	67 95       	ror	r22
    1da8:	b7 95       	ror	r27
    1daa:	f7 95       	ror	r31
    1dac:	9f 5f       	subi	r25, 0xFF	; 255
    1dae:	c9 f7       	brne	.-14     	; 0x1da2 <__divsf3_pse+0x78>
    1db0:	88 0f       	add	r24, r24
    1db2:	91 1d       	adc	r25, r1
    1db4:	96 95       	lsr	r25
    1db6:	87 95       	ror	r24
    1db8:	97 f9       	bld	r25, 7
    1dba:	08 95       	ret
    1dbc:	e1 e0       	ldi	r30, 0x01	; 1
    1dbe:	66 0f       	add	r22, r22
    1dc0:	77 1f       	adc	r23, r23
    1dc2:	88 1f       	adc	r24, r24
    1dc4:	bb 1f       	adc	r27, r27
    1dc6:	62 17       	cp	r22, r18
    1dc8:	73 07       	cpc	r23, r19
    1dca:	84 07       	cpc	r24, r20
    1dcc:	ba 07       	cpc	r27, r26
    1dce:	20 f0       	brcs	.+8      	; 0x1dd8 <__divsf3_pse+0xae>
    1dd0:	62 1b       	sub	r22, r18
    1dd2:	73 0b       	sbc	r23, r19
    1dd4:	84 0b       	sbc	r24, r20
    1dd6:	ba 0b       	sbc	r27, r26
    1dd8:	ee 1f       	adc	r30, r30
    1dda:	88 f7       	brcc	.-30     	; 0x1dbe <__divsf3_pse+0x94>
    1ddc:	e0 95       	com	r30
    1dde:	08 95       	ret

00001de0 <__fixsfsi>:
    1de0:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__fixunssfsi>
    1de4:	68 94       	set
    1de6:	b1 11       	cpse	r27, r1
    1de8:	0c 94 2d 10 	jmp	0x205a	; 0x205a <__fp_szero>
    1dec:	08 95       	ret

00001dee <__fixunssfsi>:
    1dee:	0e 94 12 10 	call	0x2024	; 0x2024 <__fp_splitA>
    1df2:	88 f0       	brcs	.+34     	; 0x1e16 <__fixunssfsi+0x28>
    1df4:	9f 57       	subi	r25, 0x7F	; 127
    1df6:	98 f0       	brcs	.+38     	; 0x1e1e <__fixunssfsi+0x30>
    1df8:	b9 2f       	mov	r27, r25
    1dfa:	99 27       	eor	r25, r25
    1dfc:	b7 51       	subi	r27, 0x17	; 23
    1dfe:	b0 f0       	brcs	.+44     	; 0x1e2c <__fixunssfsi+0x3e>
    1e00:	e1 f0       	breq	.+56     	; 0x1e3a <__fixunssfsi+0x4c>
    1e02:	66 0f       	add	r22, r22
    1e04:	77 1f       	adc	r23, r23
    1e06:	88 1f       	adc	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	1a f0       	brmi	.+6      	; 0x1e12 <__fixunssfsi+0x24>
    1e0c:	ba 95       	dec	r27
    1e0e:	c9 f7       	brne	.-14     	; 0x1e02 <__fixunssfsi+0x14>
    1e10:	14 c0       	rjmp	.+40     	; 0x1e3a <__fixunssfsi+0x4c>
    1e12:	b1 30       	cpi	r27, 0x01	; 1
    1e14:	91 f0       	breq	.+36     	; 0x1e3a <__fixunssfsi+0x4c>
    1e16:	0e 94 2c 10 	call	0x2058	; 0x2058 <__fp_zero>
    1e1a:	b1 e0       	ldi	r27, 0x01	; 1
    1e1c:	08 95       	ret
    1e1e:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <__fp_zero>
    1e22:	67 2f       	mov	r22, r23
    1e24:	78 2f       	mov	r23, r24
    1e26:	88 27       	eor	r24, r24
    1e28:	b8 5f       	subi	r27, 0xF8	; 248
    1e2a:	39 f0       	breq	.+14     	; 0x1e3a <__fixunssfsi+0x4c>
    1e2c:	b9 3f       	cpi	r27, 0xF9	; 249
    1e2e:	cc f3       	brlt	.-14     	; 0x1e22 <__fixunssfsi+0x34>
    1e30:	86 95       	lsr	r24
    1e32:	77 95       	ror	r23
    1e34:	67 95       	ror	r22
    1e36:	b3 95       	inc	r27
    1e38:	d9 f7       	brne	.-10     	; 0x1e30 <__fixunssfsi+0x42>
    1e3a:	3e f4       	brtc	.+14     	; 0x1e4a <__fixunssfsi+0x5c>
    1e3c:	90 95       	com	r25
    1e3e:	80 95       	com	r24
    1e40:	70 95       	com	r23
    1e42:	61 95       	neg	r22
    1e44:	7f 4f       	sbci	r23, 0xFF	; 255
    1e46:	8f 4f       	sbci	r24, 0xFF	; 255
    1e48:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4a:	08 95       	ret

00001e4c <__floatunsisf>:
    1e4c:	e8 94       	clt
    1e4e:	09 c0       	rjmp	.+18     	; 0x1e62 <__floatsisf+0x12>

00001e50 <__floatsisf>:
    1e50:	97 fb       	bst	r25, 7
    1e52:	3e f4       	brtc	.+14     	; 0x1e62 <__floatsisf+0x12>
    1e54:	90 95       	com	r25
    1e56:	80 95       	com	r24
    1e58:	70 95       	com	r23
    1e5a:	61 95       	neg	r22
    1e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e60:	9f 4f       	sbci	r25, 0xFF	; 255
    1e62:	99 23       	and	r25, r25
    1e64:	a9 f0       	breq	.+42     	; 0x1e90 <__floatsisf+0x40>
    1e66:	f9 2f       	mov	r31, r25
    1e68:	96 e9       	ldi	r25, 0x96	; 150
    1e6a:	bb 27       	eor	r27, r27
    1e6c:	93 95       	inc	r25
    1e6e:	f6 95       	lsr	r31
    1e70:	87 95       	ror	r24
    1e72:	77 95       	ror	r23
    1e74:	67 95       	ror	r22
    1e76:	b7 95       	ror	r27
    1e78:	f1 11       	cpse	r31, r1
    1e7a:	f8 cf       	rjmp	.-16     	; 0x1e6c <__floatsisf+0x1c>
    1e7c:	fa f4       	brpl	.+62     	; 0x1ebc <__floatsisf+0x6c>
    1e7e:	bb 0f       	add	r27, r27
    1e80:	11 f4       	brne	.+4      	; 0x1e86 <__floatsisf+0x36>
    1e82:	60 ff       	sbrs	r22, 0
    1e84:	1b c0       	rjmp	.+54     	; 0x1ebc <__floatsisf+0x6c>
    1e86:	6f 5f       	subi	r22, 0xFF	; 255
    1e88:	7f 4f       	sbci	r23, 0xFF	; 255
    1e8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e8e:	16 c0       	rjmp	.+44     	; 0x1ebc <__floatsisf+0x6c>
    1e90:	88 23       	and	r24, r24
    1e92:	11 f0       	breq	.+4      	; 0x1e98 <__floatsisf+0x48>
    1e94:	96 e9       	ldi	r25, 0x96	; 150
    1e96:	11 c0       	rjmp	.+34     	; 0x1eba <__floatsisf+0x6a>
    1e98:	77 23       	and	r23, r23
    1e9a:	21 f0       	breq	.+8      	; 0x1ea4 <__floatsisf+0x54>
    1e9c:	9e e8       	ldi	r25, 0x8E	; 142
    1e9e:	87 2f       	mov	r24, r23
    1ea0:	76 2f       	mov	r23, r22
    1ea2:	05 c0       	rjmp	.+10     	; 0x1eae <__floatsisf+0x5e>
    1ea4:	66 23       	and	r22, r22
    1ea6:	71 f0       	breq	.+28     	; 0x1ec4 <__floatsisf+0x74>
    1ea8:	96 e8       	ldi	r25, 0x86	; 134
    1eaa:	86 2f       	mov	r24, r22
    1eac:	70 e0       	ldi	r23, 0x00	; 0
    1eae:	60 e0       	ldi	r22, 0x00	; 0
    1eb0:	2a f0       	brmi	.+10     	; 0x1ebc <__floatsisf+0x6c>
    1eb2:	9a 95       	dec	r25
    1eb4:	66 0f       	add	r22, r22
    1eb6:	77 1f       	adc	r23, r23
    1eb8:	88 1f       	adc	r24, r24
    1eba:	da f7       	brpl	.-10     	; 0x1eb2 <__floatsisf+0x62>
    1ebc:	88 0f       	add	r24, r24
    1ebe:	96 95       	lsr	r25
    1ec0:	87 95       	ror	r24
    1ec2:	97 f9       	bld	r25, 7
    1ec4:	08 95       	ret

00001ec6 <__fp_arccos>:
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	1f 93       	push	r17
    1ecc:	0f 93       	push	r16
    1ece:	8b 01       	movw	r16, r22
    1ed0:	ec 01       	movw	r28, r24
    1ed2:	ec e7       	ldi	r30, 0x7C	; 124
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__fp_powser>
    1eda:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__fp_round>
    1ede:	98 01       	movw	r18, r16
    1ee0:	ae 01       	movw	r20, r28
    1ee2:	8b 01       	movw	r16, r22
    1ee4:	ec 01       	movw	r28, r24
    1ee6:	60 e0       	ldi	r22, 0x00	; 0
    1ee8:	70 e0       	ldi	r23, 0x00	; 0
    1eea:	80 e8       	ldi	r24, 0x80	; 128
    1eec:	9f e3       	ldi	r25, 0x3F	; 63
    1eee:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__subsf3>
    1ef2:	0e 94 ab 10 	call	0x2156	; 0x2156 <sqrt>
    1ef6:	98 01       	movw	r18, r16
    1ef8:	ae 01       	movw	r20, r28
    1efa:	0f 91       	pop	r16
    1efc:	1f 91       	pop	r17
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	0c 94 4b 10 	jmp	0x2096	; 0x2096 <__mulsf3x>

00001f06 <__fp_cmp>:
    1f06:	99 0f       	add	r25, r25
    1f08:	00 08       	sbc	r0, r0
    1f0a:	55 0f       	add	r21, r21
    1f0c:	aa 0b       	sbc	r26, r26
    1f0e:	e0 e8       	ldi	r30, 0x80	; 128
    1f10:	fe ef       	ldi	r31, 0xFE	; 254
    1f12:	16 16       	cp	r1, r22
    1f14:	17 06       	cpc	r1, r23
    1f16:	e8 07       	cpc	r30, r24
    1f18:	f9 07       	cpc	r31, r25
    1f1a:	c0 f0       	brcs	.+48     	; 0x1f4c <__fp_cmp+0x46>
    1f1c:	12 16       	cp	r1, r18
    1f1e:	13 06       	cpc	r1, r19
    1f20:	e4 07       	cpc	r30, r20
    1f22:	f5 07       	cpc	r31, r21
    1f24:	98 f0       	brcs	.+38     	; 0x1f4c <__fp_cmp+0x46>
    1f26:	62 1b       	sub	r22, r18
    1f28:	73 0b       	sbc	r23, r19
    1f2a:	84 0b       	sbc	r24, r20
    1f2c:	95 0b       	sbc	r25, r21
    1f2e:	39 f4       	brne	.+14     	; 0x1f3e <__fp_cmp+0x38>
    1f30:	0a 26       	eor	r0, r26
    1f32:	61 f0       	breq	.+24     	; 0x1f4c <__fp_cmp+0x46>
    1f34:	23 2b       	or	r18, r19
    1f36:	24 2b       	or	r18, r20
    1f38:	25 2b       	or	r18, r21
    1f3a:	21 f4       	brne	.+8      	; 0x1f44 <__fp_cmp+0x3e>
    1f3c:	08 95       	ret
    1f3e:	0a 26       	eor	r0, r26
    1f40:	09 f4       	brne	.+2      	; 0x1f44 <__fp_cmp+0x3e>
    1f42:	a1 40       	sbci	r26, 0x01	; 1
    1f44:	a6 95       	lsr	r26
    1f46:	8f ef       	ldi	r24, 0xFF	; 255
    1f48:	81 1d       	adc	r24, r1
    1f4a:	81 1d       	adc	r24, r1
    1f4c:	08 95       	ret

00001f4e <__fp_inf>:
    1f4e:	97 f9       	bld	r25, 7
    1f50:	9f 67       	ori	r25, 0x7F	; 127
    1f52:	80 e8       	ldi	r24, 0x80	; 128
    1f54:	70 e0       	ldi	r23, 0x00	; 0
    1f56:	60 e0       	ldi	r22, 0x00	; 0
    1f58:	08 95       	ret

00001f5a <__fp_nan>:
    1f5a:	9f ef       	ldi	r25, 0xFF	; 255
    1f5c:	80 ec       	ldi	r24, 0xC0	; 192
    1f5e:	08 95       	ret

00001f60 <__fp_powser>:
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	1f 93       	push	r17
    1f66:	0f 93       	push	r16
    1f68:	ff 92       	push	r15
    1f6a:	ef 92       	push	r14
    1f6c:	df 92       	push	r13
    1f6e:	7b 01       	movw	r14, r22
    1f70:	8c 01       	movw	r16, r24
    1f72:	68 94       	set
    1f74:	06 c0       	rjmp	.+12     	; 0x1f82 <__fp_powser+0x22>
    1f76:	da 2e       	mov	r13, r26
    1f78:	ef 01       	movw	r28, r30
    1f7a:	0e 94 4b 10 	call	0x2096	; 0x2096 <__mulsf3x>
    1f7e:	fe 01       	movw	r30, r28
    1f80:	e8 94       	clt
    1f82:	a5 91       	lpm	r26, Z+
    1f84:	25 91       	lpm	r18, Z+
    1f86:	35 91       	lpm	r19, Z+
    1f88:	45 91       	lpm	r20, Z+
    1f8a:	55 91       	lpm	r21, Z+
    1f8c:	a6 f3       	brts	.-24     	; 0x1f76 <__fp_powser+0x16>
    1f8e:	ef 01       	movw	r28, r30
    1f90:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__addsf3x>
    1f94:	fe 01       	movw	r30, r28
    1f96:	97 01       	movw	r18, r14
    1f98:	a8 01       	movw	r20, r16
    1f9a:	da 94       	dec	r13
    1f9c:	69 f7       	brne	.-38     	; 0x1f78 <__fp_powser+0x18>
    1f9e:	df 90       	pop	r13
    1fa0:	ef 90       	pop	r14
    1fa2:	ff 90       	pop	r15
    1fa4:	0f 91       	pop	r16
    1fa6:	1f 91       	pop	r17
    1fa8:	cf 91       	pop	r28
    1faa:	df 91       	pop	r29
    1fac:	08 95       	ret

00001fae <__fp_powsodd>:
    1fae:	9f 93       	push	r25
    1fb0:	8f 93       	push	r24
    1fb2:	7f 93       	push	r23
    1fb4:	6f 93       	push	r22
    1fb6:	ff 93       	push	r31
    1fb8:	ef 93       	push	r30
    1fba:	9b 01       	movw	r18, r22
    1fbc:	ac 01       	movw	r20, r24
    1fbe:	0e 94 38 10 	call	0x2070	; 0x2070 <__mulsf3>
    1fc2:	ef 91       	pop	r30
    1fc4:	ff 91       	pop	r31
    1fc6:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__fp_powser>
    1fca:	2f 91       	pop	r18
    1fcc:	3f 91       	pop	r19
    1fce:	4f 91       	pop	r20
    1fd0:	5f 91       	pop	r21
    1fd2:	0c 94 38 10 	jmp	0x2070	; 0x2070 <__mulsf3>

00001fd6 <__fp_pscA>:
    1fd6:	00 24       	eor	r0, r0
    1fd8:	0a 94       	dec	r0
    1fda:	16 16       	cp	r1, r22
    1fdc:	17 06       	cpc	r1, r23
    1fde:	18 06       	cpc	r1, r24
    1fe0:	09 06       	cpc	r0, r25
    1fe2:	08 95       	ret

00001fe4 <__fp_pscB>:
    1fe4:	00 24       	eor	r0, r0
    1fe6:	0a 94       	dec	r0
    1fe8:	12 16       	cp	r1, r18
    1fea:	13 06       	cpc	r1, r19
    1fec:	14 06       	cpc	r1, r20
    1fee:	05 06       	cpc	r0, r21
    1ff0:	08 95       	ret

00001ff2 <__fp_round>:
    1ff2:	09 2e       	mov	r0, r25
    1ff4:	03 94       	inc	r0
    1ff6:	00 0c       	add	r0, r0
    1ff8:	11 f4       	brne	.+4      	; 0x1ffe <__fp_round+0xc>
    1ffa:	88 23       	and	r24, r24
    1ffc:	52 f0       	brmi	.+20     	; 0x2012 <__fp_round+0x20>
    1ffe:	bb 0f       	add	r27, r27
    2000:	40 f4       	brcc	.+16     	; 0x2012 <__fp_round+0x20>
    2002:	bf 2b       	or	r27, r31
    2004:	11 f4       	brne	.+4      	; 0x200a <__fp_round+0x18>
    2006:	60 ff       	sbrs	r22, 0
    2008:	04 c0       	rjmp	.+8      	; 0x2012 <__fp_round+0x20>
    200a:	6f 5f       	subi	r22, 0xFF	; 255
    200c:	7f 4f       	sbci	r23, 0xFF	; 255
    200e:	8f 4f       	sbci	r24, 0xFF	; 255
    2010:	9f 4f       	sbci	r25, 0xFF	; 255
    2012:	08 95       	ret

00002014 <__fp_split3>:
    2014:	57 fd       	sbrc	r21, 7
    2016:	90 58       	subi	r25, 0x80	; 128
    2018:	44 0f       	add	r20, r20
    201a:	55 1f       	adc	r21, r21
    201c:	59 f0       	breq	.+22     	; 0x2034 <__fp_splitA+0x10>
    201e:	5f 3f       	cpi	r21, 0xFF	; 255
    2020:	71 f0       	breq	.+28     	; 0x203e <__fp_splitA+0x1a>
    2022:	47 95       	ror	r20

00002024 <__fp_splitA>:
    2024:	88 0f       	add	r24, r24
    2026:	97 fb       	bst	r25, 7
    2028:	99 1f       	adc	r25, r25
    202a:	61 f0       	breq	.+24     	; 0x2044 <__fp_splitA+0x20>
    202c:	9f 3f       	cpi	r25, 0xFF	; 255
    202e:	79 f0       	breq	.+30     	; 0x204e <__fp_splitA+0x2a>
    2030:	87 95       	ror	r24
    2032:	08 95       	ret
    2034:	12 16       	cp	r1, r18
    2036:	13 06       	cpc	r1, r19
    2038:	14 06       	cpc	r1, r20
    203a:	55 1f       	adc	r21, r21
    203c:	f2 cf       	rjmp	.-28     	; 0x2022 <__fp_split3+0xe>
    203e:	46 95       	lsr	r20
    2040:	f1 df       	rcall	.-30     	; 0x2024 <__fp_splitA>
    2042:	08 c0       	rjmp	.+16     	; 0x2054 <__fp_splitA+0x30>
    2044:	16 16       	cp	r1, r22
    2046:	17 06       	cpc	r1, r23
    2048:	18 06       	cpc	r1, r24
    204a:	99 1f       	adc	r25, r25
    204c:	f1 cf       	rjmp	.-30     	; 0x2030 <__fp_splitA+0xc>
    204e:	86 95       	lsr	r24
    2050:	71 05       	cpc	r23, r1
    2052:	61 05       	cpc	r22, r1
    2054:	08 94       	sec
    2056:	08 95       	ret

00002058 <__fp_zero>:
    2058:	e8 94       	clt

0000205a <__fp_szero>:
    205a:	bb 27       	eor	r27, r27
    205c:	66 27       	eor	r22, r22
    205e:	77 27       	eor	r23, r23
    2060:	cb 01       	movw	r24, r22
    2062:	97 f9       	bld	r25, 7
    2064:	08 95       	ret

00002066 <__gesf2>:
    2066:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__fp_cmp>
    206a:	08 f4       	brcc	.+2      	; 0x206e <__gesf2+0x8>
    206c:	8f ef       	ldi	r24, 0xFF	; 255
    206e:	08 95       	ret

00002070 <__mulsf3>:
    2070:	0e 94 4b 10 	call	0x2096	; 0x2096 <__mulsf3x>
    2074:	0c 94 f9 0f 	jmp	0x1ff2	; 0x1ff2 <__fp_round>
    2078:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fp_pscA>
    207c:	38 f0       	brcs	.+14     	; 0x208c <__mulsf3+0x1c>
    207e:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <__fp_pscB>
    2082:	20 f0       	brcs	.+8      	; 0x208c <__mulsf3+0x1c>
    2084:	95 23       	and	r25, r21
    2086:	11 f0       	breq	.+4      	; 0x208c <__mulsf3+0x1c>
    2088:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__fp_inf>
    208c:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <__fp_nan>
    2090:	11 24       	eor	r1, r1
    2092:	0c 94 2d 10 	jmp	0x205a	; 0x205a <__fp_szero>

00002096 <__mulsf3x>:
    2096:	0e 94 0a 10 	call	0x2014	; 0x2014 <__fp_split3>
    209a:	70 f3       	brcs	.-36     	; 0x2078 <__mulsf3+0x8>

0000209c <__mulsf3_pse>:
    209c:	95 9f       	mul	r25, r21
    209e:	c1 f3       	breq	.-16     	; 0x2090 <__mulsf3+0x20>
    20a0:	95 0f       	add	r25, r21
    20a2:	50 e0       	ldi	r21, 0x00	; 0
    20a4:	55 1f       	adc	r21, r21
    20a6:	62 9f       	mul	r22, r18
    20a8:	f0 01       	movw	r30, r0
    20aa:	72 9f       	mul	r23, r18
    20ac:	bb 27       	eor	r27, r27
    20ae:	f0 0d       	add	r31, r0
    20b0:	b1 1d       	adc	r27, r1
    20b2:	63 9f       	mul	r22, r19
    20b4:	aa 27       	eor	r26, r26
    20b6:	f0 0d       	add	r31, r0
    20b8:	b1 1d       	adc	r27, r1
    20ba:	aa 1f       	adc	r26, r26
    20bc:	64 9f       	mul	r22, r20
    20be:	66 27       	eor	r22, r22
    20c0:	b0 0d       	add	r27, r0
    20c2:	a1 1d       	adc	r26, r1
    20c4:	66 1f       	adc	r22, r22
    20c6:	82 9f       	mul	r24, r18
    20c8:	22 27       	eor	r18, r18
    20ca:	b0 0d       	add	r27, r0
    20cc:	a1 1d       	adc	r26, r1
    20ce:	62 1f       	adc	r22, r18
    20d0:	73 9f       	mul	r23, r19
    20d2:	b0 0d       	add	r27, r0
    20d4:	a1 1d       	adc	r26, r1
    20d6:	62 1f       	adc	r22, r18
    20d8:	83 9f       	mul	r24, r19
    20da:	a0 0d       	add	r26, r0
    20dc:	61 1d       	adc	r22, r1
    20de:	22 1f       	adc	r18, r18
    20e0:	74 9f       	mul	r23, r20
    20e2:	33 27       	eor	r19, r19
    20e4:	a0 0d       	add	r26, r0
    20e6:	61 1d       	adc	r22, r1
    20e8:	23 1f       	adc	r18, r19
    20ea:	84 9f       	mul	r24, r20
    20ec:	60 0d       	add	r22, r0
    20ee:	21 1d       	adc	r18, r1
    20f0:	82 2f       	mov	r24, r18
    20f2:	76 2f       	mov	r23, r22
    20f4:	6a 2f       	mov	r22, r26
    20f6:	11 24       	eor	r1, r1
    20f8:	9f 57       	subi	r25, 0x7F	; 127
    20fa:	50 40       	sbci	r21, 0x00	; 0
    20fc:	9a f0       	brmi	.+38     	; 0x2124 <__mulsf3_pse+0x88>
    20fe:	f1 f0       	breq	.+60     	; 0x213c <__mulsf3_pse+0xa0>
    2100:	88 23       	and	r24, r24
    2102:	4a f0       	brmi	.+18     	; 0x2116 <__mulsf3_pse+0x7a>
    2104:	ee 0f       	add	r30, r30
    2106:	ff 1f       	adc	r31, r31
    2108:	bb 1f       	adc	r27, r27
    210a:	66 1f       	adc	r22, r22
    210c:	77 1f       	adc	r23, r23
    210e:	88 1f       	adc	r24, r24
    2110:	91 50       	subi	r25, 0x01	; 1
    2112:	50 40       	sbci	r21, 0x00	; 0
    2114:	a9 f7       	brne	.-22     	; 0x2100 <__mulsf3_pse+0x64>
    2116:	9e 3f       	cpi	r25, 0xFE	; 254
    2118:	51 05       	cpc	r21, r1
    211a:	80 f0       	brcs	.+32     	; 0x213c <__mulsf3_pse+0xa0>
    211c:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__fp_inf>
    2120:	0c 94 2d 10 	jmp	0x205a	; 0x205a <__fp_szero>
    2124:	5f 3f       	cpi	r21, 0xFF	; 255
    2126:	e4 f3       	brlt	.-8      	; 0x2120 <__mulsf3_pse+0x84>
    2128:	98 3e       	cpi	r25, 0xE8	; 232
    212a:	d4 f3       	brlt	.-12     	; 0x2120 <__mulsf3_pse+0x84>
    212c:	86 95       	lsr	r24
    212e:	77 95       	ror	r23
    2130:	67 95       	ror	r22
    2132:	b7 95       	ror	r27
    2134:	f7 95       	ror	r31
    2136:	e7 95       	ror	r30
    2138:	9f 5f       	subi	r25, 0xFF	; 255
    213a:	c1 f7       	brne	.-16     	; 0x212c <__mulsf3_pse+0x90>
    213c:	fe 2b       	or	r31, r30
    213e:	88 0f       	add	r24, r24
    2140:	91 1d       	adc	r25, r1
    2142:	96 95       	lsr	r25
    2144:	87 95       	ror	r24
    2146:	97 f9       	bld	r25, 7
    2148:	08 95       	ret
    214a:	19 f4       	brne	.+6      	; 0x2152 <__mulsf3_pse+0xb6>
    214c:	16 f4       	brtc	.+4      	; 0x2152 <__mulsf3_pse+0xb6>
    214e:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <__fp_nan>
    2152:	0c 94 eb 10 	jmp	0x21d6	; 0x21d6 <__fp_mpack>

00002156 <sqrt>:
    2156:	0e 94 12 10 	call	0x2024	; 0x2024 <__fp_splitA>
    215a:	b8 f3       	brcs	.-18     	; 0x214a <__mulsf3_pse+0xae>
    215c:	99 23       	and	r25, r25
    215e:	c9 f3       	breq	.-14     	; 0x2152 <__mulsf3_pse+0xb6>
    2160:	b6 f3       	brts	.-20     	; 0x214e <__mulsf3_pse+0xb2>
    2162:	9f 57       	subi	r25, 0x7F	; 127
    2164:	55 0b       	sbc	r21, r21
    2166:	87 ff       	sbrs	r24, 7
    2168:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__fp_norm2>
    216c:	00 24       	eor	r0, r0
    216e:	a0 e6       	ldi	r26, 0x60	; 96
    2170:	40 ea       	ldi	r20, 0xA0	; 160
    2172:	90 01       	movw	r18, r0
    2174:	80 58       	subi	r24, 0x80	; 128
    2176:	56 95       	lsr	r21
    2178:	97 95       	ror	r25
    217a:	28 f4       	brcc	.+10     	; 0x2186 <sqrt+0x30>
    217c:	80 5c       	subi	r24, 0xC0	; 192
    217e:	66 0f       	add	r22, r22
    2180:	77 1f       	adc	r23, r23
    2182:	88 1f       	adc	r24, r24
    2184:	20 f0       	brcs	.+8      	; 0x218e <sqrt+0x38>
    2186:	26 17       	cp	r18, r22
    2188:	37 07       	cpc	r19, r23
    218a:	48 07       	cpc	r20, r24
    218c:	30 f4       	brcc	.+12     	; 0x219a <sqrt+0x44>
    218e:	62 1b       	sub	r22, r18
    2190:	73 0b       	sbc	r23, r19
    2192:	84 0b       	sbc	r24, r20
    2194:	20 29       	or	r18, r0
    2196:	31 29       	or	r19, r1
    2198:	4a 2b       	or	r20, r26
    219a:	a6 95       	lsr	r26
    219c:	17 94       	ror	r1
    219e:	07 94       	ror	r0
    21a0:	20 25       	eor	r18, r0
    21a2:	31 25       	eor	r19, r1
    21a4:	4a 27       	eor	r20, r26
    21a6:	58 f7       	brcc	.-42     	; 0x217e <sqrt+0x28>
    21a8:	66 0f       	add	r22, r22
    21aa:	77 1f       	adc	r23, r23
    21ac:	88 1f       	adc	r24, r24
    21ae:	20 f0       	brcs	.+8      	; 0x21b8 <sqrt+0x62>
    21b0:	26 17       	cp	r18, r22
    21b2:	37 07       	cpc	r19, r23
    21b4:	48 07       	cpc	r20, r24
    21b6:	30 f4       	brcc	.+12     	; 0x21c4 <sqrt+0x6e>
    21b8:	62 0b       	sbc	r22, r18
    21ba:	73 0b       	sbc	r23, r19
    21bc:	84 0b       	sbc	r24, r20
    21be:	20 0d       	add	r18, r0
    21c0:	31 1d       	adc	r19, r1
    21c2:	41 1d       	adc	r20, r1
    21c4:	a0 95       	com	r26
    21c6:	81 f7       	brne	.-32     	; 0x21a8 <sqrt+0x52>
    21c8:	b9 01       	movw	r22, r18
    21ca:	84 2f       	mov	r24, r20
    21cc:	91 58       	subi	r25, 0x81	; 129
    21ce:	88 0f       	add	r24, r24
    21d0:	96 95       	lsr	r25
    21d2:	87 95       	ror	r24
    21d4:	08 95       	ret

000021d6 <__fp_mpack>:
    21d6:	9f 3f       	cpi	r25, 0xFF	; 255
    21d8:	31 f0       	breq	.+12     	; 0x21e6 <__fp_mpack_finite+0xc>

000021da <__fp_mpack_finite>:
    21da:	91 50       	subi	r25, 0x01	; 1
    21dc:	20 f4       	brcc	.+8      	; 0x21e6 <__fp_mpack_finite+0xc>
    21de:	87 95       	ror	r24
    21e0:	77 95       	ror	r23
    21e2:	67 95       	ror	r22
    21e4:	b7 95       	ror	r27
    21e6:	88 0f       	add	r24, r24
    21e8:	91 1d       	adc	r25, r1
    21ea:	96 95       	lsr	r25
    21ec:	87 95       	ror	r24
    21ee:	97 f9       	bld	r25, 7
    21f0:	08 95       	ret

000021f2 <__fp_norm2>:
    21f2:	91 50       	subi	r25, 0x01	; 1
    21f4:	50 40       	sbci	r21, 0x00	; 0
    21f6:	66 0f       	add	r22, r22
    21f8:	77 1f       	adc	r23, r23
    21fa:	88 1f       	adc	r24, r24
    21fc:	d2 f7       	brpl	.-12     	; 0x21f2 <__fp_norm2>
    21fe:	08 95       	ret

00002200 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2200:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2202:	91 8d       	ldd	r25, Z+25	; 0x19
    2204:	22 8d       	ldd	r18, Z+26	; 0x1a
    2206:	89 2f       	mov	r24, r25
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	80 5c       	subi	r24, 0xC0	; 192
    220c:	9f 4f       	sbci	r25, 0xFF	; 255
    220e:	82 1b       	sub	r24, r18
    2210:	91 09       	sbc	r25, r1
}
    2212:	8f 73       	andi	r24, 0x3F	; 63
    2214:	99 27       	eor	r25, r25
    2216:	08 95       	ret

00002218 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2218:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    221a:	91 8d       	ldd	r25, Z+25	; 0x19
    221c:	82 8d       	ldd	r24, Z+26	; 0x1a
    221e:	98 17       	cp	r25, r24
    2220:	31 f0       	breq	.+12     	; 0x222e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2222:	82 8d       	ldd	r24, Z+26	; 0x1a
    2224:	e8 0f       	add	r30, r24
    2226:	f1 1d       	adc	r31, r1
    2228:	85 8d       	ldd	r24, Z+29	; 0x1d
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    222e:	8f ef       	ldi	r24, 0xFF	; 255
    2230:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2232:	08 95       	ret

00002234 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    2234:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2236:	91 8d       	ldd	r25, Z+25	; 0x19
    2238:	82 8d       	ldd	r24, Z+26	; 0x1a
    223a:	98 17       	cp	r25, r24
    223c:	61 f0       	breq	.+24     	; 0x2256 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    223e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2240:	df 01       	movw	r26, r30
    2242:	a8 0f       	add	r26, r24
    2244:	b1 1d       	adc	r27, r1
    2246:	5d 96       	adiw	r26, 0x1d	; 29
    2248:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    224a:	92 8d       	ldd	r25, Z+26	; 0x1a
    224c:	9f 5f       	subi	r25, 0xFF	; 255
    224e:	9f 73       	andi	r25, 0x3F	; 63
    2250:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2256:	8f ef       	ldi	r24, 0xFF	; 255
    2258:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    225a:	08 95       	ret

0000225c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    225c:	8b e9       	ldi	r24, 0x9B	; 155
    225e:	92 e1       	ldi	r25, 0x12	; 18
    2260:	89 2b       	or	r24, r25
    2262:	49 f0       	breq	.+18     	; 0x2276 <_Z14serialEventRunv+0x1a>
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	89 2b       	or	r24, r25
    226a:	29 f0       	breq	.+10     	; 0x2276 <_Z14serialEventRunv+0x1a>
    226c:	0e 94 9b 12 	call	0x2536	; 0x2536 <_Z17Serial0_availablev>
    2270:	81 11       	cpse	r24, r1
    2272:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2276:	08 95       	ret

00002278 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2278:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    227a:	84 8d       	ldd	r24, Z+28	; 0x1c
    227c:	df 01       	movw	r26, r30
    227e:	a8 0f       	add	r26, r24
    2280:	b1 1d       	adc	r27, r1
    2282:	a3 5a       	subi	r26, 0xA3	; 163
    2284:	bf 4f       	sbci	r27, 0xFF	; 255
    2286:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2288:	24 8d       	ldd	r18, Z+28	; 0x1c
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	2f 5f       	subi	r18, 0xFF	; 255
    228e:	3f 4f       	sbci	r19, 0xFF	; 255
    2290:	2f 73       	andi	r18, 0x3F	; 63
    2292:	30 78       	andi	r19, 0x80	; 128
    2294:	33 23       	and	r19, r19
    2296:	34 f4       	brge	.+12     	; 0x22a4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    2298:	21 50       	subi	r18, 0x01	; 1
    229a:	31 09       	sbc	r19, r1
    229c:	20 6c       	ori	r18, 0xC0	; 192
    229e:	3f 6f       	ori	r19, 0xFF	; 255
    22a0:	2f 5f       	subi	r18, 0xFF	; 255
    22a2:	3f 4f       	sbci	r19, 0xFF	; 255
    22a4:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
    22a6:	a6 89       	ldd	r26, Z+22	; 0x16
    22a8:	b7 89       	ldd	r27, Z+23	; 0x17
    22aa:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    22ac:	a0 89       	ldd	r26, Z+16	; 0x10
    22ae:	b1 89       	ldd	r27, Z+17	; 0x11
    22b0:	8c 91       	ld	r24, X
    22b2:	80 64       	ori	r24, 0x40	; 64
    22b4:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    22b6:	93 8d       	ldd	r25, Z+27	; 0x1b
    22b8:	84 8d       	ldd	r24, Z+28	; 0x1c
    22ba:	98 13       	cpse	r25, r24
    22bc:	06 c0       	rjmp	.+12     	; 0x22ca <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    22be:	02 88       	ldd	r0, Z+18	; 0x12
    22c0:	f3 89       	ldd	r31, Z+19	; 0x13
    22c2:	e0 2d       	mov	r30, r0
    22c4:	80 81       	ld	r24, Z
    22c6:	8f 7d       	andi	r24, 0xDF	; 223
    22c8:	80 83       	st	Z, r24
    22ca:	08 95       	ret

000022cc <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    22cc:	cf 93       	push	r28
    22ce:	df 93       	push	r29
    22d0:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    22d2:	88 8d       	ldd	r24, Y+24	; 0x18
    22d4:	88 23       	and	r24, r24
    22d6:	d9 f0       	breq	.+54     	; 0x230e <_ZN14HardwareSerial5flushEv+0x42>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    22d8:	ea 89       	ldd	r30, Y+18	; 0x12
    22da:	fb 89       	ldd	r31, Y+19	; 0x13
    22dc:	80 81       	ld	r24, Z
    22de:	85 fd       	sbrc	r24, 5
    22e0:	05 c0       	rjmp	.+10     	; 0x22ec <_ZN14HardwareSerial5flushEv+0x20>
    22e2:	a8 89       	ldd	r26, Y+16	; 0x10
    22e4:	b9 89       	ldd	r27, Y+17	; 0x11
    22e6:	8c 91       	ld	r24, X
    22e8:	86 fd       	sbrc	r24, 6
    22ea:	11 c0       	rjmp	.+34     	; 0x230e <_ZN14HardwareSerial5flushEv+0x42>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	07 fc       	sbrc	r0, 7
    22f0:	f5 cf       	rjmp	.-22     	; 0x22dc <_ZN14HardwareSerial5flushEv+0x10>
    22f2:	80 81       	ld	r24, Z
    22f4:	85 ff       	sbrs	r24, 5
    22f6:	f2 cf       	rjmp	.-28     	; 0x22dc <_ZN14HardwareSerial5flushEv+0x10>
    22f8:	04 c0       	rjmp	.+8      	; 0x2302 <_ZN14HardwareSerial5flushEv+0x36>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
    22fa:	ce 01       	movw	r24, r28
    22fc:	0e 94 3c 11 	call	0x2278	; 0x2278 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2300:	eb cf       	rjmp	.-42     	; 0x22d8 <_ZN14HardwareSerial5flushEv+0xc>
  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    2302:	a8 89       	ldd	r26, Y+16	; 0x10
    2304:	b9 89       	ldd	r27, Y+17	; 0x11
    2306:	8c 91       	ld	r24, X
    2308:	85 ff       	sbrs	r24, 5
    230a:	e8 cf       	rjmp	.-48     	; 0x22dc <_ZN14HardwareSerial5flushEv+0x10>
    230c:	f6 cf       	rjmp	.-20     	; 0x22fa <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    230e:	df 91       	pop	r29
    2310:	cf 91       	pop	r28
    2312:	08 95       	ret

00002314 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    2314:	0f 93       	push	r16
    2316:	1f 93       	push	r17
    2318:	cf 93       	push	r28
    231a:	df 93       	push	r29
    231c:	ec 01       	movw	r28, r24
  _written = true;
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2322:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2324:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2326:	98 13       	cpse	r25, r24
    2328:	23 c0       	rjmp	.+70     	; 0x2370 <_ZN14HardwareSerial5writeEh+0x5c>
    232a:	e8 89       	ldd	r30, Y+16	; 0x10
    232c:	f9 89       	ldd	r31, Y+17	; 0x11
    232e:	80 81       	ld	r24, Z
    2330:	85 fd       	sbrc	r24, 5
    2332:	2f c0       	rjmp	.+94     	; 0x2392 <_ZN14HardwareSerial5writeEh+0x7e>
    2334:	1d c0       	rjmp	.+58     	; 0x2370 <_ZN14HardwareSerial5writeEh+0x5c>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2336:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2338:	19 13       	cpse	r17, r25
    233a:	0c c0       	rjmp	.+24     	; 0x2354 <_ZN14HardwareSerial5writeEh+0x40>
    if (bit_is_clear(SREG, SREG_I)) {
    233c:	0f b6       	in	r0, 0x3f	; 63
    233e:	07 fc       	sbrc	r0, 7
    2340:	fa cf       	rjmp	.-12     	; 0x2336 <_ZN14HardwareSerial5writeEh+0x22>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2342:	e8 89       	ldd	r30, Y+16	; 0x10
    2344:	f9 89       	ldd	r31, Y+17	; 0x11
    2346:	80 81       	ld	r24, Z
    2348:	85 ff       	sbrs	r24, 5
    234a:	f5 cf       	rjmp	.-22     	; 0x2336 <_ZN14HardwareSerial5writeEh+0x22>
	_tx_udr_empty_irq();
    234c:	ce 01       	movw	r24, r28
    234e:	0e 94 3c 11 	call	0x2278	; 0x2278 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2352:	f1 cf       	rjmp	.-30     	; 0x2336 <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2354:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2356:	fe 01       	movw	r30, r28
    2358:	e8 0f       	add	r30, r24
    235a:	f1 1d       	adc	r31, r1
    235c:	e3 5a       	subi	r30, 0xA3	; 163
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	00 83       	st	Z, r16
  _tx_buffer_head = i;
    2362:	1b 8f       	std	Y+27, r17	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    2364:	ea 89       	ldd	r30, Y+18	; 0x12
    2366:	fb 89       	ldd	r31, Y+19	; 0x13
    2368:	80 81       	ld	r24, Z
    236a:	80 62       	ori	r24, 0x20	; 32
    236c:	80 83       	st	Z, r24
  
  return 1;
    236e:	19 c0       	rjmp	.+50     	; 0x23a2 <_ZN14HardwareSerial5writeEh+0x8e>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2370:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	2f 5f       	subi	r18, 0xFF	; 255
    2376:	3f 4f       	sbci	r19, 0xFF	; 255
    2378:	2f 73       	andi	r18, 0x3F	; 63
    237a:	30 78       	andi	r19, 0x80	; 128
    237c:	33 23       	and	r19, r19
    237e:	34 f4       	brge	.+12     	; 0x238c <_ZN14HardwareSerial5writeEh+0x78>
    2380:	21 50       	subi	r18, 0x01	; 1
    2382:	31 09       	sbc	r19, r1
    2384:	20 6c       	ori	r18, 0xC0	; 192
    2386:	3f 6f       	ori	r19, 0xFF	; 255
    2388:	2f 5f       	subi	r18, 0xFF	; 255
    238a:	3f 4f       	sbci	r19, 0xFF	; 255
    238c:	06 2f       	mov	r16, r22
    238e:	12 2f       	mov	r17, r18
    2390:	d2 cf       	rjmp	.-92     	; 0x2336 <_ZN14HardwareSerial5writeEh+0x22>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    2392:	ee 89       	ldd	r30, Y+22	; 0x16
    2394:	ff 89       	ldd	r31, Y+23	; 0x17
    2396:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    2398:	e8 89       	ldd	r30, Y+16	; 0x10
    239a:	f9 89       	ldd	r31, Y+17	; 0x11
    239c:	80 81       	ld	r24, Z
    239e:	80 64       	ori	r24, 0x40	; 64
    23a0:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	df 91       	pop	r29
    23a8:	cf 91       	pop	r28
    23aa:	1f 91       	pop	r17
    23ac:	0f 91       	pop	r16
    23ae:	08 95       	ret

000023b0 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    23b0:	cf 92       	push	r12
    23b2:	df 92       	push	r13
    23b4:	ef 92       	push	r14
    23b6:	ff 92       	push	r15
    23b8:	1f 93       	push	r17
    23ba:	cf 93       	push	r28
    23bc:	df 93       	push	r29
    23be:	ec 01       	movw	r28, r24
    23c0:	6a 01       	movw	r12, r20
    23c2:	7b 01       	movw	r14, r22
    23c4:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    23c6:	e8 89       	ldd	r30, Y+16	; 0x10
    23c8:	f9 89       	ldd	r31, Y+17	; 0x11
    23ca:	82 e0       	ldi	r24, 0x02	; 2
    23cc:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    23ce:	41 15       	cp	r20, r1
    23d0:	51 4e       	sbci	r21, 0xE1	; 225
    23d2:	61 05       	cpc	r22, r1
    23d4:	71 05       	cpc	r23, r1
    23d6:	b1 f0       	breq	.+44     	; 0x2404 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    23d8:	60 e0       	ldi	r22, 0x00	; 0
    23da:	79 e0       	ldi	r23, 0x09	; 9
    23dc:	8d e3       	ldi	r24, 0x3D	; 61
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	a7 01       	movw	r20, r14
    23e2:	96 01       	movw	r18, r12
    23e4:	0e 94 82 1a 	call	0x3504	; 0x3504 <__udivmodsi4>
    23e8:	da 01       	movw	r26, r20
    23ea:	c9 01       	movw	r24, r18
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	a1 09       	sbc	r26, r1
    23f0:	b1 09       	sbc	r27, r1
    23f2:	b6 95       	lsr	r27
    23f4:	a7 95       	ror	r26
    23f6:	97 95       	ror	r25
    23f8:	87 95       	ror	r24
    23fa:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    23fc:	21 15       	cp	r18, r1
    23fe:	80 e1       	ldi	r24, 0x10	; 16
    2400:	38 07       	cpc	r19, r24
    2402:	a8 f0       	brcs	.+42     	; 0x242e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    2404:	e8 89       	ldd	r30, Y+16	; 0x10
    2406:	f9 89       	ldd	r31, Y+17	; 0x11
    2408:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    240a:	60 e8       	ldi	r22, 0x80	; 128
    240c:	74 e8       	ldi	r23, 0x84	; 132
    240e:	8e e1       	ldi	r24, 0x1E	; 30
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	a7 01       	movw	r20, r14
    2414:	96 01       	movw	r18, r12
    2416:	0e 94 82 1a 	call	0x3504	; 0x3504 <__udivmodsi4>
    241a:	da 01       	movw	r26, r20
    241c:	c9 01       	movw	r24, r18
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	a1 09       	sbc	r26, r1
    2422:	b1 09       	sbc	r27, r1
    2424:	b6 95       	lsr	r27
    2426:	a7 95       	ror	r26
    2428:	97 95       	ror	r25
    242a:	87 95       	ror	r24
    242c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    242e:	ec 85       	ldd	r30, Y+12	; 0x0c
    2430:	fd 85       	ldd	r31, Y+13	; 0x0d
    2432:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2434:	ee 85       	ldd	r30, Y+14	; 0x0e
    2436:	ff 85       	ldd	r31, Y+15	; 0x0f
    2438:	20 83       	st	Z, r18

  _written = false;
    243a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    243c:	ec 89       	ldd	r30, Y+20	; 0x14
    243e:	fd 89       	ldd	r31, Y+21	; 0x15
    2440:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    2442:	ea 89       	ldd	r30, Y+18	; 0x12
    2444:	fb 89       	ldd	r31, Y+19	; 0x13
    2446:	80 81       	ld	r24, Z
    2448:	80 61       	ori	r24, 0x10	; 16
    244a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    244c:	ea 89       	ldd	r30, Y+18	; 0x12
    244e:	fb 89       	ldd	r31, Y+19	; 0x13
    2450:	80 81       	ld	r24, Z
    2452:	88 60       	ori	r24, 0x08	; 8
    2454:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2456:	ea 89       	ldd	r30, Y+18	; 0x12
    2458:	fb 89       	ldd	r31, Y+19	; 0x13
    245a:	80 81       	ld	r24, Z
    245c:	80 68       	ori	r24, 0x80	; 128
    245e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2460:	ea 89       	ldd	r30, Y+18	; 0x12
    2462:	fb 89       	ldd	r31, Y+19	; 0x13
    2464:	80 81       	ld	r24, Z
    2466:	8f 7d       	andi	r24, 0xDF	; 223
    2468:	80 83       	st	Z, r24
}
    246a:	df 91       	pop	r29
    246c:	cf 91       	pop	r28
    246e:	1f 91       	pop	r17
    2470:	ff 90       	pop	r15
    2472:	ef 90       	pop	r14
    2474:	df 90       	pop	r13
    2476:	cf 90       	pop	r12
    2478:	08 95       	ret

0000247a <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    247a:	1f 92       	push	r1
    247c:	0f 92       	push	r0
    247e:	0f b6       	in	r0, 0x3f	; 63
    2480:	0f 92       	push	r0
    2482:	11 24       	eor	r1, r1
    2484:	2f 93       	push	r18
    2486:	8f 93       	push	r24
    2488:	9f 93       	push	r25
    248a:	af 93       	push	r26
    248c:	bf 93       	push	r27
    248e:	ef 93       	push	r30
    2490:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2492:	e0 91 81 02 	lds	r30, 0x0281	; 0x800281 <Serial+0x10>
    2496:	f0 91 82 02 	lds	r31, 0x0282	; 0x800282 <Serial+0x11>
    249a:	80 81       	ld	r24, Z
    249c:	82 fd       	sbrc	r24, 2
    249e:	14 c0       	rjmp	.+40     	; 0x24c8 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    24a0:	e1 e7       	ldi	r30, 0x71	; 113
    24a2:	f2 e0       	ldi	r31, 0x02	; 2
    24a4:	a6 89       	ldd	r26, Z+22	; 0x16
    24a6:	b7 89       	ldd	r27, Z+23	; 0x17
    24a8:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    24aa:	81 8d       	ldd	r24, Z+25	; 0x19
    24ac:	8f 5f       	subi	r24, 0xFF	; 255
    24ae:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    24b0:	92 8d       	ldd	r25, Z+26	; 0x1a
    24b2:	89 17       	cp	r24, r25
    24b4:	71 f0       	breq	.+28     	; 0x24d2 <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
    24b6:	df 01       	movw	r26, r30
    24b8:	e1 8d       	ldd	r30, Z+25	; 0x19
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	ef 58       	subi	r30, 0x8F	; 143
    24be:	fd 4f       	sbci	r31, 0xFD	; 253
    24c0:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    24c2:	59 96       	adiw	r26, 0x19	; 25
    24c4:	8c 93       	st	X, r24
    24c6:	05 c0       	rjmp	.+10     	; 0x24d2 <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    24c8:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <Serial+0x16>
    24cc:	f0 91 88 02 	lds	r31, 0x0288	; 0x800288 <Serial+0x17>
    24d0:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    24d2:	ff 91       	pop	r31
    24d4:	ef 91       	pop	r30
    24d6:	bf 91       	pop	r27
    24d8:	af 91       	pop	r26
    24da:	9f 91       	pop	r25
    24dc:	8f 91       	pop	r24
    24de:	2f 91       	pop	r18
    24e0:	0f 90       	pop	r0
    24e2:	0f be       	out	0x3f, r0	; 63
    24e4:	0f 90       	pop	r0
    24e6:	1f 90       	pop	r1
    24e8:	18 95       	reti

000024ea <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    24ea:	1f 92       	push	r1
    24ec:	0f 92       	push	r0
    24ee:	0f b6       	in	r0, 0x3f	; 63
    24f0:	0f 92       	push	r0
    24f2:	11 24       	eor	r1, r1
    24f4:	2f 93       	push	r18
    24f6:	3f 93       	push	r19
    24f8:	4f 93       	push	r20
    24fa:	5f 93       	push	r21
    24fc:	6f 93       	push	r22
    24fe:	7f 93       	push	r23
    2500:	8f 93       	push	r24
    2502:	9f 93       	push	r25
    2504:	af 93       	push	r26
    2506:	bf 93       	push	r27
    2508:	ef 93       	push	r30
    250a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    250c:	81 e7       	ldi	r24, 0x71	; 113
    250e:	92 e0       	ldi	r25, 0x02	; 2
    2510:	0e 94 3c 11 	call	0x2278	; 0x2278 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2514:	ff 91       	pop	r31
    2516:	ef 91       	pop	r30
    2518:	bf 91       	pop	r27
    251a:	af 91       	pop	r26
    251c:	9f 91       	pop	r25
    251e:	8f 91       	pop	r24
    2520:	7f 91       	pop	r23
    2522:	6f 91       	pop	r22
    2524:	5f 91       	pop	r21
    2526:	4f 91       	pop	r20
    2528:	3f 91       	pop	r19
    252a:	2f 91       	pop	r18
    252c:	0f 90       	pop	r0
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	0f 90       	pop	r0
    2532:	1f 90       	pop	r1
    2534:	18 95       	reti

00002536 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2536:	81 e7       	ldi	r24, 0x71	; 113
    2538:	92 e0       	ldi	r25, 0x02	; 2
    253a:	0e 94 00 11 	call	0x2200	; 0x2200 <_ZN14HardwareSerial9availableEv>
    253e:	21 e0       	ldi	r18, 0x01	; 1
    2540:	89 2b       	or	r24, r25
    2542:	09 f4       	brne	.+2      	; 0x2546 <_Z17Serial0_availablev+0x10>
    2544:	20 e0       	ldi	r18, 0x00	; 0
}
    2546:	82 2f       	mov	r24, r18
    2548:	08 95       	ret

0000254a <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    254a:	e1 e7       	ldi	r30, 0x71	; 113
    254c:	f2 e0       	ldi	r31, 0x02	; 2
    254e:	13 82       	std	Z+3, r1	; 0x03
    2550:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2552:	88 ee       	ldi	r24, 0xE8	; 232
    2554:	93 e0       	ldi	r25, 0x03	; 3
    2556:	a0 e0       	ldi	r26, 0x00	; 0
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	84 83       	std	Z+4, r24	; 0x04
    255c:	95 83       	std	Z+5, r25	; 0x05
    255e:	a6 83       	std	Z+6, r26	; 0x06
    2560:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2562:	8a e4       	ldi	r24, 0x4A	; 74
    2564:	91 e0       	ldi	r25, 0x01	; 1
    2566:	91 83       	std	Z+1, r25	; 0x01
    2568:	80 83       	st	Z, r24
    256a:	85 ec       	ldi	r24, 0xC5	; 197
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	95 87       	std	Z+13, r25	; 0x0d
    2570:	84 87       	std	Z+12, r24	; 0x0c
    2572:	84 ec       	ldi	r24, 0xC4	; 196
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	97 87       	std	Z+15, r25	; 0x0f
    2578:	86 87       	std	Z+14, r24	; 0x0e
    257a:	80 ec       	ldi	r24, 0xC0	; 192
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	91 8b       	std	Z+17, r25	; 0x11
    2580:	80 8b       	std	Z+16, r24	; 0x10
    2582:	81 ec       	ldi	r24, 0xC1	; 193
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	93 8b       	std	Z+19, r25	; 0x13
    2588:	82 8b       	std	Z+18, r24	; 0x12
    258a:	82 ec       	ldi	r24, 0xC2	; 194
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	95 8b       	std	Z+21, r25	; 0x15
    2590:	84 8b       	std	Z+20, r24	; 0x14
    2592:	86 ec       	ldi	r24, 0xC6	; 198
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	97 8b       	std	Z+23, r25	; 0x17
    2598:	86 8b       	std	Z+22, r24	; 0x16
    259a:	11 8e       	std	Z+25, r1	; 0x19
    259c:	12 8e       	std	Z+26, r1	; 0x1a
    259e:	13 8e       	std	Z+27, r1	; 0x1b
    25a0:	14 8e       	std	Z+28, r1	; 0x1c
    25a2:	08 95       	ret

000025a4 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    25a4:	08 95       	ret

000025a6 <main>:

int main(void)
{
	init();
    25a6:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <init>

	initVariant();
    25aa:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    25ae:	0e 94 c7 0b 	call	0x178e	; 0x178e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    25b2:	ce e2       	ldi	r28, 0x2E	; 46
    25b4:	d1 e1       	ldi	r29, 0x11	; 17
#endif
	
	setup();
    
	for (;;) {
		loop();
    25b6:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <loop>
		if (serialEventRun) serialEventRun();
    25ba:	20 97       	sbiw	r28, 0x00	; 0
    25bc:	e1 f3       	breq	.-8      	; 0x25b6 <main+0x10>
    25be:	0e 94 2e 11 	call	0x225c	; 0x225c <_Z14serialEventRunv>
    25c2:	f9 cf       	rjmp	.-14     	; 0x25b6 <main+0x10>

000025c4 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    25c4:	cf 92       	push	r12
    25c6:	df 92       	push	r13
    25c8:	ef 92       	push	r14
    25ca:	ff 92       	push	r15
    25cc:	0f 93       	push	r16
    25ce:	1f 93       	push	r17
    25d0:	cf 93       	push	r28
    25d2:	df 93       	push	r29
    25d4:	41 15       	cp	r20, r1
    25d6:	51 05       	cpc	r21, r1
    25d8:	c1 f0       	breq	.+48     	; 0x260a <_ZN5Print5writeEPKhj+0x46>
    25da:	6a 01       	movw	r12, r20
    25dc:	8c 01       	movw	r16, r24
    25de:	e6 2e       	mov	r14, r22
    25e0:	f7 2e       	mov	r15, r23
    25e2:	c0 e0       	ldi	r28, 0x00	; 0
    25e4:	d0 e0       	ldi	r29, 0x00	; 0
    25e6:	d7 01       	movw	r26, r14
    25e8:	6d 91       	ld	r22, X+
    25ea:	7d 01       	movw	r14, r26
    25ec:	d8 01       	movw	r26, r16
    25ee:	ed 91       	ld	r30, X+
    25f0:	fc 91       	ld	r31, X
    25f2:	01 90       	ld	r0, Z+
    25f4:	f0 81       	ld	r31, Z
    25f6:	e0 2d       	mov	r30, r0
    25f8:	c8 01       	movw	r24, r16
    25fa:	09 95       	icall
    25fc:	89 2b       	or	r24, r25
    25fe:	39 f0       	breq	.+14     	; 0x260e <_ZN5Print5writeEPKhj+0x4a>
    2600:	21 96       	adiw	r28, 0x01	; 1
    2602:	cc 16       	cp	r12, r28
    2604:	dd 06       	cpc	r13, r29
    2606:	79 f7       	brne	.-34     	; 0x25e6 <_ZN5Print5writeEPKhj+0x22>
    2608:	02 c0       	rjmp	.+4      	; 0x260e <_ZN5Print5writeEPKhj+0x4a>
    260a:	c0 e0       	ldi	r28, 0x00	; 0
    260c:	d0 e0       	ldi	r29, 0x00	; 0
    260e:	ce 01       	movw	r24, r28
    2610:	df 91       	pop	r29
    2612:	cf 91       	pop	r28
    2614:	1f 91       	pop	r17
    2616:	0f 91       	pop	r16
    2618:	ff 90       	pop	r15
    261a:	ef 90       	pop	r14
    261c:	df 90       	pop	r13
    261e:	cf 90       	pop	r12
    2620:	08 95       	ret

00002622 <_ZN5Print5printEPKc>:
    2622:	61 15       	cp	r22, r1
    2624:	71 05       	cpc	r23, r1
    2626:	81 f0       	breq	.+32     	; 0x2648 <_ZN5Print5printEPKc+0x26>
    2628:	fb 01       	movw	r30, r22
    262a:	01 90       	ld	r0, Z+
    262c:	00 20       	and	r0, r0
    262e:	e9 f7       	brne	.-6      	; 0x262a <_ZN5Print5printEPKc+0x8>
    2630:	31 97       	sbiw	r30, 0x01	; 1
    2632:	af 01       	movw	r20, r30
    2634:	46 1b       	sub	r20, r22
    2636:	57 0b       	sbc	r21, r23
    2638:	dc 01       	movw	r26, r24
    263a:	ed 91       	ld	r30, X+
    263c:	fc 91       	ld	r31, X
    263e:	02 80       	ldd	r0, Z+2	; 0x02
    2640:	f3 81       	ldd	r31, Z+3	; 0x03
    2642:	e0 2d       	mov	r30, r0
    2644:	09 95       	icall
    2646:	08 95       	ret
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	08 95       	ret

0000264e <_ZN5Print5printEc>:
    264e:	dc 01       	movw	r26, r24
    2650:	ed 91       	ld	r30, X+
    2652:	fc 91       	ld	r31, X
    2654:	01 90       	ld	r0, Z+
    2656:	f0 81       	ld	r31, Z
    2658:	e0 2d       	mov	r30, r0
    265a:	09 95       	icall
    265c:	08 95       	ret

0000265e <_ZN5Print7printlnEv>:
    265e:	dc 01       	movw	r26, r24
    2660:	ed 91       	ld	r30, X+
    2662:	fc 91       	ld	r31, X
    2664:	02 80       	ldd	r0, Z+2	; 0x02
    2666:	f3 81       	ldd	r31, Z+3	; 0x03
    2668:	e0 2d       	mov	r30, r0
    266a:	42 e0       	ldi	r20, 0x02	; 2
    266c:	50 e0       	ldi	r21, 0x00	; 0
    266e:	66 e5       	ldi	r22, 0x56	; 86
    2670:	71 e0       	ldi	r23, 0x01	; 1
    2672:	09 95       	icall
    2674:	08 95       	ret

00002676 <_ZN5Print7printlnEPKc>:
    2676:	0f 93       	push	r16
    2678:	1f 93       	push	r17
    267a:	cf 93       	push	r28
    267c:	df 93       	push	r29
    267e:	ec 01       	movw	r28, r24
    2680:	0e 94 11 13 	call	0x2622	; 0x2622 <_ZN5Print5printEPKc>
    2684:	8c 01       	movw	r16, r24
    2686:	ce 01       	movw	r24, r28
    2688:	0e 94 2f 13 	call	0x265e	; 0x265e <_ZN5Print7printlnEv>
    268c:	80 0f       	add	r24, r16
    268e:	91 1f       	adc	r25, r17
    2690:	df 91       	pop	r29
    2692:	cf 91       	pop	r28
    2694:	1f 91       	pop	r17
    2696:	0f 91       	pop	r16
    2698:	08 95       	ret

0000269a <_ZN5Print11printNumberEmh>:
    269a:	8f 92       	push	r8
    269c:	9f 92       	push	r9
    269e:	af 92       	push	r10
    26a0:	bf 92       	push	r11
    26a2:	ef 92       	push	r14
    26a4:	ff 92       	push	r15
    26a6:	0f 93       	push	r16
    26a8:	1f 93       	push	r17
    26aa:	cf 93       	push	r28
    26ac:	df 93       	push	r29
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
    26b2:	a1 97       	sbiw	r28, 0x21	; 33
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	f8 94       	cli
    26b8:	de bf       	out	0x3e, r29	; 62
    26ba:	0f be       	out	0x3f, r0	; 63
    26bc:	cd bf       	out	0x3d, r28	; 61
    26be:	7c 01       	movw	r14, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	ba 01       	movw	r22, r20
    26c4:	19 a2       	std	Y+33, r1	; 0x21
    26c6:	22 30       	cpi	r18, 0x02	; 2
    26c8:	08 f4       	brcc	.+2      	; 0x26cc <_ZN5Print11printNumberEmh+0x32>
    26ca:	2a e0       	ldi	r18, 0x0A	; 10
    26cc:	8e 01       	movw	r16, r28
    26ce:	0f 5d       	subi	r16, 0xDF	; 223
    26d0:	1f 4f       	sbci	r17, 0xFF	; 255
    26d2:	82 2e       	mov	r8, r18
    26d4:	91 2c       	mov	r9, r1
    26d6:	a1 2c       	mov	r10, r1
    26d8:	b1 2c       	mov	r11, r1
    26da:	a5 01       	movw	r20, r10
    26dc:	94 01       	movw	r18, r8
    26de:	0e 94 82 1a 	call	0x3504	; 0x3504 <__udivmodsi4>
    26e2:	e6 2f       	mov	r30, r22
    26e4:	62 2f       	mov	r22, r18
    26e6:	73 2f       	mov	r23, r19
    26e8:	84 2f       	mov	r24, r20
    26ea:	95 2f       	mov	r25, r21
    26ec:	01 50       	subi	r16, 0x01	; 1
    26ee:	11 09       	sbc	r17, r1
    26f0:	ea 30       	cpi	r30, 0x0A	; 10
    26f2:	10 f4       	brcc	.+4      	; 0x26f8 <_ZN5Print11printNumberEmh+0x5e>
    26f4:	e0 5d       	subi	r30, 0xD0	; 208
    26f6:	01 c0       	rjmp	.+2      	; 0x26fa <_ZN5Print11printNumberEmh+0x60>
    26f8:	e9 5c       	subi	r30, 0xC9	; 201
    26fa:	d8 01       	movw	r26, r16
    26fc:	ec 93       	st	X, r30
    26fe:	61 15       	cp	r22, r1
    2700:	71 05       	cpc	r23, r1
    2702:	81 05       	cpc	r24, r1
    2704:	91 05       	cpc	r25, r1
    2706:	49 f7       	brne	.-46     	; 0x26da <_ZN5Print11printNumberEmh+0x40>
    2708:	01 15       	cp	r16, r1
    270a:	11 05       	cpc	r17, r1
    270c:	91 f0       	breq	.+36     	; 0x2732 <_ZN5Print11printNumberEmh+0x98>
    270e:	f8 01       	movw	r30, r16
    2710:	01 90       	ld	r0, Z+
    2712:	00 20       	and	r0, r0
    2714:	e9 f7       	brne	.-6      	; 0x2710 <_ZN5Print11printNumberEmh+0x76>
    2716:	31 97       	sbiw	r30, 0x01	; 1
    2718:	af 01       	movw	r20, r30
    271a:	40 1b       	sub	r20, r16
    271c:	51 0b       	sbc	r21, r17
    271e:	d7 01       	movw	r26, r14
    2720:	ed 91       	ld	r30, X+
    2722:	fc 91       	ld	r31, X
    2724:	02 80       	ldd	r0, Z+2	; 0x02
    2726:	f3 81       	ldd	r31, Z+3	; 0x03
    2728:	e0 2d       	mov	r30, r0
    272a:	b8 01       	movw	r22, r16
    272c:	c7 01       	movw	r24, r14
    272e:	09 95       	icall
    2730:	02 c0       	rjmp	.+4      	; 0x2736 <_ZN5Print11printNumberEmh+0x9c>
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	a1 96       	adiw	r28, 0x21	; 33
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	f8 94       	cli
    273c:	de bf       	out	0x3e, r29	; 62
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	cd bf       	out	0x3d, r28	; 61
    2742:	df 91       	pop	r29
    2744:	cf 91       	pop	r28
    2746:	1f 91       	pop	r17
    2748:	0f 91       	pop	r16
    274a:	ff 90       	pop	r15
    274c:	ef 90       	pop	r14
    274e:	bf 90       	pop	r11
    2750:	af 90       	pop	r10
    2752:	9f 90       	pop	r9
    2754:	8f 90       	pop	r8
    2756:	08 95       	ret

00002758 <_ZN5Print5printEli>:
    2758:	cf 92       	push	r12
    275a:	df 92       	push	r13
    275c:	ef 92       	push	r14
    275e:	ff 92       	push	r15
    2760:	0f 93       	push	r16
    2762:	1f 93       	push	r17
    2764:	cf 93       	push	r28
    2766:	df 93       	push	r29
    2768:	ec 01       	movw	r28, r24
    276a:	6a 01       	movw	r12, r20
    276c:	7b 01       	movw	r14, r22
    276e:	21 15       	cp	r18, r1
    2770:	31 05       	cpc	r19, r1
    2772:	41 f4       	brne	.+16     	; 0x2784 <_ZN5Print5printEli+0x2c>
    2774:	e8 81       	ld	r30, Y
    2776:	f9 81       	ldd	r31, Y+1	; 0x01
    2778:	01 90       	ld	r0, Z+
    277a:	f0 81       	ld	r31, Z
    277c:	e0 2d       	mov	r30, r0
    277e:	64 2f       	mov	r22, r20
    2780:	09 95       	icall
    2782:	1d c0       	rjmp	.+58     	; 0x27be <_ZN5Print5printEli+0x66>
    2784:	2a 30       	cpi	r18, 0x0A	; 10
    2786:	31 05       	cpc	r19, r1
    2788:	c1 f4       	brne	.+48     	; 0x27ba <_ZN5Print5printEli+0x62>
    278a:	77 23       	and	r23, r23
    278c:	94 f4       	brge	.+36     	; 0x27b2 <_ZN5Print5printEli+0x5a>
    278e:	6d e2       	ldi	r22, 0x2D	; 45
    2790:	0e 94 27 13 	call	0x264e	; 0x264e <_ZN5Print5printEc>
    2794:	8c 01       	movw	r16, r24
    2796:	44 27       	eor	r20, r20
    2798:	55 27       	eor	r21, r21
    279a:	ba 01       	movw	r22, r20
    279c:	4c 19       	sub	r20, r12
    279e:	5d 09       	sbc	r21, r13
    27a0:	6e 09       	sbc	r22, r14
    27a2:	7f 09       	sbc	r23, r15
    27a4:	2a e0       	ldi	r18, 0x0A	; 10
    27a6:	ce 01       	movw	r24, r28
    27a8:	0e 94 4d 13 	call	0x269a	; 0x269a <_ZN5Print11printNumberEmh>
    27ac:	80 0f       	add	r24, r16
    27ae:	91 1f       	adc	r25, r17
    27b0:	06 c0       	rjmp	.+12     	; 0x27be <_ZN5Print5printEli+0x66>
    27b2:	2a e0       	ldi	r18, 0x0A	; 10
    27b4:	0e 94 4d 13 	call	0x269a	; 0x269a <_ZN5Print11printNumberEmh>
    27b8:	02 c0       	rjmp	.+4      	; 0x27be <_ZN5Print5printEli+0x66>
    27ba:	0e 94 4d 13 	call	0x269a	; 0x269a <_ZN5Print11printNumberEmh>
    27be:	df 91       	pop	r29
    27c0:	cf 91       	pop	r28
    27c2:	1f 91       	pop	r17
    27c4:	0f 91       	pop	r16
    27c6:	ff 90       	pop	r15
    27c8:	ef 90       	pop	r14
    27ca:	df 90       	pop	r13
    27cc:	cf 90       	pop	r12
    27ce:	08 95       	ret

000027d0 <_ZN5Print5printEii>:
    27d0:	9a 01       	movw	r18, r20
    27d2:	ab 01       	movw	r20, r22
    27d4:	77 0f       	add	r23, r23
    27d6:	66 0b       	sbc	r22, r22
    27d8:	77 0b       	sbc	r23, r23
    27da:	0e 94 ac 13 	call	0x2758	; 0x2758 <_ZN5Print5printEli>
    27de:	08 95       	ret

000027e0 <_ZN5Print5printEmi>:
    27e0:	21 15       	cp	r18, r1
    27e2:	31 05       	cpc	r19, r1
    27e4:	49 f4       	brne	.+18     	; 0x27f8 <_ZN5Print5printEmi+0x18>
    27e6:	dc 01       	movw	r26, r24
    27e8:	ed 91       	ld	r30, X+
    27ea:	fc 91       	ld	r31, X
    27ec:	01 90       	ld	r0, Z+
    27ee:	f0 81       	ld	r31, Z
    27f0:	e0 2d       	mov	r30, r0
    27f2:	64 2f       	mov	r22, r20
    27f4:	09 95       	icall
    27f6:	08 95       	ret
    27f8:	0e 94 4d 13 	call	0x269a	; 0x269a <_ZN5Print11printNumberEmh>
    27fc:	08 95       	ret

000027fe <_ZN5Print5printEji>:
    27fe:	9a 01       	movw	r18, r20
    2800:	ab 01       	movw	r20, r22
    2802:	60 e0       	ldi	r22, 0x00	; 0
    2804:	70 e0       	ldi	r23, 0x00	; 0
    2806:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN5Print5printEmi>
    280a:	08 95       	ret

0000280c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    280c:	7f 92       	push	r7
    280e:	8f 92       	push	r8
    2810:	9f 92       	push	r9
    2812:	af 92       	push	r10
    2814:	bf 92       	push	r11
    2816:	cf 92       	push	r12
    2818:	df 92       	push	r13
    281a:	ef 92       	push	r14
    281c:	ff 92       	push	r15
    281e:	0f 93       	push	r16
    2820:	1f 93       	push	r17
    2822:	cf 93       	push	r28
    2824:	df 93       	push	r29
    2826:	00 d0       	rcall	.+0      	; 0x2828 <_ZN5Print10printFloatEdh+0x1c>
    2828:	00 d0       	rcall	.+0      	; 0x282a <_ZN5Print10printFloatEdh+0x1e>
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
    282e:	8c 01       	movw	r16, r24
    2830:	4a 01       	movw	r8, r20
    2832:	5b 01       	movw	r10, r22
    2834:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    2836:	9a 01       	movw	r18, r20
    2838:	ab 01       	movw	r20, r22
    283a:	c5 01       	movw	r24, r10
    283c:	b4 01       	movw	r22, r8
    283e:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <__unordsf2>
    2842:	88 23       	and	r24, r24
    2844:	31 f0       	breq	.+12     	; 0x2852 <_ZN5Print10printFloatEdh+0x46>
    2846:	69 e5       	ldi	r22, 0x59	; 89
    2848:	71 e0       	ldi	r23, 0x01	; 1
    284a:	c8 01       	movw	r24, r16
    284c:	0e 94 11 13 	call	0x2622	; 0x2622 <_ZN5Print5printEPKc>
    2850:	d7 c0       	rjmp	.+430    	; 0x2a00 <_ZN5Print10printFloatEdh+0x1f4>
  if (isinf(number)) return print("inf");
    2852:	75 01       	movw	r14, r10
    2854:	64 01       	movw	r12, r8
    2856:	e8 94       	clt
    2858:	f7 f8       	bld	r15, 7
    285a:	2f ef       	ldi	r18, 0xFF	; 255
    285c:	3f ef       	ldi	r19, 0xFF	; 255
    285e:	4f e7       	ldi	r20, 0x7F	; 127
    2860:	5f e7       	ldi	r21, 0x7F	; 127
    2862:	c7 01       	movw	r24, r14
    2864:	b6 01       	movw	r22, r12
    2866:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <__unordsf2>
    286a:	81 11       	cpse	r24, r1
    286c:	10 c0       	rjmp	.+32     	; 0x288e <_ZN5Print10printFloatEdh+0x82>
    286e:	2f ef       	ldi	r18, 0xFF	; 255
    2870:	3f ef       	ldi	r19, 0xFF	; 255
    2872:	4f e7       	ldi	r20, 0x7F	; 127
    2874:	5f e7       	ldi	r21, 0x7F	; 127
    2876:	c7 01       	movw	r24, r14
    2878:	b6 01       	movw	r22, r12
    287a:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__cmpsf2>
    287e:	18 16       	cp	r1, r24
    2880:	34 f4       	brge	.+12     	; 0x288e <_ZN5Print10printFloatEdh+0x82>
    2882:	6d e5       	ldi	r22, 0x5D	; 93
    2884:	71 e0       	ldi	r23, 0x01	; 1
    2886:	c8 01       	movw	r24, r16
    2888:	0e 94 11 13 	call	0x2622	; 0x2622 <_ZN5Print5printEPKc>
    288c:	b9 c0       	rjmp	.+370    	; 0x2a00 <_ZN5Print10printFloatEdh+0x1f4>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    288e:	2f ef       	ldi	r18, 0xFF	; 255
    2890:	3f ef       	ldi	r19, 0xFF	; 255
    2892:	4f e7       	ldi	r20, 0x7F	; 127
    2894:	5f e4       	ldi	r21, 0x4F	; 79
    2896:	c5 01       	movw	r24, r10
    2898:	b4 01       	movw	r22, r8
    289a:	0e 94 33 10 	call	0x2066	; 0x2066 <__gesf2>
    289e:	18 16       	cp	r1, r24
    28a0:	34 f4       	brge	.+12     	; 0x28ae <_ZN5Print10printFloatEdh+0xa2>
    28a2:	61 e6       	ldi	r22, 0x61	; 97
    28a4:	71 e0       	ldi	r23, 0x01	; 1
    28a6:	c8 01       	movw	r24, r16
    28a8:	0e 94 11 13 	call	0x2622	; 0x2622 <_ZN5Print5printEPKc>
    28ac:	a9 c0       	rjmp	.+338    	; 0x2a00 <_ZN5Print10printFloatEdh+0x1f4>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    28ae:	2f ef       	ldi	r18, 0xFF	; 255
    28b0:	3f ef       	ldi	r19, 0xFF	; 255
    28b2:	4f e7       	ldi	r20, 0x7F	; 127
    28b4:	5f ec       	ldi	r21, 0xCF	; 207
    28b6:	c5 01       	movw	r24, r10
    28b8:	b4 01       	movw	r22, r8
    28ba:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__cmpsf2>
    28be:	88 23       	and	r24, r24
    28c0:	34 f4       	brge	.+12     	; 0x28ce <_ZN5Print10printFloatEdh+0xc2>
    28c2:	61 e6       	ldi	r22, 0x61	; 97
    28c4:	71 e0       	ldi	r23, 0x01	; 1
    28c6:	c8 01       	movw	r24, r16
    28c8:	0e 94 11 13 	call	0x2622	; 0x2622 <_ZN5Print5printEPKc>
    28cc:	99 c0       	rjmp	.+306    	; 0x2a00 <_ZN5Print10printFloatEdh+0x1f4>
  
  // Handle negative numbers
  if (number < 0.0)
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	a9 01       	movw	r20, r18
    28d4:	c5 01       	movw	r24, r10
    28d6:	b4 01       	movw	r22, r8
    28d8:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__cmpsf2>
    28dc:	88 23       	and	r24, r24
    28de:	54 f4       	brge	.+20     	; 0x28f4 <_ZN5Print10printFloatEdh+0xe8>
  {
     n += print('-');
    28e0:	6d e2       	ldi	r22, 0x2D	; 45
    28e2:	c8 01       	movw	r24, r16
    28e4:	0e 94 27 13 	call	0x264e	; 0x264e <_ZN5Print5printEc>
    28e8:	7c 01       	movw	r14, r24
     number = -number;
    28ea:	b7 fa       	bst	r11, 7
    28ec:	b0 94       	com	r11
    28ee:	b7 f8       	bld	r11, 7
    28f0:	b0 94       	com	r11
    28f2:	02 c0       	rjmp	.+4      	; 0x28f8 <_ZN5Print10printFloatEdh+0xec>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    28f4:	e1 2c       	mov	r14, r1
    28f6:	f1 2c       	mov	r15, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    28f8:	77 20       	and	r7, r7
    28fa:	09 f4       	brne	.+2      	; 0x28fe <_ZN5Print10printFloatEdh+0xf2>
    28fc:	6e c0       	rjmp	.+220    	; 0x29da <_ZN5Print10printFloatEdh+0x1ce>
    28fe:	19 82       	std	Y+1, r1	; 0x01
    2900:	60 e0       	ldi	r22, 0x00	; 0
    2902:	70 e0       	ldi	r23, 0x00	; 0
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	9f e3       	ldi	r25, 0x3F	; 63
    rounding /= 10.0;
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	40 e2       	ldi	r20, 0x20	; 32
    290e:	51 e4       	ldi	r21, 0x41	; 65
    2910:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2914:	29 81       	ldd	r18, Y+1	; 0x01
    2916:	2f 5f       	subi	r18, 0xFF	; 255
    2918:	29 83       	std	Y+1, r18	; 0x01
    291a:	72 12       	cpse	r7, r18
    291c:	f5 cf       	rjmp	.-22     	; 0x2908 <_ZN5Print10printFloatEdh+0xfc>
    291e:	2c c0       	rjmp	.+88     	; 0x2978 <_ZN5Print10printFloatEdh+0x16c>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	40 e2       	ldi	r20, 0x20	; 32
    2926:	51 e4       	ldi	r21, 0x41	; 65
    2928:	c5 01       	movw	r24, r10
    292a:	b4 01       	movw	r22, r8
    292c:	0e 94 38 10 	call	0x2070	; 0x2070 <__mulsf3>
    2930:	4b 01       	movw	r8, r22
    2932:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    2934:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__fixunssfsi>
    2938:	6b 01       	movw	r12, r22
    293a:	7c 01       	movw	r14, r24
    n += print(toPrint);
    293c:	4a e0       	ldi	r20, 0x0A	; 10
    293e:	50 e0       	ldi	r21, 0x00	; 0
    2940:	c8 01       	movw	r24, r16
    2942:	0e 94 ff 13 	call	0x27fe	; 0x27fe <_ZN5Print5printEji>
    2946:	29 81       	ldd	r18, Y+1	; 0x01
    2948:	3a 81       	ldd	r19, Y+2	; 0x02
    294a:	28 0f       	add	r18, r24
    294c:	39 1f       	adc	r19, r25
    294e:	3a 83       	std	Y+2, r19	; 0x02
    2950:	29 83       	std	Y+1, r18	; 0x01
    remainder -= toPrint; 
    2952:	b6 01       	movw	r22, r12
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <__floatunsisf>
    295c:	9b 01       	movw	r18, r22
    295e:	ac 01       	movw	r20, r24
    2960:	c5 01       	movw	r24, r10
    2962:	b4 01       	movw	r22, r8
    2964:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__subsf3>
    2968:	4b 01       	movw	r8, r22
    296a:	5c 01       	movw	r10, r24
    296c:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    296e:	71 10       	cpse	r7, r1
    2970:	d7 cf       	rjmp	.-82     	; 0x2920 <_ZN5Print10printFloatEdh+0x114>
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
    2972:	89 81       	ldd	r24, Y+1	; 0x01
    2974:	9a 81       	ldd	r25, Y+2	; 0x02
    2976:	44 c0       	rjmp	.+136    	; 0x2a00 <_ZN5Print10printFloatEdh+0x1f4>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    2978:	9b 01       	movw	r18, r22
    297a:	ac 01       	movw	r20, r24
    297c:	c5 01       	movw	r24, r10
    297e:	b4 01       	movw	r22, r8
    2980:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__addsf3>
    2984:	4b 01       	movw	r8, r22
    2986:	5c 01       	movw	r10, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2988:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__fixunssfsi>
    298c:	69 83       	std	Y+1, r22	; 0x01
    298e:	7a 83       	std	Y+2, r23	; 0x02
    2990:	8b 83       	std	Y+3, r24	; 0x03
    2992:	9c 83       	std	Y+4, r25	; 0x04
  double remainder = number - (double)int_part;
    2994:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <__floatunsisf>
    2998:	9b 01       	movw	r18, r22
    299a:	ac 01       	movw	r20, r24
    299c:	c5 01       	movw	r24, r10
    299e:	b4 01       	movw	r22, r8
    29a0:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__subsf3>
    29a4:	4b 01       	movw	r8, r22
    29a6:	5c 01       	movw	r10, r24
  n += print(int_part);
    29a8:	2a e0       	ldi	r18, 0x0A	; 10
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	49 81       	ldd	r20, Y+1	; 0x01
    29ae:	5a 81       	ldd	r21, Y+2	; 0x02
    29b0:	6b 81       	ldd	r22, Y+3	; 0x03
    29b2:	7c 81       	ldd	r23, Y+4	; 0x04
    29b4:	c8 01       	movw	r24, r16
    29b6:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN5Print5printEmi>
    29ba:	9a 83       	std	Y+2, r25	; 0x02
    29bc:	89 83       	std	Y+1, r24	; 0x01

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    29be:	6e e2       	ldi	r22, 0x2E	; 46
    29c0:	c8 01       	movw	r24, r16
    29c2:	0e 94 27 13 	call	0x264e	; 0x264e <_ZN5Print5printEc>
    29c6:	29 81       	ldd	r18, Y+1	; 0x01
    29c8:	3a 81       	ldd	r19, Y+2	; 0x02
    29ca:	82 0f       	add	r24, r18
    29cc:	93 1f       	adc	r25, r19
    29ce:	9c 01       	movw	r18, r24
    29d0:	2e 0d       	add	r18, r14
    29d2:	3f 1d       	adc	r19, r15
    29d4:	3a 83       	std	Y+2, r19	; 0x02
    29d6:	29 83       	std	Y+1, r18	; 0x01
    29d8:	a3 cf       	rjmp	.-186    	; 0x2920 <_ZN5Print10printFloatEdh+0x114>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	40 e0       	ldi	r20, 0x00	; 0
    29e0:	5f e3       	ldi	r21, 0x3F	; 63
    29e2:	c5 01       	movw	r24, r10
    29e4:	b4 01       	movw	r22, r8
    29e6:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__addsf3>
    29ea:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__fixunssfsi>
    29ee:	ab 01       	movw	r20, r22
    29f0:	bc 01       	movw	r22, r24
    29f2:	2a e0       	ldi	r18, 0x0A	; 10
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	c8 01       	movw	r24, r16
    29f8:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN5Print5printEmi>
    29fc:	8e 0d       	add	r24, r14
    29fe:	9f 1d       	adc	r25, r15
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2a00:	0f 90       	pop	r0
    2a02:	0f 90       	pop	r0
    2a04:	0f 90       	pop	r0
    2a06:	0f 90       	pop	r0
    2a08:	df 91       	pop	r29
    2a0a:	cf 91       	pop	r28
    2a0c:	1f 91       	pop	r17
    2a0e:	0f 91       	pop	r16
    2a10:	ff 90       	pop	r15
    2a12:	ef 90       	pop	r14
    2a14:	df 90       	pop	r13
    2a16:	cf 90       	pop	r12
    2a18:	bf 90       	pop	r11
    2a1a:	af 90       	pop	r10
    2a1c:	9f 90       	pop	r9
    2a1e:	8f 90       	pop	r8
    2a20:	7f 90       	pop	r7
    2a22:	08 95       	ret

00002a24 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2a24:	0e 94 06 14 	call	0x280c	; 0x280c <_ZN5Print10printFloatEdh>
}
    2a28:	08 95       	ret

00002a2a <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2a2a:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <_ZN7TwoWire14rxBufferLengthE>
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	20 91 3f 03 	lds	r18, 0x033F	; 0x80033f <_ZN7TwoWire13rxBufferIndexE>
    2a34:	82 1b       	sub	r24, r18
    2a36:	91 09       	sbc	r25, r1
    2a38:	08 95       	ret

00002a3a <_ZN7TwoWire4readEv>:
    2a3a:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <_ZN7TwoWire13rxBufferIndexE>
    2a3e:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <_ZN7TwoWire14rxBufferLengthE>
    2a42:	98 17       	cp	r25, r24
    2a44:	50 f4       	brcc	.+20     	; 0x2a5a <_ZN7TwoWire4readEv+0x20>
    2a46:	e9 2f       	mov	r30, r25
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	e0 5c       	subi	r30, 0xC0	; 192
    2a4c:	fc 4f       	sbci	r31, 0xFC	; 252
    2a4e:	20 81       	ld	r18, Z
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	9f 5f       	subi	r25, 0xFF	; 255
    2a54:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <_ZN7TwoWire13rxBufferIndexE>
    2a58:	02 c0       	rjmp	.+4      	; 0x2a5e <_ZN7TwoWire4readEv+0x24>
    2a5a:	2f ef       	ldi	r18, 0xFF	; 255
    2a5c:	3f ef       	ldi	r19, 0xFF	; 255
    2a5e:	c9 01       	movw	r24, r18
    2a60:	08 95       	ret

00002a62 <_ZN7TwoWire4peekEv>:
    2a62:	e0 91 3f 03 	lds	r30, 0x033F	; 0x80033f <_ZN7TwoWire13rxBufferIndexE>
    2a66:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <_ZN7TwoWire14rxBufferLengthE>
    2a6a:	e8 17       	cp	r30, r24
    2a6c:	30 f4       	brcc	.+12     	; 0x2a7a <_ZN7TwoWire4peekEv+0x18>
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	e0 5c       	subi	r30, 0xC0	; 192
    2a72:	fc 4f       	sbci	r31, 0xFC	; 252
    2a74:	80 81       	ld	r24, Z
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	08 95       	ret
    2a7a:	8f ef       	ldi	r24, 0xFF	; 255
    2a7c:	9f ef       	ldi	r25, 0xFF	; 255
    2a7e:	08 95       	ret

00002a80 <_ZN7TwoWire5flushEv>:
    2a80:	08 95       	ret

00002a82 <_ZN7TwoWire5writeEPKhj>:
    2a82:	cf 92       	push	r12
    2a84:	df 92       	push	r13
    2a86:	ef 92       	push	r14
    2a88:	ff 92       	push	r15
    2a8a:	0f 93       	push	r16
    2a8c:	1f 93       	push	r17
    2a8e:	cf 93       	push	r28
    2a90:	df 93       	push	r29
    2a92:	8c 01       	movw	r16, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	6a 01       	movw	r12, r20
    2a98:	20 91 1a 03 	lds	r18, 0x031A	; 0x80031a <_ZN7TwoWire12transmittingE>
    2a9c:	22 23       	and	r18, r18
    2a9e:	a1 f0       	breq	.+40     	; 0x2ac8 <_ZN7TwoWire5writeEPKhj+0x46>
    2aa0:	41 15       	cp	r20, r1
    2aa2:	51 05       	cpc	r21, r1
    2aa4:	a1 f0       	breq	.+40     	; 0x2ace <_ZN7TwoWire5writeEPKhj+0x4c>
    2aa6:	eb 01       	movw	r28, r22
    2aa8:	7b 01       	movw	r14, r22
    2aaa:	e4 0e       	add	r14, r20
    2aac:	f5 1e       	adc	r15, r21
    2aae:	69 91       	ld	r22, Y+
    2ab0:	d8 01       	movw	r26, r16
    2ab2:	ed 91       	ld	r30, X+
    2ab4:	fc 91       	ld	r31, X
    2ab6:	01 90       	ld	r0, Z+
    2ab8:	f0 81       	ld	r31, Z
    2aba:	e0 2d       	mov	r30, r0
    2abc:	c8 01       	movw	r24, r16
    2abe:	09 95       	icall
    2ac0:	ce 15       	cp	r28, r14
    2ac2:	df 05       	cpc	r29, r15
    2ac4:	a1 f7       	brne	.-24     	; 0x2aae <_ZN7TwoWire5writeEPKhj+0x2c>
    2ac6:	03 c0       	rjmp	.+6      	; 0x2ace <_ZN7TwoWire5writeEPKhj+0x4c>
    2ac8:	64 2f       	mov	r22, r20
    2aca:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <twi_transmit>
    2ace:	c6 01       	movw	r24, r12
    2ad0:	df 91       	pop	r29
    2ad2:	cf 91       	pop	r28
    2ad4:	1f 91       	pop	r17
    2ad6:	0f 91       	pop	r16
    2ad8:	ff 90       	pop	r15
    2ada:	ef 90       	pop	r14
    2adc:	df 90       	pop	r13
    2ade:	cf 90       	pop	r12
    2ae0:	08 95       	ret

00002ae2 <_ZN7TwoWire5writeEh>:
    2ae2:	cf 93       	push	r28
    2ae4:	df 93       	push	r29
    2ae6:	1f 92       	push	r1
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
    2aec:	fc 01       	movw	r30, r24
    2aee:	69 83       	std	Y+1, r22	; 0x01
    2af0:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <_ZN7TwoWire12transmittingE>
    2af4:	99 23       	and	r25, r25
    2af6:	d9 f0       	breq	.+54     	; 0x2b2e <_ZN7TwoWire5writeEh+0x4c>
    2af8:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <_ZN7TwoWire14txBufferLengthE>
    2afc:	90 32       	cpi	r25, 0x20	; 32
    2afe:	38 f0       	brcs	.+14     	; 0x2b0e <_ZN7TwoWire5writeEh+0x2c>
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	93 83       	std	Z+3, r25	; 0x03
    2b06:	82 83       	std	Z+2, r24	; 0x02
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	17 c0       	rjmp	.+46     	; 0x2b3c <_ZN7TwoWire5writeEh+0x5a>
    2b0e:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <_ZN7TwoWire13txBufferIndexE>
    2b12:	e8 2f       	mov	r30, r24
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	e3 5e       	subi	r30, 0xE3	; 227
    2b18:	fc 4f       	sbci	r31, 0xFC	; 252
    2b1a:	99 81       	ldd	r25, Y+1	; 0x01
    2b1c:	90 83       	st	Z, r25
    2b1e:	8f 5f       	subi	r24, 0xFF	; 255
    2b20:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <_ZN7TwoWire13txBufferIndexE>
    2b24:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <_ZN7TwoWire14txBufferLengthE>
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	07 c0       	rjmp	.+14     	; 0x2b3c <_ZN7TwoWire5writeEh+0x5a>
    2b2e:	61 e0       	ldi	r22, 0x01	; 1
    2b30:	ce 01       	movw	r24, r28
    2b32:	01 96       	adiw	r24, 0x01	; 1
    2b34:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <twi_transmit>
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	0f 90       	pop	r0
    2b3e:	df 91       	pop	r29
    2b40:	cf 91       	pop	r28
    2b42:	08 95       	ret

00002b44 <_ZN7TwoWireC1Ev>:
    2b44:	fc 01       	movw	r30, r24
    2b46:	13 82       	std	Z+3, r1	; 0x03
    2b48:	12 82       	std	Z+2, r1	; 0x02
    2b4a:	88 ee       	ldi	r24, 0xE8	; 232
    2b4c:	93 e0       	ldi	r25, 0x03	; 3
    2b4e:	a0 e0       	ldi	r26, 0x00	; 0
    2b50:	b0 e0       	ldi	r27, 0x00	; 0
    2b52:	84 83       	std	Z+4, r24	; 0x04
    2b54:	95 83       	std	Z+5, r25	; 0x05
    2b56:	a6 83       	std	Z+6, r26	; 0x06
    2b58:	b7 83       	std	Z+7, r27	; 0x07
    2b5a:	89 e6       	ldi	r24, 0x69	; 105
    2b5c:	91 e0       	ldi	r25, 0x01	; 1
    2b5e:	91 83       	std	Z+1, r25	; 0x01
    2b60:	80 83       	st	Z, r24
    2b62:	08 95       	ret

00002b64 <_ZN7TwoWire5beginEv>:
    2b64:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <_ZN7TwoWire13rxBufferIndexE>
    2b68:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <_ZN7TwoWire14rxBufferLengthE>
    2b6c:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <_ZN7TwoWire13txBufferIndexE>
    2b70:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <_ZN7TwoWire14txBufferLengthE>
    2b74:	0e 94 24 18 	call	0x3048	; 0x3048 <twi_init>
    2b78:	08 95       	ret

00002b7a <_ZN7TwoWire8setClockEm>:
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	ba 01       	movw	r22, r20
    2b7e:	0e 94 42 18 	call	0x3084	; 0x3084 <twi_setFrequency>
    2b82:	08 95       	ret

00002b84 <_ZN7TwoWire17beginTransmissionEh>:
    2b84:	81 e0       	ldi	r24, 0x01	; 1
    2b86:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <_ZN7TwoWire12transmittingE>
    2b8a:	60 93 3d 03 	sts	0x033D, r22	; 0x80033d <_ZN7TwoWire9txAddressE>
    2b8e:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <_ZN7TwoWire13txBufferIndexE>
    2b92:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <_ZN7TwoWire14txBufferLengthE>
    2b96:	08 95       	ret

00002b98 <_ZN7TwoWire17beginTransmissionEi>:
    2b98:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <_ZN7TwoWire17beginTransmissionEh>
    2b9c:	08 95       	ret

00002b9e <_ZN7TwoWire15endTransmissionEh>:
    2b9e:	0f 93       	push	r16
    2ba0:	06 2f       	mov	r16, r22
    2ba2:	21 e0       	ldi	r18, 0x01	; 1
    2ba4:	40 91 1b 03 	lds	r20, 0x031B	; 0x80031b <_ZN7TwoWire14txBufferLengthE>
    2ba8:	6d e1       	ldi	r22, 0x1D	; 29
    2baa:	73 e0       	ldi	r23, 0x03	; 3
    2bac:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <_ZN7TwoWire9txAddressE>
    2bb0:	0e 94 9e 18 	call	0x313c	; 0x313c <twi_writeTo>
    2bb4:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <_ZN7TwoWire13txBufferIndexE>
    2bb8:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <_ZN7TwoWire14txBufferLengthE>
    2bbc:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <_ZN7TwoWire12transmittingE>
    2bc0:	0f 91       	pop	r16
    2bc2:	08 95       	ret

00002bc4 <_ZN7TwoWire11requestFromEhhmhh>:
    2bc4:	4f 92       	push	r4
    2bc6:	5f 92       	push	r5
    2bc8:	6f 92       	push	r6
    2bca:	7f 92       	push	r7
    2bcc:	af 92       	push	r10
    2bce:	bf 92       	push	r11
    2bd0:	cf 92       	push	r12
    2bd2:	ef 92       	push	r14
    2bd4:	ff 92       	push	r15
    2bd6:	0f 93       	push	r16
    2bd8:	1f 93       	push	r17
    2bda:	cf 93       	push	r28
    2bdc:	df 93       	push	r29
    2bde:	5c 01       	movw	r10, r24
    2be0:	f6 2e       	mov	r15, r22
    2be2:	d4 2f       	mov	r29, r20
    2be4:	28 01       	movw	r4, r16
    2be6:	39 01       	movw	r6, r18
    2be8:	ee 20       	and	r14, r14
    2bea:	49 f1       	breq	.+82     	; 0x2c3e <_ZN7TwoWire11requestFromEhhmhh+0x7a>
    2bec:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <_ZN7TwoWire17beginTransmissionEh>
    2bf0:	8e 2d       	mov	r24, r14
    2bf2:	84 30       	cpi	r24, 0x04	; 4
    2bf4:	08 f0       	brcs	.+2      	; 0x2bf8 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2bf6:	83 e0       	ldi	r24, 0x03	; 3
    2bf8:	cf ef       	ldi	r28, 0xFF	; 255
    2bfa:	c8 0f       	add	r28, r24
    2bfc:	88 23       	and	r24, r24
    2bfe:	d9 f0       	breq	.+54     	; 0x2c36 <_ZN7TwoWire11requestFromEhhmhh+0x72>
    2c00:	8c 2f       	mov	r24, r28
    2c02:	88 0f       	add	r24, r24
    2c04:	88 0f       	add	r24, r24
    2c06:	88 0f       	add	r24, r24
    2c08:	a3 01       	movw	r20, r6
    2c0a:	92 01       	movw	r18, r4
    2c0c:	04 c0       	rjmp	.+8      	; 0x2c16 <_ZN7TwoWire11requestFromEhhmhh+0x52>
    2c0e:	56 95       	lsr	r21
    2c10:	47 95       	ror	r20
    2c12:	37 95       	ror	r19
    2c14:	27 95       	ror	r18
    2c16:	8a 95       	dec	r24
    2c18:	d2 f7       	brpl	.-12     	; 0x2c0e <_ZN7TwoWire11requestFromEhhmhh+0x4a>
    2c1a:	ca 01       	movw	r24, r20
    2c1c:	b9 01       	movw	r22, r18
    2c1e:	d5 01       	movw	r26, r10
    2c20:	ed 91       	ld	r30, X+
    2c22:	fc 91       	ld	r31, X
    2c24:	01 90       	ld	r0, Z+
    2c26:	f0 81       	ld	r31, Z
    2c28:	e0 2d       	mov	r30, r0
    2c2a:	c5 01       	movw	r24, r10
    2c2c:	09 95       	icall
    2c2e:	8c 2f       	mov	r24, r28
    2c30:	c1 50       	subi	r28, 0x01	; 1
    2c32:	81 11       	cpse	r24, r1
    2c34:	e5 cf       	rjmp	.-54     	; 0x2c00 <_ZN7TwoWire11requestFromEhhmhh+0x3c>
    2c36:	60 e0       	ldi	r22, 0x00	; 0
    2c38:	c5 01       	movw	r24, r10
    2c3a:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <_ZN7TwoWire15endTransmissionEh>
    2c3e:	4d 2f       	mov	r20, r29
    2c40:	d1 32       	cpi	r29, 0x21	; 33
    2c42:	08 f0       	brcs	.+2      	; 0x2c46 <_ZN7TwoWire11requestFromEhhmhh+0x82>
    2c44:	40 e2       	ldi	r20, 0x20	; 32
    2c46:	2c 2d       	mov	r18, r12
    2c48:	60 e4       	ldi	r22, 0x40	; 64
    2c4a:	73 e0       	ldi	r23, 0x03	; 3
    2c4c:	8f 2d       	mov	r24, r15
    2c4e:	0e 94 56 18 	call	0x30ac	; 0x30ac <twi_readFrom>
    2c52:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <_ZN7TwoWire13rxBufferIndexE>
    2c56:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <_ZN7TwoWire14rxBufferLengthE>
    2c5a:	df 91       	pop	r29
    2c5c:	cf 91       	pop	r28
    2c5e:	1f 91       	pop	r17
    2c60:	0f 91       	pop	r16
    2c62:	ff 90       	pop	r15
    2c64:	ef 90       	pop	r14
    2c66:	cf 90       	pop	r12
    2c68:	bf 90       	pop	r11
    2c6a:	af 90       	pop	r10
    2c6c:	7f 90       	pop	r7
    2c6e:	6f 90       	pop	r6
    2c70:	5f 90       	pop	r5
    2c72:	4f 90       	pop	r4
    2c74:	08 95       	ret

00002c76 <_ZN7TwoWire11requestFromEhhh>:
    2c76:	cf 92       	push	r12
    2c78:	ef 92       	push	r14
    2c7a:	0f 93       	push	r16
    2c7c:	1f 93       	push	r17
    2c7e:	c2 2e       	mov	r12, r18
    2c80:	e1 2c       	mov	r14, r1
    2c82:	00 e0       	ldi	r16, 0x00	; 0
    2c84:	10 e0       	ldi	r17, 0x00	; 0
    2c86:	98 01       	movw	r18, r16
    2c88:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <_ZN7TwoWire11requestFromEhhmhh>
    2c8c:	1f 91       	pop	r17
    2c8e:	0f 91       	pop	r16
    2c90:	ef 90       	pop	r14
    2c92:	cf 90       	pop	r12
    2c94:	08 95       	ret

00002c96 <_ZN7TwoWire11requestFromEii>:
    2c96:	21 e0       	ldi	r18, 0x01	; 1
    2c98:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <_ZN7TwoWire11requestFromEhhh>
    2c9c:	08 95       	ret

00002c9e <_ZN7TwoWire15endTransmissionEv>:
    2c9e:	61 e0       	ldi	r22, 0x01	; 1
    2ca0:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <_ZN7TwoWire15endTransmissionEh>
    2ca4:	08 95       	ret

00002ca6 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2ca6:	8e e0       	ldi	r24, 0x0E	; 14
    2ca8:	93 e0       	ldi	r25, 0x03	; 3
    2caa:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <_ZN7TwoWireC1Ev>
    2cae:	08 95       	ret

00002cb0 <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    2cb0:	1f 92       	push	r1
    2cb2:	0f 92       	push	r0
    2cb4:	0f b6       	in	r0, 0x3f	; 63
    2cb6:	0f 92       	push	r0
    2cb8:	11 24       	eor	r1, r1
    2cba:	2f 93       	push	r18
    2cbc:	3f 93       	push	r19
    2cbe:	8f 93       	push	r24
    2cc0:	9f 93       	push	r25
    2cc2:	af 93       	push	r26
    2cc4:	bf 93       	push	r27
    2cc6:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <timer0_millis>
    2cca:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <timer0_millis+0x1>
    2cce:	a0 91 63 03 	lds	r26, 0x0363	; 0x800363 <timer0_millis+0x2>
    2cd2:	b0 91 64 03 	lds	r27, 0x0364	; 0x800364 <timer0_millis+0x3>
    2cd6:	30 91 60 03 	lds	r19, 0x0360	; 0x800360 <timer0_fract>
    2cda:	23 e0       	ldi	r18, 0x03	; 3
    2cdc:	23 0f       	add	r18, r19
    2cde:	2d 37       	cpi	r18, 0x7D	; 125
    2ce0:	20 f4       	brcc	.+8      	; 0x2cea <__vector_16+0x3a>
    2ce2:	01 96       	adiw	r24, 0x01	; 1
    2ce4:	a1 1d       	adc	r26, r1
    2ce6:	b1 1d       	adc	r27, r1
    2ce8:	05 c0       	rjmp	.+10     	; 0x2cf4 <__vector_16+0x44>
    2cea:	26 e8       	ldi	r18, 0x86	; 134
    2cec:	23 0f       	add	r18, r19
    2cee:	02 96       	adiw	r24, 0x02	; 2
    2cf0:	a1 1d       	adc	r26, r1
    2cf2:	b1 1d       	adc	r27, r1
    2cf4:	20 93 60 03 	sts	0x0360, r18	; 0x800360 <timer0_fract>
    2cf8:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <timer0_millis>
    2cfc:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <timer0_millis+0x1>
    2d00:	a0 93 63 03 	sts	0x0363, r26	; 0x800363 <timer0_millis+0x2>
    2d04:	b0 93 64 03 	sts	0x0364, r27	; 0x800364 <timer0_millis+0x3>
    2d08:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <timer0_overflow_count>
    2d0c:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <timer0_overflow_count+0x1>
    2d10:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <timer0_overflow_count+0x2>
    2d14:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <timer0_overflow_count+0x3>
    2d18:	01 96       	adiw	r24, 0x01	; 1
    2d1a:	a1 1d       	adc	r26, r1
    2d1c:	b1 1d       	adc	r27, r1
    2d1e:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <timer0_overflow_count>
    2d22:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <timer0_overflow_count+0x1>
    2d26:	a0 93 67 03 	sts	0x0367, r26	; 0x800367 <timer0_overflow_count+0x2>
    2d2a:	b0 93 68 03 	sts	0x0368, r27	; 0x800368 <timer0_overflow_count+0x3>
    2d2e:	bf 91       	pop	r27
    2d30:	af 91       	pop	r26
    2d32:	9f 91       	pop	r25
    2d34:	8f 91       	pop	r24
    2d36:	3f 91       	pop	r19
    2d38:	2f 91       	pop	r18
    2d3a:	0f 90       	pop	r0
    2d3c:	0f be       	out	0x3f, r0	; 63
    2d3e:	0f 90       	pop	r0
    2d40:	1f 90       	pop	r1
    2d42:	18 95       	reti

00002d44 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2d44:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2d46:	f8 94       	cli
	m = timer0_overflow_count;
    2d48:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <timer0_overflow_count>
    2d4c:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <timer0_overflow_count+0x1>
    2d50:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <timer0_overflow_count+0x2>
    2d54:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    2d58:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2d5a:	a8 9b       	sbis	0x15, 0	; 21
    2d5c:	05 c0       	rjmp	.+10     	; 0x2d68 <micros+0x24>
    2d5e:	2f 3f       	cpi	r18, 0xFF	; 255
    2d60:	19 f0       	breq	.+6      	; 0x2d68 <micros+0x24>
		m++;
    2d62:	01 96       	adiw	r24, 0x01	; 1
    2d64:	a1 1d       	adc	r26, r1
    2d66:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2d68:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2d6a:	ba 2f       	mov	r27, r26
    2d6c:	a9 2f       	mov	r26, r25
    2d6e:	98 2f       	mov	r25, r24
    2d70:	88 27       	eor	r24, r24
    2d72:	82 0f       	add	r24, r18
    2d74:	91 1d       	adc	r25, r1
    2d76:	a1 1d       	adc	r26, r1
    2d78:	b1 1d       	adc	r27, r1
    2d7a:	bc 01       	movw	r22, r24
    2d7c:	cd 01       	movw	r24, r26
    2d7e:	42 e0       	ldi	r20, 0x02	; 2
    2d80:	66 0f       	add	r22, r22
    2d82:	77 1f       	adc	r23, r23
    2d84:	88 1f       	adc	r24, r24
    2d86:	99 1f       	adc	r25, r25
    2d88:	4a 95       	dec	r20
    2d8a:	d1 f7       	brne	.-12     	; 0x2d80 <micros+0x3c>
}
    2d8c:	08 95       	ret

00002d8e <delay>:

void delay(unsigned long ms)
{
    2d8e:	8f 92       	push	r8
    2d90:	9f 92       	push	r9
    2d92:	af 92       	push	r10
    2d94:	bf 92       	push	r11
    2d96:	cf 92       	push	r12
    2d98:	df 92       	push	r13
    2d9a:	ef 92       	push	r14
    2d9c:	ff 92       	push	r15
    2d9e:	6b 01       	movw	r12, r22
    2da0:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    2da2:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <micros>
    2da6:	4b 01       	movw	r8, r22
    2da8:	5c 01       	movw	r10, r24

	while (ms > 0) {
    2daa:	c1 14       	cp	r12, r1
    2dac:	d1 04       	cpc	r13, r1
    2dae:	e1 04       	cpc	r14, r1
    2db0:	f1 04       	cpc	r15, r1
    2db2:	01 f1       	breq	.+64     	; 0x2df4 <delay+0x66>
		yield();
    2db4:	0e 94 23 18 	call	0x3046	; 0x3046 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    2db8:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <micros>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	88 19       	sub	r24, r8
    2dc2:	99 09       	sbc	r25, r9
    2dc4:	aa 09       	sbc	r26, r10
    2dc6:	bb 09       	sbc	r27, r11
    2dc8:	88 3e       	cpi	r24, 0xE8	; 232
    2dca:	93 40       	sbci	r25, 0x03	; 3
    2dcc:	a1 05       	cpc	r26, r1
    2dce:	b1 05       	cpc	r27, r1
    2dd0:	60 f3       	brcs	.-40     	; 0x2daa <delay+0x1c>
			ms--;
    2dd2:	21 e0       	ldi	r18, 0x01	; 1
    2dd4:	c2 1a       	sub	r12, r18
    2dd6:	d1 08       	sbc	r13, r1
    2dd8:	e1 08       	sbc	r14, r1
    2dda:	f1 08       	sbc	r15, r1
			start += 1000;
    2ddc:	88 ee       	ldi	r24, 0xE8	; 232
    2dde:	88 0e       	add	r8, r24
    2de0:	83 e0       	ldi	r24, 0x03	; 3
    2de2:	98 1e       	adc	r9, r24
    2de4:	a1 1c       	adc	r10, r1
    2de6:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2de8:	c1 14       	cp	r12, r1
    2dea:	d1 04       	cpc	r13, r1
    2dec:	e1 04       	cpc	r14, r1
    2dee:	f1 04       	cpc	r15, r1
    2df0:	19 f7       	brne	.-58     	; 0x2db8 <delay+0x2a>
    2df2:	db cf       	rjmp	.-74     	; 0x2daa <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    2df4:	ff 90       	pop	r15
    2df6:	ef 90       	pop	r14
    2df8:	df 90       	pop	r13
    2dfa:	cf 90       	pop	r12
    2dfc:	bf 90       	pop	r11
    2dfe:	af 90       	pop	r10
    2e00:	9f 90       	pop	r9
    2e02:	8f 90       	pop	r8
    2e04:	08 95       	ret

00002e06 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2e06:	82 30       	cpi	r24, 0x02	; 2
    2e08:	91 05       	cpc	r25, r1
    2e0a:	38 f0       	brcs	.+14     	; 0x2e1a <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    2e0c:	88 0f       	add	r24, r24
    2e0e:	99 1f       	adc	r25, r25
    2e10:	88 0f       	add	r24, r24
    2e12:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    2e14:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2e16:	01 97       	sbiw	r24, 0x01	; 1
    2e18:	f1 f7       	brne	.-4      	; 0x2e16 <delayMicroseconds+0x10>
    2e1a:	08 95       	ret

00002e1c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2e1c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2e1e:	84 b5       	in	r24, 0x24	; 36
    2e20:	82 60       	ori	r24, 0x02	; 2
    2e22:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2e24:	84 b5       	in	r24, 0x24	; 36
    2e26:	81 60       	ori	r24, 0x01	; 1
    2e28:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2e2a:	85 b5       	in	r24, 0x25	; 37
    2e2c:	82 60       	ori	r24, 0x02	; 2
    2e2e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2e30:	85 b5       	in	r24, 0x25	; 37
    2e32:	81 60       	ori	r24, 0x01	; 1
    2e34:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2e36:	ee e6       	ldi	r30, 0x6E	; 110
    2e38:	f0 e0       	ldi	r31, 0x00	; 0
    2e3a:	80 81       	ld	r24, Z
    2e3c:	81 60       	ori	r24, 0x01	; 1
    2e3e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2e40:	e1 e8       	ldi	r30, 0x81	; 129
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2e46:	80 81       	ld	r24, Z
    2e48:	82 60       	ori	r24, 0x02	; 2
    2e4a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2e4c:	80 81       	ld	r24, Z
    2e4e:	81 60       	ori	r24, 0x01	; 1
    2e50:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2e52:	e0 e8       	ldi	r30, 0x80	; 128
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	80 81       	ld	r24, Z
    2e58:	81 60       	ori	r24, 0x01	; 1
    2e5a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2e5c:	e1 eb       	ldi	r30, 0xB1	; 177
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	80 81       	ld	r24, Z
    2e62:	84 60       	ori	r24, 0x04	; 4
    2e64:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2e66:	e0 eb       	ldi	r30, 0xB0	; 176
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	80 81       	ld	r24, Z
    2e6c:	81 60       	ori	r24, 0x01	; 1
    2e6e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2e70:	ea e7       	ldi	r30, 0x7A	; 122
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	80 81       	ld	r24, Z
    2e76:	84 60       	ori	r24, 0x04	; 4
    2e78:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2e7a:	80 81       	ld	r24, Z
    2e7c:	82 60       	ori	r24, 0x02	; 2
    2e7e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2e80:	80 81       	ld	r24, Z
    2e82:	81 60       	ori	r24, 0x01	; 1
    2e84:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2e86:	80 81       	ld	r24, Z
    2e88:	80 68       	ori	r24, 0x80	; 128
    2e8a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2e8c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2e90:	08 95       	ret

00002e92 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    2e92:	8e 30       	cpi	r24, 0x0E	; 14
    2e94:	08 f0       	brcs	.+2      	; 0x2e98 <analogRead+0x6>
    2e96:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    2e98:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <analog_reference>
    2e9c:	90 e4       	ldi	r25, 0x40	; 64
    2e9e:	29 9f       	mul	r18, r25
    2ea0:	90 01       	movw	r18, r0
    2ea2:	11 24       	eor	r1, r1
    2ea4:	87 70       	andi	r24, 0x07	; 7
    2ea6:	82 2b       	or	r24, r18
    2ea8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    2eac:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2eb0:	80 64       	ori	r24, 0x40	; 64
    2eb2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    2eb6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2eba:	86 fd       	sbrc	r24, 6
    2ebc:	fc cf       	rjmp	.-8      	; 0x2eb6 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    2ebe:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    2ec2:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
}
    2ec8:	92 2b       	or	r25, r18
    2eca:	08 95       	ret

00002ecc <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2ecc:	83 30       	cpi	r24, 0x03	; 3
    2ece:	81 f0       	breq	.+32     	; 0x2ef0 <turnOffPWM+0x24>
    2ed0:	28 f4       	brcc	.+10     	; 0x2edc <turnOffPWM+0x10>
    2ed2:	81 30       	cpi	r24, 0x01	; 1
    2ed4:	99 f0       	breq	.+38     	; 0x2efc <turnOffPWM+0x30>
    2ed6:	82 30       	cpi	r24, 0x02	; 2
    2ed8:	a1 f0       	breq	.+40     	; 0x2f02 <turnOffPWM+0x36>
    2eda:	08 95       	ret
    2edc:	87 30       	cpi	r24, 0x07	; 7
    2ede:	a9 f0       	breq	.+42     	; 0x2f0a <turnOffPWM+0x3e>
    2ee0:	88 30       	cpi	r24, 0x08	; 8
    2ee2:	b9 f0       	breq	.+46     	; 0x2f12 <turnOffPWM+0x46>
    2ee4:	84 30       	cpi	r24, 0x04	; 4
    2ee6:	d1 f4       	brne	.+52     	; 0x2f1c <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2ee8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2eec:	8f 7d       	andi	r24, 0xDF	; 223
    2eee:	03 c0       	rjmp	.+6      	; 0x2ef6 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2ef0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2ef4:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2ef6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2efa:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2efc:	84 b5       	in	r24, 0x24	; 36
    2efe:	8f 77       	andi	r24, 0x7F	; 127
    2f00:	02 c0       	rjmp	.+4      	; 0x2f06 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2f02:	84 b5       	in	r24, 0x24	; 36
    2f04:	8f 7d       	andi	r24, 0xDF	; 223
    2f06:	84 bd       	out	0x24, r24	; 36
    2f08:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2f0a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2f0e:	8f 77       	andi	r24, 0x7F	; 127
    2f10:	03 c0       	rjmp	.+6      	; 0x2f18 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2f12:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2f16:	8f 7d       	andi	r24, 0xDF	; 223
    2f18:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2f1c:	08 95       	ret

00002f1e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	fc 01       	movw	r30, r24
    2f26:	e8 54       	subi	r30, 0x48	; 72
    2f28:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2f2c:	fc 01       	movw	r30, r24
    2f2e:	e4 53       	subi	r30, 0x34	; 52
    2f30:	ff 4f       	sbci	r31, 0xFF	; 255
    2f32:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2f34:	88 23       	and	r24, r24
    2f36:	61 f1       	breq	.+88     	; 0x2f90 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	88 0f       	add	r24, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	fc 01       	movw	r30, r24
    2f40:	ec 50       	subi	r30, 0x0C	; 12
    2f42:	ff 4f       	sbci	r31, 0xFF	; 255
    2f44:	c5 91       	lpm	r28, Z+
    2f46:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2f48:	fc 01       	movw	r30, r24
    2f4a:	e6 51       	subi	r30, 0x16	; 22
    2f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4e:	a5 91       	lpm	r26, Z+
    2f50:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2f52:	61 11       	cpse	r22, r1
    2f54:	09 c0       	rjmp	.+18     	; 0x2f68 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2f56:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2f58:	f8 94       	cli
		*reg &= ~bit;
    2f5a:	88 81       	ld	r24, Y
    2f5c:	20 95       	com	r18
    2f5e:	82 23       	and	r24, r18
    2f60:	88 83       	st	Y, r24
		*out &= ~bit;
    2f62:	ec 91       	ld	r30, X
    2f64:	2e 23       	and	r18, r30
    2f66:	0b c0       	rjmp	.+22     	; 0x2f7e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2f68:	62 30       	cpi	r22, 0x02	; 2
    2f6a:	61 f4       	brne	.+24     	; 0x2f84 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2f6c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2f6e:	f8 94       	cli
		*reg &= ~bit;
    2f70:	88 81       	ld	r24, Y
    2f72:	32 2f       	mov	r19, r18
    2f74:	30 95       	com	r19
    2f76:	83 23       	and	r24, r19
    2f78:	88 83       	st	Y, r24
		*out |= bit;
    2f7a:	ec 91       	ld	r30, X
    2f7c:	2e 2b       	or	r18, r30
    2f7e:	2c 93       	st	X, r18
		SREG = oldSREG;
    2f80:	9f bf       	out	0x3f, r25	; 63
    2f82:	06 c0       	rjmp	.+12     	; 0x2f90 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2f84:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2f86:	f8 94       	cli
		*reg |= bit;
    2f88:	e8 81       	ld	r30, Y
    2f8a:	2e 2b       	or	r18, r30
    2f8c:	28 83       	st	Y, r18
		SREG = oldSREG;
    2f8e:	8f bf       	out	0x3f, r24	; 63
	}
}
    2f90:	df 91       	pop	r29
    2f92:	cf 91       	pop	r28
    2f94:	08 95       	ret

00002f96 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2f96:	1f 93       	push	r17
    2f98:	cf 93       	push	r28
    2f9a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2f9c:	28 2f       	mov	r18, r24
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	f9 01       	movw	r30, r18
    2fa2:	ec 55       	subi	r30, 0x5C	; 92
    2fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2fa8:	f9 01       	movw	r30, r18
    2faa:	e8 54       	subi	r30, 0x48	; 72
    2fac:	ff 4f       	sbci	r31, 0xFF	; 255
    2fae:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2fb0:	f9 01       	movw	r30, r18
    2fb2:	e4 53       	subi	r30, 0x34	; 52
    2fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb6:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2fb8:	cc 23       	and	r28, r28
    2fba:	c1 f0       	breq	.+48     	; 0x2fec <digitalWrite+0x56>
    2fbc:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2fbe:	81 11       	cpse	r24, r1
    2fc0:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <turnOffPWM>

	out = portOutputRegister(port);
    2fc4:	ec 2f       	mov	r30, r28
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	ee 0f       	add	r30, r30
    2fca:	ff 1f       	adc	r31, r31
    2fcc:	e6 51       	subi	r30, 0x16	; 22
    2fce:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd0:	a5 91       	lpm	r26, Z+
    2fd2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2fd4:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2fd6:	f8 94       	cli

	if (val == LOW) {
    2fd8:	11 11       	cpse	r17, r1
    2fda:	04 c0       	rjmp	.+8      	; 0x2fe4 <digitalWrite+0x4e>
		*out &= ~bit;
    2fdc:	8c 91       	ld	r24, X
    2fde:	d0 95       	com	r29
    2fe0:	d8 23       	and	r29, r24
    2fe2:	02 c0       	rjmp	.+4      	; 0x2fe8 <digitalWrite+0x52>
	} else {
		*out |= bit;
    2fe4:	ec 91       	ld	r30, X
    2fe6:	de 2b       	or	r29, r30
    2fe8:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    2fea:	9f bf       	out	0x3f, r25	; 63
}
    2fec:	df 91       	pop	r29
    2fee:	cf 91       	pop	r28
    2ff0:	1f 91       	pop	r17
    2ff2:	08 95       	ret

00002ff4 <digitalRead>:

int digitalRead(uint8_t pin)
{
    2ff4:	cf 93       	push	r28
    2ff6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2ff8:	28 2f       	mov	r18, r24
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	f9 01       	movw	r30, r18
    2ffe:	ec 55       	subi	r30, 0x5C	; 92
    3000:	ff 4f       	sbci	r31, 0xFF	; 255
    3002:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3004:	f9 01       	movw	r30, r18
    3006:	e8 54       	subi	r30, 0x48	; 72
    3008:	ff 4f       	sbci	r31, 0xFF	; 255
    300a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    300c:	f9 01       	movw	r30, r18
    300e:	e4 53       	subi	r30, 0x34	; 52
    3010:	ff 4f       	sbci	r31, 0xFF	; 255
    3012:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    3014:	cc 23       	and	r28, r28
    3016:	91 f0       	breq	.+36     	; 0x303c <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3018:	81 11       	cpse	r24, r1
    301a:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    301e:	ec 2f       	mov	r30, r28
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	ee 0f       	add	r30, r30
    3024:	ff 1f       	adc	r31, r31
    3026:	e0 52       	subi	r30, 0x20	; 32
    3028:	ff 4f       	sbci	r31, 0xFF	; 255
    302a:	a5 91       	lpm	r26, Z+
    302c:	b4 91       	lpm	r27, Z
    302e:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    3030:	ed 23       	and	r30, r29
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	21 f4       	brne	.+8      	; 0x3040 <digitalRead+0x4c>
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	02 c0       	rjmp	.+4      	; 0x3040 <digitalRead+0x4c>
    303c:	80 e0       	ldi	r24, 0x00	; 0
    303e:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    3040:	df 91       	pop	r29
    3042:	cf 91       	pop	r28
    3044:	08 95       	ret

00003046 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3046:	08 95       	ret

00003048 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3048:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <twi_state>
    304c:	81 e0       	ldi	r24, 0x01	; 1
    304e:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <twi_sendStop>
    3052:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <twi_inRepStart>
    3056:	61 e0       	ldi	r22, 0x01	; 1
    3058:	82 e1       	ldi	r24, 0x12	; 18
    305a:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <digitalWrite>
    305e:	61 e0       	ldi	r22, 0x01	; 1
    3060:	83 e1       	ldi	r24, 0x13	; 19
    3062:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <digitalWrite>
    3066:	e9 eb       	ldi	r30, 0xB9	; 185
    3068:	f0 e0       	ldi	r31, 0x00	; 0
    306a:	80 81       	ld	r24, Z
    306c:	8e 7f       	andi	r24, 0xFE	; 254
    306e:	80 83       	st	Z, r24
    3070:	80 81       	ld	r24, Z
    3072:	8d 7f       	andi	r24, 0xFD	; 253
    3074:	80 83       	st	Z, r24
    3076:	88 e4       	ldi	r24, 0x48	; 72
    3078:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    307c:	85 e4       	ldi	r24, 0x45	; 69
    307e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3082:	08 95       	ret

00003084 <twi_setFrequency>:
    3084:	9b 01       	movw	r18, r22
    3086:	ac 01       	movw	r20, r24
    3088:	60 e0       	ldi	r22, 0x00	; 0
    308a:	74 e2       	ldi	r23, 0x24	; 36
    308c:	84 ef       	ldi	r24, 0xF4	; 244
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	0e 94 82 1a 	call	0x3504	; 0x3504 <__udivmodsi4>
    3094:	da 01       	movw	r26, r20
    3096:	c9 01       	movw	r24, r18
    3098:	40 97       	sbiw	r24, 0x10	; 16
    309a:	a1 09       	sbc	r26, r1
    309c:	b1 09       	sbc	r27, r1
    309e:	b6 95       	lsr	r27
    30a0:	a7 95       	ror	r26
    30a2:	97 95       	ror	r25
    30a4:	87 95       	ror	r24
    30a6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    30aa:	08 95       	ret

000030ac <twi_readFrom>:
    30ac:	41 32       	cpi	r20, 0x21	; 33
    30ae:	08 f0       	brcs	.+2      	; 0x30b2 <twi_readFrom+0x6>
    30b0:	43 c0       	rjmp	.+134    	; 0x3138 <twi_readFrom+0x8c>
    30b2:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <twi_state>
    30b6:	91 11       	cpse	r25, r1
    30b8:	fc cf       	rjmp	.-8      	; 0x30b2 <twi_readFrom+0x6>
    30ba:	91 e0       	ldi	r25, 0x01	; 1
    30bc:	90 93 d6 03 	sts	0x03D6, r25	; 0x8003d6 <twi_state>
    30c0:	20 93 d4 03 	sts	0x03D4, r18	; 0x8003d4 <twi_sendStop>
    30c4:	2f ef       	ldi	r18, 0xFF	; 255
    30c6:	20 93 69 03 	sts	0x0369, r18	; 0x800369 <twi_error>
    30ca:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <twi_masterBufferIndex>
    30ce:	24 0f       	add	r18, r20
    30d0:	20 93 ad 03 	sts	0x03AD, r18	; 0x8003ad <twi_masterBufferLength>
    30d4:	90 93 d5 03 	sts	0x03D5, r25	; 0x8003d5 <twi_slarw>
    30d8:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <twi_slarw>
    30dc:	88 0f       	add	r24, r24
    30de:	89 2b       	or	r24, r25
    30e0:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <twi_slarw>
    30e4:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <twi_inRepStart>
    30e8:	81 30       	cpi	r24, 0x01	; 1
    30ea:	61 f4       	brne	.+24     	; 0x3104 <twi_readFrom+0x58>
    30ec:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <twi_inRepStart>
    30f0:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <twi_slarw>
    30f4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    30f8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    30fc:	83 fd       	sbrc	r24, 3
    30fe:	f8 cf       	rjmp	.-16     	; 0x30f0 <twi_readFrom+0x44>
    3100:	85 ec       	ldi	r24, 0xC5	; 197
    3102:	01 c0       	rjmp	.+2      	; 0x3106 <twi_readFrom+0x5a>
    3104:	85 ee       	ldi	r24, 0xE5	; 229
    3106:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    310a:	80 91 d6 03 	lds	r24, 0x03D6	; 0x8003d6 <twi_state>
    310e:	81 30       	cpi	r24, 0x01	; 1
    3110:	e1 f3       	breq	.-8      	; 0x310a <twi_readFrom+0x5e>
    3112:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <twi_masterBufferIndex>
    3116:	84 17       	cp	r24, r20
    3118:	10 f4       	brcc	.+4      	; 0x311e <twi_readFrom+0x72>
    311a:	40 91 ae 03 	lds	r20, 0x03AE	; 0x8003ae <twi_masterBufferIndex>
    311e:	af ea       	ldi	r26, 0xAF	; 175
    3120:	b3 e0       	ldi	r27, 0x03	; 3
    3122:	96 2f       	mov	r25, r22
    3124:	fb 01       	movw	r30, r22
    3126:	8e 2f       	mov	r24, r30
    3128:	89 1b       	sub	r24, r25
    312a:	84 17       	cp	r24, r20
    312c:	18 f4       	brcc	.+6      	; 0x3134 <twi_readFrom+0x88>
    312e:	8d 91       	ld	r24, X+
    3130:	81 93       	st	Z+, r24
    3132:	f9 cf       	rjmp	.-14     	; 0x3126 <twi_readFrom+0x7a>
    3134:	84 2f       	mov	r24, r20
    3136:	08 95       	ret
    3138:	80 e0       	ldi	r24, 0x00	; 0
    313a:	08 95       	ret

0000313c <twi_writeTo>:
    313c:	0f 93       	push	r16
    313e:	41 32       	cpi	r20, 0x21	; 33
    3140:	08 f0       	brcs	.+2      	; 0x3144 <twi_writeTo+0x8>
    3142:	4a c0       	rjmp	.+148    	; 0x31d8 <twi_writeTo+0x9c>
    3144:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <twi_state>
    3148:	91 11       	cpse	r25, r1
    314a:	fc cf       	rjmp	.-8      	; 0x3144 <twi_writeTo+0x8>
    314c:	32 e0       	ldi	r19, 0x02	; 2
    314e:	30 93 d6 03 	sts	0x03D6, r19	; 0x8003d6 <twi_state>
    3152:	00 93 d4 03 	sts	0x03D4, r16	; 0x8003d4 <twi_sendStop>
    3156:	3f ef       	ldi	r19, 0xFF	; 255
    3158:	30 93 69 03 	sts	0x0369, r19	; 0x800369 <twi_error>
    315c:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <twi_masterBufferIndex>
    3160:	40 93 ad 03 	sts	0x03AD, r20	; 0x8003ad <twi_masterBufferLength>
    3164:	56 2f       	mov	r21, r22
    3166:	af ea       	ldi	r26, 0xAF	; 175
    3168:	b3 e0       	ldi	r27, 0x03	; 3
    316a:	fb 01       	movw	r30, r22
    316c:	3e 2f       	mov	r19, r30
    316e:	35 1b       	sub	r19, r21
    3170:	34 17       	cp	r19, r20
    3172:	18 f4       	brcc	.+6      	; 0x317a <twi_writeTo+0x3e>
    3174:	31 91       	ld	r19, Z+
    3176:	3d 93       	st	X+, r19
    3178:	f9 cf       	rjmp	.-14     	; 0x316c <twi_writeTo+0x30>
    317a:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <twi_slarw>
    317e:	30 91 d5 03 	lds	r19, 0x03D5	; 0x8003d5 <twi_slarw>
    3182:	88 0f       	add	r24, r24
    3184:	83 2b       	or	r24, r19
    3186:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <twi_slarw>
    318a:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <twi_inRepStart>
    318e:	81 30       	cpi	r24, 0x01	; 1
    3190:	61 f4       	brne	.+24     	; 0x31aa <twi_writeTo+0x6e>
    3192:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <twi_inRepStart>
    3196:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <twi_slarw>
    319a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    319e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    31a2:	83 fd       	sbrc	r24, 3
    31a4:	f8 cf       	rjmp	.-16     	; 0x3196 <twi_writeTo+0x5a>
    31a6:	85 ec       	ldi	r24, 0xC5	; 197
    31a8:	01 c0       	rjmp	.+2      	; 0x31ac <twi_writeTo+0x70>
    31aa:	85 ee       	ldi	r24, 0xE5	; 229
    31ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    31b0:	22 23       	and	r18, r18
    31b2:	21 f0       	breq	.+8      	; 0x31bc <twi_writeTo+0x80>
    31b4:	80 91 d6 03 	lds	r24, 0x03D6	; 0x8003d6 <twi_state>
    31b8:	82 30       	cpi	r24, 0x02	; 2
    31ba:	d1 f3       	breq	.-12     	; 0x31b0 <twi_writeTo+0x74>
    31bc:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <twi_error>
    31c0:	8f 3f       	cpi	r24, 0xFF	; 255
    31c2:	79 f0       	breq	.+30     	; 0x31e2 <twi_writeTo+0xa6>
    31c4:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <twi_error>
    31c8:	80 32       	cpi	r24, 0x20	; 32
    31ca:	41 f0       	breq	.+16     	; 0x31dc <twi_writeTo+0xa0>
    31cc:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <twi_error>
    31d0:	80 33       	cpi	r24, 0x30	; 48
    31d2:	31 f0       	breq	.+12     	; 0x31e0 <twi_writeTo+0xa4>
    31d4:	94 e0       	ldi	r25, 0x04	; 4
    31d6:	05 c0       	rjmp	.+10     	; 0x31e2 <twi_writeTo+0xa6>
    31d8:	91 e0       	ldi	r25, 0x01	; 1
    31da:	03 c0       	rjmp	.+6      	; 0x31e2 <twi_writeTo+0xa6>
    31dc:	92 e0       	ldi	r25, 0x02	; 2
    31de:	01 c0       	rjmp	.+2      	; 0x31e2 <twi_writeTo+0xa6>
    31e0:	93 e0       	ldi	r25, 0x03	; 3
    31e2:	89 2f       	mov	r24, r25
    31e4:	0f 91       	pop	r16
    31e6:	08 95       	ret

000031e8 <twi_transmit>:
    31e8:	40 91 8b 03 	lds	r20, 0x038B	; 0x80038b <twi_txBufferLength>
    31ec:	26 2f       	mov	r18, r22
    31ee:	30 e0       	ldi	r19, 0x00	; 0
    31f0:	24 0f       	add	r18, r20
    31f2:	31 1d       	adc	r19, r1
    31f4:	21 32       	cpi	r18, 0x21	; 33
    31f6:	31 05       	cpc	r19, r1
    31f8:	dc f4       	brge	.+54     	; 0x3230 <twi_transmit+0x48>
    31fa:	20 91 d6 03 	lds	r18, 0x03D6	; 0x8003d6 <twi_state>
    31fe:	24 30       	cpi	r18, 0x04	; 4
    3200:	c9 f4       	brne	.+50     	; 0x3234 <twi_transmit+0x4c>
    3202:	fc 01       	movw	r30, r24
    3204:	80 e0       	ldi	r24, 0x00	; 0
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	86 17       	cp	r24, r22
    320a:	58 f4       	brcc	.+22     	; 0x3222 <twi_transmit+0x3a>
    320c:	30 91 8b 03 	lds	r19, 0x038B	; 0x80038b <twi_txBufferLength>
    3210:	21 91       	ld	r18, Z+
    3212:	dc 01       	movw	r26, r24
    3214:	a3 57       	subi	r26, 0x73	; 115
    3216:	bc 4f       	sbci	r27, 0xFC	; 252
    3218:	a3 0f       	add	r26, r19
    321a:	b1 1d       	adc	r27, r1
    321c:	2c 93       	st	X, r18
    321e:	01 96       	adiw	r24, 0x01	; 1
    3220:	f3 cf       	rjmp	.-26     	; 0x3208 <twi_transmit+0x20>
    3222:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <twi_txBufferLength>
    3226:	68 0f       	add	r22, r24
    3228:	60 93 8b 03 	sts	0x038B, r22	; 0x80038b <twi_txBufferLength>
    322c:	80 e0       	ldi	r24, 0x00	; 0
    322e:	08 95       	ret
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	08 95       	ret
    3234:	82 e0       	ldi	r24, 0x02	; 2
    3236:	08 95       	ret

00003238 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3238:	85 ed       	ldi	r24, 0xD5	; 213
    323a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    323e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3242:	84 fd       	sbrc	r24, 4
    3244:	fc cf       	rjmp	.-8      	; 0x323e <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3246:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <twi_state>
    324a:	08 95       	ret

0000324c <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    324c:	85 ec       	ldi	r24, 0xC5	; 197
    324e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    3252:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <twi_state>
    3256:	08 95       	ret

00003258 <__vector_24>:
}

ISR(TWI_vect)
{
    3258:	1f 92       	push	r1
    325a:	0f 92       	push	r0
    325c:	0f b6       	in	r0, 0x3f	; 63
    325e:	0f 92       	push	r0
    3260:	11 24       	eor	r1, r1
    3262:	2f 93       	push	r18
    3264:	3f 93       	push	r19
    3266:	4f 93       	push	r20
    3268:	5f 93       	push	r21
    326a:	6f 93       	push	r22
    326c:	7f 93       	push	r23
    326e:	8f 93       	push	r24
    3270:	9f 93       	push	r25
    3272:	af 93       	push	r26
    3274:	bf 93       	push	r27
    3276:	ef 93       	push	r30
    3278:	ff 93       	push	r31
  switch(TW_STATUS){
    327a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    327e:	88 7f       	andi	r24, 0xF8	; 248
    3280:	80 36       	cpi	r24, 0x60	; 96
    3282:	09 f4       	brne	.+2      	; 0x3286 <__vector_24+0x2e>
    3284:	9e c0       	rjmp	.+316    	; 0x33c2 <__vector_24+0x16a>
    3286:	78 f5       	brcc	.+94     	; 0x32e6 <__vector_24+0x8e>
    3288:	88 32       	cpi	r24, 0x28	; 40
    328a:	09 f4       	brne	.+2      	; 0x328e <__vector_24+0x36>
    328c:	5d c0       	rjmp	.+186    	; 0x3348 <__vector_24+0xf0>
    328e:	90 f4       	brcc	.+36     	; 0x32b4 <__vector_24+0x5c>
    3290:	80 31       	cpi	r24, 0x10	; 16
    3292:	09 f4       	brne	.+2      	; 0x3296 <__vector_24+0x3e>
    3294:	56 c0       	rjmp	.+172    	; 0x3342 <__vector_24+0xea>
    3296:	38 f4       	brcc	.+14     	; 0x32a6 <__vector_24+0x4e>
    3298:	88 23       	and	r24, r24
    329a:	09 f4       	brne	.+2      	; 0x329e <__vector_24+0x46>
    329c:	f5 c0       	rjmp	.+490    	; 0x3488 <__vector_24+0x230>
    329e:	88 30       	cpi	r24, 0x08	; 8
    32a0:	09 f4       	brne	.+2      	; 0x32a4 <__vector_24+0x4c>
    32a2:	4f c0       	rjmp	.+158    	; 0x3342 <__vector_24+0xea>
    32a4:	f5 c0       	rjmp	.+490    	; 0x3490 <__vector_24+0x238>
    32a6:	88 31       	cpi	r24, 0x18	; 24
    32a8:	09 f4       	brne	.+2      	; 0x32ac <__vector_24+0x54>
    32aa:	4e c0       	rjmp	.+156    	; 0x3348 <__vector_24+0xf0>
    32ac:	80 32       	cpi	r24, 0x20	; 32
    32ae:	09 f4       	brne	.+2      	; 0x32b2 <__vector_24+0x5a>
    32b0:	5f c0       	rjmp	.+190    	; 0x3370 <__vector_24+0x118>
    32b2:	ee c0       	rjmp	.+476    	; 0x3490 <__vector_24+0x238>
    32b4:	80 34       	cpi	r24, 0x40	; 64
    32b6:	09 f4       	brne	.+2      	; 0x32ba <__vector_24+0x62>
    32b8:	6a c0       	rjmp	.+212    	; 0x338e <__vector_24+0x136>
    32ba:	58 f4       	brcc	.+22     	; 0x32d2 <__vector_24+0x7a>
    32bc:	80 33       	cpi	r24, 0x30	; 48
    32be:	09 f4       	brne	.+2      	; 0x32c2 <__vector_24+0x6a>
    32c0:	57 c0       	rjmp	.+174    	; 0x3370 <__vector_24+0x118>
    32c2:	88 33       	cpi	r24, 0x38	; 56
    32c4:	09 f0       	breq	.+2      	; 0x32c8 <__vector_24+0x70>
    32c6:	e4 c0       	rjmp	.+456    	; 0x3490 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    32c8:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <twi_error>
      twi_releaseBus();
    32cc:	0e 94 26 19 	call	0x324c	; 0x324c <twi_releaseBus>
      break;
    32d0:	df c0       	rjmp	.+446    	; 0x3490 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    32d2:	80 35       	cpi	r24, 0x50	; 80
    32d4:	09 f4       	brne	.+2      	; 0x32d8 <__vector_24+0x80>
    32d6:	4f c0       	rjmp	.+158    	; 0x3376 <__vector_24+0x11e>
    32d8:	88 35       	cpi	r24, 0x58	; 88
    32da:	09 f4       	brne	.+2      	; 0x32de <__vector_24+0x86>
    32dc:	5d c0       	rjmp	.+186    	; 0x3398 <__vector_24+0x140>
    32de:	88 34       	cpi	r24, 0x48	; 72
    32e0:	09 f0       	breq	.+2      	; 0x32e4 <__vector_24+0x8c>
    32e2:	d6 c0       	rjmp	.+428    	; 0x3490 <__vector_24+0x238>
    32e4:	d3 c0       	rjmp	.+422    	; 0x348c <__vector_24+0x234>
    32e6:	88 39       	cpi	r24, 0x98	; 152
    32e8:	09 f4       	brne	.+2      	; 0x32ec <__vector_24+0x94>
    32ea:	c4 c0       	rjmp	.+392    	; 0x3474 <__vector_24+0x21c>
    32ec:	a8 f4       	brcc	.+42     	; 0x3318 <__vector_24+0xc0>
    32ee:	88 37       	cpi	r24, 0x78	; 120
    32f0:	09 f4       	brne	.+2      	; 0x32f4 <__vector_24+0x9c>
    32f2:	67 c0       	rjmp	.+206    	; 0x33c2 <__vector_24+0x16a>
    32f4:	38 f4       	brcc	.+14     	; 0x3304 <__vector_24+0xac>
    32f6:	88 36       	cpi	r24, 0x68	; 104
    32f8:	09 f4       	brne	.+2      	; 0x32fc <__vector_24+0xa4>
    32fa:	63 c0       	rjmp	.+198    	; 0x33c2 <__vector_24+0x16a>
    32fc:	80 37       	cpi	r24, 0x70	; 112
    32fe:	09 f4       	brne	.+2      	; 0x3302 <__vector_24+0xaa>
    3300:	60 c0       	rjmp	.+192    	; 0x33c2 <__vector_24+0x16a>
    3302:	c6 c0       	rjmp	.+396    	; 0x3490 <__vector_24+0x238>
    3304:	88 38       	cpi	r24, 0x88	; 136
    3306:	09 f4       	brne	.+2      	; 0x330a <__vector_24+0xb2>
    3308:	b5 c0       	rjmp	.+362    	; 0x3474 <__vector_24+0x21c>
    330a:	80 39       	cpi	r24, 0x90	; 144
    330c:	09 f4       	brne	.+2      	; 0x3310 <__vector_24+0xb8>
    330e:	5f c0       	rjmp	.+190    	; 0x33ce <__vector_24+0x176>
    3310:	80 38       	cpi	r24, 0x80	; 128
    3312:	09 f0       	breq	.+2      	; 0x3316 <__vector_24+0xbe>
    3314:	bd c0       	rjmp	.+378    	; 0x3490 <__vector_24+0x238>
    3316:	5b c0       	rjmp	.+182    	; 0x33ce <__vector_24+0x176>
    3318:	80 3b       	cpi	r24, 0xB0	; 176
    331a:	09 f4       	brne	.+2      	; 0x331e <__vector_24+0xc6>
    331c:	83 c0       	rjmp	.+262    	; 0x3424 <__vector_24+0x1cc>
    331e:	38 f4       	brcc	.+14     	; 0x332e <__vector_24+0xd6>
    3320:	80 3a       	cpi	r24, 0xA0	; 160
    3322:	09 f4       	brne	.+2      	; 0x3326 <__vector_24+0xce>
    3324:	66 c0       	rjmp	.+204    	; 0x33f2 <__vector_24+0x19a>
    3326:	88 3a       	cpi	r24, 0xA8	; 168
    3328:	09 f4       	brne	.+2      	; 0x332c <__vector_24+0xd4>
    332a:	7c c0       	rjmp	.+248    	; 0x3424 <__vector_24+0x1cc>
    332c:	b1 c0       	rjmp	.+354    	; 0x3490 <__vector_24+0x238>
    332e:	80 3c       	cpi	r24, 0xC0	; 192
    3330:	09 f4       	brne	.+2      	; 0x3334 <__vector_24+0xdc>
    3332:	a4 c0       	rjmp	.+328    	; 0x347c <__vector_24+0x224>
    3334:	88 3c       	cpi	r24, 0xC8	; 200
    3336:	09 f4       	brne	.+2      	; 0x333a <__vector_24+0xe2>
    3338:	a1 c0       	rjmp	.+322    	; 0x347c <__vector_24+0x224>
    333a:	88 3b       	cpi	r24, 0xB8	; 184
    333c:	09 f4       	brne	.+2      	; 0x3340 <__vector_24+0xe8>
    333e:	87 c0       	rjmp	.+270    	; 0x344e <__vector_24+0x1f6>
    3340:	a7 c0       	rjmp	.+334    	; 0x3490 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3342:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <twi_slarw>
    3346:	10 c0       	rjmp	.+32     	; 0x3368 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3348:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <twi_masterBufferIndex>
    334c:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <twi_masterBufferLength>
    3350:	98 17       	cp	r25, r24
    3352:	70 f5       	brcc	.+92     	; 0x33b0 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3354:	e0 91 ae 03 	lds	r30, 0x03AE	; 0x8003ae <twi_masterBufferIndex>
    3358:	81 e0       	ldi	r24, 0x01	; 1
    335a:	8e 0f       	add	r24, r30
    335c:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <twi_masterBufferIndex>
    3360:	f0 e0       	ldi	r31, 0x00	; 0
    3362:	e1 55       	subi	r30, 0x51	; 81
    3364:	fc 4f       	sbci	r31, 0xFC	; 252
    3366:	80 81       	ld	r24, Z
    3368:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    336c:	85 ec       	ldi	r24, 0xC5	; 197
    336e:	83 c0       	rjmp	.+262    	; 0x3476 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3370:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <twi_error>
    3374:	8b c0       	rjmp	.+278    	; 0x348c <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3376:	e0 91 ae 03 	lds	r30, 0x03AE	; 0x8003ae <twi_masterBufferIndex>
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	8e 0f       	add	r24, r30
    337e:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <twi_masterBufferIndex>
    3382:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3386:	f0 e0       	ldi	r31, 0x00	; 0
    3388:	e1 55       	subi	r30, 0x51	; 81
    338a:	fc 4f       	sbci	r31, 0xFC	; 252
    338c:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    338e:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <twi_masterBufferIndex>
    3392:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <twi_masterBufferLength>
    3396:	6b c0       	rjmp	.+214    	; 0x346e <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3398:	e0 91 ae 03 	lds	r30, 0x03AE	; 0x8003ae <twi_masterBufferIndex>
    339c:	81 e0       	ldi	r24, 0x01	; 1
    339e:	8e 0f       	add	r24, r30
    33a0:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <twi_masterBufferIndex>
    33a4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    33a8:	f0 e0       	ldi	r31, 0x00	; 0
    33aa:	e1 55       	subi	r30, 0x51	; 81
    33ac:	fc 4f       	sbci	r31, 0xFC	; 252
    33ae:	80 83       	st	Z, r24
	if (twi_sendStop)
    33b0:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <twi_sendStop>
    33b4:	81 11       	cpse	r24, r1
    33b6:	6a c0       	rjmp	.+212    	; 0x348c <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    33be:	84 ea       	ldi	r24, 0xA4	; 164
    33c0:	5e c0       	rjmp	.+188    	; 0x347e <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    33c2:	83 e0       	ldi	r24, 0x03	; 3
    33c4:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    33c8:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <twi_rxBufferIndex>
    33cc:	cf cf       	rjmp	.-98     	; 0x336c <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    33ce:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <twi_rxBufferIndex>
    33d2:	80 32       	cpi	r24, 0x20	; 32
    33d4:	08 f0       	brcs	.+2      	; 0x33d8 <__vector_24+0x180>
    33d6:	4e c0       	rjmp	.+156    	; 0x3474 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    33d8:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <twi_rxBufferIndex>
    33dc:	81 e0       	ldi	r24, 0x01	; 1
    33de:	8e 0f       	add	r24, r30
    33e0:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <twi_rxBufferIndex>
    33e4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    33e8:	f0 e0       	ldi	r31, 0x00	; 0
    33ea:	e5 59       	subi	r30, 0x95	; 149
    33ec:	fc 4f       	sbci	r31, 0xFC	; 252
    33ee:	80 83       	st	Z, r24
    33f0:	bd cf       	rjmp	.-134    	; 0x336c <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    33f2:	0e 94 26 19 	call	0x324c	; 0x324c <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    33f6:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <twi_rxBufferIndex>
    33fa:	80 32       	cpi	r24, 0x20	; 32
    33fc:	30 f4       	brcc	.+12     	; 0x340a <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    33fe:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <twi_rxBufferIndex>
    3402:	f0 e0       	ldi	r31, 0x00	; 0
    3404:	e5 59       	subi	r30, 0x95	; 149
    3406:	fc 4f       	sbci	r31, 0xFC	; 252
    3408:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    340a:	60 91 6a 03 	lds	r22, 0x036A	; 0x80036a <twi_rxBufferIndex>
    340e:	70 e0       	ldi	r23, 0x00	; 0
    3410:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <twi_onSlaveReceive>
    3414:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <twi_onSlaveReceive+0x1>
    3418:	8b e6       	ldi	r24, 0x6B	; 107
    341a:	93 e0       	ldi	r25, 0x03	; 3
    341c:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    341e:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <twi_rxBufferIndex>
      break;
    3422:	36 c0       	rjmp	.+108    	; 0x3490 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3424:	84 e0       	ldi	r24, 0x04	; 4
    3426:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    342a:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    342e:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3432:	e0 91 d1 03 	lds	r30, 0x03D1	; 0x8003d1 <twi_onSlaveTransmit>
    3436:	f0 91 d2 03 	lds	r31, 0x03D2	; 0x8003d2 <twi_onSlaveTransmit+0x1>
    343a:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    343c:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <twi_txBufferLength>
    3440:	81 11       	cpse	r24, r1
    3442:	05 c0       	rjmp	.+10     	; 0x344e <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    344a:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    344e:	e0 91 8c 03 	lds	r30, 0x038C	; 0x80038c <twi_txBufferIndex>
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	8e 0f       	add	r24, r30
    3456:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <twi_txBufferIndex>
    345a:	f0 e0       	ldi	r31, 0x00	; 0
    345c:	e3 57       	subi	r30, 0x73	; 115
    345e:	fc 4f       	sbci	r31, 0xFC	; 252
    3460:	80 81       	ld	r24, Z
    3462:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3466:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <twi_txBufferIndex>
    346a:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <twi_txBufferLength>
    346e:	98 17       	cp	r25, r24
    3470:	08 f4       	brcc	.+2      	; 0x3474 <__vector_24+0x21c>
    3472:	7c cf       	rjmp	.-264    	; 0x336c <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3474:	85 e8       	ldi	r24, 0x85	; 133
    3476:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    347a:	0a c0       	rjmp	.+20     	; 0x3490 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    347c:	85 ec       	ldi	r24, 0xC5	; 197
    347e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3482:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <twi_state>
      break;
    3486:	04 c0       	rjmp	.+8      	; 0x3490 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3488:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <twi_error>
      twi_stop();
    348c:	0e 94 1c 19 	call	0x3238	; 0x3238 <twi_stop>
      break;
  }
}
    3490:	ff 91       	pop	r31
    3492:	ef 91       	pop	r30
    3494:	bf 91       	pop	r27
    3496:	af 91       	pop	r26
    3498:	9f 91       	pop	r25
    349a:	8f 91       	pop	r24
    349c:	7f 91       	pop	r23
    349e:	6f 91       	pop	r22
    34a0:	5f 91       	pop	r21
    34a2:	4f 91       	pop	r20
    34a4:	3f 91       	pop	r19
    34a6:	2f 91       	pop	r18
    34a8:	0f 90       	pop	r0
    34aa:	0f be       	out	0x3f, r0	; 63
    34ac:	0f 90       	pop	r0
    34ae:	1f 90       	pop	r1
    34b0:	18 95       	reti

000034b2 <__unordsf2>:
    34b2:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__fp_cmp>
    34b6:	88 0b       	sbc	r24, r24
    34b8:	99 0b       	sbc	r25, r25
    34ba:	08 95       	ret

000034bc <__mulsi3>:
    34bc:	db 01       	movw	r26, r22
    34be:	8f 93       	push	r24
    34c0:	9f 93       	push	r25
    34c2:	0e 94 ca 1a 	call	0x3594	; 0x3594 <__muluhisi3>
    34c6:	bf 91       	pop	r27
    34c8:	af 91       	pop	r26
    34ca:	a2 9f       	mul	r26, r18
    34cc:	80 0d       	add	r24, r0
    34ce:	91 1d       	adc	r25, r1
    34d0:	a3 9f       	mul	r26, r19
    34d2:	90 0d       	add	r25, r0
    34d4:	b2 9f       	mul	r27, r18
    34d6:	90 0d       	add	r25, r0
    34d8:	11 24       	eor	r1, r1
    34da:	08 95       	ret

000034dc <__divmodhi4>:
    34dc:	97 fb       	bst	r25, 7
    34de:	07 2e       	mov	r0, r23
    34e0:	16 f4       	brtc	.+4      	; 0x34e6 <__divmodhi4+0xa>
    34e2:	00 94       	com	r0
    34e4:	07 d0       	rcall	.+14     	; 0x34f4 <__divmodhi4_neg1>
    34e6:	77 fd       	sbrc	r23, 7
    34e8:	09 d0       	rcall	.+18     	; 0x34fc <__divmodhi4_neg2>
    34ea:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__udivmodhi4>
    34ee:	07 fc       	sbrc	r0, 7
    34f0:	05 d0       	rcall	.+10     	; 0x34fc <__divmodhi4_neg2>
    34f2:	3e f4       	brtc	.+14     	; 0x3502 <__divmodhi4_exit>

000034f4 <__divmodhi4_neg1>:
    34f4:	90 95       	com	r25
    34f6:	81 95       	neg	r24
    34f8:	9f 4f       	sbci	r25, 0xFF	; 255
    34fa:	08 95       	ret

000034fc <__divmodhi4_neg2>:
    34fc:	70 95       	com	r23
    34fe:	61 95       	neg	r22
    3500:	7f 4f       	sbci	r23, 0xFF	; 255

00003502 <__divmodhi4_exit>:
    3502:	08 95       	ret

00003504 <__udivmodsi4>:
    3504:	a1 e2       	ldi	r26, 0x21	; 33
    3506:	1a 2e       	mov	r1, r26
    3508:	aa 1b       	sub	r26, r26
    350a:	bb 1b       	sub	r27, r27
    350c:	fd 01       	movw	r30, r26
    350e:	0d c0       	rjmp	.+26     	; 0x352a <__udivmodsi4_ep>

00003510 <__udivmodsi4_loop>:
    3510:	aa 1f       	adc	r26, r26
    3512:	bb 1f       	adc	r27, r27
    3514:	ee 1f       	adc	r30, r30
    3516:	ff 1f       	adc	r31, r31
    3518:	a2 17       	cp	r26, r18
    351a:	b3 07       	cpc	r27, r19
    351c:	e4 07       	cpc	r30, r20
    351e:	f5 07       	cpc	r31, r21
    3520:	20 f0       	brcs	.+8      	; 0x352a <__udivmodsi4_ep>
    3522:	a2 1b       	sub	r26, r18
    3524:	b3 0b       	sbc	r27, r19
    3526:	e4 0b       	sbc	r30, r20
    3528:	f5 0b       	sbc	r31, r21

0000352a <__udivmodsi4_ep>:
    352a:	66 1f       	adc	r22, r22
    352c:	77 1f       	adc	r23, r23
    352e:	88 1f       	adc	r24, r24
    3530:	99 1f       	adc	r25, r25
    3532:	1a 94       	dec	r1
    3534:	69 f7       	brne	.-38     	; 0x3510 <__udivmodsi4_loop>
    3536:	60 95       	com	r22
    3538:	70 95       	com	r23
    353a:	80 95       	com	r24
    353c:	90 95       	com	r25
    353e:	9b 01       	movw	r18, r22
    3540:	ac 01       	movw	r20, r24
    3542:	bd 01       	movw	r22, r26
    3544:	cf 01       	movw	r24, r30
    3546:	08 95       	ret

00003548 <__divmodsi4>:
    3548:	05 2e       	mov	r0, r21
    354a:	97 fb       	bst	r25, 7
    354c:	1e f4       	brtc	.+6      	; 0x3554 <__divmodsi4+0xc>
    354e:	00 94       	com	r0
    3550:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__negsi2>
    3554:	57 fd       	sbrc	r21, 7
    3556:	07 d0       	rcall	.+14     	; 0x3566 <__divmodsi4_neg2>
    3558:	0e 94 82 1a 	call	0x3504	; 0x3504 <__udivmodsi4>
    355c:	07 fc       	sbrc	r0, 7
    355e:	03 d0       	rcall	.+6      	; 0x3566 <__divmodsi4_neg2>
    3560:	4e f4       	brtc	.+18     	; 0x3574 <__divmodsi4_exit>
    3562:	0c 94 bb 1a 	jmp	0x3576	; 0x3576 <__negsi2>

00003566 <__divmodsi4_neg2>:
    3566:	50 95       	com	r21
    3568:	40 95       	com	r20
    356a:	30 95       	com	r19
    356c:	21 95       	neg	r18
    356e:	3f 4f       	sbci	r19, 0xFF	; 255
    3570:	4f 4f       	sbci	r20, 0xFF	; 255
    3572:	5f 4f       	sbci	r21, 0xFF	; 255

00003574 <__divmodsi4_exit>:
    3574:	08 95       	ret

00003576 <__negsi2>:
    3576:	90 95       	com	r25
    3578:	80 95       	com	r24
    357a:	70 95       	com	r23
    357c:	61 95       	neg	r22
    357e:	7f 4f       	sbci	r23, 0xFF	; 255
    3580:	8f 4f       	sbci	r24, 0xFF	; 255
    3582:	9f 4f       	sbci	r25, 0xFF	; 255
    3584:	08 95       	ret

00003586 <__usmulhisi3>:
    3586:	0e 94 ef 1a 	call	0x35de	; 0x35de <__umulhisi3>

0000358a <__usmulhisi3_tail>:
    358a:	b7 ff       	sbrs	r27, 7
    358c:	08 95       	ret
    358e:	82 1b       	sub	r24, r18
    3590:	93 0b       	sbc	r25, r19
    3592:	08 95       	ret

00003594 <__muluhisi3>:
    3594:	0e 94 ef 1a 	call	0x35de	; 0x35de <__umulhisi3>
    3598:	a5 9f       	mul	r26, r21
    359a:	90 0d       	add	r25, r0
    359c:	b4 9f       	mul	r27, r20
    359e:	90 0d       	add	r25, r0
    35a0:	a4 9f       	mul	r26, r20
    35a2:	80 0d       	add	r24, r0
    35a4:	91 1d       	adc	r25, r1
    35a6:	11 24       	eor	r1, r1
    35a8:	08 95       	ret

000035aa <__udivmodhi4>:
    35aa:	aa 1b       	sub	r26, r26
    35ac:	bb 1b       	sub	r27, r27
    35ae:	51 e1       	ldi	r21, 0x11	; 17
    35b0:	07 c0       	rjmp	.+14     	; 0x35c0 <__udivmodhi4_ep>

000035b2 <__udivmodhi4_loop>:
    35b2:	aa 1f       	adc	r26, r26
    35b4:	bb 1f       	adc	r27, r27
    35b6:	a6 17       	cp	r26, r22
    35b8:	b7 07       	cpc	r27, r23
    35ba:	10 f0       	brcs	.+4      	; 0x35c0 <__udivmodhi4_ep>
    35bc:	a6 1b       	sub	r26, r22
    35be:	b7 0b       	sbc	r27, r23

000035c0 <__udivmodhi4_ep>:
    35c0:	88 1f       	adc	r24, r24
    35c2:	99 1f       	adc	r25, r25
    35c4:	5a 95       	dec	r21
    35c6:	a9 f7       	brne	.-22     	; 0x35b2 <__udivmodhi4_loop>
    35c8:	80 95       	com	r24
    35ca:	90 95       	com	r25
    35cc:	bc 01       	movw	r22, r24
    35ce:	cd 01       	movw	r24, r26
    35d0:	08 95       	ret

000035d2 <__tablejump2__>:
    35d2:	ee 0f       	add	r30, r30
    35d4:	ff 1f       	adc	r31, r31
    35d6:	05 90       	lpm	r0, Z+
    35d8:	f4 91       	lpm	r31, Z
    35da:	e0 2d       	mov	r30, r0
    35dc:	09 94       	ijmp

000035de <__umulhisi3>:
    35de:	a2 9f       	mul	r26, r18
    35e0:	b0 01       	movw	r22, r0
    35e2:	b3 9f       	mul	r27, r19
    35e4:	c0 01       	movw	r24, r0
    35e6:	a3 9f       	mul	r26, r19
    35e8:	70 0d       	add	r23, r0
    35ea:	81 1d       	adc	r24, r1
    35ec:	11 24       	eor	r1, r1
    35ee:	91 1d       	adc	r25, r1
    35f0:	b2 9f       	mul	r27, r18
    35f2:	70 0d       	add	r23, r0
    35f4:	81 1d       	adc	r24, r1
    35f6:	11 24       	eor	r1, r1
    35f8:	91 1d       	adc	r25, r1
    35fa:	08 95       	ret

000035fc <eeprom_read_byte>:
    35fc:	f9 99       	sbic	0x1f, 1	; 31
    35fe:	fe cf       	rjmp	.-4      	; 0x35fc <eeprom_read_byte>
    3600:	92 bd       	out	0x22, r25	; 34
    3602:	81 bd       	out	0x21, r24	; 33
    3604:	f8 9a       	sbi	0x1f, 0	; 31
    3606:	99 27       	eor	r25, r25
    3608:	80 b5       	in	r24, 0x20	; 32
    360a:	08 95       	ret

0000360c <_exit>:
    360c:	f8 94       	cli

0000360e <__stop_program>:
    360e:	ff cf       	rjmp	.-2      	; 0x360e <__stop_program>
