
GyroTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000198  00800100  000032ce  00003362  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000032ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f7  00800298  00800298  000034fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000034fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000352c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000478  00000000  00000000  0000356c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cd06  00000000  00000000  000039e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002324  00000000  00000000  000106ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000306c  00000000  00000000  00012a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e28  00000000  00000000  00015a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002899  00000000  00000000  000168a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005044  00000000  00000000  0001913d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e0  00000000  00000000  0001e181  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
       8:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
       c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      10:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      14:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      18:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      1c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      20:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      24:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      28:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      2c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      30:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      34:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      38:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      3c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      40:	0c 94 f2 14 	jmp	0x29e4	; 0x29e4 <__vector_16>
      44:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      48:	0c 94 1e 11 	jmp	0x223c	; 0x223c <__vector_18>
      4c:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__vector_19>
      50:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      54:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      58:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      5c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      60:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__vector_24>
      64:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	05 a8       	ldd	r0, Z+53	; 0x35
      92:	4c cd       	rjmp	.-1384   	; 0xfffffb2c <__eeprom_end+0xff7efb2c>
      94:	b2 d4       	rcall	.+2404   	; 0x9fa <__stack+0xfb>
      96:	4e b9       	out	0x0e, r20	; 14
      98:	38 36       	cpi	r19, 0x68	; 104
      9a:	a9 02       	muls	r26, r25
      9c:	0c 50       	subi	r16, 0x0C	; 12
      9e:	b9 91       	ld	r27, Y+
      a0:	86 88       	ldd	r8, Z+22	; 0x16
      a2:	08 3c       	cpi	r16, 0xC8	; 200
      a4:	a6 aa       	std	Z+54, r10	; 0x36
      a6:	aa 2a       	or	r10, r26
      a8:	be 00       	.word	0x00be	; ????
      aa:	00 00       	nop
      ac:	80 3f       	cpi	r24, 0xF0	; 240
      ae:	08 00       	.word	0x0008	; ????
      b0:	00 00       	nop
      b2:	be 92       	st	-X, r11
      b4:	24 49       	sbci	r18, 0x94	; 148
      b6:	12 3e       	cpi	r17, 0xE2	; 226
      b8:	ab aa       	std	Y+51, r10	; 0x33
      ba:	aa 2a       	or	r10, r26
      bc:	be cd       	rjmp	.-1156   	; 0xfffffc3a <__eeprom_end+0xff7efc3a>
      be:	cc cc       	rjmp	.-1640   	; 0xfffffa58 <__eeprom_end+0xff7efa58>
      c0:	4c 3e       	cpi	r20, 0xEC	; 236
      c2:	00 00       	nop
      c4:	00 80       	ld	r0, Z
      c6:	be ab       	std	Y+54, r27	; 0x36
      c8:	aa aa       	std	Y+50, r10	; 0x32
      ca:	aa 3e       	cpi	r26, 0xEA	; 234
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	bf 00       	.word	0x00bf	; ????
      d2:	00 00       	nop
      d4:	80 3f       	cpi	r24, 0xF0	; 240
      d6:	00 00       	nop
      d8:	00 00       	nop
      da:	00 08       	sbc	r0, r0
      dc:	41 78       	andi	r20, 0x81	; 129
      de:	d3 bb       	out	0x13, r29	; 19
      e0:	43 87       	std	Z+11, r20	; 0x0b
      e2:	d1 13       	cpse	r29, r17
      e4:	3d 19       	sub	r19, r13
      e6:	0e 3c       	cpi	r16, 0xCE	; 206
      e8:	c3 bd       	out	0x23, r28	; 35
      ea:	42 82       	std	Z+2, r4	; 0x02
      ec:	ad 2b       	or	r26, r29
      ee:	3e 68       	ori	r19, 0x8E	; 142
      f0:	ec 82       	std	Y+4, r14	; 0x04
      f2:	76 be       	out	0x36, r7	; 54
      f4:	d9 8f       	std	Y+25, r29	; 0x19
      f6:	e1 a9       	ldd	r30, Z+49	; 0x31
      f8:	3e 4c       	sbci	r19, 0xCE	; 206
      fa:	80 ef       	ldi	r24, 0xF0	; 240
      fc:	ff be       	out	0x3f, r15	; 63
      fe:	01 c4       	rjmp	.+2050   	; 0x902 <__stack+0x3>
     100:	ff 7f       	andi	r31, 0xFF	; 255
     102:	3f 00       	.word	0x003f	; ????
     104:	00 00       	nop
	...

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	00 08       	sbc	r0, r0
     10c:	00 02       	muls	r16, r16
     10e:	01 00       	.word	0x0001	; ????
     110:	00 03       	mulsu	r16, r16
     112:	04 07       	cpc	r16, r20
	...

0000011c <digital_pin_to_bit_mask_PGM>:
     11c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     12c:	04 08 10 20                                         ... 

00000130 <digital_pin_to_port_PGM>:
     130:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     140:	03 03 03 03                                         ....

00000144 <port_to_input_PGM>:
     144:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000014e <port_to_output_PGM>:
     14e:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000158 <port_to_mode_PGM>:
     158:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000162 <__ctors_start>:
     162:	86 11       	cpse	r24, r6
     164:	ed 14       	cp	r14, r13

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d8 e0       	ldi	r29, 0x08	; 8
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61

00000172 <__do_copy_data>:
     172:	12 e0       	ldi	r17, 0x02	; 2
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b1 e0       	ldi	r27, 0x01	; 1
     178:	ee ec       	ldi	r30, 0xCE	; 206
     17a:	f2 e3       	ldi	r31, 0x32	; 50
     17c:	02 c0       	rjmp	.+4      	; 0x182 <__do_copy_data+0x10>
     17e:	05 90       	lpm	r0, Z+
     180:	0d 92       	st	X+, r0
     182:	a8 39       	cpi	r26, 0x98	; 152
     184:	b1 07       	cpc	r27, r17
     186:	d9 f7       	brne	.-10     	; 0x17e <__do_copy_data+0xc>

00000188 <__do_clear_bss>:
     188:	24 e0       	ldi	r18, 0x04	; 4
     18a:	a8 e9       	ldi	r26, 0x98	; 152
     18c:	b2 e0       	ldi	r27, 0x02	; 2
     18e:	01 c0       	rjmp	.+2      	; 0x192 <.do_clear_bss_start>

00000190 <.do_clear_bss_loop>:
     190:	1d 92       	st	X+, r1

00000192 <.do_clear_bss_start>:
     192:	af 38       	cpi	r26, 0x8F	; 143
     194:	b2 07       	cpc	r27, r18
     196:	e1 f7       	brne	.-8      	; 0x190 <.do_clear_bss_loop>

00000198 <__do_global_ctors>:
     198:	10 e0       	ldi	r17, 0x00	; 0
     19a:	c3 eb       	ldi	r28, 0xB3	; 179
     19c:	d0 e0       	ldi	r29, 0x00	; 0
     19e:	04 c0       	rjmp	.+8      	; 0x1a8 <__do_global_ctors+0x10>
     1a0:	21 97       	sbiw	r28, 0x01	; 1
     1a2:	fe 01       	movw	r30, r28
     1a4:	0e 94 5f 19 	call	0x32be	; 0x32be <__tablejump2__>
     1a8:	c1 3b       	cpi	r28, 0xB1	; 177
     1aa:	d1 07       	cpc	r29, r17
     1ac:	c9 f7       	brne	.-14     	; 0x1a0 <__do_global_ctors+0x8>
     1ae:	0e 94 b4 11 	call	0x2368	; 0x2368 <main>
     1b2:	0c 94 65 19 	jmp	0x32ca	; 0x32ca <_exit>

000001b6 <__bad_interrupt>:
     1b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ba <loop>:
	loop_timer = micros();                                                    //Set the timer for the next loop.

}
uint8_t rawData[38];
int oucnt =0;
void loop() {
     1ba:	4f 92       	push	r4
     1bc:	5f 92       	push	r5
     1be:	6f 92       	push	r6
     1c0:	7f 92       	push	r7
     1c2:	8f 92       	push	r8
     1c4:	9f 92       	push	r9
     1c6:	af 92       	push	r10
     1c8:	bf 92       	push	r11
     1ca:	cf 92       	push	r12
     1cc:	df 92       	push	r13
     1ce:	ef 92       	push	r14
     1d0:	ff 92       	push	r15
     1d2:	0f 93       	push	r16
     1d4:	1f 93       	push	r17

	if(micros() - loop_timer > 4050)digitalWrite(LED_STATUS_PIN, HIGH);                   //Turn on the LED if the loop time exceeds 4050us.
     1d6:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <micros>
     1da:	00 91 c6 02 	lds	r16, 0x02C6	; 0x8002c6 <loop_timer>
     1de:	10 91 c7 02 	lds	r17, 0x02C7	; 0x8002c7 <loop_timer+0x1>
     1e2:	20 91 c8 02 	lds	r18, 0x02C8	; 0x8002c8 <loop_timer+0x2>
     1e6:	30 91 c9 02 	lds	r19, 0x02C9	; 0x8002c9 <loop_timer+0x3>
     1ea:	dc 01       	movw	r26, r24
     1ec:	cb 01       	movw	r24, r22
     1ee:	80 1b       	sub	r24, r16
     1f0:	91 0b       	sbc	r25, r17
     1f2:	a2 0b       	sbc	r26, r18
     1f4:	b3 0b       	sbc	r27, r19
     1f6:	83 3d       	cpi	r24, 0xD3	; 211
     1f8:	9f 40       	sbci	r25, 0x0F	; 15
     1fa:	a1 05       	cpc	r26, r1
     1fc:	b1 05       	cpc	r27, r1
     1fe:	20 f0       	brcs	.+8      	; 0x208 <loop+0x4e>
     200:	61 e0       	ldi	r22, 0x01	; 1
     202:	8d e0       	ldi	r24, 0x0D	; 13
     204:	0e 94 48 16 	call	0x2c90	; 0x2c90 <digitalWrite>
	while(micros() - loop_timer < 4000);                                      //We wait until 4000us are passed.
     208:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <micros>
     20c:	00 91 c6 02 	lds	r16, 0x02C6	; 0x8002c6 <loop_timer>
     210:	10 91 c7 02 	lds	r17, 0x02C7	; 0x8002c7 <loop_timer+0x1>
     214:	20 91 c8 02 	lds	r18, 0x02C8	; 0x8002c8 <loop_timer+0x2>
     218:	30 91 c9 02 	lds	r19, 0x02C9	; 0x8002c9 <loop_timer+0x3>
     21c:	dc 01       	movw	r26, r24
     21e:	cb 01       	movw	r24, r22
     220:	80 1b       	sub	r24, r16
     222:	91 0b       	sbc	r25, r17
     224:	a2 0b       	sbc	r26, r18
     226:	b3 0b       	sbc	r27, r19
     228:	80 3a       	cpi	r24, 0xA0	; 160
     22a:	9f 40       	sbci	r25, 0x0F	; 15
     22c:	a1 05       	cpc	r26, r1
     22e:	b1 05       	cpc	r27, r1
     230:	58 f3       	brcs	.-42     	; 0x208 <loop+0x4e>
	loop_timer = micros();                                                    //Set the timer for the next loop.
     232:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <micros>
     236:	60 93 c6 02 	sts	0x02C6, r22	; 0x8002c6 <loop_timer>
     23a:	70 93 c7 02 	sts	0x02C7, r23	; 0x8002c7 <loop_timer+0x1>
     23e:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <loop_timer+0x2>
     242:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <loop_timer+0x3>
	
	RawRead();
     246:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z7RawReadv>
	angle_pitch += gyro_pitch * 0.0000611;                                    //Calculate the traveled pitch angle and add this to the angle_pitch variable.
     24a:	20 ed       	ldi	r18, 0xD0	; 208
     24c:	32 e2       	ldi	r19, 0x22	; 34
     24e:	40 e8       	ldi	r20, 0x80	; 128
     250:	58 e3       	ldi	r21, 0x38	; 56
     252:	60 91 f7 02 	lds	r22, 0x02F7	; 0x8002f7 <gyro_pitch>
     256:	70 91 f8 02 	lds	r23, 0x02F8	; 0x8002f8 <gyro_pitch+0x1>
     25a:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <gyro_pitch+0x2>
     25e:	90 91 fa 02 	lds	r25, 0x02FA	; 0x8002fa <gyro_pitch+0x3>
     262:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3>
     266:	20 91 a2 02 	lds	r18, 0x02A2	; 0x8002a2 <angle_pitch>
     26a:	30 91 a3 02 	lds	r19, 0x02A3	; 0x8002a3 <angle_pitch+0x1>
     26e:	40 91 a4 02 	lds	r20, 0x02A4	; 0x8002a4 <angle_pitch+0x2>
     272:	50 91 a5 02 	lds	r21, 0x02A5	; 0x8002a5 <angle_pitch+0x3>
     276:	0e 94 ef 0b 	call	0x17de	; 0x17de <__addsf3>
     27a:	6b 01       	movw	r12, r22
     27c:	7c 01       	movw	r14, r24
	angle_roll += gyro_roll * 0.0000611;                                      //Calculate the traveled roll angle and add this to the angle_roll variable.
     27e:	20 ed       	ldi	r18, 0xD0	; 208
     280:	32 e2       	ldi	r19, 0x22	; 34
     282:	40 e8       	ldi	r20, 0x80	; 128
     284:	58 e3       	ldi	r21, 0x38	; 56
     286:	60 91 f3 02 	lds	r22, 0x02F3	; 0x8002f3 <gyro_roll>
     28a:	70 91 f4 02 	lds	r23, 0x02F4	; 0x8002f4 <gyro_roll+0x1>
     28e:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <gyro_roll+0x2>
     292:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <gyro_roll+0x3>
     296:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3>
     29a:	20 91 9e 02 	lds	r18, 0x029E	; 0x80029e <angle_roll>
     29e:	30 91 9f 02 	lds	r19, 0x029F	; 0x80029f <angle_roll+0x1>
     2a2:	40 91 a0 02 	lds	r20, 0x02A0	; 0x8002a0 <angle_roll+0x2>
     2a6:	50 91 a1 02 	lds	r21, 0x02A1	; 0x8002a1 <angle_roll+0x3>
     2aa:	0e 94 ef 0b 	call	0x17de	; 0x17de <__addsf3>
     2ae:	4b 01       	movw	r8, r22
     2b0:	5c 01       	movw	r10, r24
	angle_yaw +=  gyro_yaw * 0.0000611;                                      //Calculate the traveled roll angle and add this to the angle_roll variable.
     2b2:	40 90 ef 02 	lds	r4, 0x02EF	; 0x8002ef <gyro_yaw>
     2b6:	50 90 f0 02 	lds	r5, 0x02F0	; 0x8002f0 <gyro_yaw+0x1>
     2ba:	60 90 f1 02 	lds	r6, 0x02F1	; 0x8002f1 <gyro_yaw+0x2>
     2be:	70 90 f2 02 	lds	r7, 0x02F2	; 0x8002f2 <gyro_yaw+0x3>
     2c2:	20 ed       	ldi	r18, 0xD0	; 208
     2c4:	32 e2       	ldi	r19, 0x22	; 34
     2c6:	40 e8       	ldi	r20, 0x80	; 128
     2c8:	58 e3       	ldi	r21, 0x38	; 56
     2ca:	c3 01       	movw	r24, r6
     2cc:	b2 01       	movw	r22, r4
     2ce:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3>
     2d2:	9b 01       	movw	r18, r22
     2d4:	ac 01       	movw	r20, r24
     2d6:	60 91 9a 02 	lds	r22, 0x029A	; 0x80029a <angle_yaw>
     2da:	70 91 9b 02 	lds	r23, 0x029B	; 0x80029b <angle_yaw+0x1>
     2de:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <angle_yaw+0x2>
     2e2:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <angle_yaw+0x3>
     2e6:	0e 94 ef 0b 	call	0x17de	; 0x17de <__addsf3>
     2ea:	60 93 9a 02 	sts	0x029A, r22	; 0x80029a <angle_yaw>
     2ee:	70 93 9b 02 	sts	0x029B, r23	; 0x80029b <angle_yaw+0x1>
     2f2:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <angle_yaw+0x2>
     2f6:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <angle_yaw+0x3>

	//0.000001066 = 0.0000611 * (3.142(PI) / 180degr) The Arduino sin function is in radians
	angle_pitch -= angle_roll * sin(gyro_yaw * 0.000001066);                  //If the IMU has yawed transfer the roll angle to the pitch angel.
     2fa:	2b e7       	ldi	r18, 0x7B	; 123
     2fc:	33 e1       	ldi	r19, 0x13	; 19
     2fe:	4f e8       	ldi	r20, 0x8F	; 143
     300:	55 e3       	ldi	r21, 0x35	; 53
     302:	c3 01       	movw	r24, r6
     304:	b2 01       	movw	r22, r4
     306:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3>
     30a:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <sin>
     30e:	2b 01       	movw	r4, r22
     310:	3c 01       	movw	r6, r24
     312:	9b 01       	movw	r18, r22
     314:	ac 01       	movw	r20, r24
     316:	c5 01       	movw	r24, r10
     318:	b4 01       	movw	r22, r8
     31a:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3>
     31e:	9b 01       	movw	r18, r22
     320:	ac 01       	movw	r20, r24
     322:	c7 01       	movw	r24, r14
     324:	b6 01       	movw	r22, r12
     326:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__subsf3>
     32a:	6b 01       	movw	r12, r22
     32c:	7c 01       	movw	r14, r24
     32e:	60 93 a2 02 	sts	0x02A2, r22	; 0x8002a2 <angle_pitch>
     332:	70 93 a3 02 	sts	0x02A3, r23	; 0x8002a3 <angle_pitch+0x1>
     336:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <angle_pitch+0x2>
     33a:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <angle_pitch+0x3>
	angle_roll += angle_pitch * sin(gyro_yaw * 0.000001066);                  //If the IMU has yawed transfer the pitch angle to the roll angel.
     33e:	9b 01       	movw	r18, r22
     340:	ac 01       	movw	r20, r24
     342:	c3 01       	movw	r24, r6
     344:	b2 01       	movw	r22, r4
     346:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3>
     34a:	9b 01       	movw	r18, r22
     34c:	ac 01       	movw	r20, r24
     34e:	c5 01       	movw	r24, r10
     350:	b4 01       	movw	r22, r8
     352:	0e 94 ef 0b 	call	0x17de	; 0x17de <__addsf3>
     356:	60 93 9e 02 	sts	0x029E, r22	; 0x80029e <angle_roll>
     35a:	70 93 9f 02 	sts	0x029F, r23	; 0x80029f <angle_roll+0x1>
     35e:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <angle_roll+0x2>
     362:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <angle_roll+0x3>
	
	if (oucnt++ > 125)
     366:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <__data_end>
     36a:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <__data_end+0x1>
     36e:	9c 01       	movw	r18, r24
     370:	2f 5f       	subi	r18, 0xFF	; 255
     372:	3f 4f       	sbci	r19, 0xFF	; 255
     374:	30 93 99 02 	sts	0x0299, r19	; 0x800299 <__data_end+0x1>
     378:	20 93 98 02 	sts	0x0298, r18	; 0x800298 <__data_end>
     37c:	8e 37       	cpi	r24, 0x7E	; 126
     37e:	91 05       	cpc	r25, r1
     380:	0c f4       	brge	.+2      	; 0x384 <loop+0x1ca>
     382:	7c c0       	rjmp	.+248    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	{
		blinkState = !blinkState;
     384:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <blinkState>
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	89 27       	eor	r24, r25
     38c:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <blinkState>
		//digitalWrite(13, blinkState);
		Serial.print(angle_pitch); Serial.print("\t");
     390:	22 e0       	ldi	r18, 0x02	; 2
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	b7 01       	movw	r22, r14
     396:	a6 01       	movw	r20, r12
     398:	89 e2       	ldi	r24, 0x29	; 41
     39a:	93 e0       	ldi	r25, 0x03	; 3
     39c:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEdi>
     3a0:	61 e0       	ldi	r22, 0x01	; 1
     3a2:	71 e0       	ldi	r23, 0x01	; 1
     3a4:	89 e2       	ldi	r24, 0x29	; 41
     3a6:	93 e0       	ldi	r25, 0x03	; 3
     3a8:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_ZN5Print5printEPKc>
		Serial.print(angle_roll); Serial.print("\t");
     3ac:	40 91 9e 02 	lds	r20, 0x029E	; 0x80029e <angle_roll>
     3b0:	50 91 9f 02 	lds	r21, 0x029F	; 0x80029f <angle_roll+0x1>
     3b4:	60 91 a0 02 	lds	r22, 0x02A0	; 0x8002a0 <angle_roll+0x2>
     3b8:	70 91 a1 02 	lds	r23, 0x02A1	; 0x8002a1 <angle_roll+0x3>
     3bc:	22 e0       	ldi	r18, 0x02	; 2
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	89 e2       	ldi	r24, 0x29	; 41
     3c2:	93 e0       	ldi	r25, 0x03	; 3
     3c4:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEdi>
     3c8:	61 e0       	ldi	r22, 0x01	; 1
     3ca:	71 e0       	ldi	r23, 0x01	; 1
     3cc:	89 e2       	ldi	r24, 0x29	; 41
     3ce:	93 e0       	ldi	r25, 0x03	; 3
     3d0:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_ZN5Print5printEPKc>
		Serial.print(angle_yaw); Serial.print("\t");
     3d4:	40 91 9a 02 	lds	r20, 0x029A	; 0x80029a <angle_yaw>
     3d8:	50 91 9b 02 	lds	r21, 0x029B	; 0x80029b <angle_yaw+0x1>
     3dc:	60 91 9c 02 	lds	r22, 0x029C	; 0x80029c <angle_yaw+0x2>
     3e0:	70 91 9d 02 	lds	r23, 0x029D	; 0x80029d <angle_yaw+0x3>
     3e4:	22 e0       	ldi	r18, 0x02	; 2
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	89 e2       	ldi	r24, 0x29	; 41
     3ea:	93 e0       	ldi	r25, 0x03	; 3
     3ec:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEdi>
     3f0:	61 e0       	ldi	r22, 0x01	; 1
     3f2:	71 e0       	ldi	r23, 0x01	; 1
     3f4:	89 e2       	ldi	r24, 0x29	; 41
     3f6:	93 e0       	ldi	r25, 0x03	; 3
     3f8:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_ZN5Print5printEPKc>
		Serial.print(gyro_pitch); Serial.print("\t");
     3fc:	40 91 f7 02 	lds	r20, 0x02F7	; 0x8002f7 <gyro_pitch>
     400:	50 91 f8 02 	lds	r21, 0x02F8	; 0x8002f8 <gyro_pitch+0x1>
     404:	60 91 f9 02 	lds	r22, 0x02F9	; 0x8002f9 <gyro_pitch+0x2>
     408:	70 91 fa 02 	lds	r23, 0x02FA	; 0x8002fa <gyro_pitch+0x3>
     40c:	22 e0       	ldi	r18, 0x02	; 2
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	89 e2       	ldi	r24, 0x29	; 41
     412:	93 e0       	ldi	r25, 0x03	; 3
     414:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEdi>
     418:	61 e0       	ldi	r22, 0x01	; 1
     41a:	71 e0       	ldi	r23, 0x01	; 1
     41c:	89 e2       	ldi	r24, 0x29	; 41
     41e:	93 e0       	ldi	r25, 0x03	; 3
     420:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_ZN5Print5printEPKc>
		Serial.print(gyro_roll); Serial.print("\t");
     424:	40 91 f3 02 	lds	r20, 0x02F3	; 0x8002f3 <gyro_roll>
     428:	50 91 f4 02 	lds	r21, 0x02F4	; 0x8002f4 <gyro_roll+0x1>
     42c:	60 91 f5 02 	lds	r22, 0x02F5	; 0x8002f5 <gyro_roll+0x2>
     430:	70 91 f6 02 	lds	r23, 0x02F6	; 0x8002f6 <gyro_roll+0x3>
     434:	22 e0       	ldi	r18, 0x02	; 2
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	89 e2       	ldi	r24, 0x29	; 41
     43a:	93 e0       	ldi	r25, 0x03	; 3
     43c:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEdi>
     440:	61 e0       	ldi	r22, 0x01	; 1
     442:	71 e0       	ldi	r23, 0x01	; 1
     444:	89 e2       	ldi	r24, 0x29	; 41
     446:	93 e0       	ldi	r25, 0x03	; 3
     448:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_ZN5Print5printEPKc>
		Serial.print(gyro_yaw); Serial.println("\t");
     44c:	40 91 ef 02 	lds	r20, 0x02EF	; 0x8002ef <gyro_yaw>
     450:	50 91 f0 02 	lds	r21, 0x02F0	; 0x8002f0 <gyro_yaw+0x1>
     454:	60 91 f1 02 	lds	r22, 0x02F1	; 0x8002f1 <gyro_yaw+0x2>
     458:	70 91 f2 02 	lds	r23, 0x02F2	; 0x8002f2 <gyro_yaw+0x3>
     45c:	22 e0       	ldi	r18, 0x02	; 2
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	89 e2       	ldi	r24, 0x29	; 41
     462:	93 e0       	ldi	r25, 0x03	; 3
     464:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEdi>
     468:	61 e0       	ldi	r22, 0x01	; 1
     46a:	71 e0       	ldi	r23, 0x01	; 1
     46c:	89 e2       	ldi	r24, 0x29	; 41
     46e:	93 e0       	ldi	r25, 0x03	; 3
     470:	0e 94 1c 12 	call	0x2438	; 0x2438 <_ZN5Print7printlnEPKc>
		oucnt = 0;
     474:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <__data_end+0x1>
     478:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <__data_end>
	}
	
}
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	ff 90       	pop	r15
     482:	ef 90       	pop	r14
     484:	df 90       	pop	r13
     486:	cf 90       	pop	r12
     488:	bf 90       	pop	r11
     48a:	af 90       	pop	r10
     48c:	9f 90       	pop	r9
     48e:	8f 90       	pop	r8
     490:	7f 90       	pop	r7
     492:	6f 90       	pop	r6
     494:	5f 90       	pop	r5
     496:	4f 90       	pop	r4
     498:	08 95       	ret

0000049a <_Z8InitGyrov>:



void InitGyro(void)
{
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
	TWBR = 12;                                                                //Set the I2C clock speed to 400kHz.
     49e:	8c e0       	ldi	r24, 0x0C	; 12
     4a0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	Wire.beginTransmission(MPU9250_ADDRESS);
     4a4:	68 e6       	ldi	r22, 0x68	; 104
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	86 ec       	ldi	r24, 0xC6	; 198
     4aa:	93 e0       	ldi	r25, 0x03	; 3
     4ac:	0e 94 62 14 	call	0x28c4	; 0x28c4 <_ZN7TwoWire17beginTransmissionEi>
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     4b0:	c6 ec       	ldi	r28, 0xC6	; 198
     4b2:	d3 e0       	ldi	r29, 0x03	; 3
     4b4:	e8 81       	ld	r30, Y
     4b6:	f9 81       	ldd	r31, Y+1	; 0x01
     4b8:	01 90       	ld	r0, Z+
     4ba:	f0 81       	ld	r31, Z
     4bc:	e0 2d       	mov	r30, r0
     4be:	6b e6       	ldi	r22, 0x6B	; 107
     4c0:	ce 01       	movw	r24, r28
     4c2:	09 95       	icall
     4c4:	e8 81       	ld	r30, Y
     4c6:	f9 81       	ldd	r31, Y+1	; 0x01
     4c8:	01 90       	ld	r0, Z+
     4ca:	f0 81       	ld	r31, Z
     4cc:	e0 2d       	mov	r30, r0
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	ce 01       	movw	r24, r28
     4d2:	09 95       	icall
	Wire.write(PWR_MGMT_1);                                                          //We want to write to the PWR_MGMT_1 register (6B hex)
	Wire.write(0x00);                                                          //Set the register bits as 00000000 to activate the gyro
	Wire.endTransmission();                                                    //End the transmission with the gyro.
     4d4:	ce 01       	movw	r24, r28
     4d6:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <_ZN7TwoWire15endTransmissionEv>

	Wire.beginTransmission(MPU9250_ADDRESS);
     4da:	68 e6       	ldi	r22, 0x68	; 104
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	ce 01       	movw	r24, r28
     4e0:	0e 94 62 14 	call	0x28c4	; 0x28c4 <_ZN7TwoWire17beginTransmissionEi>
     4e4:	e8 81       	ld	r30, Y
     4e6:	f9 81       	ldd	r31, Y+1	; 0x01
     4e8:	01 90       	ld	r0, Z+
     4ea:	f0 81       	ld	r31, Z
     4ec:	e0 2d       	mov	r30, r0
     4ee:	6b e6       	ldi	r22, 0x6B	; 107
     4f0:	ce 01       	movw	r24, r28
     4f2:	09 95       	icall
     4f4:	e8 81       	ld	r30, Y
     4f6:	f9 81       	ldd	r31, Y+1	; 0x01
     4f8:	01 90       	ld	r0, Z+
     4fa:	f0 81       	ld	r31, Z
     4fc:	e0 2d       	mov	r30, r0
     4fe:	61 e0       	ldi	r22, 0x01	; 1
     500:	ce 01       	movw	r24, r28
     502:	09 95       	icall
	Wire.write(PWR_MGMT_1);                                                          //We want to write to the PWR_MGMT_1 register (6B hex)
	Wire.write(0x01);                                                          // Auto select clock source to be PLL gyroscope reference if ready else
	Wire.endTransmission();                                                    //End the transmission with the gyro.
     504:	ce 01       	movw	r24, r28
     506:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <_ZN7TwoWire15endTransmissionEv>

	Wire.beginTransmission(MPU9250_ADDRESS);
     50a:	68 e6       	ldi	r22, 0x68	; 104
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	ce 01       	movw	r24, r28
     510:	0e 94 62 14 	call	0x28c4	; 0x28c4 <_ZN7TwoWire17beginTransmissionEi>
     514:	e8 81       	ld	r30, Y
     516:	f9 81       	ldd	r31, Y+1	; 0x01
     518:	01 90       	ld	r0, Z+
     51a:	f0 81       	ld	r31, Z
     51c:	e0 2d       	mov	r30, r0
     51e:	6b e1       	ldi	r22, 0x1B	; 27
     520:	ce 01       	movw	r24, r28
     522:	09 95       	icall
     524:	e8 81       	ld	r30, Y
     526:	f9 81       	ldd	r31, Y+1	; 0x01
     528:	01 90       	ld	r0, Z+
     52a:	f0 81       	ld	r31, Z
     52c:	e0 2d       	mov	r30, r0
     52e:	68 e0       	ldi	r22, 0x08	; 8
     530:	ce 01       	movw	r24, r28
     532:	09 95       	icall
	Wire.write(GYRO_CONFIG);                                                          //We want to write to the GYRO_CONFIG register (1B hex)
	Wire.write(0x08);                                                          //Set the register bits as 00001000 (500dps full scale)
	Wire.endTransmission();                                                    //End the transmission with the gyro
     534:	ce 01       	movw	r24, r28
     536:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <_ZN7TwoWire15endTransmissionEv>

	Wire.beginTransmission(MPU9250_ADDRESS);
     53a:	68 e6       	ldi	r22, 0x68	; 104
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	ce 01       	movw	r24, r28
     540:	0e 94 62 14 	call	0x28c4	; 0x28c4 <_ZN7TwoWire17beginTransmissionEi>
     544:	e8 81       	ld	r30, Y
     546:	f9 81       	ldd	r31, Y+1	; 0x01
     548:	01 90       	ld	r0, Z+
     54a:	f0 81       	ld	r31, Z
     54c:	e0 2d       	mov	r30, r0
     54e:	6c e1       	ldi	r22, 0x1C	; 28
     550:	ce 01       	movw	r24, r28
     552:	09 95       	icall
     554:	e8 81       	ld	r30, Y
     556:	f9 81       	ldd	r31, Y+1	; 0x01
     558:	01 90       	ld	r0, Z+
     55a:	f0 81       	ld	r31, Z
     55c:	e0 2d       	mov	r30, r0
     55e:	60 e1       	ldi	r22, 0x10	; 16
     560:	ce 01       	movw	r24, r28
     562:	09 95       	icall
	Wire.write(0x1C);                                                          //We want to write to the ACCEL_CONFIG register (1A hex)
	Wire.write(0x10);                                                          //Set the register bits as 00010000 (+/- 8g full scale range)
	Wire.endTransmission();                                                    //End the transmission with the gyro
     564:	ce 01       	movw	r24, r28
     566:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <_ZN7TwoWire15endTransmissionEv>

	
	//Let's perform a random register check to see if the values are written correct
	Wire.beginTransmission(MPU9250_ADDRESS);
     56a:	68 e6       	ldi	r22, 0x68	; 104
     56c:	70 e0       	ldi	r23, 0x00	; 0
     56e:	ce 01       	movw	r24, r28
     570:	0e 94 62 14 	call	0x28c4	; 0x28c4 <_ZN7TwoWire17beginTransmissionEi>
     574:	e8 81       	ld	r30, Y
     576:	f9 81       	ldd	r31, Y+1	; 0x01
     578:	01 90       	ld	r0, Z+
     57a:	f0 81       	ld	r31, Z
     57c:	e0 2d       	mov	r30, r0
     57e:	6b e1       	ldi	r22, 0x1B	; 27
     580:	ce 01       	movw	r24, r28
     582:	09 95       	icall
	Wire.write(GYRO_CONFIG);                                                          //Start reading @ register 0x1B
	Wire.endTransmission();                                                    //End the transmission
     584:	ce 01       	movw	r24, r28
     586:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(MPU9250_ADDRESS, 1);                                           //Request 1 bytes from the gyro
     58a:	41 e0       	ldi	r20, 0x01	; 1
     58c:	50 e0       	ldi	r21, 0x00	; 0
     58e:	68 e6       	ldi	r22, 0x68	; 104
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	ce 01       	movw	r24, r28
     594:	0e 94 e5 14 	call	0x29ca	; 0x29ca <_ZN7TwoWire11requestFromEii>
	while(Wire.available() < 1);                                               //Wait until the 6 bytes are received
     598:	86 ec       	ldi	r24, 0xC6	; 198
     59a:	93 e0       	ldi	r25, 0x03	; 3
     59c:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN7TwoWire9availableEv>
     5a0:	18 16       	cp	r1, r24
     5a2:	19 06       	cpc	r1, r25
     5a4:	cc f7       	brge	.-14     	; 0x598 <_Z8InitGyrov+0xfe>
	if(Wire.read() != 0x08)
     5a6:	86 ec       	ldi	r24, 0xC6	; 198
     5a8:	93 e0       	ldi	r25, 0x03	; 3
     5aa:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN7TwoWire4readEv>
     5ae:	08 97       	sbiw	r24, 0x08	; 8
     5b0:	c9 f0       	breq	.+50     	; 0x5e4 <_Z8InitGyrov+0x14a>
	{                                                   //Check if the value is 0x08
		digitalWrite(13,HIGH);                                           //Turn on the warning led
     5b2:	61 e0       	ldi	r22, 0x01	; 1
     5b4:	8d e0       	ldi	r24, 0x0D	; 13
     5b6:	0e 94 48 16 	call	0x2c90	; 0x2c90 <digitalWrite>
		while(1)
		{
			delay(100);                                                     //Stay in this loop for ever{
     5ba:	64 e6       	ldi	r22, 0x64	; 100
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <delay>
			digitalWrite(13,HIGH);                                           //Turn on the warning led
     5c6:	61 e0       	ldi	r22, 0x01	; 1
     5c8:	8d e0       	ldi	r24, 0x0D	; 13
     5ca:	0e 94 48 16 	call	0x2c90	; 0x2c90 <digitalWrite>
			delay(100);                                                     //Stay in this loop for ever
     5ce:	64 e6       	ldi	r22, 0x64	; 100
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <delay>
			digitalWrite(13,LOW);                                           //Turn on the warning led
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	8d e0       	ldi	r24, 0x0D	; 13
     5de:	0e 94 48 16 	call	0x2c90	; 0x2c90 <digitalWrite>
	Wire.beginTransmission(MPU9250_ADDRESS);
	Wire.write(GYRO_CONFIG);                                                          //Start reading @ register 0x1B
	Wire.endTransmission();                                                    //End the transmission
	Wire.requestFrom(MPU9250_ADDRESS, 1);                                           //Request 1 bytes from the gyro
	while(Wire.available() < 1);                                               //Wait until the 6 bytes are received
	if(Wire.read() != 0x08)
     5e2:	eb cf       	rjmp	.-42     	; 0x5ba <_Z8InitGyrov+0x120>
			digitalWrite(13,HIGH);                                           //Turn on the warning led
			delay(100);                                                     //Stay in this loop for ever
			digitalWrite(13,LOW);                                           //Turn on the warning led
		}
	}
	Wire.beginTransmission(MPU9250_ADDRESS);
     5e4:	68 e6       	ldi	r22, 0x68	; 104
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	86 ec       	ldi	r24, 0xC6	; 198
     5ea:	93 e0       	ldi	r25, 0x03	; 3
     5ec:	0e 94 62 14 	call	0x28c4	; 0x28c4 <_ZN7TwoWire17beginTransmissionEi>
     5f0:	c6 ec       	ldi	r28, 0xC6	; 198
     5f2:	d3 e0       	ldi	r29, 0x03	; 3
     5f4:	e8 81       	ld	r30, Y
     5f6:	f9 81       	ldd	r31, Y+1	; 0x01
     5f8:	01 90       	ld	r0, Z+
     5fa:	f0 81       	ld	r31, Z
     5fc:	e0 2d       	mov	r30, r0
     5fe:	6a e1       	ldi	r22, 0x1A	; 26
     600:	ce 01       	movw	r24, r28
     602:	09 95       	icall
     604:	e8 81       	ld	r30, Y
     606:	f9 81       	ldd	r31, Y+1	; 0x01
     608:	01 90       	ld	r0, Z+
     60a:	f0 81       	ld	r31, Z
     60c:	e0 2d       	mov	r30, r0
     60e:	63 e0       	ldi	r22, 0x03	; 3
     610:	ce 01       	movw	r24, r28
     612:	09 95       	icall
	Wire.write(CONFIG);                                                          //We want to write to the CONFIG register (1A hex)
	Wire.write(0x03);                                                          //Set the register bits as 00000011 (Set Digital Low Pass Filter to ~43Hz)
	Wire.endTransmission();                                                    //End the transmission with the gyro
     614:	ce 01       	movw	r24, r28
     616:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <_ZN7TwoWire15endTransmissionEv>
	
	writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x02);
     61a:	42 e0       	ldi	r20, 0x02	; 2
     61c:	67 e3       	ldi	r22, 0x37	; 55
     61e:	88 e6       	ldi	r24, 0x68	; 104
     620:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_Z9writeBytehhh>
	////i2c_writeReg(MPU6050_ADDRESS, 0x37, 0x02);           //INT_PIN_CFG   -- INT_LEVEL=0 ; INT_OPEN=0 ; LATCH_INT_EN=0 ; INT_RD_CLEAR=0 ; FSYNC_INT_LEVEL=0 ; FSYNC_INT_EN=0 ; I2C_BYPASS_EN=1 ; CLKOUT_EN=0
	//Wire.beginTransmission(MPU9250_ADDRESS);
	//Wire.write(0x37);                                                          
	//Wire.write(0x02);                                                          
	//Wire.endTransmission();                                                    
	CalibrateGyro();
     624:	0e 94 0a 06 	call	0xc14	; 0xc14 <_Z13CalibrateGyrov>
}
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	08 95       	ret

0000062e <setup>:
float   selfTest[6];    // holds results of gyro and accelerometer self test

float angle_roll_acc, angle_pitch_acc, angle_pitch, angle_roll, angle_yaw;


void setup() {
     62e:	8f 92       	push	r8
     630:	af 92       	push	r10
     632:	cf 92       	push	r12
     634:	ef 92       	push	r14
     636:	0f 93       	push	r16
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
    // Setup for Master mode, pins 16/18, external pullups, 400kHz
    Wire.begin();//I2C_MASTER, 0x00, I2C_PINS_16_17, I2C_PULLUP_EXT, I2C_RATE_400);
     63c:	86 ec       	ldi	r24, 0xC6	; 198
     63e:	93 e0       	ldi	r25, 0x03	; 3
     640:	0e 94 4d 14 	call	0x289a	; 0x289a <_ZN7TwoWire5beginEv>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     644:	26 e0       	ldi	r18, 0x06	; 6
     646:	40 e0       	ldi	r20, 0x00	; 0
     648:	52 ec       	ldi	r21, 0xC2	; 194
     64a:	61 e0       	ldi	r22, 0x01	; 1
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	89 e2       	ldi	r24, 0x29	; 41
     650:	93 e0       	ldi	r25, 0x03	; 3
     652:	0e 94 b5 10 	call	0x216a	; 0x216a <_ZN14HardwareSerial5beginEmh>
	
    Serial.begin(115200);
    
    // Read the WHO_AM_I register, this is a good test of communication
    Serial.println("MPU9250 + MPL3115A2 devices...");
     656:	63 e0       	ldi	r22, 0x03	; 3
     658:	71 e0       	ldi	r23, 0x01	; 1
     65a:	89 e2       	ldi	r24, 0x29	; 41
     65c:	93 e0       	ldi	r25, 0x03	; 3
     65e:	0e 94 1c 12 	call	0x2438	; 0x2438 <_ZN5Print7printlnEPKc>
    byte c1 = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);  // Read WHO_AM_I register for MPU-9250
     662:	65 e7       	ldi	r22, 0x75	; 117
     664:	88 e6       	ldi	r24, 0x68	; 104
     666:	0e 94 50 07 	call	0xea0	; 0xea0 <_Z8readBytehh>
     66a:	c8 2f       	mov	r28, r24
    Serial.print("MPU9250 "); Serial.print("I AM "); Serial.print(c1, HEX); 
     66c:	62 e2       	ldi	r22, 0x22	; 34
     66e:	71 e0       	ldi	r23, 0x01	; 1
     670:	89 e2       	ldi	r24, 0x29	; 41
     672:	93 e0       	ldi	r25, 0x03	; 3
     674:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_ZN5Print5printEPKc>
     678:	6b e2       	ldi	r22, 0x2B	; 43
     67a:	71 e0       	ldi	r23, 0x01	; 1
     67c:	89 e2       	ldi	r24, 0x29	; 41
     67e:	93 e0       	ldi	r25, 0x03	; 3
     680:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_ZN5Print5printEPKc>
     684:	40 e1       	ldi	r20, 0x10	; 16
     686:	50 e0       	ldi	r21, 0x00	; 0
     688:	6c 2f       	mov	r22, r28
     68a:	89 e2       	ldi	r24, 0x29	; 41
     68c:	93 e0       	ldi	r25, 0x03	; 3
     68e:	0e 94 9c 12 	call	0x2538	; 0x2538 <_ZN5Print5printEhi>
	    
	MPU9250SelfTest(selfTest); // Start by performing self test and reporting values
     692:	8e ea       	ldi	r24, 0xAE	; 174
     694:	92 e0       	ldi	r25, 0x02	; 2
     696:	0e 94 a8 07 	call	0xf50	; 0xf50 <_Z15MPU9250SelfTestPf>
	Serial.print("x-axis self test: acceleration trim within : "); Serial.print(selfTest[0],1); Serial.println("% of factory value");
     69a:	61 e3       	ldi	r22, 0x31	; 49
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	89 e2       	ldi	r24, 0x29	; 41
     6a0:	93 e0       	ldi	r25, 0x03	; 3
     6a2:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_ZN5Print5printEPKc>
     6a6:	ce ea       	ldi	r28, 0xAE	; 174
     6a8:	d2 e0       	ldi	r29, 0x02	; 2
     6aa:	48 81       	ld	r20, Y
     6ac:	59 81       	ldd	r21, Y+1	; 0x01
     6ae:	6a 81       	ldd	r22, Y+2	; 0x02
     6b0:	7b 81       	ldd	r23, Y+3	; 0x03
     6b2:	21 e0       	ldi	r18, 0x01	; 1
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	89 e2       	ldi	r24, 0x29	; 41
     6b8:	93 e0       	ldi	r25, 0x03	; 3
     6ba:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEdi>
     6be:	6f e5       	ldi	r22, 0x5F	; 95
     6c0:	71 e0       	ldi	r23, 0x01	; 1
     6c2:	89 e2       	ldi	r24, 0x29	; 41
     6c4:	93 e0       	ldi	r25, 0x03	; 3
     6c6:	0e 94 1c 12 	call	0x2438	; 0x2438 <_ZN5Print7printlnEPKc>
	Serial.print("y-axis self test: acceleration trim within : "); Serial.print(selfTest[1],1); Serial.println("% of factory value");
     6ca:	62 e7       	ldi	r22, 0x72	; 114
     6cc:	71 e0       	ldi	r23, 0x01	; 1
     6ce:	89 e2       	ldi	r24, 0x29	; 41
     6d0:	93 e0       	ldi	r25, 0x03	; 3
     6d2:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_ZN5Print5printEPKc>
     6d6:	4c 81       	ldd	r20, Y+4	; 0x04
     6d8:	5d 81       	ldd	r21, Y+5	; 0x05
     6da:	6e 81       	ldd	r22, Y+6	; 0x06
     6dc:	7f 81       	ldd	r23, Y+7	; 0x07
     6de:	21 e0       	ldi	r18, 0x01	; 1
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	89 e2       	ldi	r24, 0x29	; 41
     6e4:	93 e0       	ldi	r25, 0x03	; 3
     6e6:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEdi>
     6ea:	6f e5       	ldi	r22, 0x5F	; 95
     6ec:	71 e0       	ldi	r23, 0x01	; 1
     6ee:	89 e2       	ldi	r24, 0x29	; 41
     6f0:	93 e0       	ldi	r25, 0x03	; 3
     6f2:	0e 94 1c 12 	call	0x2438	; 0x2438 <_ZN5Print7printlnEPKc>
	Serial.print("z-axis self test: acceleration trim within : "); Serial.print(selfTest[2],1); Serial.println("% of factory value");
     6f6:	60 ea       	ldi	r22, 0xA0	; 160
     6f8:	71 e0       	ldi	r23, 0x01	; 1
     6fa:	89 e2       	ldi	r24, 0x29	; 41
     6fc:	93 e0       	ldi	r25, 0x03	; 3
     6fe:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_ZN5Print5printEPKc>
     702:	48 85       	ldd	r20, Y+8	; 0x08
     704:	59 85       	ldd	r21, Y+9	; 0x09
     706:	6a 85       	ldd	r22, Y+10	; 0x0a
     708:	7b 85       	ldd	r23, Y+11	; 0x0b
     70a:	21 e0       	ldi	r18, 0x01	; 1
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	89 e2       	ldi	r24, 0x29	; 41
     710:	93 e0       	ldi	r25, 0x03	; 3
     712:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEdi>
     716:	6f e5       	ldi	r22, 0x5F	; 95
     718:	71 e0       	ldi	r23, 0x01	; 1
     71a:	89 e2       	ldi	r24, 0x29	; 41
     71c:	93 e0       	ldi	r25, 0x03	; 3
     71e:	0e 94 1c 12 	call	0x2438	; 0x2438 <_ZN5Print7printlnEPKc>
	Serial.print("x-axis self test: gyration trim within : "); Serial.print(selfTest[3],1); Serial.println("% of factory value");
     722:	6e ec       	ldi	r22, 0xCE	; 206
     724:	71 e0       	ldi	r23, 0x01	; 1
     726:	89 e2       	ldi	r24, 0x29	; 41
     728:	93 e0       	ldi	r25, 0x03	; 3
     72a:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_ZN5Print5printEPKc>
     72e:	4c 85       	ldd	r20, Y+12	; 0x0c
     730:	5d 85       	ldd	r21, Y+13	; 0x0d
     732:	6e 85       	ldd	r22, Y+14	; 0x0e
     734:	7f 85       	ldd	r23, Y+15	; 0x0f
     736:	21 e0       	ldi	r18, 0x01	; 1
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	89 e2       	ldi	r24, 0x29	; 41
     73c:	93 e0       	ldi	r25, 0x03	; 3
     73e:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEdi>
     742:	6f e5       	ldi	r22, 0x5F	; 95
     744:	71 e0       	ldi	r23, 0x01	; 1
     746:	89 e2       	ldi	r24, 0x29	; 41
     748:	93 e0       	ldi	r25, 0x03	; 3
     74a:	0e 94 1c 12 	call	0x2438	; 0x2438 <_ZN5Print7printlnEPKc>
	Serial.print("y-axis self test: gyration trim within : "); Serial.print(selfTest[4],1); Serial.println("% of factory value");
     74e:	68 ef       	ldi	r22, 0xF8	; 248
     750:	71 e0       	ldi	r23, 0x01	; 1
     752:	89 e2       	ldi	r24, 0x29	; 41
     754:	93 e0       	ldi	r25, 0x03	; 3
     756:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_ZN5Print5printEPKc>
     75a:	48 89       	ldd	r20, Y+16	; 0x10
     75c:	59 89       	ldd	r21, Y+17	; 0x11
     75e:	6a 89       	ldd	r22, Y+18	; 0x12
     760:	7b 89       	ldd	r23, Y+19	; 0x13
     762:	21 e0       	ldi	r18, 0x01	; 1
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	89 e2       	ldi	r24, 0x29	; 41
     768:	93 e0       	ldi	r25, 0x03	; 3
     76a:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEdi>
     76e:	6f e5       	ldi	r22, 0x5F	; 95
     770:	71 e0       	ldi	r23, 0x01	; 1
     772:	89 e2       	ldi	r24, 0x29	; 41
     774:	93 e0       	ldi	r25, 0x03	; 3
     776:	0e 94 1c 12 	call	0x2438	; 0x2438 <_ZN5Print7printlnEPKc>
	Serial.print("z-axis self test: gyration trim within : "); Serial.print(selfTest[5],1); Serial.println("% of factory value");
     77a:	62 e2       	ldi	r22, 0x22	; 34
     77c:	72 e0       	ldi	r23, 0x02	; 2
     77e:	89 e2       	ldi	r24, 0x29	; 41
     780:	93 e0       	ldi	r25, 0x03	; 3
     782:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_ZN5Print5printEPKc>
     786:	4c 89       	ldd	r20, Y+20	; 0x14
     788:	5d 89       	ldd	r21, Y+21	; 0x15
     78a:	6e 89       	ldd	r22, Y+22	; 0x16
     78c:	7f 89       	ldd	r23, Y+23	; 0x17
     78e:	21 e0       	ldi	r18, 0x01	; 1
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	89 e2       	ldi	r24, 0x29	; 41
     794:	93 e0       	ldi	r25, 0x03	; 3
     796:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN5Print5printEdi>
     79a:	6f e5       	ldi	r22, 0x5F	; 95
     79c:	71 e0       	ldi	r23, 0x01	; 1
     79e:	89 e2       	ldi	r24, 0x29	; 41
     7a0:	93 e0       	ldi	r25, 0x03	; 3
     7a2:	0e 94 1c 12 	call	0x2438	; 0x2438 <_ZN5Print7printlnEPKc>
	//delay(5000);
	InitGyro();
     7a6:	0e 94 4d 02 	call	0x49a	; 0x49a <_Z8InitGyrov>
	//calibrateMPU9250(gyroBias, accelBias); // Calibrate gyro and accelerometers, load biases in bias registers
	
	//InitGyro();
		    
	// Read the WHO_AM_I register of the magnetometer, this is a good test of communication
	byte d = readByte(AK8963_ADDRESS, AK8963_WHO_AM_I);  // Read WHO_AM_I register for AK8963
     7aa:	60 e0       	ldi	r22, 0x00	; 0
     7ac:	8c e0       	ldi	r24, 0x0C	; 12
     7ae:	0e 94 50 07 	call	0xea0	; 0xea0 <_Z8readBytehh>
     7b2:	c8 2f       	mov	r28, r24
	Serial.print("AK8963 "); Serial.print("I AM "); Serial.print(d, HEX); 
     7b4:	6c e4       	ldi	r22, 0x4C	; 76
     7b6:	72 e0       	ldi	r23, 0x02	; 2
     7b8:	89 e2       	ldi	r24, 0x29	; 41
     7ba:	93 e0       	ldi	r25, 0x03	; 3
     7bc:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_ZN5Print5printEPKc>
     7c0:	6b e2       	ldi	r22, 0x2B	; 43
     7c2:	71 e0       	ldi	r23, 0x01	; 1
     7c4:	89 e2       	ldi	r24, 0x29	; 41
     7c6:	93 e0       	ldi	r25, 0x03	; 3
     7c8:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_ZN5Print5printEPKc>
     7cc:	40 e1       	ldi	r20, 0x10	; 16
     7ce:	50 e0       	ldi	r21, 0x00	; 0
     7d0:	6c 2f       	mov	r22, r28
     7d2:	89 e2       	ldi	r24, 0x29	; 41
     7d4:	93 e0       	ldi	r25, 0x03	; 3
     7d6:	0e 94 9c 12 	call	0x2538	; 0x2538 <_ZN5Print5printEhi>

	initAK8963(magCalibration, MFS_16BITS);
     7da:	61 e0       	ldi	r22, 0x01	; 1
     7dc:	8b ec       	ldi	r24, 0xCB	; 203
     7de:	92 e0       	ldi	r25, 0x02	; 2
     7e0:	0e 94 4e 0b 	call	0x169c	; 0x169c <_Z10initAK8963Pf6Mscale>
	enableI2CMaster();
     7e4:	0e 94 40 07 	call	0xe80	; 0xe80 <_Z15enableI2CMasterv>
    Serial.println("MPU9250 initialized "); // Initialize device for active mode read of acclerometer, gyroscope, and temperature
     7e8:	64 e5       	ldi	r22, 0x54	; 84
     7ea:	72 e0       	ldi	r23, 0x02	; 2
     7ec:	89 e2       	ldi	r24, 0x29	; 41
     7ee:	93 e0       	ldi	r25, 0x03	; 3
     7f0:	0e 94 1c 12 	call	0x2438	; 0x2438 <_ZN5Print7printlnEPKc>
	, 7                  /* read 10 bytes, most importantly this includes a read of STATUS2 */
	, true                /* send_reg_addr */
	, false                /* swap word bytes on read - make it the same endianness as MPU data*/
	, false               /* use even swap alignment */
	, true                /* enable it with this call */
	);
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	8f 93       	push	r24
     7f8:	81 2c       	mov	r8, r1
     7fa:	a1 2c       	mov	r10, r1
     7fc:	cc 24       	eor	r12, r12
     7fe:	c3 94       	inc	r12
     800:	0f 2e       	mov	r0, r31
     802:	f7 e0       	ldi	r31, 0x07	; 7
     804:	ef 2e       	mov	r14, r31
     806:	f0 2d       	mov	r31, r0
     808:	01 e0       	ldi	r16, 0x01	; 1
     80a:	23 e0       	ldi	r18, 0x03	; 3
     80c:	4c e0       	ldi	r20, 0x0C	; 12
     80e:	60 e0       	ldi	r22, 0x00	; 0
     810:	88 e6       	ldi	r24, 0x68	; 104
     812:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_Z10setupSlavehhhhbhbbbb>
	
    // configure Arduino LED for
    pinMode(LED_PIN, OUTPUT);
     816:	61 e0       	ldi	r22, 0x01	; 1
     818:	8d e0       	ldi	r24, 0x0D	; 13
     81a:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <pinMode>
	//pinMode(5, OUTPUT);
	angle_roll_acc =0;
     81e:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <angle_roll_acc>
     822:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <angle_roll_acc+0x1>
     826:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <angle_roll_acc+0x2>
     82a:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <angle_roll_acc+0x3>
	angle_pitch_acc =0;
     82e:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <angle_pitch_acc>
     832:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <angle_pitch_acc+0x1>
     836:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <angle_pitch_acc+0x2>
     83a:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <angle_pitch_acc+0x3>
	angle_pitch =0;
     83e:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <angle_pitch>
     842:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <angle_pitch+0x1>
     846:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <angle_pitch+0x2>
     84a:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <angle_pitch+0x3>
	angle_roll =0;
     84e:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <angle_roll>
     852:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <angle_roll+0x1>
     856:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <angle_roll+0x2>
     85a:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <angle_roll+0x3>
	angle_yaw =0;
     85e:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <angle_yaw>
     862:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <angle_yaw+0x1>
     866:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <angle_yaw+0x2>
     86a:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <angle_yaw+0x3>
	digitalWrite(LED_STATUS_PIN, LOW);
     86e:	60 e0       	ldi	r22, 0x00	; 0
     870:	8d e0       	ldi	r24, 0x0D	; 13
     872:	0e 94 48 16 	call	0x2c90	; 0x2c90 <digitalWrite>
	loop_timer = micros();                                                    //Set the timer for the next loop.
     876:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <micros>
     87a:	60 93 c6 02 	sts	0x02C6, r22	; 0x8002c6 <loop_timer>
     87e:	70 93 c7 02 	sts	0x02C7, r23	; 0x8002c7 <loop_timer+0x1>
     882:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <loop_timer+0x2>
     886:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <loop_timer+0x3>
     88a:	0f 90       	pop	r0

}
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	0f 91       	pop	r16
     892:	ef 90       	pop	r14
     894:	cf 90       	pop	r12
     896:	af 90       	pop	r10
     898:	8f 90       	pop	r8
     89a:	08 95       	ret

0000089c <_Z7RawReadv>:

// Output scaled accelerometer biases for display in the main program
   dest2[0] = (float)accel_bias[0]/(float)accelsensitivity; 
   dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
   dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
}
     89c:	0f 93       	push	r16
     89e:	1f 93       	push	r17
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	68 e6       	ldi	r22, 0x68	; 104
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	86 ec       	ldi	r24, 0xC6	; 198
     8aa:	93 e0       	ldi	r25, 0x03	; 3
     8ac:	0e 94 62 14 	call	0x28c4	; 0x28c4 <_ZN7TwoWire17beginTransmissionEi>
     8b0:	e0 91 c6 03 	lds	r30, 0x03C6	; 0x8003c6 <Wire>
     8b4:	f0 91 c7 03 	lds	r31, 0x03C7	; 0x8003c7 <Wire+0x1>
     8b8:	01 90       	ld	r0, Z+
     8ba:	f0 81       	ld	r31, Z
     8bc:	e0 2d       	mov	r30, r0
     8be:	6b e3       	ldi	r22, 0x3B	; 59
     8c0:	86 ec       	ldi	r24, 0xC6	; 198
     8c2:	93 e0       	ldi	r25, 0x03	; 3
     8c4:	09 95       	icall
     8c6:	86 ec       	ldi	r24, 0xC6	; 198
     8c8:	93 e0       	ldi	r25, 0x03	; 3
     8ca:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <_ZN7TwoWire15endTransmissionEv>
     8ce:	45 e1       	ldi	r20, 0x15	; 21
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	68 e6       	ldi	r22, 0x68	; 104
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	86 ec       	ldi	r24, 0xC6	; 198
     8d8:	93 e0       	ldi	r25, 0x03	; 3
     8da:	0e 94 e5 14 	call	0x29ca	; 0x29ca <_ZN7TwoWire11requestFromEii>
     8de:	86 ec       	ldi	r24, 0xC6	; 198
     8e0:	93 e0       	ldi	r25, 0x03	; 3
     8e2:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN7TwoWire9availableEv>
     8e6:	45 97       	sbiw	r24, 0x15	; 21
     8e8:	d4 f3       	brlt	.-12     	; 0x8de <_Z7RawReadv+0x42>
     8ea:	86 ec       	ldi	r24, 0xC6	; 198
     8ec:	93 e0       	ldi	r25, 0x03	; 3
     8ee:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN7TwoWire4readEv>
     8f2:	18 2f       	mov	r17, r24
     8f4:	86 ec       	ldi	r24, 0xC6	; 198
     8f6:	93 e0       	ldi	r25, 0x03	; 3
     8f8:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN7TwoWire4readEv>
     8fc:	c7 e0       	ldi	r28, 0x07	; 7
     8fe:	d3 e0       	ldi	r29, 0x03	; 3
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	31 2f       	mov	r19, r17
     906:	82 2b       	or	r24, r18
     908:	93 2b       	or	r25, r19
     90a:	9b 83       	std	Y+3, r25	; 0x03
     90c:	8a 83       	std	Y+2, r24	; 0x02
     90e:	86 ec       	ldi	r24, 0xC6	; 198
     910:	93 e0       	ldi	r25, 0x03	; 3
     912:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN7TwoWire4readEv>
     916:	18 2f       	mov	r17, r24
     918:	86 ec       	ldi	r24, 0xC6	; 198
     91a:	93 e0       	ldi	r25, 0x03	; 3
     91c:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN7TwoWire4readEv>
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	31 2f       	mov	r19, r17
     926:	82 2b       	or	r24, r18
     928:	93 2b       	or	r25, r19
     92a:	9d 83       	std	Y+5, r25	; 0x05
     92c:	8c 83       	std	Y+4, r24	; 0x04
     92e:	86 ec       	ldi	r24, 0xC6	; 198
     930:	93 e0       	ldi	r25, 0x03	; 3
     932:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN7TwoWire4readEv>
     936:	18 2f       	mov	r17, r24
     938:	86 ec       	ldi	r24, 0xC6	; 198
     93a:	93 e0       	ldi	r25, 0x03	; 3
     93c:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN7TwoWire4readEv>
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	31 2f       	mov	r19, r17
     946:	82 2b       	or	r24, r18
     948:	93 2b       	or	r25, r19
     94a:	9f 83       	std	Y+7, r25	; 0x07
     94c:	8e 83       	std	Y+6, r24	; 0x06
     94e:	86 ec       	ldi	r24, 0xC6	; 198
     950:	93 e0       	ldi	r25, 0x03	; 3
     952:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN7TwoWire4readEv>
     956:	c8 2f       	mov	r28, r24
     958:	86 ec       	ldi	r24, 0xC6	; 198
     95a:	93 e0       	ldi	r25, 0x03	; 3
     95c:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN7TwoWire4readEv>
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	7c 2f       	mov	r23, r28
     966:	86 2b       	or	r24, r22
     968:	97 2b       	or	r25, r23
     96a:	bc 01       	movw	r22, r24
     96c:	99 0f       	add	r25, r25
     96e:	88 0b       	sbc	r24, r24
     970:	99 0b       	sbc	r25, r25
     972:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__floatsisf>
     976:	60 93 fb 02 	sts	0x02FB, r22	; 0x8002fb <Temperature>
     97a:	70 93 fc 02 	sts	0x02FC, r23	; 0x8002fc <Temperature+0x1>
     97e:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <Temperature+0x2>
     982:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <Temperature+0x3>
     986:	86 ec       	ldi	r24, 0xC6	; 198
     988:	93 e0       	ldi	r25, 0x03	; 3
     98a:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN7TwoWire4readEv>
     98e:	18 2f       	mov	r17, r24
     990:	86 ec       	ldi	r24, 0xC6	; 198
     992:	93 e0       	ldi	r25, 0x03	; 3
     994:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN7TwoWire4readEv>
     998:	cf e0       	ldi	r28, 0x0F	; 15
     99a:	d3 e0       	ldi	r29, 0x03	; 3
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	31 2f       	mov	r19, r17
     9a2:	82 2b       	or	r24, r18
     9a4:	93 2b       	or	r25, r19
     9a6:	9b 83       	std	Y+3, r25	; 0x03
     9a8:	8a 83       	std	Y+2, r24	; 0x02
     9aa:	86 ec       	ldi	r24, 0xC6	; 198
     9ac:	93 e0       	ldi	r25, 0x03	; 3
     9ae:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN7TwoWire4readEv>
     9b2:	18 2f       	mov	r17, r24
     9b4:	86 ec       	ldi	r24, 0xC6	; 198
     9b6:	93 e0       	ldi	r25, 0x03	; 3
     9b8:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN7TwoWire4readEv>
     9bc:	20 e0       	ldi	r18, 0x00	; 0
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	31 2f       	mov	r19, r17
     9c2:	82 2b       	or	r24, r18
     9c4:	93 2b       	or	r25, r19
     9c6:	9d 83       	std	Y+5, r25	; 0x05
     9c8:	8c 83       	std	Y+4, r24	; 0x04
     9ca:	86 ec       	ldi	r24, 0xC6	; 198
     9cc:	93 e0       	ldi	r25, 0x03	; 3
     9ce:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN7TwoWire4readEv>
     9d2:	18 2f       	mov	r17, r24
     9d4:	86 ec       	ldi	r24, 0xC6	; 198
     9d6:	93 e0       	ldi	r25, 0x03	; 3
     9d8:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN7TwoWire4readEv>
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	31 2f       	mov	r19, r17
     9e2:	82 2b       	or	r24, r18
     9e4:	93 2b       	or	r25, r19
     9e6:	9f 83       	std	Y+7, r25	; 0x07
     9e8:	8e 83       	std	Y+6, r24	; 0x06
     9ea:	86 ec       	ldi	r24, 0xC6	; 198
     9ec:	93 e0       	ldi	r25, 0x03	; 3
     9ee:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN7TwoWire4readEv>
     9f2:	8c 01       	movw	r16, r24
     9f4:	86 ec       	ldi	r24, 0xC6	; 198
     9f6:	93 e0       	ldi	r25, 0x03	; 3
     9f8:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN7TwoWire4readEv>
     9fc:	cf ef       	ldi	r28, 0xFF	; 255
     9fe:	d2 e0       	ldi	r29, 0x02	; 2
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	38 2f       	mov	r19, r24
     a06:	02 2b       	or	r16, r18
     a08:	13 2b       	or	r17, r19
     a0a:	1b 83       	std	Y+3, r17	; 0x03
     a0c:	0a 83       	std	Y+2, r16	; 0x02
     a0e:	86 ec       	ldi	r24, 0xC6	; 198
     a10:	93 e0       	ldi	r25, 0x03	; 3
     a12:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN7TwoWire4readEv>
     a16:	8c 01       	movw	r16, r24
     a18:	86 ec       	ldi	r24, 0xC6	; 198
     a1a:	93 e0       	ldi	r25, 0x03	; 3
     a1c:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN7TwoWire4readEv>
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	38 2f       	mov	r19, r24
     a26:	02 2b       	or	r16, r18
     a28:	13 2b       	or	r17, r19
     a2a:	1d 83       	std	Y+5, r17	; 0x05
     a2c:	0c 83       	std	Y+4, r16	; 0x04
     a2e:	86 ec       	ldi	r24, 0xC6	; 198
     a30:	93 e0       	ldi	r25, 0x03	; 3
     a32:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN7TwoWire4readEv>
     a36:	8c 01       	movw	r16, r24
     a38:	86 ec       	ldi	r24, 0xC6	; 198
     a3a:	93 e0       	ldi	r25, 0x03	; 3
     a3c:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN7TwoWire4readEv>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	38 2f       	mov	r19, r24
     a46:	02 2b       	or	r16, r18
     a48:	13 2b       	or	r17, r19
     a4a:	1f 83       	std	Y+7, r17	; 0x07
     a4c:	0e 83       	std	Y+6, r16	; 0x06
     a4e:	86 ec       	ldi	r24, 0xC6	; 198
     a50:	93 e0       	ldi	r25, 0x03	; 3
     a52:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN7TwoWire4readEv>
     a56:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <cal_int>
     a5a:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <cal_int+0x1>
     a5e:	80 3d       	cpi	r24, 0xD0	; 208
     a60:	97 40       	sbci	r25, 0x07	; 7
     a62:	e9 f5       	brne	.+122    	; 0xade <__stack+0x1df>
     a64:	cf e0       	ldi	r28, 0x0F	; 15
     a66:	d3 e0       	ldi	r29, 0x03	; 3
     a68:	6a 81       	ldd	r22, Y+2	; 0x02
     a6a:	7b 81       	ldd	r23, Y+3	; 0x03
     a6c:	07 2e       	mov	r0, r23
     a6e:	00 0c       	add	r0, r0
     a70:	88 0b       	sbc	r24, r24
     a72:	99 0b       	sbc	r25, r25
     a74:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__floatsisf>
     a78:	07 e1       	ldi	r16, 0x17	; 23
     a7a:	13 e0       	ldi	r17, 0x03	; 3
     a7c:	f8 01       	movw	r30, r16
     a7e:	24 81       	ldd	r18, Z+4	; 0x04
     a80:	35 81       	ldd	r19, Z+5	; 0x05
     a82:	46 81       	ldd	r20, Z+6	; 0x06
     a84:	57 81       	ldd	r21, Z+7	; 0x07
     a86:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__subsf3>
     a8a:	0e 94 cd 0c 	call	0x199a	; 0x199a <__fixsfsi>
     a8e:	7b 83       	std	Y+3, r23	; 0x03
     a90:	6a 83       	std	Y+2, r22	; 0x02
     a92:	6c 81       	ldd	r22, Y+4	; 0x04
     a94:	7d 81       	ldd	r23, Y+5	; 0x05
     a96:	07 2e       	mov	r0, r23
     a98:	00 0c       	add	r0, r0
     a9a:	88 0b       	sbc	r24, r24
     a9c:	99 0b       	sbc	r25, r25
     a9e:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__floatsisf>
     aa2:	f8 01       	movw	r30, r16
     aa4:	20 85       	ldd	r18, Z+8	; 0x08
     aa6:	31 85       	ldd	r19, Z+9	; 0x09
     aa8:	42 85       	ldd	r20, Z+10	; 0x0a
     aaa:	53 85       	ldd	r21, Z+11	; 0x0b
     aac:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__subsf3>
     ab0:	0e 94 cd 0c 	call	0x199a	; 0x199a <__fixsfsi>
     ab4:	7d 83       	std	Y+5, r23	; 0x05
     ab6:	6c 83       	std	Y+4, r22	; 0x04
     ab8:	6e 81       	ldd	r22, Y+6	; 0x06
     aba:	7f 81       	ldd	r23, Y+7	; 0x07
     abc:	07 2e       	mov	r0, r23
     abe:	00 0c       	add	r0, r0
     ac0:	88 0b       	sbc	r24, r24
     ac2:	99 0b       	sbc	r25, r25
     ac4:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__floatsisf>
     ac8:	f8 01       	movw	r30, r16
     aca:	24 85       	ldd	r18, Z+12	; 0x0c
     acc:	35 85       	ldd	r19, Z+13	; 0x0d
     ace:	46 85       	ldd	r20, Z+14	; 0x0e
     ad0:	57 85       	ldd	r21, Z+15	; 0x0f
     ad2:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__subsf3>
     ad6:	0e 94 cd 0c 	call	0x199a	; 0x199a <__fixsfsi>
     ada:	7f 83       	std	Y+7, r23	; 0x07
     adc:	6e 83       	std	Y+6, r22	; 0x06
     ade:	cf e0       	ldi	r28, 0x0F	; 15
     ae0:	d3 e0       	ldi	r29, 0x03	; 3
     ae2:	6a 81       	ldd	r22, Y+2	; 0x02
     ae4:	7b 81       	ldd	r23, Y+3	; 0x03
     ae6:	07 2e       	mov	r0, r23
     ae8:	00 0c       	add	r0, r0
     aea:	88 0b       	sbc	r24, r24
     aec:	99 0b       	sbc	r25, r25
     aee:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__floatsisf>
     af2:	60 93 f3 02 	sts	0x02F3, r22	; 0x8002f3 <gyro_roll>
     af6:	70 93 f4 02 	sts	0x02F4, r23	; 0x8002f4 <gyro_roll+0x1>
     afa:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <gyro_roll+0x2>
     afe:	90 93 f6 02 	sts	0x02F6, r25	; 0x8002f6 <gyro_roll+0x3>
     b02:	6c 81       	ldd	r22, Y+4	; 0x04
     b04:	7d 81       	ldd	r23, Y+5	; 0x05
     b06:	07 2e       	mov	r0, r23
     b08:	00 0c       	add	r0, r0
     b0a:	88 0b       	sbc	r24, r24
     b0c:	99 0b       	sbc	r25, r25
     b0e:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__floatsisf>
     b12:	60 93 f7 02 	sts	0x02F7, r22	; 0x8002f7 <gyro_pitch>
     b16:	70 93 f8 02 	sts	0x02F8, r23	; 0x8002f8 <gyro_pitch+0x1>
     b1a:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <gyro_pitch+0x2>
     b1e:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <gyro_pitch+0x3>
     b22:	6e 81       	ldd	r22, Y+6	; 0x06
     b24:	7f 81       	ldd	r23, Y+7	; 0x07
     b26:	07 2e       	mov	r0, r23
     b28:	00 0c       	add	r0, r0
     b2a:	88 0b       	sbc	r24, r24
     b2c:	99 0b       	sbc	r25, r25
     b2e:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__floatsisf>
     b32:	60 93 ef 02 	sts	0x02EF, r22	; 0x8002ef <gyro_yaw>
     b36:	70 93 f0 02 	sts	0x02F0, r23	; 0x8002f0 <gyro_yaw+0x1>
     b3a:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <gyro_yaw+0x2>
     b3e:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <gyro_yaw+0x3>
     b42:	c7 e0       	ldi	r28, 0x07	; 7
     b44:	d3 e0       	ldi	r29, 0x03	; 3
     b46:	6a 81       	ldd	r22, Y+2	; 0x02
     b48:	7b 81       	ldd	r23, Y+3	; 0x03
     b4a:	07 2e       	mov	r0, r23
     b4c:	00 0c       	add	r0, r0
     b4e:	88 0b       	sbc	r24, r24
     b50:	99 0b       	sbc	r25, r25
     b52:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__floatsisf>
     b56:	60 93 eb 02 	sts	0x02EB, r22	; 0x8002eb <AccX>
     b5a:	70 93 ec 02 	sts	0x02EC, r23	; 0x8002ec <AccX+0x1>
     b5e:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <AccX+0x2>
     b62:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <AccX+0x3>
     b66:	6c 81       	ldd	r22, Y+4	; 0x04
     b68:	7d 81       	ldd	r23, Y+5	; 0x05
     b6a:	07 2e       	mov	r0, r23
     b6c:	00 0c       	add	r0, r0
     b6e:	88 0b       	sbc	r24, r24
     b70:	99 0b       	sbc	r25, r25
     b72:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__floatsisf>
     b76:	60 93 e7 02 	sts	0x02E7, r22	; 0x8002e7 <AccY>
     b7a:	70 93 e8 02 	sts	0x02E8, r23	; 0x8002e8 <AccY+0x1>
     b7e:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <AccY+0x2>
     b82:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <AccY+0x3>
     b86:	6e 81       	ldd	r22, Y+6	; 0x06
     b88:	7f 81       	ldd	r23, Y+7	; 0x07
     b8a:	07 2e       	mov	r0, r23
     b8c:	00 0c       	add	r0, r0
     b8e:	88 0b       	sbc	r24, r24
     b90:	99 0b       	sbc	r25, r25
     b92:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__floatsisf>
     b96:	60 93 e3 02 	sts	0x02E3, r22	; 0x8002e3 <AccZ>
     b9a:	70 93 e4 02 	sts	0x02E4, r23	; 0x8002e4 <AccZ+0x1>
     b9e:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <AccZ+0x2>
     ba2:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <AccZ+0x3>
     ba6:	cf ef       	ldi	r28, 0xFF	; 255
     ba8:	d2 e0       	ldi	r29, 0x02	; 2
     baa:	6a 81       	ldd	r22, Y+2	; 0x02
     bac:	7b 81       	ldd	r23, Y+3	; 0x03
     bae:	07 2e       	mov	r0, r23
     bb0:	00 0c       	add	r0, r0
     bb2:	88 0b       	sbc	r24, r24
     bb4:	99 0b       	sbc	r25, r25
     bb6:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__floatsisf>
     bba:	60 93 df 02 	sts	0x02DF, r22	; 0x8002df <MagX>
     bbe:	70 93 e0 02 	sts	0x02E0, r23	; 0x8002e0 <MagX+0x1>
     bc2:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <MagX+0x2>
     bc6:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <MagX+0x3>
     bca:	6c 81       	ldd	r22, Y+4	; 0x04
     bcc:	7d 81       	ldd	r23, Y+5	; 0x05
     bce:	07 2e       	mov	r0, r23
     bd0:	00 0c       	add	r0, r0
     bd2:	88 0b       	sbc	r24, r24
     bd4:	99 0b       	sbc	r25, r25
     bd6:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__floatsisf>
     bda:	60 93 db 02 	sts	0x02DB, r22	; 0x8002db <MagY>
     bde:	70 93 dc 02 	sts	0x02DC, r23	; 0x8002dc <MagY+0x1>
     be2:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <MagY+0x2>
     be6:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <MagY+0x3>
     bea:	6e 81       	ldd	r22, Y+6	; 0x06
     bec:	7f 81       	ldd	r23, Y+7	; 0x07
     bee:	07 2e       	mov	r0, r23
     bf0:	00 0c       	add	r0, r0
     bf2:	88 0b       	sbc	r24, r24
     bf4:	99 0b       	sbc	r25, r25
     bf6:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__floatsisf>
     bfa:	60 93 d7 02 	sts	0x02D7, r22	; 0x8002d7 <MagZ>
     bfe:	70 93 d8 02 	sts	0x02D8, r23	; 0x8002d8 <MagZ+0x1>
     c02:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <MagZ+0x2>
     c06:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <MagZ+0x3>
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	08 95       	ret

00000c14 <_Z13CalibrateGyrov>:
     c14:	cf 92       	push	r12
     c16:	df 92       	push	r13
     c18:	ef 92       	push	r14
     c1a:	ff 92       	push	r15
     c1c:	0f 93       	push	r16
     c1e:	1f 93       	push	r17
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <cal_int+0x1>
     c28:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <cal_int>
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0f 2e       	mov	r0, r31
     c32:	ff e0       	ldi	r31, 0x0F	; 15
     c34:	ef 2e       	mov	r14, r31
     c36:	f1 2c       	mov	r15, r1
     c38:	f0 2d       	mov	r31, r0
     c3a:	dd 24       	eor	r13, r13
     c3c:	d3 94       	inc	r13
     c3e:	c1 2c       	mov	r12, r1
     c40:	c7 e1       	ldi	r28, 0x17	; 23
     c42:	d3 e0       	ldi	r29, 0x03	; 3
     c44:	0f e0       	ldi	r16, 0x0F	; 15
     c46:	13 e0       	ldi	r17, 0x03	; 3
     c48:	b7 01       	movw	r22, r14
     c4a:	0e 94 f6 18 	call	0x31ec	; 0x31ec <__divmodhi4>
     c4e:	89 2b       	or	r24, r25
     c50:	51 f4       	brne	.+20     	; 0xc66 <_Z13CalibrateGyrov+0x52>
     c52:	8d e0       	ldi	r24, 0x0D	; 13
     c54:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <digitalRead>
     c58:	6d 2d       	mov	r22, r13
     c5a:	89 2b       	or	r24, r25
     c5c:	09 f0       	breq	.+2      	; 0xc60 <_Z13CalibrateGyrov+0x4c>
     c5e:	6c 2d       	mov	r22, r12
     c60:	8d e0       	ldi	r24, 0x0D	; 13
     c62:	0e 94 48 16 	call	0x2c90	; 0x2c90 <digitalWrite>
     c66:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z7RawReadv>
     c6a:	f8 01       	movw	r30, r16
     c6c:	62 81       	ldd	r22, Z+2	; 0x02
     c6e:	73 81       	ldd	r23, Z+3	; 0x03
     c70:	07 2e       	mov	r0, r23
     c72:	00 0c       	add	r0, r0
     c74:	88 0b       	sbc	r24, r24
     c76:	99 0b       	sbc	r25, r25
     c78:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__floatsisf>
     c7c:	9b 01       	movw	r18, r22
     c7e:	ac 01       	movw	r20, r24
     c80:	6c 81       	ldd	r22, Y+4	; 0x04
     c82:	7d 81       	ldd	r23, Y+5	; 0x05
     c84:	8e 81       	ldd	r24, Y+6	; 0x06
     c86:	9f 81       	ldd	r25, Y+7	; 0x07
     c88:	0e 94 ef 0b 	call	0x17de	; 0x17de <__addsf3>
     c8c:	6c 83       	std	Y+4, r22	; 0x04
     c8e:	7d 83       	std	Y+5, r23	; 0x05
     c90:	8e 83       	std	Y+6, r24	; 0x06
     c92:	9f 83       	std	Y+7, r25	; 0x07
     c94:	f8 01       	movw	r30, r16
     c96:	64 81       	ldd	r22, Z+4	; 0x04
     c98:	75 81       	ldd	r23, Z+5	; 0x05
     c9a:	07 2e       	mov	r0, r23
     c9c:	00 0c       	add	r0, r0
     c9e:	88 0b       	sbc	r24, r24
     ca0:	99 0b       	sbc	r25, r25
     ca2:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__floatsisf>
     ca6:	9b 01       	movw	r18, r22
     ca8:	ac 01       	movw	r20, r24
     caa:	68 85       	ldd	r22, Y+8	; 0x08
     cac:	79 85       	ldd	r23, Y+9	; 0x09
     cae:	8a 85       	ldd	r24, Y+10	; 0x0a
     cb0:	9b 85       	ldd	r25, Y+11	; 0x0b
     cb2:	0e 94 ef 0b 	call	0x17de	; 0x17de <__addsf3>
     cb6:	68 87       	std	Y+8, r22	; 0x08
     cb8:	79 87       	std	Y+9, r23	; 0x09
     cba:	8a 87       	std	Y+10, r24	; 0x0a
     cbc:	9b 87       	std	Y+11, r25	; 0x0b
     cbe:	f8 01       	movw	r30, r16
     cc0:	66 81       	ldd	r22, Z+6	; 0x06
     cc2:	77 81       	ldd	r23, Z+7	; 0x07
     cc4:	07 2e       	mov	r0, r23
     cc6:	00 0c       	add	r0, r0
     cc8:	88 0b       	sbc	r24, r24
     cca:	99 0b       	sbc	r25, r25
     ccc:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__floatsisf>
     cd0:	9b 01       	movw	r18, r22
     cd2:	ac 01       	movw	r20, r24
     cd4:	6c 85       	ldd	r22, Y+12	; 0x0c
     cd6:	7d 85       	ldd	r23, Y+13	; 0x0d
     cd8:	8e 85       	ldd	r24, Y+14	; 0x0e
     cda:	9f 85       	ldd	r25, Y+15	; 0x0f
     cdc:	0e 94 ef 0b 	call	0x17de	; 0x17de <__addsf3>
     ce0:	6c 87       	std	Y+12, r22	; 0x0c
     ce2:	7d 87       	std	Y+13, r23	; 0x0d
     ce4:	8e 87       	std	Y+14, r24	; 0x0e
     ce6:	9f 87       	std	Y+15, r25	; 0x0f
     ce8:	8b b1       	in	r24, 0x0b	; 11
     cea:	80 6f       	ori	r24, 0xF0	; 240
     cec:	8b b9       	out	0x0b, r24	; 11
     cee:	88 ee       	ldi	r24, 0xE8	; 232
     cf0:	93 e0       	ldi	r25, 0x03	; 3
     cf2:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <delayMicroseconds>
     cf6:	8b b1       	in	r24, 0x0b	; 11
     cf8:	8f 70       	andi	r24, 0x0F	; 15
     cfa:	8b b9       	out	0x0b, r24	; 11
     cfc:	63 e0       	ldi	r22, 0x03	; 3
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <delay>
     d08:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <cal_int>
     d0c:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <cal_int+0x1>
     d10:	01 96       	adiw	r24, 0x01	; 1
     d12:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <cal_int+0x1>
     d16:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <cal_int>
     d1a:	80 3d       	cpi	r24, 0xD0	; 208
     d1c:	f7 e0       	ldi	r31, 0x07	; 7
     d1e:	9f 07       	cpc	r25, r31
     d20:	0c f4       	brge	.+2      	; 0xd24 <_Z13CalibrateGyrov+0x110>
     d22:	92 cf       	rjmp	.-220    	; 0xc48 <_Z13CalibrateGyrov+0x34>
     d24:	c7 e1       	ldi	r28, 0x17	; 23
     d26:	d3 e0       	ldi	r29, 0x03	; 3
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	4a ef       	ldi	r20, 0xFA	; 250
     d2e:	54 e4       	ldi	r21, 0x44	; 68
     d30:	6c 81       	ldd	r22, Y+4	; 0x04
     d32:	7d 81       	ldd	r23, Y+5	; 0x05
     d34:	8e 81       	ldd	r24, Y+6	; 0x06
     d36:	9f 81       	ldd	r25, Y+7	; 0x07
     d38:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__divsf3>
     d3c:	6c 83       	std	Y+4, r22	; 0x04
     d3e:	7d 83       	std	Y+5, r23	; 0x05
     d40:	8e 83       	std	Y+6, r24	; 0x06
     d42:	9f 83       	std	Y+7, r25	; 0x07
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	4a ef       	ldi	r20, 0xFA	; 250
     d4a:	54 e4       	ldi	r21, 0x44	; 68
     d4c:	68 85       	ldd	r22, Y+8	; 0x08
     d4e:	79 85       	ldd	r23, Y+9	; 0x09
     d50:	8a 85       	ldd	r24, Y+10	; 0x0a
     d52:	9b 85       	ldd	r25, Y+11	; 0x0b
     d54:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__divsf3>
     d58:	68 87       	std	Y+8, r22	; 0x08
     d5a:	79 87       	std	Y+9, r23	; 0x09
     d5c:	8a 87       	std	Y+10, r24	; 0x0a
     d5e:	9b 87       	std	Y+11, r25	; 0x0b
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	4a ef       	ldi	r20, 0xFA	; 250
     d66:	54 e4       	ldi	r21, 0x44	; 68
     d68:	6c 85       	ldd	r22, Y+12	; 0x0c
     d6a:	7d 85       	ldd	r23, Y+13	; 0x0d
     d6c:	8e 85       	ldd	r24, Y+14	; 0x0e
     d6e:	9f 85       	ldd	r25, Y+15	; 0x0f
     d70:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__divsf3>
     d74:	6c 87       	std	Y+12, r22	; 0x0c
     d76:	7d 87       	std	Y+13, r23	; 0x0d
     d78:	8e 87       	std	Y+14, r24	; 0x0e
     d7a:	9f 87       	std	Y+15, r25	; 0x0f
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	1f 91       	pop	r17
     d82:	0f 91       	pop	r16
     d84:	ff 90       	pop	r15
     d86:	ef 90       	pop	r14
     d88:	df 90       	pop	r13
     d8a:	cf 90       	pop	r12
     d8c:	08 95       	ret

00000d8e <_Z9writeBytehhh>:
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	d6 2f       	mov	r29, r22
     d94:	c4 2f       	mov	r28, r20
     d96:	68 2f       	mov	r22, r24
     d98:	86 ec       	ldi	r24, 0xC6	; 198
     d9a:	93 e0       	ldi	r25, 0x03	; 3
     d9c:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_ZN7TwoWire17beginTransmissionEh>
     da0:	6d 2f       	mov	r22, r29
     da2:	86 ec       	ldi	r24, 0xC6	; 198
     da4:	93 e0       	ldi	r25, 0x03	; 3
     da6:	0e 94 0c 14 	call	0x2818	; 0x2818 <_ZN7TwoWire5writeEh>
     daa:	6c 2f       	mov	r22, r28
     dac:	86 ec       	ldi	r24, 0xC6	; 198
     dae:	93 e0       	ldi	r25, 0x03	; 3
     db0:	0e 94 0c 14 	call	0x2818	; 0x2818 <_ZN7TwoWire5writeEh>
     db4:	86 ec       	ldi	r24, 0xC6	; 198
     db6:	93 e0       	ldi	r25, 0x03	; 3
     db8:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <_ZN7TwoWire15endTransmissionEv>
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	08 95       	ret

00000dc2 <_Z10setupSlavehhhhbhbbbb>:
     dc2:	7f 92       	push	r7
     dc4:	8f 92       	push	r8
     dc6:	9f 92       	push	r9
     dc8:	af 92       	push	r10
     dca:	bf 92       	push	r11
     dcc:	cf 92       	push	r12
     dce:	df 92       	push	r13
     dd0:	ef 92       	push	r14
     dd2:	ff 92       	push	r15
     dd4:	0f 93       	push	r16
     dd6:	1f 93       	push	r17
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
     de0:	64 30       	cpi	r22, 0x04	; 4
     de2:	08 f0       	brcs	.+2      	; 0xde6 <_Z10setupSlavehhhhbhbbbb+0x24>
     de4:	3f c0       	rjmp	.+126    	; 0xe64 <_Z10setupSlavehhhhbhbbbb+0xa2>
     de6:	90 2e       	mov	r9, r16
     de8:	b2 2e       	mov	r11, r18
     dea:	d4 2e       	mov	r13, r20
     dec:	f8 2e       	mov	r15, r24
     dee:	16 2f       	mov	r17, r22
     df0:	11 0f       	add	r17, r17
     df2:	16 0f       	add	r17, r22
     df4:	0f 2e       	mov	r0, r31
     df6:	f5 e2       	ldi	r31, 0x25	; 37
     df8:	7f 2e       	mov	r7, r31
     dfa:	f0 2d       	mov	r31, r0
     dfc:	71 0e       	add	r7, r17
     dfe:	07 e2       	ldi	r16, 0x27	; 39
     e00:	01 0f       	add	r16, r17
     e02:	40 e0       	ldi	r20, 0x00	; 0
     e04:	60 2f       	mov	r22, r16
     e06:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_Z9writeBytehhh>
     e0a:	91 10       	cpse	r9, r1
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <_Z10setupSlavehhhhbhbbbb+0x50>
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	01 c0       	rjmp	.+2      	; 0xe14 <_Z10setupSlavehhhhbhbbbb+0x52>
     e12:	40 e8       	ldi	r20, 0x80	; 128
     e14:	4d 29       	or	r20, r13
     e16:	67 2d       	mov	r22, r7
     e18:	8f 2d       	mov	r24, r15
     e1a:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_Z9writeBytehhh>
     e1e:	66 e2       	ldi	r22, 0x26	; 38
     e20:	61 0f       	add	r22, r17
     e22:	4b 2d       	mov	r20, r11
     e24:	8f 2d       	mov	r24, r15
     e26:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_Z9writeBytehhh>
     e2a:	20 e1       	ldi	r18, 0x10	; 16
     e2c:	82 9e       	mul	r8, r18
     e2e:	40 01       	movw	r8, r0
     e30:	11 24       	eor	r1, r1
     e32:	8e 2d       	mov	r24, r14
     e34:	8f 70       	andi	r24, 0x0F	; 15
     e36:	88 29       	or	r24, r8
     e38:	90 e4       	ldi	r25, 0x40	; 64
     e3a:	a9 9e       	mul	r10, r25
     e3c:	50 01       	movw	r10, r0
     e3e:	11 24       	eor	r1, r1
     e40:	a8 2a       	or	r10, r24
     e42:	91 e0       	ldi	r25, 0x01	; 1
     e44:	c9 26       	eor	r12, r25
     e46:	20 e2       	ldi	r18, 0x20	; 32
     e48:	c2 9e       	mul	r12, r18
     e4a:	c0 01       	movw	r24, r0
     e4c:	11 24       	eor	r1, r1
     e4e:	8a 29       	or	r24, r10
     e50:	48 89       	ldd	r20, Y+16	; 0x10
     e52:	90 e8       	ldi	r25, 0x80	; 128
     e54:	49 9f       	mul	r20, r25
     e56:	a0 01       	movw	r20, r0
     e58:	11 24       	eor	r1, r1
     e5a:	48 2b       	or	r20, r24
     e5c:	60 2f       	mov	r22, r16
     e5e:	8f 2d       	mov	r24, r15
     e60:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_Z9writeBytehhh>
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	df 90       	pop	r13
     e72:	cf 90       	pop	r12
     e74:	bf 90       	pop	r11
     e76:	af 90       	pop	r10
     e78:	9f 90       	pop	r9
     e7a:	8f 90       	pop	r8
     e7c:	7f 90       	pop	r7
     e7e:	08 95       	ret

00000e80 <_Z15enableI2CMasterv>:
     e80:	40 e0       	ldi	r20, 0x00	; 0
     e82:	67 e3       	ldi	r22, 0x37	; 55
     e84:	88 e6       	ldi	r24, 0x68	; 104
     e86:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_Z9writeBytehhh>
     e8a:	4d e5       	ldi	r20, 0x5D	; 93
     e8c:	64 e2       	ldi	r22, 0x24	; 36
     e8e:	88 e6       	ldi	r24, 0x68	; 104
     e90:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_Z9writeBytehhh>
     e94:	40 e2       	ldi	r20, 0x20	; 32
     e96:	6a e6       	ldi	r22, 0x6A	; 106
     e98:	88 e6       	ldi	r24, 0x68	; 104
     e9a:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_Z9writeBytehhh>
     e9e:	08 95       	ret

00000ea0 <_Z8readBytehh>:
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	c8 2f       	mov	r28, r24
     ea6:	d6 2f       	mov	r29, r22
     ea8:	68 2f       	mov	r22, r24
     eaa:	86 ec       	ldi	r24, 0xC6	; 198
     eac:	93 e0       	ldi	r25, 0x03	; 3
     eae:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_ZN7TwoWire17beginTransmissionEh>
     eb2:	6d 2f       	mov	r22, r29
     eb4:	86 ec       	ldi	r24, 0xC6	; 198
     eb6:	93 e0       	ldi	r25, 0x03	; 3
     eb8:	0e 94 0c 14 	call	0x2818	; 0x2818 <_ZN7TwoWire5writeEh>
     ebc:	86 ec       	ldi	r24, 0xC6	; 198
     ebe:	93 e0       	ldi	r25, 0x03	; 3
     ec0:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <_ZN7TwoWire15endTransmissionEv>
     ec4:	41 e0       	ldi	r20, 0x01	; 1
     ec6:	6c 2f       	mov	r22, r28
     ec8:	86 ec       	ldi	r24, 0xC6	; 198
     eca:	93 e0       	ldi	r25, 0x03	; 3
     ecc:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN7TwoWire11requestFromEhh>
     ed0:	86 ec       	ldi	r24, 0xC6	; 198
     ed2:	93 e0       	ldi	r25, 0x03	; 3
     ed4:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN7TwoWire4readEv>
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	08 95       	ret

00000ede <_Z9readByteshhhPh>:
     ede:	ef 92       	push	r14
     ee0:	ff 92       	push	r15
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	c8 2f       	mov	r28, r24
     eec:	16 2f       	mov	r17, r22
     eee:	d4 2f       	mov	r29, r20
     ef0:	79 01       	movw	r14, r18
     ef2:	68 2f       	mov	r22, r24
     ef4:	86 ec       	ldi	r24, 0xC6	; 198
     ef6:	93 e0       	ldi	r25, 0x03	; 3
     ef8:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_ZN7TwoWire17beginTransmissionEh>
     efc:	61 2f       	mov	r22, r17
     efe:	86 ec       	ldi	r24, 0xC6	; 198
     f00:	93 e0       	ldi	r25, 0x03	; 3
     f02:	0e 94 0c 14 	call	0x2818	; 0x2818 <_ZN7TwoWire5writeEh>
     f06:	86 ec       	ldi	r24, 0xC6	; 198
     f08:	93 e0       	ldi	r25, 0x03	; 3
     f0a:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <_ZN7TwoWire15endTransmissionEv>
     f0e:	4d 2f       	mov	r20, r29
     f10:	6c 2f       	mov	r22, r28
     f12:	86 ec       	ldi	r24, 0xC6	; 198
     f14:	93 e0       	ldi	r25, 0x03	; 3
     f16:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN7TwoWire11requestFromEhh>
     f1a:	c0 e0       	ldi	r28, 0x00	; 0
     f1c:	0c c0       	rjmp	.+24     	; 0xf36 <_Z9readByteshhhPh+0x58>
     f1e:	d1 e0       	ldi	r29, 0x01	; 1
     f20:	dc 0f       	add	r29, r28
     f22:	87 01       	movw	r16, r14
     f24:	0c 0f       	add	r16, r28
     f26:	11 1d       	adc	r17, r1
     f28:	86 ec       	ldi	r24, 0xC6	; 198
     f2a:	93 e0       	ldi	r25, 0x03	; 3
     f2c:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN7TwoWire4readEv>
     f30:	f8 01       	movw	r30, r16
     f32:	80 83       	st	Z, r24
     f34:	cd 2f       	mov	r28, r29
     f36:	86 ec       	ldi	r24, 0xC6	; 198
     f38:	93 e0       	ldi	r25, 0x03	; 3
     f3a:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN7TwoWire9availableEv>
     f3e:	89 2b       	or	r24, r25
     f40:	71 f7       	brne	.-36     	; 0xf1e <_Z9readByteshhhPh+0x40>
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	ef 90       	pop	r14
     f4e:	08 95       	ret

00000f50 <_Z15MPU9250SelfTestPf>:
     f50:	2f 92       	push	r2
     f52:	3f 92       	push	r3
     f54:	4f 92       	push	r4
     f56:	5f 92       	push	r5
     f58:	6f 92       	push	r6
     f5a:	7f 92       	push	r7
     f5c:	8f 92       	push	r8
     f5e:	9f 92       	push	r9
     f60:	af 92       	push	r10
     f62:	bf 92       	push	r11
     f64:	cf 92       	push	r12
     f66:	df 92       	push	r13
     f68:	ef 92       	push	r14
     f6a:	ff 92       	push	r15
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	ce 54       	subi	r28, 0x4E	; 78
     f7a:	d1 09       	sbc	r29, r1
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
     f86:	88 2e       	mov	r8, r24
     f88:	99 2e       	mov	r9, r25
     f8a:	fe 01       	movw	r30, r28
     f8c:	e7 5b       	subi	r30, 0xB7	; 183
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	86 e0       	ldi	r24, 0x06	; 6
     f92:	df 01       	movw	r26, r30
     f94:	1d 92       	st	X+, r1
     f96:	8a 95       	dec	r24
     f98:	e9 f7       	brne	.-6      	; 0xf94 <_Z15MPU9250SelfTestPf+0x44>
     f9a:	8c e0       	ldi	r24, 0x0C	; 12
     f9c:	3c 97       	sbiw	r30, 0x0c	; 12
     f9e:	df 01       	movw	r26, r30
     fa0:	98 2f       	mov	r25, r24
     fa2:	1d 92       	st	X+, r1
     fa4:	9a 95       	dec	r25
     fa6:	e9 f7       	brne	.-6      	; 0xfa2 <_Z15MPU9250SelfTestPf+0x52>
     fa8:	3c 97       	sbiw	r30, 0x0c	; 12
     faa:	df 01       	movw	r26, r30
     fac:	98 2f       	mov	r25, r24
     fae:	1d 92       	st	X+, r1
     fb0:	9a 95       	dec	r25
     fb2:	e9 f7       	brne	.-6      	; 0xfae <_Z15MPU9250SelfTestPf+0x5e>
     fb4:	3c 97       	sbiw	r30, 0x0c	; 12
     fb6:	df 01       	movw	r26, r30
     fb8:	98 2f       	mov	r25, r24
     fba:	1d 92       	st	X+, r1
     fbc:	9a 95       	dec	r25
     fbe:	e9 f7       	brne	.-6      	; 0xfba <_Z15MPU9250SelfTestPf+0x6a>
     fc0:	3c 97       	sbiw	r30, 0x0c	; 12
     fc2:	df 01       	movw	r26, r30
     fc4:	1d 92       	st	X+, r1
     fc6:	8a 95       	dec	r24
     fc8:	e9 f7       	brne	.-6      	; 0xfc4 <_Z15MPU9250SelfTestPf+0x74>
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	69 e1       	ldi	r22, 0x19	; 25
     fce:	88 e6       	ldi	r24, 0x68	; 104
     fd0:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_Z9writeBytehhh>
     fd4:	42 e0       	ldi	r20, 0x02	; 2
     fd6:	6a e1       	ldi	r22, 0x1A	; 26
     fd8:	88 e6       	ldi	r24, 0x68	; 104
     fda:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_Z9writeBytehhh>
     fde:	40 e0       	ldi	r20, 0x00	; 0
     fe0:	6b e1       	ldi	r22, 0x1B	; 27
     fe2:	88 e6       	ldi	r24, 0x68	; 104
     fe4:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_Z9writeBytehhh>
     fe8:	42 e0       	ldi	r20, 0x02	; 2
     fea:	6d e1       	ldi	r22, 0x1D	; 29
     fec:	88 e6       	ldi	r24, 0x68	; 104
     fee:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_Z9writeBytehhh>
     ff2:	40 e0       	ldi	r20, 0x00	; 0
     ff4:	6c e1       	ldi	r22, 0x1C	; 28
     ff6:	88 e6       	ldi	r24, 0x68	; 104
     ff8:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_Z9writeBytehhh>
     ffc:	08 ec       	ldi	r16, 0xC8	; 200
     ffe:	10 e0       	ldi	r17, 0x00	; 0
    1000:	9e 01       	movw	r18, r28
    1002:	27 5b       	subi	r18, 0xB7	; 183
    1004:	3f 4f       	sbci	r19, 0xFF	; 255
    1006:	46 e0       	ldi	r20, 0x06	; 6
    1008:	6b e3       	ldi	r22, 0x3B	; 59
    100a:	88 e6       	ldi	r24, 0x68	; 104
    100c:	0e 94 6f 07 	call	0xede	; 0xede <_Z9readByteshhhPh>
    1010:	2a 96       	adiw	r28, 0x0a	; 10
    1012:	8f ad       	ldd	r24, Y+63	; 0x3f
    1014:	2a 97       	sbiw	r28, 0x0a	; 10
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	98 2f       	mov	r25, r24
    101a:	88 27       	eor	r24, r24
    101c:	2b 96       	adiw	r28, 0x0b	; 11
    101e:	2f ad       	ldd	r18, Y+63	; 0x3f
    1020:	2b 97       	sbiw	r28, 0x0b	; 11
    1022:	82 2b       	or	r24, r18
    1024:	09 2e       	mov	r0, r25
    1026:	00 0c       	add	r0, r0
    1028:	aa 0b       	sbc	r26, r26
    102a:	bb 0b       	sbc	r27, r27
    102c:	49 a9       	ldd	r20, Y+49	; 0x31
    102e:	5a a9       	ldd	r21, Y+50	; 0x32
    1030:	6b a9       	ldd	r22, Y+51	; 0x33
    1032:	7c a9       	ldd	r23, Y+52	; 0x34
    1034:	84 0f       	add	r24, r20
    1036:	95 1f       	adc	r25, r21
    1038:	a6 1f       	adc	r26, r22
    103a:	b7 1f       	adc	r27, r23
    103c:	89 ab       	std	Y+49, r24	; 0x31
    103e:	9a ab       	std	Y+50, r25	; 0x32
    1040:	ab ab       	std	Y+51, r26	; 0x33
    1042:	bc ab       	std	Y+52, r27	; 0x34
    1044:	2c 96       	adiw	r28, 0x0c	; 12
    1046:	8f ad       	ldd	r24, Y+63	; 0x3f
    1048:	2c 97       	sbiw	r28, 0x0c	; 12
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	98 2f       	mov	r25, r24
    104e:	88 27       	eor	r24, r24
    1050:	2d 96       	adiw	r28, 0x0d	; 13
    1052:	2f ad       	ldd	r18, Y+63	; 0x3f
    1054:	2d 97       	sbiw	r28, 0x0d	; 13
    1056:	82 2b       	or	r24, r18
    1058:	09 2e       	mov	r0, r25
    105a:	00 0c       	add	r0, r0
    105c:	aa 0b       	sbc	r26, r26
    105e:	bb 0b       	sbc	r27, r27
    1060:	4d a9       	ldd	r20, Y+53	; 0x35
    1062:	5e a9       	ldd	r21, Y+54	; 0x36
    1064:	6f a9       	ldd	r22, Y+55	; 0x37
    1066:	78 ad       	ldd	r23, Y+56	; 0x38
    1068:	84 0f       	add	r24, r20
    106a:	95 1f       	adc	r25, r21
    106c:	a6 1f       	adc	r26, r22
    106e:	b7 1f       	adc	r27, r23
    1070:	8d ab       	std	Y+53, r24	; 0x35
    1072:	9e ab       	std	Y+54, r25	; 0x36
    1074:	af ab       	std	Y+55, r26	; 0x37
    1076:	b8 af       	std	Y+56, r27	; 0x38
    1078:	2e 96       	adiw	r28, 0x0e	; 14
    107a:	8f ad       	ldd	r24, Y+63	; 0x3f
    107c:	2e 97       	sbiw	r28, 0x0e	; 14
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	98 2f       	mov	r25, r24
    1082:	88 27       	eor	r24, r24
    1084:	2f 96       	adiw	r28, 0x0f	; 15
    1086:	2f ad       	ldd	r18, Y+63	; 0x3f
    1088:	2f 97       	sbiw	r28, 0x0f	; 15
    108a:	82 2b       	or	r24, r18
    108c:	09 2e       	mov	r0, r25
    108e:	00 0c       	add	r0, r0
    1090:	aa 0b       	sbc	r26, r26
    1092:	bb 0b       	sbc	r27, r27
    1094:	49 ad       	ldd	r20, Y+57	; 0x39
    1096:	5a ad       	ldd	r21, Y+58	; 0x3a
    1098:	6b ad       	ldd	r22, Y+59	; 0x3b
    109a:	7c ad       	ldd	r23, Y+60	; 0x3c
    109c:	84 0f       	add	r24, r20
    109e:	95 1f       	adc	r25, r21
    10a0:	a6 1f       	adc	r26, r22
    10a2:	b7 1f       	adc	r27, r23
    10a4:	89 af       	std	Y+57, r24	; 0x39
    10a6:	9a af       	std	Y+58, r25	; 0x3a
    10a8:	ab af       	std	Y+59, r26	; 0x3b
    10aa:	bc af       	std	Y+60, r27	; 0x3c
    10ac:	9e 01       	movw	r18, r28
    10ae:	27 5b       	subi	r18, 0xB7	; 183
    10b0:	3f 4f       	sbci	r19, 0xFF	; 255
    10b2:	46 e0       	ldi	r20, 0x06	; 6
    10b4:	63 e4       	ldi	r22, 0x43	; 67
    10b6:	88 e6       	ldi	r24, 0x68	; 104
    10b8:	0e 94 6f 07 	call	0xede	; 0xede <_Z9readByteshhhPh>
    10bc:	2a 96       	adiw	r28, 0x0a	; 10
    10be:	8f ad       	ldd	r24, Y+63	; 0x3f
    10c0:	2a 97       	sbiw	r28, 0x0a	; 10
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	98 2f       	mov	r25, r24
    10c6:	88 27       	eor	r24, r24
    10c8:	2b 96       	adiw	r28, 0x0b	; 11
    10ca:	2f ad       	ldd	r18, Y+63	; 0x3f
    10cc:	2b 97       	sbiw	r28, 0x0b	; 11
    10ce:	82 2b       	or	r24, r18
    10d0:	09 2e       	mov	r0, r25
    10d2:	00 0c       	add	r0, r0
    10d4:	aa 0b       	sbc	r26, r26
    10d6:	bb 0b       	sbc	r27, r27
    10d8:	21 96       	adiw	r28, 0x01	; 1
    10da:	4c ad       	ldd	r20, Y+60	; 0x3c
    10dc:	5d ad       	ldd	r21, Y+61	; 0x3d
    10de:	6e ad       	ldd	r22, Y+62	; 0x3e
    10e0:	7f ad       	ldd	r23, Y+63	; 0x3f
    10e2:	21 97       	sbiw	r28, 0x01	; 1
    10e4:	84 0f       	add	r24, r20
    10e6:	95 1f       	adc	r25, r21
    10e8:	a6 1f       	adc	r26, r22
    10ea:	b7 1f       	adc	r27, r23
    10ec:	21 96       	adiw	r28, 0x01	; 1
    10ee:	8c af       	std	Y+60, r24	; 0x3c
    10f0:	9d af       	std	Y+61, r25	; 0x3d
    10f2:	ae af       	std	Y+62, r26	; 0x3e
    10f4:	bf af       	std	Y+63, r27	; 0x3f
    10f6:	21 97       	sbiw	r28, 0x01	; 1
    10f8:	2c 96       	adiw	r28, 0x0c	; 12
    10fa:	8f ad       	ldd	r24, Y+63	; 0x3f
    10fc:	2c 97       	sbiw	r28, 0x0c	; 12
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	98 2f       	mov	r25, r24
    1102:	88 27       	eor	r24, r24
    1104:	2d 96       	adiw	r28, 0x0d	; 13
    1106:	2f ad       	ldd	r18, Y+63	; 0x3f
    1108:	2d 97       	sbiw	r28, 0x0d	; 13
    110a:	82 2b       	or	r24, r18
    110c:	09 2e       	mov	r0, r25
    110e:	00 0c       	add	r0, r0
    1110:	aa 0b       	sbc	r26, r26
    1112:	bb 0b       	sbc	r27, r27
    1114:	25 96       	adiw	r28, 0x05	; 5
    1116:	4c ad       	ldd	r20, Y+60	; 0x3c
    1118:	5d ad       	ldd	r21, Y+61	; 0x3d
    111a:	6e ad       	ldd	r22, Y+62	; 0x3e
    111c:	7f ad       	ldd	r23, Y+63	; 0x3f
    111e:	25 97       	sbiw	r28, 0x05	; 5
    1120:	84 0f       	add	r24, r20
    1122:	95 1f       	adc	r25, r21
    1124:	a6 1f       	adc	r26, r22
    1126:	b7 1f       	adc	r27, r23
    1128:	25 96       	adiw	r28, 0x05	; 5
    112a:	8c af       	std	Y+60, r24	; 0x3c
    112c:	9d af       	std	Y+61, r25	; 0x3d
    112e:	ae af       	std	Y+62, r26	; 0x3e
    1130:	bf af       	std	Y+63, r27	; 0x3f
    1132:	25 97       	sbiw	r28, 0x05	; 5
    1134:	2e 96       	adiw	r28, 0x0e	; 14
    1136:	8f ad       	ldd	r24, Y+63	; 0x3f
    1138:	2e 97       	sbiw	r28, 0x0e	; 14
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	98 2f       	mov	r25, r24
    113e:	88 27       	eor	r24, r24
    1140:	2f 96       	adiw	r28, 0x0f	; 15
    1142:	2f ad       	ldd	r18, Y+63	; 0x3f
    1144:	2f 97       	sbiw	r28, 0x0f	; 15
    1146:	82 2b       	or	r24, r18
    1148:	09 2e       	mov	r0, r25
    114a:	00 0c       	add	r0, r0
    114c:	aa 0b       	sbc	r26, r26
    114e:	bb 0b       	sbc	r27, r27
    1150:	29 96       	adiw	r28, 0x09	; 9
    1152:	4c ad       	ldd	r20, Y+60	; 0x3c
    1154:	5d ad       	ldd	r21, Y+61	; 0x3d
    1156:	6e ad       	ldd	r22, Y+62	; 0x3e
    1158:	7f ad       	ldd	r23, Y+63	; 0x3f
    115a:	29 97       	sbiw	r28, 0x09	; 9
    115c:	84 0f       	add	r24, r20
    115e:	95 1f       	adc	r25, r21
    1160:	a6 1f       	adc	r26, r22
    1162:	b7 1f       	adc	r27, r23
    1164:	29 96       	adiw	r28, 0x09	; 9
    1166:	8c af       	std	Y+60, r24	; 0x3c
    1168:	9d af       	std	Y+61, r25	; 0x3d
    116a:	ae af       	std	Y+62, r26	; 0x3e
    116c:	bf af       	std	Y+63, r27	; 0x3f
    116e:	29 97       	sbiw	r28, 0x09	; 9
    1170:	01 50       	subi	r16, 0x01	; 1
    1172:	11 09       	sbc	r17, r1
    1174:	09 f0       	breq	.+2      	; 0x1178 <_Z15MPU9250SelfTestPf+0x228>
    1176:	44 cf       	rjmp	.-376    	; 0x1000 <_Z15MPU9250SelfTestPf+0xb0>
    1178:	3e 01       	movw	r6, r28
    117a:	b1 e3       	ldi	r27, 0x31	; 49
    117c:	6b 0e       	add	r6, r27
    117e:	71 1c       	adc	r7, r1
    1180:	6e 01       	movw	r12, r28
    1182:	ed e3       	ldi	r30, 0x3D	; 61
    1184:	ce 0e       	add	r12, r30
    1186:	d1 1c       	adc	r13, r1
    1188:	56 01       	movw	r10, r12
    118a:	76 01       	movw	r14, r12
    118c:	83 01       	movw	r16, r6
    118e:	0f 2e       	mov	r0, r31
    1190:	f8 ec       	ldi	r31, 0xC8	; 200
    1192:	2f 2e       	mov	r2, r31
    1194:	31 2c       	mov	r3, r1
    1196:	41 2c       	mov	r4, r1
    1198:	51 2c       	mov	r5, r1
    119a:	f0 2d       	mov	r31, r0
    119c:	d8 01       	movw	r26, r16
    119e:	6d 91       	ld	r22, X+
    11a0:	7d 91       	ld	r23, X+
    11a2:	8d 91       	ld	r24, X+
    11a4:	9c 91       	ld	r25, X
    11a6:	a2 01       	movw	r20, r4
    11a8:	91 01       	movw	r18, r2
    11aa:	0e 94 2c 19 	call	0x3258	; 0x3258 <__divmodsi4>
    11ae:	f8 01       	movw	r30, r16
    11b0:	21 93       	st	Z+, r18
    11b2:	31 93       	st	Z+, r19
    11b4:	41 93       	st	Z+, r20
    11b6:	51 93       	st	Z+, r21
    11b8:	8f 01       	movw	r16, r30
    11ba:	d7 01       	movw	r26, r14
    11bc:	6d 91       	ld	r22, X+
    11be:	7d 91       	ld	r23, X+
    11c0:	8d 91       	ld	r24, X+
    11c2:	9c 91       	ld	r25, X
    11c4:	a2 01       	movw	r20, r4
    11c6:	91 01       	movw	r18, r2
    11c8:	0e 94 2c 19 	call	0x3258	; 0x3258 <__divmodsi4>
    11cc:	f7 01       	movw	r30, r14
    11ce:	21 93       	st	Z+, r18
    11d0:	31 93       	st	Z+, r19
    11d2:	41 93       	st	Z+, r20
    11d4:	51 93       	st	Z+, r21
    11d6:	7f 01       	movw	r14, r30
    11d8:	0a 15       	cp	r16, r10
    11da:	1b 05       	cpc	r17, r11
    11dc:	f9 f6       	brne	.-66     	; 0x119c <_Z15MPU9250SelfTestPf+0x24c>
    11de:	40 ee       	ldi	r20, 0xE0	; 224
    11e0:	6c e1       	ldi	r22, 0x1C	; 28
    11e2:	88 e6       	ldi	r24, 0x68	; 104
    11e4:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_Z9writeBytehhh>
    11e8:	40 ee       	ldi	r20, 0xE0	; 224
    11ea:	6b e1       	ldi	r22, 0x1B	; 27
    11ec:	88 e6       	ldi	r24, 0x68	; 104
    11ee:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_Z9writeBytehhh>
    11f2:	69 e1       	ldi	r22, 0x19	; 25
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <delay>
    11fe:	08 ec       	ldi	r16, 0xC8	; 200
    1200:	10 e0       	ldi	r17, 0x00	; 0
    1202:	9e 01       	movw	r18, r28
    1204:	27 5b       	subi	r18, 0xB7	; 183
    1206:	3f 4f       	sbci	r19, 0xFF	; 255
    1208:	46 e0       	ldi	r20, 0x06	; 6
    120a:	6b e3       	ldi	r22, 0x3B	; 59
    120c:	88 e6       	ldi	r24, 0x68	; 104
    120e:	0e 94 6f 07 	call	0xede	; 0xede <_Z9readByteshhhPh>
    1212:	2a 96       	adiw	r28, 0x0a	; 10
    1214:	8f ad       	ldd	r24, Y+63	; 0x3f
    1216:	2a 97       	sbiw	r28, 0x0a	; 10
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	98 2f       	mov	r25, r24
    121c:	88 27       	eor	r24, r24
    121e:	2b 96       	adiw	r28, 0x0b	; 11
    1220:	2f ad       	ldd	r18, Y+63	; 0x3f
    1222:	2b 97       	sbiw	r28, 0x0b	; 11
    1224:	82 2b       	or	r24, r18
    1226:	09 2e       	mov	r0, r25
    1228:	00 0c       	add	r0, r0
    122a:	aa 0b       	sbc	r26, r26
    122c:	bb 0b       	sbc	r27, r27
    122e:	4d a1       	ldd	r20, Y+37	; 0x25
    1230:	5e a1       	ldd	r21, Y+38	; 0x26
    1232:	6f a1       	ldd	r22, Y+39	; 0x27
    1234:	78 a5       	ldd	r23, Y+40	; 0x28
    1236:	84 0f       	add	r24, r20
    1238:	95 1f       	adc	r25, r21
    123a:	a6 1f       	adc	r26, r22
    123c:	b7 1f       	adc	r27, r23
    123e:	8d a3       	std	Y+37, r24	; 0x25
    1240:	9e a3       	std	Y+38, r25	; 0x26
    1242:	af a3       	std	Y+39, r26	; 0x27
    1244:	b8 a7       	std	Y+40, r27	; 0x28
    1246:	2c 96       	adiw	r28, 0x0c	; 12
    1248:	8f ad       	ldd	r24, Y+63	; 0x3f
    124a:	2c 97       	sbiw	r28, 0x0c	; 12
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	98 2f       	mov	r25, r24
    1250:	88 27       	eor	r24, r24
    1252:	2d 96       	adiw	r28, 0x0d	; 13
    1254:	2f ad       	ldd	r18, Y+63	; 0x3f
    1256:	2d 97       	sbiw	r28, 0x0d	; 13
    1258:	82 2b       	or	r24, r18
    125a:	09 2e       	mov	r0, r25
    125c:	00 0c       	add	r0, r0
    125e:	aa 0b       	sbc	r26, r26
    1260:	bb 0b       	sbc	r27, r27
    1262:	49 a5       	ldd	r20, Y+41	; 0x29
    1264:	5a a5       	ldd	r21, Y+42	; 0x2a
    1266:	6b a5       	ldd	r22, Y+43	; 0x2b
    1268:	7c a5       	ldd	r23, Y+44	; 0x2c
    126a:	84 0f       	add	r24, r20
    126c:	95 1f       	adc	r25, r21
    126e:	a6 1f       	adc	r26, r22
    1270:	b7 1f       	adc	r27, r23
    1272:	89 a7       	std	Y+41, r24	; 0x29
    1274:	9a a7       	std	Y+42, r25	; 0x2a
    1276:	ab a7       	std	Y+43, r26	; 0x2b
    1278:	bc a7       	std	Y+44, r27	; 0x2c
    127a:	2e 96       	adiw	r28, 0x0e	; 14
    127c:	8f ad       	ldd	r24, Y+63	; 0x3f
    127e:	2e 97       	sbiw	r28, 0x0e	; 14
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	98 2f       	mov	r25, r24
    1284:	88 27       	eor	r24, r24
    1286:	2f 96       	adiw	r28, 0x0f	; 15
    1288:	2f ad       	ldd	r18, Y+63	; 0x3f
    128a:	2f 97       	sbiw	r28, 0x0f	; 15
    128c:	82 2b       	or	r24, r18
    128e:	09 2e       	mov	r0, r25
    1290:	00 0c       	add	r0, r0
    1292:	aa 0b       	sbc	r26, r26
    1294:	bb 0b       	sbc	r27, r27
    1296:	4d a5       	ldd	r20, Y+45	; 0x2d
    1298:	5e a5       	ldd	r21, Y+46	; 0x2e
    129a:	6f a5       	ldd	r22, Y+47	; 0x2f
    129c:	78 a9       	ldd	r23, Y+48	; 0x30
    129e:	84 0f       	add	r24, r20
    12a0:	95 1f       	adc	r25, r21
    12a2:	a6 1f       	adc	r26, r22
    12a4:	b7 1f       	adc	r27, r23
    12a6:	8d a7       	std	Y+45, r24	; 0x2d
    12a8:	9e a7       	std	Y+46, r25	; 0x2e
    12aa:	af a7       	std	Y+47, r26	; 0x2f
    12ac:	b8 ab       	std	Y+48, r27	; 0x30
    12ae:	9e 01       	movw	r18, r28
    12b0:	27 5b       	subi	r18, 0xB7	; 183
    12b2:	3f 4f       	sbci	r19, 0xFF	; 255
    12b4:	46 e0       	ldi	r20, 0x06	; 6
    12b6:	63 e4       	ldi	r22, 0x43	; 67
    12b8:	88 e6       	ldi	r24, 0x68	; 104
    12ba:	0e 94 6f 07 	call	0xede	; 0xede <_Z9readByteshhhPh>
    12be:	2a 96       	adiw	r28, 0x0a	; 10
    12c0:	8f ad       	ldd	r24, Y+63	; 0x3f
    12c2:	2a 97       	sbiw	r28, 0x0a	; 10
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	98 2f       	mov	r25, r24
    12c8:	88 27       	eor	r24, r24
    12ca:	2b 96       	adiw	r28, 0x0b	; 11
    12cc:	2f ad       	ldd	r18, Y+63	; 0x3f
    12ce:	2b 97       	sbiw	r28, 0x0b	; 11
    12d0:	82 2b       	or	r24, r18
    12d2:	09 2e       	mov	r0, r25
    12d4:	00 0c       	add	r0, r0
    12d6:	aa 0b       	sbc	r26, r26
    12d8:	bb 0b       	sbc	r27, r27
    12da:	49 8d       	ldd	r20, Y+25	; 0x19
    12dc:	5a 8d       	ldd	r21, Y+26	; 0x1a
    12de:	6b 8d       	ldd	r22, Y+27	; 0x1b
    12e0:	7c 8d       	ldd	r23, Y+28	; 0x1c
    12e2:	84 0f       	add	r24, r20
    12e4:	95 1f       	adc	r25, r21
    12e6:	a6 1f       	adc	r26, r22
    12e8:	b7 1f       	adc	r27, r23
    12ea:	89 8f       	std	Y+25, r24	; 0x19
    12ec:	9a 8f       	std	Y+26, r25	; 0x1a
    12ee:	ab 8f       	std	Y+27, r26	; 0x1b
    12f0:	bc 8f       	std	Y+28, r27	; 0x1c
    12f2:	2c 96       	adiw	r28, 0x0c	; 12
    12f4:	8f ad       	ldd	r24, Y+63	; 0x3f
    12f6:	2c 97       	sbiw	r28, 0x0c	; 12
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	98 2f       	mov	r25, r24
    12fc:	88 27       	eor	r24, r24
    12fe:	2d 96       	adiw	r28, 0x0d	; 13
    1300:	2f ad       	ldd	r18, Y+63	; 0x3f
    1302:	2d 97       	sbiw	r28, 0x0d	; 13
    1304:	82 2b       	or	r24, r18
    1306:	09 2e       	mov	r0, r25
    1308:	00 0c       	add	r0, r0
    130a:	aa 0b       	sbc	r26, r26
    130c:	bb 0b       	sbc	r27, r27
    130e:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1310:	5e 8d       	ldd	r21, Y+30	; 0x1e
    1312:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1314:	78 a1       	ldd	r23, Y+32	; 0x20
    1316:	84 0f       	add	r24, r20
    1318:	95 1f       	adc	r25, r21
    131a:	a6 1f       	adc	r26, r22
    131c:	b7 1f       	adc	r27, r23
    131e:	8d 8f       	std	Y+29, r24	; 0x1d
    1320:	9e 8f       	std	Y+30, r25	; 0x1e
    1322:	af 8f       	std	Y+31, r26	; 0x1f
    1324:	b8 a3       	std	Y+32, r27	; 0x20
    1326:	2e 96       	adiw	r28, 0x0e	; 14
    1328:	8f ad       	ldd	r24, Y+63	; 0x3f
    132a:	2e 97       	sbiw	r28, 0x0e	; 14
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	98 2f       	mov	r25, r24
    1330:	88 27       	eor	r24, r24
    1332:	2f 96       	adiw	r28, 0x0f	; 15
    1334:	2f ad       	ldd	r18, Y+63	; 0x3f
    1336:	2f 97       	sbiw	r28, 0x0f	; 15
    1338:	82 2b       	or	r24, r18
    133a:	09 2e       	mov	r0, r25
    133c:	00 0c       	add	r0, r0
    133e:	aa 0b       	sbc	r26, r26
    1340:	bb 0b       	sbc	r27, r27
    1342:	49 a1       	ldd	r20, Y+33	; 0x21
    1344:	5a a1       	ldd	r21, Y+34	; 0x22
    1346:	6b a1       	ldd	r22, Y+35	; 0x23
    1348:	7c a1       	ldd	r23, Y+36	; 0x24
    134a:	84 0f       	add	r24, r20
    134c:	95 1f       	adc	r25, r21
    134e:	a6 1f       	adc	r26, r22
    1350:	b7 1f       	adc	r27, r23
    1352:	89 a3       	std	Y+33, r24	; 0x21
    1354:	9a a3       	std	Y+34, r25	; 0x22
    1356:	ab a3       	std	Y+35, r26	; 0x23
    1358:	bc a3       	std	Y+36, r27	; 0x24
    135a:	01 50       	subi	r16, 0x01	; 1
    135c:	11 09       	sbc	r17, r1
    135e:	09 f0       	breq	.+2      	; 0x1362 <_Z15MPU9250SelfTestPf+0x412>
    1360:	50 cf       	rjmp	.-352    	; 0x1202 <_Z15MPU9250SelfTestPf+0x2b2>
    1362:	5e 01       	movw	r10, r28
    1364:	f5 e2       	ldi	r31, 0x25	; 37
    1366:	af 0e       	add	r10, r31
    1368:	b1 1c       	adc	r11, r1
    136a:	1e 01       	movw	r2, r28
    136c:	89 e1       	ldi	r24, 0x19	; 25
    136e:	28 0e       	add	r2, r24
    1370:	31 1c       	adc	r3, r1
    1372:	2e 01       	movw	r4, r28
    1374:	91 e3       	ldi	r25, 0x31	; 49
    1376:	49 0e       	add	r4, r25
    1378:	51 1c       	adc	r5, r1
    137a:	71 01       	movw	r14, r2
    137c:	85 01       	movw	r16, r10
    137e:	d8 01       	movw	r26, r16
    1380:	6d 91       	ld	r22, X+
    1382:	7d 91       	ld	r23, X+
    1384:	8d 91       	ld	r24, X+
    1386:	9c 91       	ld	r25, X
    1388:	28 ec       	ldi	r18, 0xC8	; 200
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	50 e0       	ldi	r21, 0x00	; 0
    1390:	0e 94 2c 19 	call	0x3258	; 0x3258 <__divmodsi4>
    1394:	f8 01       	movw	r30, r16
    1396:	21 93       	st	Z+, r18
    1398:	31 93       	st	Z+, r19
    139a:	41 93       	st	Z+, r20
    139c:	51 93       	st	Z+, r21
    139e:	8f 01       	movw	r16, r30
    13a0:	d7 01       	movw	r26, r14
    13a2:	6d 91       	ld	r22, X+
    13a4:	7d 91       	ld	r23, X+
    13a6:	8d 91       	ld	r24, X+
    13a8:	9c 91       	ld	r25, X
    13aa:	28 ec       	ldi	r18, 0xC8	; 200
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	40 e0       	ldi	r20, 0x00	; 0
    13b0:	50 e0       	ldi	r21, 0x00	; 0
    13b2:	0e 94 2c 19 	call	0x3258	; 0x3258 <__divmodsi4>
    13b6:	f7 01       	movw	r30, r14
    13b8:	21 93       	st	Z+, r18
    13ba:	31 93       	st	Z+, r19
    13bc:	41 93       	st	Z+, r20
    13be:	51 93       	st	Z+, r21
    13c0:	7f 01       	movw	r14, r30
    13c2:	04 15       	cp	r16, r4
    13c4:	15 05       	cpc	r17, r5
    13c6:	d9 f6       	brne	.-74     	; 0x137e <_Z15MPU9250SelfTestPf+0x42e>
    13c8:	40 e0       	ldi	r20, 0x00	; 0
    13ca:	6c e1       	ldi	r22, 0x1C	; 28
    13cc:	88 e6       	ldi	r24, 0x68	; 104
    13ce:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_Z9writeBytehhh>
    13d2:	40 e0       	ldi	r20, 0x00	; 0
    13d4:	6b e1       	ldi	r22, 0x1B	; 27
    13d6:	88 e6       	ldi	r24, 0x68	; 104
    13d8:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_Z9writeBytehhh>
    13dc:	69 e1       	ldi	r22, 0x19	; 25
    13de:	70 e0       	ldi	r23, 0x00	; 0
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <delay>
    13e8:	6d e0       	ldi	r22, 0x0D	; 13
    13ea:	88 e6       	ldi	r24, 0x68	; 104
    13ec:	0e 94 50 07 	call	0xea0	; 0xea0 <_Z8readBytehh>
    13f0:	48 2e       	mov	r4, r24
    13f2:	6e e0       	ldi	r22, 0x0E	; 14
    13f4:	88 e6       	ldi	r24, 0x68	; 104
    13f6:	0e 94 50 07 	call	0xea0	; 0xea0 <_Z8readBytehh>
    13fa:	58 2e       	mov	r5, r24
    13fc:	6f e0       	ldi	r22, 0x0F	; 15
    13fe:	88 e6       	ldi	r24, 0x68	; 104
    1400:	0e 94 50 07 	call	0xea0	; 0xea0 <_Z8readBytehh>
    1404:	e8 2e       	mov	r14, r24
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	88 e6       	ldi	r24, 0x68	; 104
    140a:	0e 94 50 07 	call	0xea0	; 0xea0 <_Z8readBytehh>
    140e:	f8 2e       	mov	r15, r24
    1410:	61 e0       	ldi	r22, 0x01	; 1
    1412:	88 e6       	ldi	r24, 0x68	; 104
    1414:	0e 94 50 07 	call	0xea0	; 0xea0 <_Z8readBytehh>
    1418:	08 2f       	mov	r16, r24
    141a:	62 e0       	ldi	r22, 0x02	; 2
    141c:	88 e6       	ldi	r24, 0x68	; 104
    141e:	0e 94 50 07 	call	0xea0	; 0xea0 <_Z8readBytehh>
    1422:	18 2f       	mov	r17, r24
    1424:	64 2d       	mov	r22, r4
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__floatunsisf>
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e8       	ldi	r20, 0x80	; 128
    1436:	5f e3       	ldi	r21, 0x3F	; 63
    1438:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__subsf3>
    143c:	9b 01       	movw	r18, r22
    143e:	ac 01       	movw	r20, r24
    1440:	6e ea       	ldi	r22, 0xAE	; 174
    1442:	77 e4       	ldi	r23, 0x47	; 71
    1444:	81 e8       	ldi	r24, 0x81	; 129
    1446:	9f e3       	ldi	r25, 0x3F	; 63
    1448:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <pow>
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 ec       	ldi	r19, 0xC0	; 192
    1450:	43 e2       	ldi	r20, 0x23	; 35
    1452:	55 e4       	ldi	r21, 0x45	; 69
    1454:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3>
    1458:	69 83       	std	Y+1, r22	; 0x01
    145a:	7a 83       	std	Y+2, r23	; 0x02
    145c:	8b 83       	std	Y+3, r24	; 0x03
    145e:	9c 83       	std	Y+4, r25	; 0x04
    1460:	65 2d       	mov	r22, r5
    1462:	70 e0       	ldi	r23, 0x00	; 0
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__floatunsisf>
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e8       	ldi	r20, 0x80	; 128
    1472:	5f e3       	ldi	r21, 0x3F	; 63
    1474:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__subsf3>
    1478:	9b 01       	movw	r18, r22
    147a:	ac 01       	movw	r20, r24
    147c:	6e ea       	ldi	r22, 0xAE	; 174
    147e:	77 e4       	ldi	r23, 0x47	; 71
    1480:	81 e8       	ldi	r24, 0x81	; 129
    1482:	9f e3       	ldi	r25, 0x3F	; 63
    1484:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <pow>
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 ec       	ldi	r19, 0xC0	; 192
    148c:	43 e2       	ldi	r20, 0x23	; 35
    148e:	55 e4       	ldi	r21, 0x45	; 69
    1490:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3>
    1494:	6d 83       	std	Y+5, r22	; 0x05
    1496:	7e 83       	std	Y+6, r23	; 0x06
    1498:	8f 83       	std	Y+7, r24	; 0x07
    149a:	98 87       	std	Y+8, r25	; 0x08
    149c:	6e 2d       	mov	r22, r14
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__floatunsisf>
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	40 e8       	ldi	r20, 0x80	; 128
    14ae:	5f e3       	ldi	r21, 0x3F	; 63
    14b0:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__subsf3>
    14b4:	9b 01       	movw	r18, r22
    14b6:	ac 01       	movw	r20, r24
    14b8:	6e ea       	ldi	r22, 0xAE	; 174
    14ba:	77 e4       	ldi	r23, 0x47	; 71
    14bc:	81 e8       	ldi	r24, 0x81	; 129
    14be:	9f e3       	ldi	r25, 0x3F	; 63
    14c0:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <pow>
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 ec       	ldi	r19, 0xC0	; 192
    14c8:	43 e2       	ldi	r20, 0x23	; 35
    14ca:	55 e4       	ldi	r21, 0x45	; 69
    14cc:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3>
    14d0:	69 87       	std	Y+9, r22	; 0x09
    14d2:	7a 87       	std	Y+10, r23	; 0x0a
    14d4:	8b 87       	std	Y+11, r24	; 0x0b
    14d6:	9c 87       	std	Y+12, r25	; 0x0c
    14d8:	6f 2d       	mov	r22, r15
    14da:	70 e0       	ldi	r23, 0x00	; 0
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__floatunsisf>
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e8       	ldi	r20, 0x80	; 128
    14ea:	5f e3       	ldi	r21, 0x3F	; 63
    14ec:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__subsf3>
    14f0:	9b 01       	movw	r18, r22
    14f2:	ac 01       	movw	r20, r24
    14f4:	6e ea       	ldi	r22, 0xAE	; 174
    14f6:	77 e4       	ldi	r23, 0x47	; 71
    14f8:	81 e8       	ldi	r24, 0x81	; 129
    14fa:	9f e3       	ldi	r25, 0x3F	; 63
    14fc:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <pow>
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 ec       	ldi	r19, 0xC0	; 192
    1504:	43 e2       	ldi	r20, 0x23	; 35
    1506:	55 e4       	ldi	r21, 0x45	; 69
    1508:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3>
    150c:	6d 87       	std	Y+13, r22	; 0x0d
    150e:	7e 87       	std	Y+14, r23	; 0x0e
    1510:	8f 87       	std	Y+15, r24	; 0x0f
    1512:	98 8b       	std	Y+16, r25	; 0x10
    1514:	60 2f       	mov	r22, r16
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__floatunsisf>
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	40 e8       	ldi	r20, 0x80	; 128
    1526:	5f e3       	ldi	r21, 0x3F	; 63
    1528:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__subsf3>
    152c:	9b 01       	movw	r18, r22
    152e:	ac 01       	movw	r20, r24
    1530:	6e ea       	ldi	r22, 0xAE	; 174
    1532:	77 e4       	ldi	r23, 0x47	; 71
    1534:	81 e8       	ldi	r24, 0x81	; 129
    1536:	9f e3       	ldi	r25, 0x3F	; 63
    1538:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <pow>
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 ec       	ldi	r19, 0xC0	; 192
    1540:	43 e2       	ldi	r20, 0x23	; 35
    1542:	55 e4       	ldi	r21, 0x45	; 69
    1544:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3>
    1548:	69 8b       	std	Y+17, r22	; 0x11
    154a:	7a 8b       	std	Y+18, r23	; 0x12
    154c:	8b 8b       	std	Y+19, r24	; 0x13
    154e:	9c 8b       	std	Y+20, r25	; 0x14
    1550:	61 2f       	mov	r22, r17
    1552:	70 e0       	ldi	r23, 0x00	; 0
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__floatunsisf>
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	40 e8       	ldi	r20, 0x80	; 128
    1562:	5f e3       	ldi	r21, 0x3F	; 63
    1564:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__subsf3>
    1568:	9b 01       	movw	r18, r22
    156a:	ac 01       	movw	r20, r24
    156c:	6e ea       	ldi	r22, 0xAE	; 174
    156e:	77 e4       	ldi	r23, 0x47	; 71
    1570:	81 e8       	ldi	r24, 0x81	; 129
    1572:	9f e3       	ldi	r25, 0x3F	; 63
    1574:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <pow>
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 ec       	ldi	r19, 0xC0	; 192
    157c:	43 e2       	ldi	r20, 0x23	; 35
    157e:	55 e4       	ldi	r21, 0x45	; 69
    1580:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3>
    1584:	6d 8b       	std	Y+21, r22	; 0x15
    1586:	7e 8b       	std	Y+22, r23	; 0x16
    1588:	8f 8b       	std	Y+23, r24	; 0x17
    158a:	98 8f       	std	Y+24, r25	; 0x18
    158c:	ce 01       	movw	r24, r28
    158e:	01 96       	adiw	r24, 0x01	; 1
    1590:	7c 01       	movw	r14, r24
    1592:	08 2d       	mov	r16, r8
    1594:	19 2d       	mov	r17, r9
    1596:	81 2c       	mov	r8, r1
    1598:	91 2c       	mov	r9, r1
    159a:	f5 01       	movw	r30, r10
    159c:	81 91       	ld	r24, Z+
    159e:	91 91       	ld	r25, Z+
    15a0:	a1 91       	ld	r26, Z+
    15a2:	b1 91       	ld	r27, Z+
    15a4:	5f 01       	movw	r10, r30
    15a6:	f3 01       	movw	r30, r6
    15a8:	21 91       	ld	r18, Z+
    15aa:	31 91       	ld	r19, Z+
    15ac:	41 91       	ld	r20, Z+
    15ae:	51 91       	ld	r21, Z+
    15b0:	3f 01       	movw	r6, r30
    15b2:	bc 01       	movw	r22, r24
    15b4:	cd 01       	movw	r24, r26
    15b6:	62 1b       	sub	r22, r18
    15b8:	73 0b       	sbc	r23, r19
    15ba:	84 0b       	sbc	r24, r20
    15bc:	95 0b       	sbc	r25, r21
    15be:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__floatsisf>
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	48 ec       	ldi	r20, 0xC8	; 200
    15c8:	52 e4       	ldi	r21, 0x42	; 66
    15ca:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3>
    15ce:	d7 01       	movw	r26, r14
    15d0:	2d 91       	ld	r18, X+
    15d2:	3d 91       	ld	r19, X+
    15d4:	4d 91       	ld	r20, X+
    15d6:	5c 91       	ld	r21, X
    15d8:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__divsf3>
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	48 ec       	ldi	r20, 0xC8	; 200
    15e2:	52 e4       	ldi	r21, 0x42	; 66
    15e4:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__subsf3>
    15e8:	f8 01       	movw	r30, r16
    15ea:	60 83       	st	Z, r22
    15ec:	71 83       	std	Z+1, r23	; 0x01
    15ee:	82 83       	std	Z+2, r24	; 0x02
    15f0:	93 83       	std	Z+3, r25	; 0x03
    15f2:	f1 01       	movw	r30, r2
    15f4:	81 91       	ld	r24, Z+
    15f6:	91 91       	ld	r25, Z+
    15f8:	a1 91       	ld	r26, Z+
    15fa:	b1 91       	ld	r27, Z+
    15fc:	1f 01       	movw	r2, r30
    15fe:	f6 01       	movw	r30, r12
    1600:	21 91       	ld	r18, Z+
    1602:	31 91       	ld	r19, Z+
    1604:	41 91       	ld	r20, Z+
    1606:	51 91       	ld	r21, Z+
    1608:	6f 01       	movw	r12, r30
    160a:	bc 01       	movw	r22, r24
    160c:	cd 01       	movw	r24, r26
    160e:	62 1b       	sub	r22, r18
    1610:	73 0b       	sbc	r23, r19
    1612:	84 0b       	sbc	r24, r20
    1614:	95 0b       	sbc	r25, r21
    1616:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__floatsisf>
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	48 ec       	ldi	r20, 0xC8	; 200
    1620:	52 e4       	ldi	r21, 0x42	; 66
    1622:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3>
    1626:	d7 01       	movw	r26, r14
    1628:	1c 96       	adiw	r26, 0x0c	; 12
    162a:	2d 91       	ld	r18, X+
    162c:	3d 91       	ld	r19, X+
    162e:	4d 91       	ld	r20, X+
    1630:	5c 91       	ld	r21, X
    1632:	1f 97       	sbiw	r26, 0x0f	; 15
    1634:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__divsf3>
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	48 ec       	ldi	r20, 0xC8	; 200
    163e:	52 e4       	ldi	r21, 0x42	; 66
    1640:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__subsf3>
    1644:	f8 01       	movw	r30, r16
    1646:	64 87       	std	Z+12, r22	; 0x0c
    1648:	75 87       	std	Z+13, r23	; 0x0d
    164a:	86 87       	std	Z+14, r24	; 0x0e
    164c:	97 87       	std	Z+15, r25	; 0x0f
    164e:	ff ef       	ldi	r31, 0xFF	; 255
    1650:	8f 1a       	sub	r8, r31
    1652:	9f 0a       	sbc	r9, r31
    1654:	84 e0       	ldi	r24, 0x04	; 4
    1656:	e8 0e       	add	r14, r24
    1658:	f1 1c       	adc	r15, r1
    165a:	0c 5f       	subi	r16, 0xFC	; 252
    165c:	1f 4f       	sbci	r17, 0xFF	; 255
    165e:	93 e0       	ldi	r25, 0x03	; 3
    1660:	89 16       	cp	r8, r25
    1662:	91 04       	cpc	r9, r1
    1664:	09 f0       	breq	.+2      	; 0x1668 <_Z15MPU9250SelfTestPf+0x718>
    1666:	99 cf       	rjmp	.-206    	; 0x159a <_Z15MPU9250SelfTestPf+0x64a>
    1668:	c2 5b       	subi	r28, 0xB2	; 178
    166a:	df 4f       	sbci	r29, 0xFF	; 255
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	cd bf       	out	0x3d, r28	; 61
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	1f 91       	pop	r17
    167c:	0f 91       	pop	r16
    167e:	ff 90       	pop	r15
    1680:	ef 90       	pop	r14
    1682:	df 90       	pop	r13
    1684:	cf 90       	pop	r12
    1686:	bf 90       	pop	r11
    1688:	af 90       	pop	r10
    168a:	9f 90       	pop	r9
    168c:	8f 90       	pop	r8
    168e:	7f 90       	pop	r7
    1690:	6f 90       	pop	r6
    1692:	5f 90       	pop	r5
    1694:	4f 90       	pop	r4
    1696:	3f 90       	pop	r3
    1698:	2f 90       	pop	r2
    169a:	08 95       	ret

0000169c <_Z10initAK8963Pf6Mscale>:
	gyro_axis_cal[2] /= 2000;                                                 //Divide the pitch total by 2000.
	gyro_axis_cal[3] /= 2000;                                                 //Divide the yaw total by 2000.
}

void initAK8963(float * destination, Mscale mscale)
{
    169c:	ff 92       	push	r15
    169e:	0f 93       	push	r16
    16a0:	1f 93       	push	r17
    16a2:	cf 93       	push	r28
    16a4:	df 93       	push	r29
    16a6:	00 d0       	rcall	.+0      	; 0x16a8 <_Z10initAK8963Pf6Mscale+0xc>
    16a8:	1f 92       	push	r1
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	8c 01       	movw	r16, r24
    16b0:	f6 2e       	mov	r15, r22
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
    16b2:	40 e0       	ldi	r20, 0x00	; 0
    16b4:	6a e0       	ldi	r22, 0x0A	; 10
    16b6:	8c e0       	ldi	r24, 0x0C	; 12
    16b8:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_Z9writeBytehhh>
	delay(10);
    16bc:	6a e0       	ldi	r22, 0x0A	; 10
    16be:	70 e0       	ldi	r23, 0x00	; 0
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <delay>
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
    16c8:	4f e0       	ldi	r20, 0x0F	; 15
    16ca:	6a e0       	ldi	r22, 0x0A	; 10
    16cc:	8c e0       	ldi	r24, 0x0C	; 12
    16ce:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_Z9writeBytehhh>
	delay(10);
    16d2:	6a e0       	ldi	r22, 0x0A	; 10
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <delay>
	readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
    16de:	9e 01       	movw	r18, r28
    16e0:	2f 5f       	subi	r18, 0xFF	; 255
    16e2:	3f 4f       	sbci	r19, 0xFF	; 255
    16e4:	43 e0       	ldi	r20, 0x03	; 3
    16e6:	60 e1       	ldi	r22, 0x10	; 16
    16e8:	8c e0       	ldi	r24, 0x0C	; 12
    16ea:	0e 94 6f 07 	call	0xede	; 0xede <_Z9readByteshhhPh>
	destination[0] =  (float)(rawData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
    16ee:	69 81       	ldd	r22, Y+1	; 0x01
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	60 58       	subi	r22, 0x80	; 128
    16f4:	71 09       	sbc	r23, r1
    16f6:	07 2e       	mov	r0, r23
    16f8:	00 0c       	add	r0, r0
    16fa:	88 0b       	sbc	r24, r24
    16fc:	99 0b       	sbc	r25, r25
    16fe:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__floatsisf>
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	40 e8       	ldi	r20, 0x80	; 128
    1708:	5b e3       	ldi	r21, 0x3B	; 59
    170a:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3>
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e8       	ldi	r20, 0x80	; 128
    1714:	5f e3       	ldi	r21, 0x3F	; 63
    1716:	0e 94 ef 0b 	call	0x17de	; 0x17de <__addsf3>
    171a:	f8 01       	movw	r30, r16
    171c:	60 83       	st	Z, r22
    171e:	71 83       	std	Z+1, r23	; 0x01
    1720:	82 83       	std	Z+2, r24	; 0x02
    1722:	93 83       	std	Z+3, r25	; 0x03
	destination[1] =  (float)(rawData[1] - 128)/256. + 1.;
    1724:	6a 81       	ldd	r22, Y+2	; 0x02
    1726:	70 e0       	ldi	r23, 0x00	; 0
    1728:	60 58       	subi	r22, 0x80	; 128
    172a:	71 09       	sbc	r23, r1
    172c:	07 2e       	mov	r0, r23
    172e:	00 0c       	add	r0, r0
    1730:	88 0b       	sbc	r24, r24
    1732:	99 0b       	sbc	r25, r25
    1734:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__floatsisf>
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	40 e8       	ldi	r20, 0x80	; 128
    173e:	5b e3       	ldi	r21, 0x3B	; 59
    1740:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3>
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	40 e8       	ldi	r20, 0x80	; 128
    174a:	5f e3       	ldi	r21, 0x3F	; 63
    174c:	0e 94 ef 0b 	call	0x17de	; 0x17de <__addsf3>
    1750:	f8 01       	movw	r30, r16
    1752:	64 83       	std	Z+4, r22	; 0x04
    1754:	75 83       	std	Z+5, r23	; 0x05
    1756:	86 83       	std	Z+6, r24	; 0x06
    1758:	97 83       	std	Z+7, r25	; 0x07
	destination[2] =  (float)(rawData[2] - 128)/256. + 1.;
    175a:	2b 81       	ldd	r18, Y+3	; 0x03
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	b9 01       	movw	r22, r18
    1760:	60 58       	subi	r22, 0x80	; 128
    1762:	71 09       	sbc	r23, r1
    1764:	07 2e       	mov	r0, r23
    1766:	00 0c       	add	r0, r0
    1768:	88 0b       	sbc	r24, r24
    176a:	99 0b       	sbc	r25, r25
    176c:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__floatsisf>
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 e8       	ldi	r20, 0x80	; 128
    1776:	5b e3       	ldi	r21, 0x3B	; 59
    1778:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3>
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	40 e8       	ldi	r20, 0x80	; 128
    1782:	5f e3       	ldi	r21, 0x3F	; 63
    1784:	0e 94 ef 0b 	call	0x17de	; 0x17de <__addsf3>
    1788:	f8 01       	movw	r30, r16
    178a:	60 87       	std	Z+8, r22	; 0x08
    178c:	71 87       	std	Z+9, r23	; 0x09
    178e:	82 87       	std	Z+10, r24	; 0x0a
    1790:	93 87       	std	Z+11, r25	; 0x0b
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
    1792:	40 e0       	ldi	r20, 0x00	; 0
    1794:	6a e0       	ldi	r22, 0x0A	; 10
    1796:	8c e0       	ldi	r24, 0x0C	; 12
    1798:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_Z9writeBytehhh>
	delay(10);
    179c:	6a e0       	ldi	r22, 0x0A	; 10
    179e:	70 e0       	ldi	r23, 0x00	; 0
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS, AK8963_CNTL, mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
    17a8:	f0 e1       	ldi	r31, 0x10	; 16
    17aa:	ff 9e       	mul	r15, r31
    17ac:	a0 01       	movw	r20, r0
    17ae:	11 24       	eor	r1, r1
    17b0:	f0 90 00 01 	lds	r15, 0x0100	; 0x800100 <Mmode>
    17b4:	4f 29       	or	r20, r15
    17b6:	6a e0       	ldi	r22, 0x0A	; 10
    17b8:	8c e0       	ldi	r24, 0x0C	; 12
    17ba:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_Z9writeBytehhh>
	delay(10);
    17be:	6a e0       	ldi	r22, 0x0A	; 10
    17c0:	70 e0       	ldi	r23, 0x00	; 0
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <delay>
}
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	1f 91       	pop	r17
    17d6:	0f 91       	pop	r16
    17d8:	ff 90       	pop	r15
    17da:	08 95       	ret

000017dc <__subsf3>:
    17dc:	50 58       	subi	r21, 0x80	; 128

000017de <__addsf3>:
    17de:	bb 27       	eor	r27, r27
    17e0:	aa 27       	eor	r26, r26
    17e2:	0e 94 06 0c 	call	0x180c	; 0x180c <__addsf3x>
    17e6:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <__fp_round>
    17ea:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__fp_pscA>
    17ee:	38 f0       	brcs	.+14     	; 0x17fe <__addsf3+0x20>
    17f0:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__fp_pscB>
    17f4:	20 f0       	brcs	.+8      	; 0x17fe <__addsf3+0x20>
    17f6:	39 f4       	brne	.+14     	; 0x1806 <__addsf3+0x28>
    17f8:	9f 3f       	cpi	r25, 0xFF	; 255
    17fa:	19 f4       	brne	.+6      	; 0x1802 <__addsf3+0x24>
    17fc:	26 f4       	brtc	.+8      	; 0x1806 <__addsf3+0x28>
    17fe:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__fp_nan>
    1802:	0e f4       	brtc	.+2      	; 0x1806 <__addsf3+0x28>
    1804:	e0 95       	com	r30
    1806:	e7 fb       	bst	r30, 7
    1808:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__fp_inf>

0000180c <__addsf3x>:
    180c:	e9 2f       	mov	r30, r25
    180e:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__fp_split3>
    1812:	58 f3       	brcs	.-42     	; 0x17ea <__addsf3+0xc>
    1814:	ba 17       	cp	r27, r26
    1816:	62 07       	cpc	r22, r18
    1818:	73 07       	cpc	r23, r19
    181a:	84 07       	cpc	r24, r20
    181c:	95 07       	cpc	r25, r21
    181e:	20 f0       	brcs	.+8      	; 0x1828 <__addsf3x+0x1c>
    1820:	79 f4       	brne	.+30     	; 0x1840 <__addsf3x+0x34>
    1822:	a6 f5       	brtc	.+104    	; 0x188c <__addsf3x+0x80>
    1824:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <__fp_zero>
    1828:	0e f4       	brtc	.+2      	; 0x182c <__addsf3x+0x20>
    182a:	e0 95       	com	r30
    182c:	0b 2e       	mov	r0, r27
    182e:	ba 2f       	mov	r27, r26
    1830:	a0 2d       	mov	r26, r0
    1832:	0b 01       	movw	r0, r22
    1834:	b9 01       	movw	r22, r18
    1836:	90 01       	movw	r18, r0
    1838:	0c 01       	movw	r0, r24
    183a:	ca 01       	movw	r24, r20
    183c:	a0 01       	movw	r20, r0
    183e:	11 24       	eor	r1, r1
    1840:	ff 27       	eor	r31, r31
    1842:	59 1b       	sub	r21, r25
    1844:	99 f0       	breq	.+38     	; 0x186c <__addsf3x+0x60>
    1846:	59 3f       	cpi	r21, 0xF9	; 249
    1848:	50 f4       	brcc	.+20     	; 0x185e <__addsf3x+0x52>
    184a:	50 3e       	cpi	r21, 0xE0	; 224
    184c:	68 f1       	brcs	.+90     	; 0x18a8 <__addsf3x+0x9c>
    184e:	1a 16       	cp	r1, r26
    1850:	f0 40       	sbci	r31, 0x00	; 0
    1852:	a2 2f       	mov	r26, r18
    1854:	23 2f       	mov	r18, r19
    1856:	34 2f       	mov	r19, r20
    1858:	44 27       	eor	r20, r20
    185a:	58 5f       	subi	r21, 0xF8	; 248
    185c:	f3 cf       	rjmp	.-26     	; 0x1844 <__addsf3x+0x38>
    185e:	46 95       	lsr	r20
    1860:	37 95       	ror	r19
    1862:	27 95       	ror	r18
    1864:	a7 95       	ror	r26
    1866:	f0 40       	sbci	r31, 0x00	; 0
    1868:	53 95       	inc	r21
    186a:	c9 f7       	brne	.-14     	; 0x185e <__addsf3x+0x52>
    186c:	7e f4       	brtc	.+30     	; 0x188c <__addsf3x+0x80>
    186e:	1f 16       	cp	r1, r31
    1870:	ba 0b       	sbc	r27, r26
    1872:	62 0b       	sbc	r22, r18
    1874:	73 0b       	sbc	r23, r19
    1876:	84 0b       	sbc	r24, r20
    1878:	ba f0       	brmi	.+46     	; 0x18a8 <__addsf3x+0x9c>
    187a:	91 50       	subi	r25, 0x01	; 1
    187c:	a1 f0       	breq	.+40     	; 0x18a6 <__addsf3x+0x9a>
    187e:	ff 0f       	add	r31, r31
    1880:	bb 1f       	adc	r27, r27
    1882:	66 1f       	adc	r22, r22
    1884:	77 1f       	adc	r23, r23
    1886:	88 1f       	adc	r24, r24
    1888:	c2 f7       	brpl	.-16     	; 0x187a <__addsf3x+0x6e>
    188a:	0e c0       	rjmp	.+28     	; 0x18a8 <__addsf3x+0x9c>
    188c:	ba 0f       	add	r27, r26
    188e:	62 1f       	adc	r22, r18
    1890:	73 1f       	adc	r23, r19
    1892:	84 1f       	adc	r24, r20
    1894:	48 f4       	brcc	.+18     	; 0x18a8 <__addsf3x+0x9c>
    1896:	87 95       	ror	r24
    1898:	77 95       	ror	r23
    189a:	67 95       	ror	r22
    189c:	b7 95       	ror	r27
    189e:	f7 95       	ror	r31
    18a0:	9e 3f       	cpi	r25, 0xFE	; 254
    18a2:	08 f0       	brcs	.+2      	; 0x18a6 <__addsf3x+0x9a>
    18a4:	b0 cf       	rjmp	.-160    	; 0x1806 <__addsf3+0x28>
    18a6:	93 95       	inc	r25
    18a8:	88 0f       	add	r24, r24
    18aa:	08 f0       	brcs	.+2      	; 0x18ae <__addsf3x+0xa2>
    18ac:	99 27       	eor	r25, r25
    18ae:	ee 0f       	add	r30, r30
    18b0:	97 95       	ror	r25
    18b2:	87 95       	ror	r24
    18b4:	08 95       	ret

000018b6 <__divsf3>:
    18b6:	0e 94 6f 0c 	call	0x18de	; 0x18de <__divsf3x>
    18ba:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <__fp_round>
    18be:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__fp_pscB>
    18c2:	58 f0       	brcs	.+22     	; 0x18da <__divsf3+0x24>
    18c4:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__fp_pscA>
    18c8:	40 f0       	brcs	.+16     	; 0x18da <__divsf3+0x24>
    18ca:	29 f4       	brne	.+10     	; 0x18d6 <__divsf3+0x20>
    18cc:	5f 3f       	cpi	r21, 0xFF	; 255
    18ce:	29 f0       	breq	.+10     	; 0x18da <__divsf3+0x24>
    18d0:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__fp_inf>
    18d4:	51 11       	cpse	r21, r1
    18d6:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__fp_szero>
    18da:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__fp_nan>

000018de <__divsf3x>:
    18de:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__fp_split3>
    18e2:	68 f3       	brcs	.-38     	; 0x18be <__divsf3+0x8>

000018e4 <__divsf3_pse>:
    18e4:	99 23       	and	r25, r25
    18e6:	b1 f3       	breq	.-20     	; 0x18d4 <__divsf3+0x1e>
    18e8:	55 23       	and	r21, r21
    18ea:	91 f3       	breq	.-28     	; 0x18d0 <__divsf3+0x1a>
    18ec:	95 1b       	sub	r25, r21
    18ee:	55 0b       	sbc	r21, r21
    18f0:	bb 27       	eor	r27, r27
    18f2:	aa 27       	eor	r26, r26
    18f4:	62 17       	cp	r22, r18
    18f6:	73 07       	cpc	r23, r19
    18f8:	84 07       	cpc	r24, r20
    18fa:	38 f0       	brcs	.+14     	; 0x190a <__divsf3_pse+0x26>
    18fc:	9f 5f       	subi	r25, 0xFF	; 255
    18fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1900:	22 0f       	add	r18, r18
    1902:	33 1f       	adc	r19, r19
    1904:	44 1f       	adc	r20, r20
    1906:	aa 1f       	adc	r26, r26
    1908:	a9 f3       	breq	.-22     	; 0x18f4 <__divsf3_pse+0x10>
    190a:	35 d0       	rcall	.+106    	; 0x1976 <__divsf3_pse+0x92>
    190c:	0e 2e       	mov	r0, r30
    190e:	3a f0       	brmi	.+14     	; 0x191e <__divsf3_pse+0x3a>
    1910:	e0 e8       	ldi	r30, 0x80	; 128
    1912:	32 d0       	rcall	.+100    	; 0x1978 <__divsf3_pse+0x94>
    1914:	91 50       	subi	r25, 0x01	; 1
    1916:	50 40       	sbci	r21, 0x00	; 0
    1918:	e6 95       	lsr	r30
    191a:	00 1c       	adc	r0, r0
    191c:	ca f7       	brpl	.-14     	; 0x1910 <__divsf3_pse+0x2c>
    191e:	2b d0       	rcall	.+86     	; 0x1976 <__divsf3_pse+0x92>
    1920:	fe 2f       	mov	r31, r30
    1922:	29 d0       	rcall	.+82     	; 0x1976 <__divsf3_pse+0x92>
    1924:	66 0f       	add	r22, r22
    1926:	77 1f       	adc	r23, r23
    1928:	88 1f       	adc	r24, r24
    192a:	bb 1f       	adc	r27, r27
    192c:	26 17       	cp	r18, r22
    192e:	37 07       	cpc	r19, r23
    1930:	48 07       	cpc	r20, r24
    1932:	ab 07       	cpc	r26, r27
    1934:	b0 e8       	ldi	r27, 0x80	; 128
    1936:	09 f0       	breq	.+2      	; 0x193a <__divsf3_pse+0x56>
    1938:	bb 0b       	sbc	r27, r27
    193a:	80 2d       	mov	r24, r0
    193c:	bf 01       	movw	r22, r30
    193e:	ff 27       	eor	r31, r31
    1940:	93 58       	subi	r25, 0x83	; 131
    1942:	5f 4f       	sbci	r21, 0xFF	; 255
    1944:	3a f0       	brmi	.+14     	; 0x1954 <__divsf3_pse+0x70>
    1946:	9e 3f       	cpi	r25, 0xFE	; 254
    1948:	51 05       	cpc	r21, r1
    194a:	78 f0       	brcs	.+30     	; 0x196a <__divsf3_pse+0x86>
    194c:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__fp_inf>
    1950:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__fp_szero>
    1954:	5f 3f       	cpi	r21, 0xFF	; 255
    1956:	e4 f3       	brlt	.-8      	; 0x1950 <__divsf3_pse+0x6c>
    1958:	98 3e       	cpi	r25, 0xE8	; 232
    195a:	d4 f3       	brlt	.-12     	; 0x1950 <__divsf3_pse+0x6c>
    195c:	86 95       	lsr	r24
    195e:	77 95       	ror	r23
    1960:	67 95       	ror	r22
    1962:	b7 95       	ror	r27
    1964:	f7 95       	ror	r31
    1966:	9f 5f       	subi	r25, 0xFF	; 255
    1968:	c9 f7       	brne	.-14     	; 0x195c <__divsf3_pse+0x78>
    196a:	88 0f       	add	r24, r24
    196c:	91 1d       	adc	r25, r1
    196e:	96 95       	lsr	r25
    1970:	87 95       	ror	r24
    1972:	97 f9       	bld	r25, 7
    1974:	08 95       	ret
    1976:	e1 e0       	ldi	r30, 0x01	; 1
    1978:	66 0f       	add	r22, r22
    197a:	77 1f       	adc	r23, r23
    197c:	88 1f       	adc	r24, r24
    197e:	bb 1f       	adc	r27, r27
    1980:	62 17       	cp	r22, r18
    1982:	73 07       	cpc	r23, r19
    1984:	84 07       	cpc	r24, r20
    1986:	ba 07       	cpc	r27, r26
    1988:	20 f0       	brcs	.+8      	; 0x1992 <__divsf3_pse+0xae>
    198a:	62 1b       	sub	r22, r18
    198c:	73 0b       	sbc	r23, r19
    198e:	84 0b       	sbc	r24, r20
    1990:	ba 0b       	sbc	r27, r26
    1992:	ee 1f       	adc	r30, r30
    1994:	88 f7       	brcc	.-30     	; 0x1978 <__divsf3_pse+0x94>
    1996:	e0 95       	com	r30
    1998:	08 95       	ret

0000199a <__fixsfsi>:
    199a:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__fixunssfsi>
    199e:	68 94       	set
    19a0:	b1 11       	cpse	r27, r1
    19a2:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__fp_szero>
    19a6:	08 95       	ret

000019a8 <__fixunssfsi>:
    19a8:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <__fp_splitA>
    19ac:	88 f0       	brcs	.+34     	; 0x19d0 <__fixunssfsi+0x28>
    19ae:	9f 57       	subi	r25, 0x7F	; 127
    19b0:	98 f0       	brcs	.+38     	; 0x19d8 <__fixunssfsi+0x30>
    19b2:	b9 2f       	mov	r27, r25
    19b4:	99 27       	eor	r25, r25
    19b6:	b7 51       	subi	r27, 0x17	; 23
    19b8:	b0 f0       	brcs	.+44     	; 0x19e6 <__fixunssfsi+0x3e>
    19ba:	e1 f0       	breq	.+56     	; 0x19f4 <__fixunssfsi+0x4c>
    19bc:	66 0f       	add	r22, r22
    19be:	77 1f       	adc	r23, r23
    19c0:	88 1f       	adc	r24, r24
    19c2:	99 1f       	adc	r25, r25
    19c4:	1a f0       	brmi	.+6      	; 0x19cc <__fixunssfsi+0x24>
    19c6:	ba 95       	dec	r27
    19c8:	c9 f7       	brne	.-14     	; 0x19bc <__fixunssfsi+0x14>
    19ca:	14 c0       	rjmp	.+40     	; 0x19f4 <__fixunssfsi+0x4c>
    19cc:	b1 30       	cpi	r27, 0x01	; 1
    19ce:	91 f0       	breq	.+36     	; 0x19f4 <__fixunssfsi+0x4c>
    19d0:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__fp_zero>
    19d4:	b1 e0       	ldi	r27, 0x01	; 1
    19d6:	08 95       	ret
    19d8:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <__fp_zero>
    19dc:	67 2f       	mov	r22, r23
    19de:	78 2f       	mov	r23, r24
    19e0:	88 27       	eor	r24, r24
    19e2:	b8 5f       	subi	r27, 0xF8	; 248
    19e4:	39 f0       	breq	.+14     	; 0x19f4 <__fixunssfsi+0x4c>
    19e6:	b9 3f       	cpi	r27, 0xF9	; 249
    19e8:	cc f3       	brlt	.-14     	; 0x19dc <__fixunssfsi+0x34>
    19ea:	86 95       	lsr	r24
    19ec:	77 95       	ror	r23
    19ee:	67 95       	ror	r22
    19f0:	b3 95       	inc	r27
    19f2:	d9 f7       	brne	.-10     	; 0x19ea <__fixunssfsi+0x42>
    19f4:	3e f4       	brtc	.+14     	; 0x1a04 <__fixunssfsi+0x5c>
    19f6:	90 95       	com	r25
    19f8:	80 95       	com	r24
    19fa:	70 95       	com	r23
    19fc:	61 95       	neg	r22
    19fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1a00:	8f 4f       	sbci	r24, 0xFF	; 255
    1a02:	9f 4f       	sbci	r25, 0xFF	; 255
    1a04:	08 95       	ret

00001a06 <__floatunsisf>:
    1a06:	e8 94       	clt
    1a08:	09 c0       	rjmp	.+18     	; 0x1a1c <__floatsisf+0x12>

00001a0a <__floatsisf>:
    1a0a:	97 fb       	bst	r25, 7
    1a0c:	3e f4       	brtc	.+14     	; 0x1a1c <__floatsisf+0x12>
    1a0e:	90 95       	com	r25
    1a10:	80 95       	com	r24
    1a12:	70 95       	com	r23
    1a14:	61 95       	neg	r22
    1a16:	7f 4f       	sbci	r23, 0xFF	; 255
    1a18:	8f 4f       	sbci	r24, 0xFF	; 255
    1a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1c:	99 23       	and	r25, r25
    1a1e:	a9 f0       	breq	.+42     	; 0x1a4a <__floatsisf+0x40>
    1a20:	f9 2f       	mov	r31, r25
    1a22:	96 e9       	ldi	r25, 0x96	; 150
    1a24:	bb 27       	eor	r27, r27
    1a26:	93 95       	inc	r25
    1a28:	f6 95       	lsr	r31
    1a2a:	87 95       	ror	r24
    1a2c:	77 95       	ror	r23
    1a2e:	67 95       	ror	r22
    1a30:	b7 95       	ror	r27
    1a32:	f1 11       	cpse	r31, r1
    1a34:	f8 cf       	rjmp	.-16     	; 0x1a26 <__floatsisf+0x1c>
    1a36:	fa f4       	brpl	.+62     	; 0x1a76 <__floatsisf+0x6c>
    1a38:	bb 0f       	add	r27, r27
    1a3a:	11 f4       	brne	.+4      	; 0x1a40 <__floatsisf+0x36>
    1a3c:	60 ff       	sbrs	r22, 0
    1a3e:	1b c0       	rjmp	.+54     	; 0x1a76 <__floatsisf+0x6c>
    1a40:	6f 5f       	subi	r22, 0xFF	; 255
    1a42:	7f 4f       	sbci	r23, 0xFF	; 255
    1a44:	8f 4f       	sbci	r24, 0xFF	; 255
    1a46:	9f 4f       	sbci	r25, 0xFF	; 255
    1a48:	16 c0       	rjmp	.+44     	; 0x1a76 <__floatsisf+0x6c>
    1a4a:	88 23       	and	r24, r24
    1a4c:	11 f0       	breq	.+4      	; 0x1a52 <__floatsisf+0x48>
    1a4e:	96 e9       	ldi	r25, 0x96	; 150
    1a50:	11 c0       	rjmp	.+34     	; 0x1a74 <__floatsisf+0x6a>
    1a52:	77 23       	and	r23, r23
    1a54:	21 f0       	breq	.+8      	; 0x1a5e <__floatsisf+0x54>
    1a56:	9e e8       	ldi	r25, 0x8E	; 142
    1a58:	87 2f       	mov	r24, r23
    1a5a:	76 2f       	mov	r23, r22
    1a5c:	05 c0       	rjmp	.+10     	; 0x1a68 <__floatsisf+0x5e>
    1a5e:	66 23       	and	r22, r22
    1a60:	71 f0       	breq	.+28     	; 0x1a7e <__floatsisf+0x74>
    1a62:	96 e8       	ldi	r25, 0x86	; 134
    1a64:	86 2f       	mov	r24, r22
    1a66:	70 e0       	ldi	r23, 0x00	; 0
    1a68:	60 e0       	ldi	r22, 0x00	; 0
    1a6a:	2a f0       	brmi	.+10     	; 0x1a76 <__floatsisf+0x6c>
    1a6c:	9a 95       	dec	r25
    1a6e:	66 0f       	add	r22, r22
    1a70:	77 1f       	adc	r23, r23
    1a72:	88 1f       	adc	r24, r24
    1a74:	da f7       	brpl	.-10     	; 0x1a6c <__floatsisf+0x62>
    1a76:	88 0f       	add	r24, r24
    1a78:	96 95       	lsr	r25
    1a7a:	87 95       	ror	r24
    1a7c:	97 f9       	bld	r25, 7
    1a7e:	08 95       	ret

00001a80 <__fp_inf>:
    1a80:	97 f9       	bld	r25, 7
    1a82:	9f 67       	ori	r25, 0x7F	; 127
    1a84:	80 e8       	ldi	r24, 0x80	; 128
    1a86:	70 e0       	ldi	r23, 0x00	; 0
    1a88:	60 e0       	ldi	r22, 0x00	; 0
    1a8a:	08 95       	ret

00001a8c <__fp_nan>:
    1a8c:	9f ef       	ldi	r25, 0xFF	; 255
    1a8e:	80 ec       	ldi	r24, 0xC0	; 192
    1a90:	08 95       	ret

00001a92 <__fp_pscA>:
    1a92:	00 24       	eor	r0, r0
    1a94:	0a 94       	dec	r0
    1a96:	16 16       	cp	r1, r22
    1a98:	17 06       	cpc	r1, r23
    1a9a:	18 06       	cpc	r1, r24
    1a9c:	09 06       	cpc	r0, r25
    1a9e:	08 95       	ret

00001aa0 <__fp_pscB>:
    1aa0:	00 24       	eor	r0, r0
    1aa2:	0a 94       	dec	r0
    1aa4:	12 16       	cp	r1, r18
    1aa6:	13 06       	cpc	r1, r19
    1aa8:	14 06       	cpc	r1, r20
    1aaa:	05 06       	cpc	r0, r21
    1aac:	08 95       	ret

00001aae <__fp_round>:
    1aae:	09 2e       	mov	r0, r25
    1ab0:	03 94       	inc	r0
    1ab2:	00 0c       	add	r0, r0
    1ab4:	11 f4       	brne	.+4      	; 0x1aba <__fp_round+0xc>
    1ab6:	88 23       	and	r24, r24
    1ab8:	52 f0       	brmi	.+20     	; 0x1ace <__fp_round+0x20>
    1aba:	bb 0f       	add	r27, r27
    1abc:	40 f4       	brcc	.+16     	; 0x1ace <__fp_round+0x20>
    1abe:	bf 2b       	or	r27, r31
    1ac0:	11 f4       	brne	.+4      	; 0x1ac6 <__fp_round+0x18>
    1ac2:	60 ff       	sbrs	r22, 0
    1ac4:	04 c0       	rjmp	.+8      	; 0x1ace <__fp_round+0x20>
    1ac6:	6f 5f       	subi	r22, 0xFF	; 255
    1ac8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aca:	8f 4f       	sbci	r24, 0xFF	; 255
    1acc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ace:	08 95       	ret

00001ad0 <__fp_split3>:
    1ad0:	57 fd       	sbrc	r21, 7
    1ad2:	90 58       	subi	r25, 0x80	; 128
    1ad4:	44 0f       	add	r20, r20
    1ad6:	55 1f       	adc	r21, r21
    1ad8:	59 f0       	breq	.+22     	; 0x1af0 <__fp_splitA+0x10>
    1ada:	5f 3f       	cpi	r21, 0xFF	; 255
    1adc:	71 f0       	breq	.+28     	; 0x1afa <__fp_splitA+0x1a>
    1ade:	47 95       	ror	r20

00001ae0 <__fp_splitA>:
    1ae0:	88 0f       	add	r24, r24
    1ae2:	97 fb       	bst	r25, 7
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	61 f0       	breq	.+24     	; 0x1b00 <__fp_splitA+0x20>
    1ae8:	9f 3f       	cpi	r25, 0xFF	; 255
    1aea:	79 f0       	breq	.+30     	; 0x1b0a <__fp_splitA+0x2a>
    1aec:	87 95       	ror	r24
    1aee:	08 95       	ret
    1af0:	12 16       	cp	r1, r18
    1af2:	13 06       	cpc	r1, r19
    1af4:	14 06       	cpc	r1, r20
    1af6:	55 1f       	adc	r21, r21
    1af8:	f2 cf       	rjmp	.-28     	; 0x1ade <__fp_split3+0xe>
    1afa:	46 95       	lsr	r20
    1afc:	f1 df       	rcall	.-30     	; 0x1ae0 <__fp_splitA>
    1afe:	08 c0       	rjmp	.+16     	; 0x1b10 <__fp_splitA+0x30>
    1b00:	16 16       	cp	r1, r22
    1b02:	17 06       	cpc	r1, r23
    1b04:	18 06       	cpc	r1, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	f1 cf       	rjmp	.-30     	; 0x1aec <__fp_splitA+0xc>
    1b0a:	86 95       	lsr	r24
    1b0c:	71 05       	cpc	r23, r1
    1b0e:	61 05       	cpc	r22, r1
    1b10:	08 94       	sec
    1b12:	08 95       	ret

00001b14 <__fp_zero>:
    1b14:	e8 94       	clt

00001b16 <__fp_szero>:
    1b16:	bb 27       	eor	r27, r27
    1b18:	66 27       	eor	r22, r22
    1b1a:	77 27       	eor	r23, r23
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	97 f9       	bld	r25, 7
    1b20:	08 95       	ret

00001b22 <__mulsf3>:
    1b22:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__mulsf3x>
    1b26:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <__fp_round>
    1b2a:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__fp_pscA>
    1b2e:	38 f0       	brcs	.+14     	; 0x1b3e <__mulsf3+0x1c>
    1b30:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__fp_pscB>
    1b34:	20 f0       	brcs	.+8      	; 0x1b3e <__mulsf3+0x1c>
    1b36:	95 23       	and	r25, r21
    1b38:	11 f0       	breq	.+4      	; 0x1b3e <__mulsf3+0x1c>
    1b3a:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__fp_inf>
    1b3e:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__fp_nan>
    1b42:	11 24       	eor	r1, r1
    1b44:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__fp_szero>

00001b48 <__mulsf3x>:
    1b48:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__fp_split3>
    1b4c:	70 f3       	brcs	.-36     	; 0x1b2a <__mulsf3+0x8>

00001b4e <__mulsf3_pse>:
    1b4e:	95 9f       	mul	r25, r21
    1b50:	c1 f3       	breq	.-16     	; 0x1b42 <__mulsf3+0x20>
    1b52:	95 0f       	add	r25, r21
    1b54:	50 e0       	ldi	r21, 0x00	; 0
    1b56:	55 1f       	adc	r21, r21
    1b58:	62 9f       	mul	r22, r18
    1b5a:	f0 01       	movw	r30, r0
    1b5c:	72 9f       	mul	r23, r18
    1b5e:	bb 27       	eor	r27, r27
    1b60:	f0 0d       	add	r31, r0
    1b62:	b1 1d       	adc	r27, r1
    1b64:	63 9f       	mul	r22, r19
    1b66:	aa 27       	eor	r26, r26
    1b68:	f0 0d       	add	r31, r0
    1b6a:	b1 1d       	adc	r27, r1
    1b6c:	aa 1f       	adc	r26, r26
    1b6e:	64 9f       	mul	r22, r20
    1b70:	66 27       	eor	r22, r22
    1b72:	b0 0d       	add	r27, r0
    1b74:	a1 1d       	adc	r26, r1
    1b76:	66 1f       	adc	r22, r22
    1b78:	82 9f       	mul	r24, r18
    1b7a:	22 27       	eor	r18, r18
    1b7c:	b0 0d       	add	r27, r0
    1b7e:	a1 1d       	adc	r26, r1
    1b80:	62 1f       	adc	r22, r18
    1b82:	73 9f       	mul	r23, r19
    1b84:	b0 0d       	add	r27, r0
    1b86:	a1 1d       	adc	r26, r1
    1b88:	62 1f       	adc	r22, r18
    1b8a:	83 9f       	mul	r24, r19
    1b8c:	a0 0d       	add	r26, r0
    1b8e:	61 1d       	adc	r22, r1
    1b90:	22 1f       	adc	r18, r18
    1b92:	74 9f       	mul	r23, r20
    1b94:	33 27       	eor	r19, r19
    1b96:	a0 0d       	add	r26, r0
    1b98:	61 1d       	adc	r22, r1
    1b9a:	23 1f       	adc	r18, r19
    1b9c:	84 9f       	mul	r24, r20
    1b9e:	60 0d       	add	r22, r0
    1ba0:	21 1d       	adc	r18, r1
    1ba2:	82 2f       	mov	r24, r18
    1ba4:	76 2f       	mov	r23, r22
    1ba6:	6a 2f       	mov	r22, r26
    1ba8:	11 24       	eor	r1, r1
    1baa:	9f 57       	subi	r25, 0x7F	; 127
    1bac:	50 40       	sbci	r21, 0x00	; 0
    1bae:	9a f0       	brmi	.+38     	; 0x1bd6 <__mulsf3_pse+0x88>
    1bb0:	f1 f0       	breq	.+60     	; 0x1bee <__mulsf3_pse+0xa0>
    1bb2:	88 23       	and	r24, r24
    1bb4:	4a f0       	brmi	.+18     	; 0x1bc8 <__mulsf3_pse+0x7a>
    1bb6:	ee 0f       	add	r30, r30
    1bb8:	ff 1f       	adc	r31, r31
    1bba:	bb 1f       	adc	r27, r27
    1bbc:	66 1f       	adc	r22, r22
    1bbe:	77 1f       	adc	r23, r23
    1bc0:	88 1f       	adc	r24, r24
    1bc2:	91 50       	subi	r25, 0x01	; 1
    1bc4:	50 40       	sbci	r21, 0x00	; 0
    1bc6:	a9 f7       	brne	.-22     	; 0x1bb2 <__mulsf3_pse+0x64>
    1bc8:	9e 3f       	cpi	r25, 0xFE	; 254
    1bca:	51 05       	cpc	r21, r1
    1bcc:	80 f0       	brcs	.+32     	; 0x1bee <__mulsf3_pse+0xa0>
    1bce:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__fp_inf>
    1bd2:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__fp_szero>
    1bd6:	5f 3f       	cpi	r21, 0xFF	; 255
    1bd8:	e4 f3       	brlt	.-8      	; 0x1bd2 <__mulsf3_pse+0x84>
    1bda:	98 3e       	cpi	r25, 0xE8	; 232
    1bdc:	d4 f3       	brlt	.-12     	; 0x1bd2 <__mulsf3_pse+0x84>
    1bde:	86 95       	lsr	r24
    1be0:	77 95       	ror	r23
    1be2:	67 95       	ror	r22
    1be4:	b7 95       	ror	r27
    1be6:	f7 95       	ror	r31
    1be8:	e7 95       	ror	r30
    1bea:	9f 5f       	subi	r25, 0xFF	; 255
    1bec:	c1 f7       	brne	.-16     	; 0x1bde <__mulsf3_pse+0x90>
    1bee:	fe 2b       	or	r31, r30
    1bf0:	88 0f       	add	r24, r24
    1bf2:	91 1d       	adc	r25, r1
    1bf4:	96 95       	lsr	r25
    1bf6:	87 95       	ror	r24
    1bf8:	97 f9       	bld	r25, 7
    1bfa:	08 95       	ret

00001bfc <pow>:
    1bfc:	fa 01       	movw	r30, r20
    1bfe:	ee 0f       	add	r30, r30
    1c00:	ff 1f       	adc	r31, r31
    1c02:	30 96       	adiw	r30, 0x00	; 0
    1c04:	21 05       	cpc	r18, r1
    1c06:	31 05       	cpc	r19, r1
    1c08:	a1 f1       	breq	.+104    	; 0x1c72 <pow+0x76>
    1c0a:	61 15       	cp	r22, r1
    1c0c:	71 05       	cpc	r23, r1
    1c0e:	61 f4       	brne	.+24     	; 0x1c28 <pow+0x2c>
    1c10:	80 38       	cpi	r24, 0x80	; 128
    1c12:	bf e3       	ldi	r27, 0x3F	; 63
    1c14:	9b 07       	cpc	r25, r27
    1c16:	49 f1       	breq	.+82     	; 0x1c6a <pow+0x6e>
    1c18:	68 94       	set
    1c1a:	90 38       	cpi	r25, 0x80	; 128
    1c1c:	81 05       	cpc	r24, r1
    1c1e:	61 f0       	breq	.+24     	; 0x1c38 <pow+0x3c>
    1c20:	80 38       	cpi	r24, 0x80	; 128
    1c22:	bf ef       	ldi	r27, 0xFF	; 255
    1c24:	9b 07       	cpc	r25, r27
    1c26:	41 f0       	breq	.+16     	; 0x1c38 <pow+0x3c>
    1c28:	99 23       	and	r25, r25
    1c2a:	4a f5       	brpl	.+82     	; 0x1c7e <pow+0x82>
    1c2c:	ff 3f       	cpi	r31, 0xFF	; 255
    1c2e:	e1 05       	cpc	r30, r1
    1c30:	31 05       	cpc	r19, r1
    1c32:	21 05       	cpc	r18, r1
    1c34:	19 f1       	breq	.+70     	; 0x1c7c <pow+0x80>
    1c36:	e8 94       	clt
    1c38:	08 94       	sec
    1c3a:	e7 95       	ror	r30
    1c3c:	d9 01       	movw	r26, r18
    1c3e:	aa 23       	and	r26, r26
    1c40:	29 f4       	brne	.+10     	; 0x1c4c <pow+0x50>
    1c42:	ab 2f       	mov	r26, r27
    1c44:	be 2f       	mov	r27, r30
    1c46:	f8 5f       	subi	r31, 0xF8	; 248
    1c48:	d0 f3       	brcs	.-12     	; 0x1c3e <pow+0x42>
    1c4a:	10 c0       	rjmp	.+32     	; 0x1c6c <pow+0x70>
    1c4c:	ff 5f       	subi	r31, 0xFF	; 255
    1c4e:	70 f4       	brcc	.+28     	; 0x1c6c <pow+0x70>
    1c50:	a6 95       	lsr	r26
    1c52:	e0 f7       	brcc	.-8      	; 0x1c4c <pow+0x50>
    1c54:	f7 39       	cpi	r31, 0x97	; 151
    1c56:	50 f0       	brcs	.+20     	; 0x1c6c <pow+0x70>
    1c58:	19 f0       	breq	.+6      	; 0x1c60 <pow+0x64>
    1c5a:	ff 3a       	cpi	r31, 0xAF	; 175
    1c5c:	38 f4       	brcc	.+14     	; 0x1c6c <pow+0x70>
    1c5e:	9f 77       	andi	r25, 0x7F	; 127
    1c60:	9f 93       	push	r25
    1c62:	0d d0       	rcall	.+26     	; 0x1c7e <pow+0x82>
    1c64:	0f 90       	pop	r0
    1c66:	07 fc       	sbrc	r0, 7
    1c68:	90 58       	subi	r25, 0x80	; 128
    1c6a:	08 95       	ret
    1c6c:	46 f0       	brts	.+16     	; 0x1c7e <pow+0x82>
    1c6e:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__fp_nan>
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	80 e8       	ldi	r24, 0x80	; 128
    1c78:	9f e3       	ldi	r25, 0x3F	; 63
    1c7a:	08 95       	ret
    1c7c:	4f e7       	ldi	r20, 0x7F	; 127
    1c7e:	9f 77       	andi	r25, 0x7F	; 127
    1c80:	5f 93       	push	r21
    1c82:	4f 93       	push	r20
    1c84:	3f 93       	push	r19
    1c86:	2f 93       	push	r18
    1c88:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <log>
    1c8c:	2f 91       	pop	r18
    1c8e:	3f 91       	pop	r19
    1c90:	4f 91       	pop	r20
    1c92:	5f 91       	pop	r21
    1c94:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3>
    1c98:	0c 94 5e 0e 	jmp	0x1cbc	; 0x1cbc <exp>

00001c9c <sin>:
    1c9c:	9f 93       	push	r25
    1c9e:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <__fp_rempio2>
    1ca2:	0f 90       	pop	r0
    1ca4:	07 fc       	sbrc	r0, 7
    1ca6:	ee 5f       	subi	r30, 0xFE	; 254
    1ca8:	0c 94 e2 0e 	jmp	0x1dc4	; 0x1dc4 <__fp_sinus>
    1cac:	29 f4       	brne	.+10     	; 0x1cb8 <sin+0x1c>
    1cae:	16 f0       	brts	.+4      	; 0x1cb4 <sin+0x18>
    1cb0:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__fp_inf>
    1cb4:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <__fp_zero>
    1cb8:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__fp_nan>

00001cbc <exp>:
    1cbc:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <__fp_splitA>
    1cc0:	a8 f3       	brcs	.-22     	; 0x1cac <sin+0x10>
    1cc2:	96 38       	cpi	r25, 0x86	; 134
    1cc4:	a0 f7       	brcc	.-24     	; 0x1cae <sin+0x12>
    1cc6:	07 f8       	bld	r0, 7
    1cc8:	0f 92       	push	r0
    1cca:	e8 94       	clt
    1ccc:	2b e3       	ldi	r18, 0x3B	; 59
    1cce:	3a ea       	ldi	r19, 0xAA	; 170
    1cd0:	48 eb       	ldi	r20, 0xB8	; 184
    1cd2:	5f e7       	ldi	r21, 0x7F	; 127
    1cd4:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__mulsf3_pse>
    1cd8:	0f 92       	push	r0
    1cda:	0f 92       	push	r0
    1cdc:	0f 92       	push	r0
    1cde:	4d b7       	in	r20, 0x3d	; 61
    1ce0:	5e b7       	in	r21, 0x3e	; 62
    1ce2:	0f 92       	push	r0
    1ce4:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <modf>
    1ce8:	e8 e6       	ldi	r30, 0x68	; 104
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__fp_powser>
    1cf0:	4f 91       	pop	r20
    1cf2:	5f 91       	pop	r21
    1cf4:	ef 91       	pop	r30
    1cf6:	ff 91       	pop	r31
    1cf8:	e5 95       	asr	r30
    1cfa:	ee 1f       	adc	r30, r30
    1cfc:	ff 1f       	adc	r31, r31
    1cfe:	49 f0       	breq	.+18     	; 0x1d12 <exp+0x56>
    1d00:	fe 57       	subi	r31, 0x7E	; 126
    1d02:	e0 68       	ori	r30, 0x80	; 128
    1d04:	44 27       	eor	r20, r20
    1d06:	ee 0f       	add	r30, r30
    1d08:	44 1f       	adc	r20, r20
    1d0a:	fa 95       	dec	r31
    1d0c:	e1 f7       	brne	.-8      	; 0x1d06 <exp+0x4a>
    1d0e:	41 95       	neg	r20
    1d10:	55 0b       	sbc	r21, r21
    1d12:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <ldexp>
    1d16:	0f 90       	pop	r0
    1d18:	07 fe       	sbrs	r0, 7
    1d1a:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <inverse>
    1d1e:	08 95       	ret

00001d20 <__fp_powser>:
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	1f 93       	push	r17
    1d26:	0f 93       	push	r16
    1d28:	ff 92       	push	r15
    1d2a:	ef 92       	push	r14
    1d2c:	df 92       	push	r13
    1d2e:	7b 01       	movw	r14, r22
    1d30:	8c 01       	movw	r16, r24
    1d32:	68 94       	set
    1d34:	06 c0       	rjmp	.+12     	; 0x1d42 <__fp_powser+0x22>
    1d36:	da 2e       	mov	r13, r26
    1d38:	ef 01       	movw	r28, r30
    1d3a:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__mulsf3x>
    1d3e:	fe 01       	movw	r30, r28
    1d40:	e8 94       	clt
    1d42:	a5 91       	lpm	r26, Z+
    1d44:	25 91       	lpm	r18, Z+
    1d46:	35 91       	lpm	r19, Z+
    1d48:	45 91       	lpm	r20, Z+
    1d4a:	55 91       	lpm	r21, Z+
    1d4c:	a6 f3       	brts	.-24     	; 0x1d36 <__fp_powser+0x16>
    1d4e:	ef 01       	movw	r28, r30
    1d50:	0e 94 06 0c 	call	0x180c	; 0x180c <__addsf3x>
    1d54:	fe 01       	movw	r30, r28
    1d56:	97 01       	movw	r18, r14
    1d58:	a8 01       	movw	r20, r16
    1d5a:	da 94       	dec	r13
    1d5c:	69 f7       	brne	.-38     	; 0x1d38 <__fp_powser+0x18>
    1d5e:	df 90       	pop	r13
    1d60:	ef 90       	pop	r14
    1d62:	ff 90       	pop	r15
    1d64:	0f 91       	pop	r16
    1d66:	1f 91       	pop	r17
    1d68:	cf 91       	pop	r28
    1d6a:	df 91       	pop	r29
    1d6c:	08 95       	ret
    1d6e:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__fp_nan>

00001d72 <__fp_rempio2>:
    1d72:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <__fp_splitA>
    1d76:	d8 f3       	brcs	.-10     	; 0x1d6e <__fp_powser+0x4e>
    1d78:	e8 94       	clt
    1d7a:	e0 e0       	ldi	r30, 0x00	; 0
    1d7c:	bb 27       	eor	r27, r27
    1d7e:	9f 57       	subi	r25, 0x7F	; 127
    1d80:	f0 f0       	brcs	.+60     	; 0x1dbe <__fp_rempio2+0x4c>
    1d82:	2a ed       	ldi	r18, 0xDA	; 218
    1d84:	3f e0       	ldi	r19, 0x0F	; 15
    1d86:	49 ec       	ldi	r20, 0xC9	; 201
    1d88:	06 c0       	rjmp	.+12     	; 0x1d96 <__fp_rempio2+0x24>
    1d8a:	ee 0f       	add	r30, r30
    1d8c:	bb 0f       	add	r27, r27
    1d8e:	66 1f       	adc	r22, r22
    1d90:	77 1f       	adc	r23, r23
    1d92:	88 1f       	adc	r24, r24
    1d94:	28 f0       	brcs	.+10     	; 0x1da0 <__fp_rempio2+0x2e>
    1d96:	b2 3a       	cpi	r27, 0xA2	; 162
    1d98:	62 07       	cpc	r22, r18
    1d9a:	73 07       	cpc	r23, r19
    1d9c:	84 07       	cpc	r24, r20
    1d9e:	28 f0       	brcs	.+10     	; 0x1daa <__fp_rempio2+0x38>
    1da0:	b2 5a       	subi	r27, 0xA2	; 162
    1da2:	62 0b       	sbc	r22, r18
    1da4:	73 0b       	sbc	r23, r19
    1da6:	84 0b       	sbc	r24, r20
    1da8:	e3 95       	inc	r30
    1daa:	9a 95       	dec	r25
    1dac:	72 f7       	brpl	.-36     	; 0x1d8a <__fp_rempio2+0x18>
    1dae:	80 38       	cpi	r24, 0x80	; 128
    1db0:	30 f4       	brcc	.+12     	; 0x1dbe <__fp_rempio2+0x4c>
    1db2:	9a 95       	dec	r25
    1db4:	bb 0f       	add	r27, r27
    1db6:	66 1f       	adc	r22, r22
    1db8:	77 1f       	adc	r23, r23
    1dba:	88 1f       	adc	r24, r24
    1dbc:	d2 f7       	brpl	.-12     	; 0x1db2 <__fp_rempio2+0x40>
    1dbe:	90 48       	sbci	r25, 0x80	; 128
    1dc0:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <__fp_mpack_finite>

00001dc4 <__fp_sinus>:
    1dc4:	ef 93       	push	r30
    1dc6:	e0 ff       	sbrs	r30, 0
    1dc8:	07 c0       	rjmp	.+14     	; 0x1dd8 <__fp_sinus+0x14>
    1dca:	a2 ea       	ldi	r26, 0xA2	; 162
    1dcc:	2a ed       	ldi	r18, 0xDA	; 218
    1dce:	3f e0       	ldi	r19, 0x0F	; 15
    1dd0:	49 ec       	ldi	r20, 0xC9	; 201
    1dd2:	5f eb       	ldi	r21, 0xBF	; 191
    1dd4:	0e 94 06 0c 	call	0x180c	; 0x180c <__addsf3x>
    1dd8:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__fp_round>
    1ddc:	0f 90       	pop	r0
    1dde:	03 94       	inc	r0
    1de0:	01 fc       	sbrc	r0, 1
    1de2:	90 58       	subi	r25, 0x80	; 128
    1de4:	e0 e9       	ldi	r30, 0x90	; 144
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	0c 94 ca 0f 	jmp	0x1f94	; 0x1f94 <__fp_powsodd>

00001dec <inverse>:
    1dec:	9b 01       	movw	r18, r22
    1dee:	ac 01       	movw	r20, r24
    1df0:	60 e0       	ldi	r22, 0x00	; 0
    1df2:	70 e0       	ldi	r23, 0x00	; 0
    1df4:	80 e8       	ldi	r24, 0x80	; 128
    1df6:	9f e3       	ldi	r25, 0x3F	; 63
    1df8:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__divsf3>
    1dfc:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__fp_inf>
    1e00:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__fp_mpack>

00001e04 <ldexp>:
    1e04:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <__fp_splitA>
    1e08:	d8 f3       	brcs	.-10     	; 0x1e00 <inverse+0x14>
    1e0a:	99 23       	and	r25, r25
    1e0c:	c9 f3       	breq	.-14     	; 0x1e00 <inverse+0x14>
    1e0e:	94 0f       	add	r25, r20
    1e10:	51 1d       	adc	r21, r1
    1e12:	a3 f3       	brvs	.-24     	; 0x1dfc <inverse+0x10>
    1e14:	91 50       	subi	r25, 0x01	; 1
    1e16:	50 40       	sbci	r21, 0x00	; 0
    1e18:	94 f0       	brlt	.+36     	; 0x1e3e <ldexp+0x3a>
    1e1a:	59 f0       	breq	.+22     	; 0x1e32 <ldexp+0x2e>
    1e1c:	88 23       	and	r24, r24
    1e1e:	32 f0       	brmi	.+12     	; 0x1e2c <ldexp+0x28>
    1e20:	66 0f       	add	r22, r22
    1e22:	77 1f       	adc	r23, r23
    1e24:	88 1f       	adc	r24, r24
    1e26:	91 50       	subi	r25, 0x01	; 1
    1e28:	50 40       	sbci	r21, 0x00	; 0
    1e2a:	c1 f7       	brne	.-16     	; 0x1e1c <ldexp+0x18>
    1e2c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e2e:	51 05       	cpc	r21, r1
    1e30:	2c f7       	brge	.-54     	; 0x1dfc <inverse+0x10>
    1e32:	88 0f       	add	r24, r24
    1e34:	91 1d       	adc	r25, r1
    1e36:	96 95       	lsr	r25
    1e38:	87 95       	ror	r24
    1e3a:	97 f9       	bld	r25, 7
    1e3c:	08 95       	ret
    1e3e:	5f 3f       	cpi	r21, 0xFF	; 255
    1e40:	ac f0       	brlt	.+42     	; 0x1e6c <ldexp+0x68>
    1e42:	98 3e       	cpi	r25, 0xE8	; 232
    1e44:	9c f0       	brlt	.+38     	; 0x1e6c <ldexp+0x68>
    1e46:	bb 27       	eor	r27, r27
    1e48:	86 95       	lsr	r24
    1e4a:	77 95       	ror	r23
    1e4c:	67 95       	ror	r22
    1e4e:	b7 95       	ror	r27
    1e50:	08 f4       	brcc	.+2      	; 0x1e54 <ldexp+0x50>
    1e52:	b1 60       	ori	r27, 0x01	; 1
    1e54:	93 95       	inc	r25
    1e56:	c1 f7       	brne	.-16     	; 0x1e48 <ldexp+0x44>
    1e58:	bb 0f       	add	r27, r27
    1e5a:	58 f7       	brcc	.-42     	; 0x1e32 <ldexp+0x2e>
    1e5c:	11 f4       	brne	.+4      	; 0x1e62 <ldexp+0x5e>
    1e5e:	60 ff       	sbrs	r22, 0
    1e60:	e8 cf       	rjmp	.-48     	; 0x1e32 <ldexp+0x2e>
    1e62:	6f 5f       	subi	r22, 0xFF	; 255
    1e64:	7f 4f       	sbci	r23, 0xFF	; 255
    1e66:	8f 4f       	sbci	r24, 0xFF	; 255
    1e68:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6a:	e3 cf       	rjmp	.-58     	; 0x1e32 <ldexp+0x2e>
    1e6c:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__fp_szero>
    1e70:	16 f0       	brts	.+4      	; 0x1e76 <ldexp+0x72>
    1e72:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__fp_mpack>
    1e76:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__fp_nan>
    1e7a:	68 94       	set
    1e7c:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__fp_inf>

00001e80 <log>:
    1e80:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <__fp_splitA>
    1e84:	a8 f3       	brcs	.-22     	; 0x1e70 <ldexp+0x6c>
    1e86:	99 23       	and	r25, r25
    1e88:	c1 f3       	breq	.-16     	; 0x1e7a <ldexp+0x76>
    1e8a:	ae f3       	brts	.-22     	; 0x1e76 <ldexp+0x72>
    1e8c:	df 93       	push	r29
    1e8e:	cf 93       	push	r28
    1e90:	1f 93       	push	r17
    1e92:	0f 93       	push	r16
    1e94:	ff 92       	push	r15
    1e96:	c9 2f       	mov	r28, r25
    1e98:	dd 27       	eor	r29, r29
    1e9a:	88 23       	and	r24, r24
    1e9c:	2a f0       	brmi	.+10     	; 0x1ea8 <log+0x28>
    1e9e:	21 97       	sbiw	r28, 0x01	; 1
    1ea0:	66 0f       	add	r22, r22
    1ea2:	77 1f       	adc	r23, r23
    1ea4:	88 1f       	adc	r24, r24
    1ea6:	da f7       	brpl	.-10     	; 0x1e9e <log+0x1e>
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e8       	ldi	r20, 0x80	; 128
    1eae:	5f eb       	ldi	r21, 0xBF	; 191
    1eb0:	9f e3       	ldi	r25, 0x3F	; 63
    1eb2:	88 39       	cpi	r24, 0x98	; 152
    1eb4:	20 f0       	brcs	.+8      	; 0x1ebe <log+0x3e>
    1eb6:	80 3e       	cpi	r24, 0xE0	; 224
    1eb8:	38 f0       	brcs	.+14     	; 0x1ec8 <log+0x48>
    1eba:	21 96       	adiw	r28, 0x01	; 1
    1ebc:	8f 77       	andi	r24, 0x7F	; 127
    1ebe:	0e 94 ef 0b 	call	0x17de	; 0x17de <__addsf3>
    1ec2:	ee ea       	ldi	r30, 0xAE	; 174
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	04 c0       	rjmp	.+8      	; 0x1ed0 <log+0x50>
    1ec8:	0e 94 ef 0b 	call	0x17de	; 0x17de <__addsf3>
    1ecc:	eb ed       	ldi	r30, 0xDB	; 219
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__fp_powser>
    1ed4:	8b 01       	movw	r16, r22
    1ed6:	be 01       	movw	r22, r28
    1ed8:	ec 01       	movw	r28, r24
    1eda:	fb 2e       	mov	r15, r27
    1edc:	6f 57       	subi	r22, 0x7F	; 127
    1ede:	71 09       	sbc	r23, r1
    1ee0:	75 95       	asr	r23
    1ee2:	77 1f       	adc	r23, r23
    1ee4:	88 0b       	sbc	r24, r24
    1ee6:	99 0b       	sbc	r25, r25
    1ee8:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__floatsisf>
    1eec:	28 e1       	ldi	r18, 0x18	; 24
    1eee:	32 e7       	ldi	r19, 0x72	; 114
    1ef0:	41 e3       	ldi	r20, 0x31	; 49
    1ef2:	5f e3       	ldi	r21, 0x3F	; 63
    1ef4:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__mulsf3x>
    1ef8:	af 2d       	mov	r26, r15
    1efa:	98 01       	movw	r18, r16
    1efc:	ae 01       	movw	r20, r28
    1efe:	ff 90       	pop	r15
    1f00:	0f 91       	pop	r16
    1f02:	1f 91       	pop	r17
    1f04:	cf 91       	pop	r28
    1f06:	df 91       	pop	r29
    1f08:	0e 94 06 0c 	call	0x180c	; 0x180c <__addsf3x>
    1f0c:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <__fp_round>

00001f10 <modf>:
    1f10:	fa 01       	movw	r30, r20
    1f12:	dc 01       	movw	r26, r24
    1f14:	aa 0f       	add	r26, r26
    1f16:	bb 1f       	adc	r27, r27
    1f18:	9b 01       	movw	r18, r22
    1f1a:	ac 01       	movw	r20, r24
    1f1c:	bf 57       	subi	r27, 0x7F	; 127
    1f1e:	28 f4       	brcc	.+10     	; 0x1f2a <modf+0x1a>
    1f20:	22 27       	eor	r18, r18
    1f22:	33 27       	eor	r19, r19
    1f24:	44 27       	eor	r20, r20
    1f26:	50 78       	andi	r21, 0x80	; 128
    1f28:	20 c0       	rjmp	.+64     	; 0x1f6a <modf+0x5a>
    1f2a:	b7 51       	subi	r27, 0x17	; 23
    1f2c:	90 f4       	brcc	.+36     	; 0x1f52 <modf+0x42>
    1f2e:	ab 2f       	mov	r26, r27
    1f30:	00 24       	eor	r0, r0
    1f32:	46 95       	lsr	r20
    1f34:	37 95       	ror	r19
    1f36:	27 95       	ror	r18
    1f38:	01 1c       	adc	r0, r1
    1f3a:	a3 95       	inc	r26
    1f3c:	d2 f3       	brmi	.-12     	; 0x1f32 <modf+0x22>
    1f3e:	00 20       	and	r0, r0
    1f40:	71 f0       	breq	.+28     	; 0x1f5e <modf+0x4e>
    1f42:	22 0f       	add	r18, r18
    1f44:	33 1f       	adc	r19, r19
    1f46:	44 1f       	adc	r20, r20
    1f48:	b3 95       	inc	r27
    1f4a:	da f3       	brmi	.-10     	; 0x1f42 <modf+0x32>
    1f4c:	0e d0       	rcall	.+28     	; 0x1f6a <modf+0x5a>
    1f4e:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__subsf3>
    1f52:	61 30       	cpi	r22, 0x01	; 1
    1f54:	71 05       	cpc	r23, r1
    1f56:	a0 e8       	ldi	r26, 0x80	; 128
    1f58:	8a 07       	cpc	r24, r26
    1f5a:	b9 46       	sbci	r27, 0x69	; 105
    1f5c:	30 f4       	brcc	.+12     	; 0x1f6a <modf+0x5a>
    1f5e:	9b 01       	movw	r18, r22
    1f60:	ac 01       	movw	r20, r24
    1f62:	66 27       	eor	r22, r22
    1f64:	77 27       	eor	r23, r23
    1f66:	88 27       	eor	r24, r24
    1f68:	90 78       	andi	r25, 0x80	; 128
    1f6a:	30 96       	adiw	r30, 0x00	; 0
    1f6c:	21 f0       	breq	.+8      	; 0x1f76 <modf+0x66>
    1f6e:	20 83       	st	Z, r18
    1f70:	31 83       	std	Z+1, r19	; 0x01
    1f72:	42 83       	std	Z+2, r20	; 0x02
    1f74:	53 83       	std	Z+3, r21	; 0x03
    1f76:	08 95       	ret

00001f78 <__fp_mpack>:
    1f78:	9f 3f       	cpi	r25, 0xFF	; 255
    1f7a:	31 f0       	breq	.+12     	; 0x1f88 <__fp_mpack_finite+0xc>

00001f7c <__fp_mpack_finite>:
    1f7c:	91 50       	subi	r25, 0x01	; 1
    1f7e:	20 f4       	brcc	.+8      	; 0x1f88 <__fp_mpack_finite+0xc>
    1f80:	87 95       	ror	r24
    1f82:	77 95       	ror	r23
    1f84:	67 95       	ror	r22
    1f86:	b7 95       	ror	r27
    1f88:	88 0f       	add	r24, r24
    1f8a:	91 1d       	adc	r25, r1
    1f8c:	96 95       	lsr	r25
    1f8e:	87 95       	ror	r24
    1f90:	97 f9       	bld	r25, 7
    1f92:	08 95       	ret

00001f94 <__fp_powsodd>:
    1f94:	9f 93       	push	r25
    1f96:	8f 93       	push	r24
    1f98:	7f 93       	push	r23
    1f9a:	6f 93       	push	r22
    1f9c:	ff 93       	push	r31
    1f9e:	ef 93       	push	r30
    1fa0:	9b 01       	movw	r18, r22
    1fa2:	ac 01       	movw	r20, r24
    1fa4:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3>
    1fa8:	ef 91       	pop	r30
    1faa:	ff 91       	pop	r31
    1fac:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__fp_powser>
    1fb0:	2f 91       	pop	r18
    1fb2:	3f 91       	pop	r19
    1fb4:	4f 91       	pop	r20
    1fb6:	5f 91       	pop	r21
    1fb8:	0c 94 91 0d 	jmp	0x1b22	; 0x1b22 <__mulsf3>

00001fbc <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1fbc:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1fbe:	91 8d       	ldd	r25, Z+25	; 0x19
    1fc0:	22 8d       	ldd	r18, Z+26	; 0x1a
    1fc2:	89 2f       	mov	r24, r25
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	80 5c       	subi	r24, 0xC0	; 192
    1fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fca:	82 1b       	sub	r24, r18
    1fcc:	91 09       	sbc	r25, r1
}
    1fce:	8f 73       	andi	r24, 0x3F	; 63
    1fd0:	99 27       	eor	r25, r25
    1fd2:	08 95       	ret

00001fd4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1fd4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1fd6:	91 8d       	ldd	r25, Z+25	; 0x19
    1fd8:	82 8d       	ldd	r24, Z+26	; 0x1a
    1fda:	98 17       	cp	r25, r24
    1fdc:	31 f0       	breq	.+12     	; 0x1fea <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1fde:	82 8d       	ldd	r24, Z+26	; 0x1a
    1fe0:	e8 0f       	add	r30, r24
    1fe2:	f1 1d       	adc	r31, r1
    1fe4:	85 8d       	ldd	r24, Z+29	; 0x1d
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1fea:	8f ef       	ldi	r24, 0xFF	; 255
    1fec:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1fee:	08 95       	ret

00001ff0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1ff0:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1ff2:	91 8d       	ldd	r25, Z+25	; 0x19
    1ff4:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ff6:	98 17       	cp	r25, r24
    1ff8:	61 f0       	breq	.+24     	; 0x2012 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1ffa:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ffc:	df 01       	movw	r26, r30
    1ffe:	a8 0f       	add	r26, r24
    2000:	b1 1d       	adc	r27, r1
    2002:	5d 96       	adiw	r26, 0x1d	; 29
    2004:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2006:	92 8d       	ldd	r25, Z+26	; 0x1a
    2008:	9f 5f       	subi	r25, 0xFF	; 255
    200a:	9f 73       	andi	r25, 0x3F	; 63
    200c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2012:	8f ef       	ldi	r24, 0xFF	; 255
    2014:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2016:	08 95       	ret

00002018 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2018:	8c e7       	ldi	r24, 0x7C	; 124
    201a:	91 e1       	ldi	r25, 0x11	; 17
    201c:	89 2b       	or	r24, r25
    201e:	49 f0       	breq	.+18     	; 0x2032 <_Z14serialEventRunv+0x1a>
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	89 2b       	or	r24, r25
    2026:	29 f0       	breq	.+10     	; 0x2032 <_Z14serialEventRunv+0x1a>
    2028:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <_Z17Serial0_availablev>
    202c:	81 11       	cpse	r24, r1
    202e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2032:	08 95       	ret

00002034 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2034:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2036:	84 8d       	ldd	r24, Z+28	; 0x1c
    2038:	df 01       	movw	r26, r30
    203a:	a8 0f       	add	r26, r24
    203c:	b1 1d       	adc	r27, r1
    203e:	a3 5a       	subi	r26, 0xA3	; 163
    2040:	bf 4f       	sbci	r27, 0xFF	; 255
    2042:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2044:	24 8d       	ldd	r18, Z+28	; 0x1c
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	2f 5f       	subi	r18, 0xFF	; 255
    204a:	3f 4f       	sbci	r19, 0xFF	; 255
    204c:	2f 73       	andi	r18, 0x3F	; 63
    204e:	30 78       	andi	r19, 0x80	; 128
    2050:	33 23       	and	r19, r19
    2052:	34 f4       	brge	.+12     	; 0x2060 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    2054:	21 50       	subi	r18, 0x01	; 1
    2056:	31 09       	sbc	r19, r1
    2058:	20 6c       	ori	r18, 0xC0	; 192
    205a:	3f 6f       	ori	r19, 0xFF	; 255
    205c:	2f 5f       	subi	r18, 0xFF	; 255
    205e:	3f 4f       	sbci	r19, 0xFF	; 255
    2060:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
    2062:	a6 89       	ldd	r26, Z+22	; 0x16
    2064:	b7 89       	ldd	r27, Z+23	; 0x17
    2066:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    2068:	a0 89       	ldd	r26, Z+16	; 0x10
    206a:	b1 89       	ldd	r27, Z+17	; 0x11
    206c:	8c 91       	ld	r24, X
    206e:	80 64       	ori	r24, 0x40	; 64
    2070:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    2072:	93 8d       	ldd	r25, Z+27	; 0x1b
    2074:	84 8d       	ldd	r24, Z+28	; 0x1c
    2076:	98 13       	cpse	r25, r24
    2078:	06 c0       	rjmp	.+12     	; 0x2086 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    207a:	02 88       	ldd	r0, Z+18	; 0x12
    207c:	f3 89       	ldd	r31, Z+19	; 0x13
    207e:	e0 2d       	mov	r30, r0
    2080:	80 81       	ld	r24, Z
    2082:	8f 7d       	andi	r24, 0xDF	; 223
    2084:	80 83       	st	Z, r24
    2086:	08 95       	ret

00002088 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2088:	cf 93       	push	r28
    208a:	df 93       	push	r29
    208c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    208e:	88 8d       	ldd	r24, Y+24	; 0x18
    2090:	81 11       	cpse	r24, r1
    2092:	0f c0       	rjmp	.+30     	; 0x20b2 <_ZN14HardwareSerial5flushEv+0x2a>
    2094:	18 c0       	rjmp	.+48     	; 0x20c6 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	07 fc       	sbrc	r0, 7
    209a:	0d c0       	rjmp	.+26     	; 0x20b6 <_ZN14HardwareSerial5flushEv+0x2e>
    209c:	90 81       	ld	r25, Z
    209e:	95 ff       	sbrs	r25, 5
    20a0:	0a c0       	rjmp	.+20     	; 0x20b6 <_ZN14HardwareSerial5flushEv+0x2e>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    20a2:	a8 89       	ldd	r26, Y+16	; 0x10
    20a4:	b9 89       	ldd	r27, Y+17	; 0x11
    20a6:	8c 91       	ld	r24, X
    20a8:	85 ff       	sbrs	r24, 5
    20aa:	05 c0       	rjmp	.+10     	; 0x20b6 <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
    20ac:	ce 01       	movw	r24, r28
    20ae:	0e 94 1a 10 	call	0x2034	; 0x2034 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    20b2:	ea 89       	ldd	r30, Y+18	; 0x12
    20b4:	fb 89       	ldd	r31, Y+19	; 0x13
    20b6:	90 81       	ld	r25, Z
    20b8:	95 fd       	sbrc	r25, 5
    20ba:	ed cf       	rjmp	.-38     	; 0x2096 <_ZN14HardwareSerial5flushEv+0xe>
    20bc:	a8 89       	ldd	r26, Y+16	; 0x10
    20be:	b9 89       	ldd	r27, Y+17	; 0x11
    20c0:	8c 91       	ld	r24, X
    20c2:	86 ff       	sbrs	r24, 6
    20c4:	e8 cf       	rjmp	.-48     	; 0x2096 <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    20c6:	df 91       	pop	r29
    20c8:	cf 91       	pop	r28
    20ca:	08 95       	ret

000020cc <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    20cc:	0f 93       	push	r16
    20ce:	1f 93       	push	r17
    20d0:	cf 93       	push	r28
    20d2:	df 93       	push	r29
    20d4:	fc 01       	movw	r30, r24
  _written = true;
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	80 8f       	std	Z+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    20da:	93 8d       	ldd	r25, Z+27	; 0x1b
    20dc:	84 8d       	ldd	r24, Z+28	; 0x1c
    20de:	98 13       	cpse	r25, r24
    20e0:	22 c0       	rjmp	.+68     	; 0x2126 <_ZN14HardwareSerial5writeEh+0x5a>
    20e2:	a0 89       	ldd	r26, Z+16	; 0x10
    20e4:	b1 89       	ldd	r27, Z+17	; 0x11
    20e6:	8c 91       	ld	r24, X
    20e8:	85 fd       	sbrc	r24, 5
    20ea:	2f c0       	rjmp	.+94     	; 0x214a <_ZN14HardwareSerial5writeEh+0x7e>
    20ec:	1c c0       	rjmp	.+56     	; 0x2126 <_ZN14HardwareSerial5writeEh+0x5a>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
    20ee:	0f b6       	in	r0, 0x3f	; 63
    20f0:	07 fc       	sbrc	r0, 7
    20f2:	08 c0       	rjmp	.+16     	; 0x2104 <_ZN14HardwareSerial5writeEh+0x38>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    20f4:	e8 89       	ldd	r30, Y+16	; 0x10
    20f6:	f9 89       	ldd	r31, Y+17	; 0x11
    20f8:	80 81       	ld	r24, Z
    20fa:	85 ff       	sbrs	r24, 5
    20fc:	03 c0       	rjmp	.+6      	; 0x2104 <_ZN14HardwareSerial5writeEh+0x38>
	_tx_udr_empty_irq();
    20fe:	ce 01       	movw	r24, r28
    2100:	0e 94 1a 10 	call	0x2034	; 0x2034 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2104:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2106:	09 17       	cp	r16, r25
    2108:	91 f3       	breq	.-28     	; 0x20ee <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    210a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    210c:	fe 01       	movw	r30, r28
    210e:	e8 0f       	add	r30, r24
    2110:	f1 1d       	adc	r31, r1
    2112:	e3 5a       	subi	r30, 0xA3	; 163
    2114:	ff 4f       	sbci	r31, 0xFF	; 255
    2116:	10 83       	st	Z, r17
  _tx_buffer_head = i;
    2118:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    211a:	ea 89       	ldd	r30, Y+18	; 0x12
    211c:	fb 89       	ldd	r31, Y+19	; 0x13
    211e:	80 81       	ld	r24, Z
    2120:	80 62       	ori	r24, 0x20	; 32
    2122:	80 83       	st	Z, r24
  
  return 1;
    2124:	1b c0       	rjmp	.+54     	; 0x215c <_ZN14HardwareSerial5writeEh+0x90>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2126:	23 8d       	ldd	r18, Z+27	; 0x1b
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	2f 5f       	subi	r18, 0xFF	; 255
    212c:	3f 4f       	sbci	r19, 0xFF	; 255
    212e:	2f 73       	andi	r18, 0x3F	; 63
    2130:	30 78       	andi	r19, 0x80	; 128
    2132:	33 23       	and	r19, r19
    2134:	34 f4       	brge	.+12     	; 0x2142 <_ZN14HardwareSerial5writeEh+0x76>
    2136:	21 50       	subi	r18, 0x01	; 1
    2138:	31 09       	sbc	r19, r1
    213a:	20 6c       	ori	r18, 0xC0	; 192
    213c:	3f 6f       	ori	r19, 0xFF	; 255
    213e:	2f 5f       	subi	r18, 0xFF	; 255
    2140:	3f 4f       	sbci	r19, 0xFF	; 255
    2142:	16 2f       	mov	r17, r22
    2144:	ef 01       	movw	r28, r30
    2146:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2148:	dd cf       	rjmp	.-70     	; 0x2104 <_ZN14HardwareSerial5writeEh+0x38>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    214a:	a6 89       	ldd	r26, Z+22	; 0x16
    214c:	b7 89       	ldd	r27, Z+23	; 0x17
    214e:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
    2150:	00 88       	ldd	r0, Z+16	; 0x10
    2152:	f1 89       	ldd	r31, Z+17	; 0x11
    2154:	e0 2d       	mov	r30, r0
    2156:	80 81       	ld	r24, Z
    2158:	80 64       	ori	r24, 0x40	; 64
    215a:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	df 91       	pop	r29
    2162:	cf 91       	pop	r28
    2164:	1f 91       	pop	r17
    2166:	0f 91       	pop	r16
    2168:	08 95       	ret

0000216a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    216a:	bf 92       	push	r11
    216c:	cf 92       	push	r12
    216e:	df 92       	push	r13
    2170:	ef 92       	push	r14
    2172:	ff 92       	push	r15
    2174:	0f 93       	push	r16
    2176:	1f 93       	push	r17
    2178:	cf 93       	push	r28
    217a:	df 93       	push	r29
    217c:	ec 01       	movw	r28, r24
    217e:	6a 01       	movw	r12, r20
    2180:	7b 01       	movw	r14, r22
    2182:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2184:	e8 89       	ldd	r30, Y+16	; 0x10
    2186:	f9 89       	ldd	r31, Y+17	; 0x11
    2188:	82 e0       	ldi	r24, 0x02	; 2
    218a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    218c:	41 15       	cp	r20, r1
    218e:	51 4e       	sbci	r21, 0xE1	; 225
    2190:	61 05       	cpc	r22, r1
    2192:	71 05       	cpc	r23, r1
    2194:	b1 f0       	breq	.+44     	; 0x21c2 <_ZN14HardwareSerial5beginEmh+0x58>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2196:	60 e0       	ldi	r22, 0x00	; 0
    2198:	79 e0       	ldi	r23, 0x09	; 9
    219a:	8d e3       	ldi	r24, 0x3D	; 61
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	a7 01       	movw	r20, r14
    21a0:	96 01       	movw	r18, r12
    21a2:	0e 94 0a 19 	call	0x3214	; 0x3214 <__udivmodsi4>
    21a6:	89 01       	movw	r16, r18
    21a8:	9a 01       	movw	r18, r20
    21aa:	01 50       	subi	r16, 0x01	; 1
    21ac:	11 09       	sbc	r17, r1
    21ae:	21 09       	sbc	r18, r1
    21b0:	31 09       	sbc	r19, r1
    21b2:	36 95       	lsr	r19
    21b4:	27 95       	ror	r18
    21b6:	17 95       	ror	r17
    21b8:	07 95       	ror	r16
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    21ba:	01 15       	cp	r16, r1
    21bc:	80 e1       	ldi	r24, 0x10	; 16
    21be:	18 07       	cpc	r17, r24
    21c0:	a8 f0       	brcs	.+42     	; 0x21ec <_ZN14HardwareSerial5beginEmh+0x82>
  {
    *_ucsra = 0;
    21c2:	e8 89       	ldd	r30, Y+16	; 0x10
    21c4:	f9 89       	ldd	r31, Y+17	; 0x11
    21c6:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    21c8:	60 e8       	ldi	r22, 0x80	; 128
    21ca:	74 e8       	ldi	r23, 0x84	; 132
    21cc:	8e e1       	ldi	r24, 0x1E	; 30
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	a7 01       	movw	r20, r14
    21d2:	96 01       	movw	r18, r12
    21d4:	0e 94 0a 19 	call	0x3214	; 0x3214 <__udivmodsi4>
    21d8:	da 01       	movw	r26, r20
    21da:	c9 01       	movw	r24, r18
    21dc:	01 97       	sbiw	r24, 0x01	; 1
    21de:	a1 09       	sbc	r26, r1
    21e0:	b1 09       	sbc	r27, r1
    21e2:	b6 95       	lsr	r27
    21e4:	a7 95       	ror	r26
    21e6:	97 95       	ror	r25
    21e8:	87 95       	ror	r24
    21ea:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    21ec:	ec 85       	ldd	r30, Y+12	; 0x0c
    21ee:	fd 85       	ldd	r31, Y+13	; 0x0d
    21f0:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
    21f2:	ee 85       	ldd	r30, Y+14	; 0x0e
    21f4:	ff 85       	ldd	r31, Y+15	; 0x0f
    21f6:	00 83       	st	Z, r16

  _written = false;
    21f8:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    21fa:	ec 89       	ldd	r30, Y+20	; 0x14
    21fc:	fd 89       	ldd	r31, Y+21	; 0x15
    21fe:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
    2200:	ea 89       	ldd	r30, Y+18	; 0x12
    2202:	fb 89       	ldd	r31, Y+19	; 0x13
    2204:	80 81       	ld	r24, Z
    2206:	80 61       	ori	r24, 0x10	; 16
    2208:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    220a:	ea 89       	ldd	r30, Y+18	; 0x12
    220c:	fb 89       	ldd	r31, Y+19	; 0x13
    220e:	80 81       	ld	r24, Z
    2210:	88 60       	ori	r24, 0x08	; 8
    2212:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2214:	ea 89       	ldd	r30, Y+18	; 0x12
    2216:	fb 89       	ldd	r31, Y+19	; 0x13
    2218:	80 81       	ld	r24, Z
    221a:	80 68       	ori	r24, 0x80	; 128
    221c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    221e:	ea 89       	ldd	r30, Y+18	; 0x12
    2220:	fb 89       	ldd	r31, Y+19	; 0x13
    2222:	80 81       	ld	r24, Z
    2224:	8f 7d       	andi	r24, 0xDF	; 223
    2226:	80 83       	st	Z, r24
}
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	1f 91       	pop	r17
    222e:	0f 91       	pop	r16
    2230:	ff 90       	pop	r15
    2232:	ef 90       	pop	r14
    2234:	df 90       	pop	r13
    2236:	cf 90       	pop	r12
    2238:	bf 90       	pop	r11
    223a:	08 95       	ret

0000223c <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    223c:	1f 92       	push	r1
    223e:	0f 92       	push	r0
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	0f 92       	push	r0
    2244:	11 24       	eor	r1, r1
    2246:	2f 93       	push	r18
    2248:	8f 93       	push	r24
    224a:	9f 93       	push	r25
    224c:	af 93       	push	r26
    224e:	bf 93       	push	r27
    2250:	ef 93       	push	r30
    2252:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2254:	e0 91 39 03 	lds	r30, 0x0339	; 0x800339 <Serial+0x10>
    2258:	f0 91 3a 03 	lds	r31, 0x033A	; 0x80033a <Serial+0x11>
    225c:	80 81       	ld	r24, Z
    225e:	82 fd       	sbrc	r24, 2
    2260:	14 c0       	rjmp	.+40     	; 0x228a <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2262:	e9 e2       	ldi	r30, 0x29	; 41
    2264:	f3 e0       	ldi	r31, 0x03	; 3
    2266:	a6 89       	ldd	r26, Z+22	; 0x16
    2268:	b7 89       	ldd	r27, Z+23	; 0x17
    226a:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    226c:	81 8d       	ldd	r24, Z+25	; 0x19
    226e:	8f 5f       	subi	r24, 0xFF	; 255
    2270:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2272:	92 8d       	ldd	r25, Z+26	; 0x1a
    2274:	89 17       	cp	r24, r25
    2276:	71 f0       	breq	.+28     	; 0x2294 <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
    2278:	df 01       	movw	r26, r30
    227a:	e1 8d       	ldd	r30, Z+25	; 0x19
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	e7 5d       	subi	r30, 0xD7	; 215
    2280:	fc 4f       	sbci	r31, 0xFC	; 252
    2282:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    2284:	59 96       	adiw	r26, 0x19	; 25
    2286:	8c 93       	st	X, r24
    2288:	05 c0       	rjmp	.+10     	; 0x2294 <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    228a:	e0 91 3f 03 	lds	r30, 0x033F	; 0x80033f <Serial+0x16>
    228e:	f0 91 40 03 	lds	r31, 0x0340	; 0x800340 <Serial+0x17>
    2292:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2294:	ff 91       	pop	r31
    2296:	ef 91       	pop	r30
    2298:	bf 91       	pop	r27
    229a:	af 91       	pop	r26
    229c:	9f 91       	pop	r25
    229e:	8f 91       	pop	r24
    22a0:	2f 91       	pop	r18
    22a2:	0f 90       	pop	r0
    22a4:	0f be       	out	0x3f, r0	; 63
    22a6:	0f 90       	pop	r0
    22a8:	1f 90       	pop	r1
    22aa:	18 95       	reti

000022ac <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    22ac:	1f 92       	push	r1
    22ae:	0f 92       	push	r0
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	0f 92       	push	r0
    22b4:	11 24       	eor	r1, r1
    22b6:	2f 93       	push	r18
    22b8:	3f 93       	push	r19
    22ba:	4f 93       	push	r20
    22bc:	5f 93       	push	r21
    22be:	6f 93       	push	r22
    22c0:	7f 93       	push	r23
    22c2:	8f 93       	push	r24
    22c4:	9f 93       	push	r25
    22c6:	af 93       	push	r26
    22c8:	bf 93       	push	r27
    22ca:	ef 93       	push	r30
    22cc:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    22ce:	89 e2       	ldi	r24, 0x29	; 41
    22d0:	93 e0       	ldi	r25, 0x03	; 3
    22d2:	0e 94 1a 10 	call	0x2034	; 0x2034 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    22d6:	ff 91       	pop	r31
    22d8:	ef 91       	pop	r30
    22da:	bf 91       	pop	r27
    22dc:	af 91       	pop	r26
    22de:	9f 91       	pop	r25
    22e0:	8f 91       	pop	r24
    22e2:	7f 91       	pop	r23
    22e4:	6f 91       	pop	r22
    22e6:	5f 91       	pop	r21
    22e8:	4f 91       	pop	r20
    22ea:	3f 91       	pop	r19
    22ec:	2f 91       	pop	r18
    22ee:	0f 90       	pop	r0
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	0f 90       	pop	r0
    22f4:	1f 90       	pop	r1
    22f6:	18 95       	reti

000022f8 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    22f8:	89 e2       	ldi	r24, 0x29	; 41
    22fa:	93 e0       	ldi	r25, 0x03	; 3
    22fc:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <_ZN14HardwareSerial9availableEv>
    2300:	21 e0       	ldi	r18, 0x01	; 1
    2302:	89 2b       	or	r24, r25
    2304:	09 f4       	brne	.+2      	; 0x2308 <_Z17Serial0_availablev+0x10>
    2306:	20 e0       	ldi	r18, 0x00	; 0
}
    2308:	82 2f       	mov	r24, r18
    230a:	08 95       	ret

0000230c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    230c:	e9 e2       	ldi	r30, 0x29	; 41
    230e:	f3 e0       	ldi	r31, 0x03	; 3
    2310:	13 82       	std	Z+3, r1	; 0x03
    2312:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2314:	88 ee       	ldi	r24, 0xE8	; 232
    2316:	93 e0       	ldi	r25, 0x03	; 3
    2318:	a0 e0       	ldi	r26, 0x00	; 0
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	84 83       	std	Z+4, r24	; 0x04
    231e:	95 83       	std	Z+5, r25	; 0x05
    2320:	a6 83       	std	Z+6, r26	; 0x06
    2322:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2324:	8d e6       	ldi	r24, 0x6D	; 109
    2326:	92 e0       	ldi	r25, 0x02	; 2
    2328:	91 83       	std	Z+1, r25	; 0x01
    232a:	80 83       	st	Z, r24
    232c:	85 ec       	ldi	r24, 0xC5	; 197
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	95 87       	std	Z+13, r25	; 0x0d
    2332:	84 87       	std	Z+12, r24	; 0x0c
    2334:	84 ec       	ldi	r24, 0xC4	; 196
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	97 87       	std	Z+15, r25	; 0x0f
    233a:	86 87       	std	Z+14, r24	; 0x0e
    233c:	80 ec       	ldi	r24, 0xC0	; 192
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	91 8b       	std	Z+17, r25	; 0x11
    2342:	80 8b       	std	Z+16, r24	; 0x10
    2344:	81 ec       	ldi	r24, 0xC1	; 193
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	93 8b       	std	Z+19, r25	; 0x13
    234a:	82 8b       	std	Z+18, r24	; 0x12
    234c:	82 ec       	ldi	r24, 0xC2	; 194
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	95 8b       	std	Z+21, r25	; 0x15
    2352:	84 8b       	std	Z+20, r24	; 0x14
    2354:	86 ec       	ldi	r24, 0xC6	; 198
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	97 8b       	std	Z+23, r25	; 0x17
    235a:	86 8b       	std	Z+22, r24	; 0x16
    235c:	11 8e       	std	Z+25, r1	; 0x19
    235e:	12 8e       	std	Z+26, r1	; 0x1a
    2360:	13 8e       	std	Z+27, r1	; 0x1b
    2362:	14 8e       	std	Z+28, r1	; 0x1c
    2364:	08 95       	ret

00002366 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    2366:	08 95       	ret

00002368 <main>:

int main(void)
{
	init();
    2368:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <init>

	initVariant();
    236c:	0e 94 b3 11 	call	0x2366	; 0x2366 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2370:	0e 94 17 03 	call	0x62e	; 0x62e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2374:	cc e0       	ldi	r28, 0x0C	; 12
    2376:	d0 e1       	ldi	r29, 0x10	; 16
#endif
	
	setup();
    
	for (;;) {
		loop();
    2378:	0e 94 dd 00 	call	0x1ba	; 0x1ba <loop>
		if (serialEventRun) serialEventRun();
    237c:	20 97       	sbiw	r28, 0x00	; 0
    237e:	e1 f3       	breq	.-8      	; 0x2378 <main+0x10>
    2380:	0e 94 0c 10 	call	0x2018	; 0x2018 <_Z14serialEventRunv>
    2384:	f9 cf       	rjmp	.-14     	; 0x2378 <main+0x10>

00002386 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
  return n;
}
    2386:	cf 92       	push	r12
    2388:	df 92       	push	r13
    238a:	ef 92       	push	r14
    238c:	ff 92       	push	r15
    238e:	0f 93       	push	r16
    2390:	1f 93       	push	r17
    2392:	cf 93       	push	r28
    2394:	df 93       	push	r29
    2396:	41 15       	cp	r20, r1
    2398:	51 05       	cpc	r21, r1
    239a:	c1 f0       	breq	.+48     	; 0x23cc <_ZN5Print5writeEPKhj+0x46>
    239c:	6a 01       	movw	r12, r20
    239e:	8c 01       	movw	r16, r24
    23a0:	e6 2e       	mov	r14, r22
    23a2:	f7 2e       	mov	r15, r23
    23a4:	c0 e0       	ldi	r28, 0x00	; 0
    23a6:	d0 e0       	ldi	r29, 0x00	; 0
    23a8:	d7 01       	movw	r26, r14
    23aa:	6d 91       	ld	r22, X+
    23ac:	7d 01       	movw	r14, r26
    23ae:	d8 01       	movw	r26, r16
    23b0:	ed 91       	ld	r30, X+
    23b2:	fc 91       	ld	r31, X
    23b4:	01 90       	ld	r0, Z+
    23b6:	f0 81       	ld	r31, Z
    23b8:	e0 2d       	mov	r30, r0
    23ba:	c8 01       	movw	r24, r16
    23bc:	09 95       	icall
    23be:	89 2b       	or	r24, r25
    23c0:	39 f0       	breq	.+14     	; 0x23d0 <_ZN5Print5writeEPKhj+0x4a>
    23c2:	21 96       	adiw	r28, 0x01	; 1
    23c4:	cc 16       	cp	r12, r28
    23c6:	dd 06       	cpc	r13, r29
    23c8:	79 f7       	brne	.-34     	; 0x23a8 <_ZN5Print5writeEPKhj+0x22>
    23ca:	02 c0       	rjmp	.+4      	; 0x23d0 <_ZN5Print5writeEPKhj+0x4a>
    23cc:	c0 e0       	ldi	r28, 0x00	; 0
    23ce:	d0 e0       	ldi	r29, 0x00	; 0
    23d0:	ce 01       	movw	r24, r28
    23d2:	df 91       	pop	r29
    23d4:	cf 91       	pop	r28
    23d6:	1f 91       	pop	r17
    23d8:	0f 91       	pop	r16
    23da:	ff 90       	pop	r15
    23dc:	ef 90       	pop	r14
    23de:	df 90       	pop	r13
    23e0:	cf 90       	pop	r12
    23e2:	08 95       	ret

000023e4 <_ZN5Print5printEPKc>:
    23e4:	61 15       	cp	r22, r1
    23e6:	71 05       	cpc	r23, r1
    23e8:	81 f0       	breq	.+32     	; 0x240a <_ZN5Print5printEPKc+0x26>
    23ea:	fb 01       	movw	r30, r22
    23ec:	01 90       	ld	r0, Z+
    23ee:	00 20       	and	r0, r0
    23f0:	e9 f7       	brne	.-6      	; 0x23ec <_ZN5Print5printEPKc+0x8>
    23f2:	31 97       	sbiw	r30, 0x01	; 1
    23f4:	af 01       	movw	r20, r30
    23f6:	46 1b       	sub	r20, r22
    23f8:	57 0b       	sbc	r21, r23
    23fa:	dc 01       	movw	r26, r24
    23fc:	ed 91       	ld	r30, X+
    23fe:	fc 91       	ld	r31, X
    2400:	02 80       	ldd	r0, Z+2	; 0x02
    2402:	f3 81       	ldd	r31, Z+3	; 0x03
    2404:	e0 2d       	mov	r30, r0
    2406:	09 95       	icall
    2408:	08 95       	ret
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	08 95       	ret

00002410 <_ZN5Print5printEc>:
    2410:	dc 01       	movw	r26, r24
    2412:	ed 91       	ld	r30, X+
    2414:	fc 91       	ld	r31, X
    2416:	01 90       	ld	r0, Z+
    2418:	f0 81       	ld	r31, Z
    241a:	e0 2d       	mov	r30, r0
    241c:	09 95       	icall
    241e:	08 95       	ret

00002420 <_ZN5Print7printlnEv>:
    2420:	dc 01       	movw	r26, r24
    2422:	ed 91       	ld	r30, X+
    2424:	fc 91       	ld	r31, X
    2426:	02 80       	ldd	r0, Z+2	; 0x02
    2428:	f3 81       	ldd	r31, Z+3	; 0x03
    242a:	e0 2d       	mov	r30, r0
    242c:	42 e0       	ldi	r20, 0x02	; 2
    242e:	50 e0       	ldi	r21, 0x00	; 0
    2430:	69 e7       	ldi	r22, 0x79	; 121
    2432:	72 e0       	ldi	r23, 0x02	; 2
    2434:	09 95       	icall
    2436:	08 95       	ret

00002438 <_ZN5Print7printlnEPKc>:
    2438:	0f 93       	push	r16
    243a:	1f 93       	push	r17
    243c:	cf 93       	push	r28
    243e:	df 93       	push	r29
    2440:	ec 01       	movw	r28, r24
    2442:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_ZN5Print5printEPKc>
    2446:	8c 01       	movw	r16, r24
    2448:	ce 01       	movw	r24, r28
    244a:	0e 94 10 12 	call	0x2420	; 0x2420 <_ZN5Print7printlnEv>
    244e:	80 0f       	add	r24, r16
    2450:	91 1f       	adc	r25, r17
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	1f 91       	pop	r17
    2458:	0f 91       	pop	r16
    245a:	08 95       	ret

0000245c <_ZN5Print11printNumberEmh>:
    245c:	8f 92       	push	r8
    245e:	9f 92       	push	r9
    2460:	af 92       	push	r10
    2462:	bf 92       	push	r11
    2464:	ef 92       	push	r14
    2466:	ff 92       	push	r15
    2468:	0f 93       	push	r16
    246a:	1f 93       	push	r17
    246c:	cf 93       	push	r28
    246e:	df 93       	push	r29
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    2474:	a1 97       	sbiw	r28, 0x21	; 33
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	f8 94       	cli
    247a:	de bf       	out	0x3e, r29	; 62
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	cd bf       	out	0x3d, r28	; 61
    2480:	7c 01       	movw	r14, r24
    2482:	cb 01       	movw	r24, r22
    2484:	ba 01       	movw	r22, r20
    2486:	19 a2       	std	Y+33, r1	; 0x21
    2488:	22 30       	cpi	r18, 0x02	; 2
    248a:	08 f4       	brcc	.+2      	; 0x248e <_ZN5Print11printNumberEmh+0x32>
    248c:	2a e0       	ldi	r18, 0x0A	; 10
    248e:	8e 01       	movw	r16, r28
    2490:	0f 5d       	subi	r16, 0xDF	; 223
    2492:	1f 4f       	sbci	r17, 0xFF	; 255
    2494:	82 2e       	mov	r8, r18
    2496:	91 2c       	mov	r9, r1
    2498:	a1 2c       	mov	r10, r1
    249a:	b1 2c       	mov	r11, r1
    249c:	a5 01       	movw	r20, r10
    249e:	94 01       	movw	r18, r8
    24a0:	0e 94 0a 19 	call	0x3214	; 0x3214 <__udivmodsi4>
    24a4:	e6 2f       	mov	r30, r22
    24a6:	62 2f       	mov	r22, r18
    24a8:	73 2f       	mov	r23, r19
    24aa:	84 2f       	mov	r24, r20
    24ac:	95 2f       	mov	r25, r21
    24ae:	01 50       	subi	r16, 0x01	; 1
    24b0:	11 09       	sbc	r17, r1
    24b2:	ea 30       	cpi	r30, 0x0A	; 10
    24b4:	10 f4       	brcc	.+4      	; 0x24ba <_ZN5Print11printNumberEmh+0x5e>
    24b6:	e0 5d       	subi	r30, 0xD0	; 208
    24b8:	01 c0       	rjmp	.+2      	; 0x24bc <_ZN5Print11printNumberEmh+0x60>
    24ba:	e9 5c       	subi	r30, 0xC9	; 201
    24bc:	d8 01       	movw	r26, r16
    24be:	ec 93       	st	X, r30
    24c0:	61 15       	cp	r22, r1
    24c2:	71 05       	cpc	r23, r1
    24c4:	81 05       	cpc	r24, r1
    24c6:	91 05       	cpc	r25, r1
    24c8:	49 f7       	brne	.-46     	; 0x249c <_ZN5Print11printNumberEmh+0x40>
    24ca:	01 15       	cp	r16, r1
    24cc:	11 05       	cpc	r17, r1
    24ce:	91 f0       	breq	.+36     	; 0x24f4 <_ZN5Print11printNumberEmh+0x98>
    24d0:	f8 01       	movw	r30, r16
    24d2:	01 90       	ld	r0, Z+
    24d4:	00 20       	and	r0, r0
    24d6:	e9 f7       	brne	.-6      	; 0x24d2 <_ZN5Print11printNumberEmh+0x76>
    24d8:	31 97       	sbiw	r30, 0x01	; 1
    24da:	af 01       	movw	r20, r30
    24dc:	40 1b       	sub	r20, r16
    24de:	51 0b       	sbc	r21, r17
    24e0:	d7 01       	movw	r26, r14
    24e2:	ed 91       	ld	r30, X+
    24e4:	fc 91       	ld	r31, X
    24e6:	02 80       	ldd	r0, Z+2	; 0x02
    24e8:	f3 81       	ldd	r31, Z+3	; 0x03
    24ea:	e0 2d       	mov	r30, r0
    24ec:	b8 01       	movw	r22, r16
    24ee:	c7 01       	movw	r24, r14
    24f0:	09 95       	icall
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <_ZN5Print11printNumberEmh+0x9c>
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	a1 96       	adiw	r28, 0x21	; 33
    24fa:	0f b6       	in	r0, 0x3f	; 63
    24fc:	f8 94       	cli
    24fe:	de bf       	out	0x3e, r29	; 62
    2500:	0f be       	out	0x3f, r0	; 63
    2502:	cd bf       	out	0x3d, r28	; 61
    2504:	df 91       	pop	r29
    2506:	cf 91       	pop	r28
    2508:	1f 91       	pop	r17
    250a:	0f 91       	pop	r16
    250c:	ff 90       	pop	r15
    250e:	ef 90       	pop	r14
    2510:	bf 90       	pop	r11
    2512:	af 90       	pop	r10
    2514:	9f 90       	pop	r9
    2516:	8f 90       	pop	r8
    2518:	08 95       	ret

0000251a <_ZN5Print5printEmi>:
    251a:	21 15       	cp	r18, r1
    251c:	31 05       	cpc	r19, r1
    251e:	49 f4       	brne	.+18     	; 0x2532 <_ZN5Print5printEmi+0x18>
    2520:	dc 01       	movw	r26, r24
    2522:	ed 91       	ld	r30, X+
    2524:	fc 91       	ld	r31, X
    2526:	01 90       	ld	r0, Z+
    2528:	f0 81       	ld	r31, Z
    252a:	e0 2d       	mov	r30, r0
    252c:	64 2f       	mov	r22, r20
    252e:	09 95       	icall
    2530:	08 95       	ret
    2532:	0e 94 2e 12 	call	0x245c	; 0x245c <_ZN5Print11printNumberEmh>
    2536:	08 95       	ret

00002538 <_ZN5Print5printEhi>:
    2538:	9a 01       	movw	r18, r20
    253a:	46 2f       	mov	r20, r22
    253c:	50 e0       	ldi	r21, 0x00	; 0
    253e:	60 e0       	ldi	r22, 0x00	; 0
    2540:	70 e0       	ldi	r23, 0x00	; 0
    2542:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZN5Print5printEmi>
    2546:	08 95       	ret

00002548 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    2548:	4f 92       	push	r4
    254a:	5f 92       	push	r5
    254c:	7f 92       	push	r7
    254e:	8f 92       	push	r8
    2550:	9f 92       	push	r9
    2552:	af 92       	push	r10
    2554:	bf 92       	push	r11
    2556:	cf 92       	push	r12
    2558:	df 92       	push	r13
    255a:	ef 92       	push	r14
    255c:	ff 92       	push	r15
    255e:	0f 93       	push	r16
    2560:	1f 93       	push	r17
    2562:	cf 93       	push	r28
    2564:	df 93       	push	r29
    2566:	00 d0       	rcall	.+0      	; 0x2568 <_ZN5Print10printFloatEdh+0x20>
    2568:	00 d0       	rcall	.+0      	; 0x256a <_ZN5Print10printFloatEdh+0x22>
    256a:	cd b7       	in	r28, 0x3d	; 61
    256c:	de b7       	in	r29, 0x3e	; 62
    256e:	8c 01       	movw	r16, r24
    2570:	4a 01       	movw	r8, r20
    2572:	5b 01       	movw	r10, r22
    2574:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    2576:	9a 01       	movw	r18, r20
    2578:	ab 01       	movw	r20, r22
    257a:	c5 01       	movw	r24, r10
    257c:	b4 01       	movw	r22, r8
    257e:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <__unordsf2>
    2582:	88 23       	and	r24, r24
    2584:	31 f0       	breq	.+12     	; 0x2592 <_ZN5Print10printFloatEdh+0x4a>
    2586:	6c e7       	ldi	r22, 0x7C	; 124
    2588:	72 e0       	ldi	r23, 0x02	; 2
    258a:	c8 01       	movw	r24, r16
    258c:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_ZN5Print5printEPKc>
    2590:	d0 c0       	rjmp	.+416    	; 0x2732 <_ZN5Print10printFloatEdh+0x1ea>
  if (isinf(number)) return print("inf");
    2592:	75 01       	movw	r14, r10
    2594:	64 01       	movw	r12, r8
    2596:	e8 94       	clt
    2598:	f7 f8       	bld	r15, 7
    259a:	2f ef       	ldi	r18, 0xFF	; 255
    259c:	3f ef       	ldi	r19, 0xFF	; 255
    259e:	4f e7       	ldi	r20, 0x7F	; 127
    25a0:	5f e7       	ldi	r21, 0x7F	; 127
    25a2:	c7 01       	movw	r24, r14
    25a4:	b6 01       	movw	r22, r12
    25a6:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <__unordsf2>
    25aa:	81 11       	cpse	r24, r1
    25ac:	10 c0       	rjmp	.+32     	; 0x25ce <_ZN5Print10printFloatEdh+0x86>
    25ae:	2f ef       	ldi	r18, 0xFF	; 255
    25b0:	3f ef       	ldi	r19, 0xFF	; 255
    25b2:	4f e7       	ldi	r20, 0x7F	; 127
    25b4:	5f e7       	ldi	r21, 0x7F	; 127
    25b6:	c7 01       	movw	r24, r14
    25b8:	b6 01       	movw	r22, r12
    25ba:	0e 94 c3 18 	call	0x3186	; 0x3186 <__cmpsf2>
    25be:	18 16       	cp	r1, r24
    25c0:	34 f4       	brge	.+12     	; 0x25ce <_ZN5Print10printFloatEdh+0x86>
    25c2:	60 e8       	ldi	r22, 0x80	; 128
    25c4:	72 e0       	ldi	r23, 0x02	; 2
    25c6:	c8 01       	movw	r24, r16
    25c8:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_ZN5Print5printEPKc>
    25cc:	b2 c0       	rjmp	.+356    	; 0x2732 <_ZN5Print10printFloatEdh+0x1ea>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    25ce:	2f ef       	ldi	r18, 0xFF	; 255
    25d0:	3f ef       	ldi	r19, 0xFF	; 255
    25d2:	4f e7       	ldi	r20, 0x7F	; 127
    25d4:	5f e4       	ldi	r21, 0x4F	; 79
    25d6:	c5 01       	movw	r24, r10
    25d8:	b4 01       	movw	r22, r8
    25da:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__gesf2>
    25de:	18 16       	cp	r1, r24
    25e0:	34 f4       	brge	.+12     	; 0x25ee <_ZN5Print10printFloatEdh+0xa6>
    25e2:	64 e8       	ldi	r22, 0x84	; 132
    25e4:	72 e0       	ldi	r23, 0x02	; 2
    25e6:	c8 01       	movw	r24, r16
    25e8:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_ZN5Print5printEPKc>
    25ec:	a2 c0       	rjmp	.+324    	; 0x2732 <_ZN5Print10printFloatEdh+0x1ea>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    25ee:	2f ef       	ldi	r18, 0xFF	; 255
    25f0:	3f ef       	ldi	r19, 0xFF	; 255
    25f2:	4f e7       	ldi	r20, 0x7F	; 127
    25f4:	5f ec       	ldi	r21, 0xCF	; 207
    25f6:	c5 01       	movw	r24, r10
    25f8:	b4 01       	movw	r22, r8
    25fa:	0e 94 c3 18 	call	0x3186	; 0x3186 <__cmpsf2>
    25fe:	88 23       	and	r24, r24
    2600:	34 f4       	brge	.+12     	; 0x260e <_ZN5Print10printFloatEdh+0xc6>
    2602:	64 e8       	ldi	r22, 0x84	; 132
    2604:	72 e0       	ldi	r23, 0x02	; 2
    2606:	c8 01       	movw	r24, r16
    2608:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_ZN5Print5printEPKc>
    260c:	92 c0       	rjmp	.+292    	; 0x2732 <_ZN5Print10printFloatEdh+0x1ea>
  
  // Handle negative numbers
  if (number < 0.0)
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	a9 01       	movw	r20, r18
    2614:	c5 01       	movw	r24, r10
    2616:	b4 01       	movw	r22, r8
    2618:	0e 94 c3 18 	call	0x3186	; 0x3186 <__cmpsf2>
    261c:	88 23       	and	r24, r24
    261e:	54 f4       	brge	.+20     	; 0x2634 <_ZN5Print10printFloatEdh+0xec>
  {
     n += print('-');
    2620:	6d e2       	ldi	r22, 0x2D	; 45
    2622:	c8 01       	movw	r24, r16
    2624:	0e 94 08 12 	call	0x2410	; 0x2410 <_ZN5Print5printEc>
    2628:	7c 01       	movw	r14, r24
     number = -number;
    262a:	b7 fa       	bst	r11, 7
    262c:	b0 94       	com	r11
    262e:	b7 f8       	bld	r11, 7
    2630:	b0 94       	com	r11
    2632:	02 c0       	rjmp	.+4      	; 0x2638 <_ZN5Print10printFloatEdh+0xf0>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    2634:	e1 2c       	mov	r14, r1
    2636:	f1 2c       	mov	r15, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2638:	77 20       	and	r7, r7
    263a:	09 f4       	brne	.+2      	; 0x263e <_ZN5Print10printFloatEdh+0xf6>
    263c:	65 c0       	rjmp	.+202    	; 0x2708 <_ZN5Print10printFloatEdh+0x1c0>
    263e:	d1 2c       	mov	r13, r1
    2640:	60 e0       	ldi	r22, 0x00	; 0
    2642:	70 e0       	ldi	r23, 0x00	; 0
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	9f e3       	ldi	r25, 0x3F	; 63
    rounding /= 10.0;
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e2       	ldi	r20, 0x20	; 32
    264e:	51 e4       	ldi	r21, 0x41	; 65
    2650:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2654:	d3 94       	inc	r13
    2656:	d7 10       	cpse	r13, r7
    2658:	f7 cf       	rjmp	.-18     	; 0x2648 <_ZN5Print10printFloatEdh+0x100>
    265a:	2a c0       	rjmp	.+84     	; 0x26b0 <_ZN5Print10printFloatEdh+0x168>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	40 e2       	ldi	r20, 0x20	; 32
    2662:	51 e4       	ldi	r21, 0x41	; 65
    2664:	c5 01       	movw	r24, r10
    2666:	b4 01       	movw	r22, r8
    2668:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3>
    266c:	4b 01       	movw	r8, r22
    266e:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    2670:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__fixunssfsi>
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    2674:	6b 01       	movw	r12, r22
    2676:	e1 2c       	mov	r14, r1
    2678:	f1 2c       	mov	r15, r1
    267a:	2a e0       	ldi	r18, 0x0A	; 10
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	b7 01       	movw	r22, r14
    2680:	a6 01       	movw	r20, r12
    2682:	c8 01       	movw	r24, r16
    2684:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZN5Print5printEmi>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
    2688:	48 0e       	add	r4, r24
    268a:	59 1e       	adc	r5, r25
    remainder -= toPrint; 
    268c:	c7 01       	movw	r24, r14
    268e:	b6 01       	movw	r22, r12
    2690:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__floatunsisf>
    2694:	9b 01       	movw	r18, r22
    2696:	ac 01       	movw	r20, r24
    2698:	c5 01       	movw	r24, r10
    269a:	b4 01       	movw	r22, r8
    269c:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__subsf3>
    26a0:	4b 01       	movw	r8, r22
    26a2:	5c 01       	movw	r10, r24
    26a4:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    26a6:	71 10       	cpse	r7, r1
    26a8:	d9 cf       	rjmp	.-78     	; 0x265c <_ZN5Print10printFloatEdh+0x114>
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
    26aa:	84 2d       	mov	r24, r4
    26ac:	95 2d       	mov	r25, r5
    26ae:	41 c0       	rjmp	.+130    	; 0x2732 <_ZN5Print10printFloatEdh+0x1ea>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    26b0:	9b 01       	movw	r18, r22
    26b2:	ac 01       	movw	r20, r24
    26b4:	c5 01       	movw	r24, r10
    26b6:	b4 01       	movw	r22, r8
    26b8:	0e 94 ef 0b 	call	0x17de	; 0x17de <__addsf3>
    26bc:	4b 01       	movw	r8, r22
    26be:	5c 01       	movw	r10, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    26c0:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__fixunssfsi>
    26c4:	69 83       	std	Y+1, r22	; 0x01
    26c6:	7a 83       	std	Y+2, r23	; 0x02
    26c8:	8b 83       	std	Y+3, r24	; 0x03
    26ca:	9c 83       	std	Y+4, r25	; 0x04
  double remainder = number - (double)int_part;
    26cc:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__floatunsisf>
    26d0:	9b 01       	movw	r18, r22
    26d2:	ac 01       	movw	r20, r24
    26d4:	c5 01       	movw	r24, r10
    26d6:	b4 01       	movw	r22, r8
    26d8:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__subsf3>
    26dc:	4b 01       	movw	r8, r22
    26de:	5c 01       	movw	r10, r24
  n += print(int_part);
    26e0:	2a e0       	ldi	r18, 0x0A	; 10
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	49 81       	ldd	r20, Y+1	; 0x01
    26e6:	5a 81       	ldd	r21, Y+2	; 0x02
    26e8:	6b 81       	ldd	r22, Y+3	; 0x03
    26ea:	7c 81       	ldd	r23, Y+4	; 0x04
    26ec:	c8 01       	movw	r24, r16
    26ee:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZN5Print5printEmi>
    26f2:	6c 01       	movw	r12, r24

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    26f4:	6e e2       	ldi	r22, 0x2E	; 46
    26f6:	c8 01       	movw	r24, r16
    26f8:	0e 94 08 12 	call	0x2410	; 0x2410 <_ZN5Print5printEc>
    26fc:	8c 0d       	add	r24, r12
    26fe:	9d 1d       	adc	r25, r13
    2700:	2c 01       	movw	r4, r24
    2702:	4e 0c       	add	r4, r14
    2704:	5f 1c       	adc	r5, r15
    2706:	aa cf       	rjmp	.-172    	; 0x265c <_ZN5Print10printFloatEdh+0x114>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	40 e0       	ldi	r20, 0x00	; 0
    270e:	5f e3       	ldi	r21, 0x3F	; 63
    2710:	c5 01       	movw	r24, r10
    2712:	b4 01       	movw	r22, r8
    2714:	0e 94 ef 0b 	call	0x17de	; 0x17de <__addsf3>

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2718:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__fixunssfsi>
    271c:	ab 01       	movw	r20, r22
    271e:	bc 01       	movw	r22, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    2720:	2a e0       	ldi	r18, 0x0A	; 10
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	c8 01       	movw	r24, r16
    2726:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZN5Print5printEmi>
    272a:	2c 01       	movw	r4, r24
    272c:	4e 0c       	add	r4, r14
    272e:	5f 1c       	adc	r5, r15
    2730:	bc cf       	rjmp	.-136    	; 0x26aa <_ZN5Print10printFloatEdh+0x162>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2732:	0f 90       	pop	r0
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	df 91       	pop	r29
    273c:	cf 91       	pop	r28
    273e:	1f 91       	pop	r17
    2740:	0f 91       	pop	r16
    2742:	ff 90       	pop	r15
    2744:	ef 90       	pop	r14
    2746:	df 90       	pop	r13
    2748:	cf 90       	pop	r12
    274a:	bf 90       	pop	r11
    274c:	af 90       	pop	r10
    274e:	9f 90       	pop	r9
    2750:	8f 90       	pop	r8
    2752:	7f 90       	pop	r7
    2754:	5f 90       	pop	r5
    2756:	4f 90       	pop	r4
    2758:	08 95       	ret

0000275a <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    275a:	0e 94 a4 12 	call	0x2548	; 0x2548 <_ZN5Print10printFloatEdh>
}
    275e:	08 95       	ret

00002760 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2760:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <_ZN7TwoWire14rxBufferLengthE>
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	20 91 f7 03 	lds	r18, 0x03F7	; 0x8003f7 <_ZN7TwoWire13rxBufferIndexE>
    276a:	82 1b       	sub	r24, r18
    276c:	91 09       	sbc	r25, r1
    276e:	08 95       	ret

00002770 <_ZN7TwoWire4readEv>:
    2770:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <_ZN7TwoWire13rxBufferIndexE>
    2774:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <_ZN7TwoWire14rxBufferLengthE>
    2778:	98 17       	cp	r25, r24
    277a:	50 f4       	brcc	.+20     	; 0x2790 <_ZN7TwoWire4readEv+0x20>
    277c:	e9 2f       	mov	r30, r25
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	e8 50       	subi	r30, 0x08	; 8
    2782:	fc 4f       	sbci	r31, 0xFC	; 252
    2784:	20 81       	ld	r18, Z
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	9f 5f       	subi	r25, 0xFF	; 255
    278a:	90 93 f7 03 	sts	0x03F7, r25	; 0x8003f7 <_ZN7TwoWire13rxBufferIndexE>
    278e:	02 c0       	rjmp	.+4      	; 0x2794 <_ZN7TwoWire4readEv+0x24>
    2790:	2f ef       	ldi	r18, 0xFF	; 255
    2792:	3f ef       	ldi	r19, 0xFF	; 255
    2794:	c9 01       	movw	r24, r18
    2796:	08 95       	ret

00002798 <_ZN7TwoWire4peekEv>:
    2798:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <_ZN7TwoWire13rxBufferIndexE>
    279c:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <_ZN7TwoWire14rxBufferLengthE>
    27a0:	e8 17       	cp	r30, r24
    27a2:	30 f4       	brcc	.+12     	; 0x27b0 <_ZN7TwoWire4peekEv+0x18>
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	e8 50       	subi	r30, 0x08	; 8
    27a8:	fc 4f       	sbci	r31, 0xFC	; 252
    27aa:	80 81       	ld	r24, Z
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	08 95       	ret
    27b0:	8f ef       	ldi	r24, 0xFF	; 255
    27b2:	9f ef       	ldi	r25, 0xFF	; 255
    27b4:	08 95       	ret

000027b6 <_ZN7TwoWire5flushEv>:
    27b6:	08 95       	ret

000027b8 <_ZN7TwoWire5writeEPKhj>:
    27b8:	cf 92       	push	r12
    27ba:	df 92       	push	r13
    27bc:	ef 92       	push	r14
    27be:	ff 92       	push	r15
    27c0:	0f 93       	push	r16
    27c2:	1f 93       	push	r17
    27c4:	cf 93       	push	r28
    27c6:	df 93       	push	r29
    27c8:	8c 01       	movw	r16, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	6a 01       	movw	r12, r20
    27ce:	20 91 d2 03 	lds	r18, 0x03D2	; 0x8003d2 <_ZN7TwoWire12transmittingE>
    27d2:	22 23       	and	r18, r18
    27d4:	a1 f0       	breq	.+40     	; 0x27fe <_ZN7TwoWire5writeEPKhj+0x46>
    27d6:	41 15       	cp	r20, r1
    27d8:	51 05       	cpc	r21, r1
    27da:	a1 f0       	breq	.+40     	; 0x2804 <_ZN7TwoWire5writeEPKhj+0x4c>
    27dc:	eb 01       	movw	r28, r22
    27de:	7b 01       	movw	r14, r22
    27e0:	e4 0e       	add	r14, r20
    27e2:	f5 1e       	adc	r15, r21
    27e4:	69 91       	ld	r22, Y+
    27e6:	d8 01       	movw	r26, r16
    27e8:	ed 91       	ld	r30, X+
    27ea:	fc 91       	ld	r31, X
    27ec:	01 90       	ld	r0, Z+
    27ee:	f0 81       	ld	r31, Z
    27f0:	e0 2d       	mov	r30, r0
    27f2:	c8 01       	movw	r24, r16
    27f4:	09 95       	icall
    27f6:	ce 15       	cp	r28, r14
    27f8:	df 05       	cpc	r29, r15
    27fa:	a1 f7       	brne	.-24     	; 0x27e4 <_ZN7TwoWire5writeEPKhj+0x2c>
    27fc:	03 c0       	rjmp	.+6      	; 0x2804 <_ZN7TwoWire5writeEPKhj+0x4c>
    27fe:	64 2f       	mov	r22, r20
    2800:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <twi_transmit>
    2804:	c6 01       	movw	r24, r12
    2806:	df 91       	pop	r29
    2808:	cf 91       	pop	r28
    280a:	1f 91       	pop	r17
    280c:	0f 91       	pop	r16
    280e:	ff 90       	pop	r15
    2810:	ef 90       	pop	r14
    2812:	df 90       	pop	r13
    2814:	cf 90       	pop	r12
    2816:	08 95       	ret

00002818 <_ZN7TwoWire5writeEh>:
    2818:	cf 93       	push	r28
    281a:	df 93       	push	r29
    281c:	1f 92       	push	r1
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
    2822:	fc 01       	movw	r30, r24
    2824:	69 83       	std	Y+1, r22	; 0x01
    2826:	90 91 d2 03 	lds	r25, 0x03D2	; 0x8003d2 <_ZN7TwoWire12transmittingE>
    282a:	99 23       	and	r25, r25
    282c:	d9 f0       	breq	.+54     	; 0x2864 <_ZN7TwoWire5writeEh+0x4c>
    282e:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <_ZN7TwoWire14txBufferLengthE>
    2832:	90 32       	cpi	r25, 0x20	; 32
    2834:	38 f0       	brcs	.+14     	; 0x2844 <_ZN7TwoWire5writeEh+0x2c>
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	93 83       	std	Z+3, r25	; 0x03
    283c:	82 83       	std	Z+2, r24	; 0x02
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	17 c0       	rjmp	.+46     	; 0x2872 <_ZN7TwoWire5writeEh+0x5a>
    2844:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <_ZN7TwoWire13txBufferIndexE>
    2848:	e8 2f       	mov	r30, r24
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	eb 52       	subi	r30, 0x2B	; 43
    284e:	fc 4f       	sbci	r31, 0xFC	; 252
    2850:	99 81       	ldd	r25, Y+1	; 0x01
    2852:	90 83       	st	Z, r25
    2854:	8f 5f       	subi	r24, 0xFF	; 255
    2856:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <_ZN7TwoWire13txBufferIndexE>
    285a:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <_ZN7TwoWire14txBufferLengthE>
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	07 c0       	rjmp	.+14     	; 0x2872 <_ZN7TwoWire5writeEh+0x5a>
    2864:	61 e0       	ldi	r22, 0x01	; 1
    2866:	ce 01       	movw	r24, r28
    2868:	01 96       	adiw	r24, 0x01	; 1
    286a:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <twi_transmit>
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	0f 90       	pop	r0
    2874:	df 91       	pop	r29
    2876:	cf 91       	pop	r28
    2878:	08 95       	ret

0000287a <_ZN7TwoWireC1Ev>:
    287a:	fc 01       	movw	r30, r24
    287c:	13 82       	std	Z+3, r1	; 0x03
    287e:	12 82       	std	Z+2, r1	; 0x02
    2880:	88 ee       	ldi	r24, 0xE8	; 232
    2882:	93 e0       	ldi	r25, 0x03	; 3
    2884:	a0 e0       	ldi	r26, 0x00	; 0
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	84 83       	std	Z+4, r24	; 0x04
    288a:	95 83       	std	Z+5, r25	; 0x05
    288c:	a6 83       	std	Z+6, r26	; 0x06
    288e:	b7 83       	std	Z+7, r27	; 0x07
    2890:	8c e8       	ldi	r24, 0x8C	; 140
    2892:	92 e0       	ldi	r25, 0x02	; 2
    2894:	91 83       	std	Z+1, r25	; 0x01
    2896:	80 83       	st	Z, r24
    2898:	08 95       	ret

0000289a <_ZN7TwoWire5beginEv>:
    289a:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <_ZN7TwoWire13rxBufferIndexE>
    289e:	10 92 f6 03 	sts	0x03F6, r1	; 0x8003f6 <_ZN7TwoWire14rxBufferLengthE>
    28a2:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <_ZN7TwoWire13txBufferIndexE>
    28a6:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <_ZN7TwoWire14txBufferLengthE>
    28aa:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <twi_init>
    28ae:	08 95       	ret

000028b0 <_ZN7TwoWire17beginTransmissionEh>:
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <_ZN7TwoWire12transmittingE>
    28b6:	60 93 f5 03 	sts	0x03F5, r22	; 0x8003f5 <_ZN7TwoWire9txAddressE>
    28ba:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <_ZN7TwoWire13txBufferIndexE>
    28be:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <_ZN7TwoWire14txBufferLengthE>
    28c2:	08 95       	ret

000028c4 <_ZN7TwoWire17beginTransmissionEi>:
    28c4:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_ZN7TwoWire17beginTransmissionEh>
    28c8:	08 95       	ret

000028ca <_ZN7TwoWire15endTransmissionEh>:
    28ca:	0f 93       	push	r16
    28cc:	06 2f       	mov	r16, r22
    28ce:	21 e0       	ldi	r18, 0x01	; 1
    28d0:	40 91 d3 03 	lds	r20, 0x03D3	; 0x8003d3 <_ZN7TwoWire14txBufferLengthE>
    28d4:	65 ed       	ldi	r22, 0xD5	; 213
    28d6:	73 e0       	ldi	r23, 0x03	; 3
    28d8:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <_ZN7TwoWire9txAddressE>
    28dc:	0e 94 08 17 	call	0x2e10	; 0x2e10 <twi_writeTo>
    28e0:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <_ZN7TwoWire13txBufferIndexE>
    28e4:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <_ZN7TwoWire14txBufferLengthE>
    28e8:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <_ZN7TwoWire12transmittingE>
    28ec:	0f 91       	pop	r16
    28ee:	08 95       	ret

000028f0 <_ZN7TwoWire11requestFromEhhmhh>:
    28f0:	4f 92       	push	r4
    28f2:	5f 92       	push	r5
    28f4:	6f 92       	push	r6
    28f6:	7f 92       	push	r7
    28f8:	af 92       	push	r10
    28fa:	bf 92       	push	r11
    28fc:	cf 92       	push	r12
    28fe:	ef 92       	push	r14
    2900:	ff 92       	push	r15
    2902:	0f 93       	push	r16
    2904:	1f 93       	push	r17
    2906:	cf 93       	push	r28
    2908:	df 93       	push	r29
    290a:	5c 01       	movw	r10, r24
    290c:	f6 2e       	mov	r15, r22
    290e:	d4 2f       	mov	r29, r20
    2910:	28 01       	movw	r4, r16
    2912:	39 01       	movw	r6, r18
    2914:	ee 20       	and	r14, r14
    2916:	49 f1       	breq	.+82     	; 0x296a <_ZN7TwoWire11requestFromEhhmhh+0x7a>
    2918:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_ZN7TwoWire17beginTransmissionEh>
    291c:	8e 2d       	mov	r24, r14
    291e:	84 30       	cpi	r24, 0x04	; 4
    2920:	08 f0       	brcs	.+2      	; 0x2924 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2922:	83 e0       	ldi	r24, 0x03	; 3
    2924:	cf ef       	ldi	r28, 0xFF	; 255
    2926:	c8 0f       	add	r28, r24
    2928:	88 23       	and	r24, r24
    292a:	d9 f0       	breq	.+54     	; 0x2962 <_ZN7TwoWire11requestFromEhhmhh+0x72>
    292c:	d5 01       	movw	r26, r10
    292e:	ed 91       	ld	r30, X+
    2930:	fc 91       	ld	r31, X
    2932:	8c 2f       	mov	r24, r28
    2934:	88 0f       	add	r24, r24
    2936:	88 0f       	add	r24, r24
    2938:	88 0f       	add	r24, r24
    293a:	a3 01       	movw	r20, r6
    293c:	92 01       	movw	r18, r4
    293e:	04 c0       	rjmp	.+8      	; 0x2948 <_ZN7TwoWire11requestFromEhhmhh+0x58>
    2940:	56 95       	lsr	r21
    2942:	47 95       	ror	r20
    2944:	37 95       	ror	r19
    2946:	27 95       	ror	r18
    2948:	8a 95       	dec	r24
    294a:	d2 f7       	brpl	.-12     	; 0x2940 <_ZN7TwoWire11requestFromEhhmhh+0x50>
    294c:	ca 01       	movw	r24, r20
    294e:	b9 01       	movw	r22, r18
    2950:	01 90       	ld	r0, Z+
    2952:	f0 81       	ld	r31, Z
    2954:	e0 2d       	mov	r30, r0
    2956:	c5 01       	movw	r24, r10
    2958:	09 95       	icall
    295a:	9c 2f       	mov	r25, r28
    295c:	c1 50       	subi	r28, 0x01	; 1
    295e:	91 11       	cpse	r25, r1
    2960:	e5 cf       	rjmp	.-54     	; 0x292c <_ZN7TwoWire11requestFromEhhmhh+0x3c>
    2962:	60 e0       	ldi	r22, 0x00	; 0
    2964:	c5 01       	movw	r24, r10
    2966:	0e 94 65 14 	call	0x28ca	; 0x28ca <_ZN7TwoWire15endTransmissionEh>
    296a:	4d 2f       	mov	r20, r29
    296c:	d1 32       	cpi	r29, 0x21	; 33
    296e:	08 f0       	brcs	.+2      	; 0x2972 <_ZN7TwoWire11requestFromEhhmhh+0x82>
    2970:	40 e2       	ldi	r20, 0x20	; 32
    2972:	2c 2d       	mov	r18, r12
    2974:	68 ef       	ldi	r22, 0xF8	; 248
    2976:	73 e0       	ldi	r23, 0x03	; 3
    2978:	8f 2d       	mov	r24, r15
    297a:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <twi_readFrom>
    297e:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <_ZN7TwoWire13rxBufferIndexE>
    2982:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <_ZN7TwoWire14rxBufferLengthE>
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	1f 91       	pop	r17
    298c:	0f 91       	pop	r16
    298e:	ff 90       	pop	r15
    2990:	ef 90       	pop	r14
    2992:	cf 90       	pop	r12
    2994:	bf 90       	pop	r11
    2996:	af 90       	pop	r10
    2998:	7f 90       	pop	r7
    299a:	6f 90       	pop	r6
    299c:	5f 90       	pop	r5
    299e:	4f 90       	pop	r4
    29a0:	08 95       	ret

000029a2 <_ZN7TwoWire11requestFromEhhh>:
    29a2:	cf 92       	push	r12
    29a4:	ef 92       	push	r14
    29a6:	0f 93       	push	r16
    29a8:	1f 93       	push	r17
    29aa:	c2 2e       	mov	r12, r18
    29ac:	e1 2c       	mov	r14, r1
    29ae:	00 e0       	ldi	r16, 0x00	; 0
    29b0:	10 e0       	ldi	r17, 0x00	; 0
    29b2:	98 01       	movw	r18, r16
    29b4:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_ZN7TwoWire11requestFromEhhmhh>
    29b8:	1f 91       	pop	r17
    29ba:	0f 91       	pop	r16
    29bc:	ef 90       	pop	r14
    29be:	cf 90       	pop	r12
    29c0:	08 95       	ret

000029c2 <_ZN7TwoWire11requestFromEhh>:
    29c2:	21 e0       	ldi	r18, 0x01	; 1
    29c4:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <_ZN7TwoWire11requestFromEhhh>
    29c8:	08 95       	ret

000029ca <_ZN7TwoWire11requestFromEii>:
    29ca:	21 e0       	ldi	r18, 0x01	; 1
    29cc:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <_ZN7TwoWire11requestFromEhhh>
    29d0:	08 95       	ret

000029d2 <_ZN7TwoWire15endTransmissionEv>:
    29d2:	61 e0       	ldi	r22, 0x01	; 1
    29d4:	0e 94 65 14 	call	0x28ca	; 0x28ca <_ZN7TwoWire15endTransmissionEh>
    29d8:	08 95       	ret

000029da <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    29da:	86 ec       	ldi	r24, 0xC6	; 198
    29dc:	93 e0       	ldi	r25, 0x03	; 3
    29de:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN7TwoWireC1Ev>
    29e2:	08 95       	ret

000029e4 <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    29e4:	1f 92       	push	r1
    29e6:	0f 92       	push	r0
    29e8:	0f b6       	in	r0, 0x3f	; 63
    29ea:	0f 92       	push	r0
    29ec:	11 24       	eor	r1, r1
    29ee:	2f 93       	push	r18
    29f0:	3f 93       	push	r19
    29f2:	8f 93       	push	r24
    29f4:	9f 93       	push	r25
    29f6:	af 93       	push	r26
    29f8:	bf 93       	push	r27
    29fa:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <timer0_millis>
    29fe:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <timer0_millis+0x1>
    2a02:	a0 91 1b 04 	lds	r26, 0x041B	; 0x80041b <timer0_millis+0x2>
    2a06:	b0 91 1c 04 	lds	r27, 0x041C	; 0x80041c <timer0_millis+0x3>
    2a0a:	30 91 18 04 	lds	r19, 0x0418	; 0x800418 <timer0_fract>
    2a0e:	23 e0       	ldi	r18, 0x03	; 3
    2a10:	23 0f       	add	r18, r19
    2a12:	2d 37       	cpi	r18, 0x7D	; 125
    2a14:	20 f4       	brcc	.+8      	; 0x2a1e <__vector_16+0x3a>
    2a16:	01 96       	adiw	r24, 0x01	; 1
    2a18:	a1 1d       	adc	r26, r1
    2a1a:	b1 1d       	adc	r27, r1
    2a1c:	05 c0       	rjmp	.+10     	; 0x2a28 <__vector_16+0x44>
    2a1e:	26 e8       	ldi	r18, 0x86	; 134
    2a20:	23 0f       	add	r18, r19
    2a22:	02 96       	adiw	r24, 0x02	; 2
    2a24:	a1 1d       	adc	r26, r1
    2a26:	b1 1d       	adc	r27, r1
    2a28:	20 93 18 04 	sts	0x0418, r18	; 0x800418 <timer0_fract>
    2a2c:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <timer0_millis>
    2a30:	90 93 1a 04 	sts	0x041A, r25	; 0x80041a <timer0_millis+0x1>
    2a34:	a0 93 1b 04 	sts	0x041B, r26	; 0x80041b <timer0_millis+0x2>
    2a38:	b0 93 1c 04 	sts	0x041C, r27	; 0x80041c <timer0_millis+0x3>
    2a3c:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <timer0_overflow_count>
    2a40:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <timer0_overflow_count+0x1>
    2a44:	a0 91 1f 04 	lds	r26, 0x041F	; 0x80041f <timer0_overflow_count+0x2>
    2a48:	b0 91 20 04 	lds	r27, 0x0420	; 0x800420 <timer0_overflow_count+0x3>
    2a4c:	01 96       	adiw	r24, 0x01	; 1
    2a4e:	a1 1d       	adc	r26, r1
    2a50:	b1 1d       	adc	r27, r1
    2a52:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <timer0_overflow_count>
    2a56:	90 93 1e 04 	sts	0x041E, r25	; 0x80041e <timer0_overflow_count+0x1>
    2a5a:	a0 93 1f 04 	sts	0x041F, r26	; 0x80041f <timer0_overflow_count+0x2>
    2a5e:	b0 93 20 04 	sts	0x0420, r27	; 0x800420 <timer0_overflow_count+0x3>
    2a62:	bf 91       	pop	r27
    2a64:	af 91       	pop	r26
    2a66:	9f 91       	pop	r25
    2a68:	8f 91       	pop	r24
    2a6a:	3f 91       	pop	r19
    2a6c:	2f 91       	pop	r18
    2a6e:	0f 90       	pop	r0
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	0f 90       	pop	r0
    2a74:	1f 90       	pop	r1
    2a76:	18 95       	reti

00002a78 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2a78:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2a7a:	f8 94       	cli
	m = timer0_overflow_count;
    2a7c:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <timer0_overflow_count>
    2a80:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <timer0_overflow_count+0x1>
    2a84:	a0 91 1f 04 	lds	r26, 0x041F	; 0x80041f <timer0_overflow_count+0x2>
    2a88:	b0 91 20 04 	lds	r27, 0x0420	; 0x800420 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    2a8c:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2a8e:	a8 9b       	sbis	0x15, 0	; 21
    2a90:	05 c0       	rjmp	.+10     	; 0x2a9c <micros+0x24>
    2a92:	2f 3f       	cpi	r18, 0xFF	; 255
    2a94:	19 f0       	breq	.+6      	; 0x2a9c <micros+0x24>
		m++;
    2a96:	01 96       	adiw	r24, 0x01	; 1
    2a98:	a1 1d       	adc	r26, r1
    2a9a:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2a9c:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2a9e:	ba 2f       	mov	r27, r26
    2aa0:	a9 2f       	mov	r26, r25
    2aa2:	98 2f       	mov	r25, r24
    2aa4:	88 27       	eor	r24, r24
    2aa6:	82 0f       	add	r24, r18
    2aa8:	91 1d       	adc	r25, r1
    2aaa:	a1 1d       	adc	r26, r1
    2aac:	b1 1d       	adc	r27, r1
    2aae:	bc 01       	movw	r22, r24
    2ab0:	cd 01       	movw	r24, r26
    2ab2:	42 e0       	ldi	r20, 0x02	; 2
    2ab4:	66 0f       	add	r22, r22
    2ab6:	77 1f       	adc	r23, r23
    2ab8:	88 1f       	adc	r24, r24
    2aba:	99 1f       	adc	r25, r25
    2abc:	4a 95       	dec	r20
    2abe:	d1 f7       	brne	.-12     	; 0x2ab4 <micros+0x3c>
}
    2ac0:	08 95       	ret

00002ac2 <delay>:

void delay(unsigned long ms)
{
    2ac2:	8f 92       	push	r8
    2ac4:	9f 92       	push	r9
    2ac6:	af 92       	push	r10
    2ac8:	bf 92       	push	r11
    2aca:	cf 92       	push	r12
    2acc:	df 92       	push	r13
    2ace:	ef 92       	push	r14
    2ad0:	ff 92       	push	r15
    2ad2:	6b 01       	movw	r12, r22
    2ad4:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    2ad6:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <micros>
    2ada:	4b 01       	movw	r8, r22
    2adc:	5c 01       	movw	r10, r24

	while (ms > 0) {
    2ade:	c1 14       	cp	r12, r1
    2ae0:	d1 04       	cpc	r13, r1
    2ae2:	e1 04       	cpc	r14, r1
    2ae4:	f1 04       	cpc	r15, r1
    2ae6:	01 f1       	breq	.+64     	; 0x2b28 <delay+0x66>
		yield();
    2ae8:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    2aec:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <micros>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	88 19       	sub	r24, r8
    2af6:	99 09       	sbc	r25, r9
    2af8:	aa 09       	sbc	r26, r10
    2afa:	bb 09       	sbc	r27, r11
    2afc:	88 3e       	cpi	r24, 0xE8	; 232
    2afe:	93 40       	sbci	r25, 0x03	; 3
    2b00:	a1 05       	cpc	r26, r1
    2b02:	b1 05       	cpc	r27, r1
    2b04:	60 f3       	brcs	.-40     	; 0x2ade <delay+0x1c>
			ms--;
    2b06:	21 e0       	ldi	r18, 0x01	; 1
    2b08:	c2 1a       	sub	r12, r18
    2b0a:	d1 08       	sbc	r13, r1
    2b0c:	e1 08       	sbc	r14, r1
    2b0e:	f1 08       	sbc	r15, r1
			start += 1000;
    2b10:	88 ee       	ldi	r24, 0xE8	; 232
    2b12:	88 0e       	add	r8, r24
    2b14:	83 e0       	ldi	r24, 0x03	; 3
    2b16:	98 1e       	adc	r9, r24
    2b18:	a1 1c       	adc	r10, r1
    2b1a:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2b1c:	c1 14       	cp	r12, r1
    2b1e:	d1 04       	cpc	r13, r1
    2b20:	e1 04       	cpc	r14, r1
    2b22:	f1 04       	cpc	r15, r1
    2b24:	19 f7       	brne	.-58     	; 0x2aec <delay+0x2a>
    2b26:	db cf       	rjmp	.-74     	; 0x2ade <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    2b28:	ff 90       	pop	r15
    2b2a:	ef 90       	pop	r14
    2b2c:	df 90       	pop	r13
    2b2e:	cf 90       	pop	r12
    2b30:	bf 90       	pop	r11
    2b32:	af 90       	pop	r10
    2b34:	9f 90       	pop	r9
    2b36:	8f 90       	pop	r8
    2b38:	08 95       	ret

00002b3a <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2b3a:	82 30       	cpi	r24, 0x02	; 2
    2b3c:	91 05       	cpc	r25, r1
    2b3e:	38 f0       	brcs	.+14     	; 0x2b4e <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    2b40:	88 0f       	add	r24, r24
    2b42:	99 1f       	adc	r25, r25
    2b44:	88 0f       	add	r24, r24
    2b46:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    2b48:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	f1 f7       	brne	.-4      	; 0x2b4a <delayMicroseconds+0x10>
    2b4e:	08 95       	ret

00002b50 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2b50:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2b52:	84 b5       	in	r24, 0x24	; 36
    2b54:	82 60       	ori	r24, 0x02	; 2
    2b56:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2b58:	84 b5       	in	r24, 0x24	; 36
    2b5a:	81 60       	ori	r24, 0x01	; 1
    2b5c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2b5e:	85 b5       	in	r24, 0x25	; 37
    2b60:	82 60       	ori	r24, 0x02	; 2
    2b62:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2b64:	85 b5       	in	r24, 0x25	; 37
    2b66:	81 60       	ori	r24, 0x01	; 1
    2b68:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2b6a:	ee e6       	ldi	r30, 0x6E	; 110
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	80 81       	ld	r24, Z
    2b70:	81 60       	ori	r24, 0x01	; 1
    2b72:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2b74:	e1 e8       	ldi	r30, 0x81	; 129
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2b7a:	80 81       	ld	r24, Z
    2b7c:	82 60       	ori	r24, 0x02	; 2
    2b7e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2b80:	80 81       	ld	r24, Z
    2b82:	81 60       	ori	r24, 0x01	; 1
    2b84:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2b86:	e0 e8       	ldi	r30, 0x80	; 128
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	80 81       	ld	r24, Z
    2b8c:	81 60       	ori	r24, 0x01	; 1
    2b8e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2b90:	e1 eb       	ldi	r30, 0xB1	; 177
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	80 81       	ld	r24, Z
    2b96:	84 60       	ori	r24, 0x04	; 4
    2b98:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2b9a:	e0 eb       	ldi	r30, 0xB0	; 176
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	80 81       	ld	r24, Z
    2ba0:	81 60       	ori	r24, 0x01	; 1
    2ba2:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2ba4:	ea e7       	ldi	r30, 0x7A	; 122
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	80 81       	ld	r24, Z
    2baa:	84 60       	ori	r24, 0x04	; 4
    2bac:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2bae:	80 81       	ld	r24, Z
    2bb0:	82 60       	ori	r24, 0x02	; 2
    2bb2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2bb4:	80 81       	ld	r24, Z
    2bb6:	81 60       	ori	r24, 0x01	; 1
    2bb8:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2bba:	80 81       	ld	r24, Z
    2bbc:	80 68       	ori	r24, 0x80	; 128
    2bbe:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2bc0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2bc4:	08 95       	ret

00002bc6 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2bc6:	83 30       	cpi	r24, 0x03	; 3
    2bc8:	81 f0       	breq	.+32     	; 0x2bea <turnOffPWM+0x24>
    2bca:	28 f4       	brcc	.+10     	; 0x2bd6 <turnOffPWM+0x10>
    2bcc:	81 30       	cpi	r24, 0x01	; 1
    2bce:	99 f0       	breq	.+38     	; 0x2bf6 <turnOffPWM+0x30>
    2bd0:	82 30       	cpi	r24, 0x02	; 2
    2bd2:	a1 f0       	breq	.+40     	; 0x2bfc <turnOffPWM+0x36>
    2bd4:	08 95       	ret
    2bd6:	87 30       	cpi	r24, 0x07	; 7
    2bd8:	a9 f0       	breq	.+42     	; 0x2c04 <turnOffPWM+0x3e>
    2bda:	88 30       	cpi	r24, 0x08	; 8
    2bdc:	b9 f0       	breq	.+46     	; 0x2c0c <turnOffPWM+0x46>
    2bde:	84 30       	cpi	r24, 0x04	; 4
    2be0:	d1 f4       	brne	.+52     	; 0x2c16 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2be2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2be6:	8f 7d       	andi	r24, 0xDF	; 223
    2be8:	03 c0       	rjmp	.+6      	; 0x2bf0 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2bea:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2bee:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2bf0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2bf4:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2bf6:	84 b5       	in	r24, 0x24	; 36
    2bf8:	8f 77       	andi	r24, 0x7F	; 127
    2bfa:	02 c0       	rjmp	.+4      	; 0x2c00 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2bfc:	84 b5       	in	r24, 0x24	; 36
    2bfe:	8f 7d       	andi	r24, 0xDF	; 223
    2c00:	84 bd       	out	0x24, r24	; 36
    2c02:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2c04:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2c08:	8f 77       	andi	r24, 0x7F	; 127
    2c0a:	03 c0       	rjmp	.+6      	; 0x2c12 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2c0c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2c10:	8f 7d       	andi	r24, 0xDF	; 223
    2c12:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2c16:	08 95       	ret

00002c18 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2c18:	cf 93       	push	r28
    2c1a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	fc 01       	movw	r30, r24
    2c20:	e4 5e       	subi	r30, 0xE4	; 228
    2c22:	fe 4f       	sbci	r31, 0xFE	; 254
    2c24:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2c26:	fc 01       	movw	r30, r24
    2c28:	e0 5d       	subi	r30, 0xD0	; 208
    2c2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c2c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2c2e:	88 23       	and	r24, r24
    2c30:	61 f1       	breq	.+88     	; 0x2c8a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	88 0f       	add	r24, r24
    2c36:	99 1f       	adc	r25, r25
    2c38:	fc 01       	movw	r30, r24
    2c3a:	e8 5a       	subi	r30, 0xA8	; 168
    2c3c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c3e:	c5 91       	lpm	r28, Z+
    2c40:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2c42:	fc 01       	movw	r30, r24
    2c44:	e2 5b       	subi	r30, 0xB2	; 178
    2c46:	fe 4f       	sbci	r31, 0xFE	; 254
    2c48:	a5 91       	lpm	r26, Z+
    2c4a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2c4c:	61 11       	cpse	r22, r1
    2c4e:	09 c0       	rjmp	.+18     	; 0x2c62 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2c50:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2c52:	f8 94       	cli
		*reg &= ~bit;
    2c54:	88 81       	ld	r24, Y
    2c56:	20 95       	com	r18
    2c58:	82 23       	and	r24, r18
    2c5a:	88 83       	st	Y, r24
		*out &= ~bit;
    2c5c:	ec 91       	ld	r30, X
    2c5e:	2e 23       	and	r18, r30
    2c60:	0b c0       	rjmp	.+22     	; 0x2c78 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2c62:	62 30       	cpi	r22, 0x02	; 2
    2c64:	61 f4       	brne	.+24     	; 0x2c7e <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2c66:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2c68:	f8 94       	cli
		*reg &= ~bit;
    2c6a:	38 81       	ld	r19, Y
    2c6c:	82 2f       	mov	r24, r18
    2c6e:	80 95       	com	r24
    2c70:	83 23       	and	r24, r19
    2c72:	88 83       	st	Y, r24
		*out |= bit;
    2c74:	ec 91       	ld	r30, X
    2c76:	2e 2b       	or	r18, r30
    2c78:	2c 93       	st	X, r18
		SREG = oldSREG;
    2c7a:	9f bf       	out	0x3f, r25	; 63
    2c7c:	06 c0       	rjmp	.+12     	; 0x2c8a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2c7e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2c80:	f8 94       	cli
		*reg |= bit;
    2c82:	e8 81       	ld	r30, Y
    2c84:	2e 2b       	or	r18, r30
    2c86:	28 83       	st	Y, r18
		SREG = oldSREG;
    2c88:	8f bf       	out	0x3f, r24	; 63
	}
}
    2c8a:	df 91       	pop	r29
    2c8c:	cf 91       	pop	r28
    2c8e:	08 95       	ret

00002c90 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2c90:	1f 93       	push	r17
    2c92:	cf 93       	push	r28
    2c94:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2c96:	28 2f       	mov	r18, r24
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	f9 01       	movw	r30, r18
    2c9c:	e8 5f       	subi	r30, 0xF8	; 248
    2c9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2ca0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2ca2:	f9 01       	movw	r30, r18
    2ca4:	e4 5e       	subi	r30, 0xE4	; 228
    2ca6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ca8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2caa:	f9 01       	movw	r30, r18
    2cac:	e0 5d       	subi	r30, 0xD0	; 208
    2cae:	fe 4f       	sbci	r31, 0xFE	; 254
    2cb0:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2cb2:	cc 23       	and	r28, r28
    2cb4:	c9 f0       	breq	.+50     	; 0x2ce8 <digitalWrite+0x58>
    2cb6:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2cb8:	81 11       	cpse	r24, r1
    2cba:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <turnOffPWM>

	out = portOutputRegister(port);
    2cbe:	ec 2f       	mov	r30, r28
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	ee 0f       	add	r30, r30
    2cc4:	ff 1f       	adc	r31, r31
    2cc6:	e2 5b       	subi	r30, 0xB2	; 178
    2cc8:	fe 4f       	sbci	r31, 0xFE	; 254
    2cca:	a5 91       	lpm	r26, Z+
    2ccc:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2cce:	8f b7       	in	r24, 0x3f	; 63
	cli();
    2cd0:	f8 94       	cli

	if (val == LOW) {
    2cd2:	11 11       	cpse	r17, r1
    2cd4:	05 c0       	rjmp	.+10     	; 0x2ce0 <digitalWrite+0x50>
		*out &= ~bit;
    2cd6:	9c 91       	ld	r25, X
    2cd8:	ed 2f       	mov	r30, r29
    2cda:	e0 95       	com	r30
    2cdc:	e9 23       	and	r30, r25
    2cde:	02 c0       	rjmp	.+4      	; 0x2ce4 <digitalWrite+0x54>
	} else {
		*out |= bit;
    2ce0:	ec 91       	ld	r30, X
    2ce2:	ed 2b       	or	r30, r29
    2ce4:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    2ce6:	8f bf       	out	0x3f, r24	; 63
}
    2ce8:	df 91       	pop	r29
    2cea:	cf 91       	pop	r28
    2cec:	1f 91       	pop	r17
    2cee:	08 95       	ret

00002cf0 <digitalRead>:

int digitalRead(uint8_t pin)
{
    2cf0:	cf 93       	push	r28
    2cf2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2cf4:	28 2f       	mov	r18, r24
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	f9 01       	movw	r30, r18
    2cfa:	e8 5f       	subi	r30, 0xF8	; 248
    2cfc:	fe 4f       	sbci	r31, 0xFE	; 254
    2cfe:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2d00:	f9 01       	movw	r30, r18
    2d02:	e4 5e       	subi	r30, 0xE4	; 228
    2d04:	fe 4f       	sbci	r31, 0xFE	; 254
    2d06:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2d08:	f9 01       	movw	r30, r18
    2d0a:	e0 5d       	subi	r30, 0xD0	; 208
    2d0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d0e:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    2d10:	cc 23       	and	r28, r28
    2d12:	91 f0       	breq	.+36     	; 0x2d38 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2d14:	81 11       	cpse	r24, r1
    2d16:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    2d1a:	ec 2f       	mov	r30, r28
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	ee 0f       	add	r30, r30
    2d20:	ff 1f       	adc	r31, r31
    2d22:	ec 5b       	subi	r30, 0xBC	; 188
    2d24:	fe 4f       	sbci	r31, 0xFE	; 254
    2d26:	a5 91       	lpm	r26, Z+
    2d28:	b4 91       	lpm	r27, Z
    2d2a:	ec 91       	ld	r30, X
    2d2c:	ed 23       	and	r30, r29
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	21 f4       	brne	.+8      	; 0x2d3c <digitalRead+0x4c>
    2d34:	80 e0       	ldi	r24, 0x00	; 0
    2d36:	02 c0       	rjmp	.+4      	; 0x2d3c <digitalRead+0x4c>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    2d38:	80 e0       	ldi	r24, 0x00	; 0
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2d3c:	df 91       	pop	r29
    2d3e:	cf 91       	pop	r28
    2d40:	08 95       	ret

00002d42 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2d42:	08 95       	ret

00002d44 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2d44:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <twi_state>
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <twi_sendStop>
    2d4e:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <twi_inRepStart>
    2d52:	61 e0       	ldi	r22, 0x01	; 1
    2d54:	82 e1       	ldi	r24, 0x12	; 18
    2d56:	0e 94 48 16 	call	0x2c90	; 0x2c90 <digitalWrite>
    2d5a:	61 e0       	ldi	r22, 0x01	; 1
    2d5c:	83 e1       	ldi	r24, 0x13	; 19
    2d5e:	0e 94 48 16 	call	0x2c90	; 0x2c90 <digitalWrite>
    2d62:	e9 eb       	ldi	r30, 0xB9	; 185
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	80 81       	ld	r24, Z
    2d68:	8e 7f       	andi	r24, 0xFE	; 254
    2d6a:	80 83       	st	Z, r24
    2d6c:	80 81       	ld	r24, Z
    2d6e:	8d 7f       	andi	r24, 0xFD	; 253
    2d70:	80 83       	st	Z, r24
    2d72:	88 e4       	ldi	r24, 0x48	; 72
    2d74:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2d78:	85 e4       	ldi	r24, 0x45	; 69
    2d7a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2d7e:	08 95       	ret

00002d80 <twi_readFrom>:
    2d80:	41 32       	cpi	r20, 0x21	; 33
    2d82:	08 f0       	brcs	.+2      	; 0x2d86 <twi_readFrom+0x6>
    2d84:	43 c0       	rjmp	.+134    	; 0x2e0c <twi_readFrom+0x8c>
    2d86:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <twi_state>
    2d8a:	91 11       	cpse	r25, r1
    2d8c:	fc cf       	rjmp	.-8      	; 0x2d86 <twi_readFrom+0x6>
    2d8e:	91 e0       	ldi	r25, 0x01	; 1
    2d90:	90 93 8e 04 	sts	0x048E, r25	; 0x80048e <twi_state>
    2d94:	20 93 8c 04 	sts	0x048C, r18	; 0x80048c <twi_sendStop>
    2d98:	2f ef       	ldi	r18, 0xFF	; 255
    2d9a:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <twi_error>
    2d9e:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <twi_masterBufferIndex>
    2da2:	24 0f       	add	r18, r20
    2da4:	20 93 65 04 	sts	0x0465, r18	; 0x800465 <twi_masterBufferLength>
    2da8:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <twi_slarw>
    2dac:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <twi_slarw>
    2db0:	88 0f       	add	r24, r24
    2db2:	89 2b       	or	r24, r25
    2db4:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <twi_slarw>
    2db8:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <twi_inRepStart>
    2dbc:	81 30       	cpi	r24, 0x01	; 1
    2dbe:	61 f4       	brne	.+24     	; 0x2dd8 <twi_readFrom+0x58>
    2dc0:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <twi_inRepStart>
    2dc4:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <twi_slarw>
    2dc8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2dcc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2dd0:	83 fd       	sbrc	r24, 3
    2dd2:	f8 cf       	rjmp	.-16     	; 0x2dc4 <twi_readFrom+0x44>
    2dd4:	85 ec       	ldi	r24, 0xC5	; 197
    2dd6:	01 c0       	rjmp	.+2      	; 0x2dda <twi_readFrom+0x5a>
    2dd8:	85 ee       	ldi	r24, 0xE5	; 229
    2dda:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2dde:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <twi_state>
    2de2:	81 30       	cpi	r24, 0x01	; 1
    2de4:	e1 f3       	breq	.-8      	; 0x2dde <twi_readFrom+0x5e>
    2de6:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <twi_masterBufferIndex>
    2dea:	84 17       	cp	r24, r20
    2dec:	10 f4       	brcc	.+4      	; 0x2df2 <twi_readFrom+0x72>
    2dee:	40 91 66 04 	lds	r20, 0x0466	; 0x800466 <twi_masterBufferIndex>
    2df2:	27 e6       	ldi	r18, 0x67	; 103
    2df4:	34 e0       	ldi	r19, 0x04	; 4
    2df6:	fb 01       	movw	r30, r22
    2df8:	d9 01       	movw	r26, r18
    2dfa:	8a 2f       	mov	r24, r26
    2dfc:	82 1b       	sub	r24, r18
    2dfe:	84 17       	cp	r24, r20
    2e00:	18 f4       	brcc	.+6      	; 0x2e08 <twi_readFrom+0x88>
    2e02:	8d 91       	ld	r24, X+
    2e04:	81 93       	st	Z+, r24
    2e06:	f9 cf       	rjmp	.-14     	; 0x2dfa <twi_readFrom+0x7a>
    2e08:	84 2f       	mov	r24, r20
    2e0a:	08 95       	ret
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	08 95       	ret

00002e10 <twi_writeTo>:
    2e10:	0f 93       	push	r16
    2e12:	41 32       	cpi	r20, 0x21	; 33
    2e14:	08 f0       	brcs	.+2      	; 0x2e18 <twi_writeTo+0x8>
    2e16:	4a c0       	rjmp	.+148    	; 0x2eac <twi_writeTo+0x9c>
    2e18:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <twi_state>
    2e1c:	91 11       	cpse	r25, r1
    2e1e:	fc cf       	rjmp	.-8      	; 0x2e18 <twi_writeTo+0x8>
    2e20:	32 e0       	ldi	r19, 0x02	; 2
    2e22:	30 93 8e 04 	sts	0x048E, r19	; 0x80048e <twi_state>
    2e26:	00 93 8c 04 	sts	0x048C, r16	; 0x80048c <twi_sendStop>
    2e2a:	3f ef       	ldi	r19, 0xFF	; 255
    2e2c:	30 93 21 04 	sts	0x0421, r19	; 0x800421 <twi_error>
    2e30:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <twi_masterBufferIndex>
    2e34:	40 93 65 04 	sts	0x0465, r20	; 0x800465 <twi_masterBufferLength>
    2e38:	fb 01       	movw	r30, r22
    2e3a:	67 e6       	ldi	r22, 0x67	; 103
    2e3c:	74 e0       	ldi	r23, 0x04	; 4
    2e3e:	db 01       	movw	r26, r22
    2e40:	3a 2f       	mov	r19, r26
    2e42:	36 1b       	sub	r19, r22
    2e44:	34 17       	cp	r19, r20
    2e46:	18 f4       	brcc	.+6      	; 0x2e4e <twi_writeTo+0x3e>
    2e48:	31 91       	ld	r19, Z+
    2e4a:	3d 93       	st	X+, r19
    2e4c:	f9 cf       	rjmp	.-14     	; 0x2e40 <twi_writeTo+0x30>
    2e4e:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <twi_slarw>
    2e52:	30 91 8d 04 	lds	r19, 0x048D	; 0x80048d <twi_slarw>
    2e56:	88 0f       	add	r24, r24
    2e58:	83 2b       	or	r24, r19
    2e5a:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <twi_slarw>
    2e5e:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <twi_inRepStart>
    2e62:	81 30       	cpi	r24, 0x01	; 1
    2e64:	61 f4       	brne	.+24     	; 0x2e7e <twi_writeTo+0x6e>
    2e66:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <twi_inRepStart>
    2e6a:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <twi_slarw>
    2e6e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2e72:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2e76:	83 fd       	sbrc	r24, 3
    2e78:	f8 cf       	rjmp	.-16     	; 0x2e6a <twi_writeTo+0x5a>
    2e7a:	85 ec       	ldi	r24, 0xC5	; 197
    2e7c:	01 c0       	rjmp	.+2      	; 0x2e80 <twi_writeTo+0x70>
    2e7e:	85 ee       	ldi	r24, 0xE5	; 229
    2e80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2e84:	22 23       	and	r18, r18
    2e86:	21 f0       	breq	.+8      	; 0x2e90 <twi_writeTo+0x80>
    2e88:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <twi_state>
    2e8c:	82 30       	cpi	r24, 0x02	; 2
    2e8e:	d1 f3       	breq	.-12     	; 0x2e84 <twi_writeTo+0x74>
    2e90:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <twi_error>
    2e94:	8f 3f       	cpi	r24, 0xFF	; 255
    2e96:	79 f0       	breq	.+30     	; 0x2eb6 <twi_writeTo+0xa6>
    2e98:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <twi_error>
    2e9c:	80 32       	cpi	r24, 0x20	; 32
    2e9e:	41 f0       	breq	.+16     	; 0x2eb0 <twi_writeTo+0xa0>
    2ea0:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <twi_error>
    2ea4:	80 33       	cpi	r24, 0x30	; 48
    2ea6:	31 f0       	breq	.+12     	; 0x2eb4 <twi_writeTo+0xa4>
    2ea8:	94 e0       	ldi	r25, 0x04	; 4
    2eaa:	05 c0       	rjmp	.+10     	; 0x2eb6 <twi_writeTo+0xa6>
    2eac:	91 e0       	ldi	r25, 0x01	; 1
    2eae:	03 c0       	rjmp	.+6      	; 0x2eb6 <twi_writeTo+0xa6>
    2eb0:	92 e0       	ldi	r25, 0x02	; 2
    2eb2:	01 c0       	rjmp	.+2      	; 0x2eb6 <twi_writeTo+0xa6>
    2eb4:	93 e0       	ldi	r25, 0x03	; 3
    2eb6:	89 2f       	mov	r24, r25
    2eb8:	0f 91       	pop	r16
    2eba:	08 95       	ret

00002ebc <twi_transmit>:
    2ebc:	40 91 43 04 	lds	r20, 0x0443	; 0x800443 <twi_txBufferLength>
    2ec0:	26 2f       	mov	r18, r22
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	24 0f       	add	r18, r20
    2ec6:	31 1d       	adc	r19, r1
    2ec8:	21 32       	cpi	r18, 0x21	; 33
    2eca:	31 05       	cpc	r19, r1
    2ecc:	dc f4       	brge	.+54     	; 0x2f04 <twi_transmit+0x48>
    2ece:	20 91 8e 04 	lds	r18, 0x048E	; 0x80048e <twi_state>
    2ed2:	24 30       	cpi	r18, 0x04	; 4
    2ed4:	c9 f4       	brne	.+50     	; 0x2f08 <twi_transmit+0x4c>
    2ed6:	fc 01       	movw	r30, r24
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	86 17       	cp	r24, r22
    2ede:	58 f4       	brcc	.+22     	; 0x2ef6 <twi_transmit+0x3a>
    2ee0:	30 91 43 04 	lds	r19, 0x0443	; 0x800443 <twi_txBufferLength>
    2ee4:	21 91       	ld	r18, Z+
    2ee6:	dc 01       	movw	r26, r24
    2ee8:	ab 5b       	subi	r26, 0xBB	; 187
    2eea:	bb 4f       	sbci	r27, 0xFB	; 251
    2eec:	a3 0f       	add	r26, r19
    2eee:	b1 1d       	adc	r27, r1
    2ef0:	2c 93       	st	X, r18
    2ef2:	01 96       	adiw	r24, 0x01	; 1
    2ef4:	f3 cf       	rjmp	.-26     	; 0x2edc <twi_transmit+0x20>
    2ef6:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <twi_txBufferLength>
    2efa:	68 0f       	add	r22, r24
    2efc:	60 93 43 04 	sts	0x0443, r22	; 0x800443 <twi_txBufferLength>
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	08 95       	ret
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	08 95       	ret
    2f08:	82 e0       	ldi	r24, 0x02	; 2
    2f0a:	08 95       	ret

00002f0c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2f0c:	85 ed       	ldi	r24, 0xD5	; 213
    2f0e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2f12:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2f16:	84 fd       	sbrc	r24, 4
    2f18:	fc cf       	rjmp	.-8      	; 0x2f12 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2f1a:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <twi_state>
    2f1e:	08 95       	ret

00002f20 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2f20:	85 ec       	ldi	r24, 0xC5	; 197
    2f22:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    2f26:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <twi_state>
    2f2a:	08 95       	ret

00002f2c <__vector_24>:
}

ISR(TWI_vect)
{
    2f2c:	1f 92       	push	r1
    2f2e:	0f 92       	push	r0
    2f30:	0f b6       	in	r0, 0x3f	; 63
    2f32:	0f 92       	push	r0
    2f34:	11 24       	eor	r1, r1
    2f36:	2f 93       	push	r18
    2f38:	3f 93       	push	r19
    2f3a:	4f 93       	push	r20
    2f3c:	5f 93       	push	r21
    2f3e:	6f 93       	push	r22
    2f40:	7f 93       	push	r23
    2f42:	8f 93       	push	r24
    2f44:	9f 93       	push	r25
    2f46:	af 93       	push	r26
    2f48:	bf 93       	push	r27
    2f4a:	ef 93       	push	r30
    2f4c:	ff 93       	push	r31
  switch(TW_STATUS){
    2f4e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2f52:	88 7f       	andi	r24, 0xF8	; 248
    2f54:	80 36       	cpi	r24, 0x60	; 96
    2f56:	09 f4       	brne	.+2      	; 0x2f5a <__vector_24+0x2e>
    2f58:	9e c0       	rjmp	.+316    	; 0x3096 <__vector_24+0x16a>
    2f5a:	78 f5       	brcc	.+94     	; 0x2fba <__vector_24+0x8e>
    2f5c:	88 32       	cpi	r24, 0x28	; 40
    2f5e:	09 f4       	brne	.+2      	; 0x2f62 <__vector_24+0x36>
    2f60:	5d c0       	rjmp	.+186    	; 0x301c <__vector_24+0xf0>
    2f62:	90 f4       	brcc	.+36     	; 0x2f88 <__vector_24+0x5c>
    2f64:	80 31       	cpi	r24, 0x10	; 16
    2f66:	09 f4       	brne	.+2      	; 0x2f6a <__vector_24+0x3e>
    2f68:	56 c0       	rjmp	.+172    	; 0x3016 <__vector_24+0xea>
    2f6a:	38 f4       	brcc	.+14     	; 0x2f7a <__vector_24+0x4e>
    2f6c:	88 23       	and	r24, r24
    2f6e:	09 f4       	brne	.+2      	; 0x2f72 <__vector_24+0x46>
    2f70:	f5 c0       	rjmp	.+490    	; 0x315c <__vector_24+0x230>
    2f72:	88 30       	cpi	r24, 0x08	; 8
    2f74:	09 f4       	brne	.+2      	; 0x2f78 <__vector_24+0x4c>
    2f76:	4f c0       	rjmp	.+158    	; 0x3016 <__vector_24+0xea>
    2f78:	f5 c0       	rjmp	.+490    	; 0x3164 <__vector_24+0x238>
    2f7a:	88 31       	cpi	r24, 0x18	; 24
    2f7c:	09 f4       	brne	.+2      	; 0x2f80 <__vector_24+0x54>
    2f7e:	4e c0       	rjmp	.+156    	; 0x301c <__vector_24+0xf0>
    2f80:	80 32       	cpi	r24, 0x20	; 32
    2f82:	09 f4       	brne	.+2      	; 0x2f86 <__vector_24+0x5a>
    2f84:	5f c0       	rjmp	.+190    	; 0x3044 <__vector_24+0x118>
    2f86:	ee c0       	rjmp	.+476    	; 0x3164 <__vector_24+0x238>
    2f88:	80 34       	cpi	r24, 0x40	; 64
    2f8a:	09 f4       	brne	.+2      	; 0x2f8e <__vector_24+0x62>
    2f8c:	6a c0       	rjmp	.+212    	; 0x3062 <__vector_24+0x136>
    2f8e:	58 f4       	brcc	.+22     	; 0x2fa6 <__vector_24+0x7a>
    2f90:	80 33       	cpi	r24, 0x30	; 48
    2f92:	09 f4       	brne	.+2      	; 0x2f96 <__vector_24+0x6a>
    2f94:	57 c0       	rjmp	.+174    	; 0x3044 <__vector_24+0x118>
    2f96:	88 33       	cpi	r24, 0x38	; 56
    2f98:	09 f0       	breq	.+2      	; 0x2f9c <__vector_24+0x70>
    2f9a:	e4 c0       	rjmp	.+456    	; 0x3164 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2f9c:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <twi_error>
      twi_releaseBus();
    2fa0:	0e 94 90 17 	call	0x2f20	; 0x2f20 <twi_releaseBus>
      break;
    2fa4:	df c0       	rjmp	.+446    	; 0x3164 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2fa6:	80 35       	cpi	r24, 0x50	; 80
    2fa8:	09 f4       	brne	.+2      	; 0x2fac <__vector_24+0x80>
    2faa:	4f c0       	rjmp	.+158    	; 0x304a <__vector_24+0x11e>
    2fac:	88 35       	cpi	r24, 0x58	; 88
    2fae:	09 f4       	brne	.+2      	; 0x2fb2 <__vector_24+0x86>
    2fb0:	5d c0       	rjmp	.+186    	; 0x306c <__vector_24+0x140>
    2fb2:	88 34       	cpi	r24, 0x48	; 72
    2fb4:	09 f0       	breq	.+2      	; 0x2fb8 <__vector_24+0x8c>
    2fb6:	d6 c0       	rjmp	.+428    	; 0x3164 <__vector_24+0x238>
    2fb8:	d3 c0       	rjmp	.+422    	; 0x3160 <__vector_24+0x234>
    2fba:	88 39       	cpi	r24, 0x98	; 152
    2fbc:	09 f4       	brne	.+2      	; 0x2fc0 <__vector_24+0x94>
    2fbe:	c4 c0       	rjmp	.+392    	; 0x3148 <__vector_24+0x21c>
    2fc0:	a8 f4       	brcc	.+42     	; 0x2fec <__vector_24+0xc0>
    2fc2:	88 37       	cpi	r24, 0x78	; 120
    2fc4:	09 f4       	brne	.+2      	; 0x2fc8 <__vector_24+0x9c>
    2fc6:	67 c0       	rjmp	.+206    	; 0x3096 <__vector_24+0x16a>
    2fc8:	38 f4       	brcc	.+14     	; 0x2fd8 <__vector_24+0xac>
    2fca:	88 36       	cpi	r24, 0x68	; 104
    2fcc:	09 f4       	brne	.+2      	; 0x2fd0 <__vector_24+0xa4>
    2fce:	63 c0       	rjmp	.+198    	; 0x3096 <__vector_24+0x16a>
    2fd0:	80 37       	cpi	r24, 0x70	; 112
    2fd2:	09 f4       	brne	.+2      	; 0x2fd6 <__vector_24+0xaa>
    2fd4:	60 c0       	rjmp	.+192    	; 0x3096 <__vector_24+0x16a>
    2fd6:	c6 c0       	rjmp	.+396    	; 0x3164 <__vector_24+0x238>
    2fd8:	88 38       	cpi	r24, 0x88	; 136
    2fda:	09 f4       	brne	.+2      	; 0x2fde <__vector_24+0xb2>
    2fdc:	b5 c0       	rjmp	.+362    	; 0x3148 <__vector_24+0x21c>
    2fde:	80 39       	cpi	r24, 0x90	; 144
    2fe0:	09 f4       	brne	.+2      	; 0x2fe4 <__vector_24+0xb8>
    2fe2:	5f c0       	rjmp	.+190    	; 0x30a2 <__vector_24+0x176>
    2fe4:	80 38       	cpi	r24, 0x80	; 128
    2fe6:	09 f0       	breq	.+2      	; 0x2fea <__vector_24+0xbe>
    2fe8:	bd c0       	rjmp	.+378    	; 0x3164 <__vector_24+0x238>
    2fea:	5b c0       	rjmp	.+182    	; 0x30a2 <__vector_24+0x176>
    2fec:	80 3b       	cpi	r24, 0xB0	; 176
    2fee:	09 f4       	brne	.+2      	; 0x2ff2 <__vector_24+0xc6>
    2ff0:	83 c0       	rjmp	.+262    	; 0x30f8 <__vector_24+0x1cc>
    2ff2:	38 f4       	brcc	.+14     	; 0x3002 <__vector_24+0xd6>
    2ff4:	80 3a       	cpi	r24, 0xA0	; 160
    2ff6:	09 f4       	brne	.+2      	; 0x2ffa <__vector_24+0xce>
    2ff8:	66 c0       	rjmp	.+204    	; 0x30c6 <__vector_24+0x19a>
    2ffa:	88 3a       	cpi	r24, 0xA8	; 168
    2ffc:	09 f4       	brne	.+2      	; 0x3000 <__vector_24+0xd4>
    2ffe:	7c c0       	rjmp	.+248    	; 0x30f8 <__vector_24+0x1cc>
    3000:	b1 c0       	rjmp	.+354    	; 0x3164 <__vector_24+0x238>
    3002:	80 3c       	cpi	r24, 0xC0	; 192
    3004:	09 f4       	brne	.+2      	; 0x3008 <__vector_24+0xdc>
    3006:	a4 c0       	rjmp	.+328    	; 0x3150 <__vector_24+0x224>
    3008:	88 3c       	cpi	r24, 0xC8	; 200
    300a:	09 f4       	brne	.+2      	; 0x300e <__vector_24+0xe2>
    300c:	a1 c0       	rjmp	.+322    	; 0x3150 <__vector_24+0x224>
    300e:	88 3b       	cpi	r24, 0xB8	; 184
    3010:	09 f4       	brne	.+2      	; 0x3014 <__vector_24+0xe8>
    3012:	87 c0       	rjmp	.+270    	; 0x3122 <__vector_24+0x1f6>
    3014:	a7 c0       	rjmp	.+334    	; 0x3164 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3016:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <twi_slarw>
    301a:	10 c0       	rjmp	.+32     	; 0x303c <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    301c:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <twi_masterBufferIndex>
    3020:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <twi_masterBufferLength>
    3024:	98 17       	cp	r25, r24
    3026:	70 f5       	brcc	.+92     	; 0x3084 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3028:	e0 91 66 04 	lds	r30, 0x0466	; 0x800466 <twi_masterBufferIndex>
    302c:	81 e0       	ldi	r24, 0x01	; 1
    302e:	8e 0f       	add	r24, r30
    3030:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <twi_masterBufferIndex>
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	e9 59       	subi	r30, 0x99	; 153
    3038:	fb 4f       	sbci	r31, 0xFB	; 251
    303a:	80 81       	ld	r24, Z
    303c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3040:	85 ec       	ldi	r24, 0xC5	; 197
    3042:	83 c0       	rjmp	.+262    	; 0x314a <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3044:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <twi_error>
    3048:	8b c0       	rjmp	.+278    	; 0x3160 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    304a:	e0 91 66 04 	lds	r30, 0x0466	; 0x800466 <twi_masterBufferIndex>
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	8e 0f       	add	r24, r30
    3052:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <twi_masterBufferIndex>
    3056:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    305a:	f0 e0       	ldi	r31, 0x00	; 0
    305c:	e9 59       	subi	r30, 0x99	; 153
    305e:	fb 4f       	sbci	r31, 0xFB	; 251
    3060:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3062:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <twi_masterBufferIndex>
    3066:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <twi_masterBufferLength>
    306a:	6b c0       	rjmp	.+214    	; 0x3142 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    306c:	e0 91 66 04 	lds	r30, 0x0466	; 0x800466 <twi_masterBufferIndex>
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	8e 0f       	add	r24, r30
    3074:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <twi_masterBufferIndex>
    3078:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    307c:	f0 e0       	ldi	r31, 0x00	; 0
    307e:	e9 59       	subi	r30, 0x99	; 153
    3080:	fb 4f       	sbci	r31, 0xFB	; 251
    3082:	80 83       	st	Z, r24
	if (twi_sendStop)
    3084:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <twi_sendStop>
    3088:	81 11       	cpse	r24, r1
    308a:	6a c0       	rjmp	.+212    	; 0x3160 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3092:	84 ea       	ldi	r24, 0xA4	; 164
    3094:	5e c0       	rjmp	.+188    	; 0x3152 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3096:	83 e0       	ldi	r24, 0x03	; 3
    3098:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    309c:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <twi_rxBufferIndex>
    30a0:	cf cf       	rjmp	.-98     	; 0x3040 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    30a2:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <twi_rxBufferIndex>
    30a6:	80 32       	cpi	r24, 0x20	; 32
    30a8:	08 f0       	brcs	.+2      	; 0x30ac <__vector_24+0x180>
    30aa:	4e c0       	rjmp	.+156    	; 0x3148 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    30ac:	e0 91 22 04 	lds	r30, 0x0422	; 0x800422 <twi_rxBufferIndex>
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	8e 0f       	add	r24, r30
    30b4:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <twi_rxBufferIndex>
    30b8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    30bc:	f0 e0       	ldi	r31, 0x00	; 0
    30be:	ed 5d       	subi	r30, 0xDD	; 221
    30c0:	fb 4f       	sbci	r31, 0xFB	; 251
    30c2:	80 83       	st	Z, r24
    30c4:	bd cf       	rjmp	.-134    	; 0x3040 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    30c6:	0e 94 90 17 	call	0x2f20	; 0x2f20 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    30ca:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <twi_rxBufferIndex>
    30ce:	80 32       	cpi	r24, 0x20	; 32
    30d0:	30 f4       	brcc	.+12     	; 0x30de <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    30d2:	e0 91 22 04 	lds	r30, 0x0422	; 0x800422 <twi_rxBufferIndex>
    30d6:	f0 e0       	ldi	r31, 0x00	; 0
    30d8:	ed 5d       	subi	r30, 0xDD	; 221
    30da:	fb 4f       	sbci	r31, 0xFB	; 251
    30dc:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    30de:	60 91 22 04 	lds	r22, 0x0422	; 0x800422 <twi_rxBufferIndex>
    30e2:	70 e0       	ldi	r23, 0x00	; 0
    30e4:	e0 91 87 04 	lds	r30, 0x0487	; 0x800487 <twi_onSlaveReceive>
    30e8:	f0 91 88 04 	lds	r31, 0x0488	; 0x800488 <twi_onSlaveReceive+0x1>
    30ec:	83 e2       	ldi	r24, 0x23	; 35
    30ee:	94 e0       	ldi	r25, 0x04	; 4
    30f0:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    30f2:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <twi_rxBufferIndex>
      break;
    30f6:	36 c0       	rjmp	.+108    	; 0x3164 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    30f8:	84 e0       	ldi	r24, 0x04	; 4
    30fa:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    30fe:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3102:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3106:	e0 91 89 04 	lds	r30, 0x0489	; 0x800489 <twi_onSlaveTransmit>
    310a:	f0 91 8a 04 	lds	r31, 0x048A	; 0x80048a <twi_onSlaveTransmit+0x1>
    310e:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3110:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <twi_txBufferLength>
    3114:	81 11       	cpse	r24, r1
    3116:	05 c0       	rjmp	.+10     	; 0x3122 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    311e:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3122:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <twi_txBufferIndex>
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	8e 0f       	add	r24, r30
    312a:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <twi_txBufferIndex>
    312e:	f0 e0       	ldi	r31, 0x00	; 0
    3130:	eb 5b       	subi	r30, 0xBB	; 187
    3132:	fb 4f       	sbci	r31, 0xFB	; 251
    3134:	80 81       	ld	r24, Z
    3136:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    313a:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <twi_txBufferIndex>
    313e:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <twi_txBufferLength>
    3142:	98 17       	cp	r25, r24
    3144:	08 f4       	brcc	.+2      	; 0x3148 <__vector_24+0x21c>
    3146:	7c cf       	rjmp	.-264    	; 0x3040 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3148:	85 e8       	ldi	r24, 0x85	; 133
    314a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    314e:	0a c0       	rjmp	.+20     	; 0x3164 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3150:	85 ec       	ldi	r24, 0xC5	; 197
    3152:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3156:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <twi_state>
      break;
    315a:	04 c0       	rjmp	.+8      	; 0x3164 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    315c:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <twi_error>
      twi_stop();
    3160:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <twi_stop>
      break;
  }
}
    3164:	ff 91       	pop	r31
    3166:	ef 91       	pop	r30
    3168:	bf 91       	pop	r27
    316a:	af 91       	pop	r26
    316c:	9f 91       	pop	r25
    316e:	8f 91       	pop	r24
    3170:	7f 91       	pop	r23
    3172:	6f 91       	pop	r22
    3174:	5f 91       	pop	r21
    3176:	4f 91       	pop	r20
    3178:	3f 91       	pop	r19
    317a:	2f 91       	pop	r18
    317c:	0f 90       	pop	r0
    317e:	0f be       	out	0x3f, r0	; 63
    3180:	0f 90       	pop	r0
    3182:	1f 90       	pop	r1
    3184:	18 95       	reti

00003186 <__cmpsf2>:
    3186:	0e 94 c8 18 	call	0x3190	; 0x3190 <__fp_cmp>
    318a:	08 f4       	brcc	.+2      	; 0x318e <__cmpsf2+0x8>
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	08 95       	ret

00003190 <__fp_cmp>:
    3190:	99 0f       	add	r25, r25
    3192:	00 08       	sbc	r0, r0
    3194:	55 0f       	add	r21, r21
    3196:	aa 0b       	sbc	r26, r26
    3198:	e0 e8       	ldi	r30, 0x80	; 128
    319a:	fe ef       	ldi	r31, 0xFE	; 254
    319c:	16 16       	cp	r1, r22
    319e:	17 06       	cpc	r1, r23
    31a0:	e8 07       	cpc	r30, r24
    31a2:	f9 07       	cpc	r31, r25
    31a4:	c0 f0       	brcs	.+48     	; 0x31d6 <__fp_cmp+0x46>
    31a6:	12 16       	cp	r1, r18
    31a8:	13 06       	cpc	r1, r19
    31aa:	e4 07       	cpc	r30, r20
    31ac:	f5 07       	cpc	r31, r21
    31ae:	98 f0       	brcs	.+38     	; 0x31d6 <__fp_cmp+0x46>
    31b0:	62 1b       	sub	r22, r18
    31b2:	73 0b       	sbc	r23, r19
    31b4:	84 0b       	sbc	r24, r20
    31b6:	95 0b       	sbc	r25, r21
    31b8:	39 f4       	brne	.+14     	; 0x31c8 <__fp_cmp+0x38>
    31ba:	0a 26       	eor	r0, r26
    31bc:	61 f0       	breq	.+24     	; 0x31d6 <__fp_cmp+0x46>
    31be:	23 2b       	or	r18, r19
    31c0:	24 2b       	or	r18, r20
    31c2:	25 2b       	or	r18, r21
    31c4:	21 f4       	brne	.+8      	; 0x31ce <__fp_cmp+0x3e>
    31c6:	08 95       	ret
    31c8:	0a 26       	eor	r0, r26
    31ca:	09 f4       	brne	.+2      	; 0x31ce <__fp_cmp+0x3e>
    31cc:	a1 40       	sbci	r26, 0x01	; 1
    31ce:	a6 95       	lsr	r26
    31d0:	8f ef       	ldi	r24, 0xFF	; 255
    31d2:	81 1d       	adc	r24, r1
    31d4:	81 1d       	adc	r24, r1
    31d6:	08 95       	ret

000031d8 <__gesf2>:
    31d8:	0e 94 c8 18 	call	0x3190	; 0x3190 <__fp_cmp>
    31dc:	08 f4       	brcc	.+2      	; 0x31e0 <__gesf2+0x8>
    31de:	8f ef       	ldi	r24, 0xFF	; 255
    31e0:	08 95       	ret

000031e2 <__unordsf2>:
    31e2:	0e 94 c8 18 	call	0x3190	; 0x3190 <__fp_cmp>
    31e6:	88 0b       	sbc	r24, r24
    31e8:	99 0b       	sbc	r25, r25
    31ea:	08 95       	ret

000031ec <__divmodhi4>:
    31ec:	97 fb       	bst	r25, 7
    31ee:	07 2e       	mov	r0, r23
    31f0:	16 f4       	brtc	.+4      	; 0x31f6 <__divmodhi4+0xa>
    31f2:	00 94       	com	r0
    31f4:	07 d0       	rcall	.+14     	; 0x3204 <__divmodhi4_neg1>
    31f6:	77 fd       	sbrc	r23, 7
    31f8:	09 d0       	rcall	.+18     	; 0x320c <__divmodhi4_neg2>
    31fa:	0e 94 4b 19 	call	0x3296	; 0x3296 <__udivmodhi4>
    31fe:	07 fc       	sbrc	r0, 7
    3200:	05 d0       	rcall	.+10     	; 0x320c <__divmodhi4_neg2>
    3202:	3e f4       	brtc	.+14     	; 0x3212 <__divmodhi4_exit>

00003204 <__divmodhi4_neg1>:
    3204:	90 95       	com	r25
    3206:	81 95       	neg	r24
    3208:	9f 4f       	sbci	r25, 0xFF	; 255
    320a:	08 95       	ret

0000320c <__divmodhi4_neg2>:
    320c:	70 95       	com	r23
    320e:	61 95       	neg	r22
    3210:	7f 4f       	sbci	r23, 0xFF	; 255

00003212 <__divmodhi4_exit>:
    3212:	08 95       	ret

00003214 <__udivmodsi4>:
    3214:	a1 e2       	ldi	r26, 0x21	; 33
    3216:	1a 2e       	mov	r1, r26
    3218:	aa 1b       	sub	r26, r26
    321a:	bb 1b       	sub	r27, r27
    321c:	fd 01       	movw	r30, r26
    321e:	0d c0       	rjmp	.+26     	; 0x323a <__udivmodsi4_ep>

00003220 <__udivmodsi4_loop>:
    3220:	aa 1f       	adc	r26, r26
    3222:	bb 1f       	adc	r27, r27
    3224:	ee 1f       	adc	r30, r30
    3226:	ff 1f       	adc	r31, r31
    3228:	a2 17       	cp	r26, r18
    322a:	b3 07       	cpc	r27, r19
    322c:	e4 07       	cpc	r30, r20
    322e:	f5 07       	cpc	r31, r21
    3230:	20 f0       	brcs	.+8      	; 0x323a <__udivmodsi4_ep>
    3232:	a2 1b       	sub	r26, r18
    3234:	b3 0b       	sbc	r27, r19
    3236:	e4 0b       	sbc	r30, r20
    3238:	f5 0b       	sbc	r31, r21

0000323a <__udivmodsi4_ep>:
    323a:	66 1f       	adc	r22, r22
    323c:	77 1f       	adc	r23, r23
    323e:	88 1f       	adc	r24, r24
    3240:	99 1f       	adc	r25, r25
    3242:	1a 94       	dec	r1
    3244:	69 f7       	brne	.-38     	; 0x3220 <__udivmodsi4_loop>
    3246:	60 95       	com	r22
    3248:	70 95       	com	r23
    324a:	80 95       	com	r24
    324c:	90 95       	com	r25
    324e:	9b 01       	movw	r18, r22
    3250:	ac 01       	movw	r20, r24
    3252:	bd 01       	movw	r22, r26
    3254:	cf 01       	movw	r24, r30
    3256:	08 95       	ret

00003258 <__divmodsi4>:
    3258:	05 2e       	mov	r0, r21
    325a:	97 fb       	bst	r25, 7
    325c:	1e f4       	brtc	.+6      	; 0x3264 <__divmodsi4+0xc>
    325e:	00 94       	com	r0
    3260:	0e 94 43 19 	call	0x3286	; 0x3286 <__negsi2>
    3264:	57 fd       	sbrc	r21, 7
    3266:	07 d0       	rcall	.+14     	; 0x3276 <__divmodsi4_neg2>
    3268:	0e 94 0a 19 	call	0x3214	; 0x3214 <__udivmodsi4>
    326c:	07 fc       	sbrc	r0, 7
    326e:	03 d0       	rcall	.+6      	; 0x3276 <__divmodsi4_neg2>
    3270:	4e f4       	brtc	.+18     	; 0x3284 <__divmodsi4_exit>
    3272:	0c 94 43 19 	jmp	0x3286	; 0x3286 <__negsi2>

00003276 <__divmodsi4_neg2>:
    3276:	50 95       	com	r21
    3278:	40 95       	com	r20
    327a:	30 95       	com	r19
    327c:	21 95       	neg	r18
    327e:	3f 4f       	sbci	r19, 0xFF	; 255
    3280:	4f 4f       	sbci	r20, 0xFF	; 255
    3282:	5f 4f       	sbci	r21, 0xFF	; 255

00003284 <__divmodsi4_exit>:
    3284:	08 95       	ret

00003286 <__negsi2>:
    3286:	90 95       	com	r25
    3288:	80 95       	com	r24
    328a:	70 95       	com	r23
    328c:	61 95       	neg	r22
    328e:	7f 4f       	sbci	r23, 0xFF	; 255
    3290:	8f 4f       	sbci	r24, 0xFF	; 255
    3292:	9f 4f       	sbci	r25, 0xFF	; 255
    3294:	08 95       	ret

00003296 <__udivmodhi4>:
    3296:	aa 1b       	sub	r26, r26
    3298:	bb 1b       	sub	r27, r27
    329a:	51 e1       	ldi	r21, 0x11	; 17
    329c:	07 c0       	rjmp	.+14     	; 0x32ac <__udivmodhi4_ep>

0000329e <__udivmodhi4_loop>:
    329e:	aa 1f       	adc	r26, r26
    32a0:	bb 1f       	adc	r27, r27
    32a2:	a6 17       	cp	r26, r22
    32a4:	b7 07       	cpc	r27, r23
    32a6:	10 f0       	brcs	.+4      	; 0x32ac <__udivmodhi4_ep>
    32a8:	a6 1b       	sub	r26, r22
    32aa:	b7 0b       	sbc	r27, r23

000032ac <__udivmodhi4_ep>:
    32ac:	88 1f       	adc	r24, r24
    32ae:	99 1f       	adc	r25, r25
    32b0:	5a 95       	dec	r21
    32b2:	a9 f7       	brne	.-22     	; 0x329e <__udivmodhi4_loop>
    32b4:	80 95       	com	r24
    32b6:	90 95       	com	r25
    32b8:	bc 01       	movw	r22, r24
    32ba:	cd 01       	movw	r24, r26
    32bc:	08 95       	ret

000032be <__tablejump2__>:
    32be:	ee 0f       	add	r30, r30
    32c0:	ff 1f       	adc	r31, r31
    32c2:	05 90       	lpm	r0, Z+
    32c4:	f4 91       	lpm	r31, Z
    32c6:	e0 2d       	mov	r30, r0
    32c8:	09 94       	ijmp

000032ca <_exit>:
    32ca:	f8 94       	cli

000032cc <__stop_program>:
    32cc:	ff cf       	rjmp	.-2      	; 0x32cc <__stop_program>
