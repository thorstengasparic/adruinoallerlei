
MPU6050Calibrate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000294  00800100  00002178  0000220c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002178  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000019b  00800394  00800394  000024a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000024a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000d20  00000000  00000000  00002510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00017080  00000000  00000000  00003230  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002664  00000000  00000000  0001a2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000521e  00000000  00000000  0001c914  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002e0c  00000000  00000000  00021b34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000062eb  00000000  00000000  00024940  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000e5a3  00000000  00000000  0002ac2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c90  00000000  00000000  000391ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6d 00 	jmp	0xda	; 0xda <__ctors_end>
       4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      10:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      14:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      1c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      20:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      24:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      28:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      2c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      30:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      34:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      38:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      40:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <__vector_16>
      44:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      48:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__vector_18>
      4c:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <__vector_19>
      50:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      54:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      58:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      60:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__vector_24>
      64:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	53 65       	ori	r21, 0x53	; 83
      6a:	6e 64       	ori	r22, 0x4E	; 78
      6c:	20 61       	ori	r18, 0x10	; 16
      6e:	6e 79       	andi	r22, 0x9E	; 158
      70:	20 63       	ori	r18, 0x30	; 48
      72:	68 61       	ori	r22, 0x18	; 24
      74:	72 61       	ori	r23, 0x12	; 18
      76:	63 74       	andi	r22, 0x43	; 67
      78:	65 72       	andi	r22, 0x25	; 37
      7a:	20 74       	andi	r18, 0x40	; 64
      7c:	6f 20       	and	r6, r15
      7e:	73 74       	andi	r23, 0x43	; 67
      80:	61 72       	andi	r22, 0x21	; 33
      82:	74 20       	and	r7, r4
      84:	73 6b       	ori	r23, 0xB3	; 179
      86:	65 74       	andi	r22, 0x45	; 69
      88:	63 68       	ori	r22, 0x83	; 131
      8a:	2e 0a       	sbc	r2, r30
	...

0000008d <digital_pin_to_timer_PGM>:
      8d:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      9d:	00 00 00 00                                         ....

000000a1 <digital_pin_to_bit_mask_PGM>:
      a1:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      b1:	04 08 10 20                                         ... 

000000b5 <digital_pin_to_port_PGM>:
      b5:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      c5:	03 03 03 03                                         ....

000000c9 <port_to_output_PGM>:
      c9:	00 00 00 00 25 00 28 00 2b 00 00                    ....%.(.+..

000000d4 <__ctors_start>:
      d4:	bc 04       	cpc	r11, r12
      d6:	fb 06       	cpc	r15, r27
      d8:	cf 09       	sbc	r28, r15

000000da <__ctors_end>:
      da:	11 24       	eor	r1, r1
      dc:	1f be       	out	0x3f, r1	; 63
      de:	cf ef       	ldi	r28, 0xFF	; 255
      e0:	d8 e0       	ldi	r29, 0x08	; 8
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	cd bf       	out	0x3d, r28	; 61

000000e6 <__do_copy_data>:
      e6:	13 e0       	ldi	r17, 0x03	; 3
      e8:	a0 e0       	ldi	r26, 0x00	; 0
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	e8 e7       	ldi	r30, 0x78	; 120
      ee:	f1 e2       	ldi	r31, 0x21	; 33
      f0:	02 c0       	rjmp	.+4      	; 0xf6 <__do_copy_data+0x10>
      f2:	05 90       	lpm	r0, Z+
      f4:	0d 92       	st	X+, r0
      f6:	a4 39       	cpi	r26, 0x94	; 148
      f8:	b1 07       	cpc	r27, r17
      fa:	d9 f7       	brne	.-10     	; 0xf2 <__do_copy_data+0xc>

000000fc <__do_clear_bss>:
      fc:	25 e0       	ldi	r18, 0x05	; 5
      fe:	a4 e9       	ldi	r26, 0x94	; 148
     100:	b3 e0       	ldi	r27, 0x03	; 3
     102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
     104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
     106:	af 32       	cpi	r26, 0x2F	; 47
     108:	b2 07       	cpc	r27, r18
     10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>

0000010c <__do_global_ctors>:
     10c:	10 e0       	ldi	r17, 0x00	; 0
     10e:	cd e6       	ldi	r28, 0x6D	; 109
     110:	d0 e0       	ldi	r29, 0x00	; 0
     112:	04 c0       	rjmp	.+8      	; 0x11c <__do_global_ctors+0x10>
     114:	21 97       	sbiw	r28, 0x01	; 1
     116:	fe 01       	movw	r30, r28
     118:	0e 94 b4 10 	call	0x2168	; 0x2168 <__tablejump2__>
     11c:	ca 36       	cpi	r28, 0x6A	; 106
     11e:	d1 07       	cpc	r29, r17
     120:	c9 f7       	brne	.-14     	; 0x114 <__do_global_ctors+0x8>
     122:	0e 94 29 07 	call	0xe52	; 0xe52 <main>
     126:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <_exit>

0000012a <__bad_interrupt>:
     12a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012e <_Z11meansensorsv>:
    while (1);
  }
}

///////////////////////////////////   FUNCTIONS   ////////////////////////////////////
void meansensors(){
     12e:	4f 92       	push	r4
     130:	5f 92       	push	r5
     132:	6f 92       	push	r6
     134:	7f 92       	push	r7
     136:	8f 92       	push	r8
     138:	9f 92       	push	r9
     13a:	af 92       	push	r10
     13c:	bf 92       	push	r11
     13e:	cf 92       	push	r12
     140:	df 92       	push	r13
     142:	ef 92       	push	r14
     144:	ff 92       	push	r15
     146:	0f 93       	push	r16
     148:	1f 93       	push	r17
     14a:	cf 93       	push	r28
     14c:	df 93       	push	r29
     14e:	cd b7       	in	r28, 0x3d	; 61
     150:	de b7       	in	r29, 0x3e	; 62
     152:	64 97       	sbiw	r28, 0x14	; 20
     154:	0f b6       	in	r0, 0x3f	; 63
     156:	f8 94       	cli
     158:	de bf       	out	0x3e, r29	; 62
     15a:	0f be       	out	0x3f, r0	; 63
     15c:	cd bf       	out	0x3d, r28	; 61
  long i=0,buff_ax=0,buff_ay=0,buff_az=0,buff_gx=0,buff_gy=0,buff_gz=0;

  while (i<(buffersize+101)){
     15e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <buffersize>
     162:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <buffersize+0x1>
     166:	8b 59       	subi	r24, 0x9B	; 155
     168:	9f 4f       	sbci	r25, 0xFF	; 255
     16a:	18 16       	cp	r1, r24
     16c:	19 06       	cpc	r1, r25
     16e:	0c f4       	brge	.+2      	; 0x172 <_Z11meansensorsv+0x44>
     170:	17 c1       	rjmp	.+558    	; 0x3a0 <_Z11meansensorsv+0x272>
     172:	49 c1       	rjmp	.+658    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
    // read raw accel/gyro measurements from device
    accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
     174:	0f 2e       	mov	r0, r31
     176:	fe ea       	ldi	r31, 0xAE	; 174
     178:	cf 2e       	mov	r12, r31
     17a:	f3 e0       	ldi	r31, 0x03	; 3
     17c:	df 2e       	mov	r13, r31
     17e:	f0 2d       	mov	r31, r0
     180:	0f 2e       	mov	r0, r31
     182:	f0 eb       	ldi	r31, 0xB0	; 176
     184:	ef 2e       	mov	r14, r31
     186:	f3 e0       	ldi	r31, 0x03	; 3
     188:	ff 2e       	mov	r15, r31
     18a:	f0 2d       	mov	r31, r0
     18c:	02 eb       	ldi	r16, 0xB2	; 178
     18e:	13 e0       	ldi	r17, 0x03	; 3
     190:	24 eb       	ldi	r18, 0xB4	; 180
     192:	33 e0       	ldi	r19, 0x03	; 3
     194:	46 eb       	ldi	r20, 0xB6	; 182
     196:	53 e0       	ldi	r21, 0x03	; 3
     198:	68 eb       	ldi	r22, 0xB8	; 184
     19a:	73 e0       	ldi	r23, 0x03	; 3
     19c:	8a eb       	ldi	r24, 0xBA	; 186
     19e:	93 e0       	ldi	r25, 0x03	; 3
     1a0:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <_ZN7MPU605010getMotion6EPiS0_S0_S0_S0_S0_>
    
    if (i>100 && i<=(buffersize+100)){ //First 100 measures are discarded
     1a4:	25 e6       	ldi	r18, 0x65	; 101
     1a6:	82 16       	cp	r8, r18
     1a8:	91 04       	cpc	r9, r1
     1aa:	a1 04       	cpc	r10, r1
     1ac:	b1 04       	cpc	r11, r1
     1ae:	0c f4       	brge	.+2      	; 0x1b2 <_Z11meansensorsv+0x84>
     1b0:	80 c0       	rjmp	.+256    	; 0x2b2 <_Z11meansensorsv+0x184>
     1b2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <buffersize>
     1b6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <buffersize+0x1>
     1ba:	8c 59       	subi	r24, 0x9C	; 156
     1bc:	9f 4f       	sbci	r25, 0xFF	; 255
     1be:	09 2e       	mov	r0, r25
     1c0:	00 0c       	add	r0, r0
     1c2:	aa 0b       	sbc	r26, r26
     1c4:	bb 0b       	sbc	r27, r27
     1c6:	88 15       	cp	r24, r8
     1c8:	99 05       	cpc	r25, r9
     1ca:	aa 05       	cpc	r26, r10
     1cc:	bb 05       	cpc	r27, r11
     1ce:	0c f4       	brge	.+2      	; 0x1d2 <_Z11meansensorsv+0xa4>
     1d0:	70 c0       	rjmp	.+224    	; 0x2b2 <_Z11meansensorsv+0x184>
      buff_ax=buff_ax+ax;
     1d2:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <ax>
     1d6:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <ax+0x1>
     1da:	09 2e       	mov	r0, r25
     1dc:	00 0c       	add	r0, r0
     1de:	aa 0b       	sbc	r26, r26
     1e0:	bb 0b       	sbc	r27, r27
     1e2:	29 81       	ldd	r18, Y+1	; 0x01
     1e4:	3a 81       	ldd	r19, Y+2	; 0x02
     1e6:	4b 81       	ldd	r20, Y+3	; 0x03
     1e8:	5c 81       	ldd	r21, Y+4	; 0x04
     1ea:	28 0f       	add	r18, r24
     1ec:	39 1f       	adc	r19, r25
     1ee:	4a 1f       	adc	r20, r26
     1f0:	5b 1f       	adc	r21, r27
     1f2:	29 83       	std	Y+1, r18	; 0x01
     1f4:	3a 83       	std	Y+2, r19	; 0x02
     1f6:	4b 83       	std	Y+3, r20	; 0x03
     1f8:	5c 83       	std	Y+4, r21	; 0x04
      buff_ay=buff_ay+ay;
     1fa:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <ay>
     1fe:	90 91 b7 03 	lds	r25, 0x03B7	; 0x8003b7 <ay+0x1>
     202:	09 2e       	mov	r0, r25
     204:	00 0c       	add	r0, r0
     206:	aa 0b       	sbc	r26, r26
     208:	bb 0b       	sbc	r27, r27
     20a:	2d 81       	ldd	r18, Y+5	; 0x05
     20c:	3e 81       	ldd	r19, Y+6	; 0x06
     20e:	4f 81       	ldd	r20, Y+7	; 0x07
     210:	58 85       	ldd	r21, Y+8	; 0x08
     212:	28 0f       	add	r18, r24
     214:	39 1f       	adc	r19, r25
     216:	4a 1f       	adc	r20, r26
     218:	5b 1f       	adc	r21, r27
     21a:	2d 83       	std	Y+5, r18	; 0x05
     21c:	3e 83       	std	Y+6, r19	; 0x06
     21e:	4f 83       	std	Y+7, r20	; 0x07
     220:	58 87       	std	Y+8, r21	; 0x08
      buff_az=buff_az+az;
     222:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <az>
     226:	90 91 b5 03 	lds	r25, 0x03B5	; 0x8003b5 <az+0x1>
     22a:	09 2e       	mov	r0, r25
     22c:	00 0c       	add	r0, r0
     22e:	aa 0b       	sbc	r26, r26
     230:	bb 0b       	sbc	r27, r27
     232:	29 85       	ldd	r18, Y+9	; 0x09
     234:	3a 85       	ldd	r19, Y+10	; 0x0a
     236:	4b 85       	ldd	r20, Y+11	; 0x0b
     238:	5c 85       	ldd	r21, Y+12	; 0x0c
     23a:	28 0f       	add	r18, r24
     23c:	39 1f       	adc	r19, r25
     23e:	4a 1f       	adc	r20, r26
     240:	5b 1f       	adc	r21, r27
     242:	29 87       	std	Y+9, r18	; 0x09
     244:	3a 87       	std	Y+10, r19	; 0x0a
     246:	4b 87       	std	Y+11, r20	; 0x0b
     248:	5c 87       	std	Y+12, r21	; 0x0c
      buff_gx=buff_gx+gx;
     24a:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <gx>
     24e:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <gx+0x1>
     252:	09 2e       	mov	r0, r25
     254:	00 0c       	add	r0, r0
     256:	aa 0b       	sbc	r26, r26
     258:	bb 0b       	sbc	r27, r27
     25a:	2d 85       	ldd	r18, Y+13	; 0x0d
     25c:	3e 85       	ldd	r19, Y+14	; 0x0e
     25e:	4f 85       	ldd	r20, Y+15	; 0x0f
     260:	58 89       	ldd	r21, Y+16	; 0x10
     262:	28 0f       	add	r18, r24
     264:	39 1f       	adc	r19, r25
     266:	4a 1f       	adc	r20, r26
     268:	5b 1f       	adc	r21, r27
     26a:	2d 87       	std	Y+13, r18	; 0x0d
     26c:	3e 87       	std	Y+14, r19	; 0x0e
     26e:	4f 87       	std	Y+15, r20	; 0x0f
     270:	58 8b       	std	Y+16, r21	; 0x10
      buff_gy=buff_gy+gy;
     272:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <gy>
     276:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <gy+0x1>
     27a:	09 2e       	mov	r0, r25
     27c:	00 0c       	add	r0, r0
     27e:	aa 0b       	sbc	r26, r26
     280:	bb 0b       	sbc	r27, r27
     282:	29 89       	ldd	r18, Y+17	; 0x11
     284:	3a 89       	ldd	r19, Y+18	; 0x12
     286:	4b 89       	ldd	r20, Y+19	; 0x13
     288:	5c 89       	ldd	r21, Y+20	; 0x14
     28a:	28 0f       	add	r18, r24
     28c:	39 1f       	adc	r19, r25
     28e:	4a 1f       	adc	r20, r26
     290:	5b 1f       	adc	r21, r27
     292:	29 8b       	std	Y+17, r18	; 0x11
     294:	3a 8b       	std	Y+18, r19	; 0x12
     296:	4b 8b       	std	Y+19, r20	; 0x13
     298:	5c 8b       	std	Y+20, r21	; 0x14
      buff_gz=buff_gz+gz;
     29a:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <gz>
     29e:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <gz+0x1>
     2a2:	09 2e       	mov	r0, r25
     2a4:	00 0c       	add	r0, r0
     2a6:	aa 0b       	sbc	r26, r26
     2a8:	bb 0b       	sbc	r27, r27
     2aa:	48 0e       	add	r4, r24
     2ac:	59 1e       	adc	r5, r25
     2ae:	6a 1e       	adc	r6, r26
     2b0:	7b 1e       	adc	r7, r27
    }
    if (i==(buffersize+100)){
     2b2:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <buffersize>
     2b6:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <buffersize+0x1>
     2ba:	c6 01       	movw	r24, r12
     2bc:	8c 59       	subi	r24, 0x9C	; 156
     2be:	9f 4f       	sbci	r25, 0xFF	; 255
     2c0:	09 2e       	mov	r0, r25
     2c2:	00 0c       	add	r0, r0
     2c4:	aa 0b       	sbc	r26, r26
     2c6:	bb 0b       	sbc	r27, r27
     2c8:	88 15       	cp	r24, r8
     2ca:	99 05       	cpc	r25, r9
     2cc:	aa 05       	cpc	r26, r10
     2ce:	bb 05       	cpc	r27, r11
     2d0:	09 f0       	breq	.+2      	; 0x2d4 <_Z11meansensorsv+0x1a6>
     2d2:	4a c0       	rjmp	.+148    	; 0x368 <_Z11meansensorsv+0x23a>
      mean_ax=buff_ax/buffersize;
     2d4:	0d 2c       	mov	r0, r13
     2d6:	00 0c       	add	r0, r0
     2d8:	ee 08       	sbc	r14, r14
     2da:	ff 08       	sbc	r15, r15
     2dc:	69 81       	ldd	r22, Y+1	; 0x01
     2de:	7a 81       	ldd	r23, Y+2	; 0x02
     2e0:	8b 81       	ldd	r24, Y+3	; 0x03
     2e2:	9c 81       	ldd	r25, Y+4	; 0x04
     2e4:	a7 01       	movw	r20, r14
     2e6:	96 01       	movw	r18, r12
     2e8:	0e 94 81 10 	call	0x2102	; 0x2102 <__divmodsi4>
     2ec:	30 93 ad 03 	sts	0x03AD, r19	; 0x8003ad <mean_ax+0x1>
     2f0:	20 93 ac 03 	sts	0x03AC, r18	; 0x8003ac <mean_ax>
      mean_ay=buff_ay/buffersize;
     2f4:	6d 81       	ldd	r22, Y+5	; 0x05
     2f6:	7e 81       	ldd	r23, Y+6	; 0x06
     2f8:	8f 81       	ldd	r24, Y+7	; 0x07
     2fa:	98 85       	ldd	r25, Y+8	; 0x08
     2fc:	a7 01       	movw	r20, r14
     2fe:	96 01       	movw	r18, r12
     300:	0e 94 81 10 	call	0x2102	; 0x2102 <__divmodsi4>
     304:	30 93 ab 03 	sts	0x03AB, r19	; 0x8003ab <mean_ay+0x1>
     308:	20 93 aa 03 	sts	0x03AA, r18	; 0x8003aa <mean_ay>
      mean_az=buff_az/buffersize;
     30c:	69 85       	ldd	r22, Y+9	; 0x09
     30e:	7a 85       	ldd	r23, Y+10	; 0x0a
     310:	8b 85       	ldd	r24, Y+11	; 0x0b
     312:	9c 85       	ldd	r25, Y+12	; 0x0c
     314:	a7 01       	movw	r20, r14
     316:	96 01       	movw	r18, r12
     318:	0e 94 81 10 	call	0x2102	; 0x2102 <__divmodsi4>
     31c:	30 93 a9 03 	sts	0x03A9, r19	; 0x8003a9 <mean_az+0x1>
     320:	20 93 a8 03 	sts	0x03A8, r18	; 0x8003a8 <mean_az>
      mean_gx=buff_gx/buffersize;
     324:	6d 85       	ldd	r22, Y+13	; 0x0d
     326:	7e 85       	ldd	r23, Y+14	; 0x0e
     328:	8f 85       	ldd	r24, Y+15	; 0x0f
     32a:	98 89       	ldd	r25, Y+16	; 0x10
     32c:	a7 01       	movw	r20, r14
     32e:	96 01       	movw	r18, r12
     330:	0e 94 81 10 	call	0x2102	; 0x2102 <__divmodsi4>
     334:	30 93 a7 03 	sts	0x03A7, r19	; 0x8003a7 <mean_gx+0x1>
     338:	20 93 a6 03 	sts	0x03A6, r18	; 0x8003a6 <mean_gx>
      mean_gy=buff_gy/buffersize;
     33c:	69 89       	ldd	r22, Y+17	; 0x11
     33e:	7a 89       	ldd	r23, Y+18	; 0x12
     340:	8b 89       	ldd	r24, Y+19	; 0x13
     342:	9c 89       	ldd	r25, Y+20	; 0x14
     344:	a7 01       	movw	r20, r14
     346:	96 01       	movw	r18, r12
     348:	0e 94 81 10 	call	0x2102	; 0x2102 <__divmodsi4>
     34c:	30 93 a5 03 	sts	0x03A5, r19	; 0x8003a5 <mean_gy+0x1>
     350:	20 93 a4 03 	sts	0x03A4, r18	; 0x8003a4 <mean_gy>
      mean_gz=buff_gz/buffersize;
     354:	c3 01       	movw	r24, r6
     356:	b2 01       	movw	r22, r4
     358:	a7 01       	movw	r20, r14
     35a:	96 01       	movw	r18, r12
     35c:	0e 94 81 10 	call	0x2102	; 0x2102 <__divmodsi4>
     360:	30 93 a3 03 	sts	0x03A3, r19	; 0x8003a3 <mean_gz+0x1>
     364:	20 93 a2 03 	sts	0x03A2, r18	; 0x8003a2 <mean_gz>
    }
    i++;
     368:	3f ef       	ldi	r19, 0xFF	; 255
     36a:	83 1a       	sub	r8, r19
     36c:	93 0a       	sbc	r9, r19
     36e:	a3 0a       	sbc	r10, r19
     370:	b3 0a       	sbc	r11, r19
    delay(2); //Needed so we don't get repeated measures
     372:	62 e0       	ldi	r22, 0x02	; 2
     374:	70 e0       	ldi	r23, 0x00	; 0
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	0e 94 4f 0a 	call	0x149e	; 0x149e <delay>

///////////////////////////////////   FUNCTIONS   ////////////////////////////////////
void meansensors(){
  long i=0,buff_ax=0,buff_ay=0,buff_az=0,buff_gx=0,buff_gy=0,buff_gz=0;

  while (i<(buffersize+101)){
     37e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <buffersize>
     382:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <buffersize+0x1>
     386:	8b 59       	subi	r24, 0x9B	; 155
     388:	9f 4f       	sbci	r25, 0xFF	; 255
     38a:	09 2e       	mov	r0, r25
     38c:	00 0c       	add	r0, r0
     38e:	aa 0b       	sbc	r26, r26
     390:	bb 0b       	sbc	r27, r27
     392:	88 16       	cp	r8, r24
     394:	99 06       	cpc	r9, r25
     396:	aa 06       	cpc	r10, r26
     398:	bb 06       	cpc	r11, r27
     39a:	0c f4       	brge	.+2      	; 0x39e <_Z11meansensorsv+0x270>
     39c:	eb ce       	rjmp	.-554    	; 0x174 <_Z11meansensorsv+0x46>
     39e:	33 c0       	rjmp	.+102    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
    // read raw accel/gyro measurements from device
    accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
     3a0:	0f 2e       	mov	r0, r31
     3a2:	fe ea       	ldi	r31, 0xAE	; 174
     3a4:	cf 2e       	mov	r12, r31
     3a6:	f3 e0       	ldi	r31, 0x03	; 3
     3a8:	df 2e       	mov	r13, r31
     3aa:	f0 2d       	mov	r31, r0
     3ac:	0f 2e       	mov	r0, r31
     3ae:	f0 eb       	ldi	r31, 0xB0	; 176
     3b0:	ef 2e       	mov	r14, r31
     3b2:	f3 e0       	ldi	r31, 0x03	; 3
     3b4:	ff 2e       	mov	r15, r31
     3b6:	f0 2d       	mov	r31, r0
     3b8:	02 eb       	ldi	r16, 0xB2	; 178
     3ba:	13 e0       	ldi	r17, 0x03	; 3
     3bc:	24 eb       	ldi	r18, 0xB4	; 180
     3be:	33 e0       	ldi	r19, 0x03	; 3
     3c0:	46 eb       	ldi	r20, 0xB6	; 182
     3c2:	53 e0       	ldi	r21, 0x03	; 3
     3c4:	68 eb       	ldi	r22, 0xB8	; 184
     3c6:	73 e0       	ldi	r23, 0x03	; 3
     3c8:	8a eb       	ldi	r24, 0xBA	; 186
     3ca:	93 e0       	ldi	r25, 0x03	; 3
     3cc:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <_ZN7MPU605010getMotion6EPiS0_S0_S0_S0_S0_>
     3d0:	81 2c       	mov	r8, r1
     3d2:	91 2c       	mov	r9, r1
     3d4:	54 01       	movw	r10, r8
     3d6:	41 2c       	mov	r4, r1
     3d8:	51 2c       	mov	r5, r1
     3da:	32 01       	movw	r6, r4
     3dc:	19 8a       	std	Y+17, r1	; 0x11
     3de:	1a 8a       	std	Y+18, r1	; 0x12
     3e0:	1b 8a       	std	Y+19, r1	; 0x13
     3e2:	1c 8a       	std	Y+20, r1	; 0x14
     3e4:	1d 86       	std	Y+13, r1	; 0x0d
     3e6:	1e 86       	std	Y+14, r1	; 0x0e
     3e8:	1f 86       	std	Y+15, r1	; 0x0f
     3ea:	18 8a       	std	Y+16, r1	; 0x10
     3ec:	19 86       	std	Y+9, r1	; 0x09
     3ee:	1a 86       	std	Y+10, r1	; 0x0a
     3f0:	1b 86       	std	Y+11, r1	; 0x0b
     3f2:	1c 86       	std	Y+12, r1	; 0x0c
     3f4:	1d 82       	std	Y+5, r1	; 0x05
     3f6:	1e 82       	std	Y+6, r1	; 0x06
     3f8:	1f 82       	std	Y+7, r1	; 0x07
     3fa:	18 86       	std	Y+8, r1	; 0x08
     3fc:	19 82       	std	Y+1, r1	; 0x01
     3fe:	1a 82       	std	Y+2, r1	; 0x02
     400:	1b 82       	std	Y+3, r1	; 0x03
     402:	1c 82       	std	Y+4, r1	; 0x04
     404:	56 cf       	rjmp	.-340    	; 0x2b2 <_Z11meansensorsv+0x184>
      mean_gz=buff_gz/buffersize;
    }
    i++;
    delay(2); //Needed so we don't get repeated measures
  }
}
     406:	64 96       	adiw	r28, 0x14	; 20
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	f8 94       	cli
     40c:	de bf       	out	0x3e, r29	; 62
     40e:	0f be       	out	0x3f, r0	; 63
     410:	cd bf       	out	0x3d, r28	; 61
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	1f 91       	pop	r17
     418:	0f 91       	pop	r16
     41a:	ff 90       	pop	r15
     41c:	ef 90       	pop	r14
     41e:	df 90       	pop	r13
     420:	cf 90       	pop	r12
     422:	bf 90       	pop	r11
     424:	af 90       	pop	r10
     426:	9f 90       	pop	r9
     428:	8f 90       	pop	r8
     42a:	7f 90       	pop	r7
     42c:	6f 90       	pop	r6
     42e:	5f 90       	pop	r5
     430:	4f 90       	pop	r4
     432:	08 95       	ret

00000434 <_Z11calibrationv>:

void calibration(){
     434:	ef 92       	push	r14
     436:	ff 92       	push	r15
     438:	0f 93       	push	r16
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
  ax_offset=-mean_ax/8;
     440:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <mean_ax>
     444:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <mean_ax+0x1>
     448:	91 95       	neg	r25
     44a:	81 95       	neg	r24
     44c:	91 09       	sbc	r25, r1
     44e:	0a f4       	brpl	.+2      	; 0x452 <_Z11calibrationv+0x1e>
     450:	07 96       	adiw	r24, 0x07	; 7
     452:	95 95       	asr	r25
     454:	87 95       	ror	r24
     456:	95 95       	asr	r25
     458:	87 95       	ror	r24
     45a:	95 95       	asr	r25
     45c:	87 95       	ror	r24
     45e:	90 93 9f 03 	sts	0x039F, r25	; 0x80039f <ax_offset+0x1>
     462:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <ax_offset>
  ay_offset=-mean_ay/8;
     466:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <mean_ay>
     46a:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <mean_ay+0x1>
     46e:	91 95       	neg	r25
     470:	81 95       	neg	r24
     472:	91 09       	sbc	r25, r1
     474:	0a f4       	brpl	.+2      	; 0x478 <_Z11calibrationv+0x44>
     476:	07 96       	adiw	r24, 0x07	; 7
     478:	95 95       	asr	r25
     47a:	87 95       	ror	r24
     47c:	95 95       	asr	r25
     47e:	87 95       	ror	r24
     480:	95 95       	asr	r25
     482:	87 95       	ror	r24
     484:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <ay_offset+0x1>
     488:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <ay_offset>
  az_offset=(16384-mean_az)/8;
     48c:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <mean_az>
     490:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <mean_az+0x1>
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	30 e4       	ldi	r19, 0x40	; 64
     498:	28 1b       	sub	r18, r24
     49a:	39 0b       	sbc	r19, r25
     49c:	c9 01       	movw	r24, r18
     49e:	99 23       	and	r25, r25
     4a0:	0c f4       	brge	.+2      	; 0x4a4 <_Z11calibrationv+0x70>
     4a2:	07 96       	adiw	r24, 0x07	; 7
     4a4:	95 95       	asr	r25
     4a6:	87 95       	ror	r24
     4a8:	95 95       	asr	r25
     4aa:	87 95       	ror	r24
     4ac:	95 95       	asr	r25
     4ae:	87 95       	ror	r24
     4b0:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <az_offset+0x1>
     4b4:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <az_offset>

  gx_offset=-mean_gx/4;
     4b8:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <mean_gx>
     4bc:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <mean_gx+0x1>
     4c0:	91 95       	neg	r25
     4c2:	81 95       	neg	r24
     4c4:	91 09       	sbc	r25, r1
     4c6:	0a f4       	brpl	.+2      	; 0x4ca <_Z11calibrationv+0x96>
     4c8:	03 96       	adiw	r24, 0x03	; 3
     4ca:	95 95       	asr	r25
     4cc:	87 95       	ror	r24
     4ce:	95 95       	asr	r25
     4d0:	87 95       	ror	r24
     4d2:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <gx_offset+0x1>
     4d6:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <gx_offset>
  gy_offset=-mean_gy/4;
     4da:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <mean_gy>
     4de:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <mean_gy+0x1>
     4e2:	91 95       	neg	r25
     4e4:	81 95       	neg	r24
     4e6:	91 09       	sbc	r25, r1
     4e8:	0a f4       	brpl	.+2      	; 0x4ec <_Z11calibrationv+0xb8>
     4ea:	03 96       	adiw	r24, 0x03	; 3
     4ec:	95 95       	asr	r25
     4ee:	87 95       	ror	r24
     4f0:	95 95       	asr	r25
     4f2:	87 95       	ror	r24
     4f4:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <gy_offset+0x1>
     4f8:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <gy_offset>
  gz_offset=-mean_gz/4;
     4fc:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <mean_gz>
     500:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <mean_gz+0x1>
     504:	91 95       	neg	r25
     506:	81 95       	neg	r24
     508:	91 09       	sbc	r25, r1
     50a:	0a f4       	brpl	.+2      	; 0x50e <_Z11calibrationv+0xda>
     50c:	03 96       	adiw	r24, 0x03	; 3
     50e:	95 95       	asr	r25
     510:	87 95       	ror	r24
     512:	95 95       	asr	r25
     514:	87 95       	ror	r24
     516:	90 93 95 03 	sts	0x0395, r25	; 0x800395 <__data_end+0x1>
     51a:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <__data_end>
    accelgyro.setZGyroOffset(gz_offset);

    meansensors();
    Serial.println("...");

    if (abs(mean_ax)<=acel_deadzone) ready++;
     51e:	ee 24       	eor	r14, r14
     520:	e3 94       	inc	r14
     522:	f1 2c       	mov	r15, r1

  gx_offset=-mean_gx/4;
  gy_offset=-mean_gy/4;
  gz_offset=-mean_gz/4;
  while (1){
    int ready=0;
     524:	00 e0       	ldi	r16, 0x00	; 0
     526:	10 e0       	ldi	r17, 0x00	; 0
    else ax_offset=ax_offset-mean_ax/acel_deadzone;

    if (abs(mean_ay)<=acel_deadzone) ready++;
    else ay_offset=ay_offset-mean_ay/acel_deadzone;

    if (abs(16384-mean_az)<=acel_deadzone) ready++;
     528:	c0 e0       	ldi	r28, 0x00	; 0
     52a:	d0 e4       	ldi	r29, 0x40	; 64
  gx_offset=-mean_gx/4;
  gy_offset=-mean_gy/4;
  gz_offset=-mean_gz/4;
  while (1){
    int ready=0;
    accelgyro.setXAccelOffset(ax_offset);
     52c:	60 91 9e 03 	lds	r22, 0x039E	; 0x80039e <ax_offset>
     530:	70 91 9f 03 	lds	r23, 0x039F	; 0x80039f <ax_offset+0x1>
     534:	8a eb       	ldi	r24, 0xBA	; 186
     536:	93 e0       	ldi	r25, 0x03	; 3
     538:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <_ZN7MPU605015setXAccelOffsetEi>
    accelgyro.setYAccelOffset(ay_offset);
     53c:	60 91 9c 03 	lds	r22, 0x039C	; 0x80039c <ay_offset>
     540:	70 91 9d 03 	lds	r23, 0x039D	; 0x80039d <ay_offset+0x1>
     544:	8a eb       	ldi	r24, 0xBA	; 186
     546:	93 e0       	ldi	r25, 0x03	; 3
     548:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <_ZN7MPU605015setYAccelOffsetEi>
    accelgyro.setZAccelOffset(az_offset);
     54c:	60 91 9a 03 	lds	r22, 0x039A	; 0x80039a <az_offset>
     550:	70 91 9b 03 	lds	r23, 0x039B	; 0x80039b <az_offset+0x1>
     554:	8a eb       	ldi	r24, 0xBA	; 186
     556:	93 e0       	ldi	r25, 0x03	; 3
     558:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <_ZN7MPU605015setZAccelOffsetEi>

    accelgyro.setXGyroOffset(gx_offset);
     55c:	60 91 98 03 	lds	r22, 0x0398	; 0x800398 <gx_offset>
     560:	70 91 99 03 	lds	r23, 0x0399	; 0x800399 <gx_offset+0x1>
     564:	8a eb       	ldi	r24, 0xBA	; 186
     566:	93 e0       	ldi	r25, 0x03	; 3
     568:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <_ZN7MPU605014setXGyroOffsetEi>
    accelgyro.setYGyroOffset(gy_offset);
     56c:	60 91 96 03 	lds	r22, 0x0396	; 0x800396 <gy_offset>
     570:	70 91 97 03 	lds	r23, 0x0397	; 0x800397 <gy_offset+0x1>
     574:	8a eb       	ldi	r24, 0xBA	; 186
     576:	93 e0       	ldi	r25, 0x03	; 3
     578:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_ZN7MPU605014setYGyroOffsetEi>
    accelgyro.setZGyroOffset(gz_offset);
     57c:	60 91 94 03 	lds	r22, 0x0394	; 0x800394 <__data_end>
     580:	70 91 95 03 	lds	r23, 0x0395	; 0x800395 <__data_end+0x1>
     584:	8a eb       	ldi	r24, 0xBA	; 186
     586:	93 e0       	ldi	r25, 0x03	; 3
     588:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <_ZN7MPU605014setZGyroOffsetEi>

    meansensors();
     58c:	0e 94 97 00 	call	0x12e	; 0x12e <_Z11meansensorsv>
    Serial.println("...");
     590:	67 e2       	ldi	r22, 0x27	; 39
     592:	71 e0       	ldi	r23, 0x01	; 1
     594:	89 ec       	ldi	r24, 0xC9	; 201
     596:	93 e0       	ldi	r25, 0x03	; 3
     598:	0e 94 cd 07 	call	0xf9a	; 0xf9a <_ZN5Print7printlnEPKc>

    if (abs(mean_ax)<=acel_deadzone) ready++;
     59c:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <mean_ax>
     5a0:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <mean_ax+0x1>
     5a4:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <acel_deadzone>
     5a8:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <acel_deadzone+0x1>
     5ac:	9c 01       	movw	r18, r24
     5ae:	99 23       	and	r25, r25
     5b0:	24 f4       	brge	.+8      	; 0x5ba <_Z11calibrationv+0x186>
     5b2:	22 27       	eor	r18, r18
     5b4:	33 27       	eor	r19, r19
     5b6:	28 1b       	sub	r18, r24
     5b8:	39 0b       	sbc	r19, r25
     5ba:	e2 17       	cp	r30, r18
     5bc:	f3 07       	cpc	r31, r19
     5be:	84 f4       	brge	.+32     	; 0x5e0 <_Z11calibrationv+0x1ac>
    else ax_offset=ax_offset-mean_ax/acel_deadzone;
     5c0:	bf 01       	movw	r22, r30
     5c2:	0e 94 4b 10 	call	0x2096	; 0x2096 <__divmodhi4>
     5c6:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <ax_offset>
     5ca:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <ax_offset+0x1>
     5ce:	86 1b       	sub	r24, r22
     5d0:	97 0b       	sbc	r25, r23
     5d2:	90 93 9f 03 	sts	0x039F, r25	; 0x80039f <ax_offset+0x1>
     5d6:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <ax_offset>

  gx_offset=-mean_gx/4;
  gy_offset=-mean_gy/4;
  gz_offset=-mean_gz/4;
  while (1){
    int ready=0;
     5da:	20 2f       	mov	r18, r16
     5dc:	31 2f       	mov	r19, r17
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <_Z11calibrationv+0x1b0>
    accelgyro.setZGyroOffset(gz_offset);

    meansensors();
    Serial.println("...");

    if (abs(mean_ax)<=acel_deadzone) ready++;
     5e0:	2e 2d       	mov	r18, r14
     5e2:	3f 2d       	mov	r19, r15
    else ax_offset=ax_offset-mean_ax/acel_deadzone;

    if (abs(mean_ay)<=acel_deadzone) ready++;
     5e4:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <mean_ay>
     5e8:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <mean_ay+0x1>
     5ec:	ac 01       	movw	r20, r24
     5ee:	99 23       	and	r25, r25
     5f0:	24 f4       	brge	.+8      	; 0x5fa <_Z11calibrationv+0x1c6>
     5f2:	44 27       	eor	r20, r20
     5f4:	55 27       	eor	r21, r21
     5f6:	48 1b       	sub	r20, r24
     5f8:	59 0b       	sbc	r21, r25
     5fa:	e4 17       	cp	r30, r20
     5fc:	f5 07       	cpc	r31, r21
     5fe:	1c f0       	brlt	.+6      	; 0x606 <_Z11calibrationv+0x1d2>
     600:	2f 5f       	subi	r18, 0xFF	; 255
     602:	3f 4f       	sbci	r19, 0xFF	; 255
     604:	0d c0       	rjmp	.+26     	; 0x620 <_Z11calibrationv+0x1ec>
    else ay_offset=ay_offset-mean_ay/acel_deadzone;
     606:	bf 01       	movw	r22, r30
     608:	0e 94 4b 10 	call	0x2096	; 0x2096 <__divmodhi4>
     60c:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <ay_offset>
     610:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <ay_offset+0x1>
     614:	86 1b       	sub	r24, r22
     616:	97 0b       	sbc	r25, r23
     618:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <ay_offset+0x1>
     61c:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <ay_offset>

    if (abs(16384-mean_az)<=acel_deadzone) ready++;
     620:	40 91 a8 03 	lds	r20, 0x03A8	; 0x8003a8 <mean_az>
     624:	50 91 a9 03 	lds	r21, 0x03A9	; 0x8003a9 <mean_az+0x1>
     628:	ce 01       	movw	r24, r28
     62a:	84 1b       	sub	r24, r20
     62c:	95 0b       	sbc	r25, r21
     62e:	18 16       	cp	r1, r24
     630:	19 06       	cpc	r1, r25
     632:	14 f0       	brlt	.+4      	; 0x638 <_Z11calibrationv+0x204>
     634:	50 54       	subi	r21, 0x40	; 64
     636:	01 c0       	rjmp	.+2      	; 0x63a <_Z11calibrationv+0x206>
     638:	ac 01       	movw	r20, r24
     63a:	e4 17       	cp	r30, r20
     63c:	f5 07       	cpc	r31, r21
     63e:	1c f0       	brlt	.+6      	; 0x646 <_Z11calibrationv+0x212>
     640:	2f 5f       	subi	r18, 0xFF	; 255
     642:	3f 4f       	sbci	r19, 0xFF	; 255
     644:	0d c0       	rjmp	.+26     	; 0x660 <_Z11calibrationv+0x22c>
    else az_offset=az_offset+(16384-mean_az)/acel_deadzone;
     646:	bf 01       	movw	r22, r30
     648:	0e 94 4b 10 	call	0x2096	; 0x2096 <__divmodhi4>
     64c:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <az_offset>
     650:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <az_offset+0x1>
     654:	68 0f       	add	r22, r24
     656:	79 1f       	adc	r23, r25
     658:	70 93 9b 03 	sts	0x039B, r23	; 0x80039b <az_offset+0x1>
     65c:	60 93 9a 03 	sts	0x039A, r22	; 0x80039a <az_offset>

    if (abs(mean_gx)<=giro_deadzone) ready++;
     660:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <mean_gx>
     664:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <mean_gx+0x1>
     668:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     66c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
     670:	ac 01       	movw	r20, r24
     672:	99 23       	and	r25, r25
     674:	24 f4       	brge	.+8      	; 0x67e <_Z11calibrationv+0x24a>
     676:	44 27       	eor	r20, r20
     678:	55 27       	eor	r21, r21
     67a:	48 1b       	sub	r20, r24
     67c:	59 0b       	sbc	r21, r25
     67e:	e4 17       	cp	r30, r20
     680:	f5 07       	cpc	r31, r21
     682:	1c f0       	brlt	.+6      	; 0x68a <_Z11calibrationv+0x256>
     684:	2f 5f       	subi	r18, 0xFF	; 255
     686:	3f 4f       	sbci	r19, 0xFF	; 255
     688:	0f c0       	rjmp	.+30     	; 0x6a8 <_Z11calibrationv+0x274>
    else gx_offset=gx_offset-mean_gx/(giro_deadzone+1);
     68a:	bf 01       	movw	r22, r30
     68c:	6f 5f       	subi	r22, 0xFF	; 255
     68e:	7f 4f       	sbci	r23, 0xFF	; 255
     690:	0e 94 4b 10 	call	0x2096	; 0x2096 <__divmodhi4>
     694:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <gx_offset>
     698:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <gx_offset+0x1>
     69c:	86 1b       	sub	r24, r22
     69e:	97 0b       	sbc	r25, r23
     6a0:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <gx_offset+0x1>
     6a4:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <gx_offset>

    if (abs(mean_gy)<=giro_deadzone) ready++;
     6a8:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <mean_gy>
     6ac:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <mean_gy+0x1>
     6b0:	ac 01       	movw	r20, r24
     6b2:	99 23       	and	r25, r25
     6b4:	24 f4       	brge	.+8      	; 0x6be <_Z11calibrationv+0x28a>
     6b6:	44 27       	eor	r20, r20
     6b8:	55 27       	eor	r21, r21
     6ba:	48 1b       	sub	r20, r24
     6bc:	59 0b       	sbc	r21, r25
     6be:	e4 17       	cp	r30, r20
     6c0:	f5 07       	cpc	r31, r21
     6c2:	1c f0       	brlt	.+6      	; 0x6ca <_Z11calibrationv+0x296>
     6c4:	2f 5f       	subi	r18, 0xFF	; 255
     6c6:	3f 4f       	sbci	r19, 0xFF	; 255
     6c8:	0f c0       	rjmp	.+30     	; 0x6e8 <_Z11calibrationv+0x2b4>
    else gy_offset=gy_offset-mean_gy/(giro_deadzone+1);
     6ca:	bf 01       	movw	r22, r30
     6cc:	6f 5f       	subi	r22, 0xFF	; 255
     6ce:	7f 4f       	sbci	r23, 0xFF	; 255
     6d0:	0e 94 4b 10 	call	0x2096	; 0x2096 <__divmodhi4>
     6d4:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <gy_offset>
     6d8:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <gy_offset+0x1>
     6dc:	86 1b       	sub	r24, r22
     6de:	97 0b       	sbc	r25, r23
     6e0:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <gy_offset+0x1>
     6e4:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <gy_offset>

    if (abs(mean_gz)<=giro_deadzone) ready++;
     6e8:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <mean_gz>
     6ec:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <mean_gz+0x1>
     6f0:	ac 01       	movw	r20, r24
     6f2:	99 23       	and	r25, r25
     6f4:	24 f4       	brge	.+8      	; 0x6fe <_Z11calibrationv+0x2ca>
     6f6:	44 27       	eor	r20, r20
     6f8:	55 27       	eor	r21, r21
     6fa:	48 1b       	sub	r20, r24
     6fc:	59 0b       	sbc	r21, r25
     6fe:	e4 17       	cp	r30, r20
     700:	f5 07       	cpc	r31, r21
     702:	1c f0       	brlt	.+6      	; 0x70a <_Z11calibrationv+0x2d6>
     704:	2f 5f       	subi	r18, 0xFF	; 255
     706:	3f 4f       	sbci	r19, 0xFF	; 255
     708:	0f c0       	rjmp	.+30     	; 0x728 <_Z11calibrationv+0x2f4>
    else gz_offset=gz_offset-mean_gz/(giro_deadzone+1);
     70a:	bf 01       	movw	r22, r30
     70c:	6f 5f       	subi	r22, 0xFF	; 255
     70e:	7f 4f       	sbci	r23, 0xFF	; 255
     710:	0e 94 4b 10 	call	0x2096	; 0x2096 <__divmodhi4>
     714:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <__data_end>
     718:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <__data_end+0x1>
     71c:	86 1b       	sub	r24, r22
     71e:	97 0b       	sbc	r25, r23
     720:	90 93 95 03 	sts	0x0395, r25	; 0x800395 <__data_end+0x1>
     724:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <__data_end>

    if (ready==6) break;
     728:	26 30       	cpi	r18, 0x06	; 6
     72a:	31 05       	cpc	r19, r1
     72c:	09 f0       	breq	.+2      	; 0x730 <_Z11calibrationv+0x2fc>
     72e:	fe ce       	rjmp	.-516    	; 0x52c <_Z11calibrationv+0xf8>
  }
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	0f 91       	pop	r16
     738:	ff 90       	pop	r15
     73a:	ef 90       	pop	r14
     73c:	08 95       	ret

0000073e <loop>:
  //accelgyro.setZGyroOffset(70);
}

///////////////////////////////////   LOOP   ////////////////////////////////////
void loop() {
  if (state==0){
     73e:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <state>
     742:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <state+0x1>
     746:	89 2b       	or	r24, r25
     748:	b9 f4       	brne	.+46     	; 0x778 <loop+0x3a>
    Serial.println("\nReading sensors for first time...");
     74a:	68 e0       	ldi	r22, 0x08	; 8
     74c:	71 e0       	ldi	r23, 0x01	; 1
     74e:	89 ec       	ldi	r24, 0xC9	; 201
     750:	93 e0       	ldi	r25, 0x03	; 3
     752:	0e 94 cd 07 	call	0xf9a	; 0xf9a <_ZN5Print7printlnEPKc>
    meansensors();
     756:	0e 94 97 00 	call	0x12e	; 0x12e <_Z11meansensorsv>
    state++;
     75a:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <state>
     75e:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <state+0x1>
     762:	01 96       	adiw	r24, 0x01	; 1
     764:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <state+0x1>
     768:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <state>
    delay(1000);
     76c:	68 ee       	ldi	r22, 0xE8	; 232
     76e:	73 e0       	ldi	r23, 0x03	; 3
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	0e 94 4f 0a 	call	0x149e	; 0x149e <delay>
  }

  if (state==1) {
     778:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <state>
     77c:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <state+0x1>
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	b9 f4       	brne	.+46     	; 0x7b2 <loop+0x74>
    Serial.println("\nCalculating offsets...");
     784:	6b e2       	ldi	r22, 0x2B	; 43
     786:	71 e0       	ldi	r23, 0x01	; 1
     788:	89 ec       	ldi	r24, 0xC9	; 201
     78a:	93 e0       	ldi	r25, 0x03	; 3
     78c:	0e 94 cd 07 	call	0xf9a	; 0xf9a <_ZN5Print7printlnEPKc>
    calibration();
     790:	0e 94 1a 02 	call	0x434	; 0x434 <_Z11calibrationv>
    state++;
     794:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <state>
     798:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <state+0x1>
     79c:	01 96       	adiw	r24, 0x01	; 1
     79e:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <state+0x1>
     7a2:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <state>
    delay(1000);
     7a6:	68 ee       	ldi	r22, 0xE8	; 232
     7a8:	73 e0       	ldi	r23, 0x03	; 3
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 4f 0a 	call	0x149e	; 0x149e <delay>
  }

  if (state==2) {
     7b2:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <state>
     7b6:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <state+0x1>
     7ba:	02 97       	sbiw	r24, 0x02	; 2
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <loop+0x82>
     7be:	db c0       	rjmp	.+438    	; 0x976 <__stack+0x77>
    meansensors();
     7c0:	0e 94 97 00 	call	0x12e	; 0x12e <_Z11meansensorsv>
    Serial.println("\nFINISHED!");
     7c4:	63 e4       	ldi	r22, 0x43	; 67
     7c6:	71 e0       	ldi	r23, 0x01	; 1
     7c8:	89 ec       	ldi	r24, 0xC9	; 201
     7ca:	93 e0       	ldi	r25, 0x03	; 3
     7cc:	0e 94 cd 07 	call	0xf9a	; 0xf9a <_ZN5Print7printlnEPKc>
    Serial.print("\nSensor readings with offsets:\t");
     7d0:	6e e4       	ldi	r22, 0x4E	; 78
     7d2:	71 e0       	ldi	r23, 0x01	; 1
     7d4:	89 ec       	ldi	r24, 0xC9	; 201
     7d6:	93 e0       	ldi	r25, 0x03	; 3
     7d8:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN5Print5printEPKc>
    Serial.print(mean_ax); 
     7dc:	60 91 ac 03 	lds	r22, 0x03AC	; 0x8003ac <mean_ax>
     7e0:	70 91 ad 03 	lds	r23, 0x03AD	; 0x8003ad <mean_ax+0x1>
     7e4:	4a e0       	ldi	r20, 0x0A	; 10
     7e6:	50 e0       	ldi	r21, 0x00	; 0
     7e8:	89 ec       	ldi	r24, 0xC9	; 201
     7ea:	93 e0       	ldi	r25, 0x03	; 3
     7ec:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <_ZN5Print5printEii>
    Serial.print("\t");
     7f0:	6c e6       	ldi	r22, 0x6C	; 108
     7f2:	71 e0       	ldi	r23, 0x01	; 1
     7f4:	89 ec       	ldi	r24, 0xC9	; 201
     7f6:	93 e0       	ldi	r25, 0x03	; 3
     7f8:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN5Print5printEPKc>
    Serial.print(mean_ay); 
     7fc:	60 91 aa 03 	lds	r22, 0x03AA	; 0x8003aa <mean_ay>
     800:	70 91 ab 03 	lds	r23, 0x03AB	; 0x8003ab <mean_ay+0x1>
     804:	4a e0       	ldi	r20, 0x0A	; 10
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	89 ec       	ldi	r24, 0xC9	; 201
     80a:	93 e0       	ldi	r25, 0x03	; 3
     80c:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <_ZN5Print5printEii>
    Serial.print("\t");
     810:	6c e6       	ldi	r22, 0x6C	; 108
     812:	71 e0       	ldi	r23, 0x01	; 1
     814:	89 ec       	ldi	r24, 0xC9	; 201
     816:	93 e0       	ldi	r25, 0x03	; 3
     818:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN5Print5printEPKc>
    Serial.print(mean_az); 
     81c:	60 91 a8 03 	lds	r22, 0x03A8	; 0x8003a8 <mean_az>
     820:	70 91 a9 03 	lds	r23, 0x03A9	; 0x8003a9 <mean_az+0x1>
     824:	4a e0       	ldi	r20, 0x0A	; 10
     826:	50 e0       	ldi	r21, 0x00	; 0
     828:	89 ec       	ldi	r24, 0xC9	; 201
     82a:	93 e0       	ldi	r25, 0x03	; 3
     82c:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <_ZN5Print5printEii>
    Serial.print("\t");
     830:	6c e6       	ldi	r22, 0x6C	; 108
     832:	71 e0       	ldi	r23, 0x01	; 1
     834:	89 ec       	ldi	r24, 0xC9	; 201
     836:	93 e0       	ldi	r25, 0x03	; 3
     838:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN5Print5printEPKc>
    Serial.print(mean_gx); 
     83c:	60 91 a6 03 	lds	r22, 0x03A6	; 0x8003a6 <mean_gx>
     840:	70 91 a7 03 	lds	r23, 0x03A7	; 0x8003a7 <mean_gx+0x1>
     844:	4a e0       	ldi	r20, 0x0A	; 10
     846:	50 e0       	ldi	r21, 0x00	; 0
     848:	89 ec       	ldi	r24, 0xC9	; 201
     84a:	93 e0       	ldi	r25, 0x03	; 3
     84c:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <_ZN5Print5printEii>
    Serial.print("\t");
     850:	6c e6       	ldi	r22, 0x6C	; 108
     852:	71 e0       	ldi	r23, 0x01	; 1
     854:	89 ec       	ldi	r24, 0xC9	; 201
     856:	93 e0       	ldi	r25, 0x03	; 3
     858:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN5Print5printEPKc>
    Serial.print(mean_gy); 
     85c:	60 91 a4 03 	lds	r22, 0x03A4	; 0x8003a4 <mean_gy>
     860:	70 91 a5 03 	lds	r23, 0x03A5	; 0x8003a5 <mean_gy+0x1>
     864:	4a e0       	ldi	r20, 0x0A	; 10
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	89 ec       	ldi	r24, 0xC9	; 201
     86a:	93 e0       	ldi	r25, 0x03	; 3
     86c:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <_ZN5Print5printEii>
    Serial.print("\t");
     870:	6c e6       	ldi	r22, 0x6C	; 108
     872:	71 e0       	ldi	r23, 0x01	; 1
     874:	89 ec       	ldi	r24, 0xC9	; 201
     876:	93 e0       	ldi	r25, 0x03	; 3
     878:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN5Print5printEPKc>
    Serial.println(mean_gz);
     87c:	60 91 a2 03 	lds	r22, 0x03A2	; 0x8003a2 <mean_gz>
     880:	70 91 a3 03 	lds	r23, 0x03A3	; 0x8003a3 <mean_gz+0x1>
     884:	4a e0       	ldi	r20, 0x0A	; 10
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	89 ec       	ldi	r24, 0xC9	; 201
     88a:	93 e0       	ldi	r25, 0x03	; 3
     88c:	0e 94 82 08 	call	0x1104	; 0x1104 <_ZN5Print7printlnEii>
    Serial.print("Your offsets:\t");
     890:	6e e6       	ldi	r22, 0x6E	; 110
     892:	71 e0       	ldi	r23, 0x01	; 1
     894:	89 ec       	ldi	r24, 0xC9	; 201
     896:	93 e0       	ldi	r25, 0x03	; 3
     898:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN5Print5printEPKc>
    Serial.print(ax_offset); 
     89c:	60 91 9e 03 	lds	r22, 0x039E	; 0x80039e <ax_offset>
     8a0:	70 91 9f 03 	lds	r23, 0x039F	; 0x80039f <ax_offset+0x1>
     8a4:	4a e0       	ldi	r20, 0x0A	; 10
     8a6:	50 e0       	ldi	r21, 0x00	; 0
     8a8:	89 ec       	ldi	r24, 0xC9	; 201
     8aa:	93 e0       	ldi	r25, 0x03	; 3
     8ac:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <_ZN5Print5printEii>
    Serial.print("\t");
     8b0:	6c e6       	ldi	r22, 0x6C	; 108
     8b2:	71 e0       	ldi	r23, 0x01	; 1
     8b4:	89 ec       	ldi	r24, 0xC9	; 201
     8b6:	93 e0       	ldi	r25, 0x03	; 3
     8b8:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN5Print5printEPKc>
    Serial.print(ay_offset); 
     8bc:	60 91 9c 03 	lds	r22, 0x039C	; 0x80039c <ay_offset>
     8c0:	70 91 9d 03 	lds	r23, 0x039D	; 0x80039d <ay_offset+0x1>
     8c4:	4a e0       	ldi	r20, 0x0A	; 10
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	89 ec       	ldi	r24, 0xC9	; 201
     8ca:	93 e0       	ldi	r25, 0x03	; 3
     8cc:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <_ZN5Print5printEii>
    Serial.print("\t");
     8d0:	6c e6       	ldi	r22, 0x6C	; 108
     8d2:	71 e0       	ldi	r23, 0x01	; 1
     8d4:	89 ec       	ldi	r24, 0xC9	; 201
     8d6:	93 e0       	ldi	r25, 0x03	; 3
     8d8:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN5Print5printEPKc>
    Serial.print(az_offset); 
     8dc:	60 91 9a 03 	lds	r22, 0x039A	; 0x80039a <az_offset>
     8e0:	70 91 9b 03 	lds	r23, 0x039B	; 0x80039b <az_offset+0x1>
     8e4:	4a e0       	ldi	r20, 0x0A	; 10
     8e6:	50 e0       	ldi	r21, 0x00	; 0
     8e8:	89 ec       	ldi	r24, 0xC9	; 201
     8ea:	93 e0       	ldi	r25, 0x03	; 3
     8ec:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <_ZN5Print5printEii>
    Serial.print("\t");
     8f0:	6c e6       	ldi	r22, 0x6C	; 108
     8f2:	71 e0       	ldi	r23, 0x01	; 1
     8f4:	89 ec       	ldi	r24, 0xC9	; 201
     8f6:	93 e0       	ldi	r25, 0x03	; 3
     8f8:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN5Print5printEPKc>
    Serial.print(gx_offset); 
     8fc:	60 91 98 03 	lds	r22, 0x0398	; 0x800398 <gx_offset>
     900:	70 91 99 03 	lds	r23, 0x0399	; 0x800399 <gx_offset+0x1>
     904:	4a e0       	ldi	r20, 0x0A	; 10
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	89 ec       	ldi	r24, 0xC9	; 201
     90a:	93 e0       	ldi	r25, 0x03	; 3
     90c:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <_ZN5Print5printEii>
    Serial.print("\t");
     910:	6c e6       	ldi	r22, 0x6C	; 108
     912:	71 e0       	ldi	r23, 0x01	; 1
     914:	89 ec       	ldi	r24, 0xC9	; 201
     916:	93 e0       	ldi	r25, 0x03	; 3
     918:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN5Print5printEPKc>
    Serial.print(gy_offset); 
     91c:	60 91 96 03 	lds	r22, 0x0396	; 0x800396 <gy_offset>
     920:	70 91 97 03 	lds	r23, 0x0397	; 0x800397 <gy_offset+0x1>
     924:	4a e0       	ldi	r20, 0x0A	; 10
     926:	50 e0       	ldi	r21, 0x00	; 0
     928:	89 ec       	ldi	r24, 0xC9	; 201
     92a:	93 e0       	ldi	r25, 0x03	; 3
     92c:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <_ZN5Print5printEii>
    Serial.print("\t");
     930:	6c e6       	ldi	r22, 0x6C	; 108
     932:	71 e0       	ldi	r23, 0x01	; 1
     934:	89 ec       	ldi	r24, 0xC9	; 201
     936:	93 e0       	ldi	r25, 0x03	; 3
     938:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN5Print5printEPKc>
    Serial.println(gz_offset); 
     93c:	60 91 94 03 	lds	r22, 0x0394	; 0x800394 <__data_end>
     940:	70 91 95 03 	lds	r23, 0x0395	; 0x800395 <__data_end+0x1>
     944:	4a e0       	ldi	r20, 0x0A	; 10
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	89 ec       	ldi	r24, 0xC9	; 201
     94a:	93 e0       	ldi	r25, 0x03	; 3
     94c:	0e 94 82 08 	call	0x1104	; 0x1104 <_ZN5Print7printlnEii>
    Serial.println("\nData is printed as: acelX acelY acelZ giroX giroY giroZ");
     950:	6d e7       	ldi	r22, 0x7D	; 125
     952:	71 e0       	ldi	r23, 0x01	; 1
     954:	89 ec       	ldi	r24, 0xC9	; 201
     956:	93 e0       	ldi	r25, 0x03	; 3
     958:	0e 94 cd 07 	call	0xf9a	; 0xf9a <_ZN5Print7printlnEPKc>
    Serial.println("Check that your sensor readings are close to 0 0 16384 0 0 0");
     95c:	66 eb       	ldi	r22, 0xB6	; 182
     95e:	71 e0       	ldi	r23, 0x01	; 1
     960:	89 ec       	ldi	r24, 0xC9	; 201
     962:	93 e0       	ldi	r25, 0x03	; 3
     964:	0e 94 cd 07 	call	0xf9a	; 0xf9a <_ZN5Print7printlnEPKc>
    Serial.println("If calibration was succesful write down your offsets so you can set them in your projects using something similar to mpu.setXAccelOffset(youroffset)");
     968:	63 ef       	ldi	r22, 0xF3	; 243
     96a:	71 e0       	ldi	r23, 0x01	; 1
     96c:	89 ec       	ldi	r24, 0xC9	; 201
     96e:	93 e0       	ldi	r25, 0x03	; 3
     970:	0e 94 cd 07 	call	0xf9a	; 0xf9a <_ZN5Print7printlnEPKc>
    calibration();
    state++;
    delay(1000);
  }

  if (state==2) {
     974:	ff cf       	rjmp	.-2      	; 0x974 <__stack+0x75>
     976:	08 95       	ret

00000978 <_GLOBAL__sub_I_buffersize>:
// default I2C address is 0x68
// specific I2C addresses may be passed as a parameter here
// AD0 low = 0x68 (default for InvenSense evaluation board)
// AD0 high = 0x69
//MPU6050 accelgyro;
MPU6050 accelgyro(0x68); // <-- use for AD0 high
     978:	68 e6       	ldi	r22, 0x68	; 104
     97a:	8a eb       	ldi	r24, 0xBA	; 186
     97c:	93 e0       	ldi	r25, 0x03	; 3
     97e:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <_ZN7MPU6050C1Eh>
     982:	08 95       	ret

00000984 <setup>:
int ax_offset,ay_offset,az_offset,gx_offset,gy_offset,gz_offset;

///////////////////////////////////   SETUP   ////////////////////////////////////
void setup() {
  // join I2C bus (I2Cdev library doesn't do this automatically)
  Wire.begin();
     984:	86 e6       	ldi	r24, 0x66	; 102
     986:	94 e0       	ldi	r25, 0x04	; 4
     988:	0e 94 36 09 	call	0x126c	; 0x126c <_ZN7TwoWire5beginEv>
  // COMMENT NEXT LINE IF YOU ARE USING ARDUINO DUE
  TWBR = 24; // 400kHz I2C clock (200kHz if CPU is 8MHz). Leonardo measured 250kHz.
     98c:	88 e1       	ldi	r24, 0x18	; 24
     98e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     992:	26 e0       	ldi	r18, 0x06	; 6
     994:	40 e0       	ldi	r20, 0x00	; 0
     996:	52 ec       	ldi	r21, 0xC2	; 194
     998:	61 e0       	ldi	r22, 0x01	; 1
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	89 ec       	ldi	r24, 0xC9	; 201
     99e:	93 e0       	ldi	r25, 0x03	; 3
     9a0:	0e 94 2a 06 	call	0xc54	; 0xc54 <_ZN14HardwareSerial5beginEmh>

  // initialize serial communication
  Serial.begin(115200);

  // initialize device
  accelgyro.initialize();
     9a4:	8a eb       	ldi	r24, 0xBA	; 186
     9a6:	93 e0       	ldi	r25, 0x03	; 3
     9a8:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <_ZN7MPU605010initializeEv>

  // wait for ready
  while (Serial.available() && Serial.read()); // empty buffer
     9ac:	89 ec       	ldi	r24, 0xC9	; 201
     9ae:	93 e0       	ldi	r25, 0x03	; 3
     9b0:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_ZN14HardwareSerial9availableEv>
     9b4:	89 2b       	or	r24, r25
     9b6:	99 f0       	breq	.+38     	; 0x9de <setup+0x5a>
     9b8:	89 ec       	ldi	r24, 0xC9	; 201
     9ba:	93 e0       	ldi	r25, 0x03	; 3
     9bc:	0e 94 6d 05 	call	0xada	; 0xada <_ZN14HardwareSerial4readEv>
     9c0:	89 2b       	or	r24, r25
     9c2:	a1 f7       	brne	.-24     	; 0x9ac <setup+0x28>
     9c4:	0c c0       	rjmp	.+24     	; 0x9de <setup+0x5a>
  while (!Serial.available()){
    Serial.println(F("Send any character to start sketch.\n"));
     9c6:	68 e6       	ldi	r22, 0x68	; 104
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	89 ec       	ldi	r24, 0xC9	; 201
     9cc:	93 e0       	ldi	r25, 0x03	; 3
     9ce:	0e 94 bb 07 	call	0xf76	; 0xf76 <_ZN5Print7printlnEPK19__FlashStringHelper>
    delay(1500);
     9d2:	6c ed       	ldi	r22, 0xDC	; 220
     9d4:	75 e0       	ldi	r23, 0x05	; 5
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 94 4f 0a 	call	0x149e	; 0x149e <delay>
  // initialize device
  accelgyro.initialize();

  // wait for ready
  while (Serial.available() && Serial.read()); // empty buffer
  while (!Serial.available()){
     9de:	89 ec       	ldi	r24, 0xC9	; 201
     9e0:	93 e0       	ldi	r25, 0x03	; 3
     9e2:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_ZN14HardwareSerial9availableEv>
     9e6:	89 2b       	or	r24, r25
     9e8:	71 f3       	breq	.-36     	; 0x9c6 <setup+0x42>
    Serial.println(F("Send any character to start sketch.\n"));
    delay(1500);
  }                
  while (Serial.available() && Serial.read()); // empty buffer again
     9ea:	89 ec       	ldi	r24, 0xC9	; 201
     9ec:	93 e0       	ldi	r25, 0x03	; 3
     9ee:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_ZN14HardwareSerial9availableEv>
     9f2:	89 2b       	or	r24, r25
     9f4:	31 f0       	breq	.+12     	; 0xa02 <setup+0x7e>
     9f6:	89 ec       	ldi	r24, 0xC9	; 201
     9f8:	93 e0       	ldi	r25, 0x03	; 3
     9fa:	0e 94 6d 05 	call	0xada	; 0xada <_ZN14HardwareSerial4readEv>
     9fe:	89 2b       	or	r24, r25
     a00:	a1 f7       	brne	.-24     	; 0x9ea <setup+0x66>

  // start message
  Serial.println("\nMPU6050 Calibration Sketch");
     a02:	60 ec       	ldi	r22, 0xC0	; 192
     a04:	72 e0       	ldi	r23, 0x02	; 2
     a06:	89 ec       	ldi	r24, 0xC9	; 201
     a08:	93 e0       	ldi	r25, 0x03	; 3
     a0a:	0e 94 cd 07 	call	0xf9a	; 0xf9a <_ZN5Print7printlnEPKc>
  delay(2000);
     a0e:	60 ed       	ldi	r22, 0xD0	; 208
     a10:	77 e0       	ldi	r23, 0x07	; 7
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0e 94 4f 0a 	call	0x149e	; 0x149e <delay>
  Serial.println("\nYour MPU6050 should be placed in horizontal position, with package letters facing up. \nDon't touch it until you see a finish message.\n");
     a1a:	6c ed       	ldi	r22, 0xDC	; 220
     a1c:	72 e0       	ldi	r23, 0x02	; 2
     a1e:	89 ec       	ldi	r24, 0xC9	; 201
     a20:	93 e0       	ldi	r25, 0x03	; 3
     a22:	0e 94 cd 07 	call	0xf9a	; 0xf9a <_ZN5Print7printlnEPKc>
  delay(3000);
     a26:	68 eb       	ldi	r22, 0xB8	; 184
     a28:	7b e0       	ldi	r23, 0x0B	; 11
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	0e 94 4f 0a 	call	0x149e	; 0x149e <delay>
  // verify connection
  Serial.println(accelgyro.testConnection() ? "MPU6050 connection successful" : "MPU6050 connection failed");
     a32:	8a eb       	ldi	r24, 0xBA	; 186
     a34:	93 e0       	ldi	r25, 0x03	; 3
     a36:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN7MPU605014testConnectionEv>
     a3a:	81 11       	cpse	r24, r1
     a3c:	03 c0       	rjmp	.+6      	; 0xa44 <setup+0xc0>
     a3e:	66 ea       	ldi	r22, 0xA6	; 166
     a40:	72 e0       	ldi	r23, 0x02	; 2
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <setup+0xc4>
     a44:	68 e8       	ldi	r22, 0x88	; 136
     a46:	72 e0       	ldi	r23, 0x02	; 2
     a48:	89 ec       	ldi	r24, 0xC9	; 201
     a4a:	93 e0       	ldi	r25, 0x03	; 3
     a4c:	0e 94 cd 07 	call	0xf9a	; 0xf9a <_ZN5Print7printlnEPKc>
  delay(1000);
     a50:	68 ee       	ldi	r22, 0xE8	; 232
     a52:	73 e0       	ldi	r23, 0x03	; 3
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 4f 0a 	call	0x149e	; 0x149e <delay>
  // reset offsets
  accelgyro.setXAccelOffset(0);
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	8a eb       	ldi	r24, 0xBA	; 186
     a62:	93 e0       	ldi	r25, 0x03	; 3
     a64:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <_ZN7MPU605015setXAccelOffsetEi>
  accelgyro.setYAccelOffset(0);
     a68:	60 e0       	ldi	r22, 0x00	; 0
     a6a:	70 e0       	ldi	r23, 0x00	; 0
     a6c:	8a eb       	ldi	r24, 0xBA	; 186
     a6e:	93 e0       	ldi	r25, 0x03	; 3
     a70:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <_ZN7MPU605015setYAccelOffsetEi>
  accelgyro.setZAccelOffset(0);
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	8a eb       	ldi	r24, 0xBA	; 186
     a7a:	93 e0       	ldi	r25, 0x03	; 3
     a7c:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <_ZN7MPU605015setZAccelOffsetEi>
  accelgyro.setXGyroOffset(0);
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	8a eb       	ldi	r24, 0xBA	; 186
     a86:	93 e0       	ldi	r25, 0x03	; 3
     a88:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <_ZN7MPU605014setXGyroOffsetEi>
  accelgyro.setYGyroOffset(0);
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	8a eb       	ldi	r24, 0xBA	; 186
     a92:	93 e0       	ldi	r25, 0x03	; 3
     a94:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_ZN7MPU605014setYGyroOffsetEi>
  accelgyro.setZGyroOffset(0);
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	8a eb       	ldi	r24, 0xBA	; 186
     a9e:	93 e0       	ldi	r25, 0x03	; 3
     aa0:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <_ZN7MPU605014setZGyroOffsetEi>
     aa4:	08 95       	ret

00000aa6 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     aa6:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     aa8:	91 8d       	ldd	r25, Z+25	; 0x19
     aaa:	22 8d       	ldd	r18, Z+26	; 0x1a
     aac:	89 2f       	mov	r24, r25
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	80 5c       	subi	r24, 0xC0	; 192
     ab2:	9f 4f       	sbci	r25, 0xFF	; 255
     ab4:	82 1b       	sub	r24, r18
     ab6:	91 09       	sbc	r25, r1
}
     ab8:	8f 73       	andi	r24, 0x3F	; 63
     aba:	99 27       	eor	r25, r25
     abc:	08 95       	ret

00000abe <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     abe:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     ac0:	91 8d       	ldd	r25, Z+25	; 0x19
     ac2:	82 8d       	ldd	r24, Z+26	; 0x1a
     ac4:	98 17       	cp	r25, r24
     ac6:	31 f0       	breq	.+12     	; 0xad4 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     ac8:	82 8d       	ldd	r24, Z+26	; 0x1a
     aca:	e8 0f       	add	r30, r24
     acc:	f1 1d       	adc	r31, r1
     ace:	85 8d       	ldd	r24, Z+29	; 0x1d
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     ad4:	8f ef       	ldi	r24, 0xFF	; 255
     ad6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     ad8:	08 95       	ret

00000ada <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     ada:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     adc:	91 8d       	ldd	r25, Z+25	; 0x19
     ade:	82 8d       	ldd	r24, Z+26	; 0x1a
     ae0:	98 17       	cp	r25, r24
     ae2:	61 f0       	breq	.+24     	; 0xafc <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     ae4:	82 8d       	ldd	r24, Z+26	; 0x1a
     ae6:	df 01       	movw	r26, r30
     ae8:	a8 0f       	add	r26, r24
     aea:	b1 1d       	adc	r27, r1
     aec:	5d 96       	adiw	r26, 0x1d	; 29
     aee:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     af0:	92 8d       	ldd	r25, Z+26	; 0x1a
     af2:	9f 5f       	subi	r25, 0xFF	; 255
     af4:	9f 73       	andi	r25, 0x3F	; 63
     af6:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     afc:	8f ef       	ldi	r24, 0xFF	; 255
     afe:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     b00:	08 95       	ret

00000b02 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     b02:	81 ef       	ldi	r24, 0xF1	; 241
     b04:	96 e0       	ldi	r25, 0x06	; 6
     b06:	89 2b       	or	r24, r25
     b08:	49 f0       	breq	.+18     	; 0xb1c <_Z14serialEventRunv+0x1a>
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	89 2b       	or	r24, r25
     b10:	29 f0       	breq	.+10     	; 0xb1c <_Z14serialEventRunv+0x1a>
     b12:	0e 94 f1 06 	call	0xde2	; 0xde2 <_Z17Serial0_availablev>
     b16:	81 11       	cpse	r24, r1
     b18:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     b1c:	08 95       	ret

00000b1e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     b1e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     b20:	84 8d       	ldd	r24, Z+28	; 0x1c
     b22:	df 01       	movw	r26, r30
     b24:	a8 0f       	add	r26, r24
     b26:	b1 1d       	adc	r27, r1
     b28:	a3 5a       	subi	r26, 0xA3	; 163
     b2a:	bf 4f       	sbci	r27, 0xFF	; 255
     b2c:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     b2e:	24 8d       	ldd	r18, Z+28	; 0x1c
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	2f 5f       	subi	r18, 0xFF	; 255
     b34:	3f 4f       	sbci	r19, 0xFF	; 255
     b36:	2f 73       	andi	r18, 0x3F	; 63
     b38:	30 78       	andi	r19, 0x80	; 128
     b3a:	33 23       	and	r19, r19
     b3c:	34 f4       	brge	.+12     	; 0xb4a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
     b3e:	21 50       	subi	r18, 0x01	; 1
     b40:	31 09       	sbc	r19, r1
     b42:	20 6c       	ori	r18, 0xC0	; 192
     b44:	3f 6f       	ori	r19, 0xFF	; 255
     b46:	2f 5f       	subi	r18, 0xFF	; 255
     b48:	3f 4f       	sbci	r19, 0xFF	; 255
     b4a:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
     b4c:	a6 89       	ldd	r26, Z+22	; 0x16
     b4e:	b7 89       	ldd	r27, Z+23	; 0x17
     b50:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     b52:	a0 89       	ldd	r26, Z+16	; 0x10
     b54:	b1 89       	ldd	r27, Z+17	; 0x11
     b56:	8c 91       	ld	r24, X
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     b5c:	93 8d       	ldd	r25, Z+27	; 0x1b
     b5e:	84 8d       	ldd	r24, Z+28	; 0x1c
     b60:	98 13       	cpse	r25, r24
     b62:	06 c0       	rjmp	.+12     	; 0xb70 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     b64:	02 88       	ldd	r0, Z+18	; 0x12
     b66:	f3 89       	ldd	r31, Z+19	; 0x13
     b68:	e0 2d       	mov	r30, r0
     b6a:	80 81       	ld	r24, Z
     b6c:	8f 7d       	andi	r24, 0xDF	; 223
     b6e:	80 83       	st	Z, r24
     b70:	08 95       	ret

00000b72 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
     b76:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     b78:	88 8d       	ldd	r24, Y+24	; 0x18
     b7a:	81 11       	cpse	r24, r1
     b7c:	0f c0       	rjmp	.+30     	; 0xb9c <_ZN14HardwareSerial5flushEv+0x2a>
     b7e:	18 c0       	rjmp	.+48     	; 0xbb0 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	07 fc       	sbrc	r0, 7
     b84:	0d c0       	rjmp	.+26     	; 0xba0 <_ZN14HardwareSerial5flushEv+0x2e>
     b86:	90 81       	ld	r25, Z
     b88:	95 ff       	sbrs	r25, 5
     b8a:	0a c0       	rjmp	.+20     	; 0xba0 <_ZN14HardwareSerial5flushEv+0x2e>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     b8c:	a8 89       	ldd	r26, Y+16	; 0x10
     b8e:	b9 89       	ldd	r27, Y+17	; 0x11
     b90:	8c 91       	ld	r24, X
     b92:	85 ff       	sbrs	r24, 5
     b94:	05 c0       	rjmp	.+10     	; 0xba0 <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
     b96:	ce 01       	movw	r24, r28
     b98:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     b9c:	ea 89       	ldd	r30, Y+18	; 0x12
     b9e:	fb 89       	ldd	r31, Y+19	; 0x13
     ba0:	90 81       	ld	r25, Z
     ba2:	95 fd       	sbrc	r25, 5
     ba4:	ed cf       	rjmp	.-38     	; 0xb80 <_ZN14HardwareSerial5flushEv+0xe>
     ba6:	a8 89       	ldd	r26, Y+16	; 0x10
     ba8:	b9 89       	ldd	r27, Y+17	; 0x11
     baa:	8c 91       	ld	r24, X
     bac:	86 ff       	sbrs	r24, 6
     bae:	e8 cf       	rjmp	.-48     	; 0xb80 <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	08 95       	ret

00000bb6 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	fc 01       	movw	r30, r24
  _written = true;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	80 8f       	std	Z+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     bc4:	93 8d       	ldd	r25, Z+27	; 0x1b
     bc6:	84 8d       	ldd	r24, Z+28	; 0x1c
     bc8:	98 13       	cpse	r25, r24
     bca:	22 c0       	rjmp	.+68     	; 0xc10 <_ZN14HardwareSerial5writeEh+0x5a>
     bcc:	a0 89       	ldd	r26, Z+16	; 0x10
     bce:	b1 89       	ldd	r27, Z+17	; 0x11
     bd0:	8c 91       	ld	r24, X
     bd2:	85 fd       	sbrc	r24, 5
     bd4:	2f c0       	rjmp	.+94     	; 0xc34 <_ZN14HardwareSerial5writeEh+0x7e>
     bd6:	1c c0       	rjmp	.+56     	; 0xc10 <_ZN14HardwareSerial5writeEh+0x5a>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	07 fc       	sbrc	r0, 7
     bdc:	08 c0       	rjmp	.+16     	; 0xbee <_ZN14HardwareSerial5writeEh+0x38>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     bde:	e8 89       	ldd	r30, Y+16	; 0x10
     be0:	f9 89       	ldd	r31, Y+17	; 0x11
     be2:	80 81       	ld	r24, Z
     be4:	85 ff       	sbrs	r24, 5
     be6:	03 c0       	rjmp	.+6      	; 0xbee <_ZN14HardwareSerial5writeEh+0x38>
	_tx_udr_empty_irq();
     be8:	ce 01       	movw	r24, r28
     bea:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     bee:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bf0:	09 17       	cp	r16, r25
     bf2:	91 f3       	breq	.-28     	; 0xbd8 <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     bf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bf6:	fe 01       	movw	r30, r28
     bf8:	e8 0f       	add	r30, r24
     bfa:	f1 1d       	adc	r31, r1
     bfc:	e3 5a       	subi	r30, 0xA3	; 163
     bfe:	ff 4f       	sbci	r31, 0xFF	; 255
     c00:	10 83       	st	Z, r17
  _tx_buffer_head = i;
     c02:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     c04:	ea 89       	ldd	r30, Y+18	; 0x12
     c06:	fb 89       	ldd	r31, Y+19	; 0x13
     c08:	80 81       	ld	r24, Z
     c0a:	80 62       	ori	r24, 0x20	; 32
     c0c:	80 83       	st	Z, r24
  
  return 1;
     c0e:	1b c0       	rjmp	.+54     	; 0xc46 <_ZN14HardwareSerial5writeEh+0x90>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     c10:	23 8d       	ldd	r18, Z+27	; 0x1b
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	2f 5f       	subi	r18, 0xFF	; 255
     c16:	3f 4f       	sbci	r19, 0xFF	; 255
     c18:	2f 73       	andi	r18, 0x3F	; 63
     c1a:	30 78       	andi	r19, 0x80	; 128
     c1c:	33 23       	and	r19, r19
     c1e:	34 f4       	brge	.+12     	; 0xc2c <_ZN14HardwareSerial5writeEh+0x76>
     c20:	21 50       	subi	r18, 0x01	; 1
     c22:	31 09       	sbc	r19, r1
     c24:	20 6c       	ori	r18, 0xC0	; 192
     c26:	3f 6f       	ori	r19, 0xFF	; 255
     c28:	2f 5f       	subi	r18, 0xFF	; 255
     c2a:	3f 4f       	sbci	r19, 0xFF	; 255
     c2c:	16 2f       	mov	r17, r22
     c2e:	ef 01       	movw	r28, r30
     c30:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     c32:	dd cf       	rjmp	.-70     	; 0xbee <_ZN14HardwareSerial5writeEh+0x38>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     c34:	a6 89       	ldd	r26, Z+22	; 0x16
     c36:	b7 89       	ldd	r27, Z+23	; 0x17
     c38:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
     c3a:	00 88       	ldd	r0, Z+16	; 0x10
     c3c:	f1 89       	ldd	r31, Z+17	; 0x11
     c3e:	e0 2d       	mov	r30, r0
     c40:	80 81       	ld	r24, Z
     c42:	80 64       	ori	r24, 0x40	; 64
     c44:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	1f 91       	pop	r17
     c50:	0f 91       	pop	r16
     c52:	08 95       	ret

00000c54 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     c54:	bf 92       	push	r11
     c56:	cf 92       	push	r12
     c58:	df 92       	push	r13
     c5a:	ef 92       	push	r14
     c5c:	ff 92       	push	r15
     c5e:	0f 93       	push	r16
     c60:	1f 93       	push	r17
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	ec 01       	movw	r28, r24
     c68:	6a 01       	movw	r12, r20
     c6a:	7b 01       	movw	r14, r22
     c6c:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     c6e:	e8 89       	ldd	r30, Y+16	; 0x10
     c70:	f9 89       	ldd	r31, Y+17	; 0x11
     c72:	82 e0       	ldi	r24, 0x02	; 2
     c74:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     c76:	41 15       	cp	r20, r1
     c78:	51 4e       	sbci	r21, 0xE1	; 225
     c7a:	61 05       	cpc	r22, r1
     c7c:	71 05       	cpc	r23, r1
     c7e:	b1 f0       	breq	.+44     	; 0xcac <_ZN14HardwareSerial5beginEmh+0x58>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	79 e0       	ldi	r23, 0x09	; 9
     c84:	8d e3       	ldi	r24, 0x3D	; 61
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	a7 01       	movw	r20, r14
     c8a:	96 01       	movw	r18, r12
     c8c:	0e 94 5f 10 	call	0x20be	; 0x20be <__udivmodsi4>
     c90:	89 01       	movw	r16, r18
     c92:	9a 01       	movw	r18, r20
     c94:	01 50       	subi	r16, 0x01	; 1
     c96:	11 09       	sbc	r17, r1
     c98:	21 09       	sbc	r18, r1
     c9a:	31 09       	sbc	r19, r1
     c9c:	36 95       	lsr	r19
     c9e:	27 95       	ror	r18
     ca0:	17 95       	ror	r17
     ca2:	07 95       	ror	r16
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     ca4:	01 15       	cp	r16, r1
     ca6:	80 e1       	ldi	r24, 0x10	; 16
     ca8:	18 07       	cpc	r17, r24
     caa:	a8 f0       	brcs	.+42     	; 0xcd6 <_ZN14HardwareSerial5beginEmh+0x82>
  {
    *_ucsra = 0;
     cac:	e8 89       	ldd	r30, Y+16	; 0x10
     cae:	f9 89       	ldd	r31, Y+17	; 0x11
     cb0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     cb2:	60 e8       	ldi	r22, 0x80	; 128
     cb4:	74 e8       	ldi	r23, 0x84	; 132
     cb6:	8e e1       	ldi	r24, 0x1E	; 30
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	a7 01       	movw	r20, r14
     cbc:	96 01       	movw	r18, r12
     cbe:	0e 94 5f 10 	call	0x20be	; 0x20be <__udivmodsi4>
     cc2:	da 01       	movw	r26, r20
     cc4:	c9 01       	movw	r24, r18
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	a1 09       	sbc	r26, r1
     cca:	b1 09       	sbc	r27, r1
     ccc:	b6 95       	lsr	r27
     cce:	a7 95       	ror	r26
     cd0:	97 95       	ror	r25
     cd2:	87 95       	ror	r24
     cd4:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     cd6:	ec 85       	ldd	r30, Y+12	; 0x0c
     cd8:	fd 85       	ldd	r31, Y+13	; 0x0d
     cda:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
     cdc:	ee 85       	ldd	r30, Y+14	; 0x0e
     cde:	ff 85       	ldd	r31, Y+15	; 0x0f
     ce0:	00 83       	st	Z, r16

  _written = false;
     ce2:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     ce4:	ec 89       	ldd	r30, Y+20	; 0x14
     ce6:	fd 89       	ldd	r31, Y+21	; 0x15
     ce8:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
     cea:	ea 89       	ldd	r30, Y+18	; 0x12
     cec:	fb 89       	ldd	r31, Y+19	; 0x13
     cee:	80 81       	ld	r24, Z
     cf0:	80 61       	ori	r24, 0x10	; 16
     cf2:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     cf4:	ea 89       	ldd	r30, Y+18	; 0x12
     cf6:	fb 89       	ldd	r31, Y+19	; 0x13
     cf8:	80 81       	ld	r24, Z
     cfa:	88 60       	ori	r24, 0x08	; 8
     cfc:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     cfe:	ea 89       	ldd	r30, Y+18	; 0x12
     d00:	fb 89       	ldd	r31, Y+19	; 0x13
     d02:	80 81       	ld	r24, Z
     d04:	80 68       	ori	r24, 0x80	; 128
     d06:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     d08:	ea 89       	ldd	r30, Y+18	; 0x12
     d0a:	fb 89       	ldd	r31, Y+19	; 0x13
     d0c:	80 81       	ld	r24, Z
     d0e:	8f 7d       	andi	r24, 0xDF	; 223
     d10:	80 83       	st	Z, r24
}
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	ff 90       	pop	r15
     d1c:	ef 90       	pop	r14
     d1e:	df 90       	pop	r13
     d20:	cf 90       	pop	r12
     d22:	bf 90       	pop	r11
     d24:	08 95       	ret

00000d26 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     d26:	1f 92       	push	r1
     d28:	0f 92       	push	r0
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	0f 92       	push	r0
     d2e:	11 24       	eor	r1, r1
     d30:	2f 93       	push	r18
     d32:	8f 93       	push	r24
     d34:	9f 93       	push	r25
     d36:	af 93       	push	r26
     d38:	bf 93       	push	r27
     d3a:	ef 93       	push	r30
     d3c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     d3e:	e0 91 d9 03 	lds	r30, 0x03D9	; 0x8003d9 <Serial+0x10>
     d42:	f0 91 da 03 	lds	r31, 0x03DA	; 0x8003da <Serial+0x11>
     d46:	80 81       	ld	r24, Z
     d48:	82 fd       	sbrc	r24, 2
     d4a:	14 c0       	rjmp	.+40     	; 0xd74 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     d4c:	e9 ec       	ldi	r30, 0xC9	; 201
     d4e:	f3 e0       	ldi	r31, 0x03	; 3
     d50:	a6 89       	ldd	r26, Z+22	; 0x16
     d52:	b7 89       	ldd	r27, Z+23	; 0x17
     d54:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     d56:	81 8d       	ldd	r24, Z+25	; 0x19
     d58:	8f 5f       	subi	r24, 0xFF	; 255
     d5a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     d5c:	92 8d       	ldd	r25, Z+26	; 0x1a
     d5e:	89 17       	cp	r24, r25
     d60:	71 f0       	breq	.+28     	; 0xd7e <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
     d62:	df 01       	movw	r26, r30
     d64:	e1 8d       	ldd	r30, Z+25	; 0x19
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	e7 53       	subi	r30, 0x37	; 55
     d6a:	fc 4f       	sbci	r31, 0xFC	; 252
     d6c:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
     d6e:	59 96       	adiw	r26, 0x19	; 25
     d70:	8c 93       	st	X, r24
     d72:	05 c0       	rjmp	.+10     	; 0xd7e <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     d74:	e0 91 df 03 	lds	r30, 0x03DF	; 0x8003df <Serial+0x16>
     d78:	f0 91 e0 03 	lds	r31, 0x03E0	; 0x8003e0 <Serial+0x17>
     d7c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     d7e:	ff 91       	pop	r31
     d80:	ef 91       	pop	r30
     d82:	bf 91       	pop	r27
     d84:	af 91       	pop	r26
     d86:	9f 91       	pop	r25
     d88:	8f 91       	pop	r24
     d8a:	2f 91       	pop	r18
     d8c:	0f 90       	pop	r0
     d8e:	0f be       	out	0x3f, r0	; 63
     d90:	0f 90       	pop	r0
     d92:	1f 90       	pop	r1
     d94:	18 95       	reti

00000d96 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     d96:	1f 92       	push	r1
     d98:	0f 92       	push	r0
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	0f 92       	push	r0
     d9e:	11 24       	eor	r1, r1
     da0:	2f 93       	push	r18
     da2:	3f 93       	push	r19
     da4:	4f 93       	push	r20
     da6:	5f 93       	push	r21
     da8:	6f 93       	push	r22
     daa:	7f 93       	push	r23
     dac:	8f 93       	push	r24
     dae:	9f 93       	push	r25
     db0:	af 93       	push	r26
     db2:	bf 93       	push	r27
     db4:	ef 93       	push	r30
     db6:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     db8:	89 ec       	ldi	r24, 0xC9	; 201
     dba:	93 e0       	ldi	r25, 0x03	; 3
     dbc:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     dc0:	ff 91       	pop	r31
     dc2:	ef 91       	pop	r30
     dc4:	bf 91       	pop	r27
     dc6:	af 91       	pop	r26
     dc8:	9f 91       	pop	r25
     dca:	8f 91       	pop	r24
     dcc:	7f 91       	pop	r23
     dce:	6f 91       	pop	r22
     dd0:	5f 91       	pop	r21
     dd2:	4f 91       	pop	r20
     dd4:	3f 91       	pop	r19
     dd6:	2f 91       	pop	r18
     dd8:	0f 90       	pop	r0
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	0f 90       	pop	r0
     dde:	1f 90       	pop	r1
     de0:	18 95       	reti

00000de2 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     de2:	89 ec       	ldi	r24, 0xC9	; 201
     de4:	93 e0       	ldi	r25, 0x03	; 3
     de6:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_ZN14HardwareSerial9availableEv>
     dea:	21 e0       	ldi	r18, 0x01	; 1
     dec:	89 2b       	or	r24, r25
     dee:	09 f4       	brne	.+2      	; 0xdf2 <_Z17Serial0_availablev+0x10>
     df0:	20 e0       	ldi	r18, 0x00	; 0
}
     df2:	82 2f       	mov	r24, r18
     df4:	08 95       	ret

00000df6 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     df6:	e9 ec       	ldi	r30, 0xC9	; 201
     df8:	f3 e0       	ldi	r31, 0x03	; 3
     dfa:	13 82       	std	Z+3, r1	; 0x03
     dfc:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     dfe:	88 ee       	ldi	r24, 0xE8	; 232
     e00:	93 e0       	ldi	r25, 0x03	; 3
     e02:	a0 e0       	ldi	r26, 0x00	; 0
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	84 83       	std	Z+4, r24	; 0x04
     e08:	95 83       	std	Z+5, r25	; 0x05
     e0a:	a6 83       	std	Z+6, r26	; 0x06
     e0c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     e0e:	88 e6       	ldi	r24, 0x68	; 104
     e10:	93 e0       	ldi	r25, 0x03	; 3
     e12:	91 83       	std	Z+1, r25	; 0x01
     e14:	80 83       	st	Z, r24
     e16:	85 ec       	ldi	r24, 0xC5	; 197
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	95 87       	std	Z+13, r25	; 0x0d
     e1c:	84 87       	std	Z+12, r24	; 0x0c
     e1e:	84 ec       	ldi	r24, 0xC4	; 196
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	97 87       	std	Z+15, r25	; 0x0f
     e24:	86 87       	std	Z+14, r24	; 0x0e
     e26:	80 ec       	ldi	r24, 0xC0	; 192
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	91 8b       	std	Z+17, r25	; 0x11
     e2c:	80 8b       	std	Z+16, r24	; 0x10
     e2e:	81 ec       	ldi	r24, 0xC1	; 193
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	93 8b       	std	Z+19, r25	; 0x13
     e34:	82 8b       	std	Z+18, r24	; 0x12
     e36:	82 ec       	ldi	r24, 0xC2	; 194
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	95 8b       	std	Z+21, r25	; 0x15
     e3c:	84 8b       	std	Z+20, r24	; 0x14
     e3e:	86 ec       	ldi	r24, 0xC6	; 198
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	97 8b       	std	Z+23, r25	; 0x17
     e44:	86 8b       	std	Z+22, r24	; 0x16
     e46:	11 8e       	std	Z+25, r1	; 0x19
     e48:	12 8e       	std	Z+26, r1	; 0x1a
     e4a:	13 8e       	std	Z+27, r1	; 0x1b
     e4c:	14 8e       	std	Z+28, r1	; 0x1c
     e4e:	08 95       	ret

00000e50 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
     e50:	08 95       	ret

00000e52 <main>:

int main(void)
{
	init();
     e52:	0e 94 8b 0a 	call	0x1516	; 0x1516 <init>

	initVariant();
     e56:	0e 94 28 07 	call	0xe50	; 0xe50 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     e5a:	0e 94 c2 04 	call	0x984	; 0x984 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     e5e:	c1 e8       	ldi	r28, 0x81	; 129
     e60:	d5 e0       	ldi	r29, 0x05	; 5
#endif
	
	setup();
    
	for (;;) {
		loop();
     e62:	0e 94 9f 03 	call	0x73e	; 0x73e <loop>
		if (serialEventRun) serialEventRun();
     e66:	20 97       	sbiw	r28, 0x00	; 0
     e68:	e1 f3       	breq	.-8      	; 0xe62 <main+0x10>
     e6a:	0e 94 81 05 	call	0xb02	; 0xb02 <_Z14serialEventRunv>
     e6e:	f9 cf       	rjmp	.-14     	; 0xe62 <main+0x10>

00000e70 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     e70:	cf 92       	push	r12
     e72:	df 92       	push	r13
     e74:	ef 92       	push	r14
     e76:	ff 92       	push	r15
     e78:	0f 93       	push	r16
     e7a:	1f 93       	push	r17
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
     e80:	41 15       	cp	r20, r1
     e82:	51 05       	cpc	r21, r1
     e84:	c1 f0       	breq	.+48     	; 0xeb6 <_ZN5Print5writeEPKhj+0x46>
     e86:	6a 01       	movw	r12, r20
     e88:	8c 01       	movw	r16, r24
     e8a:	e6 2e       	mov	r14, r22
     e8c:	f7 2e       	mov	r15, r23
     e8e:	c0 e0       	ldi	r28, 0x00	; 0
     e90:	d0 e0       	ldi	r29, 0x00	; 0
     e92:	d7 01       	movw	r26, r14
     e94:	6d 91       	ld	r22, X+
     e96:	7d 01       	movw	r14, r26
     e98:	d8 01       	movw	r26, r16
     e9a:	ed 91       	ld	r30, X+
     e9c:	fc 91       	ld	r31, X
     e9e:	01 90       	ld	r0, Z+
     ea0:	f0 81       	ld	r31, Z
     ea2:	e0 2d       	mov	r30, r0
     ea4:	c8 01       	movw	r24, r16
     ea6:	09 95       	icall
     ea8:	89 2b       	or	r24, r25
     eaa:	39 f0       	breq	.+14     	; 0xeba <_ZN5Print5writeEPKhj+0x4a>
     eac:	21 96       	adiw	r28, 0x01	; 1
     eae:	cc 16       	cp	r12, r28
     eb0:	dd 06       	cpc	r13, r29
     eb2:	79 f7       	brne	.-34     	; 0xe92 <_ZN5Print5writeEPKhj+0x22>
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <_ZN5Print5writeEPKhj+0x4a>
     eb6:	c0 e0       	ldi	r28, 0x00	; 0
     eb8:	d0 e0       	ldi	r29, 0x00	; 0
     eba:	ce 01       	movw	r24, r28
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	1f 91       	pop	r17
     ec2:	0f 91       	pop	r16
     ec4:	ff 90       	pop	r15
     ec6:	ef 90       	pop	r14
     ec8:	df 90       	pop	r13
     eca:	cf 90       	pop	r12
     ecc:	08 95       	ret

00000ece <_ZN5Print5printEPK19__FlashStringHelper>:
     ece:	ef 92       	push	r14
     ed0:	ff 92       	push	r15
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	fb 01       	movw	r30, r22
     edc:	64 91       	lpm	r22, Z
     ede:	66 23       	and	r22, r22
     ee0:	b1 f0       	breq	.+44     	; 0xf0e <_ZN5Print5printEPK19__FlashStringHelper+0x40>
     ee2:	7f 01       	movw	r14, r30
     ee4:	8c 01       	movw	r16, r24
     ee6:	c0 e0       	ldi	r28, 0x00	; 0
     ee8:	d0 e0       	ldi	r29, 0x00	; 0
     eea:	d8 01       	movw	r26, r16
     eec:	ed 91       	ld	r30, X+
     eee:	fc 91       	ld	r31, X
     ef0:	01 90       	ld	r0, Z+
     ef2:	f0 81       	ld	r31, Z
     ef4:	e0 2d       	mov	r30, r0
     ef6:	c8 01       	movw	r24, r16
     ef8:	09 95       	icall
     efa:	89 2b       	or	r24, r25
     efc:	51 f0       	breq	.+20     	; 0xf12 <_ZN5Print5printEPK19__FlashStringHelper+0x44>
     efe:	21 96       	adiw	r28, 0x01	; 1
     f00:	f7 01       	movw	r30, r14
     f02:	ec 0f       	add	r30, r28
     f04:	fd 1f       	adc	r31, r29
     f06:	64 91       	lpm	r22, Z
     f08:	61 11       	cpse	r22, r1
     f0a:	ef cf       	rjmp	.-34     	; 0xeea <_ZN5Print5printEPK19__FlashStringHelper+0x1c>
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <_ZN5Print5printEPK19__FlashStringHelper+0x44>
     f0e:	c0 e0       	ldi	r28, 0x00	; 0
     f10:	d0 e0       	ldi	r29, 0x00	; 0
     f12:	ce 01       	movw	r24, r28
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	1f 91       	pop	r17
     f1a:	0f 91       	pop	r16
     f1c:	ff 90       	pop	r15
     f1e:	ef 90       	pop	r14
     f20:	08 95       	ret

00000f22 <_ZN5Print5printEPKc>:
     f22:	61 15       	cp	r22, r1
     f24:	71 05       	cpc	r23, r1
     f26:	81 f0       	breq	.+32     	; 0xf48 <_ZN5Print5printEPKc+0x26>
     f28:	fb 01       	movw	r30, r22
     f2a:	01 90       	ld	r0, Z+
     f2c:	00 20       	and	r0, r0
     f2e:	e9 f7       	brne	.-6      	; 0xf2a <_ZN5Print5printEPKc+0x8>
     f30:	31 97       	sbiw	r30, 0x01	; 1
     f32:	af 01       	movw	r20, r30
     f34:	46 1b       	sub	r20, r22
     f36:	57 0b       	sbc	r21, r23
     f38:	dc 01       	movw	r26, r24
     f3a:	ed 91       	ld	r30, X+
     f3c:	fc 91       	ld	r31, X
     f3e:	02 80       	ldd	r0, Z+2	; 0x02
     f40:	f3 81       	ldd	r31, Z+3	; 0x03
     f42:	e0 2d       	mov	r30, r0
     f44:	09 95       	icall
     f46:	08 95       	ret
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	08 95       	ret

00000f4e <_ZN5Print5printEc>:
     f4e:	dc 01       	movw	r26, r24
     f50:	ed 91       	ld	r30, X+
     f52:	fc 91       	ld	r31, X
     f54:	01 90       	ld	r0, Z+
     f56:	f0 81       	ld	r31, Z
     f58:	e0 2d       	mov	r30, r0
     f5a:	09 95       	icall
     f5c:	08 95       	ret

00000f5e <_ZN5Print7printlnEv>:
     f5e:	dc 01       	movw	r26, r24
     f60:	ed 91       	ld	r30, X+
     f62:	fc 91       	ld	r31, X
     f64:	02 80       	ldd	r0, Z+2	; 0x02
     f66:	f3 81       	ldd	r31, Z+3	; 0x03
     f68:	e0 2d       	mov	r30, r0
     f6a:	42 e0       	ldi	r20, 0x02	; 2
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	64 e7       	ldi	r22, 0x74	; 116
     f70:	73 e0       	ldi	r23, 0x03	; 3
     f72:	09 95       	icall
     f74:	08 95       	ret

00000f76 <_ZN5Print7printlnEPK19__FlashStringHelper>:
     f76:	0f 93       	push	r16
     f78:	1f 93       	push	r17
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	ec 01       	movw	r28, r24
     f80:	0e 94 67 07 	call	0xece	; 0xece <_ZN5Print5printEPK19__FlashStringHelper>
     f84:	8c 01       	movw	r16, r24
     f86:	ce 01       	movw	r24, r28
     f88:	0e 94 af 07 	call	0xf5e	; 0xf5e <_ZN5Print7printlnEv>
     f8c:	80 0f       	add	r24, r16
     f8e:	91 1f       	adc	r25, r17
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	08 95       	ret

00000f9a <_ZN5Print7printlnEPKc>:
     f9a:	0f 93       	push	r16
     f9c:	1f 93       	push	r17
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	ec 01       	movw	r28, r24
     fa4:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN5Print5printEPKc>
     fa8:	8c 01       	movw	r16, r24
     faa:	ce 01       	movw	r24, r28
     fac:	0e 94 af 07 	call	0xf5e	; 0xf5e <_ZN5Print7printlnEv>
     fb0:	80 0f       	add	r24, r16
     fb2:	91 1f       	adc	r25, r17
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	08 95       	ret

00000fbe <_ZN5Print11printNumberEmh>:
     fbe:	8f 92       	push	r8
     fc0:	9f 92       	push	r9
     fc2:	af 92       	push	r10
     fc4:	bf 92       	push	r11
     fc6:	ef 92       	push	r14
     fc8:	ff 92       	push	r15
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	a1 97       	sbiw	r28, 0x21	; 33
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
     fe2:	7c 01       	movw	r14, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	ba 01       	movw	r22, r20
     fe8:	19 a2       	std	Y+33, r1	; 0x21
     fea:	22 30       	cpi	r18, 0x02	; 2
     fec:	08 f4       	brcc	.+2      	; 0xff0 <_ZN5Print11printNumberEmh+0x32>
     fee:	2a e0       	ldi	r18, 0x0A	; 10
     ff0:	8e 01       	movw	r16, r28
     ff2:	0f 5d       	subi	r16, 0xDF	; 223
     ff4:	1f 4f       	sbci	r17, 0xFF	; 255
     ff6:	82 2e       	mov	r8, r18
     ff8:	91 2c       	mov	r9, r1
     ffa:	a1 2c       	mov	r10, r1
     ffc:	b1 2c       	mov	r11, r1
     ffe:	a5 01       	movw	r20, r10
    1000:	94 01       	movw	r18, r8
    1002:	0e 94 5f 10 	call	0x20be	; 0x20be <__udivmodsi4>
    1006:	e6 2f       	mov	r30, r22
    1008:	62 2f       	mov	r22, r18
    100a:	73 2f       	mov	r23, r19
    100c:	84 2f       	mov	r24, r20
    100e:	95 2f       	mov	r25, r21
    1010:	01 50       	subi	r16, 0x01	; 1
    1012:	11 09       	sbc	r17, r1
    1014:	ea 30       	cpi	r30, 0x0A	; 10
    1016:	10 f4       	brcc	.+4      	; 0x101c <_ZN5Print11printNumberEmh+0x5e>
    1018:	e0 5d       	subi	r30, 0xD0	; 208
    101a:	01 c0       	rjmp	.+2      	; 0x101e <_ZN5Print11printNumberEmh+0x60>
    101c:	e9 5c       	subi	r30, 0xC9	; 201
    101e:	d8 01       	movw	r26, r16
    1020:	ec 93       	st	X, r30
    1022:	61 15       	cp	r22, r1
    1024:	71 05       	cpc	r23, r1
    1026:	81 05       	cpc	r24, r1
    1028:	91 05       	cpc	r25, r1
    102a:	49 f7       	brne	.-46     	; 0xffe <_ZN5Print11printNumberEmh+0x40>
    102c:	01 15       	cp	r16, r1
    102e:	11 05       	cpc	r17, r1
    1030:	91 f0       	breq	.+36     	; 0x1056 <_ZN5Print11printNumberEmh+0x98>
    1032:	f8 01       	movw	r30, r16
    1034:	01 90       	ld	r0, Z+
    1036:	00 20       	and	r0, r0
    1038:	e9 f7       	brne	.-6      	; 0x1034 <_ZN5Print11printNumberEmh+0x76>
    103a:	31 97       	sbiw	r30, 0x01	; 1
    103c:	af 01       	movw	r20, r30
    103e:	40 1b       	sub	r20, r16
    1040:	51 0b       	sbc	r21, r17
    1042:	d7 01       	movw	r26, r14
    1044:	ed 91       	ld	r30, X+
    1046:	fc 91       	ld	r31, X
    1048:	02 80       	ldd	r0, Z+2	; 0x02
    104a:	f3 81       	ldd	r31, Z+3	; 0x03
    104c:	e0 2d       	mov	r30, r0
    104e:	b8 01       	movw	r22, r16
    1050:	c7 01       	movw	r24, r14
    1052:	09 95       	icall
    1054:	02 c0       	rjmp	.+4      	; 0x105a <_ZN5Print11printNumberEmh+0x9c>
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	a1 96       	adiw	r28, 0x21	; 33
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	bf 90       	pop	r11
    1074:	af 90       	pop	r10
    1076:	9f 90       	pop	r9
    1078:	8f 90       	pop	r8
    107a:	08 95       	ret

0000107c <_ZN5Print5printEli>:
    107c:	cf 92       	push	r12
    107e:	df 92       	push	r13
    1080:	ef 92       	push	r14
    1082:	ff 92       	push	r15
    1084:	0f 93       	push	r16
    1086:	1f 93       	push	r17
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	ec 01       	movw	r28, r24
    108e:	6a 01       	movw	r12, r20
    1090:	7b 01       	movw	r14, r22
    1092:	21 15       	cp	r18, r1
    1094:	31 05       	cpc	r19, r1
    1096:	41 f4       	brne	.+16     	; 0x10a8 <_ZN5Print5printEli+0x2c>
    1098:	e8 81       	ld	r30, Y
    109a:	f9 81       	ldd	r31, Y+1	; 0x01
    109c:	01 90       	ld	r0, Z+
    109e:	f0 81       	ld	r31, Z
    10a0:	e0 2d       	mov	r30, r0
    10a2:	64 2f       	mov	r22, r20
    10a4:	09 95       	icall
    10a6:	1d c0       	rjmp	.+58     	; 0x10e2 <_ZN5Print5printEli+0x66>
    10a8:	2a 30       	cpi	r18, 0x0A	; 10
    10aa:	31 05       	cpc	r19, r1
    10ac:	c1 f4       	brne	.+48     	; 0x10de <_ZN5Print5printEli+0x62>
    10ae:	77 23       	and	r23, r23
    10b0:	94 f4       	brge	.+36     	; 0x10d6 <_ZN5Print5printEli+0x5a>
    10b2:	6d e2       	ldi	r22, 0x2D	; 45
    10b4:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN5Print5printEc>
    10b8:	8c 01       	movw	r16, r24
    10ba:	44 27       	eor	r20, r20
    10bc:	55 27       	eor	r21, r21
    10be:	ba 01       	movw	r22, r20
    10c0:	4c 19       	sub	r20, r12
    10c2:	5d 09       	sbc	r21, r13
    10c4:	6e 09       	sbc	r22, r14
    10c6:	7f 09       	sbc	r23, r15
    10c8:	2a e0       	ldi	r18, 0x0A	; 10
    10ca:	ce 01       	movw	r24, r28
    10cc:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN5Print11printNumberEmh>
    10d0:	80 0f       	add	r24, r16
    10d2:	91 1f       	adc	r25, r17
    10d4:	06 c0       	rjmp	.+12     	; 0x10e2 <_ZN5Print5printEli+0x66>
    10d6:	2a e0       	ldi	r18, 0x0A	; 10
    10d8:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN5Print11printNumberEmh>
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <_ZN5Print5printEli+0x66>
    10de:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN5Print11printNumberEmh>
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	1f 91       	pop	r17
    10e8:	0f 91       	pop	r16
    10ea:	ff 90       	pop	r15
    10ec:	ef 90       	pop	r14
    10ee:	df 90       	pop	r13
    10f0:	cf 90       	pop	r12
    10f2:	08 95       	ret

000010f4 <_ZN5Print5printEii>:
    10f4:	9a 01       	movw	r18, r20
    10f6:	ab 01       	movw	r20, r22
    10f8:	77 0f       	add	r23, r23
    10fa:	66 0b       	sbc	r22, r22
    10fc:	77 0b       	sbc	r23, r23
    10fe:	0e 94 3e 08 	call	0x107c	; 0x107c <_ZN5Print5printEli>
    1102:	08 95       	ret

00001104 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    110c:	ec 01       	movw	r28, r24
    110e:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1110:	ab 01       	movw	r20, r22
    1112:	77 0f       	add	r23, r23
    1114:	66 0b       	sbc	r22, r22
    1116:	77 0b       	sbc	r23, r23
    1118:	0e 94 3e 08 	call	0x107c	; 0x107c <_ZN5Print5printEli>
    111c:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    111e:	ce 01       	movw	r24, r28
    1120:	0e 94 af 07 	call	0xf5e	; 0xf5e <_ZN5Print7printlnEv>
  return n;
}
    1124:	80 0f       	add	r24, r16
    1126:	91 1f       	adc	r25, r17
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	08 95       	ret

00001132 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1132:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <_ZN7TwoWire14rxBufferLengthE>
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	20 91 97 04 	lds	r18, 0x0497	; 0x800497 <_ZN7TwoWire13rxBufferIndexE>
    113c:	82 1b       	sub	r24, r18
    113e:	91 09       	sbc	r25, r1
    1140:	08 95       	ret

00001142 <_ZN7TwoWire4readEv>:
    1142:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <_ZN7TwoWire13rxBufferIndexE>
    1146:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <_ZN7TwoWire14rxBufferLengthE>
    114a:	98 17       	cp	r25, r24
    114c:	50 f4       	brcc	.+20     	; 0x1162 <_ZN7TwoWire4readEv+0x20>
    114e:	e9 2f       	mov	r30, r25
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	e8 56       	subi	r30, 0x68	; 104
    1154:	fb 4f       	sbci	r31, 0xFB	; 251
    1156:	20 81       	ld	r18, Z
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	9f 5f       	subi	r25, 0xFF	; 255
    115c:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <_ZN7TwoWire13rxBufferIndexE>
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <_ZN7TwoWire4readEv+0x24>
    1162:	2f ef       	ldi	r18, 0xFF	; 255
    1164:	3f ef       	ldi	r19, 0xFF	; 255
    1166:	c9 01       	movw	r24, r18
    1168:	08 95       	ret

0000116a <_ZN7TwoWire4peekEv>:
    116a:	e0 91 97 04 	lds	r30, 0x0497	; 0x800497 <_ZN7TwoWire13rxBufferIndexE>
    116e:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <_ZN7TwoWire14rxBufferLengthE>
    1172:	e8 17       	cp	r30, r24
    1174:	30 f4       	brcc	.+12     	; 0x1182 <_ZN7TwoWire4peekEv+0x18>
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	e8 56       	subi	r30, 0x68	; 104
    117a:	fb 4f       	sbci	r31, 0xFB	; 251
    117c:	80 81       	ld	r24, Z
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	08 95       	ret
    1182:	8f ef       	ldi	r24, 0xFF	; 255
    1184:	9f ef       	ldi	r25, 0xFF	; 255
    1186:	08 95       	ret

00001188 <_ZN7TwoWire5flushEv>:
    1188:	08 95       	ret

0000118a <_ZN7TwoWire5writeEPKhj>:
    118a:	cf 92       	push	r12
    118c:	df 92       	push	r13
    118e:	ef 92       	push	r14
    1190:	ff 92       	push	r15
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	8c 01       	movw	r16, r24
    119c:	cb 01       	movw	r24, r22
    119e:	6a 01       	movw	r12, r20
    11a0:	20 91 72 04 	lds	r18, 0x0472	; 0x800472 <_ZN7TwoWire12transmittingE>
    11a4:	22 23       	and	r18, r18
    11a6:	a1 f0       	breq	.+40     	; 0x11d0 <_ZN7TwoWire5writeEPKhj+0x46>
    11a8:	41 15       	cp	r20, r1
    11aa:	51 05       	cpc	r21, r1
    11ac:	a1 f0       	breq	.+40     	; 0x11d6 <_ZN7TwoWire5writeEPKhj+0x4c>
    11ae:	eb 01       	movw	r28, r22
    11b0:	7b 01       	movw	r14, r22
    11b2:	e4 0e       	add	r14, r20
    11b4:	f5 1e       	adc	r15, r21
    11b6:	69 91       	ld	r22, Y+
    11b8:	d8 01       	movw	r26, r16
    11ba:	ed 91       	ld	r30, X+
    11bc:	fc 91       	ld	r31, X
    11be:	01 90       	ld	r0, Z+
    11c0:	f0 81       	ld	r31, Z
    11c2:	e0 2d       	mov	r30, r0
    11c4:	c8 01       	movw	r24, r16
    11c6:	09 95       	icall
    11c8:	ce 15       	cp	r28, r14
    11ca:	df 05       	cpc	r29, r15
    11cc:	a1 f7       	brne	.-24     	; 0x11b6 <_ZN7TwoWire5writeEPKhj+0x2c>
    11ce:	03 c0       	rjmp	.+6      	; 0x11d6 <_ZN7TwoWire5writeEPKhj+0x4c>
    11d0:	64 2f       	mov	r22, r20
    11d2:	0e 94 83 0b 	call	0x1706	; 0x1706 <twi_transmit>
    11d6:	c6 01       	movw	r24, r12
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	1f 91       	pop	r17
    11de:	0f 91       	pop	r16
    11e0:	ff 90       	pop	r15
    11e2:	ef 90       	pop	r14
    11e4:	df 90       	pop	r13
    11e6:	cf 90       	pop	r12
    11e8:	08 95       	ret

000011ea <_ZN7TwoWire5writeEh>:
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	1f 92       	push	r1
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	fc 01       	movw	r30, r24
    11f6:	69 83       	std	Y+1, r22	; 0x01
    11f8:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <_ZN7TwoWire12transmittingE>
    11fc:	99 23       	and	r25, r25
    11fe:	d9 f0       	breq	.+54     	; 0x1236 <_ZN7TwoWire5writeEh+0x4c>
    1200:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <_ZN7TwoWire14txBufferLengthE>
    1204:	90 32       	cpi	r25, 0x20	; 32
    1206:	38 f0       	brcs	.+14     	; 0x1216 <_ZN7TwoWire5writeEh+0x2c>
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	93 83       	std	Z+3, r25	; 0x03
    120e:	82 83       	std	Z+2, r24	; 0x02
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	17 c0       	rjmp	.+46     	; 0x1244 <_ZN7TwoWire5writeEh+0x5a>
    1216:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <_ZN7TwoWire13txBufferIndexE>
    121a:	e8 2f       	mov	r30, r24
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	eb 58       	subi	r30, 0x8B	; 139
    1220:	fb 4f       	sbci	r31, 0xFB	; 251
    1222:	99 81       	ldd	r25, Y+1	; 0x01
    1224:	90 83       	st	Z, r25
    1226:	8f 5f       	subi	r24, 0xFF	; 255
    1228:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <_ZN7TwoWire13txBufferIndexE>
    122c:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <_ZN7TwoWire14txBufferLengthE>
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	07 c0       	rjmp	.+14     	; 0x1244 <_ZN7TwoWire5writeEh+0x5a>
    1236:	61 e0       	ldi	r22, 0x01	; 1
    1238:	ce 01       	movw	r24, r28
    123a:	01 96       	adiw	r24, 0x01	; 1
    123c:	0e 94 83 0b 	call	0x1706	; 0x1706 <twi_transmit>
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	0f 90       	pop	r0
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	08 95       	ret

0000124c <_ZN7TwoWireC1Ev>:
    124c:	fc 01       	movw	r30, r24
    124e:	13 82       	std	Z+3, r1	; 0x03
    1250:	12 82       	std	Z+2, r1	; 0x02
    1252:	88 ee       	ldi	r24, 0xE8	; 232
    1254:	93 e0       	ldi	r25, 0x03	; 3
    1256:	a0 e0       	ldi	r26, 0x00	; 0
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	84 83       	std	Z+4, r24	; 0x04
    125c:	95 83       	std	Z+5, r25	; 0x05
    125e:	a6 83       	std	Z+6, r26	; 0x06
    1260:	b7 83       	std	Z+7, r27	; 0x07
    1262:	87 e8       	ldi	r24, 0x87	; 135
    1264:	93 e0       	ldi	r25, 0x03	; 3
    1266:	91 83       	std	Z+1, r25	; 0x01
    1268:	80 83       	st	Z, r24
    126a:	08 95       	ret

0000126c <_ZN7TwoWire5beginEv>:
    126c:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <_ZN7TwoWire13rxBufferIndexE>
    1270:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <_ZN7TwoWire14rxBufferLengthE>
    1274:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <_ZN7TwoWire13txBufferIndexE>
    1278:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <_ZN7TwoWire14txBufferLengthE>
    127c:	0e 94 c7 0a 	call	0x158e	; 0x158e <twi_init>
    1280:	08 95       	ret

00001282 <_ZN7TwoWire17beginTransmissionEh>:
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <_ZN7TwoWire12transmittingE>
    1288:	60 93 95 04 	sts	0x0495, r22	; 0x800495 <_ZN7TwoWire9txAddressE>
    128c:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <_ZN7TwoWire13txBufferIndexE>
    1290:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <_ZN7TwoWire14txBufferLengthE>
    1294:	08 95       	ret

00001296 <_ZN7TwoWire15endTransmissionEh>:
    1296:	0f 93       	push	r16
    1298:	06 2f       	mov	r16, r22
    129a:	21 e0       	ldi	r18, 0x01	; 1
    129c:	40 91 73 04 	lds	r20, 0x0473	; 0x800473 <_ZN7TwoWire14txBufferLengthE>
    12a0:	65 e7       	ldi	r22, 0x75	; 117
    12a2:	74 e0       	ldi	r23, 0x04	; 4
    12a4:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <_ZN7TwoWire9txAddressE>
    12a8:	0e 94 2d 0b 	call	0x165a	; 0x165a <twi_writeTo>
    12ac:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <_ZN7TwoWire13txBufferIndexE>
    12b0:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <_ZN7TwoWire14txBufferLengthE>
    12b4:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <_ZN7TwoWire12transmittingE>
    12b8:	0f 91       	pop	r16
    12ba:	08 95       	ret

000012bc <_ZN7TwoWire11requestFromEhhmhh>:
    12bc:	4f 92       	push	r4
    12be:	5f 92       	push	r5
    12c0:	6f 92       	push	r6
    12c2:	7f 92       	push	r7
    12c4:	af 92       	push	r10
    12c6:	bf 92       	push	r11
    12c8:	cf 92       	push	r12
    12ca:	ef 92       	push	r14
    12cc:	ff 92       	push	r15
    12ce:	0f 93       	push	r16
    12d0:	1f 93       	push	r17
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	5c 01       	movw	r10, r24
    12d8:	f6 2e       	mov	r15, r22
    12da:	d4 2f       	mov	r29, r20
    12dc:	28 01       	movw	r4, r16
    12de:	39 01       	movw	r6, r18
    12e0:	ee 20       	and	r14, r14
    12e2:	49 f1       	breq	.+82     	; 0x1336 <_ZN7TwoWire11requestFromEhhmhh+0x7a>
    12e4:	0e 94 41 09 	call	0x1282	; 0x1282 <_ZN7TwoWire17beginTransmissionEh>
    12e8:	8e 2d       	mov	r24, r14
    12ea:	84 30       	cpi	r24, 0x04	; 4
    12ec:	08 f0       	brcs	.+2      	; 0x12f0 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    12ee:	83 e0       	ldi	r24, 0x03	; 3
    12f0:	cf ef       	ldi	r28, 0xFF	; 255
    12f2:	c8 0f       	add	r28, r24
    12f4:	88 23       	and	r24, r24
    12f6:	d9 f0       	breq	.+54     	; 0x132e <_ZN7TwoWire11requestFromEhhmhh+0x72>
    12f8:	d5 01       	movw	r26, r10
    12fa:	ed 91       	ld	r30, X+
    12fc:	fc 91       	ld	r31, X
    12fe:	8c 2f       	mov	r24, r28
    1300:	88 0f       	add	r24, r24
    1302:	88 0f       	add	r24, r24
    1304:	88 0f       	add	r24, r24
    1306:	a3 01       	movw	r20, r6
    1308:	92 01       	movw	r18, r4
    130a:	04 c0       	rjmp	.+8      	; 0x1314 <_ZN7TwoWire11requestFromEhhmhh+0x58>
    130c:	56 95       	lsr	r21
    130e:	47 95       	ror	r20
    1310:	37 95       	ror	r19
    1312:	27 95       	ror	r18
    1314:	8a 95       	dec	r24
    1316:	d2 f7       	brpl	.-12     	; 0x130c <_ZN7TwoWire11requestFromEhhmhh+0x50>
    1318:	ca 01       	movw	r24, r20
    131a:	b9 01       	movw	r22, r18
    131c:	01 90       	ld	r0, Z+
    131e:	f0 81       	ld	r31, Z
    1320:	e0 2d       	mov	r30, r0
    1322:	c5 01       	movw	r24, r10
    1324:	09 95       	icall
    1326:	9c 2f       	mov	r25, r28
    1328:	c1 50       	subi	r28, 0x01	; 1
    132a:	91 11       	cpse	r25, r1
    132c:	e5 cf       	rjmp	.-54     	; 0x12f8 <_ZN7TwoWire11requestFromEhhmhh+0x3c>
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	c5 01       	movw	r24, r10
    1332:	0e 94 4b 09 	call	0x1296	; 0x1296 <_ZN7TwoWire15endTransmissionEh>
    1336:	4d 2f       	mov	r20, r29
    1338:	d1 32       	cpi	r29, 0x21	; 33
    133a:	08 f0       	brcs	.+2      	; 0x133e <_ZN7TwoWire11requestFromEhhmhh+0x82>
    133c:	40 e2       	ldi	r20, 0x20	; 32
    133e:	2c 2d       	mov	r18, r12
    1340:	68 e9       	ldi	r22, 0x98	; 152
    1342:	74 e0       	ldi	r23, 0x04	; 4
    1344:	8f 2d       	mov	r24, r15
    1346:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <twi_readFrom>
    134a:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <_ZN7TwoWire13rxBufferIndexE>
    134e:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <_ZN7TwoWire14rxBufferLengthE>
    1352:	df 91       	pop	r29
    1354:	cf 91       	pop	r28
    1356:	1f 91       	pop	r17
    1358:	0f 91       	pop	r16
    135a:	ff 90       	pop	r15
    135c:	ef 90       	pop	r14
    135e:	cf 90       	pop	r12
    1360:	bf 90       	pop	r11
    1362:	af 90       	pop	r10
    1364:	7f 90       	pop	r7
    1366:	6f 90       	pop	r6
    1368:	5f 90       	pop	r5
    136a:	4f 90       	pop	r4
    136c:	08 95       	ret

0000136e <_ZN7TwoWire11requestFromEhhh>:
    136e:	cf 92       	push	r12
    1370:	ef 92       	push	r14
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	c2 2e       	mov	r12, r18
    1378:	e1 2c       	mov	r14, r1
    137a:	00 e0       	ldi	r16, 0x00	; 0
    137c:	10 e0       	ldi	r17, 0x00	; 0
    137e:	98 01       	movw	r18, r16
    1380:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_ZN7TwoWire11requestFromEhhmhh>
    1384:	1f 91       	pop	r17
    1386:	0f 91       	pop	r16
    1388:	ef 90       	pop	r14
    138a:	cf 90       	pop	r12
    138c:	08 95       	ret

0000138e <_ZN7TwoWire11requestFromEhh>:
    138e:	21 e0       	ldi	r18, 0x01	; 1
    1390:	0e 94 b7 09 	call	0x136e	; 0x136e <_ZN7TwoWire11requestFromEhhh>
    1394:	08 95       	ret

00001396 <_ZN7TwoWire15endTransmissionEv>:
    1396:	61 e0       	ldi	r22, 0x01	; 1
    1398:	0e 94 4b 09 	call	0x1296	; 0x1296 <_ZN7TwoWire15endTransmissionEh>
    139c:	08 95       	ret

0000139e <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    139e:	86 e6       	ldi	r24, 0x66	; 102
    13a0:	94 e0       	ldi	r25, 0x04	; 4
    13a2:	0e 94 26 09 	call	0x124c	; 0x124c <_ZN7TwoWireC1Ev>
    13a6:	08 95       	ret

000013a8 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    13a8:	1f 92       	push	r1
    13aa:	0f 92       	push	r0
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	0f 92       	push	r0
    13b0:	11 24       	eor	r1, r1
    13b2:	2f 93       	push	r18
    13b4:	3f 93       	push	r19
    13b6:	8f 93       	push	r24
    13b8:	9f 93       	push	r25
    13ba:	af 93       	push	r26
    13bc:	bf 93       	push	r27
    13be:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <timer0_millis>
    13c2:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <timer0_millis+0x1>
    13c6:	a0 91 bb 04 	lds	r26, 0x04BB	; 0x8004bb <timer0_millis+0x2>
    13ca:	b0 91 bc 04 	lds	r27, 0x04BC	; 0x8004bc <timer0_millis+0x3>
    13ce:	30 91 b8 04 	lds	r19, 0x04B8	; 0x8004b8 <timer0_fract>
    13d2:	23 e0       	ldi	r18, 0x03	; 3
    13d4:	23 0f       	add	r18, r19
    13d6:	2d 37       	cpi	r18, 0x7D	; 125
    13d8:	20 f4       	brcc	.+8      	; 0x13e2 <__vector_16+0x3a>
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	a1 1d       	adc	r26, r1
    13de:	b1 1d       	adc	r27, r1
    13e0:	05 c0       	rjmp	.+10     	; 0x13ec <__vector_16+0x44>
    13e2:	26 e8       	ldi	r18, 0x86	; 134
    13e4:	23 0f       	add	r18, r19
    13e6:	02 96       	adiw	r24, 0x02	; 2
    13e8:	a1 1d       	adc	r26, r1
    13ea:	b1 1d       	adc	r27, r1
    13ec:	20 93 b8 04 	sts	0x04B8, r18	; 0x8004b8 <timer0_fract>
    13f0:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <timer0_millis>
    13f4:	90 93 ba 04 	sts	0x04BA, r25	; 0x8004ba <timer0_millis+0x1>
    13f8:	a0 93 bb 04 	sts	0x04BB, r26	; 0x8004bb <timer0_millis+0x2>
    13fc:	b0 93 bc 04 	sts	0x04BC, r27	; 0x8004bc <timer0_millis+0x3>
    1400:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <timer0_overflow_count>
    1404:	90 91 be 04 	lds	r25, 0x04BE	; 0x8004be <timer0_overflow_count+0x1>
    1408:	a0 91 bf 04 	lds	r26, 0x04BF	; 0x8004bf <timer0_overflow_count+0x2>
    140c:	b0 91 c0 04 	lds	r27, 0x04C0	; 0x8004c0 <timer0_overflow_count+0x3>
    1410:	01 96       	adiw	r24, 0x01	; 1
    1412:	a1 1d       	adc	r26, r1
    1414:	b1 1d       	adc	r27, r1
    1416:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <timer0_overflow_count>
    141a:	90 93 be 04 	sts	0x04BE, r25	; 0x8004be <timer0_overflow_count+0x1>
    141e:	a0 93 bf 04 	sts	0x04BF, r26	; 0x8004bf <timer0_overflow_count+0x2>
    1422:	b0 93 c0 04 	sts	0x04C0, r27	; 0x8004c0 <timer0_overflow_count+0x3>
    1426:	bf 91       	pop	r27
    1428:	af 91       	pop	r26
    142a:	9f 91       	pop	r25
    142c:	8f 91       	pop	r24
    142e:	3f 91       	pop	r19
    1430:	2f 91       	pop	r18
    1432:	0f 90       	pop	r0
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	0f 90       	pop	r0
    1438:	1f 90       	pop	r1
    143a:	18 95       	reti

0000143c <millis>:
    143c:	2f b7       	in	r18, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	60 91 b9 04 	lds	r22, 0x04B9	; 0x8004b9 <timer0_millis>
    1444:	70 91 ba 04 	lds	r23, 0x04BA	; 0x8004ba <timer0_millis+0x1>
    1448:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <timer0_millis+0x2>
    144c:	90 91 bc 04 	lds	r25, 0x04BC	; 0x8004bc <timer0_millis+0x3>
    1450:	2f bf       	out	0x3f, r18	; 63
    1452:	08 95       	ret

00001454 <micros>:
    1454:	3f b7       	in	r19, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <timer0_overflow_count>
    145c:	90 91 be 04 	lds	r25, 0x04BE	; 0x8004be <timer0_overflow_count+0x1>
    1460:	a0 91 bf 04 	lds	r26, 0x04BF	; 0x8004bf <timer0_overflow_count+0x2>
    1464:	b0 91 c0 04 	lds	r27, 0x04C0	; 0x8004c0 <timer0_overflow_count+0x3>
    1468:	26 b5       	in	r18, 0x26	; 38
    146a:	a8 9b       	sbis	0x15, 0	; 21
    146c:	05 c0       	rjmp	.+10     	; 0x1478 <micros+0x24>
    146e:	2f 3f       	cpi	r18, 0xFF	; 255
    1470:	19 f0       	breq	.+6      	; 0x1478 <micros+0x24>
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	a1 1d       	adc	r26, r1
    1476:	b1 1d       	adc	r27, r1
    1478:	3f bf       	out	0x3f, r19	; 63
    147a:	ba 2f       	mov	r27, r26
    147c:	a9 2f       	mov	r26, r25
    147e:	98 2f       	mov	r25, r24
    1480:	88 27       	eor	r24, r24
    1482:	82 0f       	add	r24, r18
    1484:	91 1d       	adc	r25, r1
    1486:	a1 1d       	adc	r26, r1
    1488:	b1 1d       	adc	r27, r1
    148a:	bc 01       	movw	r22, r24
    148c:	cd 01       	movw	r24, r26
    148e:	42 e0       	ldi	r20, 0x02	; 2
    1490:	66 0f       	add	r22, r22
    1492:	77 1f       	adc	r23, r23
    1494:	88 1f       	adc	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	4a 95       	dec	r20
    149a:	d1 f7       	brne	.-12     	; 0x1490 <micros+0x3c>
    149c:	08 95       	ret

0000149e <delay>:
    149e:	8f 92       	push	r8
    14a0:	9f 92       	push	r9
    14a2:	af 92       	push	r10
    14a4:	bf 92       	push	r11
    14a6:	cf 92       	push	r12
    14a8:	df 92       	push	r13
    14aa:	ef 92       	push	r14
    14ac:	ff 92       	push	r15
    14ae:	6b 01       	movw	r12, r22
    14b0:	7c 01       	movw	r14, r24
    14b2:	0e 94 2a 0a 	call	0x1454	; 0x1454 <micros>
    14b6:	4b 01       	movw	r8, r22
    14b8:	5c 01       	movw	r10, r24
    14ba:	c1 14       	cp	r12, r1
    14bc:	d1 04       	cpc	r13, r1
    14be:	e1 04       	cpc	r14, r1
    14c0:	f1 04       	cpc	r15, r1
    14c2:	01 f1       	breq	.+64     	; 0x1504 <delay+0x66>
    14c4:	0e 94 c6 0a 	call	0x158c	; 0x158c <yield>
    14c8:	0e 94 2a 0a 	call	0x1454	; 0x1454 <micros>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	88 19       	sub	r24, r8
    14d2:	99 09       	sbc	r25, r9
    14d4:	aa 09       	sbc	r26, r10
    14d6:	bb 09       	sbc	r27, r11
    14d8:	88 3e       	cpi	r24, 0xE8	; 232
    14da:	93 40       	sbci	r25, 0x03	; 3
    14dc:	a1 05       	cpc	r26, r1
    14de:	b1 05       	cpc	r27, r1
    14e0:	60 f3       	brcs	.-40     	; 0x14ba <delay+0x1c>
    14e2:	21 e0       	ldi	r18, 0x01	; 1
    14e4:	c2 1a       	sub	r12, r18
    14e6:	d1 08       	sbc	r13, r1
    14e8:	e1 08       	sbc	r14, r1
    14ea:	f1 08       	sbc	r15, r1
    14ec:	88 ee       	ldi	r24, 0xE8	; 232
    14ee:	88 0e       	add	r8, r24
    14f0:	83 e0       	ldi	r24, 0x03	; 3
    14f2:	98 1e       	adc	r9, r24
    14f4:	a1 1c       	adc	r10, r1
    14f6:	b1 1c       	adc	r11, r1
    14f8:	c1 14       	cp	r12, r1
    14fa:	d1 04       	cpc	r13, r1
    14fc:	e1 04       	cpc	r14, r1
    14fe:	f1 04       	cpc	r15, r1
    1500:	19 f7       	brne	.-58     	; 0x14c8 <delay+0x2a>
    1502:	db cf       	rjmp	.-74     	; 0x14ba <delay+0x1c>
    1504:	ff 90       	pop	r15
    1506:	ef 90       	pop	r14
    1508:	df 90       	pop	r13
    150a:	cf 90       	pop	r12
    150c:	bf 90       	pop	r11
    150e:	af 90       	pop	r10
    1510:	9f 90       	pop	r9
    1512:	8f 90       	pop	r8
    1514:	08 95       	ret

00001516 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1516:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1518:	84 b5       	in	r24, 0x24	; 36
    151a:	82 60       	ori	r24, 0x02	; 2
    151c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    151e:	84 b5       	in	r24, 0x24	; 36
    1520:	81 60       	ori	r24, 0x01	; 1
    1522:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1524:	85 b5       	in	r24, 0x25	; 37
    1526:	82 60       	ori	r24, 0x02	; 2
    1528:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    152a:	85 b5       	in	r24, 0x25	; 37
    152c:	81 60       	ori	r24, 0x01	; 1
    152e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1530:	ee e6       	ldi	r30, 0x6E	; 110
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	81 60       	ori	r24, 0x01	; 1
    1538:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    153a:	e1 e8       	ldi	r30, 0x81	; 129
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1540:	80 81       	ld	r24, Z
    1542:	82 60       	ori	r24, 0x02	; 2
    1544:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1546:	80 81       	ld	r24, Z
    1548:	81 60       	ori	r24, 0x01	; 1
    154a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    154c:	e0 e8       	ldi	r30, 0x80	; 128
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	81 60       	ori	r24, 0x01	; 1
    1554:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1556:	e1 eb       	ldi	r30, 0xB1	; 177
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	84 60       	ori	r24, 0x04	; 4
    155e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1560:	e0 eb       	ldi	r30, 0xB0	; 176
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	81 60       	ori	r24, 0x01	; 1
    1568:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    156a:	ea e7       	ldi	r30, 0x7A	; 122
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	84 60       	ori	r24, 0x04	; 4
    1572:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1574:	80 81       	ld	r24, Z
    1576:	82 60       	ori	r24, 0x02	; 2
    1578:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    157a:	80 81       	ld	r24, Z
    157c:	81 60       	ori	r24, 0x01	; 1
    157e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1580:	80 81       	ld	r24, Z
    1582:	80 68       	ori	r24, 0x80	; 128
    1584:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1586:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    158a:	08 95       	ret

0000158c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    158c:	08 95       	ret

0000158e <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    158e:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <twi_state>
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <twi_sendStop>
    1598:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <twi_inRepStart>
    159c:	61 e0       	ldi	r22, 0x01	; 1
    159e:	82 e1       	ldi	r24, 0x12	; 18
    15a0:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <digitalWrite>
    15a4:	61 e0       	ldi	r22, 0x01	; 1
    15a6:	83 e1       	ldi	r24, 0x13	; 19
    15a8:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <digitalWrite>
    15ac:	e9 eb       	ldi	r30, 0xB9	; 185
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	8e 7f       	andi	r24, 0xFE	; 254
    15b4:	80 83       	st	Z, r24
    15b6:	80 81       	ld	r24, Z
    15b8:	8d 7f       	andi	r24, 0xFD	; 253
    15ba:	80 83       	st	Z, r24
    15bc:	88 e4       	ldi	r24, 0x48	; 72
    15be:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    15c2:	85 e4       	ldi	r24, 0x45	; 69
    15c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    15c8:	08 95       	ret

000015ca <twi_readFrom>:
    15ca:	41 32       	cpi	r20, 0x21	; 33
    15cc:	08 f0       	brcs	.+2      	; 0x15d0 <twi_readFrom+0x6>
    15ce:	43 c0       	rjmp	.+134    	; 0x1656 <twi_readFrom+0x8c>
    15d0:	90 91 2e 05 	lds	r25, 0x052E	; 0x80052e <twi_state>
    15d4:	91 11       	cpse	r25, r1
    15d6:	fc cf       	rjmp	.-8      	; 0x15d0 <twi_readFrom+0x6>
    15d8:	91 e0       	ldi	r25, 0x01	; 1
    15da:	90 93 2e 05 	sts	0x052E, r25	; 0x80052e <twi_state>
    15de:	20 93 2c 05 	sts	0x052C, r18	; 0x80052c <twi_sendStop>
    15e2:	2f ef       	ldi	r18, 0xFF	; 255
    15e4:	20 93 c1 04 	sts	0x04C1, r18	; 0x8004c1 <twi_error>
    15e8:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <twi_masterBufferIndex>
    15ec:	24 0f       	add	r18, r20
    15ee:	20 93 05 05 	sts	0x0505, r18	; 0x800505 <twi_masterBufferLength>
    15f2:	90 93 2d 05 	sts	0x052D, r25	; 0x80052d <twi_slarw>
    15f6:	90 91 2d 05 	lds	r25, 0x052D	; 0x80052d <twi_slarw>
    15fa:	88 0f       	add	r24, r24
    15fc:	89 2b       	or	r24, r25
    15fe:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <twi_slarw>
    1602:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <twi_inRepStart>
    1606:	81 30       	cpi	r24, 0x01	; 1
    1608:	61 f4       	brne	.+24     	; 0x1622 <twi_readFrom+0x58>
    160a:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <twi_inRepStart>
    160e:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <twi_slarw>
    1612:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1616:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    161a:	83 fd       	sbrc	r24, 3
    161c:	f8 cf       	rjmp	.-16     	; 0x160e <twi_readFrom+0x44>
    161e:	85 ec       	ldi	r24, 0xC5	; 197
    1620:	01 c0       	rjmp	.+2      	; 0x1624 <twi_readFrom+0x5a>
    1622:	85 ee       	ldi	r24, 0xE5	; 229
    1624:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1628:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <twi_state>
    162c:	81 30       	cpi	r24, 0x01	; 1
    162e:	e1 f3       	breq	.-8      	; 0x1628 <twi_readFrom+0x5e>
    1630:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <twi_masterBufferIndex>
    1634:	84 17       	cp	r24, r20
    1636:	10 f4       	brcc	.+4      	; 0x163c <twi_readFrom+0x72>
    1638:	40 91 06 05 	lds	r20, 0x0506	; 0x800506 <twi_masterBufferIndex>
    163c:	27 e0       	ldi	r18, 0x07	; 7
    163e:	35 e0       	ldi	r19, 0x05	; 5
    1640:	fb 01       	movw	r30, r22
    1642:	d9 01       	movw	r26, r18
    1644:	8a 2f       	mov	r24, r26
    1646:	82 1b       	sub	r24, r18
    1648:	84 17       	cp	r24, r20
    164a:	18 f4       	brcc	.+6      	; 0x1652 <twi_readFrom+0x88>
    164c:	8d 91       	ld	r24, X+
    164e:	81 93       	st	Z+, r24
    1650:	f9 cf       	rjmp	.-14     	; 0x1644 <twi_readFrom+0x7a>
    1652:	84 2f       	mov	r24, r20
    1654:	08 95       	ret
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	08 95       	ret

0000165a <twi_writeTo>:
    165a:	0f 93       	push	r16
    165c:	41 32       	cpi	r20, 0x21	; 33
    165e:	08 f0       	brcs	.+2      	; 0x1662 <twi_writeTo+0x8>
    1660:	4a c0       	rjmp	.+148    	; 0x16f6 <twi_writeTo+0x9c>
    1662:	90 91 2e 05 	lds	r25, 0x052E	; 0x80052e <twi_state>
    1666:	91 11       	cpse	r25, r1
    1668:	fc cf       	rjmp	.-8      	; 0x1662 <twi_writeTo+0x8>
    166a:	32 e0       	ldi	r19, 0x02	; 2
    166c:	30 93 2e 05 	sts	0x052E, r19	; 0x80052e <twi_state>
    1670:	00 93 2c 05 	sts	0x052C, r16	; 0x80052c <twi_sendStop>
    1674:	3f ef       	ldi	r19, 0xFF	; 255
    1676:	30 93 c1 04 	sts	0x04C1, r19	; 0x8004c1 <twi_error>
    167a:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <twi_masterBufferIndex>
    167e:	40 93 05 05 	sts	0x0505, r20	; 0x800505 <twi_masterBufferLength>
    1682:	fb 01       	movw	r30, r22
    1684:	67 e0       	ldi	r22, 0x07	; 7
    1686:	75 e0       	ldi	r23, 0x05	; 5
    1688:	db 01       	movw	r26, r22
    168a:	3a 2f       	mov	r19, r26
    168c:	36 1b       	sub	r19, r22
    168e:	34 17       	cp	r19, r20
    1690:	18 f4       	brcc	.+6      	; 0x1698 <twi_writeTo+0x3e>
    1692:	31 91       	ld	r19, Z+
    1694:	3d 93       	st	X+, r19
    1696:	f9 cf       	rjmp	.-14     	; 0x168a <twi_writeTo+0x30>
    1698:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <twi_slarw>
    169c:	30 91 2d 05 	lds	r19, 0x052D	; 0x80052d <twi_slarw>
    16a0:	88 0f       	add	r24, r24
    16a2:	83 2b       	or	r24, r19
    16a4:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <twi_slarw>
    16a8:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <twi_inRepStart>
    16ac:	81 30       	cpi	r24, 0x01	; 1
    16ae:	61 f4       	brne	.+24     	; 0x16c8 <twi_writeTo+0x6e>
    16b0:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <twi_inRepStart>
    16b4:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <twi_slarw>
    16b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    16bc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    16c0:	83 fd       	sbrc	r24, 3
    16c2:	f8 cf       	rjmp	.-16     	; 0x16b4 <twi_writeTo+0x5a>
    16c4:	85 ec       	ldi	r24, 0xC5	; 197
    16c6:	01 c0       	rjmp	.+2      	; 0x16ca <twi_writeTo+0x70>
    16c8:	85 ee       	ldi	r24, 0xE5	; 229
    16ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    16ce:	22 23       	and	r18, r18
    16d0:	21 f0       	breq	.+8      	; 0x16da <twi_writeTo+0x80>
    16d2:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <twi_state>
    16d6:	82 30       	cpi	r24, 0x02	; 2
    16d8:	d1 f3       	breq	.-12     	; 0x16ce <twi_writeTo+0x74>
    16da:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <twi_error>
    16de:	8f 3f       	cpi	r24, 0xFF	; 255
    16e0:	79 f0       	breq	.+30     	; 0x1700 <twi_writeTo+0xa6>
    16e2:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <twi_error>
    16e6:	80 32       	cpi	r24, 0x20	; 32
    16e8:	41 f0       	breq	.+16     	; 0x16fa <twi_writeTo+0xa0>
    16ea:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <twi_error>
    16ee:	80 33       	cpi	r24, 0x30	; 48
    16f0:	31 f0       	breq	.+12     	; 0x16fe <twi_writeTo+0xa4>
    16f2:	94 e0       	ldi	r25, 0x04	; 4
    16f4:	05 c0       	rjmp	.+10     	; 0x1700 <twi_writeTo+0xa6>
    16f6:	91 e0       	ldi	r25, 0x01	; 1
    16f8:	03 c0       	rjmp	.+6      	; 0x1700 <twi_writeTo+0xa6>
    16fa:	92 e0       	ldi	r25, 0x02	; 2
    16fc:	01 c0       	rjmp	.+2      	; 0x1700 <twi_writeTo+0xa6>
    16fe:	93 e0       	ldi	r25, 0x03	; 3
    1700:	89 2f       	mov	r24, r25
    1702:	0f 91       	pop	r16
    1704:	08 95       	ret

00001706 <twi_transmit>:
    1706:	40 91 e3 04 	lds	r20, 0x04E3	; 0x8004e3 <twi_txBufferLength>
    170a:	26 2f       	mov	r18, r22
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	24 0f       	add	r18, r20
    1710:	31 1d       	adc	r19, r1
    1712:	21 32       	cpi	r18, 0x21	; 33
    1714:	31 05       	cpc	r19, r1
    1716:	dc f4       	brge	.+54     	; 0x174e <twi_transmit+0x48>
    1718:	20 91 2e 05 	lds	r18, 0x052E	; 0x80052e <twi_state>
    171c:	24 30       	cpi	r18, 0x04	; 4
    171e:	c9 f4       	brne	.+50     	; 0x1752 <twi_transmit+0x4c>
    1720:	fc 01       	movw	r30, r24
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	86 17       	cp	r24, r22
    1728:	58 f4       	brcc	.+22     	; 0x1740 <twi_transmit+0x3a>
    172a:	30 91 e3 04 	lds	r19, 0x04E3	; 0x8004e3 <twi_txBufferLength>
    172e:	21 91       	ld	r18, Z+
    1730:	dc 01       	movw	r26, r24
    1732:	ab 51       	subi	r26, 0x1B	; 27
    1734:	bb 4f       	sbci	r27, 0xFB	; 251
    1736:	a3 0f       	add	r26, r19
    1738:	b1 1d       	adc	r27, r1
    173a:	2c 93       	st	X, r18
    173c:	01 96       	adiw	r24, 0x01	; 1
    173e:	f3 cf       	rjmp	.-26     	; 0x1726 <twi_transmit+0x20>
    1740:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <twi_txBufferLength>
    1744:	68 0f       	add	r22, r24
    1746:	60 93 e3 04 	sts	0x04E3, r22	; 0x8004e3 <twi_txBufferLength>
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	08 95       	ret
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	08 95       	ret
    1752:	82 e0       	ldi	r24, 0x02	; 2
    1754:	08 95       	ret

00001756 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1756:	85 ed       	ldi	r24, 0xD5	; 213
    1758:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    175c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1760:	84 fd       	sbrc	r24, 4
    1762:	fc cf       	rjmp	.-8      	; 0x175c <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1764:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <twi_state>
    1768:	08 95       	ret

0000176a <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    176a:	85 ec       	ldi	r24, 0xC5	; 197
    176c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    1770:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <twi_state>
    1774:	08 95       	ret

00001776 <__vector_24>:
}

ISR(TWI_vect)
{
    1776:	1f 92       	push	r1
    1778:	0f 92       	push	r0
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	0f 92       	push	r0
    177e:	11 24       	eor	r1, r1
    1780:	2f 93       	push	r18
    1782:	3f 93       	push	r19
    1784:	4f 93       	push	r20
    1786:	5f 93       	push	r21
    1788:	6f 93       	push	r22
    178a:	7f 93       	push	r23
    178c:	8f 93       	push	r24
    178e:	9f 93       	push	r25
    1790:	af 93       	push	r26
    1792:	bf 93       	push	r27
    1794:	ef 93       	push	r30
    1796:	ff 93       	push	r31
  switch(TW_STATUS){
    1798:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    179c:	88 7f       	andi	r24, 0xF8	; 248
    179e:	80 36       	cpi	r24, 0x60	; 96
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <__vector_24+0x2e>
    17a2:	9e c0       	rjmp	.+316    	; 0x18e0 <__vector_24+0x16a>
    17a4:	78 f5       	brcc	.+94     	; 0x1804 <__vector_24+0x8e>
    17a6:	88 32       	cpi	r24, 0x28	; 40
    17a8:	09 f4       	brne	.+2      	; 0x17ac <__vector_24+0x36>
    17aa:	5d c0       	rjmp	.+186    	; 0x1866 <__vector_24+0xf0>
    17ac:	90 f4       	brcc	.+36     	; 0x17d2 <__vector_24+0x5c>
    17ae:	80 31       	cpi	r24, 0x10	; 16
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <__vector_24+0x3e>
    17b2:	56 c0       	rjmp	.+172    	; 0x1860 <__vector_24+0xea>
    17b4:	38 f4       	brcc	.+14     	; 0x17c4 <__vector_24+0x4e>
    17b6:	88 23       	and	r24, r24
    17b8:	09 f4       	brne	.+2      	; 0x17bc <__vector_24+0x46>
    17ba:	f5 c0       	rjmp	.+490    	; 0x19a6 <__vector_24+0x230>
    17bc:	88 30       	cpi	r24, 0x08	; 8
    17be:	09 f4       	brne	.+2      	; 0x17c2 <__vector_24+0x4c>
    17c0:	4f c0       	rjmp	.+158    	; 0x1860 <__vector_24+0xea>
    17c2:	f5 c0       	rjmp	.+490    	; 0x19ae <__vector_24+0x238>
    17c4:	88 31       	cpi	r24, 0x18	; 24
    17c6:	09 f4       	brne	.+2      	; 0x17ca <__vector_24+0x54>
    17c8:	4e c0       	rjmp	.+156    	; 0x1866 <__vector_24+0xf0>
    17ca:	80 32       	cpi	r24, 0x20	; 32
    17cc:	09 f4       	brne	.+2      	; 0x17d0 <__vector_24+0x5a>
    17ce:	5f c0       	rjmp	.+190    	; 0x188e <__vector_24+0x118>
    17d0:	ee c0       	rjmp	.+476    	; 0x19ae <__vector_24+0x238>
    17d2:	80 34       	cpi	r24, 0x40	; 64
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <__vector_24+0x62>
    17d6:	6a c0       	rjmp	.+212    	; 0x18ac <__vector_24+0x136>
    17d8:	58 f4       	brcc	.+22     	; 0x17f0 <__vector_24+0x7a>
    17da:	80 33       	cpi	r24, 0x30	; 48
    17dc:	09 f4       	brne	.+2      	; 0x17e0 <__vector_24+0x6a>
    17de:	57 c0       	rjmp	.+174    	; 0x188e <__vector_24+0x118>
    17e0:	88 33       	cpi	r24, 0x38	; 56
    17e2:	09 f0       	breq	.+2      	; 0x17e6 <__vector_24+0x70>
    17e4:	e4 c0       	rjmp	.+456    	; 0x19ae <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    17e6:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <twi_error>
      twi_releaseBus();
    17ea:	0e 94 b5 0b 	call	0x176a	; 0x176a <twi_releaseBus>
      break;
    17ee:	df c0       	rjmp	.+446    	; 0x19ae <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    17f0:	80 35       	cpi	r24, 0x50	; 80
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <__vector_24+0x80>
    17f4:	4f c0       	rjmp	.+158    	; 0x1894 <__vector_24+0x11e>
    17f6:	88 35       	cpi	r24, 0x58	; 88
    17f8:	09 f4       	brne	.+2      	; 0x17fc <__vector_24+0x86>
    17fa:	5d c0       	rjmp	.+186    	; 0x18b6 <__vector_24+0x140>
    17fc:	88 34       	cpi	r24, 0x48	; 72
    17fe:	09 f0       	breq	.+2      	; 0x1802 <__vector_24+0x8c>
    1800:	d6 c0       	rjmp	.+428    	; 0x19ae <__vector_24+0x238>
    1802:	d3 c0       	rjmp	.+422    	; 0x19aa <__vector_24+0x234>
    1804:	88 39       	cpi	r24, 0x98	; 152
    1806:	09 f4       	brne	.+2      	; 0x180a <__vector_24+0x94>
    1808:	c4 c0       	rjmp	.+392    	; 0x1992 <__vector_24+0x21c>
    180a:	a8 f4       	brcc	.+42     	; 0x1836 <__vector_24+0xc0>
    180c:	88 37       	cpi	r24, 0x78	; 120
    180e:	09 f4       	brne	.+2      	; 0x1812 <__vector_24+0x9c>
    1810:	67 c0       	rjmp	.+206    	; 0x18e0 <__vector_24+0x16a>
    1812:	38 f4       	brcc	.+14     	; 0x1822 <__vector_24+0xac>
    1814:	88 36       	cpi	r24, 0x68	; 104
    1816:	09 f4       	brne	.+2      	; 0x181a <__vector_24+0xa4>
    1818:	63 c0       	rjmp	.+198    	; 0x18e0 <__vector_24+0x16a>
    181a:	80 37       	cpi	r24, 0x70	; 112
    181c:	09 f4       	brne	.+2      	; 0x1820 <__vector_24+0xaa>
    181e:	60 c0       	rjmp	.+192    	; 0x18e0 <__vector_24+0x16a>
    1820:	c6 c0       	rjmp	.+396    	; 0x19ae <__vector_24+0x238>
    1822:	88 38       	cpi	r24, 0x88	; 136
    1824:	09 f4       	brne	.+2      	; 0x1828 <__vector_24+0xb2>
    1826:	b5 c0       	rjmp	.+362    	; 0x1992 <__vector_24+0x21c>
    1828:	80 39       	cpi	r24, 0x90	; 144
    182a:	09 f4       	brne	.+2      	; 0x182e <__vector_24+0xb8>
    182c:	5f c0       	rjmp	.+190    	; 0x18ec <__vector_24+0x176>
    182e:	80 38       	cpi	r24, 0x80	; 128
    1830:	09 f0       	breq	.+2      	; 0x1834 <__vector_24+0xbe>
    1832:	bd c0       	rjmp	.+378    	; 0x19ae <__vector_24+0x238>
    1834:	5b c0       	rjmp	.+182    	; 0x18ec <__vector_24+0x176>
    1836:	80 3b       	cpi	r24, 0xB0	; 176
    1838:	09 f4       	brne	.+2      	; 0x183c <__vector_24+0xc6>
    183a:	83 c0       	rjmp	.+262    	; 0x1942 <__vector_24+0x1cc>
    183c:	38 f4       	brcc	.+14     	; 0x184c <__vector_24+0xd6>
    183e:	80 3a       	cpi	r24, 0xA0	; 160
    1840:	09 f4       	brne	.+2      	; 0x1844 <__vector_24+0xce>
    1842:	66 c0       	rjmp	.+204    	; 0x1910 <__vector_24+0x19a>
    1844:	88 3a       	cpi	r24, 0xA8	; 168
    1846:	09 f4       	brne	.+2      	; 0x184a <__vector_24+0xd4>
    1848:	7c c0       	rjmp	.+248    	; 0x1942 <__vector_24+0x1cc>
    184a:	b1 c0       	rjmp	.+354    	; 0x19ae <__vector_24+0x238>
    184c:	80 3c       	cpi	r24, 0xC0	; 192
    184e:	09 f4       	brne	.+2      	; 0x1852 <__vector_24+0xdc>
    1850:	a4 c0       	rjmp	.+328    	; 0x199a <__vector_24+0x224>
    1852:	88 3c       	cpi	r24, 0xC8	; 200
    1854:	09 f4       	brne	.+2      	; 0x1858 <__vector_24+0xe2>
    1856:	a1 c0       	rjmp	.+322    	; 0x199a <__vector_24+0x224>
    1858:	88 3b       	cpi	r24, 0xB8	; 184
    185a:	09 f4       	brne	.+2      	; 0x185e <__vector_24+0xe8>
    185c:	87 c0       	rjmp	.+270    	; 0x196c <__vector_24+0x1f6>
    185e:	a7 c0       	rjmp	.+334    	; 0x19ae <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1860:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <twi_slarw>
    1864:	10 c0       	rjmp	.+32     	; 0x1886 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1866:	90 91 06 05 	lds	r25, 0x0506	; 0x800506 <twi_masterBufferIndex>
    186a:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <twi_masterBufferLength>
    186e:	98 17       	cp	r25, r24
    1870:	70 f5       	brcc	.+92     	; 0x18ce <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1872:	e0 91 06 05 	lds	r30, 0x0506	; 0x800506 <twi_masterBufferIndex>
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	8e 0f       	add	r24, r30
    187a:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <twi_masterBufferIndex>
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	e9 5f       	subi	r30, 0xF9	; 249
    1882:	fa 4f       	sbci	r31, 0xFA	; 250
    1884:	80 81       	ld	r24, Z
    1886:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    188a:	85 ec       	ldi	r24, 0xC5	; 197
    188c:	83 c0       	rjmp	.+262    	; 0x1994 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    188e:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <twi_error>
    1892:	8b c0       	rjmp	.+278    	; 0x19aa <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1894:	e0 91 06 05 	lds	r30, 0x0506	; 0x800506 <twi_masterBufferIndex>
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	8e 0f       	add	r24, r30
    189c:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <twi_masterBufferIndex>
    18a0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	e9 5f       	subi	r30, 0xF9	; 249
    18a8:	fa 4f       	sbci	r31, 0xFA	; 250
    18aa:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    18ac:	90 91 06 05 	lds	r25, 0x0506	; 0x800506 <twi_masterBufferIndex>
    18b0:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <twi_masterBufferLength>
    18b4:	6b c0       	rjmp	.+214    	; 0x198c <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    18b6:	e0 91 06 05 	lds	r30, 0x0506	; 0x800506 <twi_masterBufferIndex>
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	8e 0f       	add	r24, r30
    18be:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <twi_masterBufferIndex>
    18c2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	e9 5f       	subi	r30, 0xF9	; 249
    18ca:	fa 4f       	sbci	r31, 0xFA	; 250
    18cc:	80 83       	st	Z, r24
	if (twi_sendStop)
    18ce:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <twi_sendStop>
    18d2:	81 11       	cpse	r24, r1
    18d4:	6a c0       	rjmp	.+212    	; 0x19aa <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    18dc:	84 ea       	ldi	r24, 0xA4	; 164
    18de:	5e c0       	rjmp	.+188    	; 0x199c <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    18e0:	83 e0       	ldi	r24, 0x03	; 3
    18e2:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    18e6:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <twi_rxBufferIndex>
    18ea:	cf cf       	rjmp	.-98     	; 0x188a <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    18ec:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <twi_rxBufferIndex>
    18f0:	80 32       	cpi	r24, 0x20	; 32
    18f2:	08 f0       	brcs	.+2      	; 0x18f6 <__vector_24+0x180>
    18f4:	4e c0       	rjmp	.+156    	; 0x1992 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    18f6:	e0 91 c2 04 	lds	r30, 0x04C2	; 0x8004c2 <twi_rxBufferIndex>
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	8e 0f       	add	r24, r30
    18fe:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <twi_rxBufferIndex>
    1902:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	ed 53       	subi	r30, 0x3D	; 61
    190a:	fb 4f       	sbci	r31, 0xFB	; 251
    190c:	80 83       	st	Z, r24
    190e:	bd cf       	rjmp	.-134    	; 0x188a <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1910:	0e 94 b5 0b 	call	0x176a	; 0x176a <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1914:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <twi_rxBufferIndex>
    1918:	80 32       	cpi	r24, 0x20	; 32
    191a:	30 f4       	brcc	.+12     	; 0x1928 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    191c:	e0 91 c2 04 	lds	r30, 0x04C2	; 0x8004c2 <twi_rxBufferIndex>
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	ed 53       	subi	r30, 0x3D	; 61
    1924:	fb 4f       	sbci	r31, 0xFB	; 251
    1926:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1928:	60 91 c2 04 	lds	r22, 0x04C2	; 0x8004c2 <twi_rxBufferIndex>
    192c:	70 e0       	ldi	r23, 0x00	; 0
    192e:	e0 91 27 05 	lds	r30, 0x0527	; 0x800527 <twi_onSlaveReceive>
    1932:	f0 91 28 05 	lds	r31, 0x0528	; 0x800528 <twi_onSlaveReceive+0x1>
    1936:	83 ec       	ldi	r24, 0xC3	; 195
    1938:	94 e0       	ldi	r25, 0x04	; 4
    193a:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    193c:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <twi_rxBufferIndex>
      break;
    1940:	36 c0       	rjmp	.+108    	; 0x19ae <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1942:	84 e0       	ldi	r24, 0x04	; 4
    1944:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1948:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    194c:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1950:	e0 91 29 05 	lds	r30, 0x0529	; 0x800529 <twi_onSlaveTransmit>
    1954:	f0 91 2a 05 	lds	r31, 0x052A	; 0x80052a <twi_onSlaveTransmit+0x1>
    1958:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    195a:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <twi_txBufferLength>
    195e:	81 11       	cpse	r24, r1
    1960:	05 c0       	rjmp	.+10     	; 0x196c <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1968:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    196c:	e0 91 e4 04 	lds	r30, 0x04E4	; 0x8004e4 <twi_txBufferIndex>
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	8e 0f       	add	r24, r30
    1974:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <twi_txBufferIndex>
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	eb 51       	subi	r30, 0x1B	; 27
    197c:	fb 4f       	sbci	r31, 0xFB	; 251
    197e:	80 81       	ld	r24, Z
    1980:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1984:	90 91 e4 04 	lds	r25, 0x04E4	; 0x8004e4 <twi_txBufferIndex>
    1988:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <twi_txBufferLength>
    198c:	98 17       	cp	r25, r24
    198e:	08 f4       	brcc	.+2      	; 0x1992 <__vector_24+0x21c>
    1990:	7c cf       	rjmp	.-264    	; 0x188a <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1992:	85 e8       	ldi	r24, 0x85	; 133
    1994:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1998:	0a c0       	rjmp	.+20     	; 0x19ae <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    199a:	85 ec       	ldi	r24, 0xC5	; 197
    199c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    19a0:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <twi_state>
      break;
    19a4:	04 c0       	rjmp	.+8      	; 0x19ae <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    19a6:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <twi_error>
      twi_stop();
    19aa:	0e 94 ab 0b 	call	0x1756	; 0x1756 <twi_stop>
      break;
  }
}
    19ae:	ff 91       	pop	r31
    19b0:	ef 91       	pop	r30
    19b2:	bf 91       	pop	r27
    19b4:	af 91       	pop	r26
    19b6:	9f 91       	pop	r25
    19b8:	8f 91       	pop	r24
    19ba:	7f 91       	pop	r23
    19bc:	6f 91       	pop	r22
    19be:	5f 91       	pop	r21
    19c0:	4f 91       	pop	r20
    19c2:	3f 91       	pop	r19
    19c4:	2f 91       	pop	r18
    19c6:	0f 90       	pop	r0
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	0f 90       	pop	r0
    19cc:	1f 90       	pop	r1
    19ce:	18 95       	reti

000019d0 <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
    19d0:	83 30       	cpi	r24, 0x03	; 3
    19d2:	81 f0       	breq	.+32     	; 0x19f4 <turnOffPWM+0x24>
    19d4:	28 f4       	brcc	.+10     	; 0x19e0 <turnOffPWM+0x10>
    19d6:	81 30       	cpi	r24, 0x01	; 1
    19d8:	99 f0       	breq	.+38     	; 0x1a00 <turnOffPWM+0x30>
    19da:	82 30       	cpi	r24, 0x02	; 2
    19dc:	a1 f0       	breq	.+40     	; 0x1a06 <turnOffPWM+0x36>
    19de:	08 95       	ret
    19e0:	87 30       	cpi	r24, 0x07	; 7
    19e2:	a9 f0       	breq	.+42     	; 0x1a0e <turnOffPWM+0x3e>
    19e4:	88 30       	cpi	r24, 0x08	; 8
    19e6:	b9 f0       	breq	.+46     	; 0x1a16 <turnOffPWM+0x46>
    19e8:	84 30       	cpi	r24, 0x04	; 4
    19ea:	d1 f4       	brne	.+52     	; 0x1a20 <turnOffPWM+0x50>
    19ec:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    19f0:	8f 7d       	andi	r24, 0xDF	; 223
    19f2:	03 c0       	rjmp	.+6      	; 0x19fa <turnOffPWM+0x2a>
    19f4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    19f8:	8f 77       	andi	r24, 0x7F	; 127
    19fa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    19fe:	08 95       	ret
    1a00:	84 b5       	in	r24, 0x24	; 36
    1a02:	8f 77       	andi	r24, 0x7F	; 127
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <turnOffPWM+0x3a>
    1a06:	84 b5       	in	r24, 0x24	; 36
    1a08:	8f 7d       	andi	r24, 0xDF	; 223
    1a0a:	84 bd       	out	0x24, r24	; 36
    1a0c:	08 95       	ret
    1a0e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1a12:	8f 77       	andi	r24, 0x7F	; 127
    1a14:	03 c0       	rjmp	.+6      	; 0x1a1c <turnOffPWM+0x4c>
    1a16:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1a1a:	8f 7d       	andi	r24, 0xDF	; 223
    1a1c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1a20:	08 95       	ret

00001a22 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1a22:	1f 93       	push	r17
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	f9 01       	movw	r30, r18
    1a2e:	e3 57       	subi	r30, 0x73	; 115
    1a30:	ff 4f       	sbci	r31, 0xFF	; 255
    1a32:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1a34:	f9 01       	movw	r30, r18
    1a36:	ef 55       	subi	r30, 0x5F	; 95
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1a3c:	f9 01       	movw	r30, r18
    1a3e:	eb 54       	subi	r30, 0x4B	; 75
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1a44:	cc 23       	and	r28, r28
    1a46:	c9 f0       	breq	.+50     	; 0x1a7a <digitalWrite+0x58>
    1a48:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1a4a:	81 11       	cpse	r24, r1
    1a4c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <turnOffPWM>

	out = portOutputRegister(port);
    1a50:	ec 2f       	mov	r30, r28
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	ee 0f       	add	r30, r30
    1a56:	ff 1f       	adc	r31, r31
    1a58:	e7 53       	subi	r30, 0x37	; 55
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	a5 91       	lpm	r26, Z+
    1a5e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1a60:	8f b7       	in	r24, 0x3f	; 63
	cli();
    1a62:	f8 94       	cli

	if (val == LOW) {
    1a64:	11 11       	cpse	r17, r1
    1a66:	05 c0       	rjmp	.+10     	; 0x1a72 <digitalWrite+0x50>
		*out &= ~bit;
    1a68:	9c 91       	ld	r25, X
    1a6a:	ed 2f       	mov	r30, r29
    1a6c:	e0 95       	com	r30
    1a6e:	e9 23       	and	r30, r25
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <digitalWrite+0x54>
	} else {
		*out |= bit;
    1a72:	ec 91       	ld	r30, X
    1a74:	ed 2b       	or	r30, r29
    1a76:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    1a78:	8f bf       	out	0x3f, r24	; 63
}
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	1f 91       	pop	r17
    1a80:	08 95       	ret

00001a82 <_ZN7MPU6050C1Eh>:
// ZG_OFFS_USR* register

int16_t MPU6050::getZGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
    1a82:	fc 01       	movw	r30, r24
    1a84:	60 83       	st	Z, r22
    1a86:	08 95       	ret

00001a88 <_ZN7MPU605021setFullScaleGyroRangeEh>:
    1a88:	0f 93       	push	r16
    1a8a:	06 2f       	mov	r16, r22
    1a8c:	22 e0       	ldi	r18, 0x02	; 2
    1a8e:	44 e0       	ldi	r20, 0x04	; 4
    1a90:	6b e1       	ldi	r22, 0x1B	; 27
    1a92:	fc 01       	movw	r30, r24
    1a94:	80 81       	ld	r24, Z
    1a96:	0e 94 00 10 	call	0x2000	; 0x2000 <_ZN6I2Cdev9writeBitsEhhhhh>
    1a9a:	0f 91       	pop	r16
    1a9c:	08 95       	ret

00001a9e <_ZN7MPU605022setFullScaleAccelRangeEh>:
    1a9e:	0f 93       	push	r16
    1aa0:	06 2f       	mov	r16, r22
    1aa2:	22 e0       	ldi	r18, 0x02	; 2
    1aa4:	44 e0       	ldi	r20, 0x04	; 4
    1aa6:	6c e1       	ldi	r22, 0x1C	; 28
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	80 81       	ld	r24, Z
    1aac:	0e 94 00 10 	call	0x2000	; 0x2000 <_ZN6I2Cdev9writeBitsEhhhhh>
    1ab0:	0f 91       	pop	r16
    1ab2:	08 95       	ret

00001ab4 <_ZN7MPU605010getMotion6EPiS0_S0_S0_S0_S0_>:
    1ab4:	4f 92       	push	r4
    1ab6:	5f 92       	push	r5
    1ab8:	6f 92       	push	r6
    1aba:	7f 92       	push	r7
    1abc:	8f 92       	push	r8
    1abe:	9f 92       	push	r9
    1ac0:	af 92       	push	r10
    1ac2:	bf 92       	push	r11
    1ac4:	cf 92       	push	r12
    1ac6:	df 92       	push	r13
    1ac8:	ef 92       	push	r14
    1aca:	ff 92       	push	r15
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	ec 01       	movw	r28, r24
    1ad6:	3b 01       	movw	r6, r22
    1ad8:	4a 01       	movw	r8, r20
    1ada:	59 01       	movw	r10, r18
    1adc:	28 01       	movw	r4, r16
    1ade:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    1ae2:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    1ae6:	9c 01       	movw	r18, r24
    1ae8:	2f 5f       	subi	r18, 0xFF	; 255
    1aea:	3f 4f       	sbci	r19, 0xFF	; 255
    1aec:	4e e0       	ldi	r20, 0x0E	; 14
    1aee:	6b e3       	ldi	r22, 0x3B	; 59
    1af0:	88 81       	ld	r24, Y
    1af2:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <_ZN6I2Cdev9readBytesEhhhPhj>
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	98 2f       	mov	r25, r24
    1afc:	88 27       	eor	r24, r24
    1afe:	2a 81       	ldd	r18, Y+2	; 0x02
    1b00:	82 2b       	or	r24, r18
    1b02:	f3 01       	movw	r30, r6
    1b04:	91 83       	std	Z+1, r25	; 0x01
    1b06:	80 83       	st	Z, r24
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	98 2f       	mov	r25, r24
    1b0e:	88 27       	eor	r24, r24
    1b10:	2c 81       	ldd	r18, Y+4	; 0x04
    1b12:	82 2b       	or	r24, r18
    1b14:	f4 01       	movw	r30, r8
    1b16:	91 83       	std	Z+1, r25	; 0x01
    1b18:	80 83       	st	Z, r24
    1b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	98 2f       	mov	r25, r24
    1b20:	88 27       	eor	r24, r24
    1b22:	2e 81       	ldd	r18, Y+6	; 0x06
    1b24:	82 2b       	or	r24, r18
    1b26:	f5 01       	movw	r30, r10
    1b28:	91 83       	std	Z+1, r25	; 0x01
    1b2a:	80 83       	st	Z, r24
    1b2c:	89 85       	ldd	r24, Y+9	; 0x09
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	98 2f       	mov	r25, r24
    1b32:	88 27       	eor	r24, r24
    1b34:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b36:	82 2b       	or	r24, r18
    1b38:	f2 01       	movw	r30, r4
    1b3a:	91 83       	std	Z+1, r25	; 0x01
    1b3c:	80 83       	st	Z, r24
    1b3e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	98 2f       	mov	r25, r24
    1b44:	88 27       	eor	r24, r24
    1b46:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b48:	82 2b       	or	r24, r18
    1b4a:	f7 01       	movw	r30, r14
    1b4c:	91 83       	std	Z+1, r25	; 0x01
    1b4e:	80 83       	st	Z, r24
    1b50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	98 2f       	mov	r25, r24
    1b56:	88 27       	eor	r24, r24
    1b58:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b5a:	82 2b       	or	r24, r18
    1b5c:	f6 01       	movw	r30, r12
    1b5e:	91 83       	std	Z+1, r25	; 0x01
    1b60:	80 83       	st	Z, r24
    1b62:	df 91       	pop	r29
    1b64:	cf 91       	pop	r28
    1b66:	1f 91       	pop	r17
    1b68:	0f 91       	pop	r16
    1b6a:	ff 90       	pop	r15
    1b6c:	ef 90       	pop	r14
    1b6e:	df 90       	pop	r13
    1b70:	cf 90       	pop	r12
    1b72:	bf 90       	pop	r11
    1b74:	af 90       	pop	r10
    1b76:	9f 90       	pop	r9
    1b78:	8f 90       	pop	r8
    1b7a:	7f 90       	pop	r7
    1b7c:	6f 90       	pop	r6
    1b7e:	5f 90       	pop	r5
    1b80:	4f 90       	pop	r4
    1b82:	08 95       	ret

00001b84 <_ZN7MPU605015setSleepEnabledEb>:
    1b84:	26 2f       	mov	r18, r22
    1b86:	46 e0       	ldi	r20, 0x06	; 6
    1b88:	6b e6       	ldi	r22, 0x6B	; 107
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	80 81       	ld	r24, Z
    1b8e:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <_ZN6I2Cdev8writeBitEhhhh>

00001b92 <_ZN7MPU605014setClockSourceEh>:
    1b92:	0f 93       	push	r16
    1b94:	06 2f       	mov	r16, r22
    1b96:	23 e0       	ldi	r18, 0x03	; 3
    1b98:	42 e0       	ldi	r20, 0x02	; 2
    1b9a:	6b e6       	ldi	r22, 0x6B	; 107
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	80 81       	ld	r24, Z
    1ba0:	0e 94 00 10 	call	0x2000	; 0x2000 <_ZN6I2Cdev9writeBitsEhhhhh>
    1ba4:	0f 91       	pop	r16
    1ba6:	08 95       	ret

00001ba8 <_ZN7MPU605010initializeEv>:
    1ba8:	cf 93       	push	r28
    1baa:	df 93       	push	r29
    1bac:	ec 01       	movw	r28, r24
    1bae:	61 e0       	ldi	r22, 0x01	; 1
    1bb0:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <_ZN7MPU605014setClockSourceEh>
    1bb4:	60 e0       	ldi	r22, 0x00	; 0
    1bb6:	ce 01       	movw	r24, r28
    1bb8:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <_ZN7MPU605021setFullScaleGyroRangeEh>
    1bbc:	60 e0       	ldi	r22, 0x00	; 0
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_ZN7MPU605022setFullScaleAccelRangeEh>
    1bc4:	60 e0       	ldi	r22, 0x00	; 0
    1bc6:	ce 01       	movw	r24, r28
    1bc8:	df 91       	pop	r29
    1bca:	cf 91       	pop	r28
    1bcc:	0c 94 c2 0d 	jmp	0x1b84	; 0x1b84 <_ZN7MPU605015setSleepEnabledEb>

00001bd0 <_ZN7MPU605011getDeviceIDEv>:
    1bd0:	ef 92       	push	r14
    1bd2:	ff 92       	push	r15
    1bd4:	0f 93       	push	r16
    1bd6:	1f 93       	push	r17
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	ec 01       	movw	r28, r24
    1bde:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    1be2:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    1be6:	8c 01       	movw	r16, r24
    1be8:	0f 5f       	subi	r16, 0xFF	; 255
    1bea:	1f 4f       	sbci	r17, 0xFF	; 255
    1bec:	26 e0       	ldi	r18, 0x06	; 6
    1bee:	46 e0       	ldi	r20, 0x06	; 6
    1bf0:	65 e7       	ldi	r22, 0x75	; 117
    1bf2:	88 81       	ld	r24, Y
    1bf4:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <_ZN6I2Cdev8readBitsEhhhhPhj>
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	df 91       	pop	r29
    1bfc:	cf 91       	pop	r28
    1bfe:	1f 91       	pop	r17
    1c00:	0f 91       	pop	r16
    1c02:	ff 90       	pop	r15
    1c04:	ef 90       	pop	r14
    1c06:	08 95       	ret

00001c08 <_ZN7MPU605014testConnectionEv>:
    1c08:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <_ZN7MPU605011getDeviceIDEv>
    1c0c:	91 e0       	ldi	r25, 0x01	; 1
    1c0e:	84 33       	cpi	r24, 0x34	; 52
    1c10:	09 f0       	breq	.+2      	; 0x1c14 <_ZN7MPU605014testConnectionEv+0xc>
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	89 2f       	mov	r24, r25
    1c16:	08 95       	ret

00001c18 <_ZN7MPU605015setXAccelOffsetEi>:
    1c18:	ab 01       	movw	r20, r22
    1c1a:	66 e0       	ldi	r22, 0x06	; 6
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	80 81       	ld	r24, Z
    1c20:	0c 94 b5 0e 	jmp	0x1d6a	; 0x1d6a <_ZN6I2Cdev9writeWordEhhj>

00001c24 <_ZN7MPU605015setYAccelOffsetEi>:
    1c24:	ab 01       	movw	r20, r22
    1c26:	68 e0       	ldi	r22, 0x08	; 8
    1c28:	fc 01       	movw	r30, r24
    1c2a:	80 81       	ld	r24, Z
    1c2c:	0c 94 b5 0e 	jmp	0x1d6a	; 0x1d6a <_ZN6I2Cdev9writeWordEhhj>

00001c30 <_ZN7MPU605015setZAccelOffsetEi>:
    1c30:	ab 01       	movw	r20, r22
    1c32:	6a e0       	ldi	r22, 0x0A	; 10
    1c34:	fc 01       	movw	r30, r24
    1c36:	80 81       	ld	r24, Z
    1c38:	0c 94 b5 0e 	jmp	0x1d6a	; 0x1d6a <_ZN6I2Cdev9writeWordEhhj>

00001c3c <_ZN7MPU605014setXGyroOffsetEi>:
    1c3c:	ab 01       	movw	r20, r22
    1c3e:	63 e1       	ldi	r22, 0x13	; 19
    1c40:	fc 01       	movw	r30, r24
    1c42:	80 81       	ld	r24, Z
    1c44:	0c 94 b5 0e 	jmp	0x1d6a	; 0x1d6a <_ZN6I2Cdev9writeWordEhhj>

00001c48 <_ZN7MPU605014setYGyroOffsetEi>:
    1c48:	ab 01       	movw	r20, r22
    1c4a:	65 e1       	ldi	r22, 0x15	; 21
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	80 81       	ld	r24, Z
    1c50:	0c 94 b5 0e 	jmp	0x1d6a	; 0x1d6a <_ZN6I2Cdev9writeWordEhhj>

00001c54 <_ZN7MPU605014setZGyroOffsetEi>:
void MPU6050::setZGyroOffset(int16_t offset) {
    1c54:	ab 01       	movw	r20, r22
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
    1c56:	67 e1       	ldi	r22, 0x17	; 23
    1c58:	fc 01       	movw	r30, r24
    1c5a:	80 81       	ld	r24, Z
    1c5c:	0c 94 b5 0e 	jmp	0x1d6a	; 0x1d6a <_ZN6I2Cdev9writeWordEhhj>

00001c60 <_ZN6I2Cdev10writeBytesEhhhPh>:
int8_t I2Cdev::readBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t *data, uint16_t timeout) {
    uint8_t b;
    uint8_t count = readByte(devAddr, regAddr, &b, timeout);
    *data = b & (1 << bitNum);
    return count;
}
    1c60:	ef 92       	push	r14
    1c62:	ff 92       	push	r15
    1c64:	0f 93       	push	r16
    1c66:	1f 93       	push	r17
    1c68:	cf 93       	push	r28
    1c6a:	df 93       	push	r29
    1c6c:	c6 2f       	mov	r28, r22
    1c6e:	14 2f       	mov	r17, r20
    1c70:	79 01       	movw	r14, r18
    1c72:	68 2f       	mov	r22, r24
    1c74:	86 e6       	ldi	r24, 0x66	; 102
    1c76:	94 e0       	ldi	r25, 0x04	; 4
    1c78:	0e 94 41 09 	call	0x1282	; 0x1282 <_ZN7TwoWire17beginTransmissionEh>
    1c7c:	6c 2f       	mov	r22, r28
    1c7e:	86 e6       	ldi	r24, 0x66	; 102
    1c80:	94 e0       	ldi	r25, 0x04	; 4
    1c82:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_ZN7TwoWire5writeEh>
    1c86:	11 23       	and	r17, r17
    1c88:	81 f0       	breq	.+32     	; 0x1caa <_ZN6I2Cdev10writeBytesEhhhPh+0x4a>
    1c8a:	e7 01       	movw	r28, r14
    1c8c:	11 50       	subi	r17, 0x01	; 1
    1c8e:	01 2f       	mov	r16, r17
    1c90:	10 e0       	ldi	r17, 0x00	; 0
    1c92:	0f 5f       	subi	r16, 0xFF	; 255
    1c94:	1f 4f       	sbci	r17, 0xFF	; 255
    1c96:	0e 0d       	add	r16, r14
    1c98:	1f 1d       	adc	r17, r15
    1c9a:	69 91       	ld	r22, Y+
    1c9c:	86 e6       	ldi	r24, 0x66	; 102
    1c9e:	94 e0       	ldi	r25, 0x04	; 4
    1ca0:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_ZN7TwoWire5writeEh>
    1ca4:	c0 17       	cp	r28, r16
    1ca6:	d1 07       	cpc	r29, r17
    1ca8:	c1 f7       	brne	.-16     	; 0x1c9a <_ZN6I2Cdev10writeBytesEhhhPh+0x3a>
    1caa:	86 e6       	ldi	r24, 0x66	; 102
    1cac:	94 e0       	ldi	r25, 0x04	; 4
    1cae:	0e 94 cb 09 	call	0x1396	; 0x1396 <_ZN7TwoWire15endTransmissionEv>
    1cb2:	91 e0       	ldi	r25, 0x01	; 1
    1cb4:	81 11       	cpse	r24, r1
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	89 2f       	mov	r24, r25
    1cba:	df 91       	pop	r29
    1cbc:	cf 91       	pop	r28
    1cbe:	1f 91       	pop	r17
    1cc0:	0f 91       	pop	r16
    1cc2:	ff 90       	pop	r15
    1cc4:	ef 90       	pop	r14
    1cc6:	08 95       	ret

00001cc8 <_ZN6I2Cdev9writeByteEhhh>:
    1cc8:	cf 93       	push	r28
    1cca:	df 93       	push	r29
    1ccc:	1f 92       	push	r1
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
    1cd2:	49 83       	std	Y+1, r20	; 0x01
    1cd4:	9e 01       	movw	r18, r28
    1cd6:	2f 5f       	subi	r18, 0xFF	; 255
    1cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cda:	41 e0       	ldi	r20, 0x01	; 1
    1cdc:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <_ZN6I2Cdev10writeBytesEhhhPh>
    1ce0:	0f 90       	pop	r0
    1ce2:	df 91       	pop	r29
    1ce4:	cf 91       	pop	r28
    1ce6:	08 95       	ret

00001ce8 <_ZN6I2Cdev10writeWordsEhhhPj>:
    1ce8:	cf 92       	push	r12
    1cea:	df 92       	push	r13
    1cec:	ef 92       	push	r14
    1cee:	ff 92       	push	r15
    1cf0:	1f 93       	push	r17
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	c6 2f       	mov	r28, r22
    1cf8:	e4 2e       	mov	r14, r20
    1cfa:	69 01       	movw	r12, r18
    1cfc:	68 2f       	mov	r22, r24
    1cfe:	86 e6       	ldi	r24, 0x66	; 102
    1d00:	94 e0       	ldi	r25, 0x04	; 4
    1d02:	0e 94 41 09 	call	0x1282	; 0x1282 <_ZN7TwoWire17beginTransmissionEh>
    1d06:	6c 2f       	mov	r22, r28
    1d08:	86 e6       	ldi	r24, 0x66	; 102
    1d0a:	94 e0       	ldi	r25, 0x04	; 4
    1d0c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_ZN7TwoWire5writeEh>
    1d10:	f1 2c       	mov	r15, r1
    1d12:	ee 0c       	add	r14, r14
    1d14:	ff 1c       	adc	r15, r15
    1d16:	1e 14       	cp	r1, r14
    1d18:	1f 04       	cpc	r1, r15
    1d1a:	bc f4       	brge	.+46     	; 0x1d4a <_ZN6I2Cdev10writeWordsEhhhPj+0x62>
    1d1c:	10 e0       	ldi	r17, 0x00	; 0
    1d1e:	c1 2f       	mov	r28, r17
    1d20:	d0 e0       	ldi	r29, 0x00	; 0
    1d22:	cc 0f       	add	r28, r28
    1d24:	dd 1f       	adc	r29, r29
    1d26:	cc 0d       	add	r28, r12
    1d28:	dd 1d       	adc	r29, r13
    1d2a:	69 81       	ldd	r22, Y+1	; 0x01
    1d2c:	86 e6       	ldi	r24, 0x66	; 102
    1d2e:	94 e0       	ldi	r25, 0x04	; 4
    1d30:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_ZN7TwoWire5writeEh>
    1d34:	68 81       	ld	r22, Y
    1d36:	86 e6       	ldi	r24, 0x66	; 102
    1d38:	94 e0       	ldi	r25, 0x04	; 4
    1d3a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_ZN7TwoWire5writeEh>
    1d3e:	1e 5f       	subi	r17, 0xFE	; 254
    1d40:	81 2f       	mov	r24, r17
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	8e 15       	cp	r24, r14
    1d46:	9f 05       	cpc	r25, r15
    1d48:	54 f3       	brlt	.-44     	; 0x1d1e <_ZN6I2Cdev10writeWordsEhhhPj+0x36>
    1d4a:	86 e6       	ldi	r24, 0x66	; 102
    1d4c:	94 e0       	ldi	r25, 0x04	; 4
    1d4e:	0e 94 cb 09 	call	0x1396	; 0x1396 <_ZN7TwoWire15endTransmissionEv>
    1d52:	91 e0       	ldi	r25, 0x01	; 1
    1d54:	81 11       	cpse	r24, r1
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	89 2f       	mov	r24, r25
    1d5a:	df 91       	pop	r29
    1d5c:	cf 91       	pop	r28
    1d5e:	1f 91       	pop	r17
    1d60:	ff 90       	pop	r15
    1d62:	ef 90       	pop	r14
    1d64:	df 90       	pop	r13
    1d66:	cf 90       	pop	r12
    1d68:	08 95       	ret

00001d6a <_ZN6I2Cdev9writeWordEhhj>:
    1d6a:	cf 93       	push	r28
    1d6c:	df 93       	push	r29
    1d6e:	00 d0       	rcall	.+0      	; 0x1d70 <_ZN6I2Cdev9writeWordEhhj+0x6>
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	5a 83       	std	Y+2, r21	; 0x02
    1d76:	49 83       	std	Y+1, r20	; 0x01
    1d78:	9e 01       	movw	r18, r28
    1d7a:	2f 5f       	subi	r18, 0xFF	; 255
    1d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7e:	41 e0       	ldi	r20, 0x01	; 1
    1d80:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_ZN6I2Cdev10writeWordsEhhhPj>
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	df 91       	pop	r29
    1d8a:	cf 91       	pop	r28
    1d8c:	08 95       	ret

00001d8e <_ZN6I2Cdev9readBytesEhhhPhj>:
    1d8e:	2f 92       	push	r2
    1d90:	3f 92       	push	r3
    1d92:	4f 92       	push	r4
    1d94:	5f 92       	push	r5
    1d96:	6f 92       	push	r6
    1d98:	7f 92       	push	r7
    1d9a:	8f 92       	push	r8
    1d9c:	9f 92       	push	r9
    1d9e:	af 92       	push	r10
    1da0:	bf 92       	push	r11
    1da2:	cf 92       	push	r12
    1da4:	df 92       	push	r13
    1da6:	ef 92       	push	r14
    1da8:	ff 92       	push	r15
    1daa:	0f 93       	push	r16
    1dac:	1f 93       	push	r17
    1dae:	cf 93       	push	r28
    1db0:	df 93       	push	r29
    1db2:	00 d0       	rcall	.+0      	; 0x1db4 <_ZN6I2Cdev9readBytesEhhhPhj+0x26>
    1db4:	00 d0       	rcall	.+0      	; 0x1db6 <_ZN6I2Cdev9readBytesEhhhPhj+0x28>
    1db6:	00 d0       	rcall	.+0      	; 0x1db8 <_ZN6I2Cdev9readBytesEhhhPhj+0x2a>
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	28 2e       	mov	r2, r24
    1dbe:	69 83       	std	Y+1, r22	; 0x01
    1dc0:	c4 2e       	mov	r12, r20
    1dc2:	79 01       	movw	r14, r18
    1dc4:	0e 94 1e 0a 	call	0x143c	; 0x143c <millis>
    1dc8:	4b 01       	movw	r8, r22
    1dca:	5c 01       	movw	r10, r24
    1dcc:	cc 20       	and	r12, r12
    1dce:	09 f4       	brne	.+2      	; 0x1dd2 <_ZN6I2Cdev9readBytesEhhhPhj+0x44>
    1dd0:	5b c0       	rjmp	.+182    	; 0x1e88 <_ZN6I2Cdev9readBytesEhhhPhj+0xfa>
    1dd2:	31 2c       	mov	r3, r1
    1dd4:	d1 2c       	mov	r13, r1
    1dd6:	8c 2d       	mov	r24, r12
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9b 83       	std	Y+3, r25	; 0x03
    1ddc:	8a 83       	std	Y+2, r24	; 0x02
    1dde:	28 01       	movw	r4, r16
    1de0:	61 2c       	mov	r6, r1
    1de2:	71 2c       	mov	r7, r1
    1de4:	cc 82       	std	Y+4, r12	; 0x04
    1de6:	62 2d       	mov	r22, r2
    1de8:	86 e6       	ldi	r24, 0x66	; 102
    1dea:	94 e0       	ldi	r25, 0x04	; 4
    1dec:	0e 94 41 09 	call	0x1282	; 0x1282 <_ZN7TwoWire17beginTransmissionEh>
    1df0:	69 81       	ldd	r22, Y+1	; 0x01
    1df2:	86 e6       	ldi	r24, 0x66	; 102
    1df4:	94 e0       	ldi	r25, 0x04	; 4
    1df6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_ZN7TwoWire5writeEh>
    1dfa:	86 e6       	ldi	r24, 0x66	; 102
    1dfc:	94 e0       	ldi	r25, 0x04	; 4
    1dfe:	0e 94 cb 09 	call	0x1396	; 0x1396 <_ZN7TwoWire15endTransmissionEv>
    1e02:	62 2d       	mov	r22, r2
    1e04:	86 e6       	ldi	r24, 0x66	; 102
    1e06:	94 e0       	ldi	r25, 0x04	; 4
    1e08:	0e 94 41 09 	call	0x1282	; 0x1282 <_ZN7TwoWire17beginTransmissionEh>
    1e0c:	4a 81       	ldd	r20, Y+2	; 0x02
    1e0e:	5b 81       	ldd	r21, Y+3	; 0x03
    1e10:	43 19       	sub	r20, r3
    1e12:	51 09       	sbc	r21, r1
    1e14:	41 32       	cpi	r20, 0x21	; 33
    1e16:	51 05       	cpc	r21, r1
    1e18:	14 f0       	brlt	.+4      	; 0x1e1e <_ZN6I2Cdev9readBytesEhhhPhj+0x90>
    1e1a:	40 e2       	ldi	r20, 0x20	; 32
    1e1c:	50 e0       	ldi	r21, 0x00	; 0
    1e1e:	62 2d       	mov	r22, r2
    1e20:	86 e6       	ldi	r24, 0x66	; 102
    1e22:	94 e0       	ldi	r25, 0x04	; 4
    1e24:	0e 94 c7 09 	call	0x138e	; 0x138e <_ZN7TwoWire11requestFromEhh>
    1e28:	0f c0       	rjmp	.+30     	; 0x1e48 <_ZN6I2Cdev9readBytesEhhhPhj+0xba>
    1e2a:	f7 01       	movw	r30, r14
    1e2c:	ed 0d       	add	r30, r13
    1e2e:	f1 1d       	adc	r31, r1
    1e30:	d7 fc       	sbrc	r13, 7
    1e32:	fa 95       	dec	r31
    1e34:	fe 83       	std	Y+6, r31	; 0x06
    1e36:	ed 83       	std	Y+5, r30	; 0x05
    1e38:	86 e6       	ldi	r24, 0x66	; 102
    1e3a:	94 e0       	ldi	r25, 0x04	; 4
    1e3c:	0e 94 a1 08 	call	0x1142	; 0x1142 <_ZN7TwoWire4readEv>
    1e40:	ed 81       	ldd	r30, Y+5	; 0x05
    1e42:	fe 81       	ldd	r31, Y+6	; 0x06
    1e44:	80 83       	st	Z, r24
    1e46:	d3 94       	inc	r13
    1e48:	86 e6       	ldi	r24, 0x66	; 102
    1e4a:	94 e0       	ldi	r25, 0x04	; 4
    1e4c:	0e 94 99 08 	call	0x1132	; 0x1132 <_ZN7TwoWire9availableEv>
    1e50:	89 2b       	or	r24, r25
    1e52:	81 f0       	breq	.+32     	; 0x1e74 <_ZN6I2Cdev9readBytesEhhhPhj+0xe6>
    1e54:	01 15       	cp	r16, r1
    1e56:	11 05       	cpc	r17, r1
    1e58:	41 f3       	breq	.-48     	; 0x1e2a <_ZN6I2Cdev9readBytesEhhhPhj+0x9c>
    1e5a:	0e 94 1e 0a 	call	0x143c	; 0x143c <millis>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	88 19       	sub	r24, r8
    1e64:	99 09       	sbc	r25, r9
    1e66:	aa 09       	sbc	r26, r10
    1e68:	bb 09       	sbc	r27, r11
    1e6a:	84 15       	cp	r24, r4
    1e6c:	95 05       	cpc	r25, r5
    1e6e:	a6 05       	cpc	r26, r6
    1e70:	b7 05       	cpc	r27, r7
    1e72:	d8 f2       	brcs	.-74     	; 0x1e2a <_ZN6I2Cdev9readBytesEhhhPhj+0x9c>
    1e74:	8c 81       	ldd	r24, Y+4	; 0x04
    1e76:	f0 e2       	ldi	r31, 0x20	; 32
    1e78:	fc 15       	cp	r31, r12
    1e7a:	08 f4       	brcc	.+2      	; 0x1e7e <_ZN6I2Cdev9readBytesEhhhPhj+0xf0>
    1e7c:	80 e2       	ldi	r24, 0x20	; 32
    1e7e:	38 0e       	add	r3, r24
    1e80:	3c 14       	cp	r3, r12
    1e82:	08 f4       	brcc	.+2      	; 0x1e86 <_ZN6I2Cdev9readBytesEhhhPhj+0xf8>
    1e84:	b0 cf       	rjmp	.-160    	; 0x1de6 <_ZN6I2Cdev9readBytesEhhhPhj+0x58>
    1e86:	01 c0       	rjmp	.+2      	; 0x1e8a <_ZN6I2Cdev9readBytesEhhhPhj+0xfc>
    1e88:	d1 2c       	mov	r13, r1
    1e8a:	01 15       	cp	r16, r1
    1e8c:	11 05       	cpc	r17, r1
    1e8e:	d1 f0       	breq	.+52     	; 0x1ec4 <_ZN6I2Cdev9readBytesEhhhPhj+0x136>
    1e90:	0e 94 1e 0a 	call	0x143c	; 0x143c <millis>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	88 19       	sub	r24, r8
    1e9a:	99 09       	sbc	r25, r9
    1e9c:	aa 09       	sbc	r26, r10
    1e9e:	bb 09       	sbc	r27, r11
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	80 17       	cp	r24, r16
    1ea6:	91 07       	cpc	r25, r17
    1ea8:	a2 07       	cpc	r26, r18
    1eaa:	b3 07       	cpc	r27, r19
    1eac:	58 f0       	brcs	.+22     	; 0x1ec4 <_ZN6I2Cdev9readBytesEhhhPhj+0x136>
    1eae:	8c 2d       	mov	r24, r12
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	2d 2d       	mov	r18, r13
    1eb4:	0d 2c       	mov	r0, r13
    1eb6:	00 0c       	add	r0, r0
    1eb8:	33 0b       	sbc	r19, r19
    1eba:	28 17       	cp	r18, r24
    1ebc:	39 07       	cpc	r19, r25
    1ebe:	14 f4       	brge	.+4      	; 0x1ec4 <_ZN6I2Cdev9readBytesEhhhPhj+0x136>
    1ec0:	dd 24       	eor	r13, r13
    1ec2:	da 94       	dec	r13
    1ec4:	8d 2d       	mov	r24, r13
    1ec6:	26 96       	adiw	r28, 0x06	; 6
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	de bf       	out	0x3e, r29	; 62
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	cd bf       	out	0x3d, r28	; 61
    1ed2:	df 91       	pop	r29
    1ed4:	cf 91       	pop	r28
    1ed6:	1f 91       	pop	r17
    1ed8:	0f 91       	pop	r16
    1eda:	ff 90       	pop	r15
    1edc:	ef 90       	pop	r14
    1ede:	df 90       	pop	r13
    1ee0:	cf 90       	pop	r12
    1ee2:	bf 90       	pop	r11
    1ee4:	af 90       	pop	r10
    1ee6:	9f 90       	pop	r9
    1ee8:	8f 90       	pop	r8
    1eea:	7f 90       	pop	r7
    1eec:	6f 90       	pop	r6
    1eee:	5f 90       	pop	r5
    1ef0:	4f 90       	pop	r4
    1ef2:	3f 90       	pop	r3
    1ef4:	2f 90       	pop	r2
    1ef6:	08 95       	ret

00001ef8 <_ZN6I2Cdev8readByteEhhPhj>:
    1ef8:	0f 93       	push	r16
    1efa:	1f 93       	push	r17
    1efc:	89 01       	movw	r16, r18
    1efe:	9a 01       	movw	r18, r20
    1f00:	41 e0       	ldi	r20, 0x01	; 1
    1f02:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <_ZN6I2Cdev9readBytesEhhhPhj>
    1f06:	1f 91       	pop	r17
    1f08:	0f 91       	pop	r16
    1f0a:	08 95       	ret

00001f0c <_ZN6I2Cdev8readBitsEhhhhPhj>:
 * @param length Number of bits to read (not more than 8)
 * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {
    1f0c:	cf 92       	push	r12
    1f0e:	df 92       	push	r13
    1f10:	ef 92       	push	r14
    1f12:	ff 92       	push	r15
    1f14:	0f 93       	push	r16
    1f16:	1f 93       	push	r17
    1f18:	cf 93       	push	r28
    1f1a:	df 93       	push	r29
    1f1c:	1f 92       	push	r1
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
    1f22:	d4 2e       	mov	r13, r20
    1f24:	c2 2e       	mov	r12, r18
    1f26:	97 01       	movw	r18, r14
    // 76543210 bit numbers
    //    xxx   args: bitStart=4, length=3
    //    010   masked
    //   -> 010 shifted
    uint8_t count, b;
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
    1f28:	ae 01       	movw	r20, r28
    1f2a:	4f 5f       	subi	r20, 0xFF	; 255
    1f2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f2e:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <_ZN6I2Cdev8readByteEhhPhj>
    1f32:	88 23       	and	r24, r24
    1f34:	01 f1       	breq	.+64     	; 0x1f76 <_ZN6I2Cdev8readBitsEhhhhPhj+0x6a>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    1f36:	4d 2d       	mov	r20, r13
    1f38:	50 e0       	ldi	r21, 0x00	; 0
    1f3a:	4c 19       	sub	r20, r12
    1f3c:	51 09       	sbc	r21, r1
    1f3e:	4f 5f       	subi	r20, 0xFF	; 255
    1f40:	5f 4f       	sbci	r21, 0xFF	; 255
    1f42:	61 e0       	ldi	r22, 0x01	; 1
    1f44:	70 e0       	ldi	r23, 0x00	; 0
    1f46:	9b 01       	movw	r18, r22
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <_ZN6I2Cdev8readBitsEhhhhPhj+0x42>
    1f4a:	22 0f       	add	r18, r18
    1f4c:	33 1f       	adc	r19, r19
    1f4e:	ca 94       	dec	r12
    1f50:	e2 f7       	brpl	.-8      	; 0x1f4a <_ZN6I2Cdev8readBitsEhhhhPhj+0x3e>
    1f52:	21 50       	subi	r18, 0x01	; 1
    1f54:	31 09       	sbc	r19, r1
    1f56:	04 2e       	mov	r0, r20
    1f58:	02 c0       	rjmp	.+4      	; 0x1f5e <_ZN6I2Cdev8readBitsEhhhhPhj+0x52>
    1f5a:	22 0f       	add	r18, r18
    1f5c:	33 1f       	adc	r19, r19
    1f5e:	0a 94       	dec	r0
    1f60:	e2 f7       	brpl	.-8      	; 0x1f5a <_ZN6I2Cdev8readBitsEhhhhPhj+0x4e>
        b &= mask;
    1f62:	99 81       	ldd	r25, Y+1	; 0x01
    1f64:	29 23       	and	r18, r25
        b >>= (bitStart - length + 1);
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <_ZN6I2Cdev8readBitsEhhhhPhj+0x62>
    1f6a:	35 95       	asr	r19
    1f6c:	27 95       	ror	r18
    1f6e:	4a 95       	dec	r20
    1f70:	e2 f7       	brpl	.-8      	; 0x1f6a <_ZN6I2Cdev8readBitsEhhhhPhj+0x5e>
    1f72:	f8 01       	movw	r30, r16
    1f74:	20 83       	st	Z, r18
        *data = b;
    }
    return count;
}
    1f76:	0f 90       	pop	r0
    1f78:	df 91       	pop	r29
    1f7a:	cf 91       	pop	r28
    1f7c:	1f 91       	pop	r17
    1f7e:	0f 91       	pop	r16
    1f80:	ff 90       	pop	r15
    1f82:	ef 90       	pop	r14
    1f84:	df 90       	pop	r13
    1f86:	cf 90       	pop	r12
    1f88:	08 95       	ret

00001f8a <_ZN6I2Cdev8writeBitEhhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    1f8a:	ef 92       	push	r14
    1f8c:	ff 92       	push	r15
    1f8e:	0f 93       	push	r16
    1f90:	1f 93       	push	r17
    1f92:	cf 93       	push	r28
    1f94:	df 93       	push	r29
    1f96:	1f 92       	push	r1
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
    1f9c:	18 2f       	mov	r17, r24
    1f9e:	06 2f       	mov	r16, r22
    1fa0:	f4 2e       	mov	r15, r20
    1fa2:	e2 2e       	mov	r14, r18
    uint8_t b;
    readByte(devAddr, regAddr, &b);
    1fa4:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    1fa8:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    1fac:	ae 01       	movw	r20, r28
    1fae:	4f 5f       	subi	r20, 0xFF	; 255
    1fb0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fb2:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <_ZN6I2Cdev8readByteEhhPhj>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    1fb6:	ee 20       	and	r14, r14
    1fb8:	59 f0       	breq	.+22     	; 0x1fd0 <_ZN6I2Cdev8writeBitEhhhh+0x46>
    1fba:	21 e0       	ldi	r18, 0x01	; 1
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	a9 01       	movw	r20, r18
    1fc0:	02 c0       	rjmp	.+4      	; 0x1fc6 <_ZN6I2Cdev8writeBitEhhhh+0x3c>
    1fc2:	44 0f       	add	r20, r20
    1fc4:	55 1f       	adc	r21, r21
    1fc6:	fa 94       	dec	r15
    1fc8:	e2 f7       	brpl	.-8      	; 0x1fc2 <_ZN6I2Cdev8writeBitEhhhh+0x38>
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	48 2b       	or	r20, r24
    1fce:	0b c0       	rjmp	.+22     	; 0x1fe6 <_ZN6I2Cdev8writeBitEhhhh+0x5c>
    1fd0:	21 e0       	ldi	r18, 0x01	; 1
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	a9 01       	movw	r20, r18
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <_ZN6I2Cdev8writeBitEhhhh+0x52>
    1fd8:	44 0f       	add	r20, r20
    1fda:	55 1f       	adc	r21, r21
    1fdc:	fa 94       	dec	r15
    1fde:	e2 f7       	brpl	.-8      	; 0x1fd8 <_ZN6I2Cdev8writeBitEhhhh+0x4e>
    1fe0:	40 95       	com	r20
    1fe2:	99 81       	ldd	r25, Y+1	; 0x01
    1fe4:	49 23       	and	r20, r25
    1fe6:	49 83       	std	Y+1, r20	; 0x01
    return writeByte(devAddr, regAddr, b);
    1fe8:	60 2f       	mov	r22, r16
    1fea:	81 2f       	mov	r24, r17
    1fec:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <_ZN6I2Cdev9writeByteEhhh>
}
    1ff0:	0f 90       	pop	r0
    1ff2:	df 91       	pop	r29
    1ff4:	cf 91       	pop	r28
    1ff6:	1f 91       	pop	r17
    1ff8:	0f 91       	pop	r16
    1ffa:	ff 90       	pop	r15
    1ffc:	ef 90       	pop	r14
    1ffe:	08 95       	ret

00002000 <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
    2000:	df 92       	push	r13
    2002:	ef 92       	push	r14
    2004:	ff 92       	push	r15
    2006:	0f 93       	push	r16
    2008:	1f 93       	push	r17
    200a:	cf 93       	push	r28
    200c:	df 93       	push	r29
    200e:	1f 92       	push	r1
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	18 2f       	mov	r17, r24
    2016:	f6 2e       	mov	r15, r22
    2018:	e4 2e       	mov	r14, r20
    201a:	d2 2e       	mov	r13, r18
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
    201c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    2020:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    2024:	ae 01       	movw	r20, r28
    2026:	4f 5f       	subi	r20, 0xFF	; 255
    2028:	5f 4f       	sbci	r21, 0xFF	; 255
    202a:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <_ZN6I2Cdev8readByteEhhPhj>
    202e:	88 23       	and	r24, r24
    2030:	41 f1       	breq	.+80     	; 0x2082 <_ZN6I2Cdev9writeBitsEhhhhh+0x82>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    2032:	ee 2d       	mov	r30, r14
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	ed 19       	sub	r30, r13
    2038:	f1 09       	sbc	r31, r1
    203a:	31 96       	adiw	r30, 0x01	; 1
    203c:	41 e0       	ldi	r20, 0x01	; 1
    203e:	50 e0       	ldi	r21, 0x00	; 0
    2040:	9a 01       	movw	r18, r20
    2042:	02 c0       	rjmp	.+4      	; 0x2048 <_ZN6I2Cdev9writeBitsEhhhhh+0x48>
    2044:	22 0f       	add	r18, r18
    2046:	33 1f       	adc	r19, r19
    2048:	da 94       	dec	r13
    204a:	e2 f7       	brpl	.-8      	; 0x2044 <_ZN6I2Cdev9writeBitsEhhhhh+0x44>
    204c:	21 50       	subi	r18, 0x01	; 1
    204e:	31 09       	sbc	r19, r1
    2050:	0e 2e       	mov	r0, r30
    2052:	02 c0       	rjmp	.+4      	; 0x2058 <_ZN6I2Cdev9writeBitsEhhhhh+0x58>
    2054:	22 0f       	add	r18, r18
    2056:	33 1f       	adc	r19, r19
    2058:	0a 94       	dec	r0
    205a:	e2 f7       	brpl	.-8      	; 0x2054 <_ZN6I2Cdev9writeBitsEhhhhh+0x54>
        data <<= (bitStart - length + 1); // shift data into correct position
    205c:	80 2f       	mov	r24, r16
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	02 c0       	rjmp	.+4      	; 0x2066 <_ZN6I2Cdev9writeBitsEhhhhh+0x66>
    2062:	88 0f       	add	r24, r24
    2064:	99 1f       	adc	r25, r25
    2066:	ea 95       	dec	r30
    2068:	e2 f7       	brpl	.-8      	; 0x2062 <_ZN6I2Cdev9writeBitsEhhhhh+0x62>
        data &= mask; // zero all non-important bits in data
        b &= ~(mask); // zero all important bits in existing byte
    206a:	42 2f       	mov	r20, r18
    206c:	40 95       	com	r20
    206e:	99 81       	ldd	r25, Y+1	; 0x01
    2070:	49 23       	and	r20, r25
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
        data <<= (bitStart - length + 1); // shift data into correct position
        data &= mask; // zero all non-important bits in data
    2072:	28 23       	and	r18, r24
        b &= ~(mask); // zero all important bits in existing byte
        b |= data; // combine data with existing byte
    2074:	42 2b       	or	r20, r18
    2076:	49 83       	std	Y+1, r20	; 0x01
        return writeByte(devAddr, regAddr, b);
    2078:	6f 2d       	mov	r22, r15
    207a:	81 2f       	mov	r24, r17
    207c:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <_ZN6I2Cdev9writeByteEhhh>
    2080:	01 c0       	rjmp	.+2      	; 0x2084 <_ZN6I2Cdev9writeBitsEhhhhh+0x84>
    } else {
        return false;
    2082:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    2084:	0f 90       	pop	r0
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	1f 91       	pop	r17
    208c:	0f 91       	pop	r16
    208e:	ff 90       	pop	r15
    2090:	ef 90       	pop	r14
    2092:	df 90       	pop	r13
    2094:	08 95       	ret

00002096 <__divmodhi4>:
    2096:	97 fb       	bst	r25, 7
    2098:	07 2e       	mov	r0, r23
    209a:	16 f4       	brtc	.+4      	; 0x20a0 <__divmodhi4+0xa>
    209c:	00 94       	com	r0
    209e:	07 d0       	rcall	.+14     	; 0x20ae <__divmodhi4_neg1>
    20a0:	77 fd       	sbrc	r23, 7
    20a2:	09 d0       	rcall	.+18     	; 0x20b6 <__divmodhi4_neg2>
    20a4:	0e 94 a0 10 	call	0x2140	; 0x2140 <__udivmodhi4>
    20a8:	07 fc       	sbrc	r0, 7
    20aa:	05 d0       	rcall	.+10     	; 0x20b6 <__divmodhi4_neg2>
    20ac:	3e f4       	brtc	.+14     	; 0x20bc <__divmodhi4_exit>

000020ae <__divmodhi4_neg1>:
    20ae:	90 95       	com	r25
    20b0:	81 95       	neg	r24
    20b2:	9f 4f       	sbci	r25, 0xFF	; 255
    20b4:	08 95       	ret

000020b6 <__divmodhi4_neg2>:
    20b6:	70 95       	com	r23
    20b8:	61 95       	neg	r22
    20ba:	7f 4f       	sbci	r23, 0xFF	; 255

000020bc <__divmodhi4_exit>:
    20bc:	08 95       	ret

000020be <__udivmodsi4>:
    20be:	a1 e2       	ldi	r26, 0x21	; 33
    20c0:	1a 2e       	mov	r1, r26
    20c2:	aa 1b       	sub	r26, r26
    20c4:	bb 1b       	sub	r27, r27
    20c6:	fd 01       	movw	r30, r26
    20c8:	0d c0       	rjmp	.+26     	; 0x20e4 <__udivmodsi4_ep>

000020ca <__udivmodsi4_loop>:
    20ca:	aa 1f       	adc	r26, r26
    20cc:	bb 1f       	adc	r27, r27
    20ce:	ee 1f       	adc	r30, r30
    20d0:	ff 1f       	adc	r31, r31
    20d2:	a2 17       	cp	r26, r18
    20d4:	b3 07       	cpc	r27, r19
    20d6:	e4 07       	cpc	r30, r20
    20d8:	f5 07       	cpc	r31, r21
    20da:	20 f0       	brcs	.+8      	; 0x20e4 <__udivmodsi4_ep>
    20dc:	a2 1b       	sub	r26, r18
    20de:	b3 0b       	sbc	r27, r19
    20e0:	e4 0b       	sbc	r30, r20
    20e2:	f5 0b       	sbc	r31, r21

000020e4 <__udivmodsi4_ep>:
    20e4:	66 1f       	adc	r22, r22
    20e6:	77 1f       	adc	r23, r23
    20e8:	88 1f       	adc	r24, r24
    20ea:	99 1f       	adc	r25, r25
    20ec:	1a 94       	dec	r1
    20ee:	69 f7       	brne	.-38     	; 0x20ca <__udivmodsi4_loop>
    20f0:	60 95       	com	r22
    20f2:	70 95       	com	r23
    20f4:	80 95       	com	r24
    20f6:	90 95       	com	r25
    20f8:	9b 01       	movw	r18, r22
    20fa:	ac 01       	movw	r20, r24
    20fc:	bd 01       	movw	r22, r26
    20fe:	cf 01       	movw	r24, r30
    2100:	08 95       	ret

00002102 <__divmodsi4>:
    2102:	05 2e       	mov	r0, r21
    2104:	97 fb       	bst	r25, 7
    2106:	1e f4       	brtc	.+6      	; 0x210e <__divmodsi4+0xc>
    2108:	00 94       	com	r0
    210a:	0e 94 98 10 	call	0x2130	; 0x2130 <__negsi2>
    210e:	57 fd       	sbrc	r21, 7
    2110:	07 d0       	rcall	.+14     	; 0x2120 <__divmodsi4_neg2>
    2112:	0e 94 5f 10 	call	0x20be	; 0x20be <__udivmodsi4>
    2116:	07 fc       	sbrc	r0, 7
    2118:	03 d0       	rcall	.+6      	; 0x2120 <__divmodsi4_neg2>
    211a:	4e f4       	brtc	.+18     	; 0x212e <__divmodsi4_exit>
    211c:	0c 94 98 10 	jmp	0x2130	; 0x2130 <__negsi2>

00002120 <__divmodsi4_neg2>:
    2120:	50 95       	com	r21
    2122:	40 95       	com	r20
    2124:	30 95       	com	r19
    2126:	21 95       	neg	r18
    2128:	3f 4f       	sbci	r19, 0xFF	; 255
    212a:	4f 4f       	sbci	r20, 0xFF	; 255
    212c:	5f 4f       	sbci	r21, 0xFF	; 255

0000212e <__divmodsi4_exit>:
    212e:	08 95       	ret

00002130 <__negsi2>:
    2130:	90 95       	com	r25
    2132:	80 95       	com	r24
    2134:	70 95       	com	r23
    2136:	61 95       	neg	r22
    2138:	7f 4f       	sbci	r23, 0xFF	; 255
    213a:	8f 4f       	sbci	r24, 0xFF	; 255
    213c:	9f 4f       	sbci	r25, 0xFF	; 255
    213e:	08 95       	ret

00002140 <__udivmodhi4>:
    2140:	aa 1b       	sub	r26, r26
    2142:	bb 1b       	sub	r27, r27
    2144:	51 e1       	ldi	r21, 0x11	; 17
    2146:	07 c0       	rjmp	.+14     	; 0x2156 <__udivmodhi4_ep>

00002148 <__udivmodhi4_loop>:
    2148:	aa 1f       	adc	r26, r26
    214a:	bb 1f       	adc	r27, r27
    214c:	a6 17       	cp	r26, r22
    214e:	b7 07       	cpc	r27, r23
    2150:	10 f0       	brcs	.+4      	; 0x2156 <__udivmodhi4_ep>
    2152:	a6 1b       	sub	r26, r22
    2154:	b7 0b       	sbc	r27, r23

00002156 <__udivmodhi4_ep>:
    2156:	88 1f       	adc	r24, r24
    2158:	99 1f       	adc	r25, r25
    215a:	5a 95       	dec	r21
    215c:	a9 f7       	brne	.-22     	; 0x2148 <__udivmodhi4_loop>
    215e:	80 95       	com	r24
    2160:	90 95       	com	r25
    2162:	bc 01       	movw	r22, r24
    2164:	cd 01       	movw	r24, r26
    2166:	08 95       	ret

00002168 <__tablejump2__>:
    2168:	ee 0f       	add	r30, r30
    216a:	ff 1f       	adc	r31, r31
    216c:	05 90       	lpm	r0, Z+
    216e:	f4 91       	lpm	r31, Z
    2170:	e0 2d       	mov	r30, r0
    2172:	09 94       	ijmp

00002174 <_exit>:
    2174:	f8 94       	cli

00002176 <__stop_program>:
    2176:	ff cf       	rjmp	.-2      	; 0x2176 <__stop_program>
