
AL-ESC-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d8  00800100  00002e34  00002ec8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000258  008002d8  008002d8  000030a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000030a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000030d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000440  00000000  00000000  00003110  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bbe0  00000000  00000000  00003550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002257  00000000  00000000  0000f130  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d80  00000000  00000000  00011387  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c28  00000000  00000000  00014108  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000029a3  00000000  00000000  00014d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000040ba  00000000  00000000  000176d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000418  00000000  00000000  0001b78d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__ctors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__vector_3>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_5>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 6c 12 	jmp	0x24d8	; 0x24d8 <__vector_16>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <__vector_18>
      4c:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__vector_19>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 10 15 	jmp	0x2a20	; 0x2a20 <__vector_24>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	af 0e       	add	r10, r31
      c4:	68 12       	cpse	r6, r24

000000c6 <__ctors_end>:
      c6:	11 24       	eor	r1, r1
      c8:	1f be       	out	0x3f, r1	; 63
      ca:	cf ef       	ldi	r28, 0xFF	; 255
      cc:	d8 e0       	ldi	r29, 0x08	; 8
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
      d2:	12 e0       	ldi	r17, 0x02	; 2
      d4:	a0 e0       	ldi	r26, 0x00	; 0
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	e4 e3       	ldi	r30, 0x34	; 52
      da:	fe e2       	ldi	r31, 0x2E	; 46
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x10>
      de:	05 90       	lpm	r0, Z+
      e0:	0d 92       	st	X+, r0
      e2:	a8 3d       	cpi	r26, 0xD8	; 216
      e4:	b1 07       	cpc	r27, r17
      e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0xc>

000000e8 <__do_clear_bss>:
      e8:	25 e0       	ldi	r18, 0x05	; 5
      ea:	a8 ed       	ldi	r26, 0xD8	; 216
      ec:	b2 e0       	ldi	r27, 0x02	; 2
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
      f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
      f2:	a0 33       	cpi	r26, 0x30	; 48
      f4:	b2 07       	cpc	r27, r18
      f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>

000000f8 <__do_global_ctors>:
      f8:	10 e0       	ldi	r17, 0x00	; 0
      fa:	c3 e6       	ldi	r28, 0x63	; 99
      fc:	d0 e0       	ldi	r29, 0x00	; 0
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__do_global_ctors+0x10>
     100:	21 97       	sbiw	r28, 0x01	; 1
     102:	fe 01       	movw	r30, r28
     104:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__tablejump2__>
     108:	c1 36       	cpi	r28, 0x61	; 97
     10a:	d1 07       	cpc	r29, r17
     10c:	c9 f7       	brne	.-14     	; 0x100 <__do_global_ctors+0x8>
     10e:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <main>
     112:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <_ZN7TwoWire5writeEi>:
		//difference = ((long)(actual - center) * (long)500) / (high - center);      //Calculate and scale the actual value to a 1000 - 2000us value
		//if(reverse == 1)return 1500 - difference;                                  //If the channel is reversed
		//else return 1500 + difference;                                             //If the channel is not reversed
	//}
	//else return 1500;
}
     11a:	dc 01       	movw	r26, r24
     11c:	ed 91       	ld	r30, X+
     11e:	fc 91       	ld	r31, X
     120:	01 90       	ld	r0, Z+
     122:	f0 81       	ld	r31, Z
     124:	e0 2d       	mov	r30, r0
     126:	09 94       	ijmp

00000128 <__vector_5>:
     128:	1f 92       	push	r1
     12a:	0f 92       	push	r0
     12c:	0f b6       	in	r0, 0x3f	; 63
     12e:	0f 92       	push	r0
     130:	11 24       	eor	r1, r1
     132:	8f 93       	push	r24
     134:	89 b1       	in	r24, 0x09	; 9
     136:	8f 91       	pop	r24
     138:	0f 90       	pop	r0
     13a:	0f be       	out	0x3f, r0	; 63
     13c:	0f 90       	pop	r0
     13e:	1f 90       	pop	r1
     140:	18 95       	reti

00000142 <__vector_3>:
     142:	1f 92       	push	r1
     144:	0f 92       	push	r0
     146:	0f b6       	in	r0, 0x3f	; 63
     148:	0f 92       	push	r0
     14a:	11 24       	eor	r1, r1
     14c:	2f 93       	push	r18
     14e:	3f 93       	push	r19
     150:	4f 93       	push	r20
     152:	5f 93       	push	r21
     154:	6f 93       	push	r22
     156:	7f 93       	push	r23
     158:	8f 93       	push	r24
     15a:	9f 93       	push	r25
     15c:	af 93       	push	r26
     15e:	bf 93       	push	r27
     160:	ef 93       	push	r30
     162:	ff 93       	push	r31
     164:	0e 94 b6 12 	call	0x256c	; 0x256c <micros>
     168:	60 93 10 03 	sts	0x0310, r22	; 0x800310 <current_time>
     16c:	70 93 11 03 	sts	0x0311, r23	; 0x800311 <current_time+0x1>
     170:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <current_time+0x2>
     174:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <current_time+0x3>
     178:	20 91 c9 03 	lds	r18, 0x03C9	; 0x8003c9 <last_channel_1>
     17c:	18 9b       	sbis	0x03, 0	; 3
     17e:	0e c0       	rjmp	.+28     	; 0x19c <__vector_3+0x5a>
     180:	21 11       	cpse	r18, r1
     182:	1b c0       	rjmp	.+54     	; 0x1ba <__vector_3+0x78>
     184:	21 e0       	ldi	r18, 0x01	; 1
     186:	20 93 c9 03 	sts	0x03C9, r18	; 0x8003c9 <last_channel_1>
     18a:	60 93 20 03 	sts	0x0320, r22	; 0x800320 <timer_1>
     18e:	70 93 21 03 	sts	0x0321, r23	; 0x800321 <timer_1+0x1>
     192:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <timer_1+0x2>
     196:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <timer_1+0x3>
     19a:	0f c0       	rjmp	.+30     	; 0x1ba <__vector_3+0x78>
     19c:	21 30       	cpi	r18, 0x01	; 1
     19e:	69 f4       	brne	.+26     	; 0x1ba <__vector_3+0x78>
     1a0:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <last_channel_1>
     1a4:	20 91 20 03 	lds	r18, 0x0320	; 0x800320 <timer_1>
     1a8:	30 91 21 03 	lds	r19, 0x0321	; 0x800321 <timer_1+0x1>
     1ac:	ab 01       	movw	r20, r22
     1ae:	42 1b       	sub	r20, r18
     1b0:	53 0b       	sbc	r21, r19
     1b2:	50 93 ab 03 	sts	0x03AB, r21	; 0x8003ab <receiver_input+0x3>
     1b6:	40 93 aa 03 	sts	0x03AA, r20	; 0x8003aa <receiver_input+0x2>
     1ba:	20 91 c8 03 	lds	r18, 0x03C8	; 0x8003c8 <last_channel_2>
     1be:	19 9b       	sbis	0x03, 1	; 3
     1c0:	0e c0       	rjmp	.+28     	; 0x1de <__vector_3+0x9c>
     1c2:	21 11       	cpse	r18, r1
     1c4:	1b c0       	rjmp	.+54     	; 0x1fc <__vector_3+0xba>
     1c6:	21 e0       	ldi	r18, 0x01	; 1
     1c8:	20 93 c8 03 	sts	0x03C8, r18	; 0x8003c8 <last_channel_2>
     1cc:	60 93 1c 03 	sts	0x031C, r22	; 0x80031c <timer_2>
     1d0:	70 93 1d 03 	sts	0x031D, r23	; 0x80031d <timer_2+0x1>
     1d4:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <timer_2+0x2>
     1d8:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <timer_2+0x3>
     1dc:	0f c0       	rjmp	.+30     	; 0x1fc <__vector_3+0xba>
     1de:	21 30       	cpi	r18, 0x01	; 1
     1e0:	69 f4       	brne	.+26     	; 0x1fc <__vector_3+0xba>
     1e2:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <last_channel_2>
     1e6:	20 91 1c 03 	lds	r18, 0x031C	; 0x80031c <timer_2>
     1ea:	30 91 1d 03 	lds	r19, 0x031D	; 0x80031d <timer_2+0x1>
     1ee:	ab 01       	movw	r20, r22
     1f0:	42 1b       	sub	r20, r18
     1f2:	53 0b       	sbc	r21, r19
     1f4:	50 93 ad 03 	sts	0x03AD, r21	; 0x8003ad <receiver_input+0x5>
     1f8:	40 93 ac 03 	sts	0x03AC, r20	; 0x8003ac <receiver_input+0x4>
     1fc:	20 91 c7 03 	lds	r18, 0x03C7	; 0x8003c7 <last_channel_3>
     200:	1a 9b       	sbis	0x03, 2	; 3
     202:	0e c0       	rjmp	.+28     	; 0x220 <__vector_3+0xde>
     204:	21 11       	cpse	r18, r1
     206:	1b c0       	rjmp	.+54     	; 0x23e <__vector_3+0xfc>
     208:	21 e0       	ldi	r18, 0x01	; 1
     20a:	20 93 c7 03 	sts	0x03C7, r18	; 0x8003c7 <last_channel_3>
     20e:	60 93 18 03 	sts	0x0318, r22	; 0x800318 <timer_3>
     212:	70 93 19 03 	sts	0x0319, r23	; 0x800319 <timer_3+0x1>
     216:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <timer_3+0x2>
     21a:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <timer_3+0x3>
     21e:	0f c0       	rjmp	.+30     	; 0x23e <__vector_3+0xfc>
     220:	21 30       	cpi	r18, 0x01	; 1
     222:	69 f4       	brne	.+26     	; 0x23e <__vector_3+0xfc>
     224:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <last_channel_3>
     228:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <timer_3>
     22c:	30 91 19 03 	lds	r19, 0x0319	; 0x800319 <timer_3+0x1>
     230:	ab 01       	movw	r20, r22
     232:	42 1b       	sub	r20, r18
     234:	53 0b       	sbc	r21, r19
     236:	50 93 af 03 	sts	0x03AF, r21	; 0x8003af <receiver_input+0x7>
     23a:	40 93 ae 03 	sts	0x03AE, r20	; 0x8003ae <receiver_input+0x6>
     23e:	20 91 c6 03 	lds	r18, 0x03C6	; 0x8003c6 <last_channel_4>
     242:	1b 9b       	sbis	0x03, 3	; 3
     244:	0e c0       	rjmp	.+28     	; 0x262 <__vector_3+0x120>
     246:	21 11       	cpse	r18, r1
     248:	1a c0       	rjmp	.+52     	; 0x27e <__vector_3+0x13c>
     24a:	21 e0       	ldi	r18, 0x01	; 1
     24c:	20 93 c6 03 	sts	0x03C6, r18	; 0x8003c6 <last_channel_4>
     250:	60 93 14 03 	sts	0x0314, r22	; 0x800314 <timer_4>
     254:	70 93 15 03 	sts	0x0315, r23	; 0x800315 <timer_4+0x1>
     258:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <timer_4+0x2>
     25c:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <timer_4+0x3>
     260:	0e c0       	rjmp	.+28     	; 0x27e <__vector_3+0x13c>
     262:	21 30       	cpi	r18, 0x01	; 1
     264:	61 f4       	brne	.+24     	; 0x27e <__vector_3+0x13c>
     266:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <last_channel_4>
     26a:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <timer_4>
     26e:	30 91 15 03 	lds	r19, 0x0315	; 0x800315 <timer_4+0x1>
     272:	62 1b       	sub	r22, r18
     274:	73 0b       	sbc	r23, r19
     276:	70 93 b1 03 	sts	0x03B1, r23	; 0x8003b1 <receiver_input+0x9>
     27a:	60 93 b0 03 	sts	0x03B0, r22	; 0x8003b0 <receiver_input+0x8>
     27e:	ff 91       	pop	r31
     280:	ef 91       	pop	r30
     282:	bf 91       	pop	r27
     284:	af 91       	pop	r26
     286:	9f 91       	pop	r25
     288:	8f 91       	pop	r24
     28a:	7f 91       	pop	r23
     28c:	6f 91       	pop	r22
     28e:	5f 91       	pop	r21
     290:	4f 91       	pop	r20
     292:	3f 91       	pop	r19
     294:	2f 91       	pop	r18
     296:	0f 90       	pop	r0
     298:	0f be       	out	0x3f, r0	; 63
     29a:	0f 90       	pop	r0
     29c:	1f 90       	pop	r1
     29e:	18 95       	reti

000002a0 <_Z13print_signalsv>:

void print_signals(){
	Serial.print("Start:");
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	71 e0       	ldi	r23, 0x01	; 1
     2a4:	8a ec       	ldi	r24, 0xCA	; 202
     2a6:	93 e0       	ldi	r25, 0x03	; 3
     2a8:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN5Print5printEPKc>
	Serial.print(start);
     2ac:	4a e0       	ldi	r20, 0x0A	; 10
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	60 91 c5 03 	lds	r22, 0x03C5	; 0x8003c5 <start>
     2b4:	8a ec       	ldi	r24, 0xCA	; 202
     2b6:	93 e0       	ldi	r25, 0x03	; 3
     2b8:	0e 94 26 10 	call	0x204c	; 0x204c <_ZN5Print5printEhi>

	Serial.print("  Roll:");
     2bc:	67 e0       	ldi	r22, 0x07	; 7
     2be:	71 e0       	ldi	r23, 0x01	; 1
     2c0:	8a ec       	ldi	r24, 0xCA	; 202
     2c2:	93 e0       	ldi	r25, 0x03	; 3
     2c4:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN5Print5printEPKc>
	if(receiver_input_channel_1 - 1480 < 0)Serial.print("<<<");
     2c8:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <receiver_input_channel_1>
     2cc:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <receiver_input_channel_1+0x1>
     2d0:	88 3c       	cpi	r24, 0xC8	; 200
     2d2:	95 40       	sbci	r25, 0x05	; 5
     2d4:	1c f4       	brge	.+6      	; 0x2dc <_Z13print_signalsv+0x3c>
     2d6:	6f e0       	ldi	r22, 0x0F	; 15
     2d8:	71 e0       	ldi	r23, 0x01	; 1
     2da:	0c c0       	rjmp	.+24     	; 0x2f4 <_Z13print_signalsv+0x54>
	else if(receiver_input_channel_1 - 1520 > 0)Serial.print(">>>");
     2dc:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <receiver_input_channel_1>
     2e0:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <receiver_input_channel_1+0x1>
     2e4:	81 3f       	cpi	r24, 0xF1	; 241
     2e6:	95 40       	sbci	r25, 0x05	; 5
     2e8:	1c f0       	brlt	.+6      	; 0x2f0 <_Z13print_signalsv+0x50>
     2ea:	63 e1       	ldi	r22, 0x13	; 19
     2ec:	71 e0       	ldi	r23, 0x01	; 1
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <_Z13print_signalsv+0x54>
	else Serial.print("-+-");
     2f0:	67 e1       	ldi	r22, 0x17	; 23
     2f2:	71 e0       	ldi	r23, 0x01	; 1
     2f4:	8a ec       	ldi	r24, 0xCA	; 202
     2f6:	93 e0       	ldi	r25, 0x03	; 3
     2f8:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN5Print5printEPKc>
	Serial.print(receiver_input_channel_1);
     2fc:	60 91 c0 03 	lds	r22, 0x03C0	; 0x8003c0 <receiver_input_channel_1>
     300:	70 91 c1 03 	lds	r23, 0x03C1	; 0x8003c1 <receiver_input_channel_1+0x1>
     304:	4a e0       	ldi	r20, 0x0A	; 10
     306:	50 e0       	ldi	r21, 0x00	; 0
     308:	8a ec       	ldi	r24, 0xCA	; 202
     30a:	93 e0       	ldi	r25, 0x03	; 3
     30c:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN5Print5printEii>

	Serial.print("  Pitch:");
     310:	6b e1       	ldi	r22, 0x1B	; 27
     312:	71 e0       	ldi	r23, 0x01	; 1
     314:	8a ec       	ldi	r24, 0xCA	; 202
     316:	93 e0       	ldi	r25, 0x03	; 3
     318:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN5Print5printEPKc>
	if(receiver_input_channel_2 - 1480 < 0)Serial.print("^^^");
     31c:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <receiver_input_channel_2>
     320:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <receiver_input_channel_2+0x1>
     324:	88 3c       	cpi	r24, 0xC8	; 200
     326:	95 40       	sbci	r25, 0x05	; 5
     328:	1c f4       	brge	.+6      	; 0x330 <_Z13print_signalsv+0x90>
     32a:	64 e2       	ldi	r22, 0x24	; 36
     32c:	71 e0       	ldi	r23, 0x01	; 1
     32e:	0c c0       	rjmp	.+24     	; 0x348 <_Z13print_signalsv+0xa8>
	else if(receiver_input_channel_2 - 1520 > 0)Serial.print("vvv");
     330:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <receiver_input_channel_2>
     334:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <receiver_input_channel_2+0x1>
     338:	81 3f       	cpi	r24, 0xF1	; 241
     33a:	95 40       	sbci	r25, 0x05	; 5
     33c:	1c f0       	brlt	.+6      	; 0x344 <_Z13print_signalsv+0xa4>
     33e:	68 e2       	ldi	r22, 0x28	; 40
     340:	71 e0       	ldi	r23, 0x01	; 1
     342:	02 c0       	rjmp	.+4      	; 0x348 <_Z13print_signalsv+0xa8>
	else Serial.print("-+-");
     344:	67 e1       	ldi	r22, 0x17	; 23
     346:	71 e0       	ldi	r23, 0x01	; 1
     348:	8a ec       	ldi	r24, 0xCA	; 202
     34a:	93 e0       	ldi	r25, 0x03	; 3
     34c:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN5Print5printEPKc>
	Serial.print(receiver_input_channel_2);
     350:	60 91 be 03 	lds	r22, 0x03BE	; 0x8003be <receiver_input_channel_2>
     354:	70 91 bf 03 	lds	r23, 0x03BF	; 0x8003bf <receiver_input_channel_2+0x1>
     358:	4a e0       	ldi	r20, 0x0A	; 10
     35a:	50 e0       	ldi	r21, 0x00	; 0
     35c:	8a ec       	ldi	r24, 0xCA	; 202
     35e:	93 e0       	ldi	r25, 0x03	; 3
     360:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN5Print5printEii>

	Serial.print("  Throttle:");
     364:	6c e2       	ldi	r22, 0x2C	; 44
     366:	71 e0       	ldi	r23, 0x01	; 1
     368:	8a ec       	ldi	r24, 0xCA	; 202
     36a:	93 e0       	ldi	r25, 0x03	; 3
     36c:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN5Print5printEPKc>
	if(receiver_input_channel_3 - 1480 < 0)Serial.print("vvv");
     370:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <receiver_input_channel_3>
     374:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <receiver_input_channel_3+0x1>
     378:	88 3c       	cpi	r24, 0xC8	; 200
     37a:	95 40       	sbci	r25, 0x05	; 5
     37c:	1c f4       	brge	.+6      	; 0x384 <_Z13print_signalsv+0xe4>
     37e:	68 e2       	ldi	r22, 0x28	; 40
     380:	71 e0       	ldi	r23, 0x01	; 1
     382:	0c c0       	rjmp	.+24     	; 0x39c <_Z13print_signalsv+0xfc>
	else if(receiver_input_channel_3 - 1520 > 0)Serial.print("^^^");
     384:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <receiver_input_channel_3>
     388:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <receiver_input_channel_3+0x1>
     38c:	81 3f       	cpi	r24, 0xF1	; 241
     38e:	95 40       	sbci	r25, 0x05	; 5
     390:	1c f0       	brlt	.+6      	; 0x398 <_Z13print_signalsv+0xf8>
     392:	64 e2       	ldi	r22, 0x24	; 36
     394:	71 e0       	ldi	r23, 0x01	; 1
     396:	02 c0       	rjmp	.+4      	; 0x39c <_Z13print_signalsv+0xfc>
	else Serial.print("-+-");
     398:	67 e1       	ldi	r22, 0x17	; 23
     39a:	71 e0       	ldi	r23, 0x01	; 1
     39c:	8a ec       	ldi	r24, 0xCA	; 202
     39e:	93 e0       	ldi	r25, 0x03	; 3
     3a0:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN5Print5printEPKc>
	Serial.print(receiver_input_channel_3);
     3a4:	60 91 bc 03 	lds	r22, 0x03BC	; 0x8003bc <receiver_input_channel_3>
     3a8:	70 91 bd 03 	lds	r23, 0x03BD	; 0x8003bd <receiver_input_channel_3+0x1>
     3ac:	4a e0       	ldi	r20, 0x0A	; 10
     3ae:	50 e0       	ldi	r21, 0x00	; 0
     3b0:	8a ec       	ldi	r24, 0xCA	; 202
     3b2:	93 e0       	ldi	r25, 0x03	; 3
     3b4:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN5Print5printEii>

	Serial.print("  Yaw:");
     3b8:	68 e3       	ldi	r22, 0x38	; 56
     3ba:	71 e0       	ldi	r23, 0x01	; 1
     3bc:	8a ec       	ldi	r24, 0xCA	; 202
     3be:	93 e0       	ldi	r25, 0x03	; 3
     3c0:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN5Print5printEPKc>
	if(receiver_input_channel_4 - 1480 < 0)Serial.print("<<<");
     3c4:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <receiver_input_channel_4>
     3c8:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <receiver_input_channel_4+0x1>
     3cc:	88 3c       	cpi	r24, 0xC8	; 200
     3ce:	95 40       	sbci	r25, 0x05	; 5
     3d0:	1c f4       	brge	.+6      	; 0x3d8 <_Z13print_signalsv+0x138>
     3d2:	6f e0       	ldi	r22, 0x0F	; 15
     3d4:	71 e0       	ldi	r23, 0x01	; 1
     3d6:	0c c0       	rjmp	.+24     	; 0x3f0 <_Z13print_signalsv+0x150>
	else if(receiver_input_channel_4 - 1520 > 0)Serial.print(">>>");
     3d8:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <receiver_input_channel_4>
     3dc:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <receiver_input_channel_4+0x1>
     3e0:	81 3f       	cpi	r24, 0xF1	; 241
     3e2:	95 40       	sbci	r25, 0x05	; 5
     3e4:	1c f0       	brlt	.+6      	; 0x3ec <_Z13print_signalsv+0x14c>
     3e6:	63 e1       	ldi	r22, 0x13	; 19
     3e8:	71 e0       	ldi	r23, 0x01	; 1
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <_Z13print_signalsv+0x150>
	else Serial.print("-+-");
     3ec:	67 e1       	ldi	r22, 0x17	; 23
     3ee:	71 e0       	ldi	r23, 0x01	; 1
     3f0:	8a ec       	ldi	r24, 0xCA	; 202
     3f2:	93 e0       	ldi	r25, 0x03	; 3
     3f4:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN5Print5printEPKc>
	Serial.print(receiver_input_channel_4);
     3f8:	60 91 ba 03 	lds	r22, 0x03BA	; 0x8003ba <receiver_input_channel_4>
     3fc:	70 91 bb 03 	lds	r23, 0x03BB	; 0x8003bb <receiver_input_channel_4+0x1>
     400:	4a e0       	ldi	r20, 0x0A	; 10
     402:	50 e0       	ldi	r21, 0x00	; 0
     404:	8a ec       	ldi	r24, 0xCA	; 202
     406:	93 e0       	ldi	r25, 0x03	; 3
     408:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN5Print5printEii>
	Serial.print("   ");
     40c:	6f e3       	ldi	r22, 0x3F	; 63
     40e:	71 e0       	ldi	r23, 0x01	; 1
     410:	8a ec       	ldi	r24, 0xCA	; 202
     412:	93 e0       	ldi	r25, 0x03	; 3
     414:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN5Print5printEPKc>
	Serial.print(esc_1);
     418:	60 91 b8 03 	lds	r22, 0x03B8	; 0x8003b8 <esc_1>
     41c:	70 91 b9 03 	lds	r23, 0x03B9	; 0x8003b9 <esc_1+0x1>
     420:	4a e0       	ldi	r20, 0x0A	; 10
     422:	50 e0       	ldi	r21, 0x00	; 0
     424:	8a ec       	ldi	r24, 0xCA	; 202
     426:	93 e0       	ldi	r25, 0x03	; 3
     428:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN5Print5printEii>
	Serial.print("   ");
     42c:	6f e3       	ldi	r22, 0x3F	; 63
     42e:	71 e0       	ldi	r23, 0x01	; 1
     430:	8a ec       	ldi	r24, 0xCA	; 202
     432:	93 e0       	ldi	r25, 0x03	; 3
     434:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN5Print5printEPKc>
	Serial.println(esc_2);
     438:	60 91 b6 03 	lds	r22, 0x03B6	; 0x8003b6 <esc_2>
     43c:	70 91 b7 03 	lds	r23, 0x03B7	; 0x8003b7 <esc_2+0x1>
     440:	4a e0       	ldi	r20, 0x0A	; 10
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	8a ec       	ldi	r24, 0xCA	; 202
     446:	93 e0       	ldi	r25, 0x03	; 3
     448:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <_ZN5Print7printlnEii>

0000044c <_Z16esc_pulse_outputv>:
	
}

void esc_pulse_output(){
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
	zero_timer = micros();
     450:	0e 94 b6 12 	call	0x256c	; 0x256c <micros>
     454:	60 93 24 03 	sts	0x0324, r22	; 0x800324 <zero_timer>
     458:	70 93 25 03 	sts	0x0325, r23	; 0x800325 <zero_timer+0x1>
     45c:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <zero_timer+0x2>
     460:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <zero_timer+0x3>
	PORTD |= B11110000;                                            //Set port 4, 5, 6 and 7 high at once
     464:	8b b1       	in	r24, 0x0b	; 11
     466:	80 6f       	ori	r24, 0xF0	; 240
     468:	8b b9       	out	0x0b, r24	; 11
	timer_channel_1 = esc_1 + zero_timer;                          //Calculate the time when digital port 4 is set low.
     46a:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <zero_timer>
     46e:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <zero_timer+0x1>
     472:	a0 91 26 03 	lds	r26, 0x0326	; 0x800326 <zero_timer+0x2>
     476:	b0 91 27 03 	lds	r27, 0x0327	; 0x800327 <zero_timer+0x3>
     47a:	40 91 b8 03 	lds	r20, 0x03B8	; 0x8003b8 <esc_1>
     47e:	50 91 b9 03 	lds	r21, 0x03B9	; 0x8003b9 <esc_1+0x1>
     482:	05 2e       	mov	r0, r21
     484:	00 0c       	add	r0, r0
     486:	66 0b       	sbc	r22, r22
     488:	77 0b       	sbc	r23, r23
     48a:	48 0f       	add	r20, r24
     48c:	59 1f       	adc	r21, r25
     48e:	6a 1f       	adc	r22, r26
     490:	7b 1f       	adc	r23, r27
     492:	40 93 38 03 	sts	0x0338, r20	; 0x800338 <timer_channel_1>
     496:	50 93 39 03 	sts	0x0339, r21	; 0x800339 <timer_channel_1+0x1>
     49a:	60 93 3a 03 	sts	0x033A, r22	; 0x80033a <timer_channel_1+0x2>
     49e:	70 93 3b 03 	sts	0x033B, r23	; 0x80033b <timer_channel_1+0x3>
	timer_channel_2 = esc_2 + zero_timer;                          //Calculate the time when digital port 5 is set low.
     4a2:	40 91 b6 03 	lds	r20, 0x03B6	; 0x8003b6 <esc_2>
     4a6:	50 91 b7 03 	lds	r21, 0x03B7	; 0x8003b7 <esc_2+0x1>
     4aa:	05 2e       	mov	r0, r21
     4ac:	00 0c       	add	r0, r0
     4ae:	66 0b       	sbc	r22, r22
     4b0:	77 0b       	sbc	r23, r23
     4b2:	48 0f       	add	r20, r24
     4b4:	59 1f       	adc	r21, r25
     4b6:	6a 1f       	adc	r22, r26
     4b8:	7b 1f       	adc	r23, r27
     4ba:	40 93 34 03 	sts	0x0334, r20	; 0x800334 <timer_channel_2>
     4be:	50 93 35 03 	sts	0x0335, r21	; 0x800335 <timer_channel_2+0x1>
     4c2:	60 93 36 03 	sts	0x0336, r22	; 0x800336 <timer_channel_2+0x2>
     4c6:	70 93 37 03 	sts	0x0337, r23	; 0x800337 <timer_channel_2+0x3>
	timer_channel_3 = esc_3 + zero_timer;                          //Calculate the time when digital port 6 is set low.
     4ca:	40 91 b4 03 	lds	r20, 0x03B4	; 0x8003b4 <esc_3>
     4ce:	50 91 b5 03 	lds	r21, 0x03B5	; 0x8003b5 <esc_3+0x1>
     4d2:	05 2e       	mov	r0, r21
     4d4:	00 0c       	add	r0, r0
     4d6:	66 0b       	sbc	r22, r22
     4d8:	77 0b       	sbc	r23, r23
     4da:	48 0f       	add	r20, r24
     4dc:	59 1f       	adc	r21, r25
     4de:	6a 1f       	adc	r22, r26
     4e0:	7b 1f       	adc	r23, r27
     4e2:	40 93 30 03 	sts	0x0330, r20	; 0x800330 <timer_channel_3>
     4e6:	50 93 31 03 	sts	0x0331, r21	; 0x800331 <timer_channel_3+0x1>
     4ea:	60 93 32 03 	sts	0x0332, r22	; 0x800332 <timer_channel_3+0x2>
     4ee:	70 93 33 03 	sts	0x0333, r23	; 0x800333 <timer_channel_3+0x3>
	timer_channel_4 = esc_4 + zero_timer;                          //Calculate the time when digital port 7 is set low.
     4f2:	40 91 b2 03 	lds	r20, 0x03B2	; 0x8003b2 <esc_4>
     4f6:	50 91 b3 03 	lds	r21, 0x03B3	; 0x8003b3 <esc_4+0x1>
     4fa:	05 2e       	mov	r0, r21
     4fc:	00 0c       	add	r0, r0
     4fe:	66 0b       	sbc	r22, r22
     500:	77 0b       	sbc	r23, r23
     502:	84 0f       	add	r24, r20
     504:	95 1f       	adc	r25, r21
     506:	a6 1f       	adc	r26, r22
     508:	b7 1f       	adc	r27, r23
     50a:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <timer_channel_4>
     50e:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <timer_channel_4+0x1>
     512:	a0 93 2e 03 	sts	0x032E, r26	; 0x80032e <timer_channel_4+0x2>
     516:	b0 93 2f 03 	sts	0x032F, r27	; 0x80032f <timer_channel_4+0x3>

	while(PORTD >= 16){                                            //Execute the loop until digital port 4 to 7 is low.
     51a:	8b b1       	in	r24, 0x0b	; 11
     51c:	80 31       	cpi	r24, 0x10	; 16
     51e:	08 f4       	brcc	.+2      	; 0x522 <_Z16esc_pulse_outputv+0xd6>
     520:	5c c0       	rjmp	.+184    	; 0x5da <_Z16esc_pulse_outputv+0x18e>
		esc_loop_timer = micros();                                   //Check the current time.
     522:	0e 94 b6 12 	call	0x256c	; 0x256c <micros>
     526:	60 93 28 03 	sts	0x0328, r22	; 0x800328 <esc_loop_timer>
     52a:	70 93 29 03 	sts	0x0329, r23	; 0x800329 <esc_loop_timer+0x1>
     52e:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <esc_loop_timer+0x2>
     532:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <esc_loop_timer+0x3>
		if(timer_channel_1 <= esc_loop_timer)PORTD &= B11101111;     //When the delay time is expired, digital port 4 is set low.
     536:	00 91 38 03 	lds	r16, 0x0338	; 0x800338 <timer_channel_1>
     53a:	10 91 39 03 	lds	r17, 0x0339	; 0x800339 <timer_channel_1+0x1>
     53e:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <timer_channel_1+0x2>
     542:	30 91 3b 03 	lds	r19, 0x033B	; 0x80033b <timer_channel_1+0x3>
     546:	60 17       	cp	r22, r16
     548:	71 07       	cpc	r23, r17
     54a:	82 07       	cpc	r24, r18
     54c:	93 07       	cpc	r25, r19
     54e:	08 f0       	brcs	.+2      	; 0x552 <_Z16esc_pulse_outputv+0x106>
     550:	5c 98       	cbi	0x0b, 4	; 11
		if(timer_channel_2 <= esc_loop_timer)PORTD &= B11011111;     //When the delay time is expired, digital port 5 is set low.
     552:	40 91 34 03 	lds	r20, 0x0334	; 0x800334 <timer_channel_2>
     556:	50 91 35 03 	lds	r21, 0x0335	; 0x800335 <timer_channel_2+0x1>
     55a:	60 91 36 03 	lds	r22, 0x0336	; 0x800336 <timer_channel_2+0x2>
     55e:	70 91 37 03 	lds	r23, 0x0337	; 0x800337 <timer_channel_2+0x3>
     562:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <esc_loop_timer>
     566:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <esc_loop_timer+0x1>
     56a:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <esc_loop_timer+0x2>
     56e:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <esc_loop_timer+0x3>
     572:	84 17       	cp	r24, r20
     574:	95 07       	cpc	r25, r21
     576:	a6 07       	cpc	r26, r22
     578:	b7 07       	cpc	r27, r23
     57a:	08 f0       	brcs	.+2      	; 0x57e <_Z16esc_pulse_outputv+0x132>
     57c:	5d 98       	cbi	0x0b, 5	; 11
		if(timer_channel_3 <= esc_loop_timer)PORTD &= B10111111;     //When the delay time is expired, digital port 6 is set low.
     57e:	40 91 30 03 	lds	r20, 0x0330	; 0x800330 <timer_channel_3>
     582:	50 91 31 03 	lds	r21, 0x0331	; 0x800331 <timer_channel_3+0x1>
     586:	60 91 32 03 	lds	r22, 0x0332	; 0x800332 <timer_channel_3+0x2>
     58a:	70 91 33 03 	lds	r23, 0x0333	; 0x800333 <timer_channel_3+0x3>
     58e:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <esc_loop_timer>
     592:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <esc_loop_timer+0x1>
     596:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <esc_loop_timer+0x2>
     59a:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <esc_loop_timer+0x3>
     59e:	84 17       	cp	r24, r20
     5a0:	95 07       	cpc	r25, r21
     5a2:	a6 07       	cpc	r26, r22
     5a4:	b7 07       	cpc	r27, r23
     5a6:	08 f0       	brcs	.+2      	; 0x5aa <_Z16esc_pulse_outputv+0x15e>
     5a8:	5e 98       	cbi	0x0b, 6	; 11
		if(timer_channel_4 <= esc_loop_timer)PORTD &= B01111111;     //When the delay time is expired, digital port 7 is set low.
     5aa:	40 91 2c 03 	lds	r20, 0x032C	; 0x80032c <timer_channel_4>
     5ae:	50 91 2d 03 	lds	r21, 0x032D	; 0x80032d <timer_channel_4+0x1>
     5b2:	60 91 2e 03 	lds	r22, 0x032E	; 0x80032e <timer_channel_4+0x2>
     5b6:	70 91 2f 03 	lds	r23, 0x032F	; 0x80032f <timer_channel_4+0x3>
     5ba:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <esc_loop_timer>
     5be:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <esc_loop_timer+0x1>
     5c2:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <esc_loop_timer+0x2>
     5c6:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <esc_loop_timer+0x3>
     5ca:	84 17       	cp	r24, r20
     5cc:	95 07       	cpc	r25, r21
     5ce:	a6 07       	cpc	r26, r22
     5d0:	b7 07       	cpc	r27, r23
     5d2:	08 f4       	brcc	.+2      	; 0x5d6 <_Z16esc_pulse_outputv+0x18a>
     5d4:	a2 cf       	rjmp	.-188    	; 0x51a <_Z16esc_pulse_outputv+0xce>
     5d6:	5f 98       	cbi	0x0b, 7	; 11
     5d8:	a0 cf       	rjmp	.-192    	; 0x51a <_Z16esc_pulse_outputv+0xce>
	}
}
     5da:	1f 91       	pop	r17
     5dc:	0f 91       	pop	r16
     5de:	08 95       	ret

000005e0 <_Z18set_gyro_registersv>:

void set_gyro_registers(){
     5e0:	cf 93       	push	r28
	//Setup the MPU-6050
	//if(eeprom_data[31] == 1)
	{
		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search.
     5e2:	60 91 a4 03 	lds	r22, 0x03A4	; 0x8003a4 <gyro_address>
     5e6:	70 91 a5 03 	lds	r23, 0x03A5	; 0x8003a5 <gyro_address+0x1>
     5ea:	87 e6       	ldi	r24, 0x67	; 103
     5ec:	94 e0       	ldi	r25, 0x04	; 4
     5ee:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x6B);                                            //We want to write to the PWR_MGMT_1 register (6B hex)
     5f2:	6b e6       	ldi	r22, 0x6B	; 107
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	87 e6       	ldi	r24, 0x67	; 103
     5f8:	94 e0       	ldi	r25, 0x04	; 4
     5fa:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN7TwoWire5writeEi>
		Wire.write(0x00);                                            //Set the register bits as 00000000 to activate the gyro
     5fe:	60 e0       	ldi	r22, 0x00	; 0
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	87 e6       	ldi	r24, 0x67	; 103
     604:	94 e0       	ldi	r25, 0x04	; 4
     606:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro.
     60a:	87 e6       	ldi	r24, 0x67	; 103
     60c:	94 e0       	ldi	r25, 0x04	; 4
     60e:	0e 94 65 12 	call	0x24ca	; 0x24ca <_ZN7TwoWire15endTransmissionEv>

		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search.
     612:	60 91 a4 03 	lds	r22, 0x03A4	; 0x8003a4 <gyro_address>
     616:	70 91 a5 03 	lds	r23, 0x03A5	; 0x8003a5 <gyro_address+0x1>
     61a:	87 e6       	ldi	r24, 0x67	; 103
     61c:	94 e0       	ldi	r25, 0x04	; 4
     61e:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x1B);                                            //We want to write to the GYRO_CONFIG register (1B hex)
     622:	6b e1       	ldi	r22, 0x1B	; 27
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	87 e6       	ldi	r24, 0x67	; 103
     628:	94 e0       	ldi	r25, 0x04	; 4
     62a:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN7TwoWire5writeEi>
		Wire.write(0x08);                                            //Set the register bits as 00001000 (500dps full scale)
     62e:	68 e0       	ldi	r22, 0x08	; 8
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	87 e6       	ldi	r24, 0x67	; 103
     634:	94 e0       	ldi	r25, 0x04	; 4
     636:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro
     63a:	87 e6       	ldi	r24, 0x67	; 103
     63c:	94 e0       	ldi	r25, 0x04	; 4
     63e:	0e 94 65 12 	call	0x24ca	; 0x24ca <_ZN7TwoWire15endTransmissionEv>

		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search.
     642:	60 91 a4 03 	lds	r22, 0x03A4	; 0x8003a4 <gyro_address>
     646:	70 91 a5 03 	lds	r23, 0x03A5	; 0x8003a5 <gyro_address+0x1>
     64a:	87 e6       	ldi	r24, 0x67	; 103
     64c:	94 e0       	ldi	r25, 0x04	; 4
     64e:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x1C);                                            //We want to write to the ACCEL_CONFIG register (1A hex)
     652:	6c e1       	ldi	r22, 0x1C	; 28
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	87 e6       	ldi	r24, 0x67	; 103
     658:	94 e0       	ldi	r25, 0x04	; 4
     65a:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN7TwoWire5writeEi>
		Wire.write(0x10);                                            //Set the register bits as 00010000 (+/- 8g full scale range)
     65e:	60 e1       	ldi	r22, 0x10	; 16
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	87 e6       	ldi	r24, 0x67	; 103
     664:	94 e0       	ldi	r25, 0x04	; 4
     666:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro
     66a:	87 e6       	ldi	r24, 0x67	; 103
     66c:	94 e0       	ldi	r25, 0x04	; 4
     66e:	0e 94 65 12 	call	0x24ca	; 0x24ca <_ZN7TwoWire15endTransmissionEv>

		//Let's perform a random register check to see if the values are written correct
		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search
     672:	60 91 a4 03 	lds	r22, 0x03A4	; 0x8003a4 <gyro_address>
     676:	70 91 a5 03 	lds	r23, 0x03A5	; 0x8003a5 <gyro_address+0x1>
     67a:	87 e6       	ldi	r24, 0x67	; 103
     67c:	94 e0       	ldi	r25, 0x04	; 4
     67e:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x1B);                                            //Start reading @ register 0x1B
     682:	6b e1       	ldi	r22, 0x1B	; 27
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	87 e6       	ldi	r24, 0x67	; 103
     688:	94 e0       	ldi	r25, 0x04	; 4
     68a:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission
     68e:	87 e6       	ldi	r24, 0x67	; 103
     690:	94 e0       	ldi	r25, 0x04	; 4
     692:	0e 94 65 12 	call	0x24ca	; 0x24ca <_ZN7TwoWire15endTransmissionEv>
		Wire.requestFrom(gyro_address, 1);                           //Request 1 bytes from the gyro
     696:	60 91 a4 03 	lds	r22, 0x03A4	; 0x8003a4 <gyro_address>
     69a:	70 91 a5 03 	lds	r23, 0x03A5	; 0x8003a5 <gyro_address+0x1>
     69e:	41 e0       	ldi	r20, 0x01	; 1
     6a0:	50 e0       	ldi	r21, 0x00	; 0
     6a2:	87 e6       	ldi	r24, 0x67	; 103
     6a4:	94 e0       	ldi	r25, 0x04	; 4
     6a6:	0e 94 62 12 	call	0x24c4	; 0x24c4 <_ZN7TwoWire11requestFromEii>
		while(Wire.available() < 1);                                 //Wait until the 6 bytes are received
     6aa:	87 e6       	ldi	r24, 0x67	; 103
     6ac:	94 e0       	ldi	r25, 0x04	; 4
     6ae:	0e 94 3a 11 	call	0x2274	; 0x2274 <_ZN7TwoWire9availableEv>
     6b2:	18 16       	cp	r1, r24
     6b4:	19 06       	cpc	r1, r25
     6b6:	cc f7       	brge	.-14     	; 0x6aa <_Z18set_gyro_registersv+0xca>
		byte rb = Wire.read();
     6b8:	87 e6       	ldi	r24, 0x67	; 103
     6ba:	94 e0       	ldi	r25, 0x04	; 4
     6bc:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN7TwoWire4readEv>
     6c0:	c8 2f       	mov	r28, r24
		Serial.println(rb);
     6c2:	4a e0       	ldi	r20, 0x0A	; 10
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	68 2f       	mov	r22, r24
     6c8:	8a ec       	ldi	r24, 0xCA	; 202
     6ca:	93 e0       	ldi	r25, 0x03	; 3
     6cc:	0e 94 2d 10 	call	0x205a	; 0x205a <_ZN5Print7printlnEhi>
		if(rb != 0x08){                                     //Check if the value is 0x08
     6d0:	c8 30       	cpi	r28, 0x08	; 8
     6d2:	a9 f0       	breq	.+42     	; 0x6fe <_Z18set_gyro_registersv+0x11e>
			while(1)
			{
				digitalWrite(LEDPIN_STATUS,HIGH);                                     //Turn on the warning led
     6d4:	61 e0       	ldi	r22, 0x01	; 1
     6d6:	8d e0       	ldi	r24, 0x0D	; 13
     6d8:	0e 94 c2 13 	call	0x2784	; 0x2784 <digitalWrite>
				delay(100);                                         //Stay in this loop for ever
     6dc:	64 e6       	ldi	r22, 0x64	; 100
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	0e 94 db 12 	call	0x25b6	; 0x25b6 <delay>
				digitalWrite(LEDPIN_STATUS,LOW);                                     //Turn on the warning led
     6e8:	60 e0       	ldi	r22, 0x00	; 0
     6ea:	8d e0       	ldi	r24, 0x0D	; 13
     6ec:	0e 94 c2 13 	call	0x2784	; 0x2784 <digitalWrite>
				delay(1000);                                         //Stay in this loop for ever
     6f0:	68 ee       	ldi	r22, 0xE8	; 232
     6f2:	73 e0       	ldi	r23, 0x03	; 3
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0e 94 db 12 	call	0x25b6	; 0x25b6 <delay>
		Wire.endTransmission();                                      //End the transmission
		Wire.requestFrom(gyro_address, 1);                           //Request 1 bytes from the gyro
		while(Wire.available() < 1);                                 //Wait until the 6 bytes are received
		byte rb = Wire.read();
		Serial.println(rb);
		if(rb != 0x08){                                     //Check if the value is 0x08
     6fc:	eb cf       	rjmp	.-42     	; 0x6d4 <_Z18set_gyro_registersv+0xf4>
				digitalWrite(LEDPIN_STATUS,LOW);                                     //Turn on the warning led
				delay(1000);                                         //Stay in this loop for ever
			}
		}

		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search
     6fe:	60 91 a4 03 	lds	r22, 0x03A4	; 0x8003a4 <gyro_address>
     702:	70 91 a5 03 	lds	r23, 0x03A5	; 0x8003a5 <gyro_address+0x1>
     706:	87 e6       	ldi	r24, 0x67	; 103
     708:	94 e0       	ldi	r25, 0x04	; 4
     70a:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x1A);                                            //We want to write to the CONFIG register (1A hex)
     70e:	6a e1       	ldi	r22, 0x1A	; 26
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	87 e6       	ldi	r24, 0x67	; 103
     714:	94 e0       	ldi	r25, 0x04	; 4
     716:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN7TwoWire5writeEi>
		Wire.write(0x03);                                            //Set the register bits as 00000011 (Set Digital Low Pass Filter to ~43Hz)
     71a:	63 e0       	ldi	r22, 0x03	; 3
     71c:	70 e0       	ldi	r23, 0x00	; 0
     71e:	87 e6       	ldi	r24, 0x67	; 103
     720:	94 e0       	ldi	r25, 0x04	; 4
     722:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission with the gyro
     726:	87 e6       	ldi	r24, 0x67	; 103
     728:	94 e0       	ldi	r25, 0x04	; 4



	}
}
     72a:	cf 91       	pop	r28
		}

		Wire.beginTransmission(gyro_address);                        //Start communication with the address found during search
		Wire.write(0x1A);                                            //We want to write to the CONFIG register (1A hex)
		Wire.write(0x03);                                            //Set the register bits as 00000011 (Set Digital Low Pass Filter to ~43Hz)
		Wire.endTransmission();                                      //End the transmission with the gyro
     72c:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <_ZN7TwoWire15endTransmissionEv>

00000730 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     730:	26 e0       	ldi	r18, 0x06	; 6
     732:	40 e0       	ldi	r20, 0x00	; 0
     734:	51 ee       	ldi	r21, 0xE1	; 225
     736:	60 e0       	ldi	r22, 0x00	; 0
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	8a ec       	ldi	r24, 0xCA	; 202
     73c:	93 e0       	ldi	r25, 0x03	; 3
     73e:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <_ZN14HardwareSerial5beginEmh>
int receiver_input_channel_1_middle;
//Setup routine

void setup(){
	Serial.begin(57600);                                                                  //Start the serial port.
	Wire.begin();                                                                         //Start the wire library as master
     742:	87 e6       	ldi	r24, 0x67	; 103
     744:	94 e0       	ldi	r25, 0x04	; 4
     746:	0e 94 d5 11 	call	0x23aa	; 0x23aa <_ZN7TwoWire5beginEv>
	
	TWBR = 12;                                                                            //Set the I2C clock speed to 400kHz.
     74a:	8c e0       	ldi	r24, 0x0C	; 12
     74c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	//Arduino Uno pins default to inputs, so they don't need to be explicitly declared as inputs.
	DDRD |= B11110000;                                                                    //Configure digital poort 4, 5, 6 and 7 as output.
     750:	8a b1       	in	r24, 0x0a	; 10
     752:	80 6f       	ori	r24, 0xF0	; 240
     754:	8a b9       	out	0x0a, r24	; 10
	pinMode(LEDPIN_STATUS, OUTPUT); 
     756:	61 e0       	ldi	r22, 0x01	; 1
     758:	8d e0       	ldi	r24, 0x0D	; 13
     75a:	0e 94 86 13 	call	0x270c	; 0x270c <pinMode>
	
	PCICR |= (1 << PCIE0) | (1 << PCIE2);                                                 // set PCIE0 to enable PCMSK0 scan.
     75e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     762:	85 60       	ori	r24, 0x05	; 5
     764:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK0 |= (1 << PCINT0);                                                              // set PCINT0 (digital input 8) to trigger an interrupt on state change.
     768:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     76c:	81 60       	ori	r24, 0x01	; 1
     76e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK0 |= (1 << PCINT1);                                                              // set PCINT1 (digital input 9)to trigger an interrupt on state change.
     772:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     776:	82 60       	ori	r24, 0x02	; 2
     778:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK0 |= (1 << PCINT2);                                                              // set PCINT2 (digital input 10)to trigger an interrupt on state change.
     77c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     780:	84 60       	ori	r24, 0x04	; 4
     782:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK0 |= (1 << PCINT3);                                                              // set PCINT3 (digital input 11)to trigger an interrupt on state change.
     786:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     78a:	88 60       	ori	r24, 0x08	; 8
     78c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	
	PCMSK2 |= (1 << PCINT18);                                                              
     790:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
     794:	84 60       	ori	r24, 0x04	; 4
     796:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
	PCMSK2 |= (1 << PCINT19);                                                              
     79a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
     79e:	88 60       	ori	r24, 0x08	; 8
     7a0:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>


	//for(data = 0; data <= 35; data++)eeprom_data[data] = EEPROM.read(data);               //Read EEPROM for faster data access

	gyro_address = 0x68; //eeprom_data[32];                                                       //Store the gyro address in the variable.
     7a4:	88 e6       	ldi	r24, 0x68	; 104
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <gyro_address+0x1>
     7ac:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <gyro_address>
	receiver_input_channel_1_middle =0;
     7b0:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <__data_end+0x1>
     7b4:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <__data_end>
	set_gyro_registers();                                                                 //Set the specific gyro registers.
     7b8:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_Z18set_gyro_registersv>
	////Check the EEPROM signature to make sure that the setup program is executed.
	//while(eeprom_data[33] != 'J' || eeprom_data[34] != 'M' || eeprom_data[35] != 'B'){
		//delay(500);                                                                         //Wait for 500ms.
		//digitalWrite(LEDPIN_STATUS, !digitalRead(LEDPIN_STATUS));                                                 //Change the led status to indicate error.
	//}
	digitalWrite(LEDPIN_STATUS,LOW);                                     //Turn on the warning led
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	8d e0       	ldi	r24, 0x0D	; 13
     7c0:	0e 94 c2 13 	call	0x2784	; 0x2784 <digitalWrite>
	//wait_for_receiver();                                                                  //Wait until the receiver is active.
	zero_timer = micros();                                                                //Set the zero_timer for the first loop.
     7c4:	0e 94 b6 12 	call	0x256c	; 0x256c <micros>
     7c8:	60 93 24 03 	sts	0x0324, r22	; 0x800324 <zero_timer>
     7cc:	70 93 25 03 	sts	0x0325, r23	; 0x800325 <zero_timer+0x1>
     7d0:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <zero_timer+0x2>
     7d4:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <zero_timer+0x3>

	while(Serial.available())data = Serial.read();                                        //Empty the serial buffer.
     7d8:	8a ec       	ldi	r24, 0xCA	; 202
     7da:	93 e0       	ldi	r25, 0x03	; 3
     7dc:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <_ZN14HardwareSerial9availableEv>
     7e0:	89 2b       	or	r24, r25
     7e2:	39 f0       	breq	.+14     	; 0x7f2 <setup+0xc2>
     7e4:	8a ec       	ldi	r24, 0xCA	; 202
     7e6:	93 e0       	ldi	r25, 0x03	; 3
     7e8:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <_ZN14HardwareSerial4readEv>
     7ec:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <data>
     7f0:	f3 cf       	rjmp	.-26     	; 0x7d8 <setup+0xa8>
	data = 0;                                                                             //Set the data variable back to zero.
     7f2:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <data>
     7f6:	08 95       	ret

000007f8 <_Z13gyro_signalenv>:


	}
}

void gyro_signalen(){
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
	//Read the MPU-6050
	//if(eeprom_data[31] == 1)
	{
		Wire.beginTransmission(gyro_address);                        //Start communication with the gyro.
     7fc:	60 91 a4 03 	lds	r22, 0x03A4	; 0x8003a4 <gyro_address>
     800:	70 91 a5 03 	lds	r23, 0x03A5	; 0x8003a5 <gyro_address+0x1>
     804:	87 e6       	ldi	r24, 0x67	; 103
     806:	94 e0       	ldi	r25, 0x04	; 4
     808:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x3B);                                            //Start reading @ register 43h and auto increment with every read.
     80c:	6b e3       	ldi	r22, 0x3B	; 59
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	87 e6       	ldi	r24, 0x67	; 103
     812:	94 e0       	ldi	r25, 0x04	; 4
     814:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                      //End the transmission.
     818:	87 e6       	ldi	r24, 0x67	; 103
     81a:	94 e0       	ldi	r25, 0x04	; 4
     81c:	0e 94 65 12 	call	0x24ca	; 0x24ca <_ZN7TwoWire15endTransmissionEv>
		Wire.requestFrom(gyro_address,14);                           //Request 14 bytes from the gyro.
     820:	60 91 a4 03 	lds	r22, 0x03A4	; 0x8003a4 <gyro_address>
     824:	70 91 a5 03 	lds	r23, 0x03A5	; 0x8003a5 <gyro_address+0x1>
     828:	4e e0       	ldi	r20, 0x0E	; 14
     82a:	50 e0       	ldi	r21, 0x00	; 0
     82c:	87 e6       	ldi	r24, 0x67	; 103
     82e:	94 e0       	ldi	r25, 0x04	; 4
     830:	0e 94 62 12 	call	0x24c4	; 0x24c4 <_ZN7TwoWire11requestFromEii>
		while(Wire.available() < 14);                                //Wait until the 14 bytes are received.
     834:	87 e6       	ldi	r24, 0x67	; 103
     836:	94 e0       	ldi	r25, 0x04	; 4
     838:	0e 94 3a 11 	call	0x2274	; 0x2274 <_ZN7TwoWire9availableEv>
     83c:	0e 97       	sbiw	r24, 0x0e	; 14
     83e:	d4 f3       	brlt	.-12     	; 0x834 <_Z13gyro_signalenv+0x3c>
		acc_axis[1] = Wire.read()<<8|Wire.read();                    //Add the low and high byte to the acc_x variable.
     840:	87 e6       	ldi	r24, 0x67	; 103
     842:	94 e0       	ldi	r25, 0x04	; 4
     844:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN7TwoWire4readEv>
     848:	c8 2f       	mov	r28, r24
     84a:	87 e6       	ldi	r24, 0x67	; 103
     84c:	94 e0       	ldi	r25, 0x04	; 4
     84e:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN7TwoWire4readEv>
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	3c 2f       	mov	r19, r28
     858:	82 2b       	or	r24, r18
     85a:	93 2b       	or	r25, r19
     85c:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <acc_axis+0x3>
     860:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <acc_axis+0x2>
		acc_axis[2] = Wire.read()<<8|Wire.read();                    //Add the low and high byte to the acc_y variable.
     864:	87 e6       	ldi	r24, 0x67	; 103
     866:	94 e0       	ldi	r25, 0x04	; 4
     868:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN7TwoWire4readEv>
     86c:	c8 2f       	mov	r28, r24
     86e:	87 e6       	ldi	r24, 0x67	; 103
     870:	94 e0       	ldi	r25, 0x04	; 4
     872:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN7TwoWire4readEv>
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	3c 2f       	mov	r19, r28
     87c:	82 2b       	or	r24, r18
     87e:	93 2b       	or	r25, r19
     880:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <acc_axis+0x5>
     884:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <acc_axis+0x4>
		acc_axis[3] = Wire.read()<<8|Wire.read();                    //Add the low and high byte to the acc_z variable.
     888:	87 e6       	ldi	r24, 0x67	; 103
     88a:	94 e0       	ldi	r25, 0x04	; 4
     88c:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN7TwoWire4readEv>
     890:	c8 2f       	mov	r28, r24
     892:	87 e6       	ldi	r24, 0x67	; 103
     894:	94 e0       	ldi	r25, 0x04	; 4
     896:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN7TwoWire4readEv>
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	3c 2f       	mov	r19, r28
     8a0:	82 2b       	or	r24, r18
     8a2:	93 2b       	or	r25, r19
     8a4:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <acc_axis+0x7>
     8a8:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <acc_axis+0x6>
		temperature = Wire.read()<<8|Wire.read();                    //Add the low and high byte to the temperature variable.
     8ac:	87 e6       	ldi	r24, 0x67	; 103
     8ae:	94 e0       	ldi	r25, 0x04	; 4
     8b0:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN7TwoWire4readEv>
     8b4:	c8 2f       	mov	r28, r24
     8b6:	87 e6       	ldi	r24, 0x67	; 103
     8b8:	94 e0       	ldi	r25, 0x04	; 4
     8ba:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN7TwoWire4readEv>
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	3c 2f       	mov	r19, r28
     8c4:	82 2b       	or	r24, r18
     8c6:	93 2b       	or	r25, r19
     8c8:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <temperature+0x1>
     8cc:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <temperature>
		gyro_axis[1] = Wire.read()<<8|Wire.read();                   //Read high and low part of the angular data.
     8d0:	87 e6       	ldi	r24, 0x67	; 103
     8d2:	94 e0       	ldi	r25, 0x04	; 4
     8d4:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN7TwoWire4readEv>
     8d8:	c8 2f       	mov	r28, r24
     8da:	87 e6       	ldi	r24, 0x67	; 103
     8dc:	94 e0       	ldi	r25, 0x04	; 4
     8de:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN7TwoWire4readEv>
     8e2:	20 e0       	ldi	r18, 0x00	; 0
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	3c 2f       	mov	r19, r28
     8e8:	82 2b       	or	r24, r18
     8ea:	93 2b       	or	r25, r19
     8ec:	90 93 03 03 	sts	0x0303, r25	; 0x800303 <gyro_axis+0x3>
     8f0:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <gyro_axis+0x2>
		gyro_axis[2] = Wire.read()<<8|Wire.read();                   //Read high and low part of the angular data.
     8f4:	87 e6       	ldi	r24, 0x67	; 103
     8f6:	94 e0       	ldi	r25, 0x04	; 4
     8f8:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN7TwoWire4readEv>
     8fc:	c8 2f       	mov	r28, r24
     8fe:	87 e6       	ldi	r24, 0x67	; 103
     900:	94 e0       	ldi	r25, 0x04	; 4
     902:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN7TwoWire4readEv>
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	3c 2f       	mov	r19, r28
     90c:	82 2b       	or	r24, r18
     90e:	93 2b       	or	r25, r19
     910:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <gyro_axis+0x5>
     914:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <gyro_axis+0x4>
		gyro_axis[3] = Wire.read()<<8|Wire.read();                   //Read high and low part of the angular data.
     918:	87 e6       	ldi	r24, 0x67	; 103
     91a:	94 e0       	ldi	r25, 0x04	; 4
     91c:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN7TwoWire4readEv>
     920:	c8 2f       	mov	r28, r24
     922:	87 e6       	ldi	r24, 0x67	; 103
     924:	94 e0       	ldi	r25, 0x04	; 4
     926:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN7TwoWire4readEv>
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	7c 2f       	mov	r23, r28
     930:	eb 01       	movw	r28, r22
     932:	c8 2b       	or	r28, r24
     934:	d9 2b       	or	r29, r25
     936:	d0 93 07 03 	sts	0x0307, r29	; 0x800307 <gyro_axis+0x7>
     93a:	c0 93 06 03 	sts	0x0306, r28	; 0x800306 <gyro_axis+0x6>
	}

	if(cal_int == 2000){
     93e:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <cal_int>
     942:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <cal_int+0x1>
     946:	80 3d       	cpi	r24, 0xD0	; 208
     948:	97 40       	sbci	r25, 0x07	; 7
     94a:	09 f0       	breq	.+2      	; 0x94e <__stack+0x4f>
     94c:	4a c0       	rjmp	.+148    	; 0x9e2 <__stack+0xe3>
		gyro_axis[1] -= gyro_axis_cal[1];                            //Only compensate after the calibration.
     94e:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <gyro_axis+0x2>
     952:	70 91 03 03 	lds	r23, 0x0303	; 0x800303 <gyro_axis+0x3>
     956:	07 2e       	mov	r0, r23
     958:	00 0c       	add	r0, r0
     95a:	88 0b       	sbc	r24, r24
     95c:	99 0b       	sbc	r25, r25
     95e:	0e 94 ce 0b 	call	0x179c	; 0x179c <__floatsisf>
     962:	20 91 de 02 	lds	r18, 0x02DE	; 0x8002de <gyro_axis_cal+0x4>
     966:	30 91 df 02 	lds	r19, 0x02DF	; 0x8002df <gyro_axis_cal+0x5>
     96a:	40 91 e0 02 	lds	r20, 0x02E0	; 0x8002e0 <gyro_axis_cal+0x6>
     96e:	50 91 e1 02 	lds	r21, 0x02E1	; 0x8002e1 <gyro_axis_cal+0x7>
     972:	0e 94 b7 0a 	call	0x156e	; 0x156e <__subsf3>
     976:	0e 94 96 0b 	call	0x172c	; 0x172c <__fixsfsi>
     97a:	70 93 03 03 	sts	0x0303, r23	; 0x800303 <gyro_axis+0x3>
     97e:	60 93 02 03 	sts	0x0302, r22	; 0x800302 <gyro_axis+0x2>
		gyro_axis[2] -= gyro_axis_cal[2];                            //Only compensate after the calibration.
     982:	60 91 04 03 	lds	r22, 0x0304	; 0x800304 <gyro_axis+0x4>
     986:	70 91 05 03 	lds	r23, 0x0305	; 0x800305 <gyro_axis+0x5>
     98a:	07 2e       	mov	r0, r23
     98c:	00 0c       	add	r0, r0
     98e:	88 0b       	sbc	r24, r24
     990:	99 0b       	sbc	r25, r25
     992:	0e 94 ce 0b 	call	0x179c	; 0x179c <__floatsisf>
     996:	20 91 e2 02 	lds	r18, 0x02E2	; 0x8002e2 <gyro_axis_cal+0x8>
     99a:	30 91 e3 02 	lds	r19, 0x02E3	; 0x8002e3 <gyro_axis_cal+0x9>
     99e:	40 91 e4 02 	lds	r20, 0x02E4	; 0x8002e4 <gyro_axis_cal+0xa>
     9a2:	50 91 e5 02 	lds	r21, 0x02E5	; 0x8002e5 <gyro_axis_cal+0xb>
     9a6:	0e 94 b7 0a 	call	0x156e	; 0x156e <__subsf3>
     9aa:	0e 94 96 0b 	call	0x172c	; 0x172c <__fixsfsi>
     9ae:	70 93 05 03 	sts	0x0305, r23	; 0x800305 <gyro_axis+0x5>
     9b2:	60 93 04 03 	sts	0x0304, r22	; 0x800304 <gyro_axis+0x4>
		gyro_axis[3] -= gyro_axis_cal[3];                            //Only compensate after the calibration.
     9b6:	be 01       	movw	r22, r28
     9b8:	dd 0f       	add	r29, r29
     9ba:	88 0b       	sbc	r24, r24
     9bc:	99 0b       	sbc	r25, r25
     9be:	0e 94 ce 0b 	call	0x179c	; 0x179c <__floatsisf>
     9c2:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <gyro_axis_cal+0xc>
     9c6:	30 91 e7 02 	lds	r19, 0x02E7	; 0x8002e7 <gyro_axis_cal+0xd>
     9ca:	40 91 e8 02 	lds	r20, 0x02E8	; 0x8002e8 <gyro_axis_cal+0xe>
     9ce:	50 91 e9 02 	lds	r21, 0x02E9	; 0x8002e9 <gyro_axis_cal+0xf>
     9d2:	0e 94 b7 0a 	call	0x156e	; 0x156e <__subsf3>
     9d6:	0e 94 96 0b 	call	0x172c	; 0x172c <__fixsfsi>
     9da:	70 93 07 03 	sts	0x0307, r23	; 0x800307 <gyro_axis+0x7>
     9de:	60 93 06 03 	sts	0x0306, r22	; 0x800306 <gyro_axis+0x6>
	}
	gyro_roll = gyro_axis[1];           //Set gyro_roll to the correct axis that was stored in the EEPROM.
     9e2:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <gyro_axis+0x2>
     9e6:	70 91 03 03 	lds	r23, 0x0303	; 0x800303 <gyro_axis+0x3>
     9ea:	07 2e       	mov	r0, r23
     9ec:	00 0c       	add	r0, r0
     9ee:	88 0b       	sbc	r24, r24
     9f0:	99 0b       	sbc	r25, r25
     9f2:	0e 94 ce 0b 	call	0x179c	; 0x179c <__floatsisf>
     9f6:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <gyro_roll>
     9fa:	70 93 f9 02 	sts	0x02F9, r23	; 0x8002f9 <gyro_roll+0x1>
     9fe:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <gyro_roll+0x2>
     a02:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <gyro_roll+0x3>
	gyro_pitch = gyro_axis[2];          //Set gyro_pitch to the correct axis that was stored in the EEPROM.
     a06:	60 91 04 03 	lds	r22, 0x0304	; 0x800304 <gyro_axis+0x4>
     a0a:	70 91 05 03 	lds	r23, 0x0305	; 0x800305 <gyro_axis+0x5>
     a0e:	07 2e       	mov	r0, r23
     a10:	00 0c       	add	r0, r0
     a12:	88 0b       	sbc	r24, r24
     a14:	99 0b       	sbc	r25, r25
     a16:	0e 94 ce 0b 	call	0x179c	; 0x179c <__floatsisf>
     a1a:	60 93 fc 02 	sts	0x02FC, r22	; 0x8002fc <gyro_pitch>
     a1e:	70 93 fd 02 	sts	0x02FD, r23	; 0x8002fd <gyro_pitch+0x1>
     a22:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <gyro_pitch+0x2>
     a26:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <gyro_pitch+0x3>
	gyro_yaw = gyro_axis[3];            //Set gyro_yaw to the correct axis that was stored in the EEPROM.
     a2a:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <gyro_axis+0x6>
     a2e:	70 91 07 03 	lds	r23, 0x0307	; 0x800307 <gyro_axis+0x7>
     a32:	07 2e       	mov	r0, r23
     a34:	00 0c       	add	r0, r0
     a36:	88 0b       	sbc	r24, r24
     a38:	99 0b       	sbc	r25, r25
     a3a:	0e 94 ce 0b 	call	0x179c	; 0x179c <__floatsisf>
     a3e:	60 93 f4 02 	sts	0x02F4, r22	; 0x8002f4 <gyro_yaw>
     a42:	70 93 f5 02 	sts	0x02F5, r23	; 0x8002f5 <gyro_yaw+0x1>
     a46:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <gyro_yaw+0x2>
     a4a:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <gyro_yaw+0x3>

	acc_x = acc_axis[1];                //Set acc_x to the correct axis that was stored in the EEPROM.
     a4e:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <acc_axis+0x2>
     a52:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <acc_axis+0x3>
     a56:	09 2e       	mov	r0, r25
     a58:	00 0c       	add	r0, r0
     a5a:	aa 0b       	sbc	r26, r26
     a5c:	bb 0b       	sbc	r27, r27
     a5e:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <acc_x>
     a62:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <acc_x+0x1>
     a66:	a0 93 9e 03 	sts	0x039E, r26	; 0x80039e <acc_x+0x2>
     a6a:	b0 93 9f 03 	sts	0x039F, r27	; 0x80039f <acc_x+0x3>
	acc_y = acc_axis[2];                //Set acc_y to the correct axis that was stored in the EEPROM.
     a6e:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <acc_axis+0x4>
     a72:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <acc_axis+0x5>
     a76:	09 2e       	mov	r0, r25
     a78:	00 0c       	add	r0, r0
     a7a:	aa 0b       	sbc	r26, r26
     a7c:	bb 0b       	sbc	r27, r27
     a7e:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <acc_y>
     a82:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <acc_y+0x1>
     a86:	a0 93 9a 03 	sts	0x039A, r26	; 0x80039a <acc_y+0x2>
     a8a:	b0 93 9b 03 	sts	0x039B, r27	; 0x80039b <acc_y+0x3>
	acc_z = acc_axis[3];                //Set acc_z to the correct axis that was stored in the EEPROM.
     a8e:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <acc_axis+0x6>
     a92:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <acc_axis+0x7>
     a96:	09 2e       	mov	r0, r25
     a98:	00 0c       	add	r0, r0
     a9a:	aa 0b       	sbc	r26, r26
     a9c:	bb 0b       	sbc	r27, r27
     a9e:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <acc_z>
     aa2:	90 93 95 03 	sts	0x0395, r25	; 0x800395 <acc_z+0x1>
     aa6:	a0 93 96 03 	sts	0x0396, r26	; 0x800396 <acc_z+0x2>
     aaa:	b0 93 97 03 	sts	0x0397, r27	; 0x800397 <acc_z+0x3>
	//if(eeprom_data[29] & 0b10000000)acc_x *= -1;                   //Invert acc_x if the MSB of EEPROM bit 29 is set.
	//acc_y = acc_axis[eeprom_data[28] & 0b00000011];                //Set acc_y to the correct axis that was stored in the EEPROM.
	//if(eeprom_data[28] & 0b10000000)acc_y *= -1;                   //Invert acc_y if the MSB of EEPROM bit 28 is set.
	//acc_z = acc_axis[eeprom_data[30] & 0b00000011];                //Set acc_z to the correct axis that was stored in the EEPROM.
	//if(eeprom_data[30] & 0b10000000)acc_z *= -1;                   //Invert acc_z if the MSB of EEPROM bit 30 is set.
}
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	08 95       	ret

00000ab4 <loop>:
	while(Serial.available())data = Serial.read();                                        //Empty the serial buffer.
	data = 0;                                                                             //Set the data variable back to zero.
}

//Main program loop
void loop(){
     ab4:	8f 92       	push	r8
     ab6:	9f 92       	push	r9
     ab8:	af 92       	push	r10
     aba:	bf 92       	push	r11
     abc:	cf 92       	push	r12
     abe:	df 92       	push	r13
     ac0:	ef 92       	push	r14
     ac2:	ff 92       	push	r15
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
	while(zero_timer + 4000 > micros());                                                  //Start the pulse after 4000 micro seconds.
     ac8:	c0 90 24 03 	lds	r12, 0x0324	; 0x800324 <zero_timer>
     acc:	d0 90 25 03 	lds	r13, 0x0325	; 0x800325 <zero_timer+0x1>
     ad0:	e0 90 26 03 	lds	r14, 0x0326	; 0x800326 <zero_timer+0x2>
     ad4:	f0 90 27 03 	lds	r15, 0x0327	; 0x800327 <zero_timer+0x3>
     ad8:	20 ea       	ldi	r18, 0xA0	; 160
     ada:	c2 0e       	add	r12, r18
     adc:	2f e0       	ldi	r18, 0x0F	; 15
     ade:	d2 1e       	adc	r13, r18
     ae0:	e1 1c       	adc	r14, r1
     ae2:	f1 1c       	adc	r15, r1
     ae4:	0e 94 b6 12 	call	0x256c	; 0x256c <micros>
     ae8:	6c 15       	cp	r22, r12
     aea:	7d 05       	cpc	r23, r13
     aec:	8e 05       	cpc	r24, r14
     aee:	9f 05       	cpc	r25, r15
     af0:	58 f3       	brcs	.-42     	; 0xac8 <loop+0x14>
	zero_timer = micros();                                                                //Reset the zero timer.
     af2:	0e 94 b6 12 	call	0x256c	; 0x256c <micros>
     af6:	60 93 24 03 	sts	0x0324, r22	; 0x800324 <zero_timer>
     afa:	70 93 25 03 	sts	0x0325, r23	; 0x800325 <zero_timer+0x1>
     afe:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <zero_timer+0x2>
     b02:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <zero_timer+0x3>

	if(Serial.available() > 0){
     b06:	8a ec       	ldi	r24, 0xCA	; 202
     b08:	93 e0       	ldi	r25, 0x03	; 3
     b0a:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <_ZN14HardwareSerial9availableEv>
     b0e:	18 16       	cp	r1, r24
     b10:	19 06       	cpc	r1, r25
     b12:	0c f0       	brlt	.+2      	; 0xb16 <loop+0x62>
     b14:	96 c0       	rjmp	.+300    	; 0xc42 <loop+0x18e>
		data = Serial.read();                                                               //Read the incomming byte.
     b16:	8a ec       	ldi	r24, 0xCA	; 202
     b18:	93 e0       	ldi	r25, 0x03	; 3
     b1a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <_ZN14HardwareSerial4readEv>
     b1e:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <data>
		new_function_request = true;                                                        //Set the new request flag.
     b22:	91 e0       	ldi	r25, 0x01	; 1
     b24:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <new_function_request>
		loop_counter = 0;                                                                   //Reset the loop_counter variable.
     b28:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <loop_counter+0x1>
     b2c:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <loop_counter>
		cal_int = 0;                                                                        //Reset the cal_int variable to undo the calibration.
     b30:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <cal_int+0x1>
     b34:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <cal_int>
		start = 0;                                                                          //Set start to 0.
     b38:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <start>
		first_angle = false;                                                                //Set first_angle to false.
     b3c:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <first_angle>
		//Confirm the choice on the serial monitor.
		if(data == 'r')Serial.println("Reading receiver signals.");
     b40:	82 37       	cpi	r24, 0x72	; 114
     b42:	31 f4       	brne	.+12     	; 0xb50 <loop+0x9c>
     b44:	63 e4       	ldi	r22, 0x43	; 67
     b46:	71 e0       	ldi	r23, 0x01	; 1
     b48:	8a ec       	ldi	r24, 0xCA	; 202
     b4a:	93 e0       	ldi	r25, 0x03	; 3
     b4c:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_ZN5Print7printlnEPKc>
		if(data == 'a')Serial.println("Print the quadcopter angles.");
     b50:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <data>
     b54:	81 36       	cpi	r24, 0x61	; 97
     b56:	31 f4       	brne	.+12     	; 0xb64 <loop+0xb0>
     b58:	6d e5       	ldi	r22, 0x5D	; 93
     b5a:	71 e0       	ldi	r23, 0x01	; 1
     b5c:	8a ec       	ldi	r24, 0xCA	; 202
     b5e:	93 e0       	ldi	r25, 0x03	; 3
     b60:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_ZN5Print7printlnEPKc>
		if(data == 'a')Serial.println("Gyro calibration starts in 2 seconds (don't move the quadcopter).");
     b64:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <data>
     b68:	81 36       	cpi	r24, 0x61	; 97
     b6a:	31 f4       	brne	.+12     	; 0xb78 <loop+0xc4>
     b6c:	6a e7       	ldi	r22, 0x7A	; 122
     b6e:	71 e0       	ldi	r23, 0x01	; 1
     b70:	8a ec       	ldi	r24, 0xCA	; 202
     b72:	93 e0       	ldi	r25, 0x03	; 3
     b74:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_ZN5Print7printlnEPKc>
		if(data == '1')Serial.println("Test motor 1 (right front CCW.)");
     b78:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <data>
     b7c:	81 33       	cpi	r24, 0x31	; 49
     b7e:	31 f4       	brne	.+12     	; 0xb8c <loop+0xd8>
     b80:	6c eb       	ldi	r22, 0xBC	; 188
     b82:	71 e0       	ldi	r23, 0x01	; 1
     b84:	8a ec       	ldi	r24, 0xCA	; 202
     b86:	93 e0       	ldi	r25, 0x03	; 3
     b88:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_ZN5Print7printlnEPKc>
		if(data == '2')Serial.println("Test motor 2 (right rear CW.)");
     b8c:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <data>
     b90:	82 33       	cpi	r24, 0x32	; 50
     b92:	31 f4       	brne	.+12     	; 0xba0 <loop+0xec>
     b94:	6c ed       	ldi	r22, 0xDC	; 220
     b96:	71 e0       	ldi	r23, 0x01	; 1
     b98:	8a ec       	ldi	r24, 0xCA	; 202
     b9a:	93 e0       	ldi	r25, 0x03	; 3
     b9c:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_ZN5Print7printlnEPKc>
		if(data == '3')Serial.println("Test motor 3 (left rear CCW.)");
     ba0:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <data>
     ba4:	83 33       	cpi	r24, 0x33	; 51
     ba6:	31 f4       	brne	.+12     	; 0xbb4 <loop+0x100>
     ba8:	6a ef       	ldi	r22, 0xFA	; 250
     baa:	71 e0       	ldi	r23, 0x01	; 1
     bac:	8a ec       	ldi	r24, 0xCA	; 202
     bae:	93 e0       	ldi	r25, 0x03	; 3
     bb0:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_ZN5Print7printlnEPKc>
		if(data == '4')Serial.println("Test motor 4 (left front CW.)");
     bb4:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <data>
     bb8:	84 33       	cpi	r24, 0x34	; 52
     bba:	31 f4       	brne	.+12     	; 0xbc8 <loop+0x114>
     bbc:	68 e1       	ldi	r22, 0x18	; 24
     bbe:	72 e0       	ldi	r23, 0x02	; 2
     bc0:	8a ec       	ldi	r24, 0xCA	; 202
     bc2:	93 e0       	ldi	r25, 0x03	; 3
     bc4:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_ZN5Print7printlnEPKc>
		if(data == '5')Serial.println("Test all motors together");
     bc8:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <data>
     bcc:	85 33       	cpi	r24, 0x35	; 53
     bce:	31 f4       	brne	.+12     	; 0xbdc <loop+0x128>
     bd0:	66 e3       	ldi	r22, 0x36	; 54
     bd2:	72 e0       	ldi	r23, 0x02	; 2
     bd4:	8a ec       	ldi	r24, 0xCA	; 202
     bd6:	93 e0       	ldi	r25, 0x03	; 3
     bd8:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_ZN5Print7printlnEPKc>

		//Let's create a small delay so the message stays visible for 2.5 seconds.
		//We don't want the ESC's to beep and have to send a 1000us pulse to the ESC's.
		for(vibration_counter = 0; vibration_counter < 625; vibration_counter++){           //Do this loop 625 times
     bdc:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <vibration_counter+0x1>
     be0:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <vibration_counter>
			delay(3);                                                                         //Wait 3000us.
			esc_1 = 1000;                                                                     //Set the pulse for ESC 1 to 1000us.
     be4:	c8 ee       	ldi	r28, 0xE8	; 232
     be6:	d3 e0       	ldi	r29, 0x03	; 3
		if(data == '4')Serial.println("Test motor 4 (left front CW.)");
		if(data == '5')Serial.println("Test all motors together");

		//Let's create a small delay so the message stays visible for 2.5 seconds.
		//We don't want the ESC's to beep and have to send a 1000us pulse to the ESC's.
		for(vibration_counter = 0; vibration_counter < 625; vibration_counter++){           //Do this loop 625 times
     be8:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <vibration_counter>
     bec:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <vibration_counter+0x1>
     bf0:	81 37       	cpi	r24, 0x71	; 113
     bf2:	92 40       	sbci	r25, 0x02	; 2
     bf4:	14 f5       	brge	.+68     	; 0xc3a <loop+0x186>
			delay(3);                                                                         //Wait 3000us.
     bf6:	63 e0       	ldi	r22, 0x03	; 3
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 94 db 12 	call	0x25b6	; 0x25b6 <delay>
			esc_1 = 1000;                                                                     //Set the pulse for ESC 1 to 1000us.
     c02:	d0 93 b9 03 	sts	0x03B9, r29	; 0x8003b9 <esc_1+0x1>
     c06:	c0 93 b8 03 	sts	0x03B8, r28	; 0x8003b8 <esc_1>
			esc_2 = 1000;                                                                     //Set the pulse for ESC 1 to 1000us.
     c0a:	d0 93 b7 03 	sts	0x03B7, r29	; 0x8003b7 <esc_2+0x1>
     c0e:	c0 93 b6 03 	sts	0x03B6, r28	; 0x8003b6 <esc_2>
			esc_3 = 1000;                                                                     //Set the pulse for ESC 1 to 1000us.
     c12:	d0 93 b5 03 	sts	0x03B5, r29	; 0x8003b5 <esc_3+0x1>
     c16:	c0 93 b4 03 	sts	0x03B4, r28	; 0x8003b4 <esc_3>
			esc_4 = 1000;                                                                     //Set the pulse for ESC 1 to 1000us.
     c1a:	d0 93 b3 03 	sts	0x03B3, r29	; 0x8003b3 <esc_4+0x1>
     c1e:	c0 93 b2 03 	sts	0x03B2, r28	; 0x8003b2 <esc_4>
			esc_pulse_output();                                                               //Send the ESC control pulses.
     c22:	0e 94 26 02 	call	0x44c	; 0x44c <_Z16esc_pulse_outputv>
		if(data == '4')Serial.println("Test motor 4 (left front CW.)");
		if(data == '5')Serial.println("Test all motors together");

		//Let's create a small delay so the message stays visible for 2.5 seconds.
		//We don't want the ESC's to beep and have to send a 1000us pulse to the ESC's.
		for(vibration_counter = 0; vibration_counter < 625; vibration_counter++){           //Do this loop 625 times
     c26:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <vibration_counter>
     c2a:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <vibration_counter+0x1>
     c2e:	01 96       	adiw	r24, 0x01	; 1
     c30:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <vibration_counter+0x1>
     c34:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <vibration_counter>
     c38:	d7 cf       	rjmp	.-82     	; 0xbe8 <loop+0x134>
			esc_2 = 1000;                                                                     //Set the pulse for ESC 1 to 1000us.
			esc_3 = 1000;                                                                     //Set the pulse for ESC 1 to 1000us.
			esc_4 = 1000;                                                                     //Set the pulse for ESC 1 to 1000us.
			esc_pulse_output();                                                               //Send the ESC control pulses.
		}
		vibration_counter = 0;                                                              //Reset the vibration_counter variable.
     c3a:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <vibration_counter+0x1>
     c3e:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <vibration_counter>
}

//This part converts the actual receiver signals to a standardized 1000 – 1500 – 2000 microsecond value.
//The stored data in the EEPROM is used.
int convert_receiver_channel(byte function){
		return receiver_input[function];
     c42:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <receiver_input+0x6>
     c46:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <receiver_input+0x7>
			esc_pulse_output();                                                               //Send the ESC control pulses.
		}
		vibration_counter = 0;                                                              //Reset the vibration_counter variable.
	}

	receiver_input_channel_3 = convert_receiver_channel(3);                               //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
     c4a:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <receiver_input_channel_3+0x1>
     c4e:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <receiver_input_channel_3>
	if(receiver_input_channel_3 < 1025)new_function_request = false;                      //If the throttle is in the lowest position set the request flag to false.
     c52:	20 91 bc 03 	lds	r18, 0x03BC	; 0x8003bc <receiver_input_channel_3>
     c56:	30 91 bd 03 	lds	r19, 0x03BD	; 0x8003bd <receiver_input_channel_3+0x1>
     c5a:	21 30       	cpi	r18, 0x01	; 1
     c5c:	34 40       	sbci	r19, 0x04	; 4
     c5e:	14 f4       	brge	.+4      	; 0xc64 <loop+0x1b0>
     c60:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <new_function_request>


	////////////////////////////////////////////////////////////////////////////////////////////
	//Run the ESC calibration program to start with.
	////////////////////////////////////////////////////////////////////////////////////////////
	if(data == 0 && new_function_request == false){                                       //Only start the calibration mode at first start.
     c64:	20 91 c4 03 	lds	r18, 0x03C4	; 0x8003c4 <data>
     c68:	21 11       	cpse	r18, r1
     c6a:	82 c0       	rjmp	.+260    	; 0xd70 <loop+0x2bc>
     c6c:	20 91 c3 03 	lds	r18, 0x03C3	; 0x8003c3 <new_function_request>
     c70:	21 11       	cpse	r18, r1
     c72:	7e c0       	rjmp	.+252    	; 0xd70 <loop+0x2bc>
}

//This part converts the actual receiver signals to a standardized 1000 – 1500 – 2000 microsecond value.
//The stored data in the EEPROM is used.
int convert_receiver_channel(byte function){
		return receiver_input[function];
     c74:	20 91 aa 03 	lds	r18, 0x03AA	; 0x8003aa <receiver_input+0x2>
     c78:	30 91 ab 03 	lds	r19, 0x03AB	; 0x8003ab <receiver_input+0x3>

	////////////////////////////////////////////////////////////////////////////////////////////
	//Run the ESC calibration program to start with.
	////////////////////////////////////////////////////////////////////////////////////////////
	if(data == 0 && new_function_request == false){                                       //Only start the calibration mode at first start.
		receiver_input_channel_1 = convert_receiver_channel(1);                           //Convert the actual receiver signals for pitch to the standard 1000 - 2000us.
     c7c:	30 93 c1 03 	sts	0x03C1, r19	; 0x8003c1 <receiver_input_channel_1+0x1>
     c80:	20 93 c0 03 	sts	0x03C0, r18	; 0x8003c0 <receiver_input_channel_1>
}

//This part converts the actual receiver signals to a standardized 1000 – 1500 – 2000 microsecond value.
//The stored data in the EEPROM is used.
int convert_receiver_channel(byte function){
		return receiver_input[function];
     c84:	20 91 ac 03 	lds	r18, 0x03AC	; 0x8003ac <receiver_input+0x4>
     c88:	30 91 ad 03 	lds	r19, 0x03AD	; 0x8003ad <receiver_input+0x5>
	////////////////////////////////////////////////////////////////////////////////////////////
	//Run the ESC calibration program to start with.
	////////////////////////////////////////////////////////////////////////////////////////////
	if(data == 0 && new_function_request == false){                                       //Only start the calibration mode at first start.
		receiver_input_channel_1 = convert_receiver_channel(1);                           //Convert the actual receiver signals for pitch to the standard 1000 - 2000us.
		receiver_input_channel_2 = convert_receiver_channel(2);                           //Convert the actual receiver signals for roll to the standard 1000 - 2000us.
     c8c:	30 93 bf 03 	sts	0x03BF, r19	; 0x8003bf <receiver_input_channel_2+0x1>
     c90:	20 93 be 03 	sts	0x03BE, r18	; 0x8003be <receiver_input_channel_2>
		receiver_input_channel_3 = convert_receiver_channel(3);                           //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
     c94:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <receiver_input_channel_3+0x1>
     c98:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <receiver_input_channel_3>
}

//This part converts the actual receiver signals to a standardized 1000 – 1500 – 2000 microsecond value.
//The stored data in the EEPROM is used.
int convert_receiver_channel(byte function){
		return receiver_input[function];
     c9c:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <receiver_input+0x8>
     ca0:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <receiver_input+0x9>
	////////////////////////////////////////////////////////////////////////////////////////////
	if(data == 0 && new_function_request == false){                                       //Only start the calibration mode at first start.
		receiver_input_channel_1 = convert_receiver_channel(1);                           //Convert the actual receiver signals for pitch to the standard 1000 - 2000us.
		receiver_input_channel_2 = convert_receiver_channel(2);                           //Convert the actual receiver signals for roll to the standard 1000 - 2000us.
		receiver_input_channel_3 = convert_receiver_channel(3);                           //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
		receiver_input_channel_4 = convert_receiver_channel(4);                           //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
     ca4:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <receiver_input_channel_4+0x1>
     ca8:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <receiver_input_channel_4>
		if(receiver_input_channel_1_middle ==0)
     cac:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <__data_end>
     cb0:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <__data_end+0x1>
     cb4:	89 2b       	or	r24, r25
     cb6:	41 f4       	brne	.+16     	; 0xcc8 <loop+0x214>
		receiver_input_channel_1_middle = receiver_input_channel_1;
     cb8:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <receiver_input_channel_1>
     cbc:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <receiver_input_channel_1+0x1>
     cc0:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <__data_end+0x1>
     cc4:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <__data_end>
		esc_1 = receiver_input_channel_3 - (receiver_input_channel_1_middle - receiver_input_channel_1)/10;                                                   //Set the pulse for motor 1 equal to the throttle channel.
     cc8:	e0 91 bc 03 	lds	r30, 0x03BC	; 0x8003bc <receiver_input_channel_3>
     ccc:	f0 91 bd 03 	lds	r31, 0x03BD	; 0x8003bd <receiver_input_channel_3+0x1>
     cd0:	20 91 d8 02 	lds	r18, 0x02D8	; 0x8002d8 <__data_end>
     cd4:	30 91 d9 02 	lds	r19, 0x02D9	; 0x8002d9 <__data_end+0x1>
     cd8:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <receiver_input_channel_1>
     cdc:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <receiver_input_channel_1+0x1>
     ce0:	a9 01       	movw	r20, r18
     ce2:	48 1b       	sub	r20, r24
     ce4:	59 0b       	sbc	r21, r25
     ce6:	ca 01       	movw	r24, r20
     ce8:	66 ef       	ldi	r22, 0xF6	; 246
     cea:	7f ef       	ldi	r23, 0xFF	; 255
     cec:	0e 94 80 16 	call	0x2d00	; 0x2d00 <__divmodhi4>
     cf0:	6e 0f       	add	r22, r30
     cf2:	7f 1f       	adc	r23, r31
     cf4:	70 93 b9 03 	sts	0x03B9, r23	; 0x8003b9 <esc_1+0x1>
     cf8:	60 93 b8 03 	sts	0x03B8, r22	; 0x8003b8 <esc_1>
		esc_2 = receiver_input_channel_3 + (receiver_input_channel_1_middle - receiver_input_channel_1)/10;                                                   //Set the pulse for motor 2 equal to the throttle channel.
     cfc:	e0 91 bc 03 	lds	r30, 0x03BC	; 0x8003bc <receiver_input_channel_3>
     d00:	f0 91 bd 03 	lds	r31, 0x03BD	; 0x8003bd <receiver_input_channel_3+0x1>
     d04:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <receiver_input_channel_1>
     d08:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <receiver_input_channel_1+0x1>
     d0c:	a9 01       	movw	r20, r18
     d0e:	48 1b       	sub	r20, r24
     d10:	59 0b       	sbc	r21, r25
     d12:	ca 01       	movw	r24, r20
     d14:	6a e0       	ldi	r22, 0x0A	; 10
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	0e 94 80 16 	call	0x2d00	; 0x2d00 <__divmodhi4>
     d1c:	6e 0f       	add	r22, r30
     d1e:	7f 1f       	adc	r23, r31
     d20:	70 93 b7 03 	sts	0x03B7, r23	; 0x8003b7 <esc_2+0x1>
     d24:	60 93 b6 03 	sts	0x03B6, r22	; 0x8003b6 <esc_2>
		esc_3 = receiver_input_channel_3;                                                   //Set the pulse for motor 3 equal to the throttle channel.
     d28:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <receiver_input_channel_3>
     d2c:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <receiver_input_channel_3+0x1>
     d30:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <esc_3+0x1>
     d34:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <esc_3>
		esc_4 = receiver_input_channel_3;                                                   //Set the pulse for motor 4 equal to the throttle channel.
     d38:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <receiver_input_channel_3>
     d3c:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <receiver_input_channel_3+0x1>
     d40:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <esc_4+0x1>
     d44:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <esc_4>
		esc_pulse_output();                                                                 //Send the ESC control pulses.
     d48:	0e 94 26 02 	call	0x44c	; 0x44c <_Z16esc_pulse_outputv>
		loop_counter ++;                                                                    //Increase the loop_counter variable.
     d4c:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <loop_counter>
     d50:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <loop_counter+0x1>
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <loop_counter+0x1>
     d5a:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <loop_counter>
		if(loop_counter == 500){                                                            //Print the receiver values when the loop_counter variable equals 250.
     d5e:	84 3f       	cpi	r24, 0xF4	; 244
     d60:	91 40       	sbci	r25, 0x01	; 1
     d62:	31 f4       	brne	.+12     	; 0xd70 <loop+0x2bc>
			print_signals();                                                                  //Print the receiver values on the serial monitor.
     d64:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_Z13print_signalsv>
			loop_counter = 0;                                                                 //Reset the loop_counter variable.
     d68:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <loop_counter+0x1>
     d6c:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <loop_counter>
	}

	////////////////////////////////////////////////////////////////////////////////////////////
	//When user sends a 'r' print the receiver signals.
	////////////////////////////////////////////////////////////////////////////////////////////
	if(data == 'r'){
     d70:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <data>
     d74:	82 37       	cpi	r24, 0x72	; 114
     d76:	09 f0       	breq	.+2      	; 0xd7a <loop+0x2c6>
     d78:	7b c0       	rjmp	.+246    	; 0xe70 <loop+0x3bc>
		loop_counter ++;                                                                    //Increase the loop_counter variable.
     d7a:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <loop_counter>
     d7e:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <loop_counter+0x1>
     d82:	01 96       	adiw	r24, 0x01	; 1
     d84:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <loop_counter+0x1>
     d88:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <loop_counter>
}

//This part converts the actual receiver signals to a standardized 1000 – 1500 – 2000 microsecond value.
//The stored data in the EEPROM is used.
int convert_receiver_channel(byte function){
		return receiver_input[function];
     d8c:	20 91 aa 03 	lds	r18, 0x03AA	; 0x8003aa <receiver_input+0x2>
     d90:	30 91 ab 03 	lds	r19, 0x03AB	; 0x8003ab <receiver_input+0x3>
	////////////////////////////////////////////////////////////////////////////////////////////
	//When user sends a 'r' print the receiver signals.
	////////////////////////////////////////////////////////////////////////////////////////////
	if(data == 'r'){
		loop_counter ++;                                                                    //Increase the loop_counter variable.
		receiver_input_channel_1 = convert_receiver_channel(1);                           //Convert the actual receiver signals for pitch to the standard 1000 - 2000us.
     d94:	30 93 c1 03 	sts	0x03C1, r19	; 0x8003c1 <receiver_input_channel_1+0x1>
     d98:	20 93 c0 03 	sts	0x03C0, r18	; 0x8003c0 <receiver_input_channel_1>
}

//This part converts the actual receiver signals to a standardized 1000 – 1500 – 2000 microsecond value.
//The stored data in the EEPROM is used.
int convert_receiver_channel(byte function){
		return receiver_input[function];
     d9c:	20 91 ac 03 	lds	r18, 0x03AC	; 0x8003ac <receiver_input+0x4>
     da0:	30 91 ad 03 	lds	r19, 0x03AD	; 0x8003ad <receiver_input+0x5>
	//When user sends a 'r' print the receiver signals.
	////////////////////////////////////////////////////////////////////////////////////////////
	if(data == 'r'){
		loop_counter ++;                                                                    //Increase the loop_counter variable.
		receiver_input_channel_1 = convert_receiver_channel(1);                           //Convert the actual receiver signals for pitch to the standard 1000 - 2000us.
		receiver_input_channel_2 = convert_receiver_channel(2);                           //Convert the actual receiver signals for roll to the standard 1000 - 2000us.
     da4:	30 93 bf 03 	sts	0x03BF, r19	; 0x8003bf <receiver_input_channel_2+0x1>
     da8:	20 93 be 03 	sts	0x03BE, r18	; 0x8003be <receiver_input_channel_2>
}

//This part converts the actual receiver signals to a standardized 1000 – 1500 – 2000 microsecond value.
//The stored data in the EEPROM is used.
int convert_receiver_channel(byte function){
		return receiver_input[function];
     dac:	20 91 ae 03 	lds	r18, 0x03AE	; 0x8003ae <receiver_input+0x6>
     db0:	30 91 af 03 	lds	r19, 0x03AF	; 0x8003af <receiver_input+0x7>
	////////////////////////////////////////////////////////////////////////////////////////////
	if(data == 'r'){
		loop_counter ++;                                                                    //Increase the loop_counter variable.
		receiver_input_channel_1 = convert_receiver_channel(1);                           //Convert the actual receiver signals for pitch to the standard 1000 - 2000us.
		receiver_input_channel_2 = convert_receiver_channel(2);                           //Convert the actual receiver signals for roll to the standard 1000 - 2000us.
		receiver_input_channel_3 = convert_receiver_channel(3);                           //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
     db4:	30 93 bd 03 	sts	0x03BD, r19	; 0x8003bd <receiver_input_channel_3+0x1>
     db8:	20 93 bc 03 	sts	0x03BC, r18	; 0x8003bc <receiver_input_channel_3>
}

//This part converts the actual receiver signals to a standardized 1000 – 1500 – 2000 microsecond value.
//The stored data in the EEPROM is used.
int convert_receiver_channel(byte function){
		return receiver_input[function];
     dbc:	20 91 b0 03 	lds	r18, 0x03B0	; 0x8003b0 <receiver_input+0x8>
     dc0:	30 91 b1 03 	lds	r19, 0x03B1	; 0x8003b1 <receiver_input+0x9>
	if(data == 'r'){
		loop_counter ++;                                                                    //Increase the loop_counter variable.
		receiver_input_channel_1 = convert_receiver_channel(1);                           //Convert the actual receiver signals for pitch to the standard 1000 - 2000us.
		receiver_input_channel_2 = convert_receiver_channel(2);                           //Convert the actual receiver signals for roll to the standard 1000 - 2000us.
		receiver_input_channel_3 = convert_receiver_channel(3);                           //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
		receiver_input_channel_4 = convert_receiver_channel(4);                           //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
     dc4:	30 93 bb 03 	sts	0x03BB, r19	; 0x8003bb <receiver_input_channel_4+0x1>
     dc8:	20 93 ba 03 	sts	0x03BA, r18	; 0x8003ba <receiver_input_channel_4>

		if(loop_counter == 125){                                                            //Print the receiver values when the loop_counter variable equals 250.
     dcc:	8d 37       	cpi	r24, 0x7D	; 125
     dce:	91 05       	cpc	r25, r1
     dd0:	31 f4       	brne	.+12     	; 0xdde <loop+0x32a>
			print_signals();                                                                  //Print the receiver values on the serial monitor.
     dd2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_Z13print_signalsv>
			loop_counter = 0;                                                                 //Reset the loop_counter variable.
     dd6:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <loop_counter+0x1>
     dda:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <loop_counter>
		}

		//For starting the motors: throttle low and yaw left (step 1).
		if(receiver_input_channel_3 < 1050 && receiver_input_channel_4 < 1050)start = 1;
     dde:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <receiver_input_channel_3>
     de2:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <receiver_input_channel_3+0x1>
     de6:	8a 31       	cpi	r24, 0x1A	; 26
     de8:	94 40       	sbci	r25, 0x04	; 4
     dea:	44 f4       	brge	.+16     	; 0xdfc <loop+0x348>
     dec:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <receiver_input_channel_4>
     df0:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <receiver_input_channel_4+0x1>
     df4:	8a 31       	cpi	r24, 0x1A	; 26
     df6:	94 40       	sbci	r25, 0x04	; 4
     df8:	0c f4       	brge	.+2      	; 0xdfc <loop+0x348>
     dfa:	a3 c3       	rjmp	.+1862   	; 0x1542 <loop+0xa8e>
		//When yaw stick is back in the center position start the motors (step 2).
		if(start == 1 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1450)start = 2;
     dfc:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <start>
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	79 f4       	brne	.+30     	; 0xe22 <loop+0x36e>
     e04:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <receiver_input_channel_3>
     e08:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <receiver_input_channel_3+0x1>
     e0c:	8a 31       	cpi	r24, 0x1A	; 26
     e0e:	94 40       	sbci	r25, 0x04	; 4
     e10:	44 f4       	brge	.+16     	; 0xe22 <loop+0x36e>
     e12:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <receiver_input_channel_4>
     e16:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <receiver_input_channel_4+0x1>
     e1a:	8b 3a       	cpi	r24, 0xAB	; 171
     e1c:	95 40       	sbci	r25, 0x05	; 5
     e1e:	0c f0       	brlt	.+2      	; 0xe22 <loop+0x36e>
     e20:	94 c3       	rjmp	.+1832   	; 0x154a <loop+0xa96>
		//Stopping the motors: throttle low and yaw right.
		if(start == 2 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1950)start = 0;
     e22:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <start>
     e26:	82 30       	cpi	r24, 0x02	; 2
     e28:	79 f4       	brne	.+30     	; 0xe48 <loop+0x394>
     e2a:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <receiver_input_channel_3>
     e2e:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <receiver_input_channel_3+0x1>
     e32:	8a 31       	cpi	r24, 0x1A	; 26
     e34:	94 40       	sbci	r25, 0x04	; 4
     e36:	44 f4       	brge	.+16     	; 0xe48 <loop+0x394>
     e38:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <receiver_input_channel_4>
     e3c:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <receiver_input_channel_4+0x1>
     e40:	8f 39       	cpi	r24, 0x9F	; 159
     e42:	97 40       	sbci	r25, 0x07	; 7
     e44:	0c f0       	brlt	.+2      	; 0xe48 <loop+0x394>
     e46:	85 c3       	rjmp	.+1802   	; 0x1552 <loop+0xa9e>

		esc_1 = 1000;                                                                       //Set the pulse for ESC 1 to 1000us.
     e48:	88 ee       	ldi	r24, 0xE8	; 232
     e4a:	93 e0       	ldi	r25, 0x03	; 3
     e4c:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <esc_1+0x1>
     e50:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <esc_1>
		esc_2 = 1000;                                                                       //Set the pulse for ESC 1 to 1000us.
     e54:	90 93 b7 03 	sts	0x03B7, r25	; 0x8003b7 <esc_2+0x1>
     e58:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <esc_2>
		esc_3 = 1000;                                                                       //Set the pulse for ESC 1 to 1000us.
     e5c:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <esc_3+0x1>
     e60:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <esc_3>
		esc_4 = 1000;                                                                       //Set the pulse for ESC 1 to 1000us.
     e64:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <esc_4+0x1>
     e68:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <esc_4>
		esc_pulse_output();                                                                 //Send the ESC control pulses.
     e6c:	0e 94 26 02 	call	0x44c	; 0x44c <_Z16esc_pulse_outputv>
	}

	///////////////////////////////////////////////////////////////////////////////////////////
	//When user sends a '1, 2, 3, 4 or 5 test the motors.
	////////////////////////////////////////////////////////////////////////////////////////////
	if(data == '1' || data == '2' || data == '3' || data == '4' || data == '5'){          //If motor 1, 2, 3 or 4 is selected by the user.
     e70:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <data>
     e74:	81 53       	subi	r24, 0x31	; 49
     e76:	85 30       	cpi	r24, 0x05	; 5
     e78:	08 f0       	brcs	.+2      	; 0xe7c <loop+0x3c8>
     e7a:	a3 c1       	rjmp	.+838    	; 0x11c2 <loop+0x70e>
		loop_counter ++;                                                                    //Add 1 to the loop_counter variable.
     e7c:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <loop_counter>
     e80:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <loop_counter+0x1>
     e84:	01 96       	adiw	r24, 0x01	; 1
     e86:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <loop_counter+0x1>
     e8a:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <loop_counter>
		if(new_function_request == true && loop_counter == 250){                            //Wait for the throttle to be set to 0.
     e8e:	20 91 c3 03 	lds	r18, 0x03C3	; 0x8003c3 <new_function_request>
     e92:	22 23       	and	r18, r18
     e94:	b9 f0       	breq	.+46     	; 0xec4 <loop+0x410>
     e96:	8a 3f       	cpi	r24, 0xFA	; 250
     e98:	91 05       	cpc	r25, r1
     e9a:	a1 f4       	brne	.+40     	; 0xec4 <loop+0x410>
			Serial.print("Set throttle to 1000 (low). It's now set to: ");                    //Print message on the serial monitor.
     e9c:	6f e4       	ldi	r22, 0x4F	; 79
     e9e:	72 e0       	ldi	r23, 0x02	; 2
     ea0:	8a ec       	ldi	r24, 0xCA	; 202
     ea2:	93 e0       	ldi	r25, 0x03	; 3
     ea4:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN5Print5printEPKc>
			Serial.println(receiver_input_channel_3);                                         //Print the actual throttle position.
     ea8:	60 91 bc 03 	lds	r22, 0x03BC	; 0x8003bc <receiver_input_channel_3>
     eac:	70 91 bd 03 	lds	r23, 0x03BD	; 0x8003bd <receiver_input_channel_3+0x1>
     eb0:	4a e0       	ldi	r20, 0x0A	; 10
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	8a ec       	ldi	r24, 0xCA	; 202
     eb6:	93 e0       	ldi	r25, 0x03	; 3
     eb8:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <_ZN5Print7printlnEii>
			loop_counter = 0;                                                                 //Reset the loop_counter variable.
     ebc:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <loop_counter+0x1>
     ec0:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <loop_counter>
		}
		if(new_function_request == false){                                                  //When the throttle was in the lowest position do this.
     ec4:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <new_function_request>
     ec8:	81 11       	cpse	r24, r1
     eca:	7b c1       	rjmp	.+758    	; 0x11c2 <loop+0x70e>
}

//This part converts the actual receiver signals to a standardized 1000 – 1500 – 2000 microsecond value.
//The stored data in the EEPROM is used.
int convert_receiver_channel(byte function){
		return receiver_input[function];
     ecc:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <receiver_input+0x6>
     ed0:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <receiver_input+0x7>
			Serial.print("Set throttle to 1000 (low). It's now set to: ");                    //Print message on the serial monitor.
			Serial.println(receiver_input_channel_3);                                         //Print the actual throttle position.
			loop_counter = 0;                                                                 //Reset the loop_counter variable.
		}
		if(new_function_request == false){                                                  //When the throttle was in the lowest position do this.
			receiver_input_channel_3 = convert_receiver_channel(3);                           //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
     ed4:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <receiver_input_channel_3+0x1>
     ed8:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <receiver_input_channel_3>
			if(data == '1' || data == '5')esc_1 = receiver_input_channel_3;                   //If motor 1 is requested set the pulse for motor 1 equal to the throttle channel.
     edc:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <data>
     ee0:	98 2f       	mov	r25, r24
     ee2:	9b 7f       	andi	r25, 0xFB	; 251
     ee4:	91 33       	cpi	r25, 0x31	; 49
     ee6:	a9 f4       	brne	.+42     	; 0xf12 <loop+0x45e>
     ee8:	20 91 bc 03 	lds	r18, 0x03BC	; 0x8003bc <receiver_input_channel_3>
     eec:	30 91 bd 03 	lds	r19, 0x03BD	; 0x8003bd <receiver_input_channel_3+0x1>
     ef0:	30 93 b9 03 	sts	0x03B9, r19	; 0x8003b9 <esc_1+0x1>
     ef4:	20 93 b8 03 	sts	0x03B8, r18	; 0x8003b8 <esc_1>
			else esc_1 = 1000;                                                                //If motor 1 is not requested set the pulse for the ESC to 1000us (off).
			if(data == '2' || data == '5')esc_2 = receiver_input_channel_3;                   //If motor 2 is requested set the pulse for motor 1 equal to the throttle channel.
     ef8:	82 33       	cpi	r24, 0x32	; 50
     efa:	a1 f4       	brne	.+40     	; 0xf24 <loop+0x470>
     efc:	20 91 bc 03 	lds	r18, 0x03BC	; 0x8003bc <receiver_input_channel_3>
     f00:	30 91 bd 03 	lds	r19, 0x03BD	; 0x8003bd <receiver_input_channel_3+0x1>
     f04:	30 93 b7 03 	sts	0x03B7, r19	; 0x8003b7 <esc_2+0x1>
     f08:	20 93 b6 03 	sts	0x03B6, r18	; 0x8003b6 <esc_2>
			else esc_2 = 1000;                                                                //If motor 2 is not requested set the pulse for the ESC to 1000us (off).
			if(data == '3' || data == '5')esc_3 = receiver_input_channel_3;                   //If motor 3 is requested set the pulse for motor 1 equal to the throttle channel.
     f0c:	83 33       	cpi	r24, 0x33	; 51
     f0e:	c9 f4       	brne	.+50     	; 0xf42 <loop+0x48e>
     f10:	13 c0       	rjmp	.+38     	; 0xf38 <loop+0x484>
			loop_counter = 0;                                                                 //Reset the loop_counter variable.
		}
		if(new_function_request == false){                                                  //When the throttle was in the lowest position do this.
			receiver_input_channel_3 = convert_receiver_channel(3);                           //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
			if(data == '1' || data == '5')esc_1 = receiver_input_channel_3;                   //If motor 1 is requested set the pulse for motor 1 equal to the throttle channel.
			else esc_1 = 1000;                                                                //If motor 1 is not requested set the pulse for the ESC to 1000us (off).
     f12:	28 ee       	ldi	r18, 0xE8	; 232
     f14:	33 e0       	ldi	r19, 0x03	; 3
     f16:	30 93 b9 03 	sts	0x03B9, r19	; 0x8003b9 <esc_1+0x1>
     f1a:	20 93 b8 03 	sts	0x03B8, r18	; 0x8003b8 <esc_1>
			if(data == '2' || data == '5')esc_2 = receiver_input_channel_3;                   //If motor 2 is requested set the pulse for motor 1 equal to the throttle channel.
     f1e:	82 33       	cpi	r24, 0x32	; 50
     f20:	19 f4       	brne	.+6      	; 0xf28 <loop+0x474>
     f22:	ec cf       	rjmp	.-40     	; 0xefc <loop+0x448>
     f24:	85 33       	cpi	r24, 0x35	; 53
     f26:	51 f3       	breq	.-44     	; 0xefc <loop+0x448>
			else esc_2 = 1000;                                                                //If motor 2 is not requested set the pulse for the ESC to 1000us (off).
     f28:	28 ee       	ldi	r18, 0xE8	; 232
     f2a:	33 e0       	ldi	r19, 0x03	; 3
     f2c:	30 93 b7 03 	sts	0x03B7, r19	; 0x8003b7 <esc_2+0x1>
     f30:	20 93 b6 03 	sts	0x03B6, r18	; 0x8003b6 <esc_2>
			if(data == '3' || data == '5')esc_3 = receiver_input_channel_3;                   //If motor 3 is requested set the pulse for motor 1 equal to the throttle channel.
     f34:	83 33       	cpi	r24, 0x33	; 51
     f36:	39 f4       	brne	.+14     	; 0xf46 <loop+0x492>
     f38:	20 91 bc 03 	lds	r18, 0x03BC	; 0x8003bc <receiver_input_channel_3>
     f3c:	30 91 bd 03 	lds	r19, 0x03BD	; 0x8003bd <receiver_input_channel_3+0x1>
     f40:	04 c0       	rjmp	.+8      	; 0xf4a <loop+0x496>
     f42:	85 33       	cpi	r24, 0x35	; 53
     f44:	c9 f3       	breq	.-14     	; 0xf38 <loop+0x484>
			else esc_3 = 1000;                                                                //If motor 3 is not requested set the pulse for the ESC to 1000us (off).
     f46:	28 ee       	ldi	r18, 0xE8	; 232
     f48:	33 e0       	ldi	r19, 0x03	; 3
     f4a:	30 93 b5 03 	sts	0x03B5, r19	; 0x8003b5 <esc_3+0x1>
     f4e:	20 93 b4 03 	sts	0x03B4, r18	; 0x8003b4 <esc_3>
			if(data == '4' || data == '5')esc_4 = receiver_input_channel_3;                   //If motor 4 is requested set the pulse for motor 1 equal to the throttle channel.
     f52:	84 53       	subi	r24, 0x34	; 52
     f54:	82 30       	cpi	r24, 0x02	; 2
     f56:	28 f4       	brcc	.+10     	; 0xf62 <loop+0x4ae>
     f58:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <receiver_input_channel_3>
     f5c:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <receiver_input_channel_3+0x1>
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <loop+0x4b2>
			else esc_4 = 1000;                                                                //If motor 4 is not requested set the pulse for the ESC to 1000us (off).
     f62:	88 ee       	ldi	r24, 0xE8	; 232
     f64:	93 e0       	ldi	r25, 0x03	; 3
     f66:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <esc_4+0x1>
     f6a:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <esc_4>

			esc_pulse_output();                                                               //Send the ESC control pulses.
     f6e:	0e 94 26 02 	call	0x44c	; 0x44c <_Z16esc_pulse_outputv>

			//For balancing the propellors it's possible to use the accelerometer to measure the vibrations.
			//if(eeprom_data[31] == 1)
			{                                                         //The MPU-6050 is installed
				Wire.beginTransmission(gyro_address);                                           //Start communication with the gyro.
     f72:	60 91 a4 03 	lds	r22, 0x03A4	; 0x8003a4 <gyro_address>
     f76:	70 91 a5 03 	lds	r23, 0x03A5	; 0x8003a5 <gyro_address+0x1>
     f7a:	87 e6       	ldi	r24, 0x67	; 103
     f7c:	94 e0       	ldi	r25, 0x04	; 4
     f7e:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <_ZN7TwoWire17beginTransmissionEi>
				Wire.write(0x3B);                                                               //Start reading @ register 43h and auto increment with every read.
     f82:	6b e3       	ldi	r22, 0x3B	; 59
     f84:	70 e0       	ldi	r23, 0x00	; 0
     f86:	87 e6       	ldi	r24, 0x67	; 103
     f88:	94 e0       	ldi	r25, 0x04	; 4
     f8a:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN7TwoWire5writeEi>
				Wire.endTransmission();                                                         //End the transmission.
     f8e:	87 e6       	ldi	r24, 0x67	; 103
     f90:	94 e0       	ldi	r25, 0x04	; 4
     f92:	0e 94 65 12 	call	0x24ca	; 0x24ca <_ZN7TwoWire15endTransmissionEv>
				Wire.requestFrom(gyro_address,6);                                               //Request 6 bytes from the gyro.
     f96:	60 91 a4 03 	lds	r22, 0x03A4	; 0x8003a4 <gyro_address>
     f9a:	70 91 a5 03 	lds	r23, 0x03A5	; 0x8003a5 <gyro_address+0x1>
     f9e:	46 e0       	ldi	r20, 0x06	; 6
     fa0:	50 e0       	ldi	r21, 0x00	; 0
     fa2:	87 e6       	ldi	r24, 0x67	; 103
     fa4:	94 e0       	ldi	r25, 0x04	; 4
     fa6:	0e 94 62 12 	call	0x24c4	; 0x24c4 <_ZN7TwoWire11requestFromEii>
				while(Wire.available() < 6);                                                    //Wait until the 6 bytes are received.
     faa:	87 e6       	ldi	r24, 0x67	; 103
     fac:	94 e0       	ldi	r25, 0x04	; 4
     fae:	0e 94 3a 11 	call	0x2274	; 0x2274 <_ZN7TwoWire9availableEv>
     fb2:	06 97       	sbiw	r24, 0x06	; 6
     fb4:	d4 f3       	brlt	.-12     	; 0xfaa <loop+0x4f6>
				acc_x = Wire.read()<<8|Wire.read();                                             //Add the low and high byte to the acc_x variable.
     fb6:	87 e6       	ldi	r24, 0x67	; 103
     fb8:	94 e0       	ldi	r25, 0x04	; 4
     fba:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN7TwoWire4readEv>
     fbe:	c8 2f       	mov	r28, r24
     fc0:	87 e6       	ldi	r24, 0x67	; 103
     fc2:	94 e0       	ldi	r25, 0x04	; 4
     fc4:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN7TwoWire4readEv>
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	3c 2f       	mov	r19, r28
     fce:	82 2b       	or	r24, r18
     fd0:	93 2b       	or	r25, r19
     fd2:	09 2e       	mov	r0, r25
     fd4:	00 0c       	add	r0, r0
     fd6:	aa 0b       	sbc	r26, r26
     fd8:	bb 0b       	sbc	r27, r27
     fda:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <acc_x>
     fde:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <acc_x+0x1>
     fe2:	a0 93 9e 03 	sts	0x039E, r26	; 0x80039e <acc_x+0x2>
     fe6:	b0 93 9f 03 	sts	0x039F, r27	; 0x80039f <acc_x+0x3>
				acc_y = Wire.read()<<8|Wire.read();                                             //Add the low and high byte to the acc_y variable.
     fea:	87 e6       	ldi	r24, 0x67	; 103
     fec:	94 e0       	ldi	r25, 0x04	; 4
     fee:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN7TwoWire4readEv>
     ff2:	c8 2f       	mov	r28, r24
     ff4:	87 e6       	ldi	r24, 0x67	; 103
     ff6:	94 e0       	ldi	r25, 0x04	; 4
     ff8:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN7TwoWire4readEv>
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	3c 2f       	mov	r19, r28
    1002:	82 2b       	or	r24, r18
    1004:	93 2b       	or	r25, r19
    1006:	09 2e       	mov	r0, r25
    1008:	00 0c       	add	r0, r0
    100a:	aa 0b       	sbc	r26, r26
    100c:	bb 0b       	sbc	r27, r27
    100e:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <acc_y>
    1012:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <acc_y+0x1>
    1016:	a0 93 9a 03 	sts	0x039A, r26	; 0x80039a <acc_y+0x2>
    101a:	b0 93 9b 03 	sts	0x039B, r27	; 0x80039b <acc_y+0x3>
				acc_z = Wire.read()<<8|Wire.read();                                             //Add the low and high byte to the acc_z variable.
    101e:	87 e6       	ldi	r24, 0x67	; 103
    1020:	94 e0       	ldi	r25, 0x04	; 4
    1022:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN7TwoWire4readEv>
    1026:	c8 2f       	mov	r28, r24
    1028:	87 e6       	ldi	r24, 0x67	; 103
    102a:	94 e0       	ldi	r25, 0x04	; 4
    102c:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN7TwoWire4readEv>
    1030:	e0 e0       	ldi	r30, 0x00	; 0
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	fc 2f       	mov	r31, r28
    1036:	e8 2b       	or	r30, r24
    1038:	f9 2b       	or	r31, r25
    103a:	cf 01       	movw	r24, r30
    103c:	0f 2e       	mov	r0, r31
    103e:	00 0c       	add	r0, r0
    1040:	aa 0b       	sbc	r26, r26
    1042:	bb 0b       	sbc	r27, r27
    1044:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <acc_z>
    1048:	90 93 95 03 	sts	0x0395, r25	; 0x800395 <acc_z+0x1>
    104c:	a0 93 96 03 	sts	0x0396, r26	; 0x800396 <acc_z+0x2>
    1050:	b0 93 97 03 	sts	0x0397, r27	; 0x800397 <acc_z+0x3>

				acc_total_vector[0] = sqrt((acc_x*acc_x)+(acc_y*acc_y)+(acc_z*acc_z));          //Calculate the total accelerometer vector.
    1054:	60 91 9c 03 	lds	r22, 0x039C	; 0x80039c <acc_x>
    1058:	70 91 9d 03 	lds	r23, 0x039D	; 0x80039d <acc_x+0x1>
    105c:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <acc_x+0x2>
    1060:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <acc_x+0x3>
    1064:	80 90 98 03 	lds	r8, 0x0398	; 0x800398 <acc_y>
    1068:	90 90 99 03 	lds	r9, 0x0399	; 0x800399 <acc_y+0x1>
    106c:	a0 90 9a 03 	lds	r10, 0x039A	; 0x80039a <acc_y+0x2>
    1070:	b0 90 9b 03 	lds	r11, 0x039B	; 0x80039b <acc_y+0x3>
    1074:	9b 01       	movw	r18, r22
    1076:	ac 01       	movw	r20, r24
    1078:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__mulsi3>
    107c:	6b 01       	movw	r12, r22
    107e:	7c 01       	movw	r14, r24
    1080:	a5 01       	movw	r20, r10
    1082:	94 01       	movw	r18, r8
    1084:	c5 01       	movw	r24, r10
    1086:	b4 01       	movw	r22, r8
    1088:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__mulsi3>
    108c:	c6 0e       	add	r12, r22
    108e:	d7 1e       	adc	r13, r23
    1090:	e8 1e       	adc	r14, r24
    1092:	f9 1e       	adc	r15, r25
    1094:	9f 01       	movw	r18, r30
    1096:	df 01       	movw	r26, r30
    1098:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__mulhisi3>
    109c:	6c 0d       	add	r22, r12
    109e:	7d 1d       	adc	r23, r13
    10a0:	8e 1d       	adc	r24, r14
    10a2:	9f 1d       	adc	r25, r15
    10a4:	0e 94 ce 0b 	call	0x179c	; 0x179c <__floatsisf>
    10a8:	0e 94 cd 0c 	call	0x199a	; 0x199a <sqrt>
    10ac:	0e 94 96 0b 	call	0x172c	; 0x172c <__fixsfsi>
    10b0:	60 93 44 03 	sts	0x0344, r22	; 0x800344 <acc_total_vector>
    10b4:	70 93 45 03 	sts	0x0345, r23	; 0x800345 <acc_total_vector+0x1>
    10b8:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <acc_total_vector+0x2>
    10bc:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <acc_total_vector+0x3>

				acc_av_vector = acc_total_vector[0];                                            //Copy the total vector to the accelerometer average vector variable.
    10c0:	40 e1       	ldi	r20, 0x10	; 16

				for(start = 16; start > 0; start--){                                            //Do this loop 16 times to create an array of accelrometer vectors.
					acc_total_vector[start] = acc_total_vector[start - 1];                        //Shift every variable one position up in the array.
    10c2:	24 2f       	mov	r18, r20
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	f9 01       	movw	r30, r18
    10c8:	ee 0f       	add	r30, r30
    10ca:	ff 1f       	adc	r31, r31
    10cc:	ee 0f       	add	r30, r30
    10ce:	ff 1f       	adc	r31, r31
    10d0:	e0 5c       	subi	r30, 0xC0	; 192
    10d2:	fc 4f       	sbci	r31, 0xFC	; 252
    10d4:	c0 80       	ld	r12, Z
    10d6:	d1 80       	ldd	r13, Z+1	; 0x01
    10d8:	e2 80       	ldd	r14, Z+2	; 0x02
    10da:	f3 80       	ldd	r15, Z+3	; 0x03
    10dc:	22 0f       	add	r18, r18
    10de:	33 1f       	adc	r19, r19
    10e0:	22 0f       	add	r18, r18
    10e2:	33 1f       	adc	r19, r19
    10e4:	f9 01       	movw	r30, r18
    10e6:	ec 5b       	subi	r30, 0xBC	; 188
    10e8:	fc 4f       	sbci	r31, 0xFC	; 252
    10ea:	c0 82       	st	Z, r12
    10ec:	d1 82       	std	Z+1, r13	; 0x01
    10ee:	e2 82       	std	Z+2, r14	; 0x02
    10f0:	f3 82       	std	Z+3, r15	; 0x03
					acc_av_vector += acc_total_vector[start];                                     //Add the array value to the acc_av_vector variable.
    10f2:	6c 0d       	add	r22, r12
    10f4:	7d 1d       	adc	r23, r13
    10f6:	8e 1d       	adc	r24, r14
    10f8:	9f 1d       	adc	r25, r15

				acc_total_vector[0] = sqrt((acc_x*acc_x)+(acc_y*acc_y)+(acc_z*acc_z));          //Calculate the total accelerometer vector.

				acc_av_vector = acc_total_vector[0];                                            //Copy the total vector to the accelerometer average vector variable.

				for(start = 16; start > 0; start--){                                            //Do this loop 16 times to create an array of accelrometer vectors.
    10fa:	41 50       	subi	r20, 0x01	; 1
    10fc:	11 f7       	brne	.-60     	; 0x10c2 <loop+0x60e>
    10fe:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <start>
					acc_total_vector[start] = acc_total_vector[start - 1];                        //Shift every variable one position up in the array.
					acc_av_vector += acc_total_vector[start];                                     //Add the array value to the acc_av_vector variable.
				}

				acc_av_vector /= 17;                                                            //Divide the acc_av_vector by 17 to get the avarage total accelerometer vector.
    1102:	21 e1       	ldi	r18, 0x11	; 17
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 e0       	ldi	r20, 0x00	; 0
    1108:	50 e0       	ldi	r21, 0x00	; 0
    110a:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__divmodsi4>
    110e:	20 93 40 03 	sts	0x0340, r18	; 0x800340 <acc_av_vector>
    1112:	30 93 41 03 	sts	0x0341, r19	; 0x800341 <acc_av_vector+0x1>
    1116:	40 93 42 03 	sts	0x0342, r20	; 0x800342 <acc_av_vector+0x2>
    111a:	50 93 43 03 	sts	0x0343, r21	; 0x800343 <acc_av_vector+0x3>

				if(vibration_counter < 20){                                                     //If the vibration_counter is less than 20 do this.
    111e:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <vibration_counter>
    1122:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <vibration_counter+0x1>
    1126:	c0 90 3c 03 	lds	r12, 0x033C	; 0x80033c <vibration_total_result>
    112a:	d0 90 3d 03 	lds	r13, 0x033D	; 0x80033d <vibration_total_result+0x1>
    112e:	e0 90 3e 03 	lds	r14, 0x033E	; 0x80033e <vibration_total_result+0x2>
    1132:	f0 90 3f 03 	lds	r15, 0x033F	; 0x80033f <vibration_total_result+0x3>
    1136:	84 31       	cpi	r24, 0x14	; 20
    1138:	91 05       	cpc	r25, r1
    113a:	3c f5       	brge	.+78     	; 0x118a <loop+0x6d6>
					vibration_counter ++;                                                         //Increment the vibration_counter variable.
    113c:	01 96       	adiw	r24, 0x01	; 1
    113e:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <vibration_counter+0x1>
    1142:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <vibration_counter>
					vibration_total_result += abs(acc_total_vector[0] - acc_av_vector);           //Add the absolute difference between the avarage vector and current vector to the vibration_total_result variable.
    1146:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <acc_total_vector>
    114a:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <acc_total_vector+0x1>
    114e:	a0 91 46 03 	lds	r26, 0x0346	; 0x800346 <acc_total_vector+0x2>
    1152:	b0 91 47 03 	lds	r27, 0x0347	; 0x800347 <acc_total_vector+0x3>
    1156:	82 1b       	sub	r24, r18
    1158:	93 0b       	sbc	r25, r19
    115a:	a4 0b       	sbc	r26, r20
    115c:	b5 0b       	sbc	r27, r21
    115e:	b7 ff       	sbrs	r27, 7
    1160:	07 c0       	rjmp	.+14     	; 0x1170 <loop+0x6bc>
    1162:	b0 95       	com	r27
    1164:	a0 95       	com	r26
    1166:	90 95       	com	r25
    1168:	81 95       	neg	r24
    116a:	9f 4f       	sbci	r25, 0xFF	; 255
    116c:	af 4f       	sbci	r26, 0xFF	; 255
    116e:	bf 4f       	sbci	r27, 0xFF	; 255
    1170:	8c 0d       	add	r24, r12
    1172:	9d 1d       	adc	r25, r13
    1174:	ae 1d       	adc	r26, r14
    1176:	bf 1d       	adc	r27, r15
    1178:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <vibration_total_result>
    117c:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <vibration_total_result+0x1>
    1180:	a0 93 3e 03 	sts	0x033E, r26	; 0x80033e <vibration_total_result+0x2>
    1184:	b0 93 3f 03 	sts	0x033F, r27	; 0x80033f <vibration_total_result+0x3>
    1188:	1c c0       	rjmp	.+56     	; 0x11c2 <loop+0x70e>
				}
				else{
					vibration_counter = 0;                                                        //If the vibration_counter is equal or larger than 20 do this.
    118a:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <vibration_counter+0x1>
    118e:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <vibration_counter>
					Serial.println(vibration_total_result/50);                                    //Print the total accelerometer vector divided by 50 on the serial monitor.
    1192:	c7 01       	movw	r24, r14
    1194:	b6 01       	movw	r22, r12
    1196:	22 e3       	ldi	r18, 0x32	; 50
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	40 e0       	ldi	r20, 0x00	; 0
    119c:	50 e0       	ldi	r21, 0x00	; 0
    119e:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__divmodsi4>
    11a2:	ba 01       	movw	r22, r20
    11a4:	a9 01       	movw	r20, r18
    11a6:	2a e0       	ldi	r18, 0x0A	; 10
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	8a ec       	ldi	r24, 0xCA	; 202
    11ac:	93 e0       	ldi	r25, 0x03	; 3
    11ae:	0e 94 07 10 	call	0x200e	; 0x200e <_ZN5Print7printlnEli>
					vibration_total_result = 0;                                                   //Reset the vibration_total_result variable.
    11b2:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <vibration_total_result>
    11b6:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <vibration_total_result+0x1>
    11ba:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <vibration_total_result+0x2>
    11be:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <vibration_total_result+0x3>
		}
	}
	///////////////////////////////////////////////////////////////////////////////////////////
	//When user sends a 'a' display the quadcopter angles.
	////////////////////////////////////////////////////////////////////////////////////////////
	if(data == 'a'){
    11c2:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <data>
    11c6:	81 36       	cpi	r24, 0x61	; 97
    11c8:	09 f0       	breq	.+2      	; 0x11cc <loop+0x718>
    11ca:	c6 c1       	rjmp	.+908    	; 0x1558 <loop+0xaa4>

		if(cal_int != 2000){
    11cc:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <cal_int>
    11d0:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <cal_int+0x1>
    11d4:	80 3d       	cpi	r24, 0xD0	; 208
    11d6:	97 40       	sbci	r25, 0x07	; 7
    11d8:	09 f4       	brne	.+2      	; 0x11dc <loop+0x728>
    11da:	e9 c0       	rjmp	.+466    	; 0x13ae <loop+0x8fa>
			Serial.print("Calibrating the gyro");
    11dc:	6d e7       	ldi	r22, 0x7D	; 125
    11de:	72 e0       	ldi	r23, 0x02	; 2
    11e0:	8a ec       	ldi	r24, 0xCA	; 202
    11e2:	93 e0       	ldi	r25, 0x03	; 3
    11e4:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN5Print5printEPKc>
			//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
			for (cal_int = 0; cal_int < 2000 ; cal_int ++){                                   //Take 2000 readings for calibration.
    11e8:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <cal_int+0x1>
    11ec:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <cal_int>
				if(cal_int % 125 == 0){
    11f0:	cd e7       	ldi	r28, 0x7D	; 125
    11f2:	d0 e0       	ldi	r29, 0x00	; 0
	if(data == 'a'){

		if(cal_int != 2000){
			Serial.print("Calibrating the gyro");
			//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
			for (cal_int = 0; cal_int < 2000 ; cal_int ++){                                   //Take 2000 readings for calibration.
    11f4:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <cal_int>
    11f8:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <cal_int+0x1>
    11fc:	80 3d       	cpi	r24, 0xD0	; 208
    11fe:	47 e0       	ldi	r20, 0x07	; 7
    1200:	94 07       	cpc	r25, r20
    1202:	0c f0       	brlt	.+2      	; 0x1206 <loop+0x752>
    1204:	8b c0       	rjmp	.+278    	; 0x131c <loop+0x868>
				if(cal_int % 125 == 0){
    1206:	be 01       	movw	r22, r28
    1208:	0e 94 80 16 	call	0x2d00	; 0x2d00 <__divmodhi4>
    120c:	89 2b       	or	r24, r25
    120e:	81 f4       	brne	.+32     	; 0x1230 <loop+0x77c>
					digitalWrite(LEDPIN_STATUS, !digitalRead(LEDPIN_STATUS));   //Change the led status to indicate calibration.
    1210:	8d e0       	ldi	r24, 0x0D	; 13
    1212:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <digitalRead>
    1216:	61 e0       	ldi	r22, 0x01	; 1
    1218:	89 2b       	or	r24, r25
    121a:	09 f0       	breq	.+2      	; 0x121e <loop+0x76a>
    121c:	60 e0       	ldi	r22, 0x00	; 0
    121e:	8d e0       	ldi	r24, 0x0D	; 13
    1220:	0e 94 c2 13 	call	0x2784	; 0x2784 <digitalWrite>
					Serial.print(".");
    1224:	6a eb       	ldi	r22, 0xBA	; 186
    1226:	71 e0       	ldi	r23, 0x01	; 1
    1228:	8a ec       	ldi	r24, 0xCA	; 202
    122a:	93 e0       	ldi	r25, 0x03	; 3
    122c:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN5Print5printEPKc>
				}
				gyro_signalen();                                                                //Read the gyro output.
    1230:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <_Z13gyro_signalenv>
				gyro_axis_cal[1] += gyro_axis[1];                                               //Ad roll value to gyro_roll_cal.
    1234:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <gyro_axis+0x2>
    1238:	70 91 03 03 	lds	r23, 0x0303	; 0x800303 <gyro_axis+0x3>
    123c:	07 2e       	mov	r0, r23
    123e:	00 0c       	add	r0, r0
    1240:	88 0b       	sbc	r24, r24
    1242:	99 0b       	sbc	r25, r25
    1244:	0e 94 ce 0b 	call	0x179c	; 0x179c <__floatsisf>
    1248:	9b 01       	movw	r18, r22
    124a:	ac 01       	movw	r20, r24
    124c:	60 91 de 02 	lds	r22, 0x02DE	; 0x8002de <gyro_axis_cal+0x4>
    1250:	70 91 df 02 	lds	r23, 0x02DF	; 0x8002df <gyro_axis_cal+0x5>
    1254:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <gyro_axis_cal+0x6>
    1258:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <gyro_axis_cal+0x7>
    125c:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__addsf3>
    1260:	60 93 de 02 	sts	0x02DE, r22	; 0x8002de <gyro_axis_cal+0x4>
    1264:	70 93 df 02 	sts	0x02DF, r23	; 0x8002df <gyro_axis_cal+0x5>
    1268:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <gyro_axis_cal+0x6>
    126c:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <gyro_axis_cal+0x7>
				gyro_axis_cal[2] += gyro_axis[2];                                               //Ad pitch value to gyro_pitch_cal.
    1270:	60 91 04 03 	lds	r22, 0x0304	; 0x800304 <gyro_axis+0x4>
    1274:	70 91 05 03 	lds	r23, 0x0305	; 0x800305 <gyro_axis+0x5>
    1278:	07 2e       	mov	r0, r23
    127a:	00 0c       	add	r0, r0
    127c:	88 0b       	sbc	r24, r24
    127e:	99 0b       	sbc	r25, r25
    1280:	0e 94 ce 0b 	call	0x179c	; 0x179c <__floatsisf>
    1284:	9b 01       	movw	r18, r22
    1286:	ac 01       	movw	r20, r24
    1288:	60 91 e2 02 	lds	r22, 0x02E2	; 0x8002e2 <gyro_axis_cal+0x8>
    128c:	70 91 e3 02 	lds	r23, 0x02E3	; 0x8002e3 <gyro_axis_cal+0x9>
    1290:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <gyro_axis_cal+0xa>
    1294:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <gyro_axis_cal+0xb>
    1298:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__addsf3>
    129c:	60 93 e2 02 	sts	0x02E2, r22	; 0x8002e2 <gyro_axis_cal+0x8>
    12a0:	70 93 e3 02 	sts	0x02E3, r23	; 0x8002e3 <gyro_axis_cal+0x9>
    12a4:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <gyro_axis_cal+0xa>
    12a8:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <gyro_axis_cal+0xb>
				gyro_axis_cal[3] += gyro_axis[3];                                               //Ad yaw value to gyro_yaw_cal.
    12ac:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <gyro_axis+0x6>
    12b0:	70 91 07 03 	lds	r23, 0x0307	; 0x800307 <gyro_axis+0x7>
    12b4:	07 2e       	mov	r0, r23
    12b6:	00 0c       	add	r0, r0
    12b8:	88 0b       	sbc	r24, r24
    12ba:	99 0b       	sbc	r25, r25
    12bc:	0e 94 ce 0b 	call	0x179c	; 0x179c <__floatsisf>
    12c0:	9b 01       	movw	r18, r22
    12c2:	ac 01       	movw	r20, r24
    12c4:	60 91 e6 02 	lds	r22, 0x02E6	; 0x8002e6 <gyro_axis_cal+0xc>
    12c8:	70 91 e7 02 	lds	r23, 0x02E7	; 0x8002e7 <gyro_axis_cal+0xd>
    12cc:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <gyro_axis_cal+0xe>
    12d0:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <gyro_axis_cal+0xf>
    12d4:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__addsf3>
    12d8:	60 93 e6 02 	sts	0x02E6, r22	; 0x8002e6 <gyro_axis_cal+0xc>
    12dc:	70 93 e7 02 	sts	0x02E7, r23	; 0x8002e7 <gyro_axis_cal+0xd>
    12e0:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <gyro_axis_cal+0xe>
    12e4:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <gyro_axis_cal+0xf>
				//We don't want the esc's to be beeping annoyingly. So let's give them a 1000us puls while calibrating the gyro.
				PORTD |= B11110000;                                                             //Set digital poort 4, 5, 6 and 7 high.
    12e8:	8b b1       	in	r24, 0x0b	; 11
    12ea:	80 6f       	ori	r24, 0xF0	; 240
    12ec:	8b b9       	out	0x0b, r24	; 11
				delayMicroseconds(1000);                                                        //Wait 1000us.
    12ee:	88 ee       	ldi	r24, 0xE8	; 232
    12f0:	93 e0       	ldi	r25, 0x03	; 3
    12f2:	0e 94 17 13 	call	0x262e	; 0x262e <delayMicroseconds>
				PORTD &= B00001111;                                                             //Set digital poort 4, 5, 6 and 7 low.
    12f6:	8b b1       	in	r24, 0x0b	; 11
    12f8:	8f 70       	andi	r24, 0x0F	; 15
    12fa:	8b b9       	out	0x0b, r24	; 11
				delay(3);                                                                       //Wait 3 milliseconds before the next loop.
    12fc:	63 e0       	ldi	r22, 0x03	; 3
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	0e 94 db 12 	call	0x25b6	; 0x25b6 <delay>
	if(data == 'a'){

		if(cal_int != 2000){
			Serial.print("Calibrating the gyro");
			//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
			for (cal_int = 0; cal_int < 2000 ; cal_int ++){                                   //Take 2000 readings for calibration.
    1308:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <cal_int>
    130c:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <cal_int+0x1>
    1310:	01 96       	adiw	r24, 0x01	; 1
    1312:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <cal_int+0x1>
    1316:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <cal_int>
    131a:	6c cf       	rjmp	.-296    	; 0x11f4 <loop+0x740>
				PORTD |= B11110000;                                                             //Set digital poort 4, 5, 6 and 7 high.
				delayMicroseconds(1000);                                                        //Wait 1000us.
				PORTD &= B00001111;                                                             //Set digital poort 4, 5, 6 and 7 low.
				delay(3);                                                                       //Wait 3 milliseconds before the next loop.
			}
			Serial.println(".");
    131c:	6a eb       	ldi	r22, 0xBA	; 186
    131e:	71 e0       	ldi	r23, 0x01	; 1
    1320:	8a ec       	ldi	r24, 0xCA	; 202
    1322:	93 e0       	ldi	r25, 0x03	; 3
    1324:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_ZN5Print7printlnEPKc>
			//Now that we have 2000 measures, we need to devide by 2000 to get the average gyro offset.
			gyro_axis_cal[1] /= 2000;                                                         //Divide the roll total by 2000.
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	4a ef       	ldi	r20, 0xFA	; 250
    132e:	54 e4       	ldi	r21, 0x44	; 68
    1330:	60 91 de 02 	lds	r22, 0x02DE	; 0x8002de <gyro_axis_cal+0x4>
    1334:	70 91 df 02 	lds	r23, 0x02DF	; 0x8002df <gyro_axis_cal+0x5>
    1338:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <gyro_axis_cal+0x6>
    133c:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <gyro_axis_cal+0x7>
    1340:	0e 94 24 0b 	call	0x1648	; 0x1648 <__divsf3>
    1344:	60 93 de 02 	sts	0x02DE, r22	; 0x8002de <gyro_axis_cal+0x4>
    1348:	70 93 df 02 	sts	0x02DF, r23	; 0x8002df <gyro_axis_cal+0x5>
    134c:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <gyro_axis_cal+0x6>
    1350:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <gyro_axis_cal+0x7>
			gyro_axis_cal[2] /= 2000;                                                         //Divide the pitch total by 2000.
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	4a ef       	ldi	r20, 0xFA	; 250
    135a:	54 e4       	ldi	r21, 0x44	; 68
    135c:	60 91 e2 02 	lds	r22, 0x02E2	; 0x8002e2 <gyro_axis_cal+0x8>
    1360:	70 91 e3 02 	lds	r23, 0x02E3	; 0x8002e3 <gyro_axis_cal+0x9>
    1364:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <gyro_axis_cal+0xa>
    1368:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <gyro_axis_cal+0xb>
    136c:	0e 94 24 0b 	call	0x1648	; 0x1648 <__divsf3>
    1370:	60 93 e2 02 	sts	0x02E2, r22	; 0x8002e2 <gyro_axis_cal+0x8>
    1374:	70 93 e3 02 	sts	0x02E3, r23	; 0x8002e3 <gyro_axis_cal+0x9>
    1378:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <gyro_axis_cal+0xa>
    137c:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <gyro_axis_cal+0xb>
			gyro_axis_cal[3] /= 2000;                                                         //Divide the yaw total by 2000.
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	4a ef       	ldi	r20, 0xFA	; 250
    1386:	54 e4       	ldi	r21, 0x44	; 68
    1388:	60 91 e6 02 	lds	r22, 0x02E6	; 0x8002e6 <gyro_axis_cal+0xc>
    138c:	70 91 e7 02 	lds	r23, 0x02E7	; 0x8002e7 <gyro_axis_cal+0xd>
    1390:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <gyro_axis_cal+0xe>
    1394:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <gyro_axis_cal+0xf>
    1398:	0e 94 24 0b 	call	0x1648	; 0x1648 <__divsf3>
    139c:	60 93 e6 02 	sts	0x02E6, r22	; 0x8002e6 <gyro_axis_cal+0xc>
    13a0:	70 93 e7 02 	sts	0x02E7, r23	; 0x8002e7 <gyro_axis_cal+0xd>
    13a4:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <gyro_axis_cal+0xe>
    13a8:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <gyro_axis_cal+0xf>
    13ac:	d5 c0       	rjmp	.+426    	; 0x1558 <loop+0xaa4>
		}
		else
		{
			///We don't want the esc's to be beeping annoyingly. So let's give them a 1000us puls while calibrating the gyro.
			PORTD |= B11110000;                                                               //Set digital poort 4, 5, 6 and 7 high.
    13ae:	8b b1       	in	r24, 0x0b	; 11
    13b0:	80 6f       	ori	r24, 0xF0	; 240
    13b2:	8b b9       	out	0x0b, r24	; 11
			delayMicroseconds(1000);                                                          //Wait 1000us.
    13b4:	88 ee       	ldi	r24, 0xE8	; 232
    13b6:	93 e0       	ldi	r25, 0x03	; 3
    13b8:	0e 94 17 13 	call	0x262e	; 0x262e <delayMicroseconds>
			PORTD &= B00001111;                                                               //Set digital poort 4, 5, 6 and 7 low.
    13bc:	8b b1       	in	r24, 0x0b	; 11
    13be:	8f 70       	andi	r24, 0x0F	; 15
    13c0:	8b b9       	out	0x0b, r24	; 11

			//Let's get the current gyro data.
			gyro_signalen();
    13c2:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <_Z13gyro_signalenv>

			//Gyro angle calculations
			//0.0000611 = 1 / (250Hz / 65.5)
			angle_pitch += gyro_pitch * 0.0000611;                                           //Calculate the traveled pitch angle and add this to the angle_pitch variable.
    13c6:	20 ed       	ldi	r18, 0xD0	; 208
    13c8:	32 e2       	ldi	r19, 0x22	; 34
    13ca:	40 e8       	ldi	r20, 0x80	; 128
    13cc:	58 e3       	ldi	r21, 0x38	; 56
    13ce:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <gyro_pitch>
    13d2:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <gyro_pitch+0x1>
    13d6:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <gyro_pitch+0x2>
    13da:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <gyro_pitch+0x3>
    13de:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__mulsf3>
    13e2:	9b 01       	movw	r18, r22
    13e4:	ac 01       	movw	r20, r24
    13e6:	60 91 f0 02 	lds	r22, 0x02F0	; 0x8002f0 <angle_pitch>
    13ea:	70 91 f1 02 	lds	r23, 0x02F1	; 0x8002f1 <angle_pitch+0x1>
    13ee:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <angle_pitch+0x2>
    13f2:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <angle_pitch+0x3>
    13f6:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__addsf3>
    13fa:	60 93 f0 02 	sts	0x02F0, r22	; 0x8002f0 <angle_pitch>
    13fe:	70 93 f1 02 	sts	0x02F1, r23	; 0x8002f1 <angle_pitch+0x1>
    1402:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <angle_pitch+0x2>
    1406:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <angle_pitch+0x3>
			angle_roll += gyro_roll * 0.0000611;                                             //Calculate the traveled roll angle and add this to the angle_roll variable.
    140a:	20 ed       	ldi	r18, 0xD0	; 208
    140c:	32 e2       	ldi	r19, 0x22	; 34
    140e:	40 e8       	ldi	r20, 0x80	; 128
    1410:	58 e3       	ldi	r21, 0x38	; 56
    1412:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <gyro_roll>
    1416:	70 91 f9 02 	lds	r23, 0x02F9	; 0x8002f9 <gyro_roll+0x1>
    141a:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <gyro_roll+0x2>
    141e:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <gyro_roll+0x3>
    1422:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__mulsf3>
    1426:	9b 01       	movw	r18, r22
    1428:	ac 01       	movw	r20, r24
    142a:	60 91 ec 02 	lds	r22, 0x02EC	; 0x8002ec <angle_roll>
    142e:	70 91 ed 02 	lds	r23, 0x02ED	; 0x8002ed <angle_roll+0x1>
    1432:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <angle_roll+0x2>
    1436:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <angle_roll+0x3>
    143a:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__addsf3>
    143e:	60 93 ec 02 	sts	0x02EC, r22	; 0x8002ec <angle_roll>
    1442:	70 93 ed 02 	sts	0x02ED, r23	; 0x8002ed <angle_roll+0x1>
    1446:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <angle_roll+0x2>
    144a:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <angle_roll+0x3>
				//angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;                 //Correct the drift of the gyro pitch angle with the accelerometer pitch angle.
				//angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;                    //Correct the drift of the gyro roll angle with the accelerometer roll angle.
			//}

			//We can't print all the data at once. This takes to long and the angular readings will be off.
			if(loop_counter == 0)Serial.print("Pitch: ");
    144e:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <loop_counter>
    1452:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <loop_counter+0x1>
    1456:	89 2b       	or	r24, r25
    1458:	31 f4       	brne	.+12     	; 0x1466 <loop+0x9b2>
    145a:	62 e9       	ldi	r22, 0x92	; 146
    145c:	72 e0       	ldi	r23, 0x02	; 2
    145e:	8a ec       	ldi	r24, 0xCA	; 202
    1460:	93 e0       	ldi	r25, 0x03	; 3
    1462:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN5Print5printEPKc>
			if(loop_counter == 1)Serial.print(angle_pitch ,0);
    1466:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <loop_counter>
    146a:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <loop_counter+0x1>
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	71 f4       	brne	.+28     	; 0x148e <loop+0x9da>
    1472:	40 91 f0 02 	lds	r20, 0x02F0	; 0x8002f0 <angle_pitch>
    1476:	50 91 f1 02 	lds	r21, 0x02F1	; 0x8002f1 <angle_pitch+0x1>
    147a:	60 91 f2 02 	lds	r22, 0x02F2	; 0x8002f2 <angle_pitch+0x2>
    147e:	70 91 f3 02 	lds	r23, 0x02F3	; 0x8002f3 <angle_pitch+0x3>
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	8a ec       	ldi	r24, 0xCA	; 202
    1488:	93 e0       	ldi	r25, 0x03	; 3
    148a:	0e 94 26 11 	call	0x224c	; 0x224c <_ZN5Print5printEdi>
			if(loop_counter == 2)Serial.print(" Roll: ");
    148e:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <loop_counter>
    1492:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <loop_counter+0x1>
    1496:	02 97       	sbiw	r24, 0x02	; 2
    1498:	31 f4       	brne	.+12     	; 0x14a6 <loop+0x9f2>
    149a:	6a e9       	ldi	r22, 0x9A	; 154
    149c:	72 e0       	ldi	r23, 0x02	; 2
    149e:	8a ec       	ldi	r24, 0xCA	; 202
    14a0:	93 e0       	ldi	r25, 0x03	; 3
    14a2:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN5Print5printEPKc>
			if(loop_counter == 3)Serial.print(angle_roll ,0);
    14a6:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <loop_counter>
    14aa:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <loop_counter+0x1>
    14ae:	03 97       	sbiw	r24, 0x03	; 3
    14b0:	71 f4       	brne	.+28     	; 0x14ce <loop+0xa1a>
    14b2:	40 91 ec 02 	lds	r20, 0x02EC	; 0x8002ec <angle_roll>
    14b6:	50 91 ed 02 	lds	r21, 0x02ED	; 0x8002ed <angle_roll+0x1>
    14ba:	60 91 ee 02 	lds	r22, 0x02EE	; 0x8002ee <angle_roll+0x2>
    14be:	70 91 ef 02 	lds	r23, 0x02EF	; 0x8002ef <angle_roll+0x3>
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	8a ec       	ldi	r24, 0xCA	; 202
    14c8:	93 e0       	ldi	r25, 0x03	; 3
    14ca:	0e 94 26 11 	call	0x224c	; 0x224c <_ZN5Print5printEdi>
			if(loop_counter == 4)Serial.print(" Yaw: ");
    14ce:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <loop_counter>
    14d2:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <loop_counter+0x1>
    14d6:	04 97       	sbiw	r24, 0x04	; 4
    14d8:	31 f4       	brne	.+12     	; 0x14e6 <loop+0xa32>
    14da:	62 ea       	ldi	r22, 0xA2	; 162
    14dc:	72 e0       	ldi	r23, 0x02	; 2
    14de:	8a ec       	ldi	r24, 0xCA	; 202
    14e0:	93 e0       	ldi	r25, 0x03	; 3
    14e2:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN5Print5printEPKc>
			if(loop_counter == 5)Serial.println(gyro_yaw / 65.5 ,0);
    14e6:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <loop_counter>
    14ea:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <loop_counter+0x1>
    14ee:	05 97       	sbiw	r24, 0x05	; 5
    14f0:	b1 f4       	brne	.+44     	; 0x151e <loop+0xa6a>
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	43 e8       	ldi	r20, 0x83	; 131
    14f8:	52 e4       	ldi	r21, 0x42	; 66
    14fa:	60 91 f4 02 	lds	r22, 0x02F4	; 0x8002f4 <gyro_yaw>
    14fe:	70 91 f5 02 	lds	r23, 0x02F5	; 0x8002f5 <gyro_yaw+0x1>
    1502:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <gyro_yaw+0x2>
    1506:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <gyro_yaw+0x3>
    150a:	0e 94 24 0b 	call	0x1648	; 0x1648 <__divsf3>
    150e:	ab 01       	movw	r20, r22
    1510:	bc 01       	movw	r22, r24
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	8a ec       	ldi	r24, 0xCA	; 202
    1518:	93 e0       	ldi	r25, 0x03	; 3
    151a:	0e 94 28 11 	call	0x2250	; 0x2250 <_ZN5Print7printlnEdi>

			loop_counter ++;
    151e:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <loop_counter>
    1522:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <loop_counter+0x1>
    1526:	01 96       	adiw	r24, 0x01	; 1
			if(loop_counter == 60)loop_counter = 0;
    1528:	8c 33       	cpi	r24, 0x3C	; 60
    152a:	91 05       	cpc	r25, r1
    152c:	29 f0       	breq	.+10     	; 0x1538 <loop+0xa84>
			if(loop_counter == 2)Serial.print(" Roll: ");
			if(loop_counter == 3)Serial.print(angle_roll ,0);
			if(loop_counter == 4)Serial.print(" Yaw: ");
			if(loop_counter == 5)Serial.println(gyro_yaw / 65.5 ,0);

			loop_counter ++;
    152e:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <loop_counter+0x1>
    1532:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <loop_counter>
    1536:	10 c0       	rjmp	.+32     	; 0x1558 <loop+0xaa4>
			if(loop_counter == 60)loop_counter = 0;
    1538:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <loop_counter+0x1>
    153c:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <loop_counter>
    1540:	0b c0       	rjmp	.+22     	; 0x1558 <loop+0xaa4>
			print_signals();                                                                  //Print the receiver values on the serial monitor.
			loop_counter = 0;                                                                 //Reset the loop_counter variable.
		}

		//For starting the motors: throttle low and yaw left (step 1).
		if(receiver_input_channel_3 < 1050 && receiver_input_channel_4 < 1050)start = 1;
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <start>
    1548:	59 cc       	rjmp	.-1870   	; 0xdfc <loop+0x348>
		//When yaw stick is back in the center position start the motors (step 2).
		if(start == 1 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1450)start = 2;
    154a:	82 e0       	ldi	r24, 0x02	; 2
    154c:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <start>
    1550:	68 cc       	rjmp	.-1840   	; 0xe22 <loop+0x36e>
		//Stopping the motors: throttle low and yaw right.
		if(start == 2 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1950)start = 0;
    1552:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <start>
    1556:	78 cc       	rjmp	.-1808   	; 0xe48 <loop+0x394>

			loop_counter ++;
			if(loop_counter == 60)loop_counter = 0;
		}
	}
}
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	ff 90       	pop	r15
    155e:	ef 90       	pop	r14
    1560:	df 90       	pop	r13
    1562:	cf 90       	pop	r12
    1564:	bf 90       	pop	r11
    1566:	af 90       	pop	r10
    1568:	9f 90       	pop	r9
    156a:	8f 90       	pop	r8
    156c:	08 95       	ret

0000156e <__subsf3>:
    156e:	50 58       	subi	r21, 0x80	; 128

00001570 <__addsf3>:
    1570:	bb 27       	eor	r27, r27
    1572:	aa 27       	eor	r26, r26
    1574:	0e 94 cf 0a 	call	0x159e	; 0x159e <__addsf3x>
    1578:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__fp_round>
    157c:	0e 94 12 0c 	call	0x1824	; 0x1824 <__fp_pscA>
    1580:	38 f0       	brcs	.+14     	; 0x1590 <__addsf3+0x20>
    1582:	0e 94 19 0c 	call	0x1832	; 0x1832 <__fp_pscB>
    1586:	20 f0       	brcs	.+8      	; 0x1590 <__addsf3+0x20>
    1588:	39 f4       	brne	.+14     	; 0x1598 <__addsf3+0x28>
    158a:	9f 3f       	cpi	r25, 0xFF	; 255
    158c:	19 f4       	brne	.+6      	; 0x1594 <__addsf3+0x24>
    158e:	26 f4       	brtc	.+8      	; 0x1598 <__addsf3+0x28>
    1590:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__fp_nan>
    1594:	0e f4       	brtc	.+2      	; 0x1598 <__addsf3+0x28>
    1596:	e0 95       	com	r30
    1598:	e7 fb       	bst	r30, 7
    159a:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <__fp_inf>

0000159e <__addsf3x>:
    159e:	e9 2f       	mov	r30, r25
    15a0:	0e 94 31 0c 	call	0x1862	; 0x1862 <__fp_split3>
    15a4:	58 f3       	brcs	.-42     	; 0x157c <__addsf3+0xc>
    15a6:	ba 17       	cp	r27, r26
    15a8:	62 07       	cpc	r22, r18
    15aa:	73 07       	cpc	r23, r19
    15ac:	84 07       	cpc	r24, r20
    15ae:	95 07       	cpc	r25, r21
    15b0:	20 f0       	brcs	.+8      	; 0x15ba <__addsf3x+0x1c>
    15b2:	79 f4       	brne	.+30     	; 0x15d2 <__addsf3x+0x34>
    15b4:	a6 f5       	brtc	.+104    	; 0x161e <__addsf3x+0x80>
    15b6:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <__fp_zero>
    15ba:	0e f4       	brtc	.+2      	; 0x15be <__addsf3x+0x20>
    15bc:	e0 95       	com	r30
    15be:	0b 2e       	mov	r0, r27
    15c0:	ba 2f       	mov	r27, r26
    15c2:	a0 2d       	mov	r26, r0
    15c4:	0b 01       	movw	r0, r22
    15c6:	b9 01       	movw	r22, r18
    15c8:	90 01       	movw	r18, r0
    15ca:	0c 01       	movw	r0, r24
    15cc:	ca 01       	movw	r24, r20
    15ce:	a0 01       	movw	r20, r0
    15d0:	11 24       	eor	r1, r1
    15d2:	ff 27       	eor	r31, r31
    15d4:	59 1b       	sub	r21, r25
    15d6:	99 f0       	breq	.+38     	; 0x15fe <__addsf3x+0x60>
    15d8:	59 3f       	cpi	r21, 0xF9	; 249
    15da:	50 f4       	brcc	.+20     	; 0x15f0 <__addsf3x+0x52>
    15dc:	50 3e       	cpi	r21, 0xE0	; 224
    15de:	68 f1       	brcs	.+90     	; 0x163a <__addsf3x+0x9c>
    15e0:	1a 16       	cp	r1, r26
    15e2:	f0 40       	sbci	r31, 0x00	; 0
    15e4:	a2 2f       	mov	r26, r18
    15e6:	23 2f       	mov	r18, r19
    15e8:	34 2f       	mov	r19, r20
    15ea:	44 27       	eor	r20, r20
    15ec:	58 5f       	subi	r21, 0xF8	; 248
    15ee:	f3 cf       	rjmp	.-26     	; 0x15d6 <__addsf3x+0x38>
    15f0:	46 95       	lsr	r20
    15f2:	37 95       	ror	r19
    15f4:	27 95       	ror	r18
    15f6:	a7 95       	ror	r26
    15f8:	f0 40       	sbci	r31, 0x00	; 0
    15fa:	53 95       	inc	r21
    15fc:	c9 f7       	brne	.-14     	; 0x15f0 <__addsf3x+0x52>
    15fe:	7e f4       	brtc	.+30     	; 0x161e <__addsf3x+0x80>
    1600:	1f 16       	cp	r1, r31
    1602:	ba 0b       	sbc	r27, r26
    1604:	62 0b       	sbc	r22, r18
    1606:	73 0b       	sbc	r23, r19
    1608:	84 0b       	sbc	r24, r20
    160a:	ba f0       	brmi	.+46     	; 0x163a <__addsf3x+0x9c>
    160c:	91 50       	subi	r25, 0x01	; 1
    160e:	a1 f0       	breq	.+40     	; 0x1638 <__addsf3x+0x9a>
    1610:	ff 0f       	add	r31, r31
    1612:	bb 1f       	adc	r27, r27
    1614:	66 1f       	adc	r22, r22
    1616:	77 1f       	adc	r23, r23
    1618:	88 1f       	adc	r24, r24
    161a:	c2 f7       	brpl	.-16     	; 0x160c <__addsf3x+0x6e>
    161c:	0e c0       	rjmp	.+28     	; 0x163a <__addsf3x+0x9c>
    161e:	ba 0f       	add	r27, r26
    1620:	62 1f       	adc	r22, r18
    1622:	73 1f       	adc	r23, r19
    1624:	84 1f       	adc	r24, r20
    1626:	48 f4       	brcc	.+18     	; 0x163a <__addsf3x+0x9c>
    1628:	87 95       	ror	r24
    162a:	77 95       	ror	r23
    162c:	67 95       	ror	r22
    162e:	b7 95       	ror	r27
    1630:	f7 95       	ror	r31
    1632:	9e 3f       	cpi	r25, 0xFE	; 254
    1634:	08 f0       	brcs	.+2      	; 0x1638 <__addsf3x+0x9a>
    1636:	b0 cf       	rjmp	.-160    	; 0x1598 <__addsf3+0x28>
    1638:	93 95       	inc	r25
    163a:	88 0f       	add	r24, r24
    163c:	08 f0       	brcs	.+2      	; 0x1640 <__addsf3x+0xa2>
    163e:	99 27       	eor	r25, r25
    1640:	ee 0f       	add	r30, r30
    1642:	97 95       	ror	r25
    1644:	87 95       	ror	r24
    1646:	08 95       	ret

00001648 <__divsf3>:
    1648:	0e 94 38 0b 	call	0x1670	; 0x1670 <__divsf3x>
    164c:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__fp_round>
    1650:	0e 94 19 0c 	call	0x1832	; 0x1832 <__fp_pscB>
    1654:	58 f0       	brcs	.+22     	; 0x166c <__divsf3+0x24>
    1656:	0e 94 12 0c 	call	0x1824	; 0x1824 <__fp_pscA>
    165a:	40 f0       	brcs	.+16     	; 0x166c <__divsf3+0x24>
    165c:	29 f4       	brne	.+10     	; 0x1668 <__divsf3+0x20>
    165e:	5f 3f       	cpi	r21, 0xFF	; 255
    1660:	29 f0       	breq	.+10     	; 0x166c <__divsf3+0x24>
    1662:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <__fp_inf>
    1666:	51 11       	cpse	r21, r1
    1668:	0c 94 54 0c 	jmp	0x18a8	; 0x18a8 <__fp_szero>
    166c:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__fp_nan>

00001670 <__divsf3x>:
    1670:	0e 94 31 0c 	call	0x1862	; 0x1862 <__fp_split3>
    1674:	68 f3       	brcs	.-38     	; 0x1650 <__divsf3+0x8>

00001676 <__divsf3_pse>:
    1676:	99 23       	and	r25, r25
    1678:	b1 f3       	breq	.-20     	; 0x1666 <__divsf3+0x1e>
    167a:	55 23       	and	r21, r21
    167c:	91 f3       	breq	.-28     	; 0x1662 <__divsf3+0x1a>
    167e:	95 1b       	sub	r25, r21
    1680:	55 0b       	sbc	r21, r21
    1682:	bb 27       	eor	r27, r27
    1684:	aa 27       	eor	r26, r26
    1686:	62 17       	cp	r22, r18
    1688:	73 07       	cpc	r23, r19
    168a:	84 07       	cpc	r24, r20
    168c:	38 f0       	brcs	.+14     	; 0x169c <__divsf3_pse+0x26>
    168e:	9f 5f       	subi	r25, 0xFF	; 255
    1690:	5f 4f       	sbci	r21, 0xFF	; 255
    1692:	22 0f       	add	r18, r18
    1694:	33 1f       	adc	r19, r19
    1696:	44 1f       	adc	r20, r20
    1698:	aa 1f       	adc	r26, r26
    169a:	a9 f3       	breq	.-22     	; 0x1686 <__divsf3_pse+0x10>
    169c:	35 d0       	rcall	.+106    	; 0x1708 <__divsf3_pse+0x92>
    169e:	0e 2e       	mov	r0, r30
    16a0:	3a f0       	brmi	.+14     	; 0x16b0 <__divsf3_pse+0x3a>
    16a2:	e0 e8       	ldi	r30, 0x80	; 128
    16a4:	32 d0       	rcall	.+100    	; 0x170a <__divsf3_pse+0x94>
    16a6:	91 50       	subi	r25, 0x01	; 1
    16a8:	50 40       	sbci	r21, 0x00	; 0
    16aa:	e6 95       	lsr	r30
    16ac:	00 1c       	adc	r0, r0
    16ae:	ca f7       	brpl	.-14     	; 0x16a2 <__divsf3_pse+0x2c>
    16b0:	2b d0       	rcall	.+86     	; 0x1708 <__divsf3_pse+0x92>
    16b2:	fe 2f       	mov	r31, r30
    16b4:	29 d0       	rcall	.+82     	; 0x1708 <__divsf3_pse+0x92>
    16b6:	66 0f       	add	r22, r22
    16b8:	77 1f       	adc	r23, r23
    16ba:	88 1f       	adc	r24, r24
    16bc:	bb 1f       	adc	r27, r27
    16be:	26 17       	cp	r18, r22
    16c0:	37 07       	cpc	r19, r23
    16c2:	48 07       	cpc	r20, r24
    16c4:	ab 07       	cpc	r26, r27
    16c6:	b0 e8       	ldi	r27, 0x80	; 128
    16c8:	09 f0       	breq	.+2      	; 0x16cc <__divsf3_pse+0x56>
    16ca:	bb 0b       	sbc	r27, r27
    16cc:	80 2d       	mov	r24, r0
    16ce:	bf 01       	movw	r22, r30
    16d0:	ff 27       	eor	r31, r31
    16d2:	93 58       	subi	r25, 0x83	; 131
    16d4:	5f 4f       	sbci	r21, 0xFF	; 255
    16d6:	3a f0       	brmi	.+14     	; 0x16e6 <__divsf3_pse+0x70>
    16d8:	9e 3f       	cpi	r25, 0xFE	; 254
    16da:	51 05       	cpc	r21, r1
    16dc:	78 f0       	brcs	.+30     	; 0x16fc <__divsf3_pse+0x86>
    16de:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <__fp_inf>
    16e2:	0c 94 54 0c 	jmp	0x18a8	; 0x18a8 <__fp_szero>
    16e6:	5f 3f       	cpi	r21, 0xFF	; 255
    16e8:	e4 f3       	brlt	.-8      	; 0x16e2 <__divsf3_pse+0x6c>
    16ea:	98 3e       	cpi	r25, 0xE8	; 232
    16ec:	d4 f3       	brlt	.-12     	; 0x16e2 <__divsf3_pse+0x6c>
    16ee:	86 95       	lsr	r24
    16f0:	77 95       	ror	r23
    16f2:	67 95       	ror	r22
    16f4:	b7 95       	ror	r27
    16f6:	f7 95       	ror	r31
    16f8:	9f 5f       	subi	r25, 0xFF	; 255
    16fa:	c9 f7       	brne	.-14     	; 0x16ee <__divsf3_pse+0x78>
    16fc:	88 0f       	add	r24, r24
    16fe:	91 1d       	adc	r25, r1
    1700:	96 95       	lsr	r25
    1702:	87 95       	ror	r24
    1704:	97 f9       	bld	r25, 7
    1706:	08 95       	ret
    1708:	e1 e0       	ldi	r30, 0x01	; 1
    170a:	66 0f       	add	r22, r22
    170c:	77 1f       	adc	r23, r23
    170e:	88 1f       	adc	r24, r24
    1710:	bb 1f       	adc	r27, r27
    1712:	62 17       	cp	r22, r18
    1714:	73 07       	cpc	r23, r19
    1716:	84 07       	cpc	r24, r20
    1718:	ba 07       	cpc	r27, r26
    171a:	20 f0       	brcs	.+8      	; 0x1724 <__divsf3_pse+0xae>
    171c:	62 1b       	sub	r22, r18
    171e:	73 0b       	sbc	r23, r19
    1720:	84 0b       	sbc	r24, r20
    1722:	ba 0b       	sbc	r27, r26
    1724:	ee 1f       	adc	r30, r30
    1726:	88 f7       	brcc	.-30     	; 0x170a <__divsf3_pse+0x94>
    1728:	e0 95       	com	r30
    172a:	08 95       	ret

0000172c <__fixsfsi>:
    172c:	0e 94 9d 0b 	call	0x173a	; 0x173a <__fixunssfsi>
    1730:	68 94       	set
    1732:	b1 11       	cpse	r27, r1
    1734:	0c 94 54 0c 	jmp	0x18a8	; 0x18a8 <__fp_szero>
    1738:	08 95       	ret

0000173a <__fixunssfsi>:
    173a:	0e 94 39 0c 	call	0x1872	; 0x1872 <__fp_splitA>
    173e:	88 f0       	brcs	.+34     	; 0x1762 <__fixunssfsi+0x28>
    1740:	9f 57       	subi	r25, 0x7F	; 127
    1742:	98 f0       	brcs	.+38     	; 0x176a <__fixunssfsi+0x30>
    1744:	b9 2f       	mov	r27, r25
    1746:	99 27       	eor	r25, r25
    1748:	b7 51       	subi	r27, 0x17	; 23
    174a:	b0 f0       	brcs	.+44     	; 0x1778 <__fixunssfsi+0x3e>
    174c:	e1 f0       	breq	.+56     	; 0x1786 <__fixunssfsi+0x4c>
    174e:	66 0f       	add	r22, r22
    1750:	77 1f       	adc	r23, r23
    1752:	88 1f       	adc	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	1a f0       	brmi	.+6      	; 0x175e <__fixunssfsi+0x24>
    1758:	ba 95       	dec	r27
    175a:	c9 f7       	brne	.-14     	; 0x174e <__fixunssfsi+0x14>
    175c:	14 c0       	rjmp	.+40     	; 0x1786 <__fixunssfsi+0x4c>
    175e:	b1 30       	cpi	r27, 0x01	; 1
    1760:	91 f0       	breq	.+36     	; 0x1786 <__fixunssfsi+0x4c>
    1762:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__fp_zero>
    1766:	b1 e0       	ldi	r27, 0x01	; 1
    1768:	08 95       	ret
    176a:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <__fp_zero>
    176e:	67 2f       	mov	r22, r23
    1770:	78 2f       	mov	r23, r24
    1772:	88 27       	eor	r24, r24
    1774:	b8 5f       	subi	r27, 0xF8	; 248
    1776:	39 f0       	breq	.+14     	; 0x1786 <__fixunssfsi+0x4c>
    1778:	b9 3f       	cpi	r27, 0xF9	; 249
    177a:	cc f3       	brlt	.-14     	; 0x176e <__fixunssfsi+0x34>
    177c:	86 95       	lsr	r24
    177e:	77 95       	ror	r23
    1780:	67 95       	ror	r22
    1782:	b3 95       	inc	r27
    1784:	d9 f7       	brne	.-10     	; 0x177c <__fixunssfsi+0x42>
    1786:	3e f4       	brtc	.+14     	; 0x1796 <__fixunssfsi+0x5c>
    1788:	90 95       	com	r25
    178a:	80 95       	com	r24
    178c:	70 95       	com	r23
    178e:	61 95       	neg	r22
    1790:	7f 4f       	sbci	r23, 0xFF	; 255
    1792:	8f 4f       	sbci	r24, 0xFF	; 255
    1794:	9f 4f       	sbci	r25, 0xFF	; 255
    1796:	08 95       	ret

00001798 <__floatunsisf>:
    1798:	e8 94       	clt
    179a:	09 c0       	rjmp	.+18     	; 0x17ae <__floatsisf+0x12>

0000179c <__floatsisf>:
    179c:	97 fb       	bst	r25, 7
    179e:	3e f4       	brtc	.+14     	; 0x17ae <__floatsisf+0x12>
    17a0:	90 95       	com	r25
    17a2:	80 95       	com	r24
    17a4:	70 95       	com	r23
    17a6:	61 95       	neg	r22
    17a8:	7f 4f       	sbci	r23, 0xFF	; 255
    17aa:	8f 4f       	sbci	r24, 0xFF	; 255
    17ac:	9f 4f       	sbci	r25, 0xFF	; 255
    17ae:	99 23       	and	r25, r25
    17b0:	a9 f0       	breq	.+42     	; 0x17dc <__floatsisf+0x40>
    17b2:	f9 2f       	mov	r31, r25
    17b4:	96 e9       	ldi	r25, 0x96	; 150
    17b6:	bb 27       	eor	r27, r27
    17b8:	93 95       	inc	r25
    17ba:	f6 95       	lsr	r31
    17bc:	87 95       	ror	r24
    17be:	77 95       	ror	r23
    17c0:	67 95       	ror	r22
    17c2:	b7 95       	ror	r27
    17c4:	f1 11       	cpse	r31, r1
    17c6:	f8 cf       	rjmp	.-16     	; 0x17b8 <__floatsisf+0x1c>
    17c8:	fa f4       	brpl	.+62     	; 0x1808 <__floatsisf+0x6c>
    17ca:	bb 0f       	add	r27, r27
    17cc:	11 f4       	brne	.+4      	; 0x17d2 <__floatsisf+0x36>
    17ce:	60 ff       	sbrs	r22, 0
    17d0:	1b c0       	rjmp	.+54     	; 0x1808 <__floatsisf+0x6c>
    17d2:	6f 5f       	subi	r22, 0xFF	; 255
    17d4:	7f 4f       	sbci	r23, 0xFF	; 255
    17d6:	8f 4f       	sbci	r24, 0xFF	; 255
    17d8:	9f 4f       	sbci	r25, 0xFF	; 255
    17da:	16 c0       	rjmp	.+44     	; 0x1808 <__floatsisf+0x6c>
    17dc:	88 23       	and	r24, r24
    17de:	11 f0       	breq	.+4      	; 0x17e4 <__floatsisf+0x48>
    17e0:	96 e9       	ldi	r25, 0x96	; 150
    17e2:	11 c0       	rjmp	.+34     	; 0x1806 <__floatsisf+0x6a>
    17e4:	77 23       	and	r23, r23
    17e6:	21 f0       	breq	.+8      	; 0x17f0 <__floatsisf+0x54>
    17e8:	9e e8       	ldi	r25, 0x8E	; 142
    17ea:	87 2f       	mov	r24, r23
    17ec:	76 2f       	mov	r23, r22
    17ee:	05 c0       	rjmp	.+10     	; 0x17fa <__floatsisf+0x5e>
    17f0:	66 23       	and	r22, r22
    17f2:	71 f0       	breq	.+28     	; 0x1810 <__floatsisf+0x74>
    17f4:	96 e8       	ldi	r25, 0x86	; 134
    17f6:	86 2f       	mov	r24, r22
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	60 e0       	ldi	r22, 0x00	; 0
    17fc:	2a f0       	brmi	.+10     	; 0x1808 <__floatsisf+0x6c>
    17fe:	9a 95       	dec	r25
    1800:	66 0f       	add	r22, r22
    1802:	77 1f       	adc	r23, r23
    1804:	88 1f       	adc	r24, r24
    1806:	da f7       	brpl	.-10     	; 0x17fe <__floatsisf+0x62>
    1808:	88 0f       	add	r24, r24
    180a:	96 95       	lsr	r25
    180c:	87 95       	ror	r24
    180e:	97 f9       	bld	r25, 7
    1810:	08 95       	ret

00001812 <__fp_inf>:
    1812:	97 f9       	bld	r25, 7
    1814:	9f 67       	ori	r25, 0x7F	; 127
    1816:	80 e8       	ldi	r24, 0x80	; 128
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	60 e0       	ldi	r22, 0x00	; 0
    181c:	08 95       	ret

0000181e <__fp_nan>:
    181e:	9f ef       	ldi	r25, 0xFF	; 255
    1820:	80 ec       	ldi	r24, 0xC0	; 192
    1822:	08 95       	ret

00001824 <__fp_pscA>:
    1824:	00 24       	eor	r0, r0
    1826:	0a 94       	dec	r0
    1828:	16 16       	cp	r1, r22
    182a:	17 06       	cpc	r1, r23
    182c:	18 06       	cpc	r1, r24
    182e:	09 06       	cpc	r0, r25
    1830:	08 95       	ret

00001832 <__fp_pscB>:
    1832:	00 24       	eor	r0, r0
    1834:	0a 94       	dec	r0
    1836:	12 16       	cp	r1, r18
    1838:	13 06       	cpc	r1, r19
    183a:	14 06       	cpc	r1, r20
    183c:	05 06       	cpc	r0, r21
    183e:	08 95       	ret

00001840 <__fp_round>:
    1840:	09 2e       	mov	r0, r25
    1842:	03 94       	inc	r0
    1844:	00 0c       	add	r0, r0
    1846:	11 f4       	brne	.+4      	; 0x184c <__fp_round+0xc>
    1848:	88 23       	and	r24, r24
    184a:	52 f0       	brmi	.+20     	; 0x1860 <__fp_round+0x20>
    184c:	bb 0f       	add	r27, r27
    184e:	40 f4       	brcc	.+16     	; 0x1860 <__fp_round+0x20>
    1850:	bf 2b       	or	r27, r31
    1852:	11 f4       	brne	.+4      	; 0x1858 <__fp_round+0x18>
    1854:	60 ff       	sbrs	r22, 0
    1856:	04 c0       	rjmp	.+8      	; 0x1860 <__fp_round+0x20>
    1858:	6f 5f       	subi	r22, 0xFF	; 255
    185a:	7f 4f       	sbci	r23, 0xFF	; 255
    185c:	8f 4f       	sbci	r24, 0xFF	; 255
    185e:	9f 4f       	sbci	r25, 0xFF	; 255
    1860:	08 95       	ret

00001862 <__fp_split3>:
    1862:	57 fd       	sbrc	r21, 7
    1864:	90 58       	subi	r25, 0x80	; 128
    1866:	44 0f       	add	r20, r20
    1868:	55 1f       	adc	r21, r21
    186a:	59 f0       	breq	.+22     	; 0x1882 <__fp_splitA+0x10>
    186c:	5f 3f       	cpi	r21, 0xFF	; 255
    186e:	71 f0       	breq	.+28     	; 0x188c <__fp_splitA+0x1a>
    1870:	47 95       	ror	r20

00001872 <__fp_splitA>:
    1872:	88 0f       	add	r24, r24
    1874:	97 fb       	bst	r25, 7
    1876:	99 1f       	adc	r25, r25
    1878:	61 f0       	breq	.+24     	; 0x1892 <__fp_splitA+0x20>
    187a:	9f 3f       	cpi	r25, 0xFF	; 255
    187c:	79 f0       	breq	.+30     	; 0x189c <__fp_splitA+0x2a>
    187e:	87 95       	ror	r24
    1880:	08 95       	ret
    1882:	12 16       	cp	r1, r18
    1884:	13 06       	cpc	r1, r19
    1886:	14 06       	cpc	r1, r20
    1888:	55 1f       	adc	r21, r21
    188a:	f2 cf       	rjmp	.-28     	; 0x1870 <__fp_split3+0xe>
    188c:	46 95       	lsr	r20
    188e:	f1 df       	rcall	.-30     	; 0x1872 <__fp_splitA>
    1890:	08 c0       	rjmp	.+16     	; 0x18a2 <__fp_splitA+0x30>
    1892:	16 16       	cp	r1, r22
    1894:	17 06       	cpc	r1, r23
    1896:	18 06       	cpc	r1, r24
    1898:	99 1f       	adc	r25, r25
    189a:	f1 cf       	rjmp	.-30     	; 0x187e <__fp_splitA+0xc>
    189c:	86 95       	lsr	r24
    189e:	71 05       	cpc	r23, r1
    18a0:	61 05       	cpc	r22, r1
    18a2:	08 94       	sec
    18a4:	08 95       	ret

000018a6 <__fp_zero>:
    18a6:	e8 94       	clt

000018a8 <__fp_szero>:
    18a8:	bb 27       	eor	r27, r27
    18aa:	66 27       	eor	r22, r22
    18ac:	77 27       	eor	r23, r23
    18ae:	cb 01       	movw	r24, r22
    18b0:	97 f9       	bld	r25, 7
    18b2:	08 95       	ret

000018b4 <__mulsf3>:
    18b4:	0e 94 6d 0c 	call	0x18da	; 0x18da <__mulsf3x>
    18b8:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__fp_round>
    18bc:	0e 94 12 0c 	call	0x1824	; 0x1824 <__fp_pscA>
    18c0:	38 f0       	brcs	.+14     	; 0x18d0 <__mulsf3+0x1c>
    18c2:	0e 94 19 0c 	call	0x1832	; 0x1832 <__fp_pscB>
    18c6:	20 f0       	brcs	.+8      	; 0x18d0 <__mulsf3+0x1c>
    18c8:	95 23       	and	r25, r21
    18ca:	11 f0       	breq	.+4      	; 0x18d0 <__mulsf3+0x1c>
    18cc:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <__fp_inf>
    18d0:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__fp_nan>
    18d4:	11 24       	eor	r1, r1
    18d6:	0c 94 54 0c 	jmp	0x18a8	; 0x18a8 <__fp_szero>

000018da <__mulsf3x>:
    18da:	0e 94 31 0c 	call	0x1862	; 0x1862 <__fp_split3>
    18de:	70 f3       	brcs	.-36     	; 0x18bc <__mulsf3+0x8>

000018e0 <__mulsf3_pse>:
    18e0:	95 9f       	mul	r25, r21
    18e2:	c1 f3       	breq	.-16     	; 0x18d4 <__mulsf3+0x20>
    18e4:	95 0f       	add	r25, r21
    18e6:	50 e0       	ldi	r21, 0x00	; 0
    18e8:	55 1f       	adc	r21, r21
    18ea:	62 9f       	mul	r22, r18
    18ec:	f0 01       	movw	r30, r0
    18ee:	72 9f       	mul	r23, r18
    18f0:	bb 27       	eor	r27, r27
    18f2:	f0 0d       	add	r31, r0
    18f4:	b1 1d       	adc	r27, r1
    18f6:	63 9f       	mul	r22, r19
    18f8:	aa 27       	eor	r26, r26
    18fa:	f0 0d       	add	r31, r0
    18fc:	b1 1d       	adc	r27, r1
    18fe:	aa 1f       	adc	r26, r26
    1900:	64 9f       	mul	r22, r20
    1902:	66 27       	eor	r22, r22
    1904:	b0 0d       	add	r27, r0
    1906:	a1 1d       	adc	r26, r1
    1908:	66 1f       	adc	r22, r22
    190a:	82 9f       	mul	r24, r18
    190c:	22 27       	eor	r18, r18
    190e:	b0 0d       	add	r27, r0
    1910:	a1 1d       	adc	r26, r1
    1912:	62 1f       	adc	r22, r18
    1914:	73 9f       	mul	r23, r19
    1916:	b0 0d       	add	r27, r0
    1918:	a1 1d       	adc	r26, r1
    191a:	62 1f       	adc	r22, r18
    191c:	83 9f       	mul	r24, r19
    191e:	a0 0d       	add	r26, r0
    1920:	61 1d       	adc	r22, r1
    1922:	22 1f       	adc	r18, r18
    1924:	74 9f       	mul	r23, r20
    1926:	33 27       	eor	r19, r19
    1928:	a0 0d       	add	r26, r0
    192a:	61 1d       	adc	r22, r1
    192c:	23 1f       	adc	r18, r19
    192e:	84 9f       	mul	r24, r20
    1930:	60 0d       	add	r22, r0
    1932:	21 1d       	adc	r18, r1
    1934:	82 2f       	mov	r24, r18
    1936:	76 2f       	mov	r23, r22
    1938:	6a 2f       	mov	r22, r26
    193a:	11 24       	eor	r1, r1
    193c:	9f 57       	subi	r25, 0x7F	; 127
    193e:	50 40       	sbci	r21, 0x00	; 0
    1940:	9a f0       	brmi	.+38     	; 0x1968 <__mulsf3_pse+0x88>
    1942:	f1 f0       	breq	.+60     	; 0x1980 <__mulsf3_pse+0xa0>
    1944:	88 23       	and	r24, r24
    1946:	4a f0       	brmi	.+18     	; 0x195a <__mulsf3_pse+0x7a>
    1948:	ee 0f       	add	r30, r30
    194a:	ff 1f       	adc	r31, r31
    194c:	bb 1f       	adc	r27, r27
    194e:	66 1f       	adc	r22, r22
    1950:	77 1f       	adc	r23, r23
    1952:	88 1f       	adc	r24, r24
    1954:	91 50       	subi	r25, 0x01	; 1
    1956:	50 40       	sbci	r21, 0x00	; 0
    1958:	a9 f7       	brne	.-22     	; 0x1944 <__mulsf3_pse+0x64>
    195a:	9e 3f       	cpi	r25, 0xFE	; 254
    195c:	51 05       	cpc	r21, r1
    195e:	80 f0       	brcs	.+32     	; 0x1980 <__mulsf3_pse+0xa0>
    1960:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <__fp_inf>
    1964:	0c 94 54 0c 	jmp	0x18a8	; 0x18a8 <__fp_szero>
    1968:	5f 3f       	cpi	r21, 0xFF	; 255
    196a:	e4 f3       	brlt	.-8      	; 0x1964 <__mulsf3_pse+0x84>
    196c:	98 3e       	cpi	r25, 0xE8	; 232
    196e:	d4 f3       	brlt	.-12     	; 0x1964 <__mulsf3_pse+0x84>
    1970:	86 95       	lsr	r24
    1972:	77 95       	ror	r23
    1974:	67 95       	ror	r22
    1976:	b7 95       	ror	r27
    1978:	f7 95       	ror	r31
    197a:	e7 95       	ror	r30
    197c:	9f 5f       	subi	r25, 0xFF	; 255
    197e:	c1 f7       	brne	.-16     	; 0x1970 <__mulsf3_pse+0x90>
    1980:	fe 2b       	or	r31, r30
    1982:	88 0f       	add	r24, r24
    1984:	91 1d       	adc	r25, r1
    1986:	96 95       	lsr	r25
    1988:	87 95       	ror	r24
    198a:	97 f9       	bld	r25, 7
    198c:	08 95       	ret
    198e:	19 f4       	brne	.+6      	; 0x1996 <__mulsf3_pse+0xb6>
    1990:	16 f4       	brtc	.+4      	; 0x1996 <__mulsf3_pse+0xb6>
    1992:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__fp_nan>
    1996:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <__fp_mpack>

0000199a <sqrt>:
    199a:	0e 94 39 0c 	call	0x1872	; 0x1872 <__fp_splitA>
    199e:	b8 f3       	brcs	.-18     	; 0x198e <__mulsf3_pse+0xae>
    19a0:	99 23       	and	r25, r25
    19a2:	c9 f3       	breq	.-14     	; 0x1996 <__mulsf3_pse+0xb6>
    19a4:	b6 f3       	brts	.-20     	; 0x1992 <__mulsf3_pse+0xb2>
    19a6:	9f 57       	subi	r25, 0x7F	; 127
    19a8:	55 0b       	sbc	r21, r21
    19aa:	87 ff       	sbrs	r24, 7
    19ac:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__fp_norm2>
    19b0:	00 24       	eor	r0, r0
    19b2:	a0 e6       	ldi	r26, 0x60	; 96
    19b4:	40 ea       	ldi	r20, 0xA0	; 160
    19b6:	90 01       	movw	r18, r0
    19b8:	80 58       	subi	r24, 0x80	; 128
    19ba:	56 95       	lsr	r21
    19bc:	97 95       	ror	r25
    19be:	28 f4       	brcc	.+10     	; 0x19ca <sqrt+0x30>
    19c0:	80 5c       	subi	r24, 0xC0	; 192
    19c2:	66 0f       	add	r22, r22
    19c4:	77 1f       	adc	r23, r23
    19c6:	88 1f       	adc	r24, r24
    19c8:	20 f0       	brcs	.+8      	; 0x19d2 <sqrt+0x38>
    19ca:	26 17       	cp	r18, r22
    19cc:	37 07       	cpc	r19, r23
    19ce:	48 07       	cpc	r20, r24
    19d0:	30 f4       	brcc	.+12     	; 0x19de <sqrt+0x44>
    19d2:	62 1b       	sub	r22, r18
    19d4:	73 0b       	sbc	r23, r19
    19d6:	84 0b       	sbc	r24, r20
    19d8:	20 29       	or	r18, r0
    19da:	31 29       	or	r19, r1
    19dc:	4a 2b       	or	r20, r26
    19de:	a6 95       	lsr	r26
    19e0:	17 94       	ror	r1
    19e2:	07 94       	ror	r0
    19e4:	20 25       	eor	r18, r0
    19e6:	31 25       	eor	r19, r1
    19e8:	4a 27       	eor	r20, r26
    19ea:	58 f7       	brcc	.-42     	; 0x19c2 <sqrt+0x28>
    19ec:	66 0f       	add	r22, r22
    19ee:	77 1f       	adc	r23, r23
    19f0:	88 1f       	adc	r24, r24
    19f2:	20 f0       	brcs	.+8      	; 0x19fc <sqrt+0x62>
    19f4:	26 17       	cp	r18, r22
    19f6:	37 07       	cpc	r19, r23
    19f8:	48 07       	cpc	r20, r24
    19fa:	30 f4       	brcc	.+12     	; 0x1a08 <sqrt+0x6e>
    19fc:	62 0b       	sbc	r22, r18
    19fe:	73 0b       	sbc	r23, r19
    1a00:	84 0b       	sbc	r24, r20
    1a02:	20 0d       	add	r18, r0
    1a04:	31 1d       	adc	r19, r1
    1a06:	41 1d       	adc	r20, r1
    1a08:	a0 95       	com	r26
    1a0a:	81 f7       	brne	.-32     	; 0x19ec <sqrt+0x52>
    1a0c:	b9 01       	movw	r22, r18
    1a0e:	84 2f       	mov	r24, r20
    1a10:	91 58       	subi	r25, 0x81	; 129
    1a12:	88 0f       	add	r24, r24
    1a14:	96 95       	lsr	r25
    1a16:	87 95       	ror	r24
    1a18:	08 95       	ret

00001a1a <__fp_mpack>:
    1a1a:	9f 3f       	cpi	r25, 0xFF	; 255
    1a1c:	31 f0       	breq	.+12     	; 0x1a2a <__fp_mpack_finite+0xc>

00001a1e <__fp_mpack_finite>:
    1a1e:	91 50       	subi	r25, 0x01	; 1
    1a20:	20 f4       	brcc	.+8      	; 0x1a2a <__fp_mpack_finite+0xc>
    1a22:	87 95       	ror	r24
    1a24:	77 95       	ror	r23
    1a26:	67 95       	ror	r22
    1a28:	b7 95       	ror	r27
    1a2a:	88 0f       	add	r24, r24
    1a2c:	91 1d       	adc	r25, r1
    1a2e:	96 95       	lsr	r25
    1a30:	87 95       	ror	r24
    1a32:	97 f9       	bld	r25, 7
    1a34:	08 95       	ret

00001a36 <__fp_norm2>:
    1a36:	91 50       	subi	r25, 0x01	; 1
    1a38:	50 40       	sbci	r21, 0x00	; 0
    1a3a:	66 0f       	add	r22, r22
    1a3c:	77 1f       	adc	r23, r23
    1a3e:	88 1f       	adc	r24, r24
    1a40:	d2 f7       	brpl	.-12     	; 0x1a36 <__fp_norm2>
    1a42:	08 95       	ret

00001a44 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1a44:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1a46:	91 8d       	ldd	r25, Z+25	; 0x19
    1a48:	22 8d       	ldd	r18, Z+26	; 0x1a
    1a4a:	89 2f       	mov	r24, r25
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	80 5c       	subi	r24, 0xC0	; 192
    1a50:	9f 4f       	sbci	r25, 0xFF	; 255
    1a52:	82 1b       	sub	r24, r18
    1a54:	91 09       	sbc	r25, r1
}
    1a56:	8f 73       	andi	r24, 0x3F	; 63
    1a58:	99 27       	eor	r25, r25
    1a5a:	08 95       	ret

00001a5c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1a5c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1a5e:	91 8d       	ldd	r25, Z+25	; 0x19
    1a60:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a62:	98 17       	cp	r25, r24
    1a64:	31 f0       	breq	.+12     	; 0x1a72 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1a66:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a68:	e8 0f       	add	r30, r24
    1a6a:	f1 1d       	adc	r31, r1
    1a6c:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1a72:	8f ef       	ldi	r24, 0xFF	; 255
    1a74:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1a76:	08 95       	ret

00001a78 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1a78:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1a7a:	91 8d       	ldd	r25, Z+25	; 0x19
    1a7c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a7e:	98 17       	cp	r25, r24
    1a80:	61 f0       	breq	.+24     	; 0x1a9a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1a82:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a84:	df 01       	movw	r26, r30
    1a86:	a8 0f       	add	r26, r24
    1a88:	b1 1d       	adc	r27, r1
    1a8a:	5d 96       	adiw	r26, 0x1d	; 29
    1a8c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1a8e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a90:	9f 5f       	subi	r25, 0xFF	; 255
    1a92:	9f 73       	andi	r25, 0x3F	; 63
    1a94:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1a9a:	8f ef       	ldi	r24, 0xFF	; 255
    1a9c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1a9e:	08 95       	ret

00001aa0 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1aa0:	85 ea       	ldi	r24, 0xA5	; 165
    1aa2:	9e e0       	ldi	r25, 0x0E	; 14
    1aa4:	89 2b       	or	r24, r25
    1aa6:	49 f0       	breq	.+18     	; 0x1aba <_Z14serialEventRunv+0x1a>
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	89 2b       	or	r24, r25
    1aae:	29 f0       	breq	.+10     	; 0x1aba <_Z14serialEventRunv+0x1a>
    1ab0:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <_Z17Serial0_availablev>
    1ab4:	81 11       	cpse	r24, r1
    1ab6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1aba:	08 95       	ret

00001abc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1abc:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1abe:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ac0:	df 01       	movw	r26, r30
    1ac2:	a8 0f       	add	r26, r24
    1ac4:	b1 1d       	adc	r27, r1
    1ac6:	a3 5a       	subi	r26, 0xA3	; 163
    1ac8:	bf 4f       	sbci	r27, 0xFF	; 255
    1aca:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1acc:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	01 96       	adiw	r24, 0x01	; 1
    1ad2:	8f 73       	andi	r24, 0x3F	; 63
    1ad4:	99 27       	eor	r25, r25
    1ad6:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1ad8:	a6 89       	ldd	r26, Z+22	; 0x16
    1ada:	b7 89       	ldd	r27, Z+23	; 0x17
    1adc:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1ade:	a0 89       	ldd	r26, Z+16	; 0x10
    1ae0:	b1 89       	ldd	r27, Z+17	; 0x11
    1ae2:	8c 91       	ld	r24, X
    1ae4:	80 64       	ori	r24, 0x40	; 64
    1ae6:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1ae8:	93 8d       	ldd	r25, Z+27	; 0x1b
    1aea:	84 8d       	ldd	r24, Z+28	; 0x1c
    1aec:	98 13       	cpse	r25, r24
    1aee:	06 c0       	rjmp	.+12     	; 0x1afc <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1af0:	02 88       	ldd	r0, Z+18	; 0x12
    1af2:	f3 89       	ldd	r31, Z+19	; 0x13
    1af4:	e0 2d       	mov	r30, r0
    1af6:	80 81       	ld	r24, Z
    1af8:	8f 7d       	andi	r24, 0xDF	; 223
    1afa:	80 83       	st	Z, r24
    1afc:	08 95       	ret

00001afe <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1afe:	cf 93       	push	r28
    1b00:	df 93       	push	r29
    1b02:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1b04:	88 8d       	ldd	r24, Y+24	; 0x18
    1b06:	88 23       	and	r24, r24
    1b08:	c9 f0       	breq	.+50     	; 0x1b3c <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1b0a:	ea 89       	ldd	r30, Y+18	; 0x12
    1b0c:	fb 89       	ldd	r31, Y+19	; 0x13
    1b0e:	80 81       	ld	r24, Z
    1b10:	85 fd       	sbrc	r24, 5
    1b12:	05 c0       	rjmp	.+10     	; 0x1b1e <_ZN14HardwareSerial5flushEv+0x20>
    1b14:	a8 89       	ldd	r26, Y+16	; 0x10
    1b16:	b9 89       	ldd	r27, Y+17	; 0x11
    1b18:	8c 91       	ld	r24, X
    1b1a:	86 fd       	sbrc	r24, 6
    1b1c:	0f c0       	rjmp	.+30     	; 0x1b3c <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	07 fc       	sbrc	r0, 7
    1b22:	f5 cf       	rjmp	.-22     	; 0x1b0e <_ZN14HardwareSerial5flushEv+0x10>
    1b24:	80 81       	ld	r24, Z
    1b26:	85 ff       	sbrs	r24, 5
    1b28:	f2 cf       	rjmp	.-28     	; 0x1b0e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1b2a:	a8 89       	ldd	r26, Y+16	; 0x10
    1b2c:	b9 89       	ldd	r27, Y+17	; 0x11
    1b2e:	8c 91       	ld	r24, X
    1b30:	85 ff       	sbrs	r24, 5
    1b32:	ed cf       	rjmp	.-38     	; 0x1b0e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1b34:	ce 01       	movw	r24, r28
    1b36:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1b3a:	e7 cf       	rjmp	.-50     	; 0x1b0a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1b3c:	df 91       	pop	r29
    1b3e:	cf 91       	pop	r28
    1b40:	08 95       	ret

00001b42 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1b42:	ef 92       	push	r14
    1b44:	ff 92       	push	r15
    1b46:	0f 93       	push	r16
    1b48:	1f 93       	push	r17
    1b4a:	cf 93       	push	r28
    1b4c:	df 93       	push	r29
    1b4e:	ec 01       	movw	r28, r24
  _written = true;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1b54:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b56:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b58:	98 13       	cpse	r25, r24
    1b5a:	05 c0       	rjmp	.+10     	; 0x1b66 <_ZN14HardwareSerial5writeEh+0x24>
    1b5c:	e8 89       	ldd	r30, Y+16	; 0x10
    1b5e:	f9 89       	ldd	r31, Y+17	; 0x11
    1b60:	80 81       	ld	r24, Z
    1b62:	85 fd       	sbrc	r24, 5
    1b64:	24 c0       	rjmp	.+72     	; 0x1bae <_ZN14HardwareSerial5writeEh+0x6c>
    1b66:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1b68:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1b6a:	10 e0       	ldi	r17, 0x00	; 0
    1b6c:	0f 5f       	subi	r16, 0xFF	; 255
    1b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b70:	0f 73       	andi	r16, 0x3F	; 63
    1b72:	11 27       	eor	r17, r17
    1b74:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1b76:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b78:	e8 12       	cpse	r14, r24
    1b7a:	0c c0       	rjmp	.+24     	; 0x1b94 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	07 fc       	sbrc	r0, 7
    1b80:	fa cf       	rjmp	.-12     	; 0x1b76 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1b82:	e8 89       	ldd	r30, Y+16	; 0x10
    1b84:	f9 89       	ldd	r31, Y+17	; 0x11
    1b86:	80 81       	ld	r24, Z
    1b88:	85 ff       	sbrs	r24, 5
    1b8a:	f5 cf       	rjmp	.-22     	; 0x1b76 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1b8c:	ce 01       	movw	r24, r28
    1b8e:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1b92:	f1 cf       	rjmp	.-30     	; 0x1b76 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1b94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b96:	fe 01       	movw	r30, r28
    1b98:	e8 0f       	add	r30, r24
    1b9a:	f1 1d       	adc	r31, r1
    1b9c:	e3 5a       	subi	r30, 0xA3	; 163
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1ba2:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1ba4:	ea 89       	ldd	r30, Y+18	; 0x12
    1ba6:	fb 89       	ldd	r31, Y+19	; 0x13
    1ba8:	80 81       	ld	r24, Z
    1baa:	80 62       	ori	r24, 0x20	; 32
    1bac:	07 c0       	rjmp	.+14     	; 0x1bbc <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1bae:	ee 89       	ldd	r30, Y+22	; 0x16
    1bb0:	ff 89       	ldd	r31, Y+23	; 0x17
    1bb2:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1bb4:	e8 89       	ldd	r30, Y+16	; 0x10
    1bb6:	f9 89       	ldd	r31, Y+17	; 0x11
    1bb8:	80 81       	ld	r24, Z
    1bba:	80 64       	ori	r24, 0x40	; 64
    1bbc:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	1f 91       	pop	r17
    1bc8:	0f 91       	pop	r16
    1bca:	ff 90       	pop	r15
    1bcc:	ef 90       	pop	r14
    1bce:	08 95       	ret

00001bd0 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1bd0:	cf 92       	push	r12
    1bd2:	df 92       	push	r13
    1bd4:	ef 92       	push	r14
    1bd6:	ff 92       	push	r15
    1bd8:	1f 93       	push	r17
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
    1bde:	ec 01       	movw	r28, r24
    1be0:	6a 01       	movw	r12, r20
    1be2:	7b 01       	movw	r14, r22
    1be4:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1be6:	e8 89       	ldd	r30, Y+16	; 0x10
    1be8:	f9 89       	ldd	r31, Y+17	; 0x11
    1bea:	82 e0       	ldi	r24, 0x02	; 2
    1bec:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1bee:	41 15       	cp	r20, r1
    1bf0:	51 4e       	sbci	r21, 0xE1	; 225
    1bf2:	61 05       	cpc	r22, r1
    1bf4:	71 05       	cpc	r23, r1
    1bf6:	b1 f0       	breq	.+44     	; 0x1c24 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1bf8:	60 e0       	ldi	r22, 0x00	; 0
    1bfa:	79 e0       	ldi	r23, 0x09	; 9
    1bfc:	8d e3       	ldi	r24, 0x3D	; 61
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	a7 01       	movw	r20, r14
    1c02:	96 01       	movw	r18, r12
    1c04:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__udivmodsi4>
    1c08:	da 01       	movw	r26, r20
    1c0a:	c9 01       	movw	r24, r18
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	a1 09       	sbc	r26, r1
    1c10:	b1 09       	sbc	r27, r1
    1c12:	b6 95       	lsr	r27
    1c14:	a7 95       	ror	r26
    1c16:	97 95       	ror	r25
    1c18:	87 95       	ror	r24
    1c1a:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1c1c:	41 15       	cp	r20, r1
    1c1e:	80 e1       	ldi	r24, 0x10	; 16
    1c20:	58 07       	cpc	r21, r24
    1c22:	a8 f0       	brcs	.+42     	; 0x1c4e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1c24:	e8 89       	ldd	r30, Y+16	; 0x10
    1c26:	f9 89       	ldd	r31, Y+17	; 0x11
    1c28:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1c2a:	60 e8       	ldi	r22, 0x80	; 128
    1c2c:	74 e8       	ldi	r23, 0x84	; 132
    1c2e:	8e e1       	ldi	r24, 0x1E	; 30
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	a7 01       	movw	r20, r14
    1c34:	96 01       	movw	r18, r12
    1c36:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__udivmodsi4>
    1c3a:	ba 01       	movw	r22, r20
    1c3c:	a9 01       	movw	r20, r18
    1c3e:	41 50       	subi	r20, 0x01	; 1
    1c40:	51 09       	sbc	r21, r1
    1c42:	61 09       	sbc	r22, r1
    1c44:	71 09       	sbc	r23, r1
    1c46:	76 95       	lsr	r23
    1c48:	67 95       	ror	r22
    1c4a:	57 95       	ror	r21
    1c4c:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1c4e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1c50:	fd 85       	ldd	r31, Y+13	; 0x0d
    1c52:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    1c54:	ee 85       	ldd	r30, Y+14	; 0x0e
    1c56:	ff 85       	ldd	r31, Y+15	; 0x0f
    1c58:	40 83       	st	Z, r20

  _written = false;
    1c5a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1c5c:	ec 89       	ldd	r30, Y+20	; 0x14
    1c5e:	fd 89       	ldd	r31, Y+21	; 0x15
    1c60:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1c62:	ea 89       	ldd	r30, Y+18	; 0x12
    1c64:	fb 89       	ldd	r31, Y+19	; 0x13
    1c66:	80 81       	ld	r24, Z
    1c68:	80 61       	ori	r24, 0x10	; 16
    1c6a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1c6c:	ea 89       	ldd	r30, Y+18	; 0x12
    1c6e:	fb 89       	ldd	r31, Y+19	; 0x13
    1c70:	80 81       	ld	r24, Z
    1c72:	88 60       	ori	r24, 0x08	; 8
    1c74:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1c76:	ea 89       	ldd	r30, Y+18	; 0x12
    1c78:	fb 89       	ldd	r31, Y+19	; 0x13
    1c7a:	80 81       	ld	r24, Z
    1c7c:	80 68       	ori	r24, 0x80	; 128
    1c7e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1c80:	ea 89       	ldd	r30, Y+18	; 0x12
    1c82:	fb 89       	ldd	r31, Y+19	; 0x13
    1c84:	80 81       	ld	r24, Z
    1c86:	8f 7d       	andi	r24, 0xDF	; 223
    1c88:	80 83       	st	Z, r24
}
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	1f 91       	pop	r17
    1c90:	ff 90       	pop	r15
    1c92:	ef 90       	pop	r14
    1c94:	df 90       	pop	r13
    1c96:	cf 90       	pop	r12
    1c98:	08 95       	ret

00001c9a <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1c9a:	1f 92       	push	r1
    1c9c:	0f 92       	push	r0
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	0f 92       	push	r0
    1ca2:	11 24       	eor	r1, r1
    1ca4:	2f 93       	push	r18
    1ca6:	8f 93       	push	r24
    1ca8:	9f 93       	push	r25
    1caa:	ef 93       	push	r30
    1cac:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1cae:	e0 91 da 03 	lds	r30, 0x03DA	; 0x8003da <Serial+0x10>
    1cb2:	f0 91 db 03 	lds	r31, 0x03DB	; 0x8003db <Serial+0x11>
    1cb6:	80 81       	ld	r24, Z
    1cb8:	e0 91 e0 03 	lds	r30, 0x03E0	; 0x8003e0 <Serial+0x16>
    1cbc:	f0 91 e1 03 	lds	r31, 0x03E1	; 0x8003e1 <Serial+0x17>
    1cc0:	82 fd       	sbrc	r24, 2
    1cc2:	12 c0       	rjmp	.+36     	; 0x1ce8 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1cc4:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1cc6:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <Serial+0x19>
    1cca:	8f 5f       	subi	r24, 0xFF	; 255
    1ccc:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1cce:	20 91 e4 03 	lds	r18, 0x03E4	; 0x8003e4 <Serial+0x1a>
    1cd2:	82 17       	cp	r24, r18
    1cd4:	51 f0       	breq	.+20     	; 0x1cea <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1cd6:	e0 91 e3 03 	lds	r30, 0x03E3	; 0x8003e3 <Serial+0x19>
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	e6 53       	subi	r30, 0x36	; 54
    1cde:	fc 4f       	sbci	r31, 0xFC	; 252
    1ce0:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1ce2:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <Serial+0x19>
    1ce6:	01 c0       	rjmp	.+2      	; 0x1cea <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1ce8:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1cea:	ff 91       	pop	r31
    1cec:	ef 91       	pop	r30
    1cee:	9f 91       	pop	r25
    1cf0:	8f 91       	pop	r24
    1cf2:	2f 91       	pop	r18
    1cf4:	0f 90       	pop	r0
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	0f 90       	pop	r0
    1cfa:	1f 90       	pop	r1
    1cfc:	18 95       	reti

00001cfe <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1cfe:	1f 92       	push	r1
    1d00:	0f 92       	push	r0
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	0f 92       	push	r0
    1d06:	11 24       	eor	r1, r1
    1d08:	2f 93       	push	r18
    1d0a:	3f 93       	push	r19
    1d0c:	4f 93       	push	r20
    1d0e:	5f 93       	push	r21
    1d10:	6f 93       	push	r22
    1d12:	7f 93       	push	r23
    1d14:	8f 93       	push	r24
    1d16:	9f 93       	push	r25
    1d18:	af 93       	push	r26
    1d1a:	bf 93       	push	r27
    1d1c:	ef 93       	push	r30
    1d1e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1d20:	8a ec       	ldi	r24, 0xCA	; 202
    1d22:	93 e0       	ldi	r25, 0x03	; 3
    1d24:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1d28:	ff 91       	pop	r31
    1d2a:	ef 91       	pop	r30
    1d2c:	bf 91       	pop	r27
    1d2e:	af 91       	pop	r26
    1d30:	9f 91       	pop	r25
    1d32:	8f 91       	pop	r24
    1d34:	7f 91       	pop	r23
    1d36:	6f 91       	pop	r22
    1d38:	5f 91       	pop	r21
    1d3a:	4f 91       	pop	r20
    1d3c:	3f 91       	pop	r19
    1d3e:	2f 91       	pop	r18
    1d40:	0f 90       	pop	r0
    1d42:	0f be       	out	0x3f, r0	; 63
    1d44:	0f 90       	pop	r0
    1d46:	1f 90       	pop	r1
    1d48:	18 95       	reti

00001d4a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1d4a:	8a ec       	ldi	r24, 0xCA	; 202
    1d4c:	93 e0       	ldi	r25, 0x03	; 3
    1d4e:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <_ZN14HardwareSerial9availableEv>
    1d52:	21 e0       	ldi	r18, 0x01	; 1
    1d54:	89 2b       	or	r24, r25
    1d56:	09 f4       	brne	.+2      	; 0x1d5a <_Z17Serial0_availablev+0x10>
    1d58:	20 e0       	ldi	r18, 0x00	; 0
}
    1d5a:	82 2f       	mov	r24, r18
    1d5c:	08 95       	ret

00001d5e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1d5e:	ea ec       	ldi	r30, 0xCA	; 202
    1d60:	f3 e0       	ldi	r31, 0x03	; 3
    1d62:	13 82       	std	Z+3, r1	; 0x03
    1d64:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1d66:	88 ee       	ldi	r24, 0xE8	; 232
    1d68:	93 e0       	ldi	r25, 0x03	; 3
    1d6a:	a0 e0       	ldi	r26, 0x00	; 0
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	84 83       	std	Z+4, r24	; 0x04
    1d70:	95 83       	std	Z+5, r25	; 0x05
    1d72:	a6 83       	std	Z+6, r26	; 0x06
    1d74:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1d76:	8d ea       	ldi	r24, 0xAD	; 173
    1d78:	92 e0       	ldi	r25, 0x02	; 2
    1d7a:	91 83       	std	Z+1, r25	; 0x01
    1d7c:	80 83       	st	Z, r24
    1d7e:	85 ec       	ldi	r24, 0xC5	; 197
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	95 87       	std	Z+13, r25	; 0x0d
    1d84:	84 87       	std	Z+12, r24	; 0x0c
    1d86:	84 ec       	ldi	r24, 0xC4	; 196
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	97 87       	std	Z+15, r25	; 0x0f
    1d8c:	86 87       	std	Z+14, r24	; 0x0e
    1d8e:	80 ec       	ldi	r24, 0xC0	; 192
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	91 8b       	std	Z+17, r25	; 0x11
    1d94:	80 8b       	std	Z+16, r24	; 0x10
    1d96:	81 ec       	ldi	r24, 0xC1	; 193
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	93 8b       	std	Z+19, r25	; 0x13
    1d9c:	82 8b       	std	Z+18, r24	; 0x12
    1d9e:	82 ec       	ldi	r24, 0xC2	; 194
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	95 8b       	std	Z+21, r25	; 0x15
    1da4:	84 8b       	std	Z+20, r24	; 0x14
    1da6:	86 ec       	ldi	r24, 0xC6	; 198
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	97 8b       	std	Z+23, r25	; 0x17
    1dac:	86 8b       	std	Z+22, r24	; 0x16
    1dae:	11 8e       	std	Z+25, r1	; 0x19
    1db0:	12 8e       	std	Z+26, r1	; 0x1a
    1db2:	13 8e       	std	Z+27, r1	; 0x1b
    1db4:	14 8e       	std	Z+28, r1	; 0x1c
    1db6:	08 95       	ret

00001db8 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    1db8:	08 95       	ret

00001dba <main>:

int main(void)
{
	init();
    1dba:	0e 94 22 13 	call	0x2644	; 0x2644 <init>

	initVariant();
    1dbe:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1dc2:	0e 94 98 03 	call	0x730	; 0x730 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1dc6:	c0 e5       	ldi	r28, 0x50	; 80
    1dc8:	dd e0       	ldi	r29, 0x0D	; 13
#endif
	
	setup();
    
	for (;;) {
		loop();
    1dca:	0e 94 5a 05 	call	0xab4	; 0xab4 <loop>
		if (serialEventRun) serialEventRun();
    1dce:	20 97       	sbiw	r28, 0x00	; 0
    1dd0:	e1 f3       	breq	.-8      	; 0x1dca <main+0x10>
    1dd2:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <_Z14serialEventRunv>
    1dd6:	f9 cf       	rjmp	.-14     	; 0x1dca <main+0x10>

00001dd8 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1dd8:	cf 92       	push	r12
    1dda:	df 92       	push	r13
    1ddc:	ef 92       	push	r14
    1dde:	ff 92       	push	r15
    1de0:	0f 93       	push	r16
    1de2:	1f 93       	push	r17
    1de4:	cf 93       	push	r28
    1de6:	df 93       	push	r29
    1de8:	6c 01       	movw	r12, r24
    1dea:	7a 01       	movw	r14, r20
    1dec:	8b 01       	movw	r16, r22
    1dee:	c0 e0       	ldi	r28, 0x00	; 0
    1df0:	d0 e0       	ldi	r29, 0x00	; 0
    1df2:	ce 15       	cp	r28, r14
    1df4:	df 05       	cpc	r29, r15
    1df6:	89 f0       	breq	.+34     	; 0x1e1a <_ZN5Print5writeEPKhj+0x42>
    1df8:	d8 01       	movw	r26, r16
    1dfa:	6d 91       	ld	r22, X+
    1dfc:	8d 01       	movw	r16, r26
    1dfe:	d6 01       	movw	r26, r12
    1e00:	ed 91       	ld	r30, X+
    1e02:	fc 91       	ld	r31, X
    1e04:	01 90       	ld	r0, Z+
    1e06:	f0 81       	ld	r31, Z
    1e08:	e0 2d       	mov	r30, r0
    1e0a:	c6 01       	movw	r24, r12
    1e0c:	09 95       	icall
    1e0e:	89 2b       	or	r24, r25
    1e10:	11 f4       	brne	.+4      	; 0x1e16 <_ZN5Print5writeEPKhj+0x3e>
    1e12:	7e 01       	movw	r14, r28
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <_ZN5Print5writeEPKhj+0x42>
    1e16:	21 96       	adiw	r28, 0x01	; 1
    1e18:	ec cf       	rjmp	.-40     	; 0x1df2 <_ZN5Print5writeEPKhj+0x1a>
    1e1a:	c7 01       	movw	r24, r14
    1e1c:	df 91       	pop	r29
    1e1e:	cf 91       	pop	r28
    1e20:	1f 91       	pop	r17
    1e22:	0f 91       	pop	r16
    1e24:	ff 90       	pop	r15
    1e26:	ef 90       	pop	r14
    1e28:	df 90       	pop	r13
    1e2a:	cf 90       	pop	r12
    1e2c:	08 95       	ret

00001e2e <_ZN5Print5writeEPKc>:
    1e2e:	61 15       	cp	r22, r1
    1e30:	71 05       	cpc	r23, r1
    1e32:	79 f0       	breq	.+30     	; 0x1e52 <_ZN5Print5writeEPKc+0x24>
    1e34:	fb 01       	movw	r30, r22
    1e36:	01 90       	ld	r0, Z+
    1e38:	00 20       	and	r0, r0
    1e3a:	e9 f7       	brne	.-6      	; 0x1e36 <_ZN5Print5writeEPKc+0x8>
    1e3c:	31 97       	sbiw	r30, 0x01	; 1
    1e3e:	af 01       	movw	r20, r30
    1e40:	46 1b       	sub	r20, r22
    1e42:	57 0b       	sbc	r21, r23
    1e44:	dc 01       	movw	r26, r24
    1e46:	ed 91       	ld	r30, X+
    1e48:	fc 91       	ld	r31, X
    1e4a:	02 80       	ldd	r0, Z+2	; 0x02
    1e4c:	f3 81       	ldd	r31, Z+3	; 0x03
    1e4e:	e0 2d       	mov	r30, r0
    1e50:	09 94       	ijmp
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	08 95       	ret

00001e58 <_ZN5Print5printEPKc>:
    1e58:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <_ZN5Print5writeEPKc>

00001e5c <_ZN5Print5printEc>:
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	ed 91       	ld	r30, X+
    1e60:	fc 91       	ld	r31, X
    1e62:	01 90       	ld	r0, Z+
    1e64:	f0 81       	ld	r31, Z
    1e66:	e0 2d       	mov	r30, r0
    1e68:	09 94       	ijmp

00001e6a <_ZN5Print7printlnEv>:
    1e6a:	69 eb       	ldi	r22, 0xB9	; 185
    1e6c:	72 e0       	ldi	r23, 0x02	; 2
    1e6e:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <_ZN5Print5writeEPKc>

00001e72 <_ZN5Print7printlnEPKc>:
    1e72:	0f 93       	push	r16
    1e74:	1f 93       	push	r17
    1e76:	cf 93       	push	r28
    1e78:	df 93       	push	r29
    1e7a:	ec 01       	movw	r28, r24
    1e7c:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <_ZN5Print5writeEPKc>
    1e80:	8c 01       	movw	r16, r24
    1e82:	ce 01       	movw	r24, r28
    1e84:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print7printlnEv>
    1e88:	80 0f       	add	r24, r16
    1e8a:	91 1f       	adc	r25, r17
    1e8c:	df 91       	pop	r29
    1e8e:	cf 91       	pop	r28
    1e90:	1f 91       	pop	r17
    1e92:	0f 91       	pop	r16
    1e94:	08 95       	ret

00001e96 <_ZN5Print11printNumberEmh>:
    1e96:	8f 92       	push	r8
    1e98:	9f 92       	push	r9
    1e9a:	af 92       	push	r10
    1e9c:	bf 92       	push	r11
    1e9e:	cf 92       	push	r12
    1ea0:	df 92       	push	r13
    1ea2:	ef 92       	push	r14
    1ea4:	ff 92       	push	r15
    1ea6:	0f 93       	push	r16
    1ea8:	1f 93       	push	r17
    1eaa:	cf 93       	push	r28
    1eac:	df 93       	push	r29
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	a1 97       	sbiw	r28, 0x21	; 33
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	f8 94       	cli
    1eb8:	de bf       	out	0x3e, r29	; 62
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	cd bf       	out	0x3d, r28	; 61
    1ebe:	7c 01       	movw	r14, r24
    1ec0:	d4 2e       	mov	r13, r20
    1ec2:	c5 2e       	mov	r12, r21
    1ec4:	db 01       	movw	r26, r22
    1ec6:	19 a2       	std	Y+33, r1	; 0x21
    1ec8:	22 30       	cpi	r18, 0x02	; 2
    1eca:	08 f4       	brcc	.+2      	; 0x1ece <_ZN5Print11printNumberEmh+0x38>
    1ecc:	2a e0       	ldi	r18, 0x0A	; 10
    1ece:	8e 01       	movw	r16, r28
    1ed0:	0f 5d       	subi	r16, 0xDF	; 223
    1ed2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed4:	82 2e       	mov	r8, r18
    1ed6:	91 2c       	mov	r9, r1
    1ed8:	a1 2c       	mov	r10, r1
    1eda:	b1 2c       	mov	r11, r1
    1edc:	6d 2d       	mov	r22, r13
    1ede:	7c 2d       	mov	r23, r12
    1ee0:	cd 01       	movw	r24, r26
    1ee2:	a5 01       	movw	r20, r10
    1ee4:	94 01       	movw	r18, r8
    1ee6:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__udivmodsi4>
    1eea:	d2 2e       	mov	r13, r18
    1eec:	c3 2e       	mov	r12, r19
    1eee:	da 01       	movw	r26, r20
    1ef0:	01 50       	subi	r16, 0x01	; 1
    1ef2:	11 09       	sbc	r17, r1
    1ef4:	6a 30       	cpi	r22, 0x0A	; 10
    1ef6:	71 05       	cpc	r23, r1
    1ef8:	81 05       	cpc	r24, r1
    1efa:	91 05       	cpc	r25, r1
    1efc:	10 f4       	brcc	.+4      	; 0x1f02 <_ZN5Print11printNumberEmh+0x6c>
    1efe:	60 5d       	subi	r22, 0xD0	; 208
    1f00:	01 c0       	rjmp	.+2      	; 0x1f04 <_ZN5Print11printNumberEmh+0x6e>
    1f02:	69 5c       	subi	r22, 0xC9	; 201
    1f04:	f8 01       	movw	r30, r16
    1f06:	60 83       	st	Z, r22
    1f08:	23 2b       	or	r18, r19
    1f0a:	24 2b       	or	r18, r20
    1f0c:	25 2b       	or	r18, r21
    1f0e:	31 f7       	brne	.-52     	; 0x1edc <_ZN5Print11printNumberEmh+0x46>
    1f10:	b8 01       	movw	r22, r16
    1f12:	c7 01       	movw	r24, r14
    1f14:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <_ZN5Print5writeEPKc>
    1f18:	a1 96       	adiw	r28, 0x21	; 33
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	f8 94       	cli
    1f1e:	de bf       	out	0x3e, r29	; 62
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	cd bf       	out	0x3d, r28	; 61
    1f24:	df 91       	pop	r29
    1f26:	cf 91       	pop	r28
    1f28:	1f 91       	pop	r17
    1f2a:	0f 91       	pop	r16
    1f2c:	ff 90       	pop	r15
    1f2e:	ef 90       	pop	r14
    1f30:	df 90       	pop	r13
    1f32:	cf 90       	pop	r12
    1f34:	bf 90       	pop	r11
    1f36:	af 90       	pop	r10
    1f38:	9f 90       	pop	r9
    1f3a:	8f 90       	pop	r8
    1f3c:	08 95       	ret

00001f3e <_ZN5Print5printEli>:
    1f3e:	cf 92       	push	r12
    1f40:	df 92       	push	r13
    1f42:	ef 92       	push	r14
    1f44:	ff 92       	push	r15
    1f46:	0f 93       	push	r16
    1f48:	1f 93       	push	r17
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
    1f4e:	ec 01       	movw	r28, r24
    1f50:	6a 01       	movw	r12, r20
    1f52:	7b 01       	movw	r14, r22
    1f54:	21 15       	cp	r18, r1
    1f56:	31 05       	cpc	r19, r1
    1f58:	79 f4       	brne	.+30     	; 0x1f78 <_ZN5Print5printEli+0x3a>
    1f5a:	e8 81       	ld	r30, Y
    1f5c:	f9 81       	ldd	r31, Y+1	; 0x01
    1f5e:	01 90       	ld	r0, Z+
    1f60:	f0 81       	ld	r31, Z
    1f62:	e0 2d       	mov	r30, r0
    1f64:	64 2f       	mov	r22, r20
    1f66:	df 91       	pop	r29
    1f68:	cf 91       	pop	r28
    1f6a:	1f 91       	pop	r17
    1f6c:	0f 91       	pop	r16
    1f6e:	ff 90       	pop	r15
    1f70:	ef 90       	pop	r14
    1f72:	df 90       	pop	r13
    1f74:	cf 90       	pop	r12
    1f76:	09 94       	ijmp
    1f78:	2a 30       	cpi	r18, 0x0A	; 10
    1f7a:	31 05       	cpc	r19, r1
    1f7c:	e9 f4       	brne	.+58     	; 0x1fb8 <_ZN5Print5printEli+0x7a>
    1f7e:	77 ff       	sbrs	r23, 7
    1f80:	1a c0       	rjmp	.+52     	; 0x1fb6 <_ZN5Print5printEli+0x78>
    1f82:	6d e2       	ldi	r22, 0x2D	; 45
    1f84:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <_ZN5Print5printEc>
    1f88:	8c 01       	movw	r16, r24
    1f8a:	44 27       	eor	r20, r20
    1f8c:	55 27       	eor	r21, r21
    1f8e:	ba 01       	movw	r22, r20
    1f90:	4c 19       	sub	r20, r12
    1f92:	5d 09       	sbc	r21, r13
    1f94:	6e 09       	sbc	r22, r14
    1f96:	7f 09       	sbc	r23, r15
    1f98:	2a e0       	ldi	r18, 0x0A	; 10
    1f9a:	ce 01       	movw	r24, r28
    1f9c:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <_ZN5Print11printNumberEmh>
    1fa0:	80 0f       	add	r24, r16
    1fa2:	91 1f       	adc	r25, r17
    1fa4:	df 91       	pop	r29
    1fa6:	cf 91       	pop	r28
    1fa8:	1f 91       	pop	r17
    1faa:	0f 91       	pop	r16
    1fac:	ff 90       	pop	r15
    1fae:	ef 90       	pop	r14
    1fb0:	df 90       	pop	r13
    1fb2:	cf 90       	pop	r12
    1fb4:	08 95       	ret
    1fb6:	2a e0       	ldi	r18, 0x0A	; 10
    1fb8:	b7 01       	movw	r22, r14
    1fba:	a6 01       	movw	r20, r12
    1fbc:	ce 01       	movw	r24, r28
    1fbe:	df 91       	pop	r29
    1fc0:	cf 91       	pop	r28
    1fc2:	1f 91       	pop	r17
    1fc4:	0f 91       	pop	r16
    1fc6:	ff 90       	pop	r15
    1fc8:	ef 90       	pop	r14
    1fca:	df 90       	pop	r13
    1fcc:	cf 90       	pop	r12
    1fce:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <_ZN5Print11printNumberEmh>

00001fd2 <_ZN5Print5printEii>:
    1fd2:	9a 01       	movw	r18, r20
    1fd4:	ab 01       	movw	r20, r22
    1fd6:	77 0f       	add	r23, r23
    1fd8:	66 0b       	sbc	r22, r22
    1fda:	77 0b       	sbc	r23, r23
    1fdc:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <_ZN5Print5printEli>

00001fe0 <_ZN5Print7printlnEii>:
    1fe0:	0f 93       	push	r16
    1fe2:	1f 93       	push	r17
    1fe4:	cf 93       	push	r28
    1fe6:	df 93       	push	r29
    1fe8:	ec 01       	movw	r28, r24
    1fea:	9a 01       	movw	r18, r20
    1fec:	ab 01       	movw	r20, r22
    1fee:	77 0f       	add	r23, r23
    1ff0:	66 0b       	sbc	r22, r22
    1ff2:	77 0b       	sbc	r23, r23
    1ff4:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <_ZN5Print5printEli>
    1ff8:	8c 01       	movw	r16, r24
    1ffa:	ce 01       	movw	r24, r28
    1ffc:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print7printlnEv>
    2000:	80 0f       	add	r24, r16
    2002:	91 1f       	adc	r25, r17
    2004:	df 91       	pop	r29
    2006:	cf 91       	pop	r28
    2008:	1f 91       	pop	r17
    200a:	0f 91       	pop	r16
    200c:	08 95       	ret

0000200e <_ZN5Print7printlnEli>:
    200e:	0f 93       	push	r16
    2010:	1f 93       	push	r17
    2012:	cf 93       	push	r28
    2014:	df 93       	push	r29
    2016:	ec 01       	movw	r28, r24
    2018:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <_ZN5Print5printEli>
    201c:	8c 01       	movw	r16, r24
    201e:	ce 01       	movw	r24, r28
    2020:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print7printlnEv>
    2024:	80 0f       	add	r24, r16
    2026:	91 1f       	adc	r25, r17
    2028:	df 91       	pop	r29
    202a:	cf 91       	pop	r28
    202c:	1f 91       	pop	r17
    202e:	0f 91       	pop	r16
    2030:	08 95       	ret

00002032 <_ZN5Print5printEmi>:
    2032:	21 15       	cp	r18, r1
    2034:	31 05       	cpc	r19, r1
    2036:	41 f4       	brne	.+16     	; 0x2048 <_ZN5Print5printEmi+0x16>
    2038:	dc 01       	movw	r26, r24
    203a:	ed 91       	ld	r30, X+
    203c:	fc 91       	ld	r31, X
    203e:	01 90       	ld	r0, Z+
    2040:	f0 81       	ld	r31, Z
    2042:	e0 2d       	mov	r30, r0
    2044:	64 2f       	mov	r22, r20
    2046:	09 94       	ijmp
    2048:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <_ZN5Print11printNumberEmh>

0000204c <_ZN5Print5printEhi>:
    204c:	9a 01       	movw	r18, r20
    204e:	46 2f       	mov	r20, r22
    2050:	50 e0       	ldi	r21, 0x00	; 0
    2052:	60 e0       	ldi	r22, 0x00	; 0
    2054:	70 e0       	ldi	r23, 0x00	; 0
    2056:	0c 94 19 10 	jmp	0x2032	; 0x2032 <_ZN5Print5printEmi>

0000205a <_ZN5Print7printlnEhi>:
    205a:	0f 93       	push	r16
    205c:	1f 93       	push	r17
    205e:	cf 93       	push	r28
    2060:	df 93       	push	r29
    2062:	ec 01       	movw	r28, r24
    2064:	9a 01       	movw	r18, r20
    2066:	46 2f       	mov	r20, r22
    2068:	50 e0       	ldi	r21, 0x00	; 0
    206a:	60 e0       	ldi	r22, 0x00	; 0
    206c:	70 e0       	ldi	r23, 0x00	; 0
    206e:	0e 94 19 10 	call	0x2032	; 0x2032 <_ZN5Print5printEmi>
    2072:	8c 01       	movw	r16, r24
    2074:	ce 01       	movw	r24, r28
    2076:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print7printlnEv>
    207a:	80 0f       	add	r24, r16
    207c:	91 1f       	adc	r25, r17
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	1f 91       	pop	r17
    2084:	0f 91       	pop	r16
    2086:	08 95       	ret

00002088 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    2088:	4f 92       	push	r4
    208a:	5f 92       	push	r5
    208c:	6f 92       	push	r6
    208e:	7f 92       	push	r7
    2090:	8f 92       	push	r8
    2092:	9f 92       	push	r9
    2094:	af 92       	push	r10
    2096:	bf 92       	push	r11
    2098:	cf 92       	push	r12
    209a:	df 92       	push	r13
    209c:	ef 92       	push	r14
    209e:	ff 92       	push	r15
    20a0:	cf 93       	push	r28
    20a2:	df 93       	push	r29
    20a4:	ec 01       	movw	r28, r24
    20a6:	6a 01       	movw	r12, r20
    20a8:	7b 01       	movw	r14, r22
    20aa:	b2 2e       	mov	r11, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    20ac:	9a 01       	movw	r18, r20
    20ae:	ab 01       	movw	r20, r22
    20b0:	c7 01       	movw	r24, r14
    20b2:	b6 01       	movw	r22, r12
    20b4:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <__unordsf2>
    20b8:	88 23       	and	r24, r24
    20ba:	19 f0       	breq	.+6      	; 0x20c2 <_ZN5Print10printFloatEdh+0x3a>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    20bc:	6c eb       	ldi	r22, 0xBC	; 188
    20be:	72 e0       	ldi	r23, 0x02	; 2
    20c0:	27 c0       	rjmp	.+78     	; 0x2110 <_ZN5Print10printFloatEdh+0x88>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    20c2:	26 01       	movw	r4, r12
    20c4:	37 01       	movw	r6, r14
    20c6:	e8 94       	clt
    20c8:	77 f8       	bld	r7, 7
    20ca:	2f ef       	ldi	r18, 0xFF	; 255
    20cc:	3f ef       	ldi	r19, 0xFF	; 255
    20ce:	4f e7       	ldi	r20, 0x7F	; 127
    20d0:	5f e7       	ldi	r21, 0x7F	; 127
    20d2:	c3 01       	movw	r24, r6
    20d4:	b2 01       	movw	r22, r4
    20d6:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <__unordsf2>
    20da:	81 11       	cpse	r24, r1
    20dc:	0d c0       	rjmp	.+26     	; 0x20f8 <_ZN5Print10printFloatEdh+0x70>
    20de:	2f ef       	ldi	r18, 0xFF	; 255
    20e0:	3f ef       	ldi	r19, 0xFF	; 255
    20e2:	4f e7       	ldi	r20, 0x7F	; 127
    20e4:	5f e7       	ldi	r21, 0x7F	; 127
    20e6:	c3 01       	movw	r24, r6
    20e8:	b2 01       	movw	r22, r4
    20ea:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__cmpsf2>
    20ee:	18 16       	cp	r1, r24
    20f0:	1c f4       	brge	.+6      	; 0x20f8 <_ZN5Print10printFloatEdh+0x70>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    20f2:	60 ec       	ldi	r22, 0xC0	; 192
    20f4:	72 e0       	ldi	r23, 0x02	; 2
    20f6:	0c c0       	rjmp	.+24     	; 0x2110 <_ZN5Print10printFloatEdh+0x88>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    20f8:	2f ef       	ldi	r18, 0xFF	; 255
    20fa:	3f ef       	ldi	r19, 0xFF	; 255
    20fc:	4f e7       	ldi	r20, 0x7F	; 127
    20fe:	5f e4       	ldi	r21, 0x4F	; 79
    2100:	c7 01       	movw	r24, r14
    2102:	b6 01       	movw	r22, r12
    2104:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__gesf2>
    2108:	18 16       	cp	r1, r24
    210a:	9c f4       	brge	.+38     	; 0x2132 <_ZN5Print10printFloatEdh+0xaa>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    210c:	64 ec       	ldi	r22, 0xC4	; 196
    210e:	72 e0       	ldi	r23, 0x02	; 2
    2110:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2112:	df 91       	pop	r29
    2114:	cf 91       	pop	r28
    2116:	ff 90       	pop	r15
    2118:	ef 90       	pop	r14
    211a:	df 90       	pop	r13
    211c:	cf 90       	pop	r12
    211e:	bf 90       	pop	r11
    2120:	af 90       	pop	r10
    2122:	9f 90       	pop	r9
    2124:	8f 90       	pop	r8
    2126:	7f 90       	pop	r7
    2128:	6f 90       	pop	r6
    212a:	5f 90       	pop	r5
    212c:	4f 90       	pop	r4
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    212e:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    2132:	2f ef       	ldi	r18, 0xFF	; 255
    2134:	3f ef       	ldi	r19, 0xFF	; 255
    2136:	4f e7       	ldi	r20, 0x7F	; 127
    2138:	5f ec       	ldi	r21, 0xCF	; 207
    213a:	c7 01       	movw	r24, r14
    213c:	b6 01       	movw	r22, r12
    213e:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__cmpsf2>
    2142:	87 fd       	sbrc	r24, 7
    2144:	e3 cf       	rjmp	.-58     	; 0x210c <_ZN5Print10printFloatEdh+0x84>
  
  // Handle negative numbers
  if (number < 0.0)
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	a9 01       	movw	r20, r18
    214c:	c7 01       	movw	r24, r14
    214e:	b6 01       	movw	r22, r12
    2150:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__cmpsf2>
    2154:	87 ff       	sbrs	r24, 7
    2156:	0a c0       	rjmp	.+20     	; 0x216c <_ZN5Print10printFloatEdh+0xe4>
  {
     n += print('-');
    2158:	6d e2       	ldi	r22, 0x2D	; 45
    215a:	ce 01       	movw	r24, r28
    215c:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <_ZN5Print5printEc>
    2160:	4c 01       	movw	r8, r24
     number = -number;
    2162:	f7 fa       	bst	r15, 7
    2164:	f0 94       	com	r15
    2166:	f7 f8       	bld	r15, 7
    2168:	f0 94       	com	r15
    216a:	02 c0       	rjmp	.+4      	; 0x2170 <_ZN5Print10printFloatEdh+0xe8>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    216c:	81 2c       	mov	r8, r1
    216e:	91 2c       	mov	r9, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2170:	a1 2c       	mov	r10, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2172:	60 e0       	ldi	r22, 0x00	; 0
    2174:	70 e0       	ldi	r23, 0x00	; 0
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    217a:	ab 14       	cp	r10, r11
    217c:	41 f0       	breq	.+16     	; 0x218e <_ZN5Print10printFloatEdh+0x106>
    rounding /= 10.0;
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	40 e2       	ldi	r20, 0x20	; 32
    2184:	51 e4       	ldi	r21, 0x41	; 65
    2186:	0e 94 24 0b 	call	0x1648	; 0x1648 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    218a:	a3 94       	inc	r10
    218c:	f6 cf       	rjmp	.-20     	; 0x217a <_ZN5Print10printFloatEdh+0xf2>
    rounding /= 10.0;
  
  number += rounding;
    218e:	9b 01       	movw	r18, r22
    2190:	ac 01       	movw	r20, r24
    2192:	c7 01       	movw	r24, r14
    2194:	b6 01       	movw	r22, r12
    2196:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__addsf3>
    219a:	2b 01       	movw	r4, r22
    219c:	3c 01       	movw	r6, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    219e:	0e 94 9d 0b 	call	0x173a	; 0x173a <__fixunssfsi>
    21a2:	6b 01       	movw	r12, r22
    21a4:	7c 01       	movw	r14, r24
  double remainder = number - (double)int_part;
    21a6:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__floatunsisf>
    21aa:	9b 01       	movw	r18, r22
    21ac:	ac 01       	movw	r20, r24
    21ae:	c3 01       	movw	r24, r6
    21b0:	b2 01       	movw	r22, r4
    21b2:	0e 94 b7 0a 	call	0x156e	; 0x156e <__subsf3>
    21b6:	2b 01       	movw	r4, r22
    21b8:	3c 01       	movw	r6, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    21ba:	2a e0       	ldi	r18, 0x0A	; 10
    21bc:	b7 01       	movw	r22, r14
    21be:	a6 01       	movw	r20, r12
    21c0:	ce 01       	movw	r24, r28
    21c2:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    21c6:	7c 01       	movw	r14, r24
    21c8:	e8 0c       	add	r14, r8
    21ca:	f9 1c       	adc	r15, r9

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    21cc:	bb 20       	and	r11, r11
    21ce:	31 f0       	breq	.+12     	; 0x21dc <_ZN5Print10printFloatEdh+0x154>
    n += print('.'); 
    21d0:	6e e2       	ldi	r22, 0x2E	; 46
    21d2:	ce 01       	movw	r24, r28
    21d4:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <_ZN5Print5printEc>
    21d8:	e8 0e       	add	r14, r24
    21da:	f9 1e       	adc	r15, r25
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    21dc:	db 2c       	mov	r13, r11
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    21de:	dd 20       	and	r13, r13
    21e0:	29 f1       	breq	.+74     	; 0x222c <_ZN5Print10printFloatEdh+0x1a4>
  {
    remainder *= 10.0;
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	40 e2       	ldi	r20, 0x20	; 32
    21e8:	51 e4       	ldi	r21, 0x41	; 65
    21ea:	c3 01       	movw	r24, r6
    21ec:	b2 01       	movw	r22, r4
    21ee:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__mulsf3>
    21f2:	2b 01       	movw	r4, r22
    21f4:	3c 01       	movw	r6, r24
    unsigned int toPrint = (unsigned int)(remainder);
    21f6:	0e 94 9d 0b 	call	0x173a	; 0x173a <__fixunssfsi>
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    21fa:	4b 01       	movw	r8, r22
    21fc:	a1 2c       	mov	r10, r1
    21fe:	b1 2c       	mov	r11, r1
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    2200:	2a e0       	ldi	r18, 0x0A	; 10
    2202:	b5 01       	movw	r22, r10
    2204:	a4 01       	movw	r20, r8
    2206:	ce 01       	movw	r24, r28
    2208:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <_ZN5Print11printNumberEmh>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
    220c:	e8 0e       	add	r14, r24
    220e:	f9 1e       	adc	r15, r25
    remainder -= toPrint; 
    2210:	c5 01       	movw	r24, r10
    2212:	b4 01       	movw	r22, r8
    2214:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__floatunsisf>
    2218:	9b 01       	movw	r18, r22
    221a:	ac 01       	movw	r20, r24
    221c:	c3 01       	movw	r24, r6
    221e:	b2 01       	movw	r22, r4
    2220:	0e 94 b7 0a 	call	0x156e	; 0x156e <__subsf3>
    2224:	2b 01       	movw	r4, r22
    2226:	3c 01       	movw	r6, r24
    2228:	da 94       	dec	r13
    222a:	d9 cf       	rjmp	.-78     	; 0x21de <_ZN5Print10printFloatEdh+0x156>
  } 
  
  return n;
}
    222c:	c7 01       	movw	r24, r14
    222e:	df 91       	pop	r29
    2230:	cf 91       	pop	r28
    2232:	ff 90       	pop	r15
    2234:	ef 90       	pop	r14
    2236:	df 90       	pop	r13
    2238:	cf 90       	pop	r12
    223a:	bf 90       	pop	r11
    223c:	af 90       	pop	r10
    223e:	9f 90       	pop	r9
    2240:	8f 90       	pop	r8
    2242:	7f 90       	pop	r7
    2244:	6f 90       	pop	r6
    2246:	5f 90       	pop	r5
    2248:	4f 90       	pop	r4
    224a:	08 95       	ret

0000224c <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    224c:	0c 94 44 10 	jmp	0x2088	; 0x2088 <_ZN5Print10printFloatEdh>

00002250 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    2250:	0f 93       	push	r16
    2252:	1f 93       	push	r17
    2254:	cf 93       	push	r28
    2256:	df 93       	push	r29
    2258:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    225a:	0e 94 44 10 	call	0x2088	; 0x2088 <_ZN5Print10printFloatEdh>
    225e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    2260:	ce 01       	movw	r24, r28
    2262:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print7printlnEv>
  return n;
}
    2266:	80 0f       	add	r24, r16
    2268:	91 1f       	adc	r25, r17
    226a:	df 91       	pop	r29
    226c:	cf 91       	pop	r28
    226e:	1f 91       	pop	r17
    2270:	0f 91       	pop	r16
    2272:	08 95       	ret

00002274 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2274:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <_ZN7TwoWire14rxBufferLengthE>
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	20 91 98 04 	lds	r18, 0x0498	; 0x800498 <_ZN7TwoWire13rxBufferIndexE>
    227e:	82 1b       	sub	r24, r18
    2280:	91 09       	sbc	r25, r1
    2282:	08 95       	ret

00002284 <_ZN7TwoWire4readEv>:
    2284:	90 91 98 04 	lds	r25, 0x0498	; 0x800498 <_ZN7TwoWire13rxBufferIndexE>
    2288:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <_ZN7TwoWire14rxBufferLengthE>
    228c:	98 17       	cp	r25, r24
    228e:	50 f4       	brcc	.+20     	; 0x22a4 <_ZN7TwoWire4readEv+0x20>
    2290:	e9 2f       	mov	r30, r25
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	e7 56       	subi	r30, 0x67	; 103
    2296:	fb 4f       	sbci	r31, 0xFB	; 251
    2298:	20 81       	ld	r18, Z
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	9f 5f       	subi	r25, 0xFF	; 255
    229e:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <_ZN7TwoWire13rxBufferIndexE>
    22a2:	02 c0       	rjmp	.+4      	; 0x22a8 <_ZN7TwoWire4readEv+0x24>
    22a4:	2f ef       	ldi	r18, 0xFF	; 255
    22a6:	3f ef       	ldi	r19, 0xFF	; 255
    22a8:	c9 01       	movw	r24, r18
    22aa:	08 95       	ret

000022ac <_ZN7TwoWire4peekEv>:
    22ac:	e0 91 98 04 	lds	r30, 0x0498	; 0x800498 <_ZN7TwoWire13rxBufferIndexE>
    22b0:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <_ZN7TwoWire14rxBufferLengthE>
    22b4:	e8 17       	cp	r30, r24
    22b6:	30 f4       	brcc	.+12     	; 0x22c4 <_ZN7TwoWire4peekEv+0x18>
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	e7 56       	subi	r30, 0x67	; 103
    22bc:	fb 4f       	sbci	r31, 0xFB	; 251
    22be:	80 81       	ld	r24, Z
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	08 95       	ret
    22c4:	8f ef       	ldi	r24, 0xFF	; 255
    22c6:	9f ef       	ldi	r25, 0xFF	; 255
    22c8:	08 95       	ret

000022ca <_ZN7TwoWire5flushEv>:
    22ca:	08 95       	ret

000022cc <_ZN7TwoWire5writeEPKhj>:
    22cc:	cf 92       	push	r12
    22ce:	df 92       	push	r13
    22d0:	ef 92       	push	r14
    22d2:	ff 92       	push	r15
    22d4:	0f 93       	push	r16
    22d6:	1f 93       	push	r17
    22d8:	cf 93       	push	r28
    22da:	df 93       	push	r29
    22dc:	7c 01       	movw	r14, r24
    22de:	26 2f       	mov	r18, r22
    22e0:	97 2f       	mov	r25, r23
    22e2:	8a 01       	movw	r16, r20
    22e4:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <_ZN7TwoWire12transmittingE>
    22e8:	88 23       	and	r24, r24
    22ea:	91 f0       	breq	.+36     	; 0x2310 <_ZN7TwoWire5writeEPKhj+0x44>
    22ec:	c6 2f       	mov	r28, r22
    22ee:	d7 2f       	mov	r29, r23
    22f0:	6e 01       	movw	r12, r28
    22f2:	c4 0e       	add	r12, r20
    22f4:	d5 1e       	adc	r13, r21
    22f6:	cc 15       	cp	r28, r12
    22f8:	dd 05       	cpc	r29, r13
    22fa:	71 f0       	breq	.+28     	; 0x2318 <_ZN7TwoWire5writeEPKhj+0x4c>
    22fc:	69 91       	ld	r22, Y+
    22fe:	d7 01       	movw	r26, r14
    2300:	ed 91       	ld	r30, X+
    2302:	fc 91       	ld	r31, X
    2304:	01 90       	ld	r0, Z+
    2306:	f0 81       	ld	r31, Z
    2308:	e0 2d       	mov	r30, r0
    230a:	c7 01       	movw	r24, r14
    230c:	09 95       	icall
    230e:	f3 cf       	rjmp	.-26     	; 0x22f6 <_ZN7TwoWire5writeEPKhj+0x2a>
    2310:	64 2f       	mov	r22, r20
    2312:	82 2f       	mov	r24, r18
    2314:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <twi_transmit>
    2318:	c8 01       	movw	r24, r16
    231a:	df 91       	pop	r29
    231c:	cf 91       	pop	r28
    231e:	1f 91       	pop	r17
    2320:	0f 91       	pop	r16
    2322:	ff 90       	pop	r15
    2324:	ef 90       	pop	r14
    2326:	df 90       	pop	r13
    2328:	cf 90       	pop	r12
    232a:	08 95       	ret

0000232c <_ZN7TwoWire5writeEh>:
    232c:	cf 93       	push	r28
    232e:	df 93       	push	r29
    2330:	1f 92       	push	r1
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	69 83       	std	Y+1, r22	; 0x01
    2338:	20 91 73 04 	lds	r18, 0x0473	; 0x800473 <_ZN7TwoWire12transmittingE>
    233c:	22 23       	and	r18, r18
    233e:	d1 f0       	breq	.+52     	; 0x2374 <_ZN7TwoWire5writeEh+0x48>
    2340:	20 91 74 04 	lds	r18, 0x0474	; 0x800474 <_ZN7TwoWire14txBufferLengthE>
    2344:	20 32       	cpi	r18, 0x20	; 32
    2346:	40 f0       	brcs	.+16     	; 0x2358 <_ZN7TwoWire5writeEh+0x2c>
    2348:	21 e0       	ldi	r18, 0x01	; 1
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	fc 01       	movw	r30, r24
    234e:	33 83       	std	Z+3, r19	; 0x03
    2350:	22 83       	std	Z+2, r18	; 0x02
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	15 c0       	rjmp	.+42     	; 0x2382 <_ZN7TwoWire5writeEh+0x56>
    2358:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <_ZN7TwoWire13txBufferIndexE>
    235c:	e8 2f       	mov	r30, r24
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	ea 58       	subi	r30, 0x8A	; 138
    2362:	fb 4f       	sbci	r31, 0xFB	; 251
    2364:	99 81       	ldd	r25, Y+1	; 0x01
    2366:	90 83       	st	Z, r25
    2368:	8f 5f       	subi	r24, 0xFF	; 255
    236a:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <_ZN7TwoWire13txBufferIndexE>
    236e:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <_ZN7TwoWire14txBufferLengthE>
    2372:	05 c0       	rjmp	.+10     	; 0x237e <_ZN7TwoWire5writeEh+0x52>
    2374:	61 e0       	ldi	r22, 0x01	; 1
    2376:	ce 01       	movw	r24, r28
    2378:	01 96       	adiw	r24, 0x01	; 1
    237a:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <twi_transmit>
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	0f 90       	pop	r0
    2384:	df 91       	pop	r29
    2386:	cf 91       	pop	r28
    2388:	08 95       	ret

0000238a <_ZN7TwoWireC1Ev>:
    238a:	fc 01       	movw	r30, r24
    238c:	13 82       	std	Z+3, r1	; 0x03
    238e:	12 82       	std	Z+2, r1	; 0x02
    2390:	88 ee       	ldi	r24, 0xE8	; 232
    2392:	93 e0       	ldi	r25, 0x03	; 3
    2394:	a0 e0       	ldi	r26, 0x00	; 0
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	84 83       	std	Z+4, r24	; 0x04
    239a:	95 83       	std	Z+5, r25	; 0x05
    239c:	a6 83       	std	Z+6, r26	; 0x06
    239e:	b7 83       	std	Z+7, r27	; 0x07
    23a0:	8c ec       	ldi	r24, 0xCC	; 204
    23a2:	92 e0       	ldi	r25, 0x02	; 2
    23a4:	91 83       	std	Z+1, r25	; 0x01
    23a6:	80 83       	st	Z, r24
    23a8:	08 95       	ret

000023aa <_ZN7TwoWire5beginEv>:
    23aa:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <_ZN7TwoWire13rxBufferIndexE>
    23ae:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <_ZN7TwoWire14rxBufferLengthE>
    23b2:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <_ZN7TwoWire13txBufferIndexE>
    23b6:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <_ZN7TwoWire14txBufferLengthE>
    23ba:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <twi_init>

000023be <_ZN7TwoWire17beginTransmissionEh>:
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <_ZN7TwoWire12transmittingE>
    23c4:	60 93 96 04 	sts	0x0496, r22	; 0x800496 <_ZN7TwoWire9txAddressE>
    23c8:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <_ZN7TwoWire13txBufferIndexE>
    23cc:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <_ZN7TwoWire14txBufferLengthE>
    23d0:	08 95       	ret

000023d2 <_ZN7TwoWire17beginTransmissionEi>:
    23d2:	0c 94 df 11 	jmp	0x23be	; 0x23be <_ZN7TwoWire17beginTransmissionEh>

000023d6 <_ZN7TwoWire15endTransmissionEh>:
    23d6:	0f 93       	push	r16
    23d8:	06 2f       	mov	r16, r22
    23da:	21 e0       	ldi	r18, 0x01	; 1
    23dc:	40 91 74 04 	lds	r20, 0x0474	; 0x800474 <_ZN7TwoWire14txBufferLengthE>
    23e0:	66 e7       	ldi	r22, 0x76	; 118
    23e2:	74 e0       	ldi	r23, 0x04	; 4
    23e4:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <_ZN7TwoWire9txAddressE>
    23e8:	0e 94 82 14 	call	0x2904	; 0x2904 <twi_writeTo>
    23ec:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <_ZN7TwoWire13txBufferIndexE>
    23f0:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <_ZN7TwoWire14txBufferLengthE>
    23f4:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <_ZN7TwoWire12transmittingE>
    23f8:	0f 91       	pop	r16
    23fa:	08 95       	ret

000023fc <_ZN7TwoWire11requestFromEhhmhh>:
    23fc:	4f 92       	push	r4
    23fe:	5f 92       	push	r5
    2400:	6f 92       	push	r6
    2402:	7f 92       	push	r7
    2404:	af 92       	push	r10
    2406:	bf 92       	push	r11
    2408:	cf 92       	push	r12
    240a:	ef 92       	push	r14
    240c:	ff 92       	push	r15
    240e:	0f 93       	push	r16
    2410:	1f 93       	push	r17
    2412:	cf 93       	push	r28
    2414:	df 93       	push	r29
    2416:	5c 01       	movw	r10, r24
    2418:	f6 2e       	mov	r15, r22
    241a:	d4 2f       	mov	r29, r20
    241c:	28 01       	movw	r4, r16
    241e:	39 01       	movw	r6, r18
    2420:	ee 20       	and	r14, r14
    2422:	21 f1       	breq	.+72     	; 0x246c <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2424:	0e 94 df 11 	call	0x23be	; 0x23be <_ZN7TwoWire17beginTransmissionEh>
    2428:	ce 2d       	mov	r28, r14
    242a:	c4 30       	cpi	r28, 0x04	; 4
    242c:	08 f0       	brcs	.+2      	; 0x2430 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    242e:	c3 e0       	ldi	r28, 0x03	; 3
    2430:	c1 50       	subi	r28, 0x01	; 1
    2432:	c0 f0       	brcs	.+48     	; 0x2464 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2434:	d5 01       	movw	r26, r10
    2436:	ed 91       	ld	r30, X+
    2438:	fc 91       	ld	r31, X
    243a:	b8 e0       	ldi	r27, 0x08	; 8
    243c:	cb 9f       	mul	r28, r27
    243e:	c0 01       	movw	r24, r0
    2440:	11 24       	eor	r1, r1
    2442:	a3 01       	movw	r20, r6
    2444:	92 01       	movw	r18, r4
    2446:	04 c0       	rjmp	.+8      	; 0x2450 <_ZN7TwoWire11requestFromEhhmhh+0x54>
    2448:	56 95       	lsr	r21
    244a:	47 95       	ror	r20
    244c:	37 95       	ror	r19
    244e:	27 95       	ror	r18
    2450:	8a 95       	dec	r24
    2452:	d2 f7       	brpl	.-12     	; 0x2448 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    2454:	ca 01       	movw	r24, r20
    2456:	b9 01       	movw	r22, r18
    2458:	01 90       	ld	r0, Z+
    245a:	f0 81       	ld	r31, Z
    245c:	e0 2d       	mov	r30, r0
    245e:	c5 01       	movw	r24, r10
    2460:	09 95       	icall
    2462:	e6 cf       	rjmp	.-52     	; 0x2430 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2464:	60 e0       	ldi	r22, 0x00	; 0
    2466:	c5 01       	movw	r24, r10
    2468:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <_ZN7TwoWire15endTransmissionEh>
    246c:	4d 2f       	mov	r20, r29
    246e:	d1 32       	cpi	r29, 0x21	; 33
    2470:	08 f0       	brcs	.+2      	; 0x2474 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2472:	40 e2       	ldi	r20, 0x20	; 32
    2474:	2c 2d       	mov	r18, r12
    2476:	69 e9       	ldi	r22, 0x99	; 153
    2478:	74 e0       	ldi	r23, 0x04	; 4
    247a:	8f 2d       	mov	r24, r15
    247c:	0e 94 3a 14 	call	0x2874	; 0x2874 <twi_readFrom>
    2480:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <_ZN7TwoWire13rxBufferIndexE>
    2484:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <_ZN7TwoWire14rxBufferLengthE>
    2488:	df 91       	pop	r29
    248a:	cf 91       	pop	r28
    248c:	1f 91       	pop	r17
    248e:	0f 91       	pop	r16
    2490:	ff 90       	pop	r15
    2492:	ef 90       	pop	r14
    2494:	cf 90       	pop	r12
    2496:	bf 90       	pop	r11
    2498:	af 90       	pop	r10
    249a:	7f 90       	pop	r7
    249c:	6f 90       	pop	r6
    249e:	5f 90       	pop	r5
    24a0:	4f 90       	pop	r4
    24a2:	08 95       	ret

000024a4 <_ZN7TwoWire11requestFromEhhh>:
    24a4:	cf 92       	push	r12
    24a6:	ef 92       	push	r14
    24a8:	0f 93       	push	r16
    24aa:	1f 93       	push	r17
    24ac:	c2 2e       	mov	r12, r18
    24ae:	e1 2c       	mov	r14, r1
    24b0:	00 e0       	ldi	r16, 0x00	; 0
    24b2:	10 e0       	ldi	r17, 0x00	; 0
    24b4:	98 01       	movw	r18, r16
    24b6:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_ZN7TwoWire11requestFromEhhmhh>
    24ba:	1f 91       	pop	r17
    24bc:	0f 91       	pop	r16
    24be:	ef 90       	pop	r14
    24c0:	cf 90       	pop	r12
    24c2:	08 95       	ret

000024c4 <_ZN7TwoWire11requestFromEii>:
    24c4:	21 e0       	ldi	r18, 0x01	; 1
    24c6:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <_ZN7TwoWire11requestFromEhhh>

000024ca <_ZN7TwoWire15endTransmissionEv>:
    24ca:	61 e0       	ldi	r22, 0x01	; 1
    24cc:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <_ZN7TwoWire15endTransmissionEh>

000024d0 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    24d0:	87 e6       	ldi	r24, 0x67	; 103
    24d2:	94 e0       	ldi	r25, 0x04	; 4
    24d4:	0c 94 c5 11 	jmp	0x238a	; 0x238a <_ZN7TwoWireC1Ev>

000024d8 <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    24d8:	1f 92       	push	r1
    24da:	0f 92       	push	r0
    24dc:	0f b6       	in	r0, 0x3f	; 63
    24de:	0f 92       	push	r0
    24e0:	11 24       	eor	r1, r1
    24e2:	2f 93       	push	r18
    24e4:	3f 93       	push	r19
    24e6:	8f 93       	push	r24
    24e8:	9f 93       	push	r25
    24ea:	af 93       	push	r26
    24ec:	bf 93       	push	r27
    24ee:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <timer0_millis>
    24f2:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <timer0_millis+0x1>
    24f6:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <timer0_millis+0x2>
    24fa:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <timer0_millis+0x3>
    24fe:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <timer0_fract>
    2502:	23 e0       	ldi	r18, 0x03	; 3
    2504:	23 0f       	add	r18, r19
    2506:	2d 37       	cpi	r18, 0x7D	; 125
    2508:	20 f4       	brcc	.+8      	; 0x2512 <__vector_16+0x3a>
    250a:	01 96       	adiw	r24, 0x01	; 1
    250c:	a1 1d       	adc	r26, r1
    250e:	b1 1d       	adc	r27, r1
    2510:	05 c0       	rjmp	.+10     	; 0x251c <__vector_16+0x44>
    2512:	26 e8       	ldi	r18, 0x86	; 134
    2514:	23 0f       	add	r18, r19
    2516:	02 96       	adiw	r24, 0x02	; 2
    2518:	a1 1d       	adc	r26, r1
    251a:	b1 1d       	adc	r27, r1
    251c:	20 93 b9 04 	sts	0x04B9, r18	; 0x8004b9 <timer0_fract>
    2520:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <timer0_millis>
    2524:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <timer0_millis+0x1>
    2528:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <timer0_millis+0x2>
    252c:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <timer0_millis+0x3>
    2530:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <timer0_overflow_count>
    2534:	90 91 bf 04 	lds	r25, 0x04BF	; 0x8004bf <timer0_overflow_count+0x1>
    2538:	a0 91 c0 04 	lds	r26, 0x04C0	; 0x8004c0 <timer0_overflow_count+0x2>
    253c:	b0 91 c1 04 	lds	r27, 0x04C1	; 0x8004c1 <timer0_overflow_count+0x3>
    2540:	01 96       	adiw	r24, 0x01	; 1
    2542:	a1 1d       	adc	r26, r1
    2544:	b1 1d       	adc	r27, r1
    2546:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <timer0_overflow_count>
    254a:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <timer0_overflow_count+0x1>
    254e:	a0 93 c0 04 	sts	0x04C0, r26	; 0x8004c0 <timer0_overflow_count+0x2>
    2552:	b0 93 c1 04 	sts	0x04C1, r27	; 0x8004c1 <timer0_overflow_count+0x3>
    2556:	bf 91       	pop	r27
    2558:	af 91       	pop	r26
    255a:	9f 91       	pop	r25
    255c:	8f 91       	pop	r24
    255e:	3f 91       	pop	r19
    2560:	2f 91       	pop	r18
    2562:	0f 90       	pop	r0
    2564:	0f be       	out	0x3f, r0	; 63
    2566:	0f 90       	pop	r0
    2568:	1f 90       	pop	r1
    256a:	18 95       	reti

0000256c <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    256c:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    256e:	f8 94       	cli
	m = timer0_overflow_count;
    2570:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <timer0_overflow_count>
    2574:	90 91 bf 04 	lds	r25, 0x04BF	; 0x8004bf <timer0_overflow_count+0x1>
    2578:	a0 91 c0 04 	lds	r26, 0x04C0	; 0x8004c0 <timer0_overflow_count+0x2>
    257c:	b0 91 c1 04 	lds	r27, 0x04C1	; 0x8004c1 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    2580:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2582:	a8 9b       	sbis	0x15, 0	; 21
    2584:	05 c0       	rjmp	.+10     	; 0x2590 <micros+0x24>
    2586:	2f 3f       	cpi	r18, 0xFF	; 255
    2588:	19 f0       	breq	.+6      	; 0x2590 <micros+0x24>
		m++;
    258a:	01 96       	adiw	r24, 0x01	; 1
    258c:	a1 1d       	adc	r26, r1
    258e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2590:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2592:	ba 2f       	mov	r27, r26
    2594:	a9 2f       	mov	r26, r25
    2596:	98 2f       	mov	r25, r24
    2598:	88 27       	eor	r24, r24
    259a:	82 0f       	add	r24, r18
    259c:	91 1d       	adc	r25, r1
    259e:	a1 1d       	adc	r26, r1
    25a0:	b1 1d       	adc	r27, r1
    25a2:	bc 01       	movw	r22, r24
    25a4:	cd 01       	movw	r24, r26
    25a6:	42 e0       	ldi	r20, 0x02	; 2
    25a8:	66 0f       	add	r22, r22
    25aa:	77 1f       	adc	r23, r23
    25ac:	88 1f       	adc	r24, r24
    25ae:	99 1f       	adc	r25, r25
    25b0:	4a 95       	dec	r20
    25b2:	d1 f7       	brne	.-12     	; 0x25a8 <micros+0x3c>
}
    25b4:	08 95       	ret

000025b6 <delay>:

void delay(unsigned long ms)
{
    25b6:	8f 92       	push	r8
    25b8:	9f 92       	push	r9
    25ba:	af 92       	push	r10
    25bc:	bf 92       	push	r11
    25be:	cf 92       	push	r12
    25c0:	df 92       	push	r13
    25c2:	ef 92       	push	r14
    25c4:	ff 92       	push	r15
    25c6:	6b 01       	movw	r12, r22
    25c8:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    25ca:	0e 94 b6 12 	call	0x256c	; 0x256c <micros>
    25ce:	4b 01       	movw	r8, r22
    25d0:	5c 01       	movw	r10, r24

	while (ms > 0) {
    25d2:	c1 14       	cp	r12, r1
    25d4:	d1 04       	cpc	r13, r1
    25d6:	e1 04       	cpc	r14, r1
    25d8:	f1 04       	cpc	r15, r1
    25da:	01 f1       	breq	.+64     	; 0x261c <delay+0x66>
		yield();
    25dc:	0e 94 1b 14 	call	0x2836	; 0x2836 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    25e0:	0e 94 b6 12 	call	0x256c	; 0x256c <micros>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	88 19       	sub	r24, r8
    25ea:	99 09       	sbc	r25, r9
    25ec:	aa 09       	sbc	r26, r10
    25ee:	bb 09       	sbc	r27, r11
    25f0:	88 3e       	cpi	r24, 0xE8	; 232
    25f2:	93 40       	sbci	r25, 0x03	; 3
    25f4:	a1 05       	cpc	r26, r1
    25f6:	b1 05       	cpc	r27, r1
    25f8:	60 f3       	brcs	.-40     	; 0x25d2 <delay+0x1c>
			ms--;
    25fa:	21 e0       	ldi	r18, 0x01	; 1
    25fc:	c2 1a       	sub	r12, r18
    25fe:	d1 08       	sbc	r13, r1
    2600:	e1 08       	sbc	r14, r1
    2602:	f1 08       	sbc	r15, r1
			start += 1000;
    2604:	88 ee       	ldi	r24, 0xE8	; 232
    2606:	88 0e       	add	r8, r24
    2608:	83 e0       	ldi	r24, 0x03	; 3
    260a:	98 1e       	adc	r9, r24
    260c:	a1 1c       	adc	r10, r1
    260e:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2610:	c1 14       	cp	r12, r1
    2612:	d1 04       	cpc	r13, r1
    2614:	e1 04       	cpc	r14, r1
    2616:	f1 04       	cpc	r15, r1
    2618:	19 f7       	brne	.-58     	; 0x25e0 <delay+0x2a>
    261a:	db cf       	rjmp	.-74     	; 0x25d2 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    261c:	ff 90       	pop	r15
    261e:	ef 90       	pop	r14
    2620:	df 90       	pop	r13
    2622:	cf 90       	pop	r12
    2624:	bf 90       	pop	r11
    2626:	af 90       	pop	r10
    2628:	9f 90       	pop	r9
    262a:	8f 90       	pop	r8
    262c:	08 95       	ret

0000262e <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    262e:	82 30       	cpi	r24, 0x02	; 2
    2630:	91 05       	cpc	r25, r1
    2632:	38 f0       	brcs	.+14     	; 0x2642 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    2634:	88 0f       	add	r24, r24
    2636:	99 1f       	adc	r25, r25
    2638:	88 0f       	add	r24, r24
    263a:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    263c:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	f1 f7       	brne	.-4      	; 0x263e <delayMicroseconds+0x10>
    2642:	08 95       	ret

00002644 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2644:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2646:	84 b5       	in	r24, 0x24	; 36
    2648:	82 60       	ori	r24, 0x02	; 2
    264a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    264c:	84 b5       	in	r24, 0x24	; 36
    264e:	81 60       	ori	r24, 0x01	; 1
    2650:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2652:	85 b5       	in	r24, 0x25	; 37
    2654:	82 60       	ori	r24, 0x02	; 2
    2656:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2658:	85 b5       	in	r24, 0x25	; 37
    265a:	81 60       	ori	r24, 0x01	; 1
    265c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    265e:	ee e6       	ldi	r30, 0x6E	; 110
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	80 81       	ld	r24, Z
    2664:	81 60       	ori	r24, 0x01	; 1
    2666:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2668:	e1 e8       	ldi	r30, 0x81	; 129
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    266e:	80 81       	ld	r24, Z
    2670:	82 60       	ori	r24, 0x02	; 2
    2672:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2674:	80 81       	ld	r24, Z
    2676:	81 60       	ori	r24, 0x01	; 1
    2678:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    267a:	e0 e8       	ldi	r30, 0x80	; 128
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
    2680:	81 60       	ori	r24, 0x01	; 1
    2682:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2684:	e1 eb       	ldi	r30, 0xB1	; 177
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	80 81       	ld	r24, Z
    268a:	84 60       	ori	r24, 0x04	; 4
    268c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    268e:	e0 eb       	ldi	r30, 0xB0	; 176
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
    2694:	81 60       	ori	r24, 0x01	; 1
    2696:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2698:	ea e7       	ldi	r30, 0x7A	; 122
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	84 60       	ori	r24, 0x04	; 4
    26a0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    26a2:	80 81       	ld	r24, Z
    26a4:	82 60       	ori	r24, 0x02	; 2
    26a6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    26a8:	80 81       	ld	r24, Z
    26aa:	81 60       	ori	r24, 0x01	; 1
    26ac:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    26ae:	80 81       	ld	r24, Z
    26b0:	80 68       	ori	r24, 0x80	; 128
    26b2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    26b4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    26b8:	08 95       	ret

000026ba <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    26ba:	83 30       	cpi	r24, 0x03	; 3
    26bc:	81 f0       	breq	.+32     	; 0x26de <turnOffPWM+0x24>
    26be:	28 f4       	brcc	.+10     	; 0x26ca <turnOffPWM+0x10>
    26c0:	81 30       	cpi	r24, 0x01	; 1
    26c2:	99 f0       	breq	.+38     	; 0x26ea <turnOffPWM+0x30>
    26c4:	82 30       	cpi	r24, 0x02	; 2
    26c6:	a1 f0       	breq	.+40     	; 0x26f0 <turnOffPWM+0x36>
    26c8:	08 95       	ret
    26ca:	87 30       	cpi	r24, 0x07	; 7
    26cc:	a9 f0       	breq	.+42     	; 0x26f8 <turnOffPWM+0x3e>
    26ce:	88 30       	cpi	r24, 0x08	; 8
    26d0:	b9 f0       	breq	.+46     	; 0x2700 <turnOffPWM+0x46>
    26d2:	84 30       	cpi	r24, 0x04	; 4
    26d4:	d1 f4       	brne	.+52     	; 0x270a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    26d6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    26da:	8f 7d       	andi	r24, 0xDF	; 223
    26dc:	03 c0       	rjmp	.+6      	; 0x26e4 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    26de:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    26e2:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    26e4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    26e8:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    26ea:	84 b5       	in	r24, 0x24	; 36
    26ec:	8f 77       	andi	r24, 0x7F	; 127
    26ee:	02 c0       	rjmp	.+4      	; 0x26f4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    26f0:	84 b5       	in	r24, 0x24	; 36
    26f2:	8f 7d       	andi	r24, 0xDF	; 223
    26f4:	84 bd       	out	0x24, r24	; 36
    26f6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    26f8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    26fc:	8f 77       	andi	r24, 0x7F	; 127
    26fe:	03 c0       	rjmp	.+6      	; 0x2706 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2700:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2704:	8f 7d       	andi	r24, 0xDF	; 223
    2706:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    270a:	08 95       	ret

0000270c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    270c:	cf 93       	push	r28
    270e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	fc 01       	movw	r30, r24
    2714:	e4 58       	subi	r30, 0x84	; 132
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    271a:	fc 01       	movw	r30, r24
    271c:	e0 57       	subi	r30, 0x70	; 112
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2722:	88 23       	and	r24, r24
    2724:	61 f1       	breq	.+88     	; 0x277e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	88 0f       	add	r24, r24
    272a:	99 1f       	adc	r25, r25
    272c:	fc 01       	movw	r30, r24
    272e:	e8 54       	subi	r30, 0x48	; 72
    2730:	ff 4f       	sbci	r31, 0xFF	; 255
    2732:	c5 91       	lpm	r28, Z+
    2734:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2736:	fc 01       	movw	r30, r24
    2738:	e2 55       	subi	r30, 0x52	; 82
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	a5 91       	lpm	r26, Z+
    273e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2740:	61 11       	cpse	r22, r1
    2742:	09 c0       	rjmp	.+18     	; 0x2756 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2744:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2746:	f8 94       	cli
		*reg &= ~bit;
    2748:	88 81       	ld	r24, Y
    274a:	20 95       	com	r18
    274c:	82 23       	and	r24, r18
    274e:	88 83       	st	Y, r24
		*out &= ~bit;
    2750:	ec 91       	ld	r30, X
    2752:	2e 23       	and	r18, r30
    2754:	0b c0       	rjmp	.+22     	; 0x276c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2756:	62 30       	cpi	r22, 0x02	; 2
    2758:	61 f4       	brne	.+24     	; 0x2772 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    275a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    275c:	f8 94       	cli
		*reg &= ~bit;
    275e:	38 81       	ld	r19, Y
    2760:	82 2f       	mov	r24, r18
    2762:	80 95       	com	r24
    2764:	83 23       	and	r24, r19
    2766:	88 83       	st	Y, r24
		*out |= bit;
    2768:	ec 91       	ld	r30, X
    276a:	2e 2b       	or	r18, r30
    276c:	2c 93       	st	X, r18
		SREG = oldSREG;
    276e:	9f bf       	out	0x3f, r25	; 63
    2770:	06 c0       	rjmp	.+12     	; 0x277e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2772:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2774:	f8 94       	cli
		*reg |= bit;
    2776:	e8 81       	ld	r30, Y
    2778:	2e 2b       	or	r18, r30
    277a:	28 83       	st	Y, r18
		SREG = oldSREG;
    277c:	8f bf       	out	0x3f, r24	; 63
	}
}
    277e:	df 91       	pop	r29
    2780:	cf 91       	pop	r28
    2782:	08 95       	ret

00002784 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2784:	1f 93       	push	r17
    2786:	cf 93       	push	r28
    2788:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    278a:	28 2f       	mov	r18, r24
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	f9 01       	movw	r30, r18
    2790:	e8 59       	subi	r30, 0x98	; 152
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2796:	f9 01       	movw	r30, r18
    2798:	e4 58       	subi	r30, 0x84	; 132
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    279e:	f9 01       	movw	r30, r18
    27a0:	e0 57       	subi	r30, 0x70	; 112
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    27a6:	cc 23       	and	r28, r28
    27a8:	c9 f0       	breq	.+50     	; 0x27dc <digitalWrite+0x58>
    27aa:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    27ac:	81 11       	cpse	r24, r1
    27ae:	0e 94 5d 13 	call	0x26ba	; 0x26ba <turnOffPWM>

	out = portOutputRegister(port);
    27b2:	ec 2f       	mov	r30, r28
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	ee 0f       	add	r30, r30
    27b8:	ff 1f       	adc	r31, r31
    27ba:	e2 55       	subi	r30, 0x52	; 82
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	a5 91       	lpm	r26, Z+
    27c0:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    27c2:	8f b7       	in	r24, 0x3f	; 63
	cli();
    27c4:	f8 94       	cli

	if (val == LOW) {
    27c6:	11 11       	cpse	r17, r1
    27c8:	05 c0       	rjmp	.+10     	; 0x27d4 <digitalWrite+0x50>
		*out &= ~bit;
    27ca:	9c 91       	ld	r25, X
    27cc:	ed 2f       	mov	r30, r29
    27ce:	e0 95       	com	r30
    27d0:	e9 23       	and	r30, r25
    27d2:	02 c0       	rjmp	.+4      	; 0x27d8 <digitalWrite+0x54>
	} else {
		*out |= bit;
    27d4:	ec 91       	ld	r30, X
    27d6:	ed 2b       	or	r30, r29
    27d8:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    27da:	8f bf       	out	0x3f, r24	; 63
}
    27dc:	df 91       	pop	r29
    27de:	cf 91       	pop	r28
    27e0:	1f 91       	pop	r17
    27e2:	08 95       	ret

000027e4 <digitalRead>:

int digitalRead(uint8_t pin)
{
    27e4:	cf 93       	push	r28
    27e6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    27e8:	28 2f       	mov	r18, r24
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	f9 01       	movw	r30, r18
    27ee:	e8 59       	subi	r30, 0x98	; 152
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    27f4:	f9 01       	movw	r30, r18
    27f6:	e4 58       	subi	r30, 0x84	; 132
    27f8:	ff 4f       	sbci	r31, 0xFF	; 255
    27fa:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    27fc:	f9 01       	movw	r30, r18
    27fe:	e0 57       	subi	r30, 0x70	; 112
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    2804:	cc 23       	and	r28, r28
    2806:	91 f0       	breq	.+36     	; 0x282c <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2808:	81 11       	cpse	r24, r1
    280a:	0e 94 5d 13 	call	0x26ba	; 0x26ba <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    280e:	ec 2f       	mov	r30, r28
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	ee 0f       	add	r30, r30
    2814:	ff 1f       	adc	r31, r31
    2816:	ec 55       	subi	r30, 0x5C	; 92
    2818:	ff 4f       	sbci	r31, 0xFF	; 255
    281a:	a5 91       	lpm	r26, Z+
    281c:	b4 91       	lpm	r27, Z
    281e:	ec 91       	ld	r30, X
    2820:	ed 23       	and	r30, r29
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	21 f4       	brne	.+8      	; 0x2830 <digitalRead+0x4c>
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	02 c0       	rjmp	.+4      	; 0x2830 <digitalRead+0x4c>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2830:	df 91       	pop	r29
    2832:	cf 91       	pop	r28
    2834:	08 95       	ret

00002836 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2836:	08 95       	ret

00002838 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2838:	10 92 2f 05 	sts	0x052F, r1	; 0x80052f <twi_state>
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <twi_sendStop>
    2842:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <twi_inRepStart>
    2846:	61 e0       	ldi	r22, 0x01	; 1
    2848:	82 e1       	ldi	r24, 0x12	; 18
    284a:	0e 94 c2 13 	call	0x2784	; 0x2784 <digitalWrite>
    284e:	61 e0       	ldi	r22, 0x01	; 1
    2850:	83 e1       	ldi	r24, 0x13	; 19
    2852:	0e 94 c2 13 	call	0x2784	; 0x2784 <digitalWrite>
    2856:	e9 eb       	ldi	r30, 0xB9	; 185
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	80 81       	ld	r24, Z
    285c:	8e 7f       	andi	r24, 0xFE	; 254
    285e:	80 83       	st	Z, r24
    2860:	80 81       	ld	r24, Z
    2862:	8d 7f       	andi	r24, 0xFD	; 253
    2864:	80 83       	st	Z, r24
    2866:	88 e4       	ldi	r24, 0x48	; 72
    2868:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    286c:	85 e4       	ldi	r24, 0x45	; 69
    286e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2872:	08 95       	ret

00002874 <twi_readFrom>:
    2874:	41 32       	cpi	r20, 0x21	; 33
    2876:	08 f0       	brcs	.+2      	; 0x287a <twi_readFrom+0x6>
    2878:	43 c0       	rjmp	.+134    	; 0x2900 <twi_readFrom+0x8c>
    287a:	90 91 2f 05 	lds	r25, 0x052F	; 0x80052f <twi_state>
    287e:	91 11       	cpse	r25, r1
    2880:	fc cf       	rjmp	.-8      	; 0x287a <twi_readFrom+0x6>
    2882:	91 e0       	ldi	r25, 0x01	; 1
    2884:	90 93 2f 05 	sts	0x052F, r25	; 0x80052f <twi_state>
    2888:	20 93 2d 05 	sts	0x052D, r18	; 0x80052d <twi_sendStop>
    288c:	2f ef       	ldi	r18, 0xFF	; 255
    288e:	20 93 c2 04 	sts	0x04C2, r18	; 0x8004c2 <twi_error>
    2892:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <twi_masterBufferIndex>
    2896:	24 0f       	add	r18, r20
    2898:	20 93 06 05 	sts	0x0506, r18	; 0x800506 <twi_masterBufferLength>
    289c:	90 93 2e 05 	sts	0x052E, r25	; 0x80052e <twi_slarw>
    28a0:	90 91 2e 05 	lds	r25, 0x052E	; 0x80052e <twi_slarw>
    28a4:	88 0f       	add	r24, r24
    28a6:	89 2b       	or	r24, r25
    28a8:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <twi_slarw>
    28ac:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <twi_inRepStart>
    28b0:	81 30       	cpi	r24, 0x01	; 1
    28b2:	61 f4       	brne	.+24     	; 0x28cc <twi_readFrom+0x58>
    28b4:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <twi_inRepStart>
    28b8:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <twi_slarw>
    28bc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    28c0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    28c4:	83 fd       	sbrc	r24, 3
    28c6:	f8 cf       	rjmp	.-16     	; 0x28b8 <twi_readFrom+0x44>
    28c8:	85 ec       	ldi	r24, 0xC5	; 197
    28ca:	01 c0       	rjmp	.+2      	; 0x28ce <twi_readFrom+0x5a>
    28cc:	85 ee       	ldi	r24, 0xE5	; 229
    28ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    28d2:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <twi_state>
    28d6:	81 30       	cpi	r24, 0x01	; 1
    28d8:	e1 f3       	breq	.-8      	; 0x28d2 <twi_readFrom+0x5e>
    28da:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <twi_masterBufferIndex>
    28de:	84 17       	cp	r24, r20
    28e0:	10 f4       	brcc	.+4      	; 0x28e6 <twi_readFrom+0x72>
    28e2:	40 91 07 05 	lds	r20, 0x0507	; 0x800507 <twi_masterBufferIndex>
    28e6:	28 e0       	ldi	r18, 0x08	; 8
    28e8:	35 e0       	ldi	r19, 0x05	; 5
    28ea:	fb 01       	movw	r30, r22
    28ec:	d9 01       	movw	r26, r18
    28ee:	8a 2f       	mov	r24, r26
    28f0:	82 1b       	sub	r24, r18
    28f2:	84 17       	cp	r24, r20
    28f4:	18 f4       	brcc	.+6      	; 0x28fc <twi_readFrom+0x88>
    28f6:	8d 91       	ld	r24, X+
    28f8:	81 93       	st	Z+, r24
    28fa:	f9 cf       	rjmp	.-14     	; 0x28ee <twi_readFrom+0x7a>
    28fc:	84 2f       	mov	r24, r20
    28fe:	08 95       	ret
    2900:	80 e0       	ldi	r24, 0x00	; 0
    2902:	08 95       	ret

00002904 <twi_writeTo>:
    2904:	0f 93       	push	r16
    2906:	41 32       	cpi	r20, 0x21	; 33
    2908:	08 f0       	brcs	.+2      	; 0x290c <twi_writeTo+0x8>
    290a:	4a c0       	rjmp	.+148    	; 0x29a0 <twi_writeTo+0x9c>
    290c:	90 91 2f 05 	lds	r25, 0x052F	; 0x80052f <twi_state>
    2910:	91 11       	cpse	r25, r1
    2912:	fc cf       	rjmp	.-8      	; 0x290c <twi_writeTo+0x8>
    2914:	32 e0       	ldi	r19, 0x02	; 2
    2916:	30 93 2f 05 	sts	0x052F, r19	; 0x80052f <twi_state>
    291a:	00 93 2d 05 	sts	0x052D, r16	; 0x80052d <twi_sendStop>
    291e:	3f ef       	ldi	r19, 0xFF	; 255
    2920:	30 93 c2 04 	sts	0x04C2, r19	; 0x8004c2 <twi_error>
    2924:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <twi_masterBufferIndex>
    2928:	40 93 06 05 	sts	0x0506, r20	; 0x800506 <twi_masterBufferLength>
    292c:	fb 01       	movw	r30, r22
    292e:	68 e0       	ldi	r22, 0x08	; 8
    2930:	75 e0       	ldi	r23, 0x05	; 5
    2932:	db 01       	movw	r26, r22
    2934:	3a 2f       	mov	r19, r26
    2936:	36 1b       	sub	r19, r22
    2938:	34 17       	cp	r19, r20
    293a:	18 f4       	brcc	.+6      	; 0x2942 <twi_writeTo+0x3e>
    293c:	31 91       	ld	r19, Z+
    293e:	3d 93       	st	X+, r19
    2940:	f9 cf       	rjmp	.-14     	; 0x2934 <twi_writeTo+0x30>
    2942:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <twi_slarw>
    2946:	30 91 2e 05 	lds	r19, 0x052E	; 0x80052e <twi_slarw>
    294a:	88 0f       	add	r24, r24
    294c:	83 2b       	or	r24, r19
    294e:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <twi_slarw>
    2952:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <twi_inRepStart>
    2956:	81 30       	cpi	r24, 0x01	; 1
    2958:	61 f4       	brne	.+24     	; 0x2972 <twi_writeTo+0x6e>
    295a:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <twi_inRepStart>
    295e:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <twi_slarw>
    2962:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2966:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    296a:	83 fd       	sbrc	r24, 3
    296c:	f8 cf       	rjmp	.-16     	; 0x295e <twi_writeTo+0x5a>
    296e:	85 ec       	ldi	r24, 0xC5	; 197
    2970:	01 c0       	rjmp	.+2      	; 0x2974 <twi_writeTo+0x70>
    2972:	85 ee       	ldi	r24, 0xE5	; 229
    2974:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2978:	22 23       	and	r18, r18
    297a:	21 f0       	breq	.+8      	; 0x2984 <twi_writeTo+0x80>
    297c:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <twi_state>
    2980:	82 30       	cpi	r24, 0x02	; 2
    2982:	d1 f3       	breq	.-12     	; 0x2978 <twi_writeTo+0x74>
    2984:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <twi_error>
    2988:	8f 3f       	cpi	r24, 0xFF	; 255
    298a:	79 f0       	breq	.+30     	; 0x29aa <twi_writeTo+0xa6>
    298c:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <twi_error>
    2990:	80 32       	cpi	r24, 0x20	; 32
    2992:	41 f0       	breq	.+16     	; 0x29a4 <twi_writeTo+0xa0>
    2994:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <twi_error>
    2998:	80 33       	cpi	r24, 0x30	; 48
    299a:	31 f0       	breq	.+12     	; 0x29a8 <twi_writeTo+0xa4>
    299c:	94 e0       	ldi	r25, 0x04	; 4
    299e:	05 c0       	rjmp	.+10     	; 0x29aa <twi_writeTo+0xa6>
    29a0:	91 e0       	ldi	r25, 0x01	; 1
    29a2:	03 c0       	rjmp	.+6      	; 0x29aa <twi_writeTo+0xa6>
    29a4:	92 e0       	ldi	r25, 0x02	; 2
    29a6:	01 c0       	rjmp	.+2      	; 0x29aa <twi_writeTo+0xa6>
    29a8:	93 e0       	ldi	r25, 0x03	; 3
    29aa:	89 2f       	mov	r24, r25
    29ac:	0f 91       	pop	r16
    29ae:	08 95       	ret

000029b0 <twi_transmit>:
    29b0:	40 91 e4 04 	lds	r20, 0x04E4	; 0x8004e4 <twi_txBufferLength>
    29b4:	26 2f       	mov	r18, r22
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	24 0f       	add	r18, r20
    29ba:	31 1d       	adc	r19, r1
    29bc:	21 32       	cpi	r18, 0x21	; 33
    29be:	31 05       	cpc	r19, r1
    29c0:	dc f4       	brge	.+54     	; 0x29f8 <twi_transmit+0x48>
    29c2:	20 91 2f 05 	lds	r18, 0x052F	; 0x80052f <twi_state>
    29c6:	24 30       	cpi	r18, 0x04	; 4
    29c8:	c9 f4       	brne	.+50     	; 0x29fc <twi_transmit+0x4c>
    29ca:	fc 01       	movw	r30, r24
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	86 17       	cp	r24, r22
    29d2:	58 f4       	brcc	.+22     	; 0x29ea <twi_transmit+0x3a>
    29d4:	30 91 e4 04 	lds	r19, 0x04E4	; 0x8004e4 <twi_txBufferLength>
    29d8:	21 91       	ld	r18, Z+
    29da:	dc 01       	movw	r26, r24
    29dc:	aa 51       	subi	r26, 0x1A	; 26
    29de:	bb 4f       	sbci	r27, 0xFB	; 251
    29e0:	a3 0f       	add	r26, r19
    29e2:	b1 1d       	adc	r27, r1
    29e4:	2c 93       	st	X, r18
    29e6:	01 96       	adiw	r24, 0x01	; 1
    29e8:	f3 cf       	rjmp	.-26     	; 0x29d0 <twi_transmit+0x20>
    29ea:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <twi_txBufferLength>
    29ee:	68 0f       	add	r22, r24
    29f0:	60 93 e4 04 	sts	0x04E4, r22	; 0x8004e4 <twi_txBufferLength>
    29f4:	80 e0       	ldi	r24, 0x00	; 0
    29f6:	08 95       	ret
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	08 95       	ret
    29fc:	82 e0       	ldi	r24, 0x02	; 2
    29fe:	08 95       	ret

00002a00 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2a00:	85 ed       	ldi	r24, 0xD5	; 213
    2a02:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2a06:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2a0a:	84 fd       	sbrc	r24, 4
    2a0c:	fc cf       	rjmp	.-8      	; 0x2a06 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2a0e:	10 92 2f 05 	sts	0x052F, r1	; 0x80052f <twi_state>
    2a12:	08 95       	ret

00002a14 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2a14:	85 ec       	ldi	r24, 0xC5	; 197
    2a16:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    2a1a:	10 92 2f 05 	sts	0x052F, r1	; 0x80052f <twi_state>
    2a1e:	08 95       	ret

00002a20 <__vector_24>:
}

ISR(TWI_vect)
{
    2a20:	1f 92       	push	r1
    2a22:	0f 92       	push	r0
    2a24:	0f b6       	in	r0, 0x3f	; 63
    2a26:	0f 92       	push	r0
    2a28:	11 24       	eor	r1, r1
    2a2a:	2f 93       	push	r18
    2a2c:	3f 93       	push	r19
    2a2e:	4f 93       	push	r20
    2a30:	5f 93       	push	r21
    2a32:	6f 93       	push	r22
    2a34:	7f 93       	push	r23
    2a36:	8f 93       	push	r24
    2a38:	9f 93       	push	r25
    2a3a:	af 93       	push	r26
    2a3c:	bf 93       	push	r27
    2a3e:	ef 93       	push	r30
    2a40:	ff 93       	push	r31
  switch(TW_STATUS){
    2a42:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2a46:	88 7f       	andi	r24, 0xF8	; 248
    2a48:	80 36       	cpi	r24, 0x60	; 96
    2a4a:	09 f4       	brne	.+2      	; 0x2a4e <__vector_24+0x2e>
    2a4c:	9e c0       	rjmp	.+316    	; 0x2b8a <__vector_24+0x16a>
    2a4e:	78 f5       	brcc	.+94     	; 0x2aae <__vector_24+0x8e>
    2a50:	88 32       	cpi	r24, 0x28	; 40
    2a52:	09 f4       	brne	.+2      	; 0x2a56 <__vector_24+0x36>
    2a54:	5d c0       	rjmp	.+186    	; 0x2b10 <__vector_24+0xf0>
    2a56:	90 f4       	brcc	.+36     	; 0x2a7c <__vector_24+0x5c>
    2a58:	80 31       	cpi	r24, 0x10	; 16
    2a5a:	09 f4       	brne	.+2      	; 0x2a5e <__vector_24+0x3e>
    2a5c:	56 c0       	rjmp	.+172    	; 0x2b0a <__vector_24+0xea>
    2a5e:	38 f4       	brcc	.+14     	; 0x2a6e <__vector_24+0x4e>
    2a60:	88 23       	and	r24, r24
    2a62:	09 f4       	brne	.+2      	; 0x2a66 <__vector_24+0x46>
    2a64:	f5 c0       	rjmp	.+490    	; 0x2c50 <__vector_24+0x230>
    2a66:	88 30       	cpi	r24, 0x08	; 8
    2a68:	09 f4       	brne	.+2      	; 0x2a6c <__vector_24+0x4c>
    2a6a:	4f c0       	rjmp	.+158    	; 0x2b0a <__vector_24+0xea>
    2a6c:	f5 c0       	rjmp	.+490    	; 0x2c58 <__vector_24+0x238>
    2a6e:	88 31       	cpi	r24, 0x18	; 24
    2a70:	09 f4       	brne	.+2      	; 0x2a74 <__vector_24+0x54>
    2a72:	4e c0       	rjmp	.+156    	; 0x2b10 <__vector_24+0xf0>
    2a74:	80 32       	cpi	r24, 0x20	; 32
    2a76:	09 f4       	brne	.+2      	; 0x2a7a <__vector_24+0x5a>
    2a78:	5f c0       	rjmp	.+190    	; 0x2b38 <__vector_24+0x118>
    2a7a:	ee c0       	rjmp	.+476    	; 0x2c58 <__vector_24+0x238>
    2a7c:	80 34       	cpi	r24, 0x40	; 64
    2a7e:	09 f4       	brne	.+2      	; 0x2a82 <__vector_24+0x62>
    2a80:	6a c0       	rjmp	.+212    	; 0x2b56 <__vector_24+0x136>
    2a82:	58 f4       	brcc	.+22     	; 0x2a9a <__vector_24+0x7a>
    2a84:	80 33       	cpi	r24, 0x30	; 48
    2a86:	09 f4       	brne	.+2      	; 0x2a8a <__vector_24+0x6a>
    2a88:	57 c0       	rjmp	.+174    	; 0x2b38 <__vector_24+0x118>
    2a8a:	88 33       	cpi	r24, 0x38	; 56
    2a8c:	09 f0       	breq	.+2      	; 0x2a90 <__vector_24+0x70>
    2a8e:	e4 c0       	rjmp	.+456    	; 0x2c58 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2a90:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <twi_error>
      twi_releaseBus();
    2a94:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <twi_releaseBus>
      break;
    2a98:	df c0       	rjmp	.+446    	; 0x2c58 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2a9a:	80 35       	cpi	r24, 0x50	; 80
    2a9c:	09 f4       	brne	.+2      	; 0x2aa0 <__vector_24+0x80>
    2a9e:	4f c0       	rjmp	.+158    	; 0x2b3e <__vector_24+0x11e>
    2aa0:	88 35       	cpi	r24, 0x58	; 88
    2aa2:	09 f4       	brne	.+2      	; 0x2aa6 <__vector_24+0x86>
    2aa4:	5d c0       	rjmp	.+186    	; 0x2b60 <__vector_24+0x140>
    2aa6:	88 34       	cpi	r24, 0x48	; 72
    2aa8:	09 f0       	breq	.+2      	; 0x2aac <__vector_24+0x8c>
    2aaa:	d6 c0       	rjmp	.+428    	; 0x2c58 <__vector_24+0x238>
    2aac:	d3 c0       	rjmp	.+422    	; 0x2c54 <__vector_24+0x234>
    2aae:	88 39       	cpi	r24, 0x98	; 152
    2ab0:	09 f4       	brne	.+2      	; 0x2ab4 <__vector_24+0x94>
    2ab2:	c4 c0       	rjmp	.+392    	; 0x2c3c <__vector_24+0x21c>
    2ab4:	a8 f4       	brcc	.+42     	; 0x2ae0 <__vector_24+0xc0>
    2ab6:	88 37       	cpi	r24, 0x78	; 120
    2ab8:	09 f4       	brne	.+2      	; 0x2abc <__vector_24+0x9c>
    2aba:	67 c0       	rjmp	.+206    	; 0x2b8a <__vector_24+0x16a>
    2abc:	38 f4       	brcc	.+14     	; 0x2acc <__vector_24+0xac>
    2abe:	88 36       	cpi	r24, 0x68	; 104
    2ac0:	09 f4       	brne	.+2      	; 0x2ac4 <__vector_24+0xa4>
    2ac2:	63 c0       	rjmp	.+198    	; 0x2b8a <__vector_24+0x16a>
    2ac4:	80 37       	cpi	r24, 0x70	; 112
    2ac6:	09 f4       	brne	.+2      	; 0x2aca <__vector_24+0xaa>
    2ac8:	60 c0       	rjmp	.+192    	; 0x2b8a <__vector_24+0x16a>
    2aca:	c6 c0       	rjmp	.+396    	; 0x2c58 <__vector_24+0x238>
    2acc:	88 38       	cpi	r24, 0x88	; 136
    2ace:	09 f4       	brne	.+2      	; 0x2ad2 <__vector_24+0xb2>
    2ad0:	b5 c0       	rjmp	.+362    	; 0x2c3c <__vector_24+0x21c>
    2ad2:	80 39       	cpi	r24, 0x90	; 144
    2ad4:	09 f4       	brne	.+2      	; 0x2ad8 <__vector_24+0xb8>
    2ad6:	5f c0       	rjmp	.+190    	; 0x2b96 <__vector_24+0x176>
    2ad8:	80 38       	cpi	r24, 0x80	; 128
    2ada:	09 f0       	breq	.+2      	; 0x2ade <__vector_24+0xbe>
    2adc:	bd c0       	rjmp	.+378    	; 0x2c58 <__vector_24+0x238>
    2ade:	5b c0       	rjmp	.+182    	; 0x2b96 <__vector_24+0x176>
    2ae0:	80 3b       	cpi	r24, 0xB0	; 176
    2ae2:	09 f4       	brne	.+2      	; 0x2ae6 <__vector_24+0xc6>
    2ae4:	83 c0       	rjmp	.+262    	; 0x2bec <__vector_24+0x1cc>
    2ae6:	38 f4       	brcc	.+14     	; 0x2af6 <__vector_24+0xd6>
    2ae8:	80 3a       	cpi	r24, 0xA0	; 160
    2aea:	09 f4       	brne	.+2      	; 0x2aee <__vector_24+0xce>
    2aec:	66 c0       	rjmp	.+204    	; 0x2bba <__vector_24+0x19a>
    2aee:	88 3a       	cpi	r24, 0xA8	; 168
    2af0:	09 f4       	brne	.+2      	; 0x2af4 <__vector_24+0xd4>
    2af2:	7c c0       	rjmp	.+248    	; 0x2bec <__vector_24+0x1cc>
    2af4:	b1 c0       	rjmp	.+354    	; 0x2c58 <__vector_24+0x238>
    2af6:	80 3c       	cpi	r24, 0xC0	; 192
    2af8:	09 f4       	brne	.+2      	; 0x2afc <__vector_24+0xdc>
    2afa:	a4 c0       	rjmp	.+328    	; 0x2c44 <__vector_24+0x224>
    2afc:	88 3c       	cpi	r24, 0xC8	; 200
    2afe:	09 f4       	brne	.+2      	; 0x2b02 <__vector_24+0xe2>
    2b00:	a1 c0       	rjmp	.+322    	; 0x2c44 <__vector_24+0x224>
    2b02:	88 3b       	cpi	r24, 0xB8	; 184
    2b04:	09 f4       	brne	.+2      	; 0x2b08 <__vector_24+0xe8>
    2b06:	87 c0       	rjmp	.+270    	; 0x2c16 <__vector_24+0x1f6>
    2b08:	a7 c0       	rjmp	.+334    	; 0x2c58 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2b0a:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <twi_slarw>
    2b0e:	10 c0       	rjmp	.+32     	; 0x2b30 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2b10:	90 91 07 05 	lds	r25, 0x0507	; 0x800507 <twi_masterBufferIndex>
    2b14:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <twi_masterBufferLength>
    2b18:	98 17       	cp	r25, r24
    2b1a:	70 f5       	brcc	.+92     	; 0x2b78 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2b1c:	e0 91 07 05 	lds	r30, 0x0507	; 0x800507 <twi_masterBufferIndex>
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	8e 0f       	add	r24, r30
    2b24:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <twi_masterBufferIndex>
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	e8 5f       	subi	r30, 0xF8	; 248
    2b2c:	fa 4f       	sbci	r31, 0xFA	; 250
    2b2e:	80 81       	ld	r24, Z
    2b30:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2b34:	85 ec       	ldi	r24, 0xC5	; 197
    2b36:	83 c0       	rjmp	.+262    	; 0x2c3e <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2b38:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <twi_error>
    2b3c:	8b c0       	rjmp	.+278    	; 0x2c54 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2b3e:	e0 91 07 05 	lds	r30, 0x0507	; 0x800507 <twi_masterBufferIndex>
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	8e 0f       	add	r24, r30
    2b46:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <twi_masterBufferIndex>
    2b4a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	e8 5f       	subi	r30, 0xF8	; 248
    2b52:	fa 4f       	sbci	r31, 0xFA	; 250
    2b54:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2b56:	90 91 07 05 	lds	r25, 0x0507	; 0x800507 <twi_masterBufferIndex>
    2b5a:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <twi_masterBufferLength>
    2b5e:	6b c0       	rjmp	.+214    	; 0x2c36 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2b60:	e0 91 07 05 	lds	r30, 0x0507	; 0x800507 <twi_masterBufferIndex>
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	8e 0f       	add	r24, r30
    2b68:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <twi_masterBufferIndex>
    2b6c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	e8 5f       	subi	r30, 0xF8	; 248
    2b74:	fa 4f       	sbci	r31, 0xFA	; 250
    2b76:	80 83       	st	Z, r24
	if (twi_sendStop)
    2b78:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <twi_sendStop>
    2b7c:	81 11       	cpse	r24, r1
    2b7e:	6a c0       	rjmp	.+212    	; 0x2c54 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2b86:	84 ea       	ldi	r24, 0xA4	; 164
    2b88:	5e c0       	rjmp	.+188    	; 0x2c46 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2b8a:	83 e0       	ldi	r24, 0x03	; 3
    2b8c:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2b90:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <twi_rxBufferIndex>
    2b94:	cf cf       	rjmp	.-98     	; 0x2b34 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2b96:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <twi_rxBufferIndex>
    2b9a:	80 32       	cpi	r24, 0x20	; 32
    2b9c:	08 f0       	brcs	.+2      	; 0x2ba0 <__vector_24+0x180>
    2b9e:	4e c0       	rjmp	.+156    	; 0x2c3c <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2ba0:	e0 91 c3 04 	lds	r30, 0x04C3	; 0x8004c3 <twi_rxBufferIndex>
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	8e 0f       	add	r24, r30
    2ba8:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <twi_rxBufferIndex>
    2bac:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	ec 53       	subi	r30, 0x3C	; 60
    2bb4:	fb 4f       	sbci	r31, 0xFB	; 251
    2bb6:	80 83       	st	Z, r24
    2bb8:	bd cf       	rjmp	.-134    	; 0x2b34 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2bba:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2bbe:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <twi_rxBufferIndex>
    2bc2:	80 32       	cpi	r24, 0x20	; 32
    2bc4:	30 f4       	brcc	.+12     	; 0x2bd2 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2bc6:	e0 91 c3 04 	lds	r30, 0x04C3	; 0x8004c3 <twi_rxBufferIndex>
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	ec 53       	subi	r30, 0x3C	; 60
    2bce:	fb 4f       	sbci	r31, 0xFB	; 251
    2bd0:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2bd2:	60 91 c3 04 	lds	r22, 0x04C3	; 0x8004c3 <twi_rxBufferIndex>
    2bd6:	70 e0       	ldi	r23, 0x00	; 0
    2bd8:	e0 91 28 05 	lds	r30, 0x0528	; 0x800528 <twi_onSlaveReceive>
    2bdc:	f0 91 29 05 	lds	r31, 0x0529	; 0x800529 <twi_onSlaveReceive+0x1>
    2be0:	84 ec       	ldi	r24, 0xC4	; 196
    2be2:	94 e0       	ldi	r25, 0x04	; 4
    2be4:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2be6:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <twi_rxBufferIndex>
      break;
    2bea:	36 c0       	rjmp	.+108    	; 0x2c58 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2bec:	84 e0       	ldi	r24, 0x04	; 4
    2bee:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2bf2:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2bf6:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2bfa:	e0 91 2a 05 	lds	r30, 0x052A	; 0x80052a <twi_onSlaveTransmit>
    2bfe:	f0 91 2b 05 	lds	r31, 0x052B	; 0x80052b <twi_onSlaveTransmit+0x1>
    2c02:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2c04:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <twi_txBufferLength>
    2c08:	81 11       	cpse	r24, r1
    2c0a:	05 c0       	rjmp	.+10     	; 0x2c16 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2c12:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2c16:	e0 91 e5 04 	lds	r30, 0x04E5	; 0x8004e5 <twi_txBufferIndex>
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	8e 0f       	add	r24, r30
    2c1e:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <twi_txBufferIndex>
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	ea 51       	subi	r30, 0x1A	; 26
    2c26:	fb 4f       	sbci	r31, 0xFB	; 251
    2c28:	80 81       	ld	r24, Z
    2c2a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2c2e:	90 91 e5 04 	lds	r25, 0x04E5	; 0x8004e5 <twi_txBufferIndex>
    2c32:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <twi_txBufferLength>
    2c36:	98 17       	cp	r25, r24
    2c38:	08 f4       	brcc	.+2      	; 0x2c3c <__vector_24+0x21c>
    2c3a:	7c cf       	rjmp	.-264    	; 0x2b34 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2c3c:	85 e8       	ldi	r24, 0x85	; 133
    2c3e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2c42:	0a c0       	rjmp	.+20     	; 0x2c58 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2c44:	85 ec       	ldi	r24, 0xC5	; 197
    2c46:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2c4a:	10 92 2f 05 	sts	0x052F, r1	; 0x80052f <twi_state>
      break;
    2c4e:	04 c0       	rjmp	.+8      	; 0x2c58 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2c50:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <twi_error>
      twi_stop();
    2c54:	0e 94 00 15 	call	0x2a00	; 0x2a00 <twi_stop>
      break;
  }
}
    2c58:	ff 91       	pop	r31
    2c5a:	ef 91       	pop	r30
    2c5c:	bf 91       	pop	r27
    2c5e:	af 91       	pop	r26
    2c60:	9f 91       	pop	r25
    2c62:	8f 91       	pop	r24
    2c64:	7f 91       	pop	r23
    2c66:	6f 91       	pop	r22
    2c68:	5f 91       	pop	r21
    2c6a:	4f 91       	pop	r20
    2c6c:	3f 91       	pop	r19
    2c6e:	2f 91       	pop	r18
    2c70:	0f 90       	pop	r0
    2c72:	0f be       	out	0x3f, r0	; 63
    2c74:	0f 90       	pop	r0
    2c76:	1f 90       	pop	r1
    2c78:	18 95       	reti

00002c7a <__cmpsf2>:
    2c7a:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__fp_cmp>
    2c7e:	08 f4       	brcc	.+2      	; 0x2c82 <__cmpsf2+0x8>
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	08 95       	ret

00002c84 <__fp_cmp>:
    2c84:	99 0f       	add	r25, r25
    2c86:	00 08       	sbc	r0, r0
    2c88:	55 0f       	add	r21, r21
    2c8a:	aa 0b       	sbc	r26, r26
    2c8c:	e0 e8       	ldi	r30, 0x80	; 128
    2c8e:	fe ef       	ldi	r31, 0xFE	; 254
    2c90:	16 16       	cp	r1, r22
    2c92:	17 06       	cpc	r1, r23
    2c94:	e8 07       	cpc	r30, r24
    2c96:	f9 07       	cpc	r31, r25
    2c98:	c0 f0       	brcs	.+48     	; 0x2cca <__fp_cmp+0x46>
    2c9a:	12 16       	cp	r1, r18
    2c9c:	13 06       	cpc	r1, r19
    2c9e:	e4 07       	cpc	r30, r20
    2ca0:	f5 07       	cpc	r31, r21
    2ca2:	98 f0       	brcs	.+38     	; 0x2cca <__fp_cmp+0x46>
    2ca4:	62 1b       	sub	r22, r18
    2ca6:	73 0b       	sbc	r23, r19
    2ca8:	84 0b       	sbc	r24, r20
    2caa:	95 0b       	sbc	r25, r21
    2cac:	39 f4       	brne	.+14     	; 0x2cbc <__fp_cmp+0x38>
    2cae:	0a 26       	eor	r0, r26
    2cb0:	61 f0       	breq	.+24     	; 0x2cca <__fp_cmp+0x46>
    2cb2:	23 2b       	or	r18, r19
    2cb4:	24 2b       	or	r18, r20
    2cb6:	25 2b       	or	r18, r21
    2cb8:	21 f4       	brne	.+8      	; 0x2cc2 <__fp_cmp+0x3e>
    2cba:	08 95       	ret
    2cbc:	0a 26       	eor	r0, r26
    2cbe:	09 f4       	brne	.+2      	; 0x2cc2 <__fp_cmp+0x3e>
    2cc0:	a1 40       	sbci	r26, 0x01	; 1
    2cc2:	a6 95       	lsr	r26
    2cc4:	8f ef       	ldi	r24, 0xFF	; 255
    2cc6:	81 1d       	adc	r24, r1
    2cc8:	81 1d       	adc	r24, r1
    2cca:	08 95       	ret

00002ccc <__gesf2>:
    2ccc:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__fp_cmp>
    2cd0:	08 f4       	brcc	.+2      	; 0x2cd4 <__gesf2+0x8>
    2cd2:	8f ef       	ldi	r24, 0xFF	; 255
    2cd4:	08 95       	ret

00002cd6 <__unordsf2>:
    2cd6:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__fp_cmp>
    2cda:	88 0b       	sbc	r24, r24
    2cdc:	99 0b       	sbc	r25, r25
    2cde:	08 95       	ret

00002ce0 <__mulsi3>:
    2ce0:	db 01       	movw	r26, r22
    2ce2:	8f 93       	push	r24
    2ce4:	9f 93       	push	r25
    2ce6:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <__muluhisi3>
    2cea:	bf 91       	pop	r27
    2cec:	af 91       	pop	r26
    2cee:	a2 9f       	mul	r26, r18
    2cf0:	80 0d       	add	r24, r0
    2cf2:	91 1d       	adc	r25, r1
    2cf4:	a3 9f       	mul	r26, r19
    2cf6:	90 0d       	add	r25, r0
    2cf8:	b2 9f       	mul	r27, r18
    2cfa:	90 0d       	add	r25, r0
    2cfc:	11 24       	eor	r1, r1
    2cfe:	08 95       	ret

00002d00 <__divmodhi4>:
    2d00:	97 fb       	bst	r25, 7
    2d02:	07 2e       	mov	r0, r23
    2d04:	16 f4       	brtc	.+4      	; 0x2d0a <__divmodhi4+0xa>
    2d06:	00 94       	com	r0
    2d08:	07 d0       	rcall	.+14     	; 0x2d18 <__divmodhi4_neg1>
    2d0a:	77 fd       	sbrc	r23, 7
    2d0c:	09 d0       	rcall	.+18     	; 0x2d20 <__divmodhi4_neg2>
    2d0e:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <__udivmodhi4>
    2d12:	07 fc       	sbrc	r0, 7
    2d14:	05 d0       	rcall	.+10     	; 0x2d20 <__divmodhi4_neg2>
    2d16:	3e f4       	brtc	.+14     	; 0x2d26 <__divmodhi4_exit>

00002d18 <__divmodhi4_neg1>:
    2d18:	90 95       	com	r25
    2d1a:	81 95       	neg	r24
    2d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d1e:	08 95       	ret

00002d20 <__divmodhi4_neg2>:
    2d20:	70 95       	com	r23
    2d22:	61 95       	neg	r22
    2d24:	7f 4f       	sbci	r23, 0xFF	; 255

00002d26 <__divmodhi4_exit>:
    2d26:	08 95       	ret

00002d28 <__udivmodsi4>:
    2d28:	a1 e2       	ldi	r26, 0x21	; 33
    2d2a:	1a 2e       	mov	r1, r26
    2d2c:	aa 1b       	sub	r26, r26
    2d2e:	bb 1b       	sub	r27, r27
    2d30:	fd 01       	movw	r30, r26
    2d32:	0d c0       	rjmp	.+26     	; 0x2d4e <__udivmodsi4_ep>

00002d34 <__udivmodsi4_loop>:
    2d34:	aa 1f       	adc	r26, r26
    2d36:	bb 1f       	adc	r27, r27
    2d38:	ee 1f       	adc	r30, r30
    2d3a:	ff 1f       	adc	r31, r31
    2d3c:	a2 17       	cp	r26, r18
    2d3e:	b3 07       	cpc	r27, r19
    2d40:	e4 07       	cpc	r30, r20
    2d42:	f5 07       	cpc	r31, r21
    2d44:	20 f0       	brcs	.+8      	; 0x2d4e <__udivmodsi4_ep>
    2d46:	a2 1b       	sub	r26, r18
    2d48:	b3 0b       	sbc	r27, r19
    2d4a:	e4 0b       	sbc	r30, r20
    2d4c:	f5 0b       	sbc	r31, r21

00002d4e <__udivmodsi4_ep>:
    2d4e:	66 1f       	adc	r22, r22
    2d50:	77 1f       	adc	r23, r23
    2d52:	88 1f       	adc	r24, r24
    2d54:	99 1f       	adc	r25, r25
    2d56:	1a 94       	dec	r1
    2d58:	69 f7       	brne	.-38     	; 0x2d34 <__udivmodsi4_loop>
    2d5a:	60 95       	com	r22
    2d5c:	70 95       	com	r23
    2d5e:	80 95       	com	r24
    2d60:	90 95       	com	r25
    2d62:	9b 01       	movw	r18, r22
    2d64:	ac 01       	movw	r20, r24
    2d66:	bd 01       	movw	r22, r26
    2d68:	cf 01       	movw	r24, r30
    2d6a:	08 95       	ret

00002d6c <__divmodsi4>:
    2d6c:	05 2e       	mov	r0, r21
    2d6e:	97 fb       	bst	r25, 7
    2d70:	1e f4       	brtc	.+6      	; 0x2d78 <__divmodsi4+0xc>
    2d72:	00 94       	com	r0
    2d74:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__negsi2>
    2d78:	57 fd       	sbrc	r21, 7
    2d7a:	07 d0       	rcall	.+14     	; 0x2d8a <__divmodsi4_neg2>
    2d7c:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__udivmodsi4>
    2d80:	07 fc       	sbrc	r0, 7
    2d82:	03 d0       	rcall	.+6      	; 0x2d8a <__divmodsi4_neg2>
    2d84:	4e f4       	brtc	.+18     	; 0x2d98 <__divmodsi4_exit>
    2d86:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__negsi2>

00002d8a <__divmodsi4_neg2>:
    2d8a:	50 95       	com	r21
    2d8c:	40 95       	com	r20
    2d8e:	30 95       	com	r19
    2d90:	21 95       	neg	r18
    2d92:	3f 4f       	sbci	r19, 0xFF	; 255
    2d94:	4f 4f       	sbci	r20, 0xFF	; 255
    2d96:	5f 4f       	sbci	r21, 0xFF	; 255

00002d98 <__divmodsi4_exit>:
    2d98:	08 95       	ret

00002d9a <__negsi2>:
    2d9a:	90 95       	com	r25
    2d9c:	80 95       	com	r24
    2d9e:	70 95       	com	r23
    2da0:	61 95       	neg	r22
    2da2:	7f 4f       	sbci	r23, 0xFF	; 255
    2da4:	8f 4f       	sbci	r24, 0xFF	; 255
    2da6:	9f 4f       	sbci	r25, 0xFF	; 255
    2da8:	08 95       	ret

00002daa <__mulhisi3>:
    2daa:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__umulhisi3>
    2dae:	33 23       	and	r19, r19
    2db0:	12 f4       	brpl	.+4      	; 0x2db6 <__mulhisi3+0xc>
    2db2:	8a 1b       	sub	r24, r26
    2db4:	9b 0b       	sbc	r25, r27
    2db6:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <__usmulhisi3_tail>

00002dba <__umulhisi3>:
    2dba:	a2 9f       	mul	r26, r18
    2dbc:	b0 01       	movw	r22, r0
    2dbe:	b3 9f       	mul	r27, r19
    2dc0:	c0 01       	movw	r24, r0
    2dc2:	a3 9f       	mul	r26, r19
    2dc4:	70 0d       	add	r23, r0
    2dc6:	81 1d       	adc	r24, r1
    2dc8:	11 24       	eor	r1, r1
    2dca:	91 1d       	adc	r25, r1
    2dcc:	b2 9f       	mul	r27, r18
    2dce:	70 0d       	add	r23, r0
    2dd0:	81 1d       	adc	r24, r1
    2dd2:	11 24       	eor	r1, r1
    2dd4:	91 1d       	adc	r25, r1
    2dd6:	08 95       	ret

00002dd8 <__usmulhisi3>:
    2dd8:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__umulhisi3>

00002ddc <__usmulhisi3_tail>:
    2ddc:	b7 ff       	sbrs	r27, 7
    2dde:	08 95       	ret
    2de0:	82 1b       	sub	r24, r18
    2de2:	93 0b       	sbc	r25, r19
    2de4:	08 95       	ret

00002de6 <__muluhisi3>:
    2de6:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__umulhisi3>
    2dea:	a5 9f       	mul	r26, r21
    2dec:	90 0d       	add	r25, r0
    2dee:	b4 9f       	mul	r27, r20
    2df0:	90 0d       	add	r25, r0
    2df2:	a4 9f       	mul	r26, r20
    2df4:	80 0d       	add	r24, r0
    2df6:	91 1d       	adc	r25, r1
    2df8:	11 24       	eor	r1, r1
    2dfa:	08 95       	ret

00002dfc <__udivmodhi4>:
    2dfc:	aa 1b       	sub	r26, r26
    2dfe:	bb 1b       	sub	r27, r27
    2e00:	51 e1       	ldi	r21, 0x11	; 17
    2e02:	07 c0       	rjmp	.+14     	; 0x2e12 <__udivmodhi4_ep>

00002e04 <__udivmodhi4_loop>:
    2e04:	aa 1f       	adc	r26, r26
    2e06:	bb 1f       	adc	r27, r27
    2e08:	a6 17       	cp	r26, r22
    2e0a:	b7 07       	cpc	r27, r23
    2e0c:	10 f0       	brcs	.+4      	; 0x2e12 <__udivmodhi4_ep>
    2e0e:	a6 1b       	sub	r26, r22
    2e10:	b7 0b       	sbc	r27, r23

00002e12 <__udivmodhi4_ep>:
    2e12:	88 1f       	adc	r24, r24
    2e14:	99 1f       	adc	r25, r25
    2e16:	5a 95       	dec	r21
    2e18:	a9 f7       	brne	.-22     	; 0x2e04 <__udivmodhi4_loop>
    2e1a:	80 95       	com	r24
    2e1c:	90 95       	com	r25
    2e1e:	bc 01       	movw	r22, r24
    2e20:	cd 01       	movw	r24, r26
    2e22:	08 95       	ret

00002e24 <__tablejump2__>:
    2e24:	ee 0f       	add	r30, r30
    2e26:	ff 1f       	adc	r31, r31
    2e28:	05 90       	lpm	r0, Z+
    2e2a:	f4 91       	lpm	r31, Z
    2e2c:	e0 2d       	mov	r30, r0
    2e2e:	09 94       	ijmp

00002e30 <_exit>:
    2e30:	f8 94       	cli

00002e32 <__stop_program>:
    2e32:	ff cf       	rjmp	.-2      	; 0x2e32 <__stop_program>
