
LCDTemp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000126  00800100  00003c3e  00003cd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002a4  00800226  00800226  00003df8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003df8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003e28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a48  00000000  00000000  00003e68  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001634c  00000000  00000000  000048b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003607  00000000  00000000  0001abfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005e0c  00000000  00000000  0001e203  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000020b8  00000000  00000000  00024010  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003f86  00000000  00000000  000260c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c4c3  00000000  00000000  0002a04e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009f8  00000000  00000000  00036511  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 92 00 	jmp	0x124	; 0x124 <__dtors_end>
       4:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
       8:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
       c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      10:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      14:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      18:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      1c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      20:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      24:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      28:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      2c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      30:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      34:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__vector_13>
      38:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      3c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      40:	0c 94 87 16 	jmp	0x2d0e	; 0x2d0e <__vector_16>
      44:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      48:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__vector_18>
      4c:	0c 94 0a 12 	jmp	0x2414	; 0x2414 <__vector_19>
      50:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      54:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      58:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      5c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      60:	0c 94 3f 1a 	jmp	0x347e	; 0x347e <__vector_24>
      64:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      68:	08 00       	.word	0x0008	; ????
      6a:	00 00       	nop
      6c:	be 92       	st	-X, r11
      6e:	24 49       	sbci	r18, 0x94	; 148
      70:	12 3e       	cpi	r17, 0xE2	; 226
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
      78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__eeprom_end+0xff7efa12>
      7a:	4c 3e       	cpi	r20, 0xEC	; 236
      7c:	00 00       	nop
      7e:	00 80       	ld	r0, Z
      80:	be ab       	std	Y+54, r27	; 0x36
      82:	aa aa       	std	Y+50, r10	; 0x32
      84:	aa 3e       	cpi	r26, 0xEA	; 234
      86:	00 00       	nop
      88:	00 00       	nop
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	00 00       	nop
      92:	00 00       	nop
      94:	00 08       	sbc	r0, r0
      96:	41 78       	andi	r20, 0x81	; 129
      98:	d3 bb       	out	0x13, r29	; 19
      9a:	43 87       	std	Z+11, r20	; 0x0b
      9c:	d1 13       	cpse	r29, r17
      9e:	3d 19       	sub	r19, r13
      a0:	0e 3c       	cpi	r16, 0xCE	; 206
      a2:	c3 bd       	out	0x23, r28	; 35
      a4:	42 82       	std	Z+2, r4	; 0x02
      a6:	ad 2b       	or	r26, r29
      a8:	3e 68       	ori	r19, 0x8E	; 142
      aa:	ec 82       	std	Y+4, r14	; 0x04
      ac:	76 be       	out	0x36, r7	; 54
      ae:	d9 8f       	std	Y+25, r29	; 0x19
      b0:	e1 a9       	ldd	r30, Z+49	; 0x31
      b2:	3e 4c       	sbci	r19, 0xCE	; 206
      b4:	80 ef       	ldi	r24, 0xF0	; 240
      b6:	ff be       	out	0x3f, r15	; 63
      b8:	01 c4       	rjmp	.+2050   	; 0x8bc <_Z11GetSwitchesv+0x7a>
      ba:	ff 7f       	andi	r31, 0xFF	; 255
      bc:	3f 00       	.word	0x003f	; ????
      be:	00 00       	nop
	...

000000c2 <__trampolines_end>:
      c2:	00 00       	nop
      c4:	00 08       	sbc	r0, r0
      c6:	00 02       	muls	r16, r16
      c8:	01 00       	.word	0x0001	; ????
      ca:	00 03       	mulsu	r16, r16
      cc:	04 07       	cpc	r16, r20
	...

000000d6 <digital_pin_to_bit_mask_PGM>:
      d6:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      e6:	04 08 10 20                                         ... 

000000ea <digital_pin_to_port_PGM>:
      ea:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      fa:	03 03 03 03                                         ....

000000fe <port_to_input_PGM>:
      fe:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000108 <port_to_output_PGM>:
     108:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000112 <port_to_mode_PGM>:
     112:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000011c <__ctors_start>:
     11c:	7e 0c       	add	r7, r14
     11e:	3a 12       	cpse	r3, r26
     120:	82 16       	cp	r8, r18

00000122 <__ctors_end>:
     122:	b6 0c       	add	r11, r6

00000124 <__dtors_end>:
     124:	11 24       	eor	r1, r1
     126:	1f be       	out	0x3f, r1	; 63
     128:	cf ef       	ldi	r28, 0xFF	; 255
     12a:	d8 e0       	ldi	r29, 0x08	; 8
     12c:	de bf       	out	0x3e, r29	; 62
     12e:	cd bf       	out	0x3d, r28	; 61

00000130 <__do_copy_data>:
     130:	12 e0       	ldi	r17, 0x02	; 2
     132:	a0 e0       	ldi	r26, 0x00	; 0
     134:	b1 e0       	ldi	r27, 0x01	; 1
     136:	ee e3       	ldi	r30, 0x3E	; 62
     138:	fc e3       	ldi	r31, 0x3C	; 60
     13a:	02 c0       	rjmp	.+4      	; 0x140 <__do_copy_data+0x10>
     13c:	05 90       	lpm	r0, Z+
     13e:	0d 92       	st	X+, r0
     140:	a6 32       	cpi	r26, 0x26	; 38
     142:	b1 07       	cpc	r27, r17
     144:	d9 f7       	brne	.-10     	; 0x13c <__do_copy_data+0xc>

00000146 <__do_clear_bss>:
     146:	24 e0       	ldi	r18, 0x04	; 4
     148:	a6 e2       	ldi	r26, 0x26	; 38
     14a:	b2 e0       	ldi	r27, 0x02	; 2
     14c:	01 c0       	rjmp	.+2      	; 0x150 <.do_clear_bss_start>

0000014e <.do_clear_bss_loop>:
     14e:	1d 92       	st	X+, r1

00000150 <.do_clear_bss_start>:
     150:	aa 3c       	cpi	r26, 0xCA	; 202
     152:	b2 07       	cpc	r27, r18
     154:	e1 f7       	brne	.-8      	; 0x14e <.do_clear_bss_loop>

00000156 <__do_global_ctors>:
     156:	10 e0       	ldi	r17, 0x00	; 0
     158:	c1 e9       	ldi	r28, 0x91	; 145
     15a:	d0 e0       	ldi	r29, 0x00	; 0
     15c:	04 c0       	rjmp	.+8      	; 0x166 <__do_global_ctors+0x10>
     15e:	21 97       	sbiw	r28, 0x01	; 1
     160:	fe 01       	movw	r30, r28
     162:	0e 94 8e 1b 	call	0x371c	; 0x371c <__tablejump2__>
     166:	ce 38       	cpi	r28, 0x8E	; 142
     168:	d1 07       	cpc	r29, r17
     16a:	c9 f7       	brne	.-14     	; 0x15e <__do_global_ctors+0x8>
     16c:	0e 94 88 14 	call	0x2910	; 0x2910 <main>
     170:	0c 94 12 1e 	jmp	0x3c24	; 0x3c24 <__do_global_dtors>

00000174 <__bad_interrupt>:
     174:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000178 <_ZN9Sensirion7putByteEh>:
  error = getResult(_presult);
  _presult = NULL;
  if (error)
    return error;                   // Only possible error is S_Err_CRC
  return S_Meas_Rdy;
}
     178:	ff 92       	push	r15
     17a:	0f 93       	push	r16
     17c:	1f 93       	push	r17
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	ec 01       	movw	r28, r24
     184:	f6 2e       	mov	r15, r22
     186:	61 e0       	ldi	r22, 0x01	; 1
     188:	88 81       	ld	r24, Y
     18a:	0e 94 00 18 	call	0x3000	; 0x3000 <pinMode>
     18e:	18 e0       	ldi	r17, 0x08	; 8
     190:	00 e8       	ldi	r16, 0x80	; 128
     192:	6f 2d       	mov	r22, r15
     194:	60 23       	and	r22, r16
     196:	88 81       	ld	r24, Y
     198:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
     1a4:	61 e0       	ldi	r22, 0x01	; 1
     1a6:	89 81       	ldd	r24, Y+1	; 0x01
     1a8:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
     1ac:	83 e0       	ldi	r24, 0x03	; 3
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
     1b4:	60 e0       	ldi	r22, 0x00	; 0
     1b6:	89 81       	ldd	r24, Y+1	; 0x01
     1b8:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
     1c4:	06 95       	lsr	r16
     1c6:	11 50       	subi	r17, 0x01	; 1
     1c8:	21 f7       	brne	.-56     	; 0x192 <_ZN9Sensirion7putByteEh+0x1a>
     1ca:	60 e0       	ldi	r22, 0x00	; 0
     1cc:	88 81       	ld	r24, Y
     1ce:	0e 94 00 18 	call	0x3000	; 0x3000 <pinMode>
     1d2:	61 e0       	ldi	r22, 0x01	; 1
     1d4:	88 81       	ld	r24, Y
     1d6:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
     1da:	61 e0       	ldi	r22, 0x01	; 1
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
     1de:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
     1e2:	83 e0       	ldi	r24, 0x03	; 3
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
     1ea:	88 81       	ld	r24, Y
     1ec:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <digitalRead>
     1f0:	8c 01       	movw	r16, r24
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
     1fa:	60 e0       	ldi	r22, 0x00	; 0
     1fc:	89 81       	ldd	r24, Y+1	; 0x01
     1fe:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	01 2b       	or	r16, r17
     206:	09 f4       	brne	.+2      	; 0x20a <_ZN9Sensirion7putByteEh+0x92>
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	1f 91       	pop	r17
     210:	0f 91       	pop	r16
     212:	ff 90       	pop	r15
     214:	08 95       	ret

00000216 <_ZN9Sensirion7getByteEb>:
     216:	ff 92       	push	r15
     218:	0f 93       	push	r16
     21a:	1f 93       	push	r17
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	ec 01       	movw	r28, r24
     222:	f6 2e       	mov	r15, r22
     224:	08 e0       	ldi	r16, 0x08	; 8
     226:	10 e0       	ldi	r17, 0x00	; 0
     228:	61 e0       	ldi	r22, 0x01	; 1
     22a:	89 81       	ldd	r24, Y+1	; 0x01
     22c:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
     238:	88 81       	ld	r24, Y
     23a:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <digitalRead>
     23e:	11 0f       	add	r17, r17
     240:	18 2b       	or	r17, r24
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	89 81       	ldd	r24, Y+1	; 0x01
     246:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
     252:	01 50       	subi	r16, 0x01	; 1
     254:	49 f7       	brne	.-46     	; 0x228 <_ZN9Sensirion7getByteEb+0x12>
     256:	61 e0       	ldi	r22, 0x01	; 1
     258:	88 81       	ld	r24, Y
     25a:	0e 94 00 18 	call	0x3000	; 0x3000 <pinMode>
     25e:	61 e0       	ldi	r22, 0x01	; 1
     260:	6f 25       	eor	r22, r15
     262:	88 81       	ld	r24, Y
     264:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
     270:	61 e0       	ldi	r22, 0x01	; 1
     272:	89 81       	ldd	r24, Y+1	; 0x01
     274:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
     278:	83 e0       	ldi	r24, 0x03	; 3
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
     280:	60 e0       	ldi	r22, 0x00	; 0
     282:	89 81       	ldd	r24, Y+1	; 0x01
     284:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	88 81       	ld	r24, Y
     294:	0e 94 00 18 	call	0x3000	; 0x3000 <pinMode>
     298:	61 e0       	ldi	r22, 0x01	; 1
     29a:	88 81       	ld	r24, Y
     29c:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
     2a0:	81 2f       	mov	r24, r17
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	1f 91       	pop	r17
     2a8:	0f 91       	pop	r16
     2aa:	ff 90       	pop	r15
     2ac:	08 95       	ret

000002ae <_ZN9Sensirion17startTransmissionEv>:
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	ec 01       	movw	r28, r24
     2b4:	61 e0       	ldi	r22, 0x01	; 1
     2b6:	88 81       	ld	r24, Y
     2b8:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
     2bc:	61 e0       	ldi	r22, 0x01	; 1
     2be:	88 81       	ld	r24, Y
     2c0:	0e 94 00 18 	call	0x3000	; 0x3000 <pinMode>
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
     2cc:	61 e0       	ldi	r22, 0x01	; 1
     2ce:	89 81       	ldd	r24, Y+1	; 0x01
     2d0:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	88 81       	ld	r24, Y
     2e0:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
     2ec:	60 e0       	ldi	r22, 0x00	; 0
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
     2f0:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
     2f4:	83 e0       	ldi	r24, 0x03	; 3
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
     2fc:	61 e0       	ldi	r22, 0x01	; 1
     2fe:	89 81       	ldd	r24, Y+1	; 0x01
     300:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
     30c:	61 e0       	ldi	r22, 0x01	; 1
     30e:	88 81       	ld	r24, Y
     310:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	89 81       	ldd	r24, Y+1	; 0x01
     320:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	0c 94 32 17 	jmp	0x2e64	; 0x2e64 <delayMicroseconds>

00000330 <_ZN9Sensirion15resetConnectionEv>:
     330:	1f 93       	push	r17
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	ec 01       	movw	r28, r24
     338:	61 e0       	ldi	r22, 0x01	; 1
     33a:	88 81       	ld	r24, Y
     33c:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
     340:	61 e0       	ldi	r22, 0x01	; 1
     342:	88 81       	ld	r24, Y
     344:	0e 94 00 18 	call	0x3000	; 0x3000 <pinMode>
     348:	83 e0       	ldi	r24, 0x03	; 3
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
     350:	19 e0       	ldi	r17, 0x09	; 9
     352:	61 e0       	ldi	r22, 0x01	; 1
     354:	89 81       	ldd	r24, Y+1	; 0x01
     356:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
     35a:	83 e0       	ldi	r24, 0x03	; 3
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
     362:	60 e0       	ldi	r22, 0x00	; 0
     364:	89 81       	ldd	r24, Y+1	; 0x01
     366:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
     36a:	83 e0       	ldi	r24, 0x03	; 3
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
     372:	11 50       	subi	r17, 0x01	; 1
     374:	71 f7       	brne	.-36     	; 0x352 <_ZN9Sensirion15resetConnectionEv+0x22>
     376:	ce 01       	movw	r24, r28
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	1f 91       	pop	r17
     37e:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <_ZN9Sensirion17startTransmissionEv>

00000382 <_ZN9SensirionC1Ehh>:
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	ec 01       	movw	r28, r24
     388:	84 2f       	mov	r24, r20
     38a:	68 83       	st	Y, r22
     38c:	49 83       	std	Y+1, r20	; 0x01
     38e:	1b 82       	std	Y+3, r1	; 0x03
     390:	1a 82       	std	Y+2, r1	; 0x02
     392:	1c 82       	std	Y+4, r1	; 0x04
     394:	61 e0       	ldi	r22, 0x01	; 1
     396:	0e 94 00 18 	call	0x3000	; 0x3000 <pinMode>
     39a:	ce 01       	movw	r24, r28
     39c:	0e 94 98 01 	call	0x330	; 0x330 <_ZN9Sensirion15resetConnectionEv>
     3a0:	6e e1       	ldi	r22, 0x1E	; 30
     3a2:	ce 01       	movw	r24, r28
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	0c 94 bc 00 	jmp	0x178	; 0x178 <_ZN9Sensirion7putByteEh>

000003ac <_ZN9Sensirion8calcTempEj>:
     3ac:	fc 01       	movw	r30, r24
     3ae:	24 81       	ldd	r18, Z+4	; 0x04
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	20 ff       	sbrs	r18, 0
     3b6:	07 c0       	rjmp	.+14     	; 0x3c6 <_ZN9Sensirion8calcTempEj+0x1a>
     3b8:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <__floatunsisf>
     3bc:	2a e0       	ldi	r18, 0x0A	; 10
     3be:	37 ed       	ldi	r19, 0xD7	; 215
     3c0:	43 e2       	ldi	r20, 0x23	; 35
     3c2:	5d e3       	ldi	r21, 0x3D	; 61
     3c4:	06 c0       	rjmp	.+12     	; 0x3d2 <_ZN9Sensirion8calcTempEj+0x26>
     3c6:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <__floatunsisf>
     3ca:	2a e0       	ldi	r18, 0x0A	; 10
     3cc:	37 ed       	ldi	r19, 0xD7	; 215
     3ce:	43 e2       	ldi	r20, 0x23	; 35
     3d0:	5c e3       	ldi	r21, 0x3C	; 60
     3d2:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__mulsf3>
     3d6:	26 e6       	ldi	r18, 0x66	; 102
     3d8:	36 e6       	ldi	r19, 0x66	; 102
     3da:	40 e2       	ldi	r20, 0x20	; 32
     3dc:	52 e4       	ldi	r21, 0x42	; 66
     3de:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__subsf3>
     3e2:	08 95       	ret

000003e4 <_ZN9Sensirion8calcHumiEjf>:
     3e4:	4f 92       	push	r4
     3e6:	5f 92       	push	r5
     3e8:	6f 92       	push	r6
     3ea:	7f 92       	push	r7
     3ec:	8f 92       	push	r8
     3ee:	9f 92       	push	r9
     3f0:	af 92       	push	r10
     3f2:	bf 92       	push	r11
     3f4:	cf 92       	push	r12
     3f6:	df 92       	push	r13
     3f8:	ef 92       	push	r14
     3fa:	ff 92       	push	r15
     3fc:	49 01       	movw	r8, r18
     3fe:	5a 01       	movw	r10, r20
     400:	fc 01       	movw	r30, r24
     402:	24 81       	ldd	r18, Z+4	; 0x04
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	20 ff       	sbrs	r18, 0
     40a:	2b c0       	rjmp	.+86     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     40c:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <__floatunsisf>
     410:	6b 01       	movw	r12, r22
     412:	7c 01       	movw	r14, r24
     414:	2d eb       	ldi	r18, 0xBD	; 189
     416:	32 e5       	ldi	r19, 0x52	; 82
     418:	46 e1       	ldi	r20, 0x16	; 22
     41a:	5f e3       	ldi	r21, 0x3F	; 63
     41c:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__mulsf3>
     420:	25 ec       	ldi	r18, 0xC5	; 197
     422:	3e ef       	ldi	r19, 0xFE	; 254
     424:	42 e0       	ldi	r20, 0x02	; 2
     426:	50 e4       	ldi	r21, 0x40	; 64
     428:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__subsf3>
     42c:	2b 01       	movw	r4, r22
     42e:	3c 01       	movw	r6, r24
     430:	2b e3       	ldi	r18, 0x3B	; 59
     432:	35 e2       	ldi	r19, 0x25	; 37
     434:	46 ed       	ldi	r20, 0xD6	; 214
     436:	59 eb       	ldi	r21, 0xB9	; 185
     438:	c7 01       	movw	r24, r14
     43a:	b6 01       	movw	r22, r12
     43c:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__mulsf3>
     440:	a7 01       	movw	r20, r14
     442:	96 01       	movw	r18, r12
     444:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__mulsf3>
     448:	9b 01       	movw	r18, r22
     44a:	ac 01       	movw	r20, r24
     44c:	c3 01       	movw	r24, r6
     44e:	b2 01       	movw	r22, r4
     450:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__addsf3>
     454:	2b 01       	movw	r4, r22
     456:	3c 01       	movw	r6, r24
     458:	2c ea       	ldi	r18, 0xAC	; 172
     45a:	35 ec       	ldi	r19, 0xC5	; 197
     45c:	47 ea       	ldi	r20, 0xA7	; 167
     45e:	5a e3       	ldi	r21, 0x3A	; 58
     460:	2a c0       	rjmp	.+84     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     462:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <__floatunsisf>
     466:	6b 01       	movw	r12, r22
     468:	7c 01       	movw	r14, r24
     46a:	2d eb       	ldi	r18, 0xBD	; 189
     46c:	32 e5       	ldi	r19, 0x52	; 82
     46e:	46 e1       	ldi	r20, 0x16	; 22
     470:	5d e3       	ldi	r21, 0x3D	; 61
     472:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__mulsf3>
     476:	25 ec       	ldi	r18, 0xC5	; 197
     478:	3e ef       	ldi	r19, 0xFE	; 254
     47a:	42 e0       	ldi	r20, 0x02	; 2
     47c:	50 e4       	ldi	r21, 0x40	; 64
     47e:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__subsf3>
     482:	2b 01       	movw	r4, r22
     484:	3c 01       	movw	r6, r24
     486:	26 ef       	ldi	r18, 0xF6	; 246
     488:	34 e2       	ldi	r19, 0x24	; 36
     48a:	46 ed       	ldi	r20, 0xD6	; 214
     48c:	55 eb       	ldi	r21, 0xB5	; 181
     48e:	c7 01       	movw	r24, r14
     490:	b6 01       	movw	r22, r12
     492:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__mulsf3>
     496:	a7 01       	movw	r20, r14
     498:	96 01       	movw	r18, r12
     49a:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__mulsf3>
     49e:	9b 01       	movw	r18, r22
     4a0:	ac 01       	movw	r20, r24
     4a2:	c3 01       	movw	r24, r6
     4a4:	b2 01       	movw	r22, r4
     4a6:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__addsf3>
     4aa:	2b 01       	movw	r4, r22
     4ac:	3c 01       	movw	r6, r24
     4ae:	2c ea       	ldi	r18, 0xAC	; 172
     4b0:	35 ec       	ldi	r19, 0xC5	; 197
     4b2:	47 ea       	ldi	r20, 0xA7	; 167
     4b4:	58 e3       	ldi	r21, 0x38	; 56
     4b6:	c7 01       	movw	r24, r14
     4b8:	b6 01       	movw	r22, r12
     4ba:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__mulsf3>
     4be:	2a e0       	ldi	r18, 0x0A	; 10
     4c0:	37 ed       	ldi	r19, 0xD7	; 215
     4c2:	43 e2       	ldi	r20, 0x23	; 35
     4c4:	5c e3       	ldi	r21, 0x3C	; 60
     4c6:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__addsf3>
     4ca:	6b 01       	movw	r12, r22
     4cc:	7c 01       	movw	r14, r24
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	48 ec       	ldi	r20, 0xC8	; 200
     4d4:	51 e4       	ldi	r21, 0x41	; 65
     4d6:	c5 01       	movw	r24, r10
     4d8:	b4 01       	movw	r22, r8
     4da:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__subsf3>
     4de:	9b 01       	movw	r18, r22
     4e0:	ac 01       	movw	r20, r24
     4e2:	c7 01       	movw	r24, r14
     4e4:	b6 01       	movw	r22, r12
     4e6:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__mulsf3>
     4ea:	a3 01       	movw	r20, r6
     4ec:	92 01       	movw	r18, r4
     4ee:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__addsf3>
     4f2:	6b 01       	movw	r12, r22
     4f4:	7c 01       	movw	r14, r24
     4f6:	20 e0       	ldi	r18, 0x00	; 0
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	48 ec       	ldi	r20, 0xC8	; 200
     4fc:	52 e4       	ldi	r21, 0x42	; 66
     4fe:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <__gesf2>
     502:	18 16       	cp	r1, r24
     504:	94 f0       	brlt	.+36     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
     506:	2d ec       	ldi	r18, 0xCD	; 205
     508:	3c ec       	ldi	r19, 0xCC	; 204
     50a:	4c ec       	ldi	r20, 0xCC	; 204
     50c:	5d e3       	ldi	r21, 0x3D	; 61
     50e:	c7 01       	movw	r24, r14
     510:	b6 01       	movw	r22, r12
     512:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__cmpsf2>
     516:	87 ff       	sbrs	r24, 7
     518:	0e c0       	rjmp	.+28     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
     51a:	9d ec       	ldi	r25, 0xCD	; 205
     51c:	c9 2e       	mov	r12, r25
     51e:	9c ec       	ldi	r25, 0xCC	; 204
     520:	d9 2e       	mov	r13, r25
     522:	ed 2c       	mov	r14, r13
     524:	9d e3       	ldi	r25, 0x3D	; 61
     526:	f9 2e       	mov	r15, r25
     528:	06 c0       	rjmp	.+12     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
     52a:	c1 2c       	mov	r12, r1
     52c:	d1 2c       	mov	r13, r1
     52e:	88 ec       	ldi	r24, 0xC8	; 200
     530:	e8 2e       	mov	r14, r24
     532:	82 e4       	ldi	r24, 0x42	; 66
     534:	f8 2e       	mov	r15, r24
     536:	c7 01       	movw	r24, r14
     538:	b6 01       	movw	r22, r12
     53a:	ff 90       	pop	r15
     53c:	ef 90       	pop	r14
     53e:	df 90       	pop	r13
     540:	cf 90       	pop	r12
     542:	bf 90       	pop	r11
     544:	af 90       	pop	r10
     546:	9f 90       	pop	r9
     548:	8f 90       	pop	r8
     54a:	7f 90       	pop	r7
     54c:	6f 90       	pop	r6
     54e:	5f 90       	pop	r5
     550:	4f 90       	pop	r4
     552:	08 95       	ret

00000554 <_ZN9Sensirion12calcDewpointEff>:
     554:	4f 92       	push	r4
     556:	5f 92       	push	r5
     558:	6f 92       	push	r6
     55a:	7f 92       	push	r7
     55c:	8f 92       	push	r8
     55e:	9f 92       	push	r9
     560:	af 92       	push	r10
     562:	bf 92       	push	r11
     564:	cf 92       	push	r12
     566:	df 92       	push	r13
     568:	ef 92       	push	r14
     56a:	ff 92       	push	r15
     56c:	0f 93       	push	r16
     56e:	1f 93       	push	r17
     570:	cb 01       	movw	r24, r22
     572:	ba 01       	movw	r22, r20
     574:	68 01       	movw	r12, r16
     576:	79 01       	movw	r14, r18
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	48 ec       	ldi	r20, 0xC8	; 200
     57e:	52 e4       	ldi	r21, 0x42	; 66
     580:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__divsf3>
     584:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <log>
     588:	4b 01       	movw	r8, r22
     58a:	5c 01       	movw	r10, r24
     58c:	23 ec       	ldi	r18, 0xC3	; 195
     58e:	35 ef       	ldi	r19, 0xF5	; 245
     590:	4c e8       	ldi	r20, 0x8C	; 140
     592:	51 e4       	ldi	r21, 0x41	; 65
     594:	c7 01       	movw	r24, r14
     596:	b6 01       	movw	r22, r12
     598:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__mulsf3>
     59c:	2b 01       	movw	r4, r22
     59e:	3c 01       	movw	r6, r24
     5a0:	28 eb       	ldi	r18, 0xB8	; 184
     5a2:	3e e1       	ldi	r19, 0x1E	; 30
     5a4:	43 e7       	ldi	r20, 0x73	; 115
     5a6:	53 e4       	ldi	r21, 0x43	; 67
     5a8:	c7 01       	movw	r24, r14
     5aa:	b6 01       	movw	r22, r12
     5ac:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__addsf3>
     5b0:	9b 01       	movw	r18, r22
     5b2:	ac 01       	movw	r20, r24
     5b4:	c3 01       	movw	r24, r6
     5b6:	b2 01       	movw	r22, r4
     5b8:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__divsf3>
     5bc:	a5 01       	movw	r20, r10
     5be:	94 01       	movw	r18, r8
     5c0:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__addsf3>
     5c4:	6b 01       	movw	r12, r22
     5c6:	7c 01       	movw	r14, r24
     5c8:	28 eb       	ldi	r18, 0xB8	; 184
     5ca:	3e e1       	ldi	r19, 0x1E	; 30
     5cc:	43 e7       	ldi	r20, 0x73	; 115
     5ce:	53 e4       	ldi	r21, 0x43	; 67
     5d0:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__mulsf3>
     5d4:	4b 01       	movw	r8, r22
     5d6:	5c 01       	movw	r10, r24
     5d8:	a7 01       	movw	r20, r14
     5da:	96 01       	movw	r18, r12
     5dc:	63 ec       	ldi	r22, 0xC3	; 195
     5de:	75 ef       	ldi	r23, 0xF5	; 245
     5e0:	8c e8       	ldi	r24, 0x8C	; 140
     5e2:	91 e4       	ldi	r25, 0x41	; 65
     5e4:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__subsf3>
     5e8:	9b 01       	movw	r18, r22
     5ea:	ac 01       	movw	r20, r24
     5ec:	c5 01       	movw	r24, r10
     5ee:	b4 01       	movw	r22, r8
     5f0:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__divsf3>
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	ff 90       	pop	r15
     5fa:	ef 90       	pop	r14
     5fc:	df 90       	pop	r13
     5fe:	cf 90       	pop	r12
     600:	bf 90       	pop	r11
     602:	af 90       	pop	r10
     604:	9f 90       	pop	r9
     606:	8f 90       	pop	r8
     608:	7f 90       	pop	r7
     60a:	6f 90       	pop	r6
     60c:	5f 90       	pop	r5
     60e:	4f 90       	pop	r4
     610:	08 95       	ret

00000612 <_ZN9Sensirion7calcCRCEhPh>:
     612:	fa 01       	movw	r30, r20
     614:	80 81       	ld	r24, Z
     616:	68 27       	eor	r22, r24
     618:	60 83       	st	Z, r22
     61a:	98 e0       	ldi	r25, 0x08	; 8
     61c:	21 e3       	ldi	r18, 0x31	; 49
     61e:	80 81       	ld	r24, Z
     620:	87 ff       	sbrs	r24, 7
     622:	03 c0       	rjmp	.+6      	; 0x62a <_ZN9Sensirion7calcCRCEhPh+0x18>
     624:	88 0f       	add	r24, r24
     626:	82 27       	eor	r24, r18
     628:	01 c0       	rjmp	.+2      	; 0x62c <_ZN9Sensirion7calcCRCEhPh+0x1a>
     62a:	88 0f       	add	r24, r24
     62c:	80 83       	st	Z, r24
     62e:	91 50       	subi	r25, 0x01	; 1
     630:	b1 f7       	brne	.-20     	; 0x61e <_ZN9Sensirion7calcCRCEhPh+0xc>
     632:	08 95       	ret

00000634 <_ZN9Sensirion6bitrevEh>:
     634:	98 e0       	ldi	r25, 0x08	; 8
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	88 0f       	add	r24, r24
     63a:	26 2f       	mov	r18, r22
     63c:	21 70       	andi	r18, 0x01	; 1
     63e:	82 2b       	or	r24, r18
     640:	66 95       	lsr	r22
     642:	91 50       	subi	r25, 0x01	; 1
     644:	c9 f7       	brne	.-14     	; 0x638 <_ZN9Sensirion6bitrevEh+0x4>
     646:	08 95       	ret

00000648 <_ZN9Sensirion9getResultEPj>:
     648:	cf 92       	push	r12
     64a:	df 92       	push	r13
     64c:	ff 92       	push	r15
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	ec 01       	movw	r28, r24
     658:	8b 01       	movw	r16, r22
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN9Sensirion7getByteEb>
     660:	f8 2e       	mov	r15, r24
     662:	6e 01       	movw	r12, r28
     664:	85 e0       	ldi	r24, 0x05	; 5
     666:	c8 0e       	add	r12, r24
     668:	d1 1c       	adc	r13, r1
     66a:	a6 01       	movw	r20, r12
     66c:	6f 2d       	mov	r22, r15
     66e:	ce 01       	movw	r24, r28
     670:	0e 94 09 03 	call	0x612	; 0x612 <_ZN9Sensirion7calcCRCEhPh>
     674:	8f 2d       	mov	r24, r15
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	f8 01       	movw	r30, r16
     67a:	91 83       	std	Z+1, r25	; 0x01
     67c:	80 83       	st	Z, r24
     67e:	61 e0       	ldi	r22, 0x01	; 1
     680:	ce 01       	movw	r24, r28
     682:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN9Sensirion7getByteEb>
     686:	f8 2e       	mov	r15, r24
     688:	a6 01       	movw	r20, r12
     68a:	68 2f       	mov	r22, r24
     68c:	ce 01       	movw	r24, r28
     68e:	0e 94 09 03 	call	0x612	; 0x612 <_ZN9Sensirion7calcCRCEhPh>
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	f8 01       	movw	r30, r16
     698:	90 81       	ld	r25, Z
     69a:	8f 29       	or	r24, r15
     69c:	91 83       	std	Z+1, r25	; 0x01
     69e:	80 83       	st	Z, r24
     6a0:	60 e0       	ldi	r22, 0x00	; 0
     6a2:	ce 01       	movw	r24, r28
     6a4:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN9Sensirion7getByteEb>
     6a8:	68 2f       	mov	r22, r24
     6aa:	ce 01       	movw	r24, r28
     6ac:	0e 94 1a 03 	call	0x634	; 0x634 <_ZN9Sensirion6bitrevEh>
     6b0:	9d 81       	ldd	r25, Y+5	; 0x05
     6b2:	89 17       	cp	r24, r25
     6b4:	39 f0       	breq	.+14     	; 0x6c4 <_ZN9Sensirion9getResultEPj+0x7c>
     6b6:	8f ef       	ldi	r24, 0xFF	; 255
     6b8:	9f ef       	ldi	r25, 0xFF	; 255
     6ba:	f8 01       	movw	r30, r16
     6bc:	91 83       	std	Z+1, r25	; 0x01
     6be:	80 83       	st	Z, r24
     6c0:	82 e0       	ldi	r24, 0x02	; 2
     6c2:	01 c0       	rjmp	.+2      	; 0x6c6 <_ZN9Sensirion9getResultEPj+0x7e>
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	1f 91       	pop	r17
     6cc:	0f 91       	pop	r16
     6ce:	ff 90       	pop	r15
     6d0:	df 90       	pop	r13
     6d2:	cf 90       	pop	r12
     6d4:	08 95       	ret

000006d6 <_ZN9Sensirion4measEhPjb>:
  *dew = calcDewpoint(*humi, *temp);
  return 0 ;
}

// Initiate measurement.  If blocking, wait for result
uint8_t Sensirion::meas(uint8_t cmd, uint16_t *result, bool block) {
     6d6:	ef 92       	push	r14
     6d8:	ff 92       	push	r15
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	ec 01       	movw	r28, r24
     6e4:	16 2f       	mov	r17, r22
     6e6:	7a 01       	movw	r14, r20
     6e8:	02 2f       	mov	r16, r18
  uint8_t error, i;
#ifdef CRC_ENA
  _crc = bitrev(_stat_reg & SR_MASK);  // Initialize CRC calculation
     6ea:	6c 81       	ldd	r22, Y+4	; 0x04
     6ec:	67 70       	andi	r22, 0x07	; 7
     6ee:	0e 94 1a 03 	call	0x634	; 0x634 <_ZN9Sensirion6bitrevEh>
     6f2:	8d 83       	std	Y+5, r24	; 0x05
#endif
  startTransmission();
     6f4:	ce 01       	movw	r24, r28
     6f6:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN9Sensirion17startTransmissionEv>
  if (cmd == TEMP)
     6fa:	11 23       	and	r17, r17
     6fc:	11 f0       	breq	.+4      	; 0x702 <_ZN9Sensirion4measEhPjb+0x2c>
    cmd = MEAS_TEMP;
  else
    cmd = MEAS_HUMI;
     6fe:	15 e0       	ldi	r17, 0x05	; 5
     700:	01 c0       	rjmp	.+2      	; 0x704 <_ZN9Sensirion4measEhPjb+0x2e>
#ifdef CRC_ENA
  _crc = bitrev(_stat_reg & SR_MASK);  // Initialize CRC calculation
#endif
  startTransmission();
  if (cmd == TEMP)
    cmd = MEAS_TEMP;
     702:	13 e0       	ldi	r17, 0x03	; 3
  else
    cmd = MEAS_HUMI;
  if (error = putByte(cmd))
     704:	61 2f       	mov	r22, r17
     706:	ce 01       	movw	r24, r28
     708:	0e 94 bc 00 	call	0x178	; 0x178 <_ZN9Sensirion7putByteEh>
     70c:	81 11       	cpse	r24, r1
     70e:	27 c0       	rjmp	.+78     	; 0x75e <_ZN9Sensirion4measEhPjb+0x88>
    return error;
#ifdef CRC_ENA
  calcCRC(cmd, &_crc);              // Include command byte in CRC calculation
     710:	ae 01       	movw	r20, r28
     712:	4b 5f       	subi	r20, 0xFB	; 251
     714:	5f 4f       	sbci	r21, 0xFF	; 255
     716:	61 2f       	mov	r22, r17
     718:	ce 01       	movw	r24, r28
     71a:	0e 94 09 03 	call	0x612	; 0x612 <_ZN9Sensirion7calcCRCEhPh>
#endif
  // If non-blocking, save pointer to result and return
  if (!block) {
     71e:	00 23       	and	r16, r16
     720:	c9 f0       	breq	.+50     	; 0x754 <_ZN9Sensirion4measEhPjb+0x7e>
     722:	10 ef       	ldi	r17, 0xF0	; 240
    _presult = result;
    return 0;
  }
  // Otherwise, wait for measurement to complete with 720ms timeout
  i = 240;
  while (digitalRead(_pinData)) {
     724:	88 81       	ld	r24, Y
     726:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <digitalRead>
     72a:	89 2b       	or	r24, r25
     72c:	49 f0       	breq	.+18     	; 0x740 <_ZN9Sensirion4measEhPjb+0x6a>
     72e:	11 50       	subi	r17, 0x01	; 1
    i--;
    if (i == 0)
     730:	a9 f0       	breq	.+42     	; 0x75c <_ZN9Sensirion4measEhPjb+0x86>
      return S_Err_TO;              // Error: Timeout
    delay(3);
     732:	63 e0       	ldi	r22, 0x03	; 3
     734:	70 e0       	ldi	r23, 0x00	; 0
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0e 94 f6 16 	call	0x2dec	; 0x2dec <delay>
     73e:	f2 cf       	rjmp	.-28     	; 0x724 <_ZN9Sensirion4measEhPjb+0x4e>
  }
  error = getResult(result);
     740:	b7 01       	movw	r22, r14
     742:	ce 01       	movw	r24, r28
  return error;
}
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	ff 90       	pop	r15
     74e:	ef 90       	pop	r14
    i--;
    if (i == 0)
      return S_Err_TO;              // Error: Timeout
    delay(3);
  }
  error = getResult(result);
     750:	0c 94 24 03 	jmp	0x648	; 0x648 <_ZN9Sensirion9getResultEPj>
#ifdef CRC_ENA
  calcCRC(cmd, &_crc);              // Include command byte in CRC calculation
#endif
  // If non-blocking, save pointer to result and return
  if (!block) {
    _presult = result;
     754:	fb 82       	std	Y+3, r15	; 0x03
     756:	ea 82       	std	Y+2, r14	; 0x02
    return 0;
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	01 c0       	rjmp	.+2      	; 0x75e <_ZN9Sensirion4measEhPjb+0x88>
  // Otherwise, wait for measurement to complete with 720ms timeout
  i = 240;
  while (digitalRead(_pinData)) {
    i--;
    if (i == 0)
      return S_Err_TO;              // Error: Timeout
     75c:	83 e0       	ldi	r24, 0x03	; 3
    delay(3);
  }
  error = getResult(result);
  return error;
}
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	ff 90       	pop	r15
     768:	ef 90       	pop	r14
     76a:	08 95       	ret

0000076c <_ZN9Sensirion7measureEPfS0_S0_>:
/******************************************************************************
 * User functions
 ******************************************************************************/

// All-in-one (blocking): Returns temperature, humidity, & dewpoint
uint8_t Sensirion::measure(float *temp, float *humi, float *dew) {
     76c:	af 92       	push	r10
     76e:	bf 92       	push	r11
     770:	cf 92       	push	r12
     772:	df 92       	push	r13
     774:	ef 92       	push	r14
     776:	ff 92       	push	r15
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	00 d0       	rcall	.+0      	; 0x782 <_ZN9Sensirion7measureEPfS0_S0_+0x16>
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
     786:	7c 01       	movw	r14, r24
     788:	8b 01       	movw	r16, r22
     78a:	5a 01       	movw	r10, r20
     78c:	69 01       	movw	r12, r18
  uint16_t rawData;
  uint8_t error;
  if (error = measTemp(&rawData))
     78e:	21 e0       	ldi	r18, 0x01	; 1
     790:	ae 01       	movw	r20, r28
     792:	4f 5f       	subi	r20, 0xFF	; 255
     794:	5f 4f       	sbci	r21, 0xFF	; 255
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN9Sensirion4measEhPjb>
     79c:	81 11       	cpse	r24, r1
     79e:	33 c0       	rjmp	.+102    	; 0x806 <_ZN9Sensirion7measureEPfS0_S0_+0x9a>
    return error;
  *temp = calcTemp(rawData);
     7a0:	69 81       	ldd	r22, Y+1	; 0x01
     7a2:	7a 81       	ldd	r23, Y+2	; 0x02
     7a4:	c7 01       	movw	r24, r14
     7a6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_ZN9Sensirion8calcTempEj>
     7aa:	f8 01       	movw	r30, r16
     7ac:	60 83       	st	Z, r22
     7ae:	71 83       	std	Z+1, r23	; 0x01
     7b0:	82 83       	std	Z+2, r24	; 0x02
     7b2:	93 83       	std	Z+3, r25	; 0x03
  if (error = measHumi(&rawData))
     7b4:	21 e0       	ldi	r18, 0x01	; 1
     7b6:	ae 01       	movw	r20, r28
     7b8:	4f 5f       	subi	r20, 0xFF	; 255
     7ba:	5f 4f       	sbci	r21, 0xFF	; 255
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	c7 01       	movw	r24, r14
     7c0:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN9Sensirion4measEhPjb>
     7c4:	81 11       	cpse	r24, r1
     7c6:	1f c0       	rjmp	.+62     	; 0x806 <_ZN9Sensirion7measureEPfS0_S0_+0x9a>
    return error;
  *humi = calcHumi(rawData, *temp);
     7c8:	f8 01       	movw	r30, r16
     7ca:	20 81       	ld	r18, Z
     7cc:	31 81       	ldd	r19, Z+1	; 0x01
     7ce:	42 81       	ldd	r20, Z+2	; 0x02
     7d0:	53 81       	ldd	r21, Z+3	; 0x03
     7d2:	69 81       	ldd	r22, Y+1	; 0x01
     7d4:	7a 81       	ldd	r23, Y+2	; 0x02
     7d6:	c7 01       	movw	r24, r14
     7d8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_ZN9Sensirion8calcHumiEjf>
     7dc:	ab 01       	movw	r20, r22
     7de:	bc 01       	movw	r22, r24
     7e0:	f5 01       	movw	r30, r10
     7e2:	40 83       	st	Z, r20
     7e4:	51 83       	std	Z+1, r21	; 0x01
     7e6:	62 83       	std	Z+2, r22	; 0x02
     7e8:	73 83       	std	Z+3, r23	; 0x03
  *dew = calcDewpoint(*humi, *temp);
     7ea:	f8 01       	movw	r30, r16
     7ec:	00 81       	ld	r16, Z
     7ee:	11 81       	ldd	r17, Z+1	; 0x01
     7f0:	22 81       	ldd	r18, Z+2	; 0x02
     7f2:	33 81       	ldd	r19, Z+3	; 0x03
     7f4:	c7 01       	movw	r24, r14
     7f6:	0e 94 aa 02 	call	0x554	; 0x554 <_ZN9Sensirion12calcDewpointEff>
     7fa:	f6 01       	movw	r30, r12
     7fc:	60 83       	st	Z, r22
     7fe:	71 83       	std	Z+1, r23	; 0x01
     800:	82 83       	std	Z+2, r24	; 0x02
     802:	93 83       	std	Z+3, r25	; 0x03
  return 0 ;
     804:	80 e0       	ldi	r24, 0x00	; 0
}
     806:	0f 90       	pop	r0
     808:	0f 90       	pop	r0
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	1f 91       	pop	r17
     810:	0f 91       	pop	r16
     812:	ff 90       	pop	r15
     814:	ef 90       	pop	r14
     816:	df 90       	pop	r13
     818:	cf 90       	pop	r12
     81a:	bf 90       	pop	r11
     81c:	af 90       	pop	r10
     81e:	08 95       	ret

00000820 <_ZN11EEPROMClass4readEi.isra.1>:
}

byte SwitchToggleState(int sw)
{
	return switchToggleState[sw];
}
     820:	0c 94 c5 1d 	jmp	0x3b8a	; 0x3b8a <eeprom_read_byte>

00000824 <_ZN11EEPROMClass5writeEih.isra.2>:
     824:	0c 94 cd 1d 	jmp	0x3b9a	; 0x3b9a <eeprom_write_byte>

00000828 <_Z13PressDownSeenib>:
     828:	f8 94       	cli
     82a:	fc 01       	movw	r30, r24
     82c:	ef 5c       	subi	r30, 0xCF	; 207
     82e:	fc 4f       	sbci	r31, 0xFC	; 252
     830:	90 81       	ld	r25, Z
     832:	61 11       	cpse	r22, r1
     834:	10 82       	st	Z, r1
     836:	78 94       	sei
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	91 11       	cpse	r25, r1
     83c:	01 c0       	rjmp	.+2      	; 0x840 <_Z13PressDownSeenib+0x18>
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	08 95       	ret

00000842 <_Z11GetSwitchesv>:

bool GetSwitches()
{
     842:	bf 92       	push	r11
     844:	cf 92       	push	r12
     846:	df 92       	push	r13
     848:	ef 92       	push	r14
     84a:	ff 92       	push	r15
     84c:	0f 93       	push	r16
     84e:	1f 93       	push	r17
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	c2 e2       	ldi	r28, 0x22	; 34
     856:	d3 e0       	ldi	r29, 0x03	; 3
     858:	8c e2       	ldi	r24, 0x2C	; 44
     85a:	e8 2e       	mov	r14, r24
     85c:	83 e0       	ldi	r24, 0x03	; 3
     85e:	f8 2e       	mov	r15, r24
     860:	91 e3       	ldi	r25, 0x31	; 49
     862:	c9 2e       	mov	r12, r25
     864:	93 e0       	ldi	r25, 0x03	; 3
     866:	d9 2e       	mov	r13, r25
     868:	07 e2       	ldi	r16, 0x27	; 39
     86a:	13 e0       	ldi	r17, 0x03	; 3

					}
				}
				if (value == LOW)
				{
					switchDOWNSeen[i] = true;
     86c:	bb 24       	eor	r11, r11
     86e:	b3 94       	inc	r11

bool GetSwitches()
{
	for(int i =0; i< switchcount;i++)
	{
		byte value = digitalRead(switchPin[i]);
     870:	88 81       	ld	r24, Y
     872:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <digitalRead>
		if (currentSwitchState[i] != value)
     876:	f7 01       	movw	r30, r14
     878:	90 81       	ld	r25, Z
     87a:	98 17       	cp	r25, r24
     87c:	01 f1       	breq	.+64     	; 0x8be <_Z11GetSwitchesv+0x7c>
		{
			delay (20);
     87e:	64 e1       	ldi	r22, 0x14	; 20
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	0e 94 f6 16 	call	0x2dec	; 0x2dec <delay>
			value = digitalRead(switchPin[i]);
     88a:	88 81       	ld	r24, Y
     88c:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <digitalRead>
			if (currentSwitchState[i] != value)
     890:	f7 01       	movw	r30, r14
     892:	90 81       	ld	r25, Z
     894:	89 17       	cp	r24, r25
     896:	99 f0       	breq	.+38     	; 0x8be <_Z11GetSwitchesv+0x7c>
			{
				if (currentSwitchState[i] == LOW)
     898:	91 11       	cpse	r25, r1
     89a:	0b c0       	rjmp	.+22     	; 0x8b2 <_Z11GetSwitchesv+0x70>
				{
					if (value == HIGH)
     89c:	81 30       	cpi	r24, 0x01	; 1
     89e:	49 f4       	brne	.+18     	; 0x8b2 <_Z11GetSwitchesv+0x70>
					{
						if (switchToggleState[i])
     8a0:	f8 01       	movw	r30, r16
     8a2:	90 81       	ld	r25, Z
     8a4:	99 23       	and	r25, r25
     8a6:	11 f0       	breq	.+4      	; 0x8ac <_Z11GetSwitchesv+0x6a>
						switchToggleState[i] = LOW;
     8a8:	10 82       	st	Z, r1
     8aa:	07 c0       	rjmp	.+14     	; 0x8ba <_Z11GetSwitchesv+0x78>
						else
						switchToggleState[i] = HIGH;
     8ac:	f8 01       	movw	r30, r16
     8ae:	80 83       	st	Z, r24
     8b0:	04 c0       	rjmp	.+8      	; 0x8ba <_Z11GetSwitchesv+0x78>

					}
				}
				if (value == LOW)
     8b2:	81 11       	cpse	r24, r1
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <_Z11GetSwitchesv+0x78>
				{
					switchDOWNSeen[i] = true;
     8b6:	f6 01       	movw	r30, r12
     8b8:	b0 82       	st	Z, r11
				}
				currentSwitchState[i]= value;
     8ba:	f7 01       	movw	r30, r14
     8bc:	80 83       	st	Z, r24
     8be:	21 96       	adiw	r28, 0x01	; 1
     8c0:	ff ef       	ldi	r31, 0xFF	; 255
     8c2:	ef 1a       	sub	r14, r31
     8c4:	ff 0a       	sbc	r15, r31
     8c6:	8f ef       	ldi	r24, 0xFF	; 255
     8c8:	c8 1a       	sub	r12, r24
     8ca:	d8 0a       	sbc	r13, r24
     8cc:	0f 5f       	subi	r16, 0xFF	; 255
     8ce:	1f 4f       	sbci	r17, 0xFF	; 255
	return switchToggleState[sw];
}

bool GetSwitches()
{
	for(int i =0; i< switchcount;i++)
     8d0:	e3 e0       	ldi	r30, 0x03	; 3
     8d2:	c7 32       	cpi	r28, 0x27	; 39
     8d4:	de 07       	cpc	r29, r30
     8d6:	61 f6       	brne	.-104    	; 0x870 <_Z11GetSwitchesv+0x2e>
				}
				currentSwitchState[i]= value;
			}
		}
	}
}
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	ff 90       	pop	r15
     8e2:	ef 90       	pop	r14
     8e4:	df 90       	pop	r13
     8e6:	cf 90       	pop	r12
     8e8:	bf 90       	pop	r11
     8ea:	08 95       	ret

000008ec <__vector_13>:
  ResetTepmerature();
}

	
ISR(TIMER1_OVF_vect)        // interrupt service routine
{
     8ec:	1f 92       	push	r1
     8ee:	0f 92       	push	r0
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	0f 92       	push	r0
     8f4:	11 24       	eor	r1, r1
     8f6:	2f 93       	push	r18
     8f8:	3f 93       	push	r19
     8fa:	4f 93       	push	r20
     8fc:	5f 93       	push	r21
     8fe:	6f 93       	push	r22
     900:	7f 93       	push	r23
     902:	8f 93       	push	r24
     904:	9f 93       	push	r25
     906:	af 93       	push	r26
     908:	bf 93       	push	r27
     90a:	ef 93       	push	r30
     90c:	ff 93       	push	r31
	noInterrupts();           // disable all interrupts
     90e:	f8 94       	cli
	GetSwitches();
     910:	0e 94 21 04 	call	0x842	; 0x842 <_Z11GetSwitchesv>
	interrupts();             // enable all interrupts
     914:	78 94       	sei
	TCNT1 = timer1_counter;   // preload timer
     916:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <timer1_counter>
     91a:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <timer1_counter+0x1>
     91e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     922:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
}
     926:	ff 91       	pop	r31
     928:	ef 91       	pop	r30
     92a:	bf 91       	pop	r27
     92c:	af 91       	pop	r26
     92e:	9f 91       	pop	r25
     930:	8f 91       	pop	r24
     932:	7f 91       	pop	r23
     934:	6f 91       	pop	r22
     936:	5f 91       	pop	r21
     938:	4f 91       	pop	r20
     93a:	3f 91       	pop	r19
     93c:	2f 91       	pop	r18
     93e:	0f 90       	pop	r0
     940:	0f be       	out	0x3f, r0	; 63
     942:	0f 90       	pop	r0
     944:	1f 90       	pop	r1
     946:	18 95       	reti

00000948 <_Z10writeEpromv>:
	  averArr[i] = curtemperature;
  }

}
void writeEprom()
{
     948:	cf 93       	push	r28
	EEPROM.write(0, 'T');
     94a:	64 e5       	ldi	r22, 0x54	; 84
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 12 04 	call	0x824	; 0x824 <_ZN11EEPROMClass5writeEih.isra.2>
	EEPROM.write(1, 'E');
     954:	65 e4       	ldi	r22, 0x45	; 69
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	0e 94 12 04 	call	0x824	; 0x824 <_ZN11EEPROMClass5writeEih.isra.2>
	EEPROM.write(2, 'M');
     95e:	6d e4       	ldi	r22, 0x4D	; 77
     960:	82 e0       	ldi	r24, 0x02	; 2
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	0e 94 12 04 	call	0x824	; 0x824 <_ZN11EEPROMClass5writeEih.isra.2>
	EEPROM.write(3, 'P');
     968:	60 e5       	ldi	r22, 0x50	; 80
     96a:	83 e0       	ldi	r24, 0x03	; 3
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 12 04 	call	0x824	; 0x824 <_ZN11EEPROMClass5writeEih.isra.2>
	EEPROM.write(4, '0');
     972:	60 e3       	ldi	r22, 0x30	; 48
     974:	84 e0       	ldi	r24, 0x04	; 4
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 12 04 	call	0x824	; 0x824 <_ZN11EEPROMClass5writeEih.isra.2>
		
	byte value0 = sollwert & 0xff;
     97c:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <sollwert>
     980:	c0 91 07 03 	lds	r28, 0x0307	; 0x800307 <sollwert+0x1>
	byte value1 = (sollwert >> 8) & 0xff;
	EEPROM.write(5, value0);
     984:	85 e0       	ldi	r24, 0x05	; 5
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	0e 94 12 04 	call	0x824	; 0x824 <_ZN11EEPROMClass5writeEih.isra.2>
	EEPROM.write(6, value1);
     98c:	6c 2f       	mov	r22, r28
     98e:	86 e0       	ldi	r24, 0x06	; 6
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	0e 94 12 04 	call	0x824	; 0x824 <_ZN11EEPROMClass5writeEih.isra.2>

	value0 = workingmode & 0xff;
	//byte value1 = (sollwert >> 8) & 0xff;
	EEPROM.write(7, value0);
     996:	60 91 04 03 	lds	r22, 0x0304	; 0x800304 <workingmode>
     99a:	87 e0       	ldi	r24, 0x07	; 7
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	0e 94 12 04 	call	0x824	; 0x824 <_ZN11EEPROMClass5writeEih.isra.2>
	//EEPROM.write(6, value1);

	value0 = on_off_hysterese & 0xff;
	//byte value1 = (sollwert >> 8) & 0xff;
	EEPROM.write(8, value0);
     9a2:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <on_off_hysterese>
     9a6:	88 e0       	ldi	r24, 0x08	; 8
     9a8:	90 e0       	ldi	r25, 0x00	; 0
	//EEPROM.write(6, value1);

}
     9aa:	cf 91       	pop	r28
	EEPROM.write(7, value0);
	//EEPROM.write(6, value1);

	value0 = on_off_hysterese & 0xff;
	//byte value1 = (sollwert >> 8) & 0xff;
	EEPROM.write(8, value0);
     9ac:	0c 94 12 04 	jmp	0x824	; 0x824 <_ZN11EEPROMClass5writeEih.isra.2>

000009b0 <_Z16CheckStoreEEpromv>:
	hysteresecounter++;
}

void CheckStoreEEprom()
{
	if (PressDownSeen(SW_SPARE, true))
     9b0:	61 e0       	ldi	r22, 0x01	; 1
     9b2:	84 e0       	ldi	r24, 0x04	; 4
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	0e 94 14 04 	call	0x828	; 0x828 <_Z13PressDownSeenib>
     9ba:	88 23       	and	r24, r24
     9bc:	39 f1       	breq	.+78     	; 0xa0c <_Z16CheckStoreEEpromv+0x5c>
	{
		lcd.clear();
     9be:	88 e4       	ldi	r24, 0x48	; 72
     9c0:	93 e0       	ldi	r25, 0x03	; 3
     9c2:	0e 94 8e 12 	call	0x251c	; 0x251c <_ZN3LCD5clearEv>
		lcd.home();
     9c6:	88 e4       	ldi	r24, 0x48	; 72
     9c8:	93 e0       	ldi	r25, 0x03	; 3
     9ca:	0e 94 96 12 	call	0x252c	; 0x252c <_ZN3LCD4homeEv>
		lcd.setCursor(0,0);
     9ce:	40 e0       	ldi	r20, 0x00	; 0
     9d0:	60 e0       	ldi	r22, 0x00	; 0
     9d2:	88 e4       	ldi	r24, 0x48	; 72
     9d4:	93 e0       	ldi	r25, 0x03	; 3
     9d6:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZN3LCD9setCursorEhh>
		lcd.print("Gespeichert...");
     9da:	62 e1       	ldi	r22, 0x12	; 18
     9dc:	71 e0       	ldi	r23, 0x01	; 1
     9de:	88 e4       	ldi	r24, 0x48	; 72
     9e0:	93 e0       	ldi	r25, 0x03	; 3
     9e2:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
		writeEprom();
     9e6:	0e 94 a4 04 	call	0x948	; 0x948 <_Z10writeEpromv>
		delay(1500);
     9ea:	6c ed       	ldi	r22, 0xDC	; 220
     9ec:	75 e0       	ldi	r23, 0x05	; 5
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 f6 16 	call	0x2dec	; 0x2dec <delay>
		lcd.clear();
     9f6:	88 e4       	ldi	r24, 0x48	; 72
     9f8:	93 e0       	ldi	r25, 0x03	; 3
     9fa:	0e 94 8e 12 	call	0x251c	; 0x251c <_ZN3LCD5clearEv>
		lcd.home();
     9fe:	88 e4       	ldi	r24, 0x48	; 72
     a00:	93 e0       	ldi	r25, 0x03	; 3
     a02:	0e 94 96 12 	call	0x252c	; 0x252c <_ZN3LCD4homeEv>
		resfreshStateDisplay = true;
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <resfreshStateDisplay>
     a0c:	08 95       	ret

00000a0e <_Z9readEpromv>:
	//EEPROM.write(6, value1);

}

bool readEprom()
{
     a0e:	cf 93       	push	r28
	if (EEPROM.read(0) != 'T') return false;
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	0e 94 10 04 	call	0x820	; 0x820 <_ZN11EEPROMClass4readEi.isra.1>
     a18:	84 35       	cpi	r24, 0x54	; 84
     a1a:	f1 f5       	brne	.+124    	; 0xa98 <_Z9readEpromv+0x8a>
	if (EEPROM.read(1) != 'E') return false;
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	0e 94 10 04 	call	0x820	; 0x820 <_ZN11EEPROMClass4readEi.isra.1>
     a24:	85 34       	cpi	r24, 0x45	; 69
     a26:	c1 f5       	brne	.+112    	; 0xa98 <_Z9readEpromv+0x8a>
	if (EEPROM.read(2) != 'M') return false;
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 10 04 	call	0x820	; 0x820 <_ZN11EEPROMClass4readEi.isra.1>
     a30:	8d 34       	cpi	r24, 0x4D	; 77
     a32:	91 f5       	brne	.+100    	; 0xa98 <_Z9readEpromv+0x8a>
	if (EEPROM.read(3) != 'P') return false;
     a34:	83 e0       	ldi	r24, 0x03	; 3
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	0e 94 10 04 	call	0x820	; 0x820 <_ZN11EEPROMClass4readEi.isra.1>
     a3c:	80 35       	cpi	r24, 0x50	; 80
     a3e:	61 f5       	brne	.+88     	; 0xa98 <_Z9readEpromv+0x8a>
	if (EEPROM.read(4) != '0') return false;
     a40:	84 e0       	ldi	r24, 0x04	; 4
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 10 04 	call	0x820	; 0x820 <_ZN11EEPROMClass4readEi.isra.1>
     a48:	80 33       	cpi	r24, 0x30	; 48
     a4a:	31 f5       	brne	.+76     	; 0xa98 <_Z9readEpromv+0x8a>

	byte value0 = EEPROM.read(5);
     a4c:	85 e0       	ldi	r24, 0x05	; 5
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 10 04 	call	0x820	; 0x820 <_ZN11EEPROMClass4readEi.isra.1>
     a54:	c8 2f       	mov	r28, r24
	byte value1 = EEPROM.read(6);
     a56:	86 e0       	ldi	r24, 0x06	; 6
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	0e 94 10 04 	call	0x820	; 0x820 <_ZN11EEPROMClass4readEi.isra.1>
	sollwert  = (value1<<8) +value0;
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	98 2f       	mov	r25, r24
     a62:	88 27       	eor	r24, r24
     a64:	8c 0f       	add	r24, r28
     a66:	91 1d       	adc	r25, r1
     a68:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <sollwert+0x1>
     a6c:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <sollwert>

	value0 = EEPROM.read(7);
     a70:	87 e0       	ldi	r24, 0x07	; 7
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0e 94 10 04 	call	0x820	; 0x820 <_ZN11EEPROMClass4readEi.isra.1>
	value1 = 0;
	workingmode = value0;
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <workingmode+0x1>
     a7e:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <workingmode>

	value0 = EEPROM.read(8);
     a82:	88 e0       	ldi	r24, 0x08	; 8
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	0e 94 10 04 	call	0x820	; 0x820 <_ZN11EEPROMClass4readEi.isra.1>
	value1 = 0;
	on_off_hysterese = value0;
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <on_off_hysterese+0x1>
     a90:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <on_off_hysterese>
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	01 c0       	rjmp	.+2      	; 0xa9a <_Z9readEpromv+0x8c>

}

bool readEprom()
{
	if (EEPROM.read(0) != 'T') return false;
     a98:	80 e0       	ldi	r24, 0x00	; 0
	value0 = EEPROM.read(8);
	value1 = 0;
	on_off_hysterese = value0;

	return true;
}
     a9a:	cf 91       	pop	r28
     a9c:	08 95       	ret

00000a9e <_Z25ReadFromSensorTemperaturev>:
	return INVALID_TEMPERATURE;
}


float ReadFromSensorTemperature(){
 tempSensor.measure(&temperature, &humidity, &dewpoint);
     a9e:	26 e3       	ldi	r18, 0x36	; 54
     aa0:	33 e0       	ldi	r19, 0x03	; 3
     aa2:	4a e3       	ldi	r20, 0x3A	; 58
     aa4:	53 e0       	ldi	r21, 0x03	; 3
     aa6:	6e e3       	ldi	r22, 0x3E	; 62
     aa8:	73 e0       	ldi	r23, 0x03	; 3
     aaa:	82 e4       	ldi	r24, 0x42	; 66
     aac:	93 e0       	ldi	r25, 0x03	; 3
     aae:	0e 94 b6 03 	call	0x76c	; 0x76c <_ZN9Sensirion7measureEPfS0_S0_>
 return temperature;
     ab2:	60 91 3e 03 	lds	r22, 0x033E	; 0x80033e <temperature>
     ab6:	70 91 3f 03 	lds	r23, 0x033F	; 0x80033f <temperature+0x1>
     aba:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <temperature+0x2>
     abe:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <temperature+0x3>
}
     ac2:	08 95       	ret

00000ac4 <_Z14ReadTemperturev>:
//
//}
#define temparrlen 5
float temparr[temparrlen];
float ReadTemperture()
{
     ac4:	af 92       	push	r10
     ac6:	bf 92       	push	r11
     ac8:	cf 92       	push	r12
     aca:	df 92       	push	r13
     acc:	ef 92       	push	r14
     ace:	ff 92       	push	r15
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
	for (byte i=0; i<temparrlen;i++)
	{
		byte tCnt =0;
		for (byte j=0;j<temparrlen;j++)
		{
			float dif = temparr[i]-temparr[j];
     ad8:	54 e1       	ldi	r21, 0x14	; 20
     ada:	e5 2e       	mov	r14, r21
     adc:	f1 2c       	mov	r15, r1
#define temparrlen 5
float temparr[temparrlen];
float ReadTemperture()
{
	
    int cnt=0;
     ade:	c0 e0       	ldi	r28, 0x00	; 0
     ae0:	d0 e0       	ldi	r29, 0x00	; 0
     ae2:	e1 e0       	ldi	r30, 0x01	; 1
     ae4:	ee 1a       	sub	r14, r30
     ae6:	f1 08       	sbc	r15, r1
	int emergancyexit = 20;
    while (cnt < temparrlen)
	{	
		emergancyexit--;
		if (emergancyexit == 0) return INVALID_TEMPERATURE;
     ae8:	39 f4       	brne	.+14     	; 0xaf8 <_Z14ReadTemperturev+0x34>
			if (difa < 0.5) tCnt++;
		}
		if (tCnt > 3) return temparr[i];
	}
	
	return INVALID_TEMPERATURE;
     aea:	c1 2c       	mov	r12, r1
     aec:	d1 2c       	mov	r13, r1
     aee:	3a e7       	ldi	r19, 0x7A	; 122
     af0:	e3 2e       	mov	r14, r19
     af2:	34 ec       	ldi	r19, 0xC4	; 196
     af4:	f3 2e       	mov	r15, r19
     af6:	50 c0       	rjmp	.+160    	; 0xb98 <_Z14ReadTemperturev+0xd4>
    while (cnt < temparrlen)
	{	
		emergancyexit--;
		if (emergancyexit == 0) return INVALID_TEMPERATURE;
		
		temparr[cnt] = ReadFromSensorTemperature();
     af8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_Z25ReadFromSensorTemperaturev>
     afc:	8e 01       	movw	r16, r28
     afe:	00 0f       	add	r16, r16
     b00:	11 1f       	adc	r17, r17
     b02:	00 0f       	add	r16, r16
     b04:	11 1f       	adc	r17, r17
     b06:	0a 5d       	subi	r16, 0xDA	; 218
     b08:	1d 4f       	sbci	r17, 0xFD	; 253
     b0a:	f8 01       	movw	r30, r16
     b0c:	60 83       	st	Z, r22
     b0e:	71 83       	std	Z+1, r23	; 0x01
     b10:	82 83       	std	Z+2, r24	; 0x02
     b12:	93 83       	std	Z+3, r25	; 0x03
		delay(1);
     b14:	61 e0       	ldi	r22, 0x01	; 1
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 f6 16 	call	0x2dec	; 0x2dec <delay>
		if (temparr[cnt] == INVALID_TEMPERATURE) continue;
     b20:	20 e0       	ldi	r18, 0x00	; 0
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	4a e7       	ldi	r20, 0x7A	; 122
     b26:	54 ec       	ldi	r21, 0xC4	; 196
     b28:	f8 01       	movw	r30, r16
     b2a:	60 81       	ld	r22, Z
     b2c:	71 81       	ldd	r23, Z+1	; 0x01
     b2e:	82 81       	ldd	r24, Z+2	; 0x02
     b30:	93 81       	ldd	r25, Z+3	; 0x03
     b32:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__cmpsf2>
     b36:	81 11       	cpse	r24, r1
     b38:	2d c0       	rjmp	.+90     	; 0xb94 <_Z14ReadTemperturev+0xd0>
float ReadTemperture()
{
	
    int cnt=0;
	int emergancyexit = 20;
    while (cnt < temparrlen)
     b3a:	c5 30       	cpi	r28, 0x05	; 5
     b3c:	d1 05       	cpc	r29, r1
     b3e:	8c f2       	brlt	.-94     	; 0xae2 <_Z14ReadTemperturev+0x1e>
     b40:	c6 e2       	ldi	r28, 0x26	; 38
     b42:	d2 e0       	ldi	r29, 0x02	; 2
	for (byte i=0; i<temparrlen;i++)
	{
		byte tCnt =0;
		for (byte j=0;j<temparrlen;j++)
		{
			float dif = temparr[i]-temparr[j];
     b44:	c9 90       	ld	r12, Y+
     b46:	d9 90       	ld	r13, Y+
     b48:	e9 90       	ld	r14, Y+
     b4a:	f9 90       	ld	r15, Y+
     b4c:	46 e2       	ldi	r20, 0x26	; 38
     b4e:	a4 2e       	mov	r10, r20
     b50:	42 e0       	ldi	r20, 0x02	; 2
     b52:	b4 2e       	mov	r11, r20
     b54:	10 e0       	ldi	r17, 0x00	; 0
     b56:	f5 01       	movw	r30, r10
     b58:	21 91       	ld	r18, Z+
     b5a:	31 91       	ld	r19, Z+
     b5c:	41 91       	ld	r20, Z+
     b5e:	51 91       	ld	r21, Z+
     b60:	5f 01       	movw	r10, r30
			float difa = fabs(dif);
			if (difa < 0.5) tCnt++;
     b62:	c7 01       	movw	r24, r14
     b64:	b6 01       	movw	r22, r12
     b66:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__subsf3>
     b6a:	9f 77       	andi	r25, 0x7F	; 127
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	5f e3       	ldi	r21, 0x3F	; 63
     b74:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__cmpsf2>
     b78:	87 fd       	sbrc	r24, 7
     b7a:	1f 5f       	subi	r17, 0xFF	; 255
	} 
	
	for (byte i=0; i<temparrlen;i++)
	{
		byte tCnt =0;
		for (byte j=0;j<temparrlen;j++)
     b7c:	fa e3       	ldi	r31, 0x3A	; 58
     b7e:	af 16       	cp	r10, r31
     b80:	f2 e0       	ldi	r31, 0x02	; 2
     b82:	bf 06       	cpc	r11, r31
     b84:	41 f7       	brne	.-48     	; 0xb56 <_Z14ReadTemperturev+0x92>
		{
			float dif = temparr[i]-temparr[j];
			float difa = fabs(dif);
			if (difa < 0.5) tCnt++;
		}
		if (tCnt > 3) return temparr[i];
     b86:	14 30       	cpi	r17, 0x04	; 4
     b88:	38 f4       	brcc	.+14     	; 0xb98 <_Z14ReadTemperturev+0xd4>
		delay(1);
		if (temparr[cnt] == INVALID_TEMPERATURE) continue;
		cnt++;
	} 
	
	for (byte i=0; i<temparrlen;i++)
     b8a:	82 e0       	ldi	r24, 0x02	; 2
     b8c:	ca 33       	cpi	r28, 0x3A	; 58
     b8e:	d8 07       	cpc	r29, r24
     b90:	c9 f6       	brne	.-78     	; 0xb44 <_Z14ReadTemperturev+0x80>
     b92:	ab cf       	rjmp	.-170    	; 0xaea <_Z14ReadTemperturev+0x26>
		if (emergancyexit == 0) return INVALID_TEMPERATURE;
		
		temparr[cnt] = ReadFromSensorTemperature();
		delay(1);
		if (temparr[cnt] == INVALID_TEMPERATURE) continue;
		cnt++;
     b94:	21 96       	adiw	r28, 0x01	; 1
     b96:	d1 cf       	rjmp	.-94     	; 0xb3a <_Z14ReadTemperturev+0x76>
		}
		if (tCnt > 3) return temparr[i];
	}
	
	return INVALID_TEMPERATURE;
}
     b98:	c7 01       	movw	r24, r14
     b9a:	b6 01       	movw	r22, r12
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	1f 91       	pop	r17
     ba2:	0f 91       	pop	r16
     ba4:	ff 90       	pop	r15
     ba6:	ef 90       	pop	r14
     ba8:	df 90       	pop	r13
     baa:	cf 90       	pop	r12
     bac:	bf 90       	pop	r11
     bae:	af 90       	pop	r10
     bb0:	08 95       	ret

00000bb2 <_Z16ResetTepmeraturev>:
	}
}

void ResetTepmerature()
{
  curtemperature = ReadTemperture();
     bb2:	0e 94 62 05 	call	0xac4	; 0xac4 <_Z14ReadTemperturev>
     bb6:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <curtemperature>
     bba:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <curtemperature+0x1>
     bbe:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <curtemperature+0x2>
     bc2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <curtemperature+0x3>
    minTemperature = curtemperature ;
     bc6:	60 93 ff 02 	sts	0x02FF, r22	; 0x8002ff <minTemperature>
     bca:	70 93 00 03 	sts	0x0300, r23	; 0x800300 <minTemperature+0x1>
     bce:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <minTemperature+0x2>
     bd2:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <minTemperature+0x3>
  maxTemperature = curtemperature ;
     bd6:	60 93 fb 02 	sts	0x02FB, r22	; 0x8002fb <maxTemperature>
     bda:	70 93 fc 02 	sts	0x02FC, r23	; 0x8002fc <maxTemperature+0x1>
     bde:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <maxTemperature+0x2>
     be2:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <maxTemperature+0x3>
  averTemperature = curtemperature;
     be6:	60 93 63 02 	sts	0x0263, r22	; 0x800263 <averTemperature>
     bea:	70 93 64 02 	sts	0x0264, r23	; 0x800264 <averTemperature+0x1>
     bee:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <averTemperature+0x2>
     bf2:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <averTemperature+0x3>
     bf6:	eb e6       	ldi	r30, 0x6B	; 107
     bf8:	f2 e0       	ldi	r31, 0x02	; 2
  for(int i =0; i< 36;i++)
  {
	  averArr[i] = curtemperature;
     bfa:	61 93       	st	Z+, r22
     bfc:	71 93       	st	Z+, r23
     bfe:	81 93       	st	Z+, r24
     c00:	91 93       	st	Z+, r25
{
  curtemperature = ReadTemperture();
    minTemperature = curtemperature ;
  maxTemperature = curtemperature ;
  averTemperature = curtemperature;
  for(int i =0; i< 36;i++)
     c02:	22 e0       	ldi	r18, 0x02	; 2
     c04:	eb 3f       	cpi	r30, 0xFB	; 251
     c06:	f2 07       	cpc	r31, r18
     c08:	c1 f7       	brne	.-16     	; 0xbfa <_Z16ResetTepmeraturev+0x48>
  {
	  averArr[i] = curtemperature;
  }

}
     c0a:	08 95       	ret

00000c0c <_Z13floatToStringPcfiib>:
float ReadFromSensorTemperature(){
 tempSensor.measure(&temperature, &humidity, &dewpoint);
 return temperature;
}

char * floatToString(char * outstr, float value, int places, int minwidth, bool rightjustify) {
     c0c:	2f 92       	push	r2
     c0e:	3f 92       	push	r3
     c10:	4f 92       	push	r4
     c12:	5f 92       	push	r5
     c14:	6f 92       	push	r6
     c16:	7f 92       	push	r7
     c18:	8f 92       	push	r8
     c1a:	9f 92       	push	r9
     c1c:	af 92       	push	r10
     c1e:	bf 92       	push	r11
     c20:	cf 92       	push	r12
     c22:	df 92       	push	r13
     c24:	ef 92       	push	r14
     c26:	ff 92       	push	r15
     c28:	0f 93       	push	r16
     c2a:	1f 93       	push	r17
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	2b 97       	sbiw	r28, 0x0b	; 11
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	de bf       	out	0x3e, r29	; 62
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	cd bf       	out	0x3d, r28	; 61
     c40:	4c 01       	movw	r8, r24
     c42:	2a 01       	movw	r4, r20
     c44:	3b 01       	movw	r6, r22
     c46:	3f 83       	std	Y+7, r19	; 0x07
     c48:	2e 83       	std	Y+6, r18	; 0x06
     c4a:	58 01       	movw	r10, r16
     c4c:	e8 86       	std	Y+8, r14	; 0x08
	// make sure we round properly. this could use pow from <math.h>, but doesn't seem worth the import
	// if this rounding step isn't here, the value  54.321 prints as 54.3209

	// calculate rounding term d:   0.5/pow(10,places)
	float d = 0.5;
	if (value < 0)
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	a9 01       	movw	r20, r18
     c54:	c3 01       	movw	r24, r6
     c56:	b2 01       	movw	r22, r4
     c58:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__cmpsf2>
     c5c:	87 ff       	sbrs	r24, 7
     c5e:	05 c0       	rjmp	.+10     	; 0xc6a <_Z13floatToStringPcfiib+0x5e>
	d *= -1.0;
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	9f eb       	ldi	r25, 0xBF	; 191
     c68:	04 c0       	rjmp	.+8      	; 0xc72 <_Z13floatToStringPcfiib+0x66>
	int extra = 0;
	// make sure we round properly. this could use pow from <math.h>, but doesn't seem worth the import
	// if this rounding step isn't here, the value  54.321 prints as 54.3209

	// calculate rounding term d:   0.5/pow(10,places)
	float d = 0.5;
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	9f e3       	ldi	r25, 0x3F	; 63
	if (value < 0)
	d *= -1.0;
     c72:	1a 82       	std	Y+2, r1	; 0x02
     c74:	19 82       	std	Y+1, r1	; 0x01
	// divide by ten for each decimal place
	for (i = 0; i < places; i++)
     c76:	29 81       	ldd	r18, Y+1	; 0x01
     c78:	3a 81       	ldd	r19, Y+2	; 0x02
     c7a:	4e 81       	ldd	r20, Y+6	; 0x06
     c7c:	5f 81       	ldd	r21, Y+7	; 0x07
     c7e:	24 17       	cp	r18, r20
     c80:	35 07       	cpc	r19, r21
     c82:	64 f4       	brge	.+24     	; 0xc9c <_Z13floatToStringPcfiib+0x90>
	d/= 10.0;
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	40 e2       	ldi	r20, 0x20	; 32
     c8a:	51 e4       	ldi	r21, 0x41	; 65
     c8c:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__divsf3>
	// calculate rounding term d:   0.5/pow(10,places)
	float d = 0.5;
	if (value < 0)
	d *= -1.0;
	// divide by ten for each decimal place
	for (i = 0; i < places; i++)
     c90:	e9 81       	ldd	r30, Y+1	; 0x01
     c92:	fa 81       	ldd	r31, Y+2	; 0x02
     c94:	31 96       	adiw	r30, 0x01	; 1
     c96:	fa 83       	std	Y+2, r31	; 0x02
     c98:	e9 83       	std	Y+1, r30	; 0x01
     c9a:	ed cf       	rjmp	.-38     	; 0xc76 <_Z13floatToStringPcfiib+0x6a>
	d/= 10.0;
	// this small addition, combined with truncation will round our values properly
	tempfloat +=  d;
     c9c:	a3 01       	movw	r20, r6
     c9e:	92 01       	movw	r18, r4
     ca0:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__addsf3>
     ca4:	6b 01       	movw	r12, r22
     ca6:	7c 01       	movw	r14, r24

	// first get value tens to be the large power of ten less than value
	if (value < 0)
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	a9 01       	movw	r20, r18
     cae:	c3 01       	movw	r24, r6
     cb0:	b2 01       	movw	r22, r4
     cb2:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__cmpsf2>
     cb6:	87 ff       	sbrs	r24, 7
     cb8:	04 c0       	rjmp	.+8      	; 0xcc2 <_Z13floatToStringPcfiib+0xb6>
	tempfloat *= -1.0;
     cba:	f7 fa       	bst	r15, 7
     cbc:	f0 94       	com	r15
     cbe:	f7 f8       	bld	r15, 7
     cc0:	f0 94       	com	r15
	// if this rounding step isn't here, the value  54.321 prints as 54.3209

	// calculate rounding term d:   0.5/pow(10,places)
	float d = 0.5;
	if (value < 0)
	d *= -1.0;
     cc2:	21 2c       	mov	r2, r1
     cc4:	31 2c       	mov	r3, r1
     cc6:	fd ec       	ldi	r31, 0xCD	; 205
     cc8:	f9 83       	std	Y+1, r31	; 0x01
     cca:	2c ec       	ldi	r18, 0xCC	; 204
     ccc:	2b 83       	std	Y+3, r18	; 0x03
     cce:	3c ec       	ldi	r19, 0xCC	; 204
     cd0:	3c 83       	std	Y+4, r19	; 0x04
     cd2:	4d e3       	ldi	r20, 0x3D	; 61
     cd4:	4d 83       	std	Y+5, r20	; 0x05
	tempfloat +=  d;

	// first get value tens to be the large power of ten less than value
	if (value < 0)
	tempfloat *= -1.0;
	while ((tens * 10.0) <= tempfloat) {
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	40 e2       	ldi	r20, 0x20	; 32
     cdc:	51 e4       	ldi	r21, 0x41	; 65
     cde:	69 81       	ldd	r22, Y+1	; 0x01
     ce0:	7b 81       	ldd	r23, Y+3	; 0x03
     ce2:	8c 81       	ldd	r24, Y+4	; 0x04
     ce4:	9d 81       	ldd	r25, Y+5	; 0x05
     ce6:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__mulsf3>
     cea:	8b 01       	movw	r16, r22
     cec:	8b 87       	std	Y+11, r24	; 0x0b
     cee:	99 87       	std	Y+9, r25	; 0x09
     cf0:	a7 01       	movw	r20, r14
     cf2:	96 01       	movw	r18, r12
     cf4:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__cmpsf2>
     cf8:	18 16       	cp	r1, r24
     cfa:	54 f0       	brlt	.+20     	; 0xd10 <_Z13floatToStringPcfiib+0x104>
		tens *= 10.0;
		tenscount += 1;
     cfc:	5f ef       	ldi	r21, 0xFF	; 255
     cfe:	25 1a       	sub	r2, r21
     d00:	35 0a       	sbc	r3, r21

	// first get value tens to be the large power of ten less than value
	if (value < 0)
	tempfloat *= -1.0;
	while ((tens * 10.0) <= tempfloat) {
		tens *= 10.0;
     d02:	09 83       	std	Y+1, r16	; 0x01
     d04:	1b 83       	std	Y+3, r17	; 0x03
     d06:	8b 85       	ldd	r24, Y+11	; 0x0b
     d08:	8c 83       	std	Y+4, r24	; 0x04
     d0a:	99 85       	ldd	r25, Y+9	; 0x09
     d0c:	9d 83       	std	Y+5, r25	; 0x05
	tempfloat +=  d;

	// first get value tens to be the large power of ten less than value
	if (value < 0)
	tempfloat *= -1.0;
	while ((tens * 10.0) <= tempfloat) {
     d0e:	e3 cf       	rjmp	.-58     	; 0xcd6 <_Z13floatToStringPcfiib+0xca>
		tens *= 10.0;
		tenscount += 1;
	}

	if (tenscount > 0)
     d10:	21 14       	cp	r2, r1
     d12:	31 04       	cpc	r3, r1
     d14:	29 f0       	breq	.+10     	; 0xd20 <_Z13floatToStringPcfiib+0x114>
	charcount += tenscount;
     d16:	f1 01       	movw	r30, r2
     d18:	31 96       	adiw	r30, 0x01	; 1
     d1a:	fa 87       	std	Y+10, r31	; 0x0a
     d1c:	e9 87       	std	Y+9, r30	; 0x09
     d1e:	04 c0       	rjmp	.+8      	; 0xd28 <_Z13floatToStringPcfiib+0x11c>
	else
	charcount += 1;
     d20:	22 e0       	ldi	r18, 0x02	; 2
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	3a 87       	std	Y+10, r19	; 0x0a
     d26:	29 87       	std	Y+9, r18	; 0x09

	if (value < 0)
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	a9 01       	movw	r20, r18
     d2e:	c3 01       	movw	r24, r6
     d30:	b2 01       	movw	r22, r4
     d32:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__cmpsf2>
     d36:	87 ff       	sbrs	r24, 7
     d38:	06 c0       	rjmp	.+12     	; 0xd46 <_Z13floatToStringPcfiib+0x13a>
	charcount += 1;
     d3a:	49 85       	ldd	r20, Y+9	; 0x09
     d3c:	5a 85       	ldd	r21, Y+10	; 0x0a
     d3e:	4f 5f       	subi	r20, 0xFF	; 255
     d40:	5f 4f       	sbci	r21, 0xFF	; 255
     d42:	5a 87       	std	Y+10, r21	; 0x0a
     d44:	49 87       	std	Y+9, r20	; 0x09
	charcount += 1 + places;
     d46:	8e 81       	ldd	r24, Y+6	; 0x06
     d48:	9f 81       	ldd	r25, Y+7	; 0x07
     d4a:	01 96       	adiw	r24, 0x01	; 1
     d4c:	e9 85       	ldd	r30, Y+9	; 0x09
     d4e:	fa 85       	ldd	r31, Y+10	; 0x0a
     d50:	e8 0f       	add	r30, r24
     d52:	f9 1f       	adc	r31, r25
     d54:	fa 87       	std	Y+10, r31	; 0x0a
     d56:	e9 87       	std	Y+9, r30	; 0x09

	minwidth += 1; // both count the null final character
     d58:	85 01       	movw	r16, r10
     d5a:	0f 5f       	subi	r16, 0xFF	; 255
     d5c:	1f 4f       	sbci	r17, 0xFF	; 255
	if (minwidth > charcount){
     d5e:	e0 17       	cp	r30, r16
     d60:	f1 07       	cpc	r31, r17
     d62:	84 f4       	brge	.+32     	; 0xd84 <_Z13floatToStringPcfiib+0x178>
		extra = minwidth - charcount;
     d64:	0e 1b       	sub	r16, r30
     d66:	1f 0b       	sbc	r17, r31
		charcount = minwidth;
	}

	if (extra > 0 and rightjustify) {
     d68:	f8 85       	ldd	r31, Y+8	; 0x08
     d6a:	ff 23       	and	r31, r31
     d6c:	69 f0       	breq	.+26     	; 0xd88 <_Z13floatToStringPcfiib+0x17c>
     d6e:	f4 01       	movw	r30, r8
     d70:	c4 01       	movw	r24, r8
     d72:	80 0f       	add	r24, r16
     d74:	91 1f       	adc	r25, r17
		for (int i = 0; i< extra; i++) {
			outstr[c++] = ' ';
     d76:	20 e2       	ldi	r18, 0x20	; 32
     d78:	21 93       	st	Z+, r18
		extra = minwidth - charcount;
		charcount = minwidth;
	}

	if (extra > 0 and rightjustify) {
		for (int i = 0; i< extra; i++) {
     d7a:	8e 17       	cp	r24, r30
     d7c:	9f 07       	cpc	r25, r31
     d7e:	e1 f7       	brne	.-8      	; 0xd78 <_Z13floatToStringPcfiib+0x16c>
			outstr[c++] = ' ';
     d80:	58 01       	movw	r10, r16
     d82:	04 c0       	rjmp	.+8      	; 0xd8c <_Z13floatToStringPcfiib+0x180>
	int tenscount = 0;
	int i;
	float tempfloat = value;
	int c = 0;
	int charcount = 1;
	int extra = 0;
     d84:	00 e0       	ldi	r16, 0x00	; 0
     d86:	10 e0       	ldi	r17, 0x00	; 0
	int digit;
	float tens = 0.1;
	int tenscount = 0;
	int i;
	float tempfloat = value;
	int c = 0;
     d88:	a1 2c       	mov	r10, r1
     d8a:	b1 2c       	mov	r11, r1
			outstr[c++] = ' ';
		}
	}

	// write out the negative if needed
	if (value < 0)
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	a9 01       	movw	r20, r18
     d92:	c3 01       	movw	r24, r6
     d94:	b2 01       	movw	r22, r4
     d96:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__cmpsf2>
     d9a:	87 ff       	sbrs	r24, 7
     d9c:	09 c0       	rjmp	.+18     	; 0xdb0 <_Z13floatToStringPcfiib+0x1a4>
	outstr[c++] = '-';
     d9e:	f4 01       	movw	r30, r8
     da0:	ea 0d       	add	r30, r10
     da2:	fb 1d       	adc	r31, r11
     da4:	8d e2       	ldi	r24, 0x2D	; 45
     da6:	80 83       	st	Z, r24
     da8:	95 01       	movw	r18, r10
     daa:	2f 5f       	subi	r18, 0xFF	; 255
     dac:	3f 4f       	sbci	r19, 0xFF	; 255
     dae:	59 01       	movw	r10, r18

	if (tenscount == 0)
     db0:	21 14       	cp	r2, r1
     db2:	31 04       	cpc	r3, r1
     db4:	59 f4       	brne	.+22     	; 0xdcc <_Z13floatToStringPcfiib+0x1c0>
	outstr[c++] = '0';
     db6:	a5 01       	movw	r20, r10
     db8:	4f 5f       	subi	r20, 0xFF	; 255
     dba:	5f 4f       	sbci	r21, 0xFF	; 255
     dbc:	5a 87       	std	Y+10, r21	; 0x0a
     dbe:	49 87       	std	Y+9, r20	; 0x09
     dc0:	f4 01       	movw	r30, r8
     dc2:	ea 0d       	add	r30, r10
     dc4:	fb 1d       	adc	r31, r11
     dc6:	80 e3       	ldi	r24, 0x30	; 48
     dc8:	80 83       	st	Z, r24
     dca:	48 c0       	rjmp	.+144    	; 0xe5c <_Z13floatToStringPcfiib+0x250>
     dcc:	1a 86       	std	Y+10, r1	; 0x0a
     dce:	19 86       	std	Y+9, r1	; 0x09

	for (i=0; i< tenscount; i++) {
		digit = (int) (tempfloat/tens);
     dd0:	29 81       	ldd	r18, Y+1	; 0x01
     dd2:	3b 81       	ldd	r19, Y+3	; 0x03
     dd4:	4c 81       	ldd	r20, Y+4	; 0x04
     dd6:	5d 81       	ldd	r21, Y+5	; 0x05
     dd8:	c7 01       	movw	r24, r14
     dda:	b6 01       	movw	r22, r12
     ddc:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__divsf3>
     de0:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__fixsfsi>
     de4:	2b 01       	movw	r4, r22
     de6:	3c 01       	movw	r6, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     de8:	69 85       	ldd	r22, Y+9	; 0x09
     dea:	7a 85       	ldd	r23, Y+10	; 0x0a
     dec:	6a 0d       	add	r22, r10
     dee:	7b 1d       	adc	r23, r11
     df0:	68 0d       	add	r22, r8
     df2:	79 1d       	adc	r23, r9
     df4:	4a e0       	ldi	r20, 0x0A	; 10
     df6:	c2 01       	movw	r24, r4
     df8:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <__itoa_ncheck>
		itoa(digit, &outstr[c++], 10);
		tempfloat = tempfloat - ((float)digit * tens);
     dfc:	b2 01       	movw	r22, r4
     dfe:	55 0c       	add	r5, r5
     e00:	88 0b       	sbc	r24, r24
     e02:	99 0b       	sbc	r25, r25
     e04:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__floatsisf>
     e08:	29 81       	ldd	r18, Y+1	; 0x01
     e0a:	3b 81       	ldd	r19, Y+3	; 0x03
     e0c:	4c 81       	ldd	r20, Y+4	; 0x04
     e0e:	5d 81       	ldd	r21, Y+5	; 0x05
     e10:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__mulsf3>
     e14:	9b 01       	movw	r18, r22
     e16:	ac 01       	movw	r20, r24
     e18:	c7 01       	movw	r24, r14
     e1a:	b6 01       	movw	r22, r12
     e1c:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__subsf3>
     e20:	6b 01       	movw	r12, r22
     e22:	7c 01       	movw	r14, r24
		tens /= 10.0;
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	40 e2       	ldi	r20, 0x20	; 32
     e2a:	51 e4       	ldi	r21, 0x41	; 65
     e2c:	69 81       	ldd	r22, Y+1	; 0x01
     e2e:	7b 81       	ldd	r23, Y+3	; 0x03
     e30:	8c 81       	ldd	r24, Y+4	; 0x04
     e32:	9d 81       	ldd	r25, Y+5	; 0x05
     e34:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__divsf3>
     e38:	69 83       	std	Y+1, r22	; 0x01
     e3a:	7b 83       	std	Y+3, r23	; 0x03
     e3c:	8c 83       	std	Y+4, r24	; 0x04
     e3e:	9d 83       	std	Y+5, r25	; 0x05
	outstr[c++] = '-';

	if (tenscount == 0)
	outstr[c++] = '0';

	for (i=0; i< tenscount; i++) {
     e40:	89 85       	ldd	r24, Y+9	; 0x09
     e42:	9a 85       	ldd	r25, Y+10	; 0x0a
     e44:	01 96       	adiw	r24, 0x01	; 1
     e46:	9a 87       	std	Y+10, r25	; 0x0a
     e48:	89 87       	std	Y+9, r24	; 0x09
     e4a:	28 16       	cp	r2, r24
     e4c:	39 06       	cpc	r3, r25
     e4e:	09 f0       	breq	.+2      	; 0xe52 <_Z13floatToStringPcfiib+0x246>
     e50:	bf cf       	rjmp	.-130    	; 0xdd0 <_Z13floatToStringPcfiib+0x1c4>
     e52:	f1 01       	movw	r30, r2
     e54:	ea 0d       	add	r30, r10
     e56:	fb 1d       	adc	r31, r11
     e58:	fa 87       	std	Y+10, r31	; 0x0a
     e5a:	e9 87       	std	Y+9, r30	; 0x09
	}

	// if no places after decimal, stop now and return

	// otherwise, write the point and continue on
	if (places > 0)
     e5c:	2e 81       	ldd	r18, Y+6	; 0x06
     e5e:	3f 81       	ldd	r19, Y+7	; 0x07
     e60:	12 16       	cp	r1, r18
     e62:	13 06       	cpc	r1, r19
     e64:	0c f0       	brlt	.+2      	; 0xe68 <_Z13floatToStringPcfiib+0x25c>
     e66:	49 c0       	rjmp	.+146    	; 0xefa <_Z13floatToStringPcfiib+0x2ee>
	outstr[c++] = '.';
     e68:	29 84       	ldd	r2, Y+9	; 0x09
     e6a:	3a 84       	ldd	r3, Y+10	; 0x0a
     e6c:	3f ef       	ldi	r19, 0xFF	; 255
     e6e:	23 1a       	sub	r2, r19
     e70:	33 0a       	sbc	r3, r19
     e72:	8e e2       	ldi	r24, 0x2E	; 46
     e74:	e9 85       	ldd	r30, Y+9	; 0x09
     e76:	fa 85       	ldd	r31, Y+10	; 0x0a
     e78:	e8 0d       	add	r30, r8
     e7a:	f9 1d       	adc	r31, r9
     e7c:	80 83       	st	Z, r24
     e7e:	4e 81       	ldd	r20, Y+6	; 0x06
     e80:	5f 81       	ldd	r21, Y+7	; 0x07
     e82:	4f 5f       	subi	r20, 0xFF	; 255
     e84:	5f 4f       	sbci	r21, 0xFF	; 255
     e86:	5a 83       	std	Y+2, r21	; 0x02
     e88:	49 83       	std	Y+1, r20	; 0x01
     e8a:	a1 2c       	mov	r10, r1
     e8c:	b1 2c       	mov	r11, r1
     e8e:	5f ef       	ldi	r21, 0xFF	; 255
     e90:	a5 1a       	sub	r10, r21
     e92:	b5 0a       	sbc	r11, r21


	// now write out each decimal place by shifting digits one by one into the ones place and writing the truncated value
	for (i = 0; i < places; i++) {
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	9a 81       	ldd	r25, Y+2	; 0x02
     e98:	8a 15       	cp	r24, r10
     e9a:	9b 05       	cpc	r25, r11
     e9c:	39 f4       	brne	.+14     	; 0xeac <_Z13floatToStringPcfiib+0x2a0>
     e9e:	ee 81       	ldd	r30, Y+6	; 0x06
     ea0:	ff 81       	ldd	r31, Y+7	; 0x07
     ea2:	e2 0d       	add	r30, r2
     ea4:	f3 1d       	adc	r31, r3
     ea6:	fa 87       	std	Y+10, r31	; 0x0a
     ea8:	e9 87       	std	Y+9, r30	; 0x09
     eaa:	27 c0       	rjmp	.+78     	; 0xefa <_Z13floatToStringPcfiib+0x2ee>
		tempfloat *= 10.0;
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 e2       	ldi	r20, 0x20	; 32
     eb2:	51 e4       	ldi	r21, 0x41	; 65
     eb4:	c7 01       	movw	r24, r14
     eb6:	b6 01       	movw	r22, r12
     eb8:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__mulsf3>
     ebc:	2b 01       	movw	r4, r22
     ebe:	3c 01       	movw	r6, r24
		digit = (int) tempfloat;
     ec0:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__fixsfsi>
     ec4:	6b 01       	movw	r12, r22
     ec6:	7c 01       	movw	r14, r24
     ec8:	69 85       	ldd	r22, Y+9	; 0x09
     eca:	7a 85       	ldd	r23, Y+10	; 0x0a
     ecc:	6a 0d       	add	r22, r10
     ece:	7b 1d       	adc	r23, r11
     ed0:	68 0d       	add	r22, r8
     ed2:	79 1d       	adc	r23, r9
     ed4:	4a e0       	ldi	r20, 0x0A	; 10
     ed6:	c6 01       	movw	r24, r12
     ed8:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <__itoa_ncheck>
		itoa(digit, &outstr[c++], 10);
		// once written, subtract off that digit
		tempfloat = tempfloat - (float) digit;
     edc:	b6 01       	movw	r22, r12
     ede:	dd 0c       	add	r13, r13
     ee0:	88 0b       	sbc	r24, r24
     ee2:	99 0b       	sbc	r25, r25
     ee4:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__floatsisf>
     ee8:	9b 01       	movw	r18, r22
     eea:	ac 01       	movw	r20, r24
     eec:	c3 01       	movw	r24, r6
     eee:	b2 01       	movw	r22, r4
     ef0:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__subsf3>
     ef4:	6b 01       	movw	r12, r22
     ef6:	7c 01       	movw	r14, r24
	if (places > 0)
	outstr[c++] = '.';


	// now write out each decimal place by shifting digits one by one into the ones place and writing the truncated value
	for (i = 0; i < places; i++) {
     ef8:	ca cf       	rjmp	.-108    	; 0xe8e <_Z13floatToStringPcfiib+0x282>
		digit = (int) tempfloat;
		itoa(digit, &outstr[c++], 10);
		// once written, subtract off that digit
		tempfloat = tempfloat - (float) digit;
	}
	if (extra > 0 && !rightjustify) {
     efa:	01 15       	cp	r16, r1
     efc:	11 05       	cpc	r17, r1
     efe:	a1 f0       	breq	.+40     	; 0xf28 <_Z13floatToStringPcfiib+0x31c>
     f00:	f8 85       	ldd	r31, Y+8	; 0x08
     f02:	f1 11       	cpse	r31, r1
     f04:	11 c0       	rjmp	.+34     	; 0xf28 <_Z13floatToStringPcfiib+0x31c>
     f06:	29 85       	ldd	r18, Y+9	; 0x09
     f08:	3a 85       	ldd	r19, Y+10	; 0x0a
     f0a:	f9 01       	movw	r30, r18
     f0c:	e8 0d       	add	r30, r8
     f0e:	f9 1d       	adc	r31, r9
		for (int i = 0; i< extra; i++) {
			outstr[c++] = ' ';
     f10:	40 e2       	ldi	r20, 0x20	; 32
     f12:	89 85       	ldd	r24, Y+9	; 0x09
     f14:	9a 85       	ldd	r25, Y+10	; 0x0a
     f16:	01 96       	adiw	r24, 0x01	; 1
     f18:	9a 87       	std	Y+10, r25	; 0x0a
     f1a:	89 87       	std	Y+9, r24	; 0x09
     f1c:	41 93       	st	Z+, r20
		itoa(digit, &outstr[c++], 10);
		// once written, subtract off that digit
		tempfloat = tempfloat - (float) digit;
	}
	if (extra > 0 && !rightjustify) {
		for (int i = 0; i< extra; i++) {
     f1e:	82 1b       	sub	r24, r18
     f20:	93 0b       	sbc	r25, r19
     f22:	80 17       	cp	r24, r16
     f24:	91 07       	cpc	r25, r17
     f26:	ac f3       	brlt	.-22     	; 0xf12 <_Z13floatToStringPcfiib+0x306>
			outstr[c++] = ' ';
		}
	}


	outstr[c++] = '\0';
     f28:	e9 85       	ldd	r30, Y+9	; 0x09
     f2a:	fa 85       	ldd	r31, Y+10	; 0x0a
     f2c:	e8 0d       	add	r30, r8
     f2e:	f9 1d       	adc	r31, r9
     f30:	10 82       	st	Z, r1
	return outstr;
     f32:	c4 01       	movw	r24, r8
     f34:	2b 96       	adiw	r28, 0x0b	; 11
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	ff 90       	pop	r15
     f4a:	ef 90       	pop	r14
     f4c:	df 90       	pop	r13
     f4e:	cf 90       	pop	r12
     f50:	bf 90       	pop	r11
     f52:	af 90       	pop	r10
     f54:	9f 90       	pop	r9
     f56:	8f 90       	pop	r8
     f58:	7f 90       	pop	r7
     f5a:	6f 90       	pop	r6
     f5c:	5f 90       	pop	r5
     f5e:	4f 90       	pop	r4
     f60:	3f 90       	pop	r3
     f62:	2f 90       	pop	r2
     f64:	08 95       	ret

00000f66 <loop>:
}

unsigned long hysteresecounter = 0;
bool hystereseOK = true;
void loop()
{
     f66:	cf 92       	push	r12
     f68:	df 92       	push	r13
     f6a:	ef 92       	push	r14
     f6c:	ff 92       	push	r15
     f6e:	0f 93       	push	r16
     f70:	1f 93       	push	r17
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
	if (loopcount % 10 == 0) // all second
     f76:	60 91 5f 02 	lds	r22, 0x025F	; 0x80025f <loopcount>
     f7a:	70 91 60 02 	lds	r23, 0x0260	; 0x800260 <loopcount+0x1>
     f7e:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <loopcount+0x2>
     f82:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <loopcount+0x3>
     f86:	2a e0       	ldi	r18, 0x0A	; 10
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	40 e0       	ldi	r20, 0x00	; 0
     f8c:	50 e0       	ldi	r21, 0x00	; 0
     f8e:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <__udivmodsi4>
     f92:	67 2b       	or	r22, r23
     f94:	68 2b       	or	r22, r24
     f96:	69 2b       	or	r22, r25
     f98:	09 f0       	breq	.+2      	; 0xf9c <loop+0x36>
     f9a:	48 c0       	rjmp	.+144    	; 0x102c <loop+0xc6>
	{
		float sval = ReadTemperture();
     f9c:	0e 94 62 05 	call	0xac4	; 0xac4 <_Z14ReadTemperturev>
     fa0:	6b 01       	movw	r12, r22
     fa2:	7c 01       	movw	r14, r24
		if (sval != INVALID_TEMPERATURE)
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	4a e7       	ldi	r20, 0x7A	; 122
     faa:	54 ec       	ldi	r21, 0xC4	; 196
     fac:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__cmpsf2>
     fb0:	88 23       	and	r24, r24
     fb2:	41 f0       	breq	.+16     	; 0xfc4 <loop+0x5e>
			curtemperature = sval;
     fb4:	c0 92 0c 01 	sts	0x010C, r12	; 0x80010c <curtemperature>
     fb8:	d0 92 0d 01 	sts	0x010D, r13	; 0x80010d <curtemperature+0x1>
     fbc:	e0 92 0e 01 	sts	0x010E, r14	; 0x80010e <curtemperature+0x2>
     fc0:	f0 92 0f 01 	sts	0x010F, r15	; 0x80010f <curtemperature+0x3>
		
		if (maxTemperature <curtemperature)  maxTemperature  = curtemperature;
     fc4:	c0 90 0c 01 	lds	r12, 0x010C	; 0x80010c <curtemperature>
     fc8:	d0 90 0d 01 	lds	r13, 0x010D	; 0x80010d <curtemperature+0x1>
     fcc:	e0 90 0e 01 	lds	r14, 0x010E	; 0x80010e <curtemperature+0x2>
     fd0:	f0 90 0f 01 	lds	r15, 0x010F	; 0x80010f <curtemperature+0x3>
     fd4:	a7 01       	movw	r20, r14
     fd6:	96 01       	movw	r18, r12
     fd8:	60 91 fb 02 	lds	r22, 0x02FB	; 0x8002fb <maxTemperature>
     fdc:	70 91 fc 02 	lds	r23, 0x02FC	; 0x8002fc <maxTemperature+0x1>
     fe0:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <maxTemperature+0x2>
     fe4:	90 91 fe 02 	lds	r25, 0x02FE	; 0x8002fe <maxTemperature+0x3>
     fe8:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__cmpsf2>
     fec:	87 ff       	sbrs	r24, 7
     fee:	08 c0       	rjmp	.+16     	; 0x1000 <loop+0x9a>
     ff0:	c0 92 fb 02 	sts	0x02FB, r12	; 0x8002fb <maxTemperature>
     ff4:	d0 92 fc 02 	sts	0x02FC, r13	; 0x8002fc <maxTemperature+0x1>
     ff8:	e0 92 fd 02 	sts	0x02FD, r14	; 0x8002fd <maxTemperature+0x2>
     ffc:	f0 92 fe 02 	sts	0x02FE, r15	; 0x8002fe <maxTemperature+0x3>
		if (minTemperature > curtemperature)  minTemperature  = curtemperature;
    1000:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <minTemperature>
    1004:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <minTemperature+0x1>
    1008:	40 91 01 03 	lds	r20, 0x0301	; 0x800301 <minTemperature+0x2>
    100c:	50 91 02 03 	lds	r21, 0x0302	; 0x800302 <minTemperature+0x3>
    1010:	c7 01       	movw	r24, r14
    1012:	b6 01       	movw	r22, r12
    1014:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__cmpsf2>
    1018:	87 ff       	sbrs	r24, 7
    101a:	08 c0       	rjmp	.+16     	; 0x102c <loop+0xc6>
    101c:	c0 92 ff 02 	sts	0x02FF, r12	; 0x8002ff <minTemperature>
    1020:	d0 92 00 03 	sts	0x0300, r13	; 0x800300 <minTemperature+0x1>
    1024:	e0 92 01 03 	sts	0x0301, r14	; 0x800301 <minTemperature+0x2>
    1028:	f0 92 02 03 	sts	0x0302, r15	; 0x800302 <minTemperature+0x3>
	}

	if (loopcount % 1000 == 0) // all 100 second
    102c:	c0 90 5f 02 	lds	r12, 0x025F	; 0x80025f <loopcount>
    1030:	d0 90 60 02 	lds	r13, 0x0260	; 0x800260 <loopcount+0x1>
    1034:	e0 90 61 02 	lds	r14, 0x0261	; 0x800261 <loopcount+0x2>
    1038:	f0 90 62 02 	lds	r15, 0x0262	; 0x800262 <loopcount+0x3>
    103c:	c7 01       	movw	r24, r14
    103e:	b6 01       	movw	r22, r12
    1040:	28 ee       	ldi	r18, 0xE8	; 232
    1042:	33 e0       	ldi	r19, 0x03	; 3
    1044:	40 e0       	ldi	r20, 0x00	; 0
    1046:	50 e0       	ldi	r21, 0x00	; 0
    1048:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <__udivmodsi4>
    104c:	67 2b       	or	r22, r23
    104e:	68 2b       	or	r22, r24
    1050:	69 2b       	or	r22, r25
    1052:	09 f0       	breq	.+2      	; 0x1056 <loop+0xf0>
    1054:	51 c0       	rjmp	.+162    	; 0x10f8 <loop+0x192>
	{
		averArr[avcounter] = curtemperature;
    1056:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <avcounter>
    105a:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <avcounter+0x1>
    105e:	a0 91 69 02 	lds	r26, 0x0269	; 0x800269 <avcounter+0x2>
    1062:	b0 91 6a 02 	lds	r27, 0x026A	; 0x80026a <avcounter+0x3>
    1066:	fc 01       	movw	r30, r24
    1068:	ee 0f       	add	r30, r30
    106a:	ff 1f       	adc	r31, r31
    106c:	ee 0f       	add	r30, r30
    106e:	ff 1f       	adc	r31, r31
    1070:	e5 59       	subi	r30, 0x95	; 149
    1072:	fd 4f       	sbci	r31, 0xFD	; 253
    1074:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <curtemperature>
    1078:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <curtemperature+0x1>
    107c:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <curtemperature+0x2>
    1080:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <curtemperature+0x3>
    1084:	40 83       	st	Z, r20
    1086:	51 83       	std	Z+1, r21	; 0x01
    1088:	62 83       	std	Z+2, r22	; 0x02
    108a:	73 83       	std	Z+3, r23	; 0x03
		avcounter++;
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	a1 1d       	adc	r26, r1
    1090:	b1 1d       	adc	r27, r1
		if (avcounter >=maxHistory) avcounter =0;
    1092:	84 32       	cpi	r24, 0x24	; 36
    1094:	91 05       	cpc	r25, r1
    1096:	a1 05       	cpc	r26, r1
    1098:	b1 05       	cpc	r27, r1
    109a:	4c f4       	brge	.+18     	; 0x10ae <loop+0x148>
	}

	if (loopcount % 1000 == 0) // all 100 second
	{
		averArr[avcounter] = curtemperature;
		avcounter++;
    109c:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <avcounter>
    10a0:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <avcounter+0x1>
    10a4:	a0 93 69 02 	sts	0x0269, r26	; 0x800269 <avcounter+0x2>
    10a8:	b0 93 6a 02 	sts	0x026A, r27	; 0x80026a <avcounter+0x3>
    10ac:	08 c0       	rjmp	.+16     	; 0x10be <loop+0x158>
		if (avcounter >=maxHistory) avcounter =0;
    10ae:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <avcounter>
    10b2:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <avcounter+0x1>
    10b6:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <avcounter+0x2>
    10ba:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <avcounter+0x3>
    10be:	cb e6       	ldi	r28, 0x6B	; 107
    10c0:	d2 e0       	ldi	r29, 0x02	; 2
		float avSum = 0.0;
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	cb 01       	movw	r24, r22
		for(int i =0; i< maxHistory;i++)
		{
			avSum +=averArr[i];
    10c8:	29 91       	ld	r18, Y+
    10ca:	39 91       	ld	r19, Y+
    10cc:	49 91       	ld	r20, Y+
    10ce:	59 91       	ld	r21, Y+
    10d0:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__addsf3>
	{
		averArr[avcounter] = curtemperature;
		avcounter++;
		if (avcounter >=maxHistory) avcounter =0;
		float avSum = 0.0;
		for(int i =0; i< maxHistory;i++)
    10d4:	22 e0       	ldi	r18, 0x02	; 2
    10d6:	cb 3f       	cpi	r28, 0xFB	; 251
    10d8:	d2 07       	cpc	r29, r18
    10da:	b1 f7       	brne	.-20     	; 0x10c8 <loop+0x162>
		{
			avSum +=averArr[i];
		}
		averTemperature = avSum/(float)maxHistory;
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	40 e1       	ldi	r20, 0x10	; 16
    10e2:	52 e4       	ldi	r21, 0x42	; 66
    10e4:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__divsf3>
    10e8:	60 93 63 02 	sts	0x0263, r22	; 0x800263 <averTemperature>
    10ec:	70 93 64 02 	sts	0x0264, r23	; 0x800264 <averTemperature+0x1>
    10f0:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <averTemperature+0x2>
    10f4:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <averTemperature+0x3>
	}

	switch(prog_state)
    10f8:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <prog_state>
    10fc:	82 30       	cpi	r24, 0x02	; 2
    10fe:	09 f4       	brne	.+2      	; 0x1102 <loop+0x19c>
    1100:	49 c1       	rjmp	.+658    	; 0x1394 <loop+0x42e>
    1102:	30 f4       	brcc	.+12     	; 0x1110 <loop+0x1aa>
    1104:	88 23       	and	r24, r24
    1106:	69 f0       	breq	.+26     	; 0x1122 <loop+0x1bc>
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	09 f4       	brne	.+2      	; 0x110e <loop+0x1a8>
    110c:	a8 c0       	rjmp	.+336    	; 0x125e <loop+0x2f8>
    110e:	c8 c2       	rjmp	.+1424   	; 0x16a0 <loop+0x73a>
    1110:	84 30       	cpi	r24, 0x04	; 4
    1112:	09 f4       	brne	.+2      	; 0x1116 <loop+0x1b0>
    1114:	ec c1       	rjmp	.+984    	; 0x14ee <loop+0x588>
    1116:	08 f4       	brcc	.+2      	; 0x111a <loop+0x1b4>
    1118:	9f c1       	rjmp	.+830    	; 0x1458 <loop+0x4f2>
    111a:	85 30       	cpi	r24, 0x05	; 5
    111c:	09 f4       	brne	.+2      	; 0x1120 <loop+0x1ba>
    111e:	56 c2       	rjmp	.+1196   	; 0x15cc <loop+0x666>
    1120:	bf c2       	rjmp	.+1406   	; 0x16a0 <loop+0x73a>
	{
		case state_ShowTemperatue:{
			if (loopcount % 10 ==0 )
    1122:	c7 01       	movw	r24, r14
    1124:	b6 01       	movw	r22, r12
    1126:	2a e0       	ldi	r18, 0x0A	; 10
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e0       	ldi	r20, 0x00	; 0
    112c:	50 e0       	ldi	r21, 0x00	; 0
    112e:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <__udivmodsi4>
    1132:	67 2b       	or	r22, r23
    1134:	68 2b       	or	r22, r24
    1136:	69 2b       	or	r22, r25
    1138:	09 f0       	breq	.+2      	; 0x113c <loop+0x1d6>
    113a:	85 c0       	rjmp	.+266    	; 0x1246 <loop+0x2e0>
			{
				lcd.setCursor(0,0);
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	88 e4       	ldi	r24, 0x48	; 72
    1142:	93 e0       	ldi	r25, 0x03	; 3
    1144:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZN3LCD9setCursorEhh>
				lcd.print("A:");
    1148:	61 e2       	ldi	r22, 0x21	; 33
    114a:	71 e0       	ldi	r23, 0x01	; 1
    114c:	88 e4       	ldi	r24, 0x48	; 72
    114e:	93 e0       	ldi	r25, 0x03	; 3
    1150:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
				lcd.print(floatToString(tempBuffer, curtemperature, 1,5));
    1154:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <curtemperature>
    1158:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <curtemperature+0x1>
    115c:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <curtemperature+0x2>
    1160:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <curtemperature+0x3>
    1164:	e1 2c       	mov	r14, r1
    1166:	05 e0       	ldi	r16, 0x05	; 5
    1168:	10 e0       	ldi	r17, 0x00	; 0
    116a:	21 e0       	ldi	r18, 0x01	; 1
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	8e e3       	ldi	r24, 0x3E	; 62
    1170:	92 e0       	ldi	r25, 0x02	; 2
    1172:	0e 94 06 06 	call	0xc0c	; 0xc0c <_Z13floatToStringPcfiib>
    1176:	bc 01       	movw	r22, r24
    1178:	88 e4       	ldi	r24, 0x48	; 72
    117a:	93 e0       	ldi	r25, 0x03	; 3
    117c:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
				lcd.setCursor(8,0);
    1180:	40 e0       	ldi	r20, 0x00	; 0
    1182:	68 e0       	ldi	r22, 0x08	; 8
    1184:	88 e4       	ldi	r24, 0x48	; 72
    1186:	93 e0       	ldi	r25, 0x03	; 3
    1188:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZN3LCD9setCursorEhh>
				lcd.print("D:");
    118c:	64 e2       	ldi	r22, 0x24	; 36
    118e:	71 e0       	ldi	r23, 0x01	; 1
    1190:	88 e4       	ldi	r24, 0x48	; 72
    1192:	93 e0       	ldi	r25, 0x03	; 3
    1194:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
				lcd.print(floatToString(tempBuffer, averTemperature, 1,5));
    1198:	40 91 63 02 	lds	r20, 0x0263	; 0x800263 <averTemperature>
    119c:	50 91 64 02 	lds	r21, 0x0264	; 0x800264 <averTemperature+0x1>
    11a0:	60 91 65 02 	lds	r22, 0x0265	; 0x800265 <averTemperature+0x2>
    11a4:	70 91 66 02 	lds	r23, 0x0266	; 0x800266 <averTemperature+0x3>
    11a8:	21 e0       	ldi	r18, 0x01	; 1
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	8e e3       	ldi	r24, 0x3E	; 62
    11ae:	92 e0       	ldi	r25, 0x02	; 2
    11b0:	0e 94 06 06 	call	0xc0c	; 0xc0c <_Z13floatToStringPcfiib>
    11b4:	bc 01       	movw	r22, r24
    11b6:	88 e4       	ldi	r24, 0x48	; 72
    11b8:	93 e0       	ldi	r25, 0x03	; 3
    11ba:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
				
				lcd.setCursor(0,1);
    11be:	41 e0       	ldi	r20, 0x01	; 1
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	88 e4       	ldi	r24, 0x48	; 72
    11c4:	93 e0       	ldi	r25, 0x03	; 3
    11c6:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZN3LCD9setCursorEhh>
				lcd.print("m:" );
    11ca:	67 e2       	ldi	r22, 0x27	; 39
    11cc:	71 e0       	ldi	r23, 0x01	; 1
    11ce:	88 e4       	ldi	r24, 0x48	; 72
    11d0:	93 e0       	ldi	r25, 0x03	; 3
    11d2:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
				lcd.print(floatToString(tempBuffer, minTemperature, 1,5));
    11d6:	40 91 ff 02 	lds	r20, 0x02FF	; 0x8002ff <minTemperature>
    11da:	50 91 00 03 	lds	r21, 0x0300	; 0x800300 <minTemperature+0x1>
    11de:	60 91 01 03 	lds	r22, 0x0301	; 0x800301 <minTemperature+0x2>
    11e2:	70 91 02 03 	lds	r23, 0x0302	; 0x800302 <minTemperature+0x3>
    11e6:	21 e0       	ldi	r18, 0x01	; 1
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	8e e3       	ldi	r24, 0x3E	; 62
    11ec:	92 e0       	ldi	r25, 0x02	; 2
    11ee:	0e 94 06 06 	call	0xc0c	; 0xc0c <_Z13floatToStringPcfiib>
    11f2:	bc 01       	movw	r22, r24
    11f4:	88 e4       	ldi	r24, 0x48	; 72
    11f6:	93 e0       	ldi	r25, 0x03	; 3
    11f8:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
				lcd.setCursor(8,1);
    11fc:	41 e0       	ldi	r20, 0x01	; 1
    11fe:	68 e0       	ldi	r22, 0x08	; 8
    1200:	88 e4       	ldi	r24, 0x48	; 72
    1202:	93 e0       	ldi	r25, 0x03	; 3
    1204:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZN3LCD9setCursorEhh>
				lcd.print("M:" );
    1208:	6a e2       	ldi	r22, 0x2A	; 42
    120a:	71 e0       	ldi	r23, 0x01	; 1
    120c:	88 e4       	ldi	r24, 0x48	; 72
    120e:	93 e0       	ldi	r25, 0x03	; 3
    1210:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
				lcd.print(floatToString(tempBuffer, maxTemperature, 1,5));
    1214:	40 91 fb 02 	lds	r20, 0x02FB	; 0x8002fb <maxTemperature>
    1218:	50 91 fc 02 	lds	r21, 0x02FC	; 0x8002fc <maxTemperature+0x1>
    121c:	60 91 fd 02 	lds	r22, 0x02FD	; 0x8002fd <maxTemperature+0x2>
    1220:	70 91 fe 02 	lds	r23, 0x02FE	; 0x8002fe <maxTemperature+0x3>
    1224:	21 e0       	ldi	r18, 0x01	; 1
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	8e e3       	ldi	r24, 0x3E	; 62
    122a:	92 e0       	ldi	r25, 0x02	; 2
    122c:	0e 94 06 06 	call	0xc0c	; 0xc0c <_Z13floatToStringPcfiib>
    1230:	bc 01       	movw	r22, r24
    1232:	88 e4       	ldi	r24, 0x48	; 72
    1234:	93 e0       	ldi	r25, 0x03	; 3
    1236:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
				lcd.print("        ");
    123a:	6d e2       	ldi	r22, 0x2D	; 45
    123c:	71 e0       	ldi	r23, 0x01	; 1
    123e:	88 e4       	ldi	r24, 0x48	; 72
    1240:	93 e0       	ldi	r25, 0x03	; 3
    1242:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
			}
			if (PressDownSeen(SW_SPARE, true))
    1246:	61 e0       	ldi	r22, 0x01	; 1
    1248:	84 e0       	ldi	r24, 0x04	; 4
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	0e 94 14 04 	call	0x828	; 0x828 <_Z13PressDownSeenib>
    1250:	88 23       	and	r24, r24
    1252:	09 f4       	brne	.+2      	; 0x1256 <loop+0x2f0>
    1254:	25 c2       	rjmp	.+1098   	; 0x16a0 <loop+0x73a>
			{
				prog_state =state_ShowHum;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <prog_state>
    125c:	21 c2       	rjmp	.+1090   	; 0x16a0 <loop+0x73a>
				}
			break;
			case state_ShowHum:{
				if (loopcount % 10 ==0 )
    125e:	c7 01       	movw	r24, r14
    1260:	b6 01       	movw	r22, r12
    1262:	2a e0       	ldi	r18, 0x0A	; 10
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	40 e0       	ldi	r20, 0x00	; 0
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <__udivmodsi4>
    126e:	67 2b       	or	r22, r23
    1270:	68 2b       	or	r22, r24
    1272:	69 2b       	or	r22, r25
    1274:	09 f0       	breq	.+2      	; 0x1278 <loop+0x312>
    1276:	85 c0       	rjmp	.+266    	; 0x1382 <loop+0x41c>
				{
					lcd.setCursor(0,0);
    1278:	40 e0       	ldi	r20, 0x00	; 0
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	88 e4       	ldi	r24, 0x48	; 72
    127e:	93 e0       	ldi	r25, 0x03	; 3
    1280:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZN3LCD9setCursorEhh>
					lcd.print("A:");
    1284:	61 e2       	ldi	r22, 0x21	; 33
    1286:	71 e0       	ldi	r23, 0x01	; 1
    1288:	88 e4       	ldi	r24, 0x48	; 72
    128a:	93 e0       	ldi	r25, 0x03	; 3
    128c:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
					lcd.print(floatToString(tempBuffer, curtemperature, 1,5));
    1290:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <curtemperature>
    1294:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <curtemperature+0x1>
    1298:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <curtemperature+0x2>
    129c:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <curtemperature+0x3>
    12a0:	e1 2c       	mov	r14, r1
    12a2:	05 e0       	ldi	r16, 0x05	; 5
    12a4:	10 e0       	ldi	r17, 0x00	; 0
    12a6:	21 e0       	ldi	r18, 0x01	; 1
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	8e e3       	ldi	r24, 0x3E	; 62
    12ac:	92 e0       	ldi	r25, 0x02	; 2
    12ae:	0e 94 06 06 	call	0xc0c	; 0xc0c <_Z13floatToStringPcfiib>
    12b2:	bc 01       	movw	r22, r24
    12b4:	88 e4       	ldi	r24, 0x48	; 72
    12b6:	93 e0       	ldi	r25, 0x03	; 3
    12b8:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
					lcd.setCursor(8,0);
    12bc:	40 e0       	ldi	r20, 0x00	; 0
    12be:	68 e0       	ldi	r22, 0x08	; 8
    12c0:	88 e4       	ldi	r24, 0x48	; 72
    12c2:	93 e0       	ldi	r25, 0x03	; 3
    12c4:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZN3LCD9setCursorEhh>
					lcd.print("D:");
    12c8:	64 e2       	ldi	r22, 0x24	; 36
    12ca:	71 e0       	ldi	r23, 0x01	; 1
    12cc:	88 e4       	ldi	r24, 0x48	; 72
    12ce:	93 e0       	ldi	r25, 0x03	; 3
    12d0:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
					lcd.print(floatToString(tempBuffer, averTemperature, 1,5));
    12d4:	40 91 63 02 	lds	r20, 0x0263	; 0x800263 <averTemperature>
    12d8:	50 91 64 02 	lds	r21, 0x0264	; 0x800264 <averTemperature+0x1>
    12dc:	60 91 65 02 	lds	r22, 0x0265	; 0x800265 <averTemperature+0x2>
    12e0:	70 91 66 02 	lds	r23, 0x0266	; 0x800266 <averTemperature+0x3>
    12e4:	21 e0       	ldi	r18, 0x01	; 1
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	8e e3       	ldi	r24, 0x3E	; 62
    12ea:	92 e0       	ldi	r25, 0x02	; 2
    12ec:	0e 94 06 06 	call	0xc0c	; 0xc0c <_Z13floatToStringPcfiib>
    12f0:	bc 01       	movw	r22, r24
    12f2:	88 e4       	ldi	r24, 0x48	; 72
    12f4:	93 e0       	ldi	r25, 0x03	; 3
    12f6:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
					
					lcd.setCursor(0,1);
    12fa:	41 e0       	ldi	r20, 0x01	; 1
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	88 e4       	ldi	r24, 0x48	; 72
    1300:	93 e0       	ldi	r25, 0x03	; 3
    1302:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZN3LCD9setCursorEhh>
					lcd.print("%:" );
    1306:	66 e3       	ldi	r22, 0x36	; 54
    1308:	71 e0       	ldi	r23, 0x01	; 1
    130a:	88 e4       	ldi	r24, 0x48	; 72
    130c:	93 e0       	ldi	r25, 0x03	; 3
    130e:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
					lcd.print(floatToString(tempBuffer, humidity, 1,5));
    1312:	40 91 3a 03 	lds	r20, 0x033A	; 0x80033a <humidity>
    1316:	50 91 3b 03 	lds	r21, 0x033B	; 0x80033b <humidity+0x1>
    131a:	60 91 3c 03 	lds	r22, 0x033C	; 0x80033c <humidity+0x2>
    131e:	70 91 3d 03 	lds	r23, 0x033D	; 0x80033d <humidity+0x3>
    1322:	21 e0       	ldi	r18, 0x01	; 1
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	8e e3       	ldi	r24, 0x3E	; 62
    1328:	92 e0       	ldi	r25, 0x02	; 2
    132a:	0e 94 06 06 	call	0xc0c	; 0xc0c <_Z13floatToStringPcfiib>
    132e:	bc 01       	movw	r22, r24
    1330:	88 e4       	ldi	r24, 0x48	; 72
    1332:	93 e0       	ldi	r25, 0x03	; 3
    1334:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
					lcd.setCursor(8,1);
    1338:	41 e0       	ldi	r20, 0x01	; 1
    133a:	68 e0       	ldi	r22, 0x08	; 8
    133c:	88 e4       	ldi	r24, 0x48	; 72
    133e:	93 e0       	ldi	r25, 0x03	; 3
    1340:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZN3LCD9setCursorEhh>
					lcd.print("d:" );
    1344:	69 e3       	ldi	r22, 0x39	; 57
    1346:	71 e0       	ldi	r23, 0x01	; 1
    1348:	88 e4       	ldi	r24, 0x48	; 72
    134a:	93 e0       	ldi	r25, 0x03	; 3
    134c:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
					lcd.print(floatToString(tempBuffer, dewpoint, 1,5));
    1350:	40 91 36 03 	lds	r20, 0x0336	; 0x800336 <dewpoint>
    1354:	50 91 37 03 	lds	r21, 0x0337	; 0x800337 <dewpoint+0x1>
    1358:	60 91 38 03 	lds	r22, 0x0338	; 0x800338 <dewpoint+0x2>
    135c:	70 91 39 03 	lds	r23, 0x0339	; 0x800339 <dewpoint+0x3>
    1360:	21 e0       	ldi	r18, 0x01	; 1
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	8e e3       	ldi	r24, 0x3E	; 62
    1366:	92 e0       	ldi	r25, 0x02	; 2
    1368:	0e 94 06 06 	call	0xc0c	; 0xc0c <_Z13floatToStringPcfiib>
    136c:	bc 01       	movw	r22, r24
    136e:	88 e4       	ldi	r24, 0x48	; 72
    1370:	93 e0       	ldi	r25, 0x03	; 3
    1372:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
					lcd.print("        ");
    1376:	6d e2       	ldi	r22, 0x2D	; 45
    1378:	71 e0       	ldi	r23, 0x01	; 1
    137a:	88 e4       	ldi	r24, 0x48	; 72
    137c:	93 e0       	ldi	r25, 0x03	; 3
    137e:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
				}
				if (PressDownSeen(SW_SPARE, true))
    1382:	61 e0       	ldi	r22, 0x01	; 1
    1384:	84 e0       	ldi	r24, 0x04	; 4
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	0e 94 14 04 	call	0x828	; 0x828 <_Z13PressDownSeenib>
    138c:	88 23       	and	r24, r24
    138e:	09 f4       	brne	.+2      	; 0x1392 <loop+0x42c>
    1390:	87 c1       	rjmp	.+782    	; 0x16a0 <loop+0x73a>
    1392:	84 c1       	rjmp	.+776    	; 0x169c <loop+0x736>
				prog_state =state_ShowTemperatue;
				break;
				}
		}
		case state_ShowMode:{
			if (resfreshStateDisplay )
    1394:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <resfreshStateDisplay>
    1398:	88 23       	and	r24, r24
    139a:	f9 f0       	breq	.+62     	; 0x13da <loop+0x474>
			{
				lcd.setCursor(0,0);
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	60 e0       	ldi	r22, 0x00	; 0
    13a0:	88 e4       	ldi	r24, 0x48	; 72
    13a2:	93 e0       	ldi	r25, 0x03	; 3
    13a4:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZN3LCD9setCursorEhh>
				lcd.print("Mode: ");
    13a8:	6c e3       	ldi	r22, 0x3C	; 60
    13aa:	71 e0       	ldi	r23, 0x01	; 1
    13ac:	88 e4       	ldi	r24, 0x48	; 72
    13ae:	93 e0       	ldi	r25, 0x03	; 3
    13b0:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
				lcd.print(modestr[workingmode]);
    13b4:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <workingmode>
    13b8:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <workingmode+0x1>
    13bc:	26 e0       	ldi	r18, 0x06	; 6
    13be:	28 9f       	mul	r18, r24
    13c0:	b0 01       	movw	r22, r0
    13c2:	29 9f       	mul	r18, r25
    13c4:	70 0d       	add	r23, r0
    13c6:	11 24       	eor	r1, r1
    13c8:	68 5f       	subi	r22, 0xF8	; 248
    13ca:	7c 4f       	sbci	r23, 0xFC	; 252
    13cc:	88 e4       	ldi	r24, 0x48	; 72
    13ce:	93 e0       	ldi	r25, 0x03	; 3
    13d0:	0e 94 c6 14 	call	0x298c	; 0x298c <_ZN5Print5printERK6String>
				resfreshStateDisplay= true;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <resfreshStateDisplay>
			}
			if( PressDownSeen(SW_DOWN, true))
    13da:	61 e0       	ldi	r22, 0x01	; 1
    13dc:	82 e0       	ldi	r24, 0x02	; 2
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 14 04 	call	0x828	; 0x828 <_Z13PressDownSeenib>
    13e4:	88 23       	and	r24, r24
    13e6:	61 f0       	breq	.+24     	; 0x1400 <loop+0x49a>
			{
				workingmode++;
    13e8:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <workingmode>
    13ec:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <workingmode+0x1>
    13f0:	01 96       	adiw	r24, 0x01	; 1
    13f2:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <workingmode+0x1>
    13f6:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <workingmode>
				resfreshStateDisplay= true;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <resfreshStateDisplay>
			}
			if( PressDownSeen(SW_UP, true))
    1400:	61 e0       	ldi	r22, 0x01	; 1
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0e 94 14 04 	call	0x828	; 0x828 <_Z13PressDownSeenib>
    140a:	88 23       	and	r24, r24
    140c:	61 f0       	breq	.+24     	; 0x1426 <loop+0x4c0>
			{
				workingmode--;
    140e:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <workingmode>
    1412:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <workingmode+0x1>
    1416:	01 97       	sbiw	r24, 0x01	; 1
    1418:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <workingmode+0x1>
    141c:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <workingmode>
				resfreshStateDisplay= true;
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <resfreshStateDisplay>
			}
			if (workingmode > workingmode_MAX )workingmode  = 0;
    1426:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <workingmode>
    142a:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <workingmode+0x1>
    142e:	04 97       	sbiw	r24, 0x04	; 4
    1430:	24 f0       	brlt	.+8      	; 0x143a <loop+0x4d4>
    1432:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <workingmode+0x1>
    1436:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <workingmode>
			if (workingmode < 0 )workingmode  = workingmode_MAX;
    143a:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <workingmode>
    143e:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <workingmode+0x1>
    1442:	97 ff       	sbrs	r25, 7
    1444:	06 c0       	rjmp	.+12     	; 0x1452 <loop+0x4ec>
    1446:	83 e0       	ldi	r24, 0x03	; 3
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <workingmode+0x1>
    144e:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <workingmode>
			CheckStoreEEprom();
    1452:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <_Z16CheckStoreEEpromv>
			break;
    1456:	24 c1       	rjmp	.+584    	; 0x16a0 <loop+0x73a>
		}
		case state_ShowSollwert:{
			if (resfreshStateDisplay )
    1458:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <resfreshStateDisplay>
    145c:	88 23       	and	r24, r24
    145e:	f9 f0       	breq	.+62     	; 0x149e <loop+0x538>
			{
				lcd.setCursor(0,0);
    1460:	40 e0       	ldi	r20, 0x00	; 0
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	88 e4       	ldi	r24, 0x48	; 72
    1466:	93 e0       	ldi	r25, 0x03	; 3
    1468:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZN3LCD9setCursorEhh>
				lcd.print("SollTemp: ");
    146c:	63 e4       	ldi	r22, 0x43	; 67
    146e:	71 e0       	ldi	r23, 0x01	; 1
    1470:	88 e4       	ldi	r24, 0x48	; 72
    1472:	93 e0       	ldi	r25, 0x03	; 3
    1474:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
				lcd.print(sollwert);
    1478:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <sollwert>
    147c:	70 91 07 03 	lds	r23, 0x0307	; 0x800307 <sollwert+0x1>
    1480:	4a e0       	ldi	r20, 0x0A	; 10
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	88 e4       	ldi	r24, 0x48	; 72
    1486:	93 e0       	ldi	r25, 0x03	; 3
    1488:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <_ZN5Print5printEii>
				lcd.print("    ");
    148c:	61 e3       	ldi	r22, 0x31	; 49
    148e:	71 e0       	ldi	r23, 0x01	; 1
    1490:	88 e4       	ldi	r24, 0x48	; 72
    1492:	93 e0       	ldi	r25, 0x03	; 3
    1494:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
				resfreshStateDisplay= true;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <resfreshStateDisplay>
			}
			if( PressDownSeen(SW_DOWN, true))
    149e:	61 e0       	ldi	r22, 0x01	; 1
    14a0:	82 e0       	ldi	r24, 0x02	; 2
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	0e 94 14 04 	call	0x828	; 0x828 <_Z13PressDownSeenib>
    14a8:	88 23       	and	r24, r24
    14aa:	61 f0       	breq	.+24     	; 0x14c4 <loop+0x55e>
			{
				sollwert++;
    14ac:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <sollwert>
    14b0:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <sollwert+0x1>
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <sollwert+0x1>
    14ba:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <sollwert>
				resfreshStateDisplay= true;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <resfreshStateDisplay>
			}
			if( PressDownSeen(SW_UP, true))
    14c4:	61 e0       	ldi	r22, 0x01	; 1
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	0e 94 14 04 	call	0x828	; 0x828 <_Z13PressDownSeenib>
    14ce:	88 23       	and	r24, r24
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <loop+0x56e>
    14d2:	bf cf       	rjmp	.-130    	; 0x1452 <loop+0x4ec>
			{
				sollwert--;
    14d4:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <sollwert>
    14d8:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <sollwert+0x1>
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <sollwert+0x1>
    14e2:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <sollwert>
				resfreshStateDisplay= true;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <resfreshStateDisplay>
    14ec:	b2 cf       	rjmp	.-156    	; 0x1452 <loop+0x4ec>
			CheckStoreEEprom();
			break;
		}

		case state_ShowSHysterese:{
			if (resfreshStateDisplay )
    14ee:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <resfreshStateDisplay>
    14f2:	88 23       	and	r24, r24
    14f4:	59 f1       	breq	.+86     	; 0x154c <loop+0x5e6>
			{
				lcd.setCursor(0,0);
    14f6:	40 e0       	ldi	r20, 0x00	; 0
    14f8:	60 e0       	ldi	r22, 0x00	; 0
    14fa:	88 e4       	ldi	r24, 0x48	; 72
    14fc:	93 e0       	ldi	r25, 0x03	; 3
    14fe:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZN3LCD9setCursorEhh>
				lcd.print("On/Off Verzoegerung: ");
    1502:	6e e4       	ldi	r22, 0x4E	; 78
    1504:	71 e0       	ldi	r23, 0x01	; 1
    1506:	88 e4       	ldi	r24, 0x48	; 72
    1508:	93 e0       	ldi	r25, 0x03	; 3
    150a:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
				lcd.setCursor(0,1);
    150e:	41 e0       	ldi	r20, 0x01	; 1
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	88 e4       	ldi	r24, 0x48	; 72
    1514:	93 e0       	ldi	r25, 0x03	; 3
    1516:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZN3LCD9setCursorEhh>
				lcd.print(on_off_hysterese);
    151a:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <on_off_hysterese>
    151e:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <on_off_hysterese+0x1>
    1522:	4a e0       	ldi	r20, 0x0A	; 10
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	88 e4       	ldi	r24, 0x48	; 72
    1528:	93 e0       	ldi	r25, 0x03	; 3
    152a:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <_ZN5Print5printEii>
				lcd.print(" Minuten");
    152e:	64 e6       	ldi	r22, 0x64	; 100
    1530:	71 e0       	ldi	r23, 0x01	; 1
    1532:	88 e4       	ldi	r24, 0x48	; 72
    1534:	93 e0       	ldi	r25, 0x03	; 3
    1536:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
				lcd.print("    ");
    153a:	61 e3       	ldi	r22, 0x31	; 49
    153c:	71 e0       	ldi	r23, 0x01	; 1
    153e:	88 e4       	ldi	r24, 0x48	; 72
    1540:	93 e0       	ldi	r25, 0x03	; 3
    1542:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
				resfreshStateDisplay= true;
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <resfreshStateDisplay>
			}
			if( PressDownSeen(SW_DOWN, true))
    154c:	61 e0       	ldi	r22, 0x01	; 1
    154e:	82 e0       	ldi	r24, 0x02	; 2
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	0e 94 14 04 	call	0x828	; 0x828 <_Z13PressDownSeenib>
    1556:	88 23       	and	r24, r24
    1558:	61 f0       	breq	.+24     	; 0x1572 <loop+0x60c>
			{
				on_off_hysterese++;
    155a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <on_off_hysterese>
    155e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <on_off_hysterese+0x1>
    1562:	01 96       	adiw	r24, 0x01	; 1
    1564:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <on_off_hysterese+0x1>
    1568:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <on_off_hysterese>
				resfreshStateDisplay= true;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <resfreshStateDisplay>
			}
			if( PressDownSeen(SW_UP, true))
    1572:	61 e0       	ldi	r22, 0x01	; 1
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	0e 94 14 04 	call	0x828	; 0x828 <_Z13PressDownSeenib>
    157c:	88 23       	and	r24, r24
    157e:	61 f0       	breq	.+24     	; 0x1598 <loop+0x632>
			{
				on_off_hysterese--;
    1580:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <on_off_hysterese>
    1584:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <on_off_hysterese+0x1>
    1588:	01 97       	sbiw	r24, 0x01	; 1
    158a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <on_off_hysterese+0x1>
    158e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <on_off_hysterese>
				resfreshStateDisplay= true;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <resfreshStateDisplay>
			}
			if (on_off_hysterese == 0) on_off_hysterese = 1;
    1598:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <on_off_hysterese>
    159c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <on_off_hysterese+0x1>
    15a0:	89 2b       	or	r24, r25
    15a2:	31 f4       	brne	.+12     	; 0x15b0 <loop+0x64a>
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <on_off_hysterese+0x1>
    15ac:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <on_off_hysterese>
			if (on_off_hysterese >9) on_off_hysterese = 9;
    15b0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <on_off_hysterese>
    15b4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <on_off_hysterese+0x1>
    15b8:	0a 97       	sbiw	r24, 0x0a	; 10
    15ba:	0c f4       	brge	.+2      	; 0x15be <loop+0x658>
    15bc:	4a cf       	rjmp	.-364    	; 0x1452 <loop+0x4ec>
    15be:	89 e0       	ldi	r24, 0x09	; 9
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <on_off_hysterese+0x1>
    15c6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <on_off_hysterese>
    15ca:	43 cf       	rjmp	.-378    	; 0x1452 <loop+0x4ec>
			CheckStoreEEprom();
			break;
		}
		case state_ShowResetMinMax:{
			if (resfreshStateDisplay )
    15cc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <resfreshStateDisplay>
    15d0:	88 23       	and	r24, r24
    15d2:	79 f0       	breq	.+30     	; 0x15f2 <loop+0x68c>
			{
				lcd.setCursor(0,0);
    15d4:	40 e0       	ldi	r20, 0x00	; 0
    15d6:	60 e0       	ldi	r22, 0x00	; 0
    15d8:	88 e4       	ldi	r24, 0x48	; 72
    15da:	93 e0       	ldi	r25, 0x03	; 3
    15dc:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZN3LCD9setCursorEhh>
				lcd.print("Reset Min/Max ");
    15e0:	6d e6       	ldi	r22, 0x6D	; 109
    15e2:	71 e0       	ldi	r23, 0x01	; 1
    15e4:	88 e4       	ldi	r24, 0x48	; 72
    15e6:	93 e0       	ldi	r25, 0x03	; 3
    15e8:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
				resfreshStateDisplay= true;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <resfreshStateDisplay>
			}
			if (PressDownSeen(SW_SPARE, true))
    15f2:	61 e0       	ldi	r22, 0x01	; 1
    15f4:	84 e0       	ldi	r24, 0x04	; 4
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	0e 94 14 04 	call	0x828	; 0x828 <_Z13PressDownSeenib>
    15fc:	88 23       	and	r24, r24
    15fe:	09 f4       	brne	.+2      	; 0x1602 <loop+0x69c>
    1600:	4f c0       	rjmp	.+158    	; 0x16a0 <loop+0x73a>
			{
				lcd.clear();
    1602:	88 e4       	ldi	r24, 0x48	; 72
    1604:	93 e0       	ldi	r25, 0x03	; 3
    1606:	0e 94 8e 12 	call	0x251c	; 0x251c <_ZN3LCD5clearEv>
				lcd.home();
    160a:	88 e4       	ldi	r24, 0x48	; 72
    160c:	93 e0       	ldi	r25, 0x03	; 3
    160e:	0e 94 96 12 	call	0x252c	; 0x252c <_ZN3LCD4homeEv>
				lcd.setCursor(0,0);
    1612:	40 e0       	ldi	r20, 0x00	; 0
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	88 e4       	ldi	r24, 0x48	; 72
    1618:	93 e0       	ldi	r25, 0x03	; 3
    161a:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZN3LCD9setCursorEhh>
				lcd.print("Reseted...");
    161e:	6c e7       	ldi	r22, 0x7C	; 124
    1620:	71 e0       	ldi	r23, 0x01	; 1
    1622:	88 e4       	ldi	r24, 0x48	; 72
    1624:	93 e0       	ldi	r25, 0x03	; 3
    1626:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
				minTemperature = curtemperature ;
    162a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <curtemperature>
    162e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <curtemperature+0x1>
    1632:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <curtemperature+0x2>
    1636:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <curtemperature+0x3>
    163a:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <minTemperature>
    163e:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <minTemperature+0x1>
    1642:	a0 93 01 03 	sts	0x0301, r26	; 0x800301 <minTemperature+0x2>
    1646:	b0 93 02 03 	sts	0x0302, r27	; 0x800302 <minTemperature+0x3>
				maxTemperature = curtemperature ;
    164a:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <maxTemperature>
    164e:	90 93 fc 02 	sts	0x02FC, r25	; 0x8002fc <maxTemperature+0x1>
    1652:	a0 93 fd 02 	sts	0x02FD, r26	; 0x8002fd <maxTemperature+0x2>
    1656:	b0 93 fe 02 	sts	0x02FE, r27	; 0x8002fe <maxTemperature+0x3>
				averTemperature = curtemperature;
    165a:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <averTemperature>
    165e:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <averTemperature+0x1>
    1662:	a0 93 65 02 	sts	0x0265, r26	; 0x800265 <averTemperature+0x2>
    1666:	b0 93 66 02 	sts	0x0266, r27	; 0x800266 <averTemperature+0x3>
    166a:	eb e6       	ldi	r30, 0x6B	; 107
    166c:	f2 e0       	ldi	r31, 0x02	; 2
    166e:	2b ef       	ldi	r18, 0xFB	; 251
    1670:	32 e0       	ldi	r19, 0x02	; 2
				for(int i =0; i< 36;i++)
				{
					averArr[i] = curtemperature;
    1672:	81 93       	st	Z+, r24
    1674:	91 93       	st	Z+, r25
    1676:	a1 93       	st	Z+, r26
    1678:	b1 93       	st	Z+, r27
				lcd.setCursor(0,0);
				lcd.print("Reseted...");
				minTemperature = curtemperature ;
				maxTemperature = curtemperature ;
				averTemperature = curtemperature;
				for(int i =0; i< 36;i++)
    167a:	2e 17       	cp	r18, r30
    167c:	3f 07       	cpc	r19, r31
    167e:	c9 f7       	brne	.-14     	; 0x1672 <loop+0x70c>
				{
					averArr[i] = curtemperature;
				}
				delay(2000);
    1680:	60 ed       	ldi	r22, 0xD0	; 208
    1682:	77 e0       	ldi	r23, 0x07	; 7
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	0e 94 f6 16 	call	0x2dec	; 0x2dec <delay>
				lcd.clear();
    168c:	88 e4       	ldi	r24, 0x48	; 72
    168e:	93 e0       	ldi	r25, 0x03	; 3
    1690:	0e 94 8e 12 	call	0x251c	; 0x251c <_ZN3LCD5clearEv>
				lcd.home();
    1694:	88 e4       	ldi	r24, 0x48	; 72
    1696:	93 e0       	ldi	r25, 0x03	; 3
    1698:	0e 94 96 12 	call	0x252c	; 0x252c <_ZN3LCD4homeEv>
				prog_state = state_ShowTemperatue;
    169c:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <prog_state>
			}
			break;
		}
	}

	if (SwitchToggleState(SW_LIGTH) == HIGH)
    16a0:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <switchToggleState+0x3>
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	19 f4       	brne	.+6      	; 0x16ae <loop+0x748>
		analogWrite(DISPLAY_LIGHT, 200);
    16a8:	68 ec       	ldi	r22, 0xC8	; 200
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <loop+0x74c>
	else
		analogWrite(DISPLAY_LIGHT, 4);	
    16ae:	64 e0       	ldi	r22, 0x04	; 4
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	83 e0       	ldi	r24, 0x03	; 3
    16b4:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <analogWrite>

	if (PressDownSeen(SW_Scroll, true))
    16b8:	61 e0       	ldi	r22, 0x01	; 1
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	0e 94 14 04 	call	0x828	; 0x828 <_Z13PressDownSeenib>
    16c2:	88 23       	and	r24, r24
    16c4:	a9 f0       	breq	.+42     	; 0x16f0 <loop+0x78a>
	{
		prog_state++;
    16c6:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <prog_state>
    16ca:	8f 5f       	subi	r24, 0xFF	; 255
		if (prog_state > state_MaxState)
    16cc:	86 30       	cpi	r24, 0x06	; 6
    16ce:	18 f4       	brcc	.+6      	; 0x16d6 <loop+0x770>
	else
		analogWrite(DISPLAY_LIGHT, 4);	

	if (PressDownSeen(SW_Scroll, true))
	{
		prog_state++;
    16d0:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <prog_state>
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <loop+0x774>
		if (prog_state > state_MaxState)
			prog_state =0;
    16d6:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <prog_state>
		lcd.clear();
    16da:	88 e4       	ldi	r24, 0x48	; 72
    16dc:	93 e0       	ldi	r25, 0x03	; 3
    16de:	0e 94 8e 12 	call	0x251c	; 0x251c <_ZN3LCD5clearEv>
		lcd.home();
    16e2:	88 e4       	ldi	r24, 0x48	; 72
    16e4:	93 e0       	ldi	r25, 0x03	; 3
    16e6:	0e 94 96 12 	call	0x252c	; 0x252c <_ZN3LCD4homeEv>
		resfreshStateDisplay = true;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <resfreshStateDisplay>
	}

	if (!hystereseOK)
    16f0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <hystereseOK>
    16f4:	81 11       	cpse	r24, r1
    16f6:	21 c0       	rjmp	.+66     	; 0x173a <loop+0x7d4>
	{
		if (hysteresecounter > 600* on_off_hysterese)
    16f8:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <on_off_hysterese>
    16fc:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <on_off_hysterese+0x1>
    1700:	28 e5       	ldi	r18, 0x58	; 88
    1702:	32 e0       	ldi	r19, 0x02	; 2
    1704:	42 9f       	mul	r20, r18
    1706:	c0 01       	movw	r24, r0
    1708:	43 9f       	mul	r20, r19
    170a:	90 0d       	add	r25, r0
    170c:	52 9f       	mul	r21, r18
    170e:	90 0d       	add	r25, r0
    1710:	11 24       	eor	r1, r1
    1712:	09 2e       	mov	r0, r25
    1714:	00 0c       	add	r0, r0
    1716:	aa 0b       	sbc	r26, r26
    1718:	bb 0b       	sbc	r27, r27
    171a:	40 91 3a 02 	lds	r20, 0x023A	; 0x80023a <hysteresecounter>
    171e:	50 91 3b 02 	lds	r21, 0x023B	; 0x80023b <hysteresecounter+0x1>
    1722:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <hysteresecounter+0x2>
    1726:	70 91 3d 02 	lds	r23, 0x023D	; 0x80023d <hysteresecounter+0x3>
    172a:	84 17       	cp	r24, r20
    172c:	95 07       	cpc	r25, r21
    172e:	a6 07       	cpc	r26, r22
    1730:	b7 07       	cpc	r27, r23
    1732:	18 f4       	brcc	.+6      	; 0x173a <loop+0x7d4>
			hystereseOK = true;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <hystereseOK>
	}

	byte  switchLoadOn = LOW;
	
	if (workingmode == workingmode_COOLING)
    173a:	00 91 04 03 	lds	r16, 0x0304	; 0x800304 <workingmode>
    173e:	10 91 05 03 	lds	r17, 0x0305	; 0x800305 <workingmode+0x1>
    1742:	c0 91 5e 02 	lds	r28, 0x025E	; 0x80025e <temperatureLoadOnSwitch>
    1746:	03 30       	cpi	r16, 0x03	; 3
    1748:	11 05       	cpc	r17, r1
    174a:	09 f0       	breq	.+2      	; 0x174e <loop+0x7e8>
    174c:	42 c0       	rjmp	.+132    	; 0x17d2 <loop+0x86c>
	{
		float lowTrigger = sollwert - temperatureDelta;
    174e:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <sollwert>
    1752:	70 91 07 03 	lds	r23, 0x0307	; 0x800307 <sollwert+0x1>
    1756:	07 2e       	mov	r0, r23
    1758:	00 0c       	add	r0, r0
    175a:	88 0b       	sbc	r24, r24
    175c:	99 0b       	sbc	r25, r25
    175e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__floatsisf>
    1762:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <temperatureDelta>
    1766:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <temperatureDelta+0x1>
    176a:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <temperatureDelta+0x2>
    176e:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <temperatureDelta+0x3>
		float highTrigger = sollwert + temperatureDelta;
		if (temperatureLoadOnSwitch == ON)
    1772:	cc 23       	and	r28, r28
    1774:	e1 f0       	breq	.+56     	; 0x17ae <loop+0x848>
		{
			if (curtemperature  <  lowTrigger ) 
    1776:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__subsf3>
    177a:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <curtemperature>
    177e:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <curtemperature+0x1>
    1782:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <curtemperature+0x2>
    1786:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <curtemperature+0x3>
    178a:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <__gesf2>
    178e:	18 16       	cp	r1, r24
    1790:	0c f0       	brlt	.+2      	; 0x1794 <loop+0x82e>
    1792:	67 c0       	rjmp	.+206    	; 0x1862 <loop+0x8fc>
			{
				temperatureLoadOnSwitch = OFF;
    1794:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <temperatureLoadOnSwitch>
				hystereseOK = false;
    1798:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <hystereseOK>
				hysteresecounter=0;
    179c:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <hysteresecounter>
    17a0:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <hysteresecounter+0x1>
    17a4:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <hysteresecounter+0x2>
    17a8:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <hysteresecounter+0x3>
    17ac:	5d c0       	rjmp	.+186    	; 0x1868 <loop+0x902>
			}
		}
		else
		{
			if (curtemperature  >  highTrigger )
    17ae:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__addsf3>
    17b2:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <curtemperature>
    17b6:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <curtemperature+0x1>
    17ba:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <curtemperature+0x2>
    17be:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <curtemperature+0x3>
    17c2:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__cmpsf2>
    17c6:	87 ff       	sbrs	r24, 7
    17c8:	4f c0       	rjmp	.+158    	; 0x1868 <loop+0x902>
				temperatureLoadOnSwitch = ON;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <temperatureLoadOnSwitch>
    17d0:	48 c0       	rjmp	.+144    	; 0x1862 <loop+0x8fc>
		}
	}

	if (workingmode == workingmode_HEATING)
    17d2:	02 30       	cpi	r16, 0x02	; 2
    17d4:	11 05       	cpc	r17, r1
    17d6:	09 f0       	breq	.+2      	; 0x17da <loop+0x874>
    17d8:	40 c0       	rjmp	.+128    	; 0x185a <loop+0x8f4>
	{
		float lowTrigger = sollwert - temperatureDelta;
    17da:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <sollwert>
    17de:	70 91 07 03 	lds	r23, 0x0307	; 0x800307 <sollwert+0x1>
    17e2:	07 2e       	mov	r0, r23
    17e4:	00 0c       	add	r0, r0
    17e6:	88 0b       	sbc	r24, r24
    17e8:	99 0b       	sbc	r25, r25
    17ea:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__floatsisf>
    17ee:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <temperatureDelta>
    17f2:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <temperatureDelta+0x1>
    17f6:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <temperatureDelta+0x2>
    17fa:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <temperatureDelta+0x3>
		float highTrigger = sollwert + temperatureDelta;
		if (temperatureLoadOnSwitch == ON)
    17fe:	cc 23       	and	r28, r28
    1800:	d9 f0       	breq	.+54     	; 0x1838 <loop+0x8d2>
		{
			if (curtemperature  >  highTrigger )
    1802:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__addsf3>
    1806:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <curtemperature>
    180a:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <curtemperature+0x1>
    180e:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <curtemperature+0x2>
    1812:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <curtemperature+0x3>
    1816:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__cmpsf2>
    181a:	87 ff       	sbrs	r24, 7
    181c:	22 c0       	rjmp	.+68     	; 0x1862 <loop+0x8fc>
			{
				temperatureLoadOnSwitch = OFF;
    181e:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <temperatureLoadOnSwitch>
				hystereseOK = false;
    1822:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <hystereseOK>
				hysteresecounter=0;
    1826:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <hysteresecounter>
    182a:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <hysteresecounter+0x1>
    182e:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <hysteresecounter+0x2>
    1832:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <hysteresecounter+0x3>
    1836:	11 c0       	rjmp	.+34     	; 0x185a <loop+0x8f4>
			}
		}
		else
		{
			if (curtemperature  <  lowTrigger )
    1838:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__subsf3>
    183c:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <curtemperature>
    1840:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <curtemperature+0x1>
    1844:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <curtemperature+0x2>
    1848:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <curtemperature+0x3>
    184c:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <__gesf2>
    1850:	18 16       	cp	r1, r24
    1852:	54 f4       	brge	.+20     	; 0x1868 <loop+0x902>
				temperatureLoadOnSwitch = ON;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <temperatureLoadOnSwitch>
		}
	}

	if (temperatureLoadOnSwitch && hystereseOK)
    185a:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <temperatureLoadOnSwitch>
    185e:	88 23       	and	r24, r24
    1860:	19 f0       	breq	.+6      	; 0x1868 <loop+0x902>
	{
		if (hysteresecounter > 600* on_off_hysterese)
			hystereseOK = true;
	}

	byte  switchLoadOn = LOW;
    1862:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <hystereseOK>
    1866:	01 c0       	rjmp	.+2      	; 0x186a <loop+0x904>
    1868:	c0 e0       	ldi	r28, 0x00	; 0
	}

	if (temperatureLoadOnSwitch && hystereseOK)
		switchLoadOn = HIGH;
	
	if (workingmode == workingmode_OFF)switchLoadOn = LOW;
    186a:	01 15       	cp	r16, r1
    186c:	11 05       	cpc	r17, r1
    186e:	29 f0       	breq	.+10     	; 0x187a <loop+0x914>
	if (workingmode == workingmode_ON )switchLoadOn = HIGH;
    1870:	01 30       	cpi	r16, 0x01	; 1
    1872:	11 05       	cpc	r17, r1
    1874:	19 f4       	brne	.+6      	; 0x187c <loop+0x916>
    1876:	c1 e0       	ldi	r28, 0x01	; 1
    1878:	01 c0       	rjmp	.+2      	; 0x187c <loop+0x916>
	}

	if (temperatureLoadOnSwitch && hystereseOK)
		switchLoadOn = HIGH;
	
	if (workingmode == workingmode_OFF)switchLoadOn = LOW;
    187a:	c0 e0       	ldi	r28, 0x00	; 0
	if (workingmode == workingmode_ON )switchLoadOn = HIGH;

	digitalWrite(SSD_ON_OFF, switchLoadOn);
    187c:	6c 2f       	mov	r22, r28
    187e:	8f e0       	ldi	r24, 0x0F	; 15
    1880:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
	analogWrite(LED_ACTIVE, switchLoadOn*5);
    1884:	85 e0       	ldi	r24, 0x05	; 5
    1886:	c8 9f       	mul	r28, r24
    1888:	b0 01       	movw	r22, r0
    188a:	11 24       	eor	r1, r1
    188c:	86 e0       	ldi	r24, 0x06	; 6
    188e:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <analogWrite>

	delay(100);
    1892:	64 e6       	ldi	r22, 0x64	; 100
    1894:	70 e0       	ldi	r23, 0x00	; 0
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	0e 94 f6 16 	call	0x2dec	; 0x2dec <delay>
	loopcount++;
    189e:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <loopcount>
    18a2:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <loopcount+0x1>
    18a6:	a0 91 61 02 	lds	r26, 0x0261	; 0x800261 <loopcount+0x2>
    18aa:	b0 91 62 02 	lds	r27, 0x0262	; 0x800262 <loopcount+0x3>
    18ae:	01 96       	adiw	r24, 0x01	; 1
    18b0:	a1 1d       	adc	r26, r1
    18b2:	b1 1d       	adc	r27, r1
    18b4:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <loopcount>
    18b8:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <loopcount+0x1>
    18bc:	a0 93 61 02 	sts	0x0261, r26	; 0x800261 <loopcount+0x2>
    18c0:	b0 93 62 02 	sts	0x0262, r27	; 0x800262 <loopcount+0x3>
	hysteresecounter++;
    18c4:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <hysteresecounter>
    18c8:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <hysteresecounter+0x1>
    18cc:	a0 91 3c 02 	lds	r26, 0x023C	; 0x80023c <hysteresecounter+0x2>
    18d0:	b0 91 3d 02 	lds	r27, 0x023D	; 0x80023d <hysteresecounter+0x3>
    18d4:	01 96       	adiw	r24, 0x01	; 1
    18d6:	a1 1d       	adc	r26, r1
    18d8:	b1 1d       	adc	r27, r1
    18da:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <hysteresecounter>
    18de:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <hysteresecounter+0x1>
    18e2:	a0 93 3c 02 	sts	0x023C, r26	; 0x80023c <hysteresecounter+0x2>
    18e6:	b0 93 3d 02 	sts	0x023D, r27	; 0x80023d <hysteresecounter+0x3>
}
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	1f 91       	pop	r17
    18f0:	0f 91       	pop	r16
    18f2:	ff 90       	pop	r15
    18f4:	ef 90       	pop	r14
    18f6:	df 90       	pop	r13
    18f8:	cf 90       	pop	r12
    18fa:	08 95       	ret

000018fc <_GLOBAL__sub_I_lcd>:
	}


	outstr[c++] = '\0';
	return outstr;
    18fc:	8f 92       	push	r8
    18fe:	af 92       	push	r10
    1900:	cf 92       	push	r12
    1902:	ef 92       	push	r14
    1904:	0f 93       	push	r16
#define BACKLIGHT_PIN 3
#define D4_pin 4
#define D5_pin 5
#define D6_pin 6
#define D7_pin 7
LiquidCrystal_I2C lcd(I2C_ADDR,En_pin,Rw_pin,Rs_pin,D4_pin,D5_pin,D6_pin,D7_pin);
    1906:	87 e0       	ldi	r24, 0x07	; 7
    1908:	88 2e       	mov	r8, r24
    190a:	96 e0       	ldi	r25, 0x06	; 6
    190c:	a9 2e       	mov	r10, r25
    190e:	25 e0       	ldi	r18, 0x05	; 5
    1910:	c2 2e       	mov	r12, r18
    1912:	34 e0       	ldi	r19, 0x04	; 4
    1914:	e3 2e       	mov	r14, r19
    1916:	00 e0       	ldi	r16, 0x00	; 0
    1918:	21 e0       	ldi	r18, 0x01	; 1
    191a:	42 e0       	ldi	r20, 0x02	; 2
    191c:	6f e3       	ldi	r22, 0x3F	; 63
    191e:	88 e4       	ldi	r24, 0x48	; 72
    1920:	93 e0       	ldi	r25, 0x03	; 3
    1922:	0e 94 98 13 	call	0x2730	; 0x2730 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>

const uint8_t dataPin  =  11;
const uint8_t clockPin =  10;
Sensirion tempSensor = Sensirion(dataPin, clockPin);
    1926:	4a e0       	ldi	r20, 0x0A	; 10
    1928:	6b e0       	ldi	r22, 0x0B	; 11
    192a:	82 e4       	ldi	r24, 0x42	; 66
    192c:	93 e0       	ldi	r25, 0x03	; 3
    192e:	0e 94 c1 01 	call	0x382	; 0x382 <_ZN9SensirionC1Ehh>
#define workingmode_OFF 0
#define workingmode_ON  1
#define workingmode_HEATING  2
#define workingmode_COOLING  3
#define workingmode_MAX  workingmode_COOLING
String  modestr[4] = {"Aus    ", "An     ", "Heizen ", "Kuehlen"};
    1932:	67 e8       	ldi	r22, 0x87	; 135
    1934:	71 e0       	ldi	r23, 0x01	; 1
    1936:	88 e0       	ldi	r24, 0x08	; 8
    1938:	93 e0       	ldi	r25, 0x03	; 3
    193a:	0e 94 07 19 	call	0x320e	; 0x320e <_ZN6StringC1EPKc>
    193e:	6f e8       	ldi	r22, 0x8F	; 143
    1940:	71 e0       	ldi	r23, 0x01	; 1
    1942:	8e e0       	ldi	r24, 0x0E	; 14
    1944:	93 e0       	ldi	r25, 0x03	; 3
    1946:	0e 94 07 19 	call	0x320e	; 0x320e <_ZN6StringC1EPKc>
    194a:	67 e9       	ldi	r22, 0x97	; 151
    194c:	71 e0       	ldi	r23, 0x01	; 1
    194e:	84 e1       	ldi	r24, 0x14	; 20
    1950:	93 e0       	ldi	r25, 0x03	; 3
    1952:	0e 94 07 19 	call	0x320e	; 0x320e <_ZN6StringC1EPKc>
    1956:	6f e9       	ldi	r22, 0x9F	; 159
    1958:	71 e0       	ldi	r23, 0x01	; 1
    195a:	8a e1       	ldi	r24, 0x1A	; 26
    195c:	93 e0       	ldi	r25, 0x03	; 3
	}


	outstr[c++] = '\0';
	return outstr;
    195e:	0f 91       	pop	r16
    1960:	ef 90       	pop	r14
    1962:	cf 90       	pop	r12
    1964:	af 90       	pop	r10
    1966:	8f 90       	pop	r8
#define workingmode_OFF 0
#define workingmode_ON  1
#define workingmode_HEATING  2
#define workingmode_COOLING  3
#define workingmode_MAX  workingmode_COOLING
String  modestr[4] = {"Aus    ", "An     ", "Heizen ", "Kuehlen"};
    1968:	0c 94 07 19 	jmp	0x320e	; 0x320e <_ZN6StringC1EPKc>

0000196c <_GLOBAL__sub_D_lcd>:
    196c:	8a e1       	ldi	r24, 0x1A	; 26
    196e:	93 e0       	ldi	r25, 0x03	; 3
    1970:	0e 94 94 18 	call	0x3128	; 0x3128 <_ZN6StringD1Ev>
    1974:	84 e1       	ldi	r24, 0x14	; 20
    1976:	93 e0       	ldi	r25, 0x03	; 3
    1978:	0e 94 94 18 	call	0x3128	; 0x3128 <_ZN6StringD1Ev>
    197c:	8e e0       	ldi	r24, 0x0E	; 14
    197e:	93 e0       	ldi	r25, 0x03	; 3
    1980:	0e 94 94 18 	call	0x3128	; 0x3128 <_ZN6StringD1Ev>
    1984:	88 e0       	ldi	r24, 0x08	; 8
    1986:	93 e0       	ldi	r25, 0x03	; 3
    1988:	0c 94 94 18 	jmp	0x3128	; 0x3128 <_ZN6StringD1Ev>

0000198c <setup>:
#define OFF false
bool temperatureLoadOnSwitch = OFF;
char tempBuffer[32];

void setup()
{
    198c:	bf 92       	push	r11
    198e:	cf 92       	push	r12
    1990:	df 92       	push	r13
    1992:	ef 92       	push	r14
    1994:	ff 92       	push	r15
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    199e:	26 e0       	ldi	r18, 0x06	; 6
    19a0:	40 e8       	ldi	r20, 0x80	; 128
    19a2:	55 e2       	ldi	r21, 0x25	; 37
    19a4:	60 e0       	ldi	r22, 0x00	; 0
    19a6:	70 e0       	ldi	r23, 0x00	; 0
    19a8:	80 e6       	ldi	r24, 0x60	; 96
    19aa:	93 e0       	ldi	r25, 0x03	; 3
    19ac:	0e 94 6d 11 	call	0x22da	; 0x22da <_ZN14HardwareSerial5beginEmh>
  Serial.begin(9600);
  Serial.println("Temperatur");
    19b0:	67 ea       	ldi	r22, 0xA7	; 167
    19b2:	71 e0       	ldi	r23, 0x01	; 1
    19b4:	80 e6       	ldi	r24, 0x60	; 96
    19b6:	93 e0       	ldi	r25, 0x03	; 3
    19b8:	0e 94 ff 14 	call	0x29fe	; 0x29fe <_ZN5Print7printlnEPKc>
  Wire.begin();  
    19bc:	8d ef       	ldi	r24, 0xFD	; 253
    19be:	93 e0       	ldi	r25, 0x03	; 3
    19c0:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <_ZN7TwoWire5beginEv>
  
  delay(300);
    19c4:	6c e2       	ldi	r22, 0x2C	; 44
    19c6:	71 e0       	ldi	r23, 0x01	; 1
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	0e 94 f6 16 	call	0x2dec	; 0x2dec <delay>
  lcd.begin (16,2); //  our LCD is a 16x2, change for your LCD if needed
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	42 e0       	ldi	r20, 0x02	; 2
    19d4:	60 e1       	ldi	r22, 0x10	; 16
    19d6:	88 e4       	ldi	r24, 0x48	; 72
    19d8:	93 e0       	ldi	r25, 0x03	; 3
    19da:	0e 94 70 14 	call	0x28e0	; 0x28e0 <_ZN17LiquidCrystal_I2C5beginEhhh>
  delay(300);
    19de:	6c e2       	ldi	r22, 0x2C	; 44
    19e0:	71 e0       	ldi	r23, 0x01	; 1
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	0e 94 f6 16 	call	0x2dec	; 0x2dec <delay>
  
  Wire.setClock(50000);
    19ea:	40 e5       	ldi	r20, 0x50	; 80
    19ec:	53 ec       	ldi	r21, 0xC3	; 195
    19ee:	60 e0       	ldi	r22, 0x00	; 0
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	8d ef       	ldi	r24, 0xFD	; 253
    19f4:	93 e0       	ldi	r25, 0x03	; 3
    19f6:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <_ZN7TwoWire8setClockEm>
  pinMode(SDA, INPUT);
    19fa:	60 e0       	ldi	r22, 0x00	; 0
    19fc:	82 e1       	ldi	r24, 0x12	; 18
    19fe:	0e 94 00 18 	call	0x3000	; 0x3000 <pinMode>
  pinMode(SCL, INPUT);
    1a02:	60 e0       	ldi	r22, 0x00	; 0
    1a04:	83 e1       	ldi	r24, 0x13	; 19
    1a06:	0e 94 00 18 	call	0x3000	; 0x3000 <pinMode>
  
  pinMode(LED_BUILTIN, OUTPUT);
    1a0a:	61 e0       	ldi	r22, 0x01	; 1
    1a0c:	8d e0       	ldi	r24, 0x0D	; 13
    1a0e:	0e 94 00 18 	call	0x3000	; 0x3000 <pinMode>
  
  pinMode(SSD_ON_OFF, OUTPUT);
    1a12:	61 e0       	ldi	r22, 0x01	; 1
    1a14:	8f e0       	ldi	r24, 0x0F	; 15
    1a16:	0e 94 00 18 	call	0x3000	; 0x3000 <pinMode>
  pinMode(LED_ACTIVE, OUTPUT);
    1a1a:	61 e0       	ldi	r22, 0x01	; 1
    1a1c:	86 e0       	ldi	r24, 0x06	; 6
    1a1e:	0e 94 00 18 	call	0x3000	; 0x3000 <pinMode>
  digitalWrite(SSD_ON_OFF,HIGH);
    1a22:	61 e0       	ldi	r22, 0x01	; 1
    1a24:	8f e0       	ldi	r24, 0x0F	; 15
    1a26:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
  digitalWrite(SSD_ON_OFF,HIGH);
    1a2a:	61 e0       	ldi	r22, 0x01	; 1
    1a2c:	8f e0       	ldi	r24, 0x0F	; 15
    1a2e:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
  
  pinMode(DISPLAY_LIGHT, OUTPUT);
    1a32:	61 e0       	ldi	r22, 0x01	; 1
    1a34:	83 e0       	ldi	r24, 0x03	; 3
    1a36:	0e 94 00 18 	call	0x3000	; 0x3000 <pinMode>
  analogWrite(DISPLAY_LIGHT, 200);
    1a3a:	68 ec       	ldi	r22, 0xC8	; 200
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
    1a3e:	83 e0       	ldi	r24, 0x03	; 3
    1a40:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <analogWrite>
  analogWrite(LED_ACTIVE,50);
    1a44:	62 e3       	ldi	r22, 0x32	; 50
    1a46:	70 e0       	ldi	r23, 0x00	; 0
    1a48:	86 e0       	ldi	r24, 0x06	; 6
    1a4a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <analogWrite>

  lcd.begin (16,2); //  our LCD is a 16x2, change for your LCD if needed
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	42 e0       	ldi	r20, 0x02	; 2
    1a52:	60 e1       	ldi	r22, 0x10	; 16
    1a54:	88 e4       	ldi	r24, 0x48	; 72
    1a56:	93 e0       	ldi	r25, 0x03	; 3
    1a58:	0e 94 70 14 	call	0x28e0	; 0x28e0 <_ZN17LiquidCrystal_I2C5beginEhhh>
  lcd.setBacklightPin(BACKLIGHT_PIN,POSITIVE);// LCD Backlight ON
    1a5c:	40 e0       	ldi	r20, 0x00	; 0
    1a5e:	63 e0       	ldi	r22, 0x03	; 3
    1a60:	88 e4       	ldi	r24, 0x48	; 72
    1a62:	93 e0       	ldi	r25, 0x03	; 3
    1a64:	0e 94 6d 13 	call	0x26da	; 0x26da <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>
  lcd.setBacklight(HIGH);
    1a68:	61 e0       	ldi	r22, 0x01	; 1
    1a6a:	88 e4       	ldi	r24, 0x48	; 72
    1a6c:	93 e0       	ldi	r25, 0x03	; 3
    1a6e:	0e 94 81 13 	call	0x2702	; 0x2702 <_ZN17LiquidCrystal_I2C12setBacklightEh>
  lcd.home (); // go home on LCD
    1a72:	88 e4       	ldi	r24, 0x48	; 72
    1a74:	93 e0       	ldi	r25, 0x03	; 3
    1a76:	0e 94 96 12 	call	0x252c	; 0x252c <_ZN3LCD4homeEv>
  lcd.setCursor(0,0);
    1a7a:	40 e0       	ldi	r20, 0x00	; 0
    1a7c:	60 e0       	ldi	r22, 0x00	; 0
    1a7e:	88 e4       	ldi	r24, 0x48	; 72
    1a80:	93 e0       	ldi	r25, 0x03	; 3
    1a82:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZN3LCD9setCursorEhh>
  lcd.print("Init...");
    1a86:	62 eb       	ldi	r22, 0xB2	; 178
    1a88:	71 e0       	ldi	r23, 0x01	; 1
    1a8a:	88 e4       	ldi	r24, 0x48	; 72
    1a8c:	93 e0       	ldi	r25, 0x03	; 3
    1a8e:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
  lcd.setCursor(0,1);
    1a92:	41 e0       	ldi	r20, 0x01	; 1
    1a94:	60 e0       	ldi	r22, 0x00	; 0
    1a96:	88 e4       	ldi	r24, 0x48	; 72
    1a98:	93 e0       	ldi	r25, 0x03	; 3
    1a9a:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZN3LCD9setCursorEhh>


	if (!readEprom())
    1a9e:	0e 94 07 05 	call	0xa0e	; 0xa0e <_Z9readEpromv>
    1aa2:	81 11       	cpse	r24, r1
    1aa4:	0b c0       	rjmp	.+22     	; 0x1abc <setup+0x130>
	{
		writeEprom();
    1aa6:	0e 94 a4 04 	call	0x948	; 0x948 <_Z10writeEpromv>
		lcd.print("Cannot read EEPROM");
    1aaa:	6a eb       	ldi	r22, 0xBA	; 186
    1aac:	71 e0       	ldi	r23, 0x01	; 1
    1aae:	88 e4       	ldi	r24, 0x48	; 72
    1ab0:	93 e0       	ldi	r25, 0x03	; 3
    1ab2:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
		Serial.println("Cannot read EEPROM");
    1ab6:	6a eb       	ldi	r22, 0xBA	; 186
    1ab8:	71 e0       	ldi	r23, 0x01	; 1
    1aba:	08 c0       	rjmp	.+16     	; 0x1acc <setup+0x140>
	}
	else
	{
		lcd.print("EEPROM OK");
    1abc:	6d ec       	ldi	r22, 0xCD	; 205
    1abe:	71 e0       	ldi	r23, 0x01	; 1
    1ac0:	88 e4       	ldi	r24, 0x48	; 72
    1ac2:	93 e0       	ldi	r25, 0x03	; 3
    1ac4:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
		Serial.println("EEPROM OK");
    1ac8:	6d ec       	ldi	r22, 0xCD	; 205
    1aca:	71 e0       	ldi	r23, 0x01	; 1
    1acc:	80 e6       	ldi	r24, 0x60	; 96
    1ace:	93 e0       	ldi	r25, 0x03	; 3
    1ad0:	0e 94 ff 14 	call	0x29fe	; 0x29fe <_ZN5Print7printlnEPKc>
	}

  //sensors.Begin();
  
  delay(1000);
    1ad4:	68 ee       	ldi	r22, 0xE8	; 232
    1ad6:	73 e0       	ldi	r23, 0x03	; 3
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	0e 94 f6 16 	call	0x2dec	; 0x2dec <delay>
  ResetTepmerature();
    1ae0:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <_Z16ResetTepmeraturev>

  switchPin[SW_LIGTH]	= Switch_00;
    1ae4:	88 e0       	ldi	r24, 0x08	; 8
    1ae6:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <switchPin+0x3>
  switchPin[SW_Scroll]	= Switch_01;
    1aea:	87 e0       	ldi	r24, 0x07	; 7
    1aec:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <switchPin>
  switchPin[SW_DOWN]	= Switch_02;
    1af0:	89 e0       	ldi	r24, 0x09	; 9
    1af2:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <switchPin+0x2>
  switchPin[SW_UP]		= Switch_03;
    1af6:	85 e0       	ldi	r24, 0x05	; 5
    1af8:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <switchPin+0x1>
  switchPin[SW_SPARE]	= Switch_04;
    1afc:	84 e0       	ldi	r24, 0x04	; 4
    1afe:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <switchPin+0x4>
    1b02:	c2 e2       	ldi	r28, 0x22	; 34
    1b04:	d3 e0       	ldi	r29, 0x03	; 3
    1b06:	81 e3       	ldi	r24, 0x31	; 49
    1b08:	c8 2e       	mov	r12, r24
    1b0a:	83 e0       	ldi	r24, 0x03	; 3
    1b0c:	d8 2e       	mov	r13, r24
    1b0e:	9c e2       	ldi	r25, 0x2C	; 44
    1b10:	e9 2e       	mov	r14, r25
    1b12:	93 e0       	ldi	r25, 0x03	; 3
    1b14:	f9 2e       	mov	r15, r25
    1b16:	07 e2       	ldi	r16, 0x27	; 39
    1b18:	13 e0       	ldi	r17, 0x03	; 3

  for(int i =0; i< switchcount;i++)
  {
	pinMode(switchPin[i], INPUT_PULLUP);
	switchDOWNSeen[i] = false;
	currentSwitchState[i] = HIGH;
    1b1a:	bb 24       	eor	r11, r11
    1b1c:	b3 94       	inc	r11
  switchPin[SW_UP]		= Switch_03;
  switchPin[SW_SPARE]	= Switch_04;

  for(int i =0; i< switchcount;i++)
  {
	pinMode(switchPin[i], INPUT_PULLUP);
    1b1e:	62 e0       	ldi	r22, 0x02	; 2
    1b20:	89 91       	ld	r24, Y+
    1b22:	0e 94 00 18 	call	0x3000	; 0x3000 <pinMode>
	switchDOWNSeen[i] = false;
    1b26:	f6 01       	movw	r30, r12
    1b28:	11 92       	st	Z+, r1
    1b2a:	6f 01       	movw	r12, r30
	currentSwitchState[i] = HIGH;
    1b2c:	f7 01       	movw	r30, r14
    1b2e:	b1 92       	st	Z+, r11
    1b30:	7f 01       	movw	r14, r30
	switchToggleState[i] = LOW;
    1b32:	f8 01       	movw	r30, r16
    1b34:	11 92       	st	Z+, r1
    1b36:	8f 01       	movw	r16, r30
  switchPin[SW_Scroll]	= Switch_01;
  switchPin[SW_DOWN]	= Switch_02;
  switchPin[SW_UP]		= Switch_03;
  switchPin[SW_SPARE]	= Switch_04;

  for(int i =0; i< switchcount;i++)
    1b38:	f3 e0       	ldi	r31, 0x03	; 3
    1b3a:	c7 32       	cpi	r28, 0x27	; 39
    1b3c:	df 07       	cpc	r29, r31
    1b3e:	79 f7       	brne	.-34     	; 0x1b1e <setup+0x192>
	pinMode(switchPin[i], INPUT_PULLUP);
	switchDOWNSeen[i] = false;
	currentSwitchState[i] = HIGH;
	switchToggleState[i] = LOW;
  }
  switchToggleState[SW_LIGTH] = HIGH;
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <switchToggleState+0x3>

  lcd.clear();  
    1b46:	88 e4       	ldi	r24, 0x48	; 72
    1b48:	93 e0       	ldi	r25, 0x03	; 3
    1b4a:	0e 94 8e 12 	call	0x251c	; 0x251c <_ZN3LCD5clearEv>
  noInterrupts();           // disable all interrupts
    1b4e:	f8 94       	cli
  TCCR1A = 0;				// PWM on Pins 9 and 10: controlled by timer 1 !!!
    1b50:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  TCCR1B = 0;
    1b54:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

  // Set timer1_counter to the correct value for our interrupt interval
  //timer1_counter = 64911;   // preload timer 65536-16MHz/256/100Hz
  //timer1_counter = 64286;   // preload timer 65536-16MHz/256/50Hz
  timer1_counter = 59286;   // preload timer 65536-16MHz/256/10Hz
    1b58:	86 e9       	ldi	r24, 0x96	; 150
    1b5a:	97 ee       	ldi	r25, 0xE7	; 231
    1b5c:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <timer1_counter+0x1>
    1b60:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <timer1_counter>
  //timer1_counter = 34286;   // preload timer 65536-16MHz/256/2Hz

  TCNT1 = timer1_counter;   // preload timer
    1b64:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1b68:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  TCCR1B |= (1 << CS12);    // 256 prescaler
    1b6c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1b70:	84 60       	ori	r24, 0x04	; 4
    1b72:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  TIMSK1 |= (1 << TOIE1);   // enable timer overflow interrupt
    1b76:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1b7a:	81 60       	ori	r24, 0x01	; 1
    1b7c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  interrupts();      
    1b80:	78 94       	sei
  delay(1000);       // enable all interrupts
    1b82:	68 ee       	ldi	r22, 0xE8	; 232
    1b84:	73 e0       	ldi	r23, 0x03	; 3
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	0e 94 f6 16 	call	0x2dec	; 0x2dec <delay>
  ResetTepmerature();
}
    1b8e:	df 91       	pop	r29
    1b90:	cf 91       	pop	r28
    1b92:	1f 91       	pop	r17
    1b94:	0f 91       	pop	r16
    1b96:	ff 90       	pop	r15
    1b98:	ef 90       	pop	r14
    1b9a:	df 90       	pop	r13
    1b9c:	cf 90       	pop	r12
    1b9e:	bf 90       	pop	r11
  TCNT1 = timer1_counter;   // preload timer
  TCCR1B |= (1 << CS12);    // 256 prescaler
  TIMSK1 |= (1 << TOIE1);   // enable timer overflow interrupt
  interrupts();      
  delay(1000);       // enable all interrupts
  ResetTepmerature();
    1ba0:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <_Z16ResetTepmeraturev>

00001ba4 <__subsf3>:
    1ba4:	50 58       	subi	r21, 0x80	; 128

00001ba6 <__addsf3>:
    1ba6:	bb 27       	eor	r27, r27
    1ba8:	aa 27       	eor	r26, r26
    1baa:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__addsf3x>
    1bae:	0c 94 64 0f 	jmp	0x1ec8	; 0x1ec8 <__fp_round>
    1bb2:	0e 94 56 0f 	call	0x1eac	; 0x1eac <__fp_pscA>
    1bb6:	38 f0       	brcs	.+14     	; 0x1bc6 <__addsf3+0x20>
    1bb8:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__fp_pscB>
    1bbc:	20 f0       	brcs	.+8      	; 0x1bc6 <__addsf3+0x20>
    1bbe:	39 f4       	brne	.+14     	; 0x1bce <__addsf3+0x28>
    1bc0:	9f 3f       	cpi	r25, 0xFF	; 255
    1bc2:	19 f4       	brne	.+6      	; 0x1bca <__addsf3+0x24>
    1bc4:	26 f4       	brtc	.+8      	; 0x1bce <__addsf3+0x28>
    1bc6:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__fp_nan>
    1bca:	0e f4       	brtc	.+2      	; 0x1bce <__addsf3+0x28>
    1bcc:	e0 95       	com	r30
    1bce:	e7 fb       	bst	r30, 7
    1bd0:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <__fp_inf>

00001bd4 <__addsf3x>:
    1bd4:	e9 2f       	mov	r30, r25
    1bd6:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__fp_split3>
    1bda:	58 f3       	brcs	.-42     	; 0x1bb2 <__addsf3+0xc>
    1bdc:	ba 17       	cp	r27, r26
    1bde:	62 07       	cpc	r22, r18
    1be0:	73 07       	cpc	r23, r19
    1be2:	84 07       	cpc	r24, r20
    1be4:	95 07       	cpc	r25, r21
    1be6:	20 f0       	brcs	.+8      	; 0x1bf0 <__addsf3x+0x1c>
    1be8:	79 f4       	brne	.+30     	; 0x1c08 <__addsf3x+0x34>
    1bea:	a6 f5       	brtc	.+104    	; 0x1c54 <__addsf3x+0x80>
    1bec:	0c 94 97 0f 	jmp	0x1f2e	; 0x1f2e <__fp_zero>
    1bf0:	0e f4       	brtc	.+2      	; 0x1bf4 <__addsf3x+0x20>
    1bf2:	e0 95       	com	r30
    1bf4:	0b 2e       	mov	r0, r27
    1bf6:	ba 2f       	mov	r27, r26
    1bf8:	a0 2d       	mov	r26, r0
    1bfa:	0b 01       	movw	r0, r22
    1bfc:	b9 01       	movw	r22, r18
    1bfe:	90 01       	movw	r18, r0
    1c00:	0c 01       	movw	r0, r24
    1c02:	ca 01       	movw	r24, r20
    1c04:	a0 01       	movw	r20, r0
    1c06:	11 24       	eor	r1, r1
    1c08:	ff 27       	eor	r31, r31
    1c0a:	59 1b       	sub	r21, r25
    1c0c:	99 f0       	breq	.+38     	; 0x1c34 <__addsf3x+0x60>
    1c0e:	59 3f       	cpi	r21, 0xF9	; 249
    1c10:	50 f4       	brcc	.+20     	; 0x1c26 <__addsf3x+0x52>
    1c12:	50 3e       	cpi	r21, 0xE0	; 224
    1c14:	68 f1       	brcs	.+90     	; 0x1c70 <__addsf3x+0x9c>
    1c16:	1a 16       	cp	r1, r26
    1c18:	f0 40       	sbci	r31, 0x00	; 0
    1c1a:	a2 2f       	mov	r26, r18
    1c1c:	23 2f       	mov	r18, r19
    1c1e:	34 2f       	mov	r19, r20
    1c20:	44 27       	eor	r20, r20
    1c22:	58 5f       	subi	r21, 0xF8	; 248
    1c24:	f3 cf       	rjmp	.-26     	; 0x1c0c <__addsf3x+0x38>
    1c26:	46 95       	lsr	r20
    1c28:	37 95       	ror	r19
    1c2a:	27 95       	ror	r18
    1c2c:	a7 95       	ror	r26
    1c2e:	f0 40       	sbci	r31, 0x00	; 0
    1c30:	53 95       	inc	r21
    1c32:	c9 f7       	brne	.-14     	; 0x1c26 <__addsf3x+0x52>
    1c34:	7e f4       	brtc	.+30     	; 0x1c54 <__addsf3x+0x80>
    1c36:	1f 16       	cp	r1, r31
    1c38:	ba 0b       	sbc	r27, r26
    1c3a:	62 0b       	sbc	r22, r18
    1c3c:	73 0b       	sbc	r23, r19
    1c3e:	84 0b       	sbc	r24, r20
    1c40:	ba f0       	brmi	.+46     	; 0x1c70 <__addsf3x+0x9c>
    1c42:	91 50       	subi	r25, 0x01	; 1
    1c44:	a1 f0       	breq	.+40     	; 0x1c6e <__addsf3x+0x9a>
    1c46:	ff 0f       	add	r31, r31
    1c48:	bb 1f       	adc	r27, r27
    1c4a:	66 1f       	adc	r22, r22
    1c4c:	77 1f       	adc	r23, r23
    1c4e:	88 1f       	adc	r24, r24
    1c50:	c2 f7       	brpl	.-16     	; 0x1c42 <__addsf3x+0x6e>
    1c52:	0e c0       	rjmp	.+28     	; 0x1c70 <__addsf3x+0x9c>
    1c54:	ba 0f       	add	r27, r26
    1c56:	62 1f       	adc	r22, r18
    1c58:	73 1f       	adc	r23, r19
    1c5a:	84 1f       	adc	r24, r20
    1c5c:	48 f4       	brcc	.+18     	; 0x1c70 <__addsf3x+0x9c>
    1c5e:	87 95       	ror	r24
    1c60:	77 95       	ror	r23
    1c62:	67 95       	ror	r22
    1c64:	b7 95       	ror	r27
    1c66:	f7 95       	ror	r31
    1c68:	9e 3f       	cpi	r25, 0xFE	; 254
    1c6a:	08 f0       	brcs	.+2      	; 0x1c6e <__addsf3x+0x9a>
    1c6c:	b0 cf       	rjmp	.-160    	; 0x1bce <__addsf3+0x28>
    1c6e:	93 95       	inc	r25
    1c70:	88 0f       	add	r24, r24
    1c72:	08 f0       	brcs	.+2      	; 0x1c76 <__addsf3x+0xa2>
    1c74:	99 27       	eor	r25, r25
    1c76:	ee 0f       	add	r30, r30
    1c78:	97 95       	ror	r25
    1c7a:	87 95       	ror	r24
    1c7c:	08 95       	ret

00001c7e <__cmpsf2>:
    1c7e:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <__fp_cmp>
    1c82:	08 f4       	brcc	.+2      	; 0x1c86 <__cmpsf2+0x8>
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	08 95       	ret

00001c88 <__divsf3>:
    1c88:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__divsf3x>
    1c8c:	0c 94 64 0f 	jmp	0x1ec8	; 0x1ec8 <__fp_round>
    1c90:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__fp_pscB>
    1c94:	58 f0       	brcs	.+22     	; 0x1cac <__divsf3+0x24>
    1c96:	0e 94 56 0f 	call	0x1eac	; 0x1eac <__fp_pscA>
    1c9a:	40 f0       	brcs	.+16     	; 0x1cac <__divsf3+0x24>
    1c9c:	29 f4       	brne	.+10     	; 0x1ca8 <__divsf3+0x20>
    1c9e:	5f 3f       	cpi	r21, 0xFF	; 255
    1ca0:	29 f0       	breq	.+10     	; 0x1cac <__divsf3+0x24>
    1ca2:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <__fp_inf>
    1ca6:	51 11       	cpse	r21, r1
    1ca8:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <__fp_szero>
    1cac:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__fp_nan>

00001cb0 <__divsf3x>:
    1cb0:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__fp_split3>
    1cb4:	68 f3       	brcs	.-38     	; 0x1c90 <__divsf3+0x8>

00001cb6 <__divsf3_pse>:
    1cb6:	99 23       	and	r25, r25
    1cb8:	b1 f3       	breq	.-20     	; 0x1ca6 <__divsf3+0x1e>
    1cba:	55 23       	and	r21, r21
    1cbc:	91 f3       	breq	.-28     	; 0x1ca2 <__divsf3+0x1a>
    1cbe:	95 1b       	sub	r25, r21
    1cc0:	55 0b       	sbc	r21, r21
    1cc2:	bb 27       	eor	r27, r27
    1cc4:	aa 27       	eor	r26, r26
    1cc6:	62 17       	cp	r22, r18
    1cc8:	73 07       	cpc	r23, r19
    1cca:	84 07       	cpc	r24, r20
    1ccc:	38 f0       	brcs	.+14     	; 0x1cdc <__divsf3_pse+0x26>
    1cce:	9f 5f       	subi	r25, 0xFF	; 255
    1cd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd2:	22 0f       	add	r18, r18
    1cd4:	33 1f       	adc	r19, r19
    1cd6:	44 1f       	adc	r20, r20
    1cd8:	aa 1f       	adc	r26, r26
    1cda:	a9 f3       	breq	.-22     	; 0x1cc6 <__divsf3_pse+0x10>
    1cdc:	35 d0       	rcall	.+106    	; 0x1d48 <__divsf3_pse+0x92>
    1cde:	0e 2e       	mov	r0, r30
    1ce0:	3a f0       	brmi	.+14     	; 0x1cf0 <__divsf3_pse+0x3a>
    1ce2:	e0 e8       	ldi	r30, 0x80	; 128
    1ce4:	32 d0       	rcall	.+100    	; 0x1d4a <__divsf3_pse+0x94>
    1ce6:	91 50       	subi	r25, 0x01	; 1
    1ce8:	50 40       	sbci	r21, 0x00	; 0
    1cea:	e6 95       	lsr	r30
    1cec:	00 1c       	adc	r0, r0
    1cee:	ca f7       	brpl	.-14     	; 0x1ce2 <__divsf3_pse+0x2c>
    1cf0:	2b d0       	rcall	.+86     	; 0x1d48 <__divsf3_pse+0x92>
    1cf2:	fe 2f       	mov	r31, r30
    1cf4:	29 d0       	rcall	.+82     	; 0x1d48 <__divsf3_pse+0x92>
    1cf6:	66 0f       	add	r22, r22
    1cf8:	77 1f       	adc	r23, r23
    1cfa:	88 1f       	adc	r24, r24
    1cfc:	bb 1f       	adc	r27, r27
    1cfe:	26 17       	cp	r18, r22
    1d00:	37 07       	cpc	r19, r23
    1d02:	48 07       	cpc	r20, r24
    1d04:	ab 07       	cpc	r26, r27
    1d06:	b0 e8       	ldi	r27, 0x80	; 128
    1d08:	09 f0       	breq	.+2      	; 0x1d0c <__divsf3_pse+0x56>
    1d0a:	bb 0b       	sbc	r27, r27
    1d0c:	80 2d       	mov	r24, r0
    1d0e:	bf 01       	movw	r22, r30
    1d10:	ff 27       	eor	r31, r31
    1d12:	93 58       	subi	r25, 0x83	; 131
    1d14:	5f 4f       	sbci	r21, 0xFF	; 255
    1d16:	3a f0       	brmi	.+14     	; 0x1d26 <__divsf3_pse+0x70>
    1d18:	9e 3f       	cpi	r25, 0xFE	; 254
    1d1a:	51 05       	cpc	r21, r1
    1d1c:	78 f0       	brcs	.+30     	; 0x1d3c <__divsf3_pse+0x86>
    1d1e:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <__fp_inf>
    1d22:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <__fp_szero>
    1d26:	5f 3f       	cpi	r21, 0xFF	; 255
    1d28:	e4 f3       	brlt	.-8      	; 0x1d22 <__divsf3_pse+0x6c>
    1d2a:	98 3e       	cpi	r25, 0xE8	; 232
    1d2c:	d4 f3       	brlt	.-12     	; 0x1d22 <__divsf3_pse+0x6c>
    1d2e:	86 95       	lsr	r24
    1d30:	77 95       	ror	r23
    1d32:	67 95       	ror	r22
    1d34:	b7 95       	ror	r27
    1d36:	f7 95       	ror	r31
    1d38:	9f 5f       	subi	r25, 0xFF	; 255
    1d3a:	c9 f7       	brne	.-14     	; 0x1d2e <__divsf3_pse+0x78>
    1d3c:	88 0f       	add	r24, r24
    1d3e:	91 1d       	adc	r25, r1
    1d40:	96 95       	lsr	r25
    1d42:	87 95       	ror	r24
    1d44:	97 f9       	bld	r25, 7
    1d46:	08 95       	ret
    1d48:	e1 e0       	ldi	r30, 0x01	; 1
    1d4a:	66 0f       	add	r22, r22
    1d4c:	77 1f       	adc	r23, r23
    1d4e:	88 1f       	adc	r24, r24
    1d50:	bb 1f       	adc	r27, r27
    1d52:	62 17       	cp	r22, r18
    1d54:	73 07       	cpc	r23, r19
    1d56:	84 07       	cpc	r24, r20
    1d58:	ba 07       	cpc	r27, r26
    1d5a:	20 f0       	brcs	.+8      	; 0x1d64 <__divsf3_pse+0xae>
    1d5c:	62 1b       	sub	r22, r18
    1d5e:	73 0b       	sbc	r23, r19
    1d60:	84 0b       	sbc	r24, r20
    1d62:	ba 0b       	sbc	r27, r26
    1d64:	ee 1f       	adc	r30, r30
    1d66:	88 f7       	brcc	.-30     	; 0x1d4a <__divsf3_pse+0x94>
    1d68:	e0 95       	com	r30
    1d6a:	08 95       	ret

00001d6c <__fixsfsi>:
    1d6c:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fixunssfsi>
    1d70:	68 94       	set
    1d72:	b1 11       	cpse	r27, r1
    1d74:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <__fp_szero>
    1d78:	08 95       	ret

00001d7a <__fixunssfsi>:
    1d7a:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__fp_splitA>
    1d7e:	88 f0       	brcs	.+34     	; 0x1da2 <__fixunssfsi+0x28>
    1d80:	9f 57       	subi	r25, 0x7F	; 127
    1d82:	98 f0       	brcs	.+38     	; 0x1daa <__fixunssfsi+0x30>
    1d84:	b9 2f       	mov	r27, r25
    1d86:	99 27       	eor	r25, r25
    1d88:	b7 51       	subi	r27, 0x17	; 23
    1d8a:	b0 f0       	brcs	.+44     	; 0x1db8 <__fixunssfsi+0x3e>
    1d8c:	e1 f0       	breq	.+56     	; 0x1dc6 <__fixunssfsi+0x4c>
    1d8e:	66 0f       	add	r22, r22
    1d90:	77 1f       	adc	r23, r23
    1d92:	88 1f       	adc	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	1a f0       	brmi	.+6      	; 0x1d9e <__fixunssfsi+0x24>
    1d98:	ba 95       	dec	r27
    1d9a:	c9 f7       	brne	.-14     	; 0x1d8e <__fixunssfsi+0x14>
    1d9c:	14 c0       	rjmp	.+40     	; 0x1dc6 <__fixunssfsi+0x4c>
    1d9e:	b1 30       	cpi	r27, 0x01	; 1
    1da0:	91 f0       	breq	.+36     	; 0x1dc6 <__fixunssfsi+0x4c>
    1da2:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <__fp_zero>
    1da6:	b1 e0       	ldi	r27, 0x01	; 1
    1da8:	08 95       	ret
    1daa:	0c 94 97 0f 	jmp	0x1f2e	; 0x1f2e <__fp_zero>
    1dae:	67 2f       	mov	r22, r23
    1db0:	78 2f       	mov	r23, r24
    1db2:	88 27       	eor	r24, r24
    1db4:	b8 5f       	subi	r27, 0xF8	; 248
    1db6:	39 f0       	breq	.+14     	; 0x1dc6 <__fixunssfsi+0x4c>
    1db8:	b9 3f       	cpi	r27, 0xF9	; 249
    1dba:	cc f3       	brlt	.-14     	; 0x1dae <__fixunssfsi+0x34>
    1dbc:	86 95       	lsr	r24
    1dbe:	77 95       	ror	r23
    1dc0:	67 95       	ror	r22
    1dc2:	b3 95       	inc	r27
    1dc4:	d9 f7       	brne	.-10     	; 0x1dbc <__fixunssfsi+0x42>
    1dc6:	3e f4       	brtc	.+14     	; 0x1dd6 <__fixunssfsi+0x5c>
    1dc8:	90 95       	com	r25
    1dca:	80 95       	com	r24
    1dcc:	70 95       	com	r23
    1dce:	61 95       	neg	r22
    1dd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd2:	8f 4f       	sbci	r24, 0xFF	; 255
    1dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd6:	08 95       	ret

00001dd8 <__floatunsisf>:
    1dd8:	e8 94       	clt
    1dda:	09 c0       	rjmp	.+18     	; 0x1dee <__floatsisf+0x12>

00001ddc <__floatsisf>:
    1ddc:	97 fb       	bst	r25, 7
    1dde:	3e f4       	brtc	.+14     	; 0x1dee <__floatsisf+0x12>
    1de0:	90 95       	com	r25
    1de2:	80 95       	com	r24
    1de4:	70 95       	com	r23
    1de6:	61 95       	neg	r22
    1de8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dea:	8f 4f       	sbci	r24, 0xFF	; 255
    1dec:	9f 4f       	sbci	r25, 0xFF	; 255
    1dee:	99 23       	and	r25, r25
    1df0:	a9 f0       	breq	.+42     	; 0x1e1c <__floatsisf+0x40>
    1df2:	f9 2f       	mov	r31, r25
    1df4:	96 e9       	ldi	r25, 0x96	; 150
    1df6:	bb 27       	eor	r27, r27
    1df8:	93 95       	inc	r25
    1dfa:	f6 95       	lsr	r31
    1dfc:	87 95       	ror	r24
    1dfe:	77 95       	ror	r23
    1e00:	67 95       	ror	r22
    1e02:	b7 95       	ror	r27
    1e04:	f1 11       	cpse	r31, r1
    1e06:	f8 cf       	rjmp	.-16     	; 0x1df8 <__floatsisf+0x1c>
    1e08:	fa f4       	brpl	.+62     	; 0x1e48 <__floatsisf+0x6c>
    1e0a:	bb 0f       	add	r27, r27
    1e0c:	11 f4       	brne	.+4      	; 0x1e12 <__floatsisf+0x36>
    1e0e:	60 ff       	sbrs	r22, 0
    1e10:	1b c0       	rjmp	.+54     	; 0x1e48 <__floatsisf+0x6c>
    1e12:	6f 5f       	subi	r22, 0xFF	; 255
    1e14:	7f 4f       	sbci	r23, 0xFF	; 255
    1e16:	8f 4f       	sbci	r24, 0xFF	; 255
    1e18:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1a:	16 c0       	rjmp	.+44     	; 0x1e48 <__floatsisf+0x6c>
    1e1c:	88 23       	and	r24, r24
    1e1e:	11 f0       	breq	.+4      	; 0x1e24 <__floatsisf+0x48>
    1e20:	96 e9       	ldi	r25, 0x96	; 150
    1e22:	11 c0       	rjmp	.+34     	; 0x1e46 <__floatsisf+0x6a>
    1e24:	77 23       	and	r23, r23
    1e26:	21 f0       	breq	.+8      	; 0x1e30 <__floatsisf+0x54>
    1e28:	9e e8       	ldi	r25, 0x8E	; 142
    1e2a:	87 2f       	mov	r24, r23
    1e2c:	76 2f       	mov	r23, r22
    1e2e:	05 c0       	rjmp	.+10     	; 0x1e3a <__floatsisf+0x5e>
    1e30:	66 23       	and	r22, r22
    1e32:	71 f0       	breq	.+28     	; 0x1e50 <__floatsisf+0x74>
    1e34:	96 e8       	ldi	r25, 0x86	; 134
    1e36:	86 2f       	mov	r24, r22
    1e38:	70 e0       	ldi	r23, 0x00	; 0
    1e3a:	60 e0       	ldi	r22, 0x00	; 0
    1e3c:	2a f0       	brmi	.+10     	; 0x1e48 <__floatsisf+0x6c>
    1e3e:	9a 95       	dec	r25
    1e40:	66 0f       	add	r22, r22
    1e42:	77 1f       	adc	r23, r23
    1e44:	88 1f       	adc	r24, r24
    1e46:	da f7       	brpl	.-10     	; 0x1e3e <__floatsisf+0x62>
    1e48:	88 0f       	add	r24, r24
    1e4a:	96 95       	lsr	r25
    1e4c:	87 95       	ror	r24
    1e4e:	97 f9       	bld	r25, 7
    1e50:	08 95       	ret

00001e52 <__fp_cmp>:
    1e52:	99 0f       	add	r25, r25
    1e54:	00 08       	sbc	r0, r0
    1e56:	55 0f       	add	r21, r21
    1e58:	aa 0b       	sbc	r26, r26
    1e5a:	e0 e8       	ldi	r30, 0x80	; 128
    1e5c:	fe ef       	ldi	r31, 0xFE	; 254
    1e5e:	16 16       	cp	r1, r22
    1e60:	17 06       	cpc	r1, r23
    1e62:	e8 07       	cpc	r30, r24
    1e64:	f9 07       	cpc	r31, r25
    1e66:	c0 f0       	brcs	.+48     	; 0x1e98 <__fp_cmp+0x46>
    1e68:	12 16       	cp	r1, r18
    1e6a:	13 06       	cpc	r1, r19
    1e6c:	e4 07       	cpc	r30, r20
    1e6e:	f5 07       	cpc	r31, r21
    1e70:	98 f0       	brcs	.+38     	; 0x1e98 <__fp_cmp+0x46>
    1e72:	62 1b       	sub	r22, r18
    1e74:	73 0b       	sbc	r23, r19
    1e76:	84 0b       	sbc	r24, r20
    1e78:	95 0b       	sbc	r25, r21
    1e7a:	39 f4       	brne	.+14     	; 0x1e8a <__fp_cmp+0x38>
    1e7c:	0a 26       	eor	r0, r26
    1e7e:	61 f0       	breq	.+24     	; 0x1e98 <__fp_cmp+0x46>
    1e80:	23 2b       	or	r18, r19
    1e82:	24 2b       	or	r18, r20
    1e84:	25 2b       	or	r18, r21
    1e86:	21 f4       	brne	.+8      	; 0x1e90 <__fp_cmp+0x3e>
    1e88:	08 95       	ret
    1e8a:	0a 26       	eor	r0, r26
    1e8c:	09 f4       	brne	.+2      	; 0x1e90 <__fp_cmp+0x3e>
    1e8e:	a1 40       	sbci	r26, 0x01	; 1
    1e90:	a6 95       	lsr	r26
    1e92:	8f ef       	ldi	r24, 0xFF	; 255
    1e94:	81 1d       	adc	r24, r1
    1e96:	81 1d       	adc	r24, r1
    1e98:	08 95       	ret

00001e9a <__fp_inf>:
    1e9a:	97 f9       	bld	r25, 7
    1e9c:	9f 67       	ori	r25, 0x7F	; 127
    1e9e:	80 e8       	ldi	r24, 0x80	; 128
    1ea0:	70 e0       	ldi	r23, 0x00	; 0
    1ea2:	60 e0       	ldi	r22, 0x00	; 0
    1ea4:	08 95       	ret

00001ea6 <__fp_nan>:
    1ea6:	9f ef       	ldi	r25, 0xFF	; 255
    1ea8:	80 ec       	ldi	r24, 0xC0	; 192
    1eaa:	08 95       	ret

00001eac <__fp_pscA>:
    1eac:	00 24       	eor	r0, r0
    1eae:	0a 94       	dec	r0
    1eb0:	16 16       	cp	r1, r22
    1eb2:	17 06       	cpc	r1, r23
    1eb4:	18 06       	cpc	r1, r24
    1eb6:	09 06       	cpc	r0, r25
    1eb8:	08 95       	ret

00001eba <__fp_pscB>:
    1eba:	00 24       	eor	r0, r0
    1ebc:	0a 94       	dec	r0
    1ebe:	12 16       	cp	r1, r18
    1ec0:	13 06       	cpc	r1, r19
    1ec2:	14 06       	cpc	r1, r20
    1ec4:	05 06       	cpc	r0, r21
    1ec6:	08 95       	ret

00001ec8 <__fp_round>:
    1ec8:	09 2e       	mov	r0, r25
    1eca:	03 94       	inc	r0
    1ecc:	00 0c       	add	r0, r0
    1ece:	11 f4       	brne	.+4      	; 0x1ed4 <__fp_round+0xc>
    1ed0:	88 23       	and	r24, r24
    1ed2:	52 f0       	brmi	.+20     	; 0x1ee8 <__fp_round+0x20>
    1ed4:	bb 0f       	add	r27, r27
    1ed6:	40 f4       	brcc	.+16     	; 0x1ee8 <__fp_round+0x20>
    1ed8:	bf 2b       	or	r27, r31
    1eda:	11 f4       	brne	.+4      	; 0x1ee0 <__fp_round+0x18>
    1edc:	60 ff       	sbrs	r22, 0
    1ede:	04 c0       	rjmp	.+8      	; 0x1ee8 <__fp_round+0x20>
    1ee0:	6f 5f       	subi	r22, 0xFF	; 255
    1ee2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ee6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee8:	08 95       	ret

00001eea <__fp_split3>:
    1eea:	57 fd       	sbrc	r21, 7
    1eec:	90 58       	subi	r25, 0x80	; 128
    1eee:	44 0f       	add	r20, r20
    1ef0:	55 1f       	adc	r21, r21
    1ef2:	59 f0       	breq	.+22     	; 0x1f0a <__fp_splitA+0x10>
    1ef4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ef6:	71 f0       	breq	.+28     	; 0x1f14 <__fp_splitA+0x1a>
    1ef8:	47 95       	ror	r20

00001efa <__fp_splitA>:
    1efa:	88 0f       	add	r24, r24
    1efc:	97 fb       	bst	r25, 7
    1efe:	99 1f       	adc	r25, r25
    1f00:	61 f0       	breq	.+24     	; 0x1f1a <__fp_splitA+0x20>
    1f02:	9f 3f       	cpi	r25, 0xFF	; 255
    1f04:	79 f0       	breq	.+30     	; 0x1f24 <__fp_splitA+0x2a>
    1f06:	87 95       	ror	r24
    1f08:	08 95       	ret
    1f0a:	12 16       	cp	r1, r18
    1f0c:	13 06       	cpc	r1, r19
    1f0e:	14 06       	cpc	r1, r20
    1f10:	55 1f       	adc	r21, r21
    1f12:	f2 cf       	rjmp	.-28     	; 0x1ef8 <__fp_split3+0xe>
    1f14:	46 95       	lsr	r20
    1f16:	f1 df       	rcall	.-30     	; 0x1efa <__fp_splitA>
    1f18:	08 c0       	rjmp	.+16     	; 0x1f2a <__fp_splitA+0x30>
    1f1a:	16 16       	cp	r1, r22
    1f1c:	17 06       	cpc	r1, r23
    1f1e:	18 06       	cpc	r1, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	f1 cf       	rjmp	.-30     	; 0x1f06 <__fp_splitA+0xc>
    1f24:	86 95       	lsr	r24
    1f26:	71 05       	cpc	r23, r1
    1f28:	61 05       	cpc	r22, r1
    1f2a:	08 94       	sec
    1f2c:	08 95       	ret

00001f2e <__fp_zero>:
    1f2e:	e8 94       	clt

00001f30 <__fp_szero>:
    1f30:	bb 27       	eor	r27, r27
    1f32:	66 27       	eor	r22, r22
    1f34:	77 27       	eor	r23, r23
    1f36:	cb 01       	movw	r24, r22
    1f38:	97 f9       	bld	r25, 7
    1f3a:	08 95       	ret

00001f3c <__gesf2>:
    1f3c:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <__fp_cmp>
    1f40:	08 f4       	brcc	.+2      	; 0x1f44 <__gesf2+0x8>
    1f42:	8f ef       	ldi	r24, 0xFF	; 255
    1f44:	08 95       	ret
    1f46:	16 f0       	brts	.+4      	; 0x1f4c <__gesf2+0x10>
    1f48:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <__fp_mpack>
    1f4c:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__fp_nan>
    1f50:	68 94       	set
    1f52:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <__fp_inf>

00001f56 <log>:
    1f56:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__fp_splitA>
    1f5a:	a8 f3       	brcs	.-22     	; 0x1f46 <__gesf2+0xa>
    1f5c:	99 23       	and	r25, r25
    1f5e:	c1 f3       	breq	.-16     	; 0x1f50 <__gesf2+0x14>
    1f60:	ae f3       	brts	.-22     	; 0x1f4c <__gesf2+0x10>
    1f62:	df 93       	push	r29
    1f64:	cf 93       	push	r28
    1f66:	1f 93       	push	r17
    1f68:	0f 93       	push	r16
    1f6a:	ff 92       	push	r15
    1f6c:	c9 2f       	mov	r28, r25
    1f6e:	dd 27       	eor	r29, r29
    1f70:	88 23       	and	r24, r24
    1f72:	2a f0       	brmi	.+10     	; 0x1f7e <log+0x28>
    1f74:	21 97       	sbiw	r28, 0x01	; 1
    1f76:	66 0f       	add	r22, r22
    1f78:	77 1f       	adc	r23, r23
    1f7a:	88 1f       	adc	r24, r24
    1f7c:	da f7       	brpl	.-10     	; 0x1f74 <log+0x1e>
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	40 e8       	ldi	r20, 0x80	; 128
    1f84:	5f eb       	ldi	r21, 0xBF	; 191
    1f86:	9f e3       	ldi	r25, 0x3F	; 63
    1f88:	88 39       	cpi	r24, 0x98	; 152
    1f8a:	20 f0       	brcs	.+8      	; 0x1f94 <log+0x3e>
    1f8c:	80 3e       	cpi	r24, 0xE0	; 224
    1f8e:	38 f0       	brcs	.+14     	; 0x1f9e <log+0x48>
    1f90:	21 96       	adiw	r28, 0x01	; 1
    1f92:	8f 77       	andi	r24, 0x7F	; 127
    1f94:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__addsf3>
    1f98:	e8 e6       	ldi	r30, 0x68	; 104
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	04 c0       	rjmp	.+8      	; 0x1fa6 <log+0x50>
    1f9e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__addsf3>
    1fa2:	e5 e9       	ldi	r30, 0x95	; 149
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fp_powser>
    1faa:	8b 01       	movw	r16, r22
    1fac:	be 01       	movw	r22, r28
    1fae:	ec 01       	movw	r28, r24
    1fb0:	fb 2e       	mov	r15, r27
    1fb2:	6f 57       	subi	r22, 0x7F	; 127
    1fb4:	71 09       	sbc	r23, r1
    1fb6:	75 95       	asr	r23
    1fb8:	77 1f       	adc	r23, r23
    1fba:	88 0b       	sbc	r24, r24
    1fbc:	99 0b       	sbc	r25, r25
    1fbe:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__floatsisf>
    1fc2:	28 e1       	ldi	r18, 0x18	; 24
    1fc4:	32 e7       	ldi	r19, 0x72	; 114
    1fc6:	41 e3       	ldi	r20, 0x31	; 49
    1fc8:	5f e3       	ldi	r21, 0x3F	; 63
    1fca:	0e 94 06 10 	call	0x200c	; 0x200c <__mulsf3x>
    1fce:	af 2d       	mov	r26, r15
    1fd0:	98 01       	movw	r18, r16
    1fd2:	ae 01       	movw	r20, r28
    1fd4:	ff 90       	pop	r15
    1fd6:	0f 91       	pop	r16
    1fd8:	1f 91       	pop	r17
    1fda:	cf 91       	pop	r28
    1fdc:	df 91       	pop	r29
    1fde:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__addsf3x>
    1fe2:	0c 94 64 0f 	jmp	0x1ec8	; 0x1ec8 <__fp_round>

00001fe6 <__mulsf3>:
    1fe6:	0e 94 06 10 	call	0x200c	; 0x200c <__mulsf3x>
    1fea:	0c 94 64 0f 	jmp	0x1ec8	; 0x1ec8 <__fp_round>
    1fee:	0e 94 56 0f 	call	0x1eac	; 0x1eac <__fp_pscA>
    1ff2:	38 f0       	brcs	.+14     	; 0x2002 <__mulsf3+0x1c>
    1ff4:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__fp_pscB>
    1ff8:	20 f0       	brcs	.+8      	; 0x2002 <__mulsf3+0x1c>
    1ffa:	95 23       	and	r25, r21
    1ffc:	11 f0       	breq	.+4      	; 0x2002 <__mulsf3+0x1c>
    1ffe:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <__fp_inf>
    2002:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__fp_nan>
    2006:	11 24       	eor	r1, r1
    2008:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <__fp_szero>

0000200c <__mulsf3x>:
    200c:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__fp_split3>
    2010:	70 f3       	brcs	.-36     	; 0x1fee <__mulsf3+0x8>

00002012 <__mulsf3_pse>:
    2012:	95 9f       	mul	r25, r21
    2014:	c1 f3       	breq	.-16     	; 0x2006 <__mulsf3+0x20>
    2016:	95 0f       	add	r25, r21
    2018:	50 e0       	ldi	r21, 0x00	; 0
    201a:	55 1f       	adc	r21, r21
    201c:	62 9f       	mul	r22, r18
    201e:	f0 01       	movw	r30, r0
    2020:	72 9f       	mul	r23, r18
    2022:	bb 27       	eor	r27, r27
    2024:	f0 0d       	add	r31, r0
    2026:	b1 1d       	adc	r27, r1
    2028:	63 9f       	mul	r22, r19
    202a:	aa 27       	eor	r26, r26
    202c:	f0 0d       	add	r31, r0
    202e:	b1 1d       	adc	r27, r1
    2030:	aa 1f       	adc	r26, r26
    2032:	64 9f       	mul	r22, r20
    2034:	66 27       	eor	r22, r22
    2036:	b0 0d       	add	r27, r0
    2038:	a1 1d       	adc	r26, r1
    203a:	66 1f       	adc	r22, r22
    203c:	82 9f       	mul	r24, r18
    203e:	22 27       	eor	r18, r18
    2040:	b0 0d       	add	r27, r0
    2042:	a1 1d       	adc	r26, r1
    2044:	62 1f       	adc	r22, r18
    2046:	73 9f       	mul	r23, r19
    2048:	b0 0d       	add	r27, r0
    204a:	a1 1d       	adc	r26, r1
    204c:	62 1f       	adc	r22, r18
    204e:	83 9f       	mul	r24, r19
    2050:	a0 0d       	add	r26, r0
    2052:	61 1d       	adc	r22, r1
    2054:	22 1f       	adc	r18, r18
    2056:	74 9f       	mul	r23, r20
    2058:	33 27       	eor	r19, r19
    205a:	a0 0d       	add	r26, r0
    205c:	61 1d       	adc	r22, r1
    205e:	23 1f       	adc	r18, r19
    2060:	84 9f       	mul	r24, r20
    2062:	60 0d       	add	r22, r0
    2064:	21 1d       	adc	r18, r1
    2066:	82 2f       	mov	r24, r18
    2068:	76 2f       	mov	r23, r22
    206a:	6a 2f       	mov	r22, r26
    206c:	11 24       	eor	r1, r1
    206e:	9f 57       	subi	r25, 0x7F	; 127
    2070:	50 40       	sbci	r21, 0x00	; 0
    2072:	9a f0       	brmi	.+38     	; 0x209a <__mulsf3_pse+0x88>
    2074:	f1 f0       	breq	.+60     	; 0x20b2 <__mulsf3_pse+0xa0>
    2076:	88 23       	and	r24, r24
    2078:	4a f0       	brmi	.+18     	; 0x208c <__mulsf3_pse+0x7a>
    207a:	ee 0f       	add	r30, r30
    207c:	ff 1f       	adc	r31, r31
    207e:	bb 1f       	adc	r27, r27
    2080:	66 1f       	adc	r22, r22
    2082:	77 1f       	adc	r23, r23
    2084:	88 1f       	adc	r24, r24
    2086:	91 50       	subi	r25, 0x01	; 1
    2088:	50 40       	sbci	r21, 0x00	; 0
    208a:	a9 f7       	brne	.-22     	; 0x2076 <__mulsf3_pse+0x64>
    208c:	9e 3f       	cpi	r25, 0xFE	; 254
    208e:	51 05       	cpc	r21, r1
    2090:	80 f0       	brcs	.+32     	; 0x20b2 <__mulsf3_pse+0xa0>
    2092:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <__fp_inf>
    2096:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <__fp_szero>
    209a:	5f 3f       	cpi	r21, 0xFF	; 255
    209c:	e4 f3       	brlt	.-8      	; 0x2096 <__mulsf3_pse+0x84>
    209e:	98 3e       	cpi	r25, 0xE8	; 232
    20a0:	d4 f3       	brlt	.-12     	; 0x2096 <__mulsf3_pse+0x84>
    20a2:	86 95       	lsr	r24
    20a4:	77 95       	ror	r23
    20a6:	67 95       	ror	r22
    20a8:	b7 95       	ror	r27
    20aa:	f7 95       	ror	r31
    20ac:	e7 95       	ror	r30
    20ae:	9f 5f       	subi	r25, 0xFF	; 255
    20b0:	c1 f7       	brne	.-16     	; 0x20a2 <__mulsf3_pse+0x90>
    20b2:	fe 2b       	or	r31, r30
    20b4:	88 0f       	add	r24, r24
    20b6:	91 1d       	adc	r25, r1
    20b8:	96 95       	lsr	r25
    20ba:	87 95       	ror	r24
    20bc:	97 f9       	bld	r25, 7
    20be:	08 95       	ret

000020c0 <__fp_mpack>:
    20c0:	9f 3f       	cpi	r25, 0xFF	; 255
    20c2:	31 f0       	breq	.+12     	; 0x20d0 <__fp_mpack_finite+0xc>

000020c4 <__fp_mpack_finite>:
    20c4:	91 50       	subi	r25, 0x01	; 1
    20c6:	20 f4       	brcc	.+8      	; 0x20d0 <__fp_mpack_finite+0xc>
    20c8:	87 95       	ror	r24
    20ca:	77 95       	ror	r23
    20cc:	67 95       	ror	r22
    20ce:	b7 95       	ror	r27
    20d0:	88 0f       	add	r24, r24
    20d2:	91 1d       	adc	r25, r1
    20d4:	96 95       	lsr	r25
    20d6:	87 95       	ror	r24
    20d8:	97 f9       	bld	r25, 7
    20da:	08 95       	ret

000020dc <__fp_powser>:
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	1f 93       	push	r17
    20e2:	0f 93       	push	r16
    20e4:	ff 92       	push	r15
    20e6:	ef 92       	push	r14
    20e8:	df 92       	push	r13
    20ea:	7b 01       	movw	r14, r22
    20ec:	8c 01       	movw	r16, r24
    20ee:	68 94       	set
    20f0:	06 c0       	rjmp	.+12     	; 0x20fe <__fp_powser+0x22>
    20f2:	da 2e       	mov	r13, r26
    20f4:	ef 01       	movw	r28, r30
    20f6:	0e 94 06 10 	call	0x200c	; 0x200c <__mulsf3x>
    20fa:	fe 01       	movw	r30, r28
    20fc:	e8 94       	clt
    20fe:	a5 91       	lpm	r26, Z+
    2100:	25 91       	lpm	r18, Z+
    2102:	35 91       	lpm	r19, Z+
    2104:	45 91       	lpm	r20, Z+
    2106:	55 91       	lpm	r21, Z+
    2108:	a6 f3       	brts	.-24     	; 0x20f2 <__fp_powser+0x16>
    210a:	ef 01       	movw	r28, r30
    210c:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__addsf3x>
    2110:	fe 01       	movw	r30, r28
    2112:	97 01       	movw	r18, r14
    2114:	a8 01       	movw	r20, r16
    2116:	da 94       	dec	r13
    2118:	69 f7       	brne	.-38     	; 0x20f4 <__fp_powser+0x18>
    211a:	df 90       	pop	r13
    211c:	ef 90       	pop	r14
    211e:	ff 90       	pop	r15
    2120:	0f 91       	pop	r16
    2122:	1f 91       	pop	r17
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	08 95       	ret

0000212a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    212a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    212c:	91 8d       	ldd	r25, Z+25	; 0x19
    212e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2130:	89 2f       	mov	r24, r25
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	80 5c       	subi	r24, 0xC0	; 192
    2136:	9f 4f       	sbci	r25, 0xFF	; 255
    2138:	82 1b       	sub	r24, r18
    213a:	91 09       	sbc	r25, r1
}
    213c:	8f 73       	andi	r24, 0x3F	; 63
    213e:	99 27       	eor	r25, r25
    2140:	08 95       	ret

00002142 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2142:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2144:	91 8d       	ldd	r25, Z+25	; 0x19
    2146:	82 8d       	ldd	r24, Z+26	; 0x1a
    2148:	98 17       	cp	r25, r24
    214a:	31 f0       	breq	.+12     	; 0x2158 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    214c:	82 8d       	ldd	r24, Z+26	; 0x1a
    214e:	e8 0f       	add	r30, r24
    2150:	f1 1d       	adc	r31, r1
    2152:	85 8d       	ldd	r24, Z+29	; 0x1d
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2158:	8f ef       	ldi	r24, 0xFF	; 255
    215a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    215c:	08 95       	ret

0000215e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    215e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2160:	91 8d       	ldd	r25, Z+25	; 0x19
    2162:	82 8d       	ldd	r24, Z+26	; 0x1a
    2164:	98 17       	cp	r25, r24
    2166:	61 f0       	breq	.+24     	; 0x2180 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2168:	82 8d       	ldd	r24, Z+26	; 0x1a
    216a:	df 01       	movw	r26, r30
    216c:	a8 0f       	add	r26, r24
    216e:	b1 1d       	adc	r27, r1
    2170:	5d 96       	adiw	r26, 0x1d	; 29
    2172:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2174:	92 8d       	ldd	r25, Z+26	; 0x1a
    2176:	9f 5f       	subi	r25, 0xFF	; 255
    2178:	9f 73       	andi	r25, 0x3F	; 63
    217a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2180:	8f ef       	ldi	r24, 0xFF	; 255
    2182:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2184:	08 95       	ret

00002186 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2186:	80 e3       	ldi	r24, 0x30	; 48
    2188:	92 e1       	ldi	r25, 0x12	; 18
    218a:	89 2b       	or	r24, r25
    218c:	49 f0       	breq	.+18     	; 0x21a0 <_Z14serialEventRunv+0x1a>
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	89 2b       	or	r24, r25
    2194:	29 f0       	breq	.+10     	; 0x21a0 <_Z14serialEventRunv+0x1a>
    2196:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z17Serial0_availablev>
    219a:	81 11       	cpse	r24, r1
    219c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    21a0:	08 95       	ret

000021a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    21a2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    21a4:	84 8d       	ldd	r24, Z+28	; 0x1c
    21a6:	df 01       	movw	r26, r30
    21a8:	a8 0f       	add	r26, r24
    21aa:	b1 1d       	adc	r27, r1
    21ac:	a3 5a       	subi	r26, 0xA3	; 163
    21ae:	bf 4f       	sbci	r27, 0xFF	; 255
    21b0:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    21b2:	24 8d       	ldd	r18, Z+28	; 0x1c
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	2f 5f       	subi	r18, 0xFF	; 255
    21b8:	3f 4f       	sbci	r19, 0xFF	; 255
    21ba:	2f 73       	andi	r18, 0x3F	; 63
    21bc:	30 78       	andi	r19, 0x80	; 128
    21be:	33 23       	and	r19, r19
    21c0:	34 f4       	brge	.+12     	; 0x21ce <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    21c2:	21 50       	subi	r18, 0x01	; 1
    21c4:	31 09       	sbc	r19, r1
    21c6:	20 6c       	ori	r18, 0xC0	; 192
    21c8:	3f 6f       	ori	r19, 0xFF	; 255
    21ca:	2f 5f       	subi	r18, 0xFF	; 255
    21cc:	3f 4f       	sbci	r19, 0xFF	; 255
    21ce:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
    21d0:	a6 89       	ldd	r26, Z+22	; 0x16
    21d2:	b7 89       	ldd	r27, Z+23	; 0x17
    21d4:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    21d6:	a0 89       	ldd	r26, Z+16	; 0x10
    21d8:	b1 89       	ldd	r27, Z+17	; 0x11
    21da:	8c 91       	ld	r24, X
    21dc:	80 64       	ori	r24, 0x40	; 64
    21de:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    21e0:	93 8d       	ldd	r25, Z+27	; 0x1b
    21e2:	84 8d       	ldd	r24, Z+28	; 0x1c
    21e4:	98 13       	cpse	r25, r24
    21e6:	06 c0       	rjmp	.+12     	; 0x21f4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    21e8:	02 88       	ldd	r0, Z+18	; 0x12
    21ea:	f3 89       	ldd	r31, Z+19	; 0x13
    21ec:	e0 2d       	mov	r30, r0
    21ee:	80 81       	ld	r24, Z
    21f0:	8f 7d       	andi	r24, 0xDF	; 223
    21f2:	80 83       	st	Z, r24
    21f4:	08 95       	ret

000021f6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    21f6:	cf 93       	push	r28
    21f8:	df 93       	push	r29
    21fa:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    21fc:	88 8d       	ldd	r24, Y+24	; 0x18
    21fe:	88 23       	and	r24, r24
    2200:	d9 f0       	breq	.+54     	; 0x2238 <_ZN14HardwareSerial5flushEv+0x42>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2202:	ea 89       	ldd	r30, Y+18	; 0x12
    2204:	fb 89       	ldd	r31, Y+19	; 0x13
    2206:	80 81       	ld	r24, Z
    2208:	85 fd       	sbrc	r24, 5
    220a:	05 c0       	rjmp	.+10     	; 0x2216 <_ZN14HardwareSerial5flushEv+0x20>
    220c:	a8 89       	ldd	r26, Y+16	; 0x10
    220e:	b9 89       	ldd	r27, Y+17	; 0x11
    2210:	8c 91       	ld	r24, X
    2212:	86 fd       	sbrc	r24, 6
    2214:	11 c0       	rjmp	.+34     	; 0x2238 <_ZN14HardwareSerial5flushEv+0x42>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	07 fc       	sbrc	r0, 7
    221a:	f5 cf       	rjmp	.-22     	; 0x2206 <_ZN14HardwareSerial5flushEv+0x10>
    221c:	80 81       	ld	r24, Z
    221e:	85 ff       	sbrs	r24, 5
    2220:	f2 cf       	rjmp	.-28     	; 0x2206 <_ZN14HardwareSerial5flushEv+0x10>
    2222:	04 c0       	rjmp	.+8      	; 0x222c <_ZN14HardwareSerial5flushEv+0x36>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
    2224:	ce 01       	movw	r24, r28
    2226:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    222a:	eb cf       	rjmp	.-42     	; 0x2202 <_ZN14HardwareSerial5flushEv+0xc>
  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    222c:	a8 89       	ldd	r26, Y+16	; 0x10
    222e:	b9 89       	ldd	r27, Y+17	; 0x11
    2230:	8c 91       	ld	r24, X
    2232:	85 ff       	sbrs	r24, 5
    2234:	e8 cf       	rjmp	.-48     	; 0x2206 <_ZN14HardwareSerial5flushEv+0x10>
    2236:	f6 cf       	rjmp	.-20     	; 0x2224 <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	08 95       	ret

0000223e <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    223e:	0f 93       	push	r16
    2240:	1f 93       	push	r17
    2242:	cf 93       	push	r28
    2244:	df 93       	push	r29
    2246:	ec 01       	movw	r28, r24
  _written = true;
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    224c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    224e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2250:	98 13       	cpse	r25, r24
    2252:	23 c0       	rjmp	.+70     	; 0x229a <_ZN14HardwareSerial5writeEh+0x5c>
    2254:	e8 89       	ldd	r30, Y+16	; 0x10
    2256:	f9 89       	ldd	r31, Y+17	; 0x11
    2258:	80 81       	ld	r24, Z
    225a:	85 fd       	sbrc	r24, 5
    225c:	2f c0       	rjmp	.+94     	; 0x22bc <_ZN14HardwareSerial5writeEh+0x7e>
    225e:	1d c0       	rjmp	.+58     	; 0x229a <_ZN14HardwareSerial5writeEh+0x5c>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2260:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2262:	19 13       	cpse	r17, r25
    2264:	0c c0       	rjmp	.+24     	; 0x227e <_ZN14HardwareSerial5writeEh+0x40>
    if (bit_is_clear(SREG, SREG_I)) {
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	07 fc       	sbrc	r0, 7
    226a:	fa cf       	rjmp	.-12     	; 0x2260 <_ZN14HardwareSerial5writeEh+0x22>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    226c:	e8 89       	ldd	r30, Y+16	; 0x10
    226e:	f9 89       	ldd	r31, Y+17	; 0x11
    2270:	80 81       	ld	r24, Z
    2272:	85 ff       	sbrs	r24, 5
    2274:	f5 cf       	rjmp	.-22     	; 0x2260 <_ZN14HardwareSerial5writeEh+0x22>
	_tx_udr_empty_irq();
    2276:	ce 01       	movw	r24, r28
    2278:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    227c:	f1 cf       	rjmp	.-30     	; 0x2260 <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    227e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2280:	fe 01       	movw	r30, r28
    2282:	e8 0f       	add	r30, r24
    2284:	f1 1d       	adc	r31, r1
    2286:	e3 5a       	subi	r30, 0xA3	; 163
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	00 83       	st	Z, r16
  _tx_buffer_head = i;
    228c:	1b 8f       	std	Y+27, r17	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    228e:	ea 89       	ldd	r30, Y+18	; 0x12
    2290:	fb 89       	ldd	r31, Y+19	; 0x13
    2292:	80 81       	ld	r24, Z
    2294:	80 62       	ori	r24, 0x20	; 32
    2296:	80 83       	st	Z, r24
  
  return 1;
    2298:	19 c0       	rjmp	.+50     	; 0x22cc <_ZN14HardwareSerial5writeEh+0x8e>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    229a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	2f 5f       	subi	r18, 0xFF	; 255
    22a0:	3f 4f       	sbci	r19, 0xFF	; 255
    22a2:	2f 73       	andi	r18, 0x3F	; 63
    22a4:	30 78       	andi	r19, 0x80	; 128
    22a6:	33 23       	and	r19, r19
    22a8:	34 f4       	brge	.+12     	; 0x22b6 <_ZN14HardwareSerial5writeEh+0x78>
    22aa:	21 50       	subi	r18, 0x01	; 1
    22ac:	31 09       	sbc	r19, r1
    22ae:	20 6c       	ori	r18, 0xC0	; 192
    22b0:	3f 6f       	ori	r19, 0xFF	; 255
    22b2:	2f 5f       	subi	r18, 0xFF	; 255
    22b4:	3f 4f       	sbci	r19, 0xFF	; 255
    22b6:	06 2f       	mov	r16, r22
    22b8:	12 2f       	mov	r17, r18
    22ba:	d2 cf       	rjmp	.-92     	; 0x2260 <_ZN14HardwareSerial5writeEh+0x22>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    22bc:	ee 89       	ldd	r30, Y+22	; 0x16
    22be:	ff 89       	ldd	r31, Y+23	; 0x17
    22c0:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    22c2:	e8 89       	ldd	r30, Y+16	; 0x10
    22c4:	f9 89       	ldd	r31, Y+17	; 0x11
    22c6:	80 81       	ld	r24, Z
    22c8:	80 64       	ori	r24, 0x40	; 64
    22ca:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	df 91       	pop	r29
    22d2:	cf 91       	pop	r28
    22d4:	1f 91       	pop	r17
    22d6:	0f 91       	pop	r16
    22d8:	08 95       	ret

000022da <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    22da:	cf 92       	push	r12
    22dc:	df 92       	push	r13
    22de:	ef 92       	push	r14
    22e0:	ff 92       	push	r15
    22e2:	1f 93       	push	r17
    22e4:	cf 93       	push	r28
    22e6:	df 93       	push	r29
    22e8:	ec 01       	movw	r28, r24
    22ea:	6a 01       	movw	r12, r20
    22ec:	7b 01       	movw	r14, r22
    22ee:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    22f0:	e8 89       	ldd	r30, Y+16	; 0x10
    22f2:	f9 89       	ldd	r31, Y+17	; 0x11
    22f4:	82 e0       	ldi	r24, 0x02	; 2
    22f6:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    22f8:	41 15       	cp	r20, r1
    22fa:	51 4e       	sbci	r21, 0xE1	; 225
    22fc:	61 05       	cpc	r22, r1
    22fe:	71 05       	cpc	r23, r1
    2300:	b1 f0       	breq	.+44     	; 0x232e <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2302:	60 e0       	ldi	r22, 0x00	; 0
    2304:	79 e0       	ldi	r23, 0x09	; 9
    2306:	8d e3       	ldi	r24, 0x3D	; 61
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	a7 01       	movw	r20, r14
    230c:	96 01       	movw	r18, r12
    230e:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <__udivmodsi4>
    2312:	da 01       	movw	r26, r20
    2314:	c9 01       	movw	r24, r18
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	a1 09       	sbc	r26, r1
    231a:	b1 09       	sbc	r27, r1
    231c:	b6 95       	lsr	r27
    231e:	a7 95       	ror	r26
    2320:	97 95       	ror	r25
    2322:	87 95       	ror	r24
    2324:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2326:	21 15       	cp	r18, r1
    2328:	80 e1       	ldi	r24, 0x10	; 16
    232a:	38 07       	cpc	r19, r24
    232c:	a8 f0       	brcs	.+42     	; 0x2358 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    232e:	e8 89       	ldd	r30, Y+16	; 0x10
    2330:	f9 89       	ldd	r31, Y+17	; 0x11
    2332:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2334:	60 e8       	ldi	r22, 0x80	; 128
    2336:	74 e8       	ldi	r23, 0x84	; 132
    2338:	8e e1       	ldi	r24, 0x1E	; 30
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	a7 01       	movw	r20, r14
    233e:	96 01       	movw	r18, r12
    2340:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <__udivmodsi4>
    2344:	da 01       	movw	r26, r20
    2346:	c9 01       	movw	r24, r18
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	a1 09       	sbc	r26, r1
    234c:	b1 09       	sbc	r27, r1
    234e:	b6 95       	lsr	r27
    2350:	a7 95       	ror	r26
    2352:	97 95       	ror	r25
    2354:	87 95       	ror	r24
    2356:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2358:	ec 85       	ldd	r30, Y+12	; 0x0c
    235a:	fd 85       	ldd	r31, Y+13	; 0x0d
    235c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    235e:	ee 85       	ldd	r30, Y+14	; 0x0e
    2360:	ff 85       	ldd	r31, Y+15	; 0x0f
    2362:	20 83       	st	Z, r18

  _written = false;
    2364:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2366:	ec 89       	ldd	r30, Y+20	; 0x14
    2368:	fd 89       	ldd	r31, Y+21	; 0x15
    236a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    236c:	ea 89       	ldd	r30, Y+18	; 0x12
    236e:	fb 89       	ldd	r31, Y+19	; 0x13
    2370:	80 81       	ld	r24, Z
    2372:	80 61       	ori	r24, 0x10	; 16
    2374:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2376:	ea 89       	ldd	r30, Y+18	; 0x12
    2378:	fb 89       	ldd	r31, Y+19	; 0x13
    237a:	80 81       	ld	r24, Z
    237c:	88 60       	ori	r24, 0x08	; 8
    237e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2380:	ea 89       	ldd	r30, Y+18	; 0x12
    2382:	fb 89       	ldd	r31, Y+19	; 0x13
    2384:	80 81       	ld	r24, Z
    2386:	80 68       	ori	r24, 0x80	; 128
    2388:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    238a:	ea 89       	ldd	r30, Y+18	; 0x12
    238c:	fb 89       	ldd	r31, Y+19	; 0x13
    238e:	80 81       	ld	r24, Z
    2390:	8f 7d       	andi	r24, 0xDF	; 223
    2392:	80 83       	st	Z, r24
}
    2394:	df 91       	pop	r29
    2396:	cf 91       	pop	r28
    2398:	1f 91       	pop	r17
    239a:	ff 90       	pop	r15
    239c:	ef 90       	pop	r14
    239e:	df 90       	pop	r13
    23a0:	cf 90       	pop	r12
    23a2:	08 95       	ret

000023a4 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    23a4:	1f 92       	push	r1
    23a6:	0f 92       	push	r0
    23a8:	0f b6       	in	r0, 0x3f	; 63
    23aa:	0f 92       	push	r0
    23ac:	11 24       	eor	r1, r1
    23ae:	2f 93       	push	r18
    23b0:	8f 93       	push	r24
    23b2:	9f 93       	push	r25
    23b4:	af 93       	push	r26
    23b6:	bf 93       	push	r27
    23b8:	ef 93       	push	r30
    23ba:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    23bc:	e0 91 70 03 	lds	r30, 0x0370	; 0x800370 <Serial+0x10>
    23c0:	f0 91 71 03 	lds	r31, 0x0371	; 0x800371 <Serial+0x11>
    23c4:	80 81       	ld	r24, Z
    23c6:	82 fd       	sbrc	r24, 2
    23c8:	14 c0       	rjmp	.+40     	; 0x23f2 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    23ca:	e0 e6       	ldi	r30, 0x60	; 96
    23cc:	f3 e0       	ldi	r31, 0x03	; 3
    23ce:	a6 89       	ldd	r26, Z+22	; 0x16
    23d0:	b7 89       	ldd	r27, Z+23	; 0x17
    23d2:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    23d4:	81 8d       	ldd	r24, Z+25	; 0x19
    23d6:	8f 5f       	subi	r24, 0xFF	; 255
    23d8:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    23da:	92 8d       	ldd	r25, Z+26	; 0x1a
    23dc:	89 17       	cp	r24, r25
    23de:	71 f0       	breq	.+28     	; 0x23fc <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
    23e0:	df 01       	movw	r26, r30
    23e2:	e1 8d       	ldd	r30, Z+25	; 0x19
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	e0 5a       	subi	r30, 0xA0	; 160
    23e8:	fc 4f       	sbci	r31, 0xFC	; 252
    23ea:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    23ec:	59 96       	adiw	r26, 0x19	; 25
    23ee:	8c 93       	st	X, r24
    23f0:	05 c0       	rjmp	.+10     	; 0x23fc <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    23f2:	e0 91 76 03 	lds	r30, 0x0376	; 0x800376 <Serial+0x16>
    23f6:	f0 91 77 03 	lds	r31, 0x0377	; 0x800377 <Serial+0x17>
    23fa:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    23fc:	ff 91       	pop	r31
    23fe:	ef 91       	pop	r30
    2400:	bf 91       	pop	r27
    2402:	af 91       	pop	r26
    2404:	9f 91       	pop	r25
    2406:	8f 91       	pop	r24
    2408:	2f 91       	pop	r18
    240a:	0f 90       	pop	r0
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	0f 90       	pop	r0
    2410:	1f 90       	pop	r1
    2412:	18 95       	reti

00002414 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2414:	1f 92       	push	r1
    2416:	0f 92       	push	r0
    2418:	0f b6       	in	r0, 0x3f	; 63
    241a:	0f 92       	push	r0
    241c:	11 24       	eor	r1, r1
    241e:	2f 93       	push	r18
    2420:	3f 93       	push	r19
    2422:	4f 93       	push	r20
    2424:	5f 93       	push	r21
    2426:	6f 93       	push	r22
    2428:	7f 93       	push	r23
    242a:	8f 93       	push	r24
    242c:	9f 93       	push	r25
    242e:	af 93       	push	r26
    2430:	bf 93       	push	r27
    2432:	ef 93       	push	r30
    2434:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2436:	80 e6       	ldi	r24, 0x60	; 96
    2438:	93 e0       	ldi	r25, 0x03	; 3
    243a:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    243e:	ff 91       	pop	r31
    2440:	ef 91       	pop	r30
    2442:	bf 91       	pop	r27
    2444:	af 91       	pop	r26
    2446:	9f 91       	pop	r25
    2448:	8f 91       	pop	r24
    244a:	7f 91       	pop	r23
    244c:	6f 91       	pop	r22
    244e:	5f 91       	pop	r21
    2450:	4f 91       	pop	r20
    2452:	3f 91       	pop	r19
    2454:	2f 91       	pop	r18
    2456:	0f 90       	pop	r0
    2458:	0f be       	out	0x3f, r0	; 63
    245a:	0f 90       	pop	r0
    245c:	1f 90       	pop	r1
    245e:	18 95       	reti

00002460 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2460:	80 e6       	ldi	r24, 0x60	; 96
    2462:	93 e0       	ldi	r25, 0x03	; 3
    2464:	0e 94 95 10 	call	0x212a	; 0x212a <_ZN14HardwareSerial9availableEv>
    2468:	21 e0       	ldi	r18, 0x01	; 1
    246a:	89 2b       	or	r24, r25
    246c:	09 f4       	brne	.+2      	; 0x2470 <_Z17Serial0_availablev+0x10>
    246e:	20 e0       	ldi	r18, 0x00	; 0
}
    2470:	82 2f       	mov	r24, r18
    2472:	08 95       	ret

00002474 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2474:	e0 e6       	ldi	r30, 0x60	; 96
    2476:	f3 e0       	ldi	r31, 0x03	; 3
    2478:	13 82       	std	Z+3, r1	; 0x03
    247a:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    247c:	88 ee       	ldi	r24, 0xE8	; 232
    247e:	93 e0       	ldi	r25, 0x03	; 3
    2480:	a0 e0       	ldi	r26, 0x00	; 0
    2482:	b0 e0       	ldi	r27, 0x00	; 0
    2484:	84 83       	std	Z+4, r24	; 0x04
    2486:	95 83       	std	Z+5, r25	; 0x05
    2488:	a6 83       	std	Z+6, r26	; 0x06
    248a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    248c:	8b ed       	ldi	r24, 0xDB	; 219
    248e:	91 e0       	ldi	r25, 0x01	; 1
    2490:	91 83       	std	Z+1, r25	; 0x01
    2492:	80 83       	st	Z, r24
    2494:	85 ec       	ldi	r24, 0xC5	; 197
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	95 87       	std	Z+13, r25	; 0x0d
    249a:	84 87       	std	Z+12, r24	; 0x0c
    249c:	84 ec       	ldi	r24, 0xC4	; 196
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	97 87       	std	Z+15, r25	; 0x0f
    24a2:	86 87       	std	Z+14, r24	; 0x0e
    24a4:	80 ec       	ldi	r24, 0xC0	; 192
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	91 8b       	std	Z+17, r25	; 0x11
    24aa:	80 8b       	std	Z+16, r24	; 0x10
    24ac:	81 ec       	ldi	r24, 0xC1	; 193
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	93 8b       	std	Z+19, r25	; 0x13
    24b2:	82 8b       	std	Z+18, r24	; 0x12
    24b4:	82 ec       	ldi	r24, 0xC2	; 194
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	95 8b       	std	Z+21, r25	; 0x15
    24ba:	84 8b       	std	Z+20, r24	; 0x14
    24bc:	86 ec       	ldi	r24, 0xC6	; 198
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	97 8b       	std	Z+23, r25	; 0x17
    24c2:	86 8b       	std	Z+22, r24	; 0x16
    24c4:	11 8e       	std	Z+25, r1	; 0x19
    24c6:	12 8e       	std	Z+26, r1	; 0x1a
    24c8:	13 8e       	std	Z+27, r1	; 0x1b
    24ca:	14 8e       	std	Z+28, r1	; 0x1c
    24cc:	08 95       	ret

000024ce <_ZN3LCD15setBacklightPinEh13t_backlighPol>:
// Switch fully on the LCD (backlight and LCD)
void LCD::on ( void )
{
   display();
   backlight();
}
    24ce:	08 95       	ret

000024d0 <_ZN3LCD12setBacklightEh>:
    24d0:	08 95       	ret

000024d2 <_ZN3LCD5writeEh>:
    24d2:	dc 01       	movw	r26, r24
    24d4:	ed 91       	ld	r30, X+
    24d6:	fc 91       	ld	r31, X
    24d8:	02 84       	ldd	r0, Z+10	; 0x0a
    24da:	f3 85       	ldd	r31, Z+11	; 0x0b
    24dc:	e0 2d       	mov	r30, r0
    24de:	41 e0       	ldi	r20, 0x01	; 1
    24e0:	09 95       	icall
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	08 95       	ret

000024e8 <_ZN3LCDC1Ev>:
    24e8:	fc 01       	movw	r30, r24
    24ea:	13 82       	std	Z+3, r1	; 0x03
    24ec:	12 82       	std	Z+2, r1	; 0x02
    24ee:	2b ee       	ldi	r18, 0xEB	; 235
    24f0:	31 e0       	ldi	r19, 0x01	; 1
    24f2:	31 83       	std	Z+1, r19	; 0x01
    24f4:	20 83       	st	Z, r18
    24f6:	08 95       	ret

000024f8 <_ZN3LCD9backlightEv>:
    24f8:	dc 01       	movw	r26, r24
    24fa:	ed 91       	ld	r30, X+
    24fc:	fc 91       	ld	r31, X
    24fe:	00 84       	ldd	r0, Z+8	; 0x08
    2500:	f1 85       	ldd	r31, Z+9	; 0x09
    2502:	e0 2d       	mov	r30, r0
    2504:	6f ef       	ldi	r22, 0xFF	; 255
    2506:	09 95       	icall
    2508:	08 95       	ret

0000250a <_ZN3LCD7commandEh>:
    250a:	dc 01       	movw	r26, r24
    250c:	ed 91       	ld	r30, X+
    250e:	fc 91       	ld	r31, X
    2510:	02 84       	ldd	r0, Z+10	; 0x0a
    2512:	f3 85       	ldd	r31, Z+11	; 0x0b
    2514:	e0 2d       	mov	r30, r0
    2516:	40 e0       	ldi	r20, 0x00	; 0
    2518:	09 95       	icall
    251a:	08 95       	ret

0000251c <_ZN3LCD5clearEv>:
    251c:	61 e0       	ldi	r22, 0x01	; 1
    251e:	0e 94 85 12 	call	0x250a	; 0x250a <_ZN3LCD7commandEh>
    2522:	80 ed       	ldi	r24, 0xD0	; 208
    2524:	97 e0       	ldi	r25, 0x07	; 7
    2526:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
    252a:	08 95       	ret

0000252c <_ZN3LCD4homeEv>:
    252c:	62 e0       	ldi	r22, 0x02	; 2
    252e:	0e 94 85 12 	call	0x250a	; 0x250a <_ZN3LCD7commandEh>
    2532:	80 ed       	ldi	r24, 0xD0	; 208
    2534:	97 e0       	ldi	r25, 0x07	; 7
    2536:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
    253a:	08 95       	ret

0000253c <_ZN3LCD9setCursorEhh>:
    253c:	cf 93       	push	r28
    253e:	df 93       	push	r29
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
    2544:	28 97       	sbiw	r28, 0x08	; 8
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	f8 94       	cli
    254a:	de bf       	out	0x3e, r29	; 62
    254c:	0f be       	out	0x3f, r0	; 63
    254e:	cd bf       	out	0x3d, r28	; 61
    2550:	fc 01       	movw	r30, r24
    2552:	19 82       	std	Y+1, r1	; 0x01
    2554:	80 e4       	ldi	r24, 0x40	; 64
    2556:	8a 83       	std	Y+2, r24	; 0x02
    2558:	94 e1       	ldi	r25, 0x14	; 20
    255a:	9b 83       	std	Y+3, r25	; 0x03
    255c:	94 e5       	ldi	r25, 0x54	; 84
    255e:	9c 83       	std	Y+4, r25	; 0x04
    2560:	1d 82       	std	Y+5, r1	; 0x05
    2562:	8e 83       	std	Y+6, r24	; 0x06
    2564:	80 e1       	ldi	r24, 0x10	; 16
    2566:	8f 83       	std	Y+7, r24	; 0x07
    2568:	80 e5       	ldi	r24, 0x50	; 80
    256a:	88 87       	std	Y+8, r24	; 0x08
    256c:	87 81       	ldd	r24, Z+7	; 0x07
    256e:	48 17       	cp	r20, r24
    2570:	10 f0       	brcs	.+4      	; 0x2576 <_ZN3LCD9setCursorEhh+0x3a>
    2572:	4f ef       	ldi	r20, 0xFF	; 255
    2574:	48 0f       	add	r20, r24
    2576:	90 85       	ldd	r25, Z+8	; 0x08
    2578:	90 31       	cpi	r25, 0x10	; 16
    257a:	69 f4       	brne	.+26     	; 0x2596 <_ZN3LCD9setCursorEhh+0x5a>
    257c:	84 30       	cpi	r24, 0x04	; 4
    257e:	59 f4       	brne	.+22     	; 0x2596 <_ZN3LCD9setCursorEhh+0x5a>
    2580:	de 01       	movw	r26, r28
    2582:	a4 0f       	add	r26, r20
    2584:	b1 1d       	adc	r27, r1
    2586:	15 96       	adiw	r26, 0x05	; 5
    2588:	8c 91       	ld	r24, X
    258a:	68 0f       	add	r22, r24
    258c:	60 68       	ori	r22, 0x80	; 128
    258e:	cf 01       	movw	r24, r30
    2590:	0e 94 85 12 	call	0x250a	; 0x250a <_ZN3LCD7commandEh>
    2594:	0a c0       	rjmp	.+20     	; 0x25aa <_ZN3LCD9setCursorEhh+0x6e>
    2596:	de 01       	movw	r26, r28
    2598:	a4 0f       	add	r26, r20
    259a:	b1 1d       	adc	r27, r1
    259c:	11 96       	adiw	r26, 0x01	; 1
    259e:	9c 91       	ld	r25, X
    25a0:	69 0f       	add	r22, r25
    25a2:	60 68       	ori	r22, 0x80	; 128
    25a4:	cf 01       	movw	r24, r30
    25a6:	0e 94 85 12 	call	0x250a	; 0x250a <_ZN3LCD7commandEh>
    25aa:	28 96       	adiw	r28, 0x08	; 8
    25ac:	0f b6       	in	r0, 0x3f	; 63
    25ae:	f8 94       	cli
    25b0:	de bf       	out	0x3e, r29	; 62
    25b2:	0f be       	out	0x3f, r0	; 63
    25b4:	cd bf       	out	0x3d, r28	; 61
    25b6:	df 91       	pop	r29
    25b8:	cf 91       	pop	r28
    25ba:	08 95       	ret

000025bc <_ZN3LCD7displayEv>:
    25bc:	fc 01       	movw	r30, r24
    25be:	65 81       	ldd	r22, Z+5	; 0x05
    25c0:	26 2f       	mov	r18, r22
    25c2:	24 60       	ori	r18, 0x04	; 4
    25c4:	25 83       	std	Z+5, r18	; 0x05
    25c6:	6c 60       	ori	r22, 0x0C	; 12
    25c8:	0e 94 85 12 	call	0x250a	; 0x250a <_ZN3LCD7commandEh>
    25cc:	08 95       	ret

000025ce <_ZN3LCD5beginEhhh>:
// can't assume that its in that state when a application starts (and the
// LiquidCrystal constructor is called).
// A call to begin() will reinitialize the LCD.
//
void LCD::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    25ce:	cf 93       	push	r28
    25d0:	df 93       	push	r29
    25d2:	ec 01       	movw	r28, r24
   if (lines > 1) 
    25d4:	42 30       	cpi	r20, 0x02	; 2
    25d6:	18 f0       	brcs	.+6      	; 0x25de <_ZN3LCD5beginEhhh+0x10>
   {
      _displayfunction |= LCD_2LINE;
    25d8:	8c 81       	ldd	r24, Y+4	; 0x04
    25da:	88 60       	ori	r24, 0x08	; 8
    25dc:	8c 83       	std	Y+4, r24	; 0x04
   }
   _numlines = lines;
    25de:	4f 83       	std	Y+7, r20	; 0x07
   _cols = cols;
    25e0:	68 87       	std	Y+8, r22	; 0x08
   
   // for some 1 line displays you can select a 10 pixel high font
   // ------------------------------------------------------------
   if ((dotsize != LCD_5x8DOTS) && (lines == 1)) 
    25e2:	22 23       	and	r18, r18
    25e4:	29 f0       	breq	.+10     	; 0x25f0 <_ZN3LCD5beginEhhh+0x22>
    25e6:	41 30       	cpi	r20, 0x01	; 1
    25e8:	19 f4       	brne	.+6      	; 0x25f0 <_ZN3LCD5beginEhhh+0x22>
   {
      _displayfunction |= LCD_5x10DOTS;
    25ea:	8c 81       	ldd	r24, Y+4	; 0x04
    25ec:	84 60       	ori	r24, 0x04	; 4
    25ee:	8c 83       	std	Y+4, r24	; 0x04
   // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
   // according to datasheet, we need at least 40ms after power rises above 2.7V
   // before sending commands. Arduino can turn on way before 4.5V so we'll wait 
   // 50
   // ---------------------------------------------------------------------------
   delay (100); // 100ms delay
    25f0:	64 e6       	ldi	r22, 0x64	; 100
    25f2:	70 e0       	ldi	r23, 0x00	; 0
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	0e 94 f6 16 	call	0x2dec	; 0x2dec <delay>
   
   //put the LCD into 4 bit or 8 bit mode
   // -------------------------------------
   if (! (_displayfunction & LCD_8BITMODE)) 
    25fc:	6c 81       	ldd	r22, Y+4	; 0x04
    25fe:	64 fd       	sbrc	r22, 4
    2600:	35 c0       	rjmp	.+106    	; 0x266c <_ZN3LCD5beginEhhh+0x9e>
      // this is according to the hitachi HD44780 datasheet
      // figure 24, pg 46
      
      // we start in 8bit mode, try to set 4 bit mode
      // Special case of "Function Set"
      send(0x03, FOUR_BITS);
    2602:	e8 81       	ld	r30, Y
    2604:	f9 81       	ldd	r31, Y+1	; 0x01
    2606:	02 84       	ldd	r0, Z+10	; 0x0a
    2608:	f3 85       	ldd	r31, Z+11	; 0x0b
    260a:	e0 2d       	mov	r30, r0
    260c:	42 e0       	ldi	r20, 0x02	; 2
    260e:	63 e0       	ldi	r22, 0x03	; 3
    2610:	ce 01       	movw	r24, r28
    2612:	09 95       	icall
      delayMicroseconds(4500); // wait min 4.1ms
    2614:	84 e9       	ldi	r24, 0x94	; 148
    2616:	91 e1       	ldi	r25, 0x11	; 17
    2618:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
      
      // second try
      send ( 0x03, FOUR_BITS );
    261c:	e8 81       	ld	r30, Y
    261e:	f9 81       	ldd	r31, Y+1	; 0x01
    2620:	02 84       	ldd	r0, Z+10	; 0x0a
    2622:	f3 85       	ldd	r31, Z+11	; 0x0b
    2624:	e0 2d       	mov	r30, r0
    2626:	42 e0       	ldi	r20, 0x02	; 2
    2628:	63 e0       	ldi	r22, 0x03	; 3
    262a:	ce 01       	movw	r24, r28
    262c:	09 95       	icall
      delayMicroseconds(150); // wait min 100us
    262e:	86 e9       	ldi	r24, 0x96	; 150
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
      
      // third go!
      send( 0x03, FOUR_BITS );
    2636:	e8 81       	ld	r30, Y
    2638:	f9 81       	ldd	r31, Y+1	; 0x01
    263a:	02 84       	ldd	r0, Z+10	; 0x0a
    263c:	f3 85       	ldd	r31, Z+11	; 0x0b
    263e:	e0 2d       	mov	r30, r0
    2640:	42 e0       	ldi	r20, 0x02	; 2
    2642:	63 e0       	ldi	r22, 0x03	; 3
    2644:	ce 01       	movw	r24, r28
    2646:	09 95       	icall
      delayMicroseconds(150); // wait min of 100us
    2648:	86 e9       	ldi	r24, 0x96	; 150
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
      
      // finally, set to 4-bit interface
      send ( 0x02, FOUR_BITS );
    2650:	e8 81       	ld	r30, Y
    2652:	f9 81       	ldd	r31, Y+1	; 0x01
    2654:	02 84       	ldd	r0, Z+10	; 0x0a
    2656:	f3 85       	ldd	r31, Z+11	; 0x0b
    2658:	e0 2d       	mov	r30, r0
    265a:	42 e0       	ldi	r20, 0x02	; 2
    265c:	62 e0       	ldi	r22, 0x02	; 2
    265e:	ce 01       	movw	r24, r28
    2660:	09 95       	icall
      delayMicroseconds(150); // wait min of 100us
    2662:	86 e9       	ldi	r24, 0x96	; 150
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
    266a:	1a c0       	rjmp	.+52     	; 0x26a0 <_ZN3LCD5beginEhhh+0xd2>
   {
      // this is according to the hitachi HD44780 datasheet
      // page 45 figure 23
      
      // Send function set command sequence
      command(LCD_FUNCTIONSET | _displayfunction);
    266c:	60 62       	ori	r22, 0x20	; 32
    266e:	ce 01       	movw	r24, r28
    2670:	0e 94 85 12 	call	0x250a	; 0x250a <_ZN3LCD7commandEh>
      delayMicroseconds(4500);  // wait more than 4.1ms
    2674:	84 e9       	ldi	r24, 0x94	; 148
    2676:	91 e1       	ldi	r25, 0x11	; 17
    2678:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
      
      // second try
      command(LCD_FUNCTIONSET | _displayfunction);
    267c:	6c 81       	ldd	r22, Y+4	; 0x04
    267e:	60 62       	ori	r22, 0x20	; 32
    2680:	ce 01       	movw	r24, r28
    2682:	0e 94 85 12 	call	0x250a	; 0x250a <_ZN3LCD7commandEh>
      delayMicroseconds(150);
    2686:	86 e9       	ldi	r24, 0x96	; 150
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
      
      // third go
      command(LCD_FUNCTIONSET | _displayfunction);
    268e:	6c 81       	ldd	r22, Y+4	; 0x04
    2690:	60 62       	ori	r22, 0x20	; 32
    2692:	ce 01       	movw	r24, r28
    2694:	0e 94 85 12 	call	0x250a	; 0x250a <_ZN3LCD7commandEh>
      delayMicroseconds(150);
    2698:	86 e9       	ldi	r24, 0x96	; 150
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>

   }
   
   // finally, set # lines, font size, etc.
   command(LCD_FUNCTIONSET | _displayfunction);
    26a0:	6c 81       	ldd	r22, Y+4	; 0x04
    26a2:	60 62       	ori	r22, 0x20	; 32
    26a4:	ce 01       	movw	r24, r28
    26a6:	0e 94 85 12 	call	0x250a	; 0x250a <_ZN3LCD7commandEh>
   delayMicroseconds ( 60 );  // wait more
    26aa:	8c e3       	ldi	r24, 0x3C	; 60
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	0e 94 32 17 	call	0x2e64	; 0x2e64 <delayMicroseconds>
   
   // turn the display on with no cursor or blinking default
   _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
    26b2:	84 e0       	ldi	r24, 0x04	; 4
    26b4:	8d 83       	std	Y+5, r24	; 0x05
   display();
    26b6:	ce 01       	movw	r24, r28
    26b8:	0e 94 de 12 	call	0x25bc	; 0x25bc <_ZN3LCD7displayEv>
   
   // clear the LCD
   clear();
    26bc:	ce 01       	movw	r24, r28
    26be:	0e 94 8e 12 	call	0x251c	; 0x251c <_ZN3LCD5clearEv>
   
   // Initialize to default text direction (for romance languages)
   _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    26c2:	82 e0       	ldi	r24, 0x02	; 2
    26c4:	8e 83       	std	Y+6, r24	; 0x06
   // set the entry mode
   command(LCD_ENTRYMODESET | _displaymode);
    26c6:	66 e0       	ldi	r22, 0x06	; 6
    26c8:	ce 01       	movw	r24, r28
    26ca:	0e 94 85 12 	call	0x250a	; 0x250a <_ZN3LCD7commandEh>

   backlight();
    26ce:	ce 01       	movw	r24, r28
    26d0:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <_ZN3LCD9backlightEv>

}
    26d4:	df 91       	pop	r29
    26d6:	cf 91       	pop	r28
    26d8:	08 95       	ret

000026da <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>:
   // Initialise pin mapping
   _data_pins[0] = ( 1 << d4 );
   _data_pins[1] = ( 1 << d5 );
   _data_pins[2] = ( 1 << d6 );
   _data_pins[3] = ( 1 << d7 );   
}
    26da:	21 e0       	ldi	r18, 0x01	; 1
    26dc:	01 c0       	rjmp	.+2      	; 0x26e0 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x6>
    26de:	22 0f       	add	r18, r18
    26e0:	6a 95       	dec	r22
    26e2:	ea f7       	brpl	.-6      	; 0x26de <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x4>
    26e4:	dc 01       	movw	r26, r24
    26e6:	1b 96       	adiw	r26, 0x0b	; 11
    26e8:	2c 93       	st	X, r18
    26ea:	1b 97       	sbiw	r26, 0x0b	; 11
    26ec:	19 96       	adiw	r26, 0x09	; 9
    26ee:	4c 93       	st	X, r20
    26f0:	19 97       	sbiw	r26, 0x09	; 9
    26f2:	ed 91       	ld	r30, X+
    26f4:	fc 91       	ld	r31, X
    26f6:	00 84       	ldd	r0, Z+8	; 0x08
    26f8:	f1 85       	ldd	r31, Z+9	; 0x09
    26fa:	e0 2d       	mov	r30, r0
    26fc:	60 e0       	ldi	r22, 0x00	; 0
    26fe:	09 95       	icall
    2700:	08 95       	ret

00002702 <_ZN17LiquidCrystal_I2C12setBacklightEh>:
    2702:	fc 01       	movw	r30, r24
    2704:	83 85       	ldd	r24, Z+11	; 0x0b
    2706:	88 23       	and	r24, r24
    2708:	91 f0       	breq	.+36     	; 0x272e <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2c>
    270a:	91 85       	ldd	r25, Z+9	; 0x09
    270c:	91 11       	cpse	r25, r1
    270e:	03 c0       	rjmp	.+6      	; 0x2716 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
    2710:	61 11       	cpse	r22, r1
    2712:	05 c0       	rjmp	.+10     	; 0x271e <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
    2714:	06 c0       	rjmp	.+12     	; 0x2722 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    2716:	91 30       	cpi	r25, 0x01	; 1
    2718:	21 f4       	brne	.+8      	; 0x2722 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    271a:	61 11       	cpse	r22, r1
    271c:	02 c0       	rjmp	.+4      	; 0x2722 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    271e:	84 87       	std	Z+12, r24	; 0x0c
    2720:	01 c0       	rjmp	.+2      	; 0x2724 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
    2722:	14 86       	std	Z+12, r1	; 0x0c
    2724:	64 85       	ldd	r22, Z+12	; 0x0c
    2726:	cf 01       	movw	r24, r30
    2728:	0d 96       	adiw	r24, 0x0d	; 13
    272a:	0e 94 58 19 	call	0x32b0	; 0x32b0 <_ZN5I2CIO5writeEh>
    272e:	08 95       	ret

00002730 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>:
    2730:	6f 92       	push	r6
    2732:	7f 92       	push	r7
    2734:	8f 92       	push	r8
    2736:	af 92       	push	r10
    2738:	cf 92       	push	r12
    273a:	df 92       	push	r13
    273c:	ef 92       	push	r14
    273e:	ff 92       	push	r15
    2740:	0f 93       	push	r16
    2742:	1f 93       	push	r17
    2744:	cf 93       	push	r28
    2746:	df 93       	push	r29
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
    274c:	3c 01       	movw	r6, r24
    274e:	d6 2e       	mov	r13, r22
    2750:	f4 2e       	mov	r15, r20
    2752:	12 2f       	mov	r17, r18
    2754:	0e 94 74 12 	call	0x24e8	; 0x24e8 <_ZN3LCDC1Ev>
    2758:	8b ef       	ldi	r24, 0xFB	; 251
    275a:	91 e0       	ldi	r25, 0x01	; 1
    275c:	f3 01       	movw	r30, r6
    275e:	91 83       	std	Z+1, r25	; 0x01
    2760:	80 83       	st	Z, r24
    2762:	c3 01       	movw	r24, r6
    2764:	0d 96       	adiw	r24, 0x0d	; 13
    2766:	0e 94 1f 19 	call	0x323e	; 0x323e <_ZN5I2CIOC1Ev>
    276a:	f3 01       	movw	r30, r6
    276c:	d2 86       	std	Z+10, r13	; 0x0a
    276e:	13 86       	std	Z+11, r1	; 0x0b
    2770:	14 86       	std	Z+12, r1	; 0x0c
    2772:	11 86       	std	Z+9, r1	; 0x09
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	98 2f       	mov	r25, r24
    2778:	01 c0       	rjmp	.+2      	; 0x277c <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x4c>
    277a:	99 0f       	add	r25, r25
    277c:	fa 94       	dec	r15
    277e:	ea f7       	brpl	.-6      	; 0x277a <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x4a>
    2780:	91 8b       	std	Z+17, r25	; 0x11
    2782:	98 2f       	mov	r25, r24
    2784:	01 c0       	rjmp	.+2      	; 0x2788 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x58>
    2786:	99 0f       	add	r25, r25
    2788:	1a 95       	dec	r17
    278a:	ea f7       	brpl	.-6      	; 0x2786 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x56>
    278c:	92 8b       	std	Z+18, r25	; 0x12
    278e:	98 2f       	mov	r25, r24
    2790:	01 c0       	rjmp	.+2      	; 0x2794 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x64>
    2792:	99 0f       	add	r25, r25
    2794:	0a 95       	dec	r16
    2796:	ea f7       	brpl	.-6      	; 0x2792 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x62>
    2798:	93 8b       	std	Z+19, r25	; 0x13
    279a:	98 2f       	mov	r25, r24
    279c:	01 c0       	rjmp	.+2      	; 0x27a0 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x70>
    279e:	99 0f       	add	r25, r25
    27a0:	ea 94       	dec	r14
    27a2:	ea f7       	brpl	.-6      	; 0x279e <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x6e>
    27a4:	94 8b       	std	Z+20, r25	; 0x14
    27a6:	98 2f       	mov	r25, r24
    27a8:	01 c0       	rjmp	.+2      	; 0x27ac <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x7c>
    27aa:	99 0f       	add	r25, r25
    27ac:	ca 94       	dec	r12
    27ae:	ea f7       	brpl	.-6      	; 0x27aa <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x7a>
    27b0:	95 8b       	std	Z+21, r25	; 0x15
    27b2:	98 2f       	mov	r25, r24
    27b4:	01 c0       	rjmp	.+2      	; 0x27b8 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x88>
    27b6:	99 0f       	add	r25, r25
    27b8:	aa 94       	dec	r10
    27ba:	ea f7       	brpl	.-6      	; 0x27b6 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x86>
    27bc:	96 8b       	std	Z+22, r25	; 0x16
    27be:	01 c0       	rjmp	.+2      	; 0x27c2 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x92>
    27c0:	88 0f       	add	r24, r24
    27c2:	8a 94       	dec	r8
    27c4:	ea f7       	brpl	.-6      	; 0x27c0 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x90>
    27c6:	87 8b       	std	Z+23, r24	; 0x17
    27c8:	df 91       	pop	r29
    27ca:	cf 91       	pop	r28
    27cc:	1f 91       	pop	r17
    27ce:	0f 91       	pop	r16
    27d0:	ff 90       	pop	r15
    27d2:	ef 90       	pop	r14
    27d4:	df 90       	pop	r13
    27d6:	cf 90       	pop	r12
    27d8:	af 90       	pop	r10
    27da:	8f 90       	pop	r8
    27dc:	7f 90       	pop	r7
    27de:	6f 90       	pop	r6
    27e0:	08 95       	ret

000027e2 <_ZN17LiquidCrystal_I2C4initEv>:
    27e2:	0f 93       	push	r16
    27e4:	1f 93       	push	r17
    27e6:	cf 93       	push	r28
    27e8:	df 93       	push	r29
    27ea:	ec 01       	movw	r28, r24
    27ec:	8c 01       	movw	r16, r24
    27ee:	03 5f       	subi	r16, 0xF3	; 243
    27f0:	1f 4f       	sbci	r17, 0xFF	; 255
    27f2:	6a 85       	ldd	r22, Y+10	; 0x0a
    27f4:	c8 01       	movw	r24, r16
    27f6:	0e 94 3f 19 	call	0x327e	; 0x327e <_ZN5I2CIO5beginEh>
    27fa:	01 97       	sbiw	r24, 0x01	; 1
    27fc:	61 f4       	brne	.+24     	; 0x2816 <_ZN17LiquidCrystal_I2C4initEv+0x34>
    27fe:	61 e0       	ldi	r22, 0x01	; 1
    2800:	c8 01       	movw	r24, r16
    2802:	0e 94 26 19 	call	0x324c	; 0x324c <_ZN5I2CIO8portModeEh>
    2806:	1c 82       	std	Y+4, r1	; 0x04
    2808:	60 e0       	ldi	r22, 0x00	; 0
    280a:	c8 01       	movw	r24, r16
    280c:	0e 94 58 19 	call	0x32b0	; 0x32b0 <_ZN5I2CIO5writeEh>
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	02 c0       	rjmp	.+4      	; 0x281a <_ZN17LiquidCrystal_I2C4initEv+0x38>
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	df 91       	pop	r29
    281c:	cf 91       	pop	r28
    281e:	1f 91       	pop	r17
    2820:	0f 91       	pop	r16
    2822:	08 95       	ret

00002824 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
    2824:	ef 92       	push	r14
    2826:	ff 92       	push	r15
    2828:	0f 93       	push	r16
    282a:	1f 93       	push	r17
    282c:	cf 93       	push	r28
    282e:	8c 01       	movw	r16, r24
    2830:	c6 2f       	mov	r28, r22
   _i2cio.write (data | _En);   // En HIGH
    2832:	7c 01       	movw	r14, r24
    2834:	8d e0       	ldi	r24, 0x0D	; 13
    2836:	e8 0e       	add	r14, r24
    2838:	f1 1c       	adc	r15, r1
    283a:	f8 01       	movw	r30, r16
    283c:	61 89       	ldd	r22, Z+17	; 0x11
    283e:	6c 2b       	or	r22, r28
    2840:	c7 01       	movw	r24, r14
    2842:	0e 94 58 19 	call	0x32b0	; 0x32b0 <_ZN5I2CIO5writeEh>
   _i2cio.write (data & ~_En);  // En LOW
    2846:	f8 01       	movw	r30, r16
    2848:	61 89       	ldd	r22, Z+17	; 0x11
    284a:	60 95       	com	r22
    284c:	6c 23       	and	r22, r28
    284e:	c7 01       	movw	r24, r14
    2850:	0e 94 58 19 	call	0x32b0	; 0x32b0 <_ZN5I2CIO5writeEh>
    2854:	cf 91       	pop	r28
    2856:	1f 91       	pop	r17
    2858:	0f 91       	pop	r16
    285a:	ff 90       	pop	r15
    285c:	ef 90       	pop	r14
    285e:	08 95       	ret

00002860 <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode ) 
{
    2860:	dc 01       	movw	r26, r24
    2862:	fc 01       	movw	r30, r24
    2864:	04 96       	adiw	r24, 0x04	; 4
   uint8_t pinMapValue = 0;
    2866:	20 e0       	ldi	r18, 0x00	; 0
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
   {
      if ( ( value & 0x1 ) == 1 )
    2868:	60 ff       	sbrs	r22, 0
    286a:	02 c0       	rjmp	.+4      	; 0x2870 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x10>
      {
         pinMapValue |= _data_pins[i];
    286c:	34 89       	ldd	r19, Z+20	; 0x14
    286e:	23 2b       	or	r18, r19
      }
      value = ( value >> 1 );
    2870:	66 95       	lsr	r22
    2872:	31 96       	adiw	r30, 0x01	; 1
{
   uint8_t pinMapValue = 0;
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
    2874:	e8 17       	cp	r30, r24
    2876:	f9 07       	cpc	r31, r25
    2878:	b9 f7       	brne	.-18     	; 0x2868 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x8>
      value = ( value >> 1 );
   }
   
   // Is it a command or data
   // -----------------------
   if ( mode == DATA )
    287a:	41 30       	cpi	r20, 0x01	; 1
    287c:	19 f4       	brne	.+6      	; 0x2884 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x24>
   {
      mode = _Rs;
    287e:	53 96       	adiw	r26, 0x13	; 19
    2880:	4c 91       	ld	r20, X
    2882:	53 97       	sbiw	r26, 0x13	; 19
    2884:	1c 96       	adiw	r26, 0x0c	; 12
    2886:	9c 91       	ld	r25, X
    2888:	1c 97       	sbiw	r26, 0x0c	; 12
    288a:	62 2f       	mov	r22, r18
    288c:	69 2b       	or	r22, r25
   }
   
   pinMapValue |= mode | _backlightStsMask;
   pulseEnable ( pinMapValue );
    288e:	64 2b       	or	r22, r20
    2890:	cd 01       	movw	r24, r26
    2892:	0e 94 12 14 	call	0x2824	; 0x2824 <_ZN17LiquidCrystal_I2C11pulseEnableEh>
    2896:	08 95       	ret

00002898 <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) 
{
    2898:	0f 93       	push	r16
    289a:	1f 93       	push	r17
    289c:	cf 93       	push	r28
    289e:	df 93       	push	r29
    28a0:	8c 01       	movw	r16, r24
    28a2:	c6 2f       	mov	r28, r22
    28a4:	d4 2f       	mov	r29, r20
   // No need to use the delay routines since the time taken to write takes
   // longer that what is needed both for toggling and enable pin an to execute
   // the command.
   
   if ( mode == FOUR_BITS )
    28a6:	42 30       	cpi	r20, 0x02	; 2
    28a8:	29 f4       	brne	.+10     	; 0x28b4 <_ZN17LiquidCrystal_I2C4sendEhh+0x1c>
   {
      write4bits( (value & 0x0F), COMMAND );
    28aa:	6f 70       	andi	r22, 0x0F	; 15
    28ac:	40 e0       	ldi	r20, 0x00	; 0
    28ae:	0e 94 30 14 	call	0x2860	; 0x2860 <_ZN17LiquidCrystal_I2C10write4bitsEhh>
    28b2:	11 c0       	rjmp	.+34     	; 0x28d6 <_ZN17LiquidCrystal_I2C4sendEhh+0x3e>
   }
   else 
   {
      write4bits( (value >> 4), mode );
    28b4:	70 e0       	ldi	r23, 0x00	; 0
    28b6:	75 95       	asr	r23
    28b8:	67 95       	ror	r22
    28ba:	75 95       	asr	r23
    28bc:	67 95       	ror	r22
    28be:	75 95       	asr	r23
    28c0:	67 95       	ror	r22
    28c2:	75 95       	asr	r23
    28c4:	67 95       	ror	r22
    28c6:	0e 94 30 14 	call	0x2860	; 0x2860 <_ZN17LiquidCrystal_I2C10write4bitsEhh>
      write4bits( (value & 0x0F), mode);
    28ca:	6c 2f       	mov	r22, r28
    28cc:	6f 70       	andi	r22, 0x0F	; 15
    28ce:	4d 2f       	mov	r20, r29
    28d0:	c8 01       	movw	r24, r16
    28d2:	0e 94 30 14 	call	0x2860	; 0x2860 <_ZN17LiquidCrystal_I2C10write4bitsEhh>
   }
}
    28d6:	df 91       	pop	r29
    28d8:	cf 91       	pop	r28
    28da:	1f 91       	pop	r17
    28dc:	0f 91       	pop	r16
    28de:	08 95       	ret

000028e0 <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    28e0:	ff 92       	push	r15
    28e2:	0f 93       	push	r16
    28e4:	1f 93       	push	r17
    28e6:	cf 93       	push	r28
    28e8:	df 93       	push	r29
    28ea:	ec 01       	movw	r28, r24
    28ec:	16 2f       	mov	r17, r22
    28ee:	04 2f       	mov	r16, r20
    28f0:	f2 2e       	mov	r15, r18
   
   init();     // Initialise the I2C expander interface
    28f2:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <_ZN17LiquidCrystal_I2C4initEv>
   LCD::begin ( cols, lines, dotsize );   
    28f6:	2f 2d       	mov	r18, r15
    28f8:	40 2f       	mov	r20, r16
    28fa:	61 2f       	mov	r22, r17
    28fc:	ce 01       	movw	r24, r28
    28fe:	0e 94 e7 12 	call	0x25ce	; 0x25ce <_ZN3LCD5beginEhhh>
}
    2902:	df 91       	pop	r29
    2904:	cf 91       	pop	r28
    2906:	1f 91       	pop	r17
    2908:	0f 91       	pop	r16
    290a:	ff 90       	pop	r15
    290c:	08 95       	ret

0000290e <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    290e:	08 95       	ret

00002910 <main>:

int main(void)
{
	init();
    2910:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <init>

	initVariant();
    2914:	0e 94 87 14 	call	0x290e	; 0x290e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2918:	0e 94 c6 0c 	call	0x198c	; 0x198c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    291c:	c3 ec       	ldi	r28, 0xC3	; 195
    291e:	d0 e1       	ldi	r29, 0x10	; 16
#endif
	
	setup();
    
	for (;;) {
		loop();
    2920:	0e 94 b3 07 	call	0xf66	; 0xf66 <loop>
		if (serialEventRun) serialEventRun();
    2924:	20 97       	sbiw	r28, 0x00	; 0
    2926:	e1 f3       	breq	.-8      	; 0x2920 <main+0x10>
    2928:	0e 94 c3 10 	call	0x2186	; 0x2186 <_Z14serialEventRunv>
    292c:	f9 cf       	rjmp	.-14     	; 0x2920 <main+0x10>

0000292e <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    292e:	cf 92       	push	r12
    2930:	df 92       	push	r13
    2932:	ef 92       	push	r14
    2934:	ff 92       	push	r15
    2936:	0f 93       	push	r16
    2938:	1f 93       	push	r17
    293a:	cf 93       	push	r28
    293c:	df 93       	push	r29
    293e:	41 15       	cp	r20, r1
    2940:	51 05       	cpc	r21, r1
    2942:	c1 f0       	breq	.+48     	; 0x2974 <_ZN5Print5writeEPKhj+0x46>
    2944:	6a 01       	movw	r12, r20
    2946:	8c 01       	movw	r16, r24
    2948:	e6 2e       	mov	r14, r22
    294a:	f7 2e       	mov	r15, r23
    294c:	c0 e0       	ldi	r28, 0x00	; 0
    294e:	d0 e0       	ldi	r29, 0x00	; 0
    2950:	d7 01       	movw	r26, r14
    2952:	6d 91       	ld	r22, X+
    2954:	7d 01       	movw	r14, r26
    2956:	d8 01       	movw	r26, r16
    2958:	ed 91       	ld	r30, X+
    295a:	fc 91       	ld	r31, X
    295c:	01 90       	ld	r0, Z+
    295e:	f0 81       	ld	r31, Z
    2960:	e0 2d       	mov	r30, r0
    2962:	c8 01       	movw	r24, r16
    2964:	09 95       	icall
    2966:	89 2b       	or	r24, r25
    2968:	39 f0       	breq	.+14     	; 0x2978 <_ZN5Print5writeEPKhj+0x4a>
    296a:	21 96       	adiw	r28, 0x01	; 1
    296c:	cc 16       	cp	r12, r28
    296e:	dd 06       	cpc	r13, r29
    2970:	79 f7       	brne	.-34     	; 0x2950 <_ZN5Print5writeEPKhj+0x22>
    2972:	02 c0       	rjmp	.+4      	; 0x2978 <_ZN5Print5writeEPKhj+0x4a>
    2974:	c0 e0       	ldi	r28, 0x00	; 0
    2976:	d0 e0       	ldi	r29, 0x00	; 0
    2978:	ce 01       	movw	r24, r28
    297a:	df 91       	pop	r29
    297c:	cf 91       	pop	r28
    297e:	1f 91       	pop	r17
    2980:	0f 91       	pop	r16
    2982:	ff 90       	pop	r15
    2984:	ef 90       	pop	r14
    2986:	df 90       	pop	r13
    2988:	cf 90       	pop	r12
    298a:	08 95       	ret

0000298c <_ZN5Print5printERK6String>:
    298c:	db 01       	movw	r26, r22
    298e:	14 96       	adiw	r26, 0x04	; 4
    2990:	4d 91       	ld	r20, X+
    2992:	5c 91       	ld	r21, X
    2994:	15 97       	sbiw	r26, 0x05	; 5
    2996:	6d 91       	ld	r22, X+
    2998:	7c 91       	ld	r23, X
    299a:	dc 01       	movw	r26, r24
    299c:	ed 91       	ld	r30, X+
    299e:	fc 91       	ld	r31, X
    29a0:	02 80       	ldd	r0, Z+2	; 0x02
    29a2:	f3 81       	ldd	r31, Z+3	; 0x03
    29a4:	e0 2d       	mov	r30, r0
    29a6:	09 95       	icall
    29a8:	08 95       	ret

000029aa <_ZN5Print5printEPKc>:
    29aa:	61 15       	cp	r22, r1
    29ac:	71 05       	cpc	r23, r1
    29ae:	81 f0       	breq	.+32     	; 0x29d0 <_ZN5Print5printEPKc+0x26>
    29b0:	fb 01       	movw	r30, r22
    29b2:	01 90       	ld	r0, Z+
    29b4:	00 20       	and	r0, r0
    29b6:	e9 f7       	brne	.-6      	; 0x29b2 <_ZN5Print5printEPKc+0x8>
    29b8:	31 97       	sbiw	r30, 0x01	; 1
    29ba:	af 01       	movw	r20, r30
    29bc:	46 1b       	sub	r20, r22
    29be:	57 0b       	sbc	r21, r23
    29c0:	dc 01       	movw	r26, r24
    29c2:	ed 91       	ld	r30, X+
    29c4:	fc 91       	ld	r31, X
    29c6:	02 80       	ldd	r0, Z+2	; 0x02
    29c8:	f3 81       	ldd	r31, Z+3	; 0x03
    29ca:	e0 2d       	mov	r30, r0
    29cc:	09 95       	icall
    29ce:	08 95       	ret
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	08 95       	ret

000029d6 <_ZN5Print5printEc>:
    29d6:	dc 01       	movw	r26, r24
    29d8:	ed 91       	ld	r30, X+
    29da:	fc 91       	ld	r31, X
    29dc:	01 90       	ld	r0, Z+
    29de:	f0 81       	ld	r31, Z
    29e0:	e0 2d       	mov	r30, r0
    29e2:	09 95       	icall
    29e4:	08 95       	ret

000029e6 <_ZN5Print7printlnEv>:
    29e6:	dc 01       	movw	r26, r24
    29e8:	ed 91       	ld	r30, X+
    29ea:	fc 91       	ld	r31, X
    29ec:	02 80       	ldd	r0, Z+2	; 0x02
    29ee:	f3 81       	ldd	r31, Z+3	; 0x03
    29f0:	e0 2d       	mov	r30, r0
    29f2:	42 e0       	ldi	r20, 0x02	; 2
    29f4:	50 e0       	ldi	r21, 0x00	; 0
    29f6:	67 e0       	ldi	r22, 0x07	; 7
    29f8:	72 e0       	ldi	r23, 0x02	; 2
    29fa:	09 95       	icall
    29fc:	08 95       	ret

000029fe <_ZN5Print7printlnEPKc>:
    29fe:	0f 93       	push	r16
    2a00:	1f 93       	push	r17
    2a02:	cf 93       	push	r28
    2a04:	df 93       	push	r29
    2a06:	ec 01       	movw	r28, r24
    2a08:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN5Print5printEPKc>
    2a0c:	8c 01       	movw	r16, r24
    2a0e:	ce 01       	movw	r24, r28
    2a10:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <_ZN5Print7printlnEv>
    2a14:	80 0f       	add	r24, r16
    2a16:	91 1f       	adc	r25, r17
    2a18:	df 91       	pop	r29
    2a1a:	cf 91       	pop	r28
    2a1c:	1f 91       	pop	r17
    2a1e:	0f 91       	pop	r16
    2a20:	08 95       	ret

00002a22 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    2a22:	8f 92       	push	r8
    2a24:	9f 92       	push	r9
    2a26:	af 92       	push	r10
    2a28:	bf 92       	push	r11
    2a2a:	ef 92       	push	r14
    2a2c:	ff 92       	push	r15
    2a2e:	0f 93       	push	r16
    2a30:	1f 93       	push	r17
    2a32:	cf 93       	push	r28
    2a34:	df 93       	push	r29
    2a36:	cd b7       	in	r28, 0x3d	; 61
    2a38:	de b7       	in	r29, 0x3e	; 62
    2a3a:	a1 97       	sbiw	r28, 0x21	; 33
    2a3c:	0f b6       	in	r0, 0x3f	; 63
    2a3e:	f8 94       	cli
    2a40:	de bf       	out	0x3e, r29	; 62
    2a42:	0f be       	out	0x3f, r0	; 63
    2a44:	cd bf       	out	0x3d, r28	; 61
    2a46:	7c 01       	movw	r14, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	ba 01       	movw	r22, r20
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    2a4c:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    2a4e:	22 30       	cpi	r18, 0x02	; 2
    2a50:	08 f4       	brcc	.+2      	; 0x2a54 <_ZN5Print11printNumberEmh+0x32>
    2a52:	2a e0       	ldi	r18, 0x0A	; 10
    2a54:	8e 01       	movw	r16, r28
    2a56:	0f 5d       	subi	r16, 0xDF	; 223
    2a58:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    2a5a:	82 2e       	mov	r8, r18
    2a5c:	91 2c       	mov	r9, r1
    2a5e:	a1 2c       	mov	r10, r1
    2a60:	b1 2c       	mov	r11, r1
    2a62:	a5 01       	movw	r20, r10
    2a64:	94 01       	movw	r18, r8
    2a66:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <__udivmodsi4>
    2a6a:	e6 2f       	mov	r30, r22
    n /= base;
    2a6c:	62 2f       	mov	r22, r18
    2a6e:	73 2f       	mov	r23, r19
    2a70:	84 2f       	mov	r24, r20
    2a72:	95 2f       	mov	r25, r21

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    2a74:	01 50       	subi	r16, 0x01	; 1
    2a76:	11 09       	sbc	r17, r1
    2a78:	ea 30       	cpi	r30, 0x0A	; 10
    2a7a:	10 f4       	brcc	.+4      	; 0x2a80 <_ZN5Print11printNumberEmh+0x5e>
    2a7c:	e0 5d       	subi	r30, 0xD0	; 208
    2a7e:	01 c0       	rjmp	.+2      	; 0x2a82 <_ZN5Print11printNumberEmh+0x60>
    2a80:	e9 5c       	subi	r30, 0xC9	; 201
    2a82:	d8 01       	movw	r26, r16
    2a84:	ec 93       	st	X, r30
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    2a86:	61 15       	cp	r22, r1
    2a88:	71 05       	cpc	r23, r1
    2a8a:	81 05       	cpc	r24, r1
    2a8c:	91 05       	cpc	r25, r1
    2a8e:	49 f7       	brne	.-46     	; 0x2a62 <_ZN5Print11printNumberEmh+0x40>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    2a90:	01 15       	cp	r16, r1
    2a92:	11 05       	cpc	r17, r1
    2a94:	91 f0       	breq	.+36     	; 0x2aba <_ZN5Print11printNumberEmh+0x98>
      return write((const uint8_t *)str, strlen(str));
    2a96:	f8 01       	movw	r30, r16
    2a98:	01 90       	ld	r0, Z+
    2a9a:	00 20       	and	r0, r0
    2a9c:	e9 f7       	brne	.-6      	; 0x2a98 <_ZN5Print11printNumberEmh+0x76>
    2a9e:	31 97       	sbiw	r30, 0x01	; 1
    2aa0:	af 01       	movw	r20, r30
    2aa2:	40 1b       	sub	r20, r16
    2aa4:	51 0b       	sbc	r21, r17
    2aa6:	d7 01       	movw	r26, r14
    2aa8:	ed 91       	ld	r30, X+
    2aaa:	fc 91       	ld	r31, X
    2aac:	02 80       	ldd	r0, Z+2	; 0x02
    2aae:	f3 81       	ldd	r31, Z+3	; 0x03
    2ab0:	e0 2d       	mov	r30, r0
    2ab2:	b8 01       	movw	r22, r16
    2ab4:	c7 01       	movw	r24, r14
    2ab6:	09 95       	icall
    2ab8:	02 c0       	rjmp	.+4      	; 0x2abe <_ZN5Print11printNumberEmh+0x9c>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	90 e0       	ldi	r25, 0x00	; 0

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
    2abe:	a1 96       	adiw	r28, 0x21	; 33
    2ac0:	0f b6       	in	r0, 0x3f	; 63
    2ac2:	f8 94       	cli
    2ac4:	de bf       	out	0x3e, r29	; 62
    2ac6:	0f be       	out	0x3f, r0	; 63
    2ac8:	cd bf       	out	0x3d, r28	; 61
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	1f 91       	pop	r17
    2ad0:	0f 91       	pop	r16
    2ad2:	ff 90       	pop	r15
    2ad4:	ef 90       	pop	r14
    2ad6:	bf 90       	pop	r11
    2ad8:	af 90       	pop	r10
    2ada:	9f 90       	pop	r9
    2adc:	8f 90       	pop	r8
    2ade:	08 95       	ret

00002ae0 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    2ae0:	cf 92       	push	r12
    2ae2:	df 92       	push	r13
    2ae4:	ef 92       	push	r14
    2ae6:	ff 92       	push	r15
    2ae8:	0f 93       	push	r16
    2aea:	1f 93       	push	r17
    2aec:	cf 93       	push	r28
    2aee:	df 93       	push	r29
    2af0:	ec 01       	movw	r28, r24
    2af2:	6a 01       	movw	r12, r20
    2af4:	7b 01       	movw	r14, r22
  if (base == 0) {
    2af6:	21 15       	cp	r18, r1
    2af8:	31 05       	cpc	r19, r1
    2afa:	41 f4       	brne	.+16     	; 0x2b0c <_ZN5Print5printEli+0x2c>
    return write(n);
    2afc:	e8 81       	ld	r30, Y
    2afe:	f9 81       	ldd	r31, Y+1	; 0x01
    2b00:	01 90       	ld	r0, Z+
    2b02:	f0 81       	ld	r31, Z
    2b04:	e0 2d       	mov	r30, r0
    2b06:	64 2f       	mov	r22, r20
    2b08:	09 95       	icall
    2b0a:	1d c0       	rjmp	.+58     	; 0x2b46 <_ZN5Print5printEli+0x66>
  } else if (base == 10) {
    2b0c:	2a 30       	cpi	r18, 0x0A	; 10
    2b0e:	31 05       	cpc	r19, r1
    2b10:	c1 f4       	brne	.+48     	; 0x2b42 <_ZN5Print5printEli+0x62>
    if (n < 0) {
    2b12:	77 23       	and	r23, r23
    2b14:	94 f4       	brge	.+36     	; 0x2b3a <_ZN5Print5printEli+0x5a>
      int t = print('-');
    2b16:	6d e2       	ldi	r22, 0x2D	; 45
    2b18:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <_ZN5Print5printEc>
    2b1c:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    2b1e:	44 27       	eor	r20, r20
    2b20:	55 27       	eor	r21, r21
    2b22:	ba 01       	movw	r22, r20
    2b24:	4c 19       	sub	r20, r12
    2b26:	5d 09       	sbc	r21, r13
    2b28:	6e 09       	sbc	r22, r14
    2b2a:	7f 09       	sbc	r23, r15
    2b2c:	2a e0       	ldi	r18, 0x0A	; 10
    2b2e:	ce 01       	movw	r24, r28
    2b30:	0e 94 11 15 	call	0x2a22	; 0x2a22 <_ZN5Print11printNumberEmh>
    2b34:	80 0f       	add	r24, r16
    2b36:	91 1f       	adc	r25, r17
    2b38:	06 c0       	rjmp	.+12     	; 0x2b46 <_ZN5Print5printEli+0x66>
    }
    return printNumber(n, 10);
    2b3a:	2a e0       	ldi	r18, 0x0A	; 10
    2b3c:	0e 94 11 15 	call	0x2a22	; 0x2a22 <_ZN5Print11printNumberEmh>
    2b40:	02 c0       	rjmp	.+4      	; 0x2b46 <_ZN5Print5printEli+0x66>
  } else {
    return printNumber(n, base);
    2b42:	0e 94 11 15 	call	0x2a22	; 0x2a22 <_ZN5Print11printNumberEmh>
  }
}
    2b46:	df 91       	pop	r29
    2b48:	cf 91       	pop	r28
    2b4a:	1f 91       	pop	r17
    2b4c:	0f 91       	pop	r16
    2b4e:	ff 90       	pop	r15
    2b50:	ef 90       	pop	r14
    2b52:	df 90       	pop	r13
    2b54:	cf 90       	pop	r12
    2b56:	08 95       	ret

00002b58 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    2b58:	9a 01       	movw	r18, r20
  return print((long) n, base);
    2b5a:	ab 01       	movw	r20, r22
    2b5c:	77 0f       	add	r23, r23
    2b5e:	66 0b       	sbc	r22, r22
    2b60:	77 0b       	sbc	r23, r23
    2b62:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <_ZN5Print5printEli>
}
    2b66:	08 95       	ret

00002b68 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2b68:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <_ZN7TwoWire14rxBufferLengthE>
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	20 91 2e 04 	lds	r18, 0x042E	; 0x80042e <_ZN7TwoWire13rxBufferIndexE>
    2b72:	82 1b       	sub	r24, r18
    2b74:	91 09       	sbc	r25, r1
    2b76:	08 95       	ret

00002b78 <_ZN7TwoWire4readEv>:
    2b78:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <_ZN7TwoWire13rxBufferIndexE>
    2b7c:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <_ZN7TwoWire14rxBufferLengthE>
    2b80:	98 17       	cp	r25, r24
    2b82:	50 f4       	brcc	.+20     	; 0x2b98 <_ZN7TwoWire4readEv+0x20>
    2b84:	e9 2f       	mov	r30, r25
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	e1 5d       	subi	r30, 0xD1	; 209
    2b8a:	fb 4f       	sbci	r31, 0xFB	; 251
    2b8c:	20 81       	ld	r18, Z
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	9f 5f       	subi	r25, 0xFF	; 255
    2b92:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <_ZN7TwoWire13rxBufferIndexE>
    2b96:	02 c0       	rjmp	.+4      	; 0x2b9c <_ZN7TwoWire4readEv+0x24>
    2b98:	2f ef       	ldi	r18, 0xFF	; 255
    2b9a:	3f ef       	ldi	r19, 0xFF	; 255
    2b9c:	c9 01       	movw	r24, r18
    2b9e:	08 95       	ret

00002ba0 <_ZN7TwoWire4peekEv>:
    2ba0:	e0 91 2e 04 	lds	r30, 0x042E	; 0x80042e <_ZN7TwoWire13rxBufferIndexE>
    2ba4:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <_ZN7TwoWire14rxBufferLengthE>
    2ba8:	e8 17       	cp	r30, r24
    2baa:	30 f4       	brcc	.+12     	; 0x2bb8 <_ZN7TwoWire4peekEv+0x18>
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	e1 5d       	subi	r30, 0xD1	; 209
    2bb0:	fb 4f       	sbci	r31, 0xFB	; 251
    2bb2:	80 81       	ld	r24, Z
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	08 95       	ret
    2bb8:	8f ef       	ldi	r24, 0xFF	; 255
    2bba:	9f ef       	ldi	r25, 0xFF	; 255
    2bbc:	08 95       	ret

00002bbe <_ZN7TwoWire5flushEv>:
    2bbe:	08 95       	ret

00002bc0 <_ZN7TwoWire5writeEPKhj>:
    2bc0:	cf 92       	push	r12
    2bc2:	df 92       	push	r13
    2bc4:	ef 92       	push	r14
    2bc6:	ff 92       	push	r15
    2bc8:	0f 93       	push	r16
    2bca:	1f 93       	push	r17
    2bcc:	cf 93       	push	r28
    2bce:	df 93       	push	r29
    2bd0:	8c 01       	movw	r16, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	6a 01       	movw	r12, r20
    2bd6:	20 91 09 04 	lds	r18, 0x0409	; 0x800409 <_ZN7TwoWire12transmittingE>
    2bda:	22 23       	and	r18, r18
    2bdc:	a1 f0       	breq	.+40     	; 0x2c06 <_ZN7TwoWire5writeEPKhj+0x46>
    2bde:	41 15       	cp	r20, r1
    2be0:	51 05       	cpc	r21, r1
    2be2:	a1 f0       	breq	.+40     	; 0x2c0c <_ZN7TwoWire5writeEPKhj+0x4c>
    2be4:	eb 01       	movw	r28, r22
    2be6:	7b 01       	movw	r14, r22
    2be8:	e4 0e       	add	r14, r20
    2bea:	f5 1e       	adc	r15, r21
    2bec:	69 91       	ld	r22, Y+
    2bee:	d8 01       	movw	r26, r16
    2bf0:	ed 91       	ld	r30, X+
    2bf2:	fc 91       	ld	r31, X
    2bf4:	01 90       	ld	r0, Z+
    2bf6:	f0 81       	ld	r31, Z
    2bf8:	e0 2d       	mov	r30, r0
    2bfa:	c8 01       	movw	r24, r16
    2bfc:	09 95       	icall
    2bfe:	ce 15       	cp	r28, r14
    2c00:	df 05       	cpc	r29, r15
    2c02:	a1 f7       	brne	.-24     	; 0x2bec <_ZN7TwoWire5writeEPKhj+0x2c>
    2c04:	03 c0       	rjmp	.+6      	; 0x2c0c <_ZN7TwoWire5writeEPKhj+0x4c>
    2c06:	64 2f       	mov	r22, r20
    2c08:	0e 94 07 1a 	call	0x340e	; 0x340e <twi_transmit>
    2c0c:	c6 01       	movw	r24, r12
    2c0e:	df 91       	pop	r29
    2c10:	cf 91       	pop	r28
    2c12:	1f 91       	pop	r17
    2c14:	0f 91       	pop	r16
    2c16:	ff 90       	pop	r15
    2c18:	ef 90       	pop	r14
    2c1a:	df 90       	pop	r13
    2c1c:	cf 90       	pop	r12
    2c1e:	08 95       	ret

00002c20 <_ZN7TwoWire5writeEh>:
    2c20:	cf 93       	push	r28
    2c22:	df 93       	push	r29
    2c24:	1f 92       	push	r1
    2c26:	cd b7       	in	r28, 0x3d	; 61
    2c28:	de b7       	in	r29, 0x3e	; 62
    2c2a:	fc 01       	movw	r30, r24
    2c2c:	69 83       	std	Y+1, r22	; 0x01
    2c2e:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <_ZN7TwoWire12transmittingE>
    2c32:	99 23       	and	r25, r25
    2c34:	d9 f0       	breq	.+54     	; 0x2c6c <_ZN7TwoWire5writeEh+0x4c>
    2c36:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_ZN7TwoWire14txBufferLengthE>
    2c3a:	90 32       	cpi	r25, 0x20	; 32
    2c3c:	38 f0       	brcs	.+14     	; 0x2c4c <_ZN7TwoWire5writeEh+0x2c>
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	93 83       	std	Z+3, r25	; 0x03
    2c44:	82 83       	std	Z+2, r24	; 0x02
    2c46:	80 e0       	ldi	r24, 0x00	; 0
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	17 c0       	rjmp	.+46     	; 0x2c7a <_ZN7TwoWire5writeEh+0x5a>
    2c4c:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <_ZN7TwoWire13txBufferIndexE>
    2c50:	e8 2f       	mov	r30, r24
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	e4 5f       	subi	r30, 0xF4	; 244
    2c56:	fb 4f       	sbci	r31, 0xFB	; 251
    2c58:	99 81       	ldd	r25, Y+1	; 0x01
    2c5a:	90 83       	st	Z, r25
    2c5c:	8f 5f       	subi	r24, 0xFF	; 255
    2c5e:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <_ZN7TwoWire13txBufferIndexE>
    2c62:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <_ZN7TwoWire14txBufferLengthE>
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	07 c0       	rjmp	.+14     	; 0x2c7a <_ZN7TwoWire5writeEh+0x5a>
    2c6c:	61 e0       	ldi	r22, 0x01	; 1
    2c6e:	ce 01       	movw	r24, r28
    2c70:	01 96       	adiw	r24, 0x01	; 1
    2c72:	0e 94 07 1a 	call	0x340e	; 0x340e <twi_transmit>
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	0f 90       	pop	r0
    2c7c:	df 91       	pop	r29
    2c7e:	cf 91       	pop	r28
    2c80:	08 95       	ret

00002c82 <_ZN7TwoWireC1Ev>:
    2c82:	fc 01       	movw	r30, r24
    2c84:	13 82       	std	Z+3, r1	; 0x03
    2c86:	12 82       	std	Z+2, r1	; 0x02
    2c88:	88 ee       	ldi	r24, 0xE8	; 232
    2c8a:	93 e0       	ldi	r25, 0x03	; 3
    2c8c:	a0 e0       	ldi	r26, 0x00	; 0
    2c8e:	b0 e0       	ldi	r27, 0x00	; 0
    2c90:	84 83       	std	Z+4, r24	; 0x04
    2c92:	95 83       	std	Z+5, r25	; 0x05
    2c94:	a6 83       	std	Z+6, r26	; 0x06
    2c96:	b7 83       	std	Z+7, r27	; 0x07
    2c98:	8a e1       	ldi	r24, 0x1A	; 26
    2c9a:	92 e0       	ldi	r25, 0x02	; 2
    2c9c:	91 83       	std	Z+1, r25	; 0x01
    2c9e:	80 83       	st	Z, r24
    2ca0:	08 95       	ret

00002ca2 <_ZN7TwoWire5beginEv>:
    2ca2:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <_ZN7TwoWire13rxBufferIndexE>
    2ca6:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <_ZN7TwoWire14rxBufferLengthE>
    2caa:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <_ZN7TwoWire13txBufferIndexE>
    2cae:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <_ZN7TwoWire14txBufferLengthE>
    2cb2:	0e 94 7f 19 	call	0x32fe	; 0x32fe <twi_init>
    2cb6:	08 95       	ret

00002cb8 <_ZN7TwoWire8setClockEm>:
    2cb8:	cb 01       	movw	r24, r22
    2cba:	ba 01       	movw	r22, r20
    2cbc:	0e 94 9d 19 	call	0x333a	; 0x333a <twi_setFrequency>
    2cc0:	08 95       	ret

00002cc2 <_ZN7TwoWire17beginTransmissionEh>:
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <_ZN7TwoWire12transmittingE>
    2cc8:	60 93 2c 04 	sts	0x042C, r22	; 0x80042c <_ZN7TwoWire9txAddressE>
    2ccc:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <_ZN7TwoWire13txBufferIndexE>
    2cd0:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <_ZN7TwoWire14txBufferLengthE>
    2cd4:	08 95       	ret

00002cd6 <_ZN7TwoWire15endTransmissionEh>:
    2cd6:	0f 93       	push	r16
    2cd8:	06 2f       	mov	r16, r22
    2cda:	21 e0       	ldi	r18, 0x01	; 1
    2cdc:	40 91 0a 04 	lds	r20, 0x040A	; 0x80040a <_ZN7TwoWire14txBufferLengthE>
    2ce0:	6c e0       	ldi	r22, 0x0C	; 12
    2ce2:	74 e0       	ldi	r23, 0x04	; 4
    2ce4:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <_ZN7TwoWire9txAddressE>
    2ce8:	0e 94 b1 19 	call	0x3362	; 0x3362 <twi_writeTo>
    2cec:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <_ZN7TwoWire13txBufferIndexE>
    2cf0:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <_ZN7TwoWire14txBufferLengthE>
    2cf4:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <_ZN7TwoWire12transmittingE>
    2cf8:	0f 91       	pop	r16
    2cfa:	08 95       	ret

00002cfc <_ZN7TwoWire15endTransmissionEv>:
    2cfc:	61 e0       	ldi	r22, 0x01	; 1
    2cfe:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <_ZN7TwoWire15endTransmissionEh>
    2d02:	08 95       	ret

00002d04 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2d04:	8d ef       	ldi	r24, 0xFD	; 253
    2d06:	93 e0       	ldi	r25, 0x03	; 3
    2d08:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZN7TwoWireC1Ev>
    2d0c:	08 95       	ret

00002d0e <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    2d0e:	1f 92       	push	r1
    2d10:	0f 92       	push	r0
    2d12:	0f b6       	in	r0, 0x3f	; 63
    2d14:	0f 92       	push	r0
    2d16:	11 24       	eor	r1, r1
    2d18:	2f 93       	push	r18
    2d1a:	3f 93       	push	r19
    2d1c:	8f 93       	push	r24
    2d1e:	9f 93       	push	r25
    2d20:	af 93       	push	r26
    2d22:	bf 93       	push	r27
    2d24:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <timer0_millis>
    2d28:	90 91 51 04 	lds	r25, 0x0451	; 0x800451 <timer0_millis+0x1>
    2d2c:	a0 91 52 04 	lds	r26, 0x0452	; 0x800452 <timer0_millis+0x2>
    2d30:	b0 91 53 04 	lds	r27, 0x0453	; 0x800453 <timer0_millis+0x3>
    2d34:	30 91 4f 04 	lds	r19, 0x044F	; 0x80044f <timer0_fract>
    2d38:	23 e0       	ldi	r18, 0x03	; 3
    2d3a:	23 0f       	add	r18, r19
    2d3c:	2d 37       	cpi	r18, 0x7D	; 125
    2d3e:	20 f4       	brcc	.+8      	; 0x2d48 <__vector_16+0x3a>
    2d40:	01 96       	adiw	r24, 0x01	; 1
    2d42:	a1 1d       	adc	r26, r1
    2d44:	b1 1d       	adc	r27, r1
    2d46:	05 c0       	rjmp	.+10     	; 0x2d52 <__vector_16+0x44>
    2d48:	26 e8       	ldi	r18, 0x86	; 134
    2d4a:	23 0f       	add	r18, r19
    2d4c:	02 96       	adiw	r24, 0x02	; 2
    2d4e:	a1 1d       	adc	r26, r1
    2d50:	b1 1d       	adc	r27, r1
    2d52:	20 93 4f 04 	sts	0x044F, r18	; 0x80044f <timer0_fract>
    2d56:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <timer0_millis>
    2d5a:	90 93 51 04 	sts	0x0451, r25	; 0x800451 <timer0_millis+0x1>
    2d5e:	a0 93 52 04 	sts	0x0452, r26	; 0x800452 <timer0_millis+0x2>
    2d62:	b0 93 53 04 	sts	0x0453, r27	; 0x800453 <timer0_millis+0x3>
    2d66:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <timer0_overflow_count>
    2d6a:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <timer0_overflow_count+0x1>
    2d6e:	a0 91 56 04 	lds	r26, 0x0456	; 0x800456 <timer0_overflow_count+0x2>
    2d72:	b0 91 57 04 	lds	r27, 0x0457	; 0x800457 <timer0_overflow_count+0x3>
    2d76:	01 96       	adiw	r24, 0x01	; 1
    2d78:	a1 1d       	adc	r26, r1
    2d7a:	b1 1d       	adc	r27, r1
    2d7c:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <timer0_overflow_count>
    2d80:	90 93 55 04 	sts	0x0455, r25	; 0x800455 <timer0_overflow_count+0x1>
    2d84:	a0 93 56 04 	sts	0x0456, r26	; 0x800456 <timer0_overflow_count+0x2>
    2d88:	b0 93 57 04 	sts	0x0457, r27	; 0x800457 <timer0_overflow_count+0x3>
    2d8c:	bf 91       	pop	r27
    2d8e:	af 91       	pop	r26
    2d90:	9f 91       	pop	r25
    2d92:	8f 91       	pop	r24
    2d94:	3f 91       	pop	r19
    2d96:	2f 91       	pop	r18
    2d98:	0f 90       	pop	r0
    2d9a:	0f be       	out	0x3f, r0	; 63
    2d9c:	0f 90       	pop	r0
    2d9e:	1f 90       	pop	r1
    2da0:	18 95       	reti

00002da2 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2da2:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2da4:	f8 94       	cli
	m = timer0_overflow_count;
    2da6:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <timer0_overflow_count>
    2daa:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <timer0_overflow_count+0x1>
    2dae:	a0 91 56 04 	lds	r26, 0x0456	; 0x800456 <timer0_overflow_count+0x2>
    2db2:	b0 91 57 04 	lds	r27, 0x0457	; 0x800457 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    2db6:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2db8:	a8 9b       	sbis	0x15, 0	; 21
    2dba:	05 c0       	rjmp	.+10     	; 0x2dc6 <micros+0x24>
    2dbc:	2f 3f       	cpi	r18, 0xFF	; 255
    2dbe:	19 f0       	breq	.+6      	; 0x2dc6 <micros+0x24>
		m++;
    2dc0:	01 96       	adiw	r24, 0x01	; 1
    2dc2:	a1 1d       	adc	r26, r1
    2dc4:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2dc6:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2dc8:	ba 2f       	mov	r27, r26
    2dca:	a9 2f       	mov	r26, r25
    2dcc:	98 2f       	mov	r25, r24
    2dce:	88 27       	eor	r24, r24
    2dd0:	82 0f       	add	r24, r18
    2dd2:	91 1d       	adc	r25, r1
    2dd4:	a1 1d       	adc	r26, r1
    2dd6:	b1 1d       	adc	r27, r1
    2dd8:	bc 01       	movw	r22, r24
    2dda:	cd 01       	movw	r24, r26
    2ddc:	42 e0       	ldi	r20, 0x02	; 2
    2dde:	66 0f       	add	r22, r22
    2de0:	77 1f       	adc	r23, r23
    2de2:	88 1f       	adc	r24, r24
    2de4:	99 1f       	adc	r25, r25
    2de6:	4a 95       	dec	r20
    2de8:	d1 f7       	brne	.-12     	; 0x2dde <micros+0x3c>
}
    2dea:	08 95       	ret

00002dec <delay>:

void delay(unsigned long ms)
{
    2dec:	8f 92       	push	r8
    2dee:	9f 92       	push	r9
    2df0:	af 92       	push	r10
    2df2:	bf 92       	push	r11
    2df4:	cf 92       	push	r12
    2df6:	df 92       	push	r13
    2df8:	ef 92       	push	r14
    2dfa:	ff 92       	push	r15
    2dfc:	6b 01       	movw	r12, r22
    2dfe:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    2e00:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <micros>
    2e04:	4b 01       	movw	r8, r22
    2e06:	5c 01       	movw	r10, r24

	while (ms > 0) {
    2e08:	c1 14       	cp	r12, r1
    2e0a:	d1 04       	cpc	r13, r1
    2e0c:	e1 04       	cpc	r14, r1
    2e0e:	f1 04       	cpc	r15, r1
    2e10:	01 f1       	breq	.+64     	; 0x2e52 <delay+0x66>
		yield();
    2e12:	0e 94 1e 19 	call	0x323c	; 0x323c <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    2e16:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <micros>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	88 19       	sub	r24, r8
    2e20:	99 09       	sbc	r25, r9
    2e22:	aa 09       	sbc	r26, r10
    2e24:	bb 09       	sbc	r27, r11
    2e26:	88 3e       	cpi	r24, 0xE8	; 232
    2e28:	93 40       	sbci	r25, 0x03	; 3
    2e2a:	a1 05       	cpc	r26, r1
    2e2c:	b1 05       	cpc	r27, r1
    2e2e:	60 f3       	brcs	.-40     	; 0x2e08 <delay+0x1c>
			ms--;
    2e30:	21 e0       	ldi	r18, 0x01	; 1
    2e32:	c2 1a       	sub	r12, r18
    2e34:	d1 08       	sbc	r13, r1
    2e36:	e1 08       	sbc	r14, r1
    2e38:	f1 08       	sbc	r15, r1
			start += 1000;
    2e3a:	88 ee       	ldi	r24, 0xE8	; 232
    2e3c:	88 0e       	add	r8, r24
    2e3e:	83 e0       	ldi	r24, 0x03	; 3
    2e40:	98 1e       	adc	r9, r24
    2e42:	a1 1c       	adc	r10, r1
    2e44:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2e46:	c1 14       	cp	r12, r1
    2e48:	d1 04       	cpc	r13, r1
    2e4a:	e1 04       	cpc	r14, r1
    2e4c:	f1 04       	cpc	r15, r1
    2e4e:	19 f7       	brne	.-58     	; 0x2e16 <delay+0x2a>
    2e50:	db cf       	rjmp	.-74     	; 0x2e08 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    2e52:	ff 90       	pop	r15
    2e54:	ef 90       	pop	r14
    2e56:	df 90       	pop	r13
    2e58:	cf 90       	pop	r12
    2e5a:	bf 90       	pop	r11
    2e5c:	af 90       	pop	r10
    2e5e:	9f 90       	pop	r9
    2e60:	8f 90       	pop	r8
    2e62:	08 95       	ret

00002e64 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2e64:	82 30       	cpi	r24, 0x02	; 2
    2e66:	91 05       	cpc	r25, r1
    2e68:	38 f0       	brcs	.+14     	; 0x2e78 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    2e6a:	88 0f       	add	r24, r24
    2e6c:	99 1f       	adc	r25, r25
    2e6e:	88 0f       	add	r24, r24
    2e70:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    2e72:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2e74:	01 97       	sbiw	r24, 0x01	; 1
    2e76:	f1 f7       	brne	.-4      	; 0x2e74 <delayMicroseconds+0x10>
    2e78:	08 95       	ret

00002e7a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2e7a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2e7c:	84 b5       	in	r24, 0x24	; 36
    2e7e:	82 60       	ori	r24, 0x02	; 2
    2e80:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2e82:	84 b5       	in	r24, 0x24	; 36
    2e84:	81 60       	ori	r24, 0x01	; 1
    2e86:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2e88:	85 b5       	in	r24, 0x25	; 37
    2e8a:	82 60       	ori	r24, 0x02	; 2
    2e8c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2e8e:	85 b5       	in	r24, 0x25	; 37
    2e90:	81 60       	ori	r24, 0x01	; 1
    2e92:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2e94:	ee e6       	ldi	r30, 0x6E	; 110
    2e96:	f0 e0       	ldi	r31, 0x00	; 0
    2e98:	80 81       	ld	r24, Z
    2e9a:	81 60       	ori	r24, 0x01	; 1
    2e9c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2e9e:	e1 e8       	ldi	r30, 0x81	; 129
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2ea4:	80 81       	ld	r24, Z
    2ea6:	82 60       	ori	r24, 0x02	; 2
    2ea8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2eaa:	80 81       	ld	r24, Z
    2eac:	81 60       	ori	r24, 0x01	; 1
    2eae:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2eb0:	e0 e8       	ldi	r30, 0x80	; 128
    2eb2:	f0 e0       	ldi	r31, 0x00	; 0
    2eb4:	80 81       	ld	r24, Z
    2eb6:	81 60       	ori	r24, 0x01	; 1
    2eb8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2eba:	e1 eb       	ldi	r30, 0xB1	; 177
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	80 81       	ld	r24, Z
    2ec0:	84 60       	ori	r24, 0x04	; 4
    2ec2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2ec4:	e0 eb       	ldi	r30, 0xB0	; 176
    2ec6:	f0 e0       	ldi	r31, 0x00	; 0
    2ec8:	80 81       	ld	r24, Z
    2eca:	81 60       	ori	r24, 0x01	; 1
    2ecc:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2ece:	ea e7       	ldi	r30, 0x7A	; 122
    2ed0:	f0 e0       	ldi	r31, 0x00	; 0
    2ed2:	80 81       	ld	r24, Z
    2ed4:	84 60       	ori	r24, 0x04	; 4
    2ed6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2ed8:	80 81       	ld	r24, Z
    2eda:	82 60       	ori	r24, 0x02	; 2
    2edc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2ede:	80 81       	ld	r24, Z
    2ee0:	81 60       	ori	r24, 0x01	; 1
    2ee2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2ee4:	80 81       	ld	r24, Z
    2ee6:	80 68       	ori	r24, 0x80	; 128
    2ee8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2eea:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2eee:	08 95       	ret

00002ef0 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    2ef0:	1f 93       	push	r17
    2ef2:	cf 93       	push	r28
    2ef4:	df 93       	push	r29
    2ef6:	18 2f       	mov	r17, r24
    2ef8:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    2efa:	61 e0       	ldi	r22, 0x01	; 1
    2efc:	0e 94 00 18 	call	0x3000	; 0x3000 <pinMode>
	if (val == 0)
    2f00:	20 97       	sbiw	r28, 0x00	; 0
    2f02:	11 f4       	brne	.+4      	; 0x2f08 <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    2f04:	60 e0       	ldi	r22, 0x00	; 0
    2f06:	04 c0       	rjmp	.+8      	; 0x2f10 <analogWrite+0x20>
	}
	else if (val == 255)
    2f08:	cf 3f       	cpi	r28, 0xFF	; 255
    2f0a:	d1 05       	cpc	r29, r1
    2f0c:	39 f4       	brne	.+14     	; 0x2f1c <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    2f0e:	61 e0       	ldi	r22, 0x01	; 1
    2f10:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2f12:	df 91       	pop	r29
    2f14:	cf 91       	pop	r28
    2f16:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    2f18:	0c 94 3c 18 	jmp	0x3078	; 0x3078 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2f1c:	e1 2f       	mov	r30, r17
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	ee 53       	subi	r30, 0x3E	; 62
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	e4 91       	lpm	r30, Z
    2f26:	e3 30       	cpi	r30, 0x03	; 3
    2f28:	f9 f0       	breq	.+62     	; 0x2f68 <analogWrite+0x78>
    2f2a:	48 f4       	brcc	.+18     	; 0x2f3e <analogWrite+0x4e>
    2f2c:	e1 30       	cpi	r30, 0x01	; 1
    2f2e:	b9 f0       	breq	.+46     	; 0x2f5e <analogWrite+0x6e>
    2f30:	e2 30       	cpi	r30, 0x02	; 2
    2f32:	a1 f5       	brne	.+104    	; 0x2f9c <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    2f34:	84 b5       	in	r24, 0x24	; 36
    2f36:	80 62       	ori	r24, 0x20	; 32
    2f38:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    2f3a:	c8 bd       	out	0x28, r28	; 40
				break;
    2f3c:	34 c0       	rjmp	.+104    	; 0x2fa6 <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2f3e:	e7 30       	cpi	r30, 0x07	; 7
    2f40:	e9 f0       	breq	.+58     	; 0x2f7c <analogWrite+0x8c>
    2f42:	e8 30       	cpi	r30, 0x08	; 8
    2f44:	19 f1       	breq	.+70     	; 0x2f8c <analogWrite+0x9c>
    2f46:	e4 30       	cpi	r30, 0x04	; 4
    2f48:	49 f5       	brne	.+82     	; 0x2f9c <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    2f4a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2f4e:	80 62       	ori	r24, 0x20	; 32
    2f50:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
    2f54:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    2f58:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
    2f5c:	24 c0       	rjmp	.+72     	; 0x2fa6 <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    2f5e:	84 b5       	in	r24, 0x24	; 36
    2f60:	80 68       	ori	r24, 0x80	; 128
    2f62:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    2f64:	c7 bd       	out	0x27, r28	; 39
				break;
    2f66:	1f c0       	rjmp	.+62     	; 0x2fa6 <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    2f68:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2f6c:	80 68       	ori	r24, 0x80	; 128
    2f6e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
    2f72:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2f76:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
    2f7a:	15 c0       	rjmp	.+42     	; 0x2fa6 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    2f7c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2f80:	80 68       	ori	r24, 0x80	; 128
    2f82:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2A = val; // set pwm duty
    2f86:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
				break;
    2f8a:	0d c0       	rjmp	.+26     	; 0x2fa6 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    2f8c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2f90:	80 62       	ori	r24, 0x20	; 32
    2f92:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2B = val; // set pwm duty
    2f96:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
				break;
    2f9a:	05 c0       	rjmp	.+10     	; 0x2fa6 <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    2f9c:	c0 38       	cpi	r28, 0x80	; 128
    2f9e:	d1 05       	cpc	r29, r1
    2fa0:	0c f0       	brlt	.+2      	; 0x2fa4 <analogWrite+0xb4>
    2fa2:	b5 cf       	rjmp	.-150    	; 0x2f0e <analogWrite+0x1e>
    2fa4:	af cf       	rjmp	.-162    	; 0x2f04 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2fa6:	df 91       	pop	r29
    2fa8:	cf 91       	pop	r28
    2faa:	1f 91       	pop	r17
    2fac:	08 95       	ret

00002fae <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2fae:	83 30       	cpi	r24, 0x03	; 3
    2fb0:	81 f0       	breq	.+32     	; 0x2fd2 <turnOffPWM+0x24>
    2fb2:	28 f4       	brcc	.+10     	; 0x2fbe <turnOffPWM+0x10>
    2fb4:	81 30       	cpi	r24, 0x01	; 1
    2fb6:	99 f0       	breq	.+38     	; 0x2fde <turnOffPWM+0x30>
    2fb8:	82 30       	cpi	r24, 0x02	; 2
    2fba:	a1 f0       	breq	.+40     	; 0x2fe4 <turnOffPWM+0x36>
    2fbc:	08 95       	ret
    2fbe:	87 30       	cpi	r24, 0x07	; 7
    2fc0:	a9 f0       	breq	.+42     	; 0x2fec <turnOffPWM+0x3e>
    2fc2:	88 30       	cpi	r24, 0x08	; 8
    2fc4:	b9 f0       	breq	.+46     	; 0x2ff4 <turnOffPWM+0x46>
    2fc6:	84 30       	cpi	r24, 0x04	; 4
    2fc8:	d1 f4       	brne	.+52     	; 0x2ffe <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2fca:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2fce:	8f 7d       	andi	r24, 0xDF	; 223
    2fd0:	03 c0       	rjmp	.+6      	; 0x2fd8 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2fd2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2fd6:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2fd8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2fdc:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2fde:	84 b5       	in	r24, 0x24	; 36
    2fe0:	8f 77       	andi	r24, 0x7F	; 127
    2fe2:	02 c0       	rjmp	.+4      	; 0x2fe8 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2fe4:	84 b5       	in	r24, 0x24	; 36
    2fe6:	8f 7d       	andi	r24, 0xDF	; 223
    2fe8:	84 bd       	out	0x24, r24	; 36
    2fea:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2fec:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2ff0:	8f 77       	andi	r24, 0x7F	; 127
    2ff2:	03 c0       	rjmp	.+6      	; 0x2ffa <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2ff4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2ff8:	8f 7d       	andi	r24, 0xDF	; 223
    2ffa:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2ffe:	08 95       	ret

00003000 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3000:	cf 93       	push	r28
    3002:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	fc 01       	movw	r30, r24
    3008:	ea 52       	subi	r30, 0x2A	; 42
    300a:	ff 4f       	sbci	r31, 0xFF	; 255
    300c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    300e:	fc 01       	movw	r30, r24
    3010:	e6 51       	subi	r30, 0x16	; 22
    3012:	ff 4f       	sbci	r31, 0xFF	; 255
    3014:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3016:	88 23       	and	r24, r24
    3018:	61 f1       	breq	.+88     	; 0x3072 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	88 0f       	add	r24, r24
    301e:	99 1f       	adc	r25, r25
    3020:	fc 01       	movw	r30, r24
    3022:	ee 5e       	subi	r30, 0xEE	; 238
    3024:	fe 4f       	sbci	r31, 0xFE	; 254
    3026:	c5 91       	lpm	r28, Z+
    3028:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    302a:	fc 01       	movw	r30, r24
    302c:	e8 5f       	subi	r30, 0xF8	; 248
    302e:	fe 4f       	sbci	r31, 0xFE	; 254
    3030:	a5 91       	lpm	r26, Z+
    3032:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3034:	61 11       	cpse	r22, r1
    3036:	09 c0       	rjmp	.+18     	; 0x304a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3038:	9f b7       	in	r25, 0x3f	; 63
                cli();
    303a:	f8 94       	cli
		*reg &= ~bit;
    303c:	88 81       	ld	r24, Y
    303e:	20 95       	com	r18
    3040:	82 23       	and	r24, r18
    3042:	88 83       	st	Y, r24
		*out &= ~bit;
    3044:	ec 91       	ld	r30, X
    3046:	2e 23       	and	r18, r30
    3048:	0b c0       	rjmp	.+22     	; 0x3060 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    304a:	62 30       	cpi	r22, 0x02	; 2
    304c:	61 f4       	brne	.+24     	; 0x3066 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    304e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3050:	f8 94       	cli
		*reg &= ~bit;
    3052:	88 81       	ld	r24, Y
    3054:	32 2f       	mov	r19, r18
    3056:	30 95       	com	r19
    3058:	83 23       	and	r24, r19
    305a:	88 83       	st	Y, r24
		*out |= bit;
    305c:	ec 91       	ld	r30, X
    305e:	2e 2b       	or	r18, r30
    3060:	2c 93       	st	X, r18
		SREG = oldSREG;
    3062:	9f bf       	out	0x3f, r25	; 63
    3064:	06 c0       	rjmp	.+12     	; 0x3072 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3066:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3068:	f8 94       	cli
		*reg |= bit;
    306a:	e8 81       	ld	r30, Y
    306c:	2e 2b       	or	r18, r30
    306e:	28 83       	st	Y, r18
		SREG = oldSREG;
    3070:	8f bf       	out	0x3f, r24	; 63
	}
}
    3072:	df 91       	pop	r29
    3074:	cf 91       	pop	r28
    3076:	08 95       	ret

00003078 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3078:	1f 93       	push	r17
    307a:	cf 93       	push	r28
    307c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    307e:	28 2f       	mov	r18, r24
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	f9 01       	movw	r30, r18
    3084:	ee 53       	subi	r30, 0x3E	; 62
    3086:	ff 4f       	sbci	r31, 0xFF	; 255
    3088:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    308a:	f9 01       	movw	r30, r18
    308c:	ea 52       	subi	r30, 0x2A	; 42
    308e:	ff 4f       	sbci	r31, 0xFF	; 255
    3090:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3092:	f9 01       	movw	r30, r18
    3094:	e6 51       	subi	r30, 0x16	; 22
    3096:	ff 4f       	sbci	r31, 0xFF	; 255
    3098:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    309a:	cc 23       	and	r28, r28
    309c:	c1 f0       	breq	.+48     	; 0x30ce <digitalWrite+0x56>
    309e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    30a0:	81 11       	cpse	r24, r1
    30a2:	0e 94 d7 17 	call	0x2fae	; 0x2fae <turnOffPWM>

	out = portOutputRegister(port);
    30a6:	ec 2f       	mov	r30, r28
    30a8:	f0 e0       	ldi	r31, 0x00	; 0
    30aa:	ee 0f       	add	r30, r30
    30ac:	ff 1f       	adc	r31, r31
    30ae:	e8 5f       	subi	r30, 0xF8	; 248
    30b0:	fe 4f       	sbci	r31, 0xFE	; 254
    30b2:	a5 91       	lpm	r26, Z+
    30b4:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    30b6:	9f b7       	in	r25, 0x3f	; 63
	cli();
    30b8:	f8 94       	cli

	if (val == LOW) {
    30ba:	11 11       	cpse	r17, r1
    30bc:	04 c0       	rjmp	.+8      	; 0x30c6 <digitalWrite+0x4e>
		*out &= ~bit;
    30be:	8c 91       	ld	r24, X
    30c0:	d0 95       	com	r29
    30c2:	d8 23       	and	r29, r24
    30c4:	02 c0       	rjmp	.+4      	; 0x30ca <digitalWrite+0x52>
	} else {
		*out |= bit;
    30c6:	ec 91       	ld	r30, X
    30c8:	de 2b       	or	r29, r30
    30ca:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    30cc:	9f bf       	out	0x3f, r25	; 63
}
    30ce:	df 91       	pop	r29
    30d0:	cf 91       	pop	r28
    30d2:	1f 91       	pop	r17
    30d4:	08 95       	ret

000030d6 <digitalRead>:

int digitalRead(uint8_t pin)
{
    30d6:	cf 93       	push	r28
    30d8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    30da:	28 2f       	mov	r18, r24
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	f9 01       	movw	r30, r18
    30e0:	ee 53       	subi	r30, 0x3E	; 62
    30e2:	ff 4f       	sbci	r31, 0xFF	; 255
    30e4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    30e6:	f9 01       	movw	r30, r18
    30e8:	ea 52       	subi	r30, 0x2A	; 42
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    30ee:	f9 01       	movw	r30, r18
    30f0:	e6 51       	subi	r30, 0x16	; 22
    30f2:	ff 4f       	sbci	r31, 0xFF	; 255
    30f4:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    30f6:	cc 23       	and	r28, r28
    30f8:	91 f0       	breq	.+36     	; 0x311e <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    30fa:	81 11       	cpse	r24, r1
    30fc:	0e 94 d7 17 	call	0x2fae	; 0x2fae <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    3100:	ec 2f       	mov	r30, r28
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	ee 0f       	add	r30, r30
    3106:	ff 1f       	adc	r31, r31
    3108:	e2 50       	subi	r30, 0x02	; 2
    310a:	ff 4f       	sbci	r31, 0xFF	; 255
    310c:	a5 91       	lpm	r26, Z+
    310e:	b4 91       	lpm	r27, Z
    3110:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    3112:	ed 23       	and	r30, r29
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	21 f4       	brne	.+8      	; 0x3122 <digitalRead+0x4c>
    311a:	80 e0       	ldi	r24, 0x00	; 0
    311c:	02 c0       	rjmp	.+4      	; 0x3122 <digitalRead+0x4c>
    311e:	80 e0       	ldi	r24, 0x00	; 0
    3120:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    3122:	df 91       	pop	r29
    3124:	cf 91       	pop	r28
    3126:	08 95       	ret

00003128 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    3128:	fc 01       	movw	r30, r24
    312a:	80 81       	ld	r24, Z
    312c:	91 81       	ldd	r25, Z+1	; 0x01
    312e:	0e 94 2c 1c 	call	0x3858	; 0x3858 <free>
    3132:	08 95       	ret

00003134 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    3134:	cf 93       	push	r28
    3136:	df 93       	push	r29
    3138:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    313a:	88 81       	ld	r24, Y
    313c:	99 81       	ldd	r25, Y+1	; 0x01
    313e:	00 97       	sbiw	r24, 0x00	; 0
    3140:	11 f0       	breq	.+4      	; 0x3146 <_ZN6String10invalidateEv+0x12>
    3142:	0e 94 2c 1c 	call	0x3858	; 0x3858 <free>
	buffer = NULL;
    3146:	19 82       	std	Y+1, r1	; 0x01
    3148:	18 82       	st	Y, r1
	capacity = len = 0;
    314a:	1d 82       	std	Y+5, r1	; 0x05
    314c:	1c 82       	std	Y+4, r1	; 0x04
    314e:	1b 82       	std	Y+3, r1	; 0x03
    3150:	1a 82       	std	Y+2, r1	; 0x02
}
    3152:	df 91       	pop	r29
    3154:	cf 91       	pop	r28
    3156:	08 95       	ret

00003158 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    3158:	0f 93       	push	r16
    315a:	1f 93       	push	r17
    315c:	cf 93       	push	r28
    315e:	df 93       	push	r29
    3160:	ec 01       	movw	r28, r24
    3162:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    3164:	6f 5f       	subi	r22, 0xFF	; 255
    3166:	7f 4f       	sbci	r23, 0xFF	; 255
    3168:	88 81       	ld	r24, Y
    316a:	99 81       	ldd	r25, Y+1	; 0x01
    316c:	0e 94 b5 1c 	call	0x396a	; 0x396a <realloc>
	if (newbuffer) {
    3170:	00 97       	sbiw	r24, 0x00	; 0
    3172:	31 f0       	breq	.+12     	; 0x3180 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    3174:	99 83       	std	Y+1, r25	; 0x01
    3176:	88 83       	st	Y, r24
		capacity = maxStrLen;
    3178:	1b 83       	std	Y+3, r17	; 0x03
    317a:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    317c:	81 e0       	ldi	r24, 0x01	; 1
    317e:	01 c0       	rjmp	.+2      	; 0x3182 <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    3180:	80 e0       	ldi	r24, 0x00	; 0
}
    3182:	df 91       	pop	r29
    3184:	cf 91       	pop	r28
    3186:	1f 91       	pop	r17
    3188:	0f 91       	pop	r16
    318a:	08 95       	ret

0000318c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    318c:	cf 93       	push	r28
    318e:	df 93       	push	r29
	if (buffer && capacity >= size) return 1;
    3190:	fc 01       	movw	r30, r24
    3192:	20 81       	ld	r18, Z
    3194:	31 81       	ldd	r19, Z+1	; 0x01
    3196:	23 2b       	or	r18, r19
    3198:	29 f0       	breq	.+10     	; 0x31a4 <_ZN6String7reserveEj+0x18>
    319a:	22 81       	ldd	r18, Z+2	; 0x02
    319c:	33 81       	ldd	r19, Z+3	; 0x03
    319e:	26 17       	cp	r18, r22
    31a0:	37 07       	cpc	r19, r23
    31a2:	70 f4       	brcc	.+28     	; 0x31c0 <_ZN6String7reserveEj+0x34>
    31a4:	ec 01       	movw	r28, r24
	if (changeBuffer(size)) {
    31a6:	0e 94 ac 18 	call	0x3158	; 0x3158 <_ZN6String12changeBufferEj>
    31aa:	88 23       	and	r24, r24
    31ac:	61 f0       	breq	.+24     	; 0x31c6 <_ZN6String7reserveEj+0x3a>
		if (len == 0) buffer[0] = 0;
    31ae:	8c 81       	ldd	r24, Y+4	; 0x04
    31b0:	9d 81       	ldd	r25, Y+5	; 0x05
    31b2:	89 2b       	or	r24, r25
    31b4:	39 f4       	brne	.+14     	; 0x31c4 <_ZN6String7reserveEj+0x38>
    31b6:	e8 81       	ld	r30, Y
    31b8:	f9 81       	ldd	r31, Y+1	; 0x01
    31ba:	10 82       	st	Z, r1
		return 1;
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	03 c0       	rjmp	.+6      	; 0x31c6 <_ZN6String7reserveEj+0x3a>
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (buffer && capacity >= size) return 1;
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	01 c0       	rjmp	.+2      	; 0x31c6 <_ZN6String7reserveEj+0x3a>
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
		return 1;
    31c4:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
    31c6:	df 91       	pop	r29
    31c8:	cf 91       	pop	r28
    31ca:	08 95       	ret

000031cc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    31cc:	ef 92       	push	r14
    31ce:	ff 92       	push	r15
    31d0:	0f 93       	push	r16
    31d2:	1f 93       	push	r17
    31d4:	cf 93       	push	r28
    31d6:	df 93       	push	r29
    31d8:	ec 01       	movw	r28, r24
    31da:	7b 01       	movw	r14, r22
    31dc:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    31de:	ba 01       	movw	r22, r20
    31e0:	0e 94 c6 18 	call	0x318c	; 0x318c <_ZN6String7reserveEj>
    31e4:	81 11       	cpse	r24, r1
    31e6:	04 c0       	rjmp	.+8      	; 0x31f0 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    31e8:	ce 01       	movw	r24, r28
    31ea:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN6String10invalidateEv>
		return *this;
    31ee:	07 c0       	rjmp	.+14     	; 0x31fe <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    31f0:	1d 83       	std	Y+5, r17	; 0x05
    31f2:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    31f4:	b7 01       	movw	r22, r14
    31f6:	88 81       	ld	r24, Y
    31f8:	99 81       	ldd	r25, Y+1	; 0x01
    31fa:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <strcpy>
	return *this;
}
    31fe:	ce 01       	movw	r24, r28
    3200:	df 91       	pop	r29
    3202:	cf 91       	pop	r28
    3204:	1f 91       	pop	r17
    3206:	0f 91       	pop	r16
    3208:	ff 90       	pop	r15
    320a:	ef 90       	pop	r14
    320c:	08 95       	ret

0000320e <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    320e:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3210:	11 82       	std	Z+1, r1	; 0x01
    3212:	10 82       	st	Z, r1
	capacity = 0;
    3214:	13 82       	std	Z+3, r1	; 0x03
    3216:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3218:	15 82       	std	Z+5, r1	; 0x05
    321a:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    321c:	61 15       	cp	r22, r1
    321e:	71 05       	cpc	r23, r1
    3220:	51 f0       	breq	.+20     	; 0x3236 <_ZN6StringC1EPKc+0x28>
    3222:	fb 01       	movw	r30, r22
    3224:	01 90       	ld	r0, Z+
    3226:	00 20       	and	r0, r0
    3228:	e9 f7       	brne	.-6      	; 0x3224 <_ZN6StringC1EPKc+0x16>
    322a:	31 97       	sbiw	r30, 0x01	; 1
    322c:	af 01       	movw	r20, r30
    322e:	46 1b       	sub	r20, r22
    3230:	57 0b       	sbc	r21, r23
    3232:	0e 94 e6 18 	call	0x31cc	; 0x31cc <_ZN6String4copyEPKcj>
    3236:	08 95       	ret

00003238 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    3238:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <abort>

0000323c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    323c:	08 95       	ret

0000323e <_ZN5I2CIOC1Ev>:
      // Remove the values which are not inputs and get the value of the pin
      pinVal = this->read() & _dirMask;
      pinVal = ( pinVal >> pin ) & 0x01; // Get the pin value
   }
   return (pinVal);
}
    323e:	fc 01       	movw	r30, r24
    3240:	12 82       	std	Z+2, r1	; 0x02
    3242:	8f ef       	ldi	r24, 0xFF	; 255
    3244:	81 83       	std	Z+1, r24	; 0x01
    3246:	10 82       	st	Z, r1
    3248:	13 82       	std	Z+3, r1	; 0x03
    324a:	08 95       	ret

0000324c <_ZN5I2CIO8portModeEh>:
    324c:	fc 01       	movw	r30, r24
    324e:	23 81       	ldd	r18, Z+3	; 0x03
    3250:	22 23       	and	r18, r18
    3252:	39 f0       	breq	.+14     	; 0x3262 <_ZN5I2CIO8portModeEh+0x16>
    3254:	61 11       	cpse	r22, r1
    3256:	03 c0       	rjmp	.+6      	; 0x325e <_ZN5I2CIO8portModeEh+0x12>
    3258:	2f ef       	ldi	r18, 0xFF	; 255
    325a:	21 83       	std	Z+1, r18	; 0x01
    325c:	08 95       	ret
    325e:	fc 01       	movw	r30, r24
    3260:	11 82       	std	Z+1, r1	; 0x01
    3262:	08 95       	ret

00003264 <_ZN5I2CIO11isAvailableEh>:
    3264:	8d ef       	ldi	r24, 0xFD	; 253
    3266:	93 e0       	ldi	r25, 0x03	; 3
    3268:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <_ZN7TwoWire17beginTransmissionEh>
    326c:	8d ef       	ldi	r24, 0xFD	; 253
    326e:	93 e0       	ldi	r25, 0x03	; 3
    3270:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <_ZN7TwoWire15endTransmissionEv>
    3274:	91 e0       	ldi	r25, 0x01	; 1
    3276:	81 11       	cpse	r24, r1
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	89 2f       	mov	r24, r25
    327c:	08 95       	ret

0000327e <_ZN5I2CIO5beginEh>:
    327e:	cf 93       	push	r28
    3280:	df 93       	push	r29
    3282:	ec 01       	movw	r28, r24
    3284:	6a 83       	std	Y+2, r22	; 0x02
    3286:	8d ef       	ldi	r24, 0xFD	; 253
    3288:	93 e0       	ldi	r25, 0x03	; 3
    328a:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <_ZN7TwoWire5beginEv>
    328e:	6a 81       	ldd	r22, Y+2	; 0x02
    3290:	ce 01       	movw	r24, r28
    3292:	0e 94 32 19 	call	0x3264	; 0x3264 <_ZN5I2CIO11isAvailableEh>
    3296:	8b 83       	std	Y+3, r24	; 0x03
    3298:	88 23       	and	r24, r24
    329a:	29 f0       	breq	.+10     	; 0x32a6 <_ZN5I2CIO5beginEh+0x28>
    329c:	8d ef       	ldi	r24, 0xFD	; 253
    329e:	93 e0       	ldi	r25, 0x03	; 3
    32a0:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_ZN7TwoWire4readEv>
    32a4:	88 83       	st	Y, r24
    32a6:	8b 81       	ldd	r24, Y+3	; 0x03
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	df 91       	pop	r29
    32ac:	cf 91       	pop	r28
    32ae:	08 95       	ret

000032b0 <_ZN5I2CIO5writeEh>:
}

//
// write
int I2CIO::write ( uint8_t value )
{
    32b0:	cf 93       	push	r28
    32b2:	df 93       	push	r29
   int status = 0;
   
   if ( _initialised )
    32b4:	fc 01       	movw	r30, r24
    32b6:	23 81       	ldd	r18, Z+3	; 0x03
    32b8:	22 23       	and	r18, r18
    32ba:	b1 f0       	breq	.+44     	; 0x32e8 <_ZN5I2CIO5writeEh+0x38>
    32bc:	ec 01       	movw	r28, r24
   {
      // Only write HIGH the values of the ports that have been initialised as
      // outputs updating the output shadow of the device
      _shadow = ( value & ~(_dirMask) );
    32be:	81 81       	ldd	r24, Z+1	; 0x01
    32c0:	80 95       	com	r24
    32c2:	68 23       	and	r22, r24
    32c4:	60 83       	st	Z, r22
   
      Wire.beginTransmission ( _i2cAddr );
    32c6:	62 81       	ldd	r22, Z+2	; 0x02
    32c8:	8d ef       	ldi	r24, 0xFD	; 253
    32ca:	93 e0       	ldi	r25, 0x03	; 3
    32cc:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <_ZN7TwoWire17beginTransmissionEh>
#if (ARDUINO <  100)
      Wire.send ( _shadow );
#else
      Wire.write ( _shadow );
    32d0:	68 81       	ld	r22, Y
    32d2:	8d ef       	ldi	r24, 0xFD	; 253
    32d4:	93 e0       	ldi	r25, 0x03	; 3
    32d6:	0e 94 10 16 	call	0x2c20	; 0x2c20 <_ZN7TwoWire5writeEh>
#endif  
      status = Wire.endTransmission ();
    32da:	8d ef       	ldi	r24, 0xFD	; 253
    32dc:	93 e0       	ldi	r25, 0x03	; 3
    32de:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <_ZN7TwoWire15endTransmissionEv>
    32e2:	28 2f       	mov	r18, r24
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	02 c0       	rjmp	.+4      	; 0x32ec <_ZN5I2CIO5writeEh+0x3c>

//
// write
int I2CIO::write ( uint8_t value )
{
   int status = 0;
    32e8:	20 e0       	ldi	r18, 0x00	; 0
    32ea:	30 e0       	ldi	r19, 0x00	; 0
#else
      Wire.write ( _shadow );
#endif  
      status = Wire.endTransmission ();
   }
   return ( (status == 0) );
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	23 2b       	or	r18, r19
    32f2:	11 f0       	breq	.+4      	; 0x32f8 <_ZN5I2CIO5writeEh+0x48>
    32f4:	80 e0       	ldi	r24, 0x00	; 0
    32f6:	90 e0       	ldi	r25, 0x00	; 0
}
    32f8:	df 91       	pop	r29
    32fa:	cf 91       	pop	r28
    32fc:	08 95       	ret

000032fe <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    32fe:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <twi_state>
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <twi_sendStop>
    3308:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <twi_inRepStart>
    330c:	61 e0       	ldi	r22, 0x01	; 1
    330e:	82 e1       	ldi	r24, 0x12	; 18
    3310:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
    3314:	61 e0       	ldi	r22, 0x01	; 1
    3316:	83 e1       	ldi	r24, 0x13	; 19
    3318:	0e 94 3c 18 	call	0x3078	; 0x3078 <digitalWrite>
    331c:	e9 eb       	ldi	r30, 0xB9	; 185
    331e:	f0 e0       	ldi	r31, 0x00	; 0
    3320:	80 81       	ld	r24, Z
    3322:	8e 7f       	andi	r24, 0xFE	; 254
    3324:	80 83       	st	Z, r24
    3326:	80 81       	ld	r24, Z
    3328:	8d 7f       	andi	r24, 0xFD	; 253
    332a:	80 83       	st	Z, r24
    332c:	88 e4       	ldi	r24, 0x48	; 72
    332e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    3332:	85 e4       	ldi	r24, 0x45	; 69
    3334:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3338:	08 95       	ret

0000333a <twi_setFrequency>:
    333a:	9b 01       	movw	r18, r22
    333c:	ac 01       	movw	r20, r24
    333e:	60 e0       	ldi	r22, 0x00	; 0
    3340:	74 e2       	ldi	r23, 0x24	; 36
    3342:	84 ef       	ldi	r24, 0xF4	; 244
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <__udivmodsi4>
    334a:	da 01       	movw	r26, r20
    334c:	c9 01       	movw	r24, r18
    334e:	40 97       	sbiw	r24, 0x10	; 16
    3350:	a1 09       	sbc	r26, r1
    3352:	b1 09       	sbc	r27, r1
    3354:	b6 95       	lsr	r27
    3356:	a7 95       	ror	r26
    3358:	97 95       	ror	r25
    335a:	87 95       	ror	r24
    335c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    3360:	08 95       	ret

00003362 <twi_writeTo>:
    3362:	0f 93       	push	r16
    3364:	41 32       	cpi	r20, 0x21	; 33
    3366:	08 f0       	brcs	.+2      	; 0x336a <twi_writeTo+0x8>
    3368:	4a c0       	rjmp	.+148    	; 0x33fe <twi_writeTo+0x9c>
    336a:	90 91 c5 04 	lds	r25, 0x04C5	; 0x8004c5 <twi_state>
    336e:	91 11       	cpse	r25, r1
    3370:	fc cf       	rjmp	.-8      	; 0x336a <twi_writeTo+0x8>
    3372:	32 e0       	ldi	r19, 0x02	; 2
    3374:	30 93 c5 04 	sts	0x04C5, r19	; 0x8004c5 <twi_state>
    3378:	00 93 c3 04 	sts	0x04C3, r16	; 0x8004c3 <twi_sendStop>
    337c:	3f ef       	ldi	r19, 0xFF	; 255
    337e:	30 93 58 04 	sts	0x0458, r19	; 0x800458 <twi_error>
    3382:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <twi_masterBufferIndex>
    3386:	40 93 9c 04 	sts	0x049C, r20	; 0x80049c <twi_masterBufferLength>
    338a:	56 2f       	mov	r21, r22
    338c:	ae e9       	ldi	r26, 0x9E	; 158
    338e:	b4 e0       	ldi	r27, 0x04	; 4
    3390:	fb 01       	movw	r30, r22
    3392:	3e 2f       	mov	r19, r30
    3394:	35 1b       	sub	r19, r21
    3396:	34 17       	cp	r19, r20
    3398:	18 f4       	brcc	.+6      	; 0x33a0 <twi_writeTo+0x3e>
    339a:	31 91       	ld	r19, Z+
    339c:	3d 93       	st	X+, r19
    339e:	f9 cf       	rjmp	.-14     	; 0x3392 <twi_writeTo+0x30>
    33a0:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <twi_slarw>
    33a4:	30 91 c4 04 	lds	r19, 0x04C4	; 0x8004c4 <twi_slarw>
    33a8:	88 0f       	add	r24, r24
    33aa:	83 2b       	or	r24, r19
    33ac:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <twi_slarw>
    33b0:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <twi_inRepStart>
    33b4:	81 30       	cpi	r24, 0x01	; 1
    33b6:	61 f4       	brne	.+24     	; 0x33d0 <twi_writeTo+0x6e>
    33b8:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <twi_inRepStart>
    33bc:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <twi_slarw>
    33c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    33c4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    33c8:	83 fd       	sbrc	r24, 3
    33ca:	f8 cf       	rjmp	.-16     	; 0x33bc <twi_writeTo+0x5a>
    33cc:	85 ec       	ldi	r24, 0xC5	; 197
    33ce:	01 c0       	rjmp	.+2      	; 0x33d2 <twi_writeTo+0x70>
    33d0:	85 ee       	ldi	r24, 0xE5	; 229
    33d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    33d6:	22 23       	and	r18, r18
    33d8:	21 f0       	breq	.+8      	; 0x33e2 <twi_writeTo+0x80>
    33da:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <twi_state>
    33de:	82 30       	cpi	r24, 0x02	; 2
    33e0:	d1 f3       	breq	.-12     	; 0x33d6 <twi_writeTo+0x74>
    33e2:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <twi_error>
    33e6:	8f 3f       	cpi	r24, 0xFF	; 255
    33e8:	79 f0       	breq	.+30     	; 0x3408 <twi_writeTo+0xa6>
    33ea:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <twi_error>
    33ee:	80 32       	cpi	r24, 0x20	; 32
    33f0:	41 f0       	breq	.+16     	; 0x3402 <twi_writeTo+0xa0>
    33f2:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <twi_error>
    33f6:	80 33       	cpi	r24, 0x30	; 48
    33f8:	31 f0       	breq	.+12     	; 0x3406 <twi_writeTo+0xa4>
    33fa:	94 e0       	ldi	r25, 0x04	; 4
    33fc:	05 c0       	rjmp	.+10     	; 0x3408 <twi_writeTo+0xa6>
    33fe:	91 e0       	ldi	r25, 0x01	; 1
    3400:	03 c0       	rjmp	.+6      	; 0x3408 <twi_writeTo+0xa6>
    3402:	92 e0       	ldi	r25, 0x02	; 2
    3404:	01 c0       	rjmp	.+2      	; 0x3408 <twi_writeTo+0xa6>
    3406:	93 e0       	ldi	r25, 0x03	; 3
    3408:	89 2f       	mov	r24, r25
    340a:	0f 91       	pop	r16
    340c:	08 95       	ret

0000340e <twi_transmit>:
    340e:	40 91 7a 04 	lds	r20, 0x047A	; 0x80047a <twi_txBufferLength>
    3412:	26 2f       	mov	r18, r22
    3414:	30 e0       	ldi	r19, 0x00	; 0
    3416:	24 0f       	add	r18, r20
    3418:	31 1d       	adc	r19, r1
    341a:	21 32       	cpi	r18, 0x21	; 33
    341c:	31 05       	cpc	r19, r1
    341e:	dc f4       	brge	.+54     	; 0x3456 <twi_transmit+0x48>
    3420:	20 91 c5 04 	lds	r18, 0x04C5	; 0x8004c5 <twi_state>
    3424:	24 30       	cpi	r18, 0x04	; 4
    3426:	c9 f4       	brne	.+50     	; 0x345a <twi_transmit+0x4c>
    3428:	fc 01       	movw	r30, r24
    342a:	80 e0       	ldi	r24, 0x00	; 0
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	86 17       	cp	r24, r22
    3430:	58 f4       	brcc	.+22     	; 0x3448 <twi_transmit+0x3a>
    3432:	30 91 7a 04 	lds	r19, 0x047A	; 0x80047a <twi_txBufferLength>
    3436:	21 91       	ld	r18, Z+
    3438:	dc 01       	movw	r26, r24
    343a:	a4 58       	subi	r26, 0x84	; 132
    343c:	bb 4f       	sbci	r27, 0xFB	; 251
    343e:	a3 0f       	add	r26, r19
    3440:	b1 1d       	adc	r27, r1
    3442:	2c 93       	st	X, r18
    3444:	01 96       	adiw	r24, 0x01	; 1
    3446:	f3 cf       	rjmp	.-26     	; 0x342e <twi_transmit+0x20>
    3448:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <twi_txBufferLength>
    344c:	68 0f       	add	r22, r24
    344e:	60 93 7a 04 	sts	0x047A, r22	; 0x80047a <twi_txBufferLength>
    3452:	80 e0       	ldi	r24, 0x00	; 0
    3454:	08 95       	ret
    3456:	81 e0       	ldi	r24, 0x01	; 1
    3458:	08 95       	ret
    345a:	82 e0       	ldi	r24, 0x02	; 2
    345c:	08 95       	ret

0000345e <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    345e:	85 ed       	ldi	r24, 0xD5	; 213
    3460:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3464:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3468:	84 fd       	sbrc	r24, 4
    346a:	fc cf       	rjmp	.-8      	; 0x3464 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    346c:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <twi_state>
    3470:	08 95       	ret

00003472 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3472:	85 ec       	ldi	r24, 0xC5	; 197
    3474:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    3478:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <twi_state>
    347c:	08 95       	ret

0000347e <__vector_24>:
}

ISR(TWI_vect)
{
    347e:	1f 92       	push	r1
    3480:	0f 92       	push	r0
    3482:	0f b6       	in	r0, 0x3f	; 63
    3484:	0f 92       	push	r0
    3486:	11 24       	eor	r1, r1
    3488:	2f 93       	push	r18
    348a:	3f 93       	push	r19
    348c:	4f 93       	push	r20
    348e:	5f 93       	push	r21
    3490:	6f 93       	push	r22
    3492:	7f 93       	push	r23
    3494:	8f 93       	push	r24
    3496:	9f 93       	push	r25
    3498:	af 93       	push	r26
    349a:	bf 93       	push	r27
    349c:	ef 93       	push	r30
    349e:	ff 93       	push	r31
  switch(TW_STATUS){
    34a0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    34a4:	88 7f       	andi	r24, 0xF8	; 248
    34a6:	80 36       	cpi	r24, 0x60	; 96
    34a8:	09 f4       	brne	.+2      	; 0x34ac <__vector_24+0x2e>
    34aa:	9e c0       	rjmp	.+316    	; 0x35e8 <__vector_24+0x16a>
    34ac:	78 f5       	brcc	.+94     	; 0x350c <__vector_24+0x8e>
    34ae:	88 32       	cpi	r24, 0x28	; 40
    34b0:	09 f4       	brne	.+2      	; 0x34b4 <__vector_24+0x36>
    34b2:	5d c0       	rjmp	.+186    	; 0x356e <__vector_24+0xf0>
    34b4:	90 f4       	brcc	.+36     	; 0x34da <__vector_24+0x5c>
    34b6:	80 31       	cpi	r24, 0x10	; 16
    34b8:	09 f4       	brne	.+2      	; 0x34bc <__vector_24+0x3e>
    34ba:	56 c0       	rjmp	.+172    	; 0x3568 <__vector_24+0xea>
    34bc:	38 f4       	brcc	.+14     	; 0x34cc <__vector_24+0x4e>
    34be:	88 23       	and	r24, r24
    34c0:	09 f4       	brne	.+2      	; 0x34c4 <__vector_24+0x46>
    34c2:	f5 c0       	rjmp	.+490    	; 0x36ae <__vector_24+0x230>
    34c4:	88 30       	cpi	r24, 0x08	; 8
    34c6:	09 f4       	brne	.+2      	; 0x34ca <__vector_24+0x4c>
    34c8:	4f c0       	rjmp	.+158    	; 0x3568 <__vector_24+0xea>
    34ca:	f5 c0       	rjmp	.+490    	; 0x36b6 <__vector_24+0x238>
    34cc:	88 31       	cpi	r24, 0x18	; 24
    34ce:	09 f4       	brne	.+2      	; 0x34d2 <__vector_24+0x54>
    34d0:	4e c0       	rjmp	.+156    	; 0x356e <__vector_24+0xf0>
    34d2:	80 32       	cpi	r24, 0x20	; 32
    34d4:	09 f4       	brne	.+2      	; 0x34d8 <__vector_24+0x5a>
    34d6:	5f c0       	rjmp	.+190    	; 0x3596 <__vector_24+0x118>
    34d8:	ee c0       	rjmp	.+476    	; 0x36b6 <__vector_24+0x238>
    34da:	80 34       	cpi	r24, 0x40	; 64
    34dc:	09 f4       	brne	.+2      	; 0x34e0 <__vector_24+0x62>
    34de:	6a c0       	rjmp	.+212    	; 0x35b4 <__vector_24+0x136>
    34e0:	58 f4       	brcc	.+22     	; 0x34f8 <__vector_24+0x7a>
    34e2:	80 33       	cpi	r24, 0x30	; 48
    34e4:	09 f4       	brne	.+2      	; 0x34e8 <__vector_24+0x6a>
    34e6:	57 c0       	rjmp	.+174    	; 0x3596 <__vector_24+0x118>
    34e8:	88 33       	cpi	r24, 0x38	; 56
    34ea:	09 f0       	breq	.+2      	; 0x34ee <__vector_24+0x70>
    34ec:	e4 c0       	rjmp	.+456    	; 0x36b6 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    34ee:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <twi_error>
      twi_releaseBus();
    34f2:	0e 94 39 1a 	call	0x3472	; 0x3472 <twi_releaseBus>
      break;
    34f6:	df c0       	rjmp	.+446    	; 0x36b6 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    34f8:	80 35       	cpi	r24, 0x50	; 80
    34fa:	09 f4       	brne	.+2      	; 0x34fe <__vector_24+0x80>
    34fc:	4f c0       	rjmp	.+158    	; 0x359c <__vector_24+0x11e>
    34fe:	88 35       	cpi	r24, 0x58	; 88
    3500:	09 f4       	brne	.+2      	; 0x3504 <__vector_24+0x86>
    3502:	5d c0       	rjmp	.+186    	; 0x35be <__vector_24+0x140>
    3504:	88 34       	cpi	r24, 0x48	; 72
    3506:	09 f0       	breq	.+2      	; 0x350a <__vector_24+0x8c>
    3508:	d6 c0       	rjmp	.+428    	; 0x36b6 <__vector_24+0x238>
    350a:	d3 c0       	rjmp	.+422    	; 0x36b2 <__vector_24+0x234>
    350c:	88 39       	cpi	r24, 0x98	; 152
    350e:	09 f4       	brne	.+2      	; 0x3512 <__vector_24+0x94>
    3510:	c4 c0       	rjmp	.+392    	; 0x369a <__vector_24+0x21c>
    3512:	a8 f4       	brcc	.+42     	; 0x353e <__vector_24+0xc0>
    3514:	88 37       	cpi	r24, 0x78	; 120
    3516:	09 f4       	brne	.+2      	; 0x351a <__vector_24+0x9c>
    3518:	67 c0       	rjmp	.+206    	; 0x35e8 <__vector_24+0x16a>
    351a:	38 f4       	brcc	.+14     	; 0x352a <__vector_24+0xac>
    351c:	88 36       	cpi	r24, 0x68	; 104
    351e:	09 f4       	brne	.+2      	; 0x3522 <__vector_24+0xa4>
    3520:	63 c0       	rjmp	.+198    	; 0x35e8 <__vector_24+0x16a>
    3522:	80 37       	cpi	r24, 0x70	; 112
    3524:	09 f4       	brne	.+2      	; 0x3528 <__vector_24+0xaa>
    3526:	60 c0       	rjmp	.+192    	; 0x35e8 <__vector_24+0x16a>
    3528:	c6 c0       	rjmp	.+396    	; 0x36b6 <__vector_24+0x238>
    352a:	88 38       	cpi	r24, 0x88	; 136
    352c:	09 f4       	brne	.+2      	; 0x3530 <__vector_24+0xb2>
    352e:	b5 c0       	rjmp	.+362    	; 0x369a <__vector_24+0x21c>
    3530:	80 39       	cpi	r24, 0x90	; 144
    3532:	09 f4       	brne	.+2      	; 0x3536 <__vector_24+0xb8>
    3534:	5f c0       	rjmp	.+190    	; 0x35f4 <__vector_24+0x176>
    3536:	80 38       	cpi	r24, 0x80	; 128
    3538:	09 f0       	breq	.+2      	; 0x353c <__vector_24+0xbe>
    353a:	bd c0       	rjmp	.+378    	; 0x36b6 <__vector_24+0x238>
    353c:	5b c0       	rjmp	.+182    	; 0x35f4 <__vector_24+0x176>
    353e:	80 3b       	cpi	r24, 0xB0	; 176
    3540:	09 f4       	brne	.+2      	; 0x3544 <__vector_24+0xc6>
    3542:	83 c0       	rjmp	.+262    	; 0x364a <__vector_24+0x1cc>
    3544:	38 f4       	brcc	.+14     	; 0x3554 <__vector_24+0xd6>
    3546:	80 3a       	cpi	r24, 0xA0	; 160
    3548:	09 f4       	brne	.+2      	; 0x354c <__vector_24+0xce>
    354a:	66 c0       	rjmp	.+204    	; 0x3618 <__vector_24+0x19a>
    354c:	88 3a       	cpi	r24, 0xA8	; 168
    354e:	09 f4       	brne	.+2      	; 0x3552 <__vector_24+0xd4>
    3550:	7c c0       	rjmp	.+248    	; 0x364a <__vector_24+0x1cc>
    3552:	b1 c0       	rjmp	.+354    	; 0x36b6 <__vector_24+0x238>
    3554:	80 3c       	cpi	r24, 0xC0	; 192
    3556:	09 f4       	brne	.+2      	; 0x355a <__vector_24+0xdc>
    3558:	a4 c0       	rjmp	.+328    	; 0x36a2 <__vector_24+0x224>
    355a:	88 3c       	cpi	r24, 0xC8	; 200
    355c:	09 f4       	brne	.+2      	; 0x3560 <__vector_24+0xe2>
    355e:	a1 c0       	rjmp	.+322    	; 0x36a2 <__vector_24+0x224>
    3560:	88 3b       	cpi	r24, 0xB8	; 184
    3562:	09 f4       	brne	.+2      	; 0x3566 <__vector_24+0xe8>
    3564:	87 c0       	rjmp	.+270    	; 0x3674 <__vector_24+0x1f6>
    3566:	a7 c0       	rjmp	.+334    	; 0x36b6 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3568:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <twi_slarw>
    356c:	10 c0       	rjmp	.+32     	; 0x358e <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    356e:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <twi_masterBufferIndex>
    3572:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <twi_masterBufferLength>
    3576:	98 17       	cp	r25, r24
    3578:	70 f5       	brcc	.+92     	; 0x35d6 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    357a:	e0 91 9d 04 	lds	r30, 0x049D	; 0x80049d <twi_masterBufferIndex>
    357e:	81 e0       	ldi	r24, 0x01	; 1
    3580:	8e 0f       	add	r24, r30
    3582:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <twi_masterBufferIndex>
    3586:	f0 e0       	ldi	r31, 0x00	; 0
    3588:	e2 56       	subi	r30, 0x62	; 98
    358a:	fb 4f       	sbci	r31, 0xFB	; 251
    358c:	80 81       	ld	r24, Z
    358e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3592:	85 ec       	ldi	r24, 0xC5	; 197
    3594:	83 c0       	rjmp	.+262    	; 0x369c <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3596:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <twi_error>
    359a:	8b c0       	rjmp	.+278    	; 0x36b2 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    359c:	e0 91 9d 04 	lds	r30, 0x049D	; 0x80049d <twi_masterBufferIndex>
    35a0:	81 e0       	ldi	r24, 0x01	; 1
    35a2:	8e 0f       	add	r24, r30
    35a4:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <twi_masterBufferIndex>
    35a8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    35ac:	f0 e0       	ldi	r31, 0x00	; 0
    35ae:	e2 56       	subi	r30, 0x62	; 98
    35b0:	fb 4f       	sbci	r31, 0xFB	; 251
    35b2:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    35b4:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <twi_masterBufferIndex>
    35b8:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <twi_masterBufferLength>
    35bc:	6b c0       	rjmp	.+214    	; 0x3694 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    35be:	e0 91 9d 04 	lds	r30, 0x049D	; 0x80049d <twi_masterBufferIndex>
    35c2:	81 e0       	ldi	r24, 0x01	; 1
    35c4:	8e 0f       	add	r24, r30
    35c6:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <twi_masterBufferIndex>
    35ca:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    35ce:	f0 e0       	ldi	r31, 0x00	; 0
    35d0:	e2 56       	subi	r30, 0x62	; 98
    35d2:	fb 4f       	sbci	r31, 0xFB	; 251
    35d4:	80 83       	st	Z, r24
	if (twi_sendStop)
    35d6:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <twi_sendStop>
    35da:	81 11       	cpse	r24, r1
    35dc:	6a c0       	rjmp	.+212    	; 0x36b2 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    35de:	81 e0       	ldi	r24, 0x01	; 1
    35e0:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    35e4:	84 ea       	ldi	r24, 0xA4	; 164
    35e6:	5e c0       	rjmp	.+188    	; 0x36a4 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    35e8:	83 e0       	ldi	r24, 0x03	; 3
    35ea:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    35ee:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <twi_rxBufferIndex>
    35f2:	cf cf       	rjmp	.-98     	; 0x3592 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    35f4:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <twi_rxBufferIndex>
    35f8:	80 32       	cpi	r24, 0x20	; 32
    35fa:	08 f0       	brcs	.+2      	; 0x35fe <__vector_24+0x180>
    35fc:	4e c0       	rjmp	.+156    	; 0x369a <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    35fe:	e0 91 59 04 	lds	r30, 0x0459	; 0x800459 <twi_rxBufferIndex>
    3602:	81 e0       	ldi	r24, 0x01	; 1
    3604:	8e 0f       	add	r24, r30
    3606:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <twi_rxBufferIndex>
    360a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    360e:	f0 e0       	ldi	r31, 0x00	; 0
    3610:	e6 5a       	subi	r30, 0xA6	; 166
    3612:	fb 4f       	sbci	r31, 0xFB	; 251
    3614:	80 83       	st	Z, r24
    3616:	bd cf       	rjmp	.-134    	; 0x3592 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3618:	0e 94 39 1a 	call	0x3472	; 0x3472 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    361c:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <twi_rxBufferIndex>
    3620:	80 32       	cpi	r24, 0x20	; 32
    3622:	30 f4       	brcc	.+12     	; 0x3630 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3624:	e0 91 59 04 	lds	r30, 0x0459	; 0x800459 <twi_rxBufferIndex>
    3628:	f0 e0       	ldi	r31, 0x00	; 0
    362a:	e6 5a       	subi	r30, 0xA6	; 166
    362c:	fb 4f       	sbci	r31, 0xFB	; 251
    362e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3630:	60 91 59 04 	lds	r22, 0x0459	; 0x800459 <twi_rxBufferIndex>
    3634:	70 e0       	ldi	r23, 0x00	; 0
    3636:	e0 91 be 04 	lds	r30, 0x04BE	; 0x8004be <twi_onSlaveReceive>
    363a:	f0 91 bf 04 	lds	r31, 0x04BF	; 0x8004bf <twi_onSlaveReceive+0x1>
    363e:	8a e5       	ldi	r24, 0x5A	; 90
    3640:	94 e0       	ldi	r25, 0x04	; 4
    3642:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3644:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <twi_rxBufferIndex>
      break;
    3648:	36 c0       	rjmp	.+108    	; 0x36b6 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    364a:	84 e0       	ldi	r24, 0x04	; 4
    364c:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3650:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3654:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3658:	e0 91 c0 04 	lds	r30, 0x04C0	; 0x8004c0 <twi_onSlaveTransmit>
    365c:	f0 91 c1 04 	lds	r31, 0x04C1	; 0x8004c1 <twi_onSlaveTransmit+0x1>
    3660:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3662:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <twi_txBufferLength>
    3666:	81 11       	cpse	r24, r1
    3668:	05 c0       	rjmp	.+10     	; 0x3674 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    366a:	81 e0       	ldi	r24, 0x01	; 1
    366c:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    3670:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3674:	e0 91 7b 04 	lds	r30, 0x047B	; 0x80047b <twi_txBufferIndex>
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	8e 0f       	add	r24, r30
    367c:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <twi_txBufferIndex>
    3680:	f0 e0       	ldi	r31, 0x00	; 0
    3682:	e4 58       	subi	r30, 0x84	; 132
    3684:	fb 4f       	sbci	r31, 0xFB	; 251
    3686:	80 81       	ld	r24, Z
    3688:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    368c:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <twi_txBufferIndex>
    3690:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <twi_txBufferLength>
    3694:	98 17       	cp	r25, r24
    3696:	08 f4       	brcc	.+2      	; 0x369a <__vector_24+0x21c>
    3698:	7c cf       	rjmp	.-264    	; 0x3592 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    369a:	85 e8       	ldi	r24, 0x85	; 133
    369c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    36a0:	0a c0       	rjmp	.+20     	; 0x36b6 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    36a2:	85 ec       	ldi	r24, 0xC5	; 197
    36a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    36a8:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <twi_state>
      break;
    36ac:	04 c0       	rjmp	.+8      	; 0x36b6 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    36ae:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <twi_error>
      twi_stop();
    36b2:	0e 94 2f 1a 	call	0x345e	; 0x345e <twi_stop>
      break;
  }
}
    36b6:	ff 91       	pop	r31
    36b8:	ef 91       	pop	r30
    36ba:	bf 91       	pop	r27
    36bc:	af 91       	pop	r26
    36be:	9f 91       	pop	r25
    36c0:	8f 91       	pop	r24
    36c2:	7f 91       	pop	r23
    36c4:	6f 91       	pop	r22
    36c6:	5f 91       	pop	r21
    36c8:	4f 91       	pop	r20
    36ca:	3f 91       	pop	r19
    36cc:	2f 91       	pop	r18
    36ce:	0f 90       	pop	r0
    36d0:	0f be       	out	0x3f, r0	; 63
    36d2:	0f 90       	pop	r0
    36d4:	1f 90       	pop	r1
    36d6:	18 95       	reti

000036d8 <__udivmodsi4>:
    36d8:	a1 e2       	ldi	r26, 0x21	; 33
    36da:	1a 2e       	mov	r1, r26
    36dc:	aa 1b       	sub	r26, r26
    36de:	bb 1b       	sub	r27, r27
    36e0:	fd 01       	movw	r30, r26
    36e2:	0d c0       	rjmp	.+26     	; 0x36fe <__udivmodsi4_ep>

000036e4 <__udivmodsi4_loop>:
    36e4:	aa 1f       	adc	r26, r26
    36e6:	bb 1f       	adc	r27, r27
    36e8:	ee 1f       	adc	r30, r30
    36ea:	ff 1f       	adc	r31, r31
    36ec:	a2 17       	cp	r26, r18
    36ee:	b3 07       	cpc	r27, r19
    36f0:	e4 07       	cpc	r30, r20
    36f2:	f5 07       	cpc	r31, r21
    36f4:	20 f0       	brcs	.+8      	; 0x36fe <__udivmodsi4_ep>
    36f6:	a2 1b       	sub	r26, r18
    36f8:	b3 0b       	sbc	r27, r19
    36fa:	e4 0b       	sbc	r30, r20
    36fc:	f5 0b       	sbc	r31, r21

000036fe <__udivmodsi4_ep>:
    36fe:	66 1f       	adc	r22, r22
    3700:	77 1f       	adc	r23, r23
    3702:	88 1f       	adc	r24, r24
    3704:	99 1f       	adc	r25, r25
    3706:	1a 94       	dec	r1
    3708:	69 f7       	brne	.-38     	; 0x36e4 <__udivmodsi4_loop>
    370a:	60 95       	com	r22
    370c:	70 95       	com	r23
    370e:	80 95       	com	r24
    3710:	90 95       	com	r25
    3712:	9b 01       	movw	r18, r22
    3714:	ac 01       	movw	r20, r24
    3716:	bd 01       	movw	r22, r26
    3718:	cf 01       	movw	r24, r30
    371a:	08 95       	ret

0000371c <__tablejump2__>:
    371c:	ee 0f       	add	r30, r30
    371e:	ff 1f       	adc	r31, r31
    3720:	05 90       	lpm	r0, Z+
    3722:	f4 91       	lpm	r31, Z
    3724:	e0 2d       	mov	r30, r0
    3726:	09 94       	ijmp

00003728 <malloc>:
    3728:	0f 93       	push	r16
    372a:	1f 93       	push	r17
    372c:	cf 93       	push	r28
    372e:	df 93       	push	r29
    3730:	82 30       	cpi	r24, 0x02	; 2
    3732:	91 05       	cpc	r25, r1
    3734:	10 f4       	brcc	.+4      	; 0x373a <malloc+0x12>
    3736:	82 e0       	ldi	r24, 0x02	; 2
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	e0 91 c8 04 	lds	r30, 0x04C8	; 0x8004c8 <__flp>
    373e:	f0 91 c9 04 	lds	r31, 0x04C9	; 0x8004c9 <__flp+0x1>
    3742:	20 e0       	ldi	r18, 0x00	; 0
    3744:	30 e0       	ldi	r19, 0x00	; 0
    3746:	a0 e0       	ldi	r26, 0x00	; 0
    3748:	b0 e0       	ldi	r27, 0x00	; 0
    374a:	30 97       	sbiw	r30, 0x00	; 0
    374c:	19 f1       	breq	.+70     	; 0x3794 <malloc+0x6c>
    374e:	40 81       	ld	r20, Z
    3750:	51 81       	ldd	r21, Z+1	; 0x01
    3752:	02 81       	ldd	r16, Z+2	; 0x02
    3754:	13 81       	ldd	r17, Z+3	; 0x03
    3756:	48 17       	cp	r20, r24
    3758:	59 07       	cpc	r21, r25
    375a:	c8 f0       	brcs	.+50     	; 0x378e <malloc+0x66>
    375c:	84 17       	cp	r24, r20
    375e:	95 07       	cpc	r25, r21
    3760:	69 f4       	brne	.+26     	; 0x377c <malloc+0x54>
    3762:	10 97       	sbiw	r26, 0x00	; 0
    3764:	31 f0       	breq	.+12     	; 0x3772 <malloc+0x4a>
    3766:	12 96       	adiw	r26, 0x02	; 2
    3768:	0c 93       	st	X, r16
    376a:	12 97       	sbiw	r26, 0x02	; 2
    376c:	13 96       	adiw	r26, 0x03	; 3
    376e:	1c 93       	st	X, r17
    3770:	27 c0       	rjmp	.+78     	; 0x37c0 <malloc+0x98>
    3772:	00 93 c8 04 	sts	0x04C8, r16	; 0x8004c8 <__flp>
    3776:	10 93 c9 04 	sts	0x04C9, r17	; 0x8004c9 <__flp+0x1>
    377a:	22 c0       	rjmp	.+68     	; 0x37c0 <malloc+0x98>
    377c:	21 15       	cp	r18, r1
    377e:	31 05       	cpc	r19, r1
    3780:	19 f0       	breq	.+6      	; 0x3788 <malloc+0x60>
    3782:	42 17       	cp	r20, r18
    3784:	53 07       	cpc	r21, r19
    3786:	18 f4       	brcc	.+6      	; 0x378e <malloc+0x66>
    3788:	9a 01       	movw	r18, r20
    378a:	bd 01       	movw	r22, r26
    378c:	ef 01       	movw	r28, r30
    378e:	df 01       	movw	r26, r30
    3790:	f8 01       	movw	r30, r16
    3792:	db cf       	rjmp	.-74     	; 0x374a <malloc+0x22>
    3794:	21 15       	cp	r18, r1
    3796:	31 05       	cpc	r19, r1
    3798:	f9 f0       	breq	.+62     	; 0x37d8 <malloc+0xb0>
    379a:	28 1b       	sub	r18, r24
    379c:	39 0b       	sbc	r19, r25
    379e:	24 30       	cpi	r18, 0x04	; 4
    37a0:	31 05       	cpc	r19, r1
    37a2:	80 f4       	brcc	.+32     	; 0x37c4 <malloc+0x9c>
    37a4:	8a 81       	ldd	r24, Y+2	; 0x02
    37a6:	9b 81       	ldd	r25, Y+3	; 0x03
    37a8:	61 15       	cp	r22, r1
    37aa:	71 05       	cpc	r23, r1
    37ac:	21 f0       	breq	.+8      	; 0x37b6 <malloc+0x8e>
    37ae:	fb 01       	movw	r30, r22
    37b0:	93 83       	std	Z+3, r25	; 0x03
    37b2:	82 83       	std	Z+2, r24	; 0x02
    37b4:	04 c0       	rjmp	.+8      	; 0x37be <malloc+0x96>
    37b6:	90 93 c9 04 	sts	0x04C9, r25	; 0x8004c9 <__flp+0x1>
    37ba:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <__flp>
    37be:	fe 01       	movw	r30, r28
    37c0:	32 96       	adiw	r30, 0x02	; 2
    37c2:	44 c0       	rjmp	.+136    	; 0x384c <malloc+0x124>
    37c4:	fe 01       	movw	r30, r28
    37c6:	e2 0f       	add	r30, r18
    37c8:	f3 1f       	adc	r31, r19
    37ca:	81 93       	st	Z+, r24
    37cc:	91 93       	st	Z+, r25
    37ce:	22 50       	subi	r18, 0x02	; 2
    37d0:	31 09       	sbc	r19, r1
    37d2:	39 83       	std	Y+1, r19	; 0x01
    37d4:	28 83       	st	Y, r18
    37d6:	3a c0       	rjmp	.+116    	; 0x384c <malloc+0x124>
    37d8:	20 91 c6 04 	lds	r18, 0x04C6	; 0x8004c6 <__brkval>
    37dc:	30 91 c7 04 	lds	r19, 0x04C7	; 0x8004c7 <__brkval+0x1>
    37e0:	23 2b       	or	r18, r19
    37e2:	41 f4       	brne	.+16     	; 0x37f4 <malloc+0xcc>
    37e4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    37e8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    37ec:	30 93 c7 04 	sts	0x04C7, r19	; 0x8004c7 <__brkval+0x1>
    37f0:	20 93 c6 04 	sts	0x04C6, r18	; 0x8004c6 <__brkval>
    37f4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    37f8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    37fc:	21 15       	cp	r18, r1
    37fe:	31 05       	cpc	r19, r1
    3800:	41 f4       	brne	.+16     	; 0x3812 <malloc+0xea>
    3802:	2d b7       	in	r18, 0x3d	; 61
    3804:	3e b7       	in	r19, 0x3e	; 62
    3806:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    380a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    380e:	24 1b       	sub	r18, r20
    3810:	35 0b       	sbc	r19, r21
    3812:	e0 91 c6 04 	lds	r30, 0x04C6	; 0x8004c6 <__brkval>
    3816:	f0 91 c7 04 	lds	r31, 0x04C7	; 0x8004c7 <__brkval+0x1>
    381a:	e2 17       	cp	r30, r18
    381c:	f3 07       	cpc	r31, r19
    381e:	a0 f4       	brcc	.+40     	; 0x3848 <malloc+0x120>
    3820:	2e 1b       	sub	r18, r30
    3822:	3f 0b       	sbc	r19, r31
    3824:	28 17       	cp	r18, r24
    3826:	39 07       	cpc	r19, r25
    3828:	78 f0       	brcs	.+30     	; 0x3848 <malloc+0x120>
    382a:	ac 01       	movw	r20, r24
    382c:	4e 5f       	subi	r20, 0xFE	; 254
    382e:	5f 4f       	sbci	r21, 0xFF	; 255
    3830:	24 17       	cp	r18, r20
    3832:	35 07       	cpc	r19, r21
    3834:	48 f0       	brcs	.+18     	; 0x3848 <malloc+0x120>
    3836:	4e 0f       	add	r20, r30
    3838:	5f 1f       	adc	r21, r31
    383a:	50 93 c7 04 	sts	0x04C7, r21	; 0x8004c7 <__brkval+0x1>
    383e:	40 93 c6 04 	sts	0x04C6, r20	; 0x8004c6 <__brkval>
    3842:	81 93       	st	Z+, r24
    3844:	91 93       	st	Z+, r25
    3846:	02 c0       	rjmp	.+4      	; 0x384c <malloc+0x124>
    3848:	e0 e0       	ldi	r30, 0x00	; 0
    384a:	f0 e0       	ldi	r31, 0x00	; 0
    384c:	cf 01       	movw	r24, r30
    384e:	df 91       	pop	r29
    3850:	cf 91       	pop	r28
    3852:	1f 91       	pop	r17
    3854:	0f 91       	pop	r16
    3856:	08 95       	ret

00003858 <free>:
    3858:	cf 93       	push	r28
    385a:	df 93       	push	r29
    385c:	00 97       	sbiw	r24, 0x00	; 0
    385e:	09 f4       	brne	.+2      	; 0x3862 <free+0xa>
    3860:	81 c0       	rjmp	.+258    	; 0x3964 <free+0x10c>
    3862:	fc 01       	movw	r30, r24
    3864:	32 97       	sbiw	r30, 0x02	; 2
    3866:	13 82       	std	Z+3, r1	; 0x03
    3868:	12 82       	std	Z+2, r1	; 0x02
    386a:	a0 91 c8 04 	lds	r26, 0x04C8	; 0x8004c8 <__flp>
    386e:	b0 91 c9 04 	lds	r27, 0x04C9	; 0x8004c9 <__flp+0x1>
    3872:	10 97       	sbiw	r26, 0x00	; 0
    3874:	81 f4       	brne	.+32     	; 0x3896 <free+0x3e>
    3876:	20 81       	ld	r18, Z
    3878:	31 81       	ldd	r19, Z+1	; 0x01
    387a:	82 0f       	add	r24, r18
    387c:	93 1f       	adc	r25, r19
    387e:	20 91 c6 04 	lds	r18, 0x04C6	; 0x8004c6 <__brkval>
    3882:	30 91 c7 04 	lds	r19, 0x04C7	; 0x8004c7 <__brkval+0x1>
    3886:	28 17       	cp	r18, r24
    3888:	39 07       	cpc	r19, r25
    388a:	51 f5       	brne	.+84     	; 0x38e0 <free+0x88>
    388c:	f0 93 c7 04 	sts	0x04C7, r31	; 0x8004c7 <__brkval+0x1>
    3890:	e0 93 c6 04 	sts	0x04C6, r30	; 0x8004c6 <__brkval>
    3894:	67 c0       	rjmp	.+206    	; 0x3964 <free+0x10c>
    3896:	ed 01       	movw	r28, r26
    3898:	20 e0       	ldi	r18, 0x00	; 0
    389a:	30 e0       	ldi	r19, 0x00	; 0
    389c:	ce 17       	cp	r28, r30
    389e:	df 07       	cpc	r29, r31
    38a0:	40 f4       	brcc	.+16     	; 0x38b2 <free+0x5a>
    38a2:	4a 81       	ldd	r20, Y+2	; 0x02
    38a4:	5b 81       	ldd	r21, Y+3	; 0x03
    38a6:	9e 01       	movw	r18, r28
    38a8:	41 15       	cp	r20, r1
    38aa:	51 05       	cpc	r21, r1
    38ac:	f1 f0       	breq	.+60     	; 0x38ea <free+0x92>
    38ae:	ea 01       	movw	r28, r20
    38b0:	f5 cf       	rjmp	.-22     	; 0x389c <free+0x44>
    38b2:	d3 83       	std	Z+3, r29	; 0x03
    38b4:	c2 83       	std	Z+2, r28	; 0x02
    38b6:	40 81       	ld	r20, Z
    38b8:	51 81       	ldd	r21, Z+1	; 0x01
    38ba:	84 0f       	add	r24, r20
    38bc:	95 1f       	adc	r25, r21
    38be:	c8 17       	cp	r28, r24
    38c0:	d9 07       	cpc	r29, r25
    38c2:	59 f4       	brne	.+22     	; 0x38da <free+0x82>
    38c4:	88 81       	ld	r24, Y
    38c6:	99 81       	ldd	r25, Y+1	; 0x01
    38c8:	84 0f       	add	r24, r20
    38ca:	95 1f       	adc	r25, r21
    38cc:	02 96       	adiw	r24, 0x02	; 2
    38ce:	91 83       	std	Z+1, r25	; 0x01
    38d0:	80 83       	st	Z, r24
    38d2:	8a 81       	ldd	r24, Y+2	; 0x02
    38d4:	9b 81       	ldd	r25, Y+3	; 0x03
    38d6:	93 83       	std	Z+3, r25	; 0x03
    38d8:	82 83       	std	Z+2, r24	; 0x02
    38da:	21 15       	cp	r18, r1
    38dc:	31 05       	cpc	r19, r1
    38de:	29 f4       	brne	.+10     	; 0x38ea <free+0x92>
    38e0:	f0 93 c9 04 	sts	0x04C9, r31	; 0x8004c9 <__flp+0x1>
    38e4:	e0 93 c8 04 	sts	0x04C8, r30	; 0x8004c8 <__flp>
    38e8:	3d c0       	rjmp	.+122    	; 0x3964 <free+0x10c>
    38ea:	e9 01       	movw	r28, r18
    38ec:	fb 83       	std	Y+3, r31	; 0x03
    38ee:	ea 83       	std	Y+2, r30	; 0x02
    38f0:	49 91       	ld	r20, Y+
    38f2:	59 91       	ld	r21, Y+
    38f4:	c4 0f       	add	r28, r20
    38f6:	d5 1f       	adc	r29, r21
    38f8:	ec 17       	cp	r30, r28
    38fa:	fd 07       	cpc	r31, r29
    38fc:	61 f4       	brne	.+24     	; 0x3916 <free+0xbe>
    38fe:	80 81       	ld	r24, Z
    3900:	91 81       	ldd	r25, Z+1	; 0x01
    3902:	84 0f       	add	r24, r20
    3904:	95 1f       	adc	r25, r21
    3906:	02 96       	adiw	r24, 0x02	; 2
    3908:	e9 01       	movw	r28, r18
    390a:	99 83       	std	Y+1, r25	; 0x01
    390c:	88 83       	st	Y, r24
    390e:	82 81       	ldd	r24, Z+2	; 0x02
    3910:	93 81       	ldd	r25, Z+3	; 0x03
    3912:	9b 83       	std	Y+3, r25	; 0x03
    3914:	8a 83       	std	Y+2, r24	; 0x02
    3916:	e0 e0       	ldi	r30, 0x00	; 0
    3918:	f0 e0       	ldi	r31, 0x00	; 0
    391a:	12 96       	adiw	r26, 0x02	; 2
    391c:	8d 91       	ld	r24, X+
    391e:	9c 91       	ld	r25, X
    3920:	13 97       	sbiw	r26, 0x03	; 3
    3922:	00 97       	sbiw	r24, 0x00	; 0
    3924:	19 f0       	breq	.+6      	; 0x392c <free+0xd4>
    3926:	fd 01       	movw	r30, r26
    3928:	dc 01       	movw	r26, r24
    392a:	f7 cf       	rjmp	.-18     	; 0x391a <free+0xc2>
    392c:	8d 91       	ld	r24, X+
    392e:	9c 91       	ld	r25, X
    3930:	11 97       	sbiw	r26, 0x01	; 1
    3932:	9d 01       	movw	r18, r26
    3934:	2e 5f       	subi	r18, 0xFE	; 254
    3936:	3f 4f       	sbci	r19, 0xFF	; 255
    3938:	82 0f       	add	r24, r18
    393a:	93 1f       	adc	r25, r19
    393c:	20 91 c6 04 	lds	r18, 0x04C6	; 0x8004c6 <__brkval>
    3940:	30 91 c7 04 	lds	r19, 0x04C7	; 0x8004c7 <__brkval+0x1>
    3944:	28 17       	cp	r18, r24
    3946:	39 07       	cpc	r19, r25
    3948:	69 f4       	brne	.+26     	; 0x3964 <free+0x10c>
    394a:	30 97       	sbiw	r30, 0x00	; 0
    394c:	29 f4       	brne	.+10     	; 0x3958 <free+0x100>
    394e:	10 92 c9 04 	sts	0x04C9, r1	; 0x8004c9 <__flp+0x1>
    3952:	10 92 c8 04 	sts	0x04C8, r1	; 0x8004c8 <__flp>
    3956:	02 c0       	rjmp	.+4      	; 0x395c <free+0x104>
    3958:	13 82       	std	Z+3, r1	; 0x03
    395a:	12 82       	std	Z+2, r1	; 0x02
    395c:	b0 93 c7 04 	sts	0x04C7, r27	; 0x8004c7 <__brkval+0x1>
    3960:	a0 93 c6 04 	sts	0x04C6, r26	; 0x8004c6 <__brkval>
    3964:	df 91       	pop	r29
    3966:	cf 91       	pop	r28
    3968:	08 95       	ret

0000396a <realloc>:
    396a:	a0 e0       	ldi	r26, 0x00	; 0
    396c:	b0 e0       	ldi	r27, 0x00	; 0
    396e:	eb eb       	ldi	r30, 0xBB	; 187
    3970:	fc e1       	ldi	r31, 0x1C	; 28
    3972:	0c 94 df 1d 	jmp	0x3bbe	; 0x3bbe <__prologue_saves__+0x8>
    3976:	ec 01       	movw	r28, r24
    3978:	00 97       	sbiw	r24, 0x00	; 0
    397a:	21 f4       	brne	.+8      	; 0x3984 <realloc+0x1a>
    397c:	cb 01       	movw	r24, r22
    397e:	0e 94 94 1b 	call	0x3728	; 0x3728 <malloc>
    3982:	b4 c0       	rjmp	.+360    	; 0x3aec <realloc+0x182>
    3984:	fc 01       	movw	r30, r24
    3986:	e6 0f       	add	r30, r22
    3988:	f7 1f       	adc	r31, r23
    398a:	9c 01       	movw	r18, r24
    398c:	22 50       	subi	r18, 0x02	; 2
    398e:	31 09       	sbc	r19, r1
    3990:	e2 17       	cp	r30, r18
    3992:	f3 07       	cpc	r31, r19
    3994:	08 f4       	brcc	.+2      	; 0x3998 <realloc+0x2e>
    3996:	a8 c0       	rjmp	.+336    	; 0x3ae8 <realloc+0x17e>
    3998:	d9 01       	movw	r26, r18
    399a:	0d 91       	ld	r16, X+
    399c:	1c 91       	ld	r17, X
    399e:	11 97       	sbiw	r26, 0x01	; 1
    39a0:	06 17       	cp	r16, r22
    39a2:	17 07       	cpc	r17, r23
    39a4:	b0 f0       	brcs	.+44     	; 0x39d2 <realloc+0x68>
    39a6:	05 30       	cpi	r16, 0x05	; 5
    39a8:	11 05       	cpc	r17, r1
    39aa:	08 f4       	brcc	.+2      	; 0x39ae <realloc+0x44>
    39ac:	9b c0       	rjmp	.+310    	; 0x3ae4 <realloc+0x17a>
    39ae:	c8 01       	movw	r24, r16
    39b0:	04 97       	sbiw	r24, 0x04	; 4
    39b2:	86 17       	cp	r24, r22
    39b4:	97 07       	cpc	r25, r23
    39b6:	08 f4       	brcc	.+2      	; 0x39ba <realloc+0x50>
    39b8:	95 c0       	rjmp	.+298    	; 0x3ae4 <realloc+0x17a>
    39ba:	02 50       	subi	r16, 0x02	; 2
    39bc:	11 09       	sbc	r17, r1
    39be:	06 1b       	sub	r16, r22
    39c0:	17 0b       	sbc	r17, r23
    39c2:	01 93       	st	Z+, r16
    39c4:	11 93       	st	Z+, r17
    39c6:	6d 93       	st	X+, r22
    39c8:	7c 93       	st	X, r23
    39ca:	cf 01       	movw	r24, r30
    39cc:	0e 94 2c 1c 	call	0x3858	; 0x3858 <free>
    39d0:	89 c0       	rjmp	.+274    	; 0x3ae4 <realloc+0x17a>
    39d2:	5b 01       	movw	r10, r22
    39d4:	a0 1a       	sub	r10, r16
    39d6:	b1 0a       	sbc	r11, r17
    39d8:	4c 01       	movw	r8, r24
    39da:	80 0e       	add	r8, r16
    39dc:	91 1e       	adc	r9, r17
    39de:	a0 91 c8 04 	lds	r26, 0x04C8	; 0x8004c8 <__flp>
    39e2:	b0 91 c9 04 	lds	r27, 0x04C9	; 0x8004c9 <__flp+0x1>
    39e6:	61 2c       	mov	r6, r1
    39e8:	71 2c       	mov	r7, r1
    39ea:	e1 2c       	mov	r14, r1
    39ec:	f1 2c       	mov	r15, r1
    39ee:	10 97       	sbiw	r26, 0x00	; 0
    39f0:	09 f4       	brne	.+2      	; 0x39f4 <realloc+0x8a>
    39f2:	46 c0       	rjmp	.+140    	; 0x3a80 <realloc+0x116>
    39f4:	8d 91       	ld	r24, X+
    39f6:	9c 91       	ld	r25, X
    39f8:	11 97       	sbiw	r26, 0x01	; 1
    39fa:	a8 15       	cp	r26, r8
    39fc:	b9 05       	cpc	r27, r9
    39fe:	b1 f5       	brne	.+108    	; 0x3a6c <realloc+0x102>
    3a00:	6c 01       	movw	r12, r24
    3a02:	42 e0       	ldi	r20, 0x02	; 2
    3a04:	c4 0e       	add	r12, r20
    3a06:	d1 1c       	adc	r13, r1
    3a08:	ca 14       	cp	r12, r10
    3a0a:	db 04       	cpc	r13, r11
    3a0c:	78 f1       	brcs	.+94     	; 0x3a6c <realloc+0x102>
    3a0e:	4c 01       	movw	r8, r24
    3a10:	8a 18       	sub	r8, r10
    3a12:	9b 08       	sbc	r9, r11
    3a14:	64 01       	movw	r12, r8
    3a16:	42 e0       	ldi	r20, 0x02	; 2
    3a18:	c4 0e       	add	r12, r20
    3a1a:	d1 1c       	adc	r13, r1
    3a1c:	12 96       	adiw	r26, 0x02	; 2
    3a1e:	bc 90       	ld	r11, X
    3a20:	12 97       	sbiw	r26, 0x02	; 2
    3a22:	13 96       	adiw	r26, 0x03	; 3
    3a24:	ac 91       	ld	r26, X
    3a26:	b5 e0       	ldi	r27, 0x05	; 5
    3a28:	cb 16       	cp	r12, r27
    3a2a:	d1 04       	cpc	r13, r1
    3a2c:	40 f0       	brcs	.+16     	; 0x3a3e <realloc+0xd4>
    3a2e:	b2 82       	std	Z+2, r11	; 0x02
    3a30:	a3 83       	std	Z+3, r26	; 0x03
    3a32:	91 82       	std	Z+1, r9	; 0x01
    3a34:	80 82       	st	Z, r8
    3a36:	d9 01       	movw	r26, r18
    3a38:	6d 93       	st	X+, r22
    3a3a:	7c 93       	st	X, r23
    3a3c:	09 c0       	rjmp	.+18     	; 0x3a50 <realloc+0xe6>
    3a3e:	0e 5f       	subi	r16, 0xFE	; 254
    3a40:	1f 4f       	sbci	r17, 0xFF	; 255
    3a42:	80 0f       	add	r24, r16
    3a44:	91 1f       	adc	r25, r17
    3a46:	f9 01       	movw	r30, r18
    3a48:	91 83       	std	Z+1, r25	; 0x01
    3a4a:	80 83       	st	Z, r24
    3a4c:	eb 2d       	mov	r30, r11
    3a4e:	fa 2f       	mov	r31, r26
    3a50:	e1 14       	cp	r14, r1
    3a52:	f1 04       	cpc	r15, r1
    3a54:	31 f0       	breq	.+12     	; 0x3a62 <realloc+0xf8>
    3a56:	d7 01       	movw	r26, r14
    3a58:	13 96       	adiw	r26, 0x03	; 3
    3a5a:	fc 93       	st	X, r31
    3a5c:	ee 93       	st	-X, r30
    3a5e:	12 97       	sbiw	r26, 0x02	; 2
    3a60:	41 c0       	rjmp	.+130    	; 0x3ae4 <realloc+0x17a>
    3a62:	f0 93 c9 04 	sts	0x04C9, r31	; 0x8004c9 <__flp+0x1>
    3a66:	e0 93 c8 04 	sts	0x04C8, r30	; 0x8004c8 <__flp>
    3a6a:	3c c0       	rjmp	.+120    	; 0x3ae4 <realloc+0x17a>
    3a6c:	68 16       	cp	r6, r24
    3a6e:	79 06       	cpc	r7, r25
    3a70:	08 f4       	brcc	.+2      	; 0x3a74 <realloc+0x10a>
    3a72:	3c 01       	movw	r6, r24
    3a74:	7d 01       	movw	r14, r26
    3a76:	12 96       	adiw	r26, 0x02	; 2
    3a78:	0d 90       	ld	r0, X+
    3a7a:	bc 91       	ld	r27, X
    3a7c:	a0 2d       	mov	r26, r0
    3a7e:	b7 cf       	rjmp	.-146    	; 0x39ee <realloc+0x84>
    3a80:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <__brkval>
    3a84:	90 91 c7 04 	lds	r25, 0x04C7	; 0x8004c7 <__brkval+0x1>
    3a88:	88 16       	cp	r8, r24
    3a8a:	99 06       	cpc	r9, r25
    3a8c:	e1 f4       	brne	.+56     	; 0x3ac6 <realloc+0x15c>
    3a8e:	66 16       	cp	r6, r22
    3a90:	77 06       	cpc	r7, r23
    3a92:	c8 f4       	brcc	.+50     	; 0x3ac6 <realloc+0x15c>
    3a94:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3a98:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    3a9c:	00 97       	sbiw	r24, 0x00	; 0
    3a9e:	41 f4       	brne	.+16     	; 0x3ab0 <realloc+0x146>
    3aa0:	8d b7       	in	r24, 0x3d	; 61
    3aa2:	9e b7       	in	r25, 0x3e	; 62
    3aa4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3aa8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3aac:	84 1b       	sub	r24, r20
    3aae:	95 0b       	sbc	r25, r21
    3ab0:	e8 17       	cp	r30, r24
    3ab2:	f9 07       	cpc	r31, r25
    3ab4:	c8 f4       	brcc	.+50     	; 0x3ae8 <realloc+0x17e>
    3ab6:	f0 93 c7 04 	sts	0x04C7, r31	; 0x8004c7 <__brkval+0x1>
    3aba:	e0 93 c6 04 	sts	0x04C6, r30	; 0x8004c6 <__brkval>
    3abe:	f9 01       	movw	r30, r18
    3ac0:	71 83       	std	Z+1, r23	; 0x01
    3ac2:	60 83       	st	Z, r22
    3ac4:	0f c0       	rjmp	.+30     	; 0x3ae4 <realloc+0x17a>
    3ac6:	cb 01       	movw	r24, r22
    3ac8:	0e 94 94 1b 	call	0x3728	; 0x3728 <malloc>
    3acc:	7c 01       	movw	r14, r24
    3ace:	00 97       	sbiw	r24, 0x00	; 0
    3ad0:	59 f0       	breq	.+22     	; 0x3ae8 <realloc+0x17e>
    3ad2:	a8 01       	movw	r20, r16
    3ad4:	be 01       	movw	r22, r28
    3ad6:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <memcpy>
    3ada:	ce 01       	movw	r24, r28
    3adc:	0e 94 2c 1c 	call	0x3858	; 0x3858 <free>
    3ae0:	c7 01       	movw	r24, r14
    3ae2:	04 c0       	rjmp	.+8      	; 0x3aec <realloc+0x182>
    3ae4:	ce 01       	movw	r24, r28
    3ae6:	02 c0       	rjmp	.+4      	; 0x3aec <realloc+0x182>
    3ae8:	80 e0       	ldi	r24, 0x00	; 0
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	cd b7       	in	r28, 0x3d	; 61
    3aee:	de b7       	in	r29, 0x3e	; 62
    3af0:	ee e0       	ldi	r30, 0x0E	; 14
    3af2:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__epilogue_restores__+0x8>

00003af6 <abort>:
    3af6:	81 e0       	ldi	r24, 0x01	; 1
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	f8 94       	cli
    3afc:	0c 94 12 1e 	jmp	0x3c24	; 0x3c24 <__do_global_dtors>

00003b00 <memcpy>:
    3b00:	fb 01       	movw	r30, r22
    3b02:	dc 01       	movw	r26, r24
    3b04:	02 c0       	rjmp	.+4      	; 0x3b0a <memcpy+0xa>
    3b06:	01 90       	ld	r0, Z+
    3b08:	0d 92       	st	X+, r0
    3b0a:	41 50       	subi	r20, 0x01	; 1
    3b0c:	50 40       	sbci	r21, 0x00	; 0
    3b0e:	d8 f7       	brcc	.-10     	; 0x3b06 <memcpy+0x6>
    3b10:	08 95       	ret

00003b12 <strcpy>:
    3b12:	fb 01       	movw	r30, r22
    3b14:	dc 01       	movw	r26, r24
    3b16:	01 90       	ld	r0, Z+
    3b18:	0d 92       	st	X+, r0
    3b1a:	00 20       	and	r0, r0
    3b1c:	e1 f7       	brne	.-8      	; 0x3b16 <strcpy+0x4>
    3b1e:	08 95       	ret

00003b20 <__itoa_ncheck>:
    3b20:	bb 27       	eor	r27, r27
    3b22:	4a 30       	cpi	r20, 0x0A	; 10
    3b24:	31 f4       	brne	.+12     	; 0x3b32 <__itoa_ncheck+0x12>
    3b26:	99 23       	and	r25, r25
    3b28:	22 f4       	brpl	.+8      	; 0x3b32 <__itoa_ncheck+0x12>
    3b2a:	bd e2       	ldi	r27, 0x2D	; 45
    3b2c:	90 95       	com	r25
    3b2e:	81 95       	neg	r24
    3b30:	9f 4f       	sbci	r25, 0xFF	; 255
    3b32:	0c 94 9c 1d 	jmp	0x3b38	; 0x3b38 <__utoa_common>

00003b36 <__utoa_ncheck>:
    3b36:	bb 27       	eor	r27, r27

00003b38 <__utoa_common>:
    3b38:	fb 01       	movw	r30, r22
    3b3a:	55 27       	eor	r21, r21
    3b3c:	aa 27       	eor	r26, r26
    3b3e:	88 0f       	add	r24, r24
    3b40:	99 1f       	adc	r25, r25
    3b42:	aa 1f       	adc	r26, r26
    3b44:	a4 17       	cp	r26, r20
    3b46:	10 f0       	brcs	.+4      	; 0x3b4c <__utoa_common+0x14>
    3b48:	a4 1b       	sub	r26, r20
    3b4a:	83 95       	inc	r24
    3b4c:	50 51       	subi	r21, 0x10	; 16
    3b4e:	b9 f7       	brne	.-18     	; 0x3b3e <__utoa_common+0x6>
    3b50:	a0 5d       	subi	r26, 0xD0	; 208
    3b52:	aa 33       	cpi	r26, 0x3A	; 58
    3b54:	08 f0       	brcs	.+2      	; 0x3b58 <__utoa_common+0x20>
    3b56:	a9 5d       	subi	r26, 0xD9	; 217
    3b58:	a1 93       	st	Z+, r26
    3b5a:	00 97       	sbiw	r24, 0x00	; 0
    3b5c:	79 f7       	brne	.-34     	; 0x3b3c <__utoa_common+0x4>
    3b5e:	b1 11       	cpse	r27, r1
    3b60:	b1 93       	st	Z+, r27
    3b62:	11 92       	st	Z+, r1
    3b64:	cb 01       	movw	r24, r22
    3b66:	0c 94 b5 1d 	jmp	0x3b6a	; 0x3b6a <strrev>

00003b6a <strrev>:
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	fc 01       	movw	r30, r24
    3b6e:	67 2f       	mov	r22, r23
    3b70:	71 91       	ld	r23, Z+
    3b72:	77 23       	and	r23, r23
    3b74:	e1 f7       	brne	.-8      	; 0x3b6e <strrev+0x4>
    3b76:	32 97       	sbiw	r30, 0x02	; 2
    3b78:	04 c0       	rjmp	.+8      	; 0x3b82 <strrev+0x18>
    3b7a:	7c 91       	ld	r23, X
    3b7c:	6d 93       	st	X+, r22
    3b7e:	70 83       	st	Z, r23
    3b80:	62 91       	ld	r22, -Z
    3b82:	ae 17       	cp	r26, r30
    3b84:	bf 07       	cpc	r27, r31
    3b86:	c8 f3       	brcs	.-14     	; 0x3b7a <strrev+0x10>
    3b88:	08 95       	ret

00003b8a <eeprom_read_byte>:
    3b8a:	f9 99       	sbic	0x1f, 1	; 31
    3b8c:	fe cf       	rjmp	.-4      	; 0x3b8a <eeprom_read_byte>
    3b8e:	92 bd       	out	0x22, r25	; 34
    3b90:	81 bd       	out	0x21, r24	; 33
    3b92:	f8 9a       	sbi	0x1f, 0	; 31
    3b94:	99 27       	eor	r25, r25
    3b96:	80 b5       	in	r24, 0x20	; 32
    3b98:	08 95       	ret

00003b9a <eeprom_write_byte>:
    3b9a:	26 2f       	mov	r18, r22

00003b9c <eeprom_write_r18>:
    3b9c:	f9 99       	sbic	0x1f, 1	; 31
    3b9e:	fe cf       	rjmp	.-4      	; 0x3b9c <eeprom_write_r18>
    3ba0:	1f ba       	out	0x1f, r1	; 31
    3ba2:	92 bd       	out	0x22, r25	; 34
    3ba4:	81 bd       	out	0x21, r24	; 33
    3ba6:	20 bd       	out	0x20, r18	; 32
    3ba8:	0f b6       	in	r0, 0x3f	; 63
    3baa:	f8 94       	cli
    3bac:	fa 9a       	sbi	0x1f, 2	; 31
    3bae:	f9 9a       	sbi	0x1f, 1	; 31
    3bb0:	0f be       	out	0x3f, r0	; 63
    3bb2:	01 96       	adiw	r24, 0x01	; 1
    3bb4:	08 95       	ret

00003bb6 <__prologue_saves__>:
    3bb6:	2f 92       	push	r2
    3bb8:	3f 92       	push	r3
    3bba:	4f 92       	push	r4
    3bbc:	5f 92       	push	r5
    3bbe:	6f 92       	push	r6
    3bc0:	7f 92       	push	r7
    3bc2:	8f 92       	push	r8
    3bc4:	9f 92       	push	r9
    3bc6:	af 92       	push	r10
    3bc8:	bf 92       	push	r11
    3bca:	cf 92       	push	r12
    3bcc:	df 92       	push	r13
    3bce:	ef 92       	push	r14
    3bd0:	ff 92       	push	r15
    3bd2:	0f 93       	push	r16
    3bd4:	1f 93       	push	r17
    3bd6:	cf 93       	push	r28
    3bd8:	df 93       	push	r29
    3bda:	cd b7       	in	r28, 0x3d	; 61
    3bdc:	de b7       	in	r29, 0x3e	; 62
    3bde:	ca 1b       	sub	r28, r26
    3be0:	db 0b       	sbc	r29, r27
    3be2:	0f b6       	in	r0, 0x3f	; 63
    3be4:	f8 94       	cli
    3be6:	de bf       	out	0x3e, r29	; 62
    3be8:	0f be       	out	0x3f, r0	; 63
    3bea:	cd bf       	out	0x3d, r28	; 61
    3bec:	09 94       	ijmp

00003bee <__epilogue_restores__>:
    3bee:	2a 88       	ldd	r2, Y+18	; 0x12
    3bf0:	39 88       	ldd	r3, Y+17	; 0x11
    3bf2:	48 88       	ldd	r4, Y+16	; 0x10
    3bf4:	5f 84       	ldd	r5, Y+15	; 0x0f
    3bf6:	6e 84       	ldd	r6, Y+14	; 0x0e
    3bf8:	7d 84       	ldd	r7, Y+13	; 0x0d
    3bfa:	8c 84       	ldd	r8, Y+12	; 0x0c
    3bfc:	9b 84       	ldd	r9, Y+11	; 0x0b
    3bfe:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c00:	b9 84       	ldd	r11, Y+9	; 0x09
    3c02:	c8 84       	ldd	r12, Y+8	; 0x08
    3c04:	df 80       	ldd	r13, Y+7	; 0x07
    3c06:	ee 80       	ldd	r14, Y+6	; 0x06
    3c08:	fd 80       	ldd	r15, Y+5	; 0x05
    3c0a:	0c 81       	ldd	r16, Y+4	; 0x04
    3c0c:	1b 81       	ldd	r17, Y+3	; 0x03
    3c0e:	aa 81       	ldd	r26, Y+2	; 0x02
    3c10:	b9 81       	ldd	r27, Y+1	; 0x01
    3c12:	ce 0f       	add	r28, r30
    3c14:	d1 1d       	adc	r29, r1
    3c16:	0f b6       	in	r0, 0x3f	; 63
    3c18:	f8 94       	cli
    3c1a:	de bf       	out	0x3e, r29	; 62
    3c1c:	0f be       	out	0x3f, r0	; 63
    3c1e:	cd bf       	out	0x3d, r28	; 61
    3c20:	ed 01       	movw	r28, r26
    3c22:	08 95       	ret

00003c24 <__do_global_dtors>:
    3c24:	10 e0       	ldi	r17, 0x00	; 0
    3c26:	c1 e9       	ldi	r28, 0x91	; 145
    3c28:	d0 e0       	ldi	r29, 0x00	; 0
    3c2a:	04 c0       	rjmp	.+8      	; 0x3c34 <__do_global_dtors+0x10>
    3c2c:	fe 01       	movw	r30, r28
    3c2e:	0e 94 8e 1b 	call	0x371c	; 0x371c <__tablejump2__>
    3c32:	21 96       	adiw	r28, 0x01	; 1
    3c34:	c2 39       	cpi	r28, 0x92	; 146
    3c36:	d1 07       	cpc	r29, r17
    3c38:	c9 f7       	brne	.-14     	; 0x3c2c <__do_global_dtors+0x8>
    3c3a:	f8 94       	cli

00003c3c <__stop_program>:
    3c3c:	ff cf       	rjmp	.-2      	; 0x3c3c <__stop_program>
