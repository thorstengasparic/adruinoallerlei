
GyroTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00004312  000043a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004312  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f4  0080014a  0080014a  000043f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000043f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004420  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000df8  00000000  00000000  00004460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00019ec5  00000000  00000000  00005258  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002aab  00000000  00000000  0001f11d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000057b9  00000000  00000000  00021bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003260  00000000  00000000  00027384  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000759b  00000000  00000000  0002a5e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000faea  00000000  00000000  00031b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e38  00000000  00000000  00041669  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__ctors_end>
       4:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <__vector_1>
       8:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__vector_2>
       c:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__bad_interrupt>
      10:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__bad_interrupt>
      14:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__bad_interrupt>
      18:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__bad_interrupt>
      1c:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__bad_interrupt>
      20:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__bad_interrupt>
      24:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__bad_interrupt>
      28:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__bad_interrupt>
      2c:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__bad_interrupt>
      30:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__bad_interrupt>
      34:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__bad_interrupt>
      38:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__bad_interrupt>
      3c:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__bad_interrupt>
      40:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__vector_16>
      44:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__bad_interrupt>
      48:	0c 94 36 11 	jmp	0x226c	; 0x226c <__vector_18>
      4c:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__vector_19>
      50:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__bad_interrupt>
      54:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__bad_interrupt>
      58:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__bad_interrupt>
      5c:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__bad_interrupt>
      60:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <__vector_24>
      64:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	46 49       	sbci	r20, 0x96	; 150
      6a:	46 4f       	sbci	r20, 0xF6	; 246
      6c:	20 6f       	ori	r18, 0xF0	; 240
      6e:	76 65       	ori	r23, 0x56	; 86
      70:	72 66       	ori	r23, 0x62	; 98
      72:	6c 6f       	ori	r22, 0xFC	; 252
      74:	77 21       	and	r23, r7
	...

00000077 <_ZZ5setupE3__c_9>:
      77:	29 00                                               ).

00000079 <_ZZ5setupE3__c_8>:
      79:	44 4d 50 20 49 6e 69 74 69 61 6c 69 7a 61 74 69     DMP Initializati
      89:	6f 6e 20 66 61 69 6c 65 64 20 28 63 6f 64 65 20     on failed (code 
	...

0000009a <_ZZ5setupE3__c_7>:
      9a:	44 4d 50 20 72 65 61 64 79 21 20 57 61 69 74 69     DMP ready! Waiti
      aa:	6e 67 20 66 6f 72 20 66 69 72 73 74 20 69 6e 74     ng for first int
      ba:	65 72 72 75 70 74 2e 2e 2e 00                       errupt....

000000c4 <_ZZ5setupE3__c_6>:
      c4:	45 6e 61 62 6c 69 6e 67 20 69 6e 74 65 72 72 75     Enabling interru
      d4:	70 74 20 64 65 74 65 63 74 69 6f 6e 20 28 41 72     pt detection (Ar
      e4:	64 75 69 6e 6f 20 65 78 74 65 72 6e 61 6c 20 69     duino external i
      f4:	6e 74 65 72 72 75 70 74 20 30 29 2e 2e 2e 00        nterrupt 0)....

00000103 <_ZZ5setupE3__c_5>:
     103:	45 6e 61 62 6c 69 6e 67 20 44 4d 50 2e 2e 2e 00     Enabling DMP....

00000113 <_ZZ5setupE3__c_4>:
     113:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 44 4d 50     Initializing DMP
     123:	2e 2e 2e 00                                         ....

00000127 <_ZZ5setupE3__c_3>:
     127:	0a 53 65 6e 64 20 61 6e 79 20 63 68 61 72 61 63     .Send any charac
     137:	74 65 72 20 74 6f 20 62 65 67 69 6e 20 44 4d 50     ter to begin DMP
     147:	20 70 72 6f 67 72 61 6d 6d 69 6e 67 20 61 6e 64      programming and
     157:	20 64 65 6d 6f 3a 20 00                              demo: .

0000015f <_ZZ5setupE3__c_2>:
     15f:	4d 50 55 36 30 35 30 20 63 6f 6e 6e 65 63 74 69     MPU6050 connecti
     16f:	6f 6e 20 66 61 69 6c 65 64 00                       on failed.

00000179 <_ZZ5setupE3__c_1>:
     179:	4d 50 55 36 30 35 30 20 63 6f 6e 6e 65 63 74 69     MPU6050 connecti
     189:	6f 6e 20 73 75 63 63 65 73 73 66 75 6c 00           on successful.

00000197 <_ZZ5setupE3__c_0>:
     197:	54 65 73 74 69 6e 67 20 64 65 76 69 63 65 20 63     Testing device c
     1a7:	6f 6e 6e 65 63 74 69 6f 6e 73 2e 2e 2e 00           onnections....

000001b5 <_ZZ5setupE3__c>:
     1b5:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     Initializing I2C
     1c5:	20 64 65 76 69 63 65 73 2e 2e 2e 00                  devices....

000001d1 <_ZZN7MPU605013dmpInitializeEvE3__c_66>:
     1d1:	45 52 52 4f 52 21 20 44 4d 50 20 63 6f 64 65 20     ERROR! DMP code 
     1e1:	76 65 72 69 66 69 63 61 74 69 6f 6e 20 66 61 69     verification fai
     1f1:	6c 65 64 2e 00                                      led..

000001f6 <_ZZN7MPU605013dmpInitializeEvE3__c_65>:
     1f6:	45 52 52 4f 52 21 20 44 4d 50 20 63 6f 6e 66 69     ERROR! DMP confi
     206:	67 75 72 61 74 69 6f 6e 20 76 65 72 69 66 69 63     guration verific
     216:	61 74 69 6f 6e 20 66 61 69 6c 65 64 2e 00           ation failed..

00000224 <_ZZN7MPU605013dmpInitializeEvE3__c_64>:
     224:	52 65 73 65 74 74 69 6e 67 20 46 49 46 4f 20 61     Resetting FIFO a
     234:	6e 64 20 63 6c 65 61 72 69 6e 67 20 49 4e 54 20     nd clearing INT 
     244:	73 74 61 74 75 73 20 6f 6e 65 20 6c 61 73 74 20     status one last 
     254:	74 69 6d 65 2e 2e 2e 00                             time....

0000025c <_ZZN7MPU605013dmpInitializeEvE3__c_63>:
     25c:	53 65 74 74 69 6e 67 20 75 70 20 69 6e 74 65 72     Setting up inter
     26c:	6e 61 6c 20 34 32 2d 62 79 74 65 20 28 64 65 66     nal 42-byte (def
     27c:	61 75 6c 74 29 20 44 4d 50 20 70 61 63 6b 65 74     ault) DMP packet
     28c:	20 62 75 66 66 65 72 2e 2e 2e 00                     buffer....

00000297 <_ZZN7MPU605013dmpInitializeEvE3__c_62>:
     297:	44 69 73 61 62 6c 69 6e 67 20 44 4d 50 20 28 79     Disabling DMP (y
     2a7:	6f 75 20 74 75 72 6e 20 69 74 20 6f 6e 20 6c 61     ou turn it on la
     2b7:	74 65 72 29 2e 2e 2e 00                             ter)....

000002bf <_ZZN7MPU605013dmpInitializeEvE3__c_61>:
     2bf:	44 4d 50 20 69 73 20 67 6f 6f 64 20 74 6f 20 67     DMP is good to g
     2cf:	6f 21 20 46 69 6e 61 6c 6c 79 2e 00                 o! Finally..

000002db <_ZZN7MPU605013dmpInitializeEvE3__c_60>:
     2db:	57 72 69 74 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Writing final me
     2eb:	6d 6f 72 79 20 75 70 64 61 74 65 20 37 2f 37 20     mory update 7/7 
     2fb:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     30b:	6e 29 2e 2e 2e 00                                   n)....

00000311 <_ZZN7MPU605013dmpInitializeEvE3__c_59>:
     311:	43 75 72 72 65 6e 74 20 69 6e 74 65 72 72 75 70     Current interrup
     321:	74 20 73 74 61 74 75 73 3d 00                       t status=.

0000032b <_ZZN7MPU605013dmpInitializeEvE3__c_58>:
     32b:	52 65 61 64 69 6e 67 20 69 6e 74 65 72 72 75 70     Reading interrup
     33b:	74 20 73 74 61 74 75 73 2e 2e 2e 00                 t status....

00000347 <_ZZN7MPU605013dmpInitializeEvE3__c_57>:
     347:	52 65 61 64 69 6e 67 20 46 49 46 4f 20 64 61 74     Reading FIFO dat
     357:	61 2e 2e 2e 00                                      a....

0000035c <_ZZN7MPU605013dmpInitializeEvE3__c_56>:
     35c:	43 75 72 72 65 6e 74 20 46 49 46 4f 20 63 6f 75     Current FIFO cou
     36c:	6e 74 3d 00                                         nt=.

00000370 <_ZZN7MPU605013dmpInitializeEvE3__c_55>:
     370:	57 61 69 74 69 6e 67 20 66 6f 72 20 46 49 46 4f     Waiting for FIFO
     380:	20 63 6f 75 6e 74 20 3e 20 32 2e 2e 2e 00            count > 2....

0000038e <_ZZN7MPU605013dmpInitializeEvE3__c_54>:
     38e:	52 65 61 64 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Reading final me
     39e:	6d 6f 72 79 20 75 70 64 61 74 65 20 36 2f 37 20     mory update 6/7 
     3ae:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     3be:	6e 29 2e 2e 2e 00                                   n)....

000003c4 <_ZZN7MPU605013dmpInitializeEvE3__c_53>:
     3c4:	43 75 72 72 65 6e 74 20 69 6e 74 65 72 72 75 70     Current interrup
     3d4:	74 20 73 74 61 74 75 73 3d 00                       t status=.

000003de <_ZZN7MPU605013dmpInitializeEvE3__c_52>:
     3de:	52 65 61 64 69 6e 67 20 69 6e 74 65 72 72 75 70     Reading interrup
     3ee:	74 20 73 74 61 74 75 73 2e 2e 2e 00                 t status....

000003fa <_ZZN7MPU605013dmpInitializeEvE3__c_51>:
     3fa:	52 65 61 64 69 6e 67 20 46 49 46 4f 20 64 61 74     Reading FIFO dat
     40a:	61 2e 2e 2e 00                                      a....

0000040f <_ZZN7MPU605013dmpInitializeEvE3__c_50>:
     40f:	43 75 72 72 65 6e 74 20 46 49 46 4f 20 63 6f 75     Current FIFO cou
     41f:	6e 74 3d 00                                         nt=.

00000423 <_ZZN7MPU605013dmpInitializeEvE3__c_49>:
     423:	57 61 69 74 69 6e 67 20 66 6f 72 20 46 49 46 4f     Waiting for FIFO
     433:	20 63 6f 75 6e 74 20 3e 20 32 2e 2e 2e 00            count > 2....

00000441 <_ZZN7MPU605013dmpInitializeEvE3__c_48>:
     441:	57 72 69 74 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Writing final me
     451:	6d 6f 72 79 20 75 70 64 61 74 65 20 35 2f 37 20     mory update 5/7 
     461:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     471:	6e 29 2e 2e 2e 00                                   n)....

00000477 <_ZZN7MPU605013dmpInitializeEvE3__c_47>:
     477:	57 72 69 74 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Writing final me
     487:	6d 6f 72 79 20 75 70 64 61 74 65 20 34 2f 37 20     mory update 4/7 
     497:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     4a7:	6e 29 2e 2e 2e 00                                   n)....

000004ad <_ZZN7MPU605013dmpInitializeEvE3__c_46>:
     4ad:	57 72 69 74 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Writing final me
     4bd:	6d 6f 72 79 20 75 70 64 61 74 65 20 33 2f 37 20     mory update 3/7 
     4cd:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     4dd:	6e 29 2e 2e 2e 00                                   n)....

000004e3 <_ZZN7MPU605013dmpInitializeEvE3__c_45>:
     4e3:	52 65 73 65 74 74 69 6e 67 20 44 4d 50 2e 2e 2e     Resetting DMP...
	...

000004f4 <_ZZN7MPU605013dmpInitializeEvE3__c_44>:
     4f4:	45 6e 61 62 6c 69 6e 67 20 44 4d 50 2e 2e 2e 00     Enabling DMP....

00000504 <_ZZN7MPU605013dmpInitializeEvE3__c_43>:
     504:	45 6e 61 62 6c 69 6e 67 20 46 49 46 4f 2e 2e 2e     Enabling FIFO...
	...

00000515 <_ZZN7MPU605013dmpInitializeEvE3__c_42>:
     515:	52 65 73 65 74 74 69 6e 67 20 46 49 46 4f 2e 2e     Resetting FIFO..
     525:	2e 00                                               ..

00000527 <_ZZN7MPU605013dmpInitializeEvE3__c_41>:
     527:	53 65 74 74 69 6e 67 20 7a 65 72 6f 2d 6d 6f 74     Setting zero-mot
     537:	69 6f 6e 20 64 65 74 65 63 74 69 6f 6e 20 64 75     ion detection du
     547:	72 61 74 69 6f 6e 20 74 6f 20 30 2e 2e 2e 00        ration to 0....

00000556 <_ZZN7MPU605013dmpInitializeEvE3__c_40>:
     556:	53 65 74 74 69 6e 67 20 6d 6f 74 69 6f 6e 20 64     Setting motion d
     566:	65 74 65 63 74 69 6f 6e 20 64 75 72 61 74 69 6f     etection duratio
     576:	6e 20 74 6f 20 38 30 2e 2e 2e 00                    n to 80....

00000581 <_ZZN7MPU605013dmpInitializeEvE3__c_39>:
     581:	53 65 74 74 69 6e 67 20 7a 65 72 6f 2d 6d 6f 74     Setting zero-mot
     591:	69 6f 6e 20 64 65 74 65 63 74 69 6f 6e 20 74 68     ion detection th
     5a1:	72 65 73 68 6f 6c 64 20 74 6f 20 31 35 36 2e 2e     reshold to 156..
     5b1:	2e 00                                               ..

000005b3 <_ZZN7MPU605013dmpInitializeEvE3__c_38>:
     5b3:	53 65 74 74 69 6e 67 20 6d 6f 74 69 6f 6e 20 64     Setting motion d
     5c3:	65 74 65 63 74 69 6f 6e 20 74 68 72 65 73 68 6f     etection thresho
     5d3:	6c 64 20 74 6f 20 32 2e 2e 2e 00                    ld to 2....

000005de <_ZZN7MPU605013dmpInitializeEvE3__c_37>:
     5de:	43 75 72 72 65 6e 74 20 46 49 46 4f 20 63 6f 75     Current FIFO cou
     5ee:	6e 74 3d 00                                         nt=.

000005f2 <_ZZN7MPU605013dmpInitializeEvE3__c_36>:
     5f2:	52 65 61 64 69 6e 67 20 46 49 46 4f 20 63 6f 75     Reading FIFO cou
     602:	6e 74 2e 2e 2e 00                                   nt....

00000608 <_ZZN7MPU605013dmpInitializeEvE3__c_35>:
     608:	52 65 73 65 74 74 69 6e 67 20 46 49 46 4f 2e 2e     Resetting FIFO..
     618:	2e 00                                               ..

0000061a <_ZZN7MPU605013dmpInitializeEvE3__c_34>:
     61a:	57 72 69 74 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Writing final me
     62a:	6d 6f 72 79 20 75 70 64 61 74 65 20 32 2f 37 20     mory update 2/7 
     63a:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     64a:	6e 29 2e 2e 2e 00                                   n)....

00000650 <_ZZN7MPU605013dmpInitializeEvE3__c_33>:
     650:	57 72 69 74 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Writing final me
     660:	6d 6f 72 79 20 75 70 64 61 74 65 20 31 2f 37 20     mory update 1/7 
     670:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     680:	6e 29 2e 2e 2e 00                                   n)....

00000686 <_ZZN7MPU605013dmpInitializeEvE3__c_32>:
     686:	53 65 74 74 69 6e 67 20 58 2f 59 2f 5a 20 67 79     Setting X/Y/Z gy
     696:	72 6f 20 6f 66 66 73 65 74 20 54 43 73 20 74 6f     ro offset TCs to
     6a6:	20 70 72 65 76 69 6f 75 73 20 76 61 6c 75 65 73      previous values
     6b6:	2e 2e 2e 00                                         ....

000006ba <_ZZN7MPU605013dmpInitializeEvE3__c_31>:
     6ba:	43 6c 65 61 72 69 6e 67 20 4f 54 50 20 42 61 6e     Clearing OTP Ban
     6ca:	6b 20 66 6c 61 67 2e 2e 2e 00                       k flag....

000006d4 <_ZZN7MPU605013dmpInitializeEvE3__c_30>:
     6d4:	53 65 74 74 69 6e 67 20 44 4d 50 20 70 72 6f 67     Setting DMP prog
     6e4:	72 61 6d 6d 20 73 74 61 72 74 20 61 64 64 72 65     ramm start addre
     6f4:	73 73 00                                            ss.

000006f7 <_ZZN7MPU605013dmpInitializeEvE3__c_29>:
     6f7:	53 65 74 74 69 6e 67 20 67 79 72 6f 20 73 65 6e     Setting gyro sen
     707:	73 69 74 69 76 69 74 79 20 74 6f 20 2b 2f 2d 20     sitivity to +/- 
     717:	32 30 30 30 20 64 65 67 2f 73 65 63 2e 2e 2e 00     2000 deg/sec....

00000727 <_ZZN7MPU605013dmpInitializeEvE3__c_28>:
     727:	53 65 74 74 69 6e 67 20 44 4c 50 46 20 62 61 6e     Setting DLPF ban
     737:	64 77 69 64 74 68 20 74 6f 20 34 32 48 7a 2e 2e     dwidth to 42Hz..
     747:	2e 00                                               ..

00000749 <_ZZN7MPU605013dmpInitializeEvE3__c_27>:
     749:	53 65 74 74 69 6e 67 20 65 78 74 65 72 6e 61 6c     Setting external
     759:	20 66 72 61 6d 65 20 73 79 6e 63 20 74 6f 20 54      frame sync to T
     769:	45 4d 50 5f 4f 55 54 5f 4c 5b 30 5d 2e 2e 2e 00     EMP_OUT_L[0]....

00000779 <_ZZN7MPU605013dmpInitializeEvE3__c_26>:
     779:	53 65 74 74 69 6e 67 20 73 61 6d 70 6c 65 20 72     Setting sample r
     789:	61 74 65 20 74 6f 20 32 30 30 48 7a 2e 2e 2e 00     ate to 200Hz....

00000799 <_ZZN7MPU605013dmpInitializeEvE3__c_25>:
     799:	53 65 74 74 69 6e 67 20 44 4d 50 20 61 6e 64 20     Setting DMP and 
     7a9:	46 49 46 4f 5f 4f 46 4c 4f 57 20 69 6e 74 65 72     FIFO_OFLOW inter
     7b9:	72 75 70 74 73 20 65 6e 61 62 6c 65 64 2e 2e 2e     rupts enabled...
	...

000007ca <_ZZN7MPU605013dmpInitializeEvE3__c_24>:
     7ca:	53 65 74 74 69 6e 67 20 63 6c 6f 63 6b 20 73 6f     Setting clock so
     7da:	75 72 63 65 20 74 6f 20 5a 20 47 79 72 6f 2e 2e     urce to Z Gyro..
     7ea:	2e 00                                               ..

000007ec <_ZZN7MPU605013dmpInitializeEvE3__c_23>:
     7ec:	53 75 63 63 65 73 73 21 20 44 4d 50 20 63 6f 6e     Success! DMP con
     7fc:	66 69 67 75 72 61 74 69 6f 6e 20 77 72 69 74 74     figuration writt
     80c:	65 6e 20 61 6e 64 20 76 65 72 69 66 69 65 64 2e     en and verified.
	...

0000081d <_ZZN7MPU605013dmpInitializeEvE3__c_22>:
     81d:	20 62 79 74 65 73 20 69 6e 20 63 6f 6e 66 69 67      bytes in config
     82d:	20 64 65 66 29 00                                    def).

00000833 <_ZZN7MPU605013dmpInitializeEvE3__c_21>:
     833:	57 72 69 74 69 6e 67 20 44 4d 50 20 63 6f 6e 66     Writing DMP conf
     843:	69 67 75 72 61 74 69 6f 6e 20 74 6f 20 4d 50 55     iguration to MPU
     853:	20 6d 65 6d 6f 72 79 20 62 61 6e 6b 73 20 28 00      memory banks (.

00000863 <_ZZN7MPU605013dmpInitializeEvE3__c_20>:
     863:	53 75 63 63 65 73 73 21 20 44 4d 50 20 63 6f 64     Success! DMP cod
     873:	65 20 77 72 69 74 74 65 6e 20 61 6e 64 20 76 65     e written and ve
     883:	72 69 66 69 65 64 2e 00                             rified..

0000088b <_ZZN7MPU605013dmpInitializeEvE3__c_19>:
     88b:	20 62 79 74 65 73 29 00                              bytes).

00000893 <_ZZN7MPU605013dmpInitializeEvE3__c_18>:
     893:	57 72 69 74 69 6e 67 20 44 4d 50 20 63 6f 64 65     Writing DMP code
     8a3:	20 74 6f 20 4d 50 55 20 6d 65 6d 6f 72 79 20 62      to MPU memory b
     8b3:	61 6e 6b 73 20 28 00                                anks (.

000008ba <_ZZN7MPU605013dmpInitializeEvE3__c_17>:
     8ba:	52 65 73 65 74 74 69 6e 67 20 49 32 43 20 4d 61     Resetting I2C Ma
     8ca:	73 74 65 72 20 63 6f 6e 74 72 6f 6c 2e 2e 2e 00     ster control....

000008da <_ZZN7MPU605013dmpInitializeEvE3__c_16>:
     8da:	53 65 74 74 69 6e 67 20 73 6c 61 76 65 20 30 20     Setting slave 0 
     8ea:	61 64 64 72 65 73 73 20 74 6f 20 30 78 36 38 20     address to 0x68 
     8fa:	28 73 65 6c 66 29 2e 2e 2e 00                       (self)....

00000904 <_ZZN7MPU605013dmpInitializeEvE3__c_15>:
     904:	44 69 73 61 62 6c 69 6e 67 20 49 32 43 20 4d 61     Disabling I2C Ma
     914:	73 74 65 72 20 6d 6f 64 65 2e 2e 2e 00              ster mode....

00000921 <_ZZN7MPU605013dmpInitializeEvE3__c_14>:
     921:	53 65 74 74 69 6e 67 20 73 6c 61 76 65 20 30 20     Setting slave 0 
     931:	61 64 64 72 65 73 73 20 74 6f 20 30 78 37 46 2e     address to 0x7F.
     941:	2e 2e 00                                            ...

00000944 <_ZZN7MPU605013dmpInitializeEvE3__c_13>:
     944:	5a 20 67 79 72 6f 20 6f 66 66 73 65 74 20 3d 20     Z gyro offset = 
	...

00000955 <_ZZN7MPU605013dmpInitializeEvE3__c_12>:
     955:	59 20 67 79 72 6f 20 6f 66 66 73 65 74 20 3d 20     Y gyro offset = 
	...

00000966 <_ZZN7MPU605013dmpInitializeEvE3__c_11>:
     966:	58 20 67 79 72 6f 20 6f 66 66 73 65 74 20 3d 20     X gyro offset = 
	...

00000977 <_ZZN7MPU605013dmpInitializeEvE3__c_10>:
     977:	52 65 61 64 69 6e 67 20 67 79 72 6f 20 6f 66 66     Reading gyro off
     987:	73 65 74 20 54 43 20 76 61 6c 75 65 73 2e 2e 2e     set TC values...
	...

00000998 <_ZZN7MPU605013dmpInitializeEvE3__c_9>:
     998:	69 6e 76 61 6c 69 64 21 00                          invalid!.

000009a1 <_ZZN7MPU605013dmpInitializeEvE3__c_8>:
     9a1:	76 61 6c 69 64 21 00                                valid!.

000009a8 <_ZZN7MPU605013dmpInitializeEvE3__c_7>:
     9a8:	4f 54 50 20 62 61 6e 6b 20 69 73 20 00              OTP bank is .

000009b5 <_ZZN7MPU605013dmpInitializeEvE3__c_6>:
     9b5:	52 65 61 64 69 6e 67 20 4f 54 50 20 62 61 6e 6b     Reading OTP bank
     9c5:	20 76 61 6c 69 64 20 66 6c 61 67 2e 2e 2e 00         valid flag....

000009d4 <_ZZN7MPU605013dmpInitializeEvE3__c_5>:
     9d4:	52 65 73 65 74 74 69 6e 67 20 6d 65 6d 6f 72 79     Resetting memory
     9e4:	20 62 61 6e 6b 20 73 65 6c 65 63 74 69 6f 6e 20      bank selection 
     9f4:	74 6f 20 30 2e 2e 2e 00                             to 0....

000009fc <_ZZN7MPU605013dmpInitializeEvE3__c_4>:
     9fc:	52 65 76 69 73 69 6f 6e 20 40 20 75 73 65 72 5b     Revision @ user[
     a0c:	31 36 5d 5b 36 5d 20 3d 20 00                       16][6] = .

00000a16 <_ZZN7MPU605013dmpInitializeEvE3__c_3>:
     a16:	43 68 65 63 6b 69 6e 67 20 68 61 72 64 77 61 72     Checking hardwar
     a26:	65 20 72 65 76 69 73 69 6f 6e 2e 2e 2e 00           e revision....

00000a34 <_ZZN7MPU605013dmpInitializeEvE3__c_2>:
     a34:	53 65 6c 65 63 74 69 6e 67 20 6d 65 6d 6f 72 79     Selecting memory
     a44:	20 62 79 74 65 20 36 2e 2e 2e 00                     byte 6....

00000a4f <_ZZN7MPU605013dmpInitializeEvE3__c_1>:
     a4f:	53 65 6c 65 63 74 69 6e 67 20 75 73 65 72 20 62     Selecting user b
     a5f:	61 6e 6b 20 31 36 2e 2e 2e 00                       ank 16....

00000a69 <_ZZN7MPU605013dmpInitializeEvE3__c_0>:
     a69:	44 69 73 61 62 6c 69 6e 67 20 73 6c 65 65 70 20     Disabling sleep 
     a79:	6d 6f 64 65 2e 2e 2e 00                             mode....

00000a81 <_ZZN7MPU605013dmpInitializeEvE3__c>:
     a81:	0a 0a 52 65 73 65 74 74 69 6e 67 20 4d 50 55 36     ..Resetting MPU6
     a91:	30 35 30 2e 2e 2e 00                                050....

00000a98 <_ZL10dmpUpdates>:
     a98:	01 b2 02 ff ff 01 90 04 09 23 a1 35 01 6a 02 06     .........#.5.j..
     aa8:	00 01 60 08 00 00 00 00 00 00 00 00 00 60 04 40     ..`..........`.@
     ab8:	00 00 00 01 62 02 00 00 00 60 04 00 40 00 00        ....b....`..@..

00000ac7 <_ZL9dmpConfig>:
     ac7:	03 7b 03 4c cd 6c 03 ab 03 36 56 76 00 68 04 02     .{.L.l...6Vv.h..
     ad7:	cb 47 a2 02 18 04 00 05 8b c1 01 0c 04 00 00 00     .G..............
     ae7:	00 03 7f 06 0c c9 2c 97 97 97 03 89 03 26 46 66     ......,......&Ff
     af7:	00 6c 02 20 00 02 40 04 00 00 00 00 02 44 04 00     .l. ..@......D..
     b07:	00 00 00 02 48 04 00 00 00 00 02 4c 04 00 00 00     ....H......L....
     b17:	00 02 50 04 00 00 00 00 02 54 04 00 00 00 00 02     ..P......T......
     b27:	58 04 00 00 00 00 02 5c 04 00 00 00 00 02 bc 04     X......\........
     b37:	00 00 00 00 01 ec 04 00 00 40 00 03 7f 06 0c c9     .........@......
     b47:	2c 97 97 97 04 02 03 0d 35 5d 04 09 04 87 2d 35     ,.......5]....-5
     b57:	3d 00 a3 01 00 00 00 00 01 07 86 01 fe 07 41 05     =.............A.
     b67:	f1 20 28 30 38 07 7e 01 30 07 46 01 9a 07 47 04     . (08.~.0.F...G.
     b77:	f1 28 30 38 07 6c 04 f1 28 30 38 02 16 02 00 01     .(08.l..(08.....

00000b87 <_ZL9dmpMemory>:
     b87:	fb 00 00 3e 00 0b 00 36 00 01 00 02 00 03 00 00     ...>...6........
     b97:	00 65 00 54 ff ef 00 00 fa 80 00 0b 12 82 00 01     .e.T............
     ba7:	00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     bb7:	00 28 00 00 ff ff 45 81 ff ff fa 72 00 00 00 00     .(....E....r....
     bc7:	00 00 03 e8 00 00 00 01 00 01 7f ff ff fe 80 01     ................
     bd7:	00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     be7:	00 3e 03 30 40 00 00 00 02 ca e3 09 3e 80 00 00     .>.0@.......>...
     bf7:	20 00 00 00 00 00 00 00 40 00 00 00 60 00 00 00      .......@...`...
     c07:	41 ff 00 00 00 00 0b 2a 00 00 16 55 00 00 21 82     A......*...U..!.
     c17:	fd 87 26 50 fd 80 00 00 00 1f 00 00 00 05 80 00     ..&P............
     c27:	00 00 00 00 00 01 00 00 00 02 00 00 00 03 00 00     ................
     c37:	40 00 00 00 00 00 04 6f 00 02 65 32 00 00 5e c0     @......o..e2..^.
     c47:	40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     @...............
     c57:	fb 8c 6f 5d fd 5d 08 d9 00 7c 73 3b 00 6c 12 cc     ..o].]...|s;.l..
     c67:	32 00 13 9d 32 00 d0 d6 32 00 08 00 40 00 01 f4     2...2...2...@...
     c77:	ff e6 80 79 02 00 00 00 00 00 d0 d6 00 00 27 10     ...y..........'.
     c87:	fb 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00     ....@...........
     c97:	00 00 00 01 00 00 00 00 00 00 01 00 01 00 00 00     ................
     ca7:	00 00 fa 36 ff bc 30 8e 00 05 fb f0 ff d9 5b c8     ...6..0.......[.
     cb7:	ff d0 9a be 00 00 10 a9 ff f4 1e b2 00 ce bb f7     ................
     cc7:	00 00 00 01 00 00 00 04 00 02 00 02 02 00 00 0c     ................
     cd7:	ff c2 80 00 00 01 80 00 00 cf 80 00 40 00 00 00     ............@...
     ce7:	00 00 00 01 00 00 00 00 00 00 06 00 00 00 00 14     ................
	...
     d2b:	03 3f 68 b6 79 35 28 bc c6 7e d1 6c 80 00 00 00     .?h.y5(..~.l....
     d3b:	40 00 00 00 00 00 b2 6a 00 00 00 00 00 00 00 00     @......j........
     d4b:	00 00 00 00 00 00 3f f0 00 00 00 30 00 00 00 00     ......?....0....
	...
     d77:	00 00 25 4d 00 2f 70 6d 00 00 05 ae 00 0c 02 d0     ..%M./pm........
     d87:	00 00 00 00 00 65 00 54 ff ef 00 00 00 00 00 00     .....e.T........
     d97:	00 00 01 00 00 44 00 00 00 00 0c 00 00 00 01 00     .....D..........
     da7:	00 00 00 00 00 65 00 00 00 54 00 00 ff ef 00 00     .....e...T......
	...
     dc7:	40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     @...............
     dd7:	40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     @...............
     de7:	00 00 00 01 00 00 00 02 00 00 00 00 00 00 00 00     ................
	...
     e17:	00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     e43:	40 00 00 00 00 1b 00 00 00 00 00 00 00 00 00 00     @...............
	...
     e87:	d8 dc ba a2 f1 de b2 b8 b4 a8 81 91 f7 4a 90 7f     .............J..
     e97:	91 6a f3 f9 db a8 f9 b0 ba a0 80 f2 ce 81 f3 c2     .j..............
     ea7:	f1 c1 f2 c3 f3 cc a2 b2 80 f1 c6 d8 80 ba a7 df     ................
     eb7:	df df f2 a7 c3 cb c5 b6 f0 87 a2 94 24 48 70 3c     ............$Hp<
     ec7:	95 40 68 34 58 9b 78 a2 f1 83 92 2d 55 7d d8 b1     .@h4X.x....-U}..
     ed7:	b4 b8 a1 d0 91 80 f2 70 f3 70 f2 7c 80 a8 f1 01     .......p.p.|....
     ee7:	b0 98 87 d9 43 d8 86 c9 88 ba a1 f2 0e b8 97 80     ....C...........
     ef7:	f1 a9 df df df aa df df df f2 aa c5 cd c7 a9 0c     ................
     f07:	c9 2c 97 97 97 97 f1 a9 89 26 46 66 b0 b4 ba 80     .,.......&Ff....
     f17:	ac de f2 ca f1 b2 8c 02 a9 b6 98 00 89 0e 16 1e     ................
     f27:	b8 a9 b4 99 2c 54 7c b0 8a a8 96 36 56 76 f1 b9     ....,T|....6Vv..
     f37:	af b4 b0 83 c0 b8 a8 97 11 b1 8f 98 b9 af f0 24     ...............$
     f47:	08 44 10 64 18 f1 a3 29 55 7d af 83 b5 93 af f0     .D.d...)U}......
     f57:	00 28 50 f1 a3 86 9f 61 a6 da de df d9 fa a3 86     .(P....a........
     f67:	96 db 31 a6 d9 f8 df ba a6 8f c2 c5 c7 b2 8c c1     ..1.............
     f77:	b8 a2 df df df a3 df df df d8 d8 f1 b8 a8 b2 86     ................
     f87:	b4 98 0d 35 5d b8 aa 98 b0 87 2d 35 3d b2 b6 ba     ...5].....-5=...
     f97:	af 8c 96 19 8f 9f a7 0e 16 1e b4 9a b8 aa 87 2c     ...............,
     fa7:	54 7c b9 a3 de df df a3 b1 80 f2 c4 cd c9 f1 b8     T|..............
     fb7:	a9 b4 99 83 0d 35 5d 89 b9 a3 2d 55 7d b5 93 a3     .....5]...-U}...
     fc7:	0e 16 1e a9 2c 54 7c b8 b4 b0 f1 97 83 a8 11 84     ....,T|.........
     fd7:	a5 09 98 a3 83 f0 da 24 08 44 10 64 18 d8 f1 a5     .......$.D.d....
     fe7:	29 55 7d a5 85 95 02 1a 2e 3a 56 5a 40 48 f9 f3     )U}......:VZ@H..
     ff7:	a3 d9 f8 f0 98 83 24 08 44 10 64 18 97 82 a8 f1     ......$.D.d.....
    1007:	11 f0 98 a2 24 08 44 10 64 18 da f3 de d8 83 a5     ....$.D.d.......
    1017:	94 01 d9 a3 02 f1 a2 c3 c5 c7 d8 f1 84 92 a2 4d     ...............M
    1027:	da 2a d8 48 69 d9 2a d8 68 55 da 32 d8 50 71 d9     .*.Hi.*.hU.2.Pq.
    1037:	32 d8 70 5d da 3a d8 58 79 d9 3a d8 78 93 a3 4d     2.p].:.Xy.:.x..M
    1047:	da 2a d8 48 69 d9 2a d8 68 55 da 32 d8 50 71 d9     .*.Hi.*.hU.2.Pq.
    1057:	32 d8 70 5d da 3a d8 58 79 d9 3a d8 78 a8 8a 9a     2.p].:.Xy.:.x...
    1067:	f0 28 50 78 9e f3 88 18 f1 9f 1d 98 a8 d9 08 d8     .(Px............
    1077:	c8 9f 12 9e f3 15 a8 da 12 10 d8 f1 af c8 97 87     ................
    1087:	34 b5 b9 94 a4 21 f3 d9 22 d8 f2 2d f3 d9 2a d8     4....!.."..-..*.
    1097:	f2 35 f3 d9 32 d8 81 a4 60 60 61 d9 61 d8 6c 68     .5..2...``a.a.lh
    10a7:	69 d9 69 d8 74 70 71 d9 71 d8 b1 a3 84 19 3d 5d     i.i.tpq.q.....=]
    10b7:	a3 83 1a 3e 5e 93 10 30 81 10 11 b8 b0 af 8f 94     ...>^..0........
    10c7:	f2 da 3e d8 b4 9a a8 87 29 da f8 d8 87 9a 35 da     ..>.....).....5.
    10d7:	f8 d8 87 9a 3d da f8 d8 b1 b9 a4 98 85 02 2e 56     ....=..........V
    10e7:	a5 81 00 0c 14 a3 97 b0 8a f1 2d d9 28 d8 4d d9     ..........-.(.M.
    10f7:	48 d8 6d d9 68 d8 b1 84 0d da 0e d8 a3 29 83 da     H.m.h........)..
    1107:	2c 0e d8 a3 84 49 83 da 2c 4c 0e d8 b8 b0 a8 8a     ,....I..,L......
    1117:	9a f5 20 aa da df d8 a8 40 aa d0 da de d8 a8 60     .. .....@......`
    1127:	aa da d0 df d8 f1 97 86 a8 31 9b 06 99 07 ab 97     .........1......
    1137:	28 88 9b f0 0c 20 14 40 b8 b0 b4 a8 8c 9c f0 04     (.... .@........
    1147:	28 51 79 1d 30 14 38 b2 82 ab d0 98 2c 50 50 78     (Qy.0.8.....,PPx
    1157:	78 9b f1 1a b0 f0 8a 9c a8 29 51 79 8b 29 51 79     x........)Qy.)Qy
    1167:	8a 24 70 59 8b 20 58 71 8a 44 69 38 8b 39 40 68     .$pY. Xq.Di8.9@h
    1177:	8a 64 48 31 8b 30 49 60 a5 88 20 09 71 58 44 68     .dH1.0I`.. .qXDh
    1187:	11 39 64 49 30 19 f1 ac 00 2c 54 7c f0 8c a8 04     .9dI0....,T|....
    1197:	28 50 78 f1 88 97 26 a8 59 98 ac 8c 02 26 46 66     (Px...&.Y....&Ff
    11a7:	f0 89 9c a8 29 51 79 24 70 59 44 69 38 64 48 31     ....)Qy$pYDi8dH1
    11b7:	a9 88 09 20 59 70 ab 11 38 40 69 a8 19 31 48 60     ... Yp..8@i..1H`
    11c7:	8c a8 3c 41 5c 20 7c 00 f1 87 98 19 86 a8 6e 76     ..<A\ |.......nv
    11d7:	7e a9 99 88 2d 55 7d 9e b9 a3 8a 22 8a 6e 8a 56     ~...-U}....".n.V
    11e7:	8a 5e 9f b1 83 06 26 46 66 0e 2e 4e 6e 9d b8 ad     .^....&Ff..Nn...
    11f7:	00 2c 54 7c f2 b1 8c b4 99 b9 a3 2d 55 7d 81 91     .,T|.......-U}..
    1207:	ac 38 ad 3a b5 83 91 ac 2d d9 28 d8 4d d9 48 d8     .8.:....-.(.M.H.
    1217:	6d d9 68 d8 8c 9d ae 29 d9 04 ae d8 51 d9 04 ae     m.h....)....Q...
    1227:	d8 79 d9 04 d8 81 f3 9d ad 00 8d ae 19 81 ad d9     .y..............
    1237:	01 d8 f2 ae da 26 d8 8e 91 29 83 a7 d9 ad ad ad     .....&...)......
    1247:	ad f3 2a d8 d8 f1 b0 ac 89 91 3e 5e 76 f3 ac 2e     ..*.......>^v...
    1257:	2e f1 b1 8c 5a 9c ac 2c 28 28 28 9c ac 30 18 a8     ....Z..,(((..0..
    1267:	98 81 28 34 3c 97 24 a7 28 34 3c 9c 24 f2 b0 89     ..(4<.$.(4<.$...
    1277:	ac 91 2c 4c 6c 8a 9b 2d d9 d8 d8 51 d9 d8 d8 79     ..,Ll..-...Q...y
    1287:	d9 d8 d8 f1 9e 88 a3 31 da d8 d8 91 2d d9 28 d8     .......1....-.(.
    1297:	4d d9 48 d8 6d d9 68 d8 b1 83 93 35 3d 80 25 da     M.H.m.h....5=.%.
    12a7:	d8 d8 85 69 da d8 d8 b4 93 81 a3 28 34 3c f3 ab     ...i.......(4<..
    12b7:	8b f8 a3 91 b6 09 b4 d9 ab de fa b0 87 9c b9 a3     ................
    12c7:	dd f1 a3 a3 a3 a3 95 f1 a3 a3 a3 9d f1 a3 a3 a3     ................
    12d7:	a3 f2 a3 b4 90 80 f2 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    12e7:	a3 b2 a3 a3 a3 a3 a3 a3 b0 87 b5 99 f1 a3 a3 a3     ................
    12f7:	98 f1 a3 a3 a3 a3 97 a3 a3 a3 a3 f3 9b a3 a3 dc     ................
    1307:	b9 a7 f1 26 26 26 d8 d8 ff                          ...&&&...

00001310 <digital_pin_to_timer_PGM>:
    1310:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
    1320:	00 00 00 00                                         ....

00001324 <digital_pin_to_bit_mask_PGM>:
    1324:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
    1334:	04 08 10 20                                         ... 

00001338 <digital_pin_to_port_PGM>:
    1338:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
    1348:	03 03 03 03                                         ....

0000134c <port_to_output_PGM>:
    134c:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00001356 <port_to_mode_PGM>:
    1356:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00001360 <__ctors_start>:
    1360:	fd 0e       	add	r15, r29
    1362:	98 11       	cpse	r25, r8
    1364:	f2 14       	cp	r15, r2

00001366 <__ctors_end>:
    1366:	11 24       	eor	r1, r1
    1368:	1f be       	out	0x3f, r1	; 63
    136a:	cf ef       	ldi	r28, 0xFF	; 255
    136c:	d8 e0       	ldi	r29, 0x08	; 8
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	cd bf       	out	0x3d, r28	; 61

00001372 <__do_copy_data>:
    1372:	11 e0       	ldi	r17, 0x01	; 1
    1374:	a0 e0       	ldi	r26, 0x00	; 0
    1376:	b1 e0       	ldi	r27, 0x01	; 1
    1378:	e2 e1       	ldi	r30, 0x12	; 18
    137a:	f3 e4       	ldi	r31, 0x43	; 67
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <__do_copy_data+0x10>
    137e:	05 90       	lpm	r0, Z+
    1380:	0d 92       	st	X+, r0
    1382:	aa 34       	cpi	r26, 0x4A	; 74
    1384:	b1 07       	cpc	r27, r17
    1386:	d9 f7       	brne	.-10     	; 0x137e <__do_copy_data+0xc>

00001388 <__do_clear_bss>:
    1388:	23 e0       	ldi	r18, 0x03	; 3
    138a:	aa e4       	ldi	r26, 0x4A	; 74
    138c:	b1 e0       	ldi	r27, 0x01	; 1
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <.do_clear_bss_start>

00001390 <.do_clear_bss_loop>:
    1390:	1d 92       	st	X+, r1

00001392 <.do_clear_bss_start>:
    1392:	ae 33       	cpi	r26, 0x3E	; 62
    1394:	b2 07       	cpc	r27, r18
    1396:	e1 f7       	brne	.-8      	; 0x1390 <.do_clear_bss_loop>

00001398 <__do_global_ctors>:
    1398:	19 e0       	ldi	r17, 0x09	; 9
    139a:	c3 eb       	ldi	r28, 0xB3	; 179
    139c:	d9 e0       	ldi	r29, 0x09	; 9
    139e:	04 c0       	rjmp	.+8      	; 0x13a8 <__do_global_ctors+0x10>
    13a0:	21 97       	sbiw	r28, 0x01	; 1
    13a2:	fe 01       	movw	r30, r28
    13a4:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <__tablejump2__>
    13a8:	c0 3b       	cpi	r28, 0xB0	; 176
    13aa:	d1 07       	cpc	r29, r17
    13ac:	c9 f7       	brne	.-14     	; 0x13a0 <__do_global_ctors+0x8>
    13ae:	0e 94 c6 11 	call	0x238c	; 0x238c <main>
    13b2:	0c 94 87 21 	jmp	0x430e	; 0x430e <_exit>

000013b6 <__bad_interrupt>:
    13b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000013ba <_Z12dmpDataReadyv>:
// uint32_t MPU6050::dmpGetGyroSumOfSquare();
// uint32_t MPU6050::dmpGetAccelSumOfSquare();
// void MPU6050::dmpOverrideQuaternion(long *q);
uint16_t MPU6050::dmpGetFIFOPacketSize() {
    return dmpPacketSize;
}
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__data_end>
    13c0:	08 95       	ret

000013c2 <_ZN7MPU605013dmpInitializeEv>:
    13c2:	8f 92       	push	r8
    13c4:	9f 92       	push	r9
    13c6:	af 92       	push	r10
    13c8:	bf 92       	push	r11
    13ca:	cf 92       	push	r12
    13cc:	ef 92       	push	r14
    13ce:	0f 93       	push	r16
    13d0:	1f 93       	push	r17
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	c0 59       	subi	r28, 0x90	; 144
    13dc:	d1 09       	sbc	r29, r1
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	f8 94       	cli
    13e2:	de bf       	out	0x3e, r29	; 62
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	cd bf       	out	0x3d, r28	; 61
    13e8:	4c 01       	movw	r8, r24
    13ea:	61 e8       	ldi	r22, 0x81	; 129
    13ec:	7a e0       	ldi	r23, 0x0A	; 10
    13ee:	84 ed       	ldi	r24, 0xD4	; 212
    13f0:	91 e0       	ldi	r25, 0x01	; 1
    13f2:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    13f6:	c4 01       	movw	r24, r8
    13f8:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN7MPU60505resetEv>
    13fc:	6e e1       	ldi	r22, 0x1E	; 30
    13fe:	70 e0       	ldi	r23, 0x00	; 0
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <delay>
    1408:	69 e6       	ldi	r22, 0x69	; 105
    140a:	7a e0       	ldi	r23, 0x0A	; 10
    140c:	84 ed       	ldi	r24, 0xD4	; 212
    140e:	91 e0       	ldi	r25, 0x01	; 1
    1410:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1414:	60 e0       	ldi	r22, 0x00	; 0
    1416:	c4 01       	movw	r24, r8
    1418:	0e 94 52 19 	call	0x32a4	; 0x32a4 <_ZN7MPU605015setSleepEnabledEb>
    141c:	6f e4       	ldi	r22, 0x4F	; 79
    141e:	7a e0       	ldi	r23, 0x0A	; 10
    1420:	84 ed       	ldi	r24, 0xD4	; 212
    1422:	91 e0       	ldi	r25, 0x01	; 1
    1424:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1428:	21 e0       	ldi	r18, 0x01	; 1
    142a:	41 e0       	ldi	r20, 0x01	; 1
    142c:	60 e1       	ldi	r22, 0x10	; 16
    142e:	c4 01       	movw	r24, r8
    1430:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZN7MPU605013setMemoryBankEhbb>
    1434:	64 e3       	ldi	r22, 0x34	; 52
    1436:	7a e0       	ldi	r23, 0x0A	; 10
    1438:	84 ed       	ldi	r24, 0xD4	; 212
    143a:	91 e0       	ldi	r25, 0x01	; 1
    143c:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1440:	66 e0       	ldi	r22, 0x06	; 6
    1442:	c4 01       	movw	r24, r8
    1444:	0e 94 9c 1a 	call	0x3538	; 0x3538 <_ZN7MPU605021setMemoryStartAddressEh>
    1448:	66 e1       	ldi	r22, 0x16	; 22
    144a:	7a e0       	ldi	r23, 0x0A	; 10
    144c:	84 ed       	ldi	r24, 0xD4	; 212
    144e:	91 e0       	ldi	r25, 0x01	; 1
    1450:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1454:	6c ef       	ldi	r22, 0xFC	; 252
    1456:	79 e0       	ldi	r23, 0x09	; 9
    1458:	84 ed       	ldi	r24, 0xD4	; 212
    145a:	91 e0       	ldi	r25, 0x01	; 1
    145c:	0e 94 15 12 	call	0x242a	; 0x242a <_ZN5Print5printEPK19__FlashStringHelper>
    1460:	c4 01       	movw	r24, r8
    1462:	0e 94 a3 1a 	call	0x3546	; 0x3546 <_ZN7MPU605014readMemoryByteEv>
    1466:	40 e1       	ldi	r20, 0x10	; 16
    1468:	50 e0       	ldi	r21, 0x00	; 0
    146a:	68 2f       	mov	r22, r24
    146c:	84 ed       	ldi	r24, 0xD4	; 212
    146e:	91 e0       	ldi	r25, 0x01	; 1
    1470:	0e 94 26 13 	call	0x264c	; 0x264c <_ZN5Print7printlnEhi>
    1474:	64 ed       	ldi	r22, 0xD4	; 212
    1476:	79 e0       	ldi	r23, 0x09	; 9
    1478:	84 ed       	ldi	r24, 0xD4	; 212
    147a:	91 e0       	ldi	r25, 0x01	; 1
    147c:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	40 e0       	ldi	r20, 0x00	; 0
    1484:	60 e0       	ldi	r22, 0x00	; 0
    1486:	c4 01       	movw	r24, r8
    1488:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZN7MPU605013setMemoryBankEhbb>
    148c:	65 eb       	ldi	r22, 0xB5	; 181
    148e:	79 e0       	ldi	r23, 0x09	; 9
    1490:	84 ed       	ldi	r24, 0xD4	; 212
    1492:	91 e0       	ldi	r25, 0x01	; 1
    1494:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1498:	68 ea       	ldi	r22, 0xA8	; 168
    149a:	79 e0       	ldi	r23, 0x09	; 9
    149c:	84 ed       	ldi	r24, 0xD4	; 212
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	0e 94 15 12 	call	0x242a	; 0x242a <_ZN5Print5printEPK19__FlashStringHelper>
    14a4:	c4 01       	movw	r24, r8
    14a6:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <_ZN7MPU605015getOTPBankValidEv>
    14aa:	81 11       	cpse	r24, r1
    14ac:	03 c0       	rjmp	.+6      	; 0x14b4 <_ZN7MPU605013dmpInitializeEv+0xf2>
    14ae:	68 e9       	ldi	r22, 0x98	; 152
    14b0:	79 e0       	ldi	r23, 0x09	; 9
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <_ZN7MPU605013dmpInitializeEv+0xf6>
    14b4:	61 ea       	ldi	r22, 0xA1	; 161
    14b6:	79 e0       	ldi	r23, 0x09	; 9
    14b8:	84 ed       	ldi	r24, 0xD4	; 212
    14ba:	91 e0       	ldi	r25, 0x01	; 1
    14bc:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    14c0:	67 e7       	ldi	r22, 0x77	; 119
    14c2:	79 e0       	ldi	r23, 0x09	; 9
    14c4:	84 ed       	ldi	r24, 0xD4	; 212
    14c6:	91 e0       	ldi	r25, 0x01	; 1
    14c8:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    14cc:	c4 01       	movw	r24, r8
    14ce:	0e 94 ef 19 	call	0x33de	; 0x33de <_ZN7MPU605016getXGyroOffsetTCEv>
    14d2:	a8 2e       	mov	r10, r24
    14d4:	c4 01       	movw	r24, r8
    14d6:	0e 94 16 1a 	call	0x342c	; 0x342c <_ZN7MPU605016getYGyroOffsetTCEv>
    14da:	b8 2e       	mov	r11, r24
    14dc:	c4 01       	movw	r24, r8
    14de:	0e 94 3d 1a 	call	0x347a	; 0x347a <_ZN7MPU605016getZGyroOffsetTCEv>
    14e2:	18 2f       	mov	r17, r24
    14e4:	66 e6       	ldi	r22, 0x66	; 102
    14e6:	79 e0       	ldi	r23, 0x09	; 9
    14e8:	84 ed       	ldi	r24, 0xD4	; 212
    14ea:	91 e0       	ldi	r25, 0x01	; 1
    14ec:	0e 94 15 12 	call	0x242a	; 0x242a <_ZN5Print5printEPK19__FlashStringHelper>
    14f0:	6a 2d       	mov	r22, r10
    14f2:	0a 2c       	mov	r0, r10
    14f4:	00 0c       	add	r0, r0
    14f6:	77 0b       	sbc	r23, r23
    14f8:	4a e0       	ldi	r20, 0x0A	; 10
    14fa:	50 e0       	ldi	r21, 0x00	; 0
    14fc:	84 ed       	ldi	r24, 0xD4	; 212
    14fe:	91 e0       	ldi	r25, 0x01	; 1
    1500:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <_ZN5Print7printlnEii>
    1504:	65 e5       	ldi	r22, 0x55	; 85
    1506:	79 e0       	ldi	r23, 0x09	; 9
    1508:	84 ed       	ldi	r24, 0xD4	; 212
    150a:	91 e0       	ldi	r25, 0x01	; 1
    150c:	0e 94 15 12 	call	0x242a	; 0x242a <_ZN5Print5printEPK19__FlashStringHelper>
    1510:	6b 2d       	mov	r22, r11
    1512:	0b 2c       	mov	r0, r11
    1514:	00 0c       	add	r0, r0
    1516:	77 0b       	sbc	r23, r23
    1518:	4a e0       	ldi	r20, 0x0A	; 10
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	84 ed       	ldi	r24, 0xD4	; 212
    151e:	91 e0       	ldi	r25, 0x01	; 1
    1520:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <_ZN5Print7printlnEii>
    1524:	64 e4       	ldi	r22, 0x44	; 68
    1526:	79 e0       	ldi	r23, 0x09	; 9
    1528:	84 ed       	ldi	r24, 0xD4	; 212
    152a:	91 e0       	ldi	r25, 0x01	; 1
    152c:	0e 94 15 12 	call	0x242a	; 0x242a <_ZN5Print5printEPK19__FlashStringHelper>
    1530:	61 2f       	mov	r22, r17
    1532:	01 2e       	mov	r0, r17
    1534:	00 0c       	add	r0, r0
    1536:	77 0b       	sbc	r23, r23
    1538:	4a e0       	ldi	r20, 0x0A	; 10
    153a:	50 e0       	ldi	r21, 0x00	; 0
    153c:	84 ed       	ldi	r24, 0xD4	; 212
    153e:	91 e0       	ldi	r25, 0x01	; 1
    1540:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <_ZN5Print7printlnEii>
    1544:	61 e2       	ldi	r22, 0x21	; 33
    1546:	79 e0       	ldi	r23, 0x09	; 9
    1548:	84 ed       	ldi	r24, 0xD4	; 212
    154a:	91 e0       	ldi	r25, 0x01	; 1
    154c:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1550:	4f e7       	ldi	r20, 0x7F	; 127
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	c4 01       	movw	r24, r8
    1556:	0e 94 06 19 	call	0x320c	; 0x320c <_ZN7MPU605015setSlaveAddressEhh>
    155a:	64 e0       	ldi	r22, 0x04	; 4
    155c:	79 e0       	ldi	r23, 0x09	; 9
    155e:	84 ed       	ldi	r24, 0xD4	; 212
    1560:	91 e0       	ldi	r25, 0x01	; 1
    1562:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1566:	60 e0       	ldi	r22, 0x00	; 0
    1568:	c4 01       	movw	r24, r8
    156a:	0e 94 32 19 	call	0x3264	; 0x3264 <_ZN7MPU605023setI2CMasterModeEnabledEb>
    156e:	6a ed       	ldi	r22, 0xDA	; 218
    1570:	78 e0       	ldi	r23, 0x08	; 8
    1572:	84 ed       	ldi	r24, 0xD4	; 212
    1574:	91 e0       	ldi	r25, 0x01	; 1
    1576:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    157a:	48 e6       	ldi	r20, 0x68	; 104
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	c4 01       	movw	r24, r8
    1580:	0e 94 06 19 	call	0x320c	; 0x320c <_ZN7MPU605015setSlaveAddressEhh>
    1584:	6a eb       	ldi	r22, 0xBA	; 186
    1586:	78 e0       	ldi	r23, 0x08	; 8
    1588:	84 ed       	ldi	r24, 0xD4	; 212
    158a:	91 e0       	ldi	r25, 0x01	; 1
    158c:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1590:	c4 01       	movw	r24, r8
    1592:	0e 94 42 19 	call	0x3284	; 0x3284 <_ZN7MPU605014resetI2CMasterEv>
    1596:	64 e1       	ldi	r22, 0x14	; 20
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <delay>
    15a2:	63 e9       	ldi	r22, 0x93	; 147
    15a4:	78 e0       	ldi	r23, 0x08	; 8
    15a6:	84 ed       	ldi	r24, 0xD4	; 212
    15a8:	91 e0       	ldi	r25, 0x01	; 1
    15aa:	0e 94 15 12 	call	0x242a	; 0x242a <_ZN5Print5printEPK19__FlashStringHelper>
    15ae:	4a e0       	ldi	r20, 0x0A	; 10
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	69 e8       	ldi	r22, 0x89	; 137
    15b4:	77 e0       	ldi	r23, 0x07	; 7
    15b6:	84 ed       	ldi	r24, 0xD4	; 212
    15b8:	91 e0       	ldi	r25, 0x01	; 1
    15ba:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <_ZN5Print5printEii>
    15be:	6b e8       	ldi	r22, 0x8B	; 139
    15c0:	78 e0       	ldi	r23, 0x08	; 8
    15c2:	84 ed       	ldi	r24, 0xD4	; 212
    15c4:	91 e0       	ldi	r25, 0x01	; 1
    15c6:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    15ca:	ee 24       	eor	r14, r14
    15cc:	e3 94       	inc	r14
    15ce:	00 e0       	ldi	r16, 0x00	; 0
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	49 e8       	ldi	r20, 0x89	; 137
    15d4:	57 e0       	ldi	r21, 0x07	; 7
    15d6:	67 e8       	ldi	r22, 0x87	; 135
    15d8:	7b e0       	ldi	r23, 0x0B	; 11
    15da:	c4 01       	movw	r24, r8
    15dc:	0e 94 0f 1c 	call	0x381e	; 0x381e <_ZN7MPU605020writeProgMemoryBlockEPKhjhhb>
    15e0:	88 23       	and	r24, r24
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <_ZN7MPU605013dmpInitializeEv+0x224>
    15e4:	59 c3       	rjmp	.+1714   	; 0x1c98 <_ZN7MPU605013dmpInitializeEv+0x8d6>
    15e6:	63 e6       	ldi	r22, 0x63	; 99
    15e8:	78 e0       	ldi	r23, 0x08	; 8
    15ea:	84 ed       	ldi	r24, 0xD4	; 212
    15ec:	91 e0       	ldi	r25, 0x01	; 1
    15ee:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    15f2:	63 e3       	ldi	r22, 0x33	; 51
    15f4:	78 e0       	ldi	r23, 0x08	; 8
    15f6:	84 ed       	ldi	r24, 0xD4	; 212
    15f8:	91 e0       	ldi	r25, 0x01	; 1
    15fa:	0e 94 15 12 	call	0x242a	; 0x242a <_ZN5Print5printEPK19__FlashStringHelper>
    15fe:	4a e0       	ldi	r20, 0x0A	; 10
    1600:	50 e0       	ldi	r21, 0x00	; 0
    1602:	60 ec       	ldi	r22, 0xC0	; 192
    1604:	70 e0       	ldi	r23, 0x00	; 0
    1606:	84 ed       	ldi	r24, 0xD4	; 212
    1608:	91 e0       	ldi	r25, 0x01	; 1
    160a:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <_ZN5Print5printEii>
    160e:	6d e1       	ldi	r22, 0x1D	; 29
    1610:	78 e0       	ldi	r23, 0x08	; 8
    1612:	84 ed       	ldi	r24, 0xD4	; 212
    1614:	91 e0       	ldi	r25, 0x01	; 1
    1616:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    161a:	40 ec       	ldi	r20, 0xC0	; 192
    161c:	50 e0       	ldi	r21, 0x00	; 0
    161e:	67 ec       	ldi	r22, 0xC7	; 199
    1620:	7a e0       	ldi	r23, 0x0A	; 10
    1622:	c4 01       	movw	r24, r8
    1624:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <_ZN7MPU605028writeProgDMPConfigurationSetEPKhj>
    1628:	88 23       	and	r24, r24
    162a:	09 f4       	brne	.+2      	; 0x162e <_ZN7MPU605013dmpInitializeEv+0x26c>
    162c:	2d c3       	rjmp	.+1626   	; 0x1c88 <_ZN7MPU605013dmpInitializeEv+0x8c6>
    162e:	6c ee       	ldi	r22, 0xEC	; 236
    1630:	77 e0       	ldi	r23, 0x07	; 7
    1632:	84 ed       	ldi	r24, 0xD4	; 212
    1634:	91 e0       	ldi	r25, 0x01	; 1
    1636:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    163a:	6a ec       	ldi	r22, 0xCA	; 202
    163c:	77 e0       	ldi	r23, 0x07	; 7
    163e:	84 ed       	ldi	r24, 0xD4	; 212
    1640:	91 e0       	ldi	r25, 0x01	; 1
    1642:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1646:	63 e0       	ldi	r22, 0x03	; 3
    1648:	c4 01       	movw	r24, r8
    164a:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <_ZN7MPU605014setClockSourceEh>
    164e:	69 e9       	ldi	r22, 0x99	; 153
    1650:	77 e0       	ldi	r23, 0x07	; 7
    1652:	84 ed       	ldi	r24, 0xD4	; 212
    1654:	91 e0       	ldi	r25, 0x01	; 1
    1656:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    165a:	62 e1       	ldi	r22, 0x12	; 18
    165c:	c4 01       	movw	r24, r8
    165e:	0e 94 11 19 	call	0x3222	; 0x3222 <_ZN7MPU605013setIntEnabledEh>
    1662:	69 e7       	ldi	r22, 0x79	; 121
    1664:	77 e0       	ldi	r23, 0x07	; 7
    1666:	84 ed       	ldi	r24, 0xD4	; 212
    1668:	91 e0       	ldi	r25, 0x01	; 1
    166a:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    166e:	64 e0       	ldi	r22, 0x04	; 4
    1670:	c4 01       	movw	r24, r8
    1672:	0e 94 b7 18 	call	0x316e	; 0x316e <_ZN7MPU60507setRateEh>
    1676:	69 e4       	ldi	r22, 0x49	; 73
    1678:	77 e0       	ldi	r23, 0x07	; 7
    167a:	84 ed       	ldi	r24, 0xD4	; 212
    167c:	91 e0       	ldi	r25, 0x01	; 1
    167e:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1682:	61 e0       	ldi	r22, 0x01	; 1
    1684:	c4 01       	movw	r24, r8
    1686:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN7MPU605020setExternalFrameSyncEh>
    168a:	67 e2       	ldi	r22, 0x27	; 39
    168c:	77 e0       	ldi	r23, 0x07	; 7
    168e:	84 ed       	ldi	r24, 0xD4	; 212
    1690:	91 e0       	ldi	r25, 0x01	; 1
    1692:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1696:	63 e0       	ldi	r22, 0x03	; 3
    1698:	c4 01       	movw	r24, r8
    169a:	0e 94 c9 18 	call	0x3192	; 0x3192 <_ZN7MPU605011setDLPFModeEh>
    169e:	67 ef       	ldi	r22, 0xF7	; 247
    16a0:	76 e0       	ldi	r23, 0x06	; 6
    16a2:	84 ed       	ldi	r24, 0xD4	; 212
    16a4:	91 e0       	ldi	r25, 0x01	; 1
    16a6:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    16aa:	63 e0       	ldi	r22, 0x03	; 3
    16ac:	c4 01       	movw	r24, r8
    16ae:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <_ZN7MPU605021setFullScaleGyroRangeEh>
    16b2:	64 ed       	ldi	r22, 0xD4	; 212
    16b4:	76 e0       	ldi	r23, 0x06	; 6
    16b6:	84 ed       	ldi	r24, 0xD4	; 212
    16b8:	91 e0       	ldi	r25, 0x01	; 1
    16ba:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    16be:	63 e0       	ldi	r22, 0x03	; 3
    16c0:	c4 01       	movw	r24, r8
    16c2:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <_ZN7MPU605013setDMPConfig1Eh>
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	c4 01       	movw	r24, r8
    16ca:	0e 94 de 1c 	call	0x39bc	; 0x39bc <_ZN7MPU605013setDMPConfig2Eh>
    16ce:	6a eb       	ldi	r22, 0xBA	; 186
    16d0:	76 e0       	ldi	r23, 0x06	; 6
    16d2:	84 ed       	ldi	r24, 0xD4	; 212
    16d4:	91 e0       	ldi	r25, 0x01	; 1
    16d6:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    16da:	60 e0       	ldi	r22, 0x00	; 0
    16dc:	c4 01       	movw	r24, r8
    16de:	0e 94 e7 19 	call	0x33ce	; 0x33ce <_ZN7MPU605015setOTPBankValidEb>
    16e2:	66 e8       	ldi	r22, 0x86	; 134
    16e4:	76 e0       	ldi	r23, 0x06	; 6
    16e6:	84 ed       	ldi	r24, 0xD4	; 212
    16e8:	91 e0       	ldi	r25, 0x01	; 1
    16ea:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    16ee:	6a 2d       	mov	r22, r10
    16f0:	c4 01       	movw	r24, r8
    16f2:	0e 94 0b 1a 	call	0x3416	; 0x3416 <_ZN7MPU605016setXGyroOffsetTCEa>
    16f6:	6b 2d       	mov	r22, r11
    16f8:	c4 01       	movw	r24, r8
    16fa:	0e 94 32 1a 	call	0x3464	; 0x3464 <_ZN7MPU605016setYGyroOffsetTCEa>
    16fe:	61 2f       	mov	r22, r17
    1700:	c4 01       	movw	r24, r8
    1702:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <_ZN7MPU605016setZGyroOffsetTCEa>
    1706:	60 e5       	ldi	r22, 0x50	; 80
    1708:	76 e0       	ldi	r23, 0x06	; 6
    170a:	84 ed       	ldi	r24, 0xD4	; 212
    170c:	91 e0       	ldi	r25, 0x01	; 1
    170e:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1712:	a1 2c       	mov	r10, r1
    1714:	b1 2c       	mov	r11, r1
    1716:	f5 01       	movw	r30, r10
    1718:	e8 56       	subi	r30, 0x68	; 104
    171a:	f5 4f       	sbci	r31, 0xF5	; 245
    171c:	e4 91       	lpm	r30, Z
    171e:	a1 e8       	ldi	r26, 0x81	; 129
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	ac 0f       	add	r26, r28
    1724:	bd 1f       	adc	r27, r29
    1726:	aa 0d       	add	r26, r10
    1728:	b1 1d       	adc	r27, r1
    172a:	ec 93       	st	X, r30
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	8a 0d       	add	r24, r10
    1730:	9f ef       	ldi	r25, 0xFF	; 255
    1732:	a9 1a       	sub	r10, r25
    1734:	b9 0a       	sbc	r11, r25
    1736:	e3 e0       	ldi	r30, 0x03	; 3
    1738:	ea 15       	cp	r30, r10
    173a:	68 f7       	brcc	.-38     	; 0x1716 <_ZN7MPU605013dmpInitializeEv+0x354>
    173c:	cd 57       	subi	r28, 0x7D	; 125
    173e:	df 4f       	sbci	r29, 0xFF	; 255
    1740:	48 81       	ld	r20, Y
    1742:	c3 58       	subi	r28, 0x83	; 131
    1744:	d0 40       	sbci	r29, 0x00	; 0
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	24 2f       	mov	r18, r20
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	2d 5f       	subi	r18, 0xFD	; 253
    174e:	3f 4f       	sbci	r19, 0xFF	; 255
    1750:	82 17       	cp	r24, r18
    1752:	93 07       	cpc	r25, r19
    1754:	04 f3       	brlt	.-64     	; 0x1716 <_ZN7MPU605013dmpInitializeEv+0x354>
    1756:	50 e0       	ldi	r21, 0x00	; 0
    1758:	61 e8       	ldi	r22, 0x81	; 129
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	6c 0f       	add	r22, r28
    175e:	7d 1f       	adc	r23, r29
    1760:	6d 5f       	subi	r22, 0xFD	; 253
    1762:	7f 4f       	sbci	r23, 0xFF	; 255
    1764:	c1 2c       	mov	r12, r1
    1766:	ee 24       	eor	r14, r14
    1768:	e3 94       	inc	r14
    176a:	ce 57       	subi	r28, 0x7E	; 126
    176c:	df 4f       	sbci	r29, 0xFF	; 255
    176e:	08 81       	ld	r16, Y
    1770:	c2 58       	subi	r28, 0x82	; 130
    1772:	d0 40       	sbci	r29, 0x00	; 0
    1774:	cf 57       	subi	r28, 0x7F	; 127
    1776:	df 4f       	sbci	r29, 0xFF	; 255
    1778:	28 81       	ld	r18, Y
    177a:	c1 58       	subi	r28, 0x81	; 129
    177c:	d0 40       	sbci	r29, 0x00	; 0
    177e:	c4 01       	movw	r24, r8
    1780:	0e 94 22 1b 	call	0x3644	; 0x3644 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>
    1784:	6a e1       	ldi	r22, 0x1A	; 26
    1786:	76 e0       	ldi	r23, 0x06	; 6
    1788:	84 ed       	ldi	r24, 0xD4	; 212
    178a:	91 e0       	ldi	r25, 0x01	; 1
    178c:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	f5 01       	movw	r30, r10
    1794:	e8 56       	subi	r30, 0x68	; 104
    1796:	f5 4f       	sbci	r31, 0xF5	; 245
    1798:	e4 91       	lpm	r30, Z
    179a:	a1 e8       	ldi	r26, 0x81	; 129
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	ac 0f       	add	r26, r28
    17a0:	bd 1f       	adc	r27, r29
    17a2:	a8 0f       	add	r26, r24
    17a4:	b1 1d       	adc	r27, r1
    17a6:	ec 93       	st	X, r30
    17a8:	8f 5f       	subi	r24, 0xFF	; 255
    17aa:	ff ef       	ldi	r31, 0xFF	; 255
    17ac:	af 1a       	sub	r10, r31
    17ae:	bf 0a       	sbc	r11, r31
    17b0:	84 30       	cpi	r24, 0x04	; 4
    17b2:	78 f3       	brcs	.-34     	; 0x1792 <_ZN7MPU605013dmpInitializeEv+0x3d0>
    17b4:	cd 57       	subi	r28, 0x7D	; 125
    17b6:	df 4f       	sbci	r29, 0xFF	; 255
    17b8:	48 81       	ld	r20, Y
    17ba:	c3 58       	subi	r28, 0x83	; 131
    17bc:	d0 40       	sbci	r29, 0x00	; 0
    17be:	68 2f       	mov	r22, r24
    17c0:	70 e0       	ldi	r23, 0x00	; 0
    17c2:	24 2f       	mov	r18, r20
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	2d 5f       	subi	r18, 0xFD	; 253
    17c8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ca:	62 17       	cp	r22, r18
    17cc:	73 07       	cpc	r23, r19
    17ce:	0c f3       	brlt	.-62     	; 0x1792 <_ZN7MPU605013dmpInitializeEv+0x3d0>
    17d0:	50 e0       	ldi	r21, 0x00	; 0
    17d2:	61 e8       	ldi	r22, 0x81	; 129
    17d4:	70 e0       	ldi	r23, 0x00	; 0
    17d6:	6c 0f       	add	r22, r28
    17d8:	7d 1f       	adc	r23, r29
    17da:	6d 5f       	subi	r22, 0xFD	; 253
    17dc:	7f 4f       	sbci	r23, 0xFF	; 255
    17de:	c1 2c       	mov	r12, r1
    17e0:	ee 24       	eor	r14, r14
    17e2:	e3 94       	inc	r14
    17e4:	ce 57       	subi	r28, 0x7E	; 126
    17e6:	df 4f       	sbci	r29, 0xFF	; 255
    17e8:	08 81       	ld	r16, Y
    17ea:	c2 58       	subi	r28, 0x82	; 130
    17ec:	d0 40       	sbci	r29, 0x00	; 0
    17ee:	cf 57       	subi	r28, 0x7F	; 127
    17f0:	df 4f       	sbci	r29, 0xFF	; 255
    17f2:	28 81       	ld	r18, Y
    17f4:	c1 58       	subi	r28, 0x81	; 129
    17f6:	d0 40       	sbci	r29, 0x00	; 0
    17f8:	c4 01       	movw	r24, r8
    17fa:	0e 94 22 1b 	call	0x3644	; 0x3644 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>
    17fe:	68 e0       	ldi	r22, 0x08	; 8
    1800:	76 e0       	ldi	r23, 0x06	; 6
    1802:	84 ed       	ldi	r24, 0xD4	; 212
    1804:	91 e0       	ldi	r25, 0x01	; 1
    1806:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    180a:	c4 01       	movw	r24, r8
    180c:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN7MPU60509resetFIFOEv>
    1810:	62 ef       	ldi	r22, 0xF2	; 242
    1812:	75 e0       	ldi	r23, 0x05	; 5
    1814:	84 ed       	ldi	r24, 0xD4	; 212
    1816:	91 e0       	ldi	r25, 0x01	; 1
    1818:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    181c:	c4 01       	movw	r24, r8
    181e:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <_ZN7MPU605012getFIFOCountEv>
    1822:	18 2f       	mov	r17, r24
    1824:	09 2f       	mov	r16, r25
    1826:	6e ed       	ldi	r22, 0xDE	; 222
    1828:	75 e0       	ldi	r23, 0x05	; 5
    182a:	84 ed       	ldi	r24, 0xD4	; 212
    182c:	91 e0       	ldi	r25, 0x01	; 1
    182e:	0e 94 15 12 	call	0x242a	; 0x242a <_ZN5Print5printEPK19__FlashStringHelper>
    1832:	4a e0       	ldi	r20, 0x0A	; 10
    1834:	50 e0       	ldi	r21, 0x00	; 0
    1836:	61 2f       	mov	r22, r17
    1838:	70 2f       	mov	r23, r16
    183a:	84 ed       	ldi	r24, 0xD4	; 212
    183c:	91 e0       	ldi	r25, 0x01	; 1
    183e:	0e 94 3d 13 	call	0x267a	; 0x267a <_ZN5Print7printlnEji>
    1842:	41 2f       	mov	r20, r17
    1844:	be 01       	movw	r22, r28
    1846:	6f 5f       	subi	r22, 0xFF	; 255
    1848:	7f 4f       	sbci	r23, 0xFF	; 255
    184a:	c4 01       	movw	r24, r8
    184c:	0e 94 98 19 	call	0x3330	; 0x3330 <_ZN7MPU605012getFIFOBytesEPhh>
    1850:	63 eb       	ldi	r22, 0xB3	; 179
    1852:	75 e0       	ldi	r23, 0x05	; 5
    1854:	84 ed       	ldi	r24, 0xD4	; 212
    1856:	91 e0       	ldi	r25, 0x01	; 1
    1858:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    185c:	62 e0       	ldi	r22, 0x02	; 2
    185e:	c4 01       	movw	r24, r8
    1860:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <_ZN7MPU605027setMotionDetectionThresholdEh>
    1864:	61 e8       	ldi	r22, 0x81	; 129
    1866:	75 e0       	ldi	r23, 0x05	; 5
    1868:	84 ed       	ldi	r24, 0xD4	; 212
    186a:	91 e0       	ldi	r25, 0x01	; 1
    186c:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1870:	6c e9       	ldi	r22, 0x9C	; 156
    1872:	c4 01       	movw	r24, r8
    1874:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <_ZN7MPU605031setZeroMotionDetectionThresholdEh>
    1878:	66 e5       	ldi	r22, 0x56	; 86
    187a:	75 e0       	ldi	r23, 0x05	; 5
    187c:	84 ed       	ldi	r24, 0xD4	; 212
    187e:	91 e0       	ldi	r25, 0x01	; 1
    1880:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1884:	60 e5       	ldi	r22, 0x50	; 80
    1886:	c4 01       	movw	r24, r8
    1888:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <_ZN7MPU605026setMotionDetectionDurationEh>
    188c:	67 e2       	ldi	r22, 0x27	; 39
    188e:	75 e0       	ldi	r23, 0x05	; 5
    1890:	84 ed       	ldi	r24, 0xD4	; 212
    1892:	91 e0       	ldi	r25, 0x01	; 1
    1894:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1898:	60 e0       	ldi	r22, 0x00	; 0
    189a:	c4 01       	movw	r24, r8
    189c:	0e 94 ff 18 	call	0x31fe	; 0x31fe <_ZN7MPU605030setZeroMotionDetectionDurationEh>
    18a0:	65 e1       	ldi	r22, 0x15	; 21
    18a2:	75 e0       	ldi	r23, 0x05	; 5
    18a4:	84 ed       	ldi	r24, 0xD4	; 212
    18a6:	91 e0       	ldi	r25, 0x01	; 1
    18a8:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    18ac:	c4 01       	movw	r24, r8
    18ae:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN7MPU60509resetFIFOEv>
    18b2:	64 e0       	ldi	r22, 0x04	; 4
    18b4:	75 e0       	ldi	r23, 0x05	; 5
    18b6:	84 ed       	ldi	r24, 0xD4	; 212
    18b8:	91 e0       	ldi	r25, 0x01	; 1
    18ba:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    18be:	61 e0       	ldi	r22, 0x01	; 1
    18c0:	c4 01       	movw	r24, r8
    18c2:	0e 94 2a 19 	call	0x3254	; 0x3254 <_ZN7MPU605014setFIFOEnabledEb>
    18c6:	64 ef       	ldi	r22, 0xF4	; 244
    18c8:	74 e0       	ldi	r23, 0x04	; 4
    18ca:	84 ed       	ldi	r24, 0xD4	; 212
    18cc:	91 e0       	ldi	r25, 0x01	; 1
    18ce:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    18d2:	61 e0       	ldi	r22, 0x01	; 1
    18d4:	c4 01       	movw	r24, r8
    18d6:	0e 94 80 1a 	call	0x3500	; 0x3500 <_ZN7MPU605013setDMPEnabledEb>
    18da:	63 ee       	ldi	r22, 0xE3	; 227
    18dc:	74 e0       	ldi	r23, 0x04	; 4
    18de:	84 ed       	ldi	r24, 0xD4	; 212
    18e0:	91 e0       	ldi	r25, 0x01	; 1
    18e2:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    18e6:	c4 01       	movw	r24, r8
    18e8:	0e 94 88 1a 	call	0x3510	; 0x3510 <_ZN7MPU60508resetDMPEv>
    18ec:	6d ea       	ldi	r22, 0xAD	; 173
    18ee:	74 e0       	ldi	r23, 0x04	; 4
    18f0:	84 ed       	ldi	r24, 0xD4	; 212
    18f2:	91 e0       	ldi	r25, 0x01	; 1
    18f4:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	f5 01       	movw	r30, r10
    18fc:	e8 56       	subi	r30, 0x68	; 104
    18fe:	f5 4f       	sbci	r31, 0xF5	; 245
    1900:	e4 91       	lpm	r30, Z
    1902:	a1 e8       	ldi	r26, 0x81	; 129
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	ac 0f       	add	r26, r28
    1908:	bd 1f       	adc	r27, r29
    190a:	a8 0f       	add	r26, r24
    190c:	b1 1d       	adc	r27, r1
    190e:	ec 93       	st	X, r30
    1910:	8f 5f       	subi	r24, 0xFF	; 255
    1912:	9f ef       	ldi	r25, 0xFF	; 255
    1914:	a9 1a       	sub	r10, r25
    1916:	b9 0a       	sbc	r11, r25
    1918:	84 30       	cpi	r24, 0x04	; 4
    191a:	78 f3       	brcs	.-34     	; 0x18fa <_ZN7MPU605013dmpInitializeEv+0x538>
    191c:	cd 57       	subi	r28, 0x7D	; 125
    191e:	df 4f       	sbci	r29, 0xFF	; 255
    1920:	48 81       	ld	r20, Y
    1922:	c3 58       	subi	r28, 0x83	; 131
    1924:	d0 40       	sbci	r29, 0x00	; 0
    1926:	68 2f       	mov	r22, r24
    1928:	70 e0       	ldi	r23, 0x00	; 0
    192a:	24 2f       	mov	r18, r20
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	2d 5f       	subi	r18, 0xFD	; 253
    1930:	3f 4f       	sbci	r19, 0xFF	; 255
    1932:	62 17       	cp	r22, r18
    1934:	73 07       	cpc	r23, r19
    1936:	0c f3       	brlt	.-62     	; 0x18fa <_ZN7MPU605013dmpInitializeEv+0x538>
    1938:	50 e0       	ldi	r21, 0x00	; 0
    193a:	61 e8       	ldi	r22, 0x81	; 129
    193c:	70 e0       	ldi	r23, 0x00	; 0
    193e:	6c 0f       	add	r22, r28
    1940:	7d 1f       	adc	r23, r29
    1942:	6d 5f       	subi	r22, 0xFD	; 253
    1944:	7f 4f       	sbci	r23, 0xFF	; 255
    1946:	c1 2c       	mov	r12, r1
    1948:	ee 24       	eor	r14, r14
    194a:	e3 94       	inc	r14
    194c:	ce 57       	subi	r28, 0x7E	; 126
    194e:	df 4f       	sbci	r29, 0xFF	; 255
    1950:	08 81       	ld	r16, Y
    1952:	c2 58       	subi	r28, 0x82	; 130
    1954:	d0 40       	sbci	r29, 0x00	; 0
    1956:	cf 57       	subi	r28, 0x7F	; 127
    1958:	df 4f       	sbci	r29, 0xFF	; 255
    195a:	28 81       	ld	r18, Y
    195c:	c1 58       	subi	r28, 0x81	; 129
    195e:	d0 40       	sbci	r29, 0x00	; 0
    1960:	c4 01       	movw	r24, r8
    1962:	0e 94 22 1b 	call	0x3644	; 0x3644 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>
    1966:	67 e7       	ldi	r22, 0x77	; 119
    1968:	74 e0       	ldi	r23, 0x04	; 4
    196a:	84 ed       	ldi	r24, 0xD4	; 212
    196c:	91 e0       	ldi	r25, 0x01	; 1
    196e:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	f5 01       	movw	r30, r10
    1976:	e8 56       	subi	r30, 0x68	; 104
    1978:	f5 4f       	sbci	r31, 0xF5	; 245
    197a:	e4 91       	lpm	r30, Z
    197c:	a1 e8       	ldi	r26, 0x81	; 129
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	ac 0f       	add	r26, r28
    1982:	bd 1f       	adc	r27, r29
    1984:	a8 0f       	add	r26, r24
    1986:	b1 1d       	adc	r27, r1
    1988:	ec 93       	st	X, r30
    198a:	8f 5f       	subi	r24, 0xFF	; 255
    198c:	ef ef       	ldi	r30, 0xFF	; 255
    198e:	ae 1a       	sub	r10, r30
    1990:	be 0a       	sbc	r11, r30
    1992:	84 30       	cpi	r24, 0x04	; 4
    1994:	78 f3       	brcs	.-34     	; 0x1974 <_ZN7MPU605013dmpInitializeEv+0x5b2>
    1996:	cd 57       	subi	r28, 0x7D	; 125
    1998:	df 4f       	sbci	r29, 0xFF	; 255
    199a:	48 81       	ld	r20, Y
    199c:	c3 58       	subi	r28, 0x83	; 131
    199e:	d0 40       	sbci	r29, 0x00	; 0
    19a0:	68 2f       	mov	r22, r24
    19a2:	70 e0       	ldi	r23, 0x00	; 0
    19a4:	24 2f       	mov	r18, r20
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	2d 5f       	subi	r18, 0xFD	; 253
    19aa:	3f 4f       	sbci	r19, 0xFF	; 255
    19ac:	62 17       	cp	r22, r18
    19ae:	73 07       	cpc	r23, r19
    19b0:	0c f3       	brlt	.-62     	; 0x1974 <_ZN7MPU605013dmpInitializeEv+0x5b2>
    19b2:	50 e0       	ldi	r21, 0x00	; 0
    19b4:	61 e8       	ldi	r22, 0x81	; 129
    19b6:	70 e0       	ldi	r23, 0x00	; 0
    19b8:	6c 0f       	add	r22, r28
    19ba:	7d 1f       	adc	r23, r29
    19bc:	6d 5f       	subi	r22, 0xFD	; 253
    19be:	7f 4f       	sbci	r23, 0xFF	; 255
    19c0:	c1 2c       	mov	r12, r1
    19c2:	ee 24       	eor	r14, r14
    19c4:	e3 94       	inc	r14
    19c6:	ce 57       	subi	r28, 0x7E	; 126
    19c8:	df 4f       	sbci	r29, 0xFF	; 255
    19ca:	08 81       	ld	r16, Y
    19cc:	c2 58       	subi	r28, 0x82	; 130
    19ce:	d0 40       	sbci	r29, 0x00	; 0
    19d0:	cf 57       	subi	r28, 0x7F	; 127
    19d2:	df 4f       	sbci	r29, 0xFF	; 255
    19d4:	28 81       	ld	r18, Y
    19d6:	c1 58       	subi	r28, 0x81	; 129
    19d8:	d0 40       	sbci	r29, 0x00	; 0
    19da:	c4 01       	movw	r24, r8
    19dc:	0e 94 22 1b 	call	0x3644	; 0x3644 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>
    19e0:	61 e4       	ldi	r22, 0x41	; 65
    19e2:	74 e0       	ldi	r23, 0x04	; 4
    19e4:	84 ed       	ldi	r24, 0xD4	; 212
    19e6:	91 e0       	ldi	r25, 0x01	; 1
    19e8:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	f5 01       	movw	r30, r10
    19f0:	e8 56       	subi	r30, 0x68	; 104
    19f2:	f5 4f       	sbci	r31, 0xF5	; 245
    19f4:	e4 91       	lpm	r30, Z
    19f6:	a1 e8       	ldi	r26, 0x81	; 129
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	ac 0f       	add	r26, r28
    19fc:	bd 1f       	adc	r27, r29
    19fe:	a8 0f       	add	r26, r24
    1a00:	b1 1d       	adc	r27, r1
    1a02:	ec 93       	st	X, r30
    1a04:	8f 5f       	subi	r24, 0xFF	; 255
    1a06:	ff ef       	ldi	r31, 0xFF	; 255
    1a08:	af 1a       	sub	r10, r31
    1a0a:	bf 0a       	sbc	r11, r31
    1a0c:	84 30       	cpi	r24, 0x04	; 4
    1a0e:	78 f3       	brcs	.-34     	; 0x19ee <_ZN7MPU605013dmpInitializeEv+0x62c>
    1a10:	cd 57       	subi	r28, 0x7D	; 125
    1a12:	df 4f       	sbci	r29, 0xFF	; 255
    1a14:	48 81       	ld	r20, Y
    1a16:	c3 58       	subi	r28, 0x83	; 131
    1a18:	d0 40       	sbci	r29, 0x00	; 0
    1a1a:	68 2f       	mov	r22, r24
    1a1c:	70 e0       	ldi	r23, 0x00	; 0
    1a1e:	24 2f       	mov	r18, r20
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	2d 5f       	subi	r18, 0xFD	; 253
    1a24:	3f 4f       	sbci	r19, 0xFF	; 255
    1a26:	62 17       	cp	r22, r18
    1a28:	73 07       	cpc	r23, r19
    1a2a:	0c f3       	brlt	.-62     	; 0x19ee <_ZN7MPU605013dmpInitializeEv+0x62c>
    1a2c:	50 e0       	ldi	r21, 0x00	; 0
    1a2e:	61 e8       	ldi	r22, 0x81	; 129
    1a30:	70 e0       	ldi	r23, 0x00	; 0
    1a32:	6c 0f       	add	r22, r28
    1a34:	7d 1f       	adc	r23, r29
    1a36:	6d 5f       	subi	r22, 0xFD	; 253
    1a38:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3a:	c1 2c       	mov	r12, r1
    1a3c:	ee 24       	eor	r14, r14
    1a3e:	e3 94       	inc	r14
    1a40:	ce 57       	subi	r28, 0x7E	; 126
    1a42:	df 4f       	sbci	r29, 0xFF	; 255
    1a44:	08 81       	ld	r16, Y
    1a46:	c2 58       	subi	r28, 0x82	; 130
    1a48:	d0 40       	sbci	r29, 0x00	; 0
    1a4a:	cf 57       	subi	r28, 0x7F	; 127
    1a4c:	df 4f       	sbci	r29, 0xFF	; 255
    1a4e:	28 81       	ld	r18, Y
    1a50:	c1 58       	subi	r28, 0x81	; 129
    1a52:	d0 40       	sbci	r29, 0x00	; 0
    1a54:	c4 01       	movw	r24, r8
    1a56:	0e 94 22 1b 	call	0x3644	; 0x3644 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>
    1a5a:	63 e2       	ldi	r22, 0x23	; 35
    1a5c:	74 e0       	ldi	r23, 0x04	; 4
    1a5e:	84 ed       	ldi	r24, 0xD4	; 212
    1a60:	91 e0       	ldi	r25, 0x01	; 1
    1a62:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1a66:	c4 01       	movw	r24, r8
    1a68:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <_ZN7MPU605012getFIFOCountEv>
    1a6c:	8c 01       	movw	r16, r24
    1a6e:	03 97       	sbiw	r24, 0x03	; 3
    1a70:	d0 f3       	brcs	.-12     	; 0x1a66 <_ZN7MPU605013dmpInitializeEv+0x6a4>
    1a72:	6f e0       	ldi	r22, 0x0F	; 15
    1a74:	74 e0       	ldi	r23, 0x04	; 4
    1a76:	84 ed       	ldi	r24, 0xD4	; 212
    1a78:	91 e0       	ldi	r25, 0x01	; 1
    1a7a:	0e 94 15 12 	call	0x242a	; 0x242a <_ZN5Print5printEPK19__FlashStringHelper>
    1a7e:	4a e0       	ldi	r20, 0x0A	; 10
    1a80:	50 e0       	ldi	r21, 0x00	; 0
    1a82:	b8 01       	movw	r22, r16
    1a84:	84 ed       	ldi	r24, 0xD4	; 212
    1a86:	91 e0       	ldi	r25, 0x01	; 1
    1a88:	0e 94 3d 13 	call	0x267a	; 0x267a <_ZN5Print7printlnEji>
    1a8c:	6a ef       	ldi	r22, 0xFA	; 250
    1a8e:	73 e0       	ldi	r23, 0x03	; 3
    1a90:	84 ed       	ldi	r24, 0xD4	; 212
    1a92:	91 e0       	ldi	r25, 0x01	; 1
    1a94:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1a98:	40 2f       	mov	r20, r16
    1a9a:	be 01       	movw	r22, r28
    1a9c:	6f 5f       	subi	r22, 0xFF	; 255
    1a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa0:	c4 01       	movw	r24, r8
    1aa2:	0e 94 98 19 	call	0x3330	; 0x3330 <_ZN7MPU605012getFIFOBytesEPhh>
    1aa6:	6e ed       	ldi	r22, 0xDE	; 222
    1aa8:	73 e0       	ldi	r23, 0x03	; 3
    1aaa:	84 ed       	ldi	r24, 0xD4	; 212
    1aac:	91 e0       	ldi	r25, 0x01	; 1
    1aae:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1ab2:	64 ec       	ldi	r22, 0xC4	; 196
    1ab4:	73 e0       	ldi	r23, 0x03	; 3
    1ab6:	84 ed       	ldi	r24, 0xD4	; 212
    1ab8:	91 e0       	ldi	r25, 0x01	; 1
    1aba:	0e 94 15 12 	call	0x242a	; 0x242a <_ZN5Print5printEPK19__FlashStringHelper>
    1abe:	c4 01       	movw	r24, r8
    1ac0:	0e 94 18 19 	call	0x3230	; 0x3230 <_ZN7MPU605012getIntStatusEv>
    1ac4:	40 e1       	ldi	r20, 0x10	; 16
    1ac6:	50 e0       	ldi	r21, 0x00	; 0
    1ac8:	68 2f       	mov	r22, r24
    1aca:	84 ed       	ldi	r24, 0xD4	; 212
    1acc:	91 e0       	ldi	r25, 0x01	; 1
    1ace:	0e 94 26 13 	call	0x264c	; 0x264c <_ZN5Print7printlnEhi>
    1ad2:	6e e8       	ldi	r22, 0x8E	; 142
    1ad4:	73 e0       	ldi	r23, 0x03	; 3
    1ad6:	84 ed       	ldi	r24, 0xD4	; 212
    1ad8:	91 e0       	ldi	r25, 0x01	; 1
    1ada:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	f5 01       	movw	r30, r10
    1ae2:	e8 56       	subi	r30, 0x68	; 104
    1ae4:	f5 4f       	sbci	r31, 0xF5	; 245
    1ae6:	e4 91       	lpm	r30, Z
    1ae8:	a1 e8       	ldi	r26, 0x81	; 129
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	ac 0f       	add	r26, r28
    1aee:	bd 1f       	adc	r27, r29
    1af0:	a8 0f       	add	r26, r24
    1af2:	b1 1d       	adc	r27, r1
    1af4:	ec 93       	st	X, r30
    1af6:	8f 5f       	subi	r24, 0xFF	; 255
    1af8:	9f ef       	ldi	r25, 0xFF	; 255
    1afa:	a9 1a       	sub	r10, r25
    1afc:	b9 0a       	sbc	r11, r25
    1afe:	84 30       	cpi	r24, 0x04	; 4
    1b00:	78 f3       	brcs	.-34     	; 0x1ae0 <_ZN7MPU605013dmpInitializeEv+0x71e>
    1b02:	cd 57       	subi	r28, 0x7D	; 125
    1b04:	df 4f       	sbci	r29, 0xFF	; 255
    1b06:	48 81       	ld	r20, Y
    1b08:	c3 58       	subi	r28, 0x83	; 131
    1b0a:	d0 40       	sbci	r29, 0x00	; 0
    1b0c:	68 2f       	mov	r22, r24
    1b0e:	70 e0       	ldi	r23, 0x00	; 0
    1b10:	24 2f       	mov	r18, r20
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	2d 5f       	subi	r18, 0xFD	; 253
    1b16:	3f 4f       	sbci	r19, 0xFF	; 255
    1b18:	62 17       	cp	r22, r18
    1b1a:	73 07       	cpc	r23, r19
    1b1c:	0c f3       	brlt	.-62     	; 0x1ae0 <_ZN7MPU605013dmpInitializeEv+0x71e>
    1b1e:	50 e0       	ldi	r21, 0x00	; 0
    1b20:	61 e8       	ldi	r22, 0x81	; 129
    1b22:	70 e0       	ldi	r23, 0x00	; 0
    1b24:	6c 0f       	add	r22, r28
    1b26:	7d 1f       	adc	r23, r29
    1b28:	6d 5f       	subi	r22, 0xFD	; 253
    1b2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2c:	ce 57       	subi	r28, 0x7E	; 126
    1b2e:	df 4f       	sbci	r29, 0xFF	; 255
    1b30:	08 81       	ld	r16, Y
    1b32:	c2 58       	subi	r28, 0x82	; 130
    1b34:	d0 40       	sbci	r29, 0x00	; 0
    1b36:	cf 57       	subi	r28, 0x7F	; 127
    1b38:	df 4f       	sbci	r29, 0xFF	; 255
    1b3a:	28 81       	ld	r18, Y
    1b3c:	c1 58       	subi	r28, 0x81	; 129
    1b3e:	d0 40       	sbci	r29, 0x00	; 0
    1b40:	c4 01       	movw	r24, r8
    1b42:	0e 94 b5 1a 	call	0x356a	; 0x356a <_ZN7MPU605015readMemoryBlockEPhjhh>
    1b46:	60 e7       	ldi	r22, 0x70	; 112
    1b48:	73 e0       	ldi	r23, 0x03	; 3
    1b4a:	84 ed       	ldi	r24, 0xD4	; 212
    1b4c:	91 e0       	ldi	r25, 0x01	; 1
    1b4e:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1b52:	c4 01       	movw	r24, r8
    1b54:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <_ZN7MPU605012getFIFOCountEv>
    1b58:	8c 01       	movw	r16, r24
    1b5a:	03 97       	sbiw	r24, 0x03	; 3
    1b5c:	d0 f3       	brcs	.-12     	; 0x1b52 <_ZN7MPU605013dmpInitializeEv+0x790>
    1b5e:	6c e5       	ldi	r22, 0x5C	; 92
    1b60:	73 e0       	ldi	r23, 0x03	; 3
    1b62:	84 ed       	ldi	r24, 0xD4	; 212
    1b64:	91 e0       	ldi	r25, 0x01	; 1
    1b66:	0e 94 15 12 	call	0x242a	; 0x242a <_ZN5Print5printEPK19__FlashStringHelper>
    1b6a:	4a e0       	ldi	r20, 0x0A	; 10
    1b6c:	50 e0       	ldi	r21, 0x00	; 0
    1b6e:	b8 01       	movw	r22, r16
    1b70:	84 ed       	ldi	r24, 0xD4	; 212
    1b72:	91 e0       	ldi	r25, 0x01	; 1
    1b74:	0e 94 3d 13 	call	0x267a	; 0x267a <_ZN5Print7printlnEji>
    1b78:	67 e4       	ldi	r22, 0x47	; 71
    1b7a:	73 e0       	ldi	r23, 0x03	; 3
    1b7c:	84 ed       	ldi	r24, 0xD4	; 212
    1b7e:	91 e0       	ldi	r25, 0x01	; 1
    1b80:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1b84:	40 2f       	mov	r20, r16
    1b86:	be 01       	movw	r22, r28
    1b88:	6f 5f       	subi	r22, 0xFF	; 255
    1b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8c:	c4 01       	movw	r24, r8
    1b8e:	0e 94 98 19 	call	0x3330	; 0x3330 <_ZN7MPU605012getFIFOBytesEPhh>
    1b92:	6b e2       	ldi	r22, 0x2B	; 43
    1b94:	73 e0       	ldi	r23, 0x03	; 3
    1b96:	84 ed       	ldi	r24, 0xD4	; 212
    1b98:	91 e0       	ldi	r25, 0x01	; 1
    1b9a:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1b9e:	61 e1       	ldi	r22, 0x11	; 17
    1ba0:	73 e0       	ldi	r23, 0x03	; 3
    1ba2:	84 ed       	ldi	r24, 0xD4	; 212
    1ba4:	91 e0       	ldi	r25, 0x01	; 1
    1ba6:	0e 94 15 12 	call	0x242a	; 0x242a <_ZN5Print5printEPK19__FlashStringHelper>
    1baa:	c4 01       	movw	r24, r8
    1bac:	0e 94 18 19 	call	0x3230	; 0x3230 <_ZN7MPU605012getIntStatusEv>
    1bb0:	40 e1       	ldi	r20, 0x10	; 16
    1bb2:	50 e0       	ldi	r21, 0x00	; 0
    1bb4:	68 2f       	mov	r22, r24
    1bb6:	84 ed       	ldi	r24, 0xD4	; 212
    1bb8:	91 e0       	ldi	r25, 0x01	; 1
    1bba:	0e 94 26 13 	call	0x264c	; 0x264c <_ZN5Print7printlnEhi>
    1bbe:	6b ed       	ldi	r22, 0xDB	; 219
    1bc0:	72 e0       	ldi	r23, 0x02	; 2
    1bc2:	84 ed       	ldi	r24, 0xD4	; 212
    1bc4:	91 e0       	ldi	r25, 0x01	; 1
    1bc6:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1bca:	f5 01       	movw	r30, r10
    1bcc:	e8 56       	subi	r30, 0x68	; 104
    1bce:	f5 4f       	sbci	r31, 0xF5	; 245
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	01 c0       	rjmp	.+2      	; 0x1bd6 <_ZN7MPU605013dmpInitializeEv+0x814>
    1bd4:	31 96       	adiw	r30, 0x01	; 1
    1bd6:	94 91       	lpm	r25, Z
    1bd8:	a1 e8       	ldi	r26, 0x81	; 129
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	ac 0f       	add	r26, r28
    1bde:	bd 1f       	adc	r27, r29
    1be0:	a8 0f       	add	r26, r24
    1be2:	b1 1d       	adc	r27, r1
    1be4:	9c 93       	st	X, r25
    1be6:	8f 5f       	subi	r24, 0xFF	; 255
    1be8:	84 30       	cpi	r24, 0x04	; 4
    1bea:	a0 f3       	brcs	.-24     	; 0x1bd4 <_ZN7MPU605013dmpInitializeEv+0x812>
    1bec:	cd 57       	subi	r28, 0x7D	; 125
    1bee:	df 4f       	sbci	r29, 0xFF	; 255
    1bf0:	48 81       	ld	r20, Y
    1bf2:	c3 58       	subi	r28, 0x83	; 131
    1bf4:	d0 40       	sbci	r29, 0x00	; 0
    1bf6:	68 2f       	mov	r22, r24
    1bf8:	70 e0       	ldi	r23, 0x00	; 0
    1bfa:	24 2f       	mov	r18, r20
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	2d 5f       	subi	r18, 0xFD	; 253
    1c00:	3f 4f       	sbci	r19, 0xFF	; 255
    1c02:	62 17       	cp	r22, r18
    1c04:	73 07       	cpc	r23, r19
    1c06:	34 f3       	brlt	.-52     	; 0x1bd4 <_ZN7MPU605013dmpInitializeEv+0x812>
    1c08:	50 e0       	ldi	r21, 0x00	; 0
    1c0a:	61 e8       	ldi	r22, 0x81	; 129
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	6c 0f       	add	r22, r28
    1c10:	7d 1f       	adc	r23, r29
    1c12:	6d 5f       	subi	r22, 0xFD	; 253
    1c14:	7f 4f       	sbci	r23, 0xFF	; 255
    1c16:	c1 2c       	mov	r12, r1
    1c18:	ee 24       	eor	r14, r14
    1c1a:	e3 94       	inc	r14
    1c1c:	ce 57       	subi	r28, 0x7E	; 126
    1c1e:	df 4f       	sbci	r29, 0xFF	; 255
    1c20:	08 81       	ld	r16, Y
    1c22:	c2 58       	subi	r28, 0x82	; 130
    1c24:	d0 40       	sbci	r29, 0x00	; 0
    1c26:	cf 57       	subi	r28, 0x7F	; 127
    1c28:	df 4f       	sbci	r29, 0xFF	; 255
    1c2a:	28 81       	ld	r18, Y
    1c2c:	c1 58       	subi	r28, 0x81	; 129
    1c2e:	d0 40       	sbci	r29, 0x00	; 0
    1c30:	c4 01       	movw	r24, r8
    1c32:	0e 94 22 1b 	call	0x3644	; 0x3644 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>
    1c36:	6f eb       	ldi	r22, 0xBF	; 191
    1c38:	72 e0       	ldi	r23, 0x02	; 2
    1c3a:	84 ed       	ldi	r24, 0xD4	; 212
    1c3c:	91 e0       	ldi	r25, 0x01	; 1
    1c3e:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1c42:	67 e9       	ldi	r22, 0x97	; 151
    1c44:	72 e0       	ldi	r23, 0x02	; 2
    1c46:	84 ed       	ldi	r24, 0xD4	; 212
    1c48:	91 e0       	ldi	r25, 0x01	; 1
    1c4a:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1c4e:	60 e0       	ldi	r22, 0x00	; 0
    1c50:	c4 01       	movw	r24, r8
    1c52:	0e 94 80 1a 	call	0x3500	; 0x3500 <_ZN7MPU605013setDMPEnabledEb>
    1c56:	6c e5       	ldi	r22, 0x5C	; 92
    1c58:	72 e0       	ldi	r23, 0x02	; 2
    1c5a:	84 ed       	ldi	r24, 0xD4	; 212
    1c5c:	91 e0       	ldi	r25, 0x01	; 1
    1c5e:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1c62:	8a e2       	ldi	r24, 0x2A	; 42
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	f4 01       	movw	r30, r8
    1c68:	93 83       	std	Z+3, r25	; 0x03
    1c6a:	82 83       	std	Z+2, r24	; 0x02
    1c6c:	64 e2       	ldi	r22, 0x24	; 36
    1c6e:	72 e0       	ldi	r23, 0x02	; 2
    1c70:	84 ed       	ldi	r24, 0xD4	; 212
    1c72:	91 e0       	ldi	r25, 0x01	; 1
    1c74:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1c78:	c4 01       	movw	r24, r8
    1c7a:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN7MPU60509resetFIFOEv>
    1c7e:	c4 01       	movw	r24, r8
    1c80:	0e 94 18 19 	call	0x3230	; 0x3230 <_ZN7MPU605012getIntStatusEv>
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	0f c0       	rjmp	.+30     	; 0x1ca6 <_ZN7MPU605013dmpInitializeEv+0x8e4>
    1c88:	66 ef       	ldi	r22, 0xF6	; 246
    1c8a:	71 e0       	ldi	r23, 0x01	; 1
    1c8c:	84 ed       	ldi	r24, 0xD4	; 212
    1c8e:	91 e0       	ldi	r25, 0x01	; 1
    1c90:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1c94:	82 e0       	ldi	r24, 0x02	; 2
    1c96:	07 c0       	rjmp	.+14     	; 0x1ca6 <_ZN7MPU605013dmpInitializeEv+0x8e4>
    1c98:	61 ed       	ldi	r22, 0xD1	; 209
    1c9a:	71 e0       	ldi	r23, 0x01	; 1
    1c9c:	84 ed       	ldi	r24, 0xD4	; 212
    1c9e:	91 e0       	ldi	r25, 0x01	; 1
    1ca0:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	c0 57       	subi	r28, 0x70	; 112
    1ca8:	df 4f       	sbci	r29, 0xFF	; 255
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	f8 94       	cli
    1cae:	de bf       	out	0x3e, r29	; 62
    1cb0:	0f be       	out	0x3f, r0	; 63
    1cb2:	cd bf       	out	0x3d, r28	; 61
    1cb4:	df 91       	pop	r29
    1cb6:	cf 91       	pop	r28
    1cb8:	1f 91       	pop	r17
    1cba:	0f 91       	pop	r16
    1cbc:	ef 90       	pop	r14
    1cbe:	cf 90       	pop	r12
    1cc0:	bf 90       	pop	r11
    1cc2:	af 90       	pop	r10
    1cc4:	9f 90       	pop	r9
    1cc6:	8f 90       	pop	r8
    1cc8:	08 95       	ret

00001cca <loop>:

// ================================================================
// ===                    MAIN PROGRAM LOOP                     ===
// ================================================================

void loop() {
    1cca:	cf 93       	push	r28
    1ccc:	df 93       	push	r29
    // if programming failed, don't try to do anything
    if (!dmpReady) return;
    1cce:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <dmpReady>
    1cd2:	88 23       	and	r24, r24
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <loop+0xe>
    1cd6:	8e c0       	rjmp	.+284    	; 0x1df4 <loop+0x12a>

    // wait for MPU interrupt or extra packet(s) available
    while (!mpuInterrupt && fifoCount < packetSize) {
    1cd8:	40 91 b9 01 	lds	r20, 0x01B9	; 0x8001b9 <fifoCount>
    1cdc:	50 91 ba 01 	lds	r21, 0x01BA	; 0x8001ba <fifoCount+0x1>
    1ce0:	20 91 bb 01 	lds	r18, 0x01BB	; 0x8001bb <packetSize>
    1ce4:	30 91 bc 01 	lds	r19, 0x01BC	; 0x8001bc <packetSize+0x1>
    1ce8:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
    1cec:	81 11       	cpse	r24, r1
    1cee:	6d c0       	rjmp	.+218    	; 0x1dca <loop+0x100>
    1cf0:	42 17       	cp	r20, r18
    1cf2:	53 07       	cpc	r21, r19
    1cf4:	c8 f3       	brcs	.-14     	; 0x1ce8 <loop+0x1e>
    1cf6:	69 c0       	rjmp	.+210    	; 0x1dca <loop+0x100>

    // get current FIFO count
    fifoCount = mpu.getFIFOCount();

    // check for overflow (this should never happen unless our code is too inefficient)
    if ((mpuIntStatus & 0x10) || fifoCount == 1024) {
    1cf8:	81 15       	cp	r24, r1
    1cfa:	34 e0       	ldi	r19, 0x04	; 4
    1cfc:	93 07       	cpc	r25, r19
    1cfe:	59 f4       	brne	.+22     	; 0x1d16 <loop+0x4c>
        // reset so we can continue cleanly
        mpu.resetFIFO();
    1d00:	81 ec       	ldi	r24, 0xC1	; 193
    1d02:	91 e0       	ldi	r25, 0x01	; 1
    1d04:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN7MPU60509resetFIFOEv>
        Serial.println(F("FIFO overflow!"));
    1d08:	68 e6       	ldi	r22, 0x68	; 104
    1d0a:	70 e0       	ldi	r23, 0x00	; 0
    1d0c:	84 ed       	ldi	r24, 0xD4	; 212
    1d0e:	91 e0       	ldi	r25, 0x01	; 1
    1d10:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1d14:	6f c0       	rjmp	.+222    	; 0x1df4 <loop+0x12a>

    // otherwise, check for DMP data ready interrupt (this should happen frequently)
    } else if (mpuIntStatus & 0x02) {
    1d16:	21 ff       	sbrs	r18, 1
    1d18:	6d c0       	rjmp	.+218    	; 0x1df4 <loop+0x12a>
        // wait for correct available data length, should be a VERY short wait
        while (fifoCount < packetSize) fifoCount = mpu.getFIFOCount();
    1d1a:	40 91 bb 01 	lds	r20, 0x01BB	; 0x8001bb <packetSize>
    1d1e:	50 91 bc 01 	lds	r21, 0x01BC	; 0x8001bc <packetSize+0x1>
    1d22:	84 17       	cp	r24, r20
    1d24:	95 07       	cpc	r25, r21
    1d26:	78 f4       	brcc	.+30     	; 0x1d46 <loop+0x7c>
    1d28:	81 ec       	ldi	r24, 0xC1	; 193
    1d2a:	91 e0       	ldi	r25, 0x01	; 1
    1d2c:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <_ZN7MPU605012getFIFOCountEv>
    1d30:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <fifoCount+0x1>
    1d34:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <fifoCount>
    1d38:	40 91 bb 01 	lds	r20, 0x01BB	; 0x8001bb <packetSize>
    1d3c:	50 91 bc 01 	lds	r21, 0x01BC	; 0x8001bc <packetSize+0x1>
    1d40:	84 17       	cp	r24, r20
    1d42:	95 07       	cpc	r25, r21
    1d44:	88 f3       	brcs	.-30     	; 0x1d28 <loop+0x5e>

        // read a packet from FIFO
        mpu.getFIFOBytes(fifoBuffer, packetSize);
    1d46:	69 e7       	ldi	r22, 0x79	; 121
    1d48:	71 e0       	ldi	r23, 0x01	; 1
    1d4a:	81 ec       	ldi	r24, 0xC1	; 193
    1d4c:	91 e0       	ldi	r25, 0x01	; 1
    1d4e:	0e 94 98 19 	call	0x3330	; 0x3330 <_ZN7MPU605012getFIFOBytesEPhh>
        
        // track FIFO count here in case there is > 1 packet available
        // (this lets us immediately read more without waiting for an interrupt)
        fifoCount -= packetSize;
    1d52:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <fifoCount>
    1d56:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <fifoCount+0x1>
    1d5a:	20 91 bb 01 	lds	r18, 0x01BB	; 0x8001bb <packetSize>
    1d5e:	30 91 bc 01 	lds	r19, 0x01BC	; 0x8001bc <packetSize+0x1>
    1d62:	82 1b       	sub	r24, r18
    1d64:	93 0b       	sbc	r25, r19
    1d66:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <fifoCount+0x1>
    1d6a:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <fifoCount>
            Serial.println(aaWorld.z);
        #endif
    
        #ifdef OUTPUT_TEAPOT
            // display quaternion values in InvenSense Teapot demo format:
            teapotPacket[2] = fifoBuffer[0];
    1d6e:	c6 e0       	ldi	r28, 0x06	; 6
    1d70:	d1 e0       	ldi	r29, 0x01	; 1
    1d72:	e9 e7       	ldi	r30, 0x79	; 121
    1d74:	f1 e0       	ldi	r31, 0x01	; 1
    1d76:	80 81       	ld	r24, Z
    1d78:	8a 83       	std	Y+2, r24	; 0x02
            teapotPacket[3] = fifoBuffer[1];
    1d7a:	81 81       	ldd	r24, Z+1	; 0x01
    1d7c:	8b 83       	std	Y+3, r24	; 0x03
            teapotPacket[4] = fifoBuffer[4];
    1d7e:	84 81       	ldd	r24, Z+4	; 0x04
    1d80:	8c 83       	std	Y+4, r24	; 0x04
            teapotPacket[5] = fifoBuffer[5];
    1d82:	85 81       	ldd	r24, Z+5	; 0x05
    1d84:	8d 83       	std	Y+5, r24	; 0x05
            teapotPacket[6] = fifoBuffer[8];
    1d86:	80 85       	ldd	r24, Z+8	; 0x08
    1d88:	8e 83       	std	Y+6, r24	; 0x06
            teapotPacket[7] = fifoBuffer[9];
    1d8a:	81 85       	ldd	r24, Z+9	; 0x09
    1d8c:	8f 83       	std	Y+7, r24	; 0x07
            teapotPacket[8] = fifoBuffer[12];
    1d8e:	84 85       	ldd	r24, Z+12	; 0x0c
    1d90:	88 87       	std	Y+8, r24	; 0x08
            teapotPacket[9] = fifoBuffer[13];
    1d92:	85 85       	ldd	r24, Z+13	; 0x0d
    1d94:	89 87       	std	Y+9, r24	; 0x09
            Serial.write(teapotPacket, 14);
    1d96:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <Serial>
    1d9a:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <Serial+0x1>
    1d9e:	02 80       	ldd	r0, Z+2	; 0x02
    1da0:	f3 81       	ldd	r31, Z+3	; 0x03
    1da2:	e0 2d       	mov	r30, r0
    1da4:	4e e0       	ldi	r20, 0x0E	; 14
    1da6:	50 e0       	ldi	r21, 0x00	; 0
    1da8:	be 01       	movw	r22, r28
    1daa:	84 ed       	ldi	r24, 0xD4	; 212
    1dac:	91 e0       	ldi	r25, 0x01	; 1
    1dae:	09 95       	icall
            teapotPacket[11]++; // packetCount, loops at 0xFF on purpose
    1db0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1db2:	8f 5f       	subi	r24, 0xFF	; 255
    1db4:	8b 87       	std	Y+11, r24	; 0x0b
        #endif

        // blink LED to indicate activity
        blinkState = !blinkState;
    1db6:	60 91 c0 01 	lds	r22, 0x01C0	; 0x8001c0 <blinkState>
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	68 27       	eor	r22, r24
    1dbe:	60 93 c0 01 	sts	0x01C0, r22	; 0x8001c0 <blinkState>
        digitalWrite(LED_PIN, blinkState);
    1dc2:	8d e0       	ldi	r24, 0x0D	; 13
    1dc4:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <digitalWrite>
    1dc8:	15 c0       	rjmp	.+42     	; 0x1df4 <loop+0x12a>
        // .
        // .
    }

    // reset interrupt flag and get INT_STATUS byte
    mpuInterrupt = false;
    1dca:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__data_end>
    mpuIntStatus = mpu.getIntStatus();
    1dce:	81 ec       	ldi	r24, 0xC1	; 193
    1dd0:	91 e0       	ldi	r25, 0x01	; 1
    1dd2:	0e 94 18 19 	call	0x3230	; 0x3230 <_ZN7MPU605012getIntStatusEv>
    1dd6:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <mpuIntStatus>

    // get current FIFO count
    fifoCount = mpu.getFIFOCount();
    1dda:	81 ec       	ldi	r24, 0xC1	; 193
    1ddc:	91 e0       	ldi	r25, 0x01	; 1
    1dde:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <_ZN7MPU605012getFIFOCountEv>
    1de2:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <fifoCount+0x1>
    1de6:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <fifoCount>

    // check for overflow (this should never happen unless our code is too inefficient)
    if ((mpuIntStatus & 0x10) || fifoCount == 1024) {
    1dea:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <mpuIntStatus>
    1dee:	24 ff       	sbrs	r18, 4
    1df0:	83 cf       	rjmp	.-250    	; 0x1cf8 <loop+0x2e>
    1df2:	86 cf       	rjmp	.-244    	; 0x1d00 <loop+0x36>

        // blink LED to indicate activity
        blinkState = !blinkState;
        digitalWrite(LED_PIN, blinkState);
    }
    1df4:	df 91       	pop	r29
    1df6:	cf 91       	pop	r28
    1df8:	08 95       	ret

00001dfa <_GLOBAL__sub_I__ZN7MPU605013dmpInitializeEv>:

// class default I2C address is 0x68
// specific I2C addresses may be passed as a parameter here
// AD0 low = 0x68 (default for SparkFun breakout and InvenSense evaluation board)
// AD0 high = 0x69
MPU6050 mpu;
    1dfa:	81 ec       	ldi	r24, 0xC1	; 193
    1dfc:	91 e0       	ldi	r25, 0x01	; 1
    1dfe:	0e 94 b3 18 	call	0x3166	; 0x3166 <_ZN7MPU6050C1Ev>
        float x;
        float y;
        float z;
        
        Quaternion() {
            w = 1.0f;
    1e02:	e9 e6       	ldi	r30, 0x69	; 105
    1e04:	f1 e0       	ldi	r31, 0x01	; 1
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	a0 e8       	ldi	r26, 0x80	; 128
    1e0c:	bf e3       	ldi	r27, 0x3F	; 63
    1e0e:	80 83       	st	Z, r24
    1e10:	91 83       	std	Z+1, r25	; 0x01
    1e12:	a2 83       	std	Z+2, r26	; 0x02
    1e14:	b3 83       	std	Z+3, r27	; 0x03
            x = 0.0f;
    1e16:	14 82       	std	Z+4, r1	; 0x04
    1e18:	15 82       	std	Z+5, r1	; 0x05
    1e1a:	16 82       	std	Z+6, r1	; 0x06
    1e1c:	17 82       	std	Z+7, r1	; 0x07
            y = 0.0f;
    1e1e:	10 86       	std	Z+8, r1	; 0x08
    1e20:	11 86       	std	Z+9, r1	; 0x09
    1e22:	12 86       	std	Z+10, r1	; 0x0a
    1e24:	13 86       	std	Z+11, r1	; 0x0b
            z = 0.0f;
    1e26:	14 86       	std	Z+12, r1	; 0x0c
    1e28:	15 86       	std	Z+13, r1	; 0x0d
    1e2a:	16 86       	std	Z+14, r1	; 0x0e
    1e2c:	17 86       	std	Z+15, r1	; 0x0f
        int16_t x;
        int16_t y;
        int16_t z;

        VectorInt16() {
            x = 0;
    1e2e:	e3 e6       	ldi	r30, 0x63	; 99
    1e30:	f1 e0       	ldi	r31, 0x01	; 1
    1e32:	11 82       	std	Z+1, r1	; 0x01
    1e34:	10 82       	st	Z, r1
            y = 0;
    1e36:	13 82       	std	Z+3, r1	; 0x03
    1e38:	12 82       	std	Z+2, r1	; 0x02
            z = 0;
    1e3a:	15 82       	std	Z+5, r1	; 0x05
    1e3c:	14 82       	std	Z+4, r1	; 0x04
        int16_t x;
        int16_t y;
        int16_t z;

        VectorInt16() {
            x = 0;
    1e3e:	ed e5       	ldi	r30, 0x5D	; 93
    1e40:	f1 e0       	ldi	r31, 0x01	; 1
    1e42:	11 82       	std	Z+1, r1	; 0x01
    1e44:	10 82       	st	Z, r1
            y = 0;
    1e46:	13 82       	std	Z+3, r1	; 0x03
    1e48:	12 82       	std	Z+2, r1	; 0x02
            z = 0;
    1e4a:	15 82       	std	Z+5, r1	; 0x05
    1e4c:	14 82       	std	Z+4, r1	; 0x04
        int16_t x;
        int16_t y;
        int16_t z;

        VectorInt16() {
            x = 0;
    1e4e:	e7 e5       	ldi	r30, 0x57	; 87
    1e50:	f1 e0       	ldi	r31, 0x01	; 1
    1e52:	11 82       	std	Z+1, r1	; 0x01
    1e54:	10 82       	st	Z, r1
            y = 0;
    1e56:	13 82       	std	Z+3, r1	; 0x03
    1e58:	12 82       	std	Z+2, r1	; 0x02
            z = 0;
    1e5a:	15 82       	std	Z+5, r1	; 0x05
    1e5c:	14 82       	std	Z+4, r1	; 0x04
        float x;
        float y;
        float z;

        VectorFloat() {
            x = 0;
    1e5e:	eb e4       	ldi	r30, 0x4B	; 75
    1e60:	f1 e0       	ldi	r31, 0x01	; 1
    1e62:	10 82       	st	Z, r1
    1e64:	11 82       	std	Z+1, r1	; 0x01
    1e66:	12 82       	std	Z+2, r1	; 0x02
    1e68:	13 82       	std	Z+3, r1	; 0x03
            y = 0;
    1e6a:	14 82       	std	Z+4, r1	; 0x04
    1e6c:	15 82       	std	Z+5, r1	; 0x05
    1e6e:	16 82       	std	Z+6, r1	; 0x06
    1e70:	17 82       	std	Z+7, r1	; 0x07
            z = 0;
    1e72:	10 86       	std	Z+8, r1	; 0x08
    1e74:	11 86       	std	Z+9, r1	; 0x09
    1e76:	12 86       	std	Z+10, r1	; 0x0a
    1e78:	13 86       	std	Z+11, r1	; 0x0b
    1e7a:	08 95       	ret

00001e7c <setup>:
// ================================================================

void setup() {
    // join I2C bus (I2Cdev library doesn't do this automatically)
    #if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
        Wire.begin();
    1e7c:	81 e7       	ldi	r24, 0x71	; 113
    1e7e:	92 e0       	ldi	r25, 0x02	; 2
    1e80:	0e 94 5d 14 	call	0x28ba	; 0x28ba <_ZN7TwoWire5beginEv>
        Wire.setClock(400000); // 400kHz I2C clock. Comment this line if having compilation difficulties
    1e84:	40 e8       	ldi	r20, 0x80	; 128
    1e86:	5a e1       	ldi	r21, 0x1A	; 26
    1e88:	66 e0       	ldi	r22, 0x06	; 6
    1e8a:	70 e0       	ldi	r23, 0x00	; 0
    1e8c:	81 e7       	ldi	r24, 0x71	; 113
    1e8e:	92 e0       	ldi	r25, 0x02	; 2
    1e90:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN7TwoWire8setClockEm>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1e94:	26 e0       	ldi	r18, 0x06	; 6
    1e96:	40 e0       	ldi	r20, 0x00	; 0
    1e98:	52 ec       	ldi	r21, 0xC2	; 194
    1e9a:	61 e0       	ldi	r22, 0x01	; 1
    1e9c:	70 e0       	ldi	r23, 0x00	; 0
    1e9e:	84 ed       	ldi	r24, 0xD4	; 212
    1ea0:	91 e0       	ldi	r25, 0x01	; 1
    1ea2:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <_ZN14HardwareSerial5beginEmh>
    // the baud timing being too misaligned with processor ticks. You must use
    // 38400 or slower in these cases, or use some kind of external separate
    // crystal solution for the UART timer.

    // initialize device
    Serial.println(F("Initializing I2C devices..."));
    1ea6:	65 eb       	ldi	r22, 0xB5	; 181
    1ea8:	71 e0       	ldi	r23, 0x01	; 1
    1eaa:	84 ed       	ldi	r24, 0xD4	; 212
    1eac:	91 e0       	ldi	r25, 0x01	; 1
    1eae:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    mpu.initialize();
    1eb2:	81 ec       	ldi	r24, 0xC1	; 193
    1eb4:	91 e0       	ldi	r25, 0x01	; 1
    1eb6:	0e 94 65 19 	call	0x32ca	; 0x32ca <_ZN7MPU605010initializeEv>
    pinMode(INTERRUPT_PIN, INPUT);
    1eba:	60 e0       	ldi	r22, 0x00	; 0
    1ebc:	82 e0       	ldi	r24, 0x02	; 2
    1ebe:	0e 94 11 16 	call	0x2c22	; 0x2c22 <pinMode>

    // verify connection
    Serial.println(F("Testing device connections..."));
    1ec2:	67 e9       	ldi	r22, 0x97	; 151
    1ec4:	71 e0       	ldi	r23, 0x01	; 1
    1ec6:	84 ed       	ldi	r24, 0xD4	; 212
    1ec8:	91 e0       	ldi	r25, 0x01	; 1
    1eca:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println(mpu.testConnection() ? F("MPU6050 connection successful") : F("MPU6050 connection failed"));
    1ece:	81 ec       	ldi	r24, 0xC1	; 193
    1ed0:	91 e0       	ldi	r25, 0x01	; 1
    1ed2:	0e 94 c8 19 	call	0x3390	; 0x3390 <_ZN7MPU605014testConnectionEv>
    1ed6:	81 11       	cpse	r24, r1
    1ed8:	03 c0       	rjmp	.+6      	; 0x1ee0 <setup+0x64>
    1eda:	6f e5       	ldi	r22, 0x5F	; 95
    1edc:	71 e0       	ldi	r23, 0x01	; 1
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <setup+0x68>
    1ee0:	69 e7       	ldi	r22, 0x79	; 121
    1ee2:	71 e0       	ldi	r23, 0x01	; 1
    1ee4:	84 ed       	ldi	r24, 0xD4	; 212
    1ee6:	91 e0       	ldi	r25, 0x01	; 1
    1ee8:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>

    // wait for ready
    Serial.println(F("\nSend any character to begin DMP programming and demo: "));
    1eec:	67 e2       	ldi	r22, 0x27	; 39
    1eee:	71 e0       	ldi	r23, 0x01	; 1
    1ef0:	84 ed       	ldi	r24, 0xD4	; 212
    1ef2:	91 e0       	ldi	r25, 0x01	; 1
    1ef4:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    while (Serial.available() && Serial.read()); // empty buffer
    1ef8:	84 ed       	ldi	r24, 0xD4	; 212
    1efa:	91 e0       	ldi	r25, 0x01	; 1
    1efc:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN14HardwareSerial9availableEv>
    1f00:	89 2b       	or	r24, r25
    1f02:	31 f0       	breq	.+12     	; 0x1f10 <setup+0x94>
    1f04:	84 ed       	ldi	r24, 0xD4	; 212
    1f06:	91 e0       	ldi	r25, 0x01	; 1
    1f08:	0e 94 25 10 	call	0x204a	; 0x204a <_ZN14HardwareSerial4readEv>
    1f0c:	89 2b       	or	r24, r25
    1f0e:	a1 f7       	brne	.-24     	; 0x1ef8 <setup+0x7c>
    while (!Serial.available());                 // wait for data
    1f10:	84 ed       	ldi	r24, 0xD4	; 212
    1f12:	91 e0       	ldi	r25, 0x01	; 1
    1f14:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN14HardwareSerial9availableEv>
    1f18:	89 2b       	or	r24, r25
    1f1a:	d1 f3       	breq	.-12     	; 0x1f10 <setup+0x94>
    while (Serial.available() && Serial.read()); // empty buffer again
    1f1c:	84 ed       	ldi	r24, 0xD4	; 212
    1f1e:	91 e0       	ldi	r25, 0x01	; 1
    1f20:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN14HardwareSerial9availableEv>
    1f24:	89 2b       	or	r24, r25
    1f26:	31 f0       	breq	.+12     	; 0x1f34 <setup+0xb8>
    1f28:	84 ed       	ldi	r24, 0xD4	; 212
    1f2a:	91 e0       	ldi	r25, 0x01	; 1
    1f2c:	0e 94 25 10 	call	0x204a	; 0x204a <_ZN14HardwareSerial4readEv>
    1f30:	89 2b       	or	r24, r25
    1f32:	a1 f7       	brne	.-24     	; 0x1f1c <setup+0xa0>

    // load and configure the DMP
    Serial.println(F("Initializing DMP..."));
    1f34:	63 e1       	ldi	r22, 0x13	; 19
    1f36:	71 e0       	ldi	r23, 0x01	; 1
    1f38:	84 ed       	ldi	r24, 0xD4	; 212
    1f3a:	91 e0       	ldi	r25, 0x01	; 1
    1f3c:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    devStatus = mpu.dmpInitialize();
    1f40:	81 ec       	ldi	r24, 0xC1	; 193
    1f42:	91 e0       	ldi	r25, 0x01	; 1
    1f44:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <_ZN7MPU605013dmpInitializeEv>
    1f48:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <devStatus>

    // supply your own gyro offsets here, scaled for min sensitivity
    mpu.setXGyroOffset(220);
    1f4c:	6c ed       	ldi	r22, 0xDC	; 220
    1f4e:	70 e0       	ldi	r23, 0x00	; 0
    1f50:	81 ec       	ldi	r24, 0xC1	; 193
    1f52:	91 e0       	ldi	r25, 0x01	; 1
    1f54:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <_ZN7MPU605014setXGyroOffsetEi>
    mpu.setYGyroOffset(76);
    1f58:	6c e4       	ldi	r22, 0x4C	; 76
    1f5a:	70 e0       	ldi	r23, 0x00	; 0
    1f5c:	81 ec       	ldi	r24, 0xC1	; 193
    1f5e:	91 e0       	ldi	r25, 0x01	; 1
    1f60:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <_ZN7MPU605014setYGyroOffsetEi>
    mpu.setZGyroOffset(-85);
    1f64:	6b ea       	ldi	r22, 0xAB	; 171
    1f66:	7f ef       	ldi	r23, 0xFF	; 255
    1f68:	81 ec       	ldi	r24, 0xC1	; 193
    1f6a:	91 e0       	ldi	r25, 0x01	; 1
    1f6c:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <_ZN7MPU605014setZGyroOffsetEi>
    mpu.setZAccelOffset(1788); // 1688 factory default for my test chip
    1f70:	6c ef       	ldi	r22, 0xFC	; 252
    1f72:	76 e0       	ldi	r23, 0x06	; 6
    1f74:	81 ec       	ldi	r24, 0xC1	; 193
    1f76:	91 e0       	ldi	r25, 0x01	; 1
    1f78:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <_ZN7MPU605015setZAccelOffsetEi>

    // make sure it worked (returns 0 if so)
    if (devStatus == 0) {
    1f7c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <devStatus>
    1f80:	81 11       	cpse	r24, r1
    1f82:	30 c0       	rjmp	.+96     	; 0x1fe4 <setup+0x168>
        // turn on the DMP, now that it's ready
        Serial.println(F("Enabling DMP..."));
    1f84:	63 e0       	ldi	r22, 0x03	; 3
    1f86:	71 e0       	ldi	r23, 0x01	; 1
    1f88:	84 ed       	ldi	r24, 0xD4	; 212
    1f8a:	91 e0       	ldi	r25, 0x01	; 1
    1f8c:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
        mpu.setDMPEnabled(true);
    1f90:	61 e0       	ldi	r22, 0x01	; 1
    1f92:	81 ec       	ldi	r24, 0xC1	; 193
    1f94:	91 e0       	ldi	r25, 0x01	; 1
    1f96:	0e 94 80 1a 	call	0x3500	; 0x3500 <_ZN7MPU605013setDMPEnabledEb>

        // enable Arduino interrupt detection
        Serial.println(F("Enabling interrupt detection (Arduino external interrupt 0)..."));
    1f9a:	64 ec       	ldi	r22, 0xC4	; 196
    1f9c:	70 e0       	ldi	r23, 0x00	; 0
    1f9e:	84 ed       	ldi	r24, 0xD4	; 212
    1fa0:	91 e0       	ldi	r25, 0x01	; 1
    1fa2:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
        attachInterrupt(digitalPinToInterrupt(INTERRUPT_PIN), dmpDataReady, RISING);
    1fa6:	43 e0       	ldi	r20, 0x03	; 3
    1fa8:	50 e0       	ldi	r21, 0x00	; 0
    1faa:	6d ed       	ldi	r22, 0xDD	; 221
    1fac:	79 e0       	ldi	r23, 0x09	; 9
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	0e 94 54 13 	call	0x26a8	; 0x26a8 <attachInterrupt>
        mpuIntStatus = mpu.getIntStatus();
    1fb4:	81 ec       	ldi	r24, 0xC1	; 193
    1fb6:	91 e0       	ldi	r25, 0x01	; 1
    1fb8:	0e 94 18 19 	call	0x3230	; 0x3230 <_ZN7MPU605012getIntStatusEv>
    1fbc:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <mpuIntStatus>

        // set our DMP Ready flag so the main loop() function knows it's okay to use it
        Serial.println(F("DMP ready! Waiting for first interrupt..."));
    1fc0:	6a e9       	ldi	r22, 0x9A	; 154
    1fc2:	70 e0       	ldi	r23, 0x00	; 0
    1fc4:	84 ed       	ldi	r24, 0xD4	; 212
    1fc6:	91 e0       	ldi	r25, 0x01	; 1
    1fc8:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
        dmpReady = true;
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <dmpReady>

        // get expected DMP packet size for later comparison
        packetSize = mpu.dmpGetFIFOPacketSize();
    1fd2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <mpu+0x2>
    1fd6:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <mpu+0x3>
    1fda:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <packetSize+0x1>
    1fde:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <packetSize>
    1fe2:	14 c0       	rjmp	.+40     	; 0x200c <setup+0x190>
    } else {
        // ERROR!
        // 1 = initial memory load failed
        // 2 = DMP configuration updates failed
        // (if it's going to break, usually the code will be 1)
        Serial.print(F("DMP Initialization failed (code "));
    1fe4:	69 e7       	ldi	r22, 0x79	; 121
    1fe6:	70 e0       	ldi	r23, 0x00	; 0
    1fe8:	84 ed       	ldi	r24, 0xD4	; 212
    1fea:	91 e0       	ldi	r25, 0x01	; 1
    1fec:	0e 94 15 12 	call	0x242a	; 0x242a <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(devStatus);
    1ff0:	4a e0       	ldi	r20, 0x0A	; 10
    1ff2:	50 e0       	ldi	r21, 0x00	; 0
    1ff4:	60 91 bd 01 	lds	r22, 0x01BD	; 0x8001bd <devStatus>
    1ff8:	84 ed       	ldi	r24, 0xD4	; 212
    1ffa:	91 e0       	ldi	r25, 0x01	; 1
    1ffc:	0e 94 1f 13 	call	0x263e	; 0x263e <_ZN5Print5printEhi>
        Serial.println(F(")"));
    2000:	67 e7       	ldi	r22, 0x77	; 119
    2002:	70 e0       	ldi	r23, 0x00	; 0
    2004:	84 ed       	ldi	r24, 0xD4	; 212
    2006:	91 e0       	ldi	r25, 0x01	; 1
    2008:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN5Print7printlnEPK19__FlashStringHelper>
    }

    // configure LED for output
    pinMode(LED_PIN, OUTPUT);
    200c:	61 e0       	ldi	r22, 0x01	; 1
    200e:	8d e0       	ldi	r24, 0x0D	; 13
    2010:	0e 94 11 16 	call	0x2c22	; 0x2c22 <pinMode>
    2014:	08 95       	ret

00002016 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2016:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2018:	91 8d       	ldd	r25, Z+25	; 0x19
    201a:	22 8d       	ldd	r18, Z+26	; 0x1a
    201c:	89 2f       	mov	r24, r25
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	80 5c       	subi	r24, 0xC0	; 192
    2022:	9f 4f       	sbci	r25, 0xFF	; 255
    2024:	82 1b       	sub	r24, r18
    2026:	91 09       	sbc	r25, r1
}
    2028:	8f 73       	andi	r24, 0x3F	; 63
    202a:	99 27       	eor	r25, r25
    202c:	08 95       	ret

0000202e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    202e:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2030:	91 8d       	ldd	r25, Z+25	; 0x19
    2032:	82 8d       	ldd	r24, Z+26	; 0x1a
    2034:	98 17       	cp	r25, r24
    2036:	31 f0       	breq	.+12     	; 0x2044 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2038:	82 8d       	ldd	r24, Z+26	; 0x1a
    203a:	e8 0f       	add	r30, r24
    203c:	f1 1d       	adc	r31, r1
    203e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2044:	8f ef       	ldi	r24, 0xFF	; 255
    2046:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2048:	08 95       	ret

0000204a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    204a:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    204c:	91 8d       	ldd	r25, Z+25	; 0x19
    204e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2050:	98 17       	cp	r25, r24
    2052:	61 f0       	breq	.+24     	; 0x206c <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2054:	82 8d       	ldd	r24, Z+26	; 0x1a
    2056:	df 01       	movw	r26, r30
    2058:	a8 0f       	add	r26, r24
    205a:	b1 1d       	adc	r27, r1
    205c:	5d 96       	adiw	r26, 0x1d	; 29
    205e:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2060:	92 8d       	ldd	r25, Z+26	; 0x1a
    2062:	9f 5f       	subi	r25, 0xFF	; 255
    2064:	9f 73       	andi	r25, 0x3F	; 63
    2066:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    206c:	8f ef       	ldi	r24, 0xFF	; 255
    206e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2070:	08 95       	ret

00002072 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2072:	8e e8       	ldi	r24, 0x8E	; 142
    2074:	91 e1       	ldi	r25, 0x11	; 17
    2076:	89 2b       	or	r24, r25
    2078:	49 f0       	breq	.+18     	; 0x208c <_Z14serialEventRunv+0x1a>
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	89 2b       	or	r24, r25
    2080:	29 f0       	breq	.+10     	; 0x208c <_Z14serialEventRunv+0x1a>
    2082:	0e 94 8e 11 	call	0x231c	; 0x231c <_Z17Serial0_availablev>
    2086:	81 11       	cpse	r24, r1
    2088:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    208c:	08 95       	ret

0000208e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    208e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2090:	84 8d       	ldd	r24, Z+28	; 0x1c
    2092:	df 01       	movw	r26, r30
    2094:	a8 0f       	add	r26, r24
    2096:	b1 1d       	adc	r27, r1
    2098:	a3 5a       	subi	r26, 0xA3	; 163
    209a:	bf 4f       	sbci	r27, 0xFF	; 255
    209c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    209e:	84 8d       	ldd	r24, Z+28	; 0x1c
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	01 96       	adiw	r24, 0x01	; 1
    20a4:	8f 73       	andi	r24, 0x3F	; 63
    20a6:	99 27       	eor	r25, r25
    20a8:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    20aa:	a6 89       	ldd	r26, Z+22	; 0x16
    20ac:	b7 89       	ldd	r27, Z+23	; 0x17
    20ae:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    20b0:	a0 89       	ldd	r26, Z+16	; 0x10
    20b2:	b1 89       	ldd	r27, Z+17	; 0x11
    20b4:	8c 91       	ld	r24, X
    20b6:	80 64       	ori	r24, 0x40	; 64
    20b8:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    20ba:	93 8d       	ldd	r25, Z+27	; 0x1b
    20bc:	84 8d       	ldd	r24, Z+28	; 0x1c
    20be:	98 13       	cpse	r25, r24
    20c0:	06 c0       	rjmp	.+12     	; 0x20ce <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    20c2:	02 88       	ldd	r0, Z+18	; 0x12
    20c4:	f3 89       	ldd	r31, Z+19	; 0x13
    20c6:	e0 2d       	mov	r30, r0
    20c8:	80 81       	ld	r24, Z
    20ca:	8f 7d       	andi	r24, 0xDF	; 223
    20cc:	80 83       	st	Z, r24
    20ce:	08 95       	ret

000020d0 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    20d0:	cf 93       	push	r28
    20d2:	df 93       	push	r29
    20d4:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    20d6:	88 8d       	ldd	r24, Y+24	; 0x18
    20d8:	88 23       	and	r24, r24
    20da:	c9 f0       	breq	.+50     	; 0x210e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    20dc:	ea 89       	ldd	r30, Y+18	; 0x12
    20de:	fb 89       	ldd	r31, Y+19	; 0x13
    20e0:	80 81       	ld	r24, Z
    20e2:	85 fd       	sbrc	r24, 5
    20e4:	05 c0       	rjmp	.+10     	; 0x20f0 <_ZN14HardwareSerial5flushEv+0x20>
    20e6:	a8 89       	ldd	r26, Y+16	; 0x10
    20e8:	b9 89       	ldd	r27, Y+17	; 0x11
    20ea:	8c 91       	ld	r24, X
    20ec:	86 fd       	sbrc	r24, 6
    20ee:	0f c0       	rjmp	.+30     	; 0x210e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	07 fc       	sbrc	r0, 7
    20f4:	f5 cf       	rjmp	.-22     	; 0x20e0 <_ZN14HardwareSerial5flushEv+0x10>
    20f6:	80 81       	ld	r24, Z
    20f8:	85 ff       	sbrs	r24, 5
    20fa:	f2 cf       	rjmp	.-28     	; 0x20e0 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    20fc:	a8 89       	ldd	r26, Y+16	; 0x10
    20fe:	b9 89       	ldd	r27, Y+17	; 0x11
    2100:	8c 91       	ld	r24, X
    2102:	85 ff       	sbrs	r24, 5
    2104:	ed cf       	rjmp	.-38     	; 0x20e0 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    2106:	ce 01       	movw	r24, r28
    2108:	0e 94 47 10 	call	0x208e	; 0x208e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    210c:	e7 cf       	rjmp	.-50     	; 0x20dc <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    210e:	df 91       	pop	r29
    2110:	cf 91       	pop	r28
    2112:	08 95       	ret

00002114 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    2114:	ef 92       	push	r14
    2116:	ff 92       	push	r15
    2118:	0f 93       	push	r16
    211a:	1f 93       	push	r17
    211c:	cf 93       	push	r28
    211e:	df 93       	push	r29
    2120:	ec 01       	movw	r28, r24
  _written = true;
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2126:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2128:	8c 8d       	ldd	r24, Y+28	; 0x1c
    212a:	98 13       	cpse	r25, r24
    212c:	05 c0       	rjmp	.+10     	; 0x2138 <_ZN14HardwareSerial5writeEh+0x24>
    212e:	e8 89       	ldd	r30, Y+16	; 0x10
    2130:	f9 89       	ldd	r31, Y+17	; 0x11
    2132:	80 81       	ld	r24, Z
    2134:	85 fd       	sbrc	r24, 5
    2136:	24 c0       	rjmp	.+72     	; 0x2180 <_ZN14HardwareSerial5writeEh+0x6c>
    2138:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    213a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    213c:	10 e0       	ldi	r17, 0x00	; 0
    213e:	0f 5f       	subi	r16, 0xFF	; 255
    2140:	1f 4f       	sbci	r17, 0xFF	; 255
    2142:	0f 73       	andi	r16, 0x3F	; 63
    2144:	11 27       	eor	r17, r17
    2146:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2148:	8c 8d       	ldd	r24, Y+28	; 0x1c
    214a:	e8 12       	cpse	r14, r24
    214c:	0c c0       	rjmp	.+24     	; 0x2166 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    214e:	0f b6       	in	r0, 0x3f	; 63
    2150:	07 fc       	sbrc	r0, 7
    2152:	fa cf       	rjmp	.-12     	; 0x2148 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2154:	e8 89       	ldd	r30, Y+16	; 0x10
    2156:	f9 89       	ldd	r31, Y+17	; 0x11
    2158:	80 81       	ld	r24, Z
    215a:	85 ff       	sbrs	r24, 5
    215c:	f5 cf       	rjmp	.-22     	; 0x2148 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    215e:	ce 01       	movw	r24, r28
    2160:	0e 94 47 10 	call	0x208e	; 0x208e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2164:	f1 cf       	rjmp	.-30     	; 0x2148 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2166:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2168:	fe 01       	movw	r30, r28
    216a:	e8 0f       	add	r30, r24
    216c:	f1 1d       	adc	r31, r1
    216e:	e3 5a       	subi	r30, 0xA3	; 163
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    2174:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    2176:	ea 89       	ldd	r30, Y+18	; 0x12
    2178:	fb 89       	ldd	r31, Y+19	; 0x13
    217a:	80 81       	ld	r24, Z
    217c:	80 62       	ori	r24, 0x20	; 32
    217e:	07 c0       	rjmp	.+14     	; 0x218e <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    2180:	ee 89       	ldd	r30, Y+22	; 0x16
    2182:	ff 89       	ldd	r31, Y+23	; 0x17
    2184:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    2186:	e8 89       	ldd	r30, Y+16	; 0x10
    2188:	f9 89       	ldd	r31, Y+17	; 0x11
    218a:	80 81       	ld	r24, Z
    218c:	80 64       	ori	r24, 0x40	; 64
    218e:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	df 91       	pop	r29
    2196:	cf 91       	pop	r28
    2198:	1f 91       	pop	r17
    219a:	0f 91       	pop	r16
    219c:	ff 90       	pop	r15
    219e:	ef 90       	pop	r14
    21a0:	08 95       	ret

000021a2 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    21a2:	cf 92       	push	r12
    21a4:	df 92       	push	r13
    21a6:	ef 92       	push	r14
    21a8:	ff 92       	push	r15
    21aa:	1f 93       	push	r17
    21ac:	cf 93       	push	r28
    21ae:	df 93       	push	r29
    21b0:	ec 01       	movw	r28, r24
    21b2:	6a 01       	movw	r12, r20
    21b4:	7b 01       	movw	r14, r22
    21b6:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    21b8:	e8 89       	ldd	r30, Y+16	; 0x10
    21ba:	f9 89       	ldd	r31, Y+17	; 0x11
    21bc:	82 e0       	ldi	r24, 0x02	; 2
    21be:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    21c0:	41 15       	cp	r20, r1
    21c2:	51 4e       	sbci	r21, 0xE1	; 225
    21c4:	61 05       	cpc	r22, r1
    21c6:	71 05       	cpc	r23, r1
    21c8:	b1 f0       	breq	.+44     	; 0x21f6 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    21ca:	60 e0       	ldi	r22, 0x00	; 0
    21cc:	79 e0       	ldi	r23, 0x09	; 9
    21ce:	8d e3       	ldi	r24, 0x3D	; 61
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	a7 01       	movw	r20, r14
    21d4:	96 01       	movw	r18, r12
    21d6:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__udivmodsi4>
    21da:	da 01       	movw	r26, r20
    21dc:	c9 01       	movw	r24, r18
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	a1 09       	sbc	r26, r1
    21e2:	b1 09       	sbc	r27, r1
    21e4:	b6 95       	lsr	r27
    21e6:	a7 95       	ror	r26
    21e8:	97 95       	ror	r25
    21ea:	87 95       	ror	r24
    21ec:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    21ee:	41 15       	cp	r20, r1
    21f0:	80 e1       	ldi	r24, 0x10	; 16
    21f2:	58 07       	cpc	r21, r24
    21f4:	a8 f0       	brcs	.+42     	; 0x2220 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    21f6:	e8 89       	ldd	r30, Y+16	; 0x10
    21f8:	f9 89       	ldd	r31, Y+17	; 0x11
    21fa:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    21fc:	60 e8       	ldi	r22, 0x80	; 128
    21fe:	74 e8       	ldi	r23, 0x84	; 132
    2200:	8e e1       	ldi	r24, 0x1E	; 30
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	a7 01       	movw	r20, r14
    2206:	96 01       	movw	r18, r12
    2208:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__udivmodsi4>
    220c:	ba 01       	movw	r22, r20
    220e:	a9 01       	movw	r20, r18
    2210:	41 50       	subi	r20, 0x01	; 1
    2212:	51 09       	sbc	r21, r1
    2214:	61 09       	sbc	r22, r1
    2216:	71 09       	sbc	r23, r1
    2218:	76 95       	lsr	r23
    221a:	67 95       	ror	r22
    221c:	57 95       	ror	r21
    221e:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2220:	ec 85       	ldd	r30, Y+12	; 0x0c
    2222:	fd 85       	ldd	r31, Y+13	; 0x0d
    2224:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    2226:	ee 85       	ldd	r30, Y+14	; 0x0e
    2228:	ff 85       	ldd	r31, Y+15	; 0x0f
    222a:	40 83       	st	Z, r20

  _written = false;
    222c:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    222e:	ec 89       	ldd	r30, Y+20	; 0x14
    2230:	fd 89       	ldd	r31, Y+21	; 0x15
    2232:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    2234:	ea 89       	ldd	r30, Y+18	; 0x12
    2236:	fb 89       	ldd	r31, Y+19	; 0x13
    2238:	80 81       	ld	r24, Z
    223a:	80 61       	ori	r24, 0x10	; 16
    223c:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    223e:	ea 89       	ldd	r30, Y+18	; 0x12
    2240:	fb 89       	ldd	r31, Y+19	; 0x13
    2242:	80 81       	ld	r24, Z
    2244:	88 60       	ori	r24, 0x08	; 8
    2246:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2248:	ea 89       	ldd	r30, Y+18	; 0x12
    224a:	fb 89       	ldd	r31, Y+19	; 0x13
    224c:	80 81       	ld	r24, Z
    224e:	80 68       	ori	r24, 0x80	; 128
    2250:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2252:	ea 89       	ldd	r30, Y+18	; 0x12
    2254:	fb 89       	ldd	r31, Y+19	; 0x13
    2256:	80 81       	ld	r24, Z
    2258:	8f 7d       	andi	r24, 0xDF	; 223
    225a:	80 83       	st	Z, r24
}
    225c:	df 91       	pop	r29
    225e:	cf 91       	pop	r28
    2260:	1f 91       	pop	r17
    2262:	ff 90       	pop	r15
    2264:	ef 90       	pop	r14
    2266:	df 90       	pop	r13
    2268:	cf 90       	pop	r12
    226a:	08 95       	ret

0000226c <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    226c:	1f 92       	push	r1
    226e:	0f 92       	push	r0
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	0f 92       	push	r0
    2274:	11 24       	eor	r1, r1
    2276:	2f 93       	push	r18
    2278:	8f 93       	push	r24
    227a:	9f 93       	push	r25
    227c:	ef 93       	push	r30
    227e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2280:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <Serial+0x10>
    2284:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <Serial+0x11>
    2288:	80 81       	ld	r24, Z
    228a:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <Serial+0x16>
    228e:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <Serial+0x17>
    2292:	82 fd       	sbrc	r24, 2
    2294:	12 c0       	rjmp	.+36     	; 0x22ba <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2296:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2298:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <Serial+0x19>
    229c:	8f 5f       	subi	r24, 0xFF	; 255
    229e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    22a0:	20 91 ee 01 	lds	r18, 0x01EE	; 0x8001ee <Serial+0x1a>
    22a4:	82 17       	cp	r24, r18
    22a6:	51 f0       	breq	.+20     	; 0x22bc <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    22a8:	e0 91 ed 01 	lds	r30, 0x01ED	; 0x8001ed <Serial+0x19>
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	ec 52       	subi	r30, 0x2C	; 44
    22b0:	fe 4f       	sbci	r31, 0xFE	; 254
    22b2:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    22b4:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <Serial+0x19>
    22b8:	01 c0       	rjmp	.+2      	; 0x22bc <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    22ba:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    22bc:	ff 91       	pop	r31
    22be:	ef 91       	pop	r30
    22c0:	9f 91       	pop	r25
    22c2:	8f 91       	pop	r24
    22c4:	2f 91       	pop	r18
    22c6:	0f 90       	pop	r0
    22c8:	0f be       	out	0x3f, r0	; 63
    22ca:	0f 90       	pop	r0
    22cc:	1f 90       	pop	r1
    22ce:	18 95       	reti

000022d0 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    22d0:	1f 92       	push	r1
    22d2:	0f 92       	push	r0
    22d4:	0f b6       	in	r0, 0x3f	; 63
    22d6:	0f 92       	push	r0
    22d8:	11 24       	eor	r1, r1
    22da:	2f 93       	push	r18
    22dc:	3f 93       	push	r19
    22de:	4f 93       	push	r20
    22e0:	5f 93       	push	r21
    22e2:	6f 93       	push	r22
    22e4:	7f 93       	push	r23
    22e6:	8f 93       	push	r24
    22e8:	9f 93       	push	r25
    22ea:	af 93       	push	r26
    22ec:	bf 93       	push	r27
    22ee:	ef 93       	push	r30
    22f0:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    22f2:	84 ed       	ldi	r24, 0xD4	; 212
    22f4:	91 e0       	ldi	r25, 0x01	; 1
    22f6:	0e 94 47 10 	call	0x208e	; 0x208e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    22fa:	ff 91       	pop	r31
    22fc:	ef 91       	pop	r30
    22fe:	bf 91       	pop	r27
    2300:	af 91       	pop	r26
    2302:	9f 91       	pop	r25
    2304:	8f 91       	pop	r24
    2306:	7f 91       	pop	r23
    2308:	6f 91       	pop	r22
    230a:	5f 91       	pop	r21
    230c:	4f 91       	pop	r20
    230e:	3f 91       	pop	r19
    2310:	2f 91       	pop	r18
    2312:	0f 90       	pop	r0
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	0f 90       	pop	r0
    2318:	1f 90       	pop	r1
    231a:	18 95       	reti

0000231c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    231c:	84 ed       	ldi	r24, 0xD4	; 212
    231e:	91 e0       	ldi	r25, 0x01	; 1
    2320:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN14HardwareSerial9availableEv>
    2324:	21 e0       	ldi	r18, 0x01	; 1
    2326:	89 2b       	or	r24, r25
    2328:	09 f4       	brne	.+2      	; 0x232c <_Z17Serial0_availablev+0x10>
    232a:	20 e0       	ldi	r18, 0x00	; 0
}
    232c:	82 2f       	mov	r24, r18
    232e:	08 95       	ret

00002330 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2330:	e4 ed       	ldi	r30, 0xD4	; 212
    2332:	f1 e0       	ldi	r31, 0x01	; 1
    2334:	13 82       	std	Z+3, r1	; 0x03
    2336:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2338:	88 ee       	ldi	r24, 0xE8	; 232
    233a:	93 e0       	ldi	r25, 0x03	; 3
    233c:	a0 e0       	ldi	r26, 0x00	; 0
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	84 83       	std	Z+4, r24	; 0x04
    2342:	95 83       	std	Z+5, r25	; 0x05
    2344:	a6 83       	std	Z+6, r26	; 0x06
    2346:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2348:	8e e1       	ldi	r24, 0x1E	; 30
    234a:	91 e0       	ldi	r25, 0x01	; 1
    234c:	91 83       	std	Z+1, r25	; 0x01
    234e:	80 83       	st	Z, r24
    2350:	85 ec       	ldi	r24, 0xC5	; 197
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	95 87       	std	Z+13, r25	; 0x0d
    2356:	84 87       	std	Z+12, r24	; 0x0c
    2358:	84 ec       	ldi	r24, 0xC4	; 196
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	97 87       	std	Z+15, r25	; 0x0f
    235e:	86 87       	std	Z+14, r24	; 0x0e
    2360:	80 ec       	ldi	r24, 0xC0	; 192
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	91 8b       	std	Z+17, r25	; 0x11
    2366:	80 8b       	std	Z+16, r24	; 0x10
    2368:	81 ec       	ldi	r24, 0xC1	; 193
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	93 8b       	std	Z+19, r25	; 0x13
    236e:	82 8b       	std	Z+18, r24	; 0x12
    2370:	82 ec       	ldi	r24, 0xC2	; 194
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	95 8b       	std	Z+21, r25	; 0x15
    2376:	84 8b       	std	Z+20, r24	; 0x14
    2378:	86 ec       	ldi	r24, 0xC6	; 198
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	97 8b       	std	Z+23, r25	; 0x17
    237e:	86 8b       	std	Z+22, r24	; 0x16
    2380:	11 8e       	std	Z+25, r1	; 0x19
    2382:	12 8e       	std	Z+26, r1	; 0x1a
    2384:	13 8e       	std	Z+27, r1	; 0x1b
    2386:	14 8e       	std	Z+28, r1	; 0x1c
    2388:	08 95       	ret

0000238a <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    238a:	08 95       	ret

0000238c <main>:

int main(void)
{
	init();
    238c:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <init>

	initVariant();
    2390:	0e 94 c5 11 	call	0x238a	; 0x238a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2394:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2398:	c9 e3       	ldi	r28, 0x39	; 57
    239a:	d0 e1       	ldi	r29, 0x10	; 16
#endif
	
	setup();
    
	for (;;) {
		loop();
    239c:	0e 94 65 0e 	call	0x1cca	; 0x1cca <loop>
		if (serialEventRun) serialEventRun();
    23a0:	20 97       	sbiw	r28, 0x00	; 0
    23a2:	e1 f3       	breq	.-8      	; 0x239c <main+0x10>
    23a4:	0e 94 39 10 	call	0x2072	; 0x2072 <_Z14serialEventRunv>
    23a8:	f9 cf       	rjmp	.-14     	; 0x239c <main+0x10>

000023aa <_ZN5Print5writeEPKhj>:
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    23aa:	cf 92       	push	r12
    23ac:	df 92       	push	r13
    23ae:	ef 92       	push	r14
    23b0:	ff 92       	push	r15
    23b2:	0f 93       	push	r16
    23b4:	1f 93       	push	r17
    23b6:	cf 93       	push	r28
    23b8:	df 93       	push	r29
    23ba:	6c 01       	movw	r12, r24
    23bc:	7a 01       	movw	r14, r20
    23be:	8b 01       	movw	r16, r22
    23c0:	c0 e0       	ldi	r28, 0x00	; 0
    23c2:	d0 e0       	ldi	r29, 0x00	; 0
    23c4:	ce 15       	cp	r28, r14
    23c6:	df 05       	cpc	r29, r15
    23c8:	89 f0       	breq	.+34     	; 0x23ec <_ZN5Print5writeEPKhj+0x42>
    23ca:	d8 01       	movw	r26, r16
    23cc:	6d 91       	ld	r22, X+
    23ce:	8d 01       	movw	r16, r26
    23d0:	d6 01       	movw	r26, r12
    23d2:	ed 91       	ld	r30, X+
    23d4:	fc 91       	ld	r31, X
    23d6:	01 90       	ld	r0, Z+
    23d8:	f0 81       	ld	r31, Z
    23da:	e0 2d       	mov	r30, r0
    23dc:	c6 01       	movw	r24, r12
    23de:	09 95       	icall
    23e0:	89 2b       	or	r24, r25
    23e2:	11 f4       	brne	.+4      	; 0x23e8 <_ZN5Print5writeEPKhj+0x3e>
    23e4:	7e 01       	movw	r14, r28
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <_ZN5Print5writeEPKhj+0x42>
    23e8:	21 96       	adiw	r28, 0x01	; 1
    23ea:	ec cf       	rjmp	.-40     	; 0x23c4 <_ZN5Print5writeEPKhj+0x1a>
    23ec:	c7 01       	movw	r24, r14
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	1f 91       	pop	r17
    23f4:	0f 91       	pop	r16
    23f6:	ff 90       	pop	r15
    23f8:	ef 90       	pop	r14
    23fa:	df 90       	pop	r13
    23fc:	cf 90       	pop	r12
    23fe:	08 95       	ret

00002400 <_ZN5Print5writeEPKc>:
    2400:	61 15       	cp	r22, r1
    2402:	71 05       	cpc	r23, r1
    2404:	79 f0       	breq	.+30     	; 0x2424 <_ZN5Print5writeEPKc+0x24>
    2406:	fb 01       	movw	r30, r22
    2408:	01 90       	ld	r0, Z+
    240a:	00 20       	and	r0, r0
    240c:	e9 f7       	brne	.-6      	; 0x2408 <_ZN5Print5writeEPKc+0x8>
    240e:	31 97       	sbiw	r30, 0x01	; 1
    2410:	af 01       	movw	r20, r30
    2412:	46 1b       	sub	r20, r22
    2414:	57 0b       	sbc	r21, r23
    2416:	dc 01       	movw	r26, r24
    2418:	ed 91       	ld	r30, X+
    241a:	fc 91       	ld	r31, X
    241c:	02 80       	ldd	r0, Z+2	; 0x02
    241e:	f3 81       	ldd	r31, Z+3	; 0x03
    2420:	e0 2d       	mov	r30, r0
    2422:	09 94       	ijmp
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	08 95       	ret

0000242a <_ZN5Print5printEPK19__FlashStringHelper>:
    242a:	ef 92       	push	r14
    242c:	ff 92       	push	r15
    242e:	0f 93       	push	r16
    2430:	1f 93       	push	r17
    2432:	cf 93       	push	r28
    2434:	df 93       	push	r29
    2436:	8c 01       	movw	r16, r24
    2438:	7b 01       	movw	r14, r22
    243a:	c0 e0       	ldi	r28, 0x00	; 0
    243c:	d0 e0       	ldi	r29, 0x00	; 0
    243e:	f7 01       	movw	r30, r14
    2440:	ec 0f       	add	r30, r28
    2442:	fd 1f       	adc	r31, r29
    2444:	64 91       	lpm	r22, Z
    2446:	66 23       	and	r22, r22
    2448:	61 f0       	breq	.+24     	; 0x2462 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    244a:	d8 01       	movw	r26, r16
    244c:	ed 91       	ld	r30, X+
    244e:	fc 91       	ld	r31, X
    2450:	01 90       	ld	r0, Z+
    2452:	f0 81       	ld	r31, Z
    2454:	e0 2d       	mov	r30, r0
    2456:	c8 01       	movw	r24, r16
    2458:	09 95       	icall
    245a:	89 2b       	or	r24, r25
    245c:	11 f0       	breq	.+4      	; 0x2462 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    245e:	21 96       	adiw	r28, 0x01	; 1
    2460:	ee cf       	rjmp	.-36     	; 0x243e <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    2462:	ce 01       	movw	r24, r28
    2464:	df 91       	pop	r29
    2466:	cf 91       	pop	r28
    2468:	1f 91       	pop	r17
    246a:	0f 91       	pop	r16
    246c:	ff 90       	pop	r15
    246e:	ef 90       	pop	r14
    2470:	08 95       	ret

00002472 <_ZN5Print5printEc>:
    2472:	dc 01       	movw	r26, r24
    2474:	ed 91       	ld	r30, X+
    2476:	fc 91       	ld	r31, X
    2478:	01 90       	ld	r0, Z+
    247a:	f0 81       	ld	r31, Z
    247c:	e0 2d       	mov	r30, r0
    247e:	09 94       	ijmp

00002480 <_ZN5Print7printlnEv>:
    2480:	6a e2       	ldi	r22, 0x2A	; 42
    2482:	71 e0       	ldi	r23, 0x01	; 1
    2484:	0c 94 00 12 	jmp	0x2400	; 0x2400 <_ZN5Print5writeEPKc>

00002488 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    2488:	0f 93       	push	r16
    248a:	1f 93       	push	r17
    248c:	cf 93       	push	r28
    248e:	df 93       	push	r29
    2490:	ec 01       	movw	r28, r24
    2492:	0e 94 15 12 	call	0x242a	; 0x242a <_ZN5Print5printEPK19__FlashStringHelper>
    2496:	8c 01       	movw	r16, r24
    2498:	ce 01       	movw	r24, r28
    249a:	0e 94 40 12 	call	0x2480	; 0x2480 <_ZN5Print7printlnEv>
    249e:	80 0f       	add	r24, r16
    24a0:	91 1f       	adc	r25, r17
    24a2:	df 91       	pop	r29
    24a4:	cf 91       	pop	r28
    24a6:	1f 91       	pop	r17
    24a8:	0f 91       	pop	r16
    24aa:	08 95       	ret

000024ac <_ZN5Print11printNumberEmh>:
    24ac:	8f 92       	push	r8
    24ae:	9f 92       	push	r9
    24b0:	af 92       	push	r10
    24b2:	bf 92       	push	r11
    24b4:	cf 92       	push	r12
    24b6:	df 92       	push	r13
    24b8:	ef 92       	push	r14
    24ba:	ff 92       	push	r15
    24bc:	0f 93       	push	r16
    24be:	1f 93       	push	r17
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
    24c8:	a1 97       	sbiw	r28, 0x21	; 33
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	f8 94       	cli
    24ce:	de bf       	out	0x3e, r29	; 62
    24d0:	0f be       	out	0x3f, r0	; 63
    24d2:	cd bf       	out	0x3d, r28	; 61
    24d4:	7c 01       	movw	r14, r24
    24d6:	d4 2e       	mov	r13, r20
    24d8:	c5 2e       	mov	r12, r21
    24da:	db 01       	movw	r26, r22
    24dc:	19 a2       	std	Y+33, r1	; 0x21
    24de:	22 30       	cpi	r18, 0x02	; 2
    24e0:	08 f4       	brcc	.+2      	; 0x24e4 <_ZN5Print11printNumberEmh+0x38>
    24e2:	2a e0       	ldi	r18, 0x0A	; 10
    24e4:	8e 01       	movw	r16, r28
    24e6:	0f 5d       	subi	r16, 0xDF	; 223
    24e8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ea:	82 2e       	mov	r8, r18
    24ec:	91 2c       	mov	r9, r1
    24ee:	a1 2c       	mov	r10, r1
    24f0:	b1 2c       	mov	r11, r1
    24f2:	6d 2d       	mov	r22, r13
    24f4:	7c 2d       	mov	r23, r12
    24f6:	cd 01       	movw	r24, r26
    24f8:	a5 01       	movw	r20, r10
    24fa:	94 01       	movw	r18, r8
    24fc:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__udivmodsi4>
    2500:	d2 2e       	mov	r13, r18
    2502:	c3 2e       	mov	r12, r19
    2504:	da 01       	movw	r26, r20
    2506:	01 50       	subi	r16, 0x01	; 1
    2508:	11 09       	sbc	r17, r1
    250a:	6a 30       	cpi	r22, 0x0A	; 10
    250c:	71 05       	cpc	r23, r1
    250e:	81 05       	cpc	r24, r1
    2510:	91 05       	cpc	r25, r1
    2512:	10 f4       	brcc	.+4      	; 0x2518 <_ZN5Print11printNumberEmh+0x6c>
    2514:	60 5d       	subi	r22, 0xD0	; 208
    2516:	01 c0       	rjmp	.+2      	; 0x251a <_ZN5Print11printNumberEmh+0x6e>
    2518:	69 5c       	subi	r22, 0xC9	; 201
    251a:	f8 01       	movw	r30, r16
    251c:	60 83       	st	Z, r22
    251e:	23 2b       	or	r18, r19
    2520:	24 2b       	or	r18, r20
    2522:	25 2b       	or	r18, r21
    2524:	31 f7       	brne	.-52     	; 0x24f2 <_ZN5Print11printNumberEmh+0x46>
    2526:	b8 01       	movw	r22, r16
    2528:	c7 01       	movw	r24, r14
    252a:	0e 94 00 12 	call	0x2400	; 0x2400 <_ZN5Print5writeEPKc>
    252e:	a1 96       	adiw	r28, 0x21	; 33
    2530:	0f b6       	in	r0, 0x3f	; 63
    2532:	f8 94       	cli
    2534:	de bf       	out	0x3e, r29	; 62
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	cd bf       	out	0x3d, r28	; 61
    253a:	df 91       	pop	r29
    253c:	cf 91       	pop	r28
    253e:	1f 91       	pop	r17
    2540:	0f 91       	pop	r16
    2542:	ff 90       	pop	r15
    2544:	ef 90       	pop	r14
    2546:	df 90       	pop	r13
    2548:	cf 90       	pop	r12
    254a:	bf 90       	pop	r11
    254c:	af 90       	pop	r10
    254e:	9f 90       	pop	r9
    2550:	8f 90       	pop	r8
    2552:	08 95       	ret

00002554 <_ZN5Print5printEli>:
    2554:	cf 92       	push	r12
    2556:	df 92       	push	r13
    2558:	ef 92       	push	r14
    255a:	ff 92       	push	r15
    255c:	0f 93       	push	r16
    255e:	1f 93       	push	r17
    2560:	cf 93       	push	r28
    2562:	df 93       	push	r29
    2564:	ec 01       	movw	r28, r24
    2566:	6a 01       	movw	r12, r20
    2568:	7b 01       	movw	r14, r22
    256a:	21 15       	cp	r18, r1
    256c:	31 05       	cpc	r19, r1
    256e:	79 f4       	brne	.+30     	; 0x258e <_ZN5Print5printEli+0x3a>
    2570:	e8 81       	ld	r30, Y
    2572:	f9 81       	ldd	r31, Y+1	; 0x01
    2574:	01 90       	ld	r0, Z+
    2576:	f0 81       	ld	r31, Z
    2578:	e0 2d       	mov	r30, r0
    257a:	64 2f       	mov	r22, r20
    257c:	df 91       	pop	r29
    257e:	cf 91       	pop	r28
    2580:	1f 91       	pop	r17
    2582:	0f 91       	pop	r16
    2584:	ff 90       	pop	r15
    2586:	ef 90       	pop	r14
    2588:	df 90       	pop	r13
    258a:	cf 90       	pop	r12
    258c:	09 94       	ijmp
    258e:	2a 30       	cpi	r18, 0x0A	; 10
    2590:	31 05       	cpc	r19, r1
    2592:	e9 f4       	brne	.+58     	; 0x25ce <_ZN5Print5printEli+0x7a>
    2594:	77 ff       	sbrs	r23, 7
    2596:	1a c0       	rjmp	.+52     	; 0x25cc <_ZN5Print5printEli+0x78>
    2598:	6d e2       	ldi	r22, 0x2D	; 45
    259a:	0e 94 39 12 	call	0x2472	; 0x2472 <_ZN5Print5printEc>
    259e:	8c 01       	movw	r16, r24
    25a0:	44 27       	eor	r20, r20
    25a2:	55 27       	eor	r21, r21
    25a4:	ba 01       	movw	r22, r20
    25a6:	4c 19       	sub	r20, r12
    25a8:	5d 09       	sbc	r21, r13
    25aa:	6e 09       	sbc	r22, r14
    25ac:	7f 09       	sbc	r23, r15
    25ae:	2a e0       	ldi	r18, 0x0A	; 10
    25b0:	ce 01       	movw	r24, r28
    25b2:	0e 94 56 12 	call	0x24ac	; 0x24ac <_ZN5Print11printNumberEmh>
    25b6:	80 0f       	add	r24, r16
    25b8:	91 1f       	adc	r25, r17
    25ba:	df 91       	pop	r29
    25bc:	cf 91       	pop	r28
    25be:	1f 91       	pop	r17
    25c0:	0f 91       	pop	r16
    25c2:	ff 90       	pop	r15
    25c4:	ef 90       	pop	r14
    25c6:	df 90       	pop	r13
    25c8:	cf 90       	pop	r12
    25ca:	08 95       	ret
    25cc:	2a e0       	ldi	r18, 0x0A	; 10
    25ce:	b7 01       	movw	r22, r14
    25d0:	a6 01       	movw	r20, r12
    25d2:	ce 01       	movw	r24, r28
    25d4:	df 91       	pop	r29
    25d6:	cf 91       	pop	r28
    25d8:	1f 91       	pop	r17
    25da:	0f 91       	pop	r16
    25dc:	ff 90       	pop	r15
    25de:	ef 90       	pop	r14
    25e0:	df 90       	pop	r13
    25e2:	cf 90       	pop	r12
    25e4:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <_ZN5Print11printNumberEmh>

000025e8 <_ZN5Print5printEii>:
    25e8:	9a 01       	movw	r18, r20
    25ea:	ab 01       	movw	r20, r22
    25ec:	77 0f       	add	r23, r23
    25ee:	66 0b       	sbc	r22, r22
    25f0:	77 0b       	sbc	r23, r23
    25f2:	0c 94 aa 12 	jmp	0x2554	; 0x2554 <_ZN5Print5printEli>

000025f6 <_ZN5Print7printlnEii>:
    25f6:	0f 93       	push	r16
    25f8:	1f 93       	push	r17
    25fa:	cf 93       	push	r28
    25fc:	df 93       	push	r29
    25fe:	ec 01       	movw	r28, r24
    2600:	9a 01       	movw	r18, r20
    2602:	ab 01       	movw	r20, r22
    2604:	77 0f       	add	r23, r23
    2606:	66 0b       	sbc	r22, r22
    2608:	77 0b       	sbc	r23, r23
    260a:	0e 94 aa 12 	call	0x2554	; 0x2554 <_ZN5Print5printEli>
    260e:	8c 01       	movw	r16, r24
    2610:	ce 01       	movw	r24, r28
    2612:	0e 94 40 12 	call	0x2480	; 0x2480 <_ZN5Print7printlnEv>
    2616:	80 0f       	add	r24, r16
    2618:	91 1f       	adc	r25, r17
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	1f 91       	pop	r17
    2620:	0f 91       	pop	r16
    2622:	08 95       	ret

00002624 <_ZN5Print5printEmi>:
    2624:	21 15       	cp	r18, r1
    2626:	31 05       	cpc	r19, r1
    2628:	41 f4       	brne	.+16     	; 0x263a <_ZN5Print5printEmi+0x16>
    262a:	dc 01       	movw	r26, r24
    262c:	ed 91       	ld	r30, X+
    262e:	fc 91       	ld	r31, X
    2630:	01 90       	ld	r0, Z+
    2632:	f0 81       	ld	r31, Z
    2634:	e0 2d       	mov	r30, r0
    2636:	64 2f       	mov	r22, r20
    2638:	09 94       	ijmp
    263a:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <_ZN5Print11printNumberEmh>

0000263e <_ZN5Print5printEhi>:
    263e:	9a 01       	movw	r18, r20
    2640:	46 2f       	mov	r20, r22
    2642:	50 e0       	ldi	r21, 0x00	; 0
    2644:	60 e0       	ldi	r22, 0x00	; 0
    2646:	70 e0       	ldi	r23, 0x00	; 0
    2648:	0c 94 12 13 	jmp	0x2624	; 0x2624 <_ZN5Print5printEmi>

0000264c <_ZN5Print7printlnEhi>:
    264c:	0f 93       	push	r16
    264e:	1f 93       	push	r17
    2650:	cf 93       	push	r28
    2652:	df 93       	push	r29
    2654:	ec 01       	movw	r28, r24
    2656:	9a 01       	movw	r18, r20
    2658:	46 2f       	mov	r20, r22
    265a:	50 e0       	ldi	r21, 0x00	; 0
    265c:	60 e0       	ldi	r22, 0x00	; 0
    265e:	70 e0       	ldi	r23, 0x00	; 0
    2660:	0e 94 12 13 	call	0x2624	; 0x2624 <_ZN5Print5printEmi>
    2664:	8c 01       	movw	r16, r24
    2666:	ce 01       	movw	r24, r28
    2668:	0e 94 40 12 	call	0x2480	; 0x2480 <_ZN5Print7printlnEv>
    266c:	80 0f       	add	r24, r16
    266e:	91 1f       	adc	r25, r17
    2670:	df 91       	pop	r29
    2672:	cf 91       	pop	r28
    2674:	1f 91       	pop	r17
    2676:	0f 91       	pop	r16
    2678:	08 95       	ret

0000267a <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    267a:	0f 93       	push	r16
    267c:	1f 93       	push	r17
    267e:	cf 93       	push	r28
    2680:	df 93       	push	r29
    2682:	ec 01       	movw	r28, r24
    2684:	9a 01       	movw	r18, r20
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    2686:	ab 01       	movw	r20, r22
    2688:	60 e0       	ldi	r22, 0x00	; 0
    268a:	70 e0       	ldi	r23, 0x00	; 0
    268c:	0e 94 12 13 	call	0x2624	; 0x2624 <_ZN5Print5printEmi>
    2690:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
    2692:	ce 01       	movw	r24, r28
    2694:	0e 94 40 12 	call	0x2480	; 0x2480 <_ZN5Print7printlnEv>
  return n;
}
    2698:	80 0f       	add	r24, r16
    269a:	91 1f       	adc	r25, r17
    269c:	df 91       	pop	r29
    269e:	cf 91       	pop	r28
    26a0:	1f 91       	pop	r17
    26a2:	0f 91       	pop	r16
    26a4:	08 95       	ret

000026a6 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    26a6:	08 95       	ret

000026a8 <attachInterrupt>:
    26a8:	82 30       	cpi	r24, 0x02	; 2
    26aa:	e8 f4       	brcc	.+58     	; 0x26e6 <attachInterrupt+0x3e>
    26ac:	e8 2f       	mov	r30, r24
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	ee 0f       	add	r30, r30
    26b2:	ff 1f       	adc	r31, r31
    26b4:	ec 5e       	subi	r30, 0xEC	; 236
    26b6:	fe 4f       	sbci	r31, 0xFE	; 254
    26b8:	71 83       	std	Z+1, r23	; 0x01
    26ba:	60 83       	st	Z, r22
    26bc:	81 30       	cpi	r24, 0x01	; 1
    26be:	41 f0       	breq	.+16     	; 0x26d0 <attachInterrupt+0x28>
    26c0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    26c4:	8c 7f       	andi	r24, 0xFC	; 252
    26c6:	48 2b       	or	r20, r24
    26c8:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    26cc:	e8 9a       	sbi	0x1d, 0	; 29
    26ce:	08 95       	ret
    26d0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    26d4:	44 0f       	add	r20, r20
    26d6:	55 1f       	adc	r21, r21
    26d8:	44 0f       	add	r20, r20
    26da:	55 1f       	adc	r21, r21
    26dc:	83 7f       	andi	r24, 0xF3	; 243
    26de:	48 2b       	or	r20, r24
    26e0:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    26e4:	e9 9a       	sbi	0x1d, 1	; 29
    26e6:	08 95       	ret

000026e8 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    26e8:	1f 92       	push	r1
    26ea:	0f 92       	push	r0
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	0f 92       	push	r0
    26f0:	11 24       	eor	r1, r1
    26f2:	2f 93       	push	r18
    26f4:	3f 93       	push	r19
    26f6:	4f 93       	push	r20
    26f8:	5f 93       	push	r21
    26fa:	6f 93       	push	r22
    26fc:	7f 93       	push	r23
    26fe:	8f 93       	push	r24
    2700:	9f 93       	push	r25
    2702:	af 93       	push	r26
    2704:	bf 93       	push	r27
    2706:	ef 93       	push	r30
    2708:	ff 93       	push	r31
    270a:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <intFunc>
    270e:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <intFunc+0x1>
    2712:	09 95       	icall
    2714:	ff 91       	pop	r31
    2716:	ef 91       	pop	r30
    2718:	bf 91       	pop	r27
    271a:	af 91       	pop	r26
    271c:	9f 91       	pop	r25
    271e:	8f 91       	pop	r24
    2720:	7f 91       	pop	r23
    2722:	6f 91       	pop	r22
    2724:	5f 91       	pop	r21
    2726:	4f 91       	pop	r20
    2728:	3f 91       	pop	r19
    272a:	2f 91       	pop	r18
    272c:	0f 90       	pop	r0
    272e:	0f be       	out	0x3f, r0	; 63
    2730:	0f 90       	pop	r0
    2732:	1f 90       	pop	r1
    2734:	18 95       	reti

00002736 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    2736:	1f 92       	push	r1
    2738:	0f 92       	push	r0
    273a:	0f b6       	in	r0, 0x3f	; 63
    273c:	0f 92       	push	r0
    273e:	11 24       	eor	r1, r1
    2740:	2f 93       	push	r18
    2742:	3f 93       	push	r19
    2744:	4f 93       	push	r20
    2746:	5f 93       	push	r21
    2748:	6f 93       	push	r22
    274a:	7f 93       	push	r23
    274c:	8f 93       	push	r24
    274e:	9f 93       	push	r25
    2750:	af 93       	push	r26
    2752:	bf 93       	push	r27
    2754:	ef 93       	push	r30
    2756:	ff 93       	push	r31
    2758:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <intFunc+0x2>
    275c:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <intFunc+0x3>
    2760:	09 95       	icall
    2762:	ff 91       	pop	r31
    2764:	ef 91       	pop	r30
    2766:	bf 91       	pop	r27
    2768:	af 91       	pop	r26
    276a:	9f 91       	pop	r25
    276c:	8f 91       	pop	r24
    276e:	7f 91       	pop	r23
    2770:	6f 91       	pop	r22
    2772:	5f 91       	pop	r21
    2774:	4f 91       	pop	r20
    2776:	3f 91       	pop	r19
    2778:	2f 91       	pop	r18
    277a:	0f 90       	pop	r0
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	0f 90       	pop	r0
    2780:	1f 90       	pop	r1
    2782:	18 95       	reti

00002784 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2784:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <_ZN7TwoWire14rxBufferLengthE>
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	20 91 a2 02 	lds	r18, 0x02A2	; 0x8002a2 <_ZN7TwoWire13rxBufferIndexE>
    278e:	82 1b       	sub	r24, r18
    2790:	91 09       	sbc	r25, r1
    2792:	08 95       	ret

00002794 <_ZN7TwoWire4readEv>:
    2794:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <_ZN7TwoWire13rxBufferIndexE>
    2798:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <_ZN7TwoWire14rxBufferLengthE>
    279c:	98 17       	cp	r25, r24
    279e:	50 f4       	brcc	.+20     	; 0x27b4 <_ZN7TwoWire4readEv+0x20>
    27a0:	e9 2f       	mov	r30, r25
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	ed 55       	subi	r30, 0x5D	; 93
    27a6:	fd 4f       	sbci	r31, 0xFD	; 253
    27a8:	20 81       	ld	r18, Z
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	9f 5f       	subi	r25, 0xFF	; 255
    27ae:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <_ZN7TwoWire13rxBufferIndexE>
    27b2:	02 c0       	rjmp	.+4      	; 0x27b8 <_ZN7TwoWire4readEv+0x24>
    27b4:	2f ef       	ldi	r18, 0xFF	; 255
    27b6:	3f ef       	ldi	r19, 0xFF	; 255
    27b8:	c9 01       	movw	r24, r18
    27ba:	08 95       	ret

000027bc <_ZN7TwoWire4peekEv>:
    27bc:	e0 91 a2 02 	lds	r30, 0x02A2	; 0x8002a2 <_ZN7TwoWire13rxBufferIndexE>
    27c0:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <_ZN7TwoWire14rxBufferLengthE>
    27c4:	e8 17       	cp	r30, r24
    27c6:	30 f4       	brcc	.+12     	; 0x27d4 <_ZN7TwoWire4peekEv+0x18>
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	ed 55       	subi	r30, 0x5D	; 93
    27cc:	fd 4f       	sbci	r31, 0xFD	; 253
    27ce:	80 81       	ld	r24, Z
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	08 95       	ret
    27d4:	8f ef       	ldi	r24, 0xFF	; 255
    27d6:	9f ef       	ldi	r25, 0xFF	; 255
    27d8:	08 95       	ret

000027da <_ZN7TwoWire5flushEv>:
    27da:	08 95       	ret

000027dc <_ZN7TwoWire5writeEPKhj>:
    27dc:	cf 92       	push	r12
    27de:	df 92       	push	r13
    27e0:	ef 92       	push	r14
    27e2:	ff 92       	push	r15
    27e4:	0f 93       	push	r16
    27e6:	1f 93       	push	r17
    27e8:	cf 93       	push	r28
    27ea:	df 93       	push	r29
    27ec:	7c 01       	movw	r14, r24
    27ee:	26 2f       	mov	r18, r22
    27f0:	97 2f       	mov	r25, r23
    27f2:	8a 01       	movw	r16, r20
    27f4:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <_ZN7TwoWire12transmittingE>
    27f8:	88 23       	and	r24, r24
    27fa:	91 f0       	breq	.+36     	; 0x2820 <_ZN7TwoWire5writeEPKhj+0x44>
    27fc:	c6 2f       	mov	r28, r22
    27fe:	d7 2f       	mov	r29, r23
    2800:	6e 01       	movw	r12, r28
    2802:	c4 0e       	add	r12, r20
    2804:	d5 1e       	adc	r13, r21
    2806:	cc 15       	cp	r28, r12
    2808:	dd 05       	cpc	r29, r13
    280a:	71 f0       	breq	.+28     	; 0x2828 <_ZN7TwoWire5writeEPKhj+0x4c>
    280c:	69 91       	ld	r22, Y+
    280e:	d7 01       	movw	r26, r14
    2810:	ed 91       	ld	r30, X+
    2812:	fc 91       	ld	r31, X
    2814:	01 90       	ld	r0, Z+
    2816:	f0 81       	ld	r31, Z
    2818:	e0 2d       	mov	r30, r0
    281a:	c7 01       	movw	r24, r14
    281c:	09 95       	icall
    281e:	f3 cf       	rjmp	.-26     	; 0x2806 <_ZN7TwoWire5writeEPKhj+0x2a>
    2820:	64 2f       	mov	r22, r20
    2822:	82 2f       	mov	r24, r18
    2824:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <twi_transmit>
    2828:	c8 01       	movw	r24, r16
    282a:	df 91       	pop	r29
    282c:	cf 91       	pop	r28
    282e:	1f 91       	pop	r17
    2830:	0f 91       	pop	r16
    2832:	ff 90       	pop	r15
    2834:	ef 90       	pop	r14
    2836:	df 90       	pop	r13
    2838:	cf 90       	pop	r12
    283a:	08 95       	ret

0000283c <_ZN7TwoWire5writeEh>:
    283c:	cf 93       	push	r28
    283e:	df 93       	push	r29
    2840:	1f 92       	push	r1
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
    2846:	69 83       	std	Y+1, r22	; 0x01
    2848:	20 91 7d 02 	lds	r18, 0x027D	; 0x80027d <_ZN7TwoWire12transmittingE>
    284c:	22 23       	and	r18, r18
    284e:	d1 f0       	breq	.+52     	; 0x2884 <_ZN7TwoWire5writeEh+0x48>
    2850:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <_ZN7TwoWire14txBufferLengthE>
    2854:	20 32       	cpi	r18, 0x20	; 32
    2856:	40 f0       	brcs	.+16     	; 0x2868 <_ZN7TwoWire5writeEh+0x2c>
    2858:	21 e0       	ldi	r18, 0x01	; 1
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	fc 01       	movw	r30, r24
    285e:	33 83       	std	Z+3, r19	; 0x03
    2860:	22 83       	std	Z+2, r18	; 0x02
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	15 c0       	rjmp	.+42     	; 0x2892 <_ZN7TwoWire5writeEh+0x56>
    2868:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <_ZN7TwoWire13txBufferIndexE>
    286c:	e8 2f       	mov	r30, r24
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	e0 58       	subi	r30, 0x80	; 128
    2872:	fd 4f       	sbci	r31, 0xFD	; 253
    2874:	99 81       	ldd	r25, Y+1	; 0x01
    2876:	90 83       	st	Z, r25
    2878:	8f 5f       	subi	r24, 0xFF	; 255
    287a:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <_ZN7TwoWire13txBufferIndexE>
    287e:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <_ZN7TwoWire14txBufferLengthE>
    2882:	05 c0       	rjmp	.+10     	; 0x288e <_ZN7TwoWire5writeEh+0x52>
    2884:	61 e0       	ldi	r22, 0x01	; 1
    2886:	ce 01       	movw	r24, r28
    2888:	01 96       	adiw	r24, 0x01	; 1
    288a:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <twi_transmit>
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	0f 90       	pop	r0
    2894:	df 91       	pop	r29
    2896:	cf 91       	pop	r28
    2898:	08 95       	ret

0000289a <_ZN7TwoWireC1Ev>:
    289a:	fc 01       	movw	r30, r24
    289c:	13 82       	std	Z+3, r1	; 0x03
    289e:	12 82       	std	Z+2, r1	; 0x02
    28a0:	88 ee       	ldi	r24, 0xE8	; 232
    28a2:	93 e0       	ldi	r25, 0x03	; 3
    28a4:	a0 e0       	ldi	r26, 0x00	; 0
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	84 83       	std	Z+4, r24	; 0x04
    28aa:	95 83       	std	Z+5, r25	; 0x05
    28ac:	a6 83       	std	Z+6, r26	; 0x06
    28ae:	b7 83       	std	Z+7, r27	; 0x07
    28b0:	8d e3       	ldi	r24, 0x3D	; 61
    28b2:	91 e0       	ldi	r25, 0x01	; 1
    28b4:	91 83       	std	Z+1, r25	; 0x01
    28b6:	80 83       	st	Z, r24
    28b8:	08 95       	ret

000028ba <_ZN7TwoWire5beginEv>:
    28ba:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <_ZN7TwoWire13rxBufferIndexE>
    28be:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <_ZN7TwoWire14rxBufferLengthE>
    28c2:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <_ZN7TwoWire13txBufferIndexE>
    28c6:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <_ZN7TwoWire14txBufferLengthE>
    28ca:	0c 94 7e 16 	jmp	0x2cfc	; 0x2cfc <twi_init>

000028ce <_ZN7TwoWire8setClockEm>:
    28ce:	cb 01       	movw	r24, r22
    28d0:	ba 01       	movw	r22, r20
    28d2:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <twi_setFrequency>

000028d6 <_ZN7TwoWire17beginTransmissionEh>:
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <_ZN7TwoWire12transmittingE>
    28dc:	60 93 a0 02 	sts	0x02A0, r22	; 0x8002a0 <_ZN7TwoWire9txAddressE>
    28e0:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <_ZN7TwoWire13txBufferIndexE>
    28e4:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <_ZN7TwoWire14txBufferLengthE>
    28e8:	08 95       	ret

000028ea <_ZN7TwoWire15endTransmissionEh>:
    28ea:	0f 93       	push	r16
    28ec:	06 2f       	mov	r16, r22
    28ee:	21 e0       	ldi	r18, 0x01	; 1
    28f0:	40 91 7e 02 	lds	r20, 0x027E	; 0x80027e <_ZN7TwoWire14txBufferLengthE>
    28f4:	60 e8       	ldi	r22, 0x80	; 128
    28f6:	72 e0       	ldi	r23, 0x02	; 2
    28f8:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <_ZN7TwoWire9txAddressE>
    28fc:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <twi_writeTo>
    2900:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <_ZN7TwoWire13txBufferIndexE>
    2904:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <_ZN7TwoWire14txBufferLengthE>
    2908:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <_ZN7TwoWire12transmittingE>
    290c:	0f 91       	pop	r16
    290e:	08 95       	ret

00002910 <_ZN7TwoWire11requestFromEhhmhh>:
    2910:	4f 92       	push	r4
    2912:	5f 92       	push	r5
    2914:	6f 92       	push	r6
    2916:	7f 92       	push	r7
    2918:	af 92       	push	r10
    291a:	bf 92       	push	r11
    291c:	cf 92       	push	r12
    291e:	ef 92       	push	r14
    2920:	ff 92       	push	r15
    2922:	0f 93       	push	r16
    2924:	1f 93       	push	r17
    2926:	cf 93       	push	r28
    2928:	df 93       	push	r29
    292a:	5c 01       	movw	r10, r24
    292c:	f6 2e       	mov	r15, r22
    292e:	d4 2f       	mov	r29, r20
    2930:	28 01       	movw	r4, r16
    2932:	39 01       	movw	r6, r18
    2934:	ee 20       	and	r14, r14
    2936:	21 f1       	breq	.+72     	; 0x2980 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2938:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <_ZN7TwoWire17beginTransmissionEh>
    293c:	ce 2d       	mov	r28, r14
    293e:	c4 30       	cpi	r28, 0x04	; 4
    2940:	08 f0       	brcs	.+2      	; 0x2944 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2942:	c3 e0       	ldi	r28, 0x03	; 3
    2944:	c1 50       	subi	r28, 0x01	; 1
    2946:	c0 f0       	brcs	.+48     	; 0x2978 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2948:	d5 01       	movw	r26, r10
    294a:	ed 91       	ld	r30, X+
    294c:	fc 91       	ld	r31, X
    294e:	b8 e0       	ldi	r27, 0x08	; 8
    2950:	cb 9f       	mul	r28, r27
    2952:	c0 01       	movw	r24, r0
    2954:	11 24       	eor	r1, r1
    2956:	a3 01       	movw	r20, r6
    2958:	92 01       	movw	r18, r4
    295a:	04 c0       	rjmp	.+8      	; 0x2964 <_ZN7TwoWire11requestFromEhhmhh+0x54>
    295c:	56 95       	lsr	r21
    295e:	47 95       	ror	r20
    2960:	37 95       	ror	r19
    2962:	27 95       	ror	r18
    2964:	8a 95       	dec	r24
    2966:	d2 f7       	brpl	.-12     	; 0x295c <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    2968:	ca 01       	movw	r24, r20
    296a:	b9 01       	movw	r22, r18
    296c:	01 90       	ld	r0, Z+
    296e:	f0 81       	ld	r31, Z
    2970:	e0 2d       	mov	r30, r0
    2972:	c5 01       	movw	r24, r10
    2974:	09 95       	icall
    2976:	e6 cf       	rjmp	.-52     	; 0x2944 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2978:	60 e0       	ldi	r22, 0x00	; 0
    297a:	c5 01       	movw	r24, r10
    297c:	0e 94 75 14 	call	0x28ea	; 0x28ea <_ZN7TwoWire15endTransmissionEh>
    2980:	4d 2f       	mov	r20, r29
    2982:	d1 32       	cpi	r29, 0x21	; 33
    2984:	08 f0       	brcs	.+2      	; 0x2988 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2986:	40 e2       	ldi	r20, 0x20	; 32
    2988:	2c 2d       	mov	r18, r12
    298a:	63 ea       	ldi	r22, 0xA3	; 163
    298c:	72 e0       	ldi	r23, 0x02	; 2
    298e:	8f 2d       	mov	r24, r15
    2990:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <twi_readFrom>
    2994:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <_ZN7TwoWire13rxBufferIndexE>
    2998:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <_ZN7TwoWire14rxBufferLengthE>
    299c:	df 91       	pop	r29
    299e:	cf 91       	pop	r28
    29a0:	1f 91       	pop	r17
    29a2:	0f 91       	pop	r16
    29a4:	ff 90       	pop	r15
    29a6:	ef 90       	pop	r14
    29a8:	cf 90       	pop	r12
    29aa:	bf 90       	pop	r11
    29ac:	af 90       	pop	r10
    29ae:	7f 90       	pop	r7
    29b0:	6f 90       	pop	r6
    29b2:	5f 90       	pop	r5
    29b4:	4f 90       	pop	r4
    29b6:	08 95       	ret

000029b8 <_ZN7TwoWire11requestFromEhhh>:
    29b8:	cf 92       	push	r12
    29ba:	ef 92       	push	r14
    29bc:	0f 93       	push	r16
    29be:	1f 93       	push	r17
    29c0:	c2 2e       	mov	r12, r18
    29c2:	e1 2c       	mov	r14, r1
    29c4:	00 e0       	ldi	r16, 0x00	; 0
    29c6:	10 e0       	ldi	r17, 0x00	; 0
    29c8:	98 01       	movw	r18, r16
    29ca:	0e 94 88 14 	call	0x2910	; 0x2910 <_ZN7TwoWire11requestFromEhhmhh>
    29ce:	1f 91       	pop	r17
    29d0:	0f 91       	pop	r16
    29d2:	ef 90       	pop	r14
    29d4:	cf 90       	pop	r12
    29d6:	08 95       	ret

000029d8 <_ZN7TwoWire11requestFromEhh>:
    29d8:	21 e0       	ldi	r18, 0x01	; 1
    29da:	0c 94 dc 14 	jmp	0x29b8	; 0x29b8 <_ZN7TwoWire11requestFromEhhh>

000029de <_ZN7TwoWire15endTransmissionEv>:
    29de:	61 e0       	ldi	r22, 0x01	; 1
    29e0:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <_ZN7TwoWire15endTransmissionEh>

000029e4 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    29e4:	81 e7       	ldi	r24, 0x71	; 113
    29e6:	92 e0       	ldi	r25, 0x02	; 2
    29e8:	0c 94 4d 14 	jmp	0x289a	; 0x289a <_ZN7TwoWireC1Ev>

000029ec <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    29ec:	1f 92       	push	r1
    29ee:	0f 92       	push	r0
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	0f 92       	push	r0
    29f4:	11 24       	eor	r1, r1
    29f6:	2f 93       	push	r18
    29f8:	3f 93       	push	r19
    29fa:	8f 93       	push	r24
    29fc:	9f 93       	push	r25
    29fe:	af 93       	push	r26
    2a00:	bf 93       	push	r27
    2a02:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <timer0_millis>
    2a06:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <timer0_millis+0x1>
    2a0a:	a0 91 c6 02 	lds	r26, 0x02C6	; 0x8002c6 <timer0_millis+0x2>
    2a0e:	b0 91 c7 02 	lds	r27, 0x02C7	; 0x8002c7 <timer0_millis+0x3>
    2a12:	30 91 c3 02 	lds	r19, 0x02C3	; 0x8002c3 <timer0_fract>
    2a16:	23 e0       	ldi	r18, 0x03	; 3
    2a18:	23 0f       	add	r18, r19
    2a1a:	2d 37       	cpi	r18, 0x7D	; 125
    2a1c:	20 f4       	brcc	.+8      	; 0x2a26 <__vector_16+0x3a>
    2a1e:	01 96       	adiw	r24, 0x01	; 1
    2a20:	a1 1d       	adc	r26, r1
    2a22:	b1 1d       	adc	r27, r1
    2a24:	05 c0       	rjmp	.+10     	; 0x2a30 <__vector_16+0x44>
    2a26:	26 e8       	ldi	r18, 0x86	; 134
    2a28:	23 0f       	add	r18, r19
    2a2a:	02 96       	adiw	r24, 0x02	; 2
    2a2c:	a1 1d       	adc	r26, r1
    2a2e:	b1 1d       	adc	r27, r1
    2a30:	20 93 c3 02 	sts	0x02C3, r18	; 0x8002c3 <timer0_fract>
    2a34:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <timer0_millis>
    2a38:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <timer0_millis+0x1>
    2a3c:	a0 93 c6 02 	sts	0x02C6, r26	; 0x8002c6 <timer0_millis+0x2>
    2a40:	b0 93 c7 02 	sts	0x02C7, r27	; 0x8002c7 <timer0_millis+0x3>
    2a44:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <timer0_overflow_count>
    2a48:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <timer0_overflow_count+0x1>
    2a4c:	a0 91 ca 02 	lds	r26, 0x02CA	; 0x8002ca <timer0_overflow_count+0x2>
    2a50:	b0 91 cb 02 	lds	r27, 0x02CB	; 0x8002cb <timer0_overflow_count+0x3>
    2a54:	01 96       	adiw	r24, 0x01	; 1
    2a56:	a1 1d       	adc	r26, r1
    2a58:	b1 1d       	adc	r27, r1
    2a5a:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <timer0_overflow_count>
    2a5e:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <timer0_overflow_count+0x1>
    2a62:	a0 93 ca 02 	sts	0x02CA, r26	; 0x8002ca <timer0_overflow_count+0x2>
    2a66:	b0 93 cb 02 	sts	0x02CB, r27	; 0x8002cb <timer0_overflow_count+0x3>
    2a6a:	bf 91       	pop	r27
    2a6c:	af 91       	pop	r26
    2a6e:	9f 91       	pop	r25
    2a70:	8f 91       	pop	r24
    2a72:	3f 91       	pop	r19
    2a74:	2f 91       	pop	r18
    2a76:	0f 90       	pop	r0
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	0f 90       	pop	r0
    2a7c:	1f 90       	pop	r1
    2a7e:	18 95       	reti

00002a80 <millis>:
    2a80:	2f b7       	in	r18, 0x3f	; 63
    2a82:	f8 94       	cli
    2a84:	60 91 c4 02 	lds	r22, 0x02C4	; 0x8002c4 <timer0_millis>
    2a88:	70 91 c5 02 	lds	r23, 0x02C5	; 0x8002c5 <timer0_millis+0x1>
    2a8c:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <timer0_millis+0x2>
    2a90:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <timer0_millis+0x3>
    2a94:	2f bf       	out	0x3f, r18	; 63
    2a96:	08 95       	ret

00002a98 <micros>:
    2a98:	3f b7       	in	r19, 0x3f	; 63
    2a9a:	f8 94       	cli
    2a9c:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <timer0_overflow_count>
    2aa0:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <timer0_overflow_count+0x1>
    2aa4:	a0 91 ca 02 	lds	r26, 0x02CA	; 0x8002ca <timer0_overflow_count+0x2>
    2aa8:	b0 91 cb 02 	lds	r27, 0x02CB	; 0x8002cb <timer0_overflow_count+0x3>
    2aac:	26 b5       	in	r18, 0x26	; 38
    2aae:	a8 9b       	sbis	0x15, 0	; 21
    2ab0:	05 c0       	rjmp	.+10     	; 0x2abc <micros+0x24>
    2ab2:	2f 3f       	cpi	r18, 0xFF	; 255
    2ab4:	19 f0       	breq	.+6      	; 0x2abc <micros+0x24>
    2ab6:	01 96       	adiw	r24, 0x01	; 1
    2ab8:	a1 1d       	adc	r26, r1
    2aba:	b1 1d       	adc	r27, r1
    2abc:	3f bf       	out	0x3f, r19	; 63
    2abe:	ba 2f       	mov	r27, r26
    2ac0:	a9 2f       	mov	r26, r25
    2ac2:	98 2f       	mov	r25, r24
    2ac4:	88 27       	eor	r24, r24
    2ac6:	82 0f       	add	r24, r18
    2ac8:	91 1d       	adc	r25, r1
    2aca:	a1 1d       	adc	r26, r1
    2acc:	b1 1d       	adc	r27, r1
    2ace:	bc 01       	movw	r22, r24
    2ad0:	cd 01       	movw	r24, r26
    2ad2:	42 e0       	ldi	r20, 0x02	; 2
    2ad4:	66 0f       	add	r22, r22
    2ad6:	77 1f       	adc	r23, r23
    2ad8:	88 1f       	adc	r24, r24
    2ada:	99 1f       	adc	r25, r25
    2adc:	4a 95       	dec	r20
    2ade:	d1 f7       	brne	.-12     	; 0x2ad4 <micros+0x3c>
    2ae0:	08 95       	ret

00002ae2 <delay>:
    2ae2:	8f 92       	push	r8
    2ae4:	9f 92       	push	r9
    2ae6:	af 92       	push	r10
    2ae8:	bf 92       	push	r11
    2aea:	cf 92       	push	r12
    2aec:	df 92       	push	r13
    2aee:	ef 92       	push	r14
    2af0:	ff 92       	push	r15
    2af2:	6b 01       	movw	r12, r22
    2af4:	7c 01       	movw	r14, r24
    2af6:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <micros>
    2afa:	4b 01       	movw	r8, r22
    2afc:	5c 01       	movw	r10, r24
    2afe:	c1 14       	cp	r12, r1
    2b00:	d1 04       	cpc	r13, r1
    2b02:	e1 04       	cpc	r14, r1
    2b04:	f1 04       	cpc	r15, r1
    2b06:	01 f1       	breq	.+64     	; 0x2b48 <delay+0x66>
    2b08:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <yield>
    2b0c:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <micros>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	88 19       	sub	r24, r8
    2b16:	99 09       	sbc	r25, r9
    2b18:	aa 09       	sbc	r26, r10
    2b1a:	bb 09       	sbc	r27, r11
    2b1c:	88 3e       	cpi	r24, 0xE8	; 232
    2b1e:	93 40       	sbci	r25, 0x03	; 3
    2b20:	a1 05       	cpc	r26, r1
    2b22:	b1 05       	cpc	r27, r1
    2b24:	60 f3       	brcs	.-40     	; 0x2afe <delay+0x1c>
    2b26:	21 e0       	ldi	r18, 0x01	; 1
    2b28:	c2 1a       	sub	r12, r18
    2b2a:	d1 08       	sbc	r13, r1
    2b2c:	e1 08       	sbc	r14, r1
    2b2e:	f1 08       	sbc	r15, r1
    2b30:	88 ee       	ldi	r24, 0xE8	; 232
    2b32:	88 0e       	add	r8, r24
    2b34:	83 e0       	ldi	r24, 0x03	; 3
    2b36:	98 1e       	adc	r9, r24
    2b38:	a1 1c       	adc	r10, r1
    2b3a:	b1 1c       	adc	r11, r1
    2b3c:	c1 14       	cp	r12, r1
    2b3e:	d1 04       	cpc	r13, r1
    2b40:	e1 04       	cpc	r14, r1
    2b42:	f1 04       	cpc	r15, r1
    2b44:	19 f7       	brne	.-58     	; 0x2b0c <delay+0x2a>
    2b46:	db cf       	rjmp	.-74     	; 0x2afe <delay+0x1c>
    2b48:	ff 90       	pop	r15
    2b4a:	ef 90       	pop	r14
    2b4c:	df 90       	pop	r13
    2b4e:	cf 90       	pop	r12
    2b50:	bf 90       	pop	r11
    2b52:	af 90       	pop	r10
    2b54:	9f 90       	pop	r9
    2b56:	8f 90       	pop	r8
    2b58:	08 95       	ret

00002b5a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2b5a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2b5c:	84 b5       	in	r24, 0x24	; 36
    2b5e:	82 60       	ori	r24, 0x02	; 2
    2b60:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2b62:	84 b5       	in	r24, 0x24	; 36
    2b64:	81 60       	ori	r24, 0x01	; 1
    2b66:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2b68:	85 b5       	in	r24, 0x25	; 37
    2b6a:	82 60       	ori	r24, 0x02	; 2
    2b6c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2b6e:	85 b5       	in	r24, 0x25	; 37
    2b70:	81 60       	ori	r24, 0x01	; 1
    2b72:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2b74:	ee e6       	ldi	r30, 0x6E	; 110
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	80 81       	ld	r24, Z
    2b7a:	81 60       	ori	r24, 0x01	; 1
    2b7c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2b7e:	e1 e8       	ldi	r30, 0x81	; 129
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2b84:	80 81       	ld	r24, Z
    2b86:	82 60       	ori	r24, 0x02	; 2
    2b88:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2b8a:	80 81       	ld	r24, Z
    2b8c:	81 60       	ori	r24, 0x01	; 1
    2b8e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2b90:	e0 e8       	ldi	r30, 0x80	; 128
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	80 81       	ld	r24, Z
    2b96:	81 60       	ori	r24, 0x01	; 1
    2b98:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2b9a:	e1 eb       	ldi	r30, 0xB1	; 177
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	80 81       	ld	r24, Z
    2ba0:	84 60       	ori	r24, 0x04	; 4
    2ba2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2ba4:	e0 eb       	ldi	r30, 0xB0	; 176
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	80 81       	ld	r24, Z
    2baa:	81 60       	ori	r24, 0x01	; 1
    2bac:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2bae:	ea e7       	ldi	r30, 0x7A	; 122
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	80 81       	ld	r24, Z
    2bb4:	84 60       	ori	r24, 0x04	; 4
    2bb6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2bb8:	80 81       	ld	r24, Z
    2bba:	82 60       	ori	r24, 0x02	; 2
    2bbc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2bbe:	80 81       	ld	r24, Z
    2bc0:	81 60       	ori	r24, 0x01	; 1
    2bc2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2bc4:	80 81       	ld	r24, Z
    2bc6:	80 68       	ori	r24, 0x80	; 128
    2bc8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2bca:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2bce:	08 95       	ret

00002bd0 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2bd0:	83 30       	cpi	r24, 0x03	; 3
    2bd2:	81 f0       	breq	.+32     	; 0x2bf4 <turnOffPWM+0x24>
    2bd4:	28 f4       	brcc	.+10     	; 0x2be0 <turnOffPWM+0x10>
    2bd6:	81 30       	cpi	r24, 0x01	; 1
    2bd8:	99 f0       	breq	.+38     	; 0x2c00 <turnOffPWM+0x30>
    2bda:	82 30       	cpi	r24, 0x02	; 2
    2bdc:	a1 f0       	breq	.+40     	; 0x2c06 <turnOffPWM+0x36>
    2bde:	08 95       	ret
    2be0:	87 30       	cpi	r24, 0x07	; 7
    2be2:	a9 f0       	breq	.+42     	; 0x2c0e <turnOffPWM+0x3e>
    2be4:	88 30       	cpi	r24, 0x08	; 8
    2be6:	b9 f0       	breq	.+46     	; 0x2c16 <turnOffPWM+0x46>
    2be8:	84 30       	cpi	r24, 0x04	; 4
    2bea:	d1 f4       	brne	.+52     	; 0x2c20 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2bec:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2bf0:	8f 7d       	andi	r24, 0xDF	; 223
    2bf2:	03 c0       	rjmp	.+6      	; 0x2bfa <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2bf4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2bf8:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2bfa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2bfe:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2c00:	84 b5       	in	r24, 0x24	; 36
    2c02:	8f 77       	andi	r24, 0x7F	; 127
    2c04:	02 c0       	rjmp	.+4      	; 0x2c0a <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2c06:	84 b5       	in	r24, 0x24	; 36
    2c08:	8f 7d       	andi	r24, 0xDF	; 223
    2c0a:	84 bd       	out	0x24, r24	; 36
    2c0c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2c0e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2c12:	8f 77       	andi	r24, 0x7F	; 127
    2c14:	03 c0       	rjmp	.+6      	; 0x2c1c <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2c16:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2c1a:	8f 7d       	andi	r24, 0xDF	; 223
    2c1c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2c20:	08 95       	ret

00002c22 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2c22:	cf 93       	push	r28
    2c24:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	fc 01       	movw	r30, r24
    2c2a:	ec 5d       	subi	r30, 0xDC	; 220
    2c2c:	fc 4e       	sbci	r31, 0xEC	; 236
    2c2e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2c30:	fc 01       	movw	r30, r24
    2c32:	e8 5c       	subi	r30, 0xC8	; 200
    2c34:	fc 4e       	sbci	r31, 0xEC	; 236
    2c36:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2c38:	88 23       	and	r24, r24
    2c3a:	61 f1       	breq	.+88     	; 0x2c94 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	88 0f       	add	r24, r24
    2c40:	99 1f       	adc	r25, r25
    2c42:	fc 01       	movw	r30, r24
    2c44:	ea 5a       	subi	r30, 0xAA	; 170
    2c46:	fc 4e       	sbci	r31, 0xEC	; 236
    2c48:	c5 91       	lpm	r28, Z+
    2c4a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2c4c:	fc 01       	movw	r30, r24
    2c4e:	e4 5b       	subi	r30, 0xB4	; 180
    2c50:	fc 4e       	sbci	r31, 0xEC	; 236
    2c52:	a5 91       	lpm	r26, Z+
    2c54:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2c56:	61 11       	cpse	r22, r1
    2c58:	09 c0       	rjmp	.+18     	; 0x2c6c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2c5a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2c5c:	f8 94       	cli
		*reg &= ~bit;
    2c5e:	88 81       	ld	r24, Y
    2c60:	20 95       	com	r18
    2c62:	82 23       	and	r24, r18
    2c64:	88 83       	st	Y, r24
		*out &= ~bit;
    2c66:	ec 91       	ld	r30, X
    2c68:	2e 23       	and	r18, r30
    2c6a:	0b c0       	rjmp	.+22     	; 0x2c82 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2c6c:	62 30       	cpi	r22, 0x02	; 2
    2c6e:	61 f4       	brne	.+24     	; 0x2c88 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2c70:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2c72:	f8 94       	cli
		*reg &= ~bit;
    2c74:	38 81       	ld	r19, Y
    2c76:	82 2f       	mov	r24, r18
    2c78:	80 95       	com	r24
    2c7a:	83 23       	and	r24, r19
    2c7c:	88 83       	st	Y, r24
		*out |= bit;
    2c7e:	ec 91       	ld	r30, X
    2c80:	2e 2b       	or	r18, r30
    2c82:	2c 93       	st	X, r18
		SREG = oldSREG;
    2c84:	9f bf       	out	0x3f, r25	; 63
    2c86:	06 c0       	rjmp	.+12     	; 0x2c94 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2c88:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2c8a:	f8 94       	cli
		*reg |= bit;
    2c8c:	e8 81       	ld	r30, Y
    2c8e:	2e 2b       	or	r18, r30
    2c90:	28 83       	st	Y, r18
		SREG = oldSREG;
    2c92:	8f bf       	out	0x3f, r24	; 63
	}
}
    2c94:	df 91       	pop	r29
    2c96:	cf 91       	pop	r28
    2c98:	08 95       	ret

00002c9a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2c9a:	1f 93       	push	r17
    2c9c:	cf 93       	push	r28
    2c9e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2ca0:	28 2f       	mov	r18, r24
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	f9 01       	movw	r30, r18
    2ca6:	e0 5f       	subi	r30, 0xF0	; 240
    2ca8:	fc 4e       	sbci	r31, 0xEC	; 236
    2caa:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2cac:	f9 01       	movw	r30, r18
    2cae:	ec 5d       	subi	r30, 0xDC	; 220
    2cb0:	fc 4e       	sbci	r31, 0xEC	; 236
    2cb2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2cb4:	f9 01       	movw	r30, r18
    2cb6:	e8 5c       	subi	r30, 0xC8	; 200
    2cb8:	fc 4e       	sbci	r31, 0xEC	; 236
    2cba:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2cbc:	cc 23       	and	r28, r28
    2cbe:	c9 f0       	breq	.+50     	; 0x2cf2 <digitalWrite+0x58>
    2cc0:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2cc2:	81 11       	cpse	r24, r1
    2cc4:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <turnOffPWM>

	out = portOutputRegister(port);
    2cc8:	ec 2f       	mov	r30, r28
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	ee 0f       	add	r30, r30
    2cce:	ff 1f       	adc	r31, r31
    2cd0:	e4 5b       	subi	r30, 0xB4	; 180
    2cd2:	fc 4e       	sbci	r31, 0xEC	; 236
    2cd4:	a5 91       	lpm	r26, Z+
    2cd6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2cd8:	8f b7       	in	r24, 0x3f	; 63
	cli();
    2cda:	f8 94       	cli

	if (val == LOW) {
    2cdc:	11 11       	cpse	r17, r1
    2cde:	05 c0       	rjmp	.+10     	; 0x2cea <digitalWrite+0x50>
		*out &= ~bit;
    2ce0:	9c 91       	ld	r25, X
    2ce2:	ed 2f       	mov	r30, r29
    2ce4:	e0 95       	com	r30
    2ce6:	e9 23       	and	r30, r25
    2ce8:	02 c0       	rjmp	.+4      	; 0x2cee <digitalWrite+0x54>
	} else {
		*out |= bit;
    2cea:	ec 91       	ld	r30, X
    2cec:	ed 2b       	or	r30, r29
    2cee:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    2cf0:	8f bf       	out	0x3f, r24	; 63
}
    2cf2:	df 91       	pop	r29
    2cf4:	cf 91       	pop	r28
    2cf6:	1f 91       	pop	r17
    2cf8:	08 95       	ret

00002cfa <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2cfa:	08 95       	ret

00002cfc <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2cfc:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <twi_state>
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <twi_sendStop>
    2d06:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <twi_inRepStart>
    2d0a:	61 e0       	ldi	r22, 0x01	; 1
    2d0c:	82 e1       	ldi	r24, 0x12	; 18
    2d0e:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <digitalWrite>
    2d12:	61 e0       	ldi	r22, 0x01	; 1
    2d14:	83 e1       	ldi	r24, 0x13	; 19
    2d16:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <digitalWrite>
    2d1a:	e9 eb       	ldi	r30, 0xB9	; 185
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	8e 7f       	andi	r24, 0xFE	; 254
    2d22:	80 83       	st	Z, r24
    2d24:	80 81       	ld	r24, Z
    2d26:	8d 7f       	andi	r24, 0xFD	; 253
    2d28:	80 83       	st	Z, r24
    2d2a:	88 e4       	ldi	r24, 0x48	; 72
    2d2c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2d30:	85 e4       	ldi	r24, 0x45	; 69
    2d32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2d36:	08 95       	ret

00002d38 <twi_setFrequency>:
    2d38:	9b 01       	movw	r18, r22
    2d3a:	ac 01       	movw	r20, r24
    2d3c:	60 e0       	ldi	r22, 0x00	; 0
    2d3e:	74 e2       	ldi	r23, 0x24	; 36
    2d40:	84 ef       	ldi	r24, 0xF4	; 244
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__udivmodsi4>
    2d48:	da 01       	movw	r26, r20
    2d4a:	c9 01       	movw	r24, r18
    2d4c:	40 97       	sbiw	r24, 0x10	; 16
    2d4e:	a1 09       	sbc	r26, r1
    2d50:	b1 09       	sbc	r27, r1
    2d52:	b6 95       	lsr	r27
    2d54:	a7 95       	ror	r26
    2d56:	97 95       	ror	r25
    2d58:	87 95       	ror	r24
    2d5a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2d5e:	08 95       	ret

00002d60 <twi_readFrom>:
    2d60:	41 32       	cpi	r20, 0x21	; 33
    2d62:	08 f0       	brcs	.+2      	; 0x2d66 <twi_readFrom+0x6>
    2d64:	43 c0       	rjmp	.+134    	; 0x2dec <twi_readFrom+0x8c>
    2d66:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <twi_state>
    2d6a:	91 11       	cpse	r25, r1
    2d6c:	fc cf       	rjmp	.-8      	; 0x2d66 <twi_readFrom+0x6>
    2d6e:	91 e0       	ldi	r25, 0x01	; 1
    2d70:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <twi_state>
    2d74:	20 93 37 03 	sts	0x0337, r18	; 0x800337 <twi_sendStop>
    2d78:	2f ef       	ldi	r18, 0xFF	; 255
    2d7a:	20 93 cc 02 	sts	0x02CC, r18	; 0x8002cc <twi_error>
    2d7e:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <twi_masterBufferIndex>
    2d82:	24 0f       	add	r18, r20
    2d84:	20 93 10 03 	sts	0x0310, r18	; 0x800310 <twi_masterBufferLength>
    2d88:	90 93 38 03 	sts	0x0338, r25	; 0x800338 <twi_slarw>
    2d8c:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <twi_slarw>
    2d90:	88 0f       	add	r24, r24
    2d92:	89 2b       	or	r24, r25
    2d94:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <twi_slarw>
    2d98:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <twi_inRepStart>
    2d9c:	81 30       	cpi	r24, 0x01	; 1
    2d9e:	61 f4       	brne	.+24     	; 0x2db8 <twi_readFrom+0x58>
    2da0:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <twi_inRepStart>
    2da4:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <twi_slarw>
    2da8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2dac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2db0:	83 fd       	sbrc	r24, 3
    2db2:	f8 cf       	rjmp	.-16     	; 0x2da4 <twi_readFrom+0x44>
    2db4:	85 ec       	ldi	r24, 0xC5	; 197
    2db6:	01 c0       	rjmp	.+2      	; 0x2dba <twi_readFrom+0x5a>
    2db8:	85 ee       	ldi	r24, 0xE5	; 229
    2dba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2dbe:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <twi_state>
    2dc2:	81 30       	cpi	r24, 0x01	; 1
    2dc4:	e1 f3       	breq	.-8      	; 0x2dbe <twi_readFrom+0x5e>
    2dc6:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <twi_masterBufferIndex>
    2dca:	84 17       	cp	r24, r20
    2dcc:	10 f4       	brcc	.+4      	; 0x2dd2 <twi_readFrom+0x72>
    2dce:	40 91 11 03 	lds	r20, 0x0311	; 0x800311 <twi_masterBufferIndex>
    2dd2:	22 e1       	ldi	r18, 0x12	; 18
    2dd4:	33 e0       	ldi	r19, 0x03	; 3
    2dd6:	fb 01       	movw	r30, r22
    2dd8:	d9 01       	movw	r26, r18
    2dda:	8a 2f       	mov	r24, r26
    2ddc:	82 1b       	sub	r24, r18
    2dde:	84 17       	cp	r24, r20
    2de0:	18 f4       	brcc	.+6      	; 0x2de8 <twi_readFrom+0x88>
    2de2:	8d 91       	ld	r24, X+
    2de4:	81 93       	st	Z+, r24
    2de6:	f9 cf       	rjmp	.-14     	; 0x2dda <twi_readFrom+0x7a>
    2de8:	84 2f       	mov	r24, r20
    2dea:	08 95       	ret
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	08 95       	ret

00002df0 <twi_writeTo>:
    2df0:	0f 93       	push	r16
    2df2:	41 32       	cpi	r20, 0x21	; 33
    2df4:	08 f0       	brcs	.+2      	; 0x2df8 <twi_writeTo+0x8>
    2df6:	4a c0       	rjmp	.+148    	; 0x2e8c <twi_writeTo+0x9c>
    2df8:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <twi_state>
    2dfc:	91 11       	cpse	r25, r1
    2dfe:	fc cf       	rjmp	.-8      	; 0x2df8 <twi_writeTo+0x8>
    2e00:	32 e0       	ldi	r19, 0x02	; 2
    2e02:	30 93 39 03 	sts	0x0339, r19	; 0x800339 <twi_state>
    2e06:	00 93 37 03 	sts	0x0337, r16	; 0x800337 <twi_sendStop>
    2e0a:	3f ef       	ldi	r19, 0xFF	; 255
    2e0c:	30 93 cc 02 	sts	0x02CC, r19	; 0x8002cc <twi_error>
    2e10:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <twi_masterBufferIndex>
    2e14:	40 93 10 03 	sts	0x0310, r20	; 0x800310 <twi_masterBufferLength>
    2e18:	fb 01       	movw	r30, r22
    2e1a:	62 e1       	ldi	r22, 0x12	; 18
    2e1c:	73 e0       	ldi	r23, 0x03	; 3
    2e1e:	db 01       	movw	r26, r22
    2e20:	3a 2f       	mov	r19, r26
    2e22:	36 1b       	sub	r19, r22
    2e24:	34 17       	cp	r19, r20
    2e26:	18 f4       	brcc	.+6      	; 0x2e2e <twi_writeTo+0x3e>
    2e28:	31 91       	ld	r19, Z+
    2e2a:	3d 93       	st	X+, r19
    2e2c:	f9 cf       	rjmp	.-14     	; 0x2e20 <twi_writeTo+0x30>
    2e2e:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <twi_slarw>
    2e32:	30 91 38 03 	lds	r19, 0x0338	; 0x800338 <twi_slarw>
    2e36:	88 0f       	add	r24, r24
    2e38:	83 2b       	or	r24, r19
    2e3a:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <twi_slarw>
    2e3e:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <twi_inRepStart>
    2e42:	81 30       	cpi	r24, 0x01	; 1
    2e44:	61 f4       	brne	.+24     	; 0x2e5e <twi_writeTo+0x6e>
    2e46:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <twi_inRepStart>
    2e4a:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <twi_slarw>
    2e4e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2e52:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2e56:	83 fd       	sbrc	r24, 3
    2e58:	f8 cf       	rjmp	.-16     	; 0x2e4a <twi_writeTo+0x5a>
    2e5a:	85 ec       	ldi	r24, 0xC5	; 197
    2e5c:	01 c0       	rjmp	.+2      	; 0x2e60 <twi_writeTo+0x70>
    2e5e:	85 ee       	ldi	r24, 0xE5	; 229
    2e60:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2e64:	22 23       	and	r18, r18
    2e66:	21 f0       	breq	.+8      	; 0x2e70 <twi_writeTo+0x80>
    2e68:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <twi_state>
    2e6c:	82 30       	cpi	r24, 0x02	; 2
    2e6e:	d1 f3       	breq	.-12     	; 0x2e64 <twi_writeTo+0x74>
    2e70:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <twi_error>
    2e74:	8f 3f       	cpi	r24, 0xFF	; 255
    2e76:	79 f0       	breq	.+30     	; 0x2e96 <twi_writeTo+0xa6>
    2e78:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <twi_error>
    2e7c:	80 32       	cpi	r24, 0x20	; 32
    2e7e:	41 f0       	breq	.+16     	; 0x2e90 <twi_writeTo+0xa0>
    2e80:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <twi_error>
    2e84:	80 33       	cpi	r24, 0x30	; 48
    2e86:	31 f0       	breq	.+12     	; 0x2e94 <twi_writeTo+0xa4>
    2e88:	94 e0       	ldi	r25, 0x04	; 4
    2e8a:	05 c0       	rjmp	.+10     	; 0x2e96 <twi_writeTo+0xa6>
    2e8c:	91 e0       	ldi	r25, 0x01	; 1
    2e8e:	03 c0       	rjmp	.+6      	; 0x2e96 <twi_writeTo+0xa6>
    2e90:	92 e0       	ldi	r25, 0x02	; 2
    2e92:	01 c0       	rjmp	.+2      	; 0x2e96 <twi_writeTo+0xa6>
    2e94:	93 e0       	ldi	r25, 0x03	; 3
    2e96:	89 2f       	mov	r24, r25
    2e98:	0f 91       	pop	r16
    2e9a:	08 95       	ret

00002e9c <twi_transmit>:
    2e9c:	40 91 ee 02 	lds	r20, 0x02EE	; 0x8002ee <twi_txBufferLength>
    2ea0:	26 2f       	mov	r18, r22
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	24 0f       	add	r18, r20
    2ea6:	31 1d       	adc	r19, r1
    2ea8:	21 32       	cpi	r18, 0x21	; 33
    2eaa:	31 05       	cpc	r19, r1
    2eac:	dc f4       	brge	.+54     	; 0x2ee4 <twi_transmit+0x48>
    2eae:	20 91 39 03 	lds	r18, 0x0339	; 0x800339 <twi_state>
    2eb2:	24 30       	cpi	r18, 0x04	; 4
    2eb4:	c9 f4       	brne	.+50     	; 0x2ee8 <twi_transmit+0x4c>
    2eb6:	fc 01       	movw	r30, r24
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	86 17       	cp	r24, r22
    2ebe:	58 f4       	brcc	.+22     	; 0x2ed6 <twi_transmit+0x3a>
    2ec0:	30 91 ee 02 	lds	r19, 0x02EE	; 0x8002ee <twi_txBufferLength>
    2ec4:	21 91       	ld	r18, Z+
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	a0 51       	subi	r26, 0x10	; 16
    2eca:	bd 4f       	sbci	r27, 0xFD	; 253
    2ecc:	a3 0f       	add	r26, r19
    2ece:	b1 1d       	adc	r27, r1
    2ed0:	2c 93       	st	X, r18
    2ed2:	01 96       	adiw	r24, 0x01	; 1
    2ed4:	f3 cf       	rjmp	.-26     	; 0x2ebc <twi_transmit+0x20>
    2ed6:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <twi_txBufferLength>
    2eda:	68 0f       	add	r22, r24
    2edc:	60 93 ee 02 	sts	0x02EE, r22	; 0x8002ee <twi_txBufferLength>
    2ee0:	80 e0       	ldi	r24, 0x00	; 0
    2ee2:	08 95       	ret
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	08 95       	ret
    2ee8:	82 e0       	ldi	r24, 0x02	; 2
    2eea:	08 95       	ret

00002eec <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2eec:	85 ed       	ldi	r24, 0xD5	; 213
    2eee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2ef2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2ef6:	84 fd       	sbrc	r24, 4
    2ef8:	fc cf       	rjmp	.-8      	; 0x2ef2 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2efa:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <twi_state>
    2efe:	08 95       	ret

00002f00 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2f00:	85 ec       	ldi	r24, 0xC5	; 197
    2f02:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    2f06:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <twi_state>
    2f0a:	08 95       	ret

00002f0c <__vector_24>:
}

ISR(TWI_vect)
{
    2f0c:	1f 92       	push	r1
    2f0e:	0f 92       	push	r0
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	0f 92       	push	r0
    2f14:	11 24       	eor	r1, r1
    2f16:	2f 93       	push	r18
    2f18:	3f 93       	push	r19
    2f1a:	4f 93       	push	r20
    2f1c:	5f 93       	push	r21
    2f1e:	6f 93       	push	r22
    2f20:	7f 93       	push	r23
    2f22:	8f 93       	push	r24
    2f24:	9f 93       	push	r25
    2f26:	af 93       	push	r26
    2f28:	bf 93       	push	r27
    2f2a:	ef 93       	push	r30
    2f2c:	ff 93       	push	r31
  switch(TW_STATUS){
    2f2e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2f32:	88 7f       	andi	r24, 0xF8	; 248
    2f34:	80 36       	cpi	r24, 0x60	; 96
    2f36:	09 f4       	brne	.+2      	; 0x2f3a <__vector_24+0x2e>
    2f38:	9e c0       	rjmp	.+316    	; 0x3076 <__vector_24+0x16a>
    2f3a:	78 f5       	brcc	.+94     	; 0x2f9a <__vector_24+0x8e>
    2f3c:	88 32       	cpi	r24, 0x28	; 40
    2f3e:	09 f4       	brne	.+2      	; 0x2f42 <__vector_24+0x36>
    2f40:	5d c0       	rjmp	.+186    	; 0x2ffc <__vector_24+0xf0>
    2f42:	90 f4       	brcc	.+36     	; 0x2f68 <__vector_24+0x5c>
    2f44:	80 31       	cpi	r24, 0x10	; 16
    2f46:	09 f4       	brne	.+2      	; 0x2f4a <__vector_24+0x3e>
    2f48:	56 c0       	rjmp	.+172    	; 0x2ff6 <__vector_24+0xea>
    2f4a:	38 f4       	brcc	.+14     	; 0x2f5a <__vector_24+0x4e>
    2f4c:	88 23       	and	r24, r24
    2f4e:	09 f4       	brne	.+2      	; 0x2f52 <__vector_24+0x46>
    2f50:	f5 c0       	rjmp	.+490    	; 0x313c <__vector_24+0x230>
    2f52:	88 30       	cpi	r24, 0x08	; 8
    2f54:	09 f4       	brne	.+2      	; 0x2f58 <__vector_24+0x4c>
    2f56:	4f c0       	rjmp	.+158    	; 0x2ff6 <__vector_24+0xea>
    2f58:	f5 c0       	rjmp	.+490    	; 0x3144 <__vector_24+0x238>
    2f5a:	88 31       	cpi	r24, 0x18	; 24
    2f5c:	09 f4       	brne	.+2      	; 0x2f60 <__vector_24+0x54>
    2f5e:	4e c0       	rjmp	.+156    	; 0x2ffc <__vector_24+0xf0>
    2f60:	80 32       	cpi	r24, 0x20	; 32
    2f62:	09 f4       	brne	.+2      	; 0x2f66 <__vector_24+0x5a>
    2f64:	5f c0       	rjmp	.+190    	; 0x3024 <__vector_24+0x118>
    2f66:	ee c0       	rjmp	.+476    	; 0x3144 <__vector_24+0x238>
    2f68:	80 34       	cpi	r24, 0x40	; 64
    2f6a:	09 f4       	brne	.+2      	; 0x2f6e <__vector_24+0x62>
    2f6c:	6a c0       	rjmp	.+212    	; 0x3042 <__vector_24+0x136>
    2f6e:	58 f4       	brcc	.+22     	; 0x2f86 <__vector_24+0x7a>
    2f70:	80 33       	cpi	r24, 0x30	; 48
    2f72:	09 f4       	brne	.+2      	; 0x2f76 <__vector_24+0x6a>
    2f74:	57 c0       	rjmp	.+174    	; 0x3024 <__vector_24+0x118>
    2f76:	88 33       	cpi	r24, 0x38	; 56
    2f78:	09 f0       	breq	.+2      	; 0x2f7c <__vector_24+0x70>
    2f7a:	e4 c0       	rjmp	.+456    	; 0x3144 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2f7c:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <twi_error>
      twi_releaseBus();
    2f80:	0e 94 80 17 	call	0x2f00	; 0x2f00 <twi_releaseBus>
      break;
    2f84:	df c0       	rjmp	.+446    	; 0x3144 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2f86:	80 35       	cpi	r24, 0x50	; 80
    2f88:	09 f4       	brne	.+2      	; 0x2f8c <__vector_24+0x80>
    2f8a:	4f c0       	rjmp	.+158    	; 0x302a <__vector_24+0x11e>
    2f8c:	88 35       	cpi	r24, 0x58	; 88
    2f8e:	09 f4       	brne	.+2      	; 0x2f92 <__vector_24+0x86>
    2f90:	5d c0       	rjmp	.+186    	; 0x304c <__vector_24+0x140>
    2f92:	88 34       	cpi	r24, 0x48	; 72
    2f94:	09 f0       	breq	.+2      	; 0x2f98 <__vector_24+0x8c>
    2f96:	d6 c0       	rjmp	.+428    	; 0x3144 <__vector_24+0x238>
    2f98:	d3 c0       	rjmp	.+422    	; 0x3140 <__vector_24+0x234>
    2f9a:	88 39       	cpi	r24, 0x98	; 152
    2f9c:	09 f4       	brne	.+2      	; 0x2fa0 <__vector_24+0x94>
    2f9e:	c4 c0       	rjmp	.+392    	; 0x3128 <__vector_24+0x21c>
    2fa0:	a8 f4       	brcc	.+42     	; 0x2fcc <__vector_24+0xc0>
    2fa2:	88 37       	cpi	r24, 0x78	; 120
    2fa4:	09 f4       	brne	.+2      	; 0x2fa8 <__vector_24+0x9c>
    2fa6:	67 c0       	rjmp	.+206    	; 0x3076 <__vector_24+0x16a>
    2fa8:	38 f4       	brcc	.+14     	; 0x2fb8 <__vector_24+0xac>
    2faa:	88 36       	cpi	r24, 0x68	; 104
    2fac:	09 f4       	brne	.+2      	; 0x2fb0 <__vector_24+0xa4>
    2fae:	63 c0       	rjmp	.+198    	; 0x3076 <__vector_24+0x16a>
    2fb0:	80 37       	cpi	r24, 0x70	; 112
    2fb2:	09 f4       	brne	.+2      	; 0x2fb6 <__vector_24+0xaa>
    2fb4:	60 c0       	rjmp	.+192    	; 0x3076 <__vector_24+0x16a>
    2fb6:	c6 c0       	rjmp	.+396    	; 0x3144 <__vector_24+0x238>
    2fb8:	88 38       	cpi	r24, 0x88	; 136
    2fba:	09 f4       	brne	.+2      	; 0x2fbe <__vector_24+0xb2>
    2fbc:	b5 c0       	rjmp	.+362    	; 0x3128 <__vector_24+0x21c>
    2fbe:	80 39       	cpi	r24, 0x90	; 144
    2fc0:	09 f4       	brne	.+2      	; 0x2fc4 <__vector_24+0xb8>
    2fc2:	5f c0       	rjmp	.+190    	; 0x3082 <__vector_24+0x176>
    2fc4:	80 38       	cpi	r24, 0x80	; 128
    2fc6:	09 f0       	breq	.+2      	; 0x2fca <__vector_24+0xbe>
    2fc8:	bd c0       	rjmp	.+378    	; 0x3144 <__vector_24+0x238>
    2fca:	5b c0       	rjmp	.+182    	; 0x3082 <__vector_24+0x176>
    2fcc:	80 3b       	cpi	r24, 0xB0	; 176
    2fce:	09 f4       	brne	.+2      	; 0x2fd2 <__vector_24+0xc6>
    2fd0:	83 c0       	rjmp	.+262    	; 0x30d8 <__vector_24+0x1cc>
    2fd2:	38 f4       	brcc	.+14     	; 0x2fe2 <__vector_24+0xd6>
    2fd4:	80 3a       	cpi	r24, 0xA0	; 160
    2fd6:	09 f4       	brne	.+2      	; 0x2fda <__vector_24+0xce>
    2fd8:	66 c0       	rjmp	.+204    	; 0x30a6 <__vector_24+0x19a>
    2fda:	88 3a       	cpi	r24, 0xA8	; 168
    2fdc:	09 f4       	brne	.+2      	; 0x2fe0 <__vector_24+0xd4>
    2fde:	7c c0       	rjmp	.+248    	; 0x30d8 <__vector_24+0x1cc>
    2fe0:	b1 c0       	rjmp	.+354    	; 0x3144 <__vector_24+0x238>
    2fe2:	80 3c       	cpi	r24, 0xC0	; 192
    2fe4:	09 f4       	brne	.+2      	; 0x2fe8 <__vector_24+0xdc>
    2fe6:	a4 c0       	rjmp	.+328    	; 0x3130 <__vector_24+0x224>
    2fe8:	88 3c       	cpi	r24, 0xC8	; 200
    2fea:	09 f4       	brne	.+2      	; 0x2fee <__vector_24+0xe2>
    2fec:	a1 c0       	rjmp	.+322    	; 0x3130 <__vector_24+0x224>
    2fee:	88 3b       	cpi	r24, 0xB8	; 184
    2ff0:	09 f4       	brne	.+2      	; 0x2ff4 <__vector_24+0xe8>
    2ff2:	87 c0       	rjmp	.+270    	; 0x3102 <__vector_24+0x1f6>
    2ff4:	a7 c0       	rjmp	.+334    	; 0x3144 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2ff6:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <twi_slarw>
    2ffa:	10 c0       	rjmp	.+32     	; 0x301c <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2ffc:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <twi_masterBufferIndex>
    3000:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <twi_masterBufferLength>
    3004:	98 17       	cp	r25, r24
    3006:	70 f5       	brcc	.+92     	; 0x3064 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3008:	e0 91 11 03 	lds	r30, 0x0311	; 0x800311 <twi_masterBufferIndex>
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	8e 0f       	add	r24, r30
    3010:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <twi_masterBufferIndex>
    3014:	f0 e0       	ldi	r31, 0x00	; 0
    3016:	ee 5e       	subi	r30, 0xEE	; 238
    3018:	fc 4f       	sbci	r31, 0xFC	; 252
    301a:	80 81       	ld	r24, Z
    301c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3020:	85 ec       	ldi	r24, 0xC5	; 197
    3022:	83 c0       	rjmp	.+262    	; 0x312a <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3024:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <twi_error>
    3028:	8b c0       	rjmp	.+278    	; 0x3140 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    302a:	e0 91 11 03 	lds	r30, 0x0311	; 0x800311 <twi_masterBufferIndex>
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	8e 0f       	add	r24, r30
    3032:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <twi_masterBufferIndex>
    3036:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    303a:	f0 e0       	ldi	r31, 0x00	; 0
    303c:	ee 5e       	subi	r30, 0xEE	; 238
    303e:	fc 4f       	sbci	r31, 0xFC	; 252
    3040:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3042:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <twi_masterBufferIndex>
    3046:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <twi_masterBufferLength>
    304a:	6b c0       	rjmp	.+214    	; 0x3122 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    304c:	e0 91 11 03 	lds	r30, 0x0311	; 0x800311 <twi_masterBufferIndex>
    3050:	81 e0       	ldi	r24, 0x01	; 1
    3052:	8e 0f       	add	r24, r30
    3054:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <twi_masterBufferIndex>
    3058:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    305c:	f0 e0       	ldi	r31, 0x00	; 0
    305e:	ee 5e       	subi	r30, 0xEE	; 238
    3060:	fc 4f       	sbci	r31, 0xFC	; 252
    3062:	80 83       	st	Z, r24
	if (twi_sendStop)
    3064:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <twi_sendStop>
    3068:	81 11       	cpse	r24, r1
    306a:	6a c0       	rjmp	.+212    	; 0x3140 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    306c:	81 e0       	ldi	r24, 0x01	; 1
    306e:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3072:	84 ea       	ldi	r24, 0xA4	; 164
    3074:	5e c0       	rjmp	.+188    	; 0x3132 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3076:	83 e0       	ldi	r24, 0x03	; 3
    3078:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    307c:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <twi_rxBufferIndex>
    3080:	cf cf       	rjmp	.-98     	; 0x3020 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3082:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <twi_rxBufferIndex>
    3086:	80 32       	cpi	r24, 0x20	; 32
    3088:	08 f0       	brcs	.+2      	; 0x308c <__vector_24+0x180>
    308a:	4e c0       	rjmp	.+156    	; 0x3128 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    308c:	e0 91 cd 02 	lds	r30, 0x02CD	; 0x8002cd <twi_rxBufferIndex>
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	8e 0f       	add	r24, r30
    3094:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <twi_rxBufferIndex>
    3098:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    309c:	f0 e0       	ldi	r31, 0x00	; 0
    309e:	e2 53       	subi	r30, 0x32	; 50
    30a0:	fd 4f       	sbci	r31, 0xFD	; 253
    30a2:	80 83       	st	Z, r24
    30a4:	bd cf       	rjmp	.-134    	; 0x3020 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    30a6:	0e 94 80 17 	call	0x2f00	; 0x2f00 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    30aa:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <twi_rxBufferIndex>
    30ae:	80 32       	cpi	r24, 0x20	; 32
    30b0:	30 f4       	brcc	.+12     	; 0x30be <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    30b2:	e0 91 cd 02 	lds	r30, 0x02CD	; 0x8002cd <twi_rxBufferIndex>
    30b6:	f0 e0       	ldi	r31, 0x00	; 0
    30b8:	e2 53       	subi	r30, 0x32	; 50
    30ba:	fd 4f       	sbci	r31, 0xFD	; 253
    30bc:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    30be:	60 91 cd 02 	lds	r22, 0x02CD	; 0x8002cd <twi_rxBufferIndex>
    30c2:	70 e0       	ldi	r23, 0x00	; 0
    30c4:	e0 91 32 03 	lds	r30, 0x0332	; 0x800332 <twi_onSlaveReceive>
    30c8:	f0 91 33 03 	lds	r31, 0x0333	; 0x800333 <twi_onSlaveReceive+0x1>
    30cc:	8e ec       	ldi	r24, 0xCE	; 206
    30ce:	92 e0       	ldi	r25, 0x02	; 2
    30d0:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    30d2:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <twi_rxBufferIndex>
      break;
    30d6:	36 c0       	rjmp	.+108    	; 0x3144 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    30d8:	84 e0       	ldi	r24, 0x04	; 4
    30da:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    30de:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    30e2:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    30e6:	e0 91 34 03 	lds	r30, 0x0334	; 0x800334 <twi_onSlaveTransmit>
    30ea:	f0 91 35 03 	lds	r31, 0x0335	; 0x800335 <twi_onSlaveTransmit+0x1>
    30ee:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    30f0:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <twi_txBufferLength>
    30f4:	81 11       	cpse	r24, r1
    30f6:	05 c0       	rjmp	.+10     	; 0x3102 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    30fe:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3102:	e0 91 ef 02 	lds	r30, 0x02EF	; 0x8002ef <twi_txBufferIndex>
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	8e 0f       	add	r24, r30
    310a:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <twi_txBufferIndex>
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	e0 51       	subi	r30, 0x10	; 16
    3112:	fd 4f       	sbci	r31, 0xFD	; 253
    3114:	80 81       	ld	r24, Z
    3116:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    311a:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <twi_txBufferIndex>
    311e:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <twi_txBufferLength>
    3122:	98 17       	cp	r25, r24
    3124:	08 f4       	brcc	.+2      	; 0x3128 <__vector_24+0x21c>
    3126:	7c cf       	rjmp	.-264    	; 0x3020 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3128:	85 e8       	ldi	r24, 0x85	; 133
    312a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    312e:	0a c0       	rjmp	.+20     	; 0x3144 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3130:	85 ec       	ldi	r24, 0xC5	; 197
    3132:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3136:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <twi_state>
      break;
    313a:	04 c0       	rjmp	.+8      	; 0x3144 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    313c:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <twi_error>
      twi_stop();
    3140:	0e 94 76 17 	call	0x2eec	; 0x2eec <twi_stop>
      break;
  }
}
    3144:	ff 91       	pop	r31
    3146:	ef 91       	pop	r30
    3148:	bf 91       	pop	r27
    314a:	af 91       	pop	r26
    314c:	9f 91       	pop	r25
    314e:	8f 91       	pop	r24
    3150:	7f 91       	pop	r23
    3152:	6f 91       	pop	r22
    3154:	5f 91       	pop	r21
    3156:	4f 91       	pop	r20
    3158:	3f 91       	pop	r19
    315a:	2f 91       	pop	r18
    315c:	0f 90       	pop	r0
    315e:	0f be       	out	0x3f, r0	; 63
    3160:	0f 90       	pop	r0
    3162:	1f 90       	pop	r1
    3164:	18 95       	reti

00003166 <_ZN7MPU6050C1Ev>:
// DMP_CFG_2 register

uint8_t MPU6050::getDMPConfig2() {
    I2Cdev::readByte(devAddr, MPU6050_RA_DMP_CFG_2, buffer);
    return buffer[0];
}
    3166:	28 e6       	ldi	r18, 0x68	; 104
    3168:	fc 01       	movw	r30, r24
    316a:	20 83       	st	Z, r18
    316c:	08 95       	ret

0000316e <_ZN7MPU60507setRateEh>:
    316e:	46 2f       	mov	r20, r22
    3170:	69 e1       	ldi	r22, 0x19	; 25
    3172:	fc 01       	movw	r30, r24
    3174:	80 81       	ld	r24, Z
    3176:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <_ZN6I2Cdev9writeByteEhhh>
    317a:	08 95       	ret

0000317c <_ZN7MPU605020setExternalFrameSyncEh>:
    317c:	0f 93       	push	r16
    317e:	06 2f       	mov	r16, r22
    3180:	23 e0       	ldi	r18, 0x03	; 3
    3182:	45 e0       	ldi	r20, 0x05	; 5
    3184:	6a e1       	ldi	r22, 0x1A	; 26
    3186:	fc 01       	movw	r30, r24
    3188:	80 81       	ld	r24, Z
    318a:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <_ZN6I2Cdev9writeBitsEhhhhh>
    318e:	0f 91       	pop	r16
    3190:	08 95       	ret

00003192 <_ZN7MPU605011setDLPFModeEh>:
    3192:	0f 93       	push	r16
    3194:	06 2f       	mov	r16, r22
    3196:	23 e0       	ldi	r18, 0x03	; 3
    3198:	42 e0       	ldi	r20, 0x02	; 2
    319a:	6a e1       	ldi	r22, 0x1A	; 26
    319c:	fc 01       	movw	r30, r24
    319e:	80 81       	ld	r24, Z
    31a0:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <_ZN6I2Cdev9writeBitsEhhhhh>
    31a4:	0f 91       	pop	r16
    31a6:	08 95       	ret

000031a8 <_ZN7MPU605021setFullScaleGyroRangeEh>:
    31a8:	0f 93       	push	r16
    31aa:	06 2f       	mov	r16, r22
    31ac:	22 e0       	ldi	r18, 0x02	; 2
    31ae:	44 e0       	ldi	r20, 0x04	; 4
    31b0:	6b e1       	ldi	r22, 0x1B	; 27
    31b2:	fc 01       	movw	r30, r24
    31b4:	80 81       	ld	r24, Z
    31b6:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <_ZN6I2Cdev9writeBitsEhhhhh>
    31ba:	0f 91       	pop	r16
    31bc:	08 95       	ret

000031be <_ZN7MPU605022setFullScaleAccelRangeEh>:
    31be:	0f 93       	push	r16
    31c0:	06 2f       	mov	r16, r22
    31c2:	22 e0       	ldi	r18, 0x02	; 2
    31c4:	44 e0       	ldi	r20, 0x04	; 4
    31c6:	6c e1       	ldi	r22, 0x1C	; 28
    31c8:	fc 01       	movw	r30, r24
    31ca:	80 81       	ld	r24, Z
    31cc:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <_ZN6I2Cdev9writeBitsEhhhhh>
    31d0:	0f 91       	pop	r16
    31d2:	08 95       	ret

000031d4 <_ZN7MPU605027setMotionDetectionThresholdEh>:
    31d4:	46 2f       	mov	r20, r22
    31d6:	6f e1       	ldi	r22, 0x1F	; 31
    31d8:	fc 01       	movw	r30, r24
    31da:	80 81       	ld	r24, Z
    31dc:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <_ZN6I2Cdev9writeByteEhhh>
    31e0:	08 95       	ret

000031e2 <_ZN7MPU605026setMotionDetectionDurationEh>:
    31e2:	46 2f       	mov	r20, r22
    31e4:	60 e2       	ldi	r22, 0x20	; 32
    31e6:	fc 01       	movw	r30, r24
    31e8:	80 81       	ld	r24, Z
    31ea:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <_ZN6I2Cdev9writeByteEhhh>
    31ee:	08 95       	ret

000031f0 <_ZN7MPU605031setZeroMotionDetectionThresholdEh>:
    31f0:	46 2f       	mov	r20, r22
    31f2:	61 e2       	ldi	r22, 0x21	; 33
    31f4:	fc 01       	movw	r30, r24
    31f6:	80 81       	ld	r24, Z
    31f8:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <_ZN6I2Cdev9writeByteEhhh>
    31fc:	08 95       	ret

000031fe <_ZN7MPU605030setZeroMotionDetectionDurationEh>:
    31fe:	46 2f       	mov	r20, r22
    3200:	62 e2       	ldi	r22, 0x22	; 34
    3202:	fc 01       	movw	r30, r24
    3204:	80 81       	ld	r24, Z
    3206:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <_ZN6I2Cdev9writeByteEhhh>
    320a:	08 95       	ret

0000320c <_ZN7MPU605015setSlaveAddressEhh>:
    320c:	64 30       	cpi	r22, 0x04	; 4
    320e:	40 f4       	brcc	.+16     	; 0x3220 <_ZN7MPU605015setSlaveAddressEhh+0x14>
    3210:	fc 01       	movw	r30, r24
    3212:	26 2f       	mov	r18, r22
    3214:	22 0f       	add	r18, r18
    3216:	62 0f       	add	r22, r18
    3218:	6b 5d       	subi	r22, 0xDB	; 219
    321a:	80 81       	ld	r24, Z
    321c:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <_ZN6I2Cdev9writeByteEhhh>
    3220:	08 95       	ret

00003222 <_ZN7MPU605013setIntEnabledEh>:
    3222:	46 2f       	mov	r20, r22
    3224:	68 e3       	ldi	r22, 0x38	; 56
    3226:	fc 01       	movw	r30, r24
    3228:	80 81       	ld	r24, Z
    322a:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <_ZN6I2Cdev9writeByteEhhh>
    322e:	08 95       	ret

00003230 <_ZN7MPU605012getIntStatusEv>:
    3230:	cf 93       	push	r28
    3232:	df 93       	push	r29
    3234:	ec 01       	movw	r28, r24
    3236:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <_ZN6I2Cdev11readTimeoutE>
    323a:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <_ZN6I2Cdev11readTimeoutE+0x1>
    323e:	ac 01       	movw	r20, r24
    3240:	4f 5f       	subi	r20, 0xFF	; 255
    3242:	5f 4f       	sbci	r21, 0xFF	; 255
    3244:	6a e3       	ldi	r22, 0x3A	; 58
    3246:	88 81       	ld	r24, Y
    3248:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <_ZN6I2Cdev8readByteEhhPhj>
    324c:	89 81       	ldd	r24, Y+1	; 0x01
    324e:	df 91       	pop	r29
    3250:	cf 91       	pop	r28
    3252:	08 95       	ret

00003254 <_ZN7MPU605014setFIFOEnabledEb>:
    3254:	26 2f       	mov	r18, r22
    3256:	46 e0       	ldi	r20, 0x06	; 6
    3258:	6a e6       	ldi	r22, 0x6A	; 106
    325a:	fc 01       	movw	r30, r24
    325c:	80 81       	ld	r24, Z
    325e:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <_ZN6I2Cdev8writeBitEhhhh>
    3262:	08 95       	ret

00003264 <_ZN7MPU605023setI2CMasterModeEnabledEb>:
    3264:	26 2f       	mov	r18, r22
    3266:	45 e0       	ldi	r20, 0x05	; 5
    3268:	6a e6       	ldi	r22, 0x6A	; 106
    326a:	fc 01       	movw	r30, r24
    326c:	80 81       	ld	r24, Z
    326e:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <_ZN6I2Cdev8writeBitEhhhh>
    3272:	08 95       	ret

00003274 <_ZN7MPU60509resetFIFOEv>:
    3274:	21 e0       	ldi	r18, 0x01	; 1
    3276:	42 e0       	ldi	r20, 0x02	; 2
    3278:	6a e6       	ldi	r22, 0x6A	; 106
    327a:	fc 01       	movw	r30, r24
    327c:	80 81       	ld	r24, Z
    327e:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <_ZN6I2Cdev8writeBitEhhhh>
    3282:	08 95       	ret

00003284 <_ZN7MPU605014resetI2CMasterEv>:
    3284:	21 e0       	ldi	r18, 0x01	; 1
    3286:	41 e0       	ldi	r20, 0x01	; 1
    3288:	6a e6       	ldi	r22, 0x6A	; 106
    328a:	fc 01       	movw	r30, r24
    328c:	80 81       	ld	r24, Z
    328e:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <_ZN6I2Cdev8writeBitEhhhh>
    3292:	08 95       	ret

00003294 <_ZN7MPU60505resetEv>:
    3294:	21 e0       	ldi	r18, 0x01	; 1
    3296:	47 e0       	ldi	r20, 0x07	; 7
    3298:	6b e6       	ldi	r22, 0x6B	; 107
    329a:	fc 01       	movw	r30, r24
    329c:	80 81       	ld	r24, Z
    329e:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <_ZN6I2Cdev8writeBitEhhhh>
    32a2:	08 95       	ret

000032a4 <_ZN7MPU605015setSleepEnabledEb>:
    32a4:	26 2f       	mov	r18, r22
    32a6:	46 e0       	ldi	r20, 0x06	; 6
    32a8:	6b e6       	ldi	r22, 0x6B	; 107
    32aa:	fc 01       	movw	r30, r24
    32ac:	80 81       	ld	r24, Z
    32ae:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <_ZN6I2Cdev8writeBitEhhhh>
    32b2:	08 95       	ret

000032b4 <_ZN7MPU605014setClockSourceEh>:
    32b4:	0f 93       	push	r16
    32b6:	06 2f       	mov	r16, r22
    32b8:	23 e0       	ldi	r18, 0x03	; 3
    32ba:	42 e0       	ldi	r20, 0x02	; 2
    32bc:	6b e6       	ldi	r22, 0x6B	; 107
    32be:	fc 01       	movw	r30, r24
    32c0:	80 81       	ld	r24, Z
    32c2:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <_ZN6I2Cdev9writeBitsEhhhhh>
    32c6:	0f 91       	pop	r16
    32c8:	08 95       	ret

000032ca <_ZN7MPU605010initializeEv>:
    32ca:	cf 93       	push	r28
    32cc:	df 93       	push	r29
    32ce:	ec 01       	movw	r28, r24
    32d0:	61 e0       	ldi	r22, 0x01	; 1
    32d2:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <_ZN7MPU605014setClockSourceEh>
    32d6:	60 e0       	ldi	r22, 0x00	; 0
    32d8:	ce 01       	movw	r24, r28
    32da:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <_ZN7MPU605021setFullScaleGyroRangeEh>
    32de:	60 e0       	ldi	r22, 0x00	; 0
    32e0:	ce 01       	movw	r24, r28
    32e2:	0e 94 df 18 	call	0x31be	; 0x31be <_ZN7MPU605022setFullScaleAccelRangeEh>
    32e6:	60 e0       	ldi	r22, 0x00	; 0
    32e8:	ce 01       	movw	r24, r28
    32ea:	0e 94 52 19 	call	0x32a4	; 0x32a4 <_ZN7MPU605015setSleepEnabledEb>
    32ee:	df 91       	pop	r29
    32f0:	cf 91       	pop	r28
    32f2:	08 95       	ret

000032f4 <_ZN7MPU605012getFIFOCountEv>:
    32f4:	0f 93       	push	r16
    32f6:	1f 93       	push	r17
    32f8:	cf 93       	push	r28
    32fa:	df 93       	push	r29
    32fc:	ec 01       	movw	r28, r24
    32fe:	00 91 18 01 	lds	r16, 0x0118	; 0x800118 <_ZN6I2Cdev11readTimeoutE>
    3302:	10 91 19 01 	lds	r17, 0x0119	; 0x800119 <_ZN6I2Cdev11readTimeoutE+0x1>
    3306:	9c 01       	movw	r18, r24
    3308:	2f 5f       	subi	r18, 0xFF	; 255
    330a:	3f 4f       	sbci	r19, 0xFF	; 255
    330c:	42 e0       	ldi	r20, 0x02	; 2
    330e:	62 e7       	ldi	r22, 0x72	; 114
    3310:	88 81       	ld	r24, Y
    3312:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <_ZN6I2Cdev9readBytesEhhhPhj>
    3316:	29 81       	ldd	r18, Y+1	; 0x01
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	32 2f       	mov	r19, r18
    331c:	22 27       	eor	r18, r18
    331e:	8a 81       	ldd	r24, Y+2	; 0x02
    3320:	a9 01       	movw	r20, r18
    3322:	48 2b       	or	r20, r24
    3324:	ca 01       	movw	r24, r20
    3326:	df 91       	pop	r29
    3328:	cf 91       	pop	r28
    332a:	1f 91       	pop	r17
    332c:	0f 91       	pop	r16
    332e:	08 95       	ret

00003330 <_ZN7MPU605012getFIFOBytesEPhh>:
    3330:	0f 93       	push	r16
    3332:	1f 93       	push	r17
    3334:	44 23       	and	r20, r20
    3336:	59 f0       	breq	.+22     	; 0x334e <_ZN7MPU605012getFIFOBytesEPhh+0x1e>
    3338:	9b 01       	movw	r18, r22
    333a:	fc 01       	movw	r30, r24
    333c:	00 91 18 01 	lds	r16, 0x0118	; 0x800118 <_ZN6I2Cdev11readTimeoutE>
    3340:	10 91 19 01 	lds	r17, 0x0119	; 0x800119 <_ZN6I2Cdev11readTimeoutE+0x1>
    3344:	64 e7       	ldi	r22, 0x74	; 116
    3346:	80 81       	ld	r24, Z
    3348:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <_ZN6I2Cdev9readBytesEhhhPhj>
    334c:	02 c0       	rjmp	.+4      	; 0x3352 <_ZN7MPU605012getFIFOBytesEPhh+0x22>
    334e:	fb 01       	movw	r30, r22
    3350:	10 82       	st	Z, r1
    3352:	1f 91       	pop	r17
    3354:	0f 91       	pop	r16
    3356:	08 95       	ret

00003358 <_ZN7MPU605011getDeviceIDEv>:
    3358:	ef 92       	push	r14
    335a:	ff 92       	push	r15
    335c:	0f 93       	push	r16
    335e:	1f 93       	push	r17
    3360:	cf 93       	push	r28
    3362:	df 93       	push	r29
    3364:	ec 01       	movw	r28, r24
    3366:	e0 90 18 01 	lds	r14, 0x0118	; 0x800118 <_ZN6I2Cdev11readTimeoutE>
    336a:	f0 90 19 01 	lds	r15, 0x0119	; 0x800119 <_ZN6I2Cdev11readTimeoutE+0x1>
    336e:	8c 01       	movw	r16, r24
    3370:	0f 5f       	subi	r16, 0xFF	; 255
    3372:	1f 4f       	sbci	r17, 0xFF	; 255
    3374:	26 e0       	ldi	r18, 0x06	; 6
    3376:	46 e0       	ldi	r20, 0x06	; 6
    3378:	65 e7       	ldi	r22, 0x75	; 117
    337a:	88 81       	ld	r24, Y
    337c:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <_ZN6I2Cdev8readBitsEhhhhPhj>
    3380:	89 81       	ldd	r24, Y+1	; 0x01
    3382:	df 91       	pop	r29
    3384:	cf 91       	pop	r28
    3386:	1f 91       	pop	r17
    3388:	0f 91       	pop	r16
    338a:	ff 90       	pop	r15
    338c:	ef 90       	pop	r14
    338e:	08 95       	ret

00003390 <_ZN7MPU605014testConnectionEv>:
    3390:	0e 94 ac 19 	call	0x3358	; 0x3358 <_ZN7MPU605011getDeviceIDEv>
    3394:	91 e0       	ldi	r25, 0x01	; 1
    3396:	84 33       	cpi	r24, 0x34	; 52
    3398:	09 f0       	breq	.+2      	; 0x339c <_ZN7MPU605014testConnectionEv+0xc>
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	89 2f       	mov	r24, r25
    339e:	08 95       	ret

000033a0 <_ZN7MPU605015getOTPBankValidEv>:
    33a0:	0f 93       	push	r16
    33a2:	1f 93       	push	r17
    33a4:	cf 93       	push	r28
    33a6:	df 93       	push	r29
    33a8:	ec 01       	movw	r28, r24
    33aa:	00 91 18 01 	lds	r16, 0x0118	; 0x800118 <_ZN6I2Cdev11readTimeoutE>
    33ae:	10 91 19 01 	lds	r17, 0x0119	; 0x800119 <_ZN6I2Cdev11readTimeoutE+0x1>
    33b2:	9c 01       	movw	r18, r24
    33b4:	2f 5f       	subi	r18, 0xFF	; 255
    33b6:	3f 4f       	sbci	r19, 0xFF	; 255
    33b8:	40 e0       	ldi	r20, 0x00	; 0
    33ba:	60 e0       	ldi	r22, 0x00	; 0
    33bc:	88 81       	ld	r24, Y
    33be:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <_ZN6I2Cdev7readBitEhhhPhj>
    33c2:	89 81       	ldd	r24, Y+1	; 0x01
    33c4:	df 91       	pop	r29
    33c6:	cf 91       	pop	r28
    33c8:	1f 91       	pop	r17
    33ca:	0f 91       	pop	r16
    33cc:	08 95       	ret

000033ce <_ZN7MPU605015setOTPBankValidEb>:
    33ce:	26 2f       	mov	r18, r22
    33d0:	40 e0       	ldi	r20, 0x00	; 0
    33d2:	60 e0       	ldi	r22, 0x00	; 0
    33d4:	fc 01       	movw	r30, r24
    33d6:	80 81       	ld	r24, Z
    33d8:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <_ZN6I2Cdev8writeBitEhhhh>
    33dc:	08 95       	ret

000033de <_ZN7MPU605016getXGyroOffsetTCEv>:
    33de:	ef 92       	push	r14
    33e0:	ff 92       	push	r15
    33e2:	0f 93       	push	r16
    33e4:	1f 93       	push	r17
    33e6:	cf 93       	push	r28
    33e8:	df 93       	push	r29
    33ea:	ec 01       	movw	r28, r24
    33ec:	e0 90 18 01 	lds	r14, 0x0118	; 0x800118 <_ZN6I2Cdev11readTimeoutE>
    33f0:	f0 90 19 01 	lds	r15, 0x0119	; 0x800119 <_ZN6I2Cdev11readTimeoutE+0x1>
    33f4:	8c 01       	movw	r16, r24
    33f6:	0f 5f       	subi	r16, 0xFF	; 255
    33f8:	1f 4f       	sbci	r17, 0xFF	; 255
    33fa:	26 e0       	ldi	r18, 0x06	; 6
    33fc:	46 e0       	ldi	r20, 0x06	; 6
    33fe:	60 e0       	ldi	r22, 0x00	; 0
    3400:	88 81       	ld	r24, Y
    3402:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <_ZN6I2Cdev8readBitsEhhhhPhj>
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	df 91       	pop	r29
    340a:	cf 91       	pop	r28
    340c:	1f 91       	pop	r17
    340e:	0f 91       	pop	r16
    3410:	ff 90       	pop	r15
    3412:	ef 90       	pop	r14
    3414:	08 95       	ret

00003416 <_ZN7MPU605016setXGyroOffsetTCEa>:
    3416:	0f 93       	push	r16
    3418:	06 2f       	mov	r16, r22
    341a:	26 e0       	ldi	r18, 0x06	; 6
    341c:	46 e0       	ldi	r20, 0x06	; 6
    341e:	60 e0       	ldi	r22, 0x00	; 0
    3420:	fc 01       	movw	r30, r24
    3422:	80 81       	ld	r24, Z
    3424:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <_ZN6I2Cdev9writeBitsEhhhhh>
    3428:	0f 91       	pop	r16
    342a:	08 95       	ret

0000342c <_ZN7MPU605016getYGyroOffsetTCEv>:
    342c:	ef 92       	push	r14
    342e:	ff 92       	push	r15
    3430:	0f 93       	push	r16
    3432:	1f 93       	push	r17
    3434:	cf 93       	push	r28
    3436:	df 93       	push	r29
    3438:	ec 01       	movw	r28, r24
    343a:	e0 90 18 01 	lds	r14, 0x0118	; 0x800118 <_ZN6I2Cdev11readTimeoutE>
    343e:	f0 90 19 01 	lds	r15, 0x0119	; 0x800119 <_ZN6I2Cdev11readTimeoutE+0x1>
    3442:	8c 01       	movw	r16, r24
    3444:	0f 5f       	subi	r16, 0xFF	; 255
    3446:	1f 4f       	sbci	r17, 0xFF	; 255
    3448:	26 e0       	ldi	r18, 0x06	; 6
    344a:	46 e0       	ldi	r20, 0x06	; 6
    344c:	61 e0       	ldi	r22, 0x01	; 1
    344e:	88 81       	ld	r24, Y
    3450:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <_ZN6I2Cdev8readBitsEhhhhPhj>
    3454:	89 81       	ldd	r24, Y+1	; 0x01
    3456:	df 91       	pop	r29
    3458:	cf 91       	pop	r28
    345a:	1f 91       	pop	r17
    345c:	0f 91       	pop	r16
    345e:	ff 90       	pop	r15
    3460:	ef 90       	pop	r14
    3462:	08 95       	ret

00003464 <_ZN7MPU605016setYGyroOffsetTCEa>:
    3464:	0f 93       	push	r16
    3466:	06 2f       	mov	r16, r22
    3468:	26 e0       	ldi	r18, 0x06	; 6
    346a:	46 e0       	ldi	r20, 0x06	; 6
    346c:	61 e0       	ldi	r22, 0x01	; 1
    346e:	fc 01       	movw	r30, r24
    3470:	80 81       	ld	r24, Z
    3472:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <_ZN6I2Cdev9writeBitsEhhhhh>
    3476:	0f 91       	pop	r16
    3478:	08 95       	ret

0000347a <_ZN7MPU605016getZGyroOffsetTCEv>:
    347a:	ef 92       	push	r14
    347c:	ff 92       	push	r15
    347e:	0f 93       	push	r16
    3480:	1f 93       	push	r17
    3482:	cf 93       	push	r28
    3484:	df 93       	push	r29
    3486:	ec 01       	movw	r28, r24
    3488:	e0 90 18 01 	lds	r14, 0x0118	; 0x800118 <_ZN6I2Cdev11readTimeoutE>
    348c:	f0 90 19 01 	lds	r15, 0x0119	; 0x800119 <_ZN6I2Cdev11readTimeoutE+0x1>
    3490:	8c 01       	movw	r16, r24
    3492:	0f 5f       	subi	r16, 0xFF	; 255
    3494:	1f 4f       	sbci	r17, 0xFF	; 255
    3496:	26 e0       	ldi	r18, 0x06	; 6
    3498:	46 e0       	ldi	r20, 0x06	; 6
    349a:	62 e0       	ldi	r22, 0x02	; 2
    349c:	88 81       	ld	r24, Y
    349e:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <_ZN6I2Cdev8readBitsEhhhhPhj>
    34a2:	89 81       	ldd	r24, Y+1	; 0x01
    34a4:	df 91       	pop	r29
    34a6:	cf 91       	pop	r28
    34a8:	1f 91       	pop	r17
    34aa:	0f 91       	pop	r16
    34ac:	ff 90       	pop	r15
    34ae:	ef 90       	pop	r14
    34b0:	08 95       	ret

000034b2 <_ZN7MPU605016setZGyroOffsetTCEa>:
    34b2:	0f 93       	push	r16
    34b4:	06 2f       	mov	r16, r22
    34b6:	26 e0       	ldi	r18, 0x06	; 6
    34b8:	46 e0       	ldi	r20, 0x06	; 6
    34ba:	62 e0       	ldi	r22, 0x02	; 2
    34bc:	fc 01       	movw	r30, r24
    34be:	80 81       	ld	r24, Z
    34c0:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <_ZN6I2Cdev9writeBitsEhhhhh>
    34c4:	0f 91       	pop	r16
    34c6:	08 95       	ret

000034c8 <_ZN7MPU605015setZAccelOffsetEi>:
    34c8:	ab 01       	movw	r20, r22
    34ca:	6a e0       	ldi	r22, 0x0A	; 10
    34cc:	fc 01       	movw	r30, r24
    34ce:	80 81       	ld	r24, Z
    34d0:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <_ZN6I2Cdev9writeWordEhhj>
    34d4:	08 95       	ret

000034d6 <_ZN7MPU605014setXGyroOffsetEi>:
    34d6:	ab 01       	movw	r20, r22
    34d8:	63 e1       	ldi	r22, 0x13	; 19
    34da:	fc 01       	movw	r30, r24
    34dc:	80 81       	ld	r24, Z
    34de:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <_ZN6I2Cdev9writeWordEhhj>
    34e2:	08 95       	ret

000034e4 <_ZN7MPU605014setYGyroOffsetEi>:
    34e4:	ab 01       	movw	r20, r22
    34e6:	65 e1       	ldi	r22, 0x15	; 21
    34e8:	fc 01       	movw	r30, r24
    34ea:	80 81       	ld	r24, Z
    34ec:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <_ZN6I2Cdev9writeWordEhhj>
    34f0:	08 95       	ret

000034f2 <_ZN7MPU605014setZGyroOffsetEi>:
    34f2:	ab 01       	movw	r20, r22
    34f4:	67 e1       	ldi	r22, 0x17	; 23
    34f6:	fc 01       	movw	r30, r24
    34f8:	80 81       	ld	r24, Z
    34fa:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <_ZN6I2Cdev9writeWordEhhj>
    34fe:	08 95       	ret

00003500 <_ZN7MPU605013setDMPEnabledEb>:
    3500:	26 2f       	mov	r18, r22
    3502:	47 e0       	ldi	r20, 0x07	; 7
    3504:	6a e6       	ldi	r22, 0x6A	; 106
    3506:	fc 01       	movw	r30, r24
    3508:	80 81       	ld	r24, Z
    350a:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <_ZN6I2Cdev8writeBitEhhhh>
    350e:	08 95       	ret

00003510 <_ZN7MPU60508resetDMPEv>:
    3510:	21 e0       	ldi	r18, 0x01	; 1
    3512:	43 e0       	ldi	r20, 0x03	; 3
    3514:	6a e6       	ldi	r22, 0x6A	; 106
    3516:	fc 01       	movw	r30, r24
    3518:	80 81       	ld	r24, Z
    351a:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <_ZN6I2Cdev8writeBitEhhhh>
    351e:	08 95       	ret

00003520 <_ZN7MPU605013setMemoryBankEhbb>:
    3520:	6f 71       	andi	r22, 0x1F	; 31
    3522:	21 11       	cpse	r18, r1
    3524:	60 62       	ori	r22, 0x20	; 32
    3526:	41 11       	cpse	r20, r1
    3528:	60 64       	ori	r22, 0x40	; 64
    352a:	46 2f       	mov	r20, r22
    352c:	6d e6       	ldi	r22, 0x6D	; 109
    352e:	fc 01       	movw	r30, r24
    3530:	80 81       	ld	r24, Z
    3532:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <_ZN6I2Cdev9writeByteEhhh>
    3536:	08 95       	ret

00003538 <_ZN7MPU605021setMemoryStartAddressEh>:
    3538:	46 2f       	mov	r20, r22
    353a:	6e e6       	ldi	r22, 0x6E	; 110
    353c:	fc 01       	movw	r30, r24
    353e:	80 81       	ld	r24, Z
    3540:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <_ZN6I2Cdev9writeByteEhhh>
    3544:	08 95       	ret

00003546 <_ZN7MPU605014readMemoryByteEv>:
    3546:	cf 93       	push	r28
    3548:	df 93       	push	r29
    354a:	ec 01       	movw	r28, r24
    354c:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <_ZN6I2Cdev11readTimeoutE>
    3550:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <_ZN6I2Cdev11readTimeoutE+0x1>
    3554:	ac 01       	movw	r20, r24
    3556:	4f 5f       	subi	r20, 0xFF	; 255
    3558:	5f 4f       	sbci	r21, 0xFF	; 255
    355a:	6f e6       	ldi	r22, 0x6F	; 111
    355c:	88 81       	ld	r24, Y
    355e:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <_ZN6I2Cdev8readByteEhhPhj>
    3562:	89 81       	ldd	r24, Y+1	; 0x01
    3564:	df 91       	pop	r29
    3566:	cf 91       	pop	r28
    3568:	08 95       	ret

0000356a <_ZN7MPU605015readMemoryBlockEPhjhh>:
    356a:	4f 92       	push	r4
    356c:	5f 92       	push	r5
    356e:	6f 92       	push	r6
    3570:	7f 92       	push	r7
    3572:	8f 92       	push	r8
    3574:	9f 92       	push	r9
    3576:	af 92       	push	r10
    3578:	bf 92       	push	r11
    357a:	cf 92       	push	r12
    357c:	df 92       	push	r13
    357e:	ef 92       	push	r14
    3580:	ff 92       	push	r15
    3582:	0f 93       	push	r16
    3584:	1f 93       	push	r17
    3586:	cf 93       	push	r28
    3588:	df 93       	push	r29
    358a:	6c 01       	movw	r12, r24
    358c:	5b 01       	movw	r10, r22
    358e:	7a 01       	movw	r14, r20
    3590:	52 2e       	mov	r5, r18
    3592:	60 2e       	mov	r6, r16
    3594:	20 e0       	ldi	r18, 0x00	; 0
    3596:	40 e0       	ldi	r20, 0x00	; 0
    3598:	65 2d       	mov	r22, r5
    359a:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZN7MPU605013setMemoryBankEhbb>
    359e:	60 2f       	mov	r22, r16
    35a0:	c6 01       	movw	r24, r12
    35a2:	0e 94 9c 1a 	call	0x3538	; 0x3538 <_ZN7MPU605021setMemoryStartAddressEh>
    35a6:	e1 14       	cp	r14, r1
    35a8:	f1 04       	cpc	r15, r1
    35aa:	d9 f1       	breq	.+118    	; 0x3622 <_ZN7MPU605015readMemoryBlockEPhjhh+0xb8>
    35ac:	c0 e0       	ldi	r28, 0x00	; 0
    35ae:	d0 e0       	ldi	r29, 0x00	; 0
    35b0:	68 94       	set
    35b2:	44 24       	eor	r4, r4
    35b4:	44 f8       	bld	r4, 4
    35b6:	81 2c       	mov	r8, r1
    35b8:	99 24       	eor	r9, r9
    35ba:	93 94       	inc	r9
    35bc:	ce 01       	movw	r24, r28
    35be:	40 96       	adiw	r24, 0x10	; 16
    35c0:	e8 16       	cp	r14, r24
    35c2:	f9 06       	cpc	r15, r25
    35c4:	18 f4       	brcc	.+6      	; 0x35cc <_ZN7MPU605015readMemoryBlockEPhjhh+0x62>
    35c6:	7e 2c       	mov	r7, r14
    35c8:	7c 1a       	sub	r7, r28
    35ca:	01 c0       	rjmp	.+2      	; 0x35ce <_ZN7MPU605015readMemoryBlockEPhjhh+0x64>
    35cc:	74 2c       	mov	r7, r4
    35ce:	87 2d       	mov	r24, r7
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	94 01       	movw	r18, r8
    35d4:	26 19       	sub	r18, r6
    35d6:	31 09       	sbc	r19, r1
    35d8:	28 17       	cp	r18, r24
    35da:	39 07       	cpc	r19, r25
    35dc:	14 f4       	brge	.+4      	; 0x35e2 <_ZN7MPU605015readMemoryBlockEPhjhh+0x78>
    35de:	76 2c       	mov	r7, r6
    35e0:	71 94       	neg	r7
    35e2:	00 91 18 01 	lds	r16, 0x0118	; 0x800118 <_ZN6I2Cdev11readTimeoutE>
    35e6:	10 91 19 01 	lds	r17, 0x0119	; 0x800119 <_ZN6I2Cdev11readTimeoutE+0x1>
    35ea:	95 01       	movw	r18, r10
    35ec:	2c 0f       	add	r18, r28
    35ee:	3d 1f       	adc	r19, r29
    35f0:	47 2d       	mov	r20, r7
    35f2:	6f e6       	ldi	r22, 0x6F	; 111
    35f4:	f6 01       	movw	r30, r12
    35f6:	80 81       	ld	r24, Z
    35f8:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <_ZN6I2Cdev9readBytesEhhhPhj>
    35fc:	c7 0d       	add	r28, r7
    35fe:	d1 1d       	adc	r29, r1
    3600:	ce 15       	cp	r28, r14
    3602:	df 05       	cpc	r29, r15
    3604:	70 f4       	brcc	.+28     	; 0x3622 <_ZN7MPU605015readMemoryBlockEPhjhh+0xb8>
    3606:	67 0c       	add	r6, r7
    3608:	09 f4       	brne	.+2      	; 0x360c <_ZN7MPU605015readMemoryBlockEPhjhh+0xa2>
    360a:	53 94       	inc	r5
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	40 e0       	ldi	r20, 0x00	; 0
    3610:	65 2d       	mov	r22, r5
    3612:	c6 01       	movw	r24, r12
    3614:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZN7MPU605013setMemoryBankEhbb>
    3618:	66 2d       	mov	r22, r6
    361a:	c6 01       	movw	r24, r12
    361c:	0e 94 9c 1a 	call	0x3538	; 0x3538 <_ZN7MPU605021setMemoryStartAddressEh>
    3620:	cd cf       	rjmp	.-102    	; 0x35bc <_ZN7MPU605015readMemoryBlockEPhjhh+0x52>
    3622:	df 91       	pop	r29
    3624:	cf 91       	pop	r28
    3626:	1f 91       	pop	r17
    3628:	0f 91       	pop	r16
    362a:	ff 90       	pop	r15
    362c:	ef 90       	pop	r14
    362e:	df 90       	pop	r13
    3630:	cf 90       	pop	r12
    3632:	bf 90       	pop	r11
    3634:	af 90       	pop	r10
    3636:	9f 90       	pop	r9
    3638:	8f 90       	pop	r8
    363a:	7f 90       	pop	r7
    363c:	6f 90       	pop	r6
    363e:	5f 90       	pop	r5
    3640:	4f 90       	pop	r4
    3642:	08 95       	ret

00003644 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>:
    3644:	2f 92       	push	r2
    3646:	3f 92       	push	r3
    3648:	4f 92       	push	r4
    364a:	5f 92       	push	r5
    364c:	6f 92       	push	r6
    364e:	7f 92       	push	r7
    3650:	8f 92       	push	r8
    3652:	9f 92       	push	r9
    3654:	af 92       	push	r10
    3656:	bf 92       	push	r11
    3658:	cf 92       	push	r12
    365a:	df 92       	push	r13
    365c:	ef 92       	push	r14
    365e:	ff 92       	push	r15
    3660:	0f 93       	push	r16
    3662:	1f 93       	push	r17
    3664:	cf 93       	push	r28
    3666:	df 93       	push	r29
    3668:	00 d0       	rcall	.+0      	; 0x366a <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x26>
    366a:	00 d0       	rcall	.+0      	; 0x366c <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x28>
    366c:	1f 92       	push	r1
    366e:	cd b7       	in	r28, 0x3d	; 61
    3670:	de b7       	in	r29, 0x3e	; 62
    3672:	5c 01       	movw	r10, r24
    3674:	3b 01       	movw	r6, r22
    3676:	4a 01       	movw	r8, r20
    3678:	29 83       	std	Y+1, r18	; 0x01
    367a:	50 2e       	mov	r5, r16
    367c:	eb 82       	std	Y+3, r14	; 0x03
    367e:	ca 82       	std	Y+2, r12	; 0x02
    3680:	20 e0       	ldi	r18, 0x00	; 0
    3682:	40 e0       	ldi	r20, 0x00	; 0
    3684:	69 81       	ldd	r22, Y+1	; 0x01
    3686:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZN7MPU605013setMemoryBankEhbb>
    368a:	60 2f       	mov	r22, r16
    368c:	c5 01       	movw	r24, r10
    368e:	0e 94 9c 1a 	call	0x3538	; 0x3538 <_ZN7MPU605021setMemoryStartAddressEh>
    3692:	eb 80       	ldd	r14, Y+3	; 0x03
    3694:	ee 20       	and	r14, r14
    3696:	29 f0       	breq	.+10     	; 0x36a2 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x5e>
    3698:	80 e1       	ldi	r24, 0x10	; 16
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <malloc>
    36a0:	1c 01       	movw	r2, r24
    36a2:	8a 81       	ldd	r24, Y+2	; 0x02
    36a4:	88 23       	and	r24, r24
    36a6:	31 f0       	breq	.+12     	; 0x36b4 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x70>
    36a8:	80 e1       	ldi	r24, 0x10	; 16
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <malloc>
    36b0:	7c 01       	movw	r14, r24
    36b2:	02 c0       	rjmp	.+4      	; 0x36b8 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x74>
    36b4:	e1 2c       	mov	r14, r1
    36b6:	f1 2c       	mov	r15, r1
    36b8:	81 14       	cp	r8, r1
    36ba:	91 04       	cpc	r9, r1
    36bc:	09 f4       	brne	.+2      	; 0x36c0 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x7c>
    36be:	86 c0       	rjmp	.+268    	; 0x37cc <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x188>
    36c0:	1d 82       	std	Y+5, r1	; 0x05
    36c2:	1c 82       	std	Y+4, r1	; 0x04
    36c4:	c1 2c       	mov	r12, r1
    36c6:	dd 24       	eor	r13, r13
    36c8:	d3 94       	inc	r13
    36ca:	8c 81       	ldd	r24, Y+4	; 0x04
    36cc:	9d 81       	ldd	r25, Y+5	; 0x05
    36ce:	40 96       	adiw	r24, 0x10	; 16
    36d0:	88 16       	cp	r8, r24
    36d2:	99 06       	cpc	r9, r25
    36d4:	20 f4       	brcc	.+8      	; 0x36de <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x9a>
    36d6:	48 2c       	mov	r4, r8
    36d8:	9c 81       	ldd	r25, Y+4	; 0x04
    36da:	49 1a       	sub	r4, r25
    36dc:	03 c0       	rjmp	.+6      	; 0x36e4 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xa0>
    36de:	68 94       	set
    36e0:	44 24       	eor	r4, r4
    36e2:	44 f8       	bld	r4, 4
    36e4:	84 2d       	mov	r24, r4
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	96 01       	movw	r18, r12
    36ea:	25 19       	sub	r18, r5
    36ec:	31 09       	sbc	r19, r1
    36ee:	28 17       	cp	r18, r24
    36f0:	39 07       	cpc	r19, r25
    36f2:	14 f4       	brge	.+4      	; 0x36f8 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xb4>
    36f4:	45 2c       	mov	r4, r5
    36f6:	41 94       	neg	r4
    36f8:	ea 81       	ldd	r30, Y+2	; 0x02
    36fa:	ee 23       	and	r30, r30
    36fc:	a9 f0       	breq	.+42     	; 0x3728 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xe4>
    36fe:	44 20       	and	r4, r4
    3700:	b9 f0       	breq	.+46     	; 0x3730 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xec>
    3702:	ec 81       	ldd	r30, Y+4	; 0x04
    3704:	fd 81       	ldd	r31, Y+5	; 0x05
    3706:	e6 0d       	add	r30, r6
    3708:	f7 1d       	adc	r31, r7
    370a:	d7 01       	movw	r26, r14
    370c:	2f ef       	ldi	r18, 0xFF	; 255
    370e:	24 0d       	add	r18, r4
    3710:	30 e0       	ldi	r19, 0x00	; 0
    3712:	2f 5f       	subi	r18, 0xFF	; 255
    3714:	3f 4f       	sbci	r19, 0xFF	; 255
    3716:	2e 0d       	add	r18, r14
    3718:	3f 1d       	adc	r19, r15
    371a:	84 91       	lpm	r24, Z
    371c:	8d 93       	st	X+, r24
    371e:	31 96       	adiw	r30, 0x01	; 1
    3720:	a2 17       	cp	r26, r18
    3722:	b3 07       	cpc	r27, r19
    3724:	d1 f7       	brne	.-12     	; 0x371a <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xd6>
    3726:	04 c0       	rjmp	.+8      	; 0x3730 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xec>
    3728:	ec 80       	ldd	r14, Y+4	; 0x04
    372a:	fd 80       	ldd	r15, Y+5	; 0x05
    372c:	e6 0c       	add	r14, r6
    372e:	f7 1c       	adc	r15, r7
    3730:	97 01       	movw	r18, r14
    3732:	44 2d       	mov	r20, r4
    3734:	6f e6       	ldi	r22, 0x6F	; 111
    3736:	f5 01       	movw	r30, r10
    3738:	80 81       	ld	r24, Z
    373a:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <_ZN6I2Cdev10writeBytesEhhhPh>
    373e:	fb 81       	ldd	r31, Y+3	; 0x03
    3740:	ff 23       	and	r31, r31
    3742:	59 f1       	breq	.+86     	; 0x379a <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x156>
    3744:	21 14       	cp	r2, r1
    3746:	31 04       	cpc	r3, r1
    3748:	41 f1       	breq	.+80     	; 0x379a <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x156>
    374a:	20 e0       	ldi	r18, 0x00	; 0
    374c:	40 e0       	ldi	r20, 0x00	; 0
    374e:	69 81       	ldd	r22, Y+1	; 0x01
    3750:	c5 01       	movw	r24, r10
    3752:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZN7MPU605013setMemoryBankEhbb>
    3756:	65 2d       	mov	r22, r5
    3758:	c5 01       	movw	r24, r10
    375a:	0e 94 9c 1a 	call	0x3538	; 0x3538 <_ZN7MPU605021setMemoryStartAddressEh>
    375e:	00 91 18 01 	lds	r16, 0x0118	; 0x800118 <_ZN6I2Cdev11readTimeoutE>
    3762:	10 91 19 01 	lds	r17, 0x0119	; 0x800119 <_ZN6I2Cdev11readTimeoutE+0x1>
    3766:	91 01       	movw	r18, r2
    3768:	44 2d       	mov	r20, r4
    376a:	6f e6       	ldi	r22, 0x6F	; 111
    376c:	f5 01       	movw	r30, r10
    376e:	80 81       	ld	r24, Z
    3770:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <_ZN6I2Cdev9readBytesEhhhPhj>
    3774:	44 2d       	mov	r20, r4
    3776:	50 e0       	ldi	r21, 0x00	; 0
    3778:	b1 01       	movw	r22, r2
    377a:	c7 01       	movw	r24, r14
    377c:	0e 94 3a 21 	call	0x4274	; 0x4274 <memcmp>
    3780:	89 2b       	or	r24, r25
    3782:	59 f0       	breq	.+22     	; 0x379a <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x156>
    3784:	c1 01       	movw	r24, r2
    3786:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <free>
    378a:	fa 81       	ldd	r31, Y+2	; 0x02
    378c:	ff 23       	and	r31, r31
    378e:	61 f1       	breq	.+88     	; 0x37e8 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x1a4>
    3790:	c7 01       	movw	r24, r14
    3792:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <free>
    3796:	80 e0       	ldi	r24, 0x00	; 0
    3798:	2a c0       	rjmp	.+84     	; 0x37ee <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x1aa>
    379a:	8c 81       	ldd	r24, Y+4	; 0x04
    379c:	9d 81       	ldd	r25, Y+5	; 0x05
    379e:	84 0d       	add	r24, r4
    37a0:	91 1d       	adc	r25, r1
    37a2:	9d 83       	std	Y+5, r25	; 0x05
    37a4:	8c 83       	std	Y+4, r24	; 0x04
    37a6:	88 15       	cp	r24, r8
    37a8:	99 05       	cpc	r25, r9
    37aa:	80 f4       	brcc	.+32     	; 0x37cc <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x188>
    37ac:	54 0c       	add	r5, r4
    37ae:	19 f4       	brne	.+6      	; 0x37b6 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x172>
    37b0:	99 81       	ldd	r25, Y+1	; 0x01
    37b2:	9f 5f       	subi	r25, 0xFF	; 255
    37b4:	99 83       	std	Y+1, r25	; 0x01
    37b6:	20 e0       	ldi	r18, 0x00	; 0
    37b8:	40 e0       	ldi	r20, 0x00	; 0
    37ba:	69 81       	ldd	r22, Y+1	; 0x01
    37bc:	c5 01       	movw	r24, r10
    37be:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZN7MPU605013setMemoryBankEhbb>
    37c2:	65 2d       	mov	r22, r5
    37c4:	c5 01       	movw	r24, r10
    37c6:	0e 94 9c 1a 	call	0x3538	; 0x3538 <_ZN7MPU605021setMemoryStartAddressEh>
    37ca:	7f cf       	rjmp	.-258    	; 0x36ca <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x86>
    37cc:	eb 81       	ldd	r30, Y+3	; 0x03
    37ce:	ee 23       	and	r30, r30
    37d0:	19 f0       	breq	.+6      	; 0x37d8 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x194>
    37d2:	c1 01       	movw	r24, r2
    37d4:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <free>
    37d8:	fa 81       	ldd	r31, Y+2	; 0x02
    37da:	ff 23       	and	r31, r31
    37dc:	39 f0       	breq	.+14     	; 0x37ec <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x1a8>
    37de:	c7 01       	movw	r24, r14
    37e0:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <free>
    37e4:	81 e0       	ldi	r24, 0x01	; 1
    37e6:	03 c0       	rjmp	.+6      	; 0x37ee <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x1aa>
    37e8:	80 e0       	ldi	r24, 0x00	; 0
    37ea:	01 c0       	rjmp	.+2      	; 0x37ee <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x1aa>
    37ec:	81 e0       	ldi	r24, 0x01	; 1
    37ee:	0f 90       	pop	r0
    37f0:	0f 90       	pop	r0
    37f2:	0f 90       	pop	r0
    37f4:	0f 90       	pop	r0
    37f6:	0f 90       	pop	r0
    37f8:	df 91       	pop	r29
    37fa:	cf 91       	pop	r28
    37fc:	1f 91       	pop	r17
    37fe:	0f 91       	pop	r16
    3800:	ff 90       	pop	r15
    3802:	ef 90       	pop	r14
    3804:	df 90       	pop	r13
    3806:	cf 90       	pop	r12
    3808:	bf 90       	pop	r11
    380a:	af 90       	pop	r10
    380c:	9f 90       	pop	r9
    380e:	8f 90       	pop	r8
    3810:	7f 90       	pop	r7
    3812:	6f 90       	pop	r6
    3814:	5f 90       	pop	r5
    3816:	4f 90       	pop	r4
    3818:	3f 90       	pop	r3
    381a:	2f 90       	pop	r2
    381c:	08 95       	ret

0000381e <_ZN7MPU605020writeProgMemoryBlockEPKhjhhb>:
    381e:	cf 92       	push	r12
    3820:	ef 92       	push	r14
    3822:	0f 93       	push	r16
    3824:	cc 24       	eor	r12, r12
    3826:	c3 94       	inc	r12
    3828:	0e 94 22 1b 	call	0x3644	; 0x3644 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>
    382c:	0f 91       	pop	r16
    382e:	ef 90       	pop	r14
    3830:	cf 90       	pop	r12
    3832:	08 95       	ret

00003834 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb>:
    3834:	2f 92       	push	r2
    3836:	3f 92       	push	r3
    3838:	4f 92       	push	r4
    383a:	5f 92       	push	r5
    383c:	6f 92       	push	r6
    383e:	7f 92       	push	r7
    3840:	8f 92       	push	r8
    3842:	9f 92       	push	r9
    3844:	af 92       	push	r10
    3846:	bf 92       	push	r11
    3848:	cf 92       	push	r12
    384a:	ef 92       	push	r14
    384c:	ff 92       	push	r15
    384e:	0f 93       	push	r16
    3850:	1f 93       	push	r17
    3852:	cf 93       	push	r28
    3854:	df 93       	push	r29
    3856:	1c 01       	movw	r2, r24
    3858:	4b 01       	movw	r8, r22
    385a:	2a 01       	movw	r4, r20
    385c:	f2 2e       	mov	r15, r18
    385e:	22 23       	and	r18, r18
    3860:	09 f4       	brne	.+2      	; 0x3864 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x30>
    3862:	7e c0       	rjmp	.+252    	; 0x3960 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x12c>
    3864:	88 e0       	ldi	r24, 0x08	; 8
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <malloc>
    386c:	3c 01       	movw	r6, r24
    386e:	41 14       	cp	r4, r1
    3870:	51 04       	cpc	r5, r1
    3872:	19 f4       	brne	.+6      	; 0x387a <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x46>
    3874:	6c c0       	rjmp	.+216    	; 0x394e <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x11a>
    3876:	61 2c       	mov	r6, r1
    3878:	71 2c       	mov	r7, r1
    387a:	c0 e0       	ldi	r28, 0x00	; 0
    387c:	d0 e0       	ldi	r29, 0x00	; 0
    387e:	ff 20       	and	r15, r15
    3880:	a9 f0       	breq	.+42     	; 0x38ac <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x78>
    3882:	f4 01       	movw	r30, r8
    3884:	ec 0f       	add	r30, r28
    3886:	fd 1f       	adc	r31, r29
    3888:	14 91       	lpm	r17, Z
    388a:	fe 01       	movw	r30, r28
    388c:	31 96       	adiw	r30, 0x01	; 1
    388e:	e8 0d       	add	r30, r8
    3890:	f9 1d       	adc	r31, r9
    3892:	04 91       	lpm	r16, Z
    3894:	5e 01       	movw	r10, r28
    3896:	83 e0       	ldi	r24, 0x03	; 3
    3898:	a8 0e       	add	r10, r24
    389a:	b1 1c       	adc	r11, r1
    389c:	fe 01       	movw	r30, r28
    389e:	32 96       	adiw	r30, 0x02	; 2
    38a0:	e8 0d       	add	r30, r8
    38a2:	f9 1d       	adc	r31, r9
    38a4:	e4 90       	lpm	r14, Z
    38a6:	e1 10       	cpse	r14, r1
    38a8:	0e c0       	rjmp	.+28     	; 0x38c6 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x92>
    38aa:	5f c0       	rjmp	.+190    	; 0x396a <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x136>
    38ac:	f4 01       	movw	r30, r8
    38ae:	ec 0f       	add	r30, r28
    38b0:	fd 1f       	adc	r31, r29
    38b2:	10 81       	ld	r17, Z
    38b4:	01 81       	ldd	r16, Z+1	; 0x01
    38b6:	5e 01       	movw	r10, r28
    38b8:	83 e0       	ldi	r24, 0x03	; 3
    38ba:	a8 0e       	add	r10, r24
    38bc:	b1 1c       	adc	r11, r1
    38be:	e2 80       	ldd	r14, Z+2	; 0x02
    38c0:	e1 10       	cpse	r14, r1
    38c2:	1c c0       	rjmp	.+56     	; 0x38fc <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xc8>
    38c4:	58 c0       	rjmp	.+176    	; 0x3976 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x142>
    38c6:	e2 e0       	ldi	r30, 0x02	; 2
    38c8:	ee 15       	cp	r30, r14
    38ca:	30 f4       	brcc	.+12     	; 0x38d8 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xa4>
    38cc:	6e 2d       	mov	r22, r14
    38ce:	70 e0       	ldi	r23, 0x00	; 0
    38d0:	c3 01       	movw	r24, r6
    38d2:	0e 94 70 20 	call	0x40e0	; 0x40e0 <realloc>
    38d6:	3c 01       	movw	r6, r24
    38d8:	2e 2d       	mov	r18, r14
    38da:	30 e0       	ldi	r19, 0x00	; 0
    38dc:	21 15       	cp	r18, r1
    38de:	31 05       	cpc	r19, r1
    38e0:	81 f0       	breq	.+32     	; 0x3902 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xce>
    38e2:	f4 01       	movw	r30, r8
    38e4:	ea 0d       	add	r30, r10
    38e6:	fb 1d       	adc	r31, r11
    38e8:	d3 01       	movw	r26, r6
    38ea:	26 0d       	add	r18, r6
    38ec:	37 1d       	adc	r19, r7
    38ee:	84 91       	lpm	r24, Z
    38f0:	8d 93       	st	X+, r24
    38f2:	31 96       	adiw	r30, 0x01	; 1
    38f4:	a2 17       	cp	r26, r18
    38f6:	b3 07       	cpc	r27, r19
    38f8:	d1 f7       	brne	.-12     	; 0x38ee <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xba>
    38fa:	03 c0       	rjmp	.+6      	; 0x3902 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xce>
    38fc:	34 01       	movw	r6, r8
    38fe:	6a 0c       	add	r6, r10
    3900:	7b 1c       	adc	r7, r11
    3902:	ce 2d       	mov	r28, r14
    3904:	d0 e0       	ldi	r29, 0x00	; 0
    3906:	c1 2c       	mov	r12, r1
    3908:	ee 24       	eor	r14, r14
    390a:	e3 94       	inc	r14
    390c:	21 2f       	mov	r18, r17
    390e:	ae 01       	movw	r20, r28
    3910:	b3 01       	movw	r22, r6
    3912:	c1 01       	movw	r24, r2
    3914:	0e 94 22 1b 	call	0x3644	; 0x3644 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>
    3918:	ca 0d       	add	r28, r10
    391a:	db 1d       	adc	r29, r11
    391c:	81 11       	cpse	r24, r1
    391e:	11 c0       	rjmp	.+34     	; 0x3942 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x10e>
    3920:	09 c0       	rjmp	.+18     	; 0x3934 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x100>
    3922:	e1 30       	cpi	r30, 0x01	; 1
    3924:	39 f4       	brne	.+14     	; 0x3934 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x100>
    3926:	42 e3       	ldi	r20, 0x32	; 50
    3928:	68 e3       	ldi	r22, 0x38	; 56
    392a:	f1 01       	movw	r30, r2
    392c:	80 81       	ld	r24, Z
    392e:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <_ZN6I2Cdev9writeByteEhhh>
    3932:	07 c0       	rjmp	.+14     	; 0x3942 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x10e>
    3934:	ff 20       	and	r15, r15
    3936:	81 f0       	breq	.+32     	; 0x3958 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x124>
    3938:	c3 01       	movw	r24, r6
    393a:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <free>
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	20 c0       	rjmp	.+64     	; 0x3982 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x14e>
    3942:	c4 15       	cp	r28, r4
    3944:	d5 05       	cpc	r29, r5
    3946:	08 f4       	brcc	.+2      	; 0x394a <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x116>
    3948:	9a cf       	rjmp	.-204    	; 0x387e <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x4a>
    394a:	ff 20       	and	r15, r15
    394c:	39 f0       	breq	.+14     	; 0x395c <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x128>
    394e:	c3 01       	movw	r24, r6
    3950:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <free>
    3954:	81 e0       	ldi	r24, 0x01	; 1
    3956:	15 c0       	rjmp	.+42     	; 0x3982 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x14e>
    3958:	80 e0       	ldi	r24, 0x00	; 0
    395a:	13 c0       	rjmp	.+38     	; 0x3982 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x14e>
    395c:	81 e0       	ldi	r24, 0x01	; 1
    395e:	11 c0       	rjmp	.+34     	; 0x3982 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x14e>
    3960:	45 2b       	or	r20, r21
    3962:	09 f0       	breq	.+2      	; 0x3966 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x132>
    3964:	88 cf       	rjmp	.-240    	; 0x3876 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x42>
    3966:	81 e0       	ldi	r24, 0x01	; 1
    3968:	0c c0       	rjmp	.+24     	; 0x3982 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x14e>
    396a:	24 96       	adiw	r28, 0x04	; 4
    396c:	f4 01       	movw	r30, r8
    396e:	ea 0d       	add	r30, r10
    3970:	fb 1d       	adc	r31, r11
    3972:	e4 91       	lpm	r30, Z
    3974:	d6 cf       	rjmp	.-84     	; 0x3922 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xee>
    3976:	24 96       	adiw	r28, 0x04	; 4
    3978:	f4 01       	movw	r30, r8
    397a:	ea 0d       	add	r30, r10
    397c:	fb 1d       	adc	r31, r11
    397e:	e0 81       	ld	r30, Z
    3980:	d0 cf       	rjmp	.-96     	; 0x3922 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xee>
    3982:	df 91       	pop	r29
    3984:	cf 91       	pop	r28
    3986:	1f 91       	pop	r17
    3988:	0f 91       	pop	r16
    398a:	ff 90       	pop	r15
    398c:	ef 90       	pop	r14
    398e:	cf 90       	pop	r12
    3990:	bf 90       	pop	r11
    3992:	af 90       	pop	r10
    3994:	9f 90       	pop	r9
    3996:	8f 90       	pop	r8
    3998:	7f 90       	pop	r7
    399a:	6f 90       	pop	r6
    399c:	5f 90       	pop	r5
    399e:	4f 90       	pop	r4
    39a0:	3f 90       	pop	r3
    39a2:	2f 90       	pop	r2
    39a4:	08 95       	ret

000039a6 <_ZN7MPU605028writeProgDMPConfigurationSetEPKhj>:
    39a6:	21 e0       	ldi	r18, 0x01	; 1
    39a8:	0e 94 1a 1c 	call	0x3834	; 0x3834 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb>
    39ac:	08 95       	ret

000039ae <_ZN7MPU605013setDMPConfig1Eh>:
    39ae:	46 2f       	mov	r20, r22
    39b0:	60 e7       	ldi	r22, 0x70	; 112
    39b2:	fc 01       	movw	r30, r24
    39b4:	80 81       	ld	r24, Z
    39b6:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <_ZN6I2Cdev9writeByteEhhh>
    39ba:	08 95       	ret

000039bc <_ZN7MPU605013setDMPConfig2Eh>:
void MPU6050::setDMPConfig2(uint8_t config) {
    39bc:	46 2f       	mov	r20, r22
    I2Cdev::writeByte(devAddr, MPU6050_RA_DMP_CFG_2, config);
    39be:	61 e7       	ldi	r22, 0x71	; 113
    39c0:	fc 01       	movw	r30, r24
    39c2:	80 81       	ld	r24, Z
    39c4:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <_ZN6I2Cdev9writeByteEhhh>
    39c8:	08 95       	ret

000039ca <_ZN6I2Cdev10writeBytesEhhhPh>:
 * @param regAddr First register address to write to
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {
    39ca:	ef 92       	push	r14
    39cc:	ff 92       	push	r15
    39ce:	0f 93       	push	r16
    39d0:	1f 93       	push	r17
    39d2:	cf 93       	push	r28
    39d4:	df 93       	push	r29
    39d6:	00 d0       	rcall	.+0      	; 0x39d8 <_ZN6I2Cdev10writeBytesEhhhPh+0xe>
    39d8:	cd b7       	in	r28, 0x3d	; 61
    39da:	de b7       	in	r29, 0x3e	; 62
    39dc:	06 2f       	mov	r16, r22
    39de:	14 2f       	mov	r17, r20
    uint8_t status = 0;
    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
        Wire.beginTransmission(devAddr);
        Wire.send((uint8_t) regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
        Wire.beginTransmission(devAddr);
    39e0:	68 2f       	mov	r22, r24
    39e2:	81 e7       	ldi	r24, 0x71	; 113
    39e4:	92 e0       	ldi	r25, 0x02	; 2
    39e6:	29 83       	std	Y+1, r18	; 0x01
    39e8:	3a 83       	std	Y+2, r19	; 0x02
    39ea:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t) regAddr); // send address
    39ee:	60 2f       	mov	r22, r16
    39f0:	81 e7       	ldi	r24, 0x71	; 113
    39f2:	92 e0       	ldi	r25, 0x02	; 2
    39f4:	0e 94 1e 14 	call	0x283c	; 0x283c <_ZN7TwoWire5writeEh>
    39f8:	29 81       	ldd	r18, Y+1	; 0x01
    39fa:	02 2f       	mov	r16, r18
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
    39fc:	e2 2e       	mov	r14, r18
    39fe:	3a 81       	ldd	r19, Y+2	; 0x02
    3a00:	f3 2e       	mov	r15, r19
    3a02:	8e 2d       	mov	r24, r14
    3a04:	80 1b       	sub	r24, r16
    3a06:	81 17       	cp	r24, r17
    3a08:	40 f4       	brcc	.+16     	; 0x3a1a <_ZN6I2Cdev10writeBytesEhhhPh+0x50>
            if (i + 1 < length) Serial.print(" ");
        #endif
        #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
            Wire.send((uint8_t) data[i]);
        #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
            Wire.write((uint8_t) data[i]);
    3a0a:	f7 01       	movw	r30, r14
    3a0c:	61 91       	ld	r22, Z+
    3a0e:	7f 01       	movw	r14, r30
    3a10:	81 e7       	ldi	r24, 0x71	; 113
    3a12:	92 e0       	ldi	r25, 0x02	; 2
    3a14:	0e 94 1e 14 	call	0x283c	; 0x283c <_ZN7TwoWire5writeEh>
    3a18:	f4 cf       	rjmp	.-24     	; 0x3a02 <_ZN6I2Cdev10writeBytesEhhhPh+0x38>
        #endif
    }
    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
        Wire.endTransmission();
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
        status = Wire.endTransmission();
    3a1a:	81 e7       	ldi	r24, 0x71	; 113
    3a1c:	92 e0       	ldi	r25, 0x02	; 2
    3a1e:	0e 94 ef 14 	call	0x29de	; 0x29de <_ZN7TwoWire15endTransmissionEv>
        //status = Fastwire::endTransmission();
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
    3a22:	91 e0       	ldi	r25, 0x01	; 1
    3a24:	81 11       	cpse	r24, r1
    3a26:	90 e0       	ldi	r25, 0x00	; 0
}
    3a28:	89 2f       	mov	r24, r25
    3a2a:	0f 90       	pop	r0
    3a2c:	0f 90       	pop	r0
    3a2e:	df 91       	pop	r29
    3a30:	cf 91       	pop	r28
    3a32:	1f 91       	pop	r17
    3a34:	0f 91       	pop	r16
    3a36:	ff 90       	pop	r15
    3a38:	ef 90       	pop	r14
    3a3a:	08 95       	ret

00003a3c <_ZN6I2Cdev9writeByteEhhh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
    3a3c:	cf 93       	push	r28
    3a3e:	df 93       	push	r29
    3a40:	1f 92       	push	r1
    3a42:	cd b7       	in	r28, 0x3d	; 61
    3a44:	de b7       	in	r29, 0x3e	; 62
    3a46:	49 83       	std	Y+1, r20	; 0x01
    return writeBytes(devAddr, regAddr, 1, &data);
    3a48:	9e 01       	movw	r18, r28
    3a4a:	2f 5f       	subi	r18, 0xFF	; 255
    3a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a4e:	41 e0       	ldi	r20, 0x01	; 1
    3a50:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <_ZN6I2Cdev10writeBytesEhhhPh>
}
    3a54:	0f 90       	pop	r0
    3a56:	df 91       	pop	r29
    3a58:	cf 91       	pop	r28
    3a5a:	08 95       	ret

00003a5c <_ZN6I2Cdev10writeWordsEhhhPj>:
 * @param regAddr First register address to write to
 * @param length Number of words to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeWords(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint16_t* data) {
    3a5c:	df 92       	push	r13
    3a5e:	ef 92       	push	r14
    3a60:	ff 92       	push	r15
    3a62:	0f 93       	push	r16
    3a64:	1f 93       	push	r17
    3a66:	cf 93       	push	r28
    3a68:	df 93       	push	r29
    3a6a:	c6 2f       	mov	r28, r22
    3a6c:	04 2f       	mov	r16, r20
    3a6e:	79 01       	movw	r14, r18
    uint8_t status = 0;
    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
        Wire.beginTransmission(devAddr);
        Wire.send(regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
        Wire.beginTransmission(devAddr);
    3a70:	68 2f       	mov	r22, r24
    3a72:	81 e7       	ldi	r24, 0x71	; 113
    3a74:	92 e0       	ldi	r25, 0x02	; 2
    3a76:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <_ZN7TwoWire17beginTransmissionEh>
        Wire.write(regAddr); // send address
    3a7a:	6c 2f       	mov	r22, r28
    3a7c:	81 e7       	ldi	r24, 0x71	; 113
    3a7e:	92 e0       	ldi	r25, 0x02	; 2
    3a80:	0e 94 1e 14 	call	0x283c	; 0x283c <_ZN7TwoWire5writeEh>
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length * 2; i++) {
    3a84:	10 e0       	ldi	r17, 0x00	; 0
    3a86:	00 0f       	add	r16, r16
    3a88:	11 1f       	adc	r17, r17
    3a8a:	d1 2c       	mov	r13, r1
    3a8c:	cd 2d       	mov	r28, r13
    3a8e:	d0 e0       	ldi	r29, 0x00	; 0
    3a90:	c0 17       	cp	r28, r16
    3a92:	d1 07       	cpc	r29, r17
    3a94:	8c f4       	brge	.+34     	; 0x3ab8 <_ZN6I2Cdev10writeWordsEhhhPj+0x5c>
        #endif
        #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
            Wire.send((uint8_t)(data[i] >> 8));     // send MSB
            Wire.send((uint8_t)data[i++]);          // send LSB
        #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
            Wire.write((uint8_t)(data[i] >> 8));    // send MSB
    3a96:	cc 0f       	add	r28, r28
    3a98:	dd 1f       	adc	r29, r29
    3a9a:	ce 0d       	add	r28, r14
    3a9c:	df 1d       	adc	r29, r15
    3a9e:	69 81       	ldd	r22, Y+1	; 0x01
    3aa0:	81 e7       	ldi	r24, 0x71	; 113
    3aa2:	92 e0       	ldi	r25, 0x02	; 2
    3aa4:	0e 94 1e 14 	call	0x283c	; 0x283c <_ZN7TwoWire5writeEh>
            Wire.write((uint8_t)data[i++]);         // send LSB
    3aa8:	68 81       	ld	r22, Y
    3aaa:	81 e7       	ldi	r24, 0x71	; 113
    3aac:	92 e0       	ldi	r25, 0x02	; 2
    3aae:	0e 94 1e 14 	call	0x283c	; 0x283c <_ZN7TwoWire5writeEh>
        Wire.write(regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length * 2; i++) {
    3ab2:	d3 94       	inc	r13
    3ab4:	d3 94       	inc	r13
    3ab6:	ea cf       	rjmp	.-44     	; 0x3a8c <_ZN6I2Cdev10writeWordsEhhhPj+0x30>
        #endif
    }
    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
        Wire.endTransmission();
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
        status = Wire.endTransmission();
    3ab8:	81 e7       	ldi	r24, 0x71	; 113
    3aba:	92 e0       	ldi	r25, 0x02	; 2
    3abc:	0e 94 ef 14 	call	0x29de	; 0x29de <_ZN7TwoWire15endTransmissionEv>
        //status = Fastwire::endTransmission();
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
    3ac0:	91 e0       	ldi	r25, 0x01	; 1
    3ac2:	81 11       	cpse	r24, r1
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
}
    3ac6:	89 2f       	mov	r24, r25
    3ac8:	df 91       	pop	r29
    3aca:	cf 91       	pop	r28
    3acc:	1f 91       	pop	r17
    3ace:	0f 91       	pop	r16
    3ad0:	ff 90       	pop	r15
    3ad2:	ef 90       	pop	r14
    3ad4:	df 90       	pop	r13
    3ad6:	08 95       	ret

00003ad8 <_ZN6I2Cdev9writeWordEhhj>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New word value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data) {
    3ad8:	cf 93       	push	r28
    3ada:	df 93       	push	r29
    3adc:	00 d0       	rcall	.+0      	; 0x3ade <_ZN6I2Cdev9writeWordEhhj+0x6>
    3ade:	cd b7       	in	r28, 0x3d	; 61
    3ae0:	de b7       	in	r29, 0x3e	; 62
    3ae2:	5a 83       	std	Y+2, r21	; 0x02
    3ae4:	49 83       	std	Y+1, r20	; 0x01
    return writeWords(devAddr, regAddr, 1, &data);
    3ae6:	9e 01       	movw	r18, r28
    3ae8:	2f 5f       	subi	r18, 0xFF	; 255
    3aea:	3f 4f       	sbci	r19, 0xFF	; 255
    3aec:	41 e0       	ldi	r20, 0x01	; 1
    3aee:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <_ZN6I2Cdev10writeWordsEhhhPj>
}
    3af2:	0f 90       	pop	r0
    3af4:	0f 90       	pop	r0
    3af6:	df 91       	pop	r29
    3af8:	cf 91       	pop	r28
    3afa:	08 95       	ret

00003afc <_ZN6I2Cdev9readBytesEhhhPhj>:
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
    3afc:	2f 92       	push	r2
    3afe:	3f 92       	push	r3
    3b00:	4f 92       	push	r4
    3b02:	5f 92       	push	r5
    3b04:	6f 92       	push	r6
    3b06:	7f 92       	push	r7
    3b08:	8f 92       	push	r8
    3b0a:	9f 92       	push	r9
    3b0c:	af 92       	push	r10
    3b0e:	bf 92       	push	r11
    3b10:	cf 92       	push	r12
    3b12:	df 92       	push	r13
    3b14:	ef 92       	push	r14
    3b16:	ff 92       	push	r15
    3b18:	0f 93       	push	r16
    3b1a:	1f 93       	push	r17
    3b1c:	cf 93       	push	r28
    3b1e:	df 93       	push	r29
    3b20:	00 d0       	rcall	.+0      	; 0x3b22 <_ZN6I2Cdev9readBytesEhhhPhj+0x26>
    3b22:	00 d0       	rcall	.+0      	; 0x3b24 <_ZN6I2Cdev9readBytesEhhhPhj+0x28>
    3b24:	1f 92       	push	r1
    3b26:	cd b7       	in	r28, 0x3d	; 61
    3b28:	de b7       	in	r29, 0x3e	; 62
    3b2a:	f8 2e       	mov	r15, r24
    3b2c:	e6 2e       	mov	r14, r22
    3b2e:	24 2e       	mov	r2, r20
    3b30:	69 01       	movw	r12, r18
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif

    int8_t count = 0;
    uint32_t t1 = millis();
    3b32:	0e 94 40 15 	call	0x2a80	; 0x2a80 <millis>
    3b36:	4b 01       	movw	r8, r22
    3b38:	5c 01       	movw	r10, r24
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
    3b3a:	31 2c       	mov	r3, r1
        Serial.print(" bytes from 0x");
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif

    int8_t count = 0;
    3b3c:	1d 82       	std	Y+5, r1	; 0x05
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
                Wire.beginTransmission(devAddr);
                Wire.write(regAddr);
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
    3b3e:	82 2d       	mov	r24, r2
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	9c 83       	std	Y+4, r25	; 0x04
    3b44:	8b 83       	std	Y+3, r24	; 0x03
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    3b46:	28 01       	movw	r4, r16
    3b48:	61 2c       	mov	r6, r1
    3b4a:	71 2c       	mov	r7, r1
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
    3b4c:	32 14       	cp	r3, r2
    3b4e:	08 f0       	brcs	.+2      	; 0x3b52 <_ZN6I2Cdev9readBytesEhhhPhj+0x56>
    3b50:	51 c0       	rjmp	.+162    	; 0x3bf4 <_ZN6I2Cdev9readBytesEhhhPhj+0xf8>
                Wire.beginTransmission(devAddr);
    3b52:	6f 2d       	mov	r22, r15
    3b54:	81 e7       	ldi	r24, 0x71	; 113
    3b56:	92 e0       	ldi	r25, 0x02	; 2
    3b58:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <_ZN7TwoWire17beginTransmissionEh>
                Wire.write(regAddr);
    3b5c:	6e 2d       	mov	r22, r14
    3b5e:	81 e7       	ldi	r24, 0x71	; 113
    3b60:	92 e0       	ldi	r25, 0x02	; 2
    3b62:	0e 94 1e 14 	call	0x283c	; 0x283c <_ZN7TwoWire5writeEh>
                Wire.endTransmission();
    3b66:	81 e7       	ldi	r24, 0x71	; 113
    3b68:	92 e0       	ldi	r25, 0x02	; 2
    3b6a:	0e 94 ef 14 	call	0x29de	; 0x29de <_ZN7TwoWire15endTransmissionEv>
                Wire.beginTransmission(devAddr);
    3b6e:	6f 2d       	mov	r22, r15
    3b70:	81 e7       	ldi	r24, 0x71	; 113
    3b72:	92 e0       	ldi	r25, 0x02	; 2
    3b74:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <_ZN7TwoWire17beginTransmissionEh>
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
    3b78:	4b 81       	ldd	r20, Y+3	; 0x03
    3b7a:	5c 81       	ldd	r21, Y+4	; 0x04
    3b7c:	43 19       	sub	r20, r3
    3b7e:	51 09       	sbc	r21, r1
    3b80:	41 32       	cpi	r20, 0x21	; 33
    3b82:	51 05       	cpc	r21, r1
    3b84:	14 f0       	brlt	.+4      	; 0x3b8a <_ZN6I2Cdev9readBytesEhhhPhj+0x8e>
    3b86:	40 e2       	ldi	r20, 0x20	; 32
    3b88:	50 e0       	ldi	r21, 0x00	; 0
    3b8a:	6f 2d       	mov	r22, r15
    3b8c:	81 e7       	ldi	r24, 0x71	; 113
    3b8e:	92 e0       	ldi	r25, 0x02	; 2
    3b90:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <_ZN7TwoWire11requestFromEhh>
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    3b94:	81 e7       	ldi	r24, 0x71	; 113
    3b96:	92 e0       	ldi	r25, 0x02	; 2
    3b98:	0e 94 c2 13 	call	0x2784	; 0x2784 <_ZN7TwoWire9availableEv>
    3b9c:	89 2b       	or	r24, r25
    3b9e:	19 f1       	breq	.+70     	; 0x3be6 <_ZN6I2Cdev9readBytesEhhhPhj+0xea>
    3ba0:	01 15       	cp	r16, r1
    3ba2:	11 05       	cpc	r17, r1
    3ba4:	99 f4       	brne	.+38     	; 0x3bcc <_ZN6I2Cdev9readBytesEhhhPhj+0xd0>
                    data[count] = Wire.read();
    3ba6:	f6 01       	movw	r30, r12
    3ba8:	2d 81       	ldd	r18, Y+5	; 0x05
    3baa:	e2 0f       	add	r30, r18
    3bac:	f1 1d       	adc	r31, r1
    3bae:	27 fd       	sbrc	r18, 7
    3bb0:	fa 95       	dec	r31
    3bb2:	fa 83       	std	Y+2, r31	; 0x02
    3bb4:	e9 83       	std	Y+1, r30	; 0x01
    3bb6:	81 e7       	ldi	r24, 0x71	; 113
    3bb8:	92 e0       	ldi	r25, 0x02	; 2
    3bba:	0e 94 ca 13 	call	0x2794	; 0x2794 <_ZN7TwoWire4readEv>
    3bbe:	e9 81       	ldd	r30, Y+1	; 0x01
    3bc0:	fa 81       	ldd	r31, Y+2	; 0x02
    3bc2:	80 83       	st	Z, r24
    3bc4:	2d 81       	ldd	r18, Y+5	; 0x05
    3bc6:	2f 5f       	subi	r18, 0xFF	; 255
    3bc8:	2d 83       	std	Y+5, r18	; 0x05
    3bca:	e4 cf       	rjmp	.-56     	; 0x3b94 <_ZN6I2Cdev9readBytesEhhhPhj+0x98>
                Wire.write(regAddr);
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    3bcc:	0e 94 40 15 	call	0x2a80	; 0x2a80 <millis>
    3bd0:	dc 01       	movw	r26, r24
    3bd2:	cb 01       	movw	r24, r22
    3bd4:	88 19       	sub	r24, r8
    3bd6:	99 09       	sbc	r25, r9
    3bd8:	aa 09       	sbc	r26, r10
    3bda:	bb 09       	sbc	r27, r11
    3bdc:	84 15       	cp	r24, r4
    3bde:	95 05       	cpc	r25, r5
    3be0:	a6 05       	cpc	r26, r6
    3be2:	b7 05       	cpc	r27, r7
    3be4:	00 f3       	brcs	.-64     	; 0x3ba6 <_ZN6I2Cdev9readBytesEhhhPhj+0xaa>
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
    3be6:	82 2d       	mov	r24, r2
    3be8:	40 e2       	ldi	r20, 0x20	; 32
    3bea:	42 15       	cp	r20, r2
    3bec:	08 f4       	brcc	.+2      	; 0x3bf0 <_ZN6I2Cdev9readBytesEhhhPhj+0xf4>
    3bee:	80 e2       	ldi	r24, 0x20	; 32
    3bf0:	38 0e       	add	r3, r24
    3bf2:	ac cf       	rjmp	.-168    	; 0x3b4c <_ZN6I2Cdev9readBytesEhhhPhj+0x50>
        }

    #endif

    // check for timeout
    if (timeout > 0 && millis() - t1 >= timeout && count < length) count = -1; // timeout
    3bf4:	01 15       	cp	r16, r1
    3bf6:	11 05       	cpc	r17, r1
    3bf8:	d1 f0       	breq	.+52     	; 0x3c2e <_ZN6I2Cdev9readBytesEhhhPhj+0x132>
    3bfa:	0e 94 40 15 	call	0x2a80	; 0x2a80 <millis>
    3bfe:	dc 01       	movw	r26, r24
    3c00:	cb 01       	movw	r24, r22
    3c02:	88 19       	sub	r24, r8
    3c04:	99 09       	sbc	r25, r9
    3c06:	aa 09       	sbc	r26, r10
    3c08:	bb 09       	sbc	r27, r11
    3c0a:	20 e0       	ldi	r18, 0x00	; 0
    3c0c:	30 e0       	ldi	r19, 0x00	; 0
    3c0e:	80 17       	cp	r24, r16
    3c10:	91 07       	cpc	r25, r17
    3c12:	a2 07       	cpc	r26, r18
    3c14:	b3 07       	cpc	r27, r19
    3c16:	58 f0       	brcs	.+22     	; 0x3c2e <_ZN6I2Cdev9readBytesEhhhPhj+0x132>
    3c18:	82 2d       	mov	r24, r2
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	ed 81       	ldd	r30, Y+5	; 0x05
    3c1e:	2e 2f       	mov	r18, r30
    3c20:	ee 0f       	add	r30, r30
    3c22:	33 0b       	sbc	r19, r19
    3c24:	28 17       	cp	r18, r24
    3c26:	39 07       	cpc	r19, r25
    3c28:	14 f4       	brge	.+4      	; 0x3c2e <_ZN6I2Cdev9readBytesEhhhPhj+0x132>
    3c2a:	2f ef       	ldi	r18, 0xFF	; 255
    3c2c:	2d 83       	std	Y+5, r18	; 0x05
        Serial.print(count, DEC);
        Serial.println(" read).");
    #endif

    return count;
}
    3c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c30:	0f 90       	pop	r0
    3c32:	0f 90       	pop	r0
    3c34:	0f 90       	pop	r0
    3c36:	0f 90       	pop	r0
    3c38:	0f 90       	pop	r0
    3c3a:	df 91       	pop	r29
    3c3c:	cf 91       	pop	r28
    3c3e:	1f 91       	pop	r17
    3c40:	0f 91       	pop	r16
    3c42:	ff 90       	pop	r15
    3c44:	ef 90       	pop	r14
    3c46:	df 90       	pop	r13
    3c48:	cf 90       	pop	r12
    3c4a:	bf 90       	pop	r11
    3c4c:	af 90       	pop	r10
    3c4e:	9f 90       	pop	r9
    3c50:	8f 90       	pop	r8
    3c52:	7f 90       	pop	r7
    3c54:	6f 90       	pop	r6
    3c56:	5f 90       	pop	r5
    3c58:	4f 90       	pop	r4
    3c5a:	3f 90       	pop	r3
    3c5c:	2f 90       	pop	r2
    3c5e:	08 95       	ret

00003c60 <_ZN6I2Cdev8readByteEhhPhj>:
 * @param regAddr Register regAddr to read from
 * @param data Container for byte value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
    3c60:	0f 93       	push	r16
    3c62:	1f 93       	push	r17
    return readBytes(devAddr, regAddr, 1, data, timeout);
    3c64:	89 01       	movw	r16, r18
    3c66:	9a 01       	movw	r18, r20
    3c68:	41 e0       	ldi	r20, 0x01	; 1
    3c6a:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <_ZN6I2Cdev9readBytesEhhhPhj>
}
    3c6e:	1f 91       	pop	r17
    3c70:	0f 91       	pop	r16
    3c72:	08 95       	ret

00003c74 <_ZN6I2Cdev7readBitEhhhPhj>:
 * @param bitNum Bit position to read (0-7)
 * @param data Container for single bit value
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t *data, uint16_t timeout) {
    3c74:	df 92       	push	r13
    3c76:	ef 92       	push	r14
    3c78:	ff 92       	push	r15
    3c7a:	0f 93       	push	r16
    3c7c:	1f 93       	push	r17
    3c7e:	cf 93       	push	r28
    3c80:	df 93       	push	r29
    3c82:	1f 92       	push	r1
    3c84:	cd b7       	in	r28, 0x3d	; 61
    3c86:	de b7       	in	r29, 0x3e	; 62
    3c88:	d4 2e       	mov	r13, r20
    3c8a:	79 01       	movw	r14, r18
    3c8c:	98 01       	movw	r18, r16
    uint8_t b;
    uint8_t count = readByte(devAddr, regAddr, &b, timeout);
    3c8e:	ae 01       	movw	r20, r28
    3c90:	4f 5f       	subi	r20, 0xFF	; 255
    3c92:	5f 4f       	sbci	r21, 0xFF	; 255
    3c94:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <_ZN6I2Cdev8readByteEhhPhj>
    *data = b & (1 << bitNum);
    3c98:	61 e0       	ldi	r22, 0x01	; 1
    3c9a:	70 e0       	ldi	r23, 0x00	; 0
    3c9c:	ab 01       	movw	r20, r22
    3c9e:	01 c0       	rjmp	.+2      	; 0x3ca2 <_ZN6I2Cdev7readBitEhhhPhj+0x2e>
    3ca0:	44 0f       	add	r20, r20
    3ca2:	da 94       	dec	r13
    3ca4:	ea f7       	brpl	.-6      	; 0x3ca0 <_ZN6I2Cdev7readBitEhhhPhj+0x2c>
    3ca6:	99 81       	ldd	r25, Y+1	; 0x01
    3ca8:	49 23       	and	r20, r25
    3caa:	f7 01       	movw	r30, r14
    3cac:	40 83       	st	Z, r20
    return count;
}
    3cae:	0f 90       	pop	r0
    3cb0:	df 91       	pop	r29
    3cb2:	cf 91       	pop	r28
    3cb4:	1f 91       	pop	r17
    3cb6:	0f 91       	pop	r16
    3cb8:	ff 90       	pop	r15
    3cba:	ef 90       	pop	r14
    3cbc:	df 90       	pop	r13
    3cbe:	08 95       	ret

00003cc0 <_ZN6I2Cdev8readBitsEhhhhPhj>:
 * @param length Number of bits to read (not more than 8)
 * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {
    3cc0:	cf 92       	push	r12
    3cc2:	df 92       	push	r13
    3cc4:	ef 92       	push	r14
    3cc6:	ff 92       	push	r15
    3cc8:	0f 93       	push	r16
    3cca:	1f 93       	push	r17
    3ccc:	cf 93       	push	r28
    3cce:	df 93       	push	r29
    3cd0:	1f 92       	push	r1
    3cd2:	cd b7       	in	r28, 0x3d	; 61
    3cd4:	de b7       	in	r29, 0x3e	; 62
    3cd6:	d4 2e       	mov	r13, r20
    3cd8:	c2 2e       	mov	r12, r18
    3cda:	97 01       	movw	r18, r14
    // 76543210 bit numbers
    //    xxx   args: bitStart=4, length=3
    //    010   masked
    //   -> 010 shifted
    uint8_t count, b;
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
    3cdc:	ae 01       	movw	r20, r28
    3cde:	4f 5f       	subi	r20, 0xFF	; 255
    3ce0:	5f 4f       	sbci	r21, 0xFF	; 255
    3ce2:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <_ZN6I2Cdev8readByteEhhPhj>
    3ce6:	88 23       	and	r24, r24
    3ce8:	f1 f0       	breq	.+60     	; 0x3d26 <_ZN6I2Cdev8readBitsEhhhhPhj+0x66>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    3cea:	4d 2d       	mov	r20, r13
    3cec:	50 e0       	ldi	r21, 0x00	; 0
    3cee:	4c 19       	sub	r20, r12
    3cf0:	51 09       	sbc	r21, r1
    3cf2:	4f 5f       	subi	r20, 0xFF	; 255
    3cf4:	5f 4f       	sbci	r21, 0xFF	; 255
    3cf6:	21 e0       	ldi	r18, 0x01	; 1
    3cf8:	30 e0       	ldi	r19, 0x00	; 0
    3cfa:	02 c0       	rjmp	.+4      	; 0x3d00 <_ZN6I2Cdev8readBitsEhhhhPhj+0x40>
    3cfc:	22 0f       	add	r18, r18
    3cfe:	33 1f       	adc	r19, r19
    3d00:	ca 94       	dec	r12
    3d02:	e2 f7       	brpl	.-8      	; 0x3cfc <_ZN6I2Cdev8readBitsEhhhhPhj+0x3c>
    3d04:	21 50       	subi	r18, 0x01	; 1
    3d06:	31 09       	sbc	r19, r1
    3d08:	04 2e       	mov	r0, r20
    3d0a:	01 c0       	rjmp	.+2      	; 0x3d0e <_ZN6I2Cdev8readBitsEhhhhPhj+0x4e>
    3d0c:	22 0f       	add	r18, r18
    3d0e:	0a 94       	dec	r0
    3d10:	ea f7       	brpl	.-6      	; 0x3d0c <_ZN6I2Cdev8readBitsEhhhhPhj+0x4c>
        b &= mask;
    3d12:	99 81       	ldd	r25, Y+1	; 0x01
    3d14:	29 23       	and	r18, r25
        b >>= (bitStart - length + 1);
    3d16:	30 e0       	ldi	r19, 0x00	; 0
    3d18:	02 c0       	rjmp	.+4      	; 0x3d1e <_ZN6I2Cdev8readBitsEhhhhPhj+0x5e>
    3d1a:	35 95       	asr	r19
    3d1c:	27 95       	ror	r18
    3d1e:	4a 95       	dec	r20
    3d20:	e2 f7       	brpl	.-8      	; 0x3d1a <_ZN6I2Cdev8readBitsEhhhhPhj+0x5a>
    3d22:	f8 01       	movw	r30, r16
    3d24:	20 83       	st	Z, r18
        *data = b;
    }
    return count;
}
    3d26:	0f 90       	pop	r0
    3d28:	df 91       	pop	r29
    3d2a:	cf 91       	pop	r28
    3d2c:	1f 91       	pop	r17
    3d2e:	0f 91       	pop	r16
    3d30:	ff 90       	pop	r15
    3d32:	ef 90       	pop	r14
    3d34:	df 90       	pop	r13
    3d36:	cf 90       	pop	r12
    3d38:	08 95       	ret

00003d3a <_ZN6I2Cdev8writeBitEhhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    3d3a:	ef 92       	push	r14
    3d3c:	ff 92       	push	r15
    3d3e:	0f 93       	push	r16
    3d40:	1f 93       	push	r17
    3d42:	cf 93       	push	r28
    3d44:	df 93       	push	r29
    3d46:	1f 92       	push	r1
    3d48:	cd b7       	in	r28, 0x3d	; 61
    3d4a:	de b7       	in	r29, 0x3e	; 62
    3d4c:	18 2f       	mov	r17, r24
    3d4e:	06 2f       	mov	r16, r22
    3d50:	f4 2e       	mov	r15, r20
    3d52:	e2 2e       	mov	r14, r18
    uint8_t b;
    readByte(devAddr, regAddr, &b);
    3d54:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <_ZN6I2Cdev11readTimeoutE>
    3d58:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <_ZN6I2Cdev11readTimeoutE+0x1>
    3d5c:	ae 01       	movw	r20, r28
    3d5e:	4f 5f       	subi	r20, 0xFF	; 255
    3d60:	5f 4f       	sbci	r21, 0xFF	; 255
    3d62:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <_ZN6I2Cdev8readByteEhhPhj>
    3d66:	99 81       	ldd	r25, Y+1	; 0x01
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    3d68:	ee 20       	and	r14, r14
    3d6a:	41 f0       	breq	.+16     	; 0x3d7c <_ZN6I2Cdev8writeBitEhhhh+0x42>
    3d6c:	41 e0       	ldi	r20, 0x01	; 1
    3d6e:	50 e0       	ldi	r21, 0x00	; 0
    3d70:	01 c0       	rjmp	.+2      	; 0x3d74 <_ZN6I2Cdev8writeBitEhhhh+0x3a>
    3d72:	44 0f       	add	r20, r20
    3d74:	fa 94       	dec	r15
    3d76:	ea f7       	brpl	.-6      	; 0x3d72 <_ZN6I2Cdev8writeBitEhhhh+0x38>
    3d78:	49 2b       	or	r20, r25
    3d7a:	09 c0       	rjmp	.+18     	; 0x3d8e <_ZN6I2Cdev8writeBitEhhhh+0x54>
    3d7c:	21 e0       	ldi	r18, 0x01	; 1
    3d7e:	30 e0       	ldi	r19, 0x00	; 0
    3d80:	a9 01       	movw	r20, r18
    3d82:	01 c0       	rjmp	.+2      	; 0x3d86 <_ZN6I2Cdev8writeBitEhhhh+0x4c>
    3d84:	44 0f       	add	r20, r20
    3d86:	fa 94       	dec	r15
    3d88:	ea f7       	brpl	.-6      	; 0x3d84 <_ZN6I2Cdev8writeBitEhhhh+0x4a>
    3d8a:	40 95       	com	r20
    3d8c:	49 23       	and	r20, r25
    3d8e:	49 83       	std	Y+1, r20	; 0x01
    return writeByte(devAddr, regAddr, b);
    3d90:	60 2f       	mov	r22, r16
    3d92:	81 2f       	mov	r24, r17
    3d94:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <_ZN6I2Cdev9writeByteEhhh>
}
    3d98:	0f 90       	pop	r0
    3d9a:	df 91       	pop	r29
    3d9c:	cf 91       	pop	r28
    3d9e:	1f 91       	pop	r17
    3da0:	0f 91       	pop	r16
    3da2:	ff 90       	pop	r15
    3da4:	ef 90       	pop	r14
    3da6:	08 95       	ret

00003da8 <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
    3da8:	df 92       	push	r13
    3daa:	ef 92       	push	r14
    3dac:	ff 92       	push	r15
    3dae:	0f 93       	push	r16
    3db0:	1f 93       	push	r17
    3db2:	cf 93       	push	r28
    3db4:	df 93       	push	r29
    3db6:	1f 92       	push	r1
    3db8:	cd b7       	in	r28, 0x3d	; 61
    3dba:	de b7       	in	r29, 0x3e	; 62
    3dbc:	18 2f       	mov	r17, r24
    3dbe:	f6 2e       	mov	r15, r22
    3dc0:	e4 2e       	mov	r14, r20
    3dc2:	d2 2e       	mov	r13, r18
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
    3dc4:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <_ZN6I2Cdev11readTimeoutE>
    3dc8:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <_ZN6I2Cdev11readTimeoutE+0x1>
    3dcc:	ae 01       	movw	r20, r28
    3dce:	4f 5f       	subi	r20, 0xFF	; 255
    3dd0:	5f 4f       	sbci	r21, 0xFF	; 255
    3dd2:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <_ZN6I2Cdev8readByteEhhPhj>
    3dd6:	88 23       	and	r24, r24
    3dd8:	21 f1       	breq	.+72     	; 0x3e22 <_ZN6I2Cdev9writeBitsEhhhhh+0x7a>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    3dda:	ee 2d       	mov	r30, r14
    3ddc:	f0 e0       	ldi	r31, 0x00	; 0
    3dde:	ed 19       	sub	r30, r13
    3de0:	f1 09       	sbc	r31, r1
    3de2:	31 96       	adiw	r30, 0x01	; 1
    3de4:	21 e0       	ldi	r18, 0x01	; 1
    3de6:	30 e0       	ldi	r19, 0x00	; 0
    3de8:	02 c0       	rjmp	.+4      	; 0x3dee <_ZN6I2Cdev9writeBitsEhhhhh+0x46>
    3dea:	22 0f       	add	r18, r18
    3dec:	33 1f       	adc	r19, r19
    3dee:	da 94       	dec	r13
    3df0:	e2 f7       	brpl	.-8      	; 0x3dea <_ZN6I2Cdev9writeBitsEhhhhh+0x42>
    3df2:	21 50       	subi	r18, 0x01	; 1
    3df4:	31 09       	sbc	r19, r1
    3df6:	0e 2e       	mov	r0, r30
    3df8:	01 c0       	rjmp	.+2      	; 0x3dfc <_ZN6I2Cdev9writeBitsEhhhhh+0x54>
    3dfa:	22 0f       	add	r18, r18
    3dfc:	0a 94       	dec	r0
    3dfe:	ea f7       	brpl	.-6      	; 0x3dfa <_ZN6I2Cdev9writeBitsEhhhhh+0x52>
        data <<= (bitStart - length + 1); // shift data into correct position
    3e00:	80 2f       	mov	r24, r16
    3e02:	01 c0       	rjmp	.+2      	; 0x3e06 <_ZN6I2Cdev9writeBitsEhhhhh+0x5e>
    3e04:	88 0f       	add	r24, r24
    3e06:	ea 95       	dec	r30
    3e08:	ea f7       	brpl	.-6      	; 0x3e04 <_ZN6I2Cdev9writeBitsEhhhhh+0x5c>
        data &= mask; // zero all non-important bits in data
        b &= ~(mask); // zero all important bits in existing byte
    3e0a:	42 2f       	mov	r20, r18
    3e0c:	40 95       	com	r20
    3e0e:	99 81       	ldd	r25, Y+1	; 0x01
    3e10:	49 23       	and	r20, r25
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
        data <<= (bitStart - length + 1); // shift data into correct position
        data &= mask; // zero all non-important bits in data
    3e12:	28 23       	and	r18, r24
        b &= ~(mask); // zero all important bits in existing byte
        b |= data; // combine data with existing byte
    3e14:	42 2b       	or	r20, r18
    3e16:	49 83       	std	Y+1, r20	; 0x01
        return writeByte(devAddr, regAddr, b);
    3e18:	6f 2d       	mov	r22, r15
    3e1a:	81 2f       	mov	r24, r17
    3e1c:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <_ZN6I2Cdev9writeByteEhhh>
    3e20:	01 c0       	rjmp	.+2      	; 0x3e24 <_ZN6I2Cdev9writeBitsEhhhhh+0x7c>
    } else {
        return false;
    3e22:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    3e24:	0f 90       	pop	r0
    3e26:	df 91       	pop	r29
    3e28:	cf 91       	pop	r28
    3e2a:	1f 91       	pop	r17
    3e2c:	0f 91       	pop	r16
    3e2e:	ff 90       	pop	r15
    3e30:	ef 90       	pop	r14
    3e32:	df 90       	pop	r13
    3e34:	08 95       	ret

00003e36 <__udivmodsi4>:
    3e36:	a1 e2       	ldi	r26, 0x21	; 33
    3e38:	1a 2e       	mov	r1, r26
    3e3a:	aa 1b       	sub	r26, r26
    3e3c:	bb 1b       	sub	r27, r27
    3e3e:	fd 01       	movw	r30, r26
    3e40:	0d c0       	rjmp	.+26     	; 0x3e5c <__udivmodsi4_ep>

00003e42 <__udivmodsi4_loop>:
    3e42:	aa 1f       	adc	r26, r26
    3e44:	bb 1f       	adc	r27, r27
    3e46:	ee 1f       	adc	r30, r30
    3e48:	ff 1f       	adc	r31, r31
    3e4a:	a2 17       	cp	r26, r18
    3e4c:	b3 07       	cpc	r27, r19
    3e4e:	e4 07       	cpc	r30, r20
    3e50:	f5 07       	cpc	r31, r21
    3e52:	20 f0       	brcs	.+8      	; 0x3e5c <__udivmodsi4_ep>
    3e54:	a2 1b       	sub	r26, r18
    3e56:	b3 0b       	sbc	r27, r19
    3e58:	e4 0b       	sbc	r30, r20
    3e5a:	f5 0b       	sbc	r31, r21

00003e5c <__udivmodsi4_ep>:
    3e5c:	66 1f       	adc	r22, r22
    3e5e:	77 1f       	adc	r23, r23
    3e60:	88 1f       	adc	r24, r24
    3e62:	99 1f       	adc	r25, r25
    3e64:	1a 94       	dec	r1
    3e66:	69 f7       	brne	.-38     	; 0x3e42 <__udivmodsi4_loop>
    3e68:	60 95       	com	r22
    3e6a:	70 95       	com	r23
    3e6c:	80 95       	com	r24
    3e6e:	90 95       	com	r25
    3e70:	9b 01       	movw	r18, r22
    3e72:	ac 01       	movw	r20, r24
    3e74:	bd 01       	movw	r22, r26
    3e76:	cf 01       	movw	r24, r30
    3e78:	08 95       	ret

00003e7a <__tablejump2__>:
    3e7a:	ee 0f       	add	r30, r30
    3e7c:	ff 1f       	adc	r31, r31
    3e7e:	05 90       	lpm	r0, Z+
    3e80:	f4 91       	lpm	r31, Z
    3e82:	e0 2d       	mov	r30, r0
    3e84:	09 94       	ijmp

00003e86 <malloc>:
    3e86:	cf 93       	push	r28
    3e88:	df 93       	push	r29
    3e8a:	82 30       	cpi	r24, 0x02	; 2
    3e8c:	91 05       	cpc	r25, r1
    3e8e:	10 f4       	brcc	.+4      	; 0x3e94 <malloc+0xe>
    3e90:	82 e0       	ldi	r24, 0x02	; 2
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	e0 91 3c 03 	lds	r30, 0x033C	; 0x80033c <__flp>
    3e98:	f0 91 3d 03 	lds	r31, 0x033D	; 0x80033d <__flp+0x1>
    3e9c:	20 e0       	ldi	r18, 0x00	; 0
    3e9e:	30 e0       	ldi	r19, 0x00	; 0
    3ea0:	c0 e0       	ldi	r28, 0x00	; 0
    3ea2:	d0 e0       	ldi	r29, 0x00	; 0
    3ea4:	30 97       	sbiw	r30, 0x00	; 0
    3ea6:	11 f1       	breq	.+68     	; 0x3eec <malloc+0x66>
    3ea8:	40 81       	ld	r20, Z
    3eaa:	51 81       	ldd	r21, Z+1	; 0x01
    3eac:	48 17       	cp	r20, r24
    3eae:	59 07       	cpc	r21, r25
    3eb0:	c0 f0       	brcs	.+48     	; 0x3ee2 <malloc+0x5c>
    3eb2:	48 17       	cp	r20, r24
    3eb4:	59 07       	cpc	r21, r25
    3eb6:	61 f4       	brne	.+24     	; 0x3ed0 <malloc+0x4a>
    3eb8:	82 81       	ldd	r24, Z+2	; 0x02
    3eba:	93 81       	ldd	r25, Z+3	; 0x03
    3ebc:	20 97       	sbiw	r28, 0x00	; 0
    3ebe:	19 f0       	breq	.+6      	; 0x3ec6 <malloc+0x40>
    3ec0:	9b 83       	std	Y+3, r25	; 0x03
    3ec2:	8a 83       	std	Y+2, r24	; 0x02
    3ec4:	2b c0       	rjmp	.+86     	; 0x3f1c <malloc+0x96>
    3ec6:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <__flp+0x1>
    3eca:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <__flp>
    3ece:	26 c0       	rjmp	.+76     	; 0x3f1c <malloc+0x96>
    3ed0:	21 15       	cp	r18, r1
    3ed2:	31 05       	cpc	r19, r1
    3ed4:	19 f0       	breq	.+6      	; 0x3edc <malloc+0x56>
    3ed6:	42 17       	cp	r20, r18
    3ed8:	53 07       	cpc	r21, r19
    3eda:	18 f4       	brcc	.+6      	; 0x3ee2 <malloc+0x5c>
    3edc:	9a 01       	movw	r18, r20
    3ede:	be 01       	movw	r22, r28
    3ee0:	df 01       	movw	r26, r30
    3ee2:	ef 01       	movw	r28, r30
    3ee4:	02 80       	ldd	r0, Z+2	; 0x02
    3ee6:	f3 81       	ldd	r31, Z+3	; 0x03
    3ee8:	e0 2d       	mov	r30, r0
    3eea:	dc cf       	rjmp	.-72     	; 0x3ea4 <malloc+0x1e>
    3eec:	21 15       	cp	r18, r1
    3eee:	31 05       	cpc	r19, r1
    3ef0:	09 f1       	breq	.+66     	; 0x3f34 <malloc+0xae>
    3ef2:	28 1b       	sub	r18, r24
    3ef4:	39 0b       	sbc	r19, r25
    3ef6:	24 30       	cpi	r18, 0x04	; 4
    3ef8:	31 05       	cpc	r19, r1
    3efa:	90 f4       	brcc	.+36     	; 0x3f20 <malloc+0x9a>
    3efc:	12 96       	adiw	r26, 0x02	; 2
    3efe:	8d 91       	ld	r24, X+
    3f00:	9c 91       	ld	r25, X
    3f02:	13 97       	sbiw	r26, 0x03	; 3
    3f04:	61 15       	cp	r22, r1
    3f06:	71 05       	cpc	r23, r1
    3f08:	21 f0       	breq	.+8      	; 0x3f12 <malloc+0x8c>
    3f0a:	fb 01       	movw	r30, r22
    3f0c:	93 83       	std	Z+3, r25	; 0x03
    3f0e:	82 83       	std	Z+2, r24	; 0x02
    3f10:	04 c0       	rjmp	.+8      	; 0x3f1a <malloc+0x94>
    3f12:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <__flp+0x1>
    3f16:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <__flp>
    3f1a:	fd 01       	movw	r30, r26
    3f1c:	32 96       	adiw	r30, 0x02	; 2
    3f1e:	44 c0       	rjmp	.+136    	; 0x3fa8 <malloc+0x122>
    3f20:	fd 01       	movw	r30, r26
    3f22:	e2 0f       	add	r30, r18
    3f24:	f3 1f       	adc	r31, r19
    3f26:	81 93       	st	Z+, r24
    3f28:	91 93       	st	Z+, r25
    3f2a:	22 50       	subi	r18, 0x02	; 2
    3f2c:	31 09       	sbc	r19, r1
    3f2e:	2d 93       	st	X+, r18
    3f30:	3c 93       	st	X, r19
    3f32:	3a c0       	rjmp	.+116    	; 0x3fa8 <malloc+0x122>
    3f34:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <__brkval>
    3f38:	30 91 3b 03 	lds	r19, 0x033B	; 0x80033b <__brkval+0x1>
    3f3c:	23 2b       	or	r18, r19
    3f3e:	41 f4       	brne	.+16     	; 0x3f50 <malloc+0xca>
    3f40:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3f44:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3f48:	30 93 3b 03 	sts	0x033B, r19	; 0x80033b <__brkval+0x1>
    3f4c:	20 93 3a 03 	sts	0x033A, r18	; 0x80033a <__brkval>
    3f50:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3f54:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3f58:	21 15       	cp	r18, r1
    3f5a:	31 05       	cpc	r19, r1
    3f5c:	41 f4       	brne	.+16     	; 0x3f6e <malloc+0xe8>
    3f5e:	2d b7       	in	r18, 0x3d	; 61
    3f60:	3e b7       	in	r19, 0x3e	; 62
    3f62:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3f66:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3f6a:	24 1b       	sub	r18, r20
    3f6c:	35 0b       	sbc	r19, r21
    3f6e:	e0 91 3a 03 	lds	r30, 0x033A	; 0x80033a <__brkval>
    3f72:	f0 91 3b 03 	lds	r31, 0x033B	; 0x80033b <__brkval+0x1>
    3f76:	e2 17       	cp	r30, r18
    3f78:	f3 07       	cpc	r31, r19
    3f7a:	a0 f4       	brcc	.+40     	; 0x3fa4 <malloc+0x11e>
    3f7c:	2e 1b       	sub	r18, r30
    3f7e:	3f 0b       	sbc	r19, r31
    3f80:	28 17       	cp	r18, r24
    3f82:	39 07       	cpc	r19, r25
    3f84:	78 f0       	brcs	.+30     	; 0x3fa4 <malloc+0x11e>
    3f86:	ac 01       	movw	r20, r24
    3f88:	4e 5f       	subi	r20, 0xFE	; 254
    3f8a:	5f 4f       	sbci	r21, 0xFF	; 255
    3f8c:	24 17       	cp	r18, r20
    3f8e:	35 07       	cpc	r19, r21
    3f90:	48 f0       	brcs	.+18     	; 0x3fa4 <malloc+0x11e>
    3f92:	4e 0f       	add	r20, r30
    3f94:	5f 1f       	adc	r21, r31
    3f96:	50 93 3b 03 	sts	0x033B, r21	; 0x80033b <__brkval+0x1>
    3f9a:	40 93 3a 03 	sts	0x033A, r20	; 0x80033a <__brkval>
    3f9e:	81 93       	st	Z+, r24
    3fa0:	91 93       	st	Z+, r25
    3fa2:	02 c0       	rjmp	.+4      	; 0x3fa8 <malloc+0x122>
    3fa4:	e0 e0       	ldi	r30, 0x00	; 0
    3fa6:	f0 e0       	ldi	r31, 0x00	; 0
    3fa8:	cf 01       	movw	r24, r30
    3faa:	df 91       	pop	r29
    3fac:	cf 91       	pop	r28
    3fae:	08 95       	ret

00003fb0 <free>:
    3fb0:	0f 93       	push	r16
    3fb2:	1f 93       	push	r17
    3fb4:	cf 93       	push	r28
    3fb6:	df 93       	push	r29
    3fb8:	00 97       	sbiw	r24, 0x00	; 0
    3fba:	09 f4       	brne	.+2      	; 0x3fbe <free+0xe>
    3fbc:	8c c0       	rjmp	.+280    	; 0x40d6 <free+0x126>
    3fbe:	fc 01       	movw	r30, r24
    3fc0:	32 97       	sbiw	r30, 0x02	; 2
    3fc2:	13 82       	std	Z+3, r1	; 0x03
    3fc4:	12 82       	std	Z+2, r1	; 0x02
    3fc6:	00 91 3c 03 	lds	r16, 0x033C	; 0x80033c <__flp>
    3fca:	10 91 3d 03 	lds	r17, 0x033D	; 0x80033d <__flp+0x1>
    3fce:	01 15       	cp	r16, r1
    3fd0:	11 05       	cpc	r17, r1
    3fd2:	81 f4       	brne	.+32     	; 0x3ff4 <free+0x44>
    3fd4:	20 81       	ld	r18, Z
    3fd6:	31 81       	ldd	r19, Z+1	; 0x01
    3fd8:	82 0f       	add	r24, r18
    3fda:	93 1f       	adc	r25, r19
    3fdc:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <__brkval>
    3fe0:	30 91 3b 03 	lds	r19, 0x033B	; 0x80033b <__brkval+0x1>
    3fe4:	28 17       	cp	r18, r24
    3fe6:	39 07       	cpc	r19, r25
    3fe8:	79 f5       	brne	.+94     	; 0x4048 <free+0x98>
    3fea:	f0 93 3b 03 	sts	0x033B, r31	; 0x80033b <__brkval+0x1>
    3fee:	e0 93 3a 03 	sts	0x033A, r30	; 0x80033a <__brkval>
    3ff2:	71 c0       	rjmp	.+226    	; 0x40d6 <free+0x126>
    3ff4:	d8 01       	movw	r26, r16
    3ff6:	40 e0       	ldi	r20, 0x00	; 0
    3ff8:	50 e0       	ldi	r21, 0x00	; 0
    3ffa:	ae 17       	cp	r26, r30
    3ffc:	bf 07       	cpc	r27, r31
    3ffe:	50 f4       	brcc	.+20     	; 0x4014 <free+0x64>
    4000:	12 96       	adiw	r26, 0x02	; 2
    4002:	2d 91       	ld	r18, X+
    4004:	3c 91       	ld	r19, X
    4006:	13 97       	sbiw	r26, 0x03	; 3
    4008:	ad 01       	movw	r20, r26
    400a:	21 15       	cp	r18, r1
    400c:	31 05       	cpc	r19, r1
    400e:	09 f1       	breq	.+66     	; 0x4052 <free+0xa2>
    4010:	d9 01       	movw	r26, r18
    4012:	f3 cf       	rjmp	.-26     	; 0x3ffa <free+0x4a>
    4014:	9d 01       	movw	r18, r26
    4016:	da 01       	movw	r26, r20
    4018:	33 83       	std	Z+3, r19	; 0x03
    401a:	22 83       	std	Z+2, r18	; 0x02
    401c:	60 81       	ld	r22, Z
    401e:	71 81       	ldd	r23, Z+1	; 0x01
    4020:	86 0f       	add	r24, r22
    4022:	97 1f       	adc	r25, r23
    4024:	82 17       	cp	r24, r18
    4026:	93 07       	cpc	r25, r19
    4028:	69 f4       	brne	.+26     	; 0x4044 <free+0x94>
    402a:	ec 01       	movw	r28, r24
    402c:	28 81       	ld	r18, Y
    402e:	39 81       	ldd	r19, Y+1	; 0x01
    4030:	26 0f       	add	r18, r22
    4032:	37 1f       	adc	r19, r23
    4034:	2e 5f       	subi	r18, 0xFE	; 254
    4036:	3f 4f       	sbci	r19, 0xFF	; 255
    4038:	31 83       	std	Z+1, r19	; 0x01
    403a:	20 83       	st	Z, r18
    403c:	8a 81       	ldd	r24, Y+2	; 0x02
    403e:	9b 81       	ldd	r25, Y+3	; 0x03
    4040:	93 83       	std	Z+3, r25	; 0x03
    4042:	82 83       	std	Z+2, r24	; 0x02
    4044:	45 2b       	or	r20, r21
    4046:	29 f4       	brne	.+10     	; 0x4052 <free+0xa2>
    4048:	f0 93 3d 03 	sts	0x033D, r31	; 0x80033d <__flp+0x1>
    404c:	e0 93 3c 03 	sts	0x033C, r30	; 0x80033c <__flp>
    4050:	42 c0       	rjmp	.+132    	; 0x40d6 <free+0x126>
    4052:	13 96       	adiw	r26, 0x03	; 3
    4054:	fc 93       	st	X, r31
    4056:	ee 93       	st	-X, r30
    4058:	12 97       	sbiw	r26, 0x02	; 2
    405a:	ed 01       	movw	r28, r26
    405c:	49 91       	ld	r20, Y+
    405e:	59 91       	ld	r21, Y+
    4060:	9e 01       	movw	r18, r28
    4062:	24 0f       	add	r18, r20
    4064:	35 1f       	adc	r19, r21
    4066:	e2 17       	cp	r30, r18
    4068:	f3 07       	cpc	r31, r19
    406a:	71 f4       	brne	.+28     	; 0x4088 <free+0xd8>
    406c:	80 81       	ld	r24, Z
    406e:	91 81       	ldd	r25, Z+1	; 0x01
    4070:	84 0f       	add	r24, r20
    4072:	95 1f       	adc	r25, r21
    4074:	02 96       	adiw	r24, 0x02	; 2
    4076:	11 96       	adiw	r26, 0x01	; 1
    4078:	9c 93       	st	X, r25
    407a:	8e 93       	st	-X, r24
    407c:	82 81       	ldd	r24, Z+2	; 0x02
    407e:	93 81       	ldd	r25, Z+3	; 0x03
    4080:	13 96       	adiw	r26, 0x03	; 3
    4082:	9c 93       	st	X, r25
    4084:	8e 93       	st	-X, r24
    4086:	12 97       	sbiw	r26, 0x02	; 2
    4088:	e0 e0       	ldi	r30, 0x00	; 0
    408a:	f0 e0       	ldi	r31, 0x00	; 0
    408c:	d8 01       	movw	r26, r16
    408e:	12 96       	adiw	r26, 0x02	; 2
    4090:	8d 91       	ld	r24, X+
    4092:	9c 91       	ld	r25, X
    4094:	13 97       	sbiw	r26, 0x03	; 3
    4096:	00 97       	sbiw	r24, 0x00	; 0
    4098:	19 f0       	breq	.+6      	; 0x40a0 <free+0xf0>
    409a:	f8 01       	movw	r30, r16
    409c:	8c 01       	movw	r16, r24
    409e:	f6 cf       	rjmp	.-20     	; 0x408c <free+0xdc>
    40a0:	8d 91       	ld	r24, X+
    40a2:	9c 91       	ld	r25, X
    40a4:	98 01       	movw	r18, r16
    40a6:	2e 5f       	subi	r18, 0xFE	; 254
    40a8:	3f 4f       	sbci	r19, 0xFF	; 255
    40aa:	82 0f       	add	r24, r18
    40ac:	93 1f       	adc	r25, r19
    40ae:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <__brkval>
    40b2:	30 91 3b 03 	lds	r19, 0x033B	; 0x80033b <__brkval+0x1>
    40b6:	28 17       	cp	r18, r24
    40b8:	39 07       	cpc	r19, r25
    40ba:	69 f4       	brne	.+26     	; 0x40d6 <free+0x126>
    40bc:	30 97       	sbiw	r30, 0x00	; 0
    40be:	29 f4       	brne	.+10     	; 0x40ca <free+0x11a>
    40c0:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <__flp+0x1>
    40c4:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <__flp>
    40c8:	02 c0       	rjmp	.+4      	; 0x40ce <free+0x11e>
    40ca:	13 82       	std	Z+3, r1	; 0x03
    40cc:	12 82       	std	Z+2, r1	; 0x02
    40ce:	10 93 3b 03 	sts	0x033B, r17	; 0x80033b <__brkval+0x1>
    40d2:	00 93 3a 03 	sts	0x033A, r16	; 0x80033a <__brkval>
    40d6:	df 91       	pop	r29
    40d8:	cf 91       	pop	r28
    40da:	1f 91       	pop	r17
    40dc:	0f 91       	pop	r16
    40de:	08 95       	ret

000040e0 <realloc>:
    40e0:	a0 e0       	ldi	r26, 0x00	; 0
    40e2:	b0 e0       	ldi	r27, 0x00	; 0
    40e4:	e6 e7       	ldi	r30, 0x76	; 118
    40e6:	f0 e2       	ldi	r31, 0x20	; 32
    40e8:	0c 94 54 21 	jmp	0x42a8	; 0x42a8 <__prologue_saves__+0x8>
    40ec:	ec 01       	movw	r28, r24
    40ee:	00 97       	sbiw	r24, 0x00	; 0
    40f0:	21 f4       	brne	.+8      	; 0x40fa <realloc+0x1a>
    40f2:	cb 01       	movw	r24, r22
    40f4:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <malloc>
    40f8:	b8 c0       	rjmp	.+368    	; 0x426a <realloc+0x18a>
    40fa:	fc 01       	movw	r30, r24
    40fc:	e6 0f       	add	r30, r22
    40fe:	f7 1f       	adc	r31, r23
    4100:	9c 01       	movw	r18, r24
    4102:	22 50       	subi	r18, 0x02	; 2
    4104:	31 09       	sbc	r19, r1
    4106:	e2 17       	cp	r30, r18
    4108:	f3 07       	cpc	r31, r19
    410a:	08 f4       	brcc	.+2      	; 0x410e <realloc+0x2e>
    410c:	ac c0       	rjmp	.+344    	; 0x4266 <realloc+0x186>
    410e:	d9 01       	movw	r26, r18
    4110:	0d 91       	ld	r16, X+
    4112:	1c 91       	ld	r17, X
    4114:	11 97       	sbiw	r26, 0x01	; 1
    4116:	06 17       	cp	r16, r22
    4118:	17 07       	cpc	r17, r23
    411a:	b0 f0       	brcs	.+44     	; 0x4148 <realloc+0x68>
    411c:	05 30       	cpi	r16, 0x05	; 5
    411e:	11 05       	cpc	r17, r1
    4120:	08 f4       	brcc	.+2      	; 0x4124 <realloc+0x44>
    4122:	9f c0       	rjmp	.+318    	; 0x4262 <realloc+0x182>
    4124:	c8 01       	movw	r24, r16
    4126:	04 97       	sbiw	r24, 0x04	; 4
    4128:	86 17       	cp	r24, r22
    412a:	97 07       	cpc	r25, r23
    412c:	08 f4       	brcc	.+2      	; 0x4130 <realloc+0x50>
    412e:	99 c0       	rjmp	.+306    	; 0x4262 <realloc+0x182>
    4130:	02 50       	subi	r16, 0x02	; 2
    4132:	11 09       	sbc	r17, r1
    4134:	06 1b       	sub	r16, r22
    4136:	17 0b       	sbc	r17, r23
    4138:	01 93       	st	Z+, r16
    413a:	11 93       	st	Z+, r17
    413c:	6d 93       	st	X+, r22
    413e:	7c 93       	st	X, r23
    4140:	cf 01       	movw	r24, r30
    4142:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <free>
    4146:	8d c0       	rjmp	.+282    	; 0x4262 <realloc+0x182>
    4148:	5b 01       	movw	r10, r22
    414a:	a0 1a       	sub	r10, r16
    414c:	b1 0a       	sbc	r11, r17
    414e:	4c 01       	movw	r8, r24
    4150:	80 0e       	add	r8, r16
    4152:	91 1e       	adc	r9, r17
    4154:	a0 91 3c 03 	lds	r26, 0x033C	; 0x80033c <__flp>
    4158:	b0 91 3d 03 	lds	r27, 0x033D	; 0x80033d <__flp+0x1>
    415c:	40 e0       	ldi	r20, 0x00	; 0
    415e:	50 e0       	ldi	r21, 0x00	; 0
    4160:	e1 2c       	mov	r14, r1
    4162:	f1 2c       	mov	r15, r1
    4164:	10 97       	sbiw	r26, 0x00	; 0
    4166:	09 f4       	brne	.+2      	; 0x416a <realloc+0x8a>
    4168:	4a c0       	rjmp	.+148    	; 0x41fe <realloc+0x11e>
    416a:	a8 15       	cp	r26, r8
    416c:	b9 05       	cpc	r27, r9
    416e:	d1 f5       	brne	.+116    	; 0x41e4 <realloc+0x104>
    4170:	6d 90       	ld	r6, X+
    4172:	7c 90       	ld	r7, X
    4174:	11 97       	sbiw	r26, 0x01	; 1
    4176:	63 01       	movw	r12, r6
    4178:	82 e0       	ldi	r24, 0x02	; 2
    417a:	c8 0e       	add	r12, r24
    417c:	d1 1c       	adc	r13, r1
    417e:	ca 14       	cp	r12, r10
    4180:	db 04       	cpc	r13, r11
    4182:	80 f1       	brcs	.+96     	; 0x41e4 <realloc+0x104>
    4184:	a3 01       	movw	r20, r6
    4186:	4a 19       	sub	r20, r10
    4188:	5b 09       	sbc	r21, r11
    418a:	6a 01       	movw	r12, r20
    418c:	82 e0       	ldi	r24, 0x02	; 2
    418e:	c8 0e       	add	r12, r24
    4190:	d1 1c       	adc	r13, r1
    4192:	12 96       	adiw	r26, 0x02	; 2
    4194:	bc 90       	ld	r11, X
    4196:	12 97       	sbiw	r26, 0x02	; 2
    4198:	13 96       	adiw	r26, 0x03	; 3
    419a:	ac 91       	ld	r26, X
    419c:	b5 e0       	ldi	r27, 0x05	; 5
    419e:	cb 16       	cp	r12, r27
    41a0:	d1 04       	cpc	r13, r1
    41a2:	40 f0       	brcs	.+16     	; 0x41b4 <realloc+0xd4>
    41a4:	b2 82       	std	Z+2, r11	; 0x02
    41a6:	a3 83       	std	Z+3, r26	; 0x03
    41a8:	51 83       	std	Z+1, r21	; 0x01
    41aa:	40 83       	st	Z, r20
    41ac:	d9 01       	movw	r26, r18
    41ae:	6d 93       	st	X+, r22
    41b0:	7c 93       	st	X, r23
    41b2:	0a c0       	rjmp	.+20     	; 0x41c8 <realloc+0xe8>
    41b4:	0e 5f       	subi	r16, 0xFE	; 254
    41b6:	1f 4f       	sbci	r17, 0xFF	; 255
    41b8:	c3 01       	movw	r24, r6
    41ba:	80 0f       	add	r24, r16
    41bc:	91 1f       	adc	r25, r17
    41be:	f9 01       	movw	r30, r18
    41c0:	91 83       	std	Z+1, r25	; 0x01
    41c2:	80 83       	st	Z, r24
    41c4:	eb 2d       	mov	r30, r11
    41c6:	fa 2f       	mov	r31, r26
    41c8:	e1 14       	cp	r14, r1
    41ca:	f1 04       	cpc	r15, r1
    41cc:	31 f0       	breq	.+12     	; 0x41da <realloc+0xfa>
    41ce:	d7 01       	movw	r26, r14
    41d0:	13 96       	adiw	r26, 0x03	; 3
    41d2:	fc 93       	st	X, r31
    41d4:	ee 93       	st	-X, r30
    41d6:	12 97       	sbiw	r26, 0x02	; 2
    41d8:	44 c0       	rjmp	.+136    	; 0x4262 <realloc+0x182>
    41da:	f0 93 3d 03 	sts	0x033D, r31	; 0x80033d <__flp+0x1>
    41de:	e0 93 3c 03 	sts	0x033C, r30	; 0x80033c <__flp>
    41e2:	3f c0       	rjmp	.+126    	; 0x4262 <realloc+0x182>
    41e4:	8d 91       	ld	r24, X+
    41e6:	9c 91       	ld	r25, X
    41e8:	11 97       	sbiw	r26, 0x01	; 1
    41ea:	48 17       	cp	r20, r24
    41ec:	59 07       	cpc	r21, r25
    41ee:	08 f4       	brcc	.+2      	; 0x41f2 <realloc+0x112>
    41f0:	ac 01       	movw	r20, r24
    41f2:	7d 01       	movw	r14, r26
    41f4:	12 96       	adiw	r26, 0x02	; 2
    41f6:	0d 90       	ld	r0, X+
    41f8:	bc 91       	ld	r27, X
    41fa:	a0 2d       	mov	r26, r0
    41fc:	b3 cf       	rjmp	.-154    	; 0x4164 <realloc+0x84>
    41fe:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <__brkval>
    4202:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <__brkval+0x1>
    4206:	88 15       	cp	r24, r8
    4208:	99 05       	cpc	r25, r9
    420a:	e1 f4       	brne	.+56     	; 0x4244 <realloc+0x164>
    420c:	46 17       	cp	r20, r22
    420e:	57 07       	cpc	r21, r23
    4210:	c8 f4       	brcc	.+50     	; 0x4244 <realloc+0x164>
    4212:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4216:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    421a:	00 97       	sbiw	r24, 0x00	; 0
    421c:	41 f4       	brne	.+16     	; 0x422e <realloc+0x14e>
    421e:	8d b7       	in	r24, 0x3d	; 61
    4220:	9e b7       	in	r25, 0x3e	; 62
    4222:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4226:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    422a:	84 1b       	sub	r24, r20
    422c:	95 0b       	sbc	r25, r21
    422e:	e8 17       	cp	r30, r24
    4230:	f9 07       	cpc	r31, r25
    4232:	c8 f4       	brcc	.+50     	; 0x4266 <realloc+0x186>
    4234:	f0 93 3b 03 	sts	0x033B, r31	; 0x80033b <__brkval+0x1>
    4238:	e0 93 3a 03 	sts	0x033A, r30	; 0x80033a <__brkval>
    423c:	f9 01       	movw	r30, r18
    423e:	71 83       	std	Z+1, r23	; 0x01
    4240:	60 83       	st	Z, r22
    4242:	0f c0       	rjmp	.+30     	; 0x4262 <realloc+0x182>
    4244:	cb 01       	movw	r24, r22
    4246:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <malloc>
    424a:	7c 01       	movw	r14, r24
    424c:	00 97       	sbiw	r24, 0x00	; 0
    424e:	59 f0       	breq	.+22     	; 0x4266 <realloc+0x186>
    4250:	a8 01       	movw	r20, r16
    4252:	be 01       	movw	r22, r28
    4254:	0e 94 47 21 	call	0x428e	; 0x428e <memcpy>
    4258:	ce 01       	movw	r24, r28
    425a:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <free>
    425e:	c7 01       	movw	r24, r14
    4260:	04 c0       	rjmp	.+8      	; 0x426a <realloc+0x18a>
    4262:	ce 01       	movw	r24, r28
    4264:	02 c0       	rjmp	.+4      	; 0x426a <realloc+0x18a>
    4266:	80 e0       	ldi	r24, 0x00	; 0
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	cd b7       	in	r28, 0x3d	; 61
    426c:	de b7       	in	r29, 0x3e	; 62
    426e:	ee e0       	ldi	r30, 0x0E	; 14
    4270:	0c 94 70 21 	jmp	0x42e0	; 0x42e0 <__epilogue_restores__+0x8>

00004274 <memcmp>:
    4274:	fb 01       	movw	r30, r22
    4276:	dc 01       	movw	r26, r24
    4278:	04 c0       	rjmp	.+8      	; 0x4282 <memcmp+0xe>
    427a:	8d 91       	ld	r24, X+
    427c:	01 90       	ld	r0, Z+
    427e:	80 19       	sub	r24, r0
    4280:	21 f4       	brne	.+8      	; 0x428a <memcmp+0x16>
    4282:	41 50       	subi	r20, 0x01	; 1
    4284:	50 40       	sbci	r21, 0x00	; 0
    4286:	c8 f7       	brcc	.-14     	; 0x427a <memcmp+0x6>
    4288:	88 1b       	sub	r24, r24
    428a:	99 0b       	sbc	r25, r25
    428c:	08 95       	ret

0000428e <memcpy>:
    428e:	fb 01       	movw	r30, r22
    4290:	dc 01       	movw	r26, r24
    4292:	02 c0       	rjmp	.+4      	; 0x4298 <memcpy+0xa>
    4294:	01 90       	ld	r0, Z+
    4296:	0d 92       	st	X+, r0
    4298:	41 50       	subi	r20, 0x01	; 1
    429a:	50 40       	sbci	r21, 0x00	; 0
    429c:	d8 f7       	brcc	.-10     	; 0x4294 <memcpy+0x6>
    429e:	08 95       	ret

000042a0 <__prologue_saves__>:
    42a0:	2f 92       	push	r2
    42a2:	3f 92       	push	r3
    42a4:	4f 92       	push	r4
    42a6:	5f 92       	push	r5
    42a8:	6f 92       	push	r6
    42aa:	7f 92       	push	r7
    42ac:	8f 92       	push	r8
    42ae:	9f 92       	push	r9
    42b0:	af 92       	push	r10
    42b2:	bf 92       	push	r11
    42b4:	cf 92       	push	r12
    42b6:	df 92       	push	r13
    42b8:	ef 92       	push	r14
    42ba:	ff 92       	push	r15
    42bc:	0f 93       	push	r16
    42be:	1f 93       	push	r17
    42c0:	cf 93       	push	r28
    42c2:	df 93       	push	r29
    42c4:	cd b7       	in	r28, 0x3d	; 61
    42c6:	de b7       	in	r29, 0x3e	; 62
    42c8:	ca 1b       	sub	r28, r26
    42ca:	db 0b       	sbc	r29, r27
    42cc:	0f b6       	in	r0, 0x3f	; 63
    42ce:	f8 94       	cli
    42d0:	de bf       	out	0x3e, r29	; 62
    42d2:	0f be       	out	0x3f, r0	; 63
    42d4:	cd bf       	out	0x3d, r28	; 61
    42d6:	09 94       	ijmp

000042d8 <__epilogue_restores__>:
    42d8:	2a 88       	ldd	r2, Y+18	; 0x12
    42da:	39 88       	ldd	r3, Y+17	; 0x11
    42dc:	48 88       	ldd	r4, Y+16	; 0x10
    42de:	5f 84       	ldd	r5, Y+15	; 0x0f
    42e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    42e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    42e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    42e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    42e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    42ea:	b9 84       	ldd	r11, Y+9	; 0x09
    42ec:	c8 84       	ldd	r12, Y+8	; 0x08
    42ee:	df 80       	ldd	r13, Y+7	; 0x07
    42f0:	ee 80       	ldd	r14, Y+6	; 0x06
    42f2:	fd 80       	ldd	r15, Y+5	; 0x05
    42f4:	0c 81       	ldd	r16, Y+4	; 0x04
    42f6:	1b 81       	ldd	r17, Y+3	; 0x03
    42f8:	aa 81       	ldd	r26, Y+2	; 0x02
    42fa:	b9 81       	ldd	r27, Y+1	; 0x01
    42fc:	ce 0f       	add	r28, r30
    42fe:	d1 1d       	adc	r29, r1
    4300:	0f b6       	in	r0, 0x3f	; 63
    4302:	f8 94       	cli
    4304:	de bf       	out	0x3e, r29	; 62
    4306:	0f be       	out	0x3f, r0	; 63
    4308:	cd bf       	out	0x3d, r28	; 61
    430a:	ed 01       	movw	r28, r26
    430c:	08 95       	ret

0000430e <_exit>:
    430e:	f8 94       	cli

00004310 <__stop_program>:
    4310:	ff cf       	rjmp	.-2      	; 0x4310 <__stop_program>
