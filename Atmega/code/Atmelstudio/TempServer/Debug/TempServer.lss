
TempServer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000180  00800100  00004dcc  00004e60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004dcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018c  00800280  00800280  00004fe0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004fe0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000503c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008a0  00000000  00000000  0000507c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002171d  00000000  00000000  0000591c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000500b  00000000  00000000  00027039  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000072dc  00000000  00000000  0002c044  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f84  00000000  00000000  00033320  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000055ec  00000000  00000000  000352a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d185  00000000  00000000  0003a890  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000bc8  00000000  00000000  00047a15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__ctors_end>
       4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
       8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
       c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      10:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      14:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      18:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      1c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      20:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      24:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      28:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      2c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      30:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      34:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      38:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      3c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      40:	0c 94 21 0b 	jmp	0x1642	; 0x1642 <__vector_16>
      44:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      48:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__vector_18>
      4c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__vector_19>
      50:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      54:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      58:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      5c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      60:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      64:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 5e       	subi	r16, 0xE0	; 224
      6a:	bc e2       	ldi	r27, 0x2C	; 44
      6c:	61 3f       	cpi	r22, 0xF1	; 241
      6e:	dd 83       	std	Y+5, r29	; 0x05
      70:	c2 9c       	mul	r12, r2
      72:	7e 20       	and	r7, r14
      74:	a3 fd       	sbrc	r26, 3
      76:	1f 41       	sbci	r17, 0x1F	; 31
      78:	9d c3       	rjmp	.+1850   	; 0x7b4 <__addsf3x+0x24>
      7a:	21 7f       	andi	r18, 0xF1	; 241
      7c:	fc a2       	std	Y+36, r15	; 0x24
      7e:	40 1e       	adc	r4, r16
      80:	5f 01       	movw	r10, r30
      82:	e3 bd       	out	0x23, r30	; 35
      84:	3e 60       	ori	r19, 0x0E	; 14
      86:	82 dc       	rcall	.-1788   	; 0xfffff98c <__eeprom_end+0xff7ef98c>
      88:	23 7d       	andi	r18, 0xD3	; 211
      8a:	9f c1       	rjmp	.+830    	; 0x3ca <setup+0x78>
      8c:	42 1c       	adc	r4, r2
      8e:	fe a0       	ldd	r15, Y+38	; 0x26
      90:	e1 bf       	out	0x31, r30	; 49
      92:	5d 03       	fmul	r21, r21
      94:	80 de       	rcall	.-768    	; 0xfffffd96 <__eeprom_end+0xff7efd96>
      96:	3c 62       	ori	r19, 0x2C	; 44
      98:	be e0       	ldi	r27, 0x0E	; 14
      9a:	02 5c       	subi	r16, 0xC2	; 194
      9c:	df 81       	ldd	r29, Y+7	; 0x07
      9e:	63 3d       	cpi	r22, 0xD3	; 211
      a0:	7c 22       	and	r7, r28
      a2:	c0 9e       	mul	r12, r16
      a4:	1d 43       	sbci	r17, 0x3D	; 61
      a6:	a1 ff       	sbrs	r26, 1
      a8:	46 18       	sub	r4, r6
      aa:	fa a4       	ldd	r15, Y+42	; 0x2a
      ac:	27 79       	andi	r18, 0x97	; 151
      ae:	9b c5       	rjmp	.+2870   	; 0xbe6 <__vector_19+0x20>
      b0:	84 da       	rcall	.-2808   	; 0xfffff5ba <__eeprom_end+0xff7ef5ba>
      b2:	38 66       	ori	r19, 0x68	; 104
      b4:	e5 bb       	out	0x15, r30	; 21
      b6:	59 07       	cpc	r21, r25
      b8:	db 85       	ldd	r29, Y+11	; 0x0b
      ba:	67 39       	cpi	r22, 0x97	; 151
      bc:	ba e4       	ldi	r27, 0x4A	; 74
      be:	06 58       	subi	r16, 0x86	; 134
      c0:	19 47       	sbci	r17, 0x79	; 121
      c2:	a5 fb       	bst	r26, 5
      c4:	78 26       	eor	r7, r24
      c6:	c4 9a       	sbi	0x18, 4	; 24
      c8:	65 3b       	cpi	r22, 0xB5	; 181
      ca:	d9 87       	std	Y+9, r29	; 0x09
      cc:	04 5a       	subi	r16, 0xA4	; 164
      ce:	b8 e6       	ldi	r27, 0x68	; 104
      d0:	a7 f9       	bld	r26, 7
      d2:	1b 45       	sbci	r17, 0x5B	; 91
      d4:	c6 98       	cbi	0x18, 6	; 24
      d6:	7a 24       	eor	r7, r10
      d8:	f8 a6       	std	Y+40, r15	; 0x28
      da:	44 1a       	sub	r4, r20
      dc:	99 c7       	rjmp	.+3890   	; 0x1010 <_ZN7OneWireC1Eh+0x2c>
      de:	25 7b       	andi	r18, 0xB5	; 181
      e0:	3a 64       	ori	r19, 0x4A	; 74
      e2:	86 d8       	rcall	.-3828   	; 0xfffff1f0 <__eeprom_end+0xff7ef1f0>
      e4:	5b 05       	cpc	r21, r11
      e6:	e7 b9       	out	0x07, r30	; 7
      e8:	8c d2       	rcall	.+1304   	; 0x602 <loop+0x1ee>
      ea:	30 6e       	ori	r19, 0xE0	; 224
      ec:	ed b3       	in	r30, 0x1d	; 29
      ee:	51 0f       	add	r21, r17
      f0:	4e 10       	cpse	r4, r14
      f2:	f2 ac       	ldd	r15, Z+58	; 0x3a
      f4:	2f 71       	andi	r18, 0x1F	; 31
      f6:	93 cd       	rjmp	.-1242   	; 0xfffffc1e <__eeprom_end+0xff7efc1e>
      f8:	11 4f       	sbci	r17, 0xF1	; 241
      fa:	ad f3       	brhs	.-22     	; 0xe6 <__trampolines_end+0x7e>
      fc:	70 2e       	mov	r7, r16
      fe:	cc 92       	st	X, r12
     100:	d3 8d       	ldd	r29, Z+27	; 0x1b
     102:	6f 31       	cpi	r22, 0x1F	; 31
     104:	b2 ec       	ldi	r27, 0xC2	; 194
     106:	0e 50       	subi	r16, 0x0E	; 14
     108:	af f1       	brie	.+106    	; 0x174 <digital_pin_to_timer_PGM+0xc>
     10a:	13 4d       	sbci	r17, 0xD3	; 211
     10c:	ce 90       	ld	r12, -X
     10e:	72 2c       	mov	r7, r2
     110:	6d 33       	cpi	r22, 0x3D	; 61
     112:	d1 8f       	std	Z+25, r29	; 0x19
     114:	0c 52       	subi	r16, 0x2C	; 44
     116:	b0 ee       	ldi	r27, 0xE0	; 224
     118:	32 6c       	ori	r19, 0xC2	; 194
     11a:	8e d0       	rcall	.+284    	; 0x238 <_Z15adresseAusgebenv+0x10>
     11c:	53 0d       	add	r21, r3
     11e:	ef b1       	in	r30, 0x0f	; 15
     120:	f0 ae       	std	Z+56, r15	; 0x38
     122:	4c 12       	cpse	r4, r28
     124:	91 cf       	rjmp	.-222    	; 0x48 <__SREG__+0x9>
     126:	2d 73       	andi	r18, 0x3D	; 61
     128:	ca 94       	dec	r12
     12a:	76 28       	or	r7, r6
     12c:	ab f5       	brvc	.+106    	; 0x198 <digital_pin_to_port_PGM+0x8>
     12e:	17 49       	sbci	r17, 0x97	; 151
     130:	08 56       	subi	r16, 0x68	; 104
     132:	b4 ea       	ldi	r27, 0xA4	; 164
     134:	69 37       	cpi	r22, 0x79	; 121
     136:	d5 8b       	std	Z+21, r29	; 0x15
     138:	57 09       	sbc	r21, r7
     13a:	eb b5       	in	r30, 0x2b	; 43
     13c:	36 68       	ori	r19, 0x86	; 134
     13e:	8a d4       	rcall	.+2324   	; 0xa54 <_ZN14HardwareSerial5writeEh+0x64>
     140:	95 cb       	rjmp	.-2262   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
     142:	29 77       	andi	r18, 0x79	; 121
     144:	f4 aa       	std	Z+52, r15	; 0x34
     146:	48 16       	cp	r4, r24
     148:	e9 b7       	in	r30, 0x39	; 57
     14a:	55 0b       	sbc	r21, r21
     14c:	88 d6       	rcall	.+3344   	; 0xe5e <_ZN7OneWire9write_bitEh+0x56>
     14e:	34 6a       	ori	r19, 0xA4	; 164
     150:	2b 75       	andi	r18, 0x5B	; 91
     152:	97 c9       	rjmp	.-3282   	; 0xfffff482 <__eeprom_end+0xff7ef482>
     154:	4a 14       	cp	r4, r10
     156:	f6 a8       	ldd	r15, Z+54	; 0x36
     158:	74 2a       	or	r7, r20
     15a:	c8 96       	adiw	r24, 0x38	; 56
     15c:	15 4b       	sbci	r17, 0xB5	; 181
     15e:	a9 f7       	brne	.-22     	; 0x14a <__trampolines_end+0xe2>
     160:	b6 e8       	ldi	r27, 0x86	; 134
     162:	0a 54       	subi	r16, 0x4A	; 74
     164:	d7 89       	ldd	r29, Z+23	; 0x17
     166:	6b 35       	cpi	r22, 0x5B	; 91

00000168 <digital_pin_to_timer_PGM>:
     168:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     178:	00 00 00 00                                         ....

0000017c <digital_pin_to_bit_mask_PGM>:
     17c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     18c:	04 08 10 20                                         ... 

00000190 <digital_pin_to_port_PGM>:
     190:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     1a0:	03 03 03 03                                         ....

000001a4 <port_to_input_PGM>:
     1a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000001ae <port_to_output_PGM>:
     1ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000001b8 <port_to_mode_PGM>:
     1b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000001c2 <__ctors_start>:
     1c2:	86 01       	movw	r16, r12
     1c4:	13 06       	cpc	r1, r19
     1c6:	a5 06       	cpc	r10, r21
     1c8:	87 0e       	add	r8, r23
     1ca:	96 10       	cpse	r9, r6
     1cc:	30 12       	cpse	r3, r16
     1ce:	b6 14       	cp	r11, r6
     1d0:	aa 1c       	adc	r10, r10
     1d2:	09 1d       	adc	r16, r9

000001d4 <__ctors_end>:
     1d4:	11 24       	eor	r1, r1
     1d6:	1f be       	out	0x3f, r1	; 63
     1d8:	cf ef       	ldi	r28, 0xFF	; 255
     1da:	d8 e0       	ldi	r29, 0x08	; 8
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	cd bf       	out	0x3d, r28	; 61

000001e0 <__do_copy_data>:
     1e0:	12 e0       	ldi	r17, 0x02	; 2
     1e2:	a0 e0       	ldi	r26, 0x00	; 0
     1e4:	b1 e0       	ldi	r27, 0x01	; 1
     1e6:	ec ec       	ldi	r30, 0xCC	; 204
     1e8:	fd e4       	ldi	r31, 0x4D	; 77
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x10>
     1ec:	05 90       	lpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a0 38       	cpi	r26, 0x80	; 128
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0xc>

000001f6 <__do_clear_bss>:
     1f6:	24 e0       	ldi	r18, 0x04	; 4
     1f8:	a0 e8       	ldi	r26, 0x80	; 128
     1fa:	b2 e0       	ldi	r27, 0x02	; 2
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	ac 30       	cpi	r26, 0x0C	; 12
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>

00000206 <__do_global_ctors>:
     206:	10 e0       	ldi	r17, 0x00	; 0
     208:	ca ee       	ldi	r28, 0xEA	; 234
     20a:	d0 e0       	ldi	r29, 0x00	; 0
     20c:	04 c0       	rjmp	.+8      	; 0x216 <__do_global_ctors+0x10>
     20e:	21 97       	sbiw	r28, 0x01	; 1
     210:	fe 01       	movw	r30, r28
     212:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__tablejump2__>
     216:	c1 3e       	cpi	r28, 0xE1	; 225
     218:	d1 07       	cpc	r29, r17
     21a:	c9 f7       	brne	.-14     	; 0x20e <__do_global_ctors+0x8>
     21c:	0e 94 b1 06 	call	0xd62	; 0xd62 <main>
     220:	0c 94 e4 26 	jmp	0x4dc8	; 0x4dc8 <_exit>

00000224 <__bad_interrupt>:
     224:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000228 <_Z15adresseAusgebenv>:
	   Serial.println("client disconnected");
   }
   delay(1);
}

void adresseAusgeben(void) {
     228:	0f 93       	push	r16
     22a:	1f 93       	push	r17
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
	byte i;
	byte present = 0;
	
	byte *addr;

	Serial.print(sensors.Devicecount);
     230:	60 91 ca 02 	lds	r22, 0x02CA	; 0x8002ca <sensors+0x2>
     234:	70 91 cb 02 	lds	r23, 0x02CB	; 0x8002cb <sensors+0x3>
     238:	4a e0       	ldi	r20, 0x0A	; 10
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	86 e1       	ldi	r24, 0x16	; 22
     23e:	93 e0       	ldi	r25, 0x03	; 3
     240:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <_ZN5Print5printEii>
	Serial.println(" Devices found");// "\n\r" is NewLine
     244:	6e e0       	ldi	r22, 0x0E	; 14
     246:	71 e0       	ldi	r23, 0x01	; 1
     248:	86 e1       	ldi	r24, 0x16	; 22
     24a:	93 e0       	ldi	r25, 0x03	; 3
     24c:	0e 94 2d 09 	call	0x125a	; 0x125a <_ZN5Print7printlnEPKc>
     250:	0c ec       	ldi	r16, 0xCC	; 204
     252:	12 e0       	ldi	r17, 0x02	; 2

	for(int dev =0; dev< sensors.Devicecount; dev++)
     254:	c0 e0       	ldi	r28, 0x00	; 0
     256:	d0 e0       	ldi	r29, 0x00	; 0
     258:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <sensors+0x2>
     25c:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <sensors+0x3>
     260:	c8 17       	cp	r28, r24
     262:	d9 07       	cpc	r29, r25
     264:	0c f0       	brlt	.+2      	; 0x268 <_Z15adresseAusgebenv+0x40>
     266:	4a c0       	rjmp	.+148    	; 0x2fc <_Z15adresseAusgebenv+0xd4>
	{
		addr = sensors.sensors[dev];
		Serial.print(dev);
     268:	4a e0       	ldi	r20, 0x0A	; 10
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	be 01       	movw	r22, r28
     26e:	86 e1       	ldi	r24, 0x16	; 22
     270:	93 e0       	ldi	r25, 0x03	; 3
     272:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <_ZN5Print5printEii>
		Serial.print(":");
     276:	6d e1       	ldi	r22, 0x1D	; 29
     278:	71 e0       	ldi	r23, 0x01	; 1
     27a:	86 e1       	ldi	r24, 0x16	; 22
     27c:	93 e0       	ldi	r25, 0x03	; 3
     27e:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN5Print5printEPKc>
		Serial.print(sensors.getAdress(dev, buffer));
     282:	48 ea       	ldi	r20, 0xA8	; 168
     284:	52 e0       	ldi	r21, 0x02	; 2
     286:	be 01       	movw	r22, r28
     288:	88 ec       	ldi	r24, 0xC8	; 200
     28a:	92 e0       	ldi	r25, 0x02	; 2
     28c:	0e 94 78 21 	call	0x42f0	; 0x42f0 <_ZN18Ds18S20Temperature9getAdressEiPc>
     290:	bc 01       	movw	r22, r24
     292:	86 e1       	ldi	r24, 0x16	; 22
     294:	93 e0       	ldi	r25, 0x03	; 3
     296:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN5Print5printEPKc>
		if ( OneWire::crc8( addr, 7) != addr[7]) {
     29a:	67 e0       	ldi	r22, 0x07	; 7
     29c:	c8 01       	movw	r24, r16
     29e:	0e 94 b7 08 	call	0x116e	; 0x116e <_ZN7OneWire4crc8EPKhh>
     2a2:	08 5f       	subi	r16, 0xF8	; 248
     2a4:	1f 4f       	sbci	r17, 0xFF	; 255
     2a6:	f8 01       	movw	r30, r16
     2a8:	31 97       	sbiw	r30, 0x01	; 1
     2aa:	90 81       	ld	r25, Z
     2ac:	89 17       	cp	r24, r25
     2ae:	51 f0       	breq	.+20     	; 0x2c4 <_Z15adresseAusgebenv+0x9c>
			Serial.print("CRC is not valid!\n\r");
     2b0:	6f e1       	ldi	r22, 0x1F	; 31
     2b2:	71 e0       	ldi	r23, 0x01	; 1
     2b4:	86 e1       	ldi	r24, 0x16	; 22
     2b6:	93 e0       	ldi	r25, 0x03	; 3
		}
		Serial.println("");
	}
	Serial.println();
	return;
}
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	1f 91       	pop	r17
     2be:	0f 91       	pop	r16
		addr = sensors.sensors[dev];
		Serial.print(dev);
		Serial.print(":");
		Serial.print(sensors.getAdress(dev, buffer));
		if ( OneWire::crc8( addr, 7) != addr[7]) {
			Serial.print("CRC is not valid!\n\r");
     2c0:	0c 94 f8 08 	jmp	0x11f0	; 0x11f0 <_ZN5Print5printEPKc>
			return;
		}
		else
		{
			Serial.print("  -> ");
     2c4:	63 e3       	ldi	r22, 0x33	; 51
     2c6:	71 e0       	ldi	r23, 0x01	; 1
     2c8:	86 e1       	ldi	r24, 0x16	; 22
     2ca:	93 e0       	ldi	r25, 0x03	; 3
     2cc:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN5Print5printEPKc>
			Serial.print(sensors.getTemperatureById(dev, true) );
     2d0:	41 e0       	ldi	r20, 0x01	; 1
     2d2:	6c 2f       	mov	r22, r28
     2d4:	88 ec       	ldi	r24, 0xC8	; 200
     2d6:	92 e0       	ldi	r25, 0x02	; 2
     2d8:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <_ZN18Ds18S20Temperature18getTemperatureByIdEhb>
     2dc:	ab 01       	movw	r20, r22
     2de:	bc 01       	movw	r22, r24
     2e0:	22 e0       	ldi	r18, 0x02	; 2
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	86 e1       	ldi	r24, 0x16	; 22
     2e6:	93 e0       	ldi	r25, 0x03	; 3
     2e8:	0e 94 1e 0b 	call	0x163c	; 0x163c <_ZN5Print5printEdi>
		}
		Serial.println("");
     2ec:	6e e0       	ldi	r22, 0x0E	; 14
     2ee:	72 e0       	ldi	r23, 0x02	; 2
     2f0:	86 e1       	ldi	r24, 0x16	; 22
     2f2:	93 e0       	ldi	r25, 0x03	; 3
     2f4:	0e 94 2d 09 	call	0x125a	; 0x125a <_ZN5Print7printlnEPKc>
	byte *addr;

	Serial.print(sensors.Devicecount);
	Serial.println(" Devices found");// "\n\r" is NewLine

	for(int dev =0; dev< sensors.Devicecount; dev++)
     2f8:	21 96       	adiw	r28, 0x01	; 1
     2fa:	ae cf       	rjmp	.-164    	; 0x258 <_Z15adresseAusgebenv+0x30>
			Serial.print("  -> ");
			Serial.print(sensors.getTemperatureById(dev, true) );
		}
		Serial.println("");
	}
	Serial.println();
     2fc:	86 e1       	ldi	r24, 0x16	; 22
     2fe:	93 e0       	ldi	r25, 0x03	; 3
	return;
}
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	1f 91       	pop	r17
     306:	0f 91       	pop	r16
			Serial.print("  -> ");
			Serial.print(sensors.getTemperatureById(dev, true) );
		}
		Serial.println("");
	}
	Serial.println();
     308:	0c 94 21 09 	jmp	0x1242	; 0x1242 <_ZN5Print7printlnEv>

0000030c <_GLOBAL__sub_I_ds>:
	return;
}
     30c:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
     30e:	00 e0       	ldi	r16, 0x00	; 0
     310:	20 e0       	ldi	r18, 0x00	; 0
     312:	40 e0       	ldi	r20, 0x00	; 0
     314:	60 e0       	ldi	r22, 0x00	; 0
     316:	80 e1       	ldi	r24, 0x10	; 16
     318:	93 e0       	ldi	r25, 0x03	; 3
     31a:	0e 94 8c 06 	call	0xd18	; 0xd18 <_ZN9IPAddressC1Ehhhh>
#include <Ethernet.h>
#include <Ds18S20Min.h>

void adresseAusgeben(void );
#define ONE_WIRE_BUS 2 /* Digitalport Pin 2 definieren */
OneWire ds(ONE_WIRE_BUS); /* Ini oneWire instance */
     31e:	62 e0       	ldi	r22, 0x02	; 2
     320:	82 e0       	ldi	r24, 0x02	; 2
     322:	93 e0       	ldi	r25, 0x03	; 3
     324:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <_ZN7OneWireC1Eh>
Ds18S20Temperature  sensors(&ds);
     328:	62 e0       	ldi	r22, 0x02	; 2
     32a:	73 e0       	ldi	r23, 0x03	; 3
     32c:	88 ec       	ldi	r24, 0xC8	; 200
     32e:	92 e0       	ldi	r25, 0x02	; 2
     330:	0e 94 07 20 	call	0x400e	; 0x400e <_ZN18Ds18S20TemperatureC1EP7OneWire>
// The IP address will be dependent on your local network:
byte mac[] = {
	//0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xE1
	0xAA, 0xBB, 0xCC, 0xDD, 0x00, 0x01
};
IPAddress ip(192, 168, 42, 95);
     334:	0f e5       	ldi	r16, 0x5F	; 95
     336:	2a e2       	ldi	r18, 0x2A	; 42
     338:	48 ea       	ldi	r20, 0xA8	; 168
     33a:	60 ec       	ldi	r22, 0xC0	; 192
     33c:	82 ea       	ldi	r24, 0xA2	; 162
     33e:	92 e0       	ldi	r25, 0x02	; 2
     340:	0e 94 8c 06 	call	0xd18	; 0xd18 <_ZN9IPAddressC1Ehhhh>

// Initialize the Ethernet server library
// with the IP address and port you want to use
// (port 80 is default for HTTP):
EthernetServer server(80);
     344:	60 e5       	ldi	r22, 0x50	; 80
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	8c e9       	ldi	r24, 0x9C	; 156
     34a:	92 e0       	ldi	r25, 0x02	; 2
		}
		Serial.println("");
	}
	Serial.println();
	return;
}
     34c:	0f 91       	pop	r16
IPAddress ip(192, 168, 42, 95);

// Initialize the Ethernet server library
// with the IP address and port you want to use
// (port 80 is default for HTTP):
EthernetServer server(80);
     34e:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <_ZN14EthernetServerC1Ej>

00000352 <setup>:


unsigned int counter = 0;
float tempvalue[_maxSensors];
void setup()
{
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	00 d0       	rcall	.+0      	; 0x358 <setup+0x6>
     358:	00 d0       	rcall	.+0      	; 0x35a <setup+0x8>
     35a:	00 d0       	rcall	.+0      	; 0x35c <setup+0xa>
     35c:	cd b7       	in	r28, 0x3d	; 61
     35e:	de b7       	in	r29, 0x3e	; 62
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     360:	26 e0       	ldi	r18, 0x06	; 6
     362:	40 e0       	ldi	r20, 0x00	; 0
     364:	51 ee       	ldi	r21, 0xE1	; 225
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	86 e1       	ldi	r24, 0x16	; 22
     36c:	93 e0       	ldi	r25, 0x03	; 3
     36e:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN14HardwareSerial5beginEmh>
  Serial.begin(57600);
  Serial.println("Temperatur Messprogramm");
     372:	69 e3       	ldi	r22, 0x39	; 57
     374:	71 e0       	ldi	r23, 0x01	; 1
     376:	86 e1       	ldi	r24, 0x16	; 22
     378:	93 e0       	ldi	r25, 0x03	; 3
     37a:	0e 94 2d 09 	call	0x125a	; 0x125a <_ZN5Print7printlnEPKc>
  delay(300);
     37e:	6c e2       	ldi	r22, 0x2C	; 44
     380:	71 e0       	ldi	r23, 0x01	; 1
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 9c 0b 	call	0x1738	; 0x1738 <delay>
  
  sensors.Begin();
     38a:	88 ec       	ldi	r24, 0xC8	; 200
     38c:	92 e0       	ldi	r25, 0x02	; 2
     38e:	0e 94 75 21 	call	0x42ea	; 0x42ea <_ZN18Ds18S20Temperature5BeginEv>
  adresseAusgeben();
     392:	0e 94 14 01 	call	0x228	; 0x228 <_Z15adresseAusgebenv>
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
     396:	8a e0       	ldi	r24, 0x0A	; 10
     398:	92 e0       	ldi	r25, 0x02	; 2
     39a:	9a 83       	std	Y+2, r25	; 0x02
     39c:	89 83       	std	Y+1, r24	; 0x01
     39e:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <ip+0x2>
     3a2:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <ip+0x3>
     3a6:	a0 91 a6 02 	lds	r26, 0x02A6	; 0x8002a6 <ip+0x4>
     3aa:	b0 91 a7 02 	lds	r27, 0x02A7	; 0x8002a7 <ip+0x5>
     3ae:	8b 83       	std	Y+3, r24	; 0x03
     3b0:	9c 83       	std	Y+4, r25	; 0x04
     3b2:	ad 83       	std	Y+5, r26	; 0x05
     3b4:	be 83       	std	Y+6, r27	; 0x06

  // start the Ethernet connection and the server:
  Ethernet.begin(mac, ip);
     3b6:	ae 01       	movw	r20, r28
     3b8:	4f 5f       	subi	r20, 0xFF	; 255
     3ba:	5f 4f       	sbci	r21, 0xFF	; 255
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	71 e0       	ldi	r23, 0x01	; 1
     3c0:	82 ec       	ldi	r24, 0xC2	; 194
     3c2:	93 e0       	ldi	r25, 0x03	; 3
     3c4:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <_ZN13EthernetClass5beginEPh9IPAddress>
  server.begin();
     3c8:	8c e9       	ldi	r24, 0x9C	; 156
     3ca:	92 e0       	ldi	r25, 0x02	; 2
     3cc:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZN14EthernetServer5beginEv>
  Serial.print("server is at ");
     3d0:	61 e5       	ldi	r22, 0x51	; 81
     3d2:	71 e0       	ldi	r23, 0x01	; 1
     3d4:	86 e1       	ldi	r24, 0x16	; 22
     3d6:	93 e0       	ldi	r25, 0x03	; 3
     3d8:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN5Print5printEPKc>
  Serial.println(Ethernet.localIP());
     3dc:	62 ec       	ldi	r22, 0xC2	; 194
     3de:	73 e0       	ldi	r23, 0x03	; 3
     3e0:	ce 01       	movw	r24, r28
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <_ZN13EthernetClass7localIPEv>
     3e8:	be 01       	movw	r22, r28
     3ea:	6f 5f       	subi	r22, 0xFF	; 255
     3ec:	7f 4f       	sbci	r23, 0xFF	; 255
     3ee:	86 e1       	ldi	r24, 0x16	; 22
     3f0:	93 e0       	ldi	r25, 0x03	; 3
     3f2:	0e 94 3f 09 	call	0x127e	; 0x127e <_ZN5Print7printlnERK9Printable>
  counter = 100000;
     3f6:	80 ea       	ldi	r24, 0xA0	; 160
     3f8:	96 e8       	ldi	r25, 0x86	; 134
     3fa:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <counter+0x1>
     3fe:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <counter>
  
}
     402:	26 96       	adiw	r28, 0x06	; 6
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	08 95       	ret

00000414 <loop>:
int curdev =0;
void loop()
{
     414:	af 92       	push	r10
     416:	bf 92       	push	r11
     418:	cf 92       	push	r12
     41a:	df 92       	push	r13
     41c:	ef 92       	push	r14
     41e:	ff 92       	push	r15
     420:	0f 93       	push	r16
     422:	1f 93       	push	r17
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	cd b7       	in	r28, 0x3d	; 61
     42a:	de b7       	in	r29, 0x3e	; 62
     42c:	2d 97       	sbiw	r28, 0x0d	; 13
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	f8 94       	cli
     432:	de bf       	out	0x3e, r29	; 62
     434:	0f be       	out	0x3f, r0	; 63
     436:	cd bf       	out	0x3d, r28	; 61
  //sensors.Begin();
  //adresseAusgeben();
  //delay(1000);
  
   // listen for incoming clients
   counter ++;
     438:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <counter>
     43c:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <counter+0x1>
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <counter+0x1>
     446:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <counter>
   if (counter > 10000)
     44a:	81 31       	cpi	r24, 0x11	; 17
     44c:	97 42       	sbci	r25, 0x27	; 39
     44e:	60 f4       	brcc	.+24     	; 0x468 <loop+0x54>
		for(int dev =0; dev< _maxSensors; dev++)
		{
			tempvalue[dev] =sensors.getTemperatureById(dev, true);
		}
   }
   if ((counter % 500) == 0)
     450:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <counter>
     454:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <counter+0x1>
     458:	64 ef       	ldi	r22, 0xF4	; 244
     45a:	71 e0       	ldi	r23, 0x01	; 1
     45c:	0e 94 a4 23 	call	0x4748	; 0x4748 <__udivmodhi4>
     460:	89 2b       	or	r24, r25
     462:	09 f0       	breq	.+2      	; 0x466 <loop+0x52>
     464:	46 c0       	rjmp	.+140    	; 0x4f2 <loop+0xde>
     466:	1f c0       	rjmp	.+62     	; 0x4a6 <loop+0x92>
  
   // listen for incoming clients
   counter ++;
   if (counter > 10000)
   {
		sensors.Begin();
     468:	88 ec       	ldi	r24, 0xC8	; 200
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	0e 94 75 21 	call	0x42ea	; 0x42ea <_ZN18Ds18S20Temperature5BeginEv>
		adresseAusgeben();
     470:	0e 94 14 01 	call	0x228	; 0x228 <_Z15adresseAusgebenv>
		counter =0;
     474:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <counter+0x1>
     478:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <counter>
     47c:	32 e8       	ldi	r19, 0x82	; 130
     47e:	e3 2e       	mov	r14, r19
     480:	32 e0       	ldi	r19, 0x02	; 2
     482:	f3 2e       	mov	r15, r19
     484:	10 e0       	ldi	r17, 0x00	; 0
		for(int dev =0; dev< _maxSensors; dev++)
		{
			tempvalue[dev] =sensors.getTemperatureById(dev, true);
     486:	41 e0       	ldi	r20, 0x01	; 1
     488:	61 2f       	mov	r22, r17
     48a:	88 ec       	ldi	r24, 0xC8	; 200
     48c:	92 e0       	ldi	r25, 0x02	; 2
     48e:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <_ZN18Ds18S20Temperature18getTemperatureByIdEhb>
     492:	f7 01       	movw	r30, r14
     494:	61 93       	st	Z+, r22
     496:	71 93       	st	Z+, r23
     498:	81 93       	st	Z+, r24
     49a:	91 93       	st	Z+, r25
     49c:	7f 01       	movw	r14, r30
     49e:	1f 5f       	subi	r17, 0xFF	; 255
   if (counter > 10000)
   {
		sensors.Begin();
		adresseAusgeben();
		counter =0;
		for(int dev =0; dev< _maxSensors; dev++)
     4a0:	16 30       	cpi	r17, 0x06	; 6
     4a2:	89 f7       	brne	.-30     	; 0x486 <loop+0x72>
     4a4:	d5 cf       	rjmp	.-86     	; 0x450 <loop+0x3c>
			tempvalue[dev] =sensors.getTemperatureById(dev, true);
		}
   }
   if ((counter % 500) == 0)
   {
	  tempvalue[curdev] =sensors.getTemperatureById(curdev, true);
     4a6:	00 91 80 02 	lds	r16, 0x0280	; 0x800280 <__data_end>
     4aa:	10 91 81 02 	lds	r17, 0x0281	; 0x800281 <__data_end+0x1>
     4ae:	41 e0       	ldi	r20, 0x01	; 1
     4b0:	60 2f       	mov	r22, r16
     4b2:	88 ec       	ldi	r24, 0xC8	; 200
     4b4:	92 e0       	ldi	r25, 0x02	; 2
     4b6:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <_ZN18Ds18S20Temperature18getTemperatureByIdEhb>
     4ba:	00 0f       	add	r16, r16
     4bc:	11 1f       	adc	r17, r17
     4be:	00 0f       	add	r16, r16
     4c0:	11 1f       	adc	r17, r17
     4c2:	f8 01       	movw	r30, r16
     4c4:	ee 57       	subi	r30, 0x7E	; 126
     4c6:	fd 4f       	sbci	r31, 0xFD	; 253
     4c8:	60 83       	st	Z, r22
     4ca:	71 83       	std	Z+1, r23	; 0x01
     4cc:	82 83       	std	Z+2, r24	; 0x02
     4ce:	93 83       	std	Z+3, r25	; 0x03
	  curdev++;
     4d0:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <__data_end>
     4d4:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <__data_end+0x1>
     4d8:	01 96       	adiw	r24, 0x01	; 1
	  if (curdev>=_maxSensors)
     4da:	86 30       	cpi	r24, 0x06	; 6
     4dc:	91 05       	cpc	r25, r1
     4de:	2c f4       	brge	.+10     	; 0x4ea <loop+0xd6>
		}
   }
   if ((counter % 500) == 0)
   {
	  tempvalue[curdev] =sensors.getTemperatureById(curdev, true);
	  curdev++;
     4e0:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <__data_end+0x1>
     4e4:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <__data_end>
     4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <loop+0xde>
	  if (curdev>=_maxSensors)
		 curdev =0;
     4ea:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <__data_end+0x1>
     4ee:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <__data_end>
   }
   EthernetClient client = server.available();
     4f2:	6c e9       	ldi	r22, 0x9C	; 156
     4f4:	72 e0       	ldi	r23, 0x02	; 2
     4f6:	ce 01       	movw	r24, r28
     4f8:	01 96       	adiw	r24, 0x01	; 1
     4fa:	0e 94 c2 11 	call	0x2384	; 0x2384 <_ZN14EthernetServer9availableEv>
   if (client) {
     4fe:	ce 01       	movw	r24, r28
     500:	01 96       	adiw	r24, 0x01	; 1
     502:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN14EthernetClientcvbEv>
     506:	88 23       	and	r24, r24
     508:	09 f4       	brne	.+2      	; 0x50c <loop+0xf8>
     50a:	13 c1       	rjmp	.+550    	; 0x732 <loop+0x31e>
	   Serial.println("new client");
     50c:	6f e5       	ldi	r22, 0x5F	; 95
     50e:	71 e0       	ldi	r23, 0x01	; 1
     510:	86 e1       	ldi	r24, 0x16	; 22
     512:	93 e0       	ldi	r25, 0x03	; 3
     514:	0e 94 2d 09 	call	0x125a	; 0x125a <_ZN5Print7printlnEPKc>
				   client.println("</html>");
				   break;
			   }
			   if (c == '\n') {
				   // you're starting a new line
				   currentLineIsBlank = true;
     518:	11 e0       	ldi	r17, 0x01	; 1
   EthernetClient client = server.available();
   if (client) {
	   Serial.println("new client");
	   // an http request ends with a blank line
	   boolean currentLineIsBlank = true;
	   while (client.connected()) {
     51a:	ce 01       	movw	r24, r28
     51c:	01 96       	adiw	r24, 0x01	; 1
     51e:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN14EthernetClient9connectedEv>
     522:	88 23       	and	r24, r24
     524:	09 f4       	brne	.+2      	; 0x528 <loop+0x114>
     526:	f5 c0       	rjmp	.+490    	; 0x712 <loop+0x2fe>
		   if (client.available()) {
     528:	ce 01       	movw	r24, r28
     52a:	01 96       	adiw	r24, 0x01	; 1
     52c:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <_ZN14EthernetClient9availableEv>
     530:	89 2b       	or	r24, r25
     532:	99 f3       	breq	.-26     	; 0x51a <loop+0x106>
			   char c = client.read();
     534:	ce 01       	movw	r24, r28
     536:	01 96       	adiw	r24, 0x01	; 1
     538:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <_ZN14EthernetClient4readEv>
     53c:	08 2f       	mov	r16, r24
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     53e:	68 2f       	mov	r22, r24
     540:	86 e1       	ldi	r24, 0x16	; 22
     542:	93 e0       	ldi	r25, 0x03	; 3
     544:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <_ZN14HardwareSerial5writeEh>
			   Serial.write(c);
			   // if you've gotten to the end of the line (received a newline
			   // character) and the line is blank, the http request has ended,
			   // so you can send a reply
			   if (c == '\n' && currentLineIsBlank) {
     548:	0a 30       	cpi	r16, 0x0A	; 10
     54a:	09 f0       	breq	.+2      	; 0x54e <loop+0x13a>
     54c:	dd c0       	rjmp	.+442    	; 0x708 <loop+0x2f4>
     54e:	11 23       	and	r17, r17
     550:	19 f3       	breq	.-58     	; 0x518 <loop+0x104>
				   // send a standard http response header
				   client.println("HTTP/1.1 200 OK");
     552:	6a e6       	ldi	r22, 0x6A	; 106
     554:	71 e0       	ldi	r23, 0x01	; 1
     556:	ce 01       	movw	r24, r28
     558:	01 96       	adiw	r24, 0x01	; 1
     55a:	0e 94 2d 09 	call	0x125a	; 0x125a <_ZN5Print7printlnEPKc>
				   client.println("Content-Type: text/html");
     55e:	6a e7       	ldi	r22, 0x7A	; 122
     560:	71 e0       	ldi	r23, 0x01	; 1
     562:	ce 01       	movw	r24, r28
     564:	01 96       	adiw	r24, 0x01	; 1
     566:	0e 94 2d 09 	call	0x125a	; 0x125a <_ZN5Print7printlnEPKc>
				   client.println("Connection: close");  // the connection will be closed after completion of the response
     56a:	62 e9       	ldi	r22, 0x92	; 146
     56c:	71 e0       	ldi	r23, 0x01	; 1
     56e:	ce 01       	movw	r24, r28
     570:	01 96       	adiw	r24, 0x01	; 1
     572:	0e 94 2d 09 	call	0x125a	; 0x125a <_ZN5Print7printlnEPKc>
				   client.println("Refresh: 1");  // refresh the page automatically every 5 sec
     576:	64 ea       	ldi	r22, 0xA4	; 164
     578:	71 e0       	ldi	r23, 0x01	; 1
     57a:	ce 01       	movw	r24, r28
     57c:	01 96       	adiw	r24, 0x01	; 1
     57e:	0e 94 2d 09 	call	0x125a	; 0x125a <_ZN5Print7printlnEPKc>
				   client.println();
     582:	ce 01       	movw	r24, r28
     584:	01 96       	adiw	r24, 0x01	; 1
     586:	0e 94 21 09 	call	0x1242	; 0x1242 <_ZN5Print7printlnEv>
				   client.println("<!DOCTYPE HTML>");
     58a:	6f ea       	ldi	r22, 0xAF	; 175
     58c:	71 e0       	ldi	r23, 0x01	; 1
     58e:	ce 01       	movw	r24, r28
     590:	01 96       	adiw	r24, 0x01	; 1
     592:	0e 94 2d 09 	call	0x125a	; 0x125a <_ZN5Print7printlnEPKc>
				   client.println("<html>");
     596:	6f eb       	ldi	r22, 0xBF	; 191
     598:	71 e0       	ldi	r23, 0x01	; 1
     59a:	ce 01       	movw	r24, r28
     59c:	01 96       	adiw	r24, 0x01	; 1
     59e:	0e 94 2d 09 	call	0x125a	; 0x125a <_ZN5Print7printlnEPKc>
     5a2:	92 e8       	ldi	r25, 0x82	; 130
     5a4:	c9 2e       	mov	r12, r25
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	d9 2e       	mov	r13, r25
					   //client.print(" is ");
					   //client.print(sensorReading);
					   //client.println("<br />");
				   //}
				   
				   for(int dev =0; dev< _maxSensors; dev++)
     5aa:	00 e0       	ldi	r16, 0x00	; 0
     5ac:	10 e0       	ldi	r17, 0x00	; 0
				   {
				   	   byte *addr = sensors.sensors[dev];
					   client.print("S");
     5ae:	66 ec       	ldi	r22, 0xC6	; 198
     5b0:	71 e0       	ldi	r23, 0x01	; 1
     5b2:	ce 01       	movw	r24, r28
     5b4:	01 96       	adiw	r24, 0x01	; 1
     5b6:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN5Print5printEPKc>
					   client.print(sensors.getAdress(dev, buffer));
     5ba:	48 ea       	ldi	r20, 0xA8	; 168
     5bc:	52 e0       	ldi	r21, 0x02	; 2
     5be:	b8 01       	movw	r22, r16
     5c0:	88 ec       	ldi	r24, 0xC8	; 200
     5c2:	92 e0       	ldi	r25, 0x02	; 2
     5c4:	0e 94 78 21 	call	0x42f0	; 0x42f0 <_ZN18Ds18S20Temperature9getAdressEiPc>
     5c8:	bc 01       	movw	r22, r24
     5ca:	ce 01       	movw	r24, r28
     5cc:	01 96       	adiw	r24, 0x01	; 1
     5ce:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN5Print5printEPKc>
					   client.print(":");
     5d2:	6d e1       	ldi	r22, 0x1D	; 29
     5d4:	71 e0       	ldi	r23, 0x01	; 1
     5d6:	ce 01       	movw	r24, r28
     5d8:	01 96       	adiw	r24, 0x01	; 1
     5da:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN5Print5printEPKc>
					   client.print(tempvalue[dev] );
     5de:	f6 01       	movw	r30, r12
     5e0:	40 81       	ld	r20, Z
     5e2:	51 81       	ldd	r21, Z+1	; 0x01
     5e4:	62 81       	ldd	r22, Z+2	; 0x02
     5e6:	73 81       	ldd	r23, Z+3	; 0x03
     5e8:	22 e0       	ldi	r18, 0x02	; 2
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	ce 01       	movw	r24, r28
     5ee:	01 96       	adiw	r24, 0x01	; 1
     5f0:	0e 94 1e 0b 	call	0x163c	; 0x163c <_ZN5Print5printEdi>
					   client.println("<BR />");
     5f4:	68 ec       	ldi	r22, 0xC8	; 200
     5f6:	71 e0       	ldi	r23, 0x01	; 1
     5f8:	ce 01       	movw	r24, r28
     5fa:	01 96       	adiw	r24, 0x01	; 1
     5fc:	0e 94 2d 09 	call	0x125a	; 0x125a <_ZN5Print7printlnEPKc>
					   if ( strstr(sensors.getAdress(dev, buffer), "(null)") == NULL) 
     600:	48 ea       	ldi	r20, 0xA8	; 168
     602:	52 e0       	ldi	r21, 0x02	; 2
     604:	b8 01       	movw	r22, r16
     606:	88 ec       	ldi	r24, 0xC8	; 200
     608:	92 e0       	ldi	r25, 0x02	; 2
     60a:	0e 94 78 21 	call	0x42f0	; 0x42f0 <_ZN18Ds18S20Temperature9getAdressEiPc>
     60e:	6f ec       	ldi	r22, 0xCF	; 207
     610:	71 e0       	ldi	r23, 0x01	; 1
     612:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <strstr>
     616:	89 2b       	or	r24, r25
     618:	79 f0       	breq	.+30     	; 0x638 <loop+0x224>
					   //client.print(" is ");
					   //client.print(sensorReading);
					   //client.println("<br />");
				   //}
				   
				   for(int dev =0; dev< _maxSensors; dev++)
     61a:	0f 5f       	subi	r16, 0xFF	; 255
     61c:	1f 4f       	sbci	r17, 0xFF	; 255
     61e:	f4 e0       	ldi	r31, 0x04	; 4
     620:	cf 0e       	add	r12, r31
     622:	d1 1c       	adc	r13, r1
     624:	06 30       	cpi	r16, 0x06	; 6
     626:	11 05       	cpc	r17, r1
     628:	11 f6       	brne	.-124    	; 0x5ae <loop+0x19a>
									client.println("<BR />");
								}
						   }
					   }
				   }
				   client.println("</html>");
     62a:	6a ed       	ldi	r22, 0xDA	; 218
     62c:	71 e0       	ldi	r23, 0x01	; 1
     62e:	ce 01       	movw	r24, r28
     630:	01 96       	adiw	r24, 0x01	; 1
     632:	0e 94 2d 09 	call	0x125a	; 0x125a <_ZN5Print7printlnEPKc>
				   break;
     636:	6d c0       	rjmp	.+218    	; 0x712 <loop+0x2fe>
     638:	82 e8       	ldi	r24, 0x82	; 130
     63a:	a8 2e       	mov	r10, r24
     63c:	82 e0       	ldi	r24, 0x02	; 2
     63e:	b8 2e       	mov	r11, r24
     640:	e1 2c       	mov	r14, r1
     642:	f1 2c       	mov	r15, r1
					   client.println("<BR />");
					   if ( strstr(sensors.getAdress(dev, buffer), "(null)") == NULL) 
					   {
						   for(int i =0; i< _maxSensors; i++)
						   {
								if (i == dev) continue;
     644:	e0 16       	cp	r14, r16
     646:	f1 06       	cpc	r15, r17
     648:	09 f4       	brne	.+2      	; 0x64c <loop+0x238>
     64a:	52 c0       	rjmp	.+164    	; 0x6f0 <loop+0x2dc>
								if (strstr(sensors.getAdress(i, buffer), "(null)") == NULL) 
     64c:	48 ea       	ldi	r20, 0xA8	; 168
     64e:	52 e0       	ldi	r21, 0x02	; 2
     650:	b7 01       	movw	r22, r14
     652:	88 ec       	ldi	r24, 0xC8	; 200
     654:	92 e0       	ldi	r25, 0x02	; 2
     656:	0e 94 78 21 	call	0x42f0	; 0x42f0 <_ZN18Ds18S20Temperature9getAdressEiPc>
     65a:	6f ec       	ldi	r22, 0xCF	; 207
     65c:	71 e0       	ldi	r23, 0x01	; 1
     65e:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <strstr>
     662:	89 2b       	or	r24, r25
     664:	09 f0       	breq	.+2      	; 0x668 <loop+0x254>
     666:	44 c0       	rjmp	.+136    	; 0x6f0 <loop+0x2dc>
								{
									client.print("D");
     668:	66 ed       	ldi	r22, 0xD6	; 214
     66a:	71 e0       	ldi	r23, 0x01	; 1
     66c:	ce 01       	movw	r24, r28
     66e:	01 96       	adiw	r24, 0x01	; 1
     670:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN5Print5printEPKc>
									client.print(sensors.getAdress(dev, buffer) );
     674:	48 ea       	ldi	r20, 0xA8	; 168
     676:	52 e0       	ldi	r21, 0x02	; 2
     678:	b8 01       	movw	r22, r16
     67a:	88 ec       	ldi	r24, 0xC8	; 200
     67c:	92 e0       	ldi	r25, 0x02	; 2
     67e:	0e 94 78 21 	call	0x42f0	; 0x42f0 <_ZN18Ds18S20Temperature9getAdressEiPc>
     682:	bc 01       	movw	r22, r24
     684:	ce 01       	movw	r24, r28
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN5Print5printEPKc>
									client.print("-" );
     68c:	68 ed       	ldi	r22, 0xD8	; 216
     68e:	71 e0       	ldi	r23, 0x01	; 1
     690:	ce 01       	movw	r24, r28
     692:	01 96       	adiw	r24, 0x01	; 1
     694:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN5Print5printEPKc>
									client.print(sensors.getAdress(i, buffer) );
     698:	48 ea       	ldi	r20, 0xA8	; 168
     69a:	52 e0       	ldi	r21, 0x02	; 2
     69c:	b7 01       	movw	r22, r14
     69e:	88 ec       	ldi	r24, 0xC8	; 200
     6a0:	92 e0       	ldi	r25, 0x02	; 2
     6a2:	0e 94 78 21 	call	0x42f0	; 0x42f0 <_ZN18Ds18S20Temperature9getAdressEiPc>
     6a6:	bc 01       	movw	r22, r24
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN5Print5printEPKc>
									client.print(":");
     6b0:	6d e1       	ldi	r22, 0x1D	; 29
     6b2:	71 e0       	ldi	r23, 0x01	; 1
     6b4:	ce 01       	movw	r24, r28
     6b6:	01 96       	adiw	r24, 0x01	; 1
     6b8:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN5Print5printEPKc>
									client.print(tempvalue[dev]-tempvalue[i] );
     6bc:	f5 01       	movw	r30, r10
     6be:	20 81       	ld	r18, Z
     6c0:	31 81       	ldd	r19, Z+1	; 0x01
     6c2:	42 81       	ldd	r20, Z+2	; 0x02
     6c4:	53 81       	ldd	r21, Z+3	; 0x03
     6c6:	f6 01       	movw	r30, r12
     6c8:	60 81       	ld	r22, Z
     6ca:	71 81       	ldd	r23, Z+1	; 0x01
     6cc:	82 81       	ldd	r24, Z+2	; 0x02
     6ce:	93 81       	ldd	r25, Z+3	; 0x03
     6d0:	0e 94 b0 03 	call	0x760	; 0x760 <__subsf3>
     6d4:	ab 01       	movw	r20, r22
     6d6:	bc 01       	movw	r22, r24
     6d8:	22 e0       	ldi	r18, 0x02	; 2
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	ce 01       	movw	r24, r28
     6de:	01 96       	adiw	r24, 0x01	; 1
     6e0:	0e 94 1e 0b 	call	0x163c	; 0x163c <_ZN5Print5printEdi>
									client.println("<BR />");
     6e4:	68 ec       	ldi	r22, 0xC8	; 200
     6e6:	71 e0       	ldi	r23, 0x01	; 1
     6e8:	ce 01       	movw	r24, r28
     6ea:	01 96       	adiw	r24, 0x01	; 1
     6ec:	0e 94 2d 09 	call	0x125a	; 0x125a <_ZN5Print7printlnEPKc>
					   client.print(":");
					   client.print(tempvalue[dev] );
					   client.println("<BR />");
					   if ( strstr(sensors.getAdress(dev, buffer), "(null)") == NULL) 
					   {
						   for(int i =0; i< _maxSensors; i++)
     6f0:	ff ef       	ldi	r31, 0xFF	; 255
     6f2:	ef 1a       	sub	r14, r31
     6f4:	ff 0a       	sbc	r15, r31
     6f6:	24 e0       	ldi	r18, 0x04	; 4
     6f8:	a2 0e       	add	r10, r18
     6fa:	b1 1c       	adc	r11, r1
     6fc:	86 e0       	ldi	r24, 0x06	; 6
     6fe:	e8 16       	cp	r14, r24
     700:	f1 04       	cpc	r15, r1
     702:	09 f0       	breq	.+2      	; 0x706 <loop+0x2f2>
     704:	9f cf       	rjmp	.-194    	; 0x644 <loop+0x230>
     706:	89 cf       	rjmp	.-238    	; 0x61a <loop+0x206>
				   break;
			   }
			   if (c == '\n') {
				   // you're starting a new line
				   currentLineIsBlank = true;
				   } else if (c != '\r') {
     708:	0d 30       	cpi	r16, 0x0D	; 13
     70a:	09 f4       	brne	.+2      	; 0x70e <loop+0x2fa>
     70c:	06 cf       	rjmp	.-500    	; 0x51a <loop+0x106>
				   // you've gotten a character on the current line
				   currentLineIsBlank = false;
     70e:	10 e0       	ldi	r17, 0x00	; 0
     710:	04 cf       	rjmp	.-504    	; 0x51a <loop+0x106>
			   }
		   }
	   }
	   // give the web browser time to receive the data
	   delay(1);
     712:	61 e0       	ldi	r22, 0x01	; 1
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <delay>
	   // close the connection:
	   client.stop();
     71e:	ce 01       	movw	r24, r28
     720:	01 96       	adiw	r24, 0x01	; 1
     722:	0e 94 2d 10 	call	0x205a	; 0x205a <_ZN14EthernetClient4stopEv>
	   Serial.println("client disconnected");
     726:	62 ee       	ldi	r22, 0xE2	; 226
     728:	71 e0       	ldi	r23, 0x01	; 1
     72a:	86 e1       	ldi	r24, 0x16	; 22
     72c:	93 e0       	ldi	r25, 0x03	; 3
     72e:	0e 94 2d 09 	call	0x125a	; 0x125a <_ZN5Print7printlnEPKc>
   }
   delay(1);
     732:	61 e0       	ldi	r22, 0x01	; 1
     734:	70 e0       	ldi	r23, 0x00	; 0
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <delay>
}
     73e:	2d 96       	adiw	r28, 0x0d	; 13
     740:	0f b6       	in	r0, 0x3f	; 63
     742:	f8 94       	cli
     744:	de bf       	out	0x3e, r29	; 62
     746:	0f be       	out	0x3f, r0	; 63
     748:	cd bf       	out	0x3d, r28	; 61
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	1f 91       	pop	r17
     750:	0f 91       	pop	r16
     752:	ff 90       	pop	r15
     754:	ef 90       	pop	r14
     756:	df 90       	pop	r13
     758:	cf 90       	pop	r12
     75a:	bf 90       	pop	r11
     75c:	af 90       	pop	r10
     75e:	08 95       	ret

00000760 <__subsf3>:
     760:	50 58       	subi	r21, 0x80	; 128

00000762 <__addsf3>:
     762:	bb 27       	eor	r27, r27
     764:	aa 27       	eor	r26, r26
     766:	0e 94 c8 03 	call	0x790	; 0x790 <__addsf3x>
     76a:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_round>
     76e:	0e 94 26 04 	call	0x84c	; 0x84c <__fp_pscA>
     772:	38 f0       	brcs	.+14     	; 0x782 <__addsf3+0x20>
     774:	0e 94 2d 04 	call	0x85a	; 0x85a <__fp_pscB>
     778:	20 f0       	brcs	.+8      	; 0x782 <__addsf3+0x20>
     77a:	39 f4       	brne	.+14     	; 0x78a <__addsf3+0x28>
     77c:	9f 3f       	cpi	r25, 0xFF	; 255
     77e:	19 f4       	brne	.+6      	; 0x786 <__addsf3+0x24>
     780:	26 f4       	brtc	.+8      	; 0x78a <__addsf3+0x28>
     782:	0c 94 23 04 	jmp	0x846	; 0x846 <__fp_nan>
     786:	0e f4       	brtc	.+2      	; 0x78a <__addsf3+0x28>
     788:	e0 95       	com	r30
     78a:	e7 fb       	bst	r30, 7
     78c:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_inf>

00000790 <__addsf3x>:
     790:	e9 2f       	mov	r30, r25
     792:	0e 94 45 04 	call	0x88a	; 0x88a <__fp_split3>
     796:	58 f3       	brcs	.-42     	; 0x76e <__addsf3+0xc>
     798:	ba 17       	cp	r27, r26
     79a:	62 07       	cpc	r22, r18
     79c:	73 07       	cpc	r23, r19
     79e:	84 07       	cpc	r24, r20
     7a0:	95 07       	cpc	r25, r21
     7a2:	20 f0       	brcs	.+8      	; 0x7ac <__addsf3x+0x1c>
     7a4:	79 f4       	brne	.+30     	; 0x7c4 <__addsf3x+0x34>
     7a6:	a6 f5       	brtc	.+104    	; 0x810 <__addsf3x+0x80>
     7a8:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__fp_zero>
     7ac:	0e f4       	brtc	.+2      	; 0x7b0 <__addsf3x+0x20>
     7ae:	e0 95       	com	r30
     7b0:	0b 2e       	mov	r0, r27
     7b2:	ba 2f       	mov	r27, r26
     7b4:	a0 2d       	mov	r26, r0
     7b6:	0b 01       	movw	r0, r22
     7b8:	b9 01       	movw	r22, r18
     7ba:	90 01       	movw	r18, r0
     7bc:	0c 01       	movw	r0, r24
     7be:	ca 01       	movw	r24, r20
     7c0:	a0 01       	movw	r20, r0
     7c2:	11 24       	eor	r1, r1
     7c4:	ff 27       	eor	r31, r31
     7c6:	59 1b       	sub	r21, r25
     7c8:	99 f0       	breq	.+38     	; 0x7f0 <__addsf3x+0x60>
     7ca:	59 3f       	cpi	r21, 0xF9	; 249
     7cc:	50 f4       	brcc	.+20     	; 0x7e2 <__addsf3x+0x52>
     7ce:	50 3e       	cpi	r21, 0xE0	; 224
     7d0:	68 f1       	brcs	.+90     	; 0x82c <__addsf3x+0x9c>
     7d2:	1a 16       	cp	r1, r26
     7d4:	f0 40       	sbci	r31, 0x00	; 0
     7d6:	a2 2f       	mov	r26, r18
     7d8:	23 2f       	mov	r18, r19
     7da:	34 2f       	mov	r19, r20
     7dc:	44 27       	eor	r20, r20
     7de:	58 5f       	subi	r21, 0xF8	; 248
     7e0:	f3 cf       	rjmp	.-26     	; 0x7c8 <__addsf3x+0x38>
     7e2:	46 95       	lsr	r20
     7e4:	37 95       	ror	r19
     7e6:	27 95       	ror	r18
     7e8:	a7 95       	ror	r26
     7ea:	f0 40       	sbci	r31, 0x00	; 0
     7ec:	53 95       	inc	r21
     7ee:	c9 f7       	brne	.-14     	; 0x7e2 <__addsf3x+0x52>
     7f0:	7e f4       	brtc	.+30     	; 0x810 <__addsf3x+0x80>
     7f2:	1f 16       	cp	r1, r31
     7f4:	ba 0b       	sbc	r27, r26
     7f6:	62 0b       	sbc	r22, r18
     7f8:	73 0b       	sbc	r23, r19
     7fa:	84 0b       	sbc	r24, r20
     7fc:	ba f0       	brmi	.+46     	; 0x82c <__addsf3x+0x9c>
     7fe:	91 50       	subi	r25, 0x01	; 1
     800:	a1 f0       	breq	.+40     	; 0x82a <__addsf3x+0x9a>
     802:	ff 0f       	add	r31, r31
     804:	bb 1f       	adc	r27, r27
     806:	66 1f       	adc	r22, r22
     808:	77 1f       	adc	r23, r23
     80a:	88 1f       	adc	r24, r24
     80c:	c2 f7       	brpl	.-16     	; 0x7fe <__addsf3x+0x6e>
     80e:	0e c0       	rjmp	.+28     	; 0x82c <__addsf3x+0x9c>
     810:	ba 0f       	add	r27, r26
     812:	62 1f       	adc	r22, r18
     814:	73 1f       	adc	r23, r19
     816:	84 1f       	adc	r24, r20
     818:	48 f4       	brcc	.+18     	; 0x82c <__addsf3x+0x9c>
     81a:	87 95       	ror	r24
     81c:	77 95       	ror	r23
     81e:	67 95       	ror	r22
     820:	b7 95       	ror	r27
     822:	f7 95       	ror	r31
     824:	9e 3f       	cpi	r25, 0xFE	; 254
     826:	08 f0       	brcs	.+2      	; 0x82a <__addsf3x+0x9a>
     828:	b0 cf       	rjmp	.-160    	; 0x78a <__addsf3+0x28>
     82a:	93 95       	inc	r25
     82c:	88 0f       	add	r24, r24
     82e:	08 f0       	brcs	.+2      	; 0x832 <__addsf3x+0xa2>
     830:	99 27       	eor	r25, r25
     832:	ee 0f       	add	r30, r30
     834:	97 95       	ror	r25
     836:	87 95       	ror	r24
     838:	08 95       	ret

0000083a <__fp_inf>:
     83a:	97 f9       	bld	r25, 7
     83c:	9f 67       	ori	r25, 0x7F	; 127
     83e:	80 e8       	ldi	r24, 0x80	; 128
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	08 95       	ret

00000846 <__fp_nan>:
     846:	9f ef       	ldi	r25, 0xFF	; 255
     848:	80 ec       	ldi	r24, 0xC0	; 192
     84a:	08 95       	ret

0000084c <__fp_pscA>:
     84c:	00 24       	eor	r0, r0
     84e:	0a 94       	dec	r0
     850:	16 16       	cp	r1, r22
     852:	17 06       	cpc	r1, r23
     854:	18 06       	cpc	r1, r24
     856:	09 06       	cpc	r0, r25
     858:	08 95       	ret

0000085a <__fp_pscB>:
     85a:	00 24       	eor	r0, r0
     85c:	0a 94       	dec	r0
     85e:	12 16       	cp	r1, r18
     860:	13 06       	cpc	r1, r19
     862:	14 06       	cpc	r1, r20
     864:	05 06       	cpc	r0, r21
     866:	08 95       	ret

00000868 <__fp_round>:
     868:	09 2e       	mov	r0, r25
     86a:	03 94       	inc	r0
     86c:	00 0c       	add	r0, r0
     86e:	11 f4       	brne	.+4      	; 0x874 <__fp_round+0xc>
     870:	88 23       	and	r24, r24
     872:	52 f0       	brmi	.+20     	; 0x888 <__fp_round+0x20>
     874:	bb 0f       	add	r27, r27
     876:	40 f4       	brcc	.+16     	; 0x888 <__fp_round+0x20>
     878:	bf 2b       	or	r27, r31
     87a:	11 f4       	brne	.+4      	; 0x880 <__fp_round+0x18>
     87c:	60 ff       	sbrs	r22, 0
     87e:	04 c0       	rjmp	.+8      	; 0x888 <__fp_round+0x20>
     880:	6f 5f       	subi	r22, 0xFF	; 255
     882:	7f 4f       	sbci	r23, 0xFF	; 255
     884:	8f 4f       	sbci	r24, 0xFF	; 255
     886:	9f 4f       	sbci	r25, 0xFF	; 255
     888:	08 95       	ret

0000088a <__fp_split3>:
     88a:	57 fd       	sbrc	r21, 7
     88c:	90 58       	subi	r25, 0x80	; 128
     88e:	44 0f       	add	r20, r20
     890:	55 1f       	adc	r21, r21
     892:	59 f0       	breq	.+22     	; 0x8aa <__fp_splitA+0x10>
     894:	5f 3f       	cpi	r21, 0xFF	; 255
     896:	71 f0       	breq	.+28     	; 0x8b4 <__fp_splitA+0x1a>
     898:	47 95       	ror	r20

0000089a <__fp_splitA>:
     89a:	88 0f       	add	r24, r24
     89c:	97 fb       	bst	r25, 7
     89e:	99 1f       	adc	r25, r25
     8a0:	61 f0       	breq	.+24     	; 0x8ba <__fp_splitA+0x20>
     8a2:	9f 3f       	cpi	r25, 0xFF	; 255
     8a4:	79 f0       	breq	.+30     	; 0x8c4 <__fp_splitA+0x2a>
     8a6:	87 95       	ror	r24
     8a8:	08 95       	ret
     8aa:	12 16       	cp	r1, r18
     8ac:	13 06       	cpc	r1, r19
     8ae:	14 06       	cpc	r1, r20
     8b0:	55 1f       	adc	r21, r21
     8b2:	f2 cf       	rjmp	.-28     	; 0x898 <__fp_split3+0xe>
     8b4:	46 95       	lsr	r20
     8b6:	f1 df       	rcall	.-30     	; 0x89a <__fp_splitA>
     8b8:	08 c0       	rjmp	.+16     	; 0x8ca <__fp_splitA+0x30>
     8ba:	16 16       	cp	r1, r22
     8bc:	17 06       	cpc	r1, r23
     8be:	18 06       	cpc	r1, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	f1 cf       	rjmp	.-30     	; 0x8a6 <__fp_splitA+0xc>
     8c4:	86 95       	lsr	r24
     8c6:	71 05       	cpc	r23, r1
     8c8:	61 05       	cpc	r22, r1
     8ca:	08 94       	sec
     8cc:	08 95       	ret

000008ce <__fp_zero>:
     8ce:	e8 94       	clt

000008d0 <__fp_szero>:
     8d0:	bb 27       	eor	r27, r27
     8d2:	66 27       	eor	r22, r22
     8d4:	77 27       	eor	r23, r23
     8d6:	cb 01       	movw	r24, r22
     8d8:	97 f9       	bld	r25, 7
     8da:	08 95       	ret

000008dc <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     8dc:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     8de:	91 8d       	ldd	r25, Z+25	; 0x19
     8e0:	22 8d       	ldd	r18, Z+26	; 0x1a
     8e2:	89 2f       	mov	r24, r25
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	80 5c       	subi	r24, 0xC0	; 192
     8e8:	9f 4f       	sbci	r25, 0xFF	; 255
     8ea:	82 1b       	sub	r24, r18
     8ec:	91 09       	sbc	r25, r1
}
     8ee:	8f 73       	andi	r24, 0x3F	; 63
     8f0:	99 27       	eor	r25, r25
     8f2:	08 95       	ret

000008f4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     8f4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     8f6:	91 8d       	ldd	r25, Z+25	; 0x19
     8f8:	82 8d       	ldd	r24, Z+26	; 0x1a
     8fa:	98 17       	cp	r25, r24
     8fc:	31 f0       	breq	.+12     	; 0x90a <__stack+0xb>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     8fe:	82 8d       	ldd	r24, Z+26	; 0x1a
     900:	e8 0f       	add	r30, r24
     902:	f1 1d       	adc	r31, r1
     904:	85 8d       	ldd	r24, Z+29	; 0x1d
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     90e:	08 95       	ret

00000910 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     910:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     912:	91 8d       	ldd	r25, Z+25	; 0x19
     914:	82 8d       	ldd	r24, Z+26	; 0x1a
     916:	98 17       	cp	r25, r24
     918:	61 f0       	breq	.+24     	; 0x932 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     91a:	82 8d       	ldd	r24, Z+26	; 0x1a
     91c:	df 01       	movw	r26, r30
     91e:	a8 0f       	add	r26, r24
     920:	b1 1d       	adc	r27, r1
     922:	5d 96       	adiw	r26, 0x1d	; 29
     924:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     926:	92 8d       	ldd	r25, Z+26	; 0x1a
     928:	9f 5f       	subi	r25, 0xFF	; 255
     92a:	9f 73       	andi	r25, 0x3F	; 63
     92c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     932:	8f ef       	ldi	r24, 0xFF	; 255
     934:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     936:	08 95       	ret

00000938 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     938:	89 e0       	ldi	r24, 0x09	; 9
     93a:	96 e0       	ldi	r25, 0x06	; 6
     93c:	89 2b       	or	r24, r25
     93e:	49 f0       	breq	.+18     	; 0x952 <_Z14serialEventRunv+0x1a>
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	89 2b       	or	r24, r25
     946:	29 f0       	breq	.+10     	; 0x952 <_Z14serialEventRunv+0x1a>
     948:	0e 94 09 06 	call	0xc12	; 0xc12 <_Z17Serial0_availablev>
     94c:	81 11       	cpse	r24, r1
     94e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     952:	08 95       	ret

00000954 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     954:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     956:	84 8d       	ldd	r24, Z+28	; 0x1c
     958:	df 01       	movw	r26, r30
     95a:	a8 0f       	add	r26, r24
     95c:	b1 1d       	adc	r27, r1
     95e:	a3 5a       	subi	r26, 0xA3	; 163
     960:	bf 4f       	sbci	r27, 0xFF	; 255
     962:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     964:	24 8d       	ldd	r18, Z+28	; 0x1c
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	2f 5f       	subi	r18, 0xFF	; 255
     96a:	3f 4f       	sbci	r19, 0xFF	; 255
     96c:	2f 73       	andi	r18, 0x3F	; 63
     96e:	30 78       	andi	r19, 0x80	; 128
     970:	33 23       	and	r19, r19
     972:	34 f4       	brge	.+12     	; 0x980 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
     974:	21 50       	subi	r18, 0x01	; 1
     976:	31 09       	sbc	r19, r1
     978:	20 6c       	ori	r18, 0xC0	; 192
     97a:	3f 6f       	ori	r19, 0xFF	; 255
     97c:	2f 5f       	subi	r18, 0xFF	; 255
     97e:	3f 4f       	sbci	r19, 0xFF	; 255
     980:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
     982:	a6 89       	ldd	r26, Z+22	; 0x16
     984:	b7 89       	ldd	r27, Z+23	; 0x17
     986:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     988:	a0 89       	ldd	r26, Z+16	; 0x10
     98a:	b1 89       	ldd	r27, Z+17	; 0x11
     98c:	8c 91       	ld	r24, X
     98e:	80 64       	ori	r24, 0x40	; 64
     990:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     992:	93 8d       	ldd	r25, Z+27	; 0x1b
     994:	84 8d       	ldd	r24, Z+28	; 0x1c
     996:	98 13       	cpse	r25, r24
     998:	06 c0       	rjmp	.+12     	; 0x9a6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     99a:	02 88       	ldd	r0, Z+18	; 0x12
     99c:	f3 89       	ldd	r31, Z+19	; 0x13
     99e:	e0 2d       	mov	r30, r0
     9a0:	80 81       	ld	r24, Z
     9a2:	8f 7d       	andi	r24, 0xDF	; 223
     9a4:	80 83       	st	Z, r24
     9a6:	08 95       	ret

000009a8 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     9ae:	88 8d       	ldd	r24, Y+24	; 0x18
     9b0:	88 23       	and	r24, r24
     9b2:	d9 f0       	breq	.+54     	; 0x9ea <_ZN14HardwareSerial5flushEv+0x42>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     9b4:	ea 89       	ldd	r30, Y+18	; 0x12
     9b6:	fb 89       	ldd	r31, Y+19	; 0x13
     9b8:	80 81       	ld	r24, Z
     9ba:	85 fd       	sbrc	r24, 5
     9bc:	05 c0       	rjmp	.+10     	; 0x9c8 <_ZN14HardwareSerial5flushEv+0x20>
     9be:	a8 89       	ldd	r26, Y+16	; 0x10
     9c0:	b9 89       	ldd	r27, Y+17	; 0x11
     9c2:	8c 91       	ld	r24, X
     9c4:	86 fd       	sbrc	r24, 6
     9c6:	11 c0       	rjmp	.+34     	; 0x9ea <_ZN14HardwareSerial5flushEv+0x42>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	07 fc       	sbrc	r0, 7
     9cc:	f5 cf       	rjmp	.-22     	; 0x9b8 <_ZN14HardwareSerial5flushEv+0x10>
     9ce:	80 81       	ld	r24, Z
     9d0:	85 ff       	sbrs	r24, 5
     9d2:	f2 cf       	rjmp	.-28     	; 0x9b8 <_ZN14HardwareSerial5flushEv+0x10>
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <_ZN14HardwareSerial5flushEv+0x36>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
     9d6:	ce 01       	movw	r24, r28
     9d8:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     9dc:	eb cf       	rjmp	.-42     	; 0x9b4 <_ZN14HardwareSerial5flushEv+0xc>
  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     9de:	a8 89       	ldd	r26, Y+16	; 0x10
     9e0:	b9 89       	ldd	r27, Y+17	; 0x11
     9e2:	8c 91       	ld	r24, X
     9e4:	85 ff       	sbrs	r24, 5
     9e6:	e8 cf       	rjmp	.-48     	; 0x9b8 <_ZN14HardwareSerial5flushEv+0x10>
     9e8:	f6 cf       	rjmp	.-20     	; 0x9d6 <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	08 95       	ret

000009f0 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	ec 01       	movw	r28, r24
  _written = true;
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     9fe:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a00:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a02:	98 13       	cpse	r25, r24
     a04:	23 c0       	rjmp	.+70     	; 0xa4c <_ZN14HardwareSerial5writeEh+0x5c>
     a06:	e8 89       	ldd	r30, Y+16	; 0x10
     a08:	f9 89       	ldd	r31, Y+17	; 0x11
     a0a:	80 81       	ld	r24, Z
     a0c:	85 fd       	sbrc	r24, 5
     a0e:	2f c0       	rjmp	.+94     	; 0xa6e <_ZN14HardwareSerial5writeEh+0x7e>
     a10:	1d c0       	rjmp	.+58     	; 0xa4c <_ZN14HardwareSerial5writeEh+0x5c>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     a12:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a14:	19 13       	cpse	r17, r25
     a16:	0c c0       	rjmp	.+24     	; 0xa30 <_ZN14HardwareSerial5writeEh+0x40>
    if (bit_is_clear(SREG, SREG_I)) {
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	07 fc       	sbrc	r0, 7
     a1c:	fa cf       	rjmp	.-12     	; 0xa12 <_ZN14HardwareSerial5writeEh+0x22>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     a1e:	e8 89       	ldd	r30, Y+16	; 0x10
     a20:	f9 89       	ldd	r31, Y+17	; 0x11
     a22:	80 81       	ld	r24, Z
     a24:	85 ff       	sbrs	r24, 5
     a26:	f5 cf       	rjmp	.-22     	; 0xa12 <_ZN14HardwareSerial5writeEh+0x22>
	_tx_udr_empty_irq();
     a28:	ce 01       	movw	r24, r28
     a2a:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     a2e:	f1 cf       	rjmp	.-30     	; 0xa12 <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     a30:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a32:	fe 01       	movw	r30, r28
     a34:	e8 0f       	add	r30, r24
     a36:	f1 1d       	adc	r31, r1
     a38:	e3 5a       	subi	r30, 0xA3	; 163
     a3a:	ff 4f       	sbci	r31, 0xFF	; 255
     a3c:	00 83       	st	Z, r16
  _tx_buffer_head = i;
     a3e:	1b 8f       	std	Y+27, r17	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     a40:	ea 89       	ldd	r30, Y+18	; 0x12
     a42:	fb 89       	ldd	r31, Y+19	; 0x13
     a44:	80 81       	ld	r24, Z
     a46:	80 62       	ori	r24, 0x20	; 32
     a48:	80 83       	st	Z, r24
  
  return 1;
     a4a:	19 c0       	rjmp	.+50     	; 0xa7e <_ZN14HardwareSerial5writeEh+0x8e>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     a4c:	2b 8d       	ldd	r18, Y+27	; 0x1b
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	2f 5f       	subi	r18, 0xFF	; 255
     a52:	3f 4f       	sbci	r19, 0xFF	; 255
     a54:	2f 73       	andi	r18, 0x3F	; 63
     a56:	30 78       	andi	r19, 0x80	; 128
     a58:	33 23       	and	r19, r19
     a5a:	34 f4       	brge	.+12     	; 0xa68 <_ZN14HardwareSerial5writeEh+0x78>
     a5c:	21 50       	subi	r18, 0x01	; 1
     a5e:	31 09       	sbc	r19, r1
     a60:	20 6c       	ori	r18, 0xC0	; 192
     a62:	3f 6f       	ori	r19, 0xFF	; 255
     a64:	2f 5f       	subi	r18, 0xFF	; 255
     a66:	3f 4f       	sbci	r19, 0xFF	; 255
     a68:	06 2f       	mov	r16, r22
     a6a:	12 2f       	mov	r17, r18
     a6c:	d2 cf       	rjmp	.-92     	; 0xa12 <_ZN14HardwareSerial5writeEh+0x22>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     a6e:	ee 89       	ldd	r30, Y+22	; 0x16
     a70:	ff 89       	ldd	r31, Y+23	; 0x17
     a72:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     a74:	e8 89       	ldd	r30, Y+16	; 0x10
     a76:	f9 89       	ldd	r31, Y+17	; 0x11
     a78:	80 81       	ld	r24, Z
     a7a:	80 64       	ori	r24, 0x40	; 64
     a7c:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	1f 91       	pop	r17
     a88:	0f 91       	pop	r16
     a8a:	08 95       	ret

00000a8c <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     a8c:	cf 92       	push	r12
     a8e:	df 92       	push	r13
     a90:	ef 92       	push	r14
     a92:	ff 92       	push	r15
     a94:	1f 93       	push	r17
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	ec 01       	movw	r28, r24
     a9c:	6a 01       	movw	r12, r20
     a9e:	7b 01       	movw	r14, r22
     aa0:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     aa2:	e8 89       	ldd	r30, Y+16	; 0x10
     aa4:	f9 89       	ldd	r31, Y+17	; 0x11
     aa6:	82 e0       	ldi	r24, 0x02	; 2
     aa8:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     aaa:	41 15       	cp	r20, r1
     aac:	51 4e       	sbci	r21, 0xE1	; 225
     aae:	61 05       	cpc	r22, r1
     ab0:	71 05       	cpc	r23, r1
     ab2:	b1 f0       	breq	.+44     	; 0xae0 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	79 e0       	ldi	r23, 0x09	; 9
     ab8:	8d e3       	ldi	r24, 0x3D	; 61
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	a7 01       	movw	r20, r14
     abe:	96 01       	movw	r18, r12
     ac0:	0e 94 b8 23 	call	0x4770	; 0x4770 <__udivmodsi4>
     ac4:	da 01       	movw	r26, r20
     ac6:	c9 01       	movw	r24, r18
     ac8:	01 97       	sbiw	r24, 0x01	; 1
     aca:	a1 09       	sbc	r26, r1
     acc:	b1 09       	sbc	r27, r1
     ace:	b6 95       	lsr	r27
     ad0:	a7 95       	ror	r26
     ad2:	97 95       	ror	r25
     ad4:	87 95       	ror	r24
     ad6:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     ad8:	21 15       	cp	r18, r1
     ada:	80 e1       	ldi	r24, 0x10	; 16
     adc:	38 07       	cpc	r19, r24
     ade:	a8 f0       	brcs	.+42     	; 0xb0a <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     ae0:	e8 89       	ldd	r30, Y+16	; 0x10
     ae2:	f9 89       	ldd	r31, Y+17	; 0x11
     ae4:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     ae6:	60 e8       	ldi	r22, 0x80	; 128
     ae8:	74 e8       	ldi	r23, 0x84	; 132
     aea:	8e e1       	ldi	r24, 0x1E	; 30
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	a7 01       	movw	r20, r14
     af0:	96 01       	movw	r18, r12
     af2:	0e 94 b8 23 	call	0x4770	; 0x4770 <__udivmodsi4>
     af6:	da 01       	movw	r26, r20
     af8:	c9 01       	movw	r24, r18
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	a1 09       	sbc	r26, r1
     afe:	b1 09       	sbc	r27, r1
     b00:	b6 95       	lsr	r27
     b02:	a7 95       	ror	r26
     b04:	97 95       	ror	r25
     b06:	87 95       	ror	r24
     b08:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     b0a:	ec 85       	ldd	r30, Y+12	; 0x0c
     b0c:	fd 85       	ldd	r31, Y+13	; 0x0d
     b0e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     b10:	ee 85       	ldd	r30, Y+14	; 0x0e
     b12:	ff 85       	ldd	r31, Y+15	; 0x0f
     b14:	20 83       	st	Z, r18

  _written = false;
     b16:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     b18:	ec 89       	ldd	r30, Y+20	; 0x14
     b1a:	fd 89       	ldd	r31, Y+21	; 0x15
     b1c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     b1e:	ea 89       	ldd	r30, Y+18	; 0x12
     b20:	fb 89       	ldd	r31, Y+19	; 0x13
     b22:	80 81       	ld	r24, Z
     b24:	80 61       	ori	r24, 0x10	; 16
     b26:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     b28:	ea 89       	ldd	r30, Y+18	; 0x12
     b2a:	fb 89       	ldd	r31, Y+19	; 0x13
     b2c:	80 81       	ld	r24, Z
     b2e:	88 60       	ori	r24, 0x08	; 8
     b30:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     b32:	ea 89       	ldd	r30, Y+18	; 0x12
     b34:	fb 89       	ldd	r31, Y+19	; 0x13
     b36:	80 81       	ld	r24, Z
     b38:	80 68       	ori	r24, 0x80	; 128
     b3a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     b3c:	ea 89       	ldd	r30, Y+18	; 0x12
     b3e:	fb 89       	ldd	r31, Y+19	; 0x13
     b40:	80 81       	ld	r24, Z
     b42:	8f 7d       	andi	r24, 0xDF	; 223
     b44:	80 83       	st	Z, r24
}
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	1f 91       	pop	r17
     b4c:	ff 90       	pop	r15
     b4e:	ef 90       	pop	r14
     b50:	df 90       	pop	r13
     b52:	cf 90       	pop	r12
     b54:	08 95       	ret

00000b56 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     b56:	1f 92       	push	r1
     b58:	0f 92       	push	r0
     b5a:	0f b6       	in	r0, 0x3f	; 63
     b5c:	0f 92       	push	r0
     b5e:	11 24       	eor	r1, r1
     b60:	2f 93       	push	r18
     b62:	8f 93       	push	r24
     b64:	9f 93       	push	r25
     b66:	af 93       	push	r26
     b68:	bf 93       	push	r27
     b6a:	ef 93       	push	r30
     b6c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     b6e:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <Serial+0x10>
     b72:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <Serial+0x11>
     b76:	80 81       	ld	r24, Z
     b78:	82 fd       	sbrc	r24, 2
     b7a:	14 c0       	rjmp	.+40     	; 0xba4 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     b7c:	e6 e1       	ldi	r30, 0x16	; 22
     b7e:	f3 e0       	ldi	r31, 0x03	; 3
     b80:	a6 89       	ldd	r26, Z+22	; 0x16
     b82:	b7 89       	ldd	r27, Z+23	; 0x17
     b84:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     b86:	81 8d       	ldd	r24, Z+25	; 0x19
     b88:	8f 5f       	subi	r24, 0xFF	; 255
     b8a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     b8c:	92 8d       	ldd	r25, Z+26	; 0x1a
     b8e:	89 17       	cp	r24, r25
     b90:	71 f0       	breq	.+28     	; 0xbae <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
     b92:	df 01       	movw	r26, r30
     b94:	e1 8d       	ldd	r30, Z+25	; 0x19
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	ea 5e       	subi	r30, 0xEA	; 234
     b9a:	fc 4f       	sbci	r31, 0xFC	; 252
     b9c:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
     b9e:	59 96       	adiw	r26, 0x19	; 25
     ba0:	8c 93       	st	X, r24
     ba2:	05 c0       	rjmp	.+10     	; 0xbae <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     ba4:	e0 91 2c 03 	lds	r30, 0x032C	; 0x80032c <Serial+0x16>
     ba8:	f0 91 2d 03 	lds	r31, 0x032D	; 0x80032d <Serial+0x17>
     bac:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     bae:	ff 91       	pop	r31
     bb0:	ef 91       	pop	r30
     bb2:	bf 91       	pop	r27
     bb4:	af 91       	pop	r26
     bb6:	9f 91       	pop	r25
     bb8:	8f 91       	pop	r24
     bba:	2f 91       	pop	r18
     bbc:	0f 90       	pop	r0
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	0f 90       	pop	r0
     bc2:	1f 90       	pop	r1
     bc4:	18 95       	reti

00000bc6 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     bc6:	1f 92       	push	r1
     bc8:	0f 92       	push	r0
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	0f 92       	push	r0
     bce:	11 24       	eor	r1, r1
     bd0:	2f 93       	push	r18
     bd2:	3f 93       	push	r19
     bd4:	4f 93       	push	r20
     bd6:	5f 93       	push	r21
     bd8:	6f 93       	push	r22
     bda:	7f 93       	push	r23
     bdc:	8f 93       	push	r24
     bde:	9f 93       	push	r25
     be0:	af 93       	push	r26
     be2:	bf 93       	push	r27
     be4:	ef 93       	push	r30
     be6:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     be8:	86 e1       	ldi	r24, 0x16	; 22
     bea:	93 e0       	ldi	r25, 0x03	; 3
     bec:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     bf0:	ff 91       	pop	r31
     bf2:	ef 91       	pop	r30
     bf4:	bf 91       	pop	r27
     bf6:	af 91       	pop	r26
     bf8:	9f 91       	pop	r25
     bfa:	8f 91       	pop	r24
     bfc:	7f 91       	pop	r23
     bfe:	6f 91       	pop	r22
     c00:	5f 91       	pop	r21
     c02:	4f 91       	pop	r20
     c04:	3f 91       	pop	r19
     c06:	2f 91       	pop	r18
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	0f 90       	pop	r0
     c0e:	1f 90       	pop	r1
     c10:	18 95       	reti

00000c12 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     c12:	86 e1       	ldi	r24, 0x16	; 22
     c14:	93 e0       	ldi	r25, 0x03	; 3
     c16:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN14HardwareSerial9availableEv>
     c1a:	21 e0       	ldi	r18, 0x01	; 1
     c1c:	89 2b       	or	r24, r25
     c1e:	09 f4       	brne	.+2      	; 0xc22 <_Z17Serial0_availablev+0x10>
     c20:	20 e0       	ldi	r18, 0x00	; 0
}
     c22:	82 2f       	mov	r24, r18
     c24:	08 95       	ret

00000c26 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     c26:	e6 e1       	ldi	r30, 0x16	; 22
     c28:	f3 e0       	ldi	r31, 0x03	; 3
     c2a:	13 82       	std	Z+3, r1	; 0x03
     c2c:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     c2e:	88 ee       	ldi	r24, 0xE8	; 232
     c30:	93 e0       	ldi	r25, 0x03	; 3
     c32:	a0 e0       	ldi	r26, 0x00	; 0
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	84 83       	std	Z+4, r24	; 0x04
     c38:	95 83       	std	Z+5, r25	; 0x05
     c3a:	a6 83       	std	Z+6, r26	; 0x06
     c3c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     c3e:	8a ef       	ldi	r24, 0xFA	; 250
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	91 83       	std	Z+1, r25	; 0x01
     c44:	80 83       	st	Z, r24
     c46:	85 ec       	ldi	r24, 0xC5	; 197
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	95 87       	std	Z+13, r25	; 0x0d
     c4c:	84 87       	std	Z+12, r24	; 0x0c
     c4e:	84 ec       	ldi	r24, 0xC4	; 196
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	97 87       	std	Z+15, r25	; 0x0f
     c54:	86 87       	std	Z+14, r24	; 0x0e
     c56:	80 ec       	ldi	r24, 0xC0	; 192
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	91 8b       	std	Z+17, r25	; 0x11
     c5c:	80 8b       	std	Z+16, r24	; 0x10
     c5e:	81 ec       	ldi	r24, 0xC1	; 193
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	93 8b       	std	Z+19, r25	; 0x13
     c64:	82 8b       	std	Z+18, r24	; 0x12
     c66:	82 ec       	ldi	r24, 0xC2	; 194
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	95 8b       	std	Z+21, r25	; 0x15
     c6c:	84 8b       	std	Z+20, r24	; 0x14
     c6e:	86 ec       	ldi	r24, 0xC6	; 198
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	97 8b       	std	Z+23, r25	; 0x17
     c74:	86 8b       	std	Z+22, r24	; 0x16
     c76:	11 8e       	std	Z+25, r1	; 0x19
     c78:	12 8e       	std	Z+26, r1	; 0x1a
     c7a:	13 8e       	std	Z+27, r1	; 0x1b
     c7c:	14 8e       	std	Z+28, r1	; 0x1c
     c7e:	08 95       	ret

00000c80 <_ZNK9IPAddress7printToER5Print>:
}

bool IPAddress::operator==(const uint8_t* addr) const
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}
     c80:	8f 92       	push	r8
     c82:	9f 92       	push	r9
     c84:	af 92       	push	r10
     c86:	bf 92       	push	r11
     c88:	cf 92       	push	r12
     c8a:	df 92       	push	r13
     c8c:	ef 92       	push	r14
     c8e:	ff 92       	push	r15
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	6c 01       	movw	r12, r24
     c9a:	7b 01       	movw	r14, r22
     c9c:	4c 01       	movw	r8, r24
     c9e:	82 e0       	ldi	r24, 0x02	; 2
     ca0:	88 0e       	add	r8, r24
     ca2:	91 1c       	adc	r9, r1
     ca4:	56 01       	movw	r10, r12
     ca6:	e5 e0       	ldi	r30, 0x05	; 5
     ca8:	ae 0e       	add	r10, r30
     caa:	b1 1c       	adc	r11, r1
     cac:	00 e0       	ldi	r16, 0x00	; 0
     cae:	10 e0       	ldi	r17, 0x00	; 0
     cb0:	f4 01       	movw	r30, r8
     cb2:	61 91       	ld	r22, Z+
     cb4:	4f 01       	movw	r8, r30
     cb6:	4a e0       	ldi	r20, 0x0A	; 10
     cb8:	50 e0       	ldi	r21, 0x00	; 0
     cba:	c7 01       	movw	r24, r14
     cbc:	0e 94 03 0a 	call	0x1406	; 0x1406 <_ZN5Print5printEhi>
     cc0:	ec 01       	movw	r28, r24
     cc2:	6e e2       	ldi	r22, 0x2E	; 46
     cc4:	c7 01       	movw	r24, r14
     cc6:	0e 94 0e 09 	call	0x121c	; 0x121c <_ZN5Print5printEc>
     cca:	8c 0f       	add	r24, r28
     ccc:	9d 1f       	adc	r25, r29
     cce:	08 0f       	add	r16, r24
     cd0:	19 1f       	adc	r17, r25
     cd2:	8a 14       	cp	r8, r10
     cd4:	9b 04       	cpc	r9, r11
     cd6:	61 f7       	brne	.-40     	; 0xcb0 <_ZNK9IPAddress7printToER5Print+0x30>
     cd8:	4a e0       	ldi	r20, 0x0A	; 10
     cda:	50 e0       	ldi	r21, 0x00	; 0
     cdc:	f6 01       	movw	r30, r12
     cde:	65 81       	ldd	r22, Z+5	; 0x05
     ce0:	c7 01       	movw	r24, r14
     ce2:	0e 94 03 0a 	call	0x1406	; 0x1406 <_ZN5Print5printEhi>
     ce6:	80 0f       	add	r24, r16
     ce8:	91 1f       	adc	r25, r17
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	df 90       	pop	r13
     cf8:	cf 90       	pop	r12
     cfa:	bf 90       	pop	r11
     cfc:	af 90       	pop	r10
     cfe:	9f 90       	pop	r9
     d00:	8f 90       	pop	r8
     d02:	08 95       	ret

00000d04 <_ZN9IPAddressC1Ev>:
     d04:	2a e0       	ldi	r18, 0x0A	; 10
     d06:	32 e0       	ldi	r19, 0x02	; 2
     d08:	fc 01       	movw	r30, r24
     d0a:	31 83       	std	Z+1, r19	; 0x01
     d0c:	20 83       	st	Z, r18
     d0e:	12 82       	std	Z+2, r1	; 0x02
     d10:	13 82       	std	Z+3, r1	; 0x03
     d12:	14 82       	std	Z+4, r1	; 0x04
     d14:	15 82       	std	Z+5, r1	; 0x05
     d16:	08 95       	ret

00000d18 <_ZN9IPAddressC1Ehhhh>:
     d18:	0f 93       	push	r16
     d1a:	fc 01       	movw	r30, r24
     d1c:	8a e0       	ldi	r24, 0x0A	; 10
     d1e:	92 e0       	ldi	r25, 0x02	; 2
     d20:	91 83       	std	Z+1, r25	; 0x01
     d22:	80 83       	st	Z, r24
     d24:	62 83       	std	Z+2, r22	; 0x02
     d26:	43 83       	std	Z+3, r20	; 0x03
     d28:	24 83       	std	Z+4, r18	; 0x04
     d2a:	05 83       	std	Z+5, r16	; 0x05
     d2c:	0f 91       	pop	r16
     d2e:	08 95       	ret

00000d30 <_ZN9IPAddressaSEPKh>:
     d30:	fb 01       	movw	r30, r22
     d32:	20 81       	ld	r18, Z
     d34:	31 81       	ldd	r19, Z+1	; 0x01
     d36:	fc 01       	movw	r30, r24
     d38:	33 83       	std	Z+3, r19	; 0x03
     d3a:	22 83       	std	Z+2, r18	; 0x02
     d3c:	fb 01       	movw	r30, r22
     d3e:	22 81       	ldd	r18, Z+2	; 0x02
     d40:	33 81       	ldd	r19, Z+3	; 0x03
     d42:	fc 01       	movw	r30, r24
     d44:	35 83       	std	Z+5, r19	; 0x05
     d46:	24 83       	std	Z+4, r18	; 0x04
     d48:	08 95       	ret

00000d4a <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     d4a:	e3 eb       	ldi	r30, 0xB3	; 179
     d4c:	f3 e0       	ldi	r31, 0x03	; 3
     d4e:	8a e0       	ldi	r24, 0x0A	; 10
     d50:	92 e0       	ldi	r25, 0x02	; 2
     d52:	91 83       	std	Z+1, r25	; 0x01
     d54:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
     d56:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
     d58:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
     d5a:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
     d5c:	15 82       	std	Z+5, r1	; 0x05
     d5e:	08 95       	ret

00000d60 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
     d60:	08 95       	ret

00000d62 <main>:

int main(void)
{
	init();
     d62:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <init>

	initVariant();
     d66:	0e 94 b0 06 	call	0xd60	; 0xd60 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     d6a:	0e 94 a9 01 	call	0x352	; 0x352 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     d6e:	cc e9       	ldi	r28, 0x9C	; 156
     d70:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	setup();
    
	for (;;) {
		loop();
     d72:	0e 94 0a 02 	call	0x414	; 0x414 <loop>
		if (serialEventRun) serialEventRun();
     d76:	20 97       	sbiw	r28, 0x00	; 0
     d78:	e1 f3       	breq	.-8      	; 0xd72 <main+0x10>
     d7a:	0e 94 9c 04 	call	0x938	; 0x938 <_Z14serialEventRunv>
     d7e:	f9 cf       	rjmp	.-14     	; 0xd72 <main+0x10>

00000d80 <_ZN7OneWire5resetEv>:
   ROM_NO[0] = family_code;
   for (uint8_t i = 1; i < 8; i++)
      ROM_NO[i] = 0;
   LastDiscrepancy = 64;
   LastFamilyDiscrepancy = 0;
   LastDeviceFlag = FALSE;
     d80:	ff 92       	push	r15
     d82:	0f 93       	push	r16
     d84:	1f 93       	push	r17
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	fc 01       	movw	r30, r24
     d8c:	d0 81       	ld	r29, Z
     d8e:	01 81       	ldd	r16, Z+1	; 0x01
     d90:	12 81       	ldd	r17, Z+2	; 0x02
     d92:	f8 94       	cli
     d94:	f8 01       	movw	r30, r16
     d96:	81 81       	ldd	r24, Z+1	; 0x01
     d98:	fd 2e       	mov	r15, r29
     d9a:	f0 94       	com	r15
     d9c:	8f 21       	and	r24, r15
     d9e:	81 83       	std	Z+1, r24	; 0x01
     da0:	78 94       	sei
     da2:	cc e7       	ldi	r28, 0x7C	; 124
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <_ZN7OneWire5resetEv+0x2a>
     da6:	c1 50       	subi	r28, 0x01	; 1
     da8:	41 f1       	breq	.+80     	; 0xdfa <_ZN7OneWire5resetEv+0x7a>
     daa:	82 e0       	ldi	r24, 0x02	; 2
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <delayMicroseconds>
     db2:	f8 01       	movw	r30, r16
     db4:	80 81       	ld	r24, Z
     db6:	8d 23       	and	r24, r29
     db8:	b1 f3       	breq	.-20     	; 0xda6 <_ZN7OneWire5resetEv+0x26>
     dba:	f8 94       	cli
     dbc:	82 81       	ldd	r24, Z+2	; 0x02
     dbe:	8f 21       	and	r24, r15
     dc0:	82 83       	std	Z+2, r24	; 0x02
     dc2:	81 81       	ldd	r24, Z+1	; 0x01
     dc4:	8d 2b       	or	r24, r29
     dc6:	81 83       	std	Z+1, r24	; 0x01
     dc8:	78 94       	sei
     dca:	80 ee       	ldi	r24, 0xE0	; 224
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <delayMicroseconds>
     dd2:	f8 94       	cli
     dd4:	f8 01       	movw	r30, r16
     dd6:	81 81       	ldd	r24, Z+1	; 0x01
     dd8:	f8 22       	and	r15, r24
     dda:	f1 82       	std	Z+1, r15	; 0x01
     ddc:	86 e4       	ldi	r24, 0x46	; 70
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <delayMicroseconds>
     de4:	f8 01       	movw	r30, r16
     de6:	80 81       	ld	r24, Z
     de8:	d8 23       	and	r29, r24
     dea:	c1 e0       	ldi	r28, 0x01	; 1
     dec:	09 f0       	breq	.+2      	; 0xdf0 <_ZN7OneWire5resetEv+0x70>
     dee:	c0 e0       	ldi	r28, 0x00	; 0
     df0:	78 94       	sei
     df2:	8a e9       	ldi	r24, 0x9A	; 154
     df4:	91 e0       	ldi	r25, 0x01	; 1
     df6:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <delayMicroseconds>
     dfa:	8c 2f       	mov	r24, r28
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	ff 90       	pop	r15
     e06:	08 95       	ret

00000e08 <_ZN7OneWire9write_bitEh>:
     e08:	1f 93       	push	r17
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	fc 01       	movw	r30, r24
     e10:	10 81       	ld	r17, Z
     e12:	c1 81       	ldd	r28, Z+1	; 0x01
     e14:	d2 81       	ldd	r29, Z+2	; 0x02
     e16:	60 ff       	sbrs	r22, 0
     e18:	16 c0       	rjmp	.+44     	; 0xe46 <_ZN7OneWire9write_bitEh+0x3e>
     e1a:	f8 94       	cli
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	91 2f       	mov	r25, r17
     e20:	90 95       	com	r25
     e22:	89 23       	and	r24, r25
     e24:	8a 83       	std	Y+2, r24	; 0x02
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	81 2b       	or	r24, r17
     e2a:	89 83       	std	Y+1, r24	; 0x01
     e2c:	8a e0       	ldi	r24, 0x0A	; 10
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <delayMicroseconds>
     e34:	8a 81       	ldd	r24, Y+2	; 0x02
     e36:	18 2b       	or	r17, r24
     e38:	1a 83       	std	Y+2, r17	; 0x02
     e3a:	78 94       	sei
     e3c:	87 e3       	ldi	r24, 0x37	; 55
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <delayMicroseconds>
     e44:	15 c0       	rjmp	.+42     	; 0xe70 <_ZN7OneWire9write_bitEh+0x68>
     e46:	f8 94       	cli
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	91 2f       	mov	r25, r17
     e4c:	90 95       	com	r25
     e4e:	89 23       	and	r24, r25
     e50:	8a 83       	std	Y+2, r24	; 0x02
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	81 2b       	or	r24, r17
     e56:	89 83       	std	Y+1, r24	; 0x01
     e58:	81 e4       	ldi	r24, 0x41	; 65
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <delayMicroseconds>
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	18 2b       	or	r17, r24
     e64:	1a 83       	std	Y+2, r17	; 0x02
     e66:	78 94       	sei
     e68:	85 e0       	ldi	r24, 0x05	; 5
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <delayMicroseconds>
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	1f 91       	pop	r17
     e76:	08 95       	ret

00000e78 <_ZN7OneWire8read_bitEv>:
     e78:	0f 93       	push	r16
     e7a:	1f 93       	push	r17
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
     e80:	fc 01       	movw	r30, r24
     e82:	00 81       	ld	r16, Z
     e84:	c1 81       	ldd	r28, Z+1	; 0x01
     e86:	d2 81       	ldd	r29, Z+2	; 0x02
     e88:	f8 94       	cli
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	80 2b       	or	r24, r16
     e8e:	89 83       	std	Y+1, r24	; 0x01
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	10 2f       	mov	r17, r16
     e94:	10 95       	com	r17
     e96:	81 23       	and	r24, r17
     e98:	8a 83       	std	Y+2, r24	; 0x02
     e9a:	83 e0       	ldi	r24, 0x03	; 3
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <delayMicroseconds>
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	18 23       	and	r17, r24
     ea6:	19 83       	std	Y+1, r17	; 0x01
     ea8:	8a e0       	ldi	r24, 0x0A	; 10
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <delayMicroseconds>
     eb0:	c8 81       	ld	r28, Y
     eb2:	78 94       	sei
     eb4:	85 e3       	ldi	r24, 0x35	; 53
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <delayMicroseconds>
     ebc:	c0 23       	and	r28, r16
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	09 f4       	brne	.+2      	; 0xec4 <_ZN7OneWire8read_bitEv+0x4c>
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	df 91       	pop	r29
     ec6:	cf 91       	pop	r28
     ec8:	1f 91       	pop	r17
     eca:	0f 91       	pop	r16
     ecc:	08 95       	ret

00000ece <_ZN7OneWire5writeEhh>:
     ece:	bf 92       	push	r11
     ed0:	cf 92       	push	r12
     ed2:	df 92       	push	r13
     ed4:	ef 92       	push	r14
     ed6:	ff 92       	push	r15
     ed8:	0f 93       	push	r16
     eda:	1f 93       	push	r17
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	7c 01       	movw	r14, r24
     ee2:	d6 2e       	mov	r13, r22
     ee4:	b4 2e       	mov	r11, r20
     ee6:	08 e0       	ldi	r16, 0x08	; 8
     ee8:	10 e0       	ldi	r17, 0x00	; 0
     eea:	c1 e0       	ldi	r28, 0x01	; 1
     eec:	d1 e0       	ldi	r29, 0x01	; 1
     eee:	c1 2c       	mov	r12, r1
     ef0:	6d 2f       	mov	r22, r29
     ef2:	8d 2d       	mov	r24, r13
     ef4:	8c 23       	and	r24, r28
     ef6:	09 f4       	brne	.+2      	; 0xefa <_ZN7OneWire5writeEhh+0x2c>
     ef8:	6c 2d       	mov	r22, r12
     efa:	c7 01       	movw	r24, r14
     efc:	0e 94 04 07 	call	0xe08	; 0xe08 <_ZN7OneWire9write_bitEh>
     f00:	cc 0f       	add	r28, r28
     f02:	01 50       	subi	r16, 0x01	; 1
     f04:	11 09       	sbc	r17, r1
     f06:	a1 f7       	brne	.-24     	; 0xef0 <_ZN7OneWire5writeEhh+0x22>
     f08:	b1 10       	cpse	r11, r1
     f0a:	15 c0       	rjmp	.+42     	; 0xf36 <_ZN7OneWire5writeEhh+0x68>
     f0c:	f8 94       	cli
     f0e:	d7 01       	movw	r26, r14
     f10:	11 96       	adiw	r26, 0x01	; 1
     f12:	ed 91       	ld	r30, X+
     f14:	fc 91       	ld	r31, X
     f16:	12 97       	sbiw	r26, 0x02	; 2
     f18:	91 81       	ldd	r25, Z+1	; 0x01
     f1a:	8c 91       	ld	r24, X
     f1c:	80 95       	com	r24
     f1e:	89 23       	and	r24, r25
     f20:	81 83       	std	Z+1, r24	; 0x01
     f22:	11 96       	adiw	r26, 0x01	; 1
     f24:	ed 91       	ld	r30, X+
     f26:	fc 91       	ld	r31, X
     f28:	12 97       	sbiw	r26, 0x02	; 2
     f2a:	92 81       	ldd	r25, Z+2	; 0x02
     f2c:	8c 91       	ld	r24, X
     f2e:	80 95       	com	r24
     f30:	89 23       	and	r24, r25
     f32:	82 83       	std	Z+2, r24	; 0x02
     f34:	78 94       	sei
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	1f 91       	pop	r17
     f3c:	0f 91       	pop	r16
     f3e:	ff 90       	pop	r15
     f40:	ef 90       	pop	r14
     f42:	df 90       	pop	r13
     f44:	cf 90       	pop	r12
     f46:	bf 90       	pop	r11
     f48:	08 95       	ret

00000f4a <_ZN7OneWire4readEv>:
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	7c 01       	movw	r14, r24
     f58:	c8 e0       	ldi	r28, 0x08	; 8
     f5a:	d0 e0       	ldi	r29, 0x00	; 0
     f5c:	00 e0       	ldi	r16, 0x00	; 0
     f5e:	11 e0       	ldi	r17, 0x01	; 1
     f60:	c7 01       	movw	r24, r14
     f62:	0e 94 3c 07 	call	0xe78	; 0xe78 <_ZN7OneWire8read_bitEv>
     f66:	81 11       	cpse	r24, r1
     f68:	01 2b       	or	r16, r17
     f6a:	11 0f       	add	r17, r17
     f6c:	21 97       	sbiw	r28, 0x01	; 1
     f6e:	c1 f7       	brne	.-16     	; 0xf60 <_ZN7OneWire4readEv+0x16>
     f70:	80 2f       	mov	r24, r16
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	1f 91       	pop	r17
     f78:	0f 91       	pop	r16
     f7a:	ff 90       	pop	r15
     f7c:	ef 90       	pop	r14
     f7e:	08 95       	ret

00000f80 <_ZN7OneWire6selectEPKh>:
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	7c 01       	movw	r14, r24
     f8e:	8b 01       	movw	r16, r22
     f90:	40 e0       	ldi	r20, 0x00	; 0
     f92:	65 e5       	ldi	r22, 0x55	; 85
     f94:	0e 94 67 07 	call	0xece	; 0xece <_ZN7OneWire5writeEhh>
     f98:	e8 01       	movw	r28, r16
     f9a:	08 5f       	subi	r16, 0xF8	; 248
     f9c:	1f 4f       	sbci	r17, 0xFF	; 255
     f9e:	69 91       	ld	r22, Y+
     fa0:	40 e0       	ldi	r20, 0x00	; 0
     fa2:	c7 01       	movw	r24, r14
     fa4:	0e 94 67 07 	call	0xece	; 0xece <_ZN7OneWire5writeEhh>
     fa8:	c0 17       	cp	r28, r16
     faa:	d1 07       	cpc	r29, r17
     fac:	c1 f7       	brne	.-16     	; 0xf9e <_ZN7OneWire6selectEPKh+0x1e>
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	ff 90       	pop	r15
     fb8:	ef 90       	pop	r14
     fba:	08 95       	ret

00000fbc <_ZN7OneWire12reset_searchEv>:
     fbc:	dc 01       	movw	r26, r24
     fbe:	1b 96       	adiw	r26, 0x0b	; 11
     fc0:	1c 92       	st	X, r1
     fc2:	1b 97       	sbiw	r26, 0x0b	; 11
     fc4:	1d 96       	adiw	r26, 0x0d	; 13
     fc6:	1c 92       	st	X, r1
     fc8:	1d 97       	sbiw	r26, 0x0d	; 13
     fca:	1c 96       	adiw	r26, 0x0c	; 12
     fcc:	1c 92       	st	X, r1
     fce:	1c 97       	sbiw	r26, 0x0c	; 12
     fd0:	1a 96       	adiw	r26, 0x0a	; 10
     fd2:	1c 92       	st	X, r1
     fd4:	fc 01       	movw	r30, r24
     fd6:	3a 96       	adiw	r30, 0x0a	; 10
     fd8:	03 96       	adiw	r24, 0x03	; 3
     fda:	12 92       	st	-Z, r1
     fdc:	e8 17       	cp	r30, r24
     fde:	f9 07       	cpc	r31, r25
     fe0:	e1 f7       	brne	.-8      	; 0xfda <_ZN7OneWire12reset_searchEv+0x1e>
     fe2:	08 95       	ret

00000fe4 <_ZN7OneWireC1Eh>:
     fe4:	1f 93       	push	r17
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	ec 01       	movw	r28, r24
     fec:	16 2f       	mov	r17, r22
     fee:	60 e0       	ldi	r22, 0x00	; 0
     ff0:	81 2f       	mov	r24, r17
     ff2:	0e 94 47 0c 	call	0x188e	; 0x188e <pinMode>
     ff6:	61 2f       	mov	r22, r17
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	fb 01       	movw	r30, r22
     ffc:	e4 58       	subi	r30, 0x84	; 132
     ffe:	fe 4f       	sbci	r31, 0xFE	; 254
    1000:	e4 91       	lpm	r30, Z
    1002:	e8 83       	st	Y, r30
    1004:	fb 01       	movw	r30, r22
    1006:	e0 57       	subi	r30, 0x70	; 112
    1008:	fe 4f       	sbci	r31, 0xFE	; 254
    100a:	e4 91       	lpm	r30, Z
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	ee 0f       	add	r30, r30
    1010:	ff 1f       	adc	r31, r31
    1012:	ec 55       	subi	r30, 0x5C	; 92
    1014:	fe 4f       	sbci	r31, 0xFE	; 254
    1016:	85 91       	lpm	r24, Z+
    1018:	94 91       	lpm	r25, Z
    101a:	9a 83       	std	Y+2, r25	; 0x02
    101c:	89 83       	std	Y+1, r24	; 0x01
    101e:	ce 01       	movw	r24, r28
    1020:	0e 94 de 07 	call	0xfbc	; 0xfbc <_ZN7OneWire12reset_searchEv>
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	1f 91       	pop	r17
    102a:	08 95       	ret

0000102c <_ZN7OneWire6searchEPhb>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
    102c:	9f 92       	push	r9
    102e:	af 92       	push	r10
    1030:	bf 92       	push	r11
    1032:	cf 92       	push	r12
    1034:	df 92       	push	r13
    1036:	ef 92       	push	r14
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	ec 01       	movw	r28, r24
    1044:	c6 2e       	mov	r12, r22
    1046:	d7 2e       	mov	r13, r23
    1048:	14 2f       	mov	r17, r20
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = 0;

   // if the last call was not the last one
   if (!LastDeviceFlag)
    104a:	8d 85       	ldd	r24, Y+13	; 0x0d
    104c:	81 11       	cpse	r24, r1
    104e:	69 c0       	rjmp	.+210    	; 0x1122 <_ZN7OneWire6searchEPhb+0xf6>
   {
      // 1-Wire reset
      if (!reset())
    1050:	ce 01       	movw	r24, r28
    1052:	0e 94 c0 06 	call	0xd80	; 0xd80 <_ZN7OneWire5resetEv>
    1056:	81 11       	cpse	r24, r1
    1058:	04 c0       	rjmp	.+8      	; 0x1062 <_ZN7OneWire6searchEPhb+0x36>
      {
         // reset the search
         LastDiscrepancy = 0;
    105a:	1b 86       	std	Y+11, r1	; 0x0b
         LastDeviceFlag = FALSE;
    105c:	1d 86       	std	Y+13, r1	; 0x0d
         LastFamilyDiscrepancy = 0;
    105e:	1c 86       	std	Y+12, r1	; 0x0c
         return FALSE;
    1060:	7a c0       	rjmp	.+244    	; 0x1156 <_ZN7OneWire6searchEPhb+0x12a>
      }

      // issue the search command
      if (search_mode == true) {
    1062:	11 23       	and	r17, r17
    1064:	31 f0       	breq	.+12     	; 0x1072 <_ZN7OneWire6searchEPhb+0x46>
        write(0xF0);   // NORMAL SEARCH
    1066:	40 e0       	ldi	r20, 0x00	; 0
    1068:	60 ef       	ldi	r22, 0xF0	; 240
    106a:	ce 01       	movw	r24, r28
    106c:	0e 94 67 07 	call	0xece	; 0xece <_ZN7OneWire5writeEhh>
    1070:	05 c0       	rjmp	.+10     	; 0x107c <_ZN7OneWire6searchEPhb+0x50>
      } else {
        write(0xEC);   // CONDITIONAL SEARCH
    1072:	40 e0       	ldi	r20, 0x00	; 0
    1074:	6c ee       	ldi	r22, 0xEC	; 236
    1076:	ce 01       	movw	r24, r28
    1078:	0e 94 67 07 	call	0xece	; 0xece <_ZN7OneWire5writeEhh>
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
    107c:	01 e0       	ldi	r16, 0x01	; 1
    107e:	f1 2c       	mov	r15, r1
    1080:	a1 2c       	mov	r10, r1
    1082:	ee 24       	eor	r14, r14
    1084:	e3 94       	inc	r14
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    1086:	bb 24       	eor	r11, r11
    1088:	b3 94       	inc	r11
    108a:	91 2c       	mov	r9, r1

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
    108c:	ce 01       	movw	r24, r28
    108e:	0e 94 3c 07 	call	0xe78	; 0xe78 <_ZN7OneWire8read_bitEv>
    1092:	18 2f       	mov	r17, r24
         cmp_id_bit = read_bit();
    1094:	ce 01       	movw	r24, r28
    1096:	0e 94 3c 07 	call	0xe78	; 0xe78 <_ZN7OneWire8read_bitEv>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1))
    109a:	11 30       	cpi	r17, 0x01	; 1
    109c:	09 f0       	breq	.+2      	; 0x10a0 <_ZN7OneWire6searchEPhb+0x74>
    109e:	4d c0       	rjmp	.+154    	; 0x113a <_ZN7OneWire6searchEPhb+0x10e>
    10a0:	81 30       	cpi	r24, 0x01	; 1
    10a2:	c9 f4       	brne	.+50     	; 0x10d6 <_ZN7OneWire6searchEPhb+0xaa>
    10a4:	35 c0       	rjmp	.+106    	; 0x1110 <_ZN7OneWire6searchEPhb+0xe4>
               search_direction = id_bit;  // bit write value for search
            else
            {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
    10a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    10a8:	e8 16       	cp	r14, r24
    10aa:	48 f4       	brcc	.+18     	; 0x10be <_ZN7OneWire6searchEPhb+0x92>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
    10ac:	fe 01       	movw	r30, r28
    10ae:	ef 0d       	add	r30, r15
    10b0:	f1 1d       	adc	r31, r1
    10b2:	83 81       	ldd	r24, Z+3	; 0x03
    10b4:	80 23       	and	r24, r16
    10b6:	1b 2d       	mov	r17, r11
    10b8:	29 f4       	brne	.+10     	; 0x10c4 <_ZN7OneWire6searchEPhb+0x98>
    10ba:	19 2d       	mov	r17, r9
    10bc:	03 c0       	rjmp	.+6      	; 0x10c4 <_ZN7OneWire6searchEPhb+0x98>
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    10be:	1b 2d       	mov	r17, r11
    10c0:	e8 12       	cpse	r14, r24
    10c2:	19 2d       	mov	r17, r9

               // if 0 was picked then record its position in LastZero
               if (search_direction == 0)
    10c4:	11 11       	cpse	r17, r1
    10c6:	05 c0       	rjmp	.+10     	; 0x10d2 <_ZN7OneWire6searchEPhb+0xa6>
               {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
    10c8:	88 e0       	ldi	r24, 0x08	; 8
    10ca:	8e 15       	cp	r24, r14
    10cc:	c8 f1       	brcs	.+114    	; 0x1140 <_ZN7OneWire6searchEPhb+0x114>
                     LastFamilyDiscrepancy = last_zero;
    10ce:	ec 86       	std	Y+12, r14	; 0x0c
    10d0:	37 c0       	rjmp	.+110    	; 0x1140 <_ZN7OneWire6searchEPhb+0x114>
               }
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
    10d2:	11 30       	cpi	r17, 0x01	; 1
    10d4:	41 f4       	brne	.+16     	; 0x10e6 <_ZN7OneWire6searchEPhb+0xba>
              ROM_NO[rom_byte_number] |= rom_byte_mask;
    10d6:	fe 01       	movw	r30, r28
    10d8:	ef 0d       	add	r30, r15
    10da:	f1 1d       	adc	r31, r1
    10dc:	83 81       	ldd	r24, Z+3	; 0x03
    10de:	80 2b       	or	r24, r16
    10e0:	83 83       	std	Z+3, r24	; 0x03
    10e2:	1b 2d       	mov	r17, r11
    10e4:	08 c0       	rjmp	.+16     	; 0x10f6 <_ZN7OneWire6searchEPhb+0xca>
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
    10e6:	fe 01       	movw	r30, r28
    10e8:	ef 0d       	add	r30, r15
    10ea:	f1 1d       	adc	r31, r1
    10ec:	93 81       	ldd	r25, Z+3	; 0x03
    10ee:	80 2f       	mov	r24, r16
    10f0:	80 95       	com	r24
    10f2:	89 23       	and	r24, r25
    10f4:	83 83       	std	Z+3, r24	; 0x03

            // serial number search direction write bit
            write_bit(search_direction);
    10f6:	61 2f       	mov	r22, r17
    10f8:	ce 01       	movw	r24, r28
    10fa:	0e 94 04 07 	call	0xe08	; 0xe08 <_ZN7OneWire9write_bitEh>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
    10fe:	e3 94       	inc	r14
            rom_byte_mask <<= 1;
    1100:	00 0f       	add	r16, r16

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0)
    1102:	11 f4       	brne	.+4      	; 0x1108 <_ZN7OneWire6searchEPhb+0xdc>
            {
                rom_byte_number++;
    1104:	f3 94       	inc	r15
                rom_byte_mask = 1;
    1106:	01 e0       	ldi	r16, 0x01	; 1
            }
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
    1108:	87 e0       	ldi	r24, 0x07	; 7
    110a:	8f 15       	cp	r24, r15
    110c:	08 f0       	brcs	.+2      	; 0x1110 <_ZN7OneWire6searchEPhb+0xe4>
    110e:	be cf       	rjmp	.-132    	; 0x108c <_ZN7OneWire6searchEPhb+0x60>

      // if the search was successful then
      if (!(id_bit_number < 65))
    1110:	80 e4       	ldi	r24, 0x40	; 64
    1112:	8e 15       	cp	r24, r14
    1114:	30 f4       	brcc	.+12     	; 0x1122 <_ZN7OneWire6searchEPhb+0xf6>
      {
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
    1116:	ab 86       	std	Y+11, r10	; 0x0b

         // check for last device
         if (LastDiscrepancy == 0)
    1118:	a1 10       	cpse	r10, r1
    111a:	14 c0       	rjmp	.+40     	; 0x1144 <_ZN7OneWire6searchEPhb+0x118>
            LastDeviceFlag = TRUE;
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	8d 87       	std	Y+13, r24	; 0x0d
    1120:	11 c0       	rjmp	.+34     	; 0x1144 <_ZN7OneWire6searchEPhb+0x118>
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
   {
      LastDiscrepancy = 0;
    1122:	1b 86       	std	Y+11, r1	; 0x0b
      LastDeviceFlag = FALSE;
    1124:	1d 86       	std	Y+13, r1	; 0x0d
      LastFamilyDiscrepancy = 0;
    1126:	1c 86       	std	Y+12, r1	; 0x0c
      search_result = FALSE;
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	15 c0       	rjmp	.+42     	; 0x1156 <_ZN7OneWire6searchEPhb+0x12a>
   } else {
      for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
    112c:	81 91       	ld	r24, Z+
    112e:	8d 93       	st	X+, r24
    1130:	ce 17       	cp	r28, r30
    1132:	df 07       	cpc	r29, r31
    1134:	d9 f7       	brne	.-10     	; 0x112c <_ZN7OneWire6searchEPhb+0x100>
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	0e c0       	rjmp	.+28     	; 0x1156 <_ZN7OneWire6searchEPhb+0x12a>
         if ((id_bit == 1) && (cmp_id_bit == 1))
            break;
         else
         {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit)
    113a:	18 13       	cpse	r17, r24
    113c:	d4 cf       	rjmp	.-88     	; 0x10e6 <_ZN7OneWire6searchEPhb+0xba>
    113e:	b3 cf       	rjmp	.-154    	; 0x10a6 <_ZN7OneWire6searchEPhb+0x7a>
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
    1140:	ae 2c       	mov	r10, r14
    1142:	d1 cf       	rjmp	.-94     	; 0x10e6 <_ZN7OneWire6searchEPhb+0xba>
         search_result = TRUE;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	88 23       	and	r24, r24
    1148:	61 f3       	breq	.-40     	; 0x1122 <_ZN7OneWire6searchEPhb+0xf6>
    114a:	fe 01       	movw	r30, r28
    114c:	33 96       	adiw	r30, 0x03	; 3
    114e:	ac 2d       	mov	r26, r12
    1150:	bd 2d       	mov	r27, r13
    1152:	2b 96       	adiw	r28, 0x0b	; 11
    1154:	eb cf       	rjmp	.-42     	; 0x112c <_ZN7OneWire6searchEPhb+0x100>
      search_result = FALSE;
   } else {
      for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
   }
   return search_result;
  }
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	1f 91       	pop	r17
    115c:	0f 91       	pop	r16
    115e:	ff 90       	pop	r15
    1160:	ef 90       	pop	r14
    1162:	df 90       	pop	r13
    1164:	cf 90       	pop	r12
    1166:	bf 90       	pop	r11
    1168:	af 90       	pop	r10
    116a:	9f 90       	pop	r9
    116c:	08 95       	ret

0000116e <_ZN7OneWire4crc8EPKhh>:
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
    116e:	2f ef       	ldi	r18, 0xFF	; 255
    1170:	26 0f       	add	r18, r22
    1172:	66 23       	and	r22, r22
    1174:	61 f0       	breq	.+24     	; 0x118e <_ZN7OneWire4crc8EPKhh+0x20>
    1176:	a8 2f       	mov	r26, r24
    1178:	b9 2f       	mov	r27, r25
    117a:	80 e0       	ldi	r24, 0x00	; 0
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
    117c:	ed 91       	ld	r30, X+
    117e:	e8 27       	eor	r30, r24
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	e8 59       	subi	r30, 0x98	; 152
    1184:	ff 4f       	sbci	r31, 0xFF	; 255
    1186:	84 91       	lpm	r24, Z
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
    1188:	21 50       	subi	r18, 0x01	; 1
    118a:	c0 f7       	brcc	.-16     	; 0x117c <_ZN7OneWire4crc8EPKhh+0xe>
    118c:	08 95       	ret
// compared to all those delayMicrosecond() calls.  But I got
// confused, so I use this table from the examples.)
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;
    118e:	80 e0       	ldi	r24, 0x00	; 0

	while (len--) {
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
	}
	return crc;
}
    1190:	08 95       	ret

00001192 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1192:	cf 92       	push	r12
    1194:	df 92       	push	r13
    1196:	ef 92       	push	r14
    1198:	ff 92       	push	r15
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	41 15       	cp	r20, r1
    11a4:	51 05       	cpc	r21, r1
    11a6:	c1 f0       	breq	.+48     	; 0x11d8 <_ZN5Print5writeEPKhj+0x46>
    11a8:	6a 01       	movw	r12, r20
    11aa:	8c 01       	movw	r16, r24
    11ac:	e6 2e       	mov	r14, r22
    11ae:	f7 2e       	mov	r15, r23
    11b0:	c0 e0       	ldi	r28, 0x00	; 0
    11b2:	d0 e0       	ldi	r29, 0x00	; 0
    11b4:	d7 01       	movw	r26, r14
    11b6:	6d 91       	ld	r22, X+
    11b8:	7d 01       	movw	r14, r26
    11ba:	d8 01       	movw	r26, r16
    11bc:	ed 91       	ld	r30, X+
    11be:	fc 91       	ld	r31, X
    11c0:	01 90       	ld	r0, Z+
    11c2:	f0 81       	ld	r31, Z
    11c4:	e0 2d       	mov	r30, r0
    11c6:	c8 01       	movw	r24, r16
    11c8:	09 95       	icall
    11ca:	89 2b       	or	r24, r25
    11cc:	39 f0       	breq	.+14     	; 0x11dc <_ZN5Print5writeEPKhj+0x4a>
    11ce:	21 96       	adiw	r28, 0x01	; 1
    11d0:	cc 16       	cp	r12, r28
    11d2:	dd 06       	cpc	r13, r29
    11d4:	79 f7       	brne	.-34     	; 0x11b4 <_ZN5Print5writeEPKhj+0x22>
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <_ZN5Print5writeEPKhj+0x4a>
    11d8:	c0 e0       	ldi	r28, 0x00	; 0
    11da:	d0 e0       	ldi	r29, 0x00	; 0
    11dc:	ce 01       	movw	r24, r28
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16
    11e6:	ff 90       	pop	r15
    11e8:	ef 90       	pop	r14
    11ea:	df 90       	pop	r13
    11ec:	cf 90       	pop	r12
    11ee:	08 95       	ret

000011f0 <_ZN5Print5printEPKc>:
    11f0:	61 15       	cp	r22, r1
    11f2:	71 05       	cpc	r23, r1
    11f4:	81 f0       	breq	.+32     	; 0x1216 <_ZN5Print5printEPKc+0x26>
    11f6:	fb 01       	movw	r30, r22
    11f8:	01 90       	ld	r0, Z+
    11fa:	00 20       	and	r0, r0
    11fc:	e9 f7       	brne	.-6      	; 0x11f8 <_ZN5Print5printEPKc+0x8>
    11fe:	31 97       	sbiw	r30, 0x01	; 1
    1200:	af 01       	movw	r20, r30
    1202:	46 1b       	sub	r20, r22
    1204:	57 0b       	sbc	r21, r23
    1206:	dc 01       	movw	r26, r24
    1208:	ed 91       	ld	r30, X+
    120a:	fc 91       	ld	r31, X
    120c:	02 80       	ldd	r0, Z+2	; 0x02
    120e:	f3 81       	ldd	r31, Z+3	; 0x03
    1210:	e0 2d       	mov	r30, r0
    1212:	09 95       	icall
    1214:	08 95       	ret
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	08 95       	ret

0000121c <_ZN5Print5printEc>:
    121c:	dc 01       	movw	r26, r24
    121e:	ed 91       	ld	r30, X+
    1220:	fc 91       	ld	r31, X
    1222:	01 90       	ld	r0, Z+
    1224:	f0 81       	ld	r31, Z
    1226:	e0 2d       	mov	r30, r0
    1228:	09 95       	icall
    122a:	08 95       	ret

0000122c <_ZN5Print5printERK9Printable>:
    122c:	db 01       	movw	r26, r22
    122e:	ed 91       	ld	r30, X+
    1230:	fc 91       	ld	r31, X
    1232:	11 97       	sbiw	r26, 0x01	; 1
    1234:	01 90       	ld	r0, Z+
    1236:	f0 81       	ld	r31, Z
    1238:	e0 2d       	mov	r30, r0
    123a:	bc 01       	movw	r22, r24
    123c:	cd 01       	movw	r24, r26
    123e:	09 95       	icall
    1240:	08 95       	ret

00001242 <_ZN5Print7printlnEv>:
    1242:	dc 01       	movw	r26, r24
    1244:	ed 91       	ld	r30, X+
    1246:	fc 91       	ld	r31, X
    1248:	02 80       	ldd	r0, Z+2	; 0x02
    124a:	f3 81       	ldd	r31, Z+3	; 0x03
    124c:	e0 2d       	mov	r30, r0
    124e:	42 e0       	ldi	r20, 0x02	; 2
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	6c e0       	ldi	r22, 0x0C	; 12
    1254:	72 e0       	ldi	r23, 0x02	; 2
    1256:	09 95       	icall
    1258:	08 95       	ret

0000125a <_ZN5Print7printlnEPKc>:
    125a:	0f 93       	push	r16
    125c:	1f 93       	push	r17
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	ec 01       	movw	r28, r24
    1264:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN5Print5printEPKc>
    1268:	8c 01       	movw	r16, r24
    126a:	ce 01       	movw	r24, r28
    126c:	0e 94 21 09 	call	0x1242	; 0x1242 <_ZN5Print7printlnEv>
    1270:	80 0f       	add	r24, r16
    1272:	91 1f       	adc	r25, r17
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	08 95       	ret

0000127e <_ZN5Print7printlnERK9Printable>:
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	ec 01       	movw	r28, r24
    1288:	0e 94 16 09 	call	0x122c	; 0x122c <_ZN5Print5printERK9Printable>
    128c:	8c 01       	movw	r16, r24
    128e:	ce 01       	movw	r24, r28
    1290:	0e 94 21 09 	call	0x1242	; 0x1242 <_ZN5Print7printlnEv>
    1294:	80 0f       	add	r24, r16
    1296:	91 1f       	adc	r25, r17
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	1f 91       	pop	r17
    129e:	0f 91       	pop	r16
    12a0:	08 95       	ret

000012a2 <_ZN5Print11printNumberEmh>:
    12a2:	8f 92       	push	r8
    12a4:	9f 92       	push	r9
    12a6:	af 92       	push	r10
    12a8:	bf 92       	push	r11
    12aa:	ef 92       	push	r14
    12ac:	ff 92       	push	r15
    12ae:	0f 93       	push	r16
    12b0:	1f 93       	push	r17
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	a1 97       	sbiw	r28, 0x21	; 33
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	de bf       	out	0x3e, r29	; 62
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	cd bf       	out	0x3d, r28	; 61
    12c6:	7c 01       	movw	r14, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	ba 01       	movw	r22, r20
    12cc:	19 a2       	std	Y+33, r1	; 0x21
    12ce:	22 30       	cpi	r18, 0x02	; 2
    12d0:	08 f4       	brcc	.+2      	; 0x12d4 <_ZN5Print11printNumberEmh+0x32>
    12d2:	2a e0       	ldi	r18, 0x0A	; 10
    12d4:	8e 01       	movw	r16, r28
    12d6:	0f 5d       	subi	r16, 0xDF	; 223
    12d8:	1f 4f       	sbci	r17, 0xFF	; 255
    12da:	82 2e       	mov	r8, r18
    12dc:	91 2c       	mov	r9, r1
    12de:	a1 2c       	mov	r10, r1
    12e0:	b1 2c       	mov	r11, r1
    12e2:	a5 01       	movw	r20, r10
    12e4:	94 01       	movw	r18, r8
    12e6:	0e 94 b8 23 	call	0x4770	; 0x4770 <__udivmodsi4>
    12ea:	e6 2f       	mov	r30, r22
    12ec:	62 2f       	mov	r22, r18
    12ee:	73 2f       	mov	r23, r19
    12f0:	84 2f       	mov	r24, r20
    12f2:	95 2f       	mov	r25, r21
    12f4:	01 50       	subi	r16, 0x01	; 1
    12f6:	11 09       	sbc	r17, r1
    12f8:	ea 30       	cpi	r30, 0x0A	; 10
    12fa:	10 f4       	brcc	.+4      	; 0x1300 <_ZN5Print11printNumberEmh+0x5e>
    12fc:	e0 5d       	subi	r30, 0xD0	; 208
    12fe:	01 c0       	rjmp	.+2      	; 0x1302 <_ZN5Print11printNumberEmh+0x60>
    1300:	e9 5c       	subi	r30, 0xC9	; 201
    1302:	d8 01       	movw	r26, r16
    1304:	ec 93       	st	X, r30
    1306:	61 15       	cp	r22, r1
    1308:	71 05       	cpc	r23, r1
    130a:	81 05       	cpc	r24, r1
    130c:	91 05       	cpc	r25, r1
    130e:	49 f7       	brne	.-46     	; 0x12e2 <_ZN5Print11printNumberEmh+0x40>
    1310:	01 15       	cp	r16, r1
    1312:	11 05       	cpc	r17, r1
    1314:	91 f0       	breq	.+36     	; 0x133a <_ZN5Print11printNumberEmh+0x98>
    1316:	f8 01       	movw	r30, r16
    1318:	01 90       	ld	r0, Z+
    131a:	00 20       	and	r0, r0
    131c:	e9 f7       	brne	.-6      	; 0x1318 <_ZN5Print11printNumberEmh+0x76>
    131e:	31 97       	sbiw	r30, 0x01	; 1
    1320:	af 01       	movw	r20, r30
    1322:	40 1b       	sub	r20, r16
    1324:	51 0b       	sbc	r21, r17
    1326:	d7 01       	movw	r26, r14
    1328:	ed 91       	ld	r30, X+
    132a:	fc 91       	ld	r31, X
    132c:	02 80       	ldd	r0, Z+2	; 0x02
    132e:	f3 81       	ldd	r31, Z+3	; 0x03
    1330:	e0 2d       	mov	r30, r0
    1332:	b8 01       	movw	r22, r16
    1334:	c7 01       	movw	r24, r14
    1336:	09 95       	icall
    1338:	02 c0       	rjmp	.+4      	; 0x133e <_ZN5Print11printNumberEmh+0x9c>
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	a1 96       	adiw	r28, 0x21	; 33
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	de bf       	out	0x3e, r29	; 62
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	cd bf       	out	0x3d, r28	; 61
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	ff 90       	pop	r15
    1354:	ef 90       	pop	r14
    1356:	bf 90       	pop	r11
    1358:	af 90       	pop	r10
    135a:	9f 90       	pop	r9
    135c:	8f 90       	pop	r8
    135e:	08 95       	ret

00001360 <_ZN5Print5printEli>:
    1360:	cf 92       	push	r12
    1362:	df 92       	push	r13
    1364:	ef 92       	push	r14
    1366:	ff 92       	push	r15
    1368:	0f 93       	push	r16
    136a:	1f 93       	push	r17
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	ec 01       	movw	r28, r24
    1372:	6a 01       	movw	r12, r20
    1374:	7b 01       	movw	r14, r22
    1376:	21 15       	cp	r18, r1
    1378:	31 05       	cpc	r19, r1
    137a:	41 f4       	brne	.+16     	; 0x138c <_ZN5Print5printEli+0x2c>
    137c:	e8 81       	ld	r30, Y
    137e:	f9 81       	ldd	r31, Y+1	; 0x01
    1380:	01 90       	ld	r0, Z+
    1382:	f0 81       	ld	r31, Z
    1384:	e0 2d       	mov	r30, r0
    1386:	64 2f       	mov	r22, r20
    1388:	09 95       	icall
    138a:	1d c0       	rjmp	.+58     	; 0x13c6 <_ZN5Print5printEli+0x66>
    138c:	2a 30       	cpi	r18, 0x0A	; 10
    138e:	31 05       	cpc	r19, r1
    1390:	c1 f4       	brne	.+48     	; 0x13c2 <_ZN5Print5printEli+0x62>
    1392:	77 23       	and	r23, r23
    1394:	94 f4       	brge	.+36     	; 0x13ba <_ZN5Print5printEli+0x5a>
    1396:	6d e2       	ldi	r22, 0x2D	; 45
    1398:	0e 94 0e 09 	call	0x121c	; 0x121c <_ZN5Print5printEc>
    139c:	8c 01       	movw	r16, r24
    139e:	44 27       	eor	r20, r20
    13a0:	55 27       	eor	r21, r21
    13a2:	ba 01       	movw	r22, r20
    13a4:	4c 19       	sub	r20, r12
    13a6:	5d 09       	sbc	r21, r13
    13a8:	6e 09       	sbc	r22, r14
    13aa:	7f 09       	sbc	r23, r15
    13ac:	2a e0       	ldi	r18, 0x0A	; 10
    13ae:	ce 01       	movw	r24, r28
    13b0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <_ZN5Print11printNumberEmh>
    13b4:	80 0f       	add	r24, r16
    13b6:	91 1f       	adc	r25, r17
    13b8:	06 c0       	rjmp	.+12     	; 0x13c6 <_ZN5Print5printEli+0x66>
    13ba:	2a e0       	ldi	r18, 0x0A	; 10
    13bc:	0e 94 51 09 	call	0x12a2	; 0x12a2 <_ZN5Print11printNumberEmh>
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <_ZN5Print5printEli+0x66>
    13c2:	0e 94 51 09 	call	0x12a2	; 0x12a2 <_ZN5Print11printNumberEmh>
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	1f 91       	pop	r17
    13cc:	0f 91       	pop	r16
    13ce:	ff 90       	pop	r15
    13d0:	ef 90       	pop	r14
    13d2:	df 90       	pop	r13
    13d4:	cf 90       	pop	r12
    13d6:	08 95       	ret

000013d8 <_ZN5Print5printEii>:
    13d8:	9a 01       	movw	r18, r20
    13da:	ab 01       	movw	r20, r22
    13dc:	77 0f       	add	r23, r23
    13de:	66 0b       	sbc	r22, r22
    13e0:	77 0b       	sbc	r23, r23
    13e2:	0e 94 b0 09 	call	0x1360	; 0x1360 <_ZN5Print5printEli>
    13e6:	08 95       	ret

000013e8 <_ZN5Print5printEmi>:
    13e8:	21 15       	cp	r18, r1
    13ea:	31 05       	cpc	r19, r1
    13ec:	49 f4       	brne	.+18     	; 0x1400 <_ZN5Print5printEmi+0x18>
    13ee:	dc 01       	movw	r26, r24
    13f0:	ed 91       	ld	r30, X+
    13f2:	fc 91       	ld	r31, X
    13f4:	01 90       	ld	r0, Z+
    13f6:	f0 81       	ld	r31, Z
    13f8:	e0 2d       	mov	r30, r0
    13fa:	64 2f       	mov	r22, r20
    13fc:	09 95       	icall
    13fe:	08 95       	ret
    1400:	0e 94 51 09 	call	0x12a2	; 0x12a2 <_ZN5Print11printNumberEmh>
    1404:	08 95       	ret

00001406 <_ZN5Print5printEhi>:
    1406:	9a 01       	movw	r18, r20
    1408:	46 2f       	mov	r20, r22
    140a:	50 e0       	ldi	r21, 0x00	; 0
    140c:	60 e0       	ldi	r22, 0x00	; 0
    140e:	70 e0       	ldi	r23, 0x00	; 0
    1410:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <_ZN5Print5printEmi>
    1414:	08 95       	ret

00001416 <_ZN5Print5printEji>:
    1416:	9a 01       	movw	r18, r20
    1418:	ab 01       	movw	r20, r22
    141a:	60 e0       	ldi	r22, 0x00	; 0
    141c:	70 e0       	ldi	r23, 0x00	; 0
    141e:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <_ZN5Print5printEmi>
    1422:	08 95       	ret

00001424 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1424:	7f 92       	push	r7
    1426:	8f 92       	push	r8
    1428:	9f 92       	push	r9
    142a:	af 92       	push	r10
    142c:	bf 92       	push	r11
    142e:	cf 92       	push	r12
    1430:	df 92       	push	r13
    1432:	ef 92       	push	r14
    1434:	ff 92       	push	r15
    1436:	0f 93       	push	r16
    1438:	1f 93       	push	r17
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	00 d0       	rcall	.+0      	; 0x1440 <_ZN5Print10printFloatEdh+0x1c>
    1440:	00 d0       	rcall	.+0      	; 0x1442 <_ZN5Print10printFloatEdh+0x1e>
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	8c 01       	movw	r16, r24
    1448:	4a 01       	movw	r8, r20
    144a:	5b 01       	movw	r10, r22
    144c:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    144e:	9a 01       	movw	r18, r20
    1450:	ab 01       	movw	r20, r22
    1452:	c5 01       	movw	r24, r10
    1454:	b4 01       	movw	r22, r8
    1456:	0e 94 64 23 	call	0x46c8	; 0x46c8 <__unordsf2>
    145a:	88 23       	and	r24, r24
    145c:	31 f0       	breq	.+12     	; 0x146a <_ZN5Print10printFloatEdh+0x46>
    145e:	6f e0       	ldi	r22, 0x0F	; 15
    1460:	72 e0       	ldi	r23, 0x02	; 2
    1462:	c8 01       	movw	r24, r16
    1464:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN5Print5printEPKc>
    1468:	d7 c0       	rjmp	.+430    	; 0x1618 <_ZN5Print10printFloatEdh+0x1f4>
  if (isinf(number)) return print("inf");
    146a:	75 01       	movw	r14, r10
    146c:	64 01       	movw	r12, r8
    146e:	e8 94       	clt
    1470:	f7 f8       	bld	r15, 7
    1472:	2f ef       	ldi	r18, 0xFF	; 255
    1474:	3f ef       	ldi	r19, 0xFF	; 255
    1476:	4f e7       	ldi	r20, 0x7F	; 127
    1478:	5f e7       	ldi	r21, 0x7F	; 127
    147a:	c7 01       	movw	r24, r14
    147c:	b6 01       	movw	r22, r12
    147e:	0e 94 64 23 	call	0x46c8	; 0x46c8 <__unordsf2>
    1482:	81 11       	cpse	r24, r1
    1484:	10 c0       	rjmp	.+32     	; 0x14a6 <_ZN5Print10printFloatEdh+0x82>
    1486:	2f ef       	ldi	r18, 0xFF	; 255
    1488:	3f ef       	ldi	r19, 0xFF	; 255
    148a:	4f e7       	ldi	r20, 0x7F	; 127
    148c:	5f e7       	ldi	r21, 0x7F	; 127
    148e:	c7 01       	movw	r24, r14
    1490:	b6 01       	movw	r22, r12
    1492:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <__cmpsf2>
    1496:	18 16       	cp	r1, r24
    1498:	34 f4       	brge	.+12     	; 0x14a6 <_ZN5Print10printFloatEdh+0x82>
    149a:	63 e1       	ldi	r22, 0x13	; 19
    149c:	72 e0       	ldi	r23, 0x02	; 2
    149e:	c8 01       	movw	r24, r16
    14a0:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN5Print5printEPKc>
    14a4:	b9 c0       	rjmp	.+370    	; 0x1618 <_ZN5Print10printFloatEdh+0x1f4>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    14a6:	2f ef       	ldi	r18, 0xFF	; 255
    14a8:	3f ef       	ldi	r19, 0xFF	; 255
    14aa:	4f e7       	ldi	r20, 0x7F	; 127
    14ac:	5f e4       	ldi	r21, 0x4F	; 79
    14ae:	c5 01       	movw	r24, r10
    14b0:	b4 01       	movw	r22, r8
    14b2:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <__gesf2>
    14b6:	18 16       	cp	r1, r24
    14b8:	34 f4       	brge	.+12     	; 0x14c6 <_ZN5Print10printFloatEdh+0xa2>
    14ba:	67 e1       	ldi	r22, 0x17	; 23
    14bc:	72 e0       	ldi	r23, 0x02	; 2
    14be:	c8 01       	movw	r24, r16
    14c0:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN5Print5printEPKc>
    14c4:	a9 c0       	rjmp	.+338    	; 0x1618 <_ZN5Print10printFloatEdh+0x1f4>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    14c6:	2f ef       	ldi	r18, 0xFF	; 255
    14c8:	3f ef       	ldi	r19, 0xFF	; 255
    14ca:	4f e7       	ldi	r20, 0x7F	; 127
    14cc:	5f ec       	ldi	r21, 0xCF	; 207
    14ce:	c5 01       	movw	r24, r10
    14d0:	b4 01       	movw	r22, r8
    14d2:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <__cmpsf2>
    14d6:	88 23       	and	r24, r24
    14d8:	34 f4       	brge	.+12     	; 0x14e6 <_ZN5Print10printFloatEdh+0xc2>
    14da:	67 e1       	ldi	r22, 0x17	; 23
    14dc:	72 e0       	ldi	r23, 0x02	; 2
    14de:	c8 01       	movw	r24, r16
    14e0:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN5Print5printEPKc>
    14e4:	99 c0       	rjmp	.+306    	; 0x1618 <_ZN5Print10printFloatEdh+0x1f4>
  
  // Handle negative numbers
  if (number < 0.0)
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	a9 01       	movw	r20, r18
    14ec:	c5 01       	movw	r24, r10
    14ee:	b4 01       	movw	r22, r8
    14f0:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <__cmpsf2>
    14f4:	88 23       	and	r24, r24
    14f6:	54 f4       	brge	.+20     	; 0x150c <_ZN5Print10printFloatEdh+0xe8>
  {
     n += print('-');
    14f8:	6d e2       	ldi	r22, 0x2D	; 45
    14fa:	c8 01       	movw	r24, r16
    14fc:	0e 94 0e 09 	call	0x121c	; 0x121c <_ZN5Print5printEc>
    1500:	7c 01       	movw	r14, r24
     number = -number;
    1502:	b7 fa       	bst	r11, 7
    1504:	b0 94       	com	r11
    1506:	b7 f8       	bld	r11, 7
    1508:	b0 94       	com	r11
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <_ZN5Print10printFloatEdh+0xec>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    150c:	e1 2c       	mov	r14, r1
    150e:	f1 2c       	mov	r15, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1510:	77 20       	and	r7, r7
    1512:	09 f4       	brne	.+2      	; 0x1516 <_ZN5Print10printFloatEdh+0xf2>
    1514:	6e c0       	rjmp	.+220    	; 0x15f2 <_ZN5Print10printFloatEdh+0x1ce>
    1516:	19 82       	std	Y+1, r1	; 0x01
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	9f e3       	ldi	r25, 0x3F	; 63
    rounding /= 10.0;
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	40 e2       	ldi	r20, 0x20	; 32
    1526:	51 e4       	ldi	r21, 0x41	; 65
    1528:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    152c:	29 81       	ldd	r18, Y+1	; 0x01
    152e:	2f 5f       	subi	r18, 0xFF	; 255
    1530:	29 83       	std	Y+1, r18	; 0x01
    1532:	72 12       	cpse	r7, r18
    1534:	f5 cf       	rjmp	.-22     	; 0x1520 <_ZN5Print10printFloatEdh+0xfc>
    1536:	2c c0       	rjmp	.+88     	; 0x1590 <_ZN5Print10printFloatEdh+0x16c>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	40 e2       	ldi	r20, 0x20	; 32
    153e:	51 e4       	ldi	r21, 0x41	; 65
    1540:	c5 01       	movw	r24, r10
    1542:	b4 01       	movw	r22, r8
    1544:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsf3>
    1548:	4b 01       	movw	r8, r22
    154a:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    154c:	0e 94 62 22 	call	0x44c4	; 0x44c4 <__fixunssfsi>
    1550:	6b 01       	movw	r12, r22
    1552:	7c 01       	movw	r14, r24
    n += print(toPrint);
    1554:	4a e0       	ldi	r20, 0x0A	; 10
    1556:	50 e0       	ldi	r21, 0x00	; 0
    1558:	c8 01       	movw	r24, r16
    155a:	0e 94 0b 0a 	call	0x1416	; 0x1416 <_ZN5Print5printEji>
    155e:	29 81       	ldd	r18, Y+1	; 0x01
    1560:	3a 81       	ldd	r19, Y+2	; 0x02
    1562:	28 0f       	add	r18, r24
    1564:	39 1f       	adc	r19, r25
    1566:	3a 83       	std	Y+2, r19	; 0x02
    1568:	29 83       	std	Y+1, r18	; 0x01
    remainder -= toPrint; 
    156a:	b6 01       	movw	r22, r12
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	0e 94 91 22 	call	0x4522	; 0x4522 <__floatunsisf>
    1574:	9b 01       	movw	r18, r22
    1576:	ac 01       	movw	r20, r24
    1578:	c5 01       	movw	r24, r10
    157a:	b4 01       	movw	r22, r8
    157c:	0e 94 b0 03 	call	0x760	; 0x760 <__subsf3>
    1580:	4b 01       	movw	r8, r22
    1582:	5c 01       	movw	r10, r24
    1584:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1586:	71 10       	cpse	r7, r1
    1588:	d7 cf       	rjmp	.-82     	; 0x1538 <_ZN5Print10printFloatEdh+0x114>
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	9a 81       	ldd	r25, Y+2	; 0x02
    158e:	44 c0       	rjmp	.+136    	; 0x1618 <_ZN5Print10printFloatEdh+0x1f4>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    1590:	9b 01       	movw	r18, r22
    1592:	ac 01       	movw	r20, r24
    1594:	c5 01       	movw	r24, r10
    1596:	b4 01       	movw	r22, r8
    1598:	0e 94 b1 03 	call	0x762	; 0x762 <__addsf3>
    159c:	4b 01       	movw	r8, r22
    159e:	5c 01       	movw	r10, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    15a0:	0e 94 62 22 	call	0x44c4	; 0x44c4 <__fixunssfsi>
    15a4:	69 83       	std	Y+1, r22	; 0x01
    15a6:	7a 83       	std	Y+2, r23	; 0x02
    15a8:	8b 83       	std	Y+3, r24	; 0x03
    15aa:	9c 83       	std	Y+4, r25	; 0x04
  double remainder = number - (double)int_part;
    15ac:	0e 94 91 22 	call	0x4522	; 0x4522 <__floatunsisf>
    15b0:	9b 01       	movw	r18, r22
    15b2:	ac 01       	movw	r20, r24
    15b4:	c5 01       	movw	r24, r10
    15b6:	b4 01       	movw	r22, r8
    15b8:	0e 94 b0 03 	call	0x760	; 0x760 <__subsf3>
    15bc:	4b 01       	movw	r8, r22
    15be:	5c 01       	movw	r10, r24
  n += print(int_part);
    15c0:	2a e0       	ldi	r18, 0x0A	; 10
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	49 81       	ldd	r20, Y+1	; 0x01
    15c6:	5a 81       	ldd	r21, Y+2	; 0x02
    15c8:	6b 81       	ldd	r22, Y+3	; 0x03
    15ca:	7c 81       	ldd	r23, Y+4	; 0x04
    15cc:	c8 01       	movw	r24, r16
    15ce:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <_ZN5Print5printEmi>
    15d2:	9a 83       	std	Y+2, r25	; 0x02
    15d4:	89 83       	std	Y+1, r24	; 0x01

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    15d6:	6e e2       	ldi	r22, 0x2E	; 46
    15d8:	c8 01       	movw	r24, r16
    15da:	0e 94 0e 09 	call	0x121c	; 0x121c <_ZN5Print5printEc>
    15de:	29 81       	ldd	r18, Y+1	; 0x01
    15e0:	3a 81       	ldd	r19, Y+2	; 0x02
    15e2:	82 0f       	add	r24, r18
    15e4:	93 1f       	adc	r25, r19
    15e6:	9c 01       	movw	r18, r24
    15e8:	2e 0d       	add	r18, r14
    15ea:	3f 1d       	adc	r19, r15
    15ec:	3a 83       	std	Y+2, r19	; 0x02
    15ee:	29 83       	std	Y+1, r18	; 0x01
    15f0:	a3 cf       	rjmp	.-186    	; 0x1538 <_ZN5Print10printFloatEdh+0x114>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	40 e0       	ldi	r20, 0x00	; 0
    15f8:	5f e3       	ldi	r21, 0x3F	; 63
    15fa:	c5 01       	movw	r24, r10
    15fc:	b4 01       	movw	r22, r8
    15fe:	0e 94 b1 03 	call	0x762	; 0x762 <__addsf3>
    1602:	0e 94 62 22 	call	0x44c4	; 0x44c4 <__fixunssfsi>
    1606:	ab 01       	movw	r20, r22
    1608:	bc 01       	movw	r22, r24
    160a:	2a e0       	ldi	r18, 0x0A	; 10
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	c8 01       	movw	r24, r16
    1610:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <_ZN5Print5printEmi>
    1614:	8e 0d       	add	r24, r14
    1616:	9f 1d       	adc	r25, r15
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	ff 90       	pop	r15
    162a:	ef 90       	pop	r14
    162c:	df 90       	pop	r13
    162e:	cf 90       	pop	r12
    1630:	bf 90       	pop	r11
    1632:	af 90       	pop	r10
    1634:	9f 90       	pop	r9
    1636:	8f 90       	pop	r8
    1638:	7f 90       	pop	r7
    163a:	08 95       	ret

0000163c <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    163c:	0e 94 12 0a 	call	0x1424	; 0x1424 <_ZN5Print10printFloatEdh>
}
    1640:	08 95       	ret

00001642 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1642:	1f 92       	push	r1
    1644:	0f 92       	push	r0
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	0f 92       	push	r0
    164a:	11 24       	eor	r1, r1
    164c:	2f 93       	push	r18
    164e:	3f 93       	push	r19
    1650:	8f 93       	push	r24
    1652:	9f 93       	push	r25
    1654:	af 93       	push	r26
    1656:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1658:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <timer0_millis>
    165c:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <timer0_millis+0x1>
    1660:	a0 91 bc 03 	lds	r26, 0x03BC	; 0x8003bc <timer0_millis+0x2>
    1664:	b0 91 bd 03 	lds	r27, 0x03BD	; 0x8003bd <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1668:	30 91 b9 03 	lds	r19, 0x03B9	; 0x8003b9 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    166c:	23 e0       	ldi	r18, 0x03	; 3
    166e:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1670:	2d 37       	cpi	r18, 0x7D	; 125
    1672:	20 f4       	brcc	.+8      	; 0x167c <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1674:	01 96       	adiw	r24, 0x01	; 1
    1676:	a1 1d       	adc	r26, r1
    1678:	b1 1d       	adc	r27, r1
    167a:	05 c0       	rjmp	.+10     	; 0x1686 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    167c:	26 e8       	ldi	r18, 0x86	; 134
    167e:	23 0f       	add	r18, r19
		m += 1;
    1680:	02 96       	adiw	r24, 0x02	; 2
    1682:	a1 1d       	adc	r26, r1
    1684:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1686:	20 93 b9 03 	sts	0x03B9, r18	; 0x8003b9 <timer0_fract>
	timer0_millis = m;
    168a:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <timer0_millis>
    168e:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <timer0_millis+0x1>
    1692:	a0 93 bc 03 	sts	0x03BC, r26	; 0x8003bc <timer0_millis+0x2>
    1696:	b0 93 bd 03 	sts	0x03BD, r27	; 0x8003bd <timer0_millis+0x3>
	timer0_overflow_count++;
    169a:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <timer0_overflow_count>
    169e:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <timer0_overflow_count+0x1>
    16a2:	a0 91 c0 03 	lds	r26, 0x03C0	; 0x8003c0 <timer0_overflow_count+0x2>
    16a6:	b0 91 c1 03 	lds	r27, 0x03C1	; 0x8003c1 <timer0_overflow_count+0x3>
    16aa:	01 96       	adiw	r24, 0x01	; 1
    16ac:	a1 1d       	adc	r26, r1
    16ae:	b1 1d       	adc	r27, r1
    16b0:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <timer0_overflow_count>
    16b4:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <timer0_overflow_count+0x1>
    16b8:	a0 93 c0 03 	sts	0x03C0, r26	; 0x8003c0 <timer0_overflow_count+0x2>
    16bc:	b0 93 c1 03 	sts	0x03C1, r27	; 0x8003c1 <timer0_overflow_count+0x3>
}
    16c0:	bf 91       	pop	r27
    16c2:	af 91       	pop	r26
    16c4:	9f 91       	pop	r25
    16c6:	8f 91       	pop	r24
    16c8:	3f 91       	pop	r19
    16ca:	2f 91       	pop	r18
    16cc:	0f 90       	pop	r0
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	0f 90       	pop	r0
    16d2:	1f 90       	pop	r1
    16d4:	18 95       	reti

000016d6 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    16d6:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    16d8:	f8 94       	cli
	m = timer0_millis;
    16da:	60 91 ba 03 	lds	r22, 0x03BA	; 0x8003ba <timer0_millis>
    16de:	70 91 bb 03 	lds	r23, 0x03BB	; 0x8003bb <timer0_millis+0x1>
    16e2:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <timer0_millis+0x2>
    16e6:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <timer0_millis+0x3>
	SREG = oldSREG;
    16ea:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    16ec:	08 95       	ret

000016ee <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    16ee:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    16f0:	f8 94       	cli
	m = timer0_overflow_count;
    16f2:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <timer0_overflow_count>
    16f6:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <timer0_overflow_count+0x1>
    16fa:	a0 91 c0 03 	lds	r26, 0x03C0	; 0x8003c0 <timer0_overflow_count+0x2>
    16fe:	b0 91 c1 03 	lds	r27, 0x03C1	; 0x8003c1 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1702:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1704:	a8 9b       	sbis	0x15, 0	; 21
    1706:	05 c0       	rjmp	.+10     	; 0x1712 <micros+0x24>
    1708:	2f 3f       	cpi	r18, 0xFF	; 255
    170a:	19 f0       	breq	.+6      	; 0x1712 <micros+0x24>
		m++;
    170c:	01 96       	adiw	r24, 0x01	; 1
    170e:	a1 1d       	adc	r26, r1
    1710:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1712:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1714:	ba 2f       	mov	r27, r26
    1716:	a9 2f       	mov	r26, r25
    1718:	98 2f       	mov	r25, r24
    171a:	88 27       	eor	r24, r24
    171c:	82 0f       	add	r24, r18
    171e:	91 1d       	adc	r25, r1
    1720:	a1 1d       	adc	r26, r1
    1722:	b1 1d       	adc	r27, r1
    1724:	bc 01       	movw	r22, r24
    1726:	cd 01       	movw	r24, r26
    1728:	42 e0       	ldi	r20, 0x02	; 2
    172a:	66 0f       	add	r22, r22
    172c:	77 1f       	adc	r23, r23
    172e:	88 1f       	adc	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	4a 95       	dec	r20
    1734:	d1 f7       	brne	.-12     	; 0x172a <micros+0x3c>
}
    1736:	08 95       	ret

00001738 <delay>:

void delay(unsigned long ms)
{
    1738:	8f 92       	push	r8
    173a:	9f 92       	push	r9
    173c:	af 92       	push	r10
    173e:	bf 92       	push	r11
    1740:	cf 92       	push	r12
    1742:	df 92       	push	r13
    1744:	ef 92       	push	r14
    1746:	ff 92       	push	r15
    1748:	6b 01       	movw	r12, r22
    174a:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    174c:	0e 94 77 0b 	call	0x16ee	; 0x16ee <micros>
    1750:	4b 01       	movw	r8, r22
    1752:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1754:	c1 14       	cp	r12, r1
    1756:	d1 04       	cpc	r13, r1
    1758:	e1 04       	cpc	r14, r1
    175a:	f1 04       	cpc	r15, r1
    175c:	01 f1       	breq	.+64     	; 0x179e <delay+0x66>
		yield();
    175e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1762:	0e 94 77 0b 	call	0x16ee	; 0x16ee <micros>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	88 19       	sub	r24, r8
    176c:	99 09       	sbc	r25, r9
    176e:	aa 09       	sbc	r26, r10
    1770:	bb 09       	sbc	r27, r11
    1772:	88 3e       	cpi	r24, 0xE8	; 232
    1774:	93 40       	sbci	r25, 0x03	; 3
    1776:	a1 05       	cpc	r26, r1
    1778:	b1 05       	cpc	r27, r1
    177a:	60 f3       	brcs	.-40     	; 0x1754 <delay+0x1c>
			ms--;
    177c:	21 e0       	ldi	r18, 0x01	; 1
    177e:	c2 1a       	sub	r12, r18
    1780:	d1 08       	sbc	r13, r1
    1782:	e1 08       	sbc	r14, r1
    1784:	f1 08       	sbc	r15, r1
			start += 1000;
    1786:	88 ee       	ldi	r24, 0xE8	; 232
    1788:	88 0e       	add	r8, r24
    178a:	83 e0       	ldi	r24, 0x03	; 3
    178c:	98 1e       	adc	r9, r24
    178e:	a1 1c       	adc	r10, r1
    1790:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1792:	c1 14       	cp	r12, r1
    1794:	d1 04       	cpc	r13, r1
    1796:	e1 04       	cpc	r14, r1
    1798:	f1 04       	cpc	r15, r1
    179a:	19 f7       	brne	.-58     	; 0x1762 <delay+0x2a>
    179c:	db cf       	rjmp	.-74     	; 0x1754 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    179e:	ff 90       	pop	r15
    17a0:	ef 90       	pop	r14
    17a2:	df 90       	pop	r13
    17a4:	cf 90       	pop	r12
    17a6:	bf 90       	pop	r11
    17a8:	af 90       	pop	r10
    17aa:	9f 90       	pop	r9
    17ac:	8f 90       	pop	r8
    17ae:	08 95       	ret

000017b0 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    17b0:	82 30       	cpi	r24, 0x02	; 2
    17b2:	91 05       	cpc	r25, r1
    17b4:	38 f0       	brcs	.+14     	; 0x17c4 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    17b6:	88 0f       	add	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	88 0f       	add	r24, r24
    17bc:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    17be:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	f1 f7       	brne	.-4      	; 0x17c0 <delayMicroseconds+0x10>
    17c4:	08 95       	ret

000017c6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    17c6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    17c8:	84 b5       	in	r24, 0x24	; 36
    17ca:	82 60       	ori	r24, 0x02	; 2
    17cc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    17ce:	84 b5       	in	r24, 0x24	; 36
    17d0:	81 60       	ori	r24, 0x01	; 1
    17d2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    17d4:	85 b5       	in	r24, 0x25	; 37
    17d6:	82 60       	ori	r24, 0x02	; 2
    17d8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    17da:	85 b5       	in	r24, 0x25	; 37
    17dc:	81 60       	ori	r24, 0x01	; 1
    17de:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    17e0:	ee e6       	ldi	r30, 0x6E	; 110
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	81 60       	ori	r24, 0x01	; 1
    17e8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    17ea:	e1 e8       	ldi	r30, 0x81	; 129
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    17f0:	80 81       	ld	r24, Z
    17f2:	82 60       	ori	r24, 0x02	; 2
    17f4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    17f6:	80 81       	ld	r24, Z
    17f8:	81 60       	ori	r24, 0x01	; 1
    17fa:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    17fc:	e0 e8       	ldi	r30, 0x80	; 128
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	81 60       	ori	r24, 0x01	; 1
    1804:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1806:	e1 eb       	ldi	r30, 0xB1	; 177
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	84 60       	ori	r24, 0x04	; 4
    180e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1810:	e0 eb       	ldi	r30, 0xB0	; 176
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	81 60       	ori	r24, 0x01	; 1
    1818:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    181a:	ea e7       	ldi	r30, 0x7A	; 122
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	84 60       	ori	r24, 0x04	; 4
    1822:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1824:	80 81       	ld	r24, Z
    1826:	82 60       	ori	r24, 0x02	; 2
    1828:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    182a:	80 81       	ld	r24, Z
    182c:	81 60       	ori	r24, 0x01	; 1
    182e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1830:	80 81       	ld	r24, Z
    1832:	80 68       	ori	r24, 0x80	; 128
    1834:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1836:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    183a:	08 95       	ret

0000183c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    183c:	83 30       	cpi	r24, 0x03	; 3
    183e:	81 f0       	breq	.+32     	; 0x1860 <turnOffPWM+0x24>
    1840:	28 f4       	brcc	.+10     	; 0x184c <turnOffPWM+0x10>
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	99 f0       	breq	.+38     	; 0x186c <turnOffPWM+0x30>
    1846:	82 30       	cpi	r24, 0x02	; 2
    1848:	a1 f0       	breq	.+40     	; 0x1872 <turnOffPWM+0x36>
    184a:	08 95       	ret
    184c:	87 30       	cpi	r24, 0x07	; 7
    184e:	a9 f0       	breq	.+42     	; 0x187a <turnOffPWM+0x3e>
    1850:	88 30       	cpi	r24, 0x08	; 8
    1852:	b9 f0       	breq	.+46     	; 0x1882 <turnOffPWM+0x46>
    1854:	84 30       	cpi	r24, 0x04	; 4
    1856:	d1 f4       	brne	.+52     	; 0x188c <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1858:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    185c:	8f 7d       	andi	r24, 0xDF	; 223
    185e:	03 c0       	rjmp	.+6      	; 0x1866 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1860:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1864:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1866:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    186a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    186c:	84 b5       	in	r24, 0x24	; 36
    186e:	8f 77       	andi	r24, 0x7F	; 127
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1872:	84 b5       	in	r24, 0x24	; 36
    1874:	8f 7d       	andi	r24, 0xDF	; 223
    1876:	84 bd       	out	0x24, r24	; 36
    1878:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    187a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    187e:	8f 77       	andi	r24, 0x7F	; 127
    1880:	03 c0       	rjmp	.+6      	; 0x1888 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1882:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1886:	8f 7d       	andi	r24, 0xDF	; 223
    1888:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    188c:	08 95       	ret

0000188e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	fc 01       	movw	r30, r24
    1896:	e4 58       	subi	r30, 0x84	; 132
    1898:	fe 4f       	sbci	r31, 0xFE	; 254
    189a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    189c:	fc 01       	movw	r30, r24
    189e:	e0 57       	subi	r30, 0x70	; 112
    18a0:	fe 4f       	sbci	r31, 0xFE	; 254
    18a2:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    18a4:	88 23       	and	r24, r24
    18a6:	61 f1       	breq	.+88     	; 0x1900 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	88 0f       	add	r24, r24
    18ac:	99 1f       	adc	r25, r25
    18ae:	fc 01       	movw	r30, r24
    18b0:	e8 54       	subi	r30, 0x48	; 72
    18b2:	fe 4f       	sbci	r31, 0xFE	; 254
    18b4:	c5 91       	lpm	r28, Z+
    18b6:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    18b8:	fc 01       	movw	r30, r24
    18ba:	e2 55       	subi	r30, 0x52	; 82
    18bc:	fe 4f       	sbci	r31, 0xFE	; 254
    18be:	a5 91       	lpm	r26, Z+
    18c0:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    18c2:	61 11       	cpse	r22, r1
    18c4:	09 c0       	rjmp	.+18     	; 0x18d8 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    18c6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    18c8:	f8 94       	cli
		*reg &= ~bit;
    18ca:	88 81       	ld	r24, Y
    18cc:	20 95       	com	r18
    18ce:	82 23       	and	r24, r18
    18d0:	88 83       	st	Y, r24
		*out &= ~bit;
    18d2:	ec 91       	ld	r30, X
    18d4:	2e 23       	and	r18, r30
    18d6:	0b c0       	rjmp	.+22     	; 0x18ee <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    18d8:	62 30       	cpi	r22, 0x02	; 2
    18da:	61 f4       	brne	.+24     	; 0x18f4 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    18dc:	9f b7       	in	r25, 0x3f	; 63
                cli();
    18de:	f8 94       	cli
		*reg &= ~bit;
    18e0:	88 81       	ld	r24, Y
    18e2:	32 2f       	mov	r19, r18
    18e4:	30 95       	com	r19
    18e6:	83 23       	and	r24, r19
    18e8:	88 83       	st	Y, r24
		*out |= bit;
    18ea:	ec 91       	ld	r30, X
    18ec:	2e 2b       	or	r18, r30
    18ee:	2c 93       	st	X, r18
		SREG = oldSREG;
    18f0:	9f bf       	out	0x3f, r25	; 63
    18f2:	06 c0       	rjmp	.+12     	; 0x1900 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    18f4:	8f b7       	in	r24, 0x3f	; 63
                cli();
    18f6:	f8 94       	cli
		*reg |= bit;
    18f8:	e8 81       	ld	r30, Y
    18fa:	2e 2b       	or	r18, r30
    18fc:	28 83       	st	Y, r18
		SREG = oldSREG;
    18fe:	8f bf       	out	0x3f, r24	; 63
	}
}
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	08 95       	ret

00001906 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1906:	1f 93       	push	r17
    1908:	cf 93       	push	r28
    190a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	f9 01       	movw	r30, r18
    1912:	e8 59       	subi	r30, 0x98	; 152
    1914:	fe 4f       	sbci	r31, 0xFE	; 254
    1916:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1918:	f9 01       	movw	r30, r18
    191a:	e4 58       	subi	r30, 0x84	; 132
    191c:	fe 4f       	sbci	r31, 0xFE	; 254
    191e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1920:	f9 01       	movw	r30, r18
    1922:	e0 57       	subi	r30, 0x70	; 112
    1924:	fe 4f       	sbci	r31, 0xFE	; 254
    1926:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1928:	cc 23       	and	r28, r28
    192a:	c1 f0       	breq	.+48     	; 0x195c <digitalWrite+0x56>
    192c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    192e:	81 11       	cpse	r24, r1
    1930:	0e 94 1e 0c 	call	0x183c	; 0x183c <turnOffPWM>

	out = portOutputRegister(port);
    1934:	ec 2f       	mov	r30, r28
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	ee 0f       	add	r30, r30
    193a:	ff 1f       	adc	r31, r31
    193c:	e2 55       	subi	r30, 0x52	; 82
    193e:	fe 4f       	sbci	r31, 0xFE	; 254
    1940:	a5 91       	lpm	r26, Z+
    1942:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1944:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1946:	f8 94       	cli

	if (val == LOW) {
    1948:	11 11       	cpse	r17, r1
    194a:	04 c0       	rjmp	.+8      	; 0x1954 <digitalWrite+0x4e>
		*out &= ~bit;
    194c:	8c 91       	ld	r24, X
    194e:	d0 95       	com	r29
    1950:	d8 23       	and	r29, r24
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1954:	ec 91       	ld	r30, X
    1956:	de 2b       	or	r29, r30
    1958:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    195a:	9f bf       	out	0x3f, r25	; 63
}
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	1f 91       	pop	r17
    1962:	08 95       	ret

00001964 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1964:	08 95       	ret

00001966 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>:
  IPAddress ret;
  SPI.beginTransaction(SPI_ETHERNET_SETTINGS);
  W5100.getGatewayIp(ret.raw_address());
  SPI.endTransaction();
  return ret;
}
    1966:	8f 92       	push	r8
    1968:	9f 92       	push	r9
    196a:	af 92       	push	r10
    196c:	bf 92       	push	r11
    196e:	cf 92       	push	r12
    1970:	df 92       	push	r13
    1972:	ef 92       	push	r14
    1974:	ff 92       	push	r15
    1976:	0f 93       	push	r16
    1978:	1f 93       	push	r17
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
    197e:	6c 01       	movw	r12, r24
    1980:	4b 01       	movw	r8, r22
    1982:	ea 01       	movw	r28, r20
    1984:	59 01       	movw	r10, r18
    1986:	8c ee       	ldi	r24, 0xEC	; 236
    1988:	93 e0       	ldi	r25, 0x03	; 3
    198a:	0e 94 27 1a 	call	0x344e	; 0x344e <_ZN10W5100Class4initEv>
    198e:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    1992:	88 23       	and	r24, r24
    1994:	99 f0       	breq	.+38     	; 0x19bc <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_+0x56>
    1996:	9f b7       	in	r25, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    199e:	81 30       	cpi	r24, 0x01	; 1
    19a0:	59 f4       	brne	.+22     	; 0x19b8 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_+0x52>
    19a2:	8d b3       	in	r24, 0x1d	; 29
    19a4:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    19a8:	2d b3       	in	r18, 0x1d	; 29
    19aa:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <_ZN8SPIClass13interruptMaskE>
    19ae:	80 95       	com	r24
    19b0:	82 23       	and	r24, r18
    19b2:	8d bb       	out	0x1d, r24	; 29
    19b4:	9f bf       	out	0x3f, r25	; 63
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_+0x56>
    19b8:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    19bc:	80 e5       	ldi	r24, 0x50	; 80
    19be:	8c bd       	out	0x2c, r24	; 44
    19c0:	1d bc       	out	0x2d, r1	; 45
    19c2:	46 e0       	ldi	r20, 0x06	; 6
    19c4:	50 e0       	ldi	r21, 0x00	; 0
    19c6:	b4 01       	movw	r22, r8
    19c8:	89 e0       	ldi	r24, 0x09	; 9
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	0e 94 91 1a 	call	0x3522	; 0x3522 <_ZN10W5100Class5writeEjPKhj>
    19d0:	be 01       	movw	r22, r28
    19d2:	6e 5f       	subi	r22, 0xFE	; 254
    19d4:	7f 4f       	sbci	r23, 0xFF	; 255
    19d6:	44 e0       	ldi	r20, 0x04	; 4
    19d8:	50 e0       	ldi	r21, 0x00	; 0
    19da:	8f e0       	ldi	r24, 0x0F	; 15
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	0e 94 91 1a 	call	0x3522	; 0x3522 <_ZN10W5100Class5writeEjPKhj>
    19e2:	b8 01       	movw	r22, r16
    19e4:	6e 5f       	subi	r22, 0xFE	; 254
    19e6:	7f 4f       	sbci	r23, 0xFF	; 255
    19e8:	44 e0       	ldi	r20, 0x04	; 4
    19ea:	50 e0       	ldi	r21, 0x00	; 0
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	0e 94 91 1a 	call	0x3522	; 0x3522 <_ZN10W5100Class5writeEjPKhj>
    19f4:	b7 01       	movw	r22, r14
    19f6:	6e 5f       	subi	r22, 0xFE	; 254
    19f8:	7f 4f       	sbci	r23, 0xFF	; 255
    19fa:	44 e0       	ldi	r20, 0x04	; 4
    19fc:	50 e0       	ldi	r21, 0x00	; 0
    19fe:	85 e0       	ldi	r24, 0x05	; 5
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	0e 94 91 1a 	call	0x3522	; 0x3522 <_ZN10W5100Class5writeEjPKhj>
    1a06:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    1a0a:	88 23       	and	r24, r24
    1a0c:	71 f0       	breq	.+28     	; 0x1a2a <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_+0xc4>
    1a0e:	9f b7       	in	r25, 0x3f	; 63
    1a10:	f8 94       	cli
    1a12:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    1a16:	81 30       	cpi	r24, 0x01	; 1
    1a18:	29 f4       	brne	.+10     	; 0x1a24 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_+0xbe>
    1a1a:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    1a1e:	8d bb       	out	0x1d, r24	; 29
    1a20:	9f bf       	out	0x3f, r25	; 63
    1a22:	03 c0       	rjmp	.+6      	; 0x1a2a <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_+0xc4>
    1a24:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    1a28:	8f bf       	out	0x3f, r24	; 63
    1a2a:	f5 01       	movw	r30, r10
    1a2c:	82 81       	ldd	r24, Z+2	; 0x02
    1a2e:	93 81       	ldd	r25, Z+3	; 0x03
    1a30:	a4 81       	ldd	r26, Z+4	; 0x04
    1a32:	b5 81       	ldd	r27, Z+5	; 0x05
    1a34:	f6 01       	movw	r30, r12
    1a36:	82 83       	std	Z+2, r24	; 0x02
    1a38:	93 83       	std	Z+3, r25	; 0x03
    1a3a:	a4 83       	std	Z+4, r26	; 0x04
    1a3c:	b5 83       	std	Z+5, r27	; 0x05
    1a3e:	df 91       	pop	r29
    1a40:	cf 91       	pop	r28
    1a42:	1f 91       	pop	r17
    1a44:	0f 91       	pop	r16
    1a46:	ff 90       	pop	r15
    1a48:	ef 90       	pop	r14
    1a4a:	df 90       	pop	r13
    1a4c:	cf 90       	pop	r12
    1a4e:	bf 90       	pop	r11
    1a50:	af 90       	pop	r10
    1a52:	9f 90       	pop	r9
    1a54:	8f 90       	pop	r8
    1a56:	08 95       	ret

00001a58 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_>:
    1a58:	6f 92       	push	r6
    1a5a:	7f 92       	push	r7
    1a5c:	8f 92       	push	r8
    1a5e:	9f 92       	push	r9
    1a60:	af 92       	push	r10
    1a62:	bf 92       	push	r11
    1a64:	cf 92       	push	r12
    1a66:	df 92       	push	r13
    1a68:	ef 92       	push	r14
    1a6a:	ff 92       	push	r15
    1a6c:	0f 93       	push	r16
    1a6e:	1f 93       	push	r17
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	6e 97       	sbiw	r28, 0x1e	; 30
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	de bf       	out	0x3e, r29	; 62
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	cd bf       	out	0x3d, r28	; 61
    1a84:	6c 01       	movw	r12, r24
    1a86:	5b 01       	movw	r10, r22
    1a88:	7a 01       	movw	r14, r20
    1a8a:	49 01       	movw	r8, r18
    1a8c:	38 01       	movw	r6, r16
    1a8e:	00 e0       	ldi	r16, 0x00	; 0
    1a90:	2f ef       	ldi	r18, 0xFF	; 255
    1a92:	4f ef       	ldi	r20, 0xFF	; 255
    1a94:	6f ef       	ldi	r22, 0xFF	; 255
    1a96:	ce 01       	movw	r24, r28
    1a98:	49 96       	adiw	r24, 0x19	; 25
    1a9a:	0e 94 8c 06 	call	0xd18	; 0xd18 <_ZN9IPAddressC1Ehhhh>
    1a9e:	8a e0       	ldi	r24, 0x0A	; 10
    1aa0:	92 e0       	ldi	r25, 0x02	; 2
    1aa2:	9c 8b       	std	Y+20, r25	; 0x14
    1aa4:	8b 8b       	std	Y+19, r24	; 0x13
    1aa6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1aa8:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1aaa:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1aac:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1aae:	4d 8b       	std	Y+21, r20	; 0x15
    1ab0:	5e 8b       	std	Y+22, r21	; 0x16
    1ab2:	6f 8b       	std	Y+23, r22	; 0x17
    1ab4:	78 8f       	std	Y+24, r23	; 0x18
    1ab6:	9e 87       	std	Y+14, r25	; 0x0e
    1ab8:	8d 87       	std	Y+13, r24	; 0x0d
    1aba:	f3 01       	movw	r30, r6
    1abc:	42 81       	ldd	r20, Z+2	; 0x02
    1abe:	53 81       	ldd	r21, Z+3	; 0x03
    1ac0:	64 81       	ldd	r22, Z+4	; 0x04
    1ac2:	75 81       	ldd	r23, Z+5	; 0x05
    1ac4:	4f 87       	std	Y+15, r20	; 0x0f
    1ac6:	58 8b       	std	Y+16, r21	; 0x10
    1ac8:	69 8b       	std	Y+17, r22	; 0x11
    1aca:	7a 8b       	std	Y+18, r23	; 0x12
    1acc:	98 87       	std	Y+8, r25	; 0x08
    1ace:	8f 83       	std	Y+7, r24	; 0x07
    1ad0:	f4 01       	movw	r30, r8
    1ad2:	42 81       	ldd	r20, Z+2	; 0x02
    1ad4:	53 81       	ldd	r21, Z+3	; 0x03
    1ad6:	64 81       	ldd	r22, Z+4	; 0x04
    1ad8:	75 81       	ldd	r23, Z+5	; 0x05
    1ada:	49 87       	std	Y+9, r20	; 0x09
    1adc:	5a 87       	std	Y+10, r21	; 0x0a
    1ade:	6b 87       	std	Y+11, r22	; 0x0b
    1ae0:	7c 87       	std	Y+12, r23	; 0x0c
    1ae2:	9a 83       	std	Y+2, r25	; 0x02
    1ae4:	89 83       	std	Y+1, r24	; 0x01
    1ae6:	f7 01       	movw	r30, r14
    1ae8:	82 81       	ldd	r24, Z+2	; 0x02
    1aea:	93 81       	ldd	r25, Z+3	; 0x03
    1aec:	a4 81       	ldd	r26, Z+4	; 0x04
    1aee:	b5 81       	ldd	r27, Z+5	; 0x05
    1af0:	8b 83       	std	Y+3, r24	; 0x03
    1af2:	9c 83       	std	Y+4, r25	; 0x04
    1af4:	ad 83       	std	Y+5, r26	; 0x05
    1af6:	be 83       	std	Y+6, r27	; 0x06
    1af8:	ce 01       	movw	r24, r28
    1afa:	43 96       	adiw	r24, 0x13	; 19
    1afc:	7c 01       	movw	r14, r24
    1afe:	8e 01       	movw	r16, r28
    1b00:	03 5f       	subi	r16, 0xF3	; 243
    1b02:	1f 4f       	sbci	r17, 0xFF	; 255
    1b04:	9e 01       	movw	r18, r28
    1b06:	29 5f       	subi	r18, 0xF9	; 249
    1b08:	3f 4f       	sbci	r19, 0xFF	; 255
    1b0a:	ae 01       	movw	r20, r28
    1b0c:	4f 5f       	subi	r20, 0xFF	; 255
    1b0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b10:	b5 01       	movw	r22, r10
    1b12:	c6 01       	movw	r24, r12
    1b14:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
    1b18:	6e 96       	adiw	r28, 0x1e	; 30
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	de bf       	out	0x3e, r29	; 62
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	cd bf       	out	0x3d, r28	; 61
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	1f 91       	pop	r17
    1b2a:	0f 91       	pop	r16
    1b2c:	ff 90       	pop	r15
    1b2e:	ef 90       	pop	r14
    1b30:	df 90       	pop	r13
    1b32:	cf 90       	pop	r12
    1b34:	bf 90       	pop	r11
    1b36:	af 90       	pop	r10
    1b38:	9f 90       	pop	r9
    1b3a:	8f 90       	pop	r8
    1b3c:	7f 90       	pop	r7
    1b3e:	6f 90       	pop	r6
    1b40:	08 95       	ret

00001b42 <_ZN13EthernetClass5beginEPh9IPAddressS1_>:
    1b42:	cf 92       	push	r12
    1b44:	df 92       	push	r13
    1b46:	ef 92       	push	r14
    1b48:	ff 92       	push	r15
    1b4a:	0f 93       	push	r16
    1b4c:	1f 93       	push	r17
    1b4e:	cf 93       	push	r28
    1b50:	df 93       	push	r29
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	68 97       	sbiw	r28, 0x18	; 24
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	f9 01       	movw	r30, r18
    1b64:	da 01       	movw	r26, r20
    1b66:	12 96       	adiw	r26, 0x02	; 2
    1b68:	0d 91       	ld	r16, X+
    1b6a:	1d 91       	ld	r17, X+
    1b6c:	2d 91       	ld	r18, X+
    1b6e:	3c 91       	ld	r19, X
    1b70:	15 97       	sbiw	r26, 0x05	; 5
    1b72:	0d 8b       	std	Y+21, r16	; 0x15
    1b74:	1e 8b       	std	Y+22, r17	; 0x16
    1b76:	2f 8b       	std	Y+23, r18	; 0x17
    1b78:	38 8f       	std	Y+24, r19	; 0x18
    1b7a:	4a e0       	ldi	r20, 0x0A	; 10
    1b7c:	52 e0       	ldi	r21, 0x02	; 2
    1b7e:	5e 87       	std	Y+14, r21	; 0x0e
    1b80:	4d 87       	std	Y+13, r20	; 0x0d
    1b82:	a1 e0       	ldi	r26, 0x01	; 1
    1b84:	a8 8f       	std	Y+24, r26	; 0x18
    1b86:	cd 88       	ldd	r12, Y+21	; 0x15
    1b88:	de 88       	ldd	r13, Y+22	; 0x16
    1b8a:	ef 88       	ldd	r14, Y+23	; 0x17
    1b8c:	f8 8c       	ldd	r15, Y+24	; 0x18
    1b8e:	cf 86       	std	Y+15, r12	; 0x0f
    1b90:	d8 8a       	std	Y+16, r13	; 0x10
    1b92:	e9 8a       	std	Y+17, r14	; 0x11
    1b94:	fa 8a       	std	Y+18, r15	; 0x12
    1b96:	58 87       	std	Y+8, r21	; 0x08
    1b98:	4f 83       	std	Y+7, r20	; 0x07
    1b9a:	c2 80       	ldd	r12, Z+2	; 0x02
    1b9c:	d3 80       	ldd	r13, Z+3	; 0x03
    1b9e:	e4 80       	ldd	r14, Z+4	; 0x04
    1ba0:	f5 80       	ldd	r15, Z+5	; 0x05
    1ba2:	c9 86       	std	Y+9, r12	; 0x09
    1ba4:	da 86       	std	Y+10, r13	; 0x0a
    1ba6:	eb 86       	std	Y+11, r14	; 0x0b
    1ba8:	fc 86       	std	Y+12, r15	; 0x0c
    1baa:	5a 83       	std	Y+2, r21	; 0x02
    1bac:	49 83       	std	Y+1, r20	; 0x01
    1bae:	0b 83       	std	Y+3, r16	; 0x03
    1bb0:	1c 83       	std	Y+4, r17	; 0x04
    1bb2:	2d 83       	std	Y+5, r18	; 0x05
    1bb4:	3e 83       	std	Y+6, r19	; 0x06
    1bb6:	8e 01       	movw	r16, r28
    1bb8:	03 5f       	subi	r16, 0xF3	; 243
    1bba:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbc:	9e 01       	movw	r18, r28
    1bbe:	29 5f       	subi	r18, 0xF9	; 249
    1bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc2:	ae 01       	movw	r20, r28
    1bc4:	4f 5f       	subi	r20, 0xFF	; 255
    1bc6:	5f 4f       	sbci	r21, 0xFF	; 255
    1bc8:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_>
    1bcc:	68 96       	adiw	r28, 0x18	; 24
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	df 91       	pop	r29
    1bda:	cf 91       	pop	r28
    1bdc:	1f 91       	pop	r17
    1bde:	0f 91       	pop	r16
    1be0:	ff 90       	pop	r15
    1be2:	ef 90       	pop	r14
    1be4:	df 90       	pop	r13
    1be6:	cf 90       	pop	r12
    1be8:	08 95       	ret

00001bea <_ZN13EthernetClass5beginEPh9IPAddress>:
    1bea:	cf 92       	push	r12
    1bec:	df 92       	push	r13
    1bee:	ef 92       	push	r14
    1bf0:	ff 92       	push	r15
    1bf2:	cf 93       	push	r28
    1bf4:	df 93       	push	r29
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
    1bfa:	62 97       	sbiw	r28, 0x12	; 18
    1bfc:	0f b6       	in	r0, 0x3f	; 63
    1bfe:	f8 94       	cli
    1c00:	de bf       	out	0x3e, r29	; 62
    1c02:	0f be       	out	0x3f, r0	; 63
    1c04:	cd bf       	out	0x3d, r28	; 61
    1c06:	fb 01       	movw	r30, r22
    1c08:	da 01       	movw	r26, r20
    1c0a:	12 96       	adiw	r26, 0x02	; 2
    1c0c:	4d 91       	ld	r20, X+
    1c0e:	5d 91       	ld	r21, X+
    1c10:	6d 91       	ld	r22, X+
    1c12:	7c 91       	ld	r23, X
    1c14:	15 97       	sbiw	r26, 0x05	; 5
    1c16:	4f 87       	std	Y+15, r20	; 0x0f
    1c18:	58 8b       	std	Y+16, r21	; 0x10
    1c1a:	69 8b       	std	Y+17, r22	; 0x11
    1c1c:	7a 8b       	std	Y+18, r23	; 0x12
    1c1e:	2a e0       	ldi	r18, 0x0A	; 10
    1c20:	32 e0       	ldi	r19, 0x02	; 2
    1c22:	38 87       	std	Y+8, r19	; 0x08
    1c24:	2f 83       	std	Y+7, r18	; 0x07
    1c26:	a1 e0       	ldi	r26, 0x01	; 1
    1c28:	aa 8b       	std	Y+18, r26	; 0x12
    1c2a:	cf 84       	ldd	r12, Y+15	; 0x0f
    1c2c:	d8 88       	ldd	r13, Y+16	; 0x10
    1c2e:	e9 88       	ldd	r14, Y+17	; 0x11
    1c30:	fa 88       	ldd	r15, Y+18	; 0x12
    1c32:	c9 86       	std	Y+9, r12	; 0x09
    1c34:	da 86       	std	Y+10, r13	; 0x0a
    1c36:	eb 86       	std	Y+11, r14	; 0x0b
    1c38:	fc 86       	std	Y+12, r15	; 0x0c
    1c3a:	3a 83       	std	Y+2, r19	; 0x02
    1c3c:	29 83       	std	Y+1, r18	; 0x01
    1c3e:	4b 83       	std	Y+3, r20	; 0x03
    1c40:	5c 83       	std	Y+4, r21	; 0x04
    1c42:	6d 83       	std	Y+5, r22	; 0x05
    1c44:	7e 83       	std	Y+6, r23	; 0x06
    1c46:	9e 01       	movw	r18, r28
    1c48:	29 5f       	subi	r18, 0xF9	; 249
    1c4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c4c:	ae 01       	movw	r20, r28
    1c4e:	4f 5f       	subi	r20, 0xFF	; 255
    1c50:	5f 4f       	sbci	r21, 0xFF	; 255
    1c52:	bf 01       	movw	r22, r30
    1c54:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <_ZN13EthernetClass5beginEPh9IPAddressS1_>
    1c58:	62 96       	adiw	r28, 0x12	; 18
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
    1c64:	df 91       	pop	r29
    1c66:	cf 91       	pop	r28
    1c68:	ff 90       	pop	r15
    1c6a:	ef 90       	pop	r14
    1c6c:	df 90       	pop	r13
    1c6e:	cf 90       	pop	r12
    1c70:	08 95       	ret

00001c72 <_ZN13EthernetClass7localIPEv>:
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	ec 01       	movw	r28, r24
    1c78:	0e 94 82 06 	call	0xd04	; 0xd04 <_ZN9IPAddressC1Ev>
    1c7c:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    1c80:	88 23       	and	r24, r24
    1c82:	99 f0       	breq	.+38     	; 0x1caa <_ZN13EthernetClass7localIPEv+0x38>
    1c84:	9f b7       	in	r25, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    1c8c:	81 30       	cpi	r24, 0x01	; 1
    1c8e:	59 f4       	brne	.+22     	; 0x1ca6 <_ZN13EthernetClass7localIPEv+0x34>
    1c90:	8d b3       	in	r24, 0x1d	; 29
    1c92:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    1c96:	2d b3       	in	r18, 0x1d	; 29
    1c98:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <_ZN8SPIClass13interruptMaskE>
    1c9c:	80 95       	com	r24
    1c9e:	82 23       	and	r24, r18
    1ca0:	8d bb       	out	0x1d, r24	; 29
    1ca2:	9f bf       	out	0x3f, r25	; 63
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <_ZN13EthernetClass7localIPEv+0x38>
    1ca6:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    1caa:	80 e5       	ldi	r24, 0x50	; 80
    1cac:	8c bd       	out	0x2c, r24	; 44
    1cae:	1d bc       	out	0x2d, r1	; 45
    1cb0:	44 e0       	ldi	r20, 0x04	; 4
    1cb2:	50 e0       	ldi	r21, 0x00	; 0
    1cb4:	be 01       	movw	r22, r28
    1cb6:	6e 5f       	subi	r22, 0xFE	; 254
    1cb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cba:	8f e0       	ldi	r24, 0x0F	; 15
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <_ZN10W5100Class4readEjPhj>
    1cc2:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    1cc6:	88 23       	and	r24, r24
    1cc8:	71 f0       	breq	.+28     	; 0x1ce6 <_ZN13EthernetClass7localIPEv+0x74>
    1cca:	9f b7       	in	r25, 0x3f	; 63
    1ccc:	f8 94       	cli
    1cce:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    1cd2:	81 30       	cpi	r24, 0x01	; 1
    1cd4:	29 f4       	brne	.+10     	; 0x1ce0 <_ZN13EthernetClass7localIPEv+0x6e>
    1cd6:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    1cda:	8d bb       	out	0x1d, r24	; 29
    1cdc:	9f bf       	out	0x3f, r25	; 63
    1cde:	03 c0       	rjmp	.+6      	; 0x1ce6 <_ZN13EthernetClass7localIPEv+0x74>
    1ce0:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    1ce4:	8f bf       	out	0x3f, r24	; 63
    1ce6:	ce 01       	movw	r24, r28
    1ce8:	df 91       	pop	r29
    1cea:	cf 91       	pop	r28
    1cec:	08 95       	ret

00001cee <_ZN13EthernetClass11dnsServerIPEv>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    1cee:	2a e0       	ldi	r18, 0x0A	; 10
    1cf0:	32 e0       	ldi	r19, 0x02	; 2
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	31 83       	std	Z+1, r19	; 0x01
    1cf6:	20 83       	st	Z, r18
    1cf8:	fb 01       	movw	r30, r22
    1cfa:	42 81       	ldd	r20, Z+2	; 0x02
    1cfc:	53 81       	ldd	r21, Z+3	; 0x03
    1cfe:	64 81       	ldd	r22, Z+4	; 0x04
    1d00:	75 81       	ldd	r23, Z+5	; 0x05
    1d02:	fc 01       	movw	r30, r24
    1d04:	42 83       	std	Z+2, r20	; 0x02
    1d06:	53 83       	std	Z+3, r21	; 0x03
    1d08:	64 83       	std	Z+4, r22	; 0x04
    1d0a:	75 83       	std	Z+5, r23	; 0x05

IPAddress EthernetClass::dnsServerIP()
{
  return _dnsServerAddress;
}
    1d0c:	08 95       	ret

00001d0e <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:

EthernetClass Ethernet;
    1d0e:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    1d10:	00 e0       	ldi	r16, 0x00	; 0
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	40 e0       	ldi	r20, 0x00	; 0
    1d16:	60 e0       	ldi	r22, 0x00	; 0
    1d18:	82 ed       	ldi	r24, 0xD2	; 210
    1d1a:	93 e0       	ldi	r25, 0x03	; 3
    1d1c:	0e 94 8c 06 	call	0xd18	; 0xd18 <_ZN9IPAddressC1Ehhhh>
#include "EthernetServer.h"
#include "Dhcp.h"

#define MAX_SOCK_NUM 4

class EthernetClass {
    1d20:	82 ec       	ldi	r24, 0xC2	; 194
    1d22:	93 e0       	ldi	r25, 0x03	; 3
    1d24:	0e 94 82 06 	call	0xd04	; 0xd04 <_ZN9IPAddressC1Ev>
    1d28:	0f 91       	pop	r16
    1d2a:	08 95       	ret

00001d2c <_ZN14EthernetClienteqEb>:
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
}

uint8_t EthernetClient::getSocketNumber() {
  return _sock;
}
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	86 27       	eor	r24, r22
    1d30:	08 95       	ret

00001d32 <_ZN14EthernetClientneEb>:
    1d32:	86 2f       	mov	r24, r22
    1d34:	08 95       	ret

00001d36 <_ZN14EthernetClientneERKS_>:
    1d36:	dc 01       	movw	r26, r24
    1d38:	ed 91       	ld	r30, X+
    1d3a:	fc 91       	ld	r31, X
    1d3c:	04 8c       	ldd	r0, Z+28	; 0x1c
    1d3e:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1d40:	e0 2d       	mov	r30, r0
    1d42:	09 95       	icall
    1d44:	91 e0       	ldi	r25, 0x01	; 1
    1d46:	89 27       	eor	r24, r25
    1d48:	08 95       	ret

00001d4a <_ZN14EthernetClient5writeEh>:
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
    1d4e:	1f 92       	push	r1
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
    1d54:	69 83       	std	Y+1, r22	; 0x01
    1d56:	dc 01       	movw	r26, r24
    1d58:	ed 91       	ld	r30, X+
    1d5a:	fc 91       	ld	r31, X
    1d5c:	02 80       	ldd	r0, Z+2	; 0x02
    1d5e:	f3 81       	ldd	r31, Z+3	; 0x03
    1d60:	e0 2d       	mov	r30, r0
    1d62:	41 e0       	ldi	r20, 0x01	; 1
    1d64:	50 e0       	ldi	r21, 0x00	; 0
    1d66:	be 01       	movw	r22, r28
    1d68:	6f 5f       	subi	r22, 0xFF	; 255
    1d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6c:	09 95       	icall
    1d6e:	0f 90       	pop	r0
    1d70:	df 91       	pop	r29
    1d72:	cf 91       	pop	r28
    1d74:	08 95       	ret

00001d76 <_ZN14EthernetClientcvbEv>:
    1d76:	21 e0       	ldi	r18, 0x01	; 1
    1d78:	fc 01       	movw	r30, r24
    1d7a:	84 85       	ldd	r24, Z+12	; 0x0c
    1d7c:	84 30       	cpi	r24, 0x04	; 4
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <_ZN14EthernetClientcvbEv+0xc>
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	82 2f       	mov	r24, r18
    1d84:	08 95       	ret

00001d86 <_ZN14EthernetClienteqERKS_>:
    1d86:	fc 01       	movw	r30, r24
    1d88:	94 85       	ldd	r25, Z+12	; 0x0c
    1d8a:	fb 01       	movw	r30, r22
    1d8c:	84 85       	ldd	r24, Z+12	; 0x0c
    1d8e:	98 13       	cpse	r25, r24
    1d90:	05 c0       	rjmp	.+10     	; 0x1d9c <_ZN14EthernetClienteqERKS_+0x16>
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	94 30       	cpi	r25, 0x04	; 4
    1d96:	19 f4       	brne	.+6      	; 0x1d9e <_ZN14EthernetClienteqERKS_+0x18>
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	08 95       	ret
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	08 95       	ret

00001da0 <_ZN14EthernetClient7connectEPKcj>:
    1da0:	cf 92       	push	r12
    1da2:	df 92       	push	r13
    1da4:	ef 92       	push	r14
    1da6:	ff 92       	push	r15
    1da8:	0f 93       	push	r16
    1daa:	1f 93       	push	r17
    1dac:	cf 93       	push	r28
    1dae:	df 93       	push	r29
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	e5 97       	sbiw	r28, 0x35	; 53
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	f8 94       	cli
    1dba:	de bf       	out	0x3e, r29	; 62
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	cd bf       	out	0x3d, r28	; 61
    1dc0:	7c 01       	movw	r14, r24
    1dc2:	8b 01       	movw	r16, r22
    1dc4:	6a 01       	movw	r12, r20
    1dc6:	ce 01       	movw	r24, r28
    1dc8:	0d 96       	adiw	r24, 0x0d	; 13
    1dca:	0e 94 82 06 	call	0xd04	; 0xd04 <_ZN9IPAddressC1Ev>
    1dce:	ce 01       	movw	r24, r28
    1dd0:	45 96       	adiw	r24, 0x15	; 21
    1dd2:	0e 94 3b 14 	call	0x2876	; 0x2876 <_ZN11EthernetUDPC1Ev>
    1dd6:	ce 01       	movw	r24, r28
    1dd8:	c0 96       	adiw	r24, 0x30	; 48
    1dda:	0e 94 82 06 	call	0xd04	; 0xd04 <_ZN9IPAddressC1Ev>
    1dde:	62 ec       	ldi	r22, 0xC2	; 194
    1de0:	73 e0       	ldi	r23, 0x03	; 3
    1de2:	ce 01       	movw	r24, r28
    1de4:	07 96       	adiw	r24, 0x07	; 7
    1de6:	0e 94 77 0e 	call	0x1cee	; 0x1cee <_ZN13EthernetClass11dnsServerIPEv>
    1dea:	be 01       	movw	r22, r28
    1dec:	69 5f       	subi	r22, 0xF9	; 249
    1dee:	7f 4f       	sbci	r23, 0xFF	; 255
    1df0:	ce 01       	movw	r24, r28
    1df2:	0d 96       	adiw	r24, 0x0d	; 13
    1df4:	0e 94 b5 1c 	call	0x396a	; 0x396a <_ZN9DNSClient5beginERK9IPAddress>
    1df8:	ae 01       	movw	r20, r28
    1dfa:	40 5d       	subi	r20, 0xD0	; 208
    1dfc:	5f 4f       	sbci	r21, 0xFF	; 255
    1dfe:	b8 01       	movw	r22, r16
    1e00:	ce 01       	movw	r24, r28
    1e02:	0d 96       	adiw	r24, 0x0d	; 13
    1e04:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
    1e08:	9c 01       	movw	r18, r24
    1e0a:	81 30       	cpi	r24, 0x01	; 1
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	c9 f4       	brne	.+50     	; 0x1e42 <_ZN14EthernetClient7connectEPKcj+0xa2>
    1e10:	d7 01       	movw	r26, r14
    1e12:	ed 91       	ld	r30, X+
    1e14:	fc 91       	ld	r31, X
    1e16:	04 84       	ldd	r0, Z+12	; 0x0c
    1e18:	f5 85       	ldd	r31, Z+13	; 0x0d
    1e1a:	e0 2d       	mov	r30, r0
    1e1c:	8a e0       	ldi	r24, 0x0A	; 10
    1e1e:	92 e0       	ldi	r25, 0x02	; 2
    1e20:	9a 83       	std	Y+2, r25	; 0x02
    1e22:	89 83       	std	Y+1, r24	; 0x01
    1e24:	8a a9       	ldd	r24, Y+50	; 0x32
    1e26:	9b a9       	ldd	r25, Y+51	; 0x33
    1e28:	ac a9       	ldd	r26, Y+52	; 0x34
    1e2a:	bd a9       	ldd	r27, Y+53	; 0x35
    1e2c:	8b 83       	std	Y+3, r24	; 0x03
    1e2e:	9c 83       	std	Y+4, r25	; 0x04
    1e30:	ad 83       	std	Y+5, r26	; 0x05
    1e32:	be 83       	std	Y+6, r27	; 0x06
    1e34:	a6 01       	movw	r20, r12
    1e36:	be 01       	movw	r22, r28
    1e38:	6f 5f       	subi	r22, 0xFF	; 255
    1e3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e3c:	c7 01       	movw	r24, r14
    1e3e:	09 95       	icall
    1e40:	01 c0       	rjmp	.+2      	; 0x1e44 <_ZN14EthernetClient7connectEPKcj+0xa4>
    1e42:	93 2f       	mov	r25, r19
    1e44:	e5 96       	adiw	r28, 0x35	; 53
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	cd bf       	out	0x3d, r28	; 61
    1e50:	df 91       	pop	r29
    1e52:	cf 91       	pop	r28
    1e54:	1f 91       	pop	r17
    1e56:	0f 91       	pop	r16
    1e58:	ff 90       	pop	r15
    1e5a:	ef 90       	pop	r14
    1e5c:	df 90       	pop	r13
    1e5e:	cf 90       	pop	r12
    1e60:	08 95       	ret

00001e62 <_ZN14EthernetClient5writeEPKhj>:
    1e62:	0f 93       	push	r16
    1e64:	1f 93       	push	r17
    1e66:	cf 93       	push	r28
    1e68:	df 93       	push	r29
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	84 85       	ldd	r24, Z+12	; 0x0c
    1e6e:	84 30       	cpi	r24, 0x04	; 4
    1e70:	39 f4       	brne	.+14     	; 0x1e80 <_ZN14EthernetClient5writeEPKhj+0x1e>
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	93 83       	std	Z+3, r25	; 0x03
    1e78:	82 83       	std	Z+2, r24	; 0x02
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	0f c0       	rjmp	.+30     	; 0x1e9e <_ZN14EthernetClient5writeEPKhj+0x3c>
    1e80:	c5 2f       	mov	r28, r21
    1e82:	d4 2f       	mov	r29, r20
    1e84:	8f 01       	movw	r16, r30
    1e86:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <_Z4sendhPKhj>
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	31 f4       	brne	.+12     	; 0x1e9a <_ZN14EthernetClient5writeEPKhj+0x38>
    1e8e:	21 e0       	ldi	r18, 0x01	; 1
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	f8 01       	movw	r30, r16
    1e94:	33 83       	std	Z+3, r19	; 0x03
    1e96:	22 83       	std	Z+2, r18	; 0x02
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <_ZN14EthernetClient5writeEPKhj+0x3c>
    1e9a:	8d 2f       	mov	r24, r29
    1e9c:	9c 2f       	mov	r25, r28
    1e9e:	df 91       	pop	r29
    1ea0:	cf 91       	pop	r28
    1ea2:	1f 91       	pop	r17
    1ea4:	0f 91       	pop	r16
    1ea6:	08 95       	ret

00001ea8 <_ZN14EthernetClient9availableEv>:
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	84 85       	ldd	r24, Z+12	; 0x0c
    1eac:	84 30       	cpi	r24, 0x04	; 4
    1eae:	19 f0       	breq	.+6      	; 0x1eb6 <_ZN14EthernetClient9availableEv+0xe>
    1eb0:	0e 94 37 18 	call	0x306e	; 0x306e <_Z13recvAvailableh>
    1eb4:	08 95       	ret
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	08 95       	ret

00001ebc <_ZN14EthernetClient4readEv>:
    1ebc:	cf 93       	push	r28
    1ebe:	df 93       	push	r29
    1ec0:	1f 92       	push	r1
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	41 e0       	ldi	r20, 0x01	; 1
    1ec8:	50 e0       	ldi	r21, 0x00	; 0
    1eca:	be 01       	movw	r22, r28
    1ecc:	6f 5f       	subi	r22, 0xFF	; 255
    1ece:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	84 85       	ldd	r24, Z+12	; 0x0c
    1ed4:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <_Z4recvhPhi>
    1ed8:	18 16       	cp	r1, r24
    1eda:	19 06       	cpc	r1, r25
    1edc:	1c f4       	brge	.+6      	; 0x1ee4 <_ZN14EthernetClient4readEv+0x28>
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <_ZN14EthernetClient4readEv+0x2c>
    1ee4:	8f ef       	ldi	r24, 0xFF	; 255
    1ee6:	9f ef       	ldi	r25, 0xFF	; 255
    1ee8:	0f 90       	pop	r0
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	08 95       	ret

00001ef0 <_ZN14EthernetClient4readEPhj>:
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	84 85       	ldd	r24, Z+12	; 0x0c
    1ef4:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <_Z4recvhPhi>
    1ef8:	08 95       	ret

00001efa <_ZN14EthernetClient4peekEv>:
    1efa:	0f 93       	push	r16
    1efc:	1f 93       	push	r17
    1efe:	cf 93       	push	r28
    1f00:	df 93       	push	r29
    1f02:	1f 92       	push	r1
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    1f08:	8c 01       	movw	r16, r24
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	ed 91       	ld	r30, X+
    1f0e:	fc 91       	ld	r31, X
    1f10:	04 80       	ldd	r0, Z+4	; 0x04
    1f12:	f5 81       	ldd	r31, Z+5	; 0x05
    1f14:	e0 2d       	mov	r30, r0
    1f16:	09 95       	icall
    1f18:	89 2b       	or	r24, r25
    1f1a:	51 f0       	breq	.+20     	; 0x1f30 <_ZN14EthernetClient4peekEv+0x36>
    1f1c:	be 01       	movw	r22, r28
    1f1e:	6f 5f       	subi	r22, 0xFF	; 255
    1f20:	7f 4f       	sbci	r23, 0xFF	; 255
    1f22:	f8 01       	movw	r30, r16
    1f24:	84 85       	ldd	r24, Z+12	; 0x0c
    1f26:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_Z4peekhPh>
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <_ZN14EthernetClient4peekEv+0x3a>
    1f30:	8f ef       	ldi	r24, 0xFF	; 255
    1f32:	9f ef       	ldi	r25, 0xFF	; 255
    1f34:	0f 90       	pop	r0
    1f36:	df 91       	pop	r29
    1f38:	cf 91       	pop	r28
    1f3a:	1f 91       	pop	r17
    1f3c:	0f 91       	pop	r16
    1f3e:	08 95       	ret

00001f40 <_ZN14EthernetClient5flushEv>:
    1f40:	fc 01       	movw	r30, r24
    1f42:	84 85       	ldd	r24, Z+12	; 0x0c
    1f44:	0e 94 a3 18 	call	0x3146	; 0x3146 <_Z5flushh>
    1f48:	08 95       	ret

00001f4a <_ZN14EthernetClientC1Eh>:
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	13 82       	std	Z+3, r1	; 0x03
    1f4e:	12 82       	std	Z+2, r1	; 0x02
    1f50:	88 ee       	ldi	r24, 0xE8	; 232
    1f52:	93 e0       	ldi	r25, 0x03	; 3
    1f54:	a0 e0       	ldi	r26, 0x00	; 0
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	84 83       	std	Z+4, r24	; 0x04
    1f5a:	95 83       	std	Z+5, r25	; 0x05
    1f5c:	a6 83       	std	Z+6, r26	; 0x06
    1f5e:	b7 83       	std	Z+7, r27	; 0x07
    1f60:	8f e1       	ldi	r24, 0x1F	; 31
    1f62:	92 e0       	ldi	r25, 0x02	; 2
    1f64:	91 83       	std	Z+1, r25	; 0x01
    1f66:	80 83       	st	Z, r24
    1f68:	64 87       	std	Z+12, r22	; 0x0c
    1f6a:	08 95       	ret

00001f6c <_ZN14EthernetClient6statusEv>:
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	84 85       	ldd	r24, Z+12	; 0x0c
    1f70:	84 30       	cpi	r24, 0x04	; 4
    1f72:	19 f0       	breq	.+6      	; 0x1f7a <_ZN14EthernetClient6statusEv+0xe>
    1f74:	0e 94 c1 14 	call	0x2982	; 0x2982 <_Z12socketStatush>
    1f78:	08 95       	ret
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	08 95       	ret

00001f7e <_ZN14EthernetClient7connectE9IPAddressj>:
    1f7e:	cf 92       	push	r12
    1f80:	df 92       	push	r13
    1f82:	ef 92       	push	r14
    1f84:	ff 92       	push	r15
    1f86:	1f 93       	push	r17
    1f88:	cf 93       	push	r28
    1f8a:	df 93       	push	r29
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	24 85       	ldd	r18, Z+12	; 0x0c
    1f90:	24 30       	cpi	r18, 0x04	; 4
    1f92:	09 f0       	breq	.+2      	; 0x1f96 <_ZN14EthernetClient7connectE9IPAddressj+0x18>
    1f94:	52 c0       	rjmp	.+164    	; 0x203a <_ZN14EthernetClient7connectE9IPAddressj+0xbc>
    1f96:	7a 01       	movw	r14, r20
    1f98:	6b 01       	movw	r12, r22
    1f9a:	ec 01       	movw	r28, r24
    1f9c:	10 e0       	ldi	r17, 0x00	; 0
    1f9e:	81 2f       	mov	r24, r17
    1fa0:	0e 94 c1 14 	call	0x2982	; 0x2982 <_Z12socketStatush>
    1fa4:	88 23       	and	r24, r24
    1fa6:	19 f0       	breq	.+6      	; 0x1fae <_ZN14EthernetClient7connectE9IPAddressj+0x30>
    1fa8:	8b 7f       	andi	r24, 0xFB	; 251
    1faa:	88 31       	cpi	r24, 0x18	; 24
    1fac:	11 f4       	brne	.+4      	; 0x1fb2 <_ZN14EthernetClient7connectE9IPAddressj+0x34>
    1fae:	1c 87       	std	Y+12, r17	; 0x0c
    1fb0:	03 c0       	rjmp	.+6      	; 0x1fb8 <_ZN14EthernetClient7connectE9IPAddressj+0x3a>
    1fb2:	1f 5f       	subi	r17, 0xFF	; 255
    1fb4:	14 30       	cpi	r17, 0x04	; 4
    1fb6:	99 f7       	brne	.-26     	; 0x1f9e <_ZN14EthernetClient7connectE9IPAddressj+0x20>
    1fb8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fba:	84 30       	cpi	r24, 0x04	; 4
    1fbc:	09 f4       	brne	.+2      	; 0x1fc0 <_ZN14EthernetClient7connectE9IPAddressj+0x42>
    1fbe:	40 c0       	rjmp	.+128    	; 0x2040 <_ZN14EthernetClient7connectE9IPAddressj+0xc2>
    1fc0:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <_ZN14EthernetClient8_srcportE>
    1fc4:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <_ZN14EthernetClient8_srcportE+0x1>
    1fc8:	2f 5f       	subi	r18, 0xFF	; 255
    1fca:	3f 4f       	sbci	r19, 0xFF	; 255
    1fcc:	29 f0       	breq	.+10     	; 0x1fd8 <_ZN14EthernetClient7connectE9IPAddressj+0x5a>
    1fce:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <_ZN14EthernetClient8_srcportE+0x1>
    1fd2:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <_ZN14EthernetClient8_srcportE>
    1fd6:	06 c0       	rjmp	.+12     	; 0x1fe4 <_ZN14EthernetClient7connectE9IPAddressj+0x66>
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 ec       	ldi	r19, 0xC0	; 192
    1fdc:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <_ZN14EthernetClient8_srcportE+0x1>
    1fe0:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <_ZN14EthernetClient8_srcportE>
    1fe4:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <_ZN14EthernetClient8_srcportE>
    1fe8:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <_ZN14EthernetClient8_srcportE+0x1>
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	61 e0       	ldi	r22, 0x01	; 1
    1ff0:	0e 94 34 15 	call	0x2a68	; 0x2a68 <_Z6sockethhjh>
    1ff4:	b6 01       	movw	r22, r12
    1ff6:	6e 5f       	subi	r22, 0xFE	; 254
    1ff8:	7f 4f       	sbci	r23, 0xFF	; 255
    1ffa:	a7 01       	movw	r20, r14
    1ffc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ffe:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_Z7connecthPhj>
    2002:	81 11       	cpse	r24, r1
    2004:	05 c0       	rjmp	.+10     	; 0x2010 <_ZN14EthernetClient7connectE9IPAddressj+0x92>
    2006:	84 e0       	ldi	r24, 0x04	; 4
    2008:	8c 87       	std	Y+12, r24	; 0x0c
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	1d c0       	rjmp	.+58     	; 0x204a <_ZN14EthernetClient7connectE9IPAddressj+0xcc>
    2010:	ce 01       	movw	r24, r28
    2012:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <_ZN14EthernetClient6statusEv>
    2016:	87 31       	cpi	r24, 0x17	; 23
    2018:	b1 f0       	breq	.+44     	; 0x2046 <_ZN14EthernetClient7connectE9IPAddressj+0xc8>
    201a:	61 e0       	ldi	r22, 0x01	; 1
    201c:	70 e0       	ldi	r23, 0x00	; 0
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	0e 94 9c 0b 	call	0x1738	; 0x1738 <delay>
    2026:	ce 01       	movw	r24, r28
    2028:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <_ZN14EthernetClient6statusEv>
    202c:	81 11       	cpse	r24, r1
    202e:	f0 cf       	rjmp	.-32     	; 0x2010 <_ZN14EthernetClient7connectE9IPAddressj+0x92>
    2030:	84 e0       	ldi	r24, 0x04	; 4
    2032:	8c 87       	std	Y+12, r24	; 0x0c
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	08 c0       	rjmp	.+16     	; 0x204a <_ZN14EthernetClient7connectE9IPAddressj+0xcc>
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	05 c0       	rjmp	.+10     	; 0x204a <_ZN14EthernetClient7connectE9IPAddressj+0xcc>
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	02 c0       	rjmp	.+4      	; 0x204a <_ZN14EthernetClient7connectE9IPAddressj+0xcc>
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	df 91       	pop	r29
    204c:	cf 91       	pop	r28
    204e:	1f 91       	pop	r17
    2050:	ff 90       	pop	r15
    2052:	ef 90       	pop	r14
    2054:	df 90       	pop	r13
    2056:	cf 90       	pop	r12
    2058:	08 95       	ret

0000205a <_ZN14EthernetClient4stopEv>:
    205a:	cf 92       	push	r12
    205c:	df 92       	push	r13
    205e:	ef 92       	push	r14
    2060:	ff 92       	push	r15
    2062:	cf 93       	push	r28
    2064:	df 93       	push	r29
    2066:	ec 01       	movw	r28, r24
    2068:	8c 85       	ldd	r24, Y+12	; 0x0c
    206a:	84 30       	cpi	r24, 0x04	; 4
    206c:	71 f1       	breq	.+92     	; 0x20ca <_ZN14EthernetClient4stopEv+0x70>
    206e:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <_Z10disconnecth>
    2072:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <millis>
    2076:	6b 01       	movw	r12, r22
    2078:	7c 01       	movw	r14, r24
    207a:	ce 01       	movw	r24, r28
    207c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <_ZN14EthernetClient6statusEv>
    2080:	88 23       	and	r24, r24
    2082:	a1 f0       	breq	.+40     	; 0x20ac <_ZN14EthernetClient4stopEv+0x52>
    2084:	61 e0       	ldi	r22, 0x01	; 1
    2086:	70 e0       	ldi	r23, 0x00	; 0
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	0e 94 9c 0b 	call	0x1738	; 0x1738 <delay>
    2090:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <millis>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	8c 19       	sub	r24, r12
    209a:	9d 09       	sbc	r25, r13
    209c:	ae 09       	sbc	r26, r14
    209e:	bf 09       	sbc	r27, r15
    20a0:	88 3e       	cpi	r24, 0xE8	; 232
    20a2:	93 40       	sbci	r25, 0x03	; 3
    20a4:	a1 05       	cpc	r26, r1
    20a6:	b1 05       	cpc	r27, r1
    20a8:	40 f3       	brcs	.-48     	; 0x207a <_ZN14EthernetClient4stopEv+0x20>
    20aa:	0b c0       	rjmp	.+22     	; 0x20c2 <_ZN14EthernetClient4stopEv+0x68>
    20ac:	ec 85       	ldd	r30, Y+12	; 0x0c
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	ee 0f       	add	r30, r30
    20b2:	ff 1f       	adc	r31, r31
    20b4:	e6 53       	subi	r30, 0x36	; 54
    20b6:	fc 4f       	sbci	r31, 0xFC	; 252
    20b8:	11 82       	std	Z+1, r1	; 0x01
    20ba:	10 82       	st	Z, r1
    20bc:	84 e0       	ldi	r24, 0x04	; 4
    20be:	8c 87       	std	Y+12, r24	; 0x0c
    20c0:	04 c0       	rjmp	.+8      	; 0x20ca <_ZN14EthernetClient4stopEv+0x70>
    20c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    20c4:	0e 94 f5 14 	call	0x29ea	; 0x29ea <_Z5closeh>
    20c8:	f1 cf       	rjmp	.-30     	; 0x20ac <_ZN14EthernetClient4stopEv+0x52>
    20ca:	df 91       	pop	r29
    20cc:	cf 91       	pop	r28
    20ce:	ff 90       	pop	r15
    20d0:	ef 90       	pop	r14
    20d2:	df 90       	pop	r13
    20d4:	cf 90       	pop	r12
    20d6:	08 95       	ret

000020d8 <_ZN14EthernetClient9connectedEv>:
    20d8:	cf 93       	push	r28
    20da:	df 93       	push	r29
    20dc:	fc 01       	movw	r30, r24
    20de:	24 85       	ldd	r18, Z+12	; 0x0c
    20e0:	24 30       	cpi	r18, 0x04	; 4
    20e2:	01 f1       	breq	.+64     	; 0x2124 <_ZN14EthernetClient9connectedEv+0x4c>
    20e4:	ec 01       	movw	r28, r24
    20e6:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <_ZN14EthernetClient6statusEv>
    20ea:	84 31       	cpi	r24, 0x14	; 20
    20ec:	91 f0       	breq	.+36     	; 0x2112 <_ZN14EthernetClient9connectedEv+0x3a>
    20ee:	88 23       	and	r24, r24
    20f0:	91 f0       	breq	.+36     	; 0x2116 <_ZN14EthernetClient9connectedEv+0x3e>
    20f2:	88 31       	cpi	r24, 0x18	; 24
    20f4:	91 f0       	breq	.+36     	; 0x211a <_ZN14EthernetClient9connectedEv+0x42>
    20f6:	8c 31       	cpi	r24, 0x1C	; 28
    20f8:	91 f4       	brne	.+36     	; 0x211e <_ZN14EthernetClient9connectedEv+0x46>
    20fa:	e8 81       	ld	r30, Y
    20fc:	f9 81       	ldd	r31, Y+1	; 0x01
    20fe:	04 80       	ldd	r0, Z+4	; 0x04
    2100:	f5 81       	ldd	r31, Z+5	; 0x05
    2102:	e0 2d       	mov	r30, r0
    2104:	ce 01       	movw	r24, r28
    2106:	09 95       	icall
    2108:	21 e0       	ldi	r18, 0x01	; 1
    210a:	89 2b       	or	r24, r25
    210c:	49 f4       	brne	.+18     	; 0x2120 <_ZN14EthernetClient9connectedEv+0x48>
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	07 c0       	rjmp	.+14     	; 0x2120 <_ZN14EthernetClient9connectedEv+0x48>
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	05 c0       	rjmp	.+10     	; 0x2120 <_ZN14EthernetClient9connectedEv+0x48>
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	03 c0       	rjmp	.+6      	; 0x2120 <_ZN14EthernetClient9connectedEv+0x48>
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	01 c0       	rjmp	.+2      	; 0x2120 <_ZN14EthernetClient9connectedEv+0x48>
    211e:	21 e0       	ldi	r18, 0x01	; 1
    2120:	82 2f       	mov	r24, r18
    2122:	01 c0       	rjmp	.+2      	; 0x2126 <_ZN14EthernetClient9connectedEv+0x4e>
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	df 91       	pop	r29
    2128:	cf 91       	pop	r28
    212a:	08 95       	ret

0000212c <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>:
    212c:	0f 93       	push	r16
    212e:	00 e0       	ldi	r16, 0x00	; 0
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	40 e0       	ldi	r20, 0x00	; 0
    2134:	60 e0       	ldi	r22, 0x00	; 0
    2136:	88 ed       	ldi	r24, 0xD8	; 216
    2138:	93 e0       	ldi	r25, 0x03	; 3
    213a:	0e 94 8c 06 	call	0xd18	; 0xd18 <_ZN9IPAddressC1Ehhhh>
    213e:	0f 91       	pop	r16
    2140:	08 95       	ret

00002142 <_ZN14EthernetServer5writeEh>:

  return EthernetClient(MAX_SOCK_NUM);
}

size_t EthernetServer::write(uint8_t b) 
{
    2142:	cf 93       	push	r28
    2144:	df 93       	push	r29
    2146:	1f 92       	push	r1
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    214e:	dc 01       	movw	r26, r24
    2150:	ed 91       	ld	r30, X+
    2152:	fc 91       	ld	r31, X
    2154:	02 80       	ldd	r0, Z+2	; 0x02
    2156:	f3 81       	ldd	r31, Z+3	; 0x03
    2158:	e0 2d       	mov	r30, r0
    215a:	41 e0       	ldi	r20, 0x01	; 1
    215c:	50 e0       	ldi	r21, 0x00	; 0
    215e:	be 01       	movw	r22, r28
    2160:	6f 5f       	subi	r22, 0xFF	; 255
    2162:	7f 4f       	sbci	r23, 0xFF	; 255
    2164:	09 95       	icall
}
    2166:	0f 90       	pop	r0
    2168:	df 91       	pop	r29
    216a:	cf 91       	pop	r28
    216c:	08 95       	ret

0000216e <_ZN14EthernetServer5beginEv>:
{
  _port = port;
}

void EthernetServer::begin()
{
    216e:	cf 92       	push	r12
    2170:	df 92       	push	r13
    2172:	ff 92       	push	r15
    2174:	0f 93       	push	r16
    2176:	1f 93       	push	r17
    2178:	cf 93       	push	r28
    217a:	df 93       	push	r29
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
    2180:	2d 97       	sbiw	r28, 0x0d	; 13
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	f8 94       	cli
    2186:	de bf       	out	0x3e, r29	; 62
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	cd bf       	out	0x3d, r28	; 61
    218c:	6c 01       	movw	r12, r24
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    218e:	00 e0       	ldi	r16, 0x00	; 0
    2190:	10 e0       	ldi	r17, 0x00	; 0
    EthernetClient client(sock);
    2192:	60 2f       	mov	r22, r16
    2194:	ce 01       	movw	r24, r28
    2196:	01 96       	adiw	r24, 0x01	; 1
    2198:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN14EthernetClientC1Eh>
    if (client.status() == SnSR::CLOSED) {
    219c:	ce 01       	movw	r24, r28
    219e:	01 96       	adiw	r24, 0x01	; 1
    21a0:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <_ZN14EthernetClient6statusEv>
    21a4:	81 11       	cpse	r24, r1
    21a6:	16 c0       	rjmp	.+44     	; 0x21d4 <_ZN14EthernetServer5beginEv+0x66>
      socket(sock, SnMR::TCP, _port, 0);
    21a8:	f6 01       	movw	r30, r12
    21aa:	44 81       	ldd	r20, Z+4	; 0x04
    21ac:	55 81       	ldd	r21, Z+5	; 0x05
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	61 e0       	ldi	r22, 0x01	; 1
    21b2:	80 2f       	mov	r24, r16
    21b4:	0e 94 34 15 	call	0x2a68	; 0x2a68 <_Z6sockethhjh>
      listen(sock);
    21b8:	80 2f       	mov	r24, r16
    21ba:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <_Z6listenh>
      EthernetClass::_server_port[sock] = _port;
    21be:	f6 01       	movw	r30, r12
    21c0:	84 81       	ldd	r24, Z+4	; 0x04
    21c2:	95 81       	ldd	r25, Z+5	; 0x05
    21c4:	00 0f       	add	r16, r16
    21c6:	11 1f       	adc	r17, r17
    21c8:	f8 01       	movw	r30, r16
    21ca:	e6 53       	subi	r30, 0x36	; 54
    21cc:	fc 4f       	sbci	r31, 0xFC	; 252
    21ce:	91 83       	std	Z+1, r25	; 0x01
    21d0:	80 83       	st	Z, r24
    21d2:	05 c0       	rjmp	.+10     	; 0x21de <_ZN14EthernetServer5beginEv+0x70>
  _port = port;
}

void EthernetServer::begin()
{
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    21d4:	0f 5f       	subi	r16, 0xFF	; 255
    21d6:	1f 4f       	sbci	r17, 0xFF	; 255
    21d8:	04 30       	cpi	r16, 0x04	; 4
    21da:	11 05       	cpc	r17, r1
    21dc:	d1 f6       	brne	.-76     	; 0x2192 <_ZN14EthernetServer5beginEv+0x24>
      listen(sock);
      EthernetClass::_server_port[sock] = _port;
      break;
    }
  }  
}
    21de:	2d 96       	adiw	r28, 0x0d	; 13
    21e0:	0f b6       	in	r0, 0x3f	; 63
    21e2:	f8 94       	cli
    21e4:	de bf       	out	0x3e, r29	; 62
    21e6:	0f be       	out	0x3f, r0	; 63
    21e8:	cd bf       	out	0x3d, r28	; 61
    21ea:	df 91       	pop	r29
    21ec:	cf 91       	pop	r28
    21ee:	1f 91       	pop	r17
    21f0:	0f 91       	pop	r16
    21f2:	ff 90       	pop	r15
    21f4:	df 90       	pop	r13
    21f6:	cf 90       	pop	r12
    21f8:	08 95       	ret

000021fa <_ZN14EthernetServerC1Ej>:

#include "Ethernet.h"
#include "EthernetClient.h"
#include "EthernetServer.h"

EthernetServer::EthernetServer(uint16_t port)
    21fa:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    21fc:	13 82       	std	Z+3, r1	; 0x03
    21fe:	12 82       	std	Z+2, r1	; 0x02
    2200:	83 e4       	ldi	r24, 0x43	; 67
    2202:	92 e0       	ldi	r25, 0x02	; 2
    2204:	91 83       	std	Z+1, r25	; 0x01
    2206:	80 83       	st	Z, r24
{
  _port = port;
    2208:	75 83       	std	Z+5, r23	; 0x05
    220a:	64 83       	std	Z+4, r22	; 0x04
    220c:	08 95       	ret

0000220e <_ZN14EthernetServer6acceptEv>:
    }
  }  
}

void EthernetServer::accept()
{
    220e:	9f 92       	push	r9
    2210:	af 92       	push	r10
    2212:	bf 92       	push	r11
    2214:	cf 92       	push	r12
    2216:	df 92       	push	r13
    2218:	ef 92       	push	r14
    221a:	ff 92       	push	r15
    221c:	0f 93       	push	r16
    221e:	1f 93       	push	r17
    2220:	cf 93       	push	r28
    2222:	df 93       	push	r29
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    2228:	2d 97       	sbiw	r28, 0x0d	; 13
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	f8 94       	cli
    222e:	de bf       	out	0x3e, r29	; 62
    2230:	0f be       	out	0x3f, r0	; 63
    2232:	cd bf       	out	0x3d, r28	; 61
    2234:	6c 01       	movw	r12, r24
    2236:	0f 2e       	mov	r0, r31
    2238:	fa ec       	ldi	r31, 0xCA	; 202
    223a:	ef 2e       	mov	r14, r31
    223c:	f3 e0       	ldi	r31, 0x03	; 3
    223e:	ff 2e       	mov	r15, r31
    2240:	f0 2d       	mov	r31, r0
    2242:	10 e0       	ldi	r17, 0x00	; 0
  int listening = 0;
    2244:	a1 2c       	mov	r10, r1
    2246:	b1 2c       	mov	r11, r1
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port) {
      if (client.status() == SnSR::LISTEN) {
        listening = 1;
    2248:	01 e0       	ldi	r16, 0x01	; 1
    224a:	91 2c       	mov	r9, r1
void EthernetServer::accept()
{
  int listening = 0;

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    224c:	61 2f       	mov	r22, r17
    224e:	ce 01       	movw	r24, r28
    2250:	01 96       	adiw	r24, 0x01	; 1
    2252:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN14EthernetClientC1Eh>

    if (EthernetClass::_server_port[sock] == _port) {
    2256:	d7 01       	movw	r26, r14
    2258:	2d 91       	ld	r18, X+
    225a:	3d 91       	ld	r19, X+
    225c:	7d 01       	movw	r14, r26
    225e:	f6 01       	movw	r30, r12
    2260:	84 81       	ldd	r24, Z+4	; 0x04
    2262:	95 81       	ldd	r25, Z+5	; 0x05
    2264:	28 17       	cp	r18, r24
    2266:	39 07       	cpc	r19, r25
    2268:	c9 f4       	brne	.+50     	; 0x229c <_ZN14EthernetServer6acceptEv+0x8e>
      if (client.status() == SnSR::LISTEN) {
    226a:	ce 01       	movw	r24, r28
    226c:	01 96       	adiw	r24, 0x01	; 1
    226e:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <_ZN14EthernetClient6statusEv>
    2272:	84 31       	cpi	r24, 0x14	; 20
    2274:	89 f0       	breq	.+34     	; 0x2298 <_ZN14EthernetServer6acceptEv+0x8a>
        listening = 1;
      } 
      else if (client.status() == SnSR::CLOSE_WAIT && !client.available()) {
    2276:	ce 01       	movw	r24, r28
    2278:	01 96       	adiw	r24, 0x01	; 1
    227a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <_ZN14EthernetClient6statusEv>
    227e:	8c 31       	cpi	r24, 0x1C	; 28
    2280:	69 f4       	brne	.+26     	; 0x229c <_ZN14EthernetServer6acceptEv+0x8e>
    2282:	ce 01       	movw	r24, r28
    2284:	01 96       	adiw	r24, 0x01	; 1
    2286:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <_ZN14EthernetClient9availableEv>
    228a:	89 2b       	or	r24, r25
    228c:	39 f4       	brne	.+14     	; 0x229c <_ZN14EthernetServer6acceptEv+0x8e>
        client.stop();
    228e:	ce 01       	movw	r24, r28
    2290:	01 96       	adiw	r24, 0x01	; 1
    2292:	0e 94 2d 10 	call	0x205a	; 0x205a <_ZN14EthernetClient4stopEv>
    2296:	02 c0       	rjmp	.+4      	; 0x229c <_ZN14EthernetServer6acceptEv+0x8e>
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port) {
      if (client.status() == SnSR::LISTEN) {
        listening = 1;
    2298:	a0 2e       	mov	r10, r16
    229a:	b9 2c       	mov	r11, r9
    229c:	1f 5f       	subi	r17, 0xFF	; 255

void EthernetServer::accept()
{
  int listening = 0;

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    229e:	14 30       	cpi	r17, 0x04	; 4
    22a0:	a9 f6       	brne	.-86     	; 0x224c <_ZN14EthernetServer6acceptEv+0x3e>
        client.stop();
      }
    } 
  }

  if (!listening) {
    22a2:	ab 28       	or	r10, r11
    22a4:	41 f4       	brne	.+16     	; 0x22b6 <_ZN14EthernetServer6acceptEv+0xa8>
    begin();
    22a6:	d6 01       	movw	r26, r12
    22a8:	ed 91       	ld	r30, X+
    22aa:	fc 91       	ld	r31, X
    22ac:	04 80       	ldd	r0, Z+4	; 0x04
    22ae:	f5 81       	ldd	r31, Z+5	; 0x05
    22b0:	e0 2d       	mov	r30, r0
    22b2:	c6 01       	movw	r24, r12
    22b4:	09 95       	icall
  }
}
    22b6:	2d 96       	adiw	r28, 0x0d	; 13
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	f8 94       	cli
    22bc:	de bf       	out	0x3e, r29	; 62
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	cd bf       	out	0x3d, r28	; 61
    22c2:	df 91       	pop	r29
    22c4:	cf 91       	pop	r28
    22c6:	1f 91       	pop	r17
    22c8:	0f 91       	pop	r16
    22ca:	ff 90       	pop	r15
    22cc:	ef 90       	pop	r14
    22ce:	df 90       	pop	r13
    22d0:	cf 90       	pop	r12
    22d2:	bf 90       	pop	r11
    22d4:	af 90       	pop	r10
    22d6:	9f 90       	pop	r9
    22d8:	08 95       	ret

000022da <_ZN14EthernetServer5writeEPKhj>:
{
  return write(&b, 1);
}

size_t EthernetServer::write(const uint8_t *buffer, size_t size) 
{
    22da:	7f 92       	push	r7
    22dc:	8f 92       	push	r8
    22de:	9f 92       	push	r9
    22e0:	af 92       	push	r10
    22e2:	bf 92       	push	r11
    22e4:	cf 92       	push	r12
    22e6:	df 92       	push	r13
    22e8:	ef 92       	push	r14
    22ea:	ff 92       	push	r15
    22ec:	0f 93       	push	r16
    22ee:	1f 93       	push	r17
    22f0:	cf 93       	push	r28
    22f2:	df 93       	push	r29
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
    22f8:	2d 97       	sbiw	r28, 0x0d	; 13
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	f8 94       	cli
    22fe:	de bf       	out	0x3e, r29	; 62
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	cd bf       	out	0x3d, r28	; 61
    2304:	7c 01       	movw	r14, r24
    2306:	4b 01       	movw	r8, r22
    2308:	5a 01       	movw	r10, r20
  size_t n = 0;
  
  accept();
    230a:	0e 94 07 11 	call	0x220e	; 0x220e <_ZN14EthernetServer6acceptEv>
    230e:	0a ec       	ldi	r16, 0xCA	; 202
    2310:	13 e0       	ldi	r17, 0x03	; 3
    2312:	71 2c       	mov	r7, r1
  return write(&b, 1);
}

size_t EthernetServer::write(const uint8_t *buffer, size_t size) 
{
  size_t n = 0;
    2314:	c1 2c       	mov	r12, r1
    2316:	d1 2c       	mov	r13, r1
  
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    2318:	67 2d       	mov	r22, r7
    231a:	ce 01       	movw	r24, r28
    231c:	01 96       	adiw	r24, 0x01	; 1
    231e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN14EthernetClientC1Eh>

    if (EthernetClass::_server_port[sock] == _port &&
    2322:	f8 01       	movw	r30, r16
    2324:	21 91       	ld	r18, Z+
    2326:	31 91       	ld	r19, Z+
    2328:	8f 01       	movw	r16, r30
    232a:	f7 01       	movw	r30, r14
    232c:	84 81       	ldd	r24, Z+4	; 0x04
    232e:	95 81       	ldd	r25, Z+5	; 0x05
    2330:	28 17       	cp	r18, r24
    2332:	39 07       	cpc	r19, r25
    2334:	71 f4       	brne	.+28     	; 0x2352 <_ZN14EthernetServer5writeEPKhj+0x78>
      client.status() == SnSR::ESTABLISHED) {
    2336:	ce 01       	movw	r24, r28
    2338:	01 96       	adiw	r24, 0x01	; 1
    233a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <_ZN14EthernetClient6statusEv>
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port &&
    233e:	87 31       	cpi	r24, 0x17	; 23
    2340:	41 f4       	brne	.+16     	; 0x2352 <_ZN14EthernetServer5writeEPKhj+0x78>
      client.status() == SnSR::ESTABLISHED) {
      n += client.write(buffer, size);
    2342:	a5 01       	movw	r20, r10
    2344:	b4 01       	movw	r22, r8
    2346:	ce 01       	movw	r24, r28
    2348:	01 96       	adiw	r24, 0x01	; 1
    234a:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN14EthernetClient5writeEPKhj>
    234e:	c8 0e       	add	r12, r24
    2350:	d9 1e       	adc	r13, r25
    2352:	73 94       	inc	r7
{
  size_t n = 0;
  
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    2354:	f4 e0       	ldi	r31, 0x04	; 4
    2356:	7f 12       	cpse	r7, r31
    2358:	df cf       	rjmp	.-66     	; 0x2318 <_ZN14EthernetServer5writeEPKhj+0x3e>
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
    235a:	c6 01       	movw	r24, r12
    235c:	2d 96       	adiw	r28, 0x0d	; 13
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	cd bf       	out	0x3d, r28	; 61
    2368:	df 91       	pop	r29
    236a:	cf 91       	pop	r28
    236c:	1f 91       	pop	r17
    236e:	0f 91       	pop	r16
    2370:	ff 90       	pop	r15
    2372:	ef 90       	pop	r14
    2374:	df 90       	pop	r13
    2376:	cf 90       	pop	r12
    2378:	bf 90       	pop	r11
    237a:	af 90       	pop	r10
    237c:	9f 90       	pop	r9
    237e:	8f 90       	pop	r8
    2380:	7f 90       	pop	r7
    2382:	08 95       	ret

00002384 <_ZN14EthernetServer9availableEv>:
    begin();
  }
}

EthernetClient EthernetServer::available()
{
    2384:	af 92       	push	r10
    2386:	bf 92       	push	r11
    2388:	cf 92       	push	r12
    238a:	df 92       	push	r13
    238c:	ef 92       	push	r14
    238e:	ff 92       	push	r15
    2390:	1f 93       	push	r17
    2392:	cf 93       	push	r28
    2394:	df 93       	push	r29
    2396:	cd b7       	in	r28, 0x3d	; 61
    2398:	de b7       	in	r29, 0x3e	; 62
    239a:	2d 97       	sbiw	r28, 0x0d	; 13
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	de bf       	out	0x3e, r29	; 62
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	cd bf       	out	0x3d, r28	; 61
    23a6:	5c 01       	movw	r10, r24
    23a8:	6b 01       	movw	r12, r22
  accept();
    23aa:	cb 01       	movw	r24, r22
    23ac:	0e 94 07 11 	call	0x220e	; 0x220e <_ZN14EthernetServer6acceptEv>
    23b0:	0f 2e       	mov	r0, r31
    23b2:	fa ec       	ldi	r31, 0xCA	; 202
    23b4:	ef 2e       	mov	r14, r31
    23b6:	f3 e0       	ldi	r31, 0x03	; 3
    23b8:	ff 2e       	mov	r15, r31
    23ba:	f0 2d       	mov	r31, r0
    23bc:	10 e0       	ldi	r17, 0x00	; 0

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    23be:	61 2f       	mov	r22, r17
    23c0:	ce 01       	movw	r24, r28
    23c2:	01 96       	adiw	r24, 0x01	; 1
    23c4:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN14EthernetClientC1Eh>
    if (EthernetClass::_server_port[sock] == _port) {
    23c8:	f7 01       	movw	r30, r14
    23ca:	21 91       	ld	r18, Z+
    23cc:	31 91       	ld	r19, Z+
    23ce:	7f 01       	movw	r14, r30
    23d0:	f6 01       	movw	r30, r12
    23d2:	84 81       	ldd	r24, Z+4	; 0x04
    23d4:	95 81       	ldd	r25, Z+5	; 0x05
    23d6:	28 17       	cp	r18, r24
    23d8:	39 07       	cpc	r19, r25
    23da:	51 f5       	brne	.+84     	; 0x2430 <_ZN14EthernetServer9availableEv+0xac>
      uint8_t s = client.status();
    23dc:	ce 01       	movw	r24, r28
    23de:	01 96       	adiw	r24, 0x01	; 1
    23e0:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <_ZN14EthernetClient6statusEv>
      if (s == SnSR::ESTABLISHED || s == SnSR::CLOSE_WAIT) {
    23e4:	87 31       	cpi	r24, 0x17	; 23
    23e6:	11 f0       	breq	.+4      	; 0x23ec <_ZN14EthernetServer9availableEv+0x68>
    23e8:	8c 31       	cpi	r24, 0x1C	; 28
    23ea:	11 f5       	brne	.+68     	; 0x2430 <_ZN14EthernetServer9availableEv+0xac>
        if (client.available()) {
    23ec:	ce 01       	movw	r24, r28
    23ee:	01 96       	adiw	r24, 0x01	; 1
    23f0:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <_ZN14EthernetClient9availableEv>
    23f4:	89 2b       	or	r24, r25
    23f6:	e1 f0       	breq	.+56     	; 0x2430 <_ZN14EthernetServer9availableEv+0xac>
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	9c 81       	ldd	r25, Y+4	; 0x04
    23fc:	f5 01       	movw	r30, r10
    23fe:	93 83       	std	Z+3, r25	; 0x03
    2400:	82 83       	std	Z+2, r24	; 0x02
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
    2402:	8d 81       	ldd	r24, Y+5	; 0x05
    2404:	9e 81       	ldd	r25, Y+6	; 0x06
    2406:	af 81       	ldd	r26, Y+7	; 0x07
    2408:	b8 85       	ldd	r27, Y+8	; 0x08
    240a:	84 83       	std	Z+4, r24	; 0x04
    240c:	95 83       	std	Z+5, r25	; 0x05
    240e:	a6 83       	std	Z+6, r26	; 0x06
    2410:	b7 83       	std	Z+7, r27	; 0x07
    2412:	89 85       	ldd	r24, Y+9	; 0x09
    2414:	9a 85       	ldd	r25, Y+10	; 0x0a
    2416:	ab 85       	ldd	r26, Y+11	; 0x0b
    2418:	bc 85       	ldd	r27, Y+12	; 0x0c
    241a:	80 87       	std	Z+8, r24	; 0x08
    241c:	91 87       	std	Z+9, r25	; 0x09
    241e:	a2 87       	std	Z+10, r26	; 0x0a
    2420:	b3 87       	std	Z+11, r27	; 0x0b
#include "Arduino.h"	
#include "Print.h"
#include "Client.h"
#include "IPAddress.h"

class EthernetClient : public Client {
    2422:	8f e1       	ldi	r24, 0x1F	; 31
    2424:	92 e0       	ldi	r25, 0x02	; 2
    2426:	91 83       	std	Z+1, r25	; 0x01
    2428:	80 83       	st	Z, r24
    242a:	8d 85       	ldd	r24, Y+13	; 0x0d
    242c:	84 87       	std	Z+12, r24	; 0x0c
    242e:	07 c0       	rjmp	.+14     	; 0x243e <_ZN14EthernetServer9availableEv+0xba>
    2430:	1f 5f       	subi	r17, 0xFF	; 255

EthernetClient EthernetServer::available()
{
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    2432:	14 30       	cpi	r17, 0x04	; 4
    2434:	21 f6       	brne	.-120    	; 0x23be <_ZN14EthernetServer9availableEv+0x3a>
        }
      }
    }
  }

  return EthernetClient(MAX_SOCK_NUM);
    2436:	64 e0       	ldi	r22, 0x04	; 4
    2438:	c5 01       	movw	r24, r10
    243a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN14EthernetClientC1Eh>
}
    243e:	c5 01       	movw	r24, r10
    2440:	2d 96       	adiw	r28, 0x0d	; 13
    2442:	0f b6       	in	r0, 0x3f	; 63
    2444:	f8 94       	cli
    2446:	de bf       	out	0x3e, r29	; 62
    2448:	0f be       	out	0x3f, r0	; 63
    244a:	cd bf       	out	0x3d, r28	; 61
    244c:	df 91       	pop	r29
    244e:	cf 91       	pop	r28
    2450:	1f 91       	pop	r17
    2452:	ff 90       	pop	r15
    2454:	ef 90       	pop	r14
    2456:	df 90       	pop	r13
    2458:	cf 90       	pop	r12
    245a:	bf 90       	pop	r11
    245c:	af 90       	pop	r10
    245e:	08 95       	ret

00002460 <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>:
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
    2460:	0f 93       	push	r16
    2462:	00 e0       	ldi	r16, 0x00	; 0
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	40 e0       	ldi	r20, 0x00	; 0
    2468:	60 e0       	ldi	r22, 0x00	; 0
    246a:	8e ed       	ldi	r24, 0xDE	; 222
    246c:	93 e0       	ldi	r25, 0x03	; 3
    246e:	0e 94 8c 06 	call	0xd18	; 0xd18 <_ZN9IPAddressC1Ehhhh>
    2472:	0f 91       	pop	r16
    2474:	08 95       	ret

00002476 <_ZN11EthernetUDP4readEPcj>:
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    2476:	dc 01       	movw	r26, r24
    2478:	ed 91       	ld	r30, X+
    247a:	fc 91       	ld	r31, X
    247c:	02 8c       	ldd	r0, Z+26	; 0x1a
    247e:	f3 8d       	ldd	r31, Z+27	; 0x1b
    2480:	e0 2d       	mov	r30, r0
    2482:	09 95       	icall
    2484:	08 95       	ret

00002486 <_ZN11EthernetUDP8remoteIPEv>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    2486:	2a e0       	ldi	r18, 0x0A	; 10
    2488:	32 e0       	ldi	r19, 0x02	; 2
    248a:	fc 01       	movw	r30, r24
    248c:	31 83       	std	Z+1, r19	; 0x01
    248e:	20 83       	st	Z, r18
    2490:	fb 01       	movw	r30, r22
    2492:	40 89       	ldd	r20, Z+16	; 0x10
    2494:	51 89       	ldd	r21, Z+17	; 0x11
    2496:	62 89       	ldd	r22, Z+18	; 0x12
    2498:	73 89       	ldd	r23, Z+19	; 0x13
    249a:	fc 01       	movw	r30, r24
    249c:	42 83       	std	Z+2, r20	; 0x02
    249e:	53 83       	std	Z+3, r21	; 0x03
    24a0:	64 83       	std	Z+4, r22	; 0x04
    24a2:	75 83       	std	Z+5, r23	; 0x05
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    24a4:	08 95       	ret

000024a6 <_ZN11EthernetUDP10remotePortEv>:
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    24a6:	fc 01       	movw	r30, r24
    24a8:	84 89       	ldd	r24, Z+20	; 0x14
    24aa:	95 89       	ldd	r25, Z+21	; 0x15
    24ac:	08 95       	ret

000024ae <_ZN11EthernetUDP9availableEv>:

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
    24ae:	fc 01       	movw	r30, r24
    24b0:	81 8d       	ldd	r24, Z+25	; 0x19
    24b2:	92 8d       	ldd	r25, Z+26	; 0x1a
    24b4:	08 95       	ret

000024b6 <_ZN11EthernetUDP5writeEh>:
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    24b6:	cf 93       	push	r28
    24b8:	df 93       	push	r29
    24ba:	1f 92       	push	r1
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
    24c0:	69 83       	std	Y+1, r22	; 0x01
  return write(&byte, 1);
    24c2:	dc 01       	movw	r26, r24
    24c4:	ed 91       	ld	r30, X+
    24c6:	fc 91       	ld	r31, X
    24c8:	02 80       	ldd	r0, Z+2	; 0x02
    24ca:	f3 81       	ldd	r31, Z+3	; 0x03
    24cc:	e0 2d       	mov	r30, r0
    24ce:	41 e0       	ldi	r20, 0x01	; 1
    24d0:	50 e0       	ldi	r21, 0x00	; 0
    24d2:	be 01       	movw	r22, r28
    24d4:	6f 5f       	subi	r22, 0xFF	; 255
    24d6:	7f 4f       	sbci	r23, 0xFF	; 255
    24d8:	09 95       	icall
}
    24da:	0f 90       	pop	r0
    24dc:	df 91       	pop	r29
    24de:	cf 91       	pop	r28
    24e0:	08 95       	ret

000024e2 <_ZN11EthernetUDP5flushEv>:
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    24e2:	08 95       	ret

000024e4 <_ZN11EthernetUDP5beginEj>:

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
    24e4:	ef 92       	push	r14
    24e6:	ff 92       	push	r15
    24e8:	0f 93       	push	r16
    24ea:	1f 93       	push	r17
    24ec:	cf 93       	push	r28
  if (_sock != MAX_SOCK_NUM)
    24ee:	fc 01       	movw	r30, r24
    24f0:	20 8d       	ldd	r18, Z+24	; 0x18
    24f2:	24 30       	cpi	r18, 0x04	; 4
    24f4:	f9 f4       	brne	.+62     	; 0x2534 <_ZN11EthernetUDP5beginEj+0x50>
    24f6:	7b 01       	movw	r14, r22
    24f8:	8c 01       	movw	r16, r24
    24fa:	c0 e0       	ldi	r28, 0x00	; 0
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = socketStatus(i);
    24fc:	8c 2f       	mov	r24, r28
    24fe:	0e 94 c1 14 	call	0x2982	; 0x2982 <_Z12socketStatush>
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    2502:	88 23       	and	r24, r24
    2504:	11 f0       	breq	.+4      	; 0x250a <_ZN11EthernetUDP5beginEj+0x26>
    2506:	88 31       	cpi	r24, 0x18	; 24
    2508:	19 f4       	brne	.+6      	; 0x2510 <_ZN11EthernetUDP5beginEj+0x2c>
      _sock = i;
    250a:	f8 01       	movw	r30, r16
    250c:	c0 8f       	std	Z+24, r28	; 0x18
      break;
    250e:	03 c0       	rjmp	.+6      	; 0x2516 <_ZN11EthernetUDP5beginEj+0x32>
    2510:	cf 5f       	subi	r28, 0xFF	; 255
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    2512:	c4 30       	cpi	r28, 0x04	; 4
    2514:	99 f7       	brne	.-26     	; 0x24fc <_ZN11EthernetUDP5beginEj+0x18>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    2516:	f8 01       	movw	r30, r16
    2518:	80 8d       	ldd	r24, Z+24	; 0x18
    251a:	84 30       	cpi	r24, 0x04	; 4
    251c:	69 f0       	breq	.+26     	; 0x2538 <_ZN11EthernetUDP5beginEj+0x54>
    return 0;

  _port = port;
    251e:	f5 86       	std	Z+13, r15	; 0x0d
    2520:	e4 86       	std	Z+12, r14	; 0x0c
  _remaining = 0;
    2522:	12 8e       	std	Z+26, r1	; 0x1a
    2524:	11 8e       	std	Z+25, r1	; 0x19
  socket(_sock, SnMR::UDP, _port, 0);
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	a7 01       	movw	r20, r14
    252a:	62 e0       	ldi	r22, 0x02	; 2
    252c:	0e 94 34 15 	call	0x2a68	; 0x2a68 <_Z6sockethhjh>

  return 1;
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	03 c0       	rjmp	.+6      	; 0x253a <_ZN11EthernetUDP5beginEj+0x56>
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	01 c0       	rjmp	.+2      	; 0x253a <_ZN11EthernetUDP5beginEj+0x56>
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    return 0;
    2538:	80 e0       	ldi	r24, 0x00	; 0
  _port = port;
  _remaining = 0;
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
}
    253a:	cf 91       	pop	r28
    253c:	1f 91       	pop	r17
    253e:	0f 91       	pop	r16
    2540:	ff 90       	pop	r15
    2542:	ef 90       	pop	r14
    2544:	08 95       	ret

00002546 <_ZN11EthernetUDP4stopEv>:
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
    2546:	cf 93       	push	r28
    2548:	df 93       	push	r29
    254a:	fc 01       	movw	r30, r24
  if (_sock == MAX_SOCK_NUM)
    254c:	80 8d       	ldd	r24, Z+24	; 0x18
    254e:	84 30       	cpi	r24, 0x04	; 4
    2550:	69 f0       	breq	.+26     	; 0x256c <_ZN11EthernetUDP4stopEv+0x26>
    2552:	ef 01       	movw	r28, r30
    return;

  close(_sock);
    2554:	0e 94 f5 14 	call	0x29ea	; 0x29ea <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    2558:	e8 8d       	ldd	r30, Y+24	; 0x18
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	ee 0f       	add	r30, r30
    255e:	ff 1f       	adc	r31, r31
    2560:	e6 53       	subi	r30, 0x36	; 54
    2562:	fc 4f       	sbci	r31, 0xFC	; 252
    2564:	11 82       	std	Z+1, r1	; 0x01
    2566:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    2568:	84 e0       	ldi	r24, 0x04	; 4
    256a:	88 8f       	std	Y+24, r24	; 0x18
}
    256c:	df 91       	pop	r29
    256e:	cf 91       	pop	r28
    2570:	08 95       	ret

00002572 <_ZN11EthernetUDP11beginPacketE9IPAddressj>:
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
  _offset = 0;
    2572:	fc 01       	movw	r30, r24
    2574:	17 8a       	std	Z+23, r1	; 0x17
    2576:	16 8a       	std	Z+22, r1	; 0x16

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    2578:	6e 5f       	subi	r22, 0xFE	; 254
    257a:	7f 4f       	sbci	r23, 0xFF	; 255
  return startUDP(_sock, rawIPAddress(ip), port);
    257c:	80 8d       	ldd	r24, Z+24	; 0x18
    257e:	0e 94 fe 18 	call	0x31fc	; 0x31fc <_Z8startUDPhPhj>
}
    2582:	08 95       	ret

00002584 <_ZN11EthernetUDP9endPacketEv>:

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
    2584:	fc 01       	movw	r30, r24
    2586:	80 8d       	ldd	r24, Z+24	; 0x18
    2588:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z7sendUDPh>
}
    258c:	08 95       	ret

0000258e <_ZN11EthernetUDP5writeEPKhj>:
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
    258e:	cf 93       	push	r28
    2590:	df 93       	push	r29
    2592:	ec 01       	movw	r28, r24
    2594:	9a 01       	movw	r18, r20
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
    2596:	8e 89       	ldd	r24, Y+22	; 0x16
    2598:	9f 89       	ldd	r25, Y+23	; 0x17
    259a:	ab 01       	movw	r20, r22
    259c:	bc 01       	movw	r22, r24
    259e:	88 8d       	ldd	r24, Y+24	; 0x18
    25a0:	0e 94 a4 18 	call	0x3148	; 0x3148 <_Z10bufferDatahjPKhj>
  _offset += bytes_written;
    25a4:	2e 89       	ldd	r18, Y+22	; 0x16
    25a6:	3f 89       	ldd	r19, Y+23	; 0x17
    25a8:	28 0f       	add	r18, r24
    25aa:	39 1f       	adc	r19, r25
    25ac:	3f 8b       	std	Y+23, r19	; 0x17
    25ae:	2e 8b       	std	Y+22, r18	; 0x16
  return bytes_written;
}
    25b0:	df 91       	pop	r29
    25b2:	cf 91       	pop	r28
    25b4:	08 95       	ret

000025b6 <_ZN11EthernetUDP4readEv>:
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
    25b6:	0f 93       	push	r16
    25b8:	1f 93       	push	r17
    25ba:	cf 93       	push	r28
    25bc:	df 93       	push	r29
    25be:	1f 92       	push	r1
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
    25c4:	fc 01       	movw	r30, r24
    25c6:	21 8d       	ldd	r18, Z+25	; 0x19
    25c8:	32 8d       	ldd	r19, Z+26	; 0x1a
    25ca:	23 2b       	or	r18, r19
    25cc:	a9 f0       	breq	.+42     	; 0x25f8 <_ZN11EthernetUDP4readEv+0x42>
    25ce:	8c 01       	movw	r16, r24
    25d0:	41 e0       	ldi	r20, 0x01	; 1
    25d2:	50 e0       	ldi	r21, 0x00	; 0
    25d4:	be 01       	movw	r22, r28
    25d6:	6f 5f       	subi	r22, 0xFF	; 255
    25d8:	7f 4f       	sbci	r23, 0xFF	; 255
    25da:	80 8d       	ldd	r24, Z+24	; 0x18
    25dc:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <_Z4recvhPhi>
    25e0:	18 16       	cp	r1, r24
    25e2:	19 06       	cpc	r1, r25
    25e4:	64 f4       	brge	.+24     	; 0x25fe <_ZN11EthernetUDP4readEv+0x48>
  {
    // We read things without any problems
    _remaining--;
    25e6:	f8 01       	movw	r30, r16
    25e8:	81 8d       	ldd	r24, Z+25	; 0x19
    25ea:	92 8d       	ldd	r25, Z+26	; 0x1a
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	92 8f       	std	Z+26, r25	; 0x1a
    25f0:	81 8f       	std	Z+25, r24	; 0x19
    return byte;
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	05 c0       	rjmp	.+10     	; 0x2602 <_ZN11EthernetUDP4readEv+0x4c>
  }

  // If we get here, there's no data available
  return -1;
    25f8:	8f ef       	ldi	r24, 0xFF	; 255
    25fa:	9f ef       	ldi	r25, 0xFF	; 255
    25fc:	02 c0       	rjmp	.+4      	; 0x2602 <_ZN11EthernetUDP4readEv+0x4c>
    25fe:	8f ef       	ldi	r24, 0xFF	; 255
    2600:	9f ef       	ldi	r25, 0xFF	; 255
}
    2602:	0f 90       	pop	r0
    2604:	df 91       	pop	r29
    2606:	cf 91       	pop	r28
    2608:	1f 91       	pop	r17
    260a:	0f 91       	pop	r16
    260c:	08 95       	ret

0000260e <_ZN11EthernetUDP4readEPhj>:

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
    260e:	cf 93       	push	r28
    2610:	df 93       	push	r29

  if (_remaining > 0)
    2612:	fc 01       	movw	r30, r24
    2614:	21 8d       	ldd	r18, Z+25	; 0x19
    2616:	32 8d       	ldd	r19, Z+26	; 0x1a
    2618:	21 15       	cp	r18, r1
    261a:	31 05       	cpc	r19, r1
    261c:	d1 f0       	breq	.+52     	; 0x2652 <_ZN11EthernetUDP4readEPhj+0x44>
    261e:	ec 01       	movw	r28, r24
  {

    int got;

    if (_remaining <= len)
    2620:	42 17       	cp	r20, r18
    2622:	53 07       	cpc	r21, r19
    2624:	30 f0       	brcs	.+12     	; 0x2632 <_ZN11EthernetUDP4readEPhj+0x24>
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
    2626:	a9 01       	movw	r20, r18
    2628:	80 8d       	ldd	r24, Z+24	; 0x18
    262a:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <_Z4recvhPhi>
    262e:	9c 01       	movw	r18, r24
    2630:	04 c0       	rjmp	.+8      	; 0x263a <_ZN11EthernetUDP4readEPhj+0x2c>
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
    2632:	80 8d       	ldd	r24, Z+24	; 0x18
    2634:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <_Z4recvhPhi>
    2638:	9c 01       	movw	r18, r24
    }

    if (got > 0)
    263a:	12 16       	cp	r1, r18
    263c:	13 06       	cpc	r1, r19
    263e:	64 f4       	brge	.+24     	; 0x2658 <_ZN11EthernetUDP4readEPhj+0x4a>
    {
      _remaining -= got;
    2640:	89 8d       	ldd	r24, Y+25	; 0x19
    2642:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2644:	82 1b       	sub	r24, r18
    2646:	93 0b       	sbc	r25, r19
    2648:	9a 8f       	std	Y+26, r25	; 0x1a
    264a:	89 8f       	std	Y+25, r24	; 0x19
      return got;
    264c:	82 2f       	mov	r24, r18
    264e:	93 2f       	mov	r25, r19
    2650:	05 c0       	rjmp	.+10     	; 0x265c <_ZN11EthernetUDP4readEPhj+0x4e>
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
    2652:	8f ef       	ldi	r24, 0xFF	; 255
    2654:	9f ef       	ldi	r25, 0xFF	; 255
    2656:	02 c0       	rjmp	.+4      	; 0x265c <_ZN11EthernetUDP4readEPhj+0x4e>
    2658:	8f ef       	ldi	r24, 0xFF	; 255
    265a:	9f ef       	ldi	r25, 0xFF	; 255

}
    265c:	df 91       	pop	r29
    265e:	cf 91       	pop	r28
    2660:	08 95       	ret

00002662 <_ZN11EthernetUDP11parsePacketEv>:
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
    2662:	0f 93       	push	r16
    2664:	1f 93       	push	r17
    2666:	cf 93       	push	r28
    2668:	df 93       	push	r29
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
    266e:	28 97       	sbiw	r28, 0x08	; 8
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	cd bf       	out	0x3d, r28	; 61
    267a:	8c 01       	movw	r16, r24
  // discard any remaining bytes in the last packet
  while (_remaining) {
    267c:	dc 01       	movw	r26, r24
    267e:	59 96       	adiw	r26, 0x19	; 25
    2680:	8d 91       	ld	r24, X+
    2682:	9c 91       	ld	r25, X
    2684:	5a 97       	sbiw	r26, 0x1a	; 26
    2686:	89 2b       	or	r24, r25
    2688:	69 f0       	breq	.+26     	; 0x26a4 <_ZN11EthernetUDP11parsePacketEv+0x42>
    // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
    // should only occur if recv fails after telling us the data is there, lets
    // hope the w5100 always behaves :)
    read();
    268a:	d8 01       	movw	r26, r16
    268c:	ed 91       	ld	r30, X+
    268e:	fc 91       	ld	r31, X
    2690:	06 80       	ldd	r0, Z+6	; 0x06
    2692:	f7 81       	ldd	r31, Z+7	; 0x07
    2694:	e0 2d       	mov	r30, r0
    2696:	c8 01       	movw	r24, r16
    2698:	09 95       	icall
}

int EthernetUDP::parsePacket()
{
  // discard any remaining bytes in the last packet
  while (_remaining) {
    269a:	f8 01       	movw	r30, r16
    269c:	81 8d       	ldd	r24, Z+25	; 0x19
    269e:	92 8d       	ldd	r25, Z+26	; 0x1a
    26a0:	89 2b       	or	r24, r25
    26a2:	99 f7       	brne	.-26     	; 0x268a <_ZN11EthernetUDP11parsePacketEv+0x28>
    // should only occur if recv fails after telling us the data is there, lets
    // hope the w5100 always behaves :)
    read();
  }

  if (recvAvailable(_sock) > 0)
    26a4:	d8 01       	movw	r26, r16
    26a6:	58 96       	adiw	r26, 0x18	; 24
    26a8:	8c 91       	ld	r24, X
    26aa:	0e 94 37 18 	call	0x306e	; 0x306e <_Z13recvAvailableh>
    26ae:	18 16       	cp	r1, r24
    26b0:	19 06       	cpc	r1, r25
    26b2:	74 f5       	brge	.+92     	; 0x2710 <_ZN11EthernetUDP11parsePacketEv+0xae>
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
    26b4:	48 e0       	ldi	r20, 0x08	; 8
    26b6:	50 e0       	ldi	r21, 0x00	; 0
    26b8:	be 01       	movw	r22, r28
    26ba:	6f 5f       	subi	r22, 0xFF	; 255
    26bc:	7f 4f       	sbci	r23, 0xFF	; 255
    26be:	f8 01       	movw	r30, r16
    26c0:	80 8d       	ldd	r24, Z+24	; 0x18
    26c2:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <_Z4recvhPhi>
    26c6:	9c 01       	movw	r18, r24
    if (ret > 0)
    26c8:	18 16       	cp	r1, r24
    26ca:	19 06       	cpc	r1, r25
    26cc:	f4 f4       	brge	.+60     	; 0x270a <_ZN11EthernetUDP11parsePacketEv+0xa8>
    {
      _remoteIP = tmpBuf;
    26ce:	be 01       	movw	r22, r28
    26d0:	6f 5f       	subi	r22, 0xFF	; 255
    26d2:	7f 4f       	sbci	r23, 0xFF	; 255
    26d4:	c8 01       	movw	r24, r16
    26d6:	0e 96       	adiw	r24, 0x0e	; 14
    26d8:	0e 94 98 06 	call	0xd30	; 0xd30 <_ZN9IPAddressaSEPKh>
      _remotePort = tmpBuf[4];
      _remotePort = (_remotePort << 8) + tmpBuf[5];
    26dc:	8d 81       	ldd	r24, Y+5	; 0x05
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	98 2f       	mov	r25, r24
    26e2:	88 27       	eor	r24, r24
    26e4:	2e 81       	ldd	r18, Y+6	; 0x06
    26e6:	82 0f       	add	r24, r18
    26e8:	91 1d       	adc	r25, r1
    26ea:	d8 01       	movw	r26, r16
    26ec:	55 96       	adiw	r26, 0x15	; 21
    26ee:	9c 93       	st	X, r25
    26f0:	8e 93       	st	-X, r24
    26f2:	54 97       	sbiw	r26, 0x14	; 20
      _remaining = tmpBuf[6];
      _remaining = (_remaining << 8) + tmpBuf[7];
    26f4:	2f 81       	ldd	r18, Y+7	; 0x07
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	32 2f       	mov	r19, r18
    26fa:	22 27       	eor	r18, r18
    26fc:	88 85       	ldd	r24, Y+8	; 0x08
    26fe:	28 0f       	add	r18, r24
    2700:	31 1d       	adc	r19, r1
    2702:	5a 96       	adiw	r26, 0x1a	; 26
    2704:	3c 93       	st	X, r19
    2706:	2e 93       	st	-X, r18
    2708:	59 97       	sbiw	r26, 0x19	; 25

      // When we get here, any remaining bytes are the data
      ret = _remaining;
    }
    return ret;
    270a:	82 2f       	mov	r24, r18
    270c:	93 2f       	mov	r25, r19
    270e:	02 c0       	rjmp	.+4      	; 0x2714 <_ZN11EthernetUDP11parsePacketEv+0xb2>
  }
  // There aren't any packets available
  return 0;
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	90 e0       	ldi	r25, 0x00	; 0
}
    2714:	28 96       	adiw	r28, 0x08	; 8
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	f8 94       	cli
    271a:	de bf       	out	0x3e, r29	; 62
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	cd bf       	out	0x3d, r28	; 61
    2720:	df 91       	pop	r29
    2722:	cf 91       	pop	r28
    2724:	1f 91       	pop	r17
    2726:	0f 91       	pop	r16
    2728:	08 95       	ret

0000272a <_ZN11EthernetUDP4peekEv>:
  return -1;

}

int EthernetUDP::peek()
{
    272a:	cf 93       	push	r28
    272c:	df 93       	push	r29
    272e:	1f 92       	push	r1
    2730:	cd b7       	in	r28, 0x3d	; 61
    2732:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    2734:	fc 01       	movw	r30, r24
    2736:	21 8d       	ldd	r18, Z+25	; 0x19
    2738:	32 8d       	ldd	r19, Z+26	; 0x1a
    273a:	23 2b       	or	r18, r19
    273c:	49 f0       	breq	.+18     	; 0x2750 <_ZN11EthernetUDP4peekEv+0x26>
    return -1;
  ::peek(_sock, &b);
    273e:	be 01       	movw	r22, r28
    2740:	6f 5f       	subi	r22, 0xFF	; 255
    2742:	7f 4f       	sbci	r23, 0xFF	; 255
    2744:	80 8d       	ldd	r24, Z+24	; 0x18
    2746:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_Z4peekhPh>
  return b;
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	02 c0       	rjmp	.+4      	; 0x2754 <_ZN11EthernetUDP4peekEv+0x2a>
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    return -1;
    2750:	8f ef       	ldi	r24, 0xFF	; 255
    2752:	9f ef       	ldi	r25, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
    2754:	0f 90       	pop	r0
    2756:	df 91       	pop	r29
    2758:	cf 91       	pop	r28
    275a:	08 95       	ret

0000275c <_ZN11EthernetUDP14beginMulticastE9IPAddressj>:
  // TODO: we should wait for TX buffer to be emptied
}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::beginMulticast(IPAddress ip, uint16_t port)
{
    275c:	af 92       	push	r10
    275e:	bf 92       	push	r11
    2760:	cf 92       	push	r12
    2762:	df 92       	push	r13
    2764:	ef 92       	push	r14
    2766:	ff 92       	push	r15
    2768:	0f 93       	push	r16
    276a:	1f 93       	push	r17
    276c:	cf 93       	push	r28
    276e:	df 93       	push	r29
    2770:	00 d0       	rcall	.+0      	; 0x2772 <_ZN11EthernetUDP14beginMulticastE9IPAddressj+0x16>
    2772:	00 d0       	rcall	.+0      	; 0x2774 <_ZN11EthernetUDP14beginMulticastE9IPAddressj+0x18>
    2774:	00 d0       	rcall	.+0      	; 0x2776 <_ZN11EthernetUDP14beginMulticastE9IPAddressj+0x1a>
    2776:	cd b7       	in	r28, 0x3d	; 61
    2778:	de b7       	in	r29, 0x3e	; 62
  if (_sock != MAX_SOCK_NUM)
    277a:	fc 01       	movw	r30, r24
    277c:	20 8d       	ldd	r18, Z+24	; 0x18
    277e:	24 30       	cpi	r18, 0x04	; 4
    2780:	09 f0       	breq	.+2      	; 0x2784 <_ZN11EthernetUDP14beginMulticastE9IPAddressj+0x28>
    2782:	65 c0       	rjmp	.+202    	; 0x284e <_ZN11EthernetUDP14beginMulticastE9IPAddressj+0xf2>
    2784:	b5 2e       	mov	r11, r21
    2786:	a4 2e       	mov	r10, r20
    2788:	7b 01       	movw	r14, r22
    278a:	6c 01       	movw	r12, r24
    278c:	00 e0       	ldi	r16, 0x00	; 0
    278e:	10 e0       	ldi	r17, 0x00	; 0
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    2790:	90 2f       	mov	r25, r16
    2792:	88 27       	eor	r24, r24
    2794:	8d 5f       	subi	r24, 0xFD	; 253
    2796:	9b 4f       	sbci	r25, 0xFB	; 251
    2798:	0e 94 bb 1a 	call	0x3576	; 0x3576 <_ZN10W5100Class4readEj>
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = W5100.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    279c:	88 23       	and	r24, r24
    279e:	11 f0       	breq	.+4      	; 0x27a4 <_ZN11EthernetUDP14beginMulticastE9IPAddressj+0x48>
    27a0:	88 31       	cpi	r24, 0x18	; 24
    27a2:	19 f4       	brne	.+6      	; 0x27aa <_ZN11EthernetUDP14beginMulticastE9IPAddressj+0x4e>
      _sock = i;
    27a4:	f6 01       	movw	r30, r12
    27a6:	00 8f       	std	Z+24, r16	; 0x18
      break;
    27a8:	05 c0       	rjmp	.+10     	; 0x27b4 <_ZN11EthernetUDP14beginMulticastE9IPAddressj+0x58>
uint8_t EthernetUDP::beginMulticast(IPAddress ip, uint16_t port)
{
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    27aa:	0f 5f       	subi	r16, 0xFF	; 255
    27ac:	1f 4f       	sbci	r17, 0xFF	; 255
    27ae:	04 30       	cpi	r16, 0x04	; 4
    27b0:	11 05       	cpc	r17, r1
    27b2:	71 f7       	brne	.-36     	; 0x2790 <_ZN11EthernetUDP14beginMulticastE9IPAddressj+0x34>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    27b4:	f6 01       	movw	r30, r12
    27b6:	80 8d       	ldd	r24, Z+24	; 0x18
    27b8:	84 30       	cpi	r24, 0x04	; 4
    27ba:	09 f4       	brne	.+2      	; 0x27be <_ZN11EthernetUDP14beginMulticastE9IPAddressj+0x62>
    27bc:	4a c0       	rjmp	.+148    	; 0x2852 <_ZN11EthernetUDP14beginMulticastE9IPAddressj+0xf6>
    return 0;

  // Calculate MAC address from Multicast IP Address
  byte mac[] = {  0x01, 0x00, 0x5E, 0x00, 0x00, 0x00 };
    27be:	96 e0       	ldi	r25, 0x06	; 6
    27c0:	e8 e0       	ldi	r30, 0x08	; 8
    27c2:	f1 e0       	ldi	r31, 0x01	; 1
    27c4:	de 01       	movw	r26, r28
    27c6:	11 96       	adiw	r26, 0x01	; 1
    27c8:	01 90       	ld	r0, Z+
    27ca:	0d 92       	st	X+, r0
    27cc:	9a 95       	dec	r25
    27ce:	e1 f7       	brne	.-8      	; 0x27c8 <_ZN11EthernetUDP14beginMulticastE9IPAddressj+0x6c>

  mac[3] = ip[1] & 0x7F;
    27d0:	f7 01       	movw	r30, r14
    27d2:	93 81       	ldd	r25, Z+3	; 0x03
    27d4:	9f 77       	andi	r25, 0x7F	; 127
    27d6:	9c 83       	std	Y+4, r25	; 0x04
  mac[4] = ip[2];
    27d8:	94 81       	ldd	r25, Z+4	; 0x04
    27da:	9d 83       	std	Y+5, r25	; 0x05
  mac[5] = ip[3];
    27dc:	95 81       	ldd	r25, Z+5	; 0x05
    27de:	9e 83       	std	Y+6, r25	; 0x06
    27e0:	b7 01       	movw	r22, r14
    27e2:	6e 5f       	subi	r22, 0xFE	; 254
    27e4:	7f 4f       	sbci	r23, 0xFF	; 255
uint16_t W5100Class::readSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return read(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
}

uint16_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	98 2f       	mov	r25, r24
    27ea:	88 27       	eor	r24, r24
    27ec:	44 e0       	ldi	r20, 0x04	; 4
    27ee:	50 e0       	ldi	r21, 0x00	; 0
    27f0:	84 5f       	subi	r24, 0xF4	; 244
    27f2:	9b 4f       	sbci	r25, 0xFB	; 251
    27f4:	0e 94 91 1a 	call	0x3522	; 0x3522 <_ZN10W5100Class5writeEjPKhj>
uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    27f8:	f6 01       	movw	r30, r12
    27fa:	00 8d       	ldd	r16, Z+24	; 0x18
    27fc:	10 e0       	ldi	r17, 0x00	; 0
    27fe:	0c 5f       	subi	r16, 0xFC	; 252
    2800:	1f 4f       	sbci	r17, 0xFF	; 255
    2802:	10 2f       	mov	r17, r16
    2804:	00 27       	eor	r16, r16
    2806:	6b 2d       	mov	r22, r11
    2808:	c8 01       	movw	r24, r16
    280a:	40 96       	adiw	r24, 0x10	; 16
    280c:	0e 94 0a 1a 	call	0x3414	; 0x3414 <_ZN10W5100Class5writeEjh>
    2810:	6a 2d       	mov	r22, r10
    2812:	c8 01       	movw	r24, r16
    2814:	41 96       	adiw	r24, 0x11	; 17
    2816:	0e 94 0a 1a 	call	0x3414	; 0x3414 <_ZN10W5100Class5writeEjh>
uint16_t W5100Class::readSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return read(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
}

uint16_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
    281a:	f6 01       	movw	r30, r12
    281c:	80 8d       	ldd	r24, Z+24	; 0x18
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	98 2f       	mov	r25, r24
    2822:	88 27       	eor	r24, r24
    2824:	46 e0       	ldi	r20, 0x06	; 6
    2826:	50 e0       	ldi	r21, 0x00	; 0
    2828:	be 01       	movw	r22, r28
    282a:	6f 5f       	subi	r22, 0xFF	; 255
    282c:	7f 4f       	sbci	r23, 0xFF	; 255
    282e:	8a 5f       	subi	r24, 0xFA	; 250
    2830:	9b 4f       	sbci	r25, 0xFB	; 251
    2832:	0e 94 91 1a 	call	0x3522	; 0x3522 <_ZN10W5100Class5writeEjPKhj>

  W5100.writeSnDIPR(_sock, rawIPAddress(ip));   //239.255.0.1
  W5100.writeSnDPORT(_sock, port);
  W5100.writeSnDHAR(_sock,mac);

  _remaining = 0;
    2836:	f6 01       	movw	r30, r12
    2838:	12 8e       	std	Z+26, r1	; 0x1a
    283a:	11 8e       	std	Z+25, r1	; 0x19
  socket(_sock, SnMR::UDP, port, SnMR::MULTI);
    283c:	20 e8       	ldi	r18, 0x80	; 128
    283e:	4a 2d       	mov	r20, r10
    2840:	5b 2d       	mov	r21, r11
    2842:	62 e0       	ldi	r22, 0x02	; 2
    2844:	80 8d       	ldd	r24, Z+24	; 0x18
    2846:	0e 94 34 15 	call	0x2a68	; 0x2a68 <_Z6sockethhjh>
  return 1;
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	03 c0       	rjmp	.+6      	; 0x2854 <_ZN11EthernetUDP14beginMulticastE9IPAddressj+0xf8>

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::beginMulticast(IPAddress ip, uint16_t port)
{
  if (_sock != MAX_SOCK_NUM)
    return 0;
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	01 c0       	rjmp	.+2      	; 0x2854 <_ZN11EthernetUDP14beginMulticastE9IPAddressj+0xf8>
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    return 0;
    2852:	80 e0       	ldi	r24, 0x00	; 0
  W5100.writeSnDHAR(_sock,mac);

  _remaining = 0;
  socket(_sock, SnMR::UDP, port, SnMR::MULTI);
  return 1;
}
    2854:	26 96       	adiw	r28, 0x06	; 6
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	f8 94       	cli
    285a:	de bf       	out	0x3e, r29	; 62
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	cd bf       	out	0x3d, r28	; 61
    2860:	df 91       	pop	r29
    2862:	cf 91       	pop	r28
    2864:	1f 91       	pop	r17
    2866:	0f 91       	pop	r16
    2868:	ff 90       	pop	r15
    286a:	ef 90       	pop	r14
    286c:	df 90       	pop	r13
    286e:	cf 90       	pop	r12
    2870:	bf 90       	pop	r11
    2872:	af 90       	pop	r10
    2874:	08 95       	ret

00002876 <_ZN11EthernetUDPC1Ev>:
#include "Ethernet.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    2876:	cf 93       	push	r28
    2878:	df 93       	push	r29
    287a:	ec 01       	movw	r28, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    287c:	1b 82       	std	Y+3, r1	; 0x03
    287e:	1a 82       	std	Y+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2880:	88 ee       	ldi	r24, 0xE8	; 232
    2882:	93 e0       	ldi	r25, 0x03	; 3
    2884:	a0 e0       	ldi	r26, 0x00	; 0
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	8c 83       	std	Y+4, r24	; 0x04
    288a:	9d 83       	std	Y+5, r25	; 0x05
    288c:	ae 83       	std	Y+6, r26	; 0x06
    288e:	bf 83       	std	Y+7, r27	; 0x07
    2890:	8d e4       	ldi	r24, 0x4D	; 77
    2892:	92 e0       	ldi	r25, 0x02	; 2
    2894:	99 83       	std	Y+1, r25	; 0x01
    2896:	88 83       	st	Y, r24
    2898:	ce 01       	movw	r24, r28
    289a:	0e 96       	adiw	r24, 0x0e	; 14
    289c:	0e 94 82 06 	call	0xd04	; 0xd04 <_ZN9IPAddressC1Ev>
    28a0:	84 e0       	ldi	r24, 0x04	; 4
    28a2:	88 8f       	std	Y+24, r24	; 0x18
    28a4:	df 91       	pop	r29
    28a6:	cf 91       	pop	r28
    28a8:	08 95       	ret

000028aa <_ZN11EthernetUDP11beginPacketEPKcj>:
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
    28aa:	cf 92       	push	r12
    28ac:	df 92       	push	r13
    28ae:	ef 92       	push	r14
    28b0:	ff 92       	push	r15
    28b2:	0f 93       	push	r16
    28b4:	1f 93       	push	r17
    28b6:	cf 93       	push	r28
    28b8:	df 93       	push	r29
    28ba:	cd b7       	in	r28, 0x3d	; 61
    28bc:	de b7       	in	r29, 0x3e	; 62
    28be:	e5 97       	sbiw	r28, 0x35	; 53
    28c0:	0f b6       	in	r0, 0x3f	; 63
    28c2:	f8 94       	cli
    28c4:	de bf       	out	0x3e, r29	; 62
    28c6:	0f be       	out	0x3f, r0	; 63
    28c8:	cd bf       	out	0x3d, r28	; 61
    28ca:	7c 01       	movw	r14, r24
    28cc:	8b 01       	movw	r16, r22
    28ce:	6a 01       	movw	r12, r20
#ifndef DNSClient_h
#define DNSClient_h

#include <EthernetUdp.h>

class DNSClient
    28d0:	ce 01       	movw	r24, r28
    28d2:	0d 96       	adiw	r24, 0x0d	; 13
    28d4:	0e 94 82 06 	call	0xd04	; 0xd04 <_ZN9IPAddressC1Ev>
    28d8:	ce 01       	movw	r24, r28
    28da:	45 96       	adiw	r24, 0x15	; 21
    28dc:	0e 94 3b 14 	call	0x2876	; 0x2876 <_ZN11EthernetUDPC1Ev>
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
    28e0:	ce 01       	movw	r24, r28
    28e2:	c0 96       	adiw	r24, 0x30	; 48
    28e4:	0e 94 82 06 	call	0xd04	; 0xd04 <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
    28e8:	62 ec       	ldi	r22, 0xC2	; 194
    28ea:	73 e0       	ldi	r23, 0x03	; 3
    28ec:	ce 01       	movw	r24, r28
    28ee:	07 96       	adiw	r24, 0x07	; 7
    28f0:	0e 94 77 0e 	call	0x1cee	; 0x1cee <_ZN13EthernetClass11dnsServerIPEv>
    28f4:	be 01       	movw	r22, r28
    28f6:	69 5f       	subi	r22, 0xF9	; 249
    28f8:	7f 4f       	sbci	r23, 0xFF	; 255
    28fa:	ce 01       	movw	r24, r28
    28fc:	0d 96       	adiw	r24, 0x0d	; 13
    28fe:	0e 94 b5 1c 	call	0x396a	; 0x396a <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
    2902:	ae 01       	movw	r20, r28
    2904:	40 5d       	subi	r20, 0xD0	; 208
    2906:	5f 4f       	sbci	r21, 0xFF	; 255
    2908:	b8 01       	movw	r22, r16
    290a:	ce 01       	movw	r24, r28
    290c:	0d 96       	adiw	r24, 0x0d	; 13
    290e:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
    2912:	9c 01       	movw	r18, r24
  if (ret == 1) {
    2914:	81 30       	cpi	r24, 0x01	; 1
    2916:	91 05       	cpc	r25, r1
    2918:	c9 f4       	brne	.+50     	; 0x294c <_ZN11EthernetUDP11beginPacketEPKcj+0xa2>
    return beginPacket(remote_addr, port);
    291a:	d7 01       	movw	r26, r14
    291c:	ed 91       	ld	r30, X+
    291e:	fc 91       	ld	r31, X
    2920:	02 88       	ldd	r0, Z+18	; 0x12
    2922:	f3 89       	ldd	r31, Z+19	; 0x13
    2924:	e0 2d       	mov	r30, r0
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    2926:	8a e0       	ldi	r24, 0x0A	; 10
    2928:	92 e0       	ldi	r25, 0x02	; 2
    292a:	9a 83       	std	Y+2, r25	; 0x02
    292c:	89 83       	std	Y+1, r24	; 0x01
    292e:	8a a9       	ldd	r24, Y+50	; 0x32
    2930:	9b a9       	ldd	r25, Y+51	; 0x33
    2932:	ac a9       	ldd	r26, Y+52	; 0x34
    2934:	bd a9       	ldd	r27, Y+53	; 0x35
    2936:	8b 83       	std	Y+3, r24	; 0x03
    2938:	9c 83       	std	Y+4, r25	; 0x04
    293a:	ad 83       	std	Y+5, r26	; 0x05
    293c:	be 83       	std	Y+6, r27	; 0x06
    293e:	a6 01       	movw	r20, r12
    2940:	be 01       	movw	r22, r28
    2942:	6f 5f       	subi	r22, 0xFF	; 255
    2944:	7f 4f       	sbci	r23, 0xFF	; 255
    2946:	c7 01       	movw	r24, r14
    2948:	09 95       	icall
    294a:	01 c0       	rjmp	.+2      	; 0x294e <_ZN11EthernetUDP11beginPacketEPKcj+0xa4>
  } else {
    return ret;
    294c:	93 2f       	mov	r25, r19
  }
}
    294e:	e5 96       	adiw	r28, 0x35	; 53
    2950:	0f b6       	in	r0, 0x3f	; 63
    2952:	f8 94       	cli
    2954:	de bf       	out	0x3e, r29	; 62
    2956:	0f be       	out	0x3f, r0	; 63
    2958:	cd bf       	out	0x3d, r28	; 61
    295a:	df 91       	pop	r29
    295c:	cf 91       	pop	r28
    295e:	1f 91       	pop	r17
    2960:	0f 91       	pop	r16
    2962:	ff 90       	pop	r15
    2964:	ef 90       	pop	r14
    2966:	df 90       	pop	r13
    2968:	cf 90       	pop	r12
    296a:	08 95       	ret

0000296c <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:
  W5100.writeSnDHAR(_sock,mac);

  _remaining = 0;
  socket(_sock, SnMR::UDP, port, SnMR::MULTI);
  return 1;
}
    296c:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    296e:	00 e0       	ldi	r16, 0x00	; 0
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	40 e0       	ldi	r20, 0x00	; 0
    2974:	60 e0       	ldi	r22, 0x00	; 0
    2976:	84 ee       	ldi	r24, 0xE4	; 228
    2978:	93 e0       	ldi	r25, 0x03	; 3
    297a:	0e 94 8c 06 	call	0xd18	; 0xd18 <_ZN9IPAddressC1Ehhhh>
    297e:	0f 91       	pop	r16
    2980:	08 95       	ret

00002982 <_Z12socketStatush>:
  }

  W5100.writeSnIR(s, SnIR::SEND_OK);
  SPI.endTransaction();
  return ret;
}
    2982:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2986:	99 23       	and	r25, r25
    2988:	99 f0       	breq	.+38     	; 0x29b0 <_Z12socketStatush+0x2e>
    298a:	2f b7       	in	r18, 0x3f	; 63
    298c:	f8 94       	cli
    298e:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2992:	91 30       	cpi	r25, 0x01	; 1
    2994:	59 f4       	brne	.+22     	; 0x29ac <_Z12socketStatush+0x2a>
    2996:	9d b3       	in	r25, 0x1d	; 29
    2998:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    299c:	3d b3       	in	r19, 0x1d	; 29
    299e:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <_ZN8SPIClass13interruptMaskE>
    29a2:	90 95       	com	r25
    29a4:	93 23       	and	r25, r19
    29a6:	9d bb       	out	0x1d, r25	; 29
    29a8:	2f bf       	out	0x3f, r18	; 63
    29aa:	02 c0       	rjmp	.+4      	; 0x29b0 <_Z12socketStatush+0x2e>
    29ac:	20 93 08 04 	sts	0x0408, r18	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    29b0:	90 e5       	ldi	r25, 0x50	; 80
    29b2:	9c bd       	out	0x2c, r25	; 44
    29b4:	1d bc       	out	0x2d, r1	; 45
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	98 2f       	mov	r25, r24
    29ba:	88 27       	eor	r24, r24
    29bc:	8d 5f       	subi	r24, 0xFD	; 253
    29be:	9b 4f       	sbci	r25, 0xFB	; 251
    29c0:	0e 94 bb 1a 	call	0x3576	; 0x3576 <_ZN10W5100Class4readEj>
    29c4:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    29c8:	99 23       	and	r25, r25
    29ca:	71 f0       	breq	.+28     	; 0x29e8 <_Z12socketStatush+0x66>
    29cc:	2f b7       	in	r18, 0x3f	; 63
    29ce:	f8 94       	cli
    29d0:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    29d4:	91 30       	cpi	r25, 0x01	; 1
    29d6:	29 f4       	brne	.+10     	; 0x29e2 <_Z12socketStatush+0x60>
    29d8:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    29dc:	9d bb       	out	0x1d, r25	; 29
    29de:	2f bf       	out	0x3f, r18	; 63
    29e0:	08 95       	ret
    29e2:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    29e6:	9f bf       	out	0x3f, r25	; 63
    29e8:	08 95       	ret

000029ea <_Z5closeh>:
    29ea:	cf 93       	push	r28
    29ec:	c8 2f       	mov	r28, r24
    29ee:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    29f2:	88 23       	and	r24, r24
    29f4:	99 f0       	breq	.+38     	; 0x2a1c <_Z5closeh+0x32>
    29f6:	9f b7       	in	r25, 0x3f	; 63
    29f8:	f8 94       	cli
    29fa:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    29fe:	81 30       	cpi	r24, 0x01	; 1
    2a00:	59 f4       	brne	.+22     	; 0x2a18 <_Z5closeh+0x2e>
    2a02:	8d b3       	in	r24, 0x1d	; 29
    2a04:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2a08:	2d b3       	in	r18, 0x1d	; 29
    2a0a:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <_ZN8SPIClass13interruptMaskE>
    2a0e:	80 95       	com	r24
    2a10:	82 23       	and	r24, r18
    2a12:	8d bb       	out	0x1d, r24	; 29
    2a14:	9f bf       	out	0x3f, r25	; 63
    2a16:	02 c0       	rjmp	.+4      	; 0x2a1c <_Z5closeh+0x32>
    2a18:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2a1c:	80 e5       	ldi	r24, 0x50	; 80
    2a1e:	8c bd       	out	0x2c, r24	; 44
    2a20:	1d bc       	out	0x2d, r1	; 45
    2a22:	40 e1       	ldi	r20, 0x10	; 16
    2a24:	6c 2f       	mov	r22, r28
    2a26:	8c ee       	ldi	r24, 0xEC	; 236
    2a28:	93 e0       	ldi	r25, 0x03	; 3
    2a2a:	0e 94 96 1c 	call	0x392c	; 0x392c <_ZN10W5100Class9execCmdSnEh7SockCMD>
    2a2e:	8c 2f       	mov	r24, r28
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	98 2f       	mov	r25, r24
    2a34:	88 27       	eor	r24, r24
    2a36:	6f ef       	ldi	r22, 0xFF	; 255
    2a38:	8e 5f       	subi	r24, 0xFE	; 254
    2a3a:	9b 4f       	sbci	r25, 0xFB	; 251
    2a3c:	0e 94 0a 1a 	call	0x3414	; 0x3414 <_ZN10W5100Class5writeEjh>
    2a40:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2a44:	88 23       	and	r24, r24
    2a46:	71 f0       	breq	.+28     	; 0x2a64 <_Z5closeh+0x7a>
    2a48:	9f b7       	in	r25, 0x3f	; 63
    2a4a:	f8 94       	cli
    2a4c:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2a50:	81 30       	cpi	r24, 0x01	; 1
    2a52:	29 f4       	brne	.+10     	; 0x2a5e <_Z5closeh+0x74>
    2a54:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2a58:	8d bb       	out	0x1d, r24	; 29
    2a5a:	9f bf       	out	0x3f, r25	; 63
    2a5c:	03 c0       	rjmp	.+6      	; 0x2a64 <_Z5closeh+0x7a>
    2a5e:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2a62:	8f bf       	out	0x3f, r24	; 63
    2a64:	cf 91       	pop	r28
    2a66:	08 95       	ret

00002a68 <_Z6sockethhjh>:
    2a68:	df 92       	push	r13
    2a6a:	ef 92       	push	r14
    2a6c:	ff 92       	push	r15
    2a6e:	0f 93       	push	r16
    2a70:	1f 93       	push	r17
    2a72:	cf 93       	push	r28
    2a74:	df 93       	push	r29
    2a76:	9f ef       	ldi	r25, 0xFF	; 255
    2a78:	96 0f       	add	r25, r22
    2a7a:	95 30       	cpi	r25, 0x05	; 5
    2a7c:	08 f0       	brcs	.+2      	; 0x2a80 <_Z6sockethhjh+0x18>
    2a7e:	68 c0       	rjmp	.+208    	; 0x2b50 <_Z6sockethhjh+0xe8>
    2a80:	d2 2e       	mov	r13, r18
    2a82:	7a 01       	movw	r14, r20
    2a84:	c6 2f       	mov	r28, r22
    2a86:	d8 2f       	mov	r29, r24
    2a88:	0e 94 f5 14 	call	0x29ea	; 0x29ea <_Z5closeh>
    2a8c:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2a90:	88 23       	and	r24, r24
    2a92:	99 f0       	breq	.+38     	; 0x2aba <_Z6sockethhjh+0x52>
    2a94:	8f b7       	in	r24, 0x3f	; 63
    2a96:	f8 94       	cli
    2a98:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2a9c:	91 30       	cpi	r25, 0x01	; 1
    2a9e:	59 f4       	brne	.+22     	; 0x2ab6 <_Z6sockethhjh+0x4e>
    2aa0:	9d b3       	in	r25, 0x1d	; 29
    2aa2:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2aa6:	2d b3       	in	r18, 0x1d	; 29
    2aa8:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <_ZN8SPIClass13interruptMaskE>
    2aac:	90 95       	com	r25
    2aae:	92 23       	and	r25, r18
    2ab0:	9d bb       	out	0x1d, r25	; 29
    2ab2:	8f bf       	out	0x3f, r24	; 63
    2ab4:	02 c0       	rjmp	.+4      	; 0x2aba <_Z6sockethhjh+0x52>
    2ab6:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2aba:	80 e5       	ldi	r24, 0x50	; 80
    2abc:	8c bd       	out	0x2c, r24	; 44
    2abe:	1d bc       	out	0x2d, r1	; 45
    2ac0:	0d 2f       	mov	r16, r29
    2ac2:	10 e0       	ldi	r17, 0x00	; 0
    2ac4:	0c 5f       	subi	r16, 0xFC	; 252
    2ac6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ac8:	10 2f       	mov	r17, r16
    2aca:	00 27       	eor	r16, r16
    2acc:	6c 2f       	mov	r22, r28
    2ace:	6d 29       	or	r22, r13
    2ad0:	c8 01       	movw	r24, r16
    2ad2:	0e 94 0a 1a 	call	0x3414	; 0x3414 <_ZN10W5100Class5writeEjh>
    2ad6:	e1 14       	cp	r14, r1
    2ad8:	f1 04       	cpc	r15, r1
    2ada:	59 f0       	breq	.+22     	; 0x2af2 <_Z6sockethhjh+0x8a>
    2adc:	6f 2d       	mov	r22, r15
    2ade:	c8 01       	movw	r24, r16
    2ae0:	04 96       	adiw	r24, 0x04	; 4
    2ae2:	0e 94 0a 1a 	call	0x3414	; 0x3414 <_ZN10W5100Class5writeEjh>
    2ae6:	6e 2d       	mov	r22, r14
    2ae8:	c8 01       	movw	r24, r16
    2aea:	05 96       	adiw	r24, 0x05	; 5
    2aec:	0e 94 0a 1a 	call	0x3414	; 0x3414 <_ZN10W5100Class5writeEjh>
    2af0:	15 c0       	rjmp	.+42     	; 0x2b1c <_Z6sockethhjh+0xb4>
    2af2:	e0 90 ea 03 	lds	r14, 0x03EA	; 0x8003ea <_ZL10local_port>
    2af6:	f0 90 eb 03 	lds	r15, 0x03EB	; 0x8003eb <_ZL10local_port+0x1>
    2afa:	8f ef       	ldi	r24, 0xFF	; 255
    2afc:	e8 1a       	sub	r14, r24
    2afe:	f8 0a       	sbc	r15, r24
    2b00:	f0 92 eb 03 	sts	0x03EB, r15	; 0x8003eb <_ZL10local_port+0x1>
    2b04:	e0 92 ea 03 	sts	0x03EA, r14	; 0x8003ea <_ZL10local_port>
    2b08:	6f 2d       	mov	r22, r15
    2b0a:	c8 01       	movw	r24, r16
    2b0c:	04 96       	adiw	r24, 0x04	; 4
    2b0e:	0e 94 0a 1a 	call	0x3414	; 0x3414 <_ZN10W5100Class5writeEjh>
    2b12:	6e 2d       	mov	r22, r14
    2b14:	c8 01       	movw	r24, r16
    2b16:	05 96       	adiw	r24, 0x05	; 5
    2b18:	0e 94 0a 1a 	call	0x3414	; 0x3414 <_ZN10W5100Class5writeEjh>
    2b1c:	41 e0       	ldi	r20, 0x01	; 1
    2b1e:	6d 2f       	mov	r22, r29
    2b20:	8c ee       	ldi	r24, 0xEC	; 236
    2b22:	93 e0       	ldi	r25, 0x03	; 3
    2b24:	0e 94 96 1c 	call	0x392c	; 0x392c <_ZN10W5100Class9execCmdSnEh7SockCMD>
    2b28:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2b2c:	88 23       	and	r24, r24
    2b2e:	91 f0       	breq	.+36     	; 0x2b54 <_Z6sockethhjh+0xec>
    2b30:	9f b7       	in	r25, 0x3f	; 63
    2b32:	f8 94       	cli
    2b34:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2b38:	81 30       	cpi	r24, 0x01	; 1
    2b3a:	29 f4       	brne	.+10     	; 0x2b46 <_Z6sockethhjh+0xde>
    2b3c:	20 91 08 04 	lds	r18, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2b40:	2d bb       	out	0x1d, r18	; 29
    2b42:	9f bf       	out	0x3f, r25	; 63
    2b44:	08 c0       	rjmp	.+16     	; 0x2b56 <_Z6sockethhjh+0xee>
    2b46:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2b4a:	8f bf       	out	0x3f, r24	; 63
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	03 c0       	rjmp	.+6      	; 0x2b56 <_Z6sockethhjh+0xee>
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	01 c0       	rjmp	.+2      	; 0x2b56 <_Z6sockethhjh+0xee>
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	df 91       	pop	r29
    2b58:	cf 91       	pop	r28
    2b5a:	1f 91       	pop	r17
    2b5c:	0f 91       	pop	r16
    2b5e:	ff 90       	pop	r15
    2b60:	ef 90       	pop	r14
    2b62:	df 90       	pop	r13
    2b64:	08 95       	ret

00002b66 <_Z6listenh>:
    2b66:	cf 93       	push	r28
    2b68:	c8 2f       	mov	r28, r24
    2b6a:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2b6e:	88 23       	and	r24, r24
    2b70:	99 f0       	breq	.+38     	; 0x2b98 <_Z6listenh+0x32>
    2b72:	9f b7       	in	r25, 0x3f	; 63
    2b74:	f8 94       	cli
    2b76:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2b7a:	81 30       	cpi	r24, 0x01	; 1
    2b7c:	59 f4       	brne	.+22     	; 0x2b94 <_Z6listenh+0x2e>
    2b7e:	8d b3       	in	r24, 0x1d	; 29
    2b80:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2b84:	2d b3       	in	r18, 0x1d	; 29
    2b86:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <_ZN8SPIClass13interruptMaskE>
    2b8a:	80 95       	com	r24
    2b8c:	82 23       	and	r24, r18
    2b8e:	8d bb       	out	0x1d, r24	; 29
    2b90:	9f bf       	out	0x3f, r25	; 63
    2b92:	02 c0       	rjmp	.+4      	; 0x2b98 <_Z6listenh+0x32>
    2b94:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2b98:	80 e5       	ldi	r24, 0x50	; 80
    2b9a:	8c bd       	out	0x2c, r24	; 44
    2b9c:	1d bc       	out	0x2d, r1	; 45
    2b9e:	8c 2f       	mov	r24, r28
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	98 2f       	mov	r25, r24
    2ba4:	88 27       	eor	r24, r24
    2ba6:	8d 5f       	subi	r24, 0xFD	; 253
    2ba8:	9b 4f       	sbci	r25, 0xFB	; 251
    2baa:	0e 94 bb 1a 	call	0x3576	; 0x3576 <_ZN10W5100Class4readEj>
    2bae:	83 31       	cpi	r24, 0x13	; 19
    2bb0:	a9 f0       	breq	.+42     	; 0x2bdc <_Z6listenh+0x76>
    2bb2:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2bb6:	88 23       	and	r24, r24
    2bb8:	61 f1       	breq	.+88     	; 0x2c12 <_Z6listenh+0xac>
    2bba:	9f b7       	in	r25, 0x3f	; 63
    2bbc:	f8 94       	cli
    2bbe:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2bc2:	81 30       	cpi	r24, 0x01	; 1
    2bc4:	31 f4       	brne	.+12     	; 0x2bd2 <_Z6listenh+0x6c>
    2bc6:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2bca:	8d bb       	out	0x1d, r24	; 29
    2bcc:	9f bf       	out	0x3f, r25	; 63
    2bce:	80 e0       	ldi	r24, 0x00	; 0
    2bd0:	20 c0       	rjmp	.+64     	; 0x2c12 <_Z6listenh+0xac>
    2bd2:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2bd6:	8f bf       	out	0x3f, r24	; 63
    2bd8:	80 e0       	ldi	r24, 0x00	; 0
    2bda:	1b c0       	rjmp	.+54     	; 0x2c12 <_Z6listenh+0xac>
    2bdc:	42 e0       	ldi	r20, 0x02	; 2
    2bde:	6c 2f       	mov	r22, r28
    2be0:	8c ee       	ldi	r24, 0xEC	; 236
    2be2:	93 e0       	ldi	r25, 0x03	; 3
    2be4:	0e 94 96 1c 	call	0x392c	; 0x392c <_ZN10W5100Class9execCmdSnEh7SockCMD>
    2be8:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2bec:	88 23       	and	r24, r24
    2bee:	81 f0       	breq	.+32     	; 0x2c10 <_Z6listenh+0xaa>
    2bf0:	9f b7       	in	r25, 0x3f	; 63
    2bf2:	f8 94       	cli
    2bf4:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2bf8:	81 30       	cpi	r24, 0x01	; 1
    2bfa:	29 f4       	brne	.+10     	; 0x2c06 <_Z6listenh+0xa0>
    2bfc:	20 91 08 04 	lds	r18, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2c00:	2d bb       	out	0x1d, r18	; 29
    2c02:	9f bf       	out	0x3f, r25	; 63
    2c04:	06 c0       	rjmp	.+12     	; 0x2c12 <_Z6listenh+0xac>
    2c06:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2c0a:	8f bf       	out	0x3f, r24	; 63
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	01 c0       	rjmp	.+2      	; 0x2c12 <_Z6listenh+0xac>
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	cf 91       	pop	r28
    2c14:	08 95       	ret

00002c16 <_Z7connecthPhj>:
    2c16:	ff 92       	push	r15
    2c18:	0f 93       	push	r16
    2c1a:	1f 93       	push	r17
    2c1c:	cf 93       	push	r28
    2c1e:	df 93       	push	r29
    2c20:	fb 01       	movw	r30, r22
    2c22:	90 81       	ld	r25, Z
    2c24:	9f 3f       	cpi	r25, 0xFF	; 255
    2c26:	51 f4       	brne	.+20     	; 0x2c3c <_Z7connecthPhj+0x26>
    2c28:	91 81       	ldd	r25, Z+1	; 0x01
    2c2a:	9f 3f       	cpi	r25, 0xFF	; 255
    2c2c:	99 f4       	brne	.+38     	; 0x2c54 <_Z7connecthPhj+0x3e>
    2c2e:	92 81       	ldd	r25, Z+2	; 0x02
    2c30:	9f 3f       	cpi	r25, 0xFF	; 255
    2c32:	81 f4       	brne	.+32     	; 0x2c54 <_Z7connecthPhj+0x3e>
    2c34:	93 81       	ldd	r25, Z+3	; 0x03
    2c36:	9f 3f       	cpi	r25, 0xFF	; 255
    2c38:	69 f4       	brne	.+26     	; 0x2c54 <_Z7connecthPhj+0x3e>
    2c3a:	5d c0       	rjmp	.+186    	; 0x2cf6 <_Z7connecthPhj+0xe0>
    2c3c:	91 11       	cpse	r25, r1
    2c3e:	0a c0       	rjmp	.+20     	; 0x2c54 <_Z7connecthPhj+0x3e>
    2c40:	91 81       	ldd	r25, Z+1	; 0x01
    2c42:	91 11       	cpse	r25, r1
    2c44:	07 c0       	rjmp	.+14     	; 0x2c54 <_Z7connecthPhj+0x3e>
    2c46:	92 81       	ldd	r25, Z+2	; 0x02
    2c48:	91 11       	cpse	r25, r1
    2c4a:	04 c0       	rjmp	.+8      	; 0x2c54 <_Z7connecthPhj+0x3e>
    2c4c:	93 81       	ldd	r25, Z+3	; 0x03
    2c4e:	99 23       	and	r25, r25
    2c50:	09 f4       	brne	.+2      	; 0x2c54 <_Z7connecthPhj+0x3e>
    2c52:	56 c0       	rjmp	.+172    	; 0x2d00 <_Z7connecthPhj+0xea>
    2c54:	41 15       	cp	r20, r1
    2c56:	51 05       	cpc	r21, r1
    2c58:	09 f4       	brne	.+2      	; 0x2c5c <_Z7connecthPhj+0x46>
    2c5a:	4f c0       	rjmp	.+158    	; 0x2cfa <_Z7connecthPhj+0xe4>
    2c5c:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2c60:	99 23       	and	r25, r25
    2c62:	99 f0       	breq	.+38     	; 0x2c8a <_Z7connecthPhj+0x74>
    2c64:	2f b7       	in	r18, 0x3f	; 63
    2c66:	f8 94       	cli
    2c68:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2c6c:	91 30       	cpi	r25, 0x01	; 1
    2c6e:	59 f4       	brne	.+22     	; 0x2c86 <_Z7connecthPhj+0x70>
    2c70:	9d b3       	in	r25, 0x1d	; 29
    2c72:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2c76:	3d b3       	in	r19, 0x1d	; 29
    2c78:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <_ZN8SPIClass13interruptMaskE>
    2c7c:	90 95       	com	r25
    2c7e:	93 23       	and	r25, r19
    2c80:	9d bb       	out	0x1d, r25	; 29
    2c82:	2f bf       	out	0x3f, r18	; 63
    2c84:	02 c0       	rjmp	.+4      	; 0x2c8a <_Z7connecthPhj+0x74>
    2c86:	20 93 08 04 	sts	0x0408, r18	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2c8a:	ea 01       	movw	r28, r20
    2c8c:	bf 01       	movw	r22, r30
    2c8e:	f8 2e       	mov	r15, r24
    2c90:	80 e5       	ldi	r24, 0x50	; 80
    2c92:	8c bd       	out	0x2c, r24	; 44
    2c94:	1d bc       	out	0x2d, r1	; 45
    2c96:	0f 2d       	mov	r16, r15
    2c98:	10 e0       	ldi	r17, 0x00	; 0
    2c9a:	0c 5f       	subi	r16, 0xFC	; 252
    2c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c9e:	10 2f       	mov	r17, r16
    2ca0:	00 27       	eor	r16, r16
    2ca2:	44 e0       	ldi	r20, 0x04	; 4
    2ca4:	50 e0       	ldi	r21, 0x00	; 0
    2ca6:	c8 01       	movw	r24, r16
    2ca8:	0c 96       	adiw	r24, 0x0c	; 12
    2caa:	0e 94 91 1a 	call	0x3522	; 0x3522 <_ZN10W5100Class5writeEjPKhj>
    2cae:	6d 2f       	mov	r22, r29
    2cb0:	c8 01       	movw	r24, r16
    2cb2:	40 96       	adiw	r24, 0x10	; 16
    2cb4:	0e 94 0a 1a 	call	0x3414	; 0x3414 <_ZN10W5100Class5writeEjh>
    2cb8:	6c 2f       	mov	r22, r28
    2cba:	c8 01       	movw	r24, r16
    2cbc:	41 96       	adiw	r24, 0x11	; 17
    2cbe:	0e 94 0a 1a 	call	0x3414	; 0x3414 <_ZN10W5100Class5writeEjh>
    2cc2:	44 e0       	ldi	r20, 0x04	; 4
    2cc4:	6f 2d       	mov	r22, r15
    2cc6:	8c ee       	ldi	r24, 0xEC	; 236
    2cc8:	93 e0       	ldi	r25, 0x03	; 3
    2cca:	0e 94 96 1c 	call	0x392c	; 0x392c <_ZN10W5100Class9execCmdSnEh7SockCMD>
    2cce:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2cd2:	88 23       	and	r24, r24
    2cd4:	a1 f0       	breq	.+40     	; 0x2cfe <_Z7connecthPhj+0xe8>
    2cd6:	8f b7       	in	r24, 0x3f	; 63
    2cd8:	f8 94       	cli
    2cda:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2cde:	91 30       	cpi	r25, 0x01	; 1
    2ce0:	29 f4       	brne	.+10     	; 0x2cec <_Z7connecthPhj+0xd6>
    2ce2:	20 91 08 04 	lds	r18, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2ce6:	2d bb       	out	0x1d, r18	; 29
    2ce8:	8f bf       	out	0x3f, r24	; 63
    2cea:	0a c0       	rjmp	.+20     	; 0x2d00 <_Z7connecthPhj+0xea>
    2cec:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2cf0:	8f bf       	out	0x3f, r24	; 63
    2cf2:	91 e0       	ldi	r25, 0x01	; 1
    2cf4:	05 c0       	rjmp	.+10     	; 0x2d00 <_Z7connecthPhj+0xea>
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	03 c0       	rjmp	.+6      	; 0x2d00 <_Z7connecthPhj+0xea>
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	01 c0       	rjmp	.+2      	; 0x2d00 <_Z7connecthPhj+0xea>
    2cfe:	91 e0       	ldi	r25, 0x01	; 1
    2d00:	89 2f       	mov	r24, r25
    2d02:	df 91       	pop	r29
    2d04:	cf 91       	pop	r28
    2d06:	1f 91       	pop	r17
    2d08:	0f 91       	pop	r16
    2d0a:	ff 90       	pop	r15
    2d0c:	08 95       	ret

00002d0e <_Z10disconnecth>:
    2d0e:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2d12:	99 23       	and	r25, r25
    2d14:	99 f0       	breq	.+38     	; 0x2d3c <_Z10disconnecth+0x2e>
    2d16:	2f b7       	in	r18, 0x3f	; 63
    2d18:	f8 94       	cli
    2d1a:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2d1e:	91 30       	cpi	r25, 0x01	; 1
    2d20:	59 f4       	brne	.+22     	; 0x2d38 <_Z10disconnecth+0x2a>
    2d22:	9d b3       	in	r25, 0x1d	; 29
    2d24:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2d28:	3d b3       	in	r19, 0x1d	; 29
    2d2a:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <_ZN8SPIClass13interruptMaskE>
    2d2e:	90 95       	com	r25
    2d30:	93 23       	and	r25, r19
    2d32:	9d bb       	out	0x1d, r25	; 29
    2d34:	2f bf       	out	0x3f, r18	; 63
    2d36:	02 c0       	rjmp	.+4      	; 0x2d3c <_Z10disconnecth+0x2e>
    2d38:	20 93 08 04 	sts	0x0408, r18	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2d3c:	90 e5       	ldi	r25, 0x50	; 80
    2d3e:	9c bd       	out	0x2c, r25	; 44
    2d40:	1d bc       	out	0x2d, r1	; 45
    2d42:	48 e0       	ldi	r20, 0x08	; 8
    2d44:	68 2f       	mov	r22, r24
    2d46:	8c ee       	ldi	r24, 0xEC	; 236
    2d48:	93 e0       	ldi	r25, 0x03	; 3
    2d4a:	0e 94 96 1c 	call	0x392c	; 0x392c <_ZN10W5100Class9execCmdSnEh7SockCMD>
    2d4e:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2d52:	88 23       	and	r24, r24
    2d54:	71 f0       	breq	.+28     	; 0x2d72 <_Z10disconnecth+0x64>
    2d56:	9f b7       	in	r25, 0x3f	; 63
    2d58:	f8 94       	cli
    2d5a:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2d5e:	81 30       	cpi	r24, 0x01	; 1
    2d60:	29 f4       	brne	.+10     	; 0x2d6c <_Z10disconnecth+0x5e>
    2d62:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2d66:	8d bb       	out	0x1d, r24	; 29
    2d68:	9f bf       	out	0x3f, r25	; 63
    2d6a:	08 95       	ret
    2d6c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2d70:	8f bf       	out	0x3f, r24	; 63
    2d72:	08 95       	ret

00002d74 <_Z4sendhPKhj>:
    2d74:	8f 92       	push	r8
    2d76:	9f 92       	push	r9
    2d78:	af 92       	push	r10
    2d7a:	bf 92       	push	r11
    2d7c:	cf 92       	push	r12
    2d7e:	df 92       	push	r13
    2d80:	ef 92       	push	r14
    2d82:	ff 92       	push	r15
    2d84:	0f 93       	push	r16
    2d86:	1f 93       	push	r17
    2d88:	cf 93       	push	r28
    2d8a:	df 93       	push	r29
    2d8c:	98 2e       	mov	r9, r24
    2d8e:	5b 01       	movw	r10, r22
    2d90:	6a 01       	movw	r12, r20
    2d92:	41 30       	cpi	r20, 0x01	; 1
    2d94:	58 40       	sbci	r21, 0x08	; 8
    2d96:	20 f0       	brcs	.+8      	; 0x2da0 <_Z4sendhPKhj+0x2c>
    2d98:	c1 2c       	mov	r12, r1
    2d9a:	68 94       	set
    2d9c:	dd 24       	eor	r13, r13
    2d9e:	d3 f8       	bld	r13, 3
    2da0:	c9 2d       	mov	r28, r9
    2da2:	d0 e0       	ldi	r29, 0x00	; 0
    2da4:	24 96       	adiw	r28, 0x04	; 4
    2da6:	dc 2f       	mov	r29, r28
    2da8:	cc 27       	eor	r28, r28
    2daa:	8e 01       	movw	r16, r28
    2dac:	0d 5f       	subi	r16, 0xFD	; 253
    2dae:	1f 4f       	sbci	r17, 0xFF	; 255
    2db0:	0f 2e       	mov	r0, r31
    2db2:	f0 e5       	ldi	r31, 0x50	; 80
    2db4:	8f 2e       	mov	r8, r31
    2db6:	f0 2d       	mov	r31, r0
    2db8:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2dbc:	88 23       	and	r24, r24
    2dbe:	99 f0       	breq	.+38     	; 0x2de6 <_Z4sendhPKhj+0x72>
    2dc0:	9f b7       	in	r25, 0x3f	; 63
    2dc2:	f8 94       	cli
    2dc4:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2dc8:	81 30       	cpi	r24, 0x01	; 1
    2dca:	59 f4       	brne	.+22     	; 0x2de2 <_Z4sendhPKhj+0x6e>
    2dcc:	8d b3       	in	r24, 0x1d	; 29
    2dce:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2dd2:	2d b3       	in	r18, 0x1d	; 29
    2dd4:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <_ZN8SPIClass13interruptMaskE>
    2dd8:	80 95       	com	r24
    2dda:	82 23       	and	r24, r18
    2ddc:	8d bb       	out	0x1d, r24	; 29
    2dde:	9f bf       	out	0x3f, r25	; 63
    2de0:	02 c0       	rjmp	.+4      	; 0x2de6 <_Z4sendhPKhj+0x72>
    2de2:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2de6:	8c bc       	out	0x2c, r8	; 44
    2de8:	1d bc       	out	0x2d, r1	; 45
    2dea:	69 2d       	mov	r22, r9
    2dec:	8c ee       	ldi	r24, 0xEC	; 236
    2dee:	93 e0       	ldi	r25, 0x03	; 3
    2df0:	0e 94 93 1b 	call	0x3726	; 0x3726 <_ZN10W5100Class13getTXFreeSizeEh>
    2df4:	7c 01       	movw	r14, r24
    2df6:	c8 01       	movw	r24, r16
    2df8:	0e 94 bb 1a 	call	0x3576	; 0x3576 <_ZN10W5100Class4readEj>
    2dfc:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2e00:	99 23       	and	r25, r25
    2e02:	71 f0       	breq	.+28     	; 0x2e20 <_Z4sendhPKhj+0xac>
    2e04:	2f b7       	in	r18, 0x3f	; 63
    2e06:	f8 94       	cli
    2e08:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2e0c:	91 30       	cpi	r25, 0x01	; 1
    2e0e:	29 f4       	brne	.+10     	; 0x2e1a <_Z4sendhPKhj+0xa6>
    2e10:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2e14:	9d bb       	out	0x1d, r25	; 29
    2e16:	2f bf       	out	0x3f, r18	; 63
    2e18:	03 c0       	rjmp	.+6      	; 0x2e20 <_Z4sendhPKhj+0xac>
    2e1a:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2e1e:	9f bf       	out	0x3f, r25	; 63
    2e20:	87 31       	cpi	r24, 0x17	; 23
    2e22:	11 f0       	breq	.+4      	; 0x2e28 <_Z4sendhPKhj+0xb4>
    2e24:	8c 31       	cpi	r24, 0x1C	; 28
    2e26:	31 f4       	brne	.+12     	; 0x2e34 <_Z4sendhPKhj+0xc0>
    2e28:	0e 94 b2 0c 	call	0x1964	; 0x1964 <yield>
    2e2c:	ec 14       	cp	r14, r12
    2e2e:	fd 04       	cpc	r15, r13
    2e30:	18 f2       	brcs	.-122    	; 0x2db8 <_Z4sendhPKhj+0x44>
    2e32:	02 c0       	rjmp	.+4      	; 0x2e38 <_Z4sendhPKhj+0xc4>
    2e34:	c1 2c       	mov	r12, r1
    2e36:	d1 2c       	mov	r13, r1
    2e38:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2e3c:	88 23       	and	r24, r24
    2e3e:	99 f0       	breq	.+38     	; 0x2e66 <_Z4sendhPKhj+0xf2>
    2e40:	8f b7       	in	r24, 0x3f	; 63
    2e42:	f8 94       	cli
    2e44:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2e48:	91 30       	cpi	r25, 0x01	; 1
    2e4a:	59 f4       	brne	.+22     	; 0x2e62 <_Z4sendhPKhj+0xee>
    2e4c:	9d b3       	in	r25, 0x1d	; 29
    2e4e:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2e52:	2d b3       	in	r18, 0x1d	; 29
    2e54:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <_ZN8SPIClass13interruptMaskE>
    2e58:	90 95       	com	r25
    2e5a:	92 23       	and	r25, r18
    2e5c:	9d bb       	out	0x1d, r25	; 29
    2e5e:	8f bf       	out	0x3f, r24	; 63
    2e60:	02 c0       	rjmp	.+4      	; 0x2e66 <_Z4sendhPKhj+0xf2>
    2e62:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2e66:	80 e5       	ldi	r24, 0x50	; 80
    2e68:	8c bd       	out	0x2c, r24	; 44
    2e6a:	1d bc       	out	0x2d, r1	; 45
    2e6c:	96 01       	movw	r18, r12
    2e6e:	a5 01       	movw	r20, r10
    2e70:	69 2d       	mov	r22, r9
    2e72:	8c ee       	ldi	r24, 0xEC	; 236
    2e74:	93 e0       	ldi	r25, 0x03	; 3
    2e76:	0e 94 4b 1b 	call	0x3696	; 0x3696 <_ZN10W5100Class20send_data_processingEhPKhj>
    2e7a:	40 e2       	ldi	r20, 0x20	; 32
    2e7c:	69 2d       	mov	r22, r9
    2e7e:	8c ee       	ldi	r24, 0xEC	; 236
    2e80:	93 e0       	ldi	r25, 0x03	; 3
    2e82:	0e 94 96 1c 	call	0x392c	; 0x392c <_ZN10W5100Class9execCmdSnEh7SockCMD>
    2e86:	22 96       	adiw	r28, 0x02	; 2
    2e88:	0f 2e       	mov	r0, r31
    2e8a:	f0 e5       	ldi	r31, 0x50	; 80
    2e8c:	bf 2e       	mov	r11, r31
    2e8e:	f0 2d       	mov	r31, r0
    2e90:	ce 01       	movw	r24, r28
    2e92:	0e 94 bb 1a 	call	0x3576	; 0x3576 <_ZN10W5100Class4readEj>
    2e96:	84 fd       	sbrc	r24, 4
    2e98:	4b c0       	rjmp	.+150    	; 0x2f30 <_Z4sendhPKhj+0x1bc>
    2e9a:	c8 01       	movw	r24, r16
    2e9c:	0e 94 bb 1a 	call	0x3576	; 0x3576 <_ZN10W5100Class4readEj>
    2ea0:	81 11       	cpse	r24, r1
    2ea2:	18 c0       	rjmp	.+48     	; 0x2ed4 <_Z4sendhPKhj+0x160>
    2ea4:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2ea8:	88 23       	and	r24, r24
    2eaa:	71 f0       	breq	.+28     	; 0x2ec8 <_Z4sendhPKhj+0x154>
    2eac:	9f b7       	in	r25, 0x3f	; 63
    2eae:	f8 94       	cli
    2eb0:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2eb4:	81 30       	cpi	r24, 0x01	; 1
    2eb6:	29 f4       	brne	.+10     	; 0x2ec2 <_Z4sendhPKhj+0x14e>
    2eb8:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2ebc:	8d bb       	out	0x1d, r24	; 29
    2ebe:	9f bf       	out	0x3f, r25	; 63
    2ec0:	03 c0       	rjmp	.+6      	; 0x2ec8 <_Z4sendhPKhj+0x154>
    2ec2:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2ec6:	8f bf       	out	0x3f, r24	; 63
    2ec8:	89 2d       	mov	r24, r9
    2eca:	0e 94 f5 14 	call	0x29ea	; 0x29ea <_Z5closeh>
    2ece:	80 e0       	ldi	r24, 0x00	; 0
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	4c c0       	rjmp	.+152    	; 0x2f6c <_Z4sendhPKhj+0x1f8>
    2ed4:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2ed8:	88 23       	and	r24, r24
    2eda:	71 f0       	breq	.+28     	; 0x2ef8 <_Z4sendhPKhj+0x184>
    2edc:	9f b7       	in	r25, 0x3f	; 63
    2ede:	f8 94       	cli
    2ee0:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2ee4:	81 30       	cpi	r24, 0x01	; 1
    2ee6:	29 f4       	brne	.+10     	; 0x2ef2 <_Z4sendhPKhj+0x17e>
    2ee8:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2eec:	8d bb       	out	0x1d, r24	; 29
    2eee:	9f bf       	out	0x3f, r25	; 63
    2ef0:	03 c0       	rjmp	.+6      	; 0x2ef8 <_Z4sendhPKhj+0x184>
    2ef2:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2ef6:	8f bf       	out	0x3f, r24	; 63
    2ef8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <yield>
    2efc:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2f00:	88 23       	and	r24, r24
    2f02:	99 f0       	breq	.+38     	; 0x2f2a <_Z4sendhPKhj+0x1b6>
    2f04:	9f b7       	in	r25, 0x3f	; 63
    2f06:	f8 94       	cli
    2f08:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2f0c:	81 30       	cpi	r24, 0x01	; 1
    2f0e:	59 f4       	brne	.+22     	; 0x2f26 <_Z4sendhPKhj+0x1b2>
    2f10:	8d b3       	in	r24, 0x1d	; 29
    2f12:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2f16:	2d b3       	in	r18, 0x1d	; 29
    2f18:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <_ZN8SPIClass13interruptMaskE>
    2f1c:	80 95       	com	r24
    2f1e:	82 23       	and	r24, r18
    2f20:	8d bb       	out	0x1d, r24	; 29
    2f22:	9f bf       	out	0x3f, r25	; 63
    2f24:	02 c0       	rjmp	.+4      	; 0x2f2a <_Z4sendhPKhj+0x1b6>
    2f26:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2f2a:	bc bc       	out	0x2c, r11	; 44
    2f2c:	1d bc       	out	0x2d, r1	; 45
    2f2e:	b0 cf       	rjmp	.-160    	; 0x2e90 <_Z4sendhPKhj+0x11c>
    2f30:	60 e1       	ldi	r22, 0x10	; 16
    2f32:	8c 2f       	mov	r24, r28
    2f34:	9d 2f       	mov	r25, r29
    2f36:	0e 94 0a 1a 	call	0x3414	; 0x3414 <_ZN10W5100Class5writeEjh>
    2f3a:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2f3e:	88 23       	and	r24, r24
    2f40:	99 f0       	breq	.+38     	; 0x2f68 <_Z4sendhPKhj+0x1f4>
    2f42:	9f b7       	in	r25, 0x3f	; 63
    2f44:	f8 94       	cli
    2f46:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2f4a:	81 30       	cpi	r24, 0x01	; 1
    2f4c:	39 f4       	brne	.+14     	; 0x2f5c <_Z4sendhPKhj+0x1e8>
    2f4e:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2f52:	8d bb       	out	0x1d, r24	; 29
    2f54:	9f bf       	out	0x3f, r25	; 63
    2f56:	8c 2d       	mov	r24, r12
    2f58:	9d 2d       	mov	r25, r13
    2f5a:	08 c0       	rjmp	.+16     	; 0x2f6c <_Z4sendhPKhj+0x1f8>
    2f5c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2f60:	8f bf       	out	0x3f, r24	; 63
    2f62:	8c 2d       	mov	r24, r12
    2f64:	9d 2d       	mov	r25, r13
    2f66:	02 c0       	rjmp	.+4      	; 0x2f6c <_Z4sendhPKhj+0x1f8>
    2f68:	8c 2d       	mov	r24, r12
    2f6a:	9d 2d       	mov	r25, r13
    2f6c:	df 91       	pop	r29
    2f6e:	cf 91       	pop	r28
    2f70:	1f 91       	pop	r17
    2f72:	0f 91       	pop	r16
    2f74:	ff 90       	pop	r15
    2f76:	ef 90       	pop	r14
    2f78:	df 90       	pop	r13
    2f7a:	cf 90       	pop	r12
    2f7c:	bf 90       	pop	r11
    2f7e:	af 90       	pop	r10
    2f80:	9f 90       	pop	r9
    2f82:	8f 90       	pop	r8
    2f84:	08 95       	ret

00002f86 <_Z4recvhPhi>:
    2f86:	cf 92       	push	r12
    2f88:	df 92       	push	r13
    2f8a:	ef 92       	push	r14
    2f8c:	ff 92       	push	r15
    2f8e:	0f 93       	push	r16
    2f90:	1f 93       	push	r17
    2f92:	cf 93       	push	r28
    2f94:	df 93       	push	r29
    2f96:	18 2f       	mov	r17, r24
    2f98:	6b 01       	movw	r12, r22
    2f9a:	7a 01       	movw	r14, r20
    2f9c:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2fa0:	88 23       	and	r24, r24
    2fa2:	99 f0       	breq	.+38     	; 0x2fca <_Z4recvhPhi+0x44>
    2fa4:	9f b7       	in	r25, 0x3f	; 63
    2fa6:	f8 94       	cli
    2fa8:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    2fac:	81 30       	cpi	r24, 0x01	; 1
    2fae:	59 f4       	brne	.+22     	; 0x2fc6 <_Z4recvhPhi+0x40>
    2fb0:	8d b3       	in	r24, 0x1d	; 29
    2fb2:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2fb6:	2d b3       	in	r18, 0x1d	; 29
    2fb8:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <_ZN8SPIClass13interruptMaskE>
    2fbc:	80 95       	com	r24
    2fbe:	82 23       	and	r24, r18
    2fc0:	8d bb       	out	0x1d, r24	; 29
    2fc2:	9f bf       	out	0x3f, r25	; 63
    2fc4:	02 c0       	rjmp	.+4      	; 0x2fca <_Z4recvhPhi+0x44>
    2fc6:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    2fca:	80 e5       	ldi	r24, 0x50	; 80
    2fcc:	8c bd       	out	0x2c, r24	; 44
    2fce:	1d bc       	out	0x2d, r1	; 45
    2fd0:	61 2f       	mov	r22, r17
    2fd2:	8c ee       	ldi	r24, 0xEC	; 236
    2fd4:	93 e0       	ldi	r25, 0x03	; 3
    2fd6:	0e 94 56 1b 	call	0x36ac	; 0x36ac <_ZN10W5100Class17getRXReceivedSizeEh>
    2fda:	ec 01       	movw	r28, r24
    2fdc:	00 97       	sbiw	r24, 0x00	; 0
    2fde:	b1 f4       	brne	.+44     	; 0x300c <_Z4recvhPhi+0x86>
    2fe0:	81 2f       	mov	r24, r17
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	98 2f       	mov	r25, r24
    2fe6:	88 27       	eor	r24, r24
    2fe8:	8d 5f       	subi	r24, 0xFD	; 253
    2fea:	9b 4f       	sbci	r25, 0xFB	; 251
    2fec:	0e 94 bb 1a 	call	0x3576	; 0x3576 <_ZN10W5100Class4readEj>
    2ff0:	84 31       	cpi	r24, 0x14	; 20
    2ff2:	09 f1       	breq	.+66     	; 0x3036 <_Z4recvhPhi+0xb0>
    2ff4:	88 23       	and	r24, r24
    2ff6:	f9 f0       	breq	.+62     	; 0x3036 <_Z4recvhPhi+0xb0>
    2ff8:	c1 e0       	ldi	r28, 0x01	; 1
    2ffa:	d0 e0       	ldi	r29, 0x00	; 0
    2ffc:	8c 31       	cpi	r24, 0x1C	; 28
    2ffe:	11 f4       	brne	.+4      	; 0x3004 <_Z4recvhPhi+0x7e>
    3000:	c0 e0       	ldi	r28, 0x00	; 0
    3002:	d0 e0       	ldi	r29, 0x00	; 0
    3004:	d1 95       	neg	r29
    3006:	c1 95       	neg	r28
    3008:	d1 09       	sbc	r29, r1
    300a:	04 c0       	rjmp	.+8      	; 0x3014 <_Z4recvhPhi+0x8e>
    300c:	e8 16       	cp	r14, r24
    300e:	f9 06       	cpc	r15, r25
    3010:	0c f4       	brge	.+2      	; 0x3014 <_Z4recvhPhi+0x8e>
    3012:	e7 01       	movw	r28, r14
    3014:	1c 16       	cp	r1, r28
    3016:	1d 06       	cpc	r1, r29
    3018:	74 f4       	brge	.+28     	; 0x3036 <_Z4recvhPhi+0xb0>
    301a:	00 e0       	ldi	r16, 0x00	; 0
    301c:	9e 01       	movw	r18, r28
    301e:	a6 01       	movw	r20, r12
    3020:	61 2f       	mov	r22, r17
    3022:	8c ee       	ldi	r24, 0xEC	; 236
    3024:	93 e0       	ldi	r25, 0x03	; 3
    3026:	0e 94 44 1c 	call	0x3888	; 0x3888 <_ZN10W5100Class20recv_data_processingEhPhjh>
    302a:	40 e4       	ldi	r20, 0x40	; 64
    302c:	61 2f       	mov	r22, r17
    302e:	8c ee       	ldi	r24, 0xEC	; 236
    3030:	93 e0       	ldi	r25, 0x03	; 3
    3032:	0e 94 96 1c 	call	0x392c	; 0x392c <_ZN10W5100Class9execCmdSnEh7SockCMD>
    3036:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    303a:	88 23       	and	r24, r24
    303c:	71 f0       	breq	.+28     	; 0x305a <_Z4recvhPhi+0xd4>
    303e:	9f b7       	in	r25, 0x3f	; 63
    3040:	f8 94       	cli
    3042:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    3046:	81 30       	cpi	r24, 0x01	; 1
    3048:	29 f4       	brne	.+10     	; 0x3054 <_Z4recvhPhi+0xce>
    304a:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    304e:	8d bb       	out	0x1d, r24	; 29
    3050:	9f bf       	out	0x3f, r25	; 63
    3052:	03 c0       	rjmp	.+6      	; 0x305a <_Z4recvhPhi+0xd4>
    3054:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    3058:	8f bf       	out	0x3f, r24	; 63
    305a:	ce 01       	movw	r24, r28
    305c:	df 91       	pop	r29
    305e:	cf 91       	pop	r28
    3060:	1f 91       	pop	r17
    3062:	0f 91       	pop	r16
    3064:	ff 90       	pop	r15
    3066:	ef 90       	pop	r14
    3068:	df 90       	pop	r13
    306a:	cf 90       	pop	r12
    306c:	08 95       	ret

0000306e <_Z13recvAvailableh>:
    306e:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    3072:	99 23       	and	r25, r25
    3074:	99 f0       	breq	.+38     	; 0x309c <_Z13recvAvailableh+0x2e>
    3076:	2f b7       	in	r18, 0x3f	; 63
    3078:	f8 94       	cli
    307a:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    307e:	91 30       	cpi	r25, 0x01	; 1
    3080:	59 f4       	brne	.+22     	; 0x3098 <_Z13recvAvailableh+0x2a>
    3082:	9d b3       	in	r25, 0x1d	; 29
    3084:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    3088:	3d b3       	in	r19, 0x1d	; 29
    308a:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <_ZN8SPIClass13interruptMaskE>
    308e:	90 95       	com	r25
    3090:	93 23       	and	r25, r19
    3092:	9d bb       	out	0x1d, r25	; 29
    3094:	2f bf       	out	0x3f, r18	; 63
    3096:	02 c0       	rjmp	.+4      	; 0x309c <_Z13recvAvailableh+0x2e>
    3098:	20 93 08 04 	sts	0x0408, r18	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    309c:	90 e5       	ldi	r25, 0x50	; 80
    309e:	9c bd       	out	0x2c, r25	; 44
    30a0:	1d bc       	out	0x2d, r1	; 45
    30a2:	68 2f       	mov	r22, r24
    30a4:	8c ee       	ldi	r24, 0xEC	; 236
    30a6:	93 e0       	ldi	r25, 0x03	; 3
    30a8:	0e 94 56 1b 	call	0x36ac	; 0x36ac <_ZN10W5100Class17getRXReceivedSizeEh>
    30ac:	20 91 0a 04 	lds	r18, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    30b0:	22 23       	and	r18, r18
    30b2:	71 f0       	breq	.+28     	; 0x30d0 <_Z13recvAvailableh+0x62>
    30b4:	3f b7       	in	r19, 0x3f	; 63
    30b6:	f8 94       	cli
    30b8:	20 91 0a 04 	lds	r18, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    30bc:	21 30       	cpi	r18, 0x01	; 1
    30be:	29 f4       	brne	.+10     	; 0x30ca <_Z13recvAvailableh+0x5c>
    30c0:	20 91 08 04 	lds	r18, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    30c4:	2d bb       	out	0x1d, r18	; 29
    30c6:	3f bf       	out	0x3f, r19	; 63
    30c8:	08 95       	ret
    30ca:	20 91 08 04 	lds	r18, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    30ce:	2f bf       	out	0x3f, r18	; 63
    30d0:	08 95       	ret

000030d2 <_Z4peekhPh>:
    30d2:	0f 93       	push	r16
    30d4:	ab 01       	movw	r20, r22
    30d6:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    30da:	99 23       	and	r25, r25
    30dc:	99 f0       	breq	.+38     	; 0x3104 <_Z4peekhPh+0x32>
    30de:	2f b7       	in	r18, 0x3f	; 63
    30e0:	f8 94       	cli
    30e2:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    30e6:	91 30       	cpi	r25, 0x01	; 1
    30e8:	59 f4       	brne	.+22     	; 0x3100 <_Z4peekhPh+0x2e>
    30ea:	9d b3       	in	r25, 0x1d	; 29
    30ec:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    30f0:	3d b3       	in	r19, 0x1d	; 29
    30f2:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <_ZN8SPIClass13interruptMaskE>
    30f6:	90 95       	com	r25
    30f8:	93 23       	and	r25, r19
    30fa:	9d bb       	out	0x1d, r25	; 29
    30fc:	2f bf       	out	0x3f, r18	; 63
    30fe:	02 c0       	rjmp	.+4      	; 0x3104 <_Z4peekhPh+0x32>
    3100:	20 93 08 04 	sts	0x0408, r18	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    3104:	90 e5       	ldi	r25, 0x50	; 80
    3106:	9c bd       	out	0x2c, r25	; 44
    3108:	1d bc       	out	0x2d, r1	; 45
    310a:	01 e0       	ldi	r16, 0x01	; 1
    310c:	21 e0       	ldi	r18, 0x01	; 1
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	68 2f       	mov	r22, r24
    3112:	8c ee       	ldi	r24, 0xEC	; 236
    3114:	93 e0       	ldi	r25, 0x03	; 3
    3116:	0e 94 44 1c 	call	0x3888	; 0x3888 <_ZN10W5100Class20recv_data_processingEhPhjh>
    311a:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    311e:	88 23       	and	r24, r24
    3120:	71 f0       	breq	.+28     	; 0x313e <_Z4peekhPh+0x6c>
    3122:	9f b7       	in	r25, 0x3f	; 63
    3124:	f8 94       	cli
    3126:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    312a:	81 30       	cpi	r24, 0x01	; 1
    312c:	29 f4       	brne	.+10     	; 0x3138 <_Z4peekhPh+0x66>
    312e:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    3132:	8d bb       	out	0x1d, r24	; 29
    3134:	9f bf       	out	0x3f, r25	; 63
    3136:	03 c0       	rjmp	.+6      	; 0x313e <_Z4peekhPh+0x6c>
    3138:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    313c:	8f bf       	out	0x3f, r24	; 63
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	0f 91       	pop	r16
    3144:	08 95       	ret

00003146 <_Z5flushh>:
    3146:	08 95       	ret

00003148 <_Z10bufferDatahjPKhj>:

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
    3148:	af 92       	push	r10
    314a:	bf 92       	push	r11
    314c:	cf 92       	push	r12
    314e:	df 92       	push	r13
    3150:	ff 92       	push	r15
    3152:	0f 93       	push	r16
    3154:	1f 93       	push	r17
    3156:	cf 93       	push	r28
    3158:	df 93       	push	r29
    315a:	f8 2e       	mov	r15, r24
    315c:	6b 01       	movw	r12, r22
    315e:	5a 01       	movw	r10, r20
    3160:	e9 01       	movw	r28, r18

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
    3162:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    3166:	88 23       	and	r24, r24
    3168:	99 f0       	breq	.+38     	; 0x3190 <_Z10bufferDatahjPKhj+0x48>
      uint8_t sreg = SREG;
    316a:	9f b7       	in	r25, 0x3f	; 63
      noInterrupts();
    316c:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    316e:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    3172:	81 30       	cpi	r24, 0x01	; 1
    3174:	59 f4       	brne	.+22     	; 0x318c <_Z10bufferDatahjPKhj+0x44>
        interruptSave = SPI_AVR_EIMSK;
    3176:	8d b3       	in	r24, 0x1d	; 29
    3178:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
    317c:	2d b3       	in	r18, 0x1d	; 29
    317e:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <_ZN8SPIClass13interruptMaskE>
    3182:	80 95       	com	r24
    3184:	82 23       	and	r24, r18
    3186:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    3188:	9f bf       	out	0x3f, r25	; 63
    318a:	02 c0       	rjmp	.+4      	; 0x3190 <_Z10bufferDatahjPKhj+0x48>
      } else
      #endif
      {
        interruptSave = sreg;
    318c:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    3190:	80 e5       	ldi	r24, 0x50	; 80
    3192:	8c bd       	out	0x2c, r24	; 44
    SPSR = settings.spsr;
    3194:	1d bc       	out	0x2d, r1	; 45
  uint16_t ret =0;
  SPI.beginTransaction(SPI_ETHERNET_SETTINGS);
  if (len > W5100.getTXFreeSize(s))
    3196:	6f 2d       	mov	r22, r15
    3198:	8c ee       	ldi	r24, 0xEC	; 236
    319a:	93 e0       	ldi	r25, 0x03	; 3
    319c:	0e 94 93 1b 	call	0x3726	; 0x3726 <_ZN10W5100Class13getTXFreeSizeEh>
    31a0:	8c 17       	cp	r24, r28
    31a2:	9d 07       	cpc	r25, r29
    31a4:	30 f4       	brcc	.+12     	; 0x31b2 <_Z10bufferDatahjPKhj+0x6a>
  {
    ret = W5100.getTXFreeSize(s); // check size not to exceed MAX size.
    31a6:	6f 2d       	mov	r22, r15
    31a8:	8c ee       	ldi	r24, 0xEC	; 236
    31aa:	93 e0       	ldi	r25, 0x03	; 3
    31ac:	0e 94 93 1b 	call	0x3726	; 0x3726 <_ZN10W5100Class13getTXFreeSizeEh>
    31b0:	ec 01       	movw	r28, r24
  }
  else
  {
    ret = len;
  }
  W5100.send_data_processing_offset(s, offset, buf, ret);
    31b2:	8e 01       	movw	r16, r28
    31b4:	95 01       	movw	r18, r10
    31b6:	a6 01       	movw	r20, r12
    31b8:	6f 2d       	mov	r22, r15
    31ba:	8c ee       	ldi	r24, 0xEC	; 236
    31bc:	93 e0       	ldi	r25, 0x03	; 3
    31be:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <_ZN10W5100Class27send_data_processing_offsetEhjPKhj>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    31c2:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    31c6:	88 23       	and	r24, r24
    31c8:	71 f0       	breq	.+28     	; 0x31e6 <_Z10bufferDatahjPKhj+0x9e>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    31ca:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
    31cc:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    31ce:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    31d2:	81 30       	cpi	r24, 0x01	; 1
    31d4:	29 f4       	brne	.+10     	; 0x31e0 <_Z10bufferDatahjPKhj+0x98>
        SPI_AVR_EIMSK = interruptSave;
    31d6:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    31da:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    31dc:	9f bf       	out	0x3f, r25	; 63
    31de:	03 c0       	rjmp	.+6      	; 0x31e6 <_Z10bufferDatahjPKhj+0x9e>
      } else
      #endif
      {
        SREG = interruptSave;
    31e0:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    31e4:	8f bf       	out	0x3f, r24	; 63
  SPI.endTransaction();
  return ret;
}
    31e6:	ce 01       	movw	r24, r28
    31e8:	df 91       	pop	r29
    31ea:	cf 91       	pop	r28
    31ec:	1f 91       	pop	r17
    31ee:	0f 91       	pop	r16
    31f0:	ff 90       	pop	r15
    31f2:	df 90       	pop	r13
    31f4:	cf 90       	pop	r12
    31f6:	bf 90       	pop	r11
    31f8:	af 90       	pop	r10
    31fa:	08 95       	ret

000031fc <_Z8startUDPhPhj>:

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
    31fc:	0f 93       	push	r16
    31fe:	1f 93       	push	r17
    3200:	cf 93       	push	r28
    3202:	df 93       	push	r29
  if
    3204:	fb 01       	movw	r30, r22
    3206:	90 81       	ld	r25, Z
    3208:	91 11       	cpse	r25, r1
    320a:	0a c0       	rjmp	.+20     	; 0x3220 <_Z8startUDPhPhj+0x24>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    320c:	91 81       	ldd	r25, Z+1	; 0x01
    320e:	91 11       	cpse	r25, r1
    3210:	07 c0       	rjmp	.+14     	; 0x3220 <_Z8startUDPhPhj+0x24>
    3212:	92 81       	ldd	r25, Z+2	; 0x02
    3214:	91 11       	cpse	r25, r1
    3216:	04 c0       	rjmp	.+8      	; 0x3220 <_Z8startUDPhPhj+0x24>
    3218:	93 81       	ldd	r25, Z+3	; 0x03
    321a:	99 23       	and	r25, r25
    321c:	09 f4       	brne	.+2      	; 0x3220 <_Z8startUDPhPhj+0x24>
    321e:	4b c0       	rjmp	.+150    	; 0x32b6 <_Z8startUDPhPhj+0xba>
    3220:	41 15       	cp	r20, r1
    3222:	51 05       	cpc	r21, r1
    3224:	09 f4       	brne	.+2      	; 0x3228 <_Z8startUDPhPhj+0x2c>
    3226:	4a c0       	rjmp	.+148    	; 0x32bc <_Z8startUDPhPhj+0xc0>

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
    3228:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    322c:	99 23       	and	r25, r25
    322e:	99 f0       	breq	.+38     	; 0x3256 <_Z8startUDPhPhj+0x5a>
      uint8_t sreg = SREG;
    3230:	9f b7       	in	r25, 0x3f	; 63
      noInterrupts();
    3232:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    3234:	20 91 0a 04 	lds	r18, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    3238:	21 30       	cpi	r18, 0x01	; 1
    323a:	59 f4       	brne	.+22     	; 0x3252 <_Z8startUDPhPhj+0x56>
        interruptSave = SPI_AVR_EIMSK;
    323c:	2d b3       	in	r18, 0x1d	; 29
    323e:	20 93 08 04 	sts	0x0408, r18	; 0x800408 <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
    3242:	3d b3       	in	r19, 0x1d	; 29
    3244:	20 91 09 04 	lds	r18, 0x0409	; 0x800409 <_ZN8SPIClass13interruptMaskE>
    3248:	20 95       	com	r18
    324a:	23 23       	and	r18, r19
    324c:	2d bb       	out	0x1d, r18	; 29
        SREG = sreg;
    324e:	9f bf       	out	0x3f, r25	; 63
    3250:	02 c0       	rjmp	.+4      	; 0x3256 <_Z8startUDPhPhj+0x5a>
      } else
      #endif
      {
        interruptSave = sreg;
    3252:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    3256:	8a 01       	movw	r16, r20
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    3258:	90 e5       	ldi	r25, 0x50	; 80
    325a:	9c bd       	out	0x2c, r25	; 44
    SPSR = settings.spsr;
    325c:	1d bc       	out	0x2d, r1	; 45
    325e:	c8 2f       	mov	r28, r24
    3260:	d0 e0       	ldi	r29, 0x00	; 0
    3262:	24 96       	adiw	r28, 0x04	; 4
    3264:	dc 2f       	mov	r29, r28
    3266:	cc 27       	eor	r28, r28
    3268:	44 e0       	ldi	r20, 0x04	; 4
    326a:	50 e0       	ldi	r21, 0x00	; 0
    326c:	ce 01       	movw	r24, r28
    326e:	0c 96       	adiw	r24, 0x0c	; 12
    3270:	0e 94 91 1a 	call	0x3522	; 0x3522 <_ZN10W5100Class5writeEjPKhj>
uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    3274:	61 2f       	mov	r22, r17
    3276:	ce 01       	movw	r24, r28
    3278:	40 96       	adiw	r24, 0x10	; 16
    327a:	0e 94 0a 1a 	call	0x3414	; 0x3414 <_ZN10W5100Class5writeEjh>
    327e:	60 2f       	mov	r22, r16
    3280:	ce 01       	movw	r24, r28
    3282:	41 96       	adiw	r24, 0x11	; 17
    3284:	0e 94 0a 1a 	call	0x3414	; 0x3414 <_ZN10W5100Class5writeEjh>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    3288:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    328c:	88 23       	and	r24, r24
    328e:	c9 f0       	breq	.+50     	; 0x32c2 <_Z8startUDPhPhj+0xc6>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    3290:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
    3292:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    3294:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    3298:	81 30       	cpi	r24, 0x01	; 1
    329a:	39 f4       	brne	.+14     	; 0x32aa <_Z8startUDPhPhj+0xae>
        SPI_AVR_EIMSK = interruptSave;
    329c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    32a0:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    32a2:	9f bf       	out	0x3f, r25	; 63
  {
    SPI.beginTransaction(SPI_ETHERNET_SETTINGS);
    W5100.writeSnDIPR(s, addr);
    W5100.writeSnDPORT(s, port);
    SPI.endTransaction();
    return 1;
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	0e c0       	rjmp	.+28     	; 0x32c6 <_Z8startUDPhPhj+0xca>
      } else
      #endif
      {
        SREG = interruptSave;
    32aa:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    32ae:	8f bf       	out	0x3f, r24	; 63
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	08 c0       	rjmp	.+16     	; 0x32c6 <_Z8startUDPhPhj+0xca>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
    32b6:	80 e0       	ldi	r24, 0x00	; 0
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	05 c0       	rjmp	.+10     	; 0x32c6 <_Z8startUDPhPhj+0xca>
    32bc:	80 e0       	ldi	r24, 0x00	; 0
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	02 c0       	rjmp	.+4      	; 0x32c6 <_Z8startUDPhPhj+0xca>
  {
    SPI.beginTransaction(SPI_ETHERNET_SETTINGS);
    W5100.writeSnDIPR(s, addr);
    W5100.writeSnDPORT(s, port);
    SPI.endTransaction();
    return 1;
    32c2:	81 e0       	ldi	r24, 0x01	; 1
    32c4:	90 e0       	ldi	r25, 0x00	; 0
  }
}
    32c6:	df 91       	pop	r29
    32c8:	cf 91       	pop	r28
    32ca:	1f 91       	pop	r17
    32cc:	0f 91       	pop	r16
    32ce:	08 95       	ret

000032d0 <_Z7sendUDPh>:

int sendUDP(SOCKET s)
{
    32d0:	1f 93       	push	r17
    32d2:	cf 93       	push	r28
    32d4:	df 93       	push	r29
    32d6:	c8 2f       	mov	r28, r24

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
    32d8:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    32dc:	88 23       	and	r24, r24
    32de:	99 f0       	breq	.+38     	; 0x3306 <_Z7sendUDPh+0x36>
      uint8_t sreg = SREG;
    32e0:	8f b7       	in	r24, 0x3f	; 63
      noInterrupts();
    32e2:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    32e4:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    32e8:	91 30       	cpi	r25, 0x01	; 1
    32ea:	59 f4       	brne	.+22     	; 0x3302 <_Z7sendUDPh+0x32>
        interruptSave = SPI_AVR_EIMSK;
    32ec:	9d b3       	in	r25, 0x1d	; 29
    32ee:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
    32f2:	2d b3       	in	r18, 0x1d	; 29
    32f4:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <_ZN8SPIClass13interruptMaskE>
    32f8:	90 95       	com	r25
    32fa:	92 23       	and	r25, r18
    32fc:	9d bb       	out	0x1d, r25	; 29
        SREG = sreg;
    32fe:	8f bf       	out	0x3f, r24	; 63
    3300:	02 c0       	rjmp	.+4      	; 0x3306 <_Z7sendUDPh+0x36>
      } else
      #endif
      {
        interruptSave = sreg;
    3302:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    3306:	80 e5       	ldi	r24, 0x50	; 80
    3308:	8c bd       	out	0x2c, r24	; 44
    SPSR = settings.spsr;
    330a:	1d bc       	out	0x2d, r1	; 45
  SPI.beginTransaction(SPI_ETHERNET_SETTINGS);
  W5100.execCmdSn(s, Sock_SEND);
    330c:	40 e2       	ldi	r20, 0x20	; 32
    330e:	6c 2f       	mov	r22, r28
    3310:	8c ee       	ldi	r24, 0xEC	; 236
    3312:	93 e0       	ldi	r25, 0x03	; 3
    3314:	0e 94 96 1c 	call	0x392c	; 0x392c <_ZN10W5100Class9execCmdSnEh7SockCMD>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    3318:	d0 e0       	ldi	r29, 0x00	; 0
    331a:	dc 2f       	mov	r29, r28
    331c:	cc 27       	eor	r28, r28
    331e:	ce 5f       	subi	r28, 0xFE	; 254
    3320:	db 4f       	sbci	r29, 0xFB	; 251
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    3322:	10 e5       	ldi	r17, 0x50	; 80
    3324:	ce 01       	movw	r24, r28
    3326:	0e 94 bb 1a 	call	0x3576	; 0x3576 <_ZN10W5100Class4readEj>
		
  /* +2008.01 bj */
  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    332a:	84 fd       	sbrc	r24, 4
    332c:	4f c0       	rjmp	.+158    	; 0x33cc <_Z7sendUDPh+0xfc>
    332e:	ce 01       	movw	r24, r28
    3330:	0e 94 bb 1a 	call	0x3576	; 0x3576 <_ZN10W5100Class4readEj>
  {
    if (W5100.readSnIR(s) & SnIR::TIMEOUT)
    3334:	83 ff       	sbrs	r24, 3
    3336:	1c c0       	rjmp	.+56     	; 0x3370 <_Z7sendUDPh+0xa0>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    3338:	68 e1       	ldi	r22, 0x18	; 24
    333a:	ce 01       	movw	r24, r28
    333c:	0e 94 0a 1a 	call	0x3414	; 0x3414 <_ZN10W5100Class5writeEjh>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    3340:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    3344:	88 23       	and	r24, r24
    3346:	09 f4       	brne	.+2      	; 0x334a <_Z7sendUDPh+0x7a>
    3348:	5c c0       	rjmp	.+184    	; 0x3402 <_Z7sendUDPh+0x132>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    334a:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
    334c:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    334e:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    3352:	81 30       	cpi	r24, 0x01	; 1
    3354:	39 f4       	brne	.+14     	; 0x3364 <_Z7sendUDPh+0x94>
        SPI_AVR_EIMSK = interruptSave;
    3356:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    335a:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    335c:	9f bf       	out	0x3f, r25	; 63
    {
      /* +2008.01 [bj]: clear interrupt */
      W5100.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
      SPI.endTransaction();
      return 0;
    335e:	80 e0       	ldi	r24, 0x00	; 0
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	54 c0       	rjmp	.+168    	; 0x340c <_Z7sendUDPh+0x13c>
      } else
      #endif
      {
        SREG = interruptSave;
    3364:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    3368:	8f bf       	out	0x3f, r24	; 63
    336a:	80 e0       	ldi	r24, 0x00	; 0
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	4e c0       	rjmp	.+156    	; 0x340c <_Z7sendUDPh+0x13c>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    3370:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    3374:	88 23       	and	r24, r24
    3376:	71 f0       	breq	.+28     	; 0x3394 <_Z7sendUDPh+0xc4>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    3378:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
    337a:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    337c:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    3380:	81 30       	cpi	r24, 0x01	; 1
    3382:	29 f4       	brne	.+10     	; 0x338e <_Z7sendUDPh+0xbe>
        SPI_AVR_EIMSK = interruptSave;
    3384:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    3388:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    338a:	9f bf       	out	0x3f, r25	; 63
    338c:	03 c0       	rjmp	.+6      	; 0x3394 <_Z7sendUDPh+0xc4>
      } else
      #endif
      {
        SREG = interruptSave;
    338e:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    3392:	8f bf       	out	0x3f, r24	; 63
    }
    SPI.endTransaction();
    yield();
    3394:	0e 94 b2 0c 	call	0x1964	; 0x1964 <yield>

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
    3398:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    339c:	88 23       	and	r24, r24
    339e:	99 f0       	breq	.+38     	; 0x33c6 <_Z7sendUDPh+0xf6>
      uint8_t sreg = SREG;
    33a0:	9f b7       	in	r25, 0x3f	; 63
      noInterrupts();
    33a2:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    33a4:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    33a8:	81 30       	cpi	r24, 0x01	; 1
    33aa:	59 f4       	brne	.+22     	; 0x33c2 <_Z7sendUDPh+0xf2>
        interruptSave = SPI_AVR_EIMSK;
    33ac:	8d b3       	in	r24, 0x1d	; 29
    33ae:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
    33b2:	2d b3       	in	r18, 0x1d	; 29
    33b4:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <_ZN8SPIClass13interruptMaskE>
    33b8:	80 95       	com	r24
    33ba:	82 23       	and	r24, r18
    33bc:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    33be:	9f bf       	out	0x3f, r25	; 63
    33c0:	02 c0       	rjmp	.+4      	; 0x33c6 <_Z7sendUDPh+0xf6>
      } else
      #endif
      {
        interruptSave = sreg;
    33c2:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    33c6:	1c bd       	out	0x2c, r17	; 44
    SPSR = settings.spsr;
    33c8:	1d bc       	out	0x2d, r1	; 45
{
  SPI.beginTransaction(SPI_ETHERNET_SETTINGS);
  W5100.execCmdSn(s, Sock_SEND);
		
  /* +2008.01 bj */
  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    33ca:	ac cf       	rjmp	.-168    	; 0x3324 <_Z7sendUDPh+0x54>
    33cc:	60 e1       	ldi	r22, 0x10	; 16
    33ce:	ce 01       	movw	r24, r28
    33d0:	0e 94 0a 1a 	call	0x3414	; 0x3414 <_ZN10W5100Class5writeEjh>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    33d4:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    33d8:	88 23       	and	r24, r24
    33da:	b1 f0       	breq	.+44     	; 0x3408 <_Z7sendUDPh+0x138>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    33dc:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
    33de:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    33e0:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    33e4:	81 30       	cpi	r24, 0x01	; 1
    33e6:	39 f4       	brne	.+14     	; 0x33f6 <_Z7sendUDPh+0x126>
        SPI_AVR_EIMSK = interruptSave;
    33e8:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    33ec:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    33ee:	9f bf       	out	0x3f, r25	; 63
  /* +2008.01 bj */	
  W5100.writeSnIR(s, SnIR::SEND_OK);
  SPI.endTransaction();

  /* Sent ok */
  return 1;
    33f0:	81 e0       	ldi	r24, 0x01	; 1
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	0b c0       	rjmp	.+22     	; 0x340c <_Z7sendUDPh+0x13c>
      } else
      #endif
      {
        SREG = interruptSave;
    33f6:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    33fa:	8f bf       	out	0x3f, r24	; 63
    33fc:	81 e0       	ldi	r24, 0x01	; 1
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	05 c0       	rjmp	.+10     	; 0x340c <_Z7sendUDPh+0x13c>
    if (W5100.readSnIR(s) & SnIR::TIMEOUT)
    {
      /* +2008.01 [bj]: clear interrupt */
      W5100.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
      SPI.endTransaction();
      return 0;
    3402:	80 e0       	ldi	r24, 0x00	; 0
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	02 c0       	rjmp	.+4      	; 0x340c <_Z7sendUDPh+0x13c>
  /* +2008.01 bj */	
  W5100.writeSnIR(s, SnIR::SEND_OK);
  SPI.endTransaction();

  /* Sent ok */
  return 1;
    3408:	81 e0       	ldi	r24, 0x01	; 1
    340a:	90 e0       	ldi	r25, 0x00	; 0
}
    340c:	df 91       	pop	r29
    340e:	cf 91       	pop	r28
    3410:	1f 91       	pop	r17
    3412:	08 95       	ret

00003414 <_ZN10W5100Class5writeEjh>:
      inline static void initSS()    { DDRB  |=  _BV(0); };
      inline static void setSS()     { PORTB &= ~_BV(0); };
      inline static void resetSS()   { PORTB |=  _BV(0); };
    #else
      inline static void initSS()    { DDRB  |=  _BV(2); };
      inline static void setSS()     { PORTB &= ~_BV(2); };
    3414:	2a 98       	cbi	0x05, 2	; 5
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    3416:	20 ef       	ldi	r18, 0xF0	; 240
    3418:	2e bd       	out	0x2e, r18	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    341a:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    341c:	0d b4       	in	r0, 0x2d	; 45
    341e:	07 fe       	sbrs	r0, 7
    3420:	fd cf       	rjmp	.-6      	; 0x341c <_ZN10W5100Class5writeEjh+0x8>
    return SPDR;
    3422:	2e b5       	in	r18, 0x2e	; 46
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    3424:	9e bd       	out	0x2e, r25	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    3426:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    3428:	0d b4       	in	r0, 0x2d	; 45
    342a:	07 fe       	sbrs	r0, 7
    342c:	fd cf       	rjmp	.-6      	; 0x3428 <_ZN10W5100Class5writeEjh+0x14>
    return SPDR;
    342e:	9e b5       	in	r25, 0x2e	; 46
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    3430:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    3432:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    3434:	0d b4       	in	r0, 0x2d	; 45
    3436:	07 fe       	sbrs	r0, 7
    3438:	fd cf       	rjmp	.-6      	; 0x3434 <_ZN10W5100Class5writeEjh+0x20>
    return SPDR;
    343a:	8e b5       	in	r24, 0x2e	; 46
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    343c:	6e bd       	out	0x2e, r22	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    343e:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    3440:	0d b4       	in	r0, 0x2d	; 45
    3442:	07 fe       	sbrs	r0, 7
    3444:	fd cf       	rjmp	.-6      	; 0x3440 <_ZN10W5100Class5writeEjh+0x2c>
    return SPDR;
    3446:	8e b5       	in	r24, 0x2e	; 46
      inline static void resetSS()   { PORTB |=  _BV(2); };
    3448:	2a 9a       	sbi	0x05, 2	; 5
  SPI.transfer(ETHERNET_SHIELD_SPI_CS, _addr >> 8, SPI_CONTINUE);
  SPI.transfer(ETHERNET_SHIELD_SPI_CS, _addr & 0xFF, SPI_CONTINUE);
  SPI.transfer(ETHERNET_SHIELD_SPI_CS, _data);
#endif
  return 1;
}
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	08 95       	ret

0000344e <_ZN10W5100Class4initEv>:

#define TXBUF_BASE 0x4000
#define RXBUF_BASE 0x6000

void W5100Class::init(void)
{
    344e:	cf 93       	push	r28
    3450:	df 93       	push	r29
    3452:	ec 01       	movw	r28, r24
  delay(300);
    3454:	6c e2       	ldi	r22, 0x2C	; 44
    3456:	71 e0       	ldi	r23, 0x01	; 1
    3458:	80 e0       	ldi	r24, 0x00	; 0
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	0e 94 9c 0b 	call	0x1738	; 0x1738 <delay>

#if !defined(SPI_HAS_EXTENDED_CS_PIN_HANDLING)
  SPI.begin();
    3460:	0e 94 69 23 	call	0x46d2	; 0x46d2 <_ZN8SPIClass5beginEv>
    #elif defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB162__)
      inline static void initSS()    { DDRB  |=  _BV(0); };
      inline static void setSS()     { PORTB &= ~_BV(0); };
      inline static void resetSS()   { PORTB |=  _BV(0); };
    #else
      inline static void initSS()    { DDRB  |=  _BV(2); };
    3464:	22 9a       	sbi	0x04, 2	; 4

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
    3466:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    346a:	88 23       	and	r24, r24
    346c:	99 f0       	breq	.+38     	; 0x3494 <_ZN10W5100Class4initEv+0x46>
      uint8_t sreg = SREG;
    346e:	9f b7       	in	r25, 0x3f	; 63
      noInterrupts();
    3470:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    3472:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    3476:	81 30       	cpi	r24, 0x01	; 1
    3478:	59 f4       	brne	.+22     	; 0x3490 <_ZN10W5100Class4initEv+0x42>
        interruptSave = SPI_AVR_EIMSK;
    347a:	8d b3       	in	r24, 0x1d	; 29
    347c:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
    3480:	2d b3       	in	r18, 0x1d	; 29
    3482:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <_ZN8SPIClass13interruptMaskE>
    3486:	80 95       	com	r24
    3488:	82 23       	and	r24, r18
    348a:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    348c:	9f bf       	out	0x3f, r25	; 63
    348e:	02 c0       	rjmp	.+4      	; 0x3494 <_ZN10W5100Class4initEv+0x46>
      } else
      #endif
      {
        interruptSave = sreg;
    3490:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    3494:	80 e5       	ldi	r24, 0x50	; 80
    3496:	8c bd       	out	0x2c, r24	; 44
    SPSR = settings.spsr;
    3498:	1d bc       	out	0x2d, r1	; 45
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, _buff, size);            \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
    349a:	60 e8       	ldi	r22, 0x80	; 128
    349c:	80 e0       	ldi	r24, 0x00	; 0
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	0e 94 0a 1a 	call	0x3414	; 0x3414 <_ZN10W5100Class5writeEjh>
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0017);    // Timeout address
  __GP_REGISTER8 (RCR,    0x0019);    // Retry count
  __GP_REGISTER8 (RMSR,   0x001A);    // Receive memory size
  __GP_REGISTER8 (TMSR,   0x001B);    // Transmit memory size
    34a4:	65 e5       	ldi	r22, 0x55	; 85
    34a6:	8b e1       	ldi	r24, 0x1B	; 27
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	0e 94 0a 1a 	call	0x3414	; 0x3414 <_ZN10W5100Class5writeEjh>
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0017);    // Timeout address
  __GP_REGISTER8 (RCR,    0x0019);    // Retry count
  __GP_REGISTER8 (RMSR,   0x001A);    // Receive memory size
    34ae:	65 e5       	ldi	r22, 0x55	; 85
    34b0:	8a e1       	ldi	r24, 0x1A	; 26
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	0e 94 0a 1a 	call	0x3414	; 0x3414 <_ZN10W5100Class5writeEjh>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    34b8:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    34bc:	88 23       	and	r24, r24
    34be:	71 f0       	breq	.+28     	; 0x34dc <_ZN10W5100Class4initEv+0x8e>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    34c0:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
    34c2:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    34c4:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZN8SPIClass13interruptModeE>
    34c8:	81 30       	cpi	r24, 0x01	; 1
    34ca:	29 f4       	brne	.+10     	; 0x34d6 <_ZN10W5100Class4initEv+0x88>
        SPI_AVR_EIMSK = interruptSave;
    34cc:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    34d0:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    34d2:	9f bf       	out	0x3f, r25	; 63
    34d4:	03 c0       	rjmp	.+6      	; 0x34dc <_ZN10W5100Class4initEv+0x8e>
      } else
      #endif
      {
        SREG = interruptSave;
    34d6:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZN8SPIClass13interruptSaveE>
    34da:	8f bf       	out	0x3f, r24	; 63
  writeTMSR(0x55);
  writeRMSR(0x55);
  SPI.endTransaction();

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
    34dc:	80 e0       	ldi	r24, 0x00	; 0
    34de:	90 e4       	ldi	r25, 0x40	; 64
    34e0:	99 83       	std	Y+1, r25	; 0x01
    34e2:	88 83       	st	Y, r24
    RBASE[i] = RXBUF_BASE + RSIZE * i;
    34e4:	80 e0       	ldi	r24, 0x00	; 0
    34e6:	90 e6       	ldi	r25, 0x60	; 96
    34e8:	99 87       	std	Y+9, r25	; 0x09
    34ea:	88 87       	std	Y+8, r24	; 0x08
  writeTMSR(0x55);
  writeRMSR(0x55);
  SPI.endTransaction();

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	98 e4       	ldi	r25, 0x48	; 72
    34f0:	9b 83       	std	Y+3, r25	; 0x03
    34f2:	8a 83       	std	Y+2, r24	; 0x02
    RBASE[i] = RXBUF_BASE + RSIZE * i;
    34f4:	80 e0       	ldi	r24, 0x00	; 0
    34f6:	98 e6       	ldi	r25, 0x68	; 104
    34f8:	9b 87       	std	Y+11, r25	; 0x0b
    34fa:	8a 87       	std	Y+10, r24	; 0x0a
  writeTMSR(0x55);
  writeRMSR(0x55);
  SPI.endTransaction();

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
    34fc:	80 e0       	ldi	r24, 0x00	; 0
    34fe:	90 e5       	ldi	r25, 0x50	; 80
    3500:	9d 83       	std	Y+5, r25	; 0x05
    3502:	8c 83       	std	Y+4, r24	; 0x04
    RBASE[i] = RXBUF_BASE + RSIZE * i;
    3504:	80 e0       	ldi	r24, 0x00	; 0
    3506:	90 e7       	ldi	r25, 0x70	; 112
    3508:	9d 87       	std	Y+13, r25	; 0x0d
    350a:	8c 87       	std	Y+12, r24	; 0x0c
  writeTMSR(0x55);
  writeRMSR(0x55);
  SPI.endTransaction();

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
    350c:	80 e0       	ldi	r24, 0x00	; 0
    350e:	98 e5       	ldi	r25, 0x58	; 88
    3510:	9f 83       	std	Y+7, r25	; 0x07
    3512:	8e 83       	std	Y+6, r24	; 0x06
    RBASE[i] = RXBUF_BASE + RSIZE * i;
    3514:	80 e0       	ldi	r24, 0x00	; 0
    3516:	98 e7       	ldi	r25, 0x78	; 120
    3518:	9f 87       	std	Y+15, r25	; 0x0f
    351a:	8e 87       	std	Y+14, r24	; 0x0e
  }
}
    351c:	df 91       	pop	r29
    351e:	cf 91       	pop	r28
    3520:	08 95       	ret

00003522 <_ZN10W5100Class5writeEjPKhj>:
  return 1;
}

uint16_t W5100Class::write(uint16_t _addr, const uint8_t *_buf, uint16_t _len)
{
  for (uint16_t i=0; i<_len; i++)
    3522:	41 15       	cp	r20, r1
    3524:	51 05       	cpc	r21, r1
    3526:	29 f1       	breq	.+74     	; 0x3572 <_ZN10W5100Class5writeEjPKhj+0x50>
    3528:	e6 2f       	mov	r30, r22
    352a:	f7 2f       	mov	r31, r23
    352c:	bc 01       	movw	r22, r24
    352e:	64 0f       	add	r22, r20
    3530:	75 1f       	adc	r23, r21
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    3532:	30 ef       	ldi	r19, 0xF0	; 240
      inline static void initSS()    { DDRB  |=  _BV(0); };
      inline static void setSS()     { PORTB &= ~_BV(0); };
      inline static void resetSS()   { PORTB |=  _BV(0); };
    #else
      inline static void initSS()    { DDRB  |=  _BV(2); };
      inline static void setSS()     { PORTB &= ~_BV(2); };
    3534:	2a 98       	cbi	0x05, 2	; 5
    3536:	3e bd       	out	0x2e, r19	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    3538:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    353a:	0d b4       	in	r0, 0x2d	; 45
    353c:	07 fe       	sbrs	r0, 7
    353e:	fd cf       	rjmp	.-6      	; 0x353a <_ZN10W5100Class5writeEjPKhj+0x18>
    return SPDR;
    3540:	2e b5       	in	r18, 0x2e	; 46
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    3542:	9e bd       	out	0x2e, r25	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    3544:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    3546:	0d b4       	in	r0, 0x2d	; 45
    3548:	07 fe       	sbrs	r0, 7
    354a:	fd cf       	rjmp	.-6      	; 0x3546 <_ZN10W5100Class5writeEjPKhj+0x24>
    return SPDR;
    354c:	2e b5       	in	r18, 0x2e	; 46
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    354e:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    3550:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    3552:	0d b4       	in	r0, 0x2d	; 45
    3554:	07 fe       	sbrs	r0, 7
    3556:	fd cf       	rjmp	.-6      	; 0x3552 <_ZN10W5100Class5writeEjPKhj+0x30>
    return SPDR;
    3558:	2e b5       	in	r18, 0x2e	; 46
#if !defined(SPI_HAS_EXTENDED_CS_PIN_HANDLING)
    setSS();    
    SPI.transfer(0xF0);
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    _addr++;
    355a:	01 96       	adiw	r24, 0x01	; 1
    SPI.transfer(_buf[i]);
    355c:	21 91       	ld	r18, Z+
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    355e:	2e bd       	out	0x2e, r18	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    3560:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    3562:	0d b4       	in	r0, 0x2d	; 45
    3564:	07 fe       	sbrs	r0, 7
    3566:	fd cf       	rjmp	.-6      	; 0x3562 <_ZN10W5100Class5writeEjPKhj+0x40>
    return SPDR;
    3568:	2e b5       	in	r18, 0x2e	; 46
      inline static void resetSS()   { PORTB |=  _BV(2); };
    356a:	2a 9a       	sbi	0x05, 2	; 5
  return 1;
}

uint16_t W5100Class::write(uint16_t _addr, const uint8_t *_buf, uint16_t _len)
{
  for (uint16_t i=0; i<_len; i++)
    356c:	86 17       	cp	r24, r22
    356e:	97 07       	cpc	r25, r23
    3570:	09 f7       	brne	.-62     	; 0x3534 <_ZN10W5100Class5writeEjPKhj+0x12>
    SPI.transfer(ETHERNET_SHIELD_SPI_CS, _buf[i]);
    _addr++;
#endif
  }
  return _len;
}
    3572:	ca 01       	movw	r24, r20
    3574:	08 95       	ret

00003576 <_ZN10W5100Class4readEj>:
      inline static void initSS()    { DDRB  |=  _BV(0); };
      inline static void setSS()     { PORTB &= ~_BV(0); };
      inline static void resetSS()   { PORTB |=  _BV(0); };
    #else
      inline static void initSS()    { DDRB  |=  _BV(2); };
      inline static void setSS()     { PORTB &= ~_BV(2); };
    3576:	2a 98       	cbi	0x05, 2	; 5
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    3578:	2f e0       	ldi	r18, 0x0F	; 15
    357a:	2e bd       	out	0x2e, r18	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    357c:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    357e:	0d b4       	in	r0, 0x2d	; 45
    3580:	07 fe       	sbrs	r0, 7
    3582:	fd cf       	rjmp	.-6      	; 0x357e <_ZN10W5100Class4readEj+0x8>
    return SPDR;
    3584:	2e b5       	in	r18, 0x2e	; 46
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    3586:	9e bd       	out	0x2e, r25	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    3588:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    358a:	0d b4       	in	r0, 0x2d	; 45
    358c:	07 fe       	sbrs	r0, 7
    358e:	fd cf       	rjmp	.-6      	; 0x358a <_ZN10W5100Class4readEj+0x14>
    return SPDR;
    3590:	9e b5       	in	r25, 0x2e	; 46
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    3592:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    3594:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    3596:	0d b4       	in	r0, 0x2d	; 45
    3598:	07 fe       	sbrs	r0, 7
    359a:	fd cf       	rjmp	.-6      	; 0x3596 <_ZN10W5100Class4readEj+0x20>
    return SPDR;
    359c:	8e b5       	in	r24, 0x2e	; 46
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    359e:	1e bc       	out	0x2e, r1	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    35a0:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    35a2:	0d b4       	in	r0, 0x2d	; 45
    35a4:	07 fe       	sbrs	r0, 7
    35a6:	fd cf       	rjmp	.-6      	; 0x35a2 <_ZN10W5100Class4readEj+0x2c>
    return SPDR;
    35a8:	8e b5       	in	r24, 0x2e	; 46
      inline static void resetSS()   { PORTB |=  _BV(2); };
    35aa:	2a 9a       	sbi	0x05, 2	; 5
  SPI.transfer(ETHERNET_SHIELD_SPI_CS, _addr >> 8, SPI_CONTINUE);
  SPI.transfer(ETHERNET_SHIELD_SPI_CS, _addr & 0xFF, SPI_CONTINUE);
  uint8_t _data = SPI.transfer(ETHERNET_SHIELD_SPI_CS, 0);
#endif
  return _data;
}
    35ac:	08 95       	ret

000035ae <_ZN10W5100Class27send_data_processing_offsetEhjPKhj>:
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
}

void W5100Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
{
    35ae:	4f 92       	push	r4
    35b0:	5f 92       	push	r5
    35b2:	6f 92       	push	r6
    35b4:	7f 92       	push	r7
    35b6:	8f 92       	push	r8
    35b8:	9f 92       	push	r9
    35ba:	af 92       	push	r10
    35bc:	bf 92       	push	r11
    35be:	cf 92       	push	r12
    35c0:	df 92       	push	r13
    35c2:	ef 92       	push	r14
    35c4:	ff 92       	push	r15
    35c6:	0f 93       	push	r16
    35c8:	1f 93       	push	r17
    35ca:	cf 93       	push	r28
    35cc:	df 93       	push	r29
    35ce:	5c 01       	movw	r10, r24
    35d0:	2a 01       	movw	r4, r20
    35d2:	39 01       	movw	r6, r18
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    35d4:	86 2e       	mov	r8, r22
    35d6:	91 2c       	mov	r9, r1
    35d8:	74 01       	movw	r14, r8
    35da:	64 e0       	ldi	r22, 0x04	; 4
    35dc:	e6 0e       	add	r14, r22
    35de:	f1 1c       	adc	r15, r1
    35e0:	fe 2c       	mov	r15, r14
    35e2:	ee 24       	eor	r14, r14
    35e4:	67 01       	movw	r12, r14
    35e6:	84 e2       	ldi	r24, 0x24	; 36
    35e8:	c8 0e       	add	r12, r24
    35ea:	d1 1c       	adc	r13, r1
    35ec:	c6 01       	movw	r24, r12
    35ee:	0e 94 bb 1a 	call	0x3576	; 0x3576 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
    35f2:	c8 2f       	mov	r28, r24
    35f4:	d0 e0       	ldi	r29, 0x00	; 0
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    35f6:	e5 e2       	ldi	r30, 0x25	; 37
    35f8:	ee 0e       	add	r14, r30
    35fa:	f1 1c       	adc	r15, r1
    35fc:	c7 01       	movw	r24, r14
    35fe:	0e 94 bb 1a 	call	0x3576	; 0x3576 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
    3602:	dc 2f       	mov	r29, r28
    3604:	cc 27       	eor	r28, r28
    3606:	c8 2b       	or	r28, r24
  uint16_t ptr = readSnTX_WR(s);
  ptr += data_offset;
    3608:	c4 0d       	add	r28, r4
    360a:	d5 1d       	adc	r29, r5
  uint16_t offset = ptr & SMASK;
    360c:	9e 01       	movw	r18, r28
    360e:	37 70       	andi	r19, 0x07	; 7
    3610:	88 0c       	add	r8, r8
    3612:	99 1c       	adc	r9, r9
    3614:	a8 0c       	add	r10, r8
    3616:	b9 1c       	adc	r11, r9
  uint16_t dstAddr = offset + SBASE[s];
    3618:	f5 01       	movw	r30, r10
    361a:	80 81       	ld	r24, Z
    361c:	91 81       	ldd	r25, Z+1	; 0x01
    361e:	82 0f       	add	r24, r18
    3620:	93 1f       	adc	r25, r19

  if (offset + len > SSIZE) 
    3622:	a9 01       	movw	r20, r18
    3624:	40 0f       	add	r20, r16
    3626:	51 1f       	adc	r21, r17
    3628:	41 30       	cpi	r20, 0x01	; 1
    362a:	58 40       	sbci	r21, 0x08	; 8
    362c:	a8 f0       	brcs	.+42     	; 0x3658 <_ZN10W5100Class27send_data_processing_offsetEhjPKhj+0xaa>
  {
    // Wrap around circular buffer
    uint16_t size = SSIZE - offset;
    362e:	60 e0       	ldi	r22, 0x00	; 0
    3630:	78 e0       	ldi	r23, 0x08	; 8
    3632:	4b 01       	movw	r8, r22
    3634:	82 1a       	sub	r8, r18
    3636:	93 0a       	sbc	r9, r19
    write(dstAddr, data, size);
    3638:	a4 01       	movw	r20, r8
    363a:	b3 01       	movw	r22, r6
    363c:	0e 94 91 1a 	call	0x3522	; 0x3522 <_ZN10W5100Class5writeEjPKhj>
    write(SBASE[s], data + size, len - size);
    3640:	a8 01       	movw	r20, r16
    3642:	48 19       	sub	r20, r8
    3644:	59 09       	sbc	r21, r9
    3646:	b3 01       	movw	r22, r6
    3648:	68 0d       	add	r22, r8
    364a:	79 1d       	adc	r23, r9
    364c:	f5 01       	movw	r30, r10
    364e:	80 81       	ld	r24, Z
    3650:	91 81       	ldd	r25, Z+1	; 0x01
    3652:	0e 94 91 1a 	call	0x3522	; 0x3522 <_ZN10W5100Class5writeEjPKhj>
    3656:	04 c0       	rjmp	.+8      	; 0x3660 <_ZN10W5100Class27send_data_processing_offsetEhjPKhj+0xb2>
  } 
  else {
    write(dstAddr, data, len);
    3658:	a8 01       	movw	r20, r16
    365a:	b3 01       	movw	r22, r6
    365c:	0e 94 91 1a 	call	0x3522	; 0x3522 <_ZN10W5100Class5writeEjPKhj>
  }

  ptr += len;
    3660:	0c 0f       	add	r16, r28
    3662:	1d 1f       	adc	r17, r29
uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    3664:	61 2f       	mov	r22, r17
    3666:	c6 01       	movw	r24, r12
    3668:	0e 94 0a 1a 	call	0x3414	; 0x3414 <_ZN10W5100Class5writeEjh>
    366c:	60 2f       	mov	r22, r16
    366e:	c7 01       	movw	r24, r14
    3670:	0e 94 0a 1a 	call	0x3414	; 0x3414 <_ZN10W5100Class5writeEjh>
  writeSnTX_WR(s, ptr);
}
    3674:	df 91       	pop	r29
    3676:	cf 91       	pop	r28
    3678:	1f 91       	pop	r17
    367a:	0f 91       	pop	r16
    367c:	ff 90       	pop	r15
    367e:	ef 90       	pop	r14
    3680:	df 90       	pop	r13
    3682:	cf 90       	pop	r12
    3684:	bf 90       	pop	r11
    3686:	af 90       	pop	r10
    3688:	9f 90       	pop	r9
    368a:	8f 90       	pop	r8
    368c:	7f 90       	pop	r7
    368e:	6f 90       	pop	r6
    3690:	5f 90       	pop	r5
    3692:	4f 90       	pop	r4
    3694:	08 95       	ret

00003696 <_ZN10W5100Class20send_data_processingEhPKhj>:
  return val;
}


void W5100Class::send_data_processing(SOCKET s, const uint8_t *data, uint16_t len)
{
    3696:	0f 93       	push	r16
    3698:	1f 93       	push	r17
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
    369a:	89 01       	movw	r16, r18
    369c:	9a 01       	movw	r18, r20
    369e:	40 e0       	ldi	r20, 0x00	; 0
    36a0:	50 e0       	ldi	r21, 0x00	; 0
    36a2:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <_ZN10W5100Class27send_data_processing_offsetEhjPKhj>
}
    36a6:	1f 91       	pop	r17
    36a8:	0f 91       	pop	r16
    36aa:	08 95       	ret

000036ac <_ZN10W5100Class17getRXReceivedSizeEh>:
  while (val != val1);
  return val;
}

uint16_t W5100Class::getRXReceivedSize(SOCKET s)
{
    36ac:	cf 92       	push	r12
    36ae:	df 92       	push	r13
    36b0:	ef 92       	push	r14
    36b2:	ff 92       	push	r15
    36b4:	0f 93       	push	r16
    36b6:	1f 93       	push	r17
    36b8:	cf 93       	push	r28
    36ba:	df 93       	push	r29
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    36bc:	e6 2e       	mov	r14, r22
    36be:	f1 2c       	mov	r15, r1
    36c0:	84 e0       	ldi	r24, 0x04	; 4
    36c2:	e8 0e       	add	r14, r24
    36c4:	f1 1c       	adc	r15, r1
    36c6:	fe 2c       	mov	r15, r14
    36c8:	ee 24       	eor	r14, r14
    36ca:	67 01       	movw	r12, r14
    36cc:	86 e2       	ldi	r24, 0x26	; 38
    36ce:	c8 0e       	add	r12, r24
    36d0:	d1 1c       	adc	r13, r1
    36d2:	87 e2       	ldi	r24, 0x27	; 39
    36d4:	e8 0e       	add	r14, r24
    36d6:	f1 1c       	adc	r15, r1
  uint16_t val=0,val1=0;
    36d8:	00 e0       	ldi	r16, 0x00	; 0
    36da:	10 e0       	ldi	r17, 0x00	; 0
    36dc:	c6 01       	movw	r24, r12
    36de:	0e 94 bb 1a 	call	0x3576	; 0x3576 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
    36e2:	c8 2f       	mov	r28, r24
    36e4:	d0 e0       	ldi	r29, 0x00	; 0
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    36e6:	c7 01       	movw	r24, r14
    36e8:	0e 94 bb 1a 	call	0x3576	; 0x3576 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
    36ec:	dc 2f       	mov	r29, r28
    36ee:	cc 27       	eor	r28, r28
    36f0:	c8 2b       	or	r28, r24
  do {
    val1 = readSnRX_RSR(s);
    if (val1 != 0)
    36f2:	20 97       	sbiw	r28, 0x00	; 0
    36f4:	59 f0       	breq	.+22     	; 0x370c <_ZN10W5100Class17getRXReceivedSizeEh+0x60>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    36f6:	c6 01       	movw	r24, r12
    36f8:	0e 94 bb 1a 	call	0x3576	; 0x3576 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
    36fc:	08 2f       	mov	r16, r24
    36fe:	10 e0       	ldi	r17, 0x00	; 0
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    3700:	c7 01       	movw	r24, r14
    3702:	0e 94 bb 1a 	call	0x3576	; 0x3576 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
    3706:	10 2f       	mov	r17, r16
    3708:	00 27       	eor	r16, r16
    370a:	08 2b       	or	r16, r24
      val = readSnRX_RSR(s);
  } 
  while (val != val1);
    370c:	0c 17       	cp	r16, r28
    370e:	1d 07       	cpc	r17, r29
    3710:	29 f7       	brne	.-54     	; 0x36dc <_ZN10W5100Class17getRXReceivedSizeEh+0x30>
  return val;
}
    3712:	ce 01       	movw	r24, r28
    3714:	df 91       	pop	r29
    3716:	cf 91       	pop	r28
    3718:	1f 91       	pop	r17
    371a:	0f 91       	pop	r16
    371c:	ff 90       	pop	r15
    371e:	ef 90       	pop	r14
    3720:	df 90       	pop	r13
    3722:	cf 90       	pop	r12
    3724:	08 95       	ret

00003726 <_ZN10W5100Class13getTXFreeSizeEh>:
    RBASE[i] = RXBUF_BASE + RSIZE * i;
  }
}

uint16_t W5100Class::getTXFreeSize(SOCKET s)
{
    3726:	cf 92       	push	r12
    3728:	df 92       	push	r13
    372a:	ef 92       	push	r14
    372c:	ff 92       	push	r15
    372e:	0f 93       	push	r16
    3730:	1f 93       	push	r17
    3732:	cf 93       	push	r28
    3734:	df 93       	push	r29
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    3736:	e6 2e       	mov	r14, r22
    3738:	f1 2c       	mov	r15, r1
    373a:	84 e0       	ldi	r24, 0x04	; 4
    373c:	e8 0e       	add	r14, r24
    373e:	f1 1c       	adc	r15, r1
    3740:	fe 2c       	mov	r15, r14
    3742:	ee 24       	eor	r14, r14
    3744:	67 01       	movw	r12, r14
    3746:	80 e2       	ldi	r24, 0x20	; 32
    3748:	c8 0e       	add	r12, r24
    374a:	d1 1c       	adc	r13, r1
    374c:	81 e2       	ldi	r24, 0x21	; 33
    374e:	e8 0e       	add	r14, r24
    3750:	f1 1c       	adc	r15, r1
  uint16_t val=0, val1=0;
    3752:	00 e0       	ldi	r16, 0x00	; 0
    3754:	10 e0       	ldi	r17, 0x00	; 0
    3756:	c6 01       	movw	r24, r12
    3758:	0e 94 bb 1a 	call	0x3576	; 0x3576 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
    375c:	c8 2f       	mov	r28, r24
    375e:	d0 e0       	ldi	r29, 0x00	; 0
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    3760:	c7 01       	movw	r24, r14
    3762:	0e 94 bb 1a 	call	0x3576	; 0x3576 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
    3766:	dc 2f       	mov	r29, r28
    3768:	cc 27       	eor	r28, r28
    376a:	c8 2b       	or	r28, r24
  do {
    val1 = readSnTX_FSR(s);
    if (val1 != 0)
    376c:	20 97       	sbiw	r28, 0x00	; 0
    376e:	59 f0       	breq	.+22     	; 0x3786 <_ZN10W5100Class13getTXFreeSizeEh+0x60>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    3770:	c6 01       	movw	r24, r12
    3772:	0e 94 bb 1a 	call	0x3576	; 0x3576 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
    3776:	08 2f       	mov	r16, r24
    3778:	10 e0       	ldi	r17, 0x00	; 0
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    377a:	c7 01       	movw	r24, r14
    377c:	0e 94 bb 1a 	call	0x3576	; 0x3576 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
    3780:	10 2f       	mov	r17, r16
    3782:	00 27       	eor	r16, r16
    3784:	08 2b       	or	r16, r24
      val = readSnTX_FSR(s);
  } 
  while (val != val1);
    3786:	0c 17       	cp	r16, r28
    3788:	1d 07       	cpc	r17, r29
    378a:	29 f7       	brne	.-54     	; 0x3756 <_ZN10W5100Class13getTXFreeSizeEh+0x30>
  return val;
}
    378c:	ce 01       	movw	r24, r28
    378e:	df 91       	pop	r29
    3790:	cf 91       	pop	r28
    3792:	1f 91       	pop	r17
    3794:	0f 91       	pop	r16
    3796:	ff 90       	pop	r15
    3798:	ef 90       	pop	r14
    379a:	df 90       	pop	r13
    379c:	cf 90       	pop	r12
    379e:	08 95       	ret

000037a0 <_ZN10W5100Class4readEjPhj>:
  return _data;
}

uint16_t W5100Class::read(uint16_t _addr, uint8_t *_buf, uint16_t _len)
{
  for (uint16_t i=0; i<_len; i++)
    37a0:	41 15       	cp	r20, r1
    37a2:	51 05       	cpc	r21, r1
    37a4:	29 f1       	breq	.+74     	; 0x37f0 <_ZN10W5100Class4readEjPhj+0x50>
    37a6:	e6 2f       	mov	r30, r22
    37a8:	f7 2f       	mov	r31, r23
    37aa:	bc 01       	movw	r22, r24
    37ac:	64 0f       	add	r22, r20
    37ae:	75 1f       	adc	r23, r21
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    37b0:	3f e0       	ldi	r19, 0x0F	; 15
      inline static void initSS()    { DDRB  |=  _BV(0); };
      inline static void setSS()     { PORTB &= ~_BV(0); };
      inline static void resetSS()   { PORTB |=  _BV(0); };
    #else
      inline static void initSS()    { DDRB  |=  _BV(2); };
      inline static void setSS()     { PORTB &= ~_BV(2); };
    37b2:	2a 98       	cbi	0x05, 2	; 5
    37b4:	3e bd       	out	0x2e, r19	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    37b6:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    37b8:	0d b4       	in	r0, 0x2d	; 45
    37ba:	07 fe       	sbrs	r0, 7
    37bc:	fd cf       	rjmp	.-6      	; 0x37b8 <_ZN10W5100Class4readEjPhj+0x18>
    return SPDR;
    37be:	2e b5       	in	r18, 0x2e	; 46
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    37c0:	9e bd       	out	0x2e, r25	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    37c2:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    37c4:	0d b4       	in	r0, 0x2d	; 45
    37c6:	07 fe       	sbrs	r0, 7
    37c8:	fd cf       	rjmp	.-6      	; 0x37c4 <_ZN10W5100Class4readEjPhj+0x24>
    return SPDR;
    37ca:	2e b5       	in	r18, 0x2e	; 46
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    37cc:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    37ce:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    37d0:	0d b4       	in	r0, 0x2d	; 45
    37d2:	07 fe       	sbrs	r0, 7
    37d4:	fd cf       	rjmp	.-6      	; 0x37d0 <_ZN10W5100Class4readEjPhj+0x30>
    return SPDR;
    37d6:	2e b5       	in	r18, 0x2e	; 46
#if !defined(SPI_HAS_EXTENDED_CS_PIN_HANDLING)
    setSS();
    SPI.transfer(0x0F);
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    _addr++;
    37d8:	01 96       	adiw	r24, 0x01	; 1
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    37da:	1e bc       	out	0x2e, r1	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    37dc:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    37de:	0d b4       	in	r0, 0x2d	; 45
    37e0:	07 fe       	sbrs	r0, 7
    37e2:	fd cf       	rjmp	.-6      	; 0x37de <_ZN10W5100Class4readEjPhj+0x3e>
    return SPDR;
    37e4:	2e b5       	in	r18, 0x2e	; 46
    _buf[i] = SPI.transfer(0);
    37e6:	21 93       	st	Z+, r18
      inline static void resetSS()   { PORTB |=  _BV(2); };
    37e8:	2a 9a       	sbi	0x05, 2	; 5
  return _data;
}

uint16_t W5100Class::read(uint16_t _addr, uint8_t *_buf, uint16_t _len)
{
  for (uint16_t i=0; i<_len; i++)
    37ea:	86 17       	cp	r24, r22
    37ec:	97 07       	cpc	r25, r23
    37ee:	09 f7       	brne	.-62     	; 0x37b2 <_ZN10W5100Class4readEjPhj+0x12>
    _buf[i] = SPI.transfer(ETHERNET_SHIELD_SPI_CS, 0);
    _addr++;
#endif
  }
  return _len;
}
    37f0:	ca 01       	movw	r24, r20
    37f2:	08 95       	ret

000037f4 <_ZN10W5100Class9read_dataEhjPVhj>:
    writeSnRX_RD(s, ptr);
  }
}

void W5100Class::read_data(SOCKET s, volatile uint16_t src, volatile uint8_t *dst, uint16_t len)
{
    37f4:	af 92       	push	r10
    37f6:	bf 92       	push	r11
    37f8:	cf 92       	push	r12
    37fa:	df 92       	push	r13
    37fc:	ef 92       	push	r14
    37fe:	ff 92       	push	r15
    3800:	0f 93       	push	r16
    3802:	1f 93       	push	r17
    3804:	cf 93       	push	r28
    3806:	df 93       	push	r29
    3808:	00 d0       	rcall	.+0      	; 0x380a <_ZN10W5100Class9read_dataEhjPVhj+0x16>
    380a:	cd b7       	in	r28, 0x3d	; 61
    380c:	de b7       	in	r29, 0x3e	; 62
    380e:	5a 83       	std	Y+2, r21	; 0x02
    3810:	49 83       	std	Y+1, r20	; 0x01
    3812:	69 01       	movw	r12, r18
  uint16_t size;
  uint16_t src_mask;
  uint16_t src_ptr;

  src_mask = src & RMASK;
    3814:	29 81       	ldd	r18, Y+1	; 0x01
    3816:	3a 81       	ldd	r19, Y+2	; 0x02
    3818:	37 70       	andi	r19, 0x07	; 7
    381a:	e6 2e       	mov	r14, r22
    381c:	f1 2c       	mov	r15, r1
    381e:	ee 0c       	add	r14, r14
    3820:	ff 1c       	adc	r15, r15
    3822:	e8 0e       	add	r14, r24
    3824:	f9 1e       	adc	r15, r25
  src_ptr = RBASE[s] + src_mask;
    3826:	f7 01       	movw	r30, r14
    3828:	80 85       	ldd	r24, Z+8	; 0x08
    382a:	91 85       	ldd	r25, Z+9	; 0x09
    382c:	82 0f       	add	r24, r18
    382e:	93 1f       	adc	r25, r19

  if( (src_mask + len) > RSIZE ) 
    3830:	a9 01       	movw	r20, r18
    3832:	40 0f       	add	r20, r16
    3834:	51 1f       	adc	r21, r17
    3836:	41 30       	cpi	r20, 0x01	; 1
    3838:	58 40       	sbci	r21, 0x08	; 8
    383a:	a8 f0       	brcs	.+42     	; 0x3866 <_ZN10W5100Class9read_dataEhjPVhj+0x72>
  {
    size = RSIZE - src_mask;
    383c:	60 e0       	ldi	r22, 0x00	; 0
    383e:	78 e0       	ldi	r23, 0x08	; 8
    3840:	5b 01       	movw	r10, r22
    3842:	a2 1a       	sub	r10, r18
    3844:	b3 0a       	sbc	r11, r19
    read(src_ptr, (uint8_t *)dst, size);
    3846:	a5 01       	movw	r20, r10
    3848:	b6 01       	movw	r22, r12
    384a:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <_ZN10W5100Class4readEjPhj>
    dst += size;
    read(RBASE[s], (uint8_t *) dst, len - size);
    384e:	a8 01       	movw	r20, r16
    3850:	4a 19       	sub	r20, r10
    3852:	5b 09       	sbc	r21, r11
    3854:	b6 01       	movw	r22, r12
    3856:	6a 0d       	add	r22, r10
    3858:	7b 1d       	adc	r23, r11
    385a:	f7 01       	movw	r30, r14
    385c:	80 85       	ldd	r24, Z+8	; 0x08
    385e:	91 85       	ldd	r25, Z+9	; 0x09
    3860:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <_ZN10W5100Class4readEjPhj>
    3864:	04 c0       	rjmp	.+8      	; 0x386e <_ZN10W5100Class9read_dataEhjPVhj+0x7a>
  } 
  else
    read(src_ptr, (uint8_t *) dst, len);
    3866:	a8 01       	movw	r20, r16
    3868:	b6 01       	movw	r22, r12
    386a:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <_ZN10W5100Class4readEjPhj>
}
    386e:	0f 90       	pop	r0
    3870:	0f 90       	pop	r0
    3872:	df 91       	pop	r29
    3874:	cf 91       	pop	r28
    3876:	1f 91       	pop	r17
    3878:	0f 91       	pop	r16
    387a:	ff 90       	pop	r15
    387c:	ef 90       	pop	r14
    387e:	df 90       	pop	r13
    3880:	cf 90       	pop	r12
    3882:	bf 90       	pop	r11
    3884:	af 90       	pop	r10
    3886:	08 95       	ret

00003888 <_ZN10W5100Class20recv_data_processingEhPhjh>:
  writeSnTX_WR(s, ptr);
}


void W5100Class::recv_data_processing(SOCKET s, uint8_t *data, uint16_t len, uint8_t peek)
{
    3888:	4f 92       	push	r4
    388a:	5f 92       	push	r5
    388c:	6f 92       	push	r6
    388e:	7f 92       	push	r7
    3890:	8f 92       	push	r8
    3892:	9f 92       	push	r9
    3894:	af 92       	push	r10
    3896:	bf 92       	push	r11
    3898:	cf 92       	push	r12
    389a:	df 92       	push	r13
    389c:	ef 92       	push	r14
    389e:	ff 92       	push	r15
    38a0:	0f 93       	push	r16
    38a2:	1f 93       	push	r17
    38a4:	cf 93       	push	r28
    38a6:	df 93       	push	r29
    38a8:	4c 01       	movw	r8, r24
    38aa:	76 2e       	mov	r7, r22
    38ac:	2a 01       	movw	r4, r20
    38ae:	59 01       	movw	r10, r18
    38b0:	60 2e       	mov	r6, r16
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    38b2:	e6 2e       	mov	r14, r22
    38b4:	f1 2c       	mov	r15, r1
    38b6:	84 e0       	ldi	r24, 0x04	; 4
    38b8:	e8 0e       	add	r14, r24
    38ba:	f1 1c       	adc	r15, r1
    38bc:	fe 2c       	mov	r15, r14
    38be:	ee 24       	eor	r14, r14
    38c0:	67 01       	movw	r12, r14
    38c2:	88 e2       	ldi	r24, 0x28	; 40
    38c4:	c8 0e       	add	r12, r24
    38c6:	d1 1c       	adc	r13, r1
    38c8:	c6 01       	movw	r24, r12
    38ca:	0e 94 bb 1a 	call	0x3576	; 0x3576 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
    38ce:	c8 2f       	mov	r28, r24
    38d0:	d0 e0       	ldi	r29, 0x00	; 0
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    38d2:	89 e2       	ldi	r24, 0x29	; 41
    38d4:	e8 0e       	add	r14, r24
    38d6:	f1 1c       	adc	r15, r1
    38d8:	c7 01       	movw	r24, r14
    38da:	0e 94 bb 1a 	call	0x3576	; 0x3576 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
    38de:	dc 2f       	mov	r29, r28
    38e0:	cc 27       	eor	r28, r28
    38e2:	c8 2b       	or	r28, r24
  uint16_t ptr;
  ptr = readSnRX_RD(s);
  read_data(s, ptr, data, len);
    38e4:	85 01       	movw	r16, r10
    38e6:	92 01       	movw	r18, r4
    38e8:	ae 01       	movw	r20, r28
    38ea:	67 2d       	mov	r22, r7
    38ec:	c4 01       	movw	r24, r8
    38ee:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <_ZN10W5100Class9read_dataEhjPVhj>
  if (!peek)
    38f2:	61 10       	cpse	r6, r1
    38f4:	0a c0       	rjmp	.+20     	; 0x390a <_ZN10W5100Class20recv_data_processingEhPhjh+0x82>
  {
    ptr += len;
    38f6:	ca 0d       	add	r28, r10
    38f8:	db 1d       	adc	r29, r11
uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    38fa:	6d 2f       	mov	r22, r29
    38fc:	c6 01       	movw	r24, r12
    38fe:	0e 94 0a 1a 	call	0x3414	; 0x3414 <_ZN10W5100Class5writeEjh>
    3902:	6c 2f       	mov	r22, r28
    3904:	c7 01       	movw	r24, r14
    3906:	0e 94 0a 1a 	call	0x3414	; 0x3414 <_ZN10W5100Class5writeEjh>
    writeSnRX_RD(s, ptr);
  }
}
    390a:	df 91       	pop	r29
    390c:	cf 91       	pop	r28
    390e:	1f 91       	pop	r17
    3910:	0f 91       	pop	r16
    3912:	ff 90       	pop	r15
    3914:	ef 90       	pop	r14
    3916:	df 90       	pop	r13
    3918:	cf 90       	pop	r12
    391a:	bf 90       	pop	r11
    391c:	af 90       	pop	r10
    391e:	9f 90       	pop	r9
    3920:	8f 90       	pop	r8
    3922:	7f 90       	pop	r7
    3924:	6f 90       	pop	r6
    3926:	5f 90       	pop	r5
    3928:	4f 90       	pop	r4
    392a:	08 95       	ret

0000392c <_ZN10W5100Class9execCmdSnEh7SockCMD>:
#endif
  }
  return _len;
}

void W5100Class::execCmdSn(SOCKET s, SockCMD _cmd) {
    392c:	cf 93       	push	r28
    392e:	df 93       	push	r29
    3930:	c6 2f       	mov	r28, r22
    3932:	d0 e0       	ldi	r29, 0x00	; 0
    3934:	dc 2f       	mov	r29, r28
    3936:	cc 27       	eor	r28, r28
    3938:	cf 5f       	subi	r28, 0xFF	; 255
    393a:	db 4f       	sbci	r29, 0xFB	; 251
    393c:	64 2f       	mov	r22, r20
    393e:	ce 01       	movw	r24, r28
    3940:	0e 94 0a 1a 	call	0x3414	; 0x3414 <_ZN10W5100Class5writeEjh>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    3944:	ce 01       	movw	r24, r28
    3946:	0e 94 bb 1a 	call	0x3576	; 0x3576 <_ZN10W5100Class4readEj>
  // Send command to socket
  writeSnCR(s, _cmd);
  // Wait for command to complete
  while (readSnCR(s))
    394a:	81 11       	cpse	r24, r1
    394c:	fb cf       	rjmp	.-10     	; 0x3944 <_ZN10W5100Class9execCmdSnEh7SockCMD+0x18>
    ;
}
    394e:	df 91       	pop	r29
    3950:	cf 91       	pop	r28
    3952:	08 95       	ret

00003954 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    3954:	0f 93       	push	r16
    3956:	00 e0       	ldi	r16, 0x00	; 0
    3958:	20 e0       	ldi	r18, 0x00	; 0
    395a:	40 e0       	ldi	r20, 0x00	; 0
    395c:	60 e0       	ldi	r22, 0x00	; 0
    395e:	8c ef       	ldi	r24, 0xFC	; 252
    3960:	93 e0       	ldi	r25, 0x03	; 3
    3962:	0e 94 8c 06 	call	0xd18	; 0xd18 <_ZN9IPAddressC1Ehhhh>
    3966:	0f 91       	pop	r16
    3968:	08 95       	ret

0000396a <_ZN9DNSClient5beginERK9IPAddress>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    396a:	fb 01       	movw	r30, r22
    396c:	42 81       	ldd	r20, Z+2	; 0x02
    396e:	53 81       	ldd	r21, Z+3	; 0x03
    3970:	64 81       	ldd	r22, Z+4	; 0x04
    3972:	75 81       	ldd	r23, Z+5	; 0x05
    3974:	fc 01       	movw	r30, r24
    3976:	42 83       	std	Z+2, r20	; 0x02
    3978:	53 83       	std	Z+3, r21	; 0x03
    397a:	64 83       	std	Z+4, r22	; 0x04
    397c:	75 83       	std	Z+5, r23	; 0x05
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    397e:	17 82       	std	Z+7, r1	; 0x07
    3980:	16 82       	std	Z+6, r1	; 0x06
    3982:	08 95       	ret

00003984 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:
}


int DNSClient::inet_aton(const char* address, IPAddress& result)
{
    3984:	1f 93       	push	r17
    3986:	cf 93       	push	r28
    3988:	df 93       	push	r29
    398a:	ea 01       	movw	r28, r20
    398c:	e6 2f       	mov	r30, r22
    398e:	f7 2f       	mov	r31, r23
    uint16_t acc = 0; // Accumulator
    uint8_t dots = 0;
    3990:	30 e0       	ldi	r19, 0x00	; 0
}


int DNSClient::inet_aton(const char* address, IPAddress& result)
{
    uint16_t acc = 0; // Accumulator
    3992:	80 e0       	ldi	r24, 0x00	; 0
    3994:	90 e0       	ldi	r25, 0x00	; 0
            if (dots == 3) {
                // Too much dots (there must be 3 dots)
                return 0;
            }
            result[dots++] = acc;
            acc = 0;
    3996:	10 e0       	ldi	r17, 0x00	; 0
    3998:	40 e0       	ldi	r20, 0x00	; 0
int DNSClient::inet_aton(const char* address, IPAddress& result)
{
    uint16_t acc = 0; // Accumulator
    uint8_t dots = 0;

    while (*address)
    399a:	21 91       	ld	r18, Z+
    399c:	22 23       	and	r18, r18
    399e:	21 f1       	breq	.+72     	; 0x39e8 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x64>
    {
        char c = *address++;
        if (c >= '0' && c <= '9')
    39a0:	50 ed       	ldi	r21, 0xD0	; 208
    39a2:	52 0f       	add	r21, r18
    39a4:	5a 30       	cpi	r21, 0x0A	; 10
    39a6:	98 f4       	brcc	.+38     	; 0x39ce <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x4a>
    39a8:	bc 01       	movw	r22, r24
    39aa:	66 0f       	add	r22, r22
    39ac:	77 1f       	adc	r23, r23
    39ae:	88 0f       	add	r24, r24
    39b0:	99 1f       	adc	r25, r25
    39b2:	88 0f       	add	r24, r24
    39b4:	99 1f       	adc	r25, r25
    39b6:	88 0f       	add	r24, r24
    39b8:	99 1f       	adc	r25, r25
    39ba:	86 0f       	add	r24, r22
    39bc:	97 1f       	adc	r25, r23
    39be:	c0 97       	sbiw	r24, 0x30	; 48
        {
            acc = acc * 10 + (c - '0');
    39c0:	82 0f       	add	r24, r18
    39c2:	91 1d       	adc	r25, r1
            if (acc > 255) {
    39c4:	8f 3f       	cpi	r24, 0xFF	; 255
    39c6:	91 05       	cpc	r25, r1
    39c8:	41 f3       	breq	.-48     	; 0x399a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x16>
    39ca:	38 f3       	brcs	.-50     	; 0x399a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x16>
    39cc:	13 c0       	rjmp	.+38     	; 0x39f4 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x70>
                // Value out of [0..255] range
                return 0;
            }
        }
        else if (c == '.')
    39ce:	2e 32       	cpi	r18, 0x2E	; 46
    39d0:	a1 f4       	brne	.+40     	; 0x39fa <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
        {
            if (dots == 3) {
    39d2:	33 30       	cpi	r19, 0x03	; 3
    39d4:	a9 f0       	breq	.+42     	; 0x3a00 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x7c>
                // Too much dots (there must be 3 dots)
                return 0;
            }
            result[dots++] = acc;
    39d6:	de 01       	movw	r26, r28
    39d8:	a3 0f       	add	r26, r19
    39da:	b1 1d       	adc	r27, r1
    39dc:	12 96       	adiw	r26, 0x02	; 2
    39de:	8c 93       	st	X, r24
    39e0:	3f 5f       	subi	r19, 0xFF	; 255
            acc = 0;
    39e2:	81 2f       	mov	r24, r17
    39e4:	94 2f       	mov	r25, r20
    39e6:	d9 cf       	rjmp	.-78     	; 0x399a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x16>
            // Invalid char
            return 0;
        }
    }

    if (dots != 3) {
    39e8:	33 30       	cpi	r19, 0x03	; 3
    39ea:	69 f4       	brne	.+26     	; 0x3a06 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x82>
        // Too few dots (there must be 3 dots)
        return 0;
    }
    result[3] = acc;
    39ec:	8d 83       	std	Y+5, r24	; 0x05
    return 1;
    39ee:	81 e0       	ldi	r24, 0x01	; 1
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	0b c0       	rjmp	.+22     	; 0x3a0a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x86>
        if (c >= '0' && c <= '9')
        {
            acc = acc * 10 + (c - '0');
            if (acc > 255) {
                // Value out of [0..255] range
                return 0;
    39f4:	80 e0       	ldi	r24, 0x00	; 0
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	08 c0       	rjmp	.+16     	; 0x3a0a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x86>
            acc = 0;
        }
        else
        {
            // Invalid char
            return 0;
    39fa:	80 e0       	ldi	r24, 0x00	; 0
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	05 c0       	rjmp	.+10     	; 0x3a0a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x86>
        }
        else if (c == '.')
        {
            if (dots == 3) {
                // Too much dots (there must be 3 dots)
                return 0;
    3a00:	80 e0       	ldi	r24, 0x00	; 0
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	02 c0       	rjmp	.+4      	; 0x3a0a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x86>
        }
    }

    if (dots != 3) {
        // Too few dots (there must be 3 dots)
        return 0;
    3a06:	80 e0       	ldi	r24, 0x00	; 0
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    }
    result[3] = acc;
    return 1;
}
    3a0a:	df 91       	pop	r29
    3a0c:	cf 91       	pop	r28
    3a0e:	1f 91       	pop	r17
    3a10:	08 95       	ret

00003a12 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    3a12:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    3a14:	00 e0       	ldi	r16, 0x00	; 0
    3a16:	20 e0       	ldi	r18, 0x00	; 0
    3a18:	40 e0       	ldi	r20, 0x00	; 0
    3a1a:	60 e0       	ldi	r22, 0x00	; 0
    3a1c:	82 e0       	ldi	r24, 0x02	; 2
    3a1e:	94 e0       	ldi	r25, 0x04	; 4
    3a20:	0e 94 8c 06 	call	0xd18	; 0xd18 <_ZN9IPAddressC1Ehhhh>
    3a24:	0f 91       	pop	r16
    3a26:	08 95       	ret

00003a28 <_ZN9DNSClient12BuildRequestEPKc>:

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
    3a28:	af 92       	push	r10
    3a2a:	bf 92       	push	r11
    3a2c:	cf 92       	push	r12
    3a2e:	df 92       	push	r13
    3a30:	ef 92       	push	r14
    3a32:	ff 92       	push	r15
    3a34:	0f 93       	push	r16
    3a36:	1f 93       	push	r17
    3a38:	cf 93       	push	r28
    3a3a:	df 93       	push	r29
    3a3c:	00 d0       	rcall	.+0      	; 0x3a3e <_ZN9DNSClient12BuildRequestEPKc+0x16>
    3a3e:	00 d0       	rcall	.+0      	; 0x3a40 <_ZN9DNSClient12BuildRequestEPKc+0x18>
    3a40:	1f 92       	push	r1
    3a42:	cd b7       	in	r28, 0x3d	; 61
    3a44:	de b7       	in	r29, 0x3e	; 62
    3a46:	6c 01       	movw	r12, r24
    3a48:	8b 01       	movw	r16, r22
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    3a4a:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <millis>
    3a4e:	f6 01       	movw	r30, r12
    3a50:	77 83       	std	Z+7, r23	; 0x07
    3a52:	66 83       	std	Z+6, r22	; 0x06
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    uint16_t _id = htons(iRequestId);
    3a54:	76 27       	eor	r23, r22
    3a56:	67 27       	eor	r22, r23
    3a58:	76 27       	eor	r23, r22
    3a5a:	7c 83       	std	Y+4, r23	; 0x04
    3a5c:	6b 83       	std	Y+3, r22	; 0x03
    iUdp.write((uint8_t*)&_id, sizeof(_id));
    3a5e:	f8 e0       	ldi	r31, 0x08	; 8
    3a60:	cf 0e       	add	r12, r31
    3a62:	d1 1c       	adc	r13, r1
    3a64:	42 e0       	ldi	r20, 0x02	; 2
    3a66:	50 e0       	ldi	r21, 0x00	; 0
    3a68:	be 01       	movw	r22, r28
    3a6a:	6d 5f       	subi	r22, 0xFD	; 253
    3a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a6e:	c6 01       	movw	r24, r12
    3a70:	0e 94 c7 12 	call	0x258e	; 0x258e <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    3a74:	81 e0       	ldi	r24, 0x01	; 1
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	9a 83       	std	Y+2, r25	; 0x02
    3a7a:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3a7c:	42 e0       	ldi	r20, 0x02	; 2
    3a7e:	50 e0       	ldi	r21, 0x00	; 0
    3a80:	be 01       	movw	r22, r28
    3a82:	6f 5f       	subi	r22, 0xFF	; 255
    3a84:	7f 4f       	sbci	r23, 0xFF	; 255
    3a86:	c6 01       	movw	r24, r12
    3a88:	0e 94 c7 12 	call	0x258e	; 0x258e <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(1);  // One question record
    3a8c:	80 e0       	ldi	r24, 0x00	; 0
    3a8e:	91 e0       	ldi	r25, 0x01	; 1
    3a90:	9a 83       	std	Y+2, r25	; 0x02
    3a92:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3a94:	42 e0       	ldi	r20, 0x02	; 2
    3a96:	50 e0       	ldi	r21, 0x00	; 0
    3a98:	be 01       	movw	r22, r28
    3a9a:	6f 5f       	subi	r22, 0xFF	; 255
    3a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a9e:	c6 01       	movw	r24, r12
    3aa0:	0e 94 c7 12 	call	0x258e	; 0x258e <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = 0;  // Zero answer records
    3aa4:	1a 82       	std	Y+2, r1	; 0x02
    3aa6:	19 82       	std	Y+1, r1	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3aa8:	42 e0       	ldi	r20, 0x02	; 2
    3aaa:	50 e0       	ldi	r21, 0x00	; 0
    3aac:	be 01       	movw	r22, r28
    3aae:	6f 5f       	subi	r22, 0xFF	; 255
    3ab0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ab2:	c6 01       	movw	r24, r12
    3ab4:	0e 94 c7 12 	call	0x258e	; 0x258e <_ZN11EthernetUDP5writeEPKhj>

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3ab8:	42 e0       	ldi	r20, 0x02	; 2
    3aba:	50 e0       	ldi	r21, 0x00	; 0
    3abc:	be 01       	movw	r22, r28
    3abe:	6f 5f       	subi	r22, 0xFF	; 255
    3ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ac2:	c6 01       	movw	r24, r12
    3ac4:	0e 94 c7 12 	call	0x258e	; 0x258e <_ZN11EthernetUDP5writeEPKhj>
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3ac8:	42 e0       	ldi	r20, 0x02	; 2
    3aca:	50 e0       	ldi	r21, 0x00	; 0
    3acc:	be 01       	movw	r22, r28
    3ace:	6f 5f       	subi	r22, 0xFF	; 255
    3ad0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ad2:	c6 01       	movw	r24, r12
    3ad4:	0e 94 c7 12 	call	0x258e	; 0x258e <_ZN11EthernetUDP5writeEPKhj>
    // Build question
    const char* start =aName;
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
    3ad8:	f8 01       	movw	r30, r16
    3ada:	80 81       	ld	r24, Z
    3adc:	88 23       	and	r24, r24
    3ade:	e1 f1       	breq	.+120    	; 0x3b58 <_ZN9DNSClient12BuildRequestEPKc+0x130>
    3ae0:	78 01       	movw	r14, r16
    3ae2:	01 c0       	rjmp	.+2      	; 0x3ae6 <_ZN9DNSClient12BuildRequestEPKc+0xbe>
    3ae4:	78 01       	movw	r14, r16
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    3ae6:	f8 01       	movw	r30, r16
    3ae8:	80 81       	ld	r24, Z
    3aea:	88 23       	and	r24, r24
    3aec:	09 f1       	breq	.+66     	; 0x3b30 <_ZN9DNSClient12BuildRequestEPKc+0x108>
    3aee:	8e 32       	cpi	r24, 0x2E	; 46
    3af0:	59 f1       	breq	.+86     	; 0x3b48 <_ZN9DNSClient12BuildRequestEPKc+0x120>
    3af2:	31 96       	adiw	r30, 0x01	; 1
    3af4:	02 c0       	rjmp	.+4      	; 0x3afa <_ZN9DNSClient12BuildRequestEPKc+0xd2>
    3af6:	9e 32       	cpi	r25, 0x2E	; 46
    3af8:	41 f1       	breq	.+80     	; 0x3b4a <_ZN9DNSClient12BuildRequestEPKc+0x122>
        {
            end++;
    3afa:	5f 01       	movw	r10, r30
    // Run through the name being requested
    while (*end)
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    3afc:	91 91       	ld	r25, Z+
    3afe:	91 11       	cpse	r25, r1
    3b00:	fa cf       	rjmp	.-12     	; 0x3af6 <_ZN9DNSClient12BuildRequestEPKc+0xce>
    3b02:	17 c0       	rjmp	.+46     	; 0x3b32 <_ZN9DNSClient12BuildRequestEPKc+0x10a>
        }

        if (end-start > 0)
        {
            // Write out the size of this section
            len = end-start;
    3b04:	0d 83       	std	Y+5, r16	; 0x05
            iUdp.write(&len, sizeof(len));
    3b06:	41 e0       	ldi	r20, 0x01	; 1
    3b08:	50 e0       	ldi	r21, 0x00	; 0
    3b0a:	be 01       	movw	r22, r28
    3b0c:	6b 5f       	subi	r22, 0xFB	; 251
    3b0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b10:	c6 01       	movw	r24, r12
    3b12:	0e 94 c7 12 	call	0x258e	; 0x258e <_ZN11EthernetUDP5writeEPKhj>
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    3b16:	a8 01       	movw	r20, r16
    3b18:	b7 01       	movw	r22, r14
    3b1a:	c6 01       	movw	r24, r12
    3b1c:	0e 94 c7 12 	call	0x258e	; 0x258e <_ZN11EthernetUDP5writeEPKhj>
        }
        start = end+1;
    3b20:	85 01       	movw	r16, r10
    3b22:	0f 5f       	subi	r16, 0xFF	; 255
    3b24:	1f 4f       	sbci	r17, 0xFF	; 255
    // Build question
    const char* start =aName;
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
    3b26:	f5 01       	movw	r30, r10
    3b28:	80 81       	ld	r24, Z
    3b2a:	81 11       	cpse	r24, r1
    3b2c:	db cf       	rjmp	.-74     	; 0x3ae4 <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    3b2e:	14 c0       	rjmp	.+40     	; 0x3b58 <_ZN9DNSClient12BuildRequestEPKc+0x130>
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    3b30:	58 01       	movw	r10, r16
        {
            end++;
        }

        if (end-start > 0)
    3b32:	85 01       	movw	r16, r10
    3b34:	0e 19       	sub	r16, r14
    3b36:	1f 09       	sbc	r17, r15
    3b38:	10 16       	cp	r1, r16
    3b3a:	11 06       	cpc	r1, r17
    3b3c:	1c f3       	brlt	.-58     	; 0x3b04 <_ZN9DNSClient12BuildRequestEPKc+0xdc>
    3b3e:	0c c0       	rjmp	.+24     	; 0x3b58 <_ZN9DNSClient12BuildRequestEPKc+0x130>
            len = end-start;
            iUdp.write(&len, sizeof(len));
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
        }
        start = end+1;
    3b40:	85 01       	movw	r16, r10
    3b42:	0f 5f       	subi	r16, 0xFF	; 255
    3b44:	1f 4f       	sbci	r17, 0xFF	; 255
    3b46:	ce cf       	rjmp	.-100    	; 0x3ae4 <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    // Run through the name being requested
    while (*end)
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    3b48:	58 01       	movw	r10, r16
        {
            end++;
        }

        if (end-start > 0)
    3b4a:	85 01       	movw	r16, r10
    3b4c:	0e 19       	sub	r16, r14
    3b4e:	1f 09       	sbc	r17, r15
    3b50:	10 16       	cp	r1, r16
    3b52:	11 06       	cpc	r1, r17
    3b54:	ac f7       	brge	.-22     	; 0x3b40 <_ZN9DNSClient12BuildRequestEPKc+0x118>
    3b56:	d6 cf       	rjmp	.-84     	; 0x3b04 <_ZN9DNSClient12BuildRequestEPKc+0xdc>
        start = end+1;
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    3b58:	1d 82       	std	Y+5, r1	; 0x05
    iUdp.write(&len, sizeof(len));
    3b5a:	41 e0       	ldi	r20, 0x01	; 1
    3b5c:	50 e0       	ldi	r21, 0x00	; 0
    3b5e:	be 01       	movw	r22, r28
    3b60:	6b 5f       	subi	r22, 0xFB	; 251
    3b62:	7f 4f       	sbci	r23, 0xFF	; 255
    3b64:	c6 01       	movw	r24, r12
    3b66:	0e 94 c7 12 	call	0x258e	; 0x258e <_ZN11EthernetUDP5writeEPKhj>
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    3b6a:	00 e0       	ldi	r16, 0x00	; 0
    3b6c:	11 e0       	ldi	r17, 0x01	; 1
    3b6e:	1a 83       	std	Y+2, r17	; 0x02
    3b70:	09 83       	std	Y+1, r16	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3b72:	42 e0       	ldi	r20, 0x02	; 2
    3b74:	50 e0       	ldi	r21, 0x00	; 0
    3b76:	be 01       	movw	r22, r28
    3b78:	6f 5f       	subi	r22, 0xFF	; 255
    3b7a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b7c:	c6 01       	movw	r24, r12
    3b7e:	0e 94 c7 12 	call	0x258e	; 0x258e <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    3b82:	1a 83       	std	Y+2, r17	; 0x02
    3b84:	09 83       	std	Y+1, r16	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3b86:	42 e0       	ldi	r20, 0x02	; 2
    3b88:	50 e0       	ldi	r21, 0x00	; 0
    3b8a:	be 01       	movw	r22, r28
    3b8c:	6f 5f       	subi	r22, 0xFF	; 255
    3b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b90:	c6 01       	movw	r24, r12
    3b92:	0e 94 c7 12 	call	0x258e	; 0x258e <_ZN11EthernetUDP5writeEPKhj>
    // Success!  Everything buffered okay
    return 1;
}
    3b96:	81 e0       	ldi	r24, 0x01	; 1
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	0f 90       	pop	r0
    3b9c:	0f 90       	pop	r0
    3b9e:	0f 90       	pop	r0
    3ba0:	0f 90       	pop	r0
    3ba2:	0f 90       	pop	r0
    3ba4:	df 91       	pop	r29
    3ba6:	cf 91       	pop	r28
    3ba8:	1f 91       	pop	r17
    3baa:	0f 91       	pop	r16
    3bac:	ff 90       	pop	r15
    3bae:	ef 90       	pop	r14
    3bb0:	df 90       	pop	r13
    3bb2:	cf 90       	pop	r12
    3bb4:	bf 90       	pop	r11
    3bb6:	af 90       	pop	r10
    3bb8:	08 95       	ret

00003bba <_ZN9DNSClient15ProcessResponseEjR9IPAddress>:


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    3bba:	2f 92       	push	r2
    3bbc:	3f 92       	push	r3
    3bbe:	4f 92       	push	r4
    3bc0:	5f 92       	push	r5
    3bc2:	6f 92       	push	r6
    3bc4:	7f 92       	push	r7
    3bc6:	8f 92       	push	r8
    3bc8:	9f 92       	push	r9
    3bca:	af 92       	push	r10
    3bcc:	bf 92       	push	r11
    3bce:	cf 92       	push	r12
    3bd0:	df 92       	push	r13
    3bd2:	ef 92       	push	r14
    3bd4:	ff 92       	push	r15
    3bd6:	0f 93       	push	r16
    3bd8:	1f 93       	push	r17
    3bda:	cf 93       	push	r28
    3bdc:	df 93       	push	r29
    3bde:	cd b7       	in	r28, 0x3d	; 61
    3be0:	de b7       	in	r29, 0x3e	; 62
    3be2:	63 97       	sbiw	r28, 0x13	; 19
    3be4:	0f b6       	in	r0, 0x3f	; 63
    3be6:	f8 94       	cli
    3be8:	de bf       	out	0x3e, r29	; 62
    3bea:	0f be       	out	0x3f, r0	; 63
    3bec:	cd bf       	out	0x3d, r28	; 61
    3bee:	6c 01       	movw	r12, r24
    3bf0:	7b 01       	movw	r14, r22
    3bf2:	1a 01       	movw	r2, r20
    uint32_t startTime = millis();
    3bf4:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <millis>
    3bf8:	4b 01       	movw	r8, r22
    3bfa:	5c 01       	movw	r10, r24

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    3bfc:	86 01       	movw	r16, r12
    3bfe:	08 5f       	subi	r16, 0xF8	; 248
    3c00:	1f 4f       	sbci	r17, 0xFF	; 255
    {
        if((millis() - startTime) > aTimeout)
    3c02:	27 01       	movw	r4, r14
    3c04:	61 2c       	mov	r6, r1
    3c06:	71 2c       	mov	r7, r1
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    3c08:	e0 2e       	mov	r14, r16
    3c0a:	f1 2e       	mov	r15, r17
    3c0c:	c8 01       	movw	r24, r16
    3c0e:	0e 94 31 13 	call	0x2662	; 0x2662 <_ZN11EthernetUDP11parsePacketEv>
    3c12:	18 16       	cp	r1, r24
    3c14:	19 06       	cpc	r1, r25
    3c16:	ac f0       	brlt	.+42     	; 0x3c42 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x88>
    {
        if((millis() - startTime) > aTimeout)
    3c18:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <millis>
    3c1c:	dc 01       	movw	r26, r24
    3c1e:	cb 01       	movw	r24, r22
    3c20:	88 19       	sub	r24, r8
    3c22:	99 09       	sbc	r25, r9
    3c24:	aa 09       	sbc	r26, r10
    3c26:	bb 09       	sbc	r27, r11
    3c28:	48 16       	cp	r4, r24
    3c2a:	59 06       	cpc	r5, r25
    3c2c:	6a 06       	cpc	r6, r26
    3c2e:	7b 06       	cpc	r7, r27
    3c30:	08 f4       	brcc	.+2      	; 0x3c34 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x7a>
    3c32:	2c c1       	rjmp	.+600    	; 0x3e8c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2d2>
            return TIMED_OUT;
        delay(50);
    3c34:	62 e3       	ldi	r22, 0x32	; 50
    3c36:	70 e0       	ldi	r23, 0x00	; 0
    3c38:	80 e0       	ldi	r24, 0x00	; 0
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	0e 94 9c 0b 	call	0x1738	; 0x1738 <delay>
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    3c40:	e3 cf       	rjmp	.-58     	; 0x3c08 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x4e>

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    3c42:	f6 01       	movw	r30, r12
    3c44:	42 81       	ldd	r20, Z+2	; 0x02
    3c46:	53 81       	ldd	r21, Z+3	; 0x03
    3c48:	64 81       	ldd	r22, Z+4	; 0x04
    3c4a:	75 81       	ldd	r23, Z+5	; 0x05
    3c4c:	80 8d       	ldd	r24, Z+24	; 0x18
    3c4e:	91 8d       	ldd	r25, Z+25	; 0x19
    3c50:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3c52:	b3 8d       	ldd	r27, Z+27	; 0x1b
    3c54:	48 17       	cp	r20, r24
    3c56:	59 07       	cpc	r21, r25
    3c58:	6a 07       	cpc	r22, r26
    3c5a:	7b 07       	cpc	r23, r27
    3c5c:	09 f0       	breq	.+2      	; 0x3c60 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xa6>
    3c5e:	19 c1       	rjmp	.+562    	; 0x3e92 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2d8>
    3c60:	84 8d       	ldd	r24, Z+28	; 0x1c
    3c62:	95 8d       	ldd	r25, Z+29	; 0x1d
    3c64:	c5 97       	sbiw	r24, 0x35	; 53
    3c66:	09 f0       	breq	.+2      	; 0x3c6a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xb0>
    3c68:	17 c1       	rjmp	.+558    	; 0x3e98 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2de>
        // It's not from who we expected
        return INVALID_SERVER;
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    3c6a:	80 2f       	mov	r24, r16
    3c6c:	91 2f       	mov	r25, r17
    3c6e:	0e 94 57 12 	call	0x24ae	; 0x24ae <_ZN11EthernetUDP9availableEv>
    3c72:	0c 97       	sbiw	r24, 0x0c	; 12
    3c74:	0c f4       	brge	.+2      	; 0x3c78 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xbe>
    3c76:	13 c1       	rjmp	.+550    	; 0x3e9e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2e4>
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    3c78:	4c e0       	ldi	r20, 0x0C	; 12
    3c7a:	50 e0       	ldi	r21, 0x00	; 0
    3c7c:	be 01       	movw	r22, r28
    3c7e:	6f 5f       	subi	r22, 0xFF	; 255
    3c80:	7f 4f       	sbci	r23, 0xFF	; 255
    3c82:	80 2f       	mov	r24, r16
    3c84:	91 2f       	mov	r25, r17
    3c86:	0e 94 07 13 	call	0x260e	; 0x260e <_ZN11EthernetUDP4readEPhj>

    uint16_t header_flags = word(header[2], header[3]);
    3c8a:	6c 81       	ldd	r22, Y+4	; 0x04
    3c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c8e:	0e 94 9f 23 	call	0x473e	; 0x473e <_Z8makeWordhh>
    3c92:	9e 87       	std	Y+14, r25	; 0x0e
    3c94:	8d 87       	std	Y+13, r24	; 0x0d
    // Check that it's a response to this request
    if ( (iRequestId != word(header[0], header[1])) ||
    3c96:	f6 01       	movw	r30, r12
    3c98:	06 81       	ldd	r16, Z+6	; 0x06
    3c9a:	17 81       	ldd	r17, Z+7	; 0x07
    3c9c:	6a 81       	ldd	r22, Y+2	; 0x02
    3c9e:	89 81       	ldd	r24, Y+1	; 0x01
    3ca0:	0e 94 9f 23 	call	0x473e	; 0x473e <_Z8makeWordhh>
    3ca4:	08 17       	cp	r16, r24
    3ca6:	19 07       	cpc	r17, r25
    3ca8:	21 f4       	brne	.+8      	; 0x3cb2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xf8>
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    3caa:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cac:	9e 85       	ldd	r25, Y+14	; 0x0e
    }
    iUdp.read(header, DNS_HEADER_SIZE);

    uint16_t header_flags = word(header[2], header[3]);
    // Check that it's a response to this request
    if ( (iRequestId != word(header[0], header[1])) ||
    3cae:	99 23       	and	r25, r25
    3cb0:	3c f0       	brlt	.+14     	; 0x3cc0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x106>
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    3cb2:	8e 2d       	mov	r24, r14
    3cb4:	9f 2d       	mov	r25, r15
    3cb6:	0e 94 71 12 	call	0x24e2	; 0x24e2 <_ZN11EthernetUDP5flushEv>
        return INVALID_RESPONSE;
    3cba:	0c ef       	ldi	r16, 0xFC	; 252
    3cbc:	1f ef       	ldi	r17, 0xFF	; 255
    3cbe:	f1 c0       	rjmp	.+482    	; 0x3ea2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2e8>
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    3cc0:	8f 70       	andi	r24, 0x0F	; 15
    3cc2:	92 70       	andi	r25, 0x02	; 2
    3cc4:	89 2b       	or	r24, r25
    3cc6:	39 f0       	breq	.+14     	; 0x3cd6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x11c>
    {
        // Mark the entire packet as read
        iUdp.flush();
    3cc8:	8e 2d       	mov	r24, r14
    3cca:	9f 2d       	mov	r25, r15
    3ccc:	0e 94 71 12 	call	0x24e2	; 0x24e2 <_ZN11EthernetUDP5flushEv>
        return -5; //INVALID_RESPONSE;
    3cd0:	0b ef       	ldi	r16, 0xFB	; 251
    3cd2:	1f ef       	ldi	r17, 0xFF	; 255
    3cd4:	e6 c0       	rjmp	.+460    	; 0x3ea2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2e8>
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = word(header[6], header[7]);
    3cd6:	68 85       	ldd	r22, Y+8	; 0x08
    3cd8:	8f 81       	ldd	r24, Y+7	; 0x07
    3cda:	0e 94 9f 23 	call	0x473e	; 0x473e <_Z8makeWordhh>
    3cde:	5c 01       	movw	r10, r24
    if (answerCount == 0 )
    3ce0:	89 2b       	or	r24, r25
    3ce2:	39 f4       	brne	.+14     	; 0x3cf2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x138>
    {
        // Mark the entire packet as read
        iUdp.flush();
    3ce4:	8e 2d       	mov	r24, r14
    3ce6:	9f 2d       	mov	r25, r15
    3ce8:	0e 94 71 12 	call	0x24e2	; 0x24e2 <_ZN11EthernetUDP5flushEv>
        return -6; //INVALID_RESPONSE;
    3cec:	0a ef       	ldi	r16, 0xFA	; 250
    3cee:	1f ef       	ldi	r17, 0xFF	; 255
    3cf0:	d8 c0       	rjmp	.+432    	; 0x3ea2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2e8>
    3cf2:	00 e0       	ldi	r16, 0x00	; 0
    3cf4:	10 e0       	ldi	r17, 0x00	; 0
    }

    // Skip over any questions
    for (uint16_t i =0; i < word(header[4], header[5]); i++)
    3cf6:	6e 81       	ldd	r22, Y+6	; 0x06
    3cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    3cfa:	0e 94 9f 23 	call	0x473e	; 0x473e <_Z8makeWordhh>
    3cfe:	08 17       	cp	r16, r24
    3d00:	19 07       	cpc	r17, r25
    3d02:	68 f5       	brcc	.+90     	; 0x3d5e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1a4>
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    3d04:	41 e0       	ldi	r20, 0x01	; 1
    3d06:	50 e0       	ldi	r21, 0x00	; 0
    3d08:	be 01       	movw	r22, r28
    3d0a:	61 5f       	subi	r22, 0xF1	; 241
    3d0c:	7f 4f       	sbci	r23, 0xFF	; 255
    3d0e:	8e 2d       	mov	r24, r14
    3d10:	9f 2d       	mov	r25, r15
    3d12:	0e 94 07 13 	call	0x260e	; 0x260e <_ZN11EthernetUDP4readEPhj>
            if (len > 0)
    3d16:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d18:	88 23       	and	r24, r24
    3d1a:	71 f0       	breq	.+28     	; 0x3d38 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17e>
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    3d1c:	81 50       	subi	r24, 0x01	; 1
    3d1e:	8f 87       	std	Y+15, r24	; 0x0f
                {
                    iUdp.read(); // we don't care about the returned byte
    3d20:	8e 2d       	mov	r24, r14
    3d22:	9f 2d       	mov	r25, r15
    3d24:	0e 94 db 12 	call	0x25b6	; 0x25b6 <_ZN11EthernetUDP4readEv>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    3d28:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d2a:	9f ef       	ldi	r25, 0xFF	; 255
    3d2c:	98 0f       	add	r25, r24
    3d2e:	9f 87       	std	Y+15, r25	; 0x0f
    3d30:	81 11       	cpse	r24, r1
    3d32:	f6 cf       	rjmp	.-20     	; 0x3d20 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x166>
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    3d34:	91 11       	cpse	r25, r1
    3d36:	e6 cf       	rjmp	.-52     	; 0x3d04 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x14a>

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    3d38:	8e 2d       	mov	r24, r14
    3d3a:	9f 2d       	mov	r25, r15
    3d3c:	0e 94 db 12 	call	0x25b6	; 0x25b6 <_ZN11EthernetUDP4readEv>
    3d40:	8e 2d       	mov	r24, r14
    3d42:	9f 2d       	mov	r25, r15
    3d44:	0e 94 db 12 	call	0x25b6	; 0x25b6 <_ZN11EthernetUDP4readEv>
    3d48:	8e 2d       	mov	r24, r14
    3d4a:	9f 2d       	mov	r25, r15
    3d4c:	0e 94 db 12 	call	0x25b6	; 0x25b6 <_ZN11EthernetUDP4readEv>
    3d50:	8e 2d       	mov	r24, r14
    3d52:	9f 2d       	mov	r25, r15
    3d54:	0e 94 db 12 	call	0x25b6	; 0x25b6 <_ZN11EthernetUDP4readEv>
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < word(header[4], header[5]); i++)
    3d58:	0f 5f       	subi	r16, 0xFF	; 255
    3d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d5c:	cc cf       	rjmp	.-104    	; 0x3cf6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13c>
    3d5e:	c1 2c       	mov	r12, r1
    3d60:	d1 2c       	mov	r13, r1
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    3d62:	41 e0       	ldi	r20, 0x01	; 1
    3d64:	50 e0       	ldi	r21, 0x00	; 0
    3d66:	be 01       	movw	r22, r28
    3d68:	6d 5e       	subi	r22, 0xED	; 237
    3d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d6c:	8e 2d       	mov	r24, r14
    3d6e:	9f 2d       	mov	r25, r15
    3d70:	0e 94 07 13 	call	0x260e	; 0x260e <_ZN11EthernetUDP4readEPhj>
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    3d74:	8b 89       	ldd	r24, Y+19	; 0x13
    3d76:	98 2f       	mov	r25, r24
    3d78:	90 7c       	andi	r25, 0xC0	; 192
    3d7a:	79 f4       	brne	.+30     	; 0x3d9a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1e0>
            {
                // It's just a normal label
                if (len > 0)
    3d7c:	88 23       	and	r24, r24
    3d7e:	a9 f0       	breq	.+42     	; 0x3daa <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1f0>
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    3d80:	81 50       	subi	r24, 0x01	; 1
    3d82:	8b 8b       	std	Y+19, r24	; 0x13
                    {
                        iUdp.read(); // we don't care about the returned byte
    3d84:	8e 2d       	mov	r24, r14
    3d86:	9f 2d       	mov	r25, r15
    3d88:	0e 94 db 12 	call	0x25b6	; 0x25b6 <_ZN11EthernetUDP4readEv>
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    3d8c:	8b 89       	ldd	r24, Y+19	; 0x13
    3d8e:	9f ef       	ldi	r25, 0xFF	; 255
    3d90:	98 0f       	add	r25, r24
    3d92:	9b 8b       	std	Y+19, r25	; 0x13
    3d94:	81 11       	cpse	r24, r1
    3d96:	f6 cf       	rjmp	.-20     	; 0x3d84 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ca>
    3d98:	06 c0       	rjmp	.+12     	; 0x3da6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ec>
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    3d9a:	8e 2d       	mov	r24, r14
    3d9c:	9f 2d       	mov	r25, r15
    3d9e:	0e 94 db 12 	call	0x25b6	; 0x25b6 <_ZN11EthernetUDP4readEv>
                // And set len so that we drop out of the name loop
                len = 0;
    3da2:	1b 8a       	std	Y+19, r1	; 0x13
    3da4:	02 c0       	rjmp	.+4      	; 0x3daa <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1f0>
            }
        } while (len != 0);
    3da6:	91 11       	cpse	r25, r1
    3da8:	dc cf       	rjmp	.-72     	; 0x3d62 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1a8>

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    3daa:	42 e0       	ldi	r20, 0x02	; 2
    3dac:	50 e0       	ldi	r21, 0x00	; 0
    3dae:	be 01       	movw	r22, r28
    3db0:	6f 5e       	subi	r22, 0xEF	; 239
    3db2:	7f 4f       	sbci	r23, 0xFF	; 255
    3db4:	8e 2d       	mov	r24, r14
    3db6:	9f 2d       	mov	r25, r15
    3db8:	0e 94 07 13 	call	0x260e	; 0x260e <_ZN11EthernetUDP4readEPhj>
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    3dbc:	42 e0       	ldi	r20, 0x02	; 2
    3dbe:	50 e0       	ldi	r21, 0x00	; 0
    3dc0:	be 01       	movw	r22, r28
    3dc2:	61 5f       	subi	r22, 0xF1	; 241
    3dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    3dc6:	8e 2d       	mov	r24, r14
    3dc8:	9f 2d       	mov	r25, r15
    3dca:	0e 94 07 13 	call	0x260e	; 0x260e <_ZN11EthernetUDP4readEPhj>

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    3dce:	8e 2d       	mov	r24, r14
    3dd0:	9f 2d       	mov	r25, r15
    3dd2:	0e 94 db 12 	call	0x25b6	; 0x25b6 <_ZN11EthernetUDP4readEv>
    3dd6:	8e 2d       	mov	r24, r14
    3dd8:	9f 2d       	mov	r25, r15
    3dda:	0e 94 db 12 	call	0x25b6	; 0x25b6 <_ZN11EthernetUDP4readEv>
    3dde:	8e 2d       	mov	r24, r14
    3de0:	9f 2d       	mov	r25, r15
    3de2:	0e 94 db 12 	call	0x25b6	; 0x25b6 <_ZN11EthernetUDP4readEv>
    3de6:	8e 2d       	mov	r24, r14
    3de8:	9f 2d       	mov	r25, r15
    3dea:	0e 94 db 12 	call	0x25b6	; 0x25b6 <_ZN11EthernetUDP4readEv>
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    3dee:	42 e0       	ldi	r20, 0x02	; 2
    3df0:	50 e0       	ldi	r21, 0x00	; 0
    3df2:	be 01       	movw	r22, r28
    3df4:	63 5f       	subi	r22, 0xF3	; 243
    3df6:	7f 4f       	sbci	r23, 0xFF	; 255
    3df8:	8e 2d       	mov	r24, r14
    3dfa:	9f 2d       	mov	r25, r15
    3dfc:	0e 94 07 13 	call	0x260e	; 0x260e <_ZN11EthernetUDP4readEPhj>

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    3e00:	89 89       	ldd	r24, Y+17	; 0x11
    3e02:	9a 89       	ldd	r25, Y+18	; 0x12
    3e04:	81 15       	cp	r24, r1
    3e06:	91 40       	sbci	r25, 0x01	; 1
    3e08:	39 f0       	breq	.+14     	; 0x3e18 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x25e>
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    3e0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e0e:	89 2b       	or	r24, r25
    3e10:	79 f1       	breq	.+94     	; 0x3e70 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2b6>
    3e12:	00 e0       	ldi	r16, 0x00	; 0
    3e14:	10 e0       	ldi	r17, 0x00	; 0
    3e16:	1e c0       	rjmp	.+60     	; 0x3e54 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x29a>

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    3e18:	0f 85       	ldd	r16, Y+15	; 0x0f
    3e1a:	18 89       	ldd	r17, Y+16	; 0x10
    3e1c:	10 27       	eor	r17, r16
    3e1e:	01 27       	eor	r16, r17
    3e20:	10 27       	eor	r17, r16
    3e22:	01 30       	cpi	r16, 0x01	; 1
    3e24:	11 05       	cpc	r17, r1
    3e26:	89 f7       	brne	.-30     	; 0x3e0a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x250>
        {
            if (htons(header_flags) != 4)
    3e28:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e2c:	81 15       	cp	r24, r1
    3e2e:	94 40       	sbci	r25, 0x04	; 4
    3e30:	39 f0       	breq	.+14     	; 0x3e40 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x286>
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    3e32:	8e 2d       	mov	r24, r14
    3e34:	9f 2d       	mov	r25, r15
    3e36:	0e 94 71 12 	call	0x24e2	; 0x24e2 <_ZN11EthernetUDP5flushEv>
                return -9;//INVALID_RESPONSE;
    3e3a:	07 ef       	ldi	r16, 0xF7	; 247
    3e3c:	1f ef       	ldi	r17, 0xFF	; 255
    3e3e:	31 c0       	rjmp	.+98     	; 0x3ea2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2e8>

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    3e40:	b1 01       	movw	r22, r2
    3e42:	6e 5f       	subi	r22, 0xFE	; 254
    3e44:	7f 4f       	sbci	r23, 0xFF	; 255
            }
            iUdp.read(aAddress.raw_address(), 4);
    3e46:	44 e0       	ldi	r20, 0x04	; 4
    3e48:	50 e0       	ldi	r21, 0x00	; 0
    3e4a:	8e 2d       	mov	r24, r14
    3e4c:	9f 2d       	mov	r25, r15
    3e4e:	0e 94 07 13 	call	0x260e	; 0x260e <_ZN11EthernetUDP4readEPhj>
            return SUCCESS;
    3e52:	27 c0       	rjmp	.+78     	; 0x3ea2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2e8>
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
            {
                iUdp.read(); // we don't care about the returned byte
    3e54:	8e 2d       	mov	r24, r14
    3e56:	9f 2d       	mov	r25, r15
    3e58:	0e 94 db 12 	call	0x25b6	; 0x25b6 <_ZN11EthernetUDP4readEv>
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    3e5c:	0f 5f       	subi	r16, 0xFF	; 255
    3e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e60:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e62:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e64:	98 27       	eor	r25, r24
    3e66:	89 27       	eor	r24, r25
    3e68:	98 27       	eor	r25, r24
    3e6a:	08 17       	cp	r16, r24
    3e6c:	19 07       	cpc	r17, r25
    3e6e:	90 f3       	brcs	.-28     	; 0x3e54 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x29a>
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    3e70:	8f ef       	ldi	r24, 0xFF	; 255
    3e72:	c8 1a       	sub	r12, r24
    3e74:	d8 0a       	sbc	r13, r24
    3e76:	ac 14       	cp	r10, r12
    3e78:	bd 04       	cpc	r11, r13
    3e7a:	09 f0       	breq	.+2      	; 0x3e7e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2c4>
    3e7c:	72 cf       	rjmp	.-284    	; 0x3d62 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1a8>
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    3e7e:	8e 2d       	mov	r24, r14
    3e80:	9f 2d       	mov	r25, r15
    3e82:	0e 94 71 12 	call	0x24e2	; 0x24e2 <_ZN11EthernetUDP5flushEv>

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    3e86:	06 ef       	ldi	r16, 0xF6	; 246
    3e88:	1f ef       	ldi	r17, 0xFF	; 255
    3e8a:	0b c0       	rjmp	.+22     	; 0x3ea2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2e8>

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    3e8c:	0f ef       	ldi	r16, 0xFF	; 255
    3e8e:	1f ef       	ldi	r17, 0xFF	; 255
    3e90:	08 c0       	rjmp	.+16     	; 0x3ea2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2e8>
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    3e92:	0e ef       	ldi	r16, 0xFE	; 254
    3e94:	1f ef       	ldi	r17, 0xFF	; 255
    3e96:	05 c0       	rjmp	.+10     	; 0x3ea2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2e8>
    3e98:	0e ef       	ldi	r16, 0xFE	; 254
    3e9a:	1f ef       	ldi	r17, 0xFF	; 255
    3e9c:	02 c0       	rjmp	.+4      	; 0x3ea2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2e8>
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    3e9e:	0d ef       	ldi	r16, 0xFD	; 253
    3ea0:	1f ef       	ldi	r17, 0xFF	; 255
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    3ea2:	c8 01       	movw	r24, r16
    3ea4:	63 96       	adiw	r28, 0x13	; 19
    3ea6:	0f b6       	in	r0, 0x3f	; 63
    3ea8:	f8 94       	cli
    3eaa:	de bf       	out	0x3e, r29	; 62
    3eac:	0f be       	out	0x3f, r0	; 63
    3eae:	cd bf       	out	0x3d, r28	; 61
    3eb0:	df 91       	pop	r29
    3eb2:	cf 91       	pop	r28
    3eb4:	1f 91       	pop	r17
    3eb6:	0f 91       	pop	r16
    3eb8:	ff 90       	pop	r15
    3eba:	ef 90       	pop	r14
    3ebc:	df 90       	pop	r13
    3ebe:	cf 90       	pop	r12
    3ec0:	bf 90       	pop	r11
    3ec2:	af 90       	pop	r10
    3ec4:	9f 90       	pop	r9
    3ec6:	8f 90       	pop	r8
    3ec8:	7f 90       	pop	r7
    3eca:	6f 90       	pop	r6
    3ecc:	5f 90       	pop	r5
    3ece:	4f 90       	pop	r4
    3ed0:	3f 90       	pop	r3
    3ed2:	2f 90       	pop	r2
    3ed4:	08 95       	ret

00003ed6 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>:
    result[3] = acc;
    return 1;
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    3ed6:	8f 92       	push	r8
    3ed8:	9f 92       	push	r9
    3eda:	af 92       	push	r10
    3edc:	bf 92       	push	r11
    3ede:	cf 92       	push	r12
    3ee0:	df 92       	push	r13
    3ee2:	ef 92       	push	r14
    3ee4:	ff 92       	push	r15
    3ee6:	0f 93       	push	r16
    3ee8:	1f 93       	push	r17
    3eea:	cf 93       	push	r28
    3eec:	df 93       	push	r29
    3eee:	00 d0       	rcall	.+0      	; 0x3ef0 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1a>
    3ef0:	00 d0       	rcall	.+0      	; 0x3ef2 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1c>
    3ef2:	00 d0       	rcall	.+0      	; 0x3ef4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1e>
    3ef4:	cd b7       	in	r28, 0x3d	; 61
    3ef6:	de b7       	in	r29, 0x3e	; 62
    3ef8:	7c 01       	movw	r14, r24
    3efa:	6b 01       	movw	r12, r22
    3efc:	5a 01       	movw	r10, r20
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    3efe:	0e 94 c2 1c 	call	0x3984	; 0x3984 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
    3f02:	8c 01       	movw	r16, r24
    3f04:	89 2b       	or	r24, r25
    3f06:	09 f0       	breq	.+2      	; 0x3f0a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x34>
    3f08:	55 c0       	rjmp	.+170    	; 0x3fb4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xde>
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    3f0a:	f7 01       	movw	r30, r14
    3f0c:	42 81       	ldd	r20, Z+2	; 0x02
    3f0e:	53 81       	ldd	r21, Z+3	; 0x03
    3f10:	64 81       	ldd	r22, Z+4	; 0x04
    3f12:	75 81       	ldd	r23, Z+5	; 0x05
    3f14:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <_ZL11INADDR_NONE+0x2>
    3f18:	90 91 05 04 	lds	r25, 0x0405	; 0x800405 <_ZL11INADDR_NONE+0x3>
    3f1c:	a0 91 06 04 	lds	r26, 0x0406	; 0x800406 <_ZL11INADDR_NONE+0x4>
    3f20:	b0 91 07 04 	lds	r27, 0x0407	; 0x800407 <_ZL11INADDR_NONE+0x5>
    3f24:	48 17       	cp	r20, r24
    3f26:	59 07       	cpc	r21, r25
    3f28:	6a 07       	cpc	r22, r26
    3f2a:	7b 07       	cpc	r23, r27
    3f2c:	09 f4       	brne	.+2      	; 0x3f30 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x5a>
    3f2e:	45 c0       	rjmp	.+138    	; 0x3fba <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe4>
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    3f30:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <millis>
    3f34:	47 01       	movw	r8, r14
    3f36:	f8 e0       	ldi	r31, 0x08	; 8
    3f38:	8f 0e       	add	r8, r31
    3f3a:	91 1c       	adc	r9, r1
    3f3c:	6f 70       	andi	r22, 0x0F	; 15
    3f3e:	77 27       	eor	r23, r23
    3f40:	7c 5f       	subi	r23, 0xFC	; 252
    3f42:	c4 01       	movw	r24, r8
    3f44:	0e 94 72 12 	call	0x24e4	; 0x24e4 <_ZN11EthernetUDP5beginEj>
    3f48:	81 30       	cpi	r24, 0x01	; 1
    3f4a:	09 f0       	breq	.+2      	; 0x3f4e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x78>
    3f4c:	4c c0       	rjmp	.+152    	; 0x3fe6 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x110>
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    3f4e:	8a e0       	ldi	r24, 0x0A	; 10
    3f50:	92 e0       	ldi	r25, 0x02	; 2
    3f52:	9a 83       	std	Y+2, r25	; 0x02
    3f54:	89 83       	std	Y+1, r24	; 0x01
    3f56:	f7 01       	movw	r30, r14
    3f58:	82 81       	ldd	r24, Z+2	; 0x02
    3f5a:	93 81       	ldd	r25, Z+3	; 0x03
    3f5c:	a4 81       	ldd	r26, Z+4	; 0x04
    3f5e:	b5 81       	ldd	r27, Z+5	; 0x05
    3f60:	8b 83       	std	Y+3, r24	; 0x03
    3f62:	9c 83       	std	Y+4, r25	; 0x04
    3f64:	ad 83       	std	Y+5, r26	; 0x05
    3f66:	be 83       	std	Y+6, r27	; 0x06
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    3f68:	45 e3       	ldi	r20, 0x35	; 53
    3f6a:	50 e0       	ldi	r21, 0x00	; 0
    3f6c:	be 01       	movw	r22, r28
    3f6e:	6f 5f       	subi	r22, 0xFF	; 255
    3f70:	7f 4f       	sbci	r23, 0xFF	; 255
    3f72:	c4 01       	movw	r24, r8
    3f74:	0e 94 b9 12 	call	0x2572	; 0x2572 <_ZN11EthernetUDP11beginPacketE9IPAddressj>
    3f78:	8c 01       	movw	r16, r24
            if (ret != 0)
    3f7a:	89 2b       	or	r24, r25
    3f7c:	b9 f0       	breq	.+46     	; 0x3fac <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xd6>
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
    3f7e:	b6 01       	movw	r22, r12
    3f80:	c7 01       	movw	r24, r14
    3f82:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <_ZN9DNSClient12BuildRequestEPKc>
                if (ret != 0)
    3f86:	89 2b       	or	r24, r25
    3f88:	79 f0       	breq	.+30     	; 0x3fa8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xd2>
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    3f8a:	c4 01       	movw	r24, r8
    3f8c:	0e 94 c2 12 	call	0x2584	; 0x2584 <_ZN11EthernetUDP9endPacketEv>
    3f90:	8c 01       	movw	r16, r24
                    if (ret != 0)
    3f92:	89 2b       	or	r24, r25
    3f94:	a9 f4       	brne	.+42     	; 0x3fc0 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
    3f96:	0a c0       	rjmp	.+20     	; 0x3fac <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xd6>
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
                        {
                            ret = ProcessResponse(5000, aResult);
    3f98:	a5 01       	movw	r20, r10
    3f9a:	68 e8       	ldi	r22, 0x88	; 136
    3f9c:	73 e1       	ldi	r23, 0x13	; 19
    3f9e:	c7 01       	movw	r24, r14
    3fa0:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <_ZN9DNSClient15ProcessResponseEjR9IPAddress>
    3fa4:	8c 01       	movw	r16, r24
    3fa6:	02 c0       	rjmp	.+4      	; 0x3fac <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xd6>
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
            if (ret != 0)
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
    3fa8:	00 e0       	ldi	r16, 0x00	; 0
    3faa:	10 e0       	ldi	r17, 0x00	; 0
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    3fac:	c4 01       	movw	r24, r8
    3fae:	0e 94 a3 12 	call	0x2546	; 0x2546 <_ZN11EthernetUDP4stopEv>
    3fb2:	19 c0       	rjmp	.+50     	; 0x3fe6 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x110>

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    3fb4:	01 e0       	ldi	r16, 0x01	; 1
    3fb6:	10 e0       	ldi	r17, 0x00	; 0
    3fb8:	16 c0       	rjmp	.+44     	; 0x3fe6 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x110>
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    3fba:	0e ef       	ldi	r16, 0xFE	; 254
    3fbc:	1f ef       	ldi	r17, 0xFF	; 255
    3fbe:	13 c0       	rjmp	.+38     	; 0x3fe6 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x110>
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
                        {
                            ret = ProcessResponse(5000, aResult);
    3fc0:	a5 01       	movw	r20, r10
    3fc2:	68 e8       	ldi	r22, 0x88	; 136
    3fc4:	73 e1       	ldi	r23, 0x13	; 19
    3fc6:	c7 01       	movw	r24, r14
    3fc8:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <_ZN9DNSClient15ProcessResponseEjR9IPAddress>
    3fcc:	8c 01       	movw	r16, r24
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    3fce:	01 96       	adiw	r24, 0x01	; 1
    3fd0:	69 f7       	brne	.-38     	; 0x3fac <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xd6>
                        {
                            ret = ProcessResponse(5000, aResult);
    3fd2:	a5 01       	movw	r20, r10
    3fd4:	68 e8       	ldi	r22, 0x88	; 136
    3fd6:	73 e1       	ldi	r23, 0x13	; 19
    3fd8:	c7 01       	movw	r24, r14
    3fda:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <_ZN9DNSClient15ProcessResponseEjR9IPAddress>
    3fde:	8c 01       	movw	r16, r24
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    3fe0:	01 96       	adiw	r24, 0x01	; 1
    3fe2:	d1 f2       	breq	.-76     	; 0x3f98 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xc2>
    3fe4:	e3 cf       	rjmp	.-58     	; 0x3fac <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xd6>
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    3fe6:	c8 01       	movw	r24, r16
    3fe8:	26 96       	adiw	r28, 0x06	; 6
    3fea:	0f b6       	in	r0, 0x3f	; 63
    3fec:	f8 94       	cli
    3fee:	de bf       	out	0x3e, r29	; 62
    3ff0:	0f be       	out	0x3f, r0	; 63
    3ff2:	cd bf       	out	0x3d, r28	; 61
    3ff4:	df 91       	pop	r29
    3ff6:	cf 91       	pop	r28
    3ff8:	1f 91       	pop	r17
    3ffa:	0f 91       	pop	r16
    3ffc:	ff 90       	pop	r15
    3ffe:	ef 90       	pop	r14
    4000:	df 90       	pop	r13
    4002:	cf 90       	pop	r12
    4004:	bf 90       	pop	r11
    4006:	af 90       	pop	r10
    4008:	9f 90       	pop	r9
    400a:	8f 90       	pop	r8
    400c:	08 95       	ret

0000400e <_ZN18Ds18S20TemperatureC1EP7OneWire>:
#include <OneWire.h>
#include "Ds18S20Min.h"

Ds18S20Temperature::Ds18S20Temperature(OneWire* ow)
{
	onewire = ow;
    400e:	fc 01       	movw	r30, r24
    4010:	71 83       	std	Z+1, r23	; 0x01
    4012:	60 83       	st	Z, r22
    4014:	08 95       	ret

00004016 <_ZN18Ds18S20Temperature21writeTimeToScratchpadEPhi>:
{
	readAdresses() ;
}
 
 void Ds18S20Temperature::writeTimeToScratchpad(byte* address, int delaycnt)
 {
    4016:	ef 92       	push	r14
    4018:	ff 92       	push	r15
    401a:	0f 93       	push	r16
    401c:	1f 93       	push	r17
    401e:	cf 93       	push	r28
    4020:	df 93       	push	r29
    4022:	ec 01       	movw	r28, r24
    4024:	7b 01       	movw	r14, r22
    4026:	8a 01       	movw	r16, r20
	 //reset the bus
	 onewire->reset();
    4028:	88 81       	ld	r24, Y
    402a:	99 81       	ldd	r25, Y+1	; 0x01
    402c:	0e 94 c0 06 	call	0xd80	; 0xd80 <_ZN7OneWire5resetEv>
	 //select our sensor
	 onewire->select(address);
    4030:	b7 01       	movw	r22, r14
    4032:	88 81       	ld	r24, Y
    4034:	99 81       	ldd	r25, Y+1	; 0x01
    4036:	0e 94 c0 07 	call	0xf80	; 0xf80 <_ZN7OneWire6selectEPKh>
	 //CONVERT T function call (44h) which puts the temperature into the scratchpad
	 onewire->write(0x44,1);
    403a:	41 e0       	ldi	r20, 0x01	; 1
    403c:	64 e4       	ldi	r22, 0x44	; 68
    403e:	88 81       	ld	r24, Y
    4040:	99 81       	ldd	r25, Y+1	; 0x01
    4042:	0e 94 67 07 	call	0xece	; 0xece <_ZN7OneWire5writeEhh>
	 //sleep a second for the write to take place
	 delay(delaycnt);
    4046:	b8 01       	movw	r22, r16
    4048:	11 0f       	add	r17, r17
    404a:	88 0b       	sbc	r24, r24
    404c:	99 0b       	sbc	r25, r25
    404e:	0e 94 9c 0b 	call	0x1738	; 0x1738 <delay>
 }
    4052:	df 91       	pop	r29
    4054:	cf 91       	pop	r28
    4056:	1f 91       	pop	r17
    4058:	0f 91       	pop	r16
    405a:	ff 90       	pop	r15
    405c:	ef 90       	pop	r14
    405e:	08 95       	ret

00004060 <_ZN18Ds18S20Temperature22readTimeFromScratchpadEPhS0_>:
 
 void Ds18S20Temperature::readTimeFromScratchpad(byte* address, byte* data)
 {
    4060:	ef 92       	push	r14
    4062:	ff 92       	push	r15
    4064:	0f 93       	push	r16
    4066:	1f 93       	push	r17
    4068:	cf 93       	push	r28
    406a:	df 93       	push	r29
    406c:	7c 01       	movw	r14, r24
    406e:	eb 01       	movw	r28, r22
    4070:	8a 01       	movw	r16, r20
	 //reset the bus
	 onewire->reset();
    4072:	fc 01       	movw	r30, r24
    4074:	80 81       	ld	r24, Z
    4076:	91 81       	ldd	r25, Z+1	; 0x01
    4078:	0e 94 c0 06 	call	0xd80	; 0xd80 <_ZN7OneWire5resetEv>
	 //select our sensor
	 onewire->select(address);
    407c:	be 01       	movw	r22, r28
    407e:	f7 01       	movw	r30, r14
    4080:	80 81       	ld	r24, Z
    4082:	91 81       	ldd	r25, Z+1	; 0x01
    4084:	0e 94 c0 07 	call	0xf80	; 0xf80 <_ZN7OneWire6selectEPKh>
	 //read the scratchpad (BEh)
	 onewire->write(0xBE);
    4088:	40 e0       	ldi	r20, 0x00	; 0
    408a:	6e eb       	ldi	r22, 0xBE	; 190
    408c:	f7 01       	movw	r30, r14
    408e:	80 81       	ld	r24, Z
    4090:	91 81       	ldd	r25, Z+1	; 0x01
    4092:	0e 94 67 07 	call	0xece	; 0xece <_ZN7OneWire5writeEhh>
    4096:	e8 01       	movw	r28, r16
    4098:	07 5f       	subi	r16, 0xF7	; 247
    409a:	1f 4f       	sbci	r17, 0xFF	; 255
	 for (byte i=0;i<9;i++){
		 data[i] = onewire->read();
    409c:	f7 01       	movw	r30, r14
    409e:	80 81       	ld	r24, Z
    40a0:	91 81       	ldd	r25, Z+1	; 0x01
    40a2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_ZN7OneWire4readEv>
    40a6:	89 93       	st	Y+, r24
	 onewire->reset();
	 //select our sensor
	 onewire->select(address);
	 //read the scratchpad (BEh)
	 onewire->write(0xBE);
	 for (byte i=0;i<9;i++){
    40a8:	c0 17       	cp	r28, r16
    40aa:	d1 07       	cpc	r29, r17
    40ac:	b9 f7       	brne	.-18     	; 0x409c <_ZN18Ds18S20Temperature22readTimeFromScratchpadEPhS0_+0x3c>
		 data[i] = onewire->read();
	 }
 }
    40ae:	df 91       	pop	r29
    40b0:	cf 91       	pop	r28
    40b2:	1f 91       	pop	r17
    40b4:	0f 91       	pop	r16
    40b6:	ff 90       	pop	r15
    40b8:	ef 90       	pop	r14
    40ba:	08 95       	ret

000040bc <_ZN18Ds18S20Temperature13getSensortypeEPh>:
}
 
 byte Ds18S20Temperature::getSensortype(byte* address)
 {
 		// the first ROM byte indicates which chip
	switch (address[0]) {
    40bc:	fb 01       	movw	r30, r22
    40be:	80 81       	ld	r24, Z
    40c0:	82 32       	cpi	r24, 0x22	; 34
    40c2:	29 f0       	breq	.+10     	; 0x40ce <_ZN18Ds18S20Temperature13getSensortypeEPh+0x12>
    40c4:	88 32       	cpi	r24, 0x28	; 40
    40c6:	19 f0       	breq	.+6      	; 0x40ce <_ZN18Ds18S20Temperature13getSensortypeEPh+0x12>
    40c8:	80 31       	cpi	r24, 0x10	; 16
    40ca:	19 f4       	brne	.+6      	; 0x40d2 <_ZN18Ds18S20Temperature13getSensortypeEPh+0x16>
    40cc:	04 c0       	rjmp	.+8      	; 0x40d6 <_ZN18Ds18S20Temperature13getSensortypeEPh+0x1a>
		//Serial.println("  Chip = DS18S20");  // or old DS1820
		return 1;
		break;
		case 0x28:
		//Serial.println("  Chip = DS18B20");
		return 0;
    40ce:	80 e0       	ldi	r24, 0x00	; 0
    40d0:	08 95       	ret
		//Serial.println("  Chip = DS1822");
		return 0;
		break;
		default:
		//Serial.println("Device is not a DS18x20 family device.");
		return -1;
    40d2:	8f ef       	ldi	r24, 0xFF	; 255
    40d4:	08 95       	ret
 {
 		// the first ROM byte indicates which chip
	switch (address[0]) {
		case 0x10:
		//Serial.println("  Chip = DS18S20");  // or old DS1820
		return 1;
    40d6:	81 e0       	ldi	r24, 0x01	; 1
		default:
		//Serial.println("Device is not a DS18x20 family device.");
		return -1;
	}
	return -1;
 }
    40d8:	08 95       	ret

000040da <_ZN18Ds18S20Temperature14getTemperatureEPhb>:
	if (id > Devicecount) return -255;
	return getTemperature(sensors[id], getcelsius);
 }
 
float Ds18S20Temperature::getTemperature(byte* address, bool getcelsius)
{
    40da:	bf 92       	push	r11
    40dc:	cf 92       	push	r12
    40de:	df 92       	push	r13
    40e0:	ef 92       	push	r14
    40e2:	ff 92       	push	r15
    40e4:	0f 93       	push	r16
    40e6:	1f 93       	push	r17
    40e8:	cf 93       	push	r28
    40ea:	df 93       	push	r29
    40ec:	cd b7       	in	r28, 0x3d	; 61
    40ee:	de b7       	in	r29, 0x3e	; 62
    40f0:	2c 97       	sbiw	r28, 0x0c	; 12
    40f2:	0f b6       	in	r0, 0x3f	; 63
    40f4:	f8 94       	cli
    40f6:	de bf       	out	0x3e, r29	; 62
    40f8:	0f be       	out	0x3f, r0	; 63
    40fa:	cd bf       	out	0x3d, r28	; 61
    40fc:	8c 01       	movw	r16, r24
    40fe:	7b 01       	movw	r14, r22
    4100:	b4 2e       	mov	r11, r20
	byte data[12];
	writeTimeToScratchpad(address, 10);
    4102:	4a e0       	ldi	r20, 0x0A	; 10
    4104:	50 e0       	ldi	r21, 0x00	; 0
    4106:	0e 94 0b 20 	call	0x4016	; 0x4016 <_ZN18Ds18S20Temperature21writeTimeToScratchpadEPhi>
	readTimeFromScratchpad(address,data);
    410a:	ae 01       	movw	r20, r28
    410c:	4f 5f       	subi	r20, 0xFF	; 255
    410e:	5f 4f       	sbci	r21, 0xFF	; 255
    4110:	b7 01       	movw	r22, r14
    4112:	c8 01       	movw	r24, r16
    4114:	0e 94 30 20 	call	0x4060	; 0x4060 <_ZN18Ds18S20Temperature22readTimeFromScratchpadEPhS0_>
 
	// Convert the data to actual temperature
	// because the result is a 16 bit signed integer, it should
	// be stored to an "int16_t" type, which is always 16 bits
	// even when compiled on a 32 bit processor.
	int16_t raw = (data[1] << 8) | data[0];
    4118:	6a 81       	ldd	r22, Y+2	; 0x02
    411a:	70 e0       	ldi	r23, 0x00	; 0
    411c:	76 2f       	mov	r23, r22
    411e:	66 27       	eor	r22, r22
    4120:	89 81       	ldd	r24, Y+1	; 0x01
    4122:	6b 01       	movw	r12, r22
    4124:	c8 2a       	or	r12, r24
	if (getSensortype(address) == 1) 
    4126:	b7 01       	movw	r22, r14
    4128:	c8 01       	movw	r24, r16
    412a:	0e 94 5e 20 	call	0x40bc	; 0x40bc <_ZN18Ds18S20Temperature13getSensortypeEPh>
    412e:	81 30       	cpi	r24, 0x01	; 1
    4130:	a1 f4       	brne	.+40     	; 0x415a <_ZN18Ds18S20Temperature14getTemperatureEPhb+0x80>
	{
		raw = raw << 3; // 9 bit resolution default
    4132:	cc 0c       	add	r12, r12
    4134:	dd 1c       	adc	r13, r13
    4136:	cc 0c       	add	r12, r12
    4138:	dd 1c       	adc	r13, r13
    413a:	cc 0c       	add	r12, r12
    413c:	dd 1c       	adc	r13, r13
		if (data[7] == 0x10) 
    413e:	88 85       	ldd	r24, Y+8	; 0x08
    4140:	80 31       	cpi	r24, 0x10	; 16
    4142:	d1 f4       	brne	.+52     	; 0x4178 <_ZN18Ds18S20Temperature14getTemperatureEPhb+0x9e>
		{
			// "count remain" gives full 12 bit resolution
			raw = (raw & 0xFFF0) + 12 - data[6];
    4144:	2f 81       	ldd	r18, Y+7	; 0x07
    4146:	8c e0       	ldi	r24, 0x0C	; 12
    4148:	90 e0       	ldi	r25, 0x00	; 0
    414a:	82 1b       	sub	r24, r18
    414c:	91 09       	sbc	r25, r1
    414e:	b6 01       	movw	r22, r12
    4150:	60 7f       	andi	r22, 0xF0	; 240
    4152:	6c 01       	movw	r12, r24
    4154:	c6 0e       	add	r12, r22
    4156:	d7 1e       	adc	r13, r23
    4158:	0f c0       	rjmp	.+30     	; 0x4178 <_ZN18Ds18S20Temperature14getTemperatureEPhb+0x9e>
		}
	} 
	else 
	{
		byte cfg = (data[4] & 0x60);
    415a:	8d 81       	ldd	r24, Y+5	; 0x05
    415c:	80 76       	andi	r24, 0x60	; 96
		// at lower res, the low bits are undefined, so let's zero them
		if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    415e:	19 f4       	brne	.+6      	; 0x4166 <_ZN18Ds18S20Temperature14getTemperatureEPhb+0x8c>
    4160:	88 ef       	ldi	r24, 0xF8	; 248
    4162:	c8 22       	and	r12, r24
    4164:	09 c0       	rjmp	.+18     	; 0x4178 <_ZN18Ds18S20Temperature14getTemperatureEPhb+0x9e>
		else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    4166:	80 32       	cpi	r24, 0x20	; 32
    4168:	19 f4       	brne	.+6      	; 0x4170 <_ZN18Ds18S20Temperature14getTemperatureEPhb+0x96>
    416a:	8c ef       	ldi	r24, 0xFC	; 252
    416c:	c8 22       	and	r12, r24
    416e:	04 c0       	rjmp	.+8      	; 0x4178 <_ZN18Ds18S20Temperature14getTemperatureEPhb+0x9e>
		else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    4170:	80 34       	cpi	r24, 0x40	; 64
    4172:	11 f4       	brne	.+4      	; 0x4178 <_ZN18Ds18S20Temperature14getTemperatureEPhb+0x9e>
    4174:	e8 94       	clt
    4176:	c0 f8       	bld	r12, 0
		//// default is 12 bit resolution, 750 ms conversion time
	}
	 
	float celsius = (float)raw / 16.0;
    4178:	b6 01       	movw	r22, r12
    417a:	dd 0c       	add	r13, r13
    417c:	88 0b       	sbc	r24, r24
    417e:	99 0b       	sbc	r25, r25
    4180:	0e 94 93 22 	call	0x4526	; 0x4526 <__floatsisf>
    4184:	20 e0       	ldi	r18, 0x00	; 0
    4186:	30 e0       	ldi	r19, 0x00	; 0
    4188:	40 e8       	ldi	r20, 0x80	; 128
    418a:	5d e3       	ldi	r21, 0x3D	; 61
    418c:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsf3>
	float fahrenheit = celsius * 1.8 + 32.0;
	if (getcelsius)
    4190:	b1 10       	cpse	r11, r1
    4192:	17 c0       	rjmp	.+46     	; 0x41c2 <_ZN18Ds18S20Temperature14getTemperatureEPhb+0xe8>
		else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
		//// default is 12 bit resolution, 750 ms conversion time
	}
	 
	float celsius = (float)raw / 16.0;
	float fahrenheit = celsius * 1.8 + 32.0;
    4194:	26 e6       	ldi	r18, 0x66	; 102
    4196:	36 e6       	ldi	r19, 0x66	; 102
    4198:	46 ee       	ldi	r20, 0xE6	; 230
    419a:	5f e3       	ldi	r21, 0x3F	; 63
    419c:	c6 2e       	mov	r12, r22
    419e:	d7 2e       	mov	r13, r23
    41a0:	e8 2e       	mov	r14, r24
    41a2:	f9 2e       	mov	r15, r25
    41a4:	c7 01       	movw	r24, r14
    41a6:	b6 01       	movw	r22, r12
    41a8:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__mulsf3>
    41ac:	20 e0       	ldi	r18, 0x00	; 0
    41ae:	30 e0       	ldi	r19, 0x00	; 0
    41b0:	40 e0       	ldi	r20, 0x00	; 0
    41b2:	52 e4       	ldi	r21, 0x42	; 66
    41b4:	0e 94 b1 03 	call	0x762	; 0x762 <__addsf3>
	if (getcelsius)
	{
		return celsius;
	}
	return fahrenheit;
    41b8:	56 2f       	mov	r21, r22
    41ba:	47 2f       	mov	r20, r23
    41bc:	38 2f       	mov	r19, r24
    41be:	29 2f       	mov	r18, r25
    41c0:	04 c0       	rjmp	.+8      	; 0x41ca <_ZN18Ds18S20Temperature14getTemperatureEPhb+0xf0>
	 
	float celsius = (float)raw / 16.0;
	float fahrenheit = celsius * 1.8 + 32.0;
	if (getcelsius)
	{
		return celsius;
    41c2:	56 2f       	mov	r21, r22
    41c4:	47 2f       	mov	r20, r23
    41c6:	38 2f       	mov	r19, r24
    41c8:	29 2f       	mov	r18, r25
	}
	return fahrenheit;
}
    41ca:	65 2f       	mov	r22, r21
    41cc:	74 2f       	mov	r23, r20
    41ce:	83 2f       	mov	r24, r19
    41d0:	92 2f       	mov	r25, r18
    41d2:	2c 96       	adiw	r28, 0x0c	; 12
    41d4:	0f b6       	in	r0, 0x3f	; 63
    41d6:	f8 94       	cli
    41d8:	de bf       	out	0x3e, r29	; 62
    41da:	0f be       	out	0x3f, r0	; 63
    41dc:	cd bf       	out	0x3d, r28	; 61
    41de:	df 91       	pop	r29
    41e0:	cf 91       	pop	r28
    41e2:	1f 91       	pop	r17
    41e4:	0f 91       	pop	r16
    41e6:	ff 90       	pop	r15
    41e8:	ef 90       	pop	r14
    41ea:	df 90       	pop	r13
    41ec:	cf 90       	pop	r12
    41ee:	bf 90       	pop	r11
    41f0:	08 95       	ret

000041f2 <_ZN18Ds18S20Temperature18getTemperatureByIdEhb>:
	 }
 }
 
 float Ds18S20Temperature::getTemperatureById(byte id, bool getcelsius)
 {
	if (id > Devicecount) return -255;
    41f2:	70 e0       	ldi	r23, 0x00	; 0
    41f4:	fc 01       	movw	r30, r24
    41f6:	22 81       	ldd	r18, Z+2	; 0x02
    41f8:	33 81       	ldd	r19, Z+3	; 0x03
    41fa:	26 17       	cp	r18, r22
    41fc:	37 07       	cpc	r19, r23
    41fe:	6c f0       	brlt	.+26     	; 0x421a <_ZN18Ds18S20Temperature18getTemperatureByIdEhb+0x28>
	return getTemperature(sensors[id], getcelsius);
    4200:	66 0f       	add	r22, r22
    4202:	77 1f       	adc	r23, r23
    4204:	66 0f       	add	r22, r22
    4206:	77 1f       	adc	r23, r23
    4208:	66 0f       	add	r22, r22
    420a:	77 1f       	adc	r23, r23
    420c:	6c 5f       	subi	r22, 0xFC	; 252
    420e:	7f 4f       	sbci	r23, 0xFF	; 255
    4210:	68 0f       	add	r22, r24
    4212:	79 1f       	adc	r23, r25
    4214:	0e 94 6d 20 	call	0x40da	; 0x40da <_ZN18Ds18S20Temperature14getTemperatureEPhb>
    4218:	08 95       	ret
	 }
 }
 
 float Ds18S20Temperature::getTemperatureById(byte id, bool getcelsius)
 {
	if (id > Devicecount) return -255;
    421a:	60 e0       	ldi	r22, 0x00	; 0
    421c:	70 e0       	ldi	r23, 0x00	; 0
    421e:	8f e7       	ldi	r24, 0x7F	; 127
    4220:	93 ec       	ldi	r25, 0xC3	; 195
	return getTemperature(sensors[id], getcelsius);
 }
    4222:	08 95       	ret

00004224 <_ZN18Ds18S20Temperature12readAdressesEv>:
		return -1;
	}
	return -1;
 }

 void Ds18S20Temperature::readAdresses(void) {
    4224:	ef 92       	push	r14
    4226:	ff 92       	push	r15
    4228:	0f 93       	push	r16
    422a:	1f 93       	push	r17
    422c:	cf 93       	push	r28
    422e:	df 93       	push	r29
    4230:	cd b7       	in	r28, 0x3d	; 61
    4232:	de b7       	in	r29, 0x3e	; 62
    4234:	28 97       	sbiw	r28, 0x08	; 8
    4236:	0f b6       	in	r0, 0x3f	; 63
    4238:	f8 94       	cli
    423a:	de bf       	out	0x3e, r29	; 62
    423c:	0f be       	out	0x3f, r0	; 63
    423e:	cd bf       	out	0x3d, r28	; 61
    4240:	7c 01       	movw	r14, r24
	 byte addr[8];
	 
	 Devicecount = 0;
    4242:	dc 01       	movw	r26, r24
    4244:	13 96       	adiw	r26, 0x03	; 3
    4246:	1c 92       	st	X, r1
    4248:	1e 92       	st	-X, r1
    424a:	12 97       	sbiw	r26, 0x02	; 2

	 for(int i =0; i< _maxSensors; i++)
	 {
		sensors[i][0] =0;
    424c:	14 96       	adiw	r26, 0x04	; 4
    424e:	1c 92       	st	X, r1
    4250:	14 97       	sbiw	r26, 0x04	; 4
    4252:	1c 96       	adiw	r26, 0x0c	; 12
    4254:	1c 92       	st	X, r1
    4256:	1c 97       	sbiw	r26, 0x0c	; 12
    4258:	54 96       	adiw	r26, 0x14	; 20
    425a:	1c 92       	st	X, r1
    425c:	54 97       	sbiw	r26, 0x14	; 20
    425e:	5c 96       	adiw	r26, 0x1c	; 28
    4260:	1c 92       	st	X, r1
    4262:	5c 97       	sbiw	r26, 0x1c	; 28
    4264:	94 96       	adiw	r26, 0x24	; 36
    4266:	1c 92       	st	X, r1
    4268:	94 97       	sbiw	r26, 0x24	; 36
    426a:	9c 96       	adiw	r26, 0x2c	; 44
    426c:	1c 92       	st	X, r1
    426e:	9c 97       	sbiw	r26, 0x2c	; 44
	 }
	 onewire->reset_search();
    4270:	8d 91       	ld	r24, X+
    4272:	9c 91       	ld	r25, X
    4274:	0e 94 de 07 	call	0xfbc	; 0xfbc <_ZN7OneWire12reset_searchEv>
    4278:	8e 01       	movw	r16, r28
    427a:	07 5f       	subi	r16, 0xF7	; 247
    427c:	1f 4f       	sbci	r17, 0xFF	; 255

	 while(onewire->search(addr)) {
    427e:	41 e0       	ldi	r20, 0x01	; 1
    4280:	be 01       	movw	r22, r28
    4282:	6f 5f       	subi	r22, 0xFF	; 255
    4284:	7f 4f       	sbci	r23, 0xFF	; 255
    4286:	f7 01       	movw	r30, r14
    4288:	80 81       	ld	r24, Z
    428a:	91 81       	ldd	r25, Z+1	; 0x01
    428c:	0e 94 16 08 	call	0x102c	; 0x102c <_ZN7OneWire6searchEPhb>
    4290:	88 23       	and	r24, r24
    4292:	f1 f0       	breq	.+60     	; 0x42d0 <_ZN18Ds18S20Temperature12readAdressesEv+0xac>
    4294:	fe 01       	movw	r30, r28
    4296:	31 96       	adiw	r30, 0x01	; 1
    4298:	d7 01       	movw	r26, r14
    429a:	12 96       	adiw	r26, 0x02	; 2
    429c:	8d 91       	ld	r24, X+
    429e:	9c 91       	ld	r25, X
    42a0:	13 97       	sbiw	r26, 0x03	; 3
    42a2:	dc 01       	movw	r26, r24
    42a4:	aa 0f       	add	r26, r26
    42a6:	bb 1f       	adc	r27, r27
    42a8:	aa 0f       	add	r26, r26
    42aa:	bb 1f       	adc	r27, r27
    42ac:	aa 0f       	add	r26, r26
    42ae:	bb 1f       	adc	r27, r27
    42b0:	14 96       	adiw	r26, 0x04	; 4
    42b2:	ae 0d       	add	r26, r14
    42b4:	bf 1d       	adc	r27, r15
		
		if (getSensortype(addr) == -1) continue;
		 for(int i= 0; i< 8; i++)
		 {
			sensors[Devicecount][i] = addr[i];
    42b6:	81 91       	ld	r24, Z+
    42b8:	8d 93       	st	X+, r24
	 onewire->reset_search();

	 while(onewire->search(addr)) {
		
		if (getSensortype(addr) == -1) continue;
		 for(int i= 0; i< 8; i++)
    42ba:	0e 17       	cp	r16, r30
    42bc:	1f 07       	cpc	r17, r31
    42be:	d9 f7       	brne	.-10     	; 0x42b6 <_ZN18Ds18S20Temperature12readAdressesEv+0x92>
		 {
			sensors[Devicecount][i] = addr[i];
		 }
		 
		 Devicecount++;
    42c0:	f7 01       	movw	r30, r14
    42c2:	82 81       	ldd	r24, Z+2	; 0x02
    42c4:	93 81       	ldd	r25, Z+3	; 0x03
    42c6:	01 96       	adiw	r24, 0x01	; 1
    42c8:	93 83       	std	Z+3, r25	; 0x03
    42ca:	82 83       	std	Z+2, r24	; 0x02
		 if (Devicecount> _maxSensors ) break;
    42cc:	07 97       	sbiw	r24, 0x07	; 7
    42ce:	bc f2       	brlt	.-82     	; 0x427e <_ZN18Ds18S20Temperature12readAdressesEv+0x5a>
	 }
	 return;
 }
    42d0:	28 96       	adiw	r28, 0x08	; 8
    42d2:	0f b6       	in	r0, 0x3f	; 63
    42d4:	f8 94       	cli
    42d6:	de bf       	out	0x3e, r29	; 62
    42d8:	0f be       	out	0x3f, r0	; 63
    42da:	cd bf       	out	0x3d, r28	; 61
    42dc:	df 91       	pop	r29
    42de:	cf 91       	pop	r28
    42e0:	1f 91       	pop	r17
    42e2:	0f 91       	pop	r16
    42e4:	ff 90       	pop	r15
    42e6:	ef 90       	pop	r14
    42e8:	08 95       	ret

000042ea <_ZN18Ds18S20Temperature5BeginEv>:
	onewire = ow;
}

void Ds18S20Temperature::Begin(void)
{
	readAdresses() ;
    42ea:	0e 94 12 21 	call	0x4224	; 0x4224 <_ZN18Ds18S20Temperature12readAdressesEv>
    42ee:	08 95       	ret

000042f0 <_ZN18Ds18S20Temperature9getAdressEiPc>:
	 }
	 return;
 }

 char* Ds18S20Temperature::getAdress(int device, char* buffer)
 {
    42f0:	cf 93       	push	r28
    42f2:	df 93       	push	r29
    42f4:	d4 2f       	mov	r29, r20
    42f6:	c5 2f       	mov	r28, r21
 	 if (device < 0 || device > _maxSensors	 )
    42f8:	67 30       	cpi	r22, 0x07	; 7
    42fa:	71 05       	cpc	r23, r1
    42fc:	50 f0       	brcs	.+20     	; 0x4312 <_ZN18Ds18S20Temperature9getAdressEiPc+0x22>
	 {
		strcpy(buffer, "(null)");
    42fe:	87 e0       	ldi	r24, 0x07	; 7
    4300:	ef ec       	ldi	r30, 0xCF	; 207
    4302:	f1 e0       	ldi	r31, 0x01	; 1
    4304:	a4 2f       	mov	r26, r20
    4306:	b5 2f       	mov	r27, r21
    4308:	01 90       	ld	r0, Z+
    430a:	0d 92       	st	X+, r0
    430c:	8a 95       	dec	r24
    430e:	e1 f7       	brne	.-8      	; 0x4308 <_ZN18Ds18S20Temperature9getAdressEiPc+0x18>
		return buffer;
    4310:	5d c0       	rjmp	.+186    	; 0x43cc <_ZN18Ds18S20Temperature9getAdressEiPc+0xdc>
	 }
	 
	 if (sensors[device][0] == '\0' )
    4312:	db 01       	movw	r26, r22
    4314:	aa 0f       	add	r26, r26
    4316:	bb 1f       	adc	r27, r27
    4318:	aa 0f       	add	r26, r26
    431a:	bb 1f       	adc	r27, r27
    431c:	aa 0f       	add	r26, r26
    431e:	bb 1f       	adc	r27, r27
    4320:	a8 0f       	add	r26, r24
    4322:	b9 1f       	adc	r27, r25
    4324:	14 96       	adiw	r26, 0x04	; 4
    4326:	2c 91       	ld	r18, X
    4328:	21 11       	cpse	r18, r1
    432a:	0a c0       	rjmp	.+20     	; 0x4340 <_ZN18Ds18S20Temperature9getAdressEiPc+0x50>
	 {
		strcpy(buffer, "(null)");
    432c:	87 e0       	ldi	r24, 0x07	; 7
    432e:	ef ec       	ldi	r30, 0xCF	; 207
    4330:	f1 e0       	ldi	r31, 0x01	; 1
    4332:	a4 2f       	mov	r26, r20
    4334:	b5 2f       	mov	r27, r21
    4336:	01 90       	ld	r0, Z+
    4338:	0d 92       	st	X+, r0
    433a:	8a 95       	dec	r24
    433c:	e1 f7       	brne	.-8      	; 0x4336 <_ZN18Ds18S20Temperature9getAdressEiPc+0x46>
		return buffer;
    433e:	46 c0       	rjmp	.+140    	; 0x43cc <_ZN18Ds18S20Temperature9getAdressEiPc+0xdc>
	 }
	sprintf(buffer, "%X%X%X%X%X%X%X%X", sensors[device][0], sensors[device][1],sensors[device][2],sensors[device][3],
										sensors[device][4], sensors[device][5],sensors[device][6],sensors[device][7]);
    4340:	db 01       	movw	r26, r22
    4342:	aa 0f       	add	r26, r26
    4344:	bb 1f       	adc	r27, r27
    4346:	aa 0f       	add	r26, r26
    4348:	bb 1f       	adc	r27, r27
    434a:	aa 0f       	add	r26, r26
    434c:	bb 1f       	adc	r27, r27
    434e:	a8 0f       	add	r26, r24
    4350:	b9 1f       	adc	r27, r25
    4352:	1b 96       	adiw	r26, 0x0b	; 11
    4354:	3c 91       	ld	r19, X
    4356:	1b 97       	sbiw	r26, 0x0b	; 11
    4358:	1f 92       	push	r1
    435a:	3f 93       	push	r19
    435c:	1a 96       	adiw	r26, 0x0a	; 10
    435e:	3c 91       	ld	r19, X
    4360:	1a 97       	sbiw	r26, 0x0a	; 10
    4362:	1f 92       	push	r1
    4364:	3f 93       	push	r19
    4366:	19 96       	adiw	r26, 0x09	; 9
    4368:	3c 91       	ld	r19, X
    436a:	19 97       	sbiw	r26, 0x09	; 9
    436c:	1f 92       	push	r1
    436e:	3f 93       	push	r19
    4370:	6f 5f       	subi	r22, 0xFF	; 255
    4372:	7f 4f       	sbci	r23, 0xFF	; 255
    4374:	66 0f       	add	r22, r22
    4376:	77 1f       	adc	r23, r23
    4378:	66 0f       	add	r22, r22
    437a:	77 1f       	adc	r23, r23
    437c:	66 0f       	add	r22, r22
    437e:	77 1f       	adc	r23, r23
    4380:	fc 01       	movw	r30, r24
    4382:	e6 0f       	add	r30, r22
    4384:	f7 1f       	adc	r31, r23
    4386:	80 81       	ld	r24, Z
    4388:	1f 92       	push	r1
    438a:	8f 93       	push	r24
    438c:	17 96       	adiw	r26, 0x07	; 7
    438e:	8c 91       	ld	r24, X
    4390:	17 97       	sbiw	r26, 0x07	; 7
    4392:	1f 92       	push	r1
    4394:	8f 93       	push	r24
    4396:	16 96       	adiw	r26, 0x06	; 6
    4398:	8c 91       	ld	r24, X
    439a:	16 97       	sbiw	r26, 0x06	; 6
    439c:	1f 92       	push	r1
    439e:	8f 93       	push	r24
    43a0:	15 96       	adiw	r26, 0x05	; 5
    43a2:	8c 91       	ld	r24, X
    43a4:	1f 92       	push	r1
    43a6:	8f 93       	push	r24
    43a8:	1f 92       	push	r1
    43aa:	2f 93       	push	r18
    43ac:	8f e6       	ldi	r24, 0x6F	; 111
    43ae:	92 e0       	ldi	r25, 0x02	; 2
    43b0:	9f 93       	push	r25
    43b2:	8f 93       	push	r24
    43b4:	5f 93       	push	r21
    43b6:	4f 93       	push	r20
    43b8:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <sprintf>
	return buffer;
    43bc:	8d b7       	in	r24, 0x3d	; 61
    43be:	9e b7       	in	r25, 0x3e	; 62
    43c0:	44 96       	adiw	r24, 0x14	; 20
    43c2:	0f b6       	in	r0, 0x3f	; 63
    43c4:	f8 94       	cli
    43c6:	9e bf       	out	0x3e, r25	; 62
    43c8:	0f be       	out	0x3f, r0	; 63
    43ca:	8d bf       	out	0x3d, r24	; 61
 }
    43cc:	8d 2f       	mov	r24, r29
    43ce:	9c 2f       	mov	r25, r28
    43d0:	df 91       	pop	r29
    43d2:	cf 91       	pop	r28
    43d4:	08 95       	ret

000043d6 <__cmpsf2>:
    43d6:	0e 94 ce 22 	call	0x459c	; 0x459c <__fp_cmp>
    43da:	08 f4       	brcc	.+2      	; 0x43de <__cmpsf2+0x8>
    43dc:	81 e0       	ldi	r24, 0x01	; 1
    43de:	08 95       	ret

000043e0 <__divsf3>:
    43e0:	0e 94 04 22 	call	0x4408	; 0x4408 <__divsf3x>
    43e4:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_round>
    43e8:	0e 94 2d 04 	call	0x85a	; 0x85a <__fp_pscB>
    43ec:	58 f0       	brcs	.+22     	; 0x4404 <__divsf3+0x24>
    43ee:	0e 94 26 04 	call	0x84c	; 0x84c <__fp_pscA>
    43f2:	40 f0       	brcs	.+16     	; 0x4404 <__divsf3+0x24>
    43f4:	29 f4       	brne	.+10     	; 0x4400 <__divsf3+0x20>
    43f6:	5f 3f       	cpi	r21, 0xFF	; 255
    43f8:	29 f0       	breq	.+10     	; 0x4404 <__divsf3+0x24>
    43fa:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_inf>
    43fe:	51 11       	cpse	r21, r1
    4400:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__fp_szero>
    4404:	0c 94 23 04 	jmp	0x846	; 0x846 <__fp_nan>

00004408 <__divsf3x>:
    4408:	0e 94 45 04 	call	0x88a	; 0x88a <__fp_split3>
    440c:	68 f3       	brcs	.-38     	; 0x43e8 <__divsf3+0x8>

0000440e <__divsf3_pse>:
    440e:	99 23       	and	r25, r25
    4410:	b1 f3       	breq	.-20     	; 0x43fe <__divsf3+0x1e>
    4412:	55 23       	and	r21, r21
    4414:	91 f3       	breq	.-28     	; 0x43fa <__divsf3+0x1a>
    4416:	95 1b       	sub	r25, r21
    4418:	55 0b       	sbc	r21, r21
    441a:	bb 27       	eor	r27, r27
    441c:	aa 27       	eor	r26, r26
    441e:	62 17       	cp	r22, r18
    4420:	73 07       	cpc	r23, r19
    4422:	84 07       	cpc	r24, r20
    4424:	38 f0       	brcs	.+14     	; 0x4434 <__divsf3_pse+0x26>
    4426:	9f 5f       	subi	r25, 0xFF	; 255
    4428:	5f 4f       	sbci	r21, 0xFF	; 255
    442a:	22 0f       	add	r18, r18
    442c:	33 1f       	adc	r19, r19
    442e:	44 1f       	adc	r20, r20
    4430:	aa 1f       	adc	r26, r26
    4432:	a9 f3       	breq	.-22     	; 0x441e <__divsf3_pse+0x10>
    4434:	35 d0       	rcall	.+106    	; 0x44a0 <__divsf3_pse+0x92>
    4436:	0e 2e       	mov	r0, r30
    4438:	3a f0       	brmi	.+14     	; 0x4448 <__divsf3_pse+0x3a>
    443a:	e0 e8       	ldi	r30, 0x80	; 128
    443c:	32 d0       	rcall	.+100    	; 0x44a2 <__divsf3_pse+0x94>
    443e:	91 50       	subi	r25, 0x01	; 1
    4440:	50 40       	sbci	r21, 0x00	; 0
    4442:	e6 95       	lsr	r30
    4444:	00 1c       	adc	r0, r0
    4446:	ca f7       	brpl	.-14     	; 0x443a <__divsf3_pse+0x2c>
    4448:	2b d0       	rcall	.+86     	; 0x44a0 <__divsf3_pse+0x92>
    444a:	fe 2f       	mov	r31, r30
    444c:	29 d0       	rcall	.+82     	; 0x44a0 <__divsf3_pse+0x92>
    444e:	66 0f       	add	r22, r22
    4450:	77 1f       	adc	r23, r23
    4452:	88 1f       	adc	r24, r24
    4454:	bb 1f       	adc	r27, r27
    4456:	26 17       	cp	r18, r22
    4458:	37 07       	cpc	r19, r23
    445a:	48 07       	cpc	r20, r24
    445c:	ab 07       	cpc	r26, r27
    445e:	b0 e8       	ldi	r27, 0x80	; 128
    4460:	09 f0       	breq	.+2      	; 0x4464 <__divsf3_pse+0x56>
    4462:	bb 0b       	sbc	r27, r27
    4464:	80 2d       	mov	r24, r0
    4466:	bf 01       	movw	r22, r30
    4468:	ff 27       	eor	r31, r31
    446a:	93 58       	subi	r25, 0x83	; 131
    446c:	5f 4f       	sbci	r21, 0xFF	; 255
    446e:	3a f0       	brmi	.+14     	; 0x447e <__divsf3_pse+0x70>
    4470:	9e 3f       	cpi	r25, 0xFE	; 254
    4472:	51 05       	cpc	r21, r1
    4474:	78 f0       	brcs	.+30     	; 0x4494 <__divsf3_pse+0x86>
    4476:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_inf>
    447a:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__fp_szero>
    447e:	5f 3f       	cpi	r21, 0xFF	; 255
    4480:	e4 f3       	brlt	.-8      	; 0x447a <__divsf3_pse+0x6c>
    4482:	98 3e       	cpi	r25, 0xE8	; 232
    4484:	d4 f3       	brlt	.-12     	; 0x447a <__divsf3_pse+0x6c>
    4486:	86 95       	lsr	r24
    4488:	77 95       	ror	r23
    448a:	67 95       	ror	r22
    448c:	b7 95       	ror	r27
    448e:	f7 95       	ror	r31
    4490:	9f 5f       	subi	r25, 0xFF	; 255
    4492:	c9 f7       	brne	.-14     	; 0x4486 <__divsf3_pse+0x78>
    4494:	88 0f       	add	r24, r24
    4496:	91 1d       	adc	r25, r1
    4498:	96 95       	lsr	r25
    449a:	87 95       	ror	r24
    449c:	97 f9       	bld	r25, 7
    449e:	08 95       	ret
    44a0:	e1 e0       	ldi	r30, 0x01	; 1
    44a2:	66 0f       	add	r22, r22
    44a4:	77 1f       	adc	r23, r23
    44a6:	88 1f       	adc	r24, r24
    44a8:	bb 1f       	adc	r27, r27
    44aa:	62 17       	cp	r22, r18
    44ac:	73 07       	cpc	r23, r19
    44ae:	84 07       	cpc	r24, r20
    44b0:	ba 07       	cpc	r27, r26
    44b2:	20 f0       	brcs	.+8      	; 0x44bc <__divsf3_pse+0xae>
    44b4:	62 1b       	sub	r22, r18
    44b6:	73 0b       	sbc	r23, r19
    44b8:	84 0b       	sbc	r24, r20
    44ba:	ba 0b       	sbc	r27, r26
    44bc:	ee 1f       	adc	r30, r30
    44be:	88 f7       	brcc	.-30     	; 0x44a2 <__divsf3_pse+0x94>
    44c0:	e0 95       	com	r30
    44c2:	08 95       	ret

000044c4 <__fixunssfsi>:
    44c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fp_splitA>
    44c8:	88 f0       	brcs	.+34     	; 0x44ec <__fixunssfsi+0x28>
    44ca:	9f 57       	subi	r25, 0x7F	; 127
    44cc:	98 f0       	brcs	.+38     	; 0x44f4 <__fixunssfsi+0x30>
    44ce:	b9 2f       	mov	r27, r25
    44d0:	99 27       	eor	r25, r25
    44d2:	b7 51       	subi	r27, 0x17	; 23
    44d4:	b0 f0       	brcs	.+44     	; 0x4502 <__fixunssfsi+0x3e>
    44d6:	e1 f0       	breq	.+56     	; 0x4510 <__fixunssfsi+0x4c>
    44d8:	66 0f       	add	r22, r22
    44da:	77 1f       	adc	r23, r23
    44dc:	88 1f       	adc	r24, r24
    44de:	99 1f       	adc	r25, r25
    44e0:	1a f0       	brmi	.+6      	; 0x44e8 <__fixunssfsi+0x24>
    44e2:	ba 95       	dec	r27
    44e4:	c9 f7       	brne	.-14     	; 0x44d8 <__fixunssfsi+0x14>
    44e6:	14 c0       	rjmp	.+40     	; 0x4510 <__fixunssfsi+0x4c>
    44e8:	b1 30       	cpi	r27, 0x01	; 1
    44ea:	91 f0       	breq	.+36     	; 0x4510 <__fixunssfsi+0x4c>
    44ec:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_zero>
    44f0:	b1 e0       	ldi	r27, 0x01	; 1
    44f2:	08 95       	ret
    44f4:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__fp_zero>
    44f8:	67 2f       	mov	r22, r23
    44fa:	78 2f       	mov	r23, r24
    44fc:	88 27       	eor	r24, r24
    44fe:	b8 5f       	subi	r27, 0xF8	; 248
    4500:	39 f0       	breq	.+14     	; 0x4510 <__fixunssfsi+0x4c>
    4502:	b9 3f       	cpi	r27, 0xF9	; 249
    4504:	cc f3       	brlt	.-14     	; 0x44f8 <__fixunssfsi+0x34>
    4506:	86 95       	lsr	r24
    4508:	77 95       	ror	r23
    450a:	67 95       	ror	r22
    450c:	b3 95       	inc	r27
    450e:	d9 f7       	brne	.-10     	; 0x4506 <__fixunssfsi+0x42>
    4510:	3e f4       	brtc	.+14     	; 0x4520 <__fixunssfsi+0x5c>
    4512:	90 95       	com	r25
    4514:	80 95       	com	r24
    4516:	70 95       	com	r23
    4518:	61 95       	neg	r22
    451a:	7f 4f       	sbci	r23, 0xFF	; 255
    451c:	8f 4f       	sbci	r24, 0xFF	; 255
    451e:	9f 4f       	sbci	r25, 0xFF	; 255
    4520:	08 95       	ret

00004522 <__floatunsisf>:
    4522:	e8 94       	clt
    4524:	09 c0       	rjmp	.+18     	; 0x4538 <__floatsisf+0x12>

00004526 <__floatsisf>:
    4526:	97 fb       	bst	r25, 7
    4528:	3e f4       	brtc	.+14     	; 0x4538 <__floatsisf+0x12>
    452a:	90 95       	com	r25
    452c:	80 95       	com	r24
    452e:	70 95       	com	r23
    4530:	61 95       	neg	r22
    4532:	7f 4f       	sbci	r23, 0xFF	; 255
    4534:	8f 4f       	sbci	r24, 0xFF	; 255
    4536:	9f 4f       	sbci	r25, 0xFF	; 255
    4538:	99 23       	and	r25, r25
    453a:	a9 f0       	breq	.+42     	; 0x4566 <__floatsisf+0x40>
    453c:	f9 2f       	mov	r31, r25
    453e:	96 e9       	ldi	r25, 0x96	; 150
    4540:	bb 27       	eor	r27, r27
    4542:	93 95       	inc	r25
    4544:	f6 95       	lsr	r31
    4546:	87 95       	ror	r24
    4548:	77 95       	ror	r23
    454a:	67 95       	ror	r22
    454c:	b7 95       	ror	r27
    454e:	f1 11       	cpse	r31, r1
    4550:	f8 cf       	rjmp	.-16     	; 0x4542 <__floatsisf+0x1c>
    4552:	fa f4       	brpl	.+62     	; 0x4592 <__floatsisf+0x6c>
    4554:	bb 0f       	add	r27, r27
    4556:	11 f4       	brne	.+4      	; 0x455c <__floatsisf+0x36>
    4558:	60 ff       	sbrs	r22, 0
    455a:	1b c0       	rjmp	.+54     	; 0x4592 <__floatsisf+0x6c>
    455c:	6f 5f       	subi	r22, 0xFF	; 255
    455e:	7f 4f       	sbci	r23, 0xFF	; 255
    4560:	8f 4f       	sbci	r24, 0xFF	; 255
    4562:	9f 4f       	sbci	r25, 0xFF	; 255
    4564:	16 c0       	rjmp	.+44     	; 0x4592 <__floatsisf+0x6c>
    4566:	88 23       	and	r24, r24
    4568:	11 f0       	breq	.+4      	; 0x456e <__floatsisf+0x48>
    456a:	96 e9       	ldi	r25, 0x96	; 150
    456c:	11 c0       	rjmp	.+34     	; 0x4590 <__floatsisf+0x6a>
    456e:	77 23       	and	r23, r23
    4570:	21 f0       	breq	.+8      	; 0x457a <__floatsisf+0x54>
    4572:	9e e8       	ldi	r25, 0x8E	; 142
    4574:	87 2f       	mov	r24, r23
    4576:	76 2f       	mov	r23, r22
    4578:	05 c0       	rjmp	.+10     	; 0x4584 <__floatsisf+0x5e>
    457a:	66 23       	and	r22, r22
    457c:	71 f0       	breq	.+28     	; 0x459a <__floatsisf+0x74>
    457e:	96 e8       	ldi	r25, 0x86	; 134
    4580:	86 2f       	mov	r24, r22
    4582:	70 e0       	ldi	r23, 0x00	; 0
    4584:	60 e0       	ldi	r22, 0x00	; 0
    4586:	2a f0       	brmi	.+10     	; 0x4592 <__floatsisf+0x6c>
    4588:	9a 95       	dec	r25
    458a:	66 0f       	add	r22, r22
    458c:	77 1f       	adc	r23, r23
    458e:	88 1f       	adc	r24, r24
    4590:	da f7       	brpl	.-10     	; 0x4588 <__floatsisf+0x62>
    4592:	88 0f       	add	r24, r24
    4594:	96 95       	lsr	r25
    4596:	87 95       	ror	r24
    4598:	97 f9       	bld	r25, 7
    459a:	08 95       	ret

0000459c <__fp_cmp>:
    459c:	99 0f       	add	r25, r25
    459e:	00 08       	sbc	r0, r0
    45a0:	55 0f       	add	r21, r21
    45a2:	aa 0b       	sbc	r26, r26
    45a4:	e0 e8       	ldi	r30, 0x80	; 128
    45a6:	fe ef       	ldi	r31, 0xFE	; 254
    45a8:	16 16       	cp	r1, r22
    45aa:	17 06       	cpc	r1, r23
    45ac:	e8 07       	cpc	r30, r24
    45ae:	f9 07       	cpc	r31, r25
    45b0:	c0 f0       	brcs	.+48     	; 0x45e2 <__fp_cmp+0x46>
    45b2:	12 16       	cp	r1, r18
    45b4:	13 06       	cpc	r1, r19
    45b6:	e4 07       	cpc	r30, r20
    45b8:	f5 07       	cpc	r31, r21
    45ba:	98 f0       	brcs	.+38     	; 0x45e2 <__fp_cmp+0x46>
    45bc:	62 1b       	sub	r22, r18
    45be:	73 0b       	sbc	r23, r19
    45c0:	84 0b       	sbc	r24, r20
    45c2:	95 0b       	sbc	r25, r21
    45c4:	39 f4       	brne	.+14     	; 0x45d4 <__fp_cmp+0x38>
    45c6:	0a 26       	eor	r0, r26
    45c8:	61 f0       	breq	.+24     	; 0x45e2 <__fp_cmp+0x46>
    45ca:	23 2b       	or	r18, r19
    45cc:	24 2b       	or	r18, r20
    45ce:	25 2b       	or	r18, r21
    45d0:	21 f4       	brne	.+8      	; 0x45da <__fp_cmp+0x3e>
    45d2:	08 95       	ret
    45d4:	0a 26       	eor	r0, r26
    45d6:	09 f4       	brne	.+2      	; 0x45da <__fp_cmp+0x3e>
    45d8:	a1 40       	sbci	r26, 0x01	; 1
    45da:	a6 95       	lsr	r26
    45dc:	8f ef       	ldi	r24, 0xFF	; 255
    45de:	81 1d       	adc	r24, r1
    45e0:	81 1d       	adc	r24, r1
    45e2:	08 95       	ret

000045e4 <__gesf2>:
    45e4:	0e 94 ce 22 	call	0x459c	; 0x459c <__fp_cmp>
    45e8:	08 f4       	brcc	.+2      	; 0x45ec <__gesf2+0x8>
    45ea:	8f ef       	ldi	r24, 0xFF	; 255
    45ec:	08 95       	ret

000045ee <__mulsf3>:
    45ee:	0e 94 0a 23 	call	0x4614	; 0x4614 <__mulsf3x>
    45f2:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_round>
    45f6:	0e 94 26 04 	call	0x84c	; 0x84c <__fp_pscA>
    45fa:	38 f0       	brcs	.+14     	; 0x460a <__mulsf3+0x1c>
    45fc:	0e 94 2d 04 	call	0x85a	; 0x85a <__fp_pscB>
    4600:	20 f0       	brcs	.+8      	; 0x460a <__mulsf3+0x1c>
    4602:	95 23       	and	r25, r21
    4604:	11 f0       	breq	.+4      	; 0x460a <__mulsf3+0x1c>
    4606:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_inf>
    460a:	0c 94 23 04 	jmp	0x846	; 0x846 <__fp_nan>
    460e:	11 24       	eor	r1, r1
    4610:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__fp_szero>

00004614 <__mulsf3x>:
    4614:	0e 94 45 04 	call	0x88a	; 0x88a <__fp_split3>
    4618:	70 f3       	brcs	.-36     	; 0x45f6 <__mulsf3+0x8>

0000461a <__mulsf3_pse>:
    461a:	95 9f       	mul	r25, r21
    461c:	c1 f3       	breq	.-16     	; 0x460e <__mulsf3+0x20>
    461e:	95 0f       	add	r25, r21
    4620:	50 e0       	ldi	r21, 0x00	; 0
    4622:	55 1f       	adc	r21, r21
    4624:	62 9f       	mul	r22, r18
    4626:	f0 01       	movw	r30, r0
    4628:	72 9f       	mul	r23, r18
    462a:	bb 27       	eor	r27, r27
    462c:	f0 0d       	add	r31, r0
    462e:	b1 1d       	adc	r27, r1
    4630:	63 9f       	mul	r22, r19
    4632:	aa 27       	eor	r26, r26
    4634:	f0 0d       	add	r31, r0
    4636:	b1 1d       	adc	r27, r1
    4638:	aa 1f       	adc	r26, r26
    463a:	64 9f       	mul	r22, r20
    463c:	66 27       	eor	r22, r22
    463e:	b0 0d       	add	r27, r0
    4640:	a1 1d       	adc	r26, r1
    4642:	66 1f       	adc	r22, r22
    4644:	82 9f       	mul	r24, r18
    4646:	22 27       	eor	r18, r18
    4648:	b0 0d       	add	r27, r0
    464a:	a1 1d       	adc	r26, r1
    464c:	62 1f       	adc	r22, r18
    464e:	73 9f       	mul	r23, r19
    4650:	b0 0d       	add	r27, r0
    4652:	a1 1d       	adc	r26, r1
    4654:	62 1f       	adc	r22, r18
    4656:	83 9f       	mul	r24, r19
    4658:	a0 0d       	add	r26, r0
    465a:	61 1d       	adc	r22, r1
    465c:	22 1f       	adc	r18, r18
    465e:	74 9f       	mul	r23, r20
    4660:	33 27       	eor	r19, r19
    4662:	a0 0d       	add	r26, r0
    4664:	61 1d       	adc	r22, r1
    4666:	23 1f       	adc	r18, r19
    4668:	84 9f       	mul	r24, r20
    466a:	60 0d       	add	r22, r0
    466c:	21 1d       	adc	r18, r1
    466e:	82 2f       	mov	r24, r18
    4670:	76 2f       	mov	r23, r22
    4672:	6a 2f       	mov	r22, r26
    4674:	11 24       	eor	r1, r1
    4676:	9f 57       	subi	r25, 0x7F	; 127
    4678:	50 40       	sbci	r21, 0x00	; 0
    467a:	9a f0       	brmi	.+38     	; 0x46a2 <__mulsf3_pse+0x88>
    467c:	f1 f0       	breq	.+60     	; 0x46ba <__mulsf3_pse+0xa0>
    467e:	88 23       	and	r24, r24
    4680:	4a f0       	brmi	.+18     	; 0x4694 <__mulsf3_pse+0x7a>
    4682:	ee 0f       	add	r30, r30
    4684:	ff 1f       	adc	r31, r31
    4686:	bb 1f       	adc	r27, r27
    4688:	66 1f       	adc	r22, r22
    468a:	77 1f       	adc	r23, r23
    468c:	88 1f       	adc	r24, r24
    468e:	91 50       	subi	r25, 0x01	; 1
    4690:	50 40       	sbci	r21, 0x00	; 0
    4692:	a9 f7       	brne	.-22     	; 0x467e <__mulsf3_pse+0x64>
    4694:	9e 3f       	cpi	r25, 0xFE	; 254
    4696:	51 05       	cpc	r21, r1
    4698:	80 f0       	brcs	.+32     	; 0x46ba <__mulsf3_pse+0xa0>
    469a:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_inf>
    469e:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__fp_szero>
    46a2:	5f 3f       	cpi	r21, 0xFF	; 255
    46a4:	e4 f3       	brlt	.-8      	; 0x469e <__mulsf3_pse+0x84>
    46a6:	98 3e       	cpi	r25, 0xE8	; 232
    46a8:	d4 f3       	brlt	.-12     	; 0x469e <__mulsf3_pse+0x84>
    46aa:	86 95       	lsr	r24
    46ac:	77 95       	ror	r23
    46ae:	67 95       	ror	r22
    46b0:	b7 95       	ror	r27
    46b2:	f7 95       	ror	r31
    46b4:	e7 95       	ror	r30
    46b6:	9f 5f       	subi	r25, 0xFF	; 255
    46b8:	c1 f7       	brne	.-16     	; 0x46aa <__mulsf3_pse+0x90>
    46ba:	fe 2b       	or	r31, r30
    46bc:	88 0f       	add	r24, r24
    46be:	91 1d       	adc	r25, r1
    46c0:	96 95       	lsr	r25
    46c2:	87 95       	ror	r24
    46c4:	97 f9       	bld	r25, 7
    46c6:	08 95       	ret

000046c8 <__unordsf2>:
    46c8:	0e 94 ce 22 	call	0x459c	; 0x459c <__fp_cmp>
    46cc:	88 0b       	sbc	r24, r24
    46ce:	99 0b       	sbc	r25, r25
    46d0:	08 95       	ret

000046d2 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    46d2:	cf 93       	push	r28
  uint8_t sreg = SREG;
    46d4:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    46d6:	f8 94       	cli
  if (!initialized) {
    46d8:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <_ZN8SPIClass11initializedE>
    46dc:	81 11       	cpse	r24, r1
    46de:	27 c0       	rjmp	.+78     	; 0x472e <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    46e0:	ea e9       	ldi	r30, 0x9A	; 154
    46e2:	f1 e0       	ldi	r31, 0x01	; 1
    46e4:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    46e6:	e6 e8       	ldi	r30, 0x86	; 134
    46e8:	f1 e0       	ldi	r31, 0x01	; 1
    46ea:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    46ec:	e8 2f       	mov	r30, r24
    46ee:	f0 e0       	ldi	r31, 0x00	; 0
    46f0:	ee 0f       	add	r30, r30
    46f2:	ff 1f       	adc	r31, r31
    46f4:	e8 54       	subi	r30, 0x48	; 72
    46f6:	fe 4f       	sbci	r31, 0xFE	; 254
    46f8:	a5 91       	lpm	r26, Z+
    46fa:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    46fc:	ec 91       	ld	r30, X
    46fe:	e9 23       	and	r30, r25
    4700:	21 f4       	brne	.+8      	; 0x470a <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    4702:	61 e0       	ldi	r22, 0x01	; 1
    4704:	8a e0       	ldi	r24, 0x0A	; 10
    4706:	0e 94 83 0c 	call	0x1906	; 0x1906 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    470a:	61 e0       	ldi	r22, 0x01	; 1
    470c:	8a e0       	ldi	r24, 0x0A	; 10
    470e:	0e 94 47 0c 	call	0x188e	; 0x188e <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    4712:	8c b5       	in	r24, 0x2c	; 44
    4714:	80 61       	ori	r24, 0x10	; 16
    4716:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    4718:	8c b5       	in	r24, 0x2c	; 44
    471a:	80 64       	ori	r24, 0x40	; 64
    471c:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    471e:	61 e0       	ldi	r22, 0x01	; 1
    4720:	8d e0       	ldi	r24, 0x0D	; 13
    4722:	0e 94 47 0c 	call	0x188e	; 0x188e <pinMode>
    pinMode(MOSI, OUTPUT);
    4726:	61 e0       	ldi	r22, 0x01	; 1
    4728:	8b e0       	ldi	r24, 0x0B	; 11
    472a:	0e 94 47 0c 	call	0x188e	; 0x188e <pinMode>
  }
  initialized++; // reference count
    472e:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <_ZN8SPIClass11initializedE>
    4732:	8f 5f       	subi	r24, 0xFF	; 255
    4734:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <_ZN8SPIClass11initializedE>
  SREG = sreg;
    4738:	cf bf       	out	0x3f, r28	; 63
}
    473a:	cf 91       	pop	r28
    473c:	08 95       	ret

0000473e <_Z8makeWordhh>:
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
unsigned int makeWord(unsigned char h, unsigned char l) { return (h << 8) | l; }
    473e:	70 e0       	ldi	r23, 0x00	; 0
    4740:	9b 01       	movw	r18, r22
    4742:	38 2b       	or	r19, r24
    4744:	c9 01       	movw	r24, r18
    4746:	08 95       	ret

00004748 <__udivmodhi4>:
    4748:	aa 1b       	sub	r26, r26
    474a:	bb 1b       	sub	r27, r27
    474c:	51 e1       	ldi	r21, 0x11	; 17
    474e:	07 c0       	rjmp	.+14     	; 0x475e <__udivmodhi4_ep>

00004750 <__udivmodhi4_loop>:
    4750:	aa 1f       	adc	r26, r26
    4752:	bb 1f       	adc	r27, r27
    4754:	a6 17       	cp	r26, r22
    4756:	b7 07       	cpc	r27, r23
    4758:	10 f0       	brcs	.+4      	; 0x475e <__udivmodhi4_ep>
    475a:	a6 1b       	sub	r26, r22
    475c:	b7 0b       	sbc	r27, r23

0000475e <__udivmodhi4_ep>:
    475e:	88 1f       	adc	r24, r24
    4760:	99 1f       	adc	r25, r25
    4762:	5a 95       	dec	r21
    4764:	a9 f7       	brne	.-22     	; 0x4750 <__udivmodhi4_loop>
    4766:	80 95       	com	r24
    4768:	90 95       	com	r25
    476a:	bc 01       	movw	r22, r24
    476c:	cd 01       	movw	r24, r26
    476e:	08 95       	ret

00004770 <__udivmodsi4>:
    4770:	a1 e2       	ldi	r26, 0x21	; 33
    4772:	1a 2e       	mov	r1, r26
    4774:	aa 1b       	sub	r26, r26
    4776:	bb 1b       	sub	r27, r27
    4778:	fd 01       	movw	r30, r26
    477a:	0d c0       	rjmp	.+26     	; 0x4796 <__udivmodsi4_ep>

0000477c <__udivmodsi4_loop>:
    477c:	aa 1f       	adc	r26, r26
    477e:	bb 1f       	adc	r27, r27
    4780:	ee 1f       	adc	r30, r30
    4782:	ff 1f       	adc	r31, r31
    4784:	a2 17       	cp	r26, r18
    4786:	b3 07       	cpc	r27, r19
    4788:	e4 07       	cpc	r30, r20
    478a:	f5 07       	cpc	r31, r21
    478c:	20 f0       	brcs	.+8      	; 0x4796 <__udivmodsi4_ep>
    478e:	a2 1b       	sub	r26, r18
    4790:	b3 0b       	sbc	r27, r19
    4792:	e4 0b       	sbc	r30, r20
    4794:	f5 0b       	sbc	r31, r21

00004796 <__udivmodsi4_ep>:
    4796:	66 1f       	adc	r22, r22
    4798:	77 1f       	adc	r23, r23
    479a:	88 1f       	adc	r24, r24
    479c:	99 1f       	adc	r25, r25
    479e:	1a 94       	dec	r1
    47a0:	69 f7       	brne	.-38     	; 0x477c <__udivmodsi4_loop>
    47a2:	60 95       	com	r22
    47a4:	70 95       	com	r23
    47a6:	80 95       	com	r24
    47a8:	90 95       	com	r25
    47aa:	9b 01       	movw	r18, r22
    47ac:	ac 01       	movw	r20, r24
    47ae:	bd 01       	movw	r22, r26
    47b0:	cf 01       	movw	r24, r30
    47b2:	08 95       	ret

000047b4 <__tablejump2__>:
    47b4:	ee 0f       	add	r30, r30
    47b6:	ff 1f       	adc	r31, r31
    47b8:	05 90       	lpm	r0, Z+
    47ba:	f4 91       	lpm	r31, Z
    47bc:	e0 2d       	mov	r30, r0
    47be:	09 94       	ijmp

000047c0 <strstr>:
    47c0:	fb 01       	movw	r30, r22
    47c2:	51 91       	ld	r21, Z+
    47c4:	55 23       	and	r21, r21
    47c6:	a9 f0       	breq	.+42     	; 0x47f2 <strstr+0x32>
    47c8:	bf 01       	movw	r22, r30
    47ca:	dc 01       	movw	r26, r24
    47cc:	4d 91       	ld	r20, X+
    47ce:	45 17       	cp	r20, r21
    47d0:	41 11       	cpse	r20, r1
    47d2:	e1 f7       	brne	.-8      	; 0x47cc <strstr+0xc>
    47d4:	59 f4       	brne	.+22     	; 0x47ec <strstr+0x2c>
    47d6:	cd 01       	movw	r24, r26
    47d8:	01 90       	ld	r0, Z+
    47da:	00 20       	and	r0, r0
    47dc:	49 f0       	breq	.+18     	; 0x47f0 <strstr+0x30>
    47de:	4d 91       	ld	r20, X+
    47e0:	40 15       	cp	r20, r0
    47e2:	41 11       	cpse	r20, r1
    47e4:	c9 f3       	breq	.-14     	; 0x47d8 <strstr+0x18>
    47e6:	fb 01       	movw	r30, r22
    47e8:	41 11       	cpse	r20, r1
    47ea:	ef cf       	rjmp	.-34     	; 0x47ca <strstr+0xa>
    47ec:	81 e0       	ldi	r24, 0x01	; 1
    47ee:	90 e0       	ldi	r25, 0x00	; 0
    47f0:	01 97       	sbiw	r24, 0x01	; 1
    47f2:	08 95       	ret

000047f4 <sprintf>:
    47f4:	ae e0       	ldi	r26, 0x0E	; 14
    47f6:	b0 e0       	ldi	r27, 0x00	; 0
    47f8:	e0 e0       	ldi	r30, 0x00	; 0
    47fa:	f4 e2       	ldi	r31, 0x24	; 36
    47fc:	0c 94 bb 26 	jmp	0x4d76	; 0x4d76 <__prologue_saves__+0x1c>
    4800:	0d 89       	ldd	r16, Y+21	; 0x15
    4802:	1e 89       	ldd	r17, Y+22	; 0x16
    4804:	86 e0       	ldi	r24, 0x06	; 6
    4806:	8c 83       	std	Y+4, r24	; 0x04
    4808:	1a 83       	std	Y+2, r17	; 0x02
    480a:	09 83       	std	Y+1, r16	; 0x01
    480c:	8f ef       	ldi	r24, 0xFF	; 255
    480e:	9f e7       	ldi	r25, 0x7F	; 127
    4810:	9e 83       	std	Y+6, r25	; 0x06
    4812:	8d 83       	std	Y+5, r24	; 0x05
    4814:	ae 01       	movw	r20, r28
    4816:	47 5e       	subi	r20, 0xE7	; 231
    4818:	5f 4f       	sbci	r21, 0xFF	; 255
    481a:	6f 89       	ldd	r22, Y+23	; 0x17
    481c:	78 8d       	ldd	r23, Y+24	; 0x18
    481e:	ce 01       	movw	r24, r28
    4820:	01 96       	adiw	r24, 0x01	; 1
    4822:	0e 94 1c 24 	call	0x4838	; 0x4838 <vfprintf>
    4826:	ef 81       	ldd	r30, Y+7	; 0x07
    4828:	f8 85       	ldd	r31, Y+8	; 0x08
    482a:	e0 0f       	add	r30, r16
    482c:	f1 1f       	adc	r31, r17
    482e:	10 82       	st	Z, r1
    4830:	2e 96       	adiw	r28, 0x0e	; 14
    4832:	e4 e0       	ldi	r30, 0x04	; 4
    4834:	0c 94 d7 26 	jmp	0x4dae	; 0x4dae <__epilogue_restores__+0x1c>

00004838 <vfprintf>:
    4838:	ab e0       	ldi	r26, 0x0B	; 11
    483a:	b0 e0       	ldi	r27, 0x00	; 0
    483c:	e2 e2       	ldi	r30, 0x22	; 34
    483e:	f4 e2       	ldi	r31, 0x24	; 36
    4840:	0c 94 ad 26 	jmp	0x4d5a	; 0x4d5a <__prologue_saves__>
    4844:	6c 01       	movw	r12, r24
    4846:	7b 01       	movw	r14, r22
    4848:	8a 01       	movw	r16, r20
    484a:	fc 01       	movw	r30, r24
    484c:	17 82       	std	Z+7, r1	; 0x07
    484e:	16 82       	std	Z+6, r1	; 0x06
    4850:	83 81       	ldd	r24, Z+3	; 0x03
    4852:	81 ff       	sbrs	r24, 1
    4854:	cc c1       	rjmp	.+920    	; 0x4bee <vfprintf+0x3b6>
    4856:	ce 01       	movw	r24, r28
    4858:	01 96       	adiw	r24, 0x01	; 1
    485a:	3c 01       	movw	r6, r24
    485c:	f6 01       	movw	r30, r12
    485e:	93 81       	ldd	r25, Z+3	; 0x03
    4860:	f7 01       	movw	r30, r14
    4862:	93 fd       	sbrc	r25, 3
    4864:	85 91       	lpm	r24, Z+
    4866:	93 ff       	sbrs	r25, 3
    4868:	81 91       	ld	r24, Z+
    486a:	7f 01       	movw	r14, r30
    486c:	88 23       	and	r24, r24
    486e:	09 f4       	brne	.+2      	; 0x4872 <vfprintf+0x3a>
    4870:	ba c1       	rjmp	.+884    	; 0x4be6 <vfprintf+0x3ae>
    4872:	85 32       	cpi	r24, 0x25	; 37
    4874:	39 f4       	brne	.+14     	; 0x4884 <vfprintf+0x4c>
    4876:	93 fd       	sbrc	r25, 3
    4878:	85 91       	lpm	r24, Z+
    487a:	93 ff       	sbrs	r25, 3
    487c:	81 91       	ld	r24, Z+
    487e:	7f 01       	movw	r14, r30
    4880:	85 32       	cpi	r24, 0x25	; 37
    4882:	29 f4       	brne	.+10     	; 0x488e <vfprintf+0x56>
    4884:	b6 01       	movw	r22, r12
    4886:	90 e0       	ldi	r25, 0x00	; 0
    4888:	0e 94 13 26 	call	0x4c26	; 0x4c26 <fputc>
    488c:	e7 cf       	rjmp	.-50     	; 0x485c <vfprintf+0x24>
    488e:	91 2c       	mov	r9, r1
    4890:	21 2c       	mov	r2, r1
    4892:	31 2c       	mov	r3, r1
    4894:	ff e1       	ldi	r31, 0x1F	; 31
    4896:	f3 15       	cp	r31, r3
    4898:	d8 f0       	brcs	.+54     	; 0x48d0 <vfprintf+0x98>
    489a:	8b 32       	cpi	r24, 0x2B	; 43
    489c:	79 f0       	breq	.+30     	; 0x48bc <vfprintf+0x84>
    489e:	38 f4       	brcc	.+14     	; 0x48ae <vfprintf+0x76>
    48a0:	80 32       	cpi	r24, 0x20	; 32
    48a2:	79 f0       	breq	.+30     	; 0x48c2 <vfprintf+0x8a>
    48a4:	83 32       	cpi	r24, 0x23	; 35
    48a6:	a1 f4       	brne	.+40     	; 0x48d0 <vfprintf+0x98>
    48a8:	23 2d       	mov	r18, r3
    48aa:	20 61       	ori	r18, 0x10	; 16
    48ac:	1d c0       	rjmp	.+58     	; 0x48e8 <vfprintf+0xb0>
    48ae:	8d 32       	cpi	r24, 0x2D	; 45
    48b0:	61 f0       	breq	.+24     	; 0x48ca <vfprintf+0x92>
    48b2:	80 33       	cpi	r24, 0x30	; 48
    48b4:	69 f4       	brne	.+26     	; 0x48d0 <vfprintf+0x98>
    48b6:	23 2d       	mov	r18, r3
    48b8:	21 60       	ori	r18, 0x01	; 1
    48ba:	16 c0       	rjmp	.+44     	; 0x48e8 <vfprintf+0xb0>
    48bc:	83 2d       	mov	r24, r3
    48be:	82 60       	ori	r24, 0x02	; 2
    48c0:	38 2e       	mov	r3, r24
    48c2:	e3 2d       	mov	r30, r3
    48c4:	e4 60       	ori	r30, 0x04	; 4
    48c6:	3e 2e       	mov	r3, r30
    48c8:	2a c0       	rjmp	.+84     	; 0x491e <vfprintf+0xe6>
    48ca:	f3 2d       	mov	r31, r3
    48cc:	f8 60       	ori	r31, 0x08	; 8
    48ce:	1d c0       	rjmp	.+58     	; 0x490a <vfprintf+0xd2>
    48d0:	37 fc       	sbrc	r3, 7
    48d2:	2d c0       	rjmp	.+90     	; 0x492e <vfprintf+0xf6>
    48d4:	20 ed       	ldi	r18, 0xD0	; 208
    48d6:	28 0f       	add	r18, r24
    48d8:	2a 30       	cpi	r18, 0x0A	; 10
    48da:	40 f0       	brcs	.+16     	; 0x48ec <vfprintf+0xb4>
    48dc:	8e 32       	cpi	r24, 0x2E	; 46
    48de:	b9 f4       	brne	.+46     	; 0x490e <vfprintf+0xd6>
    48e0:	36 fc       	sbrc	r3, 6
    48e2:	81 c1       	rjmp	.+770    	; 0x4be6 <vfprintf+0x3ae>
    48e4:	23 2d       	mov	r18, r3
    48e6:	20 64       	ori	r18, 0x40	; 64
    48e8:	32 2e       	mov	r3, r18
    48ea:	19 c0       	rjmp	.+50     	; 0x491e <vfprintf+0xe6>
    48ec:	36 fe       	sbrs	r3, 6
    48ee:	06 c0       	rjmp	.+12     	; 0x48fc <vfprintf+0xc4>
    48f0:	8a e0       	ldi	r24, 0x0A	; 10
    48f2:	98 9e       	mul	r9, r24
    48f4:	20 0d       	add	r18, r0
    48f6:	11 24       	eor	r1, r1
    48f8:	92 2e       	mov	r9, r18
    48fa:	11 c0       	rjmp	.+34     	; 0x491e <vfprintf+0xe6>
    48fc:	ea e0       	ldi	r30, 0x0A	; 10
    48fe:	2e 9e       	mul	r2, r30
    4900:	20 0d       	add	r18, r0
    4902:	11 24       	eor	r1, r1
    4904:	22 2e       	mov	r2, r18
    4906:	f3 2d       	mov	r31, r3
    4908:	f0 62       	ori	r31, 0x20	; 32
    490a:	3f 2e       	mov	r3, r31
    490c:	08 c0       	rjmp	.+16     	; 0x491e <vfprintf+0xe6>
    490e:	8c 36       	cpi	r24, 0x6C	; 108
    4910:	21 f4       	brne	.+8      	; 0x491a <vfprintf+0xe2>
    4912:	83 2d       	mov	r24, r3
    4914:	80 68       	ori	r24, 0x80	; 128
    4916:	38 2e       	mov	r3, r24
    4918:	02 c0       	rjmp	.+4      	; 0x491e <vfprintf+0xe6>
    491a:	88 36       	cpi	r24, 0x68	; 104
    491c:	41 f4       	brne	.+16     	; 0x492e <vfprintf+0xf6>
    491e:	f7 01       	movw	r30, r14
    4920:	93 fd       	sbrc	r25, 3
    4922:	85 91       	lpm	r24, Z+
    4924:	93 ff       	sbrs	r25, 3
    4926:	81 91       	ld	r24, Z+
    4928:	7f 01       	movw	r14, r30
    492a:	81 11       	cpse	r24, r1
    492c:	b3 cf       	rjmp	.-154    	; 0x4894 <vfprintf+0x5c>
    492e:	98 2f       	mov	r25, r24
    4930:	9f 7d       	andi	r25, 0xDF	; 223
    4932:	95 54       	subi	r25, 0x45	; 69
    4934:	93 30       	cpi	r25, 0x03	; 3
    4936:	28 f4       	brcc	.+10     	; 0x4942 <vfprintf+0x10a>
    4938:	0c 5f       	subi	r16, 0xFC	; 252
    493a:	1f 4f       	sbci	r17, 0xFF	; 255
    493c:	9f e3       	ldi	r25, 0x3F	; 63
    493e:	99 83       	std	Y+1, r25	; 0x01
    4940:	0d c0       	rjmp	.+26     	; 0x495c <vfprintf+0x124>
    4942:	83 36       	cpi	r24, 0x63	; 99
    4944:	31 f0       	breq	.+12     	; 0x4952 <vfprintf+0x11a>
    4946:	83 37       	cpi	r24, 0x73	; 115
    4948:	71 f0       	breq	.+28     	; 0x4966 <vfprintf+0x12e>
    494a:	83 35       	cpi	r24, 0x53	; 83
    494c:	09 f0       	breq	.+2      	; 0x4950 <vfprintf+0x118>
    494e:	59 c0       	rjmp	.+178    	; 0x4a02 <vfprintf+0x1ca>
    4950:	21 c0       	rjmp	.+66     	; 0x4994 <vfprintf+0x15c>
    4952:	f8 01       	movw	r30, r16
    4954:	80 81       	ld	r24, Z
    4956:	89 83       	std	Y+1, r24	; 0x01
    4958:	0e 5f       	subi	r16, 0xFE	; 254
    495a:	1f 4f       	sbci	r17, 0xFF	; 255
    495c:	88 24       	eor	r8, r8
    495e:	83 94       	inc	r8
    4960:	91 2c       	mov	r9, r1
    4962:	53 01       	movw	r10, r6
    4964:	13 c0       	rjmp	.+38     	; 0x498c <vfprintf+0x154>
    4966:	28 01       	movw	r4, r16
    4968:	f2 e0       	ldi	r31, 0x02	; 2
    496a:	4f 0e       	add	r4, r31
    496c:	51 1c       	adc	r5, r1
    496e:	f8 01       	movw	r30, r16
    4970:	a0 80       	ld	r10, Z
    4972:	b1 80       	ldd	r11, Z+1	; 0x01
    4974:	36 fe       	sbrs	r3, 6
    4976:	03 c0       	rjmp	.+6      	; 0x497e <vfprintf+0x146>
    4978:	69 2d       	mov	r22, r9
    497a:	70 e0       	ldi	r23, 0x00	; 0
    497c:	02 c0       	rjmp	.+4      	; 0x4982 <vfprintf+0x14a>
    497e:	6f ef       	ldi	r22, 0xFF	; 255
    4980:	7f ef       	ldi	r23, 0xFF	; 255
    4982:	c5 01       	movw	r24, r10
    4984:	0e 94 08 26 	call	0x4c10	; 0x4c10 <strnlen>
    4988:	4c 01       	movw	r8, r24
    498a:	82 01       	movw	r16, r4
    498c:	f3 2d       	mov	r31, r3
    498e:	ff 77       	andi	r31, 0x7F	; 127
    4990:	3f 2e       	mov	r3, r31
    4992:	16 c0       	rjmp	.+44     	; 0x49c0 <vfprintf+0x188>
    4994:	28 01       	movw	r4, r16
    4996:	22 e0       	ldi	r18, 0x02	; 2
    4998:	42 0e       	add	r4, r18
    499a:	51 1c       	adc	r5, r1
    499c:	f8 01       	movw	r30, r16
    499e:	a0 80       	ld	r10, Z
    49a0:	b1 80       	ldd	r11, Z+1	; 0x01
    49a2:	36 fe       	sbrs	r3, 6
    49a4:	03 c0       	rjmp	.+6      	; 0x49ac <vfprintf+0x174>
    49a6:	69 2d       	mov	r22, r9
    49a8:	70 e0       	ldi	r23, 0x00	; 0
    49aa:	02 c0       	rjmp	.+4      	; 0x49b0 <vfprintf+0x178>
    49ac:	6f ef       	ldi	r22, 0xFF	; 255
    49ae:	7f ef       	ldi	r23, 0xFF	; 255
    49b0:	c5 01       	movw	r24, r10
    49b2:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <strnlen_P>
    49b6:	4c 01       	movw	r8, r24
    49b8:	f3 2d       	mov	r31, r3
    49ba:	f0 68       	ori	r31, 0x80	; 128
    49bc:	3f 2e       	mov	r3, r31
    49be:	82 01       	movw	r16, r4
    49c0:	33 fc       	sbrc	r3, 3
    49c2:	1b c0       	rjmp	.+54     	; 0x49fa <vfprintf+0x1c2>
    49c4:	82 2d       	mov	r24, r2
    49c6:	90 e0       	ldi	r25, 0x00	; 0
    49c8:	88 16       	cp	r8, r24
    49ca:	99 06       	cpc	r9, r25
    49cc:	b0 f4       	brcc	.+44     	; 0x49fa <vfprintf+0x1c2>
    49ce:	b6 01       	movw	r22, r12
    49d0:	80 e2       	ldi	r24, 0x20	; 32
    49d2:	90 e0       	ldi	r25, 0x00	; 0
    49d4:	0e 94 13 26 	call	0x4c26	; 0x4c26 <fputc>
    49d8:	2a 94       	dec	r2
    49da:	f4 cf       	rjmp	.-24     	; 0x49c4 <vfprintf+0x18c>
    49dc:	f5 01       	movw	r30, r10
    49de:	37 fc       	sbrc	r3, 7
    49e0:	85 91       	lpm	r24, Z+
    49e2:	37 fe       	sbrs	r3, 7
    49e4:	81 91       	ld	r24, Z+
    49e6:	5f 01       	movw	r10, r30
    49e8:	b6 01       	movw	r22, r12
    49ea:	90 e0       	ldi	r25, 0x00	; 0
    49ec:	0e 94 13 26 	call	0x4c26	; 0x4c26 <fputc>
    49f0:	21 10       	cpse	r2, r1
    49f2:	2a 94       	dec	r2
    49f4:	21 e0       	ldi	r18, 0x01	; 1
    49f6:	82 1a       	sub	r8, r18
    49f8:	91 08       	sbc	r9, r1
    49fa:	81 14       	cp	r8, r1
    49fc:	91 04       	cpc	r9, r1
    49fe:	71 f7       	brne	.-36     	; 0x49dc <vfprintf+0x1a4>
    4a00:	e8 c0       	rjmp	.+464    	; 0x4bd2 <vfprintf+0x39a>
    4a02:	84 36       	cpi	r24, 0x64	; 100
    4a04:	11 f0       	breq	.+4      	; 0x4a0a <vfprintf+0x1d2>
    4a06:	89 36       	cpi	r24, 0x69	; 105
    4a08:	41 f5       	brne	.+80     	; 0x4a5a <vfprintf+0x222>
    4a0a:	f8 01       	movw	r30, r16
    4a0c:	37 fe       	sbrs	r3, 7
    4a0e:	07 c0       	rjmp	.+14     	; 0x4a1e <vfprintf+0x1e6>
    4a10:	60 81       	ld	r22, Z
    4a12:	71 81       	ldd	r23, Z+1	; 0x01
    4a14:	82 81       	ldd	r24, Z+2	; 0x02
    4a16:	93 81       	ldd	r25, Z+3	; 0x03
    4a18:	0c 5f       	subi	r16, 0xFC	; 252
    4a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a1c:	08 c0       	rjmp	.+16     	; 0x4a2e <vfprintf+0x1f6>
    4a1e:	60 81       	ld	r22, Z
    4a20:	71 81       	ldd	r23, Z+1	; 0x01
    4a22:	07 2e       	mov	r0, r23
    4a24:	00 0c       	add	r0, r0
    4a26:	88 0b       	sbc	r24, r24
    4a28:	99 0b       	sbc	r25, r25
    4a2a:	0e 5f       	subi	r16, 0xFE	; 254
    4a2c:	1f 4f       	sbci	r17, 0xFF	; 255
    4a2e:	f3 2d       	mov	r31, r3
    4a30:	ff 76       	andi	r31, 0x6F	; 111
    4a32:	3f 2e       	mov	r3, r31
    4a34:	97 ff       	sbrs	r25, 7
    4a36:	09 c0       	rjmp	.+18     	; 0x4a4a <vfprintf+0x212>
    4a38:	90 95       	com	r25
    4a3a:	80 95       	com	r24
    4a3c:	70 95       	com	r23
    4a3e:	61 95       	neg	r22
    4a40:	7f 4f       	sbci	r23, 0xFF	; 255
    4a42:	8f 4f       	sbci	r24, 0xFF	; 255
    4a44:	9f 4f       	sbci	r25, 0xFF	; 255
    4a46:	f0 68       	ori	r31, 0x80	; 128
    4a48:	3f 2e       	mov	r3, r31
    4a4a:	2a e0       	ldi	r18, 0x0A	; 10
    4a4c:	30 e0       	ldi	r19, 0x00	; 0
    4a4e:	a3 01       	movw	r20, r6
    4a50:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <__ultoa_invert>
    4a54:	88 2e       	mov	r8, r24
    4a56:	86 18       	sub	r8, r6
    4a58:	45 c0       	rjmp	.+138    	; 0x4ae4 <vfprintf+0x2ac>
    4a5a:	85 37       	cpi	r24, 0x75	; 117
    4a5c:	31 f4       	brne	.+12     	; 0x4a6a <vfprintf+0x232>
    4a5e:	23 2d       	mov	r18, r3
    4a60:	2f 7e       	andi	r18, 0xEF	; 239
    4a62:	b2 2e       	mov	r11, r18
    4a64:	2a e0       	ldi	r18, 0x0A	; 10
    4a66:	30 e0       	ldi	r19, 0x00	; 0
    4a68:	25 c0       	rjmp	.+74     	; 0x4ab4 <vfprintf+0x27c>
    4a6a:	93 2d       	mov	r25, r3
    4a6c:	99 7f       	andi	r25, 0xF9	; 249
    4a6e:	b9 2e       	mov	r11, r25
    4a70:	8f 36       	cpi	r24, 0x6F	; 111
    4a72:	c1 f0       	breq	.+48     	; 0x4aa4 <vfprintf+0x26c>
    4a74:	18 f4       	brcc	.+6      	; 0x4a7c <vfprintf+0x244>
    4a76:	88 35       	cpi	r24, 0x58	; 88
    4a78:	79 f0       	breq	.+30     	; 0x4a98 <vfprintf+0x260>
    4a7a:	b5 c0       	rjmp	.+362    	; 0x4be6 <vfprintf+0x3ae>
    4a7c:	80 37       	cpi	r24, 0x70	; 112
    4a7e:	19 f0       	breq	.+6      	; 0x4a86 <vfprintf+0x24e>
    4a80:	88 37       	cpi	r24, 0x78	; 120
    4a82:	21 f0       	breq	.+8      	; 0x4a8c <vfprintf+0x254>
    4a84:	b0 c0       	rjmp	.+352    	; 0x4be6 <vfprintf+0x3ae>
    4a86:	e9 2f       	mov	r30, r25
    4a88:	e0 61       	ori	r30, 0x10	; 16
    4a8a:	be 2e       	mov	r11, r30
    4a8c:	b4 fe       	sbrs	r11, 4
    4a8e:	0d c0       	rjmp	.+26     	; 0x4aaa <vfprintf+0x272>
    4a90:	fb 2d       	mov	r31, r11
    4a92:	f4 60       	ori	r31, 0x04	; 4
    4a94:	bf 2e       	mov	r11, r31
    4a96:	09 c0       	rjmp	.+18     	; 0x4aaa <vfprintf+0x272>
    4a98:	34 fe       	sbrs	r3, 4
    4a9a:	0a c0       	rjmp	.+20     	; 0x4ab0 <vfprintf+0x278>
    4a9c:	29 2f       	mov	r18, r25
    4a9e:	26 60       	ori	r18, 0x06	; 6
    4aa0:	b2 2e       	mov	r11, r18
    4aa2:	06 c0       	rjmp	.+12     	; 0x4ab0 <vfprintf+0x278>
    4aa4:	28 e0       	ldi	r18, 0x08	; 8
    4aa6:	30 e0       	ldi	r19, 0x00	; 0
    4aa8:	05 c0       	rjmp	.+10     	; 0x4ab4 <vfprintf+0x27c>
    4aaa:	20 e1       	ldi	r18, 0x10	; 16
    4aac:	30 e0       	ldi	r19, 0x00	; 0
    4aae:	02 c0       	rjmp	.+4      	; 0x4ab4 <vfprintf+0x27c>
    4ab0:	20 e1       	ldi	r18, 0x10	; 16
    4ab2:	32 e0       	ldi	r19, 0x02	; 2
    4ab4:	f8 01       	movw	r30, r16
    4ab6:	b7 fe       	sbrs	r11, 7
    4ab8:	07 c0       	rjmp	.+14     	; 0x4ac8 <vfprintf+0x290>
    4aba:	60 81       	ld	r22, Z
    4abc:	71 81       	ldd	r23, Z+1	; 0x01
    4abe:	82 81       	ldd	r24, Z+2	; 0x02
    4ac0:	93 81       	ldd	r25, Z+3	; 0x03
    4ac2:	0c 5f       	subi	r16, 0xFC	; 252
    4ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ac6:	06 c0       	rjmp	.+12     	; 0x4ad4 <vfprintf+0x29c>
    4ac8:	60 81       	ld	r22, Z
    4aca:	71 81       	ldd	r23, Z+1	; 0x01
    4acc:	80 e0       	ldi	r24, 0x00	; 0
    4ace:	90 e0       	ldi	r25, 0x00	; 0
    4ad0:	0e 5f       	subi	r16, 0xFE	; 254
    4ad2:	1f 4f       	sbci	r17, 0xFF	; 255
    4ad4:	a3 01       	movw	r20, r6
    4ad6:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <__ultoa_invert>
    4ada:	88 2e       	mov	r8, r24
    4adc:	86 18       	sub	r8, r6
    4ade:	fb 2d       	mov	r31, r11
    4ae0:	ff 77       	andi	r31, 0x7F	; 127
    4ae2:	3f 2e       	mov	r3, r31
    4ae4:	36 fe       	sbrs	r3, 6
    4ae6:	0d c0       	rjmp	.+26     	; 0x4b02 <vfprintf+0x2ca>
    4ae8:	23 2d       	mov	r18, r3
    4aea:	2e 7f       	andi	r18, 0xFE	; 254
    4aec:	a2 2e       	mov	r10, r18
    4aee:	89 14       	cp	r8, r9
    4af0:	58 f4       	brcc	.+22     	; 0x4b08 <vfprintf+0x2d0>
    4af2:	34 fe       	sbrs	r3, 4
    4af4:	0b c0       	rjmp	.+22     	; 0x4b0c <vfprintf+0x2d4>
    4af6:	32 fc       	sbrc	r3, 2
    4af8:	09 c0       	rjmp	.+18     	; 0x4b0c <vfprintf+0x2d4>
    4afa:	83 2d       	mov	r24, r3
    4afc:	8e 7e       	andi	r24, 0xEE	; 238
    4afe:	a8 2e       	mov	r10, r24
    4b00:	05 c0       	rjmp	.+10     	; 0x4b0c <vfprintf+0x2d4>
    4b02:	b8 2c       	mov	r11, r8
    4b04:	a3 2c       	mov	r10, r3
    4b06:	03 c0       	rjmp	.+6      	; 0x4b0e <vfprintf+0x2d6>
    4b08:	b8 2c       	mov	r11, r8
    4b0a:	01 c0       	rjmp	.+2      	; 0x4b0e <vfprintf+0x2d6>
    4b0c:	b9 2c       	mov	r11, r9
    4b0e:	a4 fe       	sbrs	r10, 4
    4b10:	0f c0       	rjmp	.+30     	; 0x4b30 <vfprintf+0x2f8>
    4b12:	fe 01       	movw	r30, r28
    4b14:	e8 0d       	add	r30, r8
    4b16:	f1 1d       	adc	r31, r1
    4b18:	80 81       	ld	r24, Z
    4b1a:	80 33       	cpi	r24, 0x30	; 48
    4b1c:	21 f4       	brne	.+8      	; 0x4b26 <vfprintf+0x2ee>
    4b1e:	9a 2d       	mov	r25, r10
    4b20:	99 7e       	andi	r25, 0xE9	; 233
    4b22:	a9 2e       	mov	r10, r25
    4b24:	09 c0       	rjmp	.+18     	; 0x4b38 <vfprintf+0x300>
    4b26:	a2 fe       	sbrs	r10, 2
    4b28:	06 c0       	rjmp	.+12     	; 0x4b36 <vfprintf+0x2fe>
    4b2a:	b3 94       	inc	r11
    4b2c:	b3 94       	inc	r11
    4b2e:	04 c0       	rjmp	.+8      	; 0x4b38 <vfprintf+0x300>
    4b30:	8a 2d       	mov	r24, r10
    4b32:	86 78       	andi	r24, 0x86	; 134
    4b34:	09 f0       	breq	.+2      	; 0x4b38 <vfprintf+0x300>
    4b36:	b3 94       	inc	r11
    4b38:	a3 fc       	sbrc	r10, 3
    4b3a:	11 c0       	rjmp	.+34     	; 0x4b5e <vfprintf+0x326>
    4b3c:	a0 fe       	sbrs	r10, 0
    4b3e:	06 c0       	rjmp	.+12     	; 0x4b4c <vfprintf+0x314>
    4b40:	b2 14       	cp	r11, r2
    4b42:	88 f4       	brcc	.+34     	; 0x4b66 <vfprintf+0x32e>
    4b44:	28 0c       	add	r2, r8
    4b46:	92 2c       	mov	r9, r2
    4b48:	9b 18       	sub	r9, r11
    4b4a:	0e c0       	rjmp	.+28     	; 0x4b68 <vfprintf+0x330>
    4b4c:	b2 14       	cp	r11, r2
    4b4e:	60 f4       	brcc	.+24     	; 0x4b68 <vfprintf+0x330>
    4b50:	b6 01       	movw	r22, r12
    4b52:	80 e2       	ldi	r24, 0x20	; 32
    4b54:	90 e0       	ldi	r25, 0x00	; 0
    4b56:	0e 94 13 26 	call	0x4c26	; 0x4c26 <fputc>
    4b5a:	b3 94       	inc	r11
    4b5c:	f7 cf       	rjmp	.-18     	; 0x4b4c <vfprintf+0x314>
    4b5e:	b2 14       	cp	r11, r2
    4b60:	18 f4       	brcc	.+6      	; 0x4b68 <vfprintf+0x330>
    4b62:	2b 18       	sub	r2, r11
    4b64:	02 c0       	rjmp	.+4      	; 0x4b6a <vfprintf+0x332>
    4b66:	98 2c       	mov	r9, r8
    4b68:	21 2c       	mov	r2, r1
    4b6a:	a4 fe       	sbrs	r10, 4
    4b6c:	10 c0       	rjmp	.+32     	; 0x4b8e <vfprintf+0x356>
    4b6e:	b6 01       	movw	r22, r12
    4b70:	80 e3       	ldi	r24, 0x30	; 48
    4b72:	90 e0       	ldi	r25, 0x00	; 0
    4b74:	0e 94 13 26 	call	0x4c26	; 0x4c26 <fputc>
    4b78:	a2 fe       	sbrs	r10, 2
    4b7a:	17 c0       	rjmp	.+46     	; 0x4baa <vfprintf+0x372>
    4b7c:	a1 fc       	sbrc	r10, 1
    4b7e:	03 c0       	rjmp	.+6      	; 0x4b86 <vfprintf+0x34e>
    4b80:	88 e7       	ldi	r24, 0x78	; 120
    4b82:	90 e0       	ldi	r25, 0x00	; 0
    4b84:	02 c0       	rjmp	.+4      	; 0x4b8a <vfprintf+0x352>
    4b86:	88 e5       	ldi	r24, 0x58	; 88
    4b88:	90 e0       	ldi	r25, 0x00	; 0
    4b8a:	b6 01       	movw	r22, r12
    4b8c:	0c c0       	rjmp	.+24     	; 0x4ba6 <vfprintf+0x36e>
    4b8e:	8a 2d       	mov	r24, r10
    4b90:	86 78       	andi	r24, 0x86	; 134
    4b92:	59 f0       	breq	.+22     	; 0x4baa <vfprintf+0x372>
    4b94:	a1 fe       	sbrs	r10, 1
    4b96:	02 c0       	rjmp	.+4      	; 0x4b9c <vfprintf+0x364>
    4b98:	8b e2       	ldi	r24, 0x2B	; 43
    4b9a:	01 c0       	rjmp	.+2      	; 0x4b9e <vfprintf+0x366>
    4b9c:	80 e2       	ldi	r24, 0x20	; 32
    4b9e:	a7 fc       	sbrc	r10, 7
    4ba0:	8d e2       	ldi	r24, 0x2D	; 45
    4ba2:	b6 01       	movw	r22, r12
    4ba4:	90 e0       	ldi	r25, 0x00	; 0
    4ba6:	0e 94 13 26 	call	0x4c26	; 0x4c26 <fputc>
    4baa:	89 14       	cp	r8, r9
    4bac:	38 f4       	brcc	.+14     	; 0x4bbc <vfprintf+0x384>
    4bae:	b6 01       	movw	r22, r12
    4bb0:	80 e3       	ldi	r24, 0x30	; 48
    4bb2:	90 e0       	ldi	r25, 0x00	; 0
    4bb4:	0e 94 13 26 	call	0x4c26	; 0x4c26 <fputc>
    4bb8:	9a 94       	dec	r9
    4bba:	f7 cf       	rjmp	.-18     	; 0x4baa <vfprintf+0x372>
    4bbc:	8a 94       	dec	r8
    4bbe:	f3 01       	movw	r30, r6
    4bc0:	e8 0d       	add	r30, r8
    4bc2:	f1 1d       	adc	r31, r1
    4bc4:	80 81       	ld	r24, Z
    4bc6:	b6 01       	movw	r22, r12
    4bc8:	90 e0       	ldi	r25, 0x00	; 0
    4bca:	0e 94 13 26 	call	0x4c26	; 0x4c26 <fputc>
    4bce:	81 10       	cpse	r8, r1
    4bd0:	f5 cf       	rjmp	.-22     	; 0x4bbc <vfprintf+0x384>
    4bd2:	22 20       	and	r2, r2
    4bd4:	09 f4       	brne	.+2      	; 0x4bd8 <vfprintf+0x3a0>
    4bd6:	42 ce       	rjmp	.-892    	; 0x485c <vfprintf+0x24>
    4bd8:	b6 01       	movw	r22, r12
    4bda:	80 e2       	ldi	r24, 0x20	; 32
    4bdc:	90 e0       	ldi	r25, 0x00	; 0
    4bde:	0e 94 13 26 	call	0x4c26	; 0x4c26 <fputc>
    4be2:	2a 94       	dec	r2
    4be4:	f6 cf       	rjmp	.-20     	; 0x4bd2 <vfprintf+0x39a>
    4be6:	f6 01       	movw	r30, r12
    4be8:	86 81       	ldd	r24, Z+6	; 0x06
    4bea:	97 81       	ldd	r25, Z+7	; 0x07
    4bec:	02 c0       	rjmp	.+4      	; 0x4bf2 <vfprintf+0x3ba>
    4bee:	8f ef       	ldi	r24, 0xFF	; 255
    4bf0:	9f ef       	ldi	r25, 0xFF	; 255
    4bf2:	2b 96       	adiw	r28, 0x0b	; 11
    4bf4:	e2 e1       	ldi	r30, 0x12	; 18
    4bf6:	0c 94 c9 26 	jmp	0x4d92	; 0x4d92 <__epilogue_restores__>

00004bfa <strnlen_P>:
    4bfa:	fc 01       	movw	r30, r24
    4bfc:	05 90       	lpm	r0, Z+
    4bfe:	61 50       	subi	r22, 0x01	; 1
    4c00:	70 40       	sbci	r23, 0x00	; 0
    4c02:	01 10       	cpse	r0, r1
    4c04:	d8 f7       	brcc	.-10     	; 0x4bfc <strnlen_P+0x2>
    4c06:	80 95       	com	r24
    4c08:	90 95       	com	r25
    4c0a:	8e 0f       	add	r24, r30
    4c0c:	9f 1f       	adc	r25, r31
    4c0e:	08 95       	ret

00004c10 <strnlen>:
    4c10:	fc 01       	movw	r30, r24
    4c12:	61 50       	subi	r22, 0x01	; 1
    4c14:	70 40       	sbci	r23, 0x00	; 0
    4c16:	01 90       	ld	r0, Z+
    4c18:	01 10       	cpse	r0, r1
    4c1a:	d8 f7       	brcc	.-10     	; 0x4c12 <strnlen+0x2>
    4c1c:	80 95       	com	r24
    4c1e:	90 95       	com	r25
    4c20:	8e 0f       	add	r24, r30
    4c22:	9f 1f       	adc	r25, r31
    4c24:	08 95       	ret

00004c26 <fputc>:
    4c26:	0f 93       	push	r16
    4c28:	1f 93       	push	r17
    4c2a:	cf 93       	push	r28
    4c2c:	df 93       	push	r29
    4c2e:	fb 01       	movw	r30, r22
    4c30:	23 81       	ldd	r18, Z+3	; 0x03
    4c32:	21 fd       	sbrc	r18, 1
    4c34:	03 c0       	rjmp	.+6      	; 0x4c3c <fputc+0x16>
    4c36:	8f ef       	ldi	r24, 0xFF	; 255
    4c38:	9f ef       	ldi	r25, 0xFF	; 255
    4c3a:	2c c0       	rjmp	.+88     	; 0x4c94 <fputc+0x6e>
    4c3c:	22 ff       	sbrs	r18, 2
    4c3e:	16 c0       	rjmp	.+44     	; 0x4c6c <fputc+0x46>
    4c40:	46 81       	ldd	r20, Z+6	; 0x06
    4c42:	57 81       	ldd	r21, Z+7	; 0x07
    4c44:	24 81       	ldd	r18, Z+4	; 0x04
    4c46:	35 81       	ldd	r19, Z+5	; 0x05
    4c48:	42 17       	cp	r20, r18
    4c4a:	53 07       	cpc	r21, r19
    4c4c:	44 f4       	brge	.+16     	; 0x4c5e <fputc+0x38>
    4c4e:	a0 81       	ld	r26, Z
    4c50:	b1 81       	ldd	r27, Z+1	; 0x01
    4c52:	9d 01       	movw	r18, r26
    4c54:	2f 5f       	subi	r18, 0xFF	; 255
    4c56:	3f 4f       	sbci	r19, 0xFF	; 255
    4c58:	31 83       	std	Z+1, r19	; 0x01
    4c5a:	20 83       	st	Z, r18
    4c5c:	8c 93       	st	X, r24
    4c5e:	26 81       	ldd	r18, Z+6	; 0x06
    4c60:	37 81       	ldd	r19, Z+7	; 0x07
    4c62:	2f 5f       	subi	r18, 0xFF	; 255
    4c64:	3f 4f       	sbci	r19, 0xFF	; 255
    4c66:	37 83       	std	Z+7, r19	; 0x07
    4c68:	26 83       	std	Z+6, r18	; 0x06
    4c6a:	14 c0       	rjmp	.+40     	; 0x4c94 <fputc+0x6e>
    4c6c:	8b 01       	movw	r16, r22
    4c6e:	ec 01       	movw	r28, r24
    4c70:	fb 01       	movw	r30, r22
    4c72:	00 84       	ldd	r0, Z+8	; 0x08
    4c74:	f1 85       	ldd	r31, Z+9	; 0x09
    4c76:	e0 2d       	mov	r30, r0
    4c78:	09 95       	icall
    4c7a:	89 2b       	or	r24, r25
    4c7c:	e1 f6       	brne	.-72     	; 0x4c36 <fputc+0x10>
    4c7e:	d8 01       	movw	r26, r16
    4c80:	16 96       	adiw	r26, 0x06	; 6
    4c82:	8d 91       	ld	r24, X+
    4c84:	9c 91       	ld	r25, X
    4c86:	17 97       	sbiw	r26, 0x07	; 7
    4c88:	01 96       	adiw	r24, 0x01	; 1
    4c8a:	17 96       	adiw	r26, 0x07	; 7
    4c8c:	9c 93       	st	X, r25
    4c8e:	8e 93       	st	-X, r24
    4c90:	16 97       	sbiw	r26, 0x06	; 6
    4c92:	ce 01       	movw	r24, r28
    4c94:	df 91       	pop	r29
    4c96:	cf 91       	pop	r28
    4c98:	1f 91       	pop	r17
    4c9a:	0f 91       	pop	r16
    4c9c:	08 95       	ret

00004c9e <__ultoa_invert>:
    4c9e:	fa 01       	movw	r30, r20
    4ca0:	aa 27       	eor	r26, r26
    4ca2:	28 30       	cpi	r18, 0x08	; 8
    4ca4:	51 f1       	breq	.+84     	; 0x4cfa <__ultoa_invert+0x5c>
    4ca6:	20 31       	cpi	r18, 0x10	; 16
    4ca8:	81 f1       	breq	.+96     	; 0x4d0a <__ultoa_invert+0x6c>
    4caa:	e8 94       	clt
    4cac:	6f 93       	push	r22
    4cae:	6e 7f       	andi	r22, 0xFE	; 254
    4cb0:	6e 5f       	subi	r22, 0xFE	; 254
    4cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    4cb4:	8f 4f       	sbci	r24, 0xFF	; 255
    4cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    4cb8:	af 4f       	sbci	r26, 0xFF	; 255
    4cba:	b1 e0       	ldi	r27, 0x01	; 1
    4cbc:	3e d0       	rcall	.+124    	; 0x4d3a <__ultoa_invert+0x9c>
    4cbe:	b4 e0       	ldi	r27, 0x04	; 4
    4cc0:	3c d0       	rcall	.+120    	; 0x4d3a <__ultoa_invert+0x9c>
    4cc2:	67 0f       	add	r22, r23
    4cc4:	78 1f       	adc	r23, r24
    4cc6:	89 1f       	adc	r24, r25
    4cc8:	9a 1f       	adc	r25, r26
    4cca:	a1 1d       	adc	r26, r1
    4ccc:	68 0f       	add	r22, r24
    4cce:	79 1f       	adc	r23, r25
    4cd0:	8a 1f       	adc	r24, r26
    4cd2:	91 1d       	adc	r25, r1
    4cd4:	a1 1d       	adc	r26, r1
    4cd6:	6a 0f       	add	r22, r26
    4cd8:	71 1d       	adc	r23, r1
    4cda:	81 1d       	adc	r24, r1
    4cdc:	91 1d       	adc	r25, r1
    4cde:	a1 1d       	adc	r26, r1
    4ce0:	20 d0       	rcall	.+64     	; 0x4d22 <__ultoa_invert+0x84>
    4ce2:	09 f4       	brne	.+2      	; 0x4ce6 <__ultoa_invert+0x48>
    4ce4:	68 94       	set
    4ce6:	3f 91       	pop	r19
    4ce8:	2a e0       	ldi	r18, 0x0A	; 10
    4cea:	26 9f       	mul	r18, r22
    4cec:	11 24       	eor	r1, r1
    4cee:	30 19       	sub	r19, r0
    4cf0:	30 5d       	subi	r19, 0xD0	; 208
    4cf2:	31 93       	st	Z+, r19
    4cf4:	de f6       	brtc	.-74     	; 0x4cac <__ultoa_invert+0xe>
    4cf6:	cf 01       	movw	r24, r30
    4cf8:	08 95       	ret
    4cfa:	46 2f       	mov	r20, r22
    4cfc:	47 70       	andi	r20, 0x07	; 7
    4cfe:	40 5d       	subi	r20, 0xD0	; 208
    4d00:	41 93       	st	Z+, r20
    4d02:	b3 e0       	ldi	r27, 0x03	; 3
    4d04:	0f d0       	rcall	.+30     	; 0x4d24 <__ultoa_invert+0x86>
    4d06:	c9 f7       	brne	.-14     	; 0x4cfa <__ultoa_invert+0x5c>
    4d08:	f6 cf       	rjmp	.-20     	; 0x4cf6 <__ultoa_invert+0x58>
    4d0a:	46 2f       	mov	r20, r22
    4d0c:	4f 70       	andi	r20, 0x0F	; 15
    4d0e:	40 5d       	subi	r20, 0xD0	; 208
    4d10:	4a 33       	cpi	r20, 0x3A	; 58
    4d12:	18 f0       	brcs	.+6      	; 0x4d1a <__ultoa_invert+0x7c>
    4d14:	49 5d       	subi	r20, 0xD9	; 217
    4d16:	31 fd       	sbrc	r19, 1
    4d18:	40 52       	subi	r20, 0x20	; 32
    4d1a:	41 93       	st	Z+, r20
    4d1c:	02 d0       	rcall	.+4      	; 0x4d22 <__ultoa_invert+0x84>
    4d1e:	a9 f7       	brne	.-22     	; 0x4d0a <__ultoa_invert+0x6c>
    4d20:	ea cf       	rjmp	.-44     	; 0x4cf6 <__ultoa_invert+0x58>
    4d22:	b4 e0       	ldi	r27, 0x04	; 4
    4d24:	a6 95       	lsr	r26
    4d26:	97 95       	ror	r25
    4d28:	87 95       	ror	r24
    4d2a:	77 95       	ror	r23
    4d2c:	67 95       	ror	r22
    4d2e:	ba 95       	dec	r27
    4d30:	c9 f7       	brne	.-14     	; 0x4d24 <__ultoa_invert+0x86>
    4d32:	00 97       	sbiw	r24, 0x00	; 0
    4d34:	61 05       	cpc	r22, r1
    4d36:	71 05       	cpc	r23, r1
    4d38:	08 95       	ret
    4d3a:	9b 01       	movw	r18, r22
    4d3c:	ac 01       	movw	r20, r24
    4d3e:	0a 2e       	mov	r0, r26
    4d40:	06 94       	lsr	r0
    4d42:	57 95       	ror	r21
    4d44:	47 95       	ror	r20
    4d46:	37 95       	ror	r19
    4d48:	27 95       	ror	r18
    4d4a:	ba 95       	dec	r27
    4d4c:	c9 f7       	brne	.-14     	; 0x4d40 <__ultoa_invert+0xa2>
    4d4e:	62 0f       	add	r22, r18
    4d50:	73 1f       	adc	r23, r19
    4d52:	84 1f       	adc	r24, r20
    4d54:	95 1f       	adc	r25, r21
    4d56:	a0 1d       	adc	r26, r0
    4d58:	08 95       	ret

00004d5a <__prologue_saves__>:
    4d5a:	2f 92       	push	r2
    4d5c:	3f 92       	push	r3
    4d5e:	4f 92       	push	r4
    4d60:	5f 92       	push	r5
    4d62:	6f 92       	push	r6
    4d64:	7f 92       	push	r7
    4d66:	8f 92       	push	r8
    4d68:	9f 92       	push	r9
    4d6a:	af 92       	push	r10
    4d6c:	bf 92       	push	r11
    4d6e:	cf 92       	push	r12
    4d70:	df 92       	push	r13
    4d72:	ef 92       	push	r14
    4d74:	ff 92       	push	r15
    4d76:	0f 93       	push	r16
    4d78:	1f 93       	push	r17
    4d7a:	cf 93       	push	r28
    4d7c:	df 93       	push	r29
    4d7e:	cd b7       	in	r28, 0x3d	; 61
    4d80:	de b7       	in	r29, 0x3e	; 62
    4d82:	ca 1b       	sub	r28, r26
    4d84:	db 0b       	sbc	r29, r27
    4d86:	0f b6       	in	r0, 0x3f	; 63
    4d88:	f8 94       	cli
    4d8a:	de bf       	out	0x3e, r29	; 62
    4d8c:	0f be       	out	0x3f, r0	; 63
    4d8e:	cd bf       	out	0x3d, r28	; 61
    4d90:	09 94       	ijmp

00004d92 <__epilogue_restores__>:
    4d92:	2a 88       	ldd	r2, Y+18	; 0x12
    4d94:	39 88       	ldd	r3, Y+17	; 0x11
    4d96:	48 88       	ldd	r4, Y+16	; 0x10
    4d98:	5f 84       	ldd	r5, Y+15	; 0x0f
    4d9a:	6e 84       	ldd	r6, Y+14	; 0x0e
    4d9c:	7d 84       	ldd	r7, Y+13	; 0x0d
    4d9e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4da0:	9b 84       	ldd	r9, Y+11	; 0x0b
    4da2:	aa 84       	ldd	r10, Y+10	; 0x0a
    4da4:	b9 84       	ldd	r11, Y+9	; 0x09
    4da6:	c8 84       	ldd	r12, Y+8	; 0x08
    4da8:	df 80       	ldd	r13, Y+7	; 0x07
    4daa:	ee 80       	ldd	r14, Y+6	; 0x06
    4dac:	fd 80       	ldd	r15, Y+5	; 0x05
    4dae:	0c 81       	ldd	r16, Y+4	; 0x04
    4db0:	1b 81       	ldd	r17, Y+3	; 0x03
    4db2:	aa 81       	ldd	r26, Y+2	; 0x02
    4db4:	b9 81       	ldd	r27, Y+1	; 0x01
    4db6:	ce 0f       	add	r28, r30
    4db8:	d1 1d       	adc	r29, r1
    4dba:	0f b6       	in	r0, 0x3f	; 63
    4dbc:	f8 94       	cli
    4dbe:	de bf       	out	0x3e, r29	; 62
    4dc0:	0f be       	out	0x3f, r0	; 63
    4dc2:	cd bf       	out	0x3d, r28	; 61
    4dc4:	ed 01       	movw	r28, r26
    4dc6:	08 95       	ret

00004dc8 <_exit>:
    4dc8:	f8 94       	cli

00004dca <__stop_program>:
    4dca:	ff cf       	rjmp	.-2      	; 0x4dca <__stop_program>
