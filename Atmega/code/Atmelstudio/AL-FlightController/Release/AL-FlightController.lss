
AL-FlightController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  000033e0  00003474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000033e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000206  0080012a  0080012a  0000349e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000349e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000034d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00003510  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005c11  00000000  00000000  00003818  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017c8  00000000  00000000  00009429  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000023c7  00000000  00000000  0000abf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000818  00000000  00000000  0000cfb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000025b4  00000000  00000000  0000d7d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021ac  00000000  00000000  0000fd84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  00011f30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__ctors_end>
       4:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
       8:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
       c:	0c 94 92 01 	jmp	0x324	; 0x324 <__vector_3>
      10:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      14:	0c 94 25 01 	jmp	0x24a	; 0x24a <__vector_5>
      18:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      1c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      20:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      24:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      28:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      2c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      30:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      34:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      38:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      3c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      40:	0c 94 94 15 	jmp	0x2b28	; 0x2b28 <__vector_16>
      44:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      48:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      4c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      50:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      54:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      58:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      5c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      60:	0c 94 19 18 	jmp	0x3032	; 0x3032 <__vector_24>
      64:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      68:	03 6e       	ori	r16, 0xE3	; 227
      6a:	db 36       	cpi	r29, 0x6B	; 107
      6c:	3d 9a       	sbi	0x07, 5	; 7
      6e:	99 99       	sbic	0x13, 1	; 19
      70:	99 3d       	cpi	r25, 0xD9	; 217
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	3e 00       	.word	0x003e	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	07 2c       	mov	r0, r7
      7e:	7a a5       	ldd	r23, Y+42	; 0x2a
      80:	ba 6c       	ori	r27, 0xCA	; 202
      82:	c5 90       	lpm	r12, Z+
      84:	da 3b       	cpi	r29, 0xBA	; 186
      86:	93 65       	ori	r25, 0x53	; 83
      88:	fc 8b       	std	Y+20, r31	; 0x14
      8a:	bc 53       	subi	r27, 0x3C	; 60
      8c:	f8 10       	cpse	r15, r8
      8e:	fd 3c       	cpi	r31, 0xCD	; 205
      90:	56 92       	lac	Z, r5
      92:	83 4d       	sbci	r24, 0xD3	; 211
      94:	bd 87       	std	Y+13, r27	; 0x0d
      96:	9d 3a       	cpi	r25, 0xAD	; 173
      98:	b6 3d       	cpi	r27, 0xD6	; 214
      9a:	cb c9       	rjmp	.-3178   	; 0xfffff432 <__eeprom_end+0xff7ef432>
      9c:	bf 5b       	subi	r27, 0xBF	; 191
      9e:	be 73       	andi	r27, 0x3E	; 62
      a0:	da 0f       	add	r29, r26
      a2:	c9 3f       	cpi	r28, 0xF9	; 249
      a4:	05 a8       	ldd	r0, Z+53	; 0x35
      a6:	4c cd       	rjmp	.-1384   	; 0xfffffb40 <__eeprom_end+0xff7efb40>
      a8:	b2 d4       	rcall	.+2404   	; 0xa0e <__stack+0x10f>
      aa:	4e b9       	out	0x0e, r20	; 14
      ac:	38 36       	cpi	r19, 0x68	; 104
      ae:	a9 02       	muls	r26, r25
      b0:	0c 50       	subi	r16, 0x0C	; 12
      b2:	b9 91       	ld	r27, Y+
      b4:	86 88       	ldd	r8, Z+22	; 0x16
      b6:	08 3c       	cpi	r16, 0xC8	; 200
      b8:	a6 aa       	std	Z+54, r10	; 0x36
      ba:	aa 2a       	or	r10, r26
      bc:	be 00       	.word	0x00be	; ????
      be:	00 00       	nop
      c0:	80 3f       	cpi	r24, 0xF0	; 240

000000c2 <__trampolines_end>:
      c2:	00 00       	nop
      c4:	00 08       	sbc	r0, r0
      c6:	00 02       	muls	r16, r16
      c8:	01 00       	.word	0x0001	; ????
      ca:	00 03       	mulsu	r16, r16
      cc:	04 07       	cpc	r16, r20
	...

000000d6 <digital_pin_to_bit_mask_PGM>:
      d6:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      e6:	04 08 10 20                                         ... 

000000ea <digital_pin_to_port_PGM>:
      ea:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      fa:	03 03 03 03                                         ....

000000fe <port_to_input_PGM>:
      fe:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000108 <port_to_output_PGM>:
     108:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000112 <__ctors_start>:
     112:	24 05       	cpc	r18, r4
     114:	90 15       	cp	r25, r0

00000116 <__ctors_end>:
     116:	11 24       	eor	r1, r1
     118:	1f be       	out	0x3f, r1	; 63
     11a:	cf ef       	ldi	r28, 0xFF	; 255
     11c:	d8 e0       	ldi	r29, 0x08	; 8
     11e:	de bf       	out	0x3e, r29	; 62
     120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
     122:	11 e0       	ldi	r17, 0x01	; 1
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b1 e0       	ldi	r27, 0x01	; 1
     128:	e0 ee       	ldi	r30, 0xE0	; 224
     12a:	f3 e3       	ldi	r31, 0x33	; 51
     12c:	02 c0       	rjmp	.+4      	; 0x132 <__do_copy_data+0x10>
     12e:	05 90       	lpm	r0, Z+
     130:	0d 92       	st	X+, r0
     132:	aa 32       	cpi	r26, 0x2A	; 42
     134:	b1 07       	cpc	r27, r17
     136:	d9 f7       	brne	.-10     	; 0x12e <__do_copy_data+0xc>

00000138 <__do_clear_bss>:
     138:	23 e0       	ldi	r18, 0x03	; 3
     13a:	aa e2       	ldi	r26, 0x2A	; 42
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	01 c0       	rjmp	.+2      	; 0x142 <.do_clear_bss_start>

00000140 <.do_clear_bss_loop>:
     140:	1d 92       	st	X+, r1

00000142 <.do_clear_bss_start>:
     142:	a0 33       	cpi	r26, 0x30	; 48
     144:	b2 07       	cpc	r27, r18
     146:	e1 f7       	brne	.-8      	; 0x140 <.do_clear_bss_loop>

00000148 <__do_global_ctors>:
     148:	10 e0       	ldi	r17, 0x00	; 0
     14a:	cb e8       	ldi	r28, 0x8B	; 139
     14c:	d0 e0       	ldi	r29, 0x00	; 0
     14e:	04 c0       	rjmp	.+8      	; 0x158 <__do_global_ctors+0x10>
     150:	21 97       	sbiw	r28, 0x01	; 1
     152:	fe 01       	movw	r30, r28
     154:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__tablejump2__>
     158:	c9 38       	cpi	r28, 0x89	; 137
     15a:	d1 07       	cpc	r29, r17
     15c:	c9 f7       	brne	.-14     	; 0x150 <__do_global_ctors+0x8>
     15e:	0e 94 53 14 	call	0x28a6	; 0x28a6 <main>
     162:	0c 94 ee 19 	jmp	0x33dc	; 0x33dc <_exit>

00000166 <__bad_interrupt>:
     166:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016a <_Z24convert_receiver_channelh.part.1>:
	byte channel, reverse;                                                       //First we declare some local variables
	int low, center, high, actual;
	int difference;

	if (function > 4) {
		return (receiver_input[function] -3000) * -1;
     16a:	cf 93       	push	r28
     16c:	e8 2f       	mov	r30, r24
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	e6 5d       	subi	r30, 0xD6	; 214
     172:	fd 4f       	sbci	r31, 0xFD	; 253
     174:	c7 89       	ldd	r28, Z+23	; 0x17
     176:	ec 2f       	mov	r30, r28
     178:	e7 70       	andi	r30, 0x07	; 7
     17a:	cc 1f       	adc	r28, r28
     17c:	cc 27       	eor	r28, r28
     17e:	cc 1f       	adc	r28, r28
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	ee 0f       	add	r30, r30
     184:	ff 1f       	adc	r31, r31
     186:	df 01       	movw	r26, r30
     188:	a0 50       	subi	r26, 0x00	; 0
     18a:	be 4f       	sbci	r27, 0xFE	; 254
     18c:	8d 91       	ld	r24, X+
     18e:	9c 91       	ld	r25, X
     190:	e6 5d       	subi	r30, 0xD6	; 214
     192:	fd 4f       	sbci	r31, 0xFD	; 253
     194:	77 85       	ldd	r23, Z+15	; 0x0f
     196:	36 85       	ldd	r19, Z+14	; 0x0e
     198:	df 01       	movw	r26, r30
     19a:	11 97       	sbiw	r26, 0x01	; 1
     19c:	4c 91       	ld	r20, X
     19e:	50 e0       	ldi	r21, 0x00	; 0
     1a0:	54 2f       	mov	r21, r20
     1a2:	44 27       	eor	r20, r20
     1a4:	11 97       	sbiw	r26, 0x01	; 1
     1a6:	2c 91       	ld	r18, X
     1a8:	42 2b       	or	r20, r18
     1aa:	67 81       	ldd	r22, Z+7	; 0x07
     1ac:	26 81       	ldd	r18, Z+6	; 0x06
     1ae:	84 17       	cp	r24, r20
     1b0:	95 07       	cpc	r25, r21
     1b2:	dc f4       	brge	.+54     	; 0x1ea <_Z24convert_receiver_channelh.part.1+0x80>
     1b4:	e3 2f       	mov	r30, r19
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	f7 2b       	or	r31, r23
     1ba:	9f 01       	movw	r18, r30
     1bc:	e8 17       	cp	r30, r24
     1be:	f9 07       	cpc	r31, r25
     1c0:	0c f4       	brge	.+2      	; 0x1c4 <_Z24convert_receiver_channelh.part.1+0x5a>
     1c2:	9c 01       	movw	r18, r24
     1c4:	da 01       	movw	r26, r20
     1c6:	a2 1b       	sub	r26, r18
     1c8:	b3 0b       	sbc	r27, r19
     1ca:	24 ef       	ldi	r18, 0xF4	; 244
     1cc:	31 e0       	ldi	r19, 0x01	; 1
     1ce:	0e 94 ab 19 	call	0x3356	; 0x3356 <__usmulhisi3>
     1d2:	9a 01       	movw	r18, r20
     1d4:	2e 1b       	sub	r18, r30
     1d6:	3f 0b       	sbc	r19, r31
     1d8:	03 2e       	mov	r0, r19
     1da:	00 0c       	add	r0, r0
     1dc:	44 0b       	sbc	r20, r20
     1de:	55 0b       	sbc	r21, r21
     1e0:	0e 94 8c 19 	call	0x3318	; 0x3318 <__divmodsi4>
     1e4:	cc 23       	and	r28, r28
     1e6:	e9 f0       	breq	.+58     	; 0x222 <_Z24convert_receiver_channelh.part.1+0xb8>
     1e8:	21 c0       	rjmp	.+66     	; 0x22c <_Z24convert_receiver_channelh.part.1+0xc2>
     1ea:	48 17       	cp	r20, r24
     1ec:	59 07       	cpc	r21, r25
     1ee:	14 f5       	brge	.+68     	; 0x234 <_Z24convert_receiver_channelh.part.1+0xca>
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	f9 01       	movw	r30, r18
     1f4:	f6 2b       	or	r31, r22
     1f6:	df 01       	movw	r26, r30
     1f8:	8e 17       	cp	r24, r30
     1fa:	9f 07       	cpc	r25, r31
     1fc:	0c f4       	brge	.+2      	; 0x200 <_Z24convert_receiver_channelh.part.1+0x96>
     1fe:	dc 01       	movw	r26, r24
     200:	a4 1b       	sub	r26, r20
     202:	b5 0b       	sbc	r27, r21
     204:	24 ef       	ldi	r18, 0xF4	; 244
     206:	31 e0       	ldi	r19, 0x01	; 1
     208:	0e 94 ab 19 	call	0x3356	; 0x3356 <__usmulhisi3>
     20c:	9f 01       	movw	r18, r30
     20e:	24 1b       	sub	r18, r20
     210:	35 0b       	sbc	r19, r21
     212:	03 2e       	mov	r0, r19
     214:	00 0c       	add	r0, r0
     216:	44 0b       	sbc	r20, r20
     218:	55 0b       	sbc	r21, r21
     21a:	0e 94 8c 19 	call	0x3318	; 0x3318 <__divmodsi4>
     21e:	cc 23       	and	r28, r28
     220:	29 f0       	breq	.+10     	; 0x22c <_Z24convert_receiver_channelh.part.1+0xc2>
     222:	8c ed       	ldi	r24, 0xDC	; 220
     224:	95 e0       	ldi	r25, 0x05	; 5
     226:	82 1b       	sub	r24, r18
     228:	93 0b       	sbc	r25, r19
     22a:	06 c0       	rjmp	.+12     	; 0x238 <_Z24convert_receiver_channelh.part.1+0xce>
     22c:	c9 01       	movw	r24, r18
     22e:	84 52       	subi	r24, 0x24	; 36
     230:	9a 4f       	sbci	r25, 0xFA	; 250
     232:	02 c0       	rjmp	.+4      	; 0x238 <_Z24convert_receiver_channelh.part.1+0xce>
     234:	8c ed       	ldi	r24, 0xDC	; 220
     236:	95 e0       	ldi	r25, 0x05	; 5
     238:	cf 91       	pop	r28
     23a:	08 95       	ret

0000023c <_ZN7TwoWire5writeEi>:
     23c:	dc 01       	movw	r26, r24
     23e:	ed 91       	ld	r30, X+
     240:	fc 91       	ld	r31, X
     242:	01 90       	ld	r0, Z+
     244:	f0 81       	ld	r31, Z
     246:	e0 2d       	mov	r30, r0
     248:	09 94       	ijmp

0000024a <__vector_5>:
     24a:	1f 92       	push	r1
     24c:	0f 92       	push	r0
     24e:	0f b6       	in	r0, 0x3f	; 63
     250:	0f 92       	push	r0
     252:	11 24       	eor	r1, r1
     254:	2f 93       	push	r18
     256:	3f 93       	push	r19
     258:	4f 93       	push	r20
     25a:	5f 93       	push	r21
     25c:	6f 93       	push	r22
     25e:	7f 93       	push	r23
     260:	8f 93       	push	r24
     262:	9f 93       	push	r25
     264:	af 93       	push	r26
     266:	bf 93       	push	r27
     268:	ef 93       	push	r30
     26a:	ff 93       	push	r31
     26c:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <micros>
     270:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <current_timeV2>
     274:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <current_timeV2+0x1>
     278:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <current_timeV2+0x2>
     27c:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <current_timeV2+0x3>
     280:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <last_channel_6>
     284:	4a 9b       	sbis	0x09, 2	; 9
     286:	0e c0       	rjmp	.+28     	; 0x2a4 <__vector_5+0x5a>
     288:	21 11       	cpse	r18, r1
     28a:	1b c0       	rjmp	.+54     	; 0x2c2 <__vector_5+0x78>
     28c:	21 e0       	ldi	r18, 0x01	; 1
     28e:	20 93 4f 02 	sts	0x024F, r18	; 0x80024f <last_channel_6>
     292:	60 93 aa 01 	sts	0x01AA, r22	; 0x8001aa <timer_6>
     296:	70 93 ab 01 	sts	0x01AB, r23	; 0x8001ab <timer_6+0x1>
     29a:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <timer_6+0x2>
     29e:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <timer_6+0x3>
     2a2:	0f c0       	rjmp	.+30     	; 0x2c2 <__vector_5+0x78>
     2a4:	21 30       	cpi	r18, 0x01	; 1
     2a6:	69 f4       	brne	.+26     	; 0x2c2 <__vector_5+0x78>
     2a8:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <last_channel_6>
     2ac:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <timer_6>
     2b0:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <timer_6+0x1>
     2b4:	ab 01       	movw	r20, r22
     2b6:	42 1b       	sub	r20, r18
     2b8:	53 0b       	sbc	r21, r19
     2ba:	50 93 0d 02 	sts	0x020D, r21	; 0x80020d <receiver_input+0xd>
     2be:	40 93 0c 02 	sts	0x020C, r20	; 0x80020c <receiver_input+0xc>
     2c2:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <last_channel_7>
     2c6:	4b 9b       	sbis	0x09, 3	; 9
     2c8:	0e c0       	rjmp	.+28     	; 0x2e6 <__vector_5+0x9c>
     2ca:	21 11       	cpse	r18, r1
     2cc:	1a c0       	rjmp	.+52     	; 0x302 <__vector_5+0xb8>
     2ce:	21 e0       	ldi	r18, 0x01	; 1
     2d0:	20 93 4e 02 	sts	0x024E, r18	; 0x80024e <last_channel_7>
     2d4:	60 93 a6 01 	sts	0x01A6, r22	; 0x8001a6 <timer_7>
     2d8:	70 93 a7 01 	sts	0x01A7, r23	; 0x8001a7 <timer_7+0x1>
     2dc:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <timer_7+0x2>
     2e0:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <timer_7+0x3>
     2e4:	0e c0       	rjmp	.+28     	; 0x302 <__vector_5+0xb8>
     2e6:	21 30       	cpi	r18, 0x01	; 1
     2e8:	61 f4       	brne	.+24     	; 0x302 <__vector_5+0xb8>
     2ea:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <last_channel_7>
     2ee:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <timer_7>
     2f2:	30 91 a7 01 	lds	r19, 0x01A7	; 0x8001a7 <timer_7+0x1>
     2f6:	62 1b       	sub	r22, r18
     2f8:	73 0b       	sbc	r23, r19
     2fa:	70 93 0f 02 	sts	0x020F, r23	; 0x80020f <receiver_input+0xf>
     2fe:	60 93 0e 02 	sts	0x020E, r22	; 0x80020e <receiver_input+0xe>
     302:	ff 91       	pop	r31
     304:	ef 91       	pop	r30
     306:	bf 91       	pop	r27
     308:	af 91       	pop	r26
     30a:	9f 91       	pop	r25
     30c:	8f 91       	pop	r24
     30e:	7f 91       	pop	r23
     310:	6f 91       	pop	r22
     312:	5f 91       	pop	r21
     314:	4f 91       	pop	r20
     316:	3f 91       	pop	r19
     318:	2f 91       	pop	r18
     31a:	0f 90       	pop	r0
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	0f 90       	pop	r0
     320:	1f 90       	pop	r1
     322:	18 95       	reti

00000324 <__vector_3>:
     324:	1f 92       	push	r1
     326:	0f 92       	push	r0
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	0f 92       	push	r0
     32c:	11 24       	eor	r1, r1
     32e:	2f 93       	push	r18
     330:	3f 93       	push	r19
     332:	4f 93       	push	r20
     334:	5f 93       	push	r21
     336:	6f 93       	push	r22
     338:	7f 93       	push	r23
     33a:	8f 93       	push	r24
     33c:	9f 93       	push	r25
     33e:	af 93       	push	r26
     340:	bf 93       	push	r27
     342:	ef 93       	push	r30
     344:	ff 93       	push	r31
     346:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <micros>
     34a:	60 93 a2 01 	sts	0x01A2, r22	; 0x8001a2 <current_timeV1>
     34e:	70 93 a3 01 	sts	0x01A3, r23	; 0x8001a3 <current_timeV1+0x1>
     352:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <current_timeV1+0x2>
     356:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <current_timeV1+0x3>
     35a:	20 91 54 02 	lds	r18, 0x0254	; 0x800254 <last_channel_1>
     35e:	18 9b       	sbis	0x03, 0	; 3
     360:	0e c0       	rjmp	.+28     	; 0x37e <__vector_3+0x5a>
     362:	21 11       	cpse	r18, r1
     364:	1b c0       	rjmp	.+54     	; 0x39c <__vector_3+0x78>
     366:	21 e0       	ldi	r18, 0x01	; 1
     368:	20 93 54 02 	sts	0x0254, r18	; 0x800254 <last_channel_1>
     36c:	60 93 be 01 	sts	0x01BE, r22	; 0x8001be <timer_1>
     370:	70 93 bf 01 	sts	0x01BF, r23	; 0x8001bf <timer_1+0x1>
     374:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <timer_1+0x2>
     378:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <timer_1+0x3>
     37c:	0f c0       	rjmp	.+30     	; 0x39c <__vector_3+0x78>
     37e:	21 30       	cpi	r18, 0x01	; 1
     380:	69 f4       	brne	.+26     	; 0x39c <__vector_3+0x78>
     382:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <last_channel_1>
     386:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <timer_1>
     38a:	30 91 bf 01 	lds	r19, 0x01BF	; 0x8001bf <timer_1+0x1>
     38e:	ab 01       	movw	r20, r22
     390:	42 1b       	sub	r20, r18
     392:	53 0b       	sbc	r21, r19
     394:	50 93 03 02 	sts	0x0203, r21	; 0x800203 <receiver_input+0x3>
     398:	40 93 02 02 	sts	0x0202, r20	; 0x800202 <receiver_input+0x2>
     39c:	20 91 53 02 	lds	r18, 0x0253	; 0x800253 <last_channel_2>
     3a0:	19 9b       	sbis	0x03, 1	; 3
     3a2:	0e c0       	rjmp	.+28     	; 0x3c0 <__vector_3+0x9c>
     3a4:	21 11       	cpse	r18, r1
     3a6:	1b c0       	rjmp	.+54     	; 0x3de <__vector_3+0xba>
     3a8:	21 e0       	ldi	r18, 0x01	; 1
     3aa:	20 93 53 02 	sts	0x0253, r18	; 0x800253 <last_channel_2>
     3ae:	60 93 ba 01 	sts	0x01BA, r22	; 0x8001ba <timer_2>
     3b2:	70 93 bb 01 	sts	0x01BB, r23	; 0x8001bb <timer_2+0x1>
     3b6:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <timer_2+0x2>
     3ba:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <timer_2+0x3>
     3be:	0f c0       	rjmp	.+30     	; 0x3de <__vector_3+0xba>
     3c0:	21 30       	cpi	r18, 0x01	; 1
     3c2:	69 f4       	brne	.+26     	; 0x3de <__vector_3+0xba>
     3c4:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <last_channel_2>
     3c8:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <timer_2>
     3cc:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <timer_2+0x1>
     3d0:	ab 01       	movw	r20, r22
     3d2:	42 1b       	sub	r20, r18
     3d4:	53 0b       	sbc	r21, r19
     3d6:	50 93 05 02 	sts	0x0205, r21	; 0x800205 <receiver_input+0x5>
     3da:	40 93 04 02 	sts	0x0204, r20	; 0x800204 <receiver_input+0x4>
     3de:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <last_channel_3>
     3e2:	1a 9b       	sbis	0x03, 2	; 3
     3e4:	0e c0       	rjmp	.+28     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3e6:	21 11       	cpse	r18, r1
     3e8:	1b c0       	rjmp	.+54     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     3ea:	21 e0       	ldi	r18, 0x01	; 1
     3ec:	20 93 52 02 	sts	0x0252, r18	; 0x800252 <last_channel_3>
     3f0:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <timer_3>
     3f4:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <timer_3+0x1>
     3f8:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <timer_3+0x2>
     3fc:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <timer_3+0x3>
     400:	0f c0       	rjmp	.+30     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     402:	21 30       	cpi	r18, 0x01	; 1
     404:	69 f4       	brne	.+26     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     406:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <last_channel_3>
     40a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <timer_3>
     40e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <timer_3+0x1>
     412:	ab 01       	movw	r20, r22
     414:	42 1b       	sub	r20, r18
     416:	53 0b       	sbc	r21, r19
     418:	50 93 07 02 	sts	0x0207, r21	; 0x800207 <receiver_input+0x7>
     41c:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <receiver_input+0x6>
     420:	20 91 51 02 	lds	r18, 0x0251	; 0x800251 <last_channel_4>
     424:	1b 9b       	sbis	0x03, 3	; 3
     426:	0e c0       	rjmp	.+28     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     428:	21 11       	cpse	r18, r1
     42a:	1b c0       	rjmp	.+54     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     42c:	21 e0       	ldi	r18, 0x01	; 1
     42e:	20 93 51 02 	sts	0x0251, r18	; 0x800251 <last_channel_4>
     432:	60 93 b2 01 	sts	0x01B2, r22	; 0x8001b2 <timer_4>
     436:	70 93 b3 01 	sts	0x01B3, r23	; 0x8001b3 <timer_4+0x1>
     43a:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <timer_4+0x2>
     43e:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <timer_4+0x3>
     442:	0f c0       	rjmp	.+30     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     444:	21 30       	cpi	r18, 0x01	; 1
     446:	69 f4       	brne	.+26     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     448:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <last_channel_4>
     44c:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <timer_4>
     450:	30 91 b3 01 	lds	r19, 0x01B3	; 0x8001b3 <timer_4+0x1>
     454:	ab 01       	movw	r20, r22
     456:	42 1b       	sub	r20, r18
     458:	53 0b       	sbc	r21, r19
     45a:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <receiver_input+0x9>
     45e:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <receiver_input+0x8>
     462:	20 91 50 02 	lds	r18, 0x0250	; 0x800250 <last_channel_5>
     466:	1c 9b       	sbis	0x03, 4	; 3
     468:	0e c0       	rjmp	.+28     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     46a:	21 11       	cpse	r18, r1
     46c:	1a c0       	rjmp	.+52     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     46e:	21 e0       	ldi	r18, 0x01	; 1
     470:	20 93 50 02 	sts	0x0250, r18	; 0x800250 <last_channel_5>
     474:	60 93 ae 01 	sts	0x01AE, r22	; 0x8001ae <timer_5>
     478:	70 93 af 01 	sts	0x01AF, r23	; 0x8001af <timer_5+0x1>
     47c:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <timer_5+0x2>
     480:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <timer_5+0x3>
     484:	0e c0       	rjmp	.+28     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     486:	21 30       	cpi	r18, 0x01	; 1
     488:	61 f4       	brne	.+24     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     48a:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <last_channel_5>
     48e:	20 91 ae 01 	lds	r18, 0x01AE	; 0x8001ae <timer_5>
     492:	30 91 af 01 	lds	r19, 0x01AF	; 0x8001af <timer_5+0x1>
     496:	62 1b       	sub	r22, r18
     498:	73 0b       	sbc	r23, r19
     49a:	70 93 0b 02 	sts	0x020B, r23	; 0x80020b <receiver_input+0xb>
     49e:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <receiver_input+0xa>
     4a2:	ff 91       	pop	r31
     4a4:	ef 91       	pop	r30
     4a6:	bf 91       	pop	r27
     4a8:	af 91       	pop	r26
     4aa:	9f 91       	pop	r25
     4ac:	8f 91       	pop	r24
     4ae:	7f 91       	pop	r23
     4b0:	6f 91       	pop	r22
     4b2:	5f 91       	pop	r21
     4b4:	4f 91       	pop	r20
     4b6:	3f 91       	pop	r19
     4b8:	2f 91       	pop	r18
     4ba:	0f 90       	pop	r0
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	0f 90       	pop	r0
     4c0:	1f 90       	pop	r1
     4c2:	18 95       	reti

000004c4 <_Z13calculate_pidv>:
     4c4:	4f 92       	push	r4
     4c6:	5f 92       	push	r5
     4c8:	6f 92       	push	r6
     4ca:	7f 92       	push	r7
     4cc:	8f 92       	push	r8
     4ce:	9f 92       	push	r9
     4d0:	af 92       	push	r10
     4d2:	bf 92       	push	r11
     4d4:	cf 92       	push	r12
     4d6:	df 92       	push	r13
     4d8:	ef 92       	push	r14
     4da:	ff 92       	push	r15
     4dc:	0f 93       	push	r16
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	00 d0       	rcall	.+0      	; 0x4e6 <_Z13calculate_pidv+0x22>
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <_Z13calculate_pidv+0x24>
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
     4ec:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <pid_roll_setpoint>
     4f0:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <pid_roll_setpoint+0x1>
     4f4:	40 91 74 01 	lds	r20, 0x0174	; 0x800174 <pid_roll_setpoint+0x2>
     4f8:	50 91 75 01 	lds	r21, 0x0175	; 0x800175 <pid_roll_setpoint+0x3>
     4fc:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <gyro_roll_input>
     500:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <gyro_roll_input+0x1>
     504:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <gyro_roll_input+0x2>
     508:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <gyro_roll_input+0x3>
     50c:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__subsf3>
     510:	6b 01       	movw	r12, r22
     512:	7c 01       	movw	r14, r24
     514:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <pid_i_gain_roll>
     518:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <pid_i_gain_roll+0x1>
     51c:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <pid_i_gain_roll+0x2>
     520:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <pid_i_gain_roll+0x3>
     524:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
     528:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <pid_i_mem_roll>
     52c:	30 91 77 01 	lds	r19, 0x0177	; 0x800177 <pid_i_mem_roll+0x1>
     530:	40 91 78 01 	lds	r20, 0x0178	; 0x800178 <pid_i_mem_roll+0x2>
     534:	50 91 79 01 	lds	r21, 0x0179	; 0x800179 <pid_i_mem_roll+0x3>
     538:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
     53c:	2b 01       	movw	r4, r22
     53e:	3c 01       	movw	r6, r24
     540:	60 93 76 01 	sts	0x0176, r22	; 0x800176 <pid_i_mem_roll>
     544:	70 93 77 01 	sts	0x0177, r23	; 0x800177 <pid_i_mem_roll+0x1>
     548:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <pid_i_mem_roll+0x2>
     54c:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <pid_i_mem_roll+0x3>
     550:	00 91 0b 01 	lds	r16, 0x010B	; 0x80010b <pid_max_roll>
     554:	10 91 0c 01 	lds	r17, 0x010C	; 0x80010c <pid_max_roll+0x1>
     558:	b8 01       	movw	r22, r16
     55a:	01 2e       	mov	r0, r17
     55c:	00 0c       	add	r0, r0
     55e:	88 0b       	sbc	r24, r24
     560:	99 0b       	sbc	r25, r25
     562:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
     566:	4b 01       	movw	r8, r22
     568:	5c 01       	movw	r10, r24
     56a:	9b 01       	movw	r18, r22
     56c:	ac 01       	movw	r20, r24
     56e:	c3 01       	movw	r24, r6
     570:	b2 01       	movw	r22, r4
     572:	0e 94 3e 13 	call	0x267c	; 0x267c <__gesf2>
     576:	18 16       	cp	r1, r24
     578:	4c f4       	brge	.+18     	; 0x58c <_Z13calculate_pidv+0xc8>
     57a:	80 92 76 01 	sts	0x0176, r8	; 0x800176 <pid_i_mem_roll>
     57e:	90 92 77 01 	sts	0x0177, r9	; 0x800177 <pid_i_mem_roll+0x1>
     582:	a0 92 78 01 	sts	0x0178, r10	; 0x800178 <pid_i_mem_roll+0x2>
     586:	b0 92 79 01 	sts	0x0179, r11	; 0x800179 <pid_i_mem_roll+0x3>
     58a:	22 c0       	rjmp	.+68     	; 0x5d0 <_Z13calculate_pidv+0x10c>
     58c:	66 27       	eor	r22, r22
     58e:	77 27       	eor	r23, r23
     590:	60 1b       	sub	r22, r16
     592:	71 0b       	sbc	r23, r17
     594:	07 2e       	mov	r0, r23
     596:	00 0c       	add	r0, r0
     598:	88 0b       	sbc	r24, r24
     59a:	99 0b       	sbc	r25, r25
     59c:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
     5a0:	69 83       	std	Y+1, r22	; 0x01
     5a2:	7a 83       	std	Y+2, r23	; 0x02
     5a4:	8b 83       	std	Y+3, r24	; 0x03
     5a6:	9c 83       	std	Y+4, r25	; 0x04
     5a8:	9b 01       	movw	r18, r22
     5aa:	ac 01       	movw	r20, r24
     5ac:	c3 01       	movw	r24, r6
     5ae:	b2 01       	movw	r22, r4
     5b0:	0e 94 84 11 	call	0x2308	; 0x2308 <__cmpsf2>
     5b4:	87 ff       	sbrs	r24, 7
     5b6:	0c c0       	rjmp	.+24     	; 0x5d0 <_Z13calculate_pidv+0x10c>
     5b8:	89 81       	ldd	r24, Y+1	; 0x01
     5ba:	9a 81       	ldd	r25, Y+2	; 0x02
     5bc:	ab 81       	ldd	r26, Y+3	; 0x03
     5be:	bc 81       	ldd	r27, Y+4	; 0x04
     5c0:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <pid_i_mem_roll>
     5c4:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <pid_i_mem_roll+0x1>
     5c8:	a0 93 78 01 	sts	0x0178, r26	; 0x800178 <pid_i_mem_roll+0x2>
     5cc:	b0 93 79 01 	sts	0x0179, r27	; 0x800179 <pid_i_mem_roll+0x3>
     5d0:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <pid_p_gain_roll>
     5d4:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <pid_p_gain_roll+0x1>
     5d8:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <pid_p_gain_roll+0x2>
     5dc:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <pid_p_gain_roll+0x3>
     5e0:	c7 01       	movw	r24, r14
     5e2:	b6 01       	movw	r22, r12
     5e4:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
     5e8:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <pid_i_mem_roll>
     5ec:	30 91 77 01 	lds	r19, 0x0177	; 0x800177 <pid_i_mem_roll+0x1>
     5f0:	40 91 78 01 	lds	r20, 0x0178	; 0x800178 <pid_i_mem_roll+0x2>
     5f4:	50 91 79 01 	lds	r21, 0x0179	; 0x800179 <pid_i_mem_roll+0x3>
     5f8:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
     5fc:	2b 01       	movw	r4, r22
     5fe:	3c 01       	movw	r6, r24
     600:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <pid_last_roll_d_error>
     604:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <pid_last_roll_d_error+0x1>
     608:	40 91 68 01 	lds	r20, 0x0168	; 0x800168 <pid_last_roll_d_error+0x2>
     60c:	50 91 69 01 	lds	r21, 0x0169	; 0x800169 <pid_last_roll_d_error+0x3>
     610:	c7 01       	movw	r24, r14
     612:	b6 01       	movw	r22, r12
     614:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__subsf3>
     618:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <pid_d_gain_roll>
     61c:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <pid_d_gain_roll+0x1>
     620:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <pid_d_gain_roll+0x2>
     624:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <pid_d_gain_roll+0x3>
     628:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
     62c:	9b 01       	movw	r18, r22
     62e:	ac 01       	movw	r20, r24
     630:	c3 01       	movw	r24, r6
     632:	b2 01       	movw	r22, r4
     634:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
     638:	2b 01       	movw	r4, r22
     63a:	3c 01       	movw	r6, r24
     63c:	a5 01       	movw	r20, r10
     63e:	94 01       	movw	r18, r8
     640:	0e 94 3e 13 	call	0x267c	; 0x267c <__gesf2>
     644:	18 16       	cp	r1, r24
     646:	ec f0       	brlt	.+58     	; 0x682 <_Z13calculate_pidv+0x1be>
     648:	66 27       	eor	r22, r22
     64a:	77 27       	eor	r23, r23
     64c:	60 1b       	sub	r22, r16
     64e:	71 0b       	sbc	r23, r17
     650:	07 2e       	mov	r0, r23
     652:	00 0c       	add	r0, r0
     654:	88 0b       	sbc	r24, r24
     656:	99 0b       	sbc	r25, r25
     658:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
     65c:	4b 01       	movw	r8, r22
     65e:	5c 01       	movw	r10, r24
     660:	9b 01       	movw	r18, r22
     662:	ac 01       	movw	r20, r24
     664:	c3 01       	movw	r24, r6
     666:	b2 01       	movw	r22, r4
     668:	0e 94 84 11 	call	0x2308	; 0x2308 <__cmpsf2>
     66c:	87 fd       	sbrc	r24, 7
     66e:	09 c0       	rjmp	.+18     	; 0x682 <_Z13calculate_pidv+0x1be>
     670:	40 92 6a 01 	sts	0x016A, r4	; 0x80016a <pid_output_roll>
     674:	50 92 6b 01 	sts	0x016B, r5	; 0x80016b <pid_output_roll+0x1>
     678:	60 92 6c 01 	sts	0x016C, r6	; 0x80016c <pid_output_roll+0x2>
     67c:	70 92 6d 01 	sts	0x016D, r7	; 0x80016d <pid_output_roll+0x3>
     680:	08 c0       	rjmp	.+16     	; 0x692 <_Z13calculate_pidv+0x1ce>
     682:	80 92 6a 01 	sts	0x016A, r8	; 0x80016a <pid_output_roll>
     686:	90 92 6b 01 	sts	0x016B, r9	; 0x80016b <pid_output_roll+0x1>
     68a:	a0 92 6c 01 	sts	0x016C, r10	; 0x80016c <pid_output_roll+0x2>
     68e:	b0 92 6d 01 	sts	0x016D, r11	; 0x80016d <pid_output_roll+0x3>
     692:	c0 92 66 01 	sts	0x0166, r12	; 0x800166 <pid_last_roll_d_error>
     696:	d0 92 67 01 	sts	0x0167, r13	; 0x800167 <pid_last_roll_d_error+0x1>
     69a:	e0 92 68 01 	sts	0x0168, r14	; 0x800168 <pid_last_roll_d_error+0x2>
     69e:	f0 92 69 01 	sts	0x0169, r15	; 0x800169 <pid_last_roll_d_error+0x3>
     6a2:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <pid_pitch_setpoint>
     6a6:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <pid_pitch_setpoint+0x1>
     6aa:	40 91 60 01 	lds	r20, 0x0160	; 0x800160 <pid_pitch_setpoint+0x2>
     6ae:	50 91 61 01 	lds	r21, 0x0161	; 0x800161 <pid_pitch_setpoint+0x3>
     6b2:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <gyro_pitch_input>
     6b6:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <gyro_pitch_input+0x1>
     6ba:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <gyro_pitch_input+0x2>
     6be:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <gyro_pitch_input+0x3>
     6c2:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__subsf3>
     6c6:	6b 01       	movw	r12, r22
     6c8:	7c 01       	movw	r14, r24
     6ca:	20 91 5f 02 	lds	r18, 0x025F	; 0x80025f <pid_i_gain_pitch>
     6ce:	30 91 60 02 	lds	r19, 0x0260	; 0x800260 <pid_i_gain_pitch+0x1>
     6d2:	40 91 61 02 	lds	r20, 0x0261	; 0x800261 <pid_i_gain_pitch+0x2>
     6d6:	50 91 62 02 	lds	r21, 0x0262	; 0x800262 <pid_i_gain_pitch+0x3>
     6da:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
     6de:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <pid_i_mem_pitch>
     6e2:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <pid_i_mem_pitch+0x1>
     6e6:	40 91 64 01 	lds	r20, 0x0164	; 0x800164 <pid_i_mem_pitch+0x2>
     6ea:	50 91 65 01 	lds	r21, 0x0165	; 0x800165 <pid_i_mem_pitch+0x3>
     6ee:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
     6f2:	2b 01       	movw	r4, r22
     6f4:	3c 01       	movw	r6, r24
     6f6:	60 93 62 01 	sts	0x0162, r22	; 0x800162 <pid_i_mem_pitch>
     6fa:	70 93 63 01 	sts	0x0163, r23	; 0x800163 <pid_i_mem_pitch+0x1>
     6fe:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <pid_i_mem_pitch+0x2>
     702:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <pid_i_mem_pitch+0x3>
     706:	00 91 59 02 	lds	r16, 0x0259	; 0x800259 <pid_max_pitch>
     70a:	10 91 5a 02 	lds	r17, 0x025A	; 0x80025a <pid_max_pitch+0x1>
     70e:	b8 01       	movw	r22, r16
     710:	01 2e       	mov	r0, r17
     712:	00 0c       	add	r0, r0
     714:	88 0b       	sbc	r24, r24
     716:	99 0b       	sbc	r25, r25
     718:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
     71c:	4b 01       	movw	r8, r22
     71e:	5c 01       	movw	r10, r24
     720:	9b 01       	movw	r18, r22
     722:	ac 01       	movw	r20, r24
     724:	c3 01       	movw	r24, r6
     726:	b2 01       	movw	r22, r4
     728:	0e 94 3e 13 	call	0x267c	; 0x267c <__gesf2>
     72c:	18 16       	cp	r1, r24
     72e:	4c f4       	brge	.+18     	; 0x742 <_Z13calculate_pidv+0x27e>
     730:	80 92 62 01 	sts	0x0162, r8	; 0x800162 <pid_i_mem_pitch>
     734:	90 92 63 01 	sts	0x0163, r9	; 0x800163 <pid_i_mem_pitch+0x1>
     738:	a0 92 64 01 	sts	0x0164, r10	; 0x800164 <pid_i_mem_pitch+0x2>
     73c:	b0 92 65 01 	sts	0x0165, r11	; 0x800165 <pid_i_mem_pitch+0x3>
     740:	22 c0       	rjmp	.+68     	; 0x786 <_Z13calculate_pidv+0x2c2>
     742:	66 27       	eor	r22, r22
     744:	77 27       	eor	r23, r23
     746:	60 1b       	sub	r22, r16
     748:	71 0b       	sbc	r23, r17
     74a:	07 2e       	mov	r0, r23
     74c:	00 0c       	add	r0, r0
     74e:	88 0b       	sbc	r24, r24
     750:	99 0b       	sbc	r25, r25
     752:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
     756:	69 83       	std	Y+1, r22	; 0x01
     758:	7a 83       	std	Y+2, r23	; 0x02
     75a:	8b 83       	std	Y+3, r24	; 0x03
     75c:	9c 83       	std	Y+4, r25	; 0x04
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	c3 01       	movw	r24, r6
     764:	b2 01       	movw	r22, r4
     766:	0e 94 84 11 	call	0x2308	; 0x2308 <__cmpsf2>
     76a:	87 ff       	sbrs	r24, 7
     76c:	0c c0       	rjmp	.+24     	; 0x786 <_Z13calculate_pidv+0x2c2>
     76e:	89 81       	ldd	r24, Y+1	; 0x01
     770:	9a 81       	ldd	r25, Y+2	; 0x02
     772:	ab 81       	ldd	r26, Y+3	; 0x03
     774:	bc 81       	ldd	r27, Y+4	; 0x04
     776:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <pid_i_mem_pitch>
     77a:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <pid_i_mem_pitch+0x1>
     77e:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <pid_i_mem_pitch+0x2>
     782:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <pid_i_mem_pitch+0x3>
     786:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <pid_p_gain_pitch>
     78a:	30 91 64 02 	lds	r19, 0x0264	; 0x800264 <pid_p_gain_pitch+0x1>
     78e:	40 91 65 02 	lds	r20, 0x0265	; 0x800265 <pid_p_gain_pitch+0x2>
     792:	50 91 66 02 	lds	r21, 0x0266	; 0x800266 <pid_p_gain_pitch+0x3>
     796:	c7 01       	movw	r24, r14
     798:	b6 01       	movw	r22, r12
     79a:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
     79e:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <pid_i_mem_pitch>
     7a2:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <pid_i_mem_pitch+0x1>
     7a6:	40 91 64 01 	lds	r20, 0x0164	; 0x800164 <pid_i_mem_pitch+0x2>
     7aa:	50 91 65 01 	lds	r21, 0x0165	; 0x800165 <pid_i_mem_pitch+0x3>
     7ae:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
     7b2:	2b 01       	movw	r4, r22
     7b4:	3c 01       	movw	r6, r24
     7b6:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <pid_last_pitch_d_error>
     7ba:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <pid_last_pitch_d_error+0x1>
     7be:	40 91 54 01 	lds	r20, 0x0154	; 0x800154 <pid_last_pitch_d_error+0x2>
     7c2:	50 91 55 01 	lds	r21, 0x0155	; 0x800155 <pid_last_pitch_d_error+0x3>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b6 01       	movw	r22, r12
     7ca:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__subsf3>
     7ce:	20 91 5b 02 	lds	r18, 0x025B	; 0x80025b <pid_d_gain_pitch>
     7d2:	30 91 5c 02 	lds	r19, 0x025C	; 0x80025c <pid_d_gain_pitch+0x1>
     7d6:	40 91 5d 02 	lds	r20, 0x025D	; 0x80025d <pid_d_gain_pitch+0x2>
     7da:	50 91 5e 02 	lds	r21, 0x025E	; 0x80025e <pid_d_gain_pitch+0x3>
     7de:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
     7e2:	9b 01       	movw	r18, r22
     7e4:	ac 01       	movw	r20, r24
     7e6:	c3 01       	movw	r24, r6
     7e8:	b2 01       	movw	r22, r4
     7ea:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
     7ee:	2b 01       	movw	r4, r22
     7f0:	3c 01       	movw	r6, r24
     7f2:	a5 01       	movw	r20, r10
     7f4:	94 01       	movw	r18, r8
     7f6:	0e 94 3e 13 	call	0x267c	; 0x267c <__gesf2>
     7fa:	18 16       	cp	r1, r24
     7fc:	ec f0       	brlt	.+58     	; 0x838 <_Z13calculate_pidv+0x374>
     7fe:	66 27       	eor	r22, r22
     800:	77 27       	eor	r23, r23
     802:	60 1b       	sub	r22, r16
     804:	71 0b       	sbc	r23, r17
     806:	07 2e       	mov	r0, r23
     808:	00 0c       	add	r0, r0
     80a:	88 0b       	sbc	r24, r24
     80c:	99 0b       	sbc	r25, r25
     80e:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
     812:	4b 01       	movw	r8, r22
     814:	5c 01       	movw	r10, r24
     816:	9b 01       	movw	r18, r22
     818:	ac 01       	movw	r20, r24
     81a:	c3 01       	movw	r24, r6
     81c:	b2 01       	movw	r22, r4
     81e:	0e 94 84 11 	call	0x2308	; 0x2308 <__cmpsf2>
     822:	87 fd       	sbrc	r24, 7
     824:	09 c0       	rjmp	.+18     	; 0x838 <_Z13calculate_pidv+0x374>
     826:	40 92 56 01 	sts	0x0156, r4	; 0x800156 <pid_output_pitch>
     82a:	50 92 57 01 	sts	0x0157, r5	; 0x800157 <pid_output_pitch+0x1>
     82e:	60 92 58 01 	sts	0x0158, r6	; 0x800158 <pid_output_pitch+0x2>
     832:	70 92 59 01 	sts	0x0159, r7	; 0x800159 <pid_output_pitch+0x3>
     836:	08 c0       	rjmp	.+16     	; 0x848 <_Z13calculate_pidv+0x384>
     838:	80 92 56 01 	sts	0x0156, r8	; 0x800156 <pid_output_pitch>
     83c:	90 92 57 01 	sts	0x0157, r9	; 0x800157 <pid_output_pitch+0x1>
     840:	a0 92 58 01 	sts	0x0158, r10	; 0x800158 <pid_output_pitch+0x2>
     844:	b0 92 59 01 	sts	0x0159, r11	; 0x800159 <pid_output_pitch+0x3>
     848:	c0 92 52 01 	sts	0x0152, r12	; 0x800152 <pid_last_pitch_d_error>
     84c:	d0 92 53 01 	sts	0x0153, r13	; 0x800153 <pid_last_pitch_d_error+0x1>
     850:	e0 92 54 01 	sts	0x0154, r14	; 0x800154 <pid_last_pitch_d_error+0x2>
     854:	f0 92 55 01 	sts	0x0155, r15	; 0x800155 <pid_last_pitch_d_error+0x3>
     858:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <pid_yaw_setpoint>
     85c:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <pid_yaw_setpoint+0x1>
     860:	40 91 4c 01 	lds	r20, 0x014C	; 0x80014c <pid_yaw_setpoint+0x2>
     864:	50 91 4d 01 	lds	r21, 0x014D	; 0x80014d <pid_yaw_setpoint+0x3>
     868:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <gyro_yaw_input>
     86c:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <gyro_yaw_input+0x1>
     870:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <gyro_yaw_input+0x2>
     874:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <gyro_yaw_input+0x3>
     878:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__subsf3>
     87c:	6b 01       	movw	r12, r22
     87e:	7c 01       	movw	r14, r24
     880:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <pid_error_temp>
     884:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <pid_error_temp+0x1>
     888:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <pid_error_temp+0x2>
     88c:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <pid_error_temp+0x3>
     890:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <pid_i_gain_yaw>
     894:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <pid_i_gain_yaw+0x1>
     898:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <pid_i_gain_yaw+0x2>
     89c:	50 91 06 01 	lds	r21, 0x0106	; 0x800106 <pid_i_gain_yaw+0x3>
     8a0:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
     8a4:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <pid_i_mem_yaw>
     8a8:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <pid_i_mem_yaw+0x1>
     8ac:	40 91 50 01 	lds	r20, 0x0150	; 0x800150 <pid_i_mem_yaw+0x2>
     8b0:	50 91 51 01 	lds	r21, 0x0151	; 0x800151 <pid_i_mem_yaw+0x3>
     8b4:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
     8b8:	2b 01       	movw	r4, r22
     8ba:	3c 01       	movw	r6, r24
     8bc:	60 93 4e 01 	sts	0x014E, r22	; 0x80014e <pid_i_mem_yaw>
     8c0:	70 93 4f 01 	sts	0x014F, r23	; 0x80014f <pid_i_mem_yaw+0x1>
     8c4:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <pid_i_mem_yaw+0x2>
     8c8:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <pid_i_mem_yaw+0x3>
     8cc:	00 91 01 01 	lds	r16, 0x0101	; 0x800101 <pid_max_yaw>
     8d0:	10 91 02 01 	lds	r17, 0x0102	; 0x800102 <pid_max_yaw+0x1>
     8d4:	b8 01       	movw	r22, r16
     8d6:	01 2e       	mov	r0, r17
     8d8:	00 0c       	add	r0, r0
     8da:	88 0b       	sbc	r24, r24
     8dc:	99 0b       	sbc	r25, r25
     8de:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
     8e2:	4b 01       	movw	r8, r22
     8e4:	5c 01       	movw	r10, r24
     8e6:	9b 01       	movw	r18, r22
     8e8:	ac 01       	movw	r20, r24
     8ea:	c3 01       	movw	r24, r6
     8ec:	b2 01       	movw	r22, r4
     8ee:	0e 94 3e 13 	call	0x267c	; 0x267c <__gesf2>
     8f2:	18 16       	cp	r1, r24
     8f4:	4c f4       	brge	.+18     	; 0x908 <__stack+0x9>
     8f6:	80 92 4e 01 	sts	0x014E, r8	; 0x80014e <pid_i_mem_yaw>
     8fa:	90 92 4f 01 	sts	0x014F, r9	; 0x80014f <pid_i_mem_yaw+0x1>
     8fe:	a0 92 50 01 	sts	0x0150, r10	; 0x800150 <pid_i_mem_yaw+0x2>
     902:	b0 92 51 01 	sts	0x0151, r11	; 0x800151 <pid_i_mem_yaw+0x3>
     906:	22 c0       	rjmp	.+68     	; 0x94c <__stack+0x4d>
     908:	66 27       	eor	r22, r22
     90a:	77 27       	eor	r23, r23
     90c:	60 1b       	sub	r22, r16
     90e:	71 0b       	sbc	r23, r17
     910:	07 2e       	mov	r0, r23
     912:	00 0c       	add	r0, r0
     914:	88 0b       	sbc	r24, r24
     916:	99 0b       	sbc	r25, r25
     918:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
     91c:	69 83       	std	Y+1, r22	; 0x01
     91e:	7a 83       	std	Y+2, r23	; 0x02
     920:	8b 83       	std	Y+3, r24	; 0x03
     922:	9c 83       	std	Y+4, r25	; 0x04
     924:	9b 01       	movw	r18, r22
     926:	ac 01       	movw	r20, r24
     928:	c3 01       	movw	r24, r6
     92a:	b2 01       	movw	r22, r4
     92c:	0e 94 84 11 	call	0x2308	; 0x2308 <__cmpsf2>
     930:	87 ff       	sbrs	r24, 7
     932:	0c c0       	rjmp	.+24     	; 0x94c <__stack+0x4d>
     934:	89 81       	ldd	r24, Y+1	; 0x01
     936:	9a 81       	ldd	r25, Y+2	; 0x02
     938:	ab 81       	ldd	r26, Y+3	; 0x03
     93a:	bc 81       	ldd	r27, Y+4	; 0x04
     93c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <pid_i_mem_yaw>
     940:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <pid_i_mem_yaw+0x1>
     944:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <pid_i_mem_yaw+0x2>
     948:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <pid_i_mem_yaw+0x3>
     94c:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <pid_p_gain_yaw>
     950:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <pid_p_gain_yaw+0x1>
     954:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <pid_p_gain_yaw+0x2>
     958:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <pid_p_gain_yaw+0x3>
     95c:	c7 01       	movw	r24, r14
     95e:	b6 01       	movw	r22, r12
     960:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
     964:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <pid_i_mem_yaw>
     968:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <pid_i_mem_yaw+0x1>
     96c:	40 91 50 01 	lds	r20, 0x0150	; 0x800150 <pid_i_mem_yaw+0x2>
     970:	50 91 51 01 	lds	r21, 0x0151	; 0x800151 <pid_i_mem_yaw+0x3>
     974:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
     978:	2b 01       	movw	r4, r22
     97a:	3c 01       	movw	r6, r24
     97c:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <pid_last_yaw_d_error>
     980:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <pid_last_yaw_d_error+0x1>
     984:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <pid_last_yaw_d_error+0x2>
     988:	50 91 41 01 	lds	r21, 0x0141	; 0x800141 <pid_last_yaw_d_error+0x3>
     98c:	c7 01       	movw	r24, r14
     98e:	b6 01       	movw	r22, r12
     990:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__subsf3>
     994:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <pid_d_gain_yaw>
     998:	30 91 56 02 	lds	r19, 0x0256	; 0x800256 <pid_d_gain_yaw+0x1>
     99c:	40 91 57 02 	lds	r20, 0x0257	; 0x800257 <pid_d_gain_yaw+0x2>
     9a0:	50 91 58 02 	lds	r21, 0x0258	; 0x800258 <pid_d_gain_yaw+0x3>
     9a4:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
     9a8:	9b 01       	movw	r18, r22
     9aa:	ac 01       	movw	r20, r24
     9ac:	c3 01       	movw	r24, r6
     9ae:	b2 01       	movw	r22, r4
     9b0:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
     9b4:	2b 01       	movw	r4, r22
     9b6:	3c 01       	movw	r6, r24
     9b8:	a5 01       	movw	r20, r10
     9ba:	94 01       	movw	r18, r8
     9bc:	0e 94 3e 13 	call	0x267c	; 0x267c <__gesf2>
     9c0:	18 16       	cp	r1, r24
     9c2:	ec f0       	brlt	.+58     	; 0x9fe <__stack+0xff>
     9c4:	66 27       	eor	r22, r22
     9c6:	77 27       	eor	r23, r23
     9c8:	60 1b       	sub	r22, r16
     9ca:	71 0b       	sbc	r23, r17
     9cc:	07 2e       	mov	r0, r23
     9ce:	00 0c       	add	r0, r0
     9d0:	88 0b       	sbc	r24, r24
     9d2:	99 0b       	sbc	r25, r25
     9d4:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
     9d8:	4b 01       	movw	r8, r22
     9da:	5c 01       	movw	r10, r24
     9dc:	9b 01       	movw	r18, r22
     9de:	ac 01       	movw	r20, r24
     9e0:	c3 01       	movw	r24, r6
     9e2:	b2 01       	movw	r22, r4
     9e4:	0e 94 84 11 	call	0x2308	; 0x2308 <__cmpsf2>
     9e8:	87 fd       	sbrc	r24, 7
     9ea:	09 c0       	rjmp	.+18     	; 0x9fe <__stack+0xff>
     9ec:	40 92 42 01 	sts	0x0142, r4	; 0x800142 <pid_output_yaw>
     9f0:	50 92 43 01 	sts	0x0143, r5	; 0x800143 <pid_output_yaw+0x1>
     9f4:	60 92 44 01 	sts	0x0144, r6	; 0x800144 <pid_output_yaw+0x2>
     9f8:	70 92 45 01 	sts	0x0145, r7	; 0x800145 <pid_output_yaw+0x3>
     9fc:	08 c0       	rjmp	.+16     	; 0xa0e <__stack+0x10f>
     9fe:	80 92 42 01 	sts	0x0142, r8	; 0x800142 <pid_output_yaw>
     a02:	90 92 43 01 	sts	0x0143, r9	; 0x800143 <pid_output_yaw+0x1>
     a06:	a0 92 44 01 	sts	0x0144, r10	; 0x800144 <pid_output_yaw+0x2>
     a0a:	b0 92 45 01 	sts	0x0145, r11	; 0x800145 <pid_output_yaw+0x3>
     a0e:	c0 92 3e 01 	sts	0x013E, r12	; 0x80013e <pid_last_yaw_d_error>
     a12:	d0 92 3f 01 	sts	0x013F, r13	; 0x80013f <pid_last_yaw_d_error+0x1>
     a16:	e0 92 40 01 	sts	0x0140, r14	; 0x800140 <pid_last_yaw_d_error+0x2>
     a1a:	f0 92 41 01 	sts	0x0141, r15	; 0x800141 <pid_last_yaw_d_error+0x3>
     a1e:	0f 90       	pop	r0
     a20:	0f 90       	pop	r0
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	1f 91       	pop	r17
     a2c:	0f 91       	pop	r16
     a2e:	ff 90       	pop	r15
     a30:	ef 90       	pop	r14
     a32:	df 90       	pop	r13
     a34:	cf 90       	pop	r12
     a36:	bf 90       	pop	r11
     a38:	af 90       	pop	r10
     a3a:	9f 90       	pop	r9
     a3c:	8f 90       	pop	r8
     a3e:	7f 90       	pop	r7
     a40:	6f 90       	pop	r6
     a42:	5f 90       	pop	r5
     a44:	4f 90       	pop	r4
     a46:	08 95       	ret

00000a48 <_GLOBAL__sub_I_pid_p_gain_roll>:
float pid_p_gain_roll = 1.3;               //Gain setting for the roll P-controller
float pid_i_gain_roll = 0.04;              //Gain setting for the roll I-controller
float pid_d_gain_roll = 18.0;              //Gain setting for the roll D-controller
int pid_max_roll = 400;                    //Maximum output of the PID-controller (+/-)

float pid_p_gain_pitch = pid_p_gain_roll;  //Gain setting for the pitch P-controller.
     a48:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <pid_p_gain_roll>
     a4c:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <pid_p_gain_roll+0x1>
     a50:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <pid_p_gain_roll+0x2>
     a54:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <pid_p_gain_roll+0x3>
     a58:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <pid_p_gain_pitch>
     a5c:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <pid_p_gain_pitch+0x1>
     a60:	a0 93 65 02 	sts	0x0265, r26	; 0x800265 <pid_p_gain_pitch+0x2>
     a64:	b0 93 66 02 	sts	0x0266, r27	; 0x800266 <pid_p_gain_pitch+0x3>
float pid_i_gain_pitch = pid_i_gain_roll;  //Gain setting for the pitch I-controller.
     a68:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pid_i_gain_roll>
     a6c:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <pid_i_gain_roll+0x1>
     a70:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <pid_i_gain_roll+0x2>
     a74:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <pid_i_gain_roll+0x3>
     a78:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <pid_i_gain_pitch>
     a7c:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <pid_i_gain_pitch+0x1>
     a80:	a0 93 61 02 	sts	0x0261, r26	; 0x800261 <pid_i_gain_pitch+0x2>
     a84:	b0 93 62 02 	sts	0x0262, r27	; 0x800262 <pid_i_gain_pitch+0x3>
float pid_d_gain_pitch = pid_d_gain_roll;  //Gain setting for the pitch D-controller.
     a88:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pid_d_gain_roll>
     a8c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <pid_d_gain_roll+0x1>
     a90:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <pid_d_gain_roll+0x2>
     a94:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <pid_d_gain_roll+0x3>
     a98:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <pid_d_gain_pitch>
     a9c:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <pid_d_gain_pitch+0x1>
     aa0:	a0 93 5d 02 	sts	0x025D, r26	; 0x80025d <pid_d_gain_pitch+0x2>
     aa4:	b0 93 5e 02 	sts	0x025E, r27	; 0x80025e <pid_d_gain_pitch+0x3>
int pid_max_pitch = pid_max_roll;          //Maximum output of the PID-controller (+/-)
     aa8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <pid_max_roll>
     aac:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <pid_max_roll+0x1>
     ab0:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <pid_max_pitch+0x1>
     ab4:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <pid_max_pitch>
     ab8:	08 95       	ret

00000aba <_Z13gyro_signalenv>:
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Subroutine for reading the gyro
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void gyro_signalen(){
     aba:	bf 92       	push	r11
     abc:	cf 92       	push	r12
     abe:	df 92       	push	r13
     ac0:	ef 92       	push	r14
     ac2:	ff 92       	push	r15
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
	//Read the MPU-6050
	if(eeprom_data[31] == 1){
     acc:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <eeprom_data+0x1f>
     ad0:	81 30       	cpi	r24, 0x01	; 1
     ad2:	09 f0       	breq	.+2      	; 0xad6 <_Z13gyro_signalenv+0x1c>
     ad4:	c8 c0       	rjmp	.+400    	; 0xc66 <_Z13gyro_signalenv+0x1ac>
		Wire.beginTransmission(gyro_address);                                   //Start communication with the gyro.
     ad6:	60 91 10 02 	lds	r22, 0x0210	; 0x800210 <gyro_address>
     ada:	70 91 11 02 	lds	r23, 0x0211	; 0x800211 <gyro_address+0x1>
     ade:	87 e6       	ldi	r24, 0x67	; 103
     ae0:	92 e0       	ldi	r25, 0x02	; 2
     ae2:	0e 94 11 15 	call	0x2a22	; 0x2a22 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x3B);                                                       //Start reading @ register 43h and auto increment with every read.
     ae6:	6b e3       	ldi	r22, 0x3B	; 59
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	87 e6       	ldi	r24, 0x67	; 103
     aec:	92 e0       	ldi	r25, 0x02	; 2
     aee:	0e 94 1e 01 	call	0x23c	; 0x23c <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                                 //End the transmission.
     af2:	87 e6       	ldi	r24, 0x67	; 103
     af4:	92 e0       	ldi	r25, 0x02	; 2
     af6:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN7TwoWire15endTransmissionEv>
		Wire.requestFrom(gyro_address,14);                                      //Request 14 bytes from the gyro.
     afa:	60 91 10 02 	lds	r22, 0x0210	; 0x800210 <gyro_address>
     afe:	70 91 11 02 	lds	r23, 0x0211	; 0x800211 <gyro_address+0x1>
     b02:	4e e0       	ldi	r20, 0x0E	; 14
     b04:	50 e0       	ldi	r21, 0x00	; 0
     b06:	87 e6       	ldi	r24, 0x67	; 103
     b08:	92 e0       	ldi	r25, 0x02	; 2
     b0a:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <_ZN7TwoWire11requestFromEii>
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	0e 94 b5 00 	call	0x16a	; 0x16a <_Z24convert_receiver_channelh.part.1>
		
		receiver_input_channel_1 = convert_receiver_channel(1);                 //Convert the actual receiver signals for pitch to the standard 1000 - 2000us.
     b14:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <receiver_input_channel_1+0x1>
     b18:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <receiver_input_channel_1>
     b1c:	82 e0       	ldi	r24, 0x02	; 2
     b1e:	0e 94 b5 00 	call	0x16a	; 0x16a <_Z24convert_receiver_channelh.part.1>
		receiver_input_channel_2 = convert_receiver_channel(2);                 //Convert the actual receiver signals for roll to the standard 1000 - 2000us.
     b22:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <receiver_input_channel_2+0x1>
     b26:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <receiver_input_channel_2>
     b2a:	83 e0       	ldi	r24, 0x03	; 3
     b2c:	0e 94 b5 00 	call	0x16a	; 0x16a <_Z24convert_receiver_channelh.part.1>
		receiver_input_channel_3 = convert_receiver_channel(3);                 //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
     b30:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <receiver_input_channel_3+0x1>
     b34:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <receiver_input_channel_3>
     b38:	84 e0       	ldi	r24, 0x04	; 4
     b3a:	0e 94 b5 00 	call	0x16a	; 0x16a <_Z24convert_receiver_channelh.part.1>
		receiver_input_channel_4 = convert_receiver_channel(4);                 //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
     b3e:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <receiver_input_channel_4+0x1>
     b42:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <receiver_input_channel_4>
	byte channel, reverse;                                                       //First we declare some local variables
	int low, center, high, actual;
	int difference;

	if (function > 4) {
		return (receiver_input[function] -3000) * -1;
     b46:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <receiver_input+0xa>
     b4a:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <receiver_input+0xb>
     b4e:	88 eb       	ldi	r24, 0xB8	; 184
     b50:	9b e0       	ldi	r25, 0x0B	; 11
     b52:	82 1b       	sub	r24, r18
     b54:	93 0b       	sbc	r25, r19
		
		receiver_input_channel_1 = convert_receiver_channel(1);                 //Convert the actual receiver signals for pitch to the standard 1000 - 2000us.
		receiver_input_channel_2 = convert_receiver_channel(2);                 //Convert the actual receiver signals for roll to the standard 1000 - 2000us.
		receiver_input_channel_3 = convert_receiver_channel(3);                 //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
		receiver_input_channel_4 = convert_receiver_channel(4);                 //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
		receiver_input_channel_4 = convert_receiver_channel(5);                 //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
     b56:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <receiver_input_channel_4+0x1>
     b5a:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <receiver_input_channel_4>
		//receiver_input_channel_4 = convert_receiver_channel(6);                 //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
		//receiver_input_channel_4 = convert_receiver_channel(7);                 //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
		
		while(Wire.available() < 14);                                           //Wait until the 14 bytes are received.
     b5e:	87 e6       	ldi	r24, 0x67	; 103
     b60:	92 e0       	ldi	r25, 0x02	; 2
     b62:	0e 94 62 14 	call	0x28c4	; 0x28c4 <_ZN7TwoWire9availableEv>
     b66:	0e 97       	sbiw	r24, 0x0e	; 14
     b68:	d4 f3       	brlt	.-12     	; 0xb5e <_Z13gyro_signalenv+0xa4>
		acc_axis[1] = Wire.read()<<8|Wire.read();                               //Add the low and high byte to the acc_x variable.
     b6a:	87 e6       	ldi	r24, 0x67	; 103
     b6c:	92 e0       	ldi	r25, 0x02	; 2
     b6e:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_ZN7TwoWire4readEv>
     b72:	c8 2f       	mov	r28, r24
     b74:	87 e6       	ldi	r24, 0x67	; 103
     b76:	92 e0       	ldi	r25, 0x02	; 2
     b78:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_ZN7TwoWire4readEv>
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	3c 2f       	mov	r19, r28
     b82:	82 2b       	or	r24, r18
     b84:	93 2b       	or	r25, r19
     b86:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <acc_axis+0x3>
     b8a:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <acc_axis+0x2>
		acc_axis[2] = Wire.read()<<8|Wire.read();                               //Add the low and high byte to the acc_y variable.
     b8e:	87 e6       	ldi	r24, 0x67	; 103
     b90:	92 e0       	ldi	r25, 0x02	; 2
     b92:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_ZN7TwoWire4readEv>
     b96:	c8 2f       	mov	r28, r24
     b98:	87 e6       	ldi	r24, 0x67	; 103
     b9a:	92 e0       	ldi	r25, 0x02	; 2
     b9c:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_ZN7TwoWire4readEv>
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	3c 2f       	mov	r19, r28
     ba6:	82 2b       	or	r24, r18
     ba8:	93 2b       	or	r25, r19
     baa:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <acc_axis+0x5>
     bae:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <acc_axis+0x4>
		acc_axis[3] = Wire.read()<<8|Wire.read();                               //Add the low and high byte to the acc_z variable.
     bb2:	87 e6       	ldi	r24, 0x67	; 103
     bb4:	92 e0       	ldi	r25, 0x02	; 2
     bb6:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_ZN7TwoWire4readEv>
     bba:	c8 2f       	mov	r28, r24
     bbc:	87 e6       	ldi	r24, 0x67	; 103
     bbe:	92 e0       	ldi	r25, 0x02	; 2
     bc0:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_ZN7TwoWire4readEv>
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	3c 2f       	mov	r19, r28
     bca:	82 2b       	or	r24, r18
     bcc:	93 2b       	or	r25, r19
     bce:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <acc_axis+0x7>
     bd2:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <acc_axis+0x6>
		temperature = Wire.read()<<8|Wire.read();                               //Add the low and high byte to the temperature variable.
     bd6:	87 e6       	ldi	r24, 0x67	; 103
     bd8:	92 e0       	ldi	r25, 0x02	; 2
     bda:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_ZN7TwoWire4readEv>
     bde:	c8 2f       	mov	r28, r24
     be0:	87 e6       	ldi	r24, 0x67	; 103
     be2:	92 e0       	ldi	r25, 0x02	; 2
     be4:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_ZN7TwoWire4readEv>
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	3c 2f       	mov	r19, r28
     bee:	82 2b       	or	r24, r18
     bf0:	93 2b       	or	r25, r19
     bf2:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <temperature+0x1>
     bf6:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <temperature>
		gyro_axis[1] = Wire.read()<<8|Wire.read();                              //Read high and low part of the angular data.
     bfa:	87 e6       	ldi	r24, 0x67	; 103
     bfc:	92 e0       	ldi	r25, 0x02	; 2
     bfe:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_ZN7TwoWire4readEv>
     c02:	c8 2f       	mov	r28, r24
     c04:	87 e6       	ldi	r24, 0x67	; 103
     c06:	92 e0       	ldi	r25, 0x02	; 2
     c08:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_ZN7TwoWire4readEv>
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	3c 2f       	mov	r19, r28
     c12:	82 2b       	or	r24, r18
     c14:	93 2b       	or	r25, r19
     c16:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <gyro_axis+0x3>
     c1a:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <gyro_axis+0x2>
		gyro_axis[2] = Wire.read()<<8|Wire.read();                              //Read high and low part of the angular data.
     c1e:	87 e6       	ldi	r24, 0x67	; 103
     c20:	92 e0       	ldi	r25, 0x02	; 2
     c22:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_ZN7TwoWire4readEv>
     c26:	c8 2f       	mov	r28, r24
     c28:	87 e6       	ldi	r24, 0x67	; 103
     c2a:	92 e0       	ldi	r25, 0x02	; 2
     c2c:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_ZN7TwoWire4readEv>
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	3c 2f       	mov	r19, r28
     c36:	82 2b       	or	r24, r18
     c38:	93 2b       	or	r25, r19
     c3a:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <gyro_axis+0x5>
     c3e:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <gyro_axis+0x4>
		gyro_axis[3] = Wire.read()<<8|Wire.read();                              //Read high and low part of the angular data.
     c42:	87 e6       	ldi	r24, 0x67	; 103
     c44:	92 e0       	ldi	r25, 0x02	; 2
     c46:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_ZN7TwoWire4readEv>
     c4a:	c8 2f       	mov	r28, r24
     c4c:	87 e6       	ldi	r24, 0x67	; 103
     c4e:	92 e0       	ldi	r25, 0x02	; 2
     c50:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_ZN7TwoWire4readEv>
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	3c 2f       	mov	r19, r28
     c5a:	82 2b       	or	r24, r18
     c5c:	93 2b       	or	r25, r19
     c5e:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <gyro_axis+0x7>
     c62:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <gyro_axis+0x6>
	}

	if(cal_int == 2000){
     c66:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <cal_int>
     c6a:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <cal_int+0x1>
     c6e:	80 3d       	cpi	r24, 0xD0	; 208
     c70:	97 40       	sbci	r25, 0x07	; 7
     c72:	09 f0       	breq	.+2      	; 0xc76 <_Z13gyro_signalenv+0x1bc>
     c74:	4e c0       	rjmp	.+156    	; 0xd12 <_Z13gyro_signalenv+0x258>
		gyro_axis[1] -= gyro_axis_cal[1];                                       //Only compensate after the calibration.
     c76:	60 91 f0 01 	lds	r22, 0x01F0	; 0x8001f0 <gyro_axis+0x2>
     c7a:	70 91 f1 01 	lds	r23, 0x01F1	; 0x8001f1 <gyro_axis+0x3>
     c7e:	07 2e       	mov	r0, r23
     c80:	00 0c       	add	r0, r0
     c82:	88 0b       	sbc	r24, r24
     c84:	99 0b       	sbc	r25, r25
     c86:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
     c8a:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <gyro_axis_cal+0x4>
     c8e:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <gyro_axis_cal+0x5>
     c92:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <gyro_axis_cal+0x6>
     c96:	50 91 85 01 	lds	r21, 0x0185	; 0x800185 <gyro_axis_cal+0x7>
     c9a:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__subsf3>
     c9e:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__fixsfsi>
     ca2:	70 93 f1 01 	sts	0x01F1, r23	; 0x8001f1 <gyro_axis+0x3>
     ca6:	60 93 f0 01 	sts	0x01F0, r22	; 0x8001f0 <gyro_axis+0x2>
		gyro_axis[2] -= gyro_axis_cal[2];                                       //Only compensate after the calibration.
     caa:	60 91 f2 01 	lds	r22, 0x01F2	; 0x8001f2 <gyro_axis+0x4>
     cae:	70 91 f3 01 	lds	r23, 0x01F3	; 0x8001f3 <gyro_axis+0x5>
     cb2:	07 2e       	mov	r0, r23
     cb4:	00 0c       	add	r0, r0
     cb6:	88 0b       	sbc	r24, r24
     cb8:	99 0b       	sbc	r25, r25
     cba:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
     cbe:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <gyro_axis_cal+0x8>
     cc2:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <gyro_axis_cal+0x9>
     cc6:	40 91 88 01 	lds	r20, 0x0188	; 0x800188 <gyro_axis_cal+0xa>
     cca:	50 91 89 01 	lds	r21, 0x0189	; 0x800189 <gyro_axis_cal+0xb>
     cce:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__subsf3>
     cd2:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__fixsfsi>
     cd6:	70 93 f3 01 	sts	0x01F3, r23	; 0x8001f3 <gyro_axis+0x5>
     cda:	60 93 f2 01 	sts	0x01F2, r22	; 0x8001f2 <gyro_axis+0x4>
		gyro_axis[3] -= gyro_axis_cal[3];                                       //Only compensate after the calibration.
     cde:	60 91 f4 01 	lds	r22, 0x01F4	; 0x8001f4 <gyro_axis+0x6>
     ce2:	70 91 f5 01 	lds	r23, 0x01F5	; 0x8001f5 <gyro_axis+0x7>
     ce6:	07 2e       	mov	r0, r23
     ce8:	00 0c       	add	r0, r0
     cea:	88 0b       	sbc	r24, r24
     cec:	99 0b       	sbc	r25, r25
     cee:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
     cf2:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <gyro_axis_cal+0xc>
     cf6:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <gyro_axis_cal+0xd>
     cfa:	40 91 8c 01 	lds	r20, 0x018C	; 0x80018c <gyro_axis_cal+0xe>
     cfe:	50 91 8d 01 	lds	r21, 0x018D	; 0x80018d <gyro_axis_cal+0xf>
     d02:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__subsf3>
     d06:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__fixsfsi>
     d0a:	70 93 f5 01 	sts	0x01F5, r23	; 0x8001f5 <gyro_axis+0x7>
     d0e:	60 93 f4 01 	sts	0x01F4, r22	; 0x8001f4 <gyro_axis+0x6>
	}
	gyro_roll = gyro_axis[eeprom_data[28] & 0b00000011];                      //Set gyro_roll to the correct axis that was stored in the EEPROM.
     d12:	c0 90 46 02 	lds	r12, 0x0246	; 0x800246 <eeprom_data+0x1c>
     d16:	0c 2d       	mov	r16, r12
     d18:	03 70       	andi	r16, 0x03	; 3
     d1a:	10 e0       	ldi	r17, 0x00	; 0
     d1c:	00 0f       	add	r16, r16
     d1e:	11 1f       	adc	r17, r17
     d20:	f8 01       	movw	r30, r16
     d22:	e2 51       	subi	r30, 0x12	; 18
     d24:	fe 4f       	sbci	r31, 0xFE	; 254
     d26:	60 81       	ld	r22, Z
     d28:	71 81       	ldd	r23, Z+1	; 0x01
     d2a:	07 2e       	mov	r0, r23
     d2c:	00 0c       	add	r0, r0
     d2e:	88 0b       	sbc	r24, r24
     d30:	99 0b       	sbc	r25, r25
     d32:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
	if(eeprom_data[28] & 0b10000000)gyro_roll *= -1;                          //Invert gyro_roll if the MSB of EEPROM bit 28 is set.
     d36:	c7 fc       	sbrc	r12, 7
     d38:	09 c0       	rjmp	.+18     	; 0xd4c <_Z13gyro_signalenv+0x292>
	if(cal_int == 2000){
		gyro_axis[1] -= gyro_axis_cal[1];                                       //Only compensate after the calibration.
		gyro_axis[2] -= gyro_axis_cal[2];                                       //Only compensate after the calibration.
		gyro_axis[3] -= gyro_axis_cal[3];                                       //Only compensate after the calibration.
	}
	gyro_roll = gyro_axis[eeprom_data[28] & 0b00000011];                      //Set gyro_roll to the correct axis that was stored in the EEPROM.
     d3a:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <gyro_roll>
     d3e:	70 93 93 01 	sts	0x0193, r23	; 0x800193 <gyro_roll+0x1>
     d42:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <gyro_roll+0x2>
     d46:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <gyro_roll+0x3>
     d4a:	0b c0       	rjmp	.+22     	; 0xd62 <_Z13gyro_signalenv+0x2a8>
	if(eeprom_data[28] & 0b10000000)gyro_roll *= -1;                          //Invert gyro_roll if the MSB of EEPROM bit 28 is set.
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	b0 58       	subi	r27, 0x80	; 128
     d52:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <gyro_roll>
     d56:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <gyro_roll+0x1>
     d5a:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <gyro_roll+0x2>
     d5e:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <gyro_roll+0x3>
	gyro_pitch = gyro_axis[eeprom_data[29] & 0b00000011];                     //Set gyro_pitch to the correct axis that was stored in the EEPROM.
     d62:	b0 90 47 02 	lds	r11, 0x0247	; 0x800247 <eeprom_data+0x1d>
     d66:	8b 2d       	mov	r24, r11
     d68:	83 70       	andi	r24, 0x03	; 3
     d6a:	e8 2e       	mov	r14, r24
     d6c:	f1 2c       	mov	r15, r1
     d6e:	ee 0c       	add	r14, r14
     d70:	ff 1c       	adc	r15, r15
     d72:	f7 01       	movw	r30, r14
     d74:	e2 51       	subi	r30, 0x12	; 18
     d76:	fe 4f       	sbci	r31, 0xFE	; 254
     d78:	60 81       	ld	r22, Z
     d7a:	71 81       	ldd	r23, Z+1	; 0x01
     d7c:	07 2e       	mov	r0, r23
     d7e:	00 0c       	add	r0, r0
     d80:	88 0b       	sbc	r24, r24
     d82:	99 0b       	sbc	r25, r25
     d84:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
	if(eeprom_data[29] & 0b10000000)gyro_pitch *= -1;                         //Invert gyro_pitch if the MSB of EEPROM bit 29 is set.
     d88:	b7 fc       	sbrc	r11, 7
     d8a:	09 c0       	rjmp	.+18     	; 0xd9e <_Z13gyro_signalenv+0x2e4>
		gyro_axis[2] -= gyro_axis_cal[2];                                       //Only compensate after the calibration.
		gyro_axis[3] -= gyro_axis_cal[3];                                       //Only compensate after the calibration.
	}
	gyro_roll = gyro_axis[eeprom_data[28] & 0b00000011];                      //Set gyro_roll to the correct axis that was stored in the EEPROM.
	if(eeprom_data[28] & 0b10000000)gyro_roll *= -1;                          //Invert gyro_roll if the MSB of EEPROM bit 28 is set.
	gyro_pitch = gyro_axis[eeprom_data[29] & 0b00000011];                     //Set gyro_pitch to the correct axis that was stored in the EEPROM.
     d8c:	60 93 96 01 	sts	0x0196, r22	; 0x800196 <gyro_pitch>
     d90:	70 93 97 01 	sts	0x0197, r23	; 0x800197 <gyro_pitch+0x1>
     d94:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <gyro_pitch+0x2>
     d98:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <gyro_pitch+0x3>
     d9c:	0b c0       	rjmp	.+22     	; 0xdb4 <_Z13gyro_signalenv+0x2fa>
	if(eeprom_data[29] & 0b10000000)gyro_pitch *= -1;                         //Invert gyro_pitch if the MSB of EEPROM bit 29 is set.
     d9e:	dc 01       	movw	r26, r24
     da0:	cb 01       	movw	r24, r22
     da2:	b0 58       	subi	r27, 0x80	; 128
     da4:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <gyro_pitch>
     da8:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <gyro_pitch+0x1>
     dac:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <gyro_pitch+0x2>
     db0:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <gyro_pitch+0x3>
	gyro_yaw = gyro_axis[eeprom_data[30] & 0b00000011];                       //Set gyro_yaw to the correct axis that was stored in the EEPROM.
     db4:	d0 90 48 02 	lds	r13, 0x0248	; 0x800248 <eeprom_data+0x1e>
     db8:	cd 2d       	mov	r28, r13
     dba:	c3 70       	andi	r28, 0x03	; 3
     dbc:	d0 e0       	ldi	r29, 0x00	; 0
     dbe:	cc 0f       	add	r28, r28
     dc0:	dd 1f       	adc	r29, r29
     dc2:	fe 01       	movw	r30, r28
     dc4:	e2 51       	subi	r30, 0x12	; 18
     dc6:	fe 4f       	sbci	r31, 0xFE	; 254
     dc8:	60 81       	ld	r22, Z
     dca:	71 81       	ldd	r23, Z+1	; 0x01
     dcc:	07 2e       	mov	r0, r23
     dce:	00 0c       	add	r0, r0
     dd0:	88 0b       	sbc	r24, r24
     dd2:	99 0b       	sbc	r25, r25
     dd4:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
	if(eeprom_data[30] & 0b10000000)gyro_yaw *= -1;                           //Invert gyro_yaw if the MSB of EEPROM bit 30 is set.
     dd8:	d7 fc       	sbrc	r13, 7
     dda:	09 c0       	rjmp	.+18     	; 0xdee <_Z13gyro_signalenv+0x334>
	}
	gyro_roll = gyro_axis[eeprom_data[28] & 0b00000011];                      //Set gyro_roll to the correct axis that was stored in the EEPROM.
	if(eeprom_data[28] & 0b10000000)gyro_roll *= -1;                          //Invert gyro_roll if the MSB of EEPROM bit 28 is set.
	gyro_pitch = gyro_axis[eeprom_data[29] & 0b00000011];                     //Set gyro_pitch to the correct axis that was stored in the EEPROM.
	if(eeprom_data[29] & 0b10000000)gyro_pitch *= -1;                         //Invert gyro_pitch if the MSB of EEPROM bit 29 is set.
	gyro_yaw = gyro_axis[eeprom_data[30] & 0b00000011];                       //Set gyro_yaw to the correct axis that was stored in the EEPROM.
     ddc:	60 93 8e 01 	sts	0x018E, r22	; 0x80018e <gyro_yaw>
     de0:	70 93 8f 01 	sts	0x018F, r23	; 0x80018f <gyro_yaw+0x1>
     de4:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <gyro_yaw+0x2>
     de8:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <gyro_yaw+0x3>
     dec:	0b c0       	rjmp	.+22     	; 0xe04 <_Z13gyro_signalenv+0x34a>
	if(eeprom_data[30] & 0b10000000)gyro_yaw *= -1;                           //Invert gyro_yaw if the MSB of EEPROM bit 30 is set.
     dee:	dc 01       	movw	r26, r24
     df0:	cb 01       	movw	r24, r22
     df2:	b0 58       	subi	r27, 0x80	; 128
     df4:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <gyro_yaw>
     df8:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <gyro_yaw+0x1>
     dfc:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <gyro_yaw+0x2>
     e00:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <gyro_yaw+0x3>

	acc_x = acc_axis[eeprom_data[29] & 0b00000011];                           //Set acc_x to the correct axis that was stored in the EEPROM.
     e04:	f7 01       	movw	r30, r14
     e06:	ea 50       	subi	r30, 0x0A	; 10
     e08:	fe 4f       	sbci	r31, 0xFE	; 254
     e0a:	80 81       	ld	r24, Z
     e0c:	91 81       	ldd	r25, Z+1	; 0x01
     e0e:	09 2e       	mov	r0, r25
     e10:	00 0c       	add	r0, r0
     e12:	aa 0b       	sbc	r26, r26
     e14:	bb 0b       	sbc	r27, r27
	if(eeprom_data[29] & 0b10000000)acc_x *= -1;                              //Invert acc_x if the MSB of EEPROM bit 29 is set.
     e16:	b7 fe       	sbrs	r11, 7
     e18:	07 c0       	rjmp	.+14     	; 0xe28 <_Z13gyro_signalenv+0x36e>
     e1a:	b0 95       	com	r27
     e1c:	a0 95       	com	r26
     e1e:	90 95       	com	r25
     e20:	81 95       	neg	r24
     e22:	9f 4f       	sbci	r25, 0xFF	; 255
     e24:	af 4f       	sbci	r26, 0xFF	; 255
     e26:	bf 4f       	sbci	r27, 0xFF	; 255
     e28:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <acc_x>
     e2c:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <acc_x+0x1>
     e30:	a0 93 e4 01 	sts	0x01E4, r26	; 0x8001e4 <acc_x+0x2>
     e34:	b0 93 e5 01 	sts	0x01E5, r27	; 0x8001e5 <acc_x+0x3>
	acc_y = acc_axis[eeprom_data[28] & 0b00000011];                           //Set acc_y to the correct axis that was stored in the EEPROM.
     e38:	f8 01       	movw	r30, r16
     e3a:	ea 50       	subi	r30, 0x0A	; 10
     e3c:	fe 4f       	sbci	r31, 0xFE	; 254
     e3e:	80 81       	ld	r24, Z
     e40:	91 81       	ldd	r25, Z+1	; 0x01
     e42:	09 2e       	mov	r0, r25
     e44:	00 0c       	add	r0, r0
     e46:	aa 0b       	sbc	r26, r26
     e48:	bb 0b       	sbc	r27, r27
	if(eeprom_data[28] & 0b10000000)acc_y *= -1;                              //Invert acc_y if the MSB of EEPROM bit 28 is set.
     e4a:	c7 fe       	sbrs	r12, 7
     e4c:	07 c0       	rjmp	.+14     	; 0xe5c <_Z13gyro_signalenv+0x3a2>
     e4e:	b0 95       	com	r27
     e50:	a0 95       	com	r26
     e52:	90 95       	com	r25
     e54:	81 95       	neg	r24
     e56:	9f 4f       	sbci	r25, 0xFF	; 255
     e58:	af 4f       	sbci	r26, 0xFF	; 255
     e5a:	bf 4f       	sbci	r27, 0xFF	; 255
     e5c:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <acc_y>
     e60:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <acc_y+0x1>
     e64:	a0 93 e0 01 	sts	0x01E0, r26	; 0x8001e0 <acc_y+0x2>
     e68:	b0 93 e1 01 	sts	0x01E1, r27	; 0x8001e1 <acc_y+0x3>
	acc_z = acc_axis[eeprom_data[30] & 0b00000011];                           //Set acc_z to the correct axis that was stored in the EEPROM.
     e6c:	ca 50       	subi	r28, 0x0A	; 10
     e6e:	de 4f       	sbci	r29, 0xFE	; 254
     e70:	88 81       	ld	r24, Y
     e72:	99 81       	ldd	r25, Y+1	; 0x01
     e74:	09 2e       	mov	r0, r25
     e76:	00 0c       	add	r0, r0
     e78:	aa 0b       	sbc	r26, r26
     e7a:	bb 0b       	sbc	r27, r27
	if(eeprom_data[30] & 0b10000000)acc_z *= -1;                              //Invert acc_z if the MSB of EEPROM bit 30 is set.
     e7c:	d7 fe       	sbrs	r13, 7
     e7e:	07 c0       	rjmp	.+14     	; 0xe8e <_Z13gyro_signalenv+0x3d4>
     e80:	b0 95       	com	r27
     e82:	a0 95       	com	r26
     e84:	90 95       	com	r25
     e86:	81 95       	neg	r24
     e88:	9f 4f       	sbci	r25, 0xFF	; 255
     e8a:	af 4f       	sbci	r26, 0xFF	; 255
     e8c:	bf 4f       	sbci	r27, 0xFF	; 255
     e8e:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <acc_z>
     e92:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <acc_z+0x1>
     e96:	a0 93 dc 01 	sts	0x01DC, r26	; 0x8001dc <acc_z+0x2>
     e9a:	b0 93 dd 01 	sts	0x01DD, r27	; 0x8001dd <acc_z+0x3>
}
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	1f 91       	pop	r17
     ea4:	0f 91       	pop	r16
     ea6:	ff 90       	pop	r15
     ea8:	ef 90       	pop	r14
     eaa:	df 90       	pop	r13
     eac:	cf 90       	pop	r12
     eae:	bf 90       	pop	r11
     eb0:	08 95       	ret

00000eb2 <loop>:
{
	return ((curval - 1500) / 850) * maxDelta + startVal;
}
int ledWaringcounter =0;
bool threshold_started = false;
void loop(){
     eb2:	4f 92       	push	r4
     eb4:	5f 92       	push	r5
     eb6:	6f 92       	push	r6
     eb8:	7f 92       	push	r7
     eba:	8f 92       	push	r8
     ebc:	9f 92       	push	r9
     ebe:	af 92       	push	r10
     ec0:	bf 92       	push	r11
     ec2:	cf 92       	push	r12
     ec4:	df 92       	push	r13
     ec6:	ef 92       	push	r14
     ec8:	ff 92       	push	r15
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	2c 97       	sbiw	r28, 0x0c	; 12
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	f8 94       	cli
     ed8:	de bf       	out	0x3e, r29	; 62
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	cd bf       	out	0x3d, r28	; 61

	//65.5 = 1 deg/sec (check the datasheet of the MPU-6050 for more information).
	gyro_roll_input = (gyro_roll_input * 0.7) + ((gyro_roll / 65.5) * 0.3);   //Gyro pid input is deg/sec.
     ede:	80 90 92 01 	lds	r8, 0x0192	; 0x800192 <gyro_roll>
     ee2:	90 90 93 01 	lds	r9, 0x0193	; 0x800193 <gyro_roll+0x1>
     ee6:	a0 90 94 01 	lds	r10, 0x0194	; 0x800194 <gyro_roll+0x2>
     eea:	b0 90 95 01 	lds	r11, 0x0195	; 0x800195 <gyro_roll+0x3>
     eee:	23 e3       	ldi	r18, 0x33	; 51
     ef0:	33 e3       	ldi	r19, 0x33	; 51
     ef2:	43 e3       	ldi	r20, 0x33	; 51
     ef4:	5f e3       	ldi	r21, 0x3F	; 63
     ef6:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <gyro_roll_input>
     efa:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <gyro_roll_input+0x1>
     efe:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <gyro_roll_input+0x2>
     f02:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <gyro_roll_input+0x3>
     f06:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
     f0a:	6b 01       	movw	r12, r22
     f0c:	7c 01       	movw	r14, r24
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	43 e8       	ldi	r20, 0x83	; 131
     f14:	52 e4       	ldi	r21, 0x42	; 66
     f16:	c5 01       	movw	r24, r10
     f18:	b4 01       	movw	r22, r8
     f1a:	0e 94 89 11 	call	0x2312	; 0x2312 <__divsf3>
     f1e:	2a e9       	ldi	r18, 0x9A	; 154
     f20:	39 e9       	ldi	r19, 0x99	; 153
     f22:	49 e9       	ldi	r20, 0x99	; 153
     f24:	5e e3       	ldi	r21, 0x3E	; 62
     f26:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
     f2a:	9b 01       	movw	r18, r22
     f2c:	ac 01       	movw	r20, r24
     f2e:	c7 01       	movw	r24, r14
     f30:	b6 01       	movw	r22, r12
     f32:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
     f36:	60 93 6e 01 	sts	0x016E, r22	; 0x80016e <gyro_roll_input>
     f3a:	70 93 6f 01 	sts	0x016F, r23	; 0x80016f <gyro_roll_input+0x1>
     f3e:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <gyro_roll_input+0x2>
     f42:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <gyro_roll_input+0x3>
	gyro_pitch_input = (gyro_pitch_input * 0.7) + ((gyro_pitch / 65.5) * 0.3);//Gyro pid input is deg/sec.
     f46:	40 90 96 01 	lds	r4, 0x0196	; 0x800196 <gyro_pitch>
     f4a:	50 90 97 01 	lds	r5, 0x0197	; 0x800197 <gyro_pitch+0x1>
     f4e:	60 90 98 01 	lds	r6, 0x0198	; 0x800198 <gyro_pitch+0x2>
     f52:	70 90 99 01 	lds	r7, 0x0199	; 0x800199 <gyro_pitch+0x3>
     f56:	23 e3       	ldi	r18, 0x33	; 51
     f58:	33 e3       	ldi	r19, 0x33	; 51
     f5a:	43 e3       	ldi	r20, 0x33	; 51
     f5c:	5f e3       	ldi	r21, 0x3F	; 63
     f5e:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <gyro_pitch_input>
     f62:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <gyro_pitch_input+0x1>
     f66:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <gyro_pitch_input+0x2>
     f6a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <gyro_pitch_input+0x3>
     f6e:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
     f72:	6b 01       	movw	r12, r22
     f74:	7c 01       	movw	r14, r24
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	43 e8       	ldi	r20, 0x83	; 131
     f7c:	52 e4       	ldi	r21, 0x42	; 66
     f7e:	c3 01       	movw	r24, r6
     f80:	b2 01       	movw	r22, r4
     f82:	0e 94 89 11 	call	0x2312	; 0x2312 <__divsf3>
     f86:	2a e9       	ldi	r18, 0x9A	; 154
     f88:	39 e9       	ldi	r19, 0x99	; 153
     f8a:	49 e9       	ldi	r20, 0x99	; 153
     f8c:	5e e3       	ldi	r21, 0x3E	; 62
     f8e:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
     f92:	9b 01       	movw	r18, r22
     f94:	ac 01       	movw	r20, r24
     f96:	c7 01       	movw	r24, r14
     f98:	b6 01       	movw	r22, r12
     f9a:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
     f9e:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <gyro_pitch_input>
     fa2:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <gyro_pitch_input+0x1>
     fa6:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <gyro_pitch_input+0x2>
     faa:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <gyro_pitch_input+0x3>
	gyro_yaw_input = (gyro_yaw_input * 0.7) + ((gyro_yaw / 65.5) * 0.3);      //Gyro pid input is deg/sec.
     fae:	c0 90 8e 01 	lds	r12, 0x018E	; 0x80018e <gyro_yaw>
     fb2:	d0 90 8f 01 	lds	r13, 0x018F	; 0x80018f <gyro_yaw+0x1>
     fb6:	e0 90 90 01 	lds	r14, 0x0190	; 0x800190 <gyro_yaw+0x2>
     fba:	f0 90 91 01 	lds	r15, 0x0191	; 0x800191 <gyro_yaw+0x3>
     fbe:	23 e3       	ldi	r18, 0x33	; 51
     fc0:	33 e3       	ldi	r19, 0x33	; 51
     fc2:	43 e3       	ldi	r20, 0x33	; 51
     fc4:	5f e3       	ldi	r21, 0x3F	; 63
     fc6:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <gyro_yaw_input>
     fca:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <gyro_yaw_input+0x1>
     fce:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <gyro_yaw_input+0x2>
     fd2:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <gyro_yaw_input+0x3>
     fd6:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
     fda:	69 83       	std	Y+1, r22	; 0x01
     fdc:	7a 83       	std	Y+2, r23	; 0x02
     fde:	8b 83       	std	Y+3, r24	; 0x03
     fe0:	9c 83       	std	Y+4, r25	; 0x04
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	43 e8       	ldi	r20, 0x83	; 131
     fe8:	52 e4       	ldi	r21, 0x42	; 66
     fea:	c7 01       	movw	r24, r14
     fec:	b6 01       	movw	r22, r12
     fee:	0e 94 89 11 	call	0x2312	; 0x2312 <__divsf3>
     ff2:	2a e9       	ldi	r18, 0x9A	; 154
     ff4:	39 e9       	ldi	r19, 0x99	; 153
     ff6:	49 e9       	ldi	r20, 0x99	; 153
     ff8:	5e e3       	ldi	r21, 0x3E	; 62
     ffa:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
     ffe:	9b 01       	movw	r18, r22
    1000:	ac 01       	movw	r20, r24
    1002:	69 81       	ldd	r22, Y+1	; 0x01
    1004:	7a 81       	ldd	r23, Y+2	; 0x02
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	9c 81       	ldd	r25, Y+4	; 0x04
    100a:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
    100e:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <gyro_yaw_input>
    1012:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <gyro_yaw_input+0x1>
    1016:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <gyro_yaw_input+0x2>
    101a:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <gyro_yaw_input+0x3>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	//Gyro angle calculations
	//0.0000611 = 1 / (250Hz / 65.5)
	angle_pitch += gyro_pitch * 0.0000611;                                    //Calculate the traveled pitch angle and add this to the angle_pitch variable.
	angle_roll += gyro_roll * 0.0000611;                                      //Calculate the traveled roll angle and add this to the angle_roll variable.
    101e:	20 ed       	ldi	r18, 0xD0	; 208
    1020:	32 e2       	ldi	r19, 0x22	; 34
    1022:	40 e8       	ldi	r20, 0x80	; 128
    1024:	58 e3       	ldi	r21, 0x38	; 56
    1026:	c5 01       	movw	r24, r10
    1028:	b4 01       	movw	r22, r8
    102a:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
    102e:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <angle_roll>
    1032:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <angle_roll+0x1>
    1036:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <angle_roll+0x2>
    103a:	50 91 31 01 	lds	r21, 0x0131	; 0x800131 <angle_roll+0x3>
    103e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
    1042:	4b 01       	movw	r8, r22
    1044:	5c 01       	movw	r10, r24

	//0.000001066 = 0.0000611 * (3.142(PI) / 180degr) The Arduino sin function is in radians
	angle_pitch -= angle_roll * sin(gyro_yaw * 0.000001066);                  //If the IMU has yawed transfer the roll angle to the pitch angel.
    1046:	2b e7       	ldi	r18, 0x7B	; 123
    1048:	33 e1       	ldi	r19, 0x13	; 19
    104a:	4f e8       	ldi	r20, 0x8F	; 143
    104c:	55 e3       	ldi	r21, 0x35	; 53
    104e:	c7 01       	movw	r24, r14
    1050:	b6 01       	movw	r22, r12
    1052:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
    1056:	0e 94 b0 13 	call	0x2760	; 0x2760 <sin>
    105a:	6b 01       	movw	r12, r22
    105c:	7c 01       	movw	r14, r24
	//https://youtu.be/j-kE0AMEWy4
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	//Gyro angle calculations
	//0.0000611 = 1 / (250Hz / 65.5)
	angle_pitch += gyro_pitch * 0.0000611;                                    //Calculate the traveled pitch angle and add this to the angle_pitch variable.
    105e:	20 ed       	ldi	r18, 0xD0	; 208
    1060:	32 e2       	ldi	r19, 0x22	; 34
    1062:	40 e8       	ldi	r20, 0x80	; 128
    1064:	58 e3       	ldi	r21, 0x38	; 56
    1066:	c3 01       	movw	r24, r6
    1068:	b2 01       	movw	r22, r4
    106a:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
    106e:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <angle_pitch>
    1072:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <angle_pitch+0x1>
    1076:	40 91 34 01 	lds	r20, 0x0134	; 0x800134 <angle_pitch+0x2>
    107a:	50 91 35 01 	lds	r21, 0x0135	; 0x800135 <angle_pitch+0x3>
    107e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
    1082:	2b 01       	movw	r4, r22
    1084:	3c 01       	movw	r6, r24
	angle_roll += gyro_roll * 0.0000611;                                      //Calculate the traveled roll angle and add this to the angle_roll variable.

	//0.000001066 = 0.0000611 * (3.142(PI) / 180degr) The Arduino sin function is in radians
	angle_pitch -= angle_roll * sin(gyro_yaw * 0.000001066);                  //If the IMU has yawed transfer the roll angle to the pitch angel.
    1086:	a7 01       	movw	r20, r14
    1088:	96 01       	movw	r18, r12
    108a:	c5 01       	movw	r24, r10
    108c:	b4 01       	movw	r22, r8
    108e:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
    1092:	9b 01       	movw	r18, r22
    1094:	ac 01       	movw	r20, r24
    1096:	c3 01       	movw	r24, r6
    1098:	b2 01       	movw	r22, r4
    109a:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__subsf3>
    109e:	6d 83       	std	Y+5, r22	; 0x05
    10a0:	7e 83       	std	Y+6, r23	; 0x06
    10a2:	8f 83       	std	Y+7, r24	; 0x07
    10a4:	98 87       	std	Y+8, r25	; 0x08
	angle_roll += angle_pitch * sin(gyro_yaw * 0.000001066);                  //If the IMU has yawed transfer the pitch angle to the roll angel.
    10a6:	a7 01       	movw	r20, r14
    10a8:	96 01       	movw	r18, r12
    10aa:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
    10ae:	9b 01       	movw	r18, r22
    10b0:	ac 01       	movw	r20, r24
    10b2:	c5 01       	movw	r24, r10
    10b4:	b4 01       	movw	r22, r8
    10b6:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
    10ba:	69 87       	std	Y+9, r22	; 0x09
    10bc:	7a 87       	std	Y+10, r23	; 0x0a
    10be:	8b 87       	std	Y+11, r24	; 0x0b
    10c0:	9c 87       	std	Y+12, r25	; 0x0c

	//Accelerometer angle calculations
	acc_total_vector = sqrt((acc_x*acc_x)+(acc_y*acc_y)+(acc_z*acc_z));       //Calculate the total accelerometer vector.
    10c2:	40 90 e2 01 	lds	r4, 0x01E2	; 0x8001e2 <acc_x>
    10c6:	50 90 e3 01 	lds	r5, 0x01E3	; 0x8001e3 <acc_x+0x1>
    10ca:	60 90 e4 01 	lds	r6, 0x01E4	; 0x8001e4 <acc_x+0x2>
    10ce:	70 90 e5 01 	lds	r7, 0x01E5	; 0x8001e5 <acc_x+0x3>
    10d2:	c0 90 de 01 	lds	r12, 0x01DE	; 0x8001de <acc_y>
    10d6:	d0 90 df 01 	lds	r13, 0x01DF	; 0x8001df <acc_y+0x1>
    10da:	e0 90 e0 01 	lds	r14, 0x01E0	; 0x8001e0 <acc_y+0x2>
    10de:	f0 90 e1 01 	lds	r15, 0x01E1	; 0x8001e1 <acc_y+0x3>
    10e2:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <acc_z>
    10e6:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <acc_z+0x1>
    10ea:	a0 91 dc 01 	lds	r26, 0x01DC	; 0x8001dc <acc_z+0x2>
    10ee:	b0 91 dd 01 	lds	r27, 0x01DD	; 0x8001dd <acc_z+0x3>
    10f2:	89 83       	std	Y+1, r24	; 0x01
    10f4:	9a 83       	std	Y+2, r25	; 0x02
    10f6:	ab 83       	std	Y+3, r26	; 0x03
    10f8:	bc 83       	std	Y+4, r27	; 0x04
    10fa:	a3 01       	movw	r20, r6
    10fc:	92 01       	movw	r18, r4
    10fe:	c3 01       	movw	r24, r6
    1100:	b2 01       	movw	r22, r4
    1102:	0e 94 46 19 	call	0x328c	; 0x328c <__mulsi3>
    1106:	4b 01       	movw	r8, r22
    1108:	5c 01       	movw	r10, r24
    110a:	a7 01       	movw	r20, r14
    110c:	96 01       	movw	r18, r12
    110e:	c7 01       	movw	r24, r14
    1110:	b6 01       	movw	r22, r12
    1112:	0e 94 46 19 	call	0x328c	; 0x328c <__mulsi3>
    1116:	86 0e       	add	r8, r22
    1118:	97 1e       	adc	r9, r23
    111a:	a8 1e       	adc	r10, r24
    111c:	b9 1e       	adc	r11, r25
    111e:	29 81       	ldd	r18, Y+1	; 0x01
    1120:	3a 81       	ldd	r19, Y+2	; 0x02
    1122:	4b 81       	ldd	r20, Y+3	; 0x03
    1124:	5c 81       	ldd	r21, Y+4	; 0x04
    1126:	ca 01       	movw	r24, r20
    1128:	b9 01       	movw	r22, r18
    112a:	0e 94 46 19 	call	0x328c	; 0x328c <__mulsi3>
    112e:	68 0d       	add	r22, r8
    1130:	79 1d       	adc	r23, r9
    1132:	8a 1d       	adc	r24, r10
    1134:	9b 1d       	adc	r25, r11
    1136:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
    113a:	0e 94 be 13 	call	0x277c	; 0x277c <sqrt>
    113e:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__fixsfsi>
    1142:	4b 01       	movw	r8, r22
    1144:	5c 01       	movw	r10, r24
    1146:	60 93 d6 01 	sts	0x01D6, r22	; 0x8001d6 <acc_total_vector>
    114a:	70 93 d7 01 	sts	0x01D7, r23	; 0x8001d7 <acc_total_vector+0x1>
    114e:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <acc_total_vector+0x2>
    1152:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <acc_total_vector+0x3>
	
	// 57.296 = 1 / (3.142 / 180)
	if(abs(acc_y) < acc_total_vector){                                        //Prevent the asin function to produce a NaN
    1156:	d7 01       	movw	r26, r14
    1158:	c6 01       	movw	r24, r12
    115a:	f7 fe       	sbrs	r15, 7
    115c:	07 c0       	rjmp	.+14     	; 0x116c <loop+0x2ba>
    115e:	88 27       	eor	r24, r24
    1160:	99 27       	eor	r25, r25
    1162:	dc 01       	movw	r26, r24
    1164:	8c 19       	sub	r24, r12
    1166:	9d 09       	sbc	r25, r13
    1168:	ae 09       	sbc	r26, r14
    116a:	bf 09       	sbc	r27, r15
    116c:	88 15       	cp	r24, r8
    116e:	99 05       	cpc	r25, r9
    1170:	aa 05       	cpc	r26, r10
    1172:	bb 05       	cpc	r27, r11
    1174:	04 f5       	brge	.+64     	; 0x11b6 <loop+0x304>
		angle_pitch_acc = asin((float)acc_y/acc_total_vector)* 57.296;          //Calculate the pitch angle.
    1176:	c7 01       	movw	r24, r14
    1178:	b6 01       	movw	r22, r12
    117a:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
    117e:	6b 01       	movw	r12, r22
    1180:	7c 01       	movw	r14, r24
    1182:	c5 01       	movw	r24, r10
    1184:	b4 01       	movw	r22, r8
    1186:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
    118a:	9b 01       	movw	r18, r22
    118c:	ac 01       	movw	r20, r24
    118e:	c7 01       	movw	r24, r14
    1190:	b6 01       	movw	r22, r12
    1192:	0e 94 89 11 	call	0x2312	; 0x2312 <__divsf3>
    1196:	0e 94 69 11 	call	0x22d2	; 0x22d2 <asin>
    119a:	2b e1       	ldi	r18, 0x1B	; 27
    119c:	3f e2       	ldi	r19, 0x2F	; 47
    119e:	45 e6       	ldi	r20, 0x65	; 101
    11a0:	52 e4       	ldi	r21, 0x42	; 66
    11a2:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
    11a6:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <angle_pitch_acc>
    11aa:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <angle_pitch_acc+0x1>
    11ae:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <angle_pitch_acc+0x2>
    11b2:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <angle_pitch_acc+0x3>
	}
	if(abs(acc_x) < acc_total_vector){                                        //Prevent the asin function to produce a NaN
    11b6:	d3 01       	movw	r26, r6
    11b8:	c2 01       	movw	r24, r4
    11ba:	77 fe       	sbrs	r7, 7
    11bc:	07 c0       	rjmp	.+14     	; 0x11cc <loop+0x31a>
    11be:	88 27       	eor	r24, r24
    11c0:	99 27       	eor	r25, r25
    11c2:	dc 01       	movw	r26, r24
    11c4:	84 19       	sub	r24, r4
    11c6:	95 09       	sbc	r25, r5
    11c8:	a6 09       	sbc	r26, r6
    11ca:	b7 09       	sbc	r27, r7
    11cc:	88 15       	cp	r24, r8
    11ce:	99 05       	cpc	r25, r9
    11d0:	aa 05       	cpc	r26, r10
    11d2:	bb 05       	cpc	r27, r11
    11d4:	04 f5       	brge	.+64     	; 0x1216 <loop+0x364>
		angle_roll_acc = asin((float)acc_x/acc_total_vector)* -57.296;          //Calculate the roll angle.
    11d6:	c3 01       	movw	r24, r6
    11d8:	b2 01       	movw	r22, r4
    11da:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
    11de:	6b 01       	movw	r12, r22
    11e0:	7c 01       	movw	r14, r24
    11e2:	c5 01       	movw	r24, r10
    11e4:	b4 01       	movw	r22, r8
    11e6:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
    11ea:	9b 01       	movw	r18, r22
    11ec:	ac 01       	movw	r20, r24
    11ee:	c7 01       	movw	r24, r14
    11f0:	b6 01       	movw	r22, r12
    11f2:	0e 94 89 11 	call	0x2312	; 0x2312 <__divsf3>
    11f6:	0e 94 69 11 	call	0x22d2	; 0x22d2 <asin>
    11fa:	2b e1       	ldi	r18, 0x1B	; 27
    11fc:	3f e2       	ldi	r19, 0x2F	; 47
    11fe:	45 e6       	ldi	r20, 0x65	; 101
    1200:	52 ec       	ldi	r21, 0xC2	; 194
    1202:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
    1206:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <angle_roll_acc>
    120a:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <angle_roll_acc+0x1>
    120e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <angle_roll_acc+0x2>
    1212:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <angle_roll_acc+0x3>
	}
	
	//Place the MPU-6050 spirit level and note the values in the following two lines for calibration.
	angle_pitch_acc -= 2.0;
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	40 e0       	ldi	r20, 0x00	; 0
    121c:	50 e4       	ldi	r21, 0x40	; 64
    121e:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <angle_pitch_acc>
    1222:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <angle_pitch_acc+0x1>
    1226:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <angle_pitch_acc+0x2>
    122a:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <angle_pitch_acc+0x3>
    122e:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__subsf3>
    1232:	6b 01       	movw	r12, r22
    1234:	7c 01       	movw	r14, r24
    1236:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <angle_pitch_acc>
    123a:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <angle_pitch_acc+0x1>
    123e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <angle_pitch_acc+0x2>
    1242:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <angle_pitch_acc+0x3>
	angle_roll_acc += 5.5;                                          //Accelerometer calibration value for roll.
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 eb       	ldi	r20, 0xB0	; 176
    124c:	50 e4       	ldi	r21, 0x40	; 64
    124e:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <angle_roll_acc>
    1252:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <angle_roll_acc+0x1>
    1256:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <angle_roll_acc+0x2>
    125a:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <angle_roll_acc+0x3>
    125e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
    1262:	69 83       	std	Y+1, r22	; 0x01
    1264:	7a 83       	std	Y+2, r23	; 0x02
    1266:	8b 83       	std	Y+3, r24	; 0x03
    1268:	9c 83       	std	Y+4, r25	; 0x04
    126a:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <angle_roll_acc>
    126e:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <angle_roll_acc+0x1>
    1272:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <angle_roll_acc+0x2>
    1276:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <angle_roll_acc+0x3>
	
	angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;            //Correct the drift of the gyro pitch angle with the accelerometer pitch angle.
    127a:	29 ec       	ldi	r18, 0xC9	; 201
    127c:	35 ee       	ldi	r19, 0xE5	; 229
    127e:	4f e7       	ldi	r20, 0x7F	; 127
    1280:	5f e3       	ldi	r21, 0x3F	; 63
    1282:	6d 81       	ldd	r22, Y+5	; 0x05
    1284:	7e 81       	ldd	r23, Y+6	; 0x06
    1286:	8f 81       	ldd	r24, Y+7	; 0x07
    1288:	98 85       	ldd	r25, Y+8	; 0x08
    128a:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
    128e:	4b 01       	movw	r8, r22
    1290:	5c 01       	movw	r10, r24
    1292:	27 e1       	ldi	r18, 0x17	; 23
    1294:	37 eb       	ldi	r19, 0xB7	; 183
    1296:	41 ed       	ldi	r20, 0xD1	; 209
    1298:	59 e3       	ldi	r21, 0x39	; 57
    129a:	c7 01       	movw	r24, r14
    129c:	b6 01       	movw	r22, r12
    129e:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
    12a2:	9b 01       	movw	r18, r22
    12a4:	ac 01       	movw	r20, r24
    12a6:	c5 01       	movw	r24, r10
    12a8:	b4 01       	movw	r22, r8
    12aa:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
    12ae:	2b 01       	movw	r4, r22
    12b0:	3c 01       	movw	r6, r24
    12b2:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <angle_pitch>
    12b6:	70 93 33 01 	sts	0x0133, r23	; 0x800133 <angle_pitch+0x1>
    12ba:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <angle_pitch+0x2>
    12be:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <angle_pitch+0x3>
	angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;               //Correct the drift of the gyro roll angle with the accelerometer roll angle.
    12c2:	29 ec       	ldi	r18, 0xC9	; 201
    12c4:	35 ee       	ldi	r19, 0xE5	; 229
    12c6:	4f e7       	ldi	r20, 0x7F	; 127
    12c8:	5f e3       	ldi	r21, 0x3F	; 63
    12ca:	69 85       	ldd	r22, Y+9	; 0x09
    12cc:	7a 85       	ldd	r23, Y+10	; 0x0a
    12ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    12d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    12d2:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
    12d6:	4b 01       	movw	r8, r22
    12d8:	5c 01       	movw	r10, r24
    12da:	27 e1       	ldi	r18, 0x17	; 23
    12dc:	37 eb       	ldi	r19, 0xB7	; 183
    12de:	41 ed       	ldi	r20, 0xD1	; 209
    12e0:	59 e3       	ldi	r21, 0x39	; 57
    12e2:	69 81       	ldd	r22, Y+1	; 0x01
    12e4:	7a 81       	ldd	r23, Y+2	; 0x02
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
    12ee:	9b 01       	movw	r18, r22
    12f0:	ac 01       	movw	r20, r24
    12f2:	c5 01       	movw	r24, r10
    12f4:	b4 01       	movw	r22, r8
    12f6:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
    12fa:	4b 01       	movw	r8, r22
    12fc:	5c 01       	movw	r10, r24
    12fe:	60 93 2e 01 	sts	0x012E, r22	; 0x80012e <angle_roll>
    1302:	70 93 2f 01 	sts	0x012F, r23	; 0x80012f <angle_roll+0x1>
    1306:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <angle_roll+0x2>
    130a:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <angle_roll+0x3>

	pitch_level_adjust = angle_pitch * 15;                                    //Calculate the pitch angle correction
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	40 e7       	ldi	r20, 0x70	; 112
    1314:	51 e4       	ldi	r21, 0x41	; 65
    1316:	c3 01       	movw	r24, r6
    1318:	b2 01       	movw	r22, r4
    131a:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
    131e:	60 93 e6 01 	sts	0x01E6, r22	; 0x8001e6 <pitch_level_adjust>
    1322:	70 93 e7 01 	sts	0x01E7, r23	; 0x8001e7 <pitch_level_adjust+0x1>
    1326:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <pitch_level_adjust+0x2>
    132a:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <pitch_level_adjust+0x3>
	roll_level_adjust = angle_roll * 15;                                      //Calculate the roll angle correction
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	40 e7       	ldi	r20, 0x70	; 112
    1334:	51 e4       	ldi	r21, 0x41	; 65
    1336:	c5 01       	movw	r24, r10
    1338:	b4 01       	movw	r22, r8
    133a:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
    133e:	60 93 ea 01 	sts	0x01EA, r22	; 0x8001ea <roll_level_adjust>
    1342:	70 93 eb 01 	sts	0x01EB, r23	; 0x8001eb <roll_level_adjust+0x1>
    1346:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <roll_level_adjust+0x2>
    134a:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <roll_level_adjust+0x3>

	if(!auto_level){                                                          //If the quadcopter is not in auto-level mode
    134e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1352:	81 11       	cpse	r24, r1
    1354:	10 c0       	rjmp	.+32     	; 0x1376 <loop+0x4c4>
		pitch_level_adjust = 0;                                                 //Set the pitch angle correction to zero.
    1356:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <pitch_level_adjust>
    135a:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <pitch_level_adjust+0x1>
    135e:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <pitch_level_adjust+0x2>
    1362:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <pitch_level_adjust+0x3>
		roll_level_adjust = 0;                                                  //Set the roll angle correcion to zero.
    1366:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <roll_level_adjust>
    136a:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <roll_level_adjust+0x1>
    136e:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <roll_level_adjust+0x2>
    1372:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <roll_level_adjust+0x3>
	}

	//For starting the motors: throttle low and yaw left (step 1).
	if(receiver_input_channel_3 < 1050 && receiver_input_channel_4 < 1050)start = 1;
    1376:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <receiver_input_channel_3>
    137a:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <receiver_input_channel_3+0x1>
    137e:	8a 31       	cpi	r24, 0x1A	; 26
    1380:	94 40       	sbci	r25, 0x04	; 4
    1382:	44 f4       	brge	.+16     	; 0x1394 <loop+0x4e2>
    1384:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <receiver_input_channel_4>
    1388:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <receiver_input_channel_4+0x1>
    138c:	8a 31       	cpi	r24, 0x1A	; 26
    138e:	94 40       	sbci	r25, 0x04	; 4
    1390:	0c f4       	brge	.+2      	; 0x1394 <loop+0x4e2>
    1392:	2d c4       	rjmp	.+2138   	; 0x1bee <loop+0xd3c>
	//When yaw stick is back in the center position start the motors (step 2).
	if(start == 1 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1450){
    1394:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <start>
    1398:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <start+0x1>
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	79 f4       	brne	.+30     	; 0x13be <loop+0x50c>
    13a0:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <receiver_input_channel_3>
    13a4:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <receiver_input_channel_3+0x1>
    13a8:	8a 31       	cpi	r24, 0x1A	; 26
    13aa:	94 40       	sbci	r25, 0x04	; 4
    13ac:	44 f4       	brge	.+16     	; 0x13be <loop+0x50c>
    13ae:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <receiver_input_channel_4>
    13b2:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <receiver_input_channel_4+0x1>
    13b6:	8b 3a       	cpi	r24, 0xAB	; 171
    13b8:	95 40       	sbci	r25, 0x05	; 5
    13ba:	0c f0       	brlt	.+2      	; 0x13be <loop+0x50c>
    13bc:	1f c4       	rjmp	.+2110   	; 0x1bfc <loop+0xd4a>
		pid_last_pitch_d_error = 0;
		pid_i_mem_yaw = 0;
		pid_last_yaw_d_error = 0;
	}
	//Stopping the motors: throttle low and yaw right.
	if(start == 2 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1950)
    13be:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <start>
    13c2:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <start+0x1>
    13c6:	02 97       	sbiw	r24, 0x02	; 2
    13c8:	79 f4       	brne	.+30     	; 0x13e8 <loop+0x536>
    13ca:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <receiver_input_channel_3>
    13ce:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <receiver_input_channel_3+0x1>
    13d2:	8a 31       	cpi	r24, 0x1A	; 26
    13d4:	94 40       	sbci	r25, 0x04	; 4
    13d6:	44 f4       	brge	.+16     	; 0x13e8 <loop+0x536>
    13d8:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <receiver_input_channel_4>
    13dc:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <receiver_input_channel_4+0x1>
    13e0:	8f 39       	cpi	r24, 0x9F	; 159
    13e2:	97 40       	sbci	r25, 0x07	; 7
    13e4:	0c f0       	brlt	.+2      	; 0x13e8 <loop+0x536>
    13e6:	5a c4       	rjmp	.+2228   	; 0x1c9c <loop+0xdea>
		start = 0;
	}

	//The PID set point in degrees per second is determined by the roll receiver input.
	//In the case of deviding by 3 the max roll rate is aprox 164 degrees per second ( (500-8)/3 = 164d/s ).
	pid_roll_setpoint = 0;
    13e8:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <pid_roll_setpoint>
    13ec:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <pid_roll_setpoint+0x1>
    13f0:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <pid_roll_setpoint+0x2>
    13f4:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <pid_roll_setpoint+0x3>
	//We need a little dead band of 16us for better results.
	if(receiver_input_channel_1 > 1508)pid_roll_setpoint = receiver_input_channel_1 - 1508;
    13f8:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <receiver_input_channel_1>
    13fc:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <receiver_input_channel_1+0x1>
    1400:	85 3e       	cpi	r24, 0xE5	; 229
    1402:	95 40       	sbci	r25, 0x05	; 5
    1404:	3c f0       	brlt	.+14     	; 0x1414 <loop+0x562>
    1406:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <receiver_input_channel_1>
    140a:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <receiver_input_channel_1+0x1>
    140e:	64 5e       	subi	r22, 0xE4	; 228
    1410:	75 40       	sbci	r23, 0x05	; 5
    1412:	0d c0       	rjmp	.+26     	; 0x142e <loop+0x57c>
	else if(receiver_input_channel_1 < 1492)pid_roll_setpoint = receiver_input_channel_1 - 1492;
    1414:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <receiver_input_channel_1>
    1418:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <receiver_input_channel_1+0x1>
    141c:	84 3d       	cpi	r24, 0xD4	; 212
    141e:	95 40       	sbci	r25, 0x05	; 5
    1420:	a4 f4       	brge	.+40     	; 0x144a <loop+0x598>
    1422:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <receiver_input_channel_1>
    1426:	70 91 29 02 	lds	r23, 0x0229	; 0x800229 <receiver_input_channel_1+0x1>
    142a:	64 5d       	subi	r22, 0xD4	; 212
    142c:	75 40       	sbci	r23, 0x05	; 5
    142e:	07 2e       	mov	r0, r23
    1430:	00 0c       	add	r0, r0
    1432:	88 0b       	sbc	r24, r24
    1434:	99 0b       	sbc	r25, r25
    1436:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
    143a:	60 93 72 01 	sts	0x0172, r22	; 0x800172 <pid_roll_setpoint>
    143e:	70 93 73 01 	sts	0x0173, r23	; 0x800173 <pid_roll_setpoint+0x1>
    1442:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <pid_roll_setpoint+0x2>
    1446:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <pid_roll_setpoint+0x3>

	pid_roll_setpoint -= roll_level_adjust;                                   //Subtract the angle correction from the standardized receiver roll input value.
    144a:	20 91 ea 01 	lds	r18, 0x01EA	; 0x8001ea <roll_level_adjust>
    144e:	30 91 eb 01 	lds	r19, 0x01EB	; 0x8001eb <roll_level_adjust+0x1>
    1452:	40 91 ec 01 	lds	r20, 0x01EC	; 0x8001ec <roll_level_adjust+0x2>
    1456:	50 91 ed 01 	lds	r21, 0x01ED	; 0x8001ed <roll_level_adjust+0x3>
    145a:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <pid_roll_setpoint>
    145e:	70 91 73 01 	lds	r23, 0x0173	; 0x800173 <pid_roll_setpoint+0x1>
    1462:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <pid_roll_setpoint+0x2>
    1466:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <pid_roll_setpoint+0x3>
    146a:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__subsf3>
	pid_roll_setpoint /= 3.0;                                                 //Divide the setpoint for the PID roll controller by 3 to get angles in degrees.
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	40 e4       	ldi	r20, 0x40	; 64
    1474:	50 e4       	ldi	r21, 0x40	; 64
    1476:	0e 94 89 11 	call	0x2312	; 0x2312 <__divsf3>
    147a:	60 93 72 01 	sts	0x0172, r22	; 0x800172 <pid_roll_setpoint>
    147e:	70 93 73 01 	sts	0x0173, r23	; 0x800173 <pid_roll_setpoint+0x1>
    1482:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <pid_roll_setpoint+0x2>
    1486:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <pid_roll_setpoint+0x3>


	//The PID set point in degrees per second is determined by the pitch receiver input.
	//In the case of deviding by 3 the max pitch rate is aprox 164 degrees per second ( (500-8)/3 = 164d/s ).
	pid_pitch_setpoint = 0;
    148a:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <pid_pitch_setpoint>
    148e:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <pid_pitch_setpoint+0x1>
    1492:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <pid_pitch_setpoint+0x2>
    1496:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <pid_pitch_setpoint+0x3>
	//We need a little dead band of 16us for better results.
	if(receiver_input_channel_2 > 1508)pid_pitch_setpoint = receiver_input_channel_2 - 1508;
    149a:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <receiver_input_channel_2>
    149e:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <receiver_input_channel_2+0x1>
    14a2:	85 3e       	cpi	r24, 0xE5	; 229
    14a4:	95 40       	sbci	r25, 0x05	; 5
    14a6:	3c f0       	brlt	.+14     	; 0x14b6 <loop+0x604>
    14a8:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <receiver_input_channel_2>
    14ac:	70 91 27 02 	lds	r23, 0x0227	; 0x800227 <receiver_input_channel_2+0x1>
    14b0:	64 5e       	subi	r22, 0xE4	; 228
    14b2:	75 40       	sbci	r23, 0x05	; 5
    14b4:	0d c0       	rjmp	.+26     	; 0x14d0 <loop+0x61e>
	else if(receiver_input_channel_2 < 1492)pid_pitch_setpoint = receiver_input_channel_2 - 1492;
    14b6:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <receiver_input_channel_2>
    14ba:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <receiver_input_channel_2+0x1>
    14be:	84 3d       	cpi	r24, 0xD4	; 212
    14c0:	95 40       	sbci	r25, 0x05	; 5
    14c2:	a4 f4       	brge	.+40     	; 0x14ec <loop+0x63a>
    14c4:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <receiver_input_channel_2>
    14c8:	70 91 27 02 	lds	r23, 0x0227	; 0x800227 <receiver_input_channel_2+0x1>
    14cc:	64 5d       	subi	r22, 0xD4	; 212
    14ce:	75 40       	sbci	r23, 0x05	; 5
    14d0:	07 2e       	mov	r0, r23
    14d2:	00 0c       	add	r0, r0
    14d4:	88 0b       	sbc	r24, r24
    14d6:	99 0b       	sbc	r25, r25
    14d8:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
    14dc:	60 93 5e 01 	sts	0x015E, r22	; 0x80015e <pid_pitch_setpoint>
    14e0:	70 93 5f 01 	sts	0x015F, r23	; 0x80015f <pid_pitch_setpoint+0x1>
    14e4:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <pid_pitch_setpoint+0x2>
    14e8:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <pid_pitch_setpoint+0x3>

	pid_pitch_setpoint -= pitch_level_adjust;                                  //Subtract the angle correction from the standardized receiver pitch input value.
    14ec:	20 91 e6 01 	lds	r18, 0x01E6	; 0x8001e6 <pitch_level_adjust>
    14f0:	30 91 e7 01 	lds	r19, 0x01E7	; 0x8001e7 <pitch_level_adjust+0x1>
    14f4:	40 91 e8 01 	lds	r20, 0x01E8	; 0x8001e8 <pitch_level_adjust+0x2>
    14f8:	50 91 e9 01 	lds	r21, 0x01E9	; 0x8001e9 <pitch_level_adjust+0x3>
    14fc:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <pid_pitch_setpoint>
    1500:	70 91 5f 01 	lds	r23, 0x015F	; 0x80015f <pid_pitch_setpoint+0x1>
    1504:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <pid_pitch_setpoint+0x2>
    1508:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <pid_pitch_setpoint+0x3>
    150c:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__subsf3>
	pid_pitch_setpoint /= 3.0;                                                 //Divide the setpoint for the PID pitch controller by 3 to get angles in degrees.
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	40 e4       	ldi	r20, 0x40	; 64
    1516:	50 e4       	ldi	r21, 0x40	; 64
    1518:	0e 94 89 11 	call	0x2312	; 0x2312 <__divsf3>
    151c:	60 93 5e 01 	sts	0x015E, r22	; 0x80015e <pid_pitch_setpoint>
    1520:	70 93 5f 01 	sts	0x015F, r23	; 0x80015f <pid_pitch_setpoint+0x1>
    1524:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <pid_pitch_setpoint+0x2>
    1528:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <pid_pitch_setpoint+0x3>

	//The PID set point in degrees per second is determined by the yaw receiver input.
	//In the case of deviding by 3 the max yaw rate is aprox 164 degrees per second ( (500-8)/3 = 164d/s ).
	pid_yaw_setpoint = 0;
    152c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <pid_yaw_setpoint>
    1530:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <pid_yaw_setpoint+0x1>
    1534:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <pid_yaw_setpoint+0x2>
    1538:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <pid_yaw_setpoint+0x3>
	//We need a little dead band of 16us for better results.
	if(receiver_input_channel_3 > 1050){ //Do not yaw when turning off the motors.
    153c:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <receiver_input_channel_3>
    1540:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <receiver_input_channel_3+0x1>
    1544:	8b 31       	cpi	r24, 0x1B	; 27
    1546:	94 40       	sbci	r25, 0x04	; 4
    1548:	7c f1       	brlt	.+94     	; 0x15a8 <loop+0x6f6>
		if(receiver_input_channel_4 > 1508)pid_yaw_setpoint = (receiver_input_channel_4 - 1508)/3.0;
    154a:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <receiver_input_channel_4>
    154e:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <receiver_input_channel_4+0x1>
    1552:	85 3e       	cpi	r24, 0xE5	; 229
    1554:	95 40       	sbci	r25, 0x05	; 5
    1556:	3c f0       	brlt	.+14     	; 0x1566 <loop+0x6b4>
    1558:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <receiver_input_channel_4>
    155c:	70 91 23 02 	lds	r23, 0x0223	; 0x800223 <receiver_input_channel_4+0x1>
    1560:	64 5e       	subi	r22, 0xE4	; 228
    1562:	75 40       	sbci	r23, 0x05	; 5
    1564:	0d c0       	rjmp	.+26     	; 0x1580 <loop+0x6ce>
		else if(receiver_input_channel_4 < 1492)pid_yaw_setpoint = (receiver_input_channel_4 - 1492)/3.0;
    1566:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <receiver_input_channel_4>
    156a:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <receiver_input_channel_4+0x1>
    156e:	84 3d       	cpi	r24, 0xD4	; 212
    1570:	95 40       	sbci	r25, 0x05	; 5
    1572:	d4 f4       	brge	.+52     	; 0x15a8 <loop+0x6f6>
    1574:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <receiver_input_channel_4>
    1578:	70 91 23 02 	lds	r23, 0x0223	; 0x800223 <receiver_input_channel_4+0x1>
    157c:	64 5d       	subi	r22, 0xD4	; 212
    157e:	75 40       	sbci	r23, 0x05	; 5
    1580:	07 2e       	mov	r0, r23
    1582:	00 0c       	add	r0, r0
    1584:	88 0b       	sbc	r24, r24
    1586:	99 0b       	sbc	r25, r25
    1588:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	40 e4       	ldi	r20, 0x40	; 64
    1592:	50 e4       	ldi	r21, 0x40	; 64
    1594:	0e 94 89 11 	call	0x2312	; 0x2312 <__divsf3>
    1598:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <pid_yaw_setpoint>
    159c:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <pid_yaw_setpoint+0x1>
    15a0:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <pid_yaw_setpoint+0x2>
    15a4:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <pid_yaw_setpoint+0x3>
	}
	
	calculate_pid();                                                            //PID inputs are known. So we can calculate the pid output.
    15a8:	0e 94 62 02 	call	0x4c4	; 0x4c4 <_Z13calculate_pidv>

	//The battery voltage is needed for compensation.
	//A complementary filter is used to reduce noise.
	//0.09853 = 0.08 * 1.2317.
	battery_voltage = battery_voltage * 0.92 + (analogRead(0) + 65) * 0.09853;
    15ac:	60 91 16 02 	lds	r22, 0x0216	; 0x800216 <battery_voltage>
    15b0:	70 91 17 02 	lds	r23, 0x0217	; 0x800217 <battery_voltage+0x1>
    15b4:	07 2e       	mov	r0, r23
    15b6:	00 0c       	add	r0, r0
    15b8:	88 0b       	sbc	r24, r24
    15ba:	99 0b       	sbc	r25, r25
    15bc:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
    15c0:	2f e1       	ldi	r18, 0x1F	; 31
    15c2:	35 e8       	ldi	r19, 0x85	; 133
    15c4:	4b e6       	ldi	r20, 0x6B	; 107
    15c6:	5f e3       	ldi	r21, 0x3F	; 63
    15c8:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
    15cc:	6b 01       	movw	r12, r22
    15ce:	7c 01       	movw	r14, r24
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <analogRead>
    15d6:	8f 5b       	subi	r24, 0xBF	; 191
    15d8:	9f 4f       	sbci	r25, 0xFF	; 255
    15da:	bc 01       	movw	r22, r24
    15dc:	99 0f       	add	r25, r25
    15de:	88 0b       	sbc	r24, r24
    15e0:	99 0b       	sbc	r25, r25
    15e2:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
    15e6:	29 e1       	ldi	r18, 0x19	; 25
    15e8:	3a ec       	ldi	r19, 0xCA	; 202
    15ea:	49 ec       	ldi	r20, 0xC9	; 201
    15ec:	5d e3       	ldi	r21, 0x3D	; 61
    15ee:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
    15f2:	9b 01       	movw	r18, r22
    15f4:	ac 01       	movw	r20, r24
    15f6:	c7 01       	movw	r24, r14
    15f8:	b6 01       	movw	r22, r12
    15fa:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
    15fe:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__fixsfsi>
    1602:	70 93 17 02 	sts	0x0217, r23	; 0x800217 <battery_voltage+0x1>
    1606:	60 93 16 02 	sts	0x0216, r22	; 0x800216 <battery_voltage>
	//Turn on the led if battery voltage is to low.
	if(battery_voltage > 600 && battery_voltage < 1000 ) digitalWrite(LED_STATUS_PIN, HIGH);
    160a:	69 55       	subi	r22, 0x59	; 89
    160c:	72 40       	sbci	r23, 0x02	; 2
    160e:	6f 38       	cpi	r22, 0x8F	; 143
    1610:	71 40       	sbci	r23, 0x01	; 1
    1612:	20 f4       	brcc	.+8      	; 0x161c <loop+0x76a>
    1614:	61 e0       	ldi	r22, 0x01	; 1
    1616:	8d e0       	ldi	r24, 0x0D	; 13
    1618:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <digitalWrite>
	if(battery_voltage >= 1000 && battery_voltage < 1050 ) 
    161c:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <battery_voltage>
    1620:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <battery_voltage+0x1>
    1624:	88 5e       	subi	r24, 0xE8	; 232
    1626:	93 40       	sbci	r25, 0x03	; 3
    1628:	c2 97       	sbiw	r24, 0x32	; 50
    162a:	30 f5       	brcc	.+76     	; 0x1678 <loop+0x7c6>
	{	
		ledWaringcounter ++;
    162c:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <ledWaringcounter>
    1630:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <ledWaringcounter+0x1>
    1634:	01 96       	adiw	r24, 0x01	; 1
		if (ledWaringcounter==250) ledWaringcounter =0;
    1636:	8a 3f       	cpi	r24, 0xFA	; 250
    1638:	91 05       	cpc	r25, r1
    163a:	29 f0       	breq	.+10     	; 0x1646 <loop+0x794>
	battery_voltage = battery_voltage * 0.92 + (analogRead(0) + 65) * 0.09853;
	//Turn on the led if battery voltage is to low.
	if(battery_voltage > 600 && battery_voltage < 1000 ) digitalWrite(LED_STATUS_PIN, HIGH);
	if(battery_voltage >= 1000 && battery_voltage < 1050 ) 
	{	
		ledWaringcounter ++;
    163c:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <ledWaringcounter+0x1>
    1640:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <ledWaringcounter>
    1644:	04 c0       	rjmp	.+8      	; 0x164e <loop+0x79c>
		if (ledWaringcounter==250) ledWaringcounter =0;
    1646:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <ledWaringcounter+0x1>
    164a:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <ledWaringcounter>
		if (ledWaringcounter==0)digitalWrite(LED_STATUS_PIN, HIGH);
    164e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <ledWaringcounter>
    1652:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <ledWaringcounter+0x1>
    1656:	89 2b       	or	r24, r25
    1658:	21 f4       	brne	.+8      	; 0x1662 <loop+0x7b0>
    165a:	61 e0       	ldi	r22, 0x01	; 1
    165c:	8d e0       	ldi	r24, 0x0D	; 13
    165e:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <digitalWrite>
		if (ledWaringcounter==125)digitalWrite(LED_STATUS_PIN, LOW);
    1662:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <ledWaringcounter>
    1666:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <ledWaringcounter+0x1>
    166a:	8d 37       	cpi	r24, 0x7D	; 125
    166c:	91 05       	cpc	r25, r1
    166e:	21 f4       	brne	.+8      	; 0x1678 <loop+0x7c6>
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	8d e0       	ldi	r24, 0x0D	; 13
    1674:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <digitalWrite>
	}
	
	throttle = receiver_input_channel_3;                                      //We need the throttle signal as a base signal.
    1678:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <receiver_input_channel_3>
    167c:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <receiver_input_channel_3+0x1>
    1680:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <throttle+0x1>
    1684:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <throttle>

	if (start == 2){                                                          //The motors are started.
    1688:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <start>
    168c:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <start+0x1>
    1690:	22 30       	cpi	r18, 0x02	; 2
    1692:	31 05       	cpc	r19, r1
    1694:	09 f0       	breq	.+2      	; 0x1698 <loop+0x7e6>
    1696:	a4 c1       	rjmp	.+840    	; 0x19e0 <loop+0xb2e>
		
		if (throttle > 1800) throttle = 1800;                                   //We need some room to keep full control at full throttle.
    1698:	89 30       	cpi	r24, 0x09	; 9
    169a:	97 40       	sbci	r25, 0x07	; 7
    169c:	34 f0       	brlt	.+12     	; 0x16aa <loop+0x7f8>
    169e:	88 e0       	ldi	r24, 0x08	; 8
    16a0:	97 e0       	ldi	r25, 0x07	; 7
    16a2:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <throttle+0x1>
    16a6:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <throttle>
		if (threshold_started)
    16aa:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
    16ae:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <throttle>
    16b2:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <throttle+0x1>
    16b6:	88 23       	and	r24, r24
    16b8:	81 f0       	breq	.+32     	; 0x16da <loop+0x828>
		{
			if (throttle < receiver_input_channel_4)
    16ba:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <receiver_input_channel_4>
    16be:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <receiver_input_channel_4+0x1>
    16c2:	28 17       	cp	r18, r24
    16c4:	39 07       	cpc	r19, r25
    16c6:	a4 f4       	brge	.+40     	; 0x16f0 <loop+0x83e>
			{
				//digitalWrite(LED_STATUS_PIN, HIGH);
				throttle = receiver_input_channel_4;
    16c8:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <receiver_input_channel_4>
    16cc:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <receiver_input_channel_4+0x1>
    16d0:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <throttle+0x1>
    16d4:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <throttle>
    16d8:	0b c0       	rjmp	.+22     	; 0x16f0 <loop+0x83e>
				//digitalWrite(LED_STATUS_PIN, LOW);
			}
		}
		else
		{
			threshold_started = (throttle > receiver_input_channel_4);
    16da:	40 91 22 02 	lds	r20, 0x0222	; 0x800222 <receiver_input_channel_4>
    16de:	50 91 23 02 	lds	r21, 0x0223	; 0x800223 <receiver_input_channel_4+0x1>
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	42 17       	cp	r20, r18
    16e6:	53 07       	cpc	r21, r19
    16e8:	0c f0       	brlt	.+2      	; 0x16ec <loop+0x83a>
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
		}

		esc_1 = throttle - pid_output_pitch + pid_output_roll + pid_output_yaw; //Calculate the pulse for esc 1 (front-right - CCW)
    16f0:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <throttle>
    16f4:	70 91 19 02 	lds	r23, 0x0219	; 0x800219 <throttle+0x1>
    16f8:	07 2e       	mov	r0, r23
    16fa:	00 0c       	add	r0, r0
    16fc:	88 0b       	sbc	r24, r24
    16fe:	99 0b       	sbc	r25, r25
    1700:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
    1704:	2b 01       	movw	r4, r22
    1706:	3c 01       	movw	r6, r24
    1708:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <pid_output_pitch>
    170c:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <pid_output_pitch+0x1>
    1710:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <pid_output_pitch+0x2>
    1714:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <pid_output_pitch+0x3>
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	9a 83       	std	Y+2, r25	; 0x02
    171c:	ab 83       	std	Y+3, r26	; 0x03
    171e:	bc 83       	std	Y+4, r27	; 0x04
    1720:	9c 01       	movw	r18, r24
    1722:	ad 01       	movw	r20, r26
    1724:	c3 01       	movw	r24, r6
    1726:	b2 01       	movw	r22, r4
    1728:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__subsf3>
    172c:	6d 83       	std	Y+5, r22	; 0x05
    172e:	7e 83       	std	Y+6, r23	; 0x06
    1730:	8f 83       	std	Y+7, r24	; 0x07
    1732:	98 87       	std	Y+8, r25	; 0x08
    1734:	80 90 6a 01 	lds	r8, 0x016A	; 0x80016a <pid_output_roll>
    1738:	90 90 6b 01 	lds	r9, 0x016B	; 0x80016b <pid_output_roll+0x1>
    173c:	a0 90 6c 01 	lds	r10, 0x016C	; 0x80016c <pid_output_roll+0x2>
    1740:	b0 90 6d 01 	lds	r11, 0x016D	; 0x80016d <pid_output_roll+0x3>
    1744:	c0 90 42 01 	lds	r12, 0x0142	; 0x800142 <pid_output_yaw>
    1748:	d0 90 43 01 	lds	r13, 0x0143	; 0x800143 <pid_output_yaw+0x1>
    174c:	e0 90 44 01 	lds	r14, 0x0144	; 0x800144 <pid_output_yaw+0x2>
    1750:	f0 90 45 01 	lds	r15, 0x0145	; 0x800145 <pid_output_yaw+0x3>
    1754:	a5 01       	movw	r20, r10
    1756:	94 01       	movw	r18, r8
    1758:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
    175c:	a7 01       	movw	r20, r14
    175e:	96 01       	movw	r18, r12
    1760:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
    1764:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__fixsfsi>
    1768:	69 87       	std	Y+9, r22	; 0x09
    176a:	7a 87       	std	Y+10, r23	; 0x0a
    176c:	8b 87       	std	Y+11, r24	; 0x0b
    176e:	9c 87       	std	Y+12, r25	; 0x0c
    1770:	a9 85       	ldd	r26, Y+9	; 0x09
    1772:	ba 85       	ldd	r27, Y+10	; 0x0a
    1774:	b0 93 21 02 	sts	0x0221, r27	; 0x800221 <esc_1+0x1>
    1778:	a0 93 20 02 	sts	0x0220, r26	; 0x800220 <esc_1>
		esc_2 = throttle + pid_output_pitch + pid_output_roll - pid_output_yaw; //Calculate the pulse for esc 2 (rear-right - CW)
    177c:	29 81       	ldd	r18, Y+1	; 0x01
    177e:	3a 81       	ldd	r19, Y+2	; 0x02
    1780:	4b 81       	ldd	r20, Y+3	; 0x03
    1782:	5c 81       	ldd	r21, Y+4	; 0x04
    1784:	c3 01       	movw	r24, r6
    1786:	b2 01       	movw	r22, r4
    1788:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
    178c:	2b 01       	movw	r4, r22
    178e:	3c 01       	movw	r6, r24
    1790:	a5 01       	movw	r20, r10
    1792:	94 01       	movw	r18, r8
    1794:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
    1798:	a7 01       	movw	r20, r14
    179a:	96 01       	movw	r18, r12
    179c:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__subsf3>
    17a0:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__fixsfsi>
    17a4:	69 83       	std	Y+1, r22	; 0x01
    17a6:	7a 83       	std	Y+2, r23	; 0x02
    17a8:	8b 83       	std	Y+3, r24	; 0x03
    17aa:	9c 83       	std	Y+4, r25	; 0x04
    17ac:	e9 81       	ldd	r30, Y+1	; 0x01
    17ae:	fa 81       	ldd	r31, Y+2	; 0x02
    17b0:	f0 93 1f 02 	sts	0x021F, r31	; 0x80021f <esc_2+0x1>
    17b4:	e0 93 1e 02 	sts	0x021E, r30	; 0x80021e <esc_2>
		esc_3 = throttle + pid_output_pitch - pid_output_roll + pid_output_yaw; //Calculate the pulse for esc 3 (rear-left - CCW)
    17b8:	a5 01       	movw	r20, r10
    17ba:	94 01       	movw	r18, r8
    17bc:	c3 01       	movw	r24, r6
    17be:	b2 01       	movw	r22, r4
    17c0:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__subsf3>
    17c4:	a7 01       	movw	r20, r14
    17c6:	96 01       	movw	r18, r12
    17c8:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
    17cc:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__fixsfsi>
    17d0:	2b 01       	movw	r4, r22
    17d2:	3c 01       	movw	r6, r24
    17d4:	70 93 1d 02 	sts	0x021D, r23	; 0x80021d <esc_3+0x1>
    17d8:	60 93 1c 02 	sts	0x021C, r22	; 0x80021c <esc_3>
		esc_4 = throttle - pid_output_pitch - pid_output_roll - pid_output_yaw; //Calculate the pulse for esc 4 (front-left - CW)
    17dc:	a5 01       	movw	r20, r10
    17de:	94 01       	movw	r18, r8
    17e0:	6d 81       	ldd	r22, Y+5	; 0x05
    17e2:	7e 81       	ldd	r23, Y+6	; 0x06
    17e4:	8f 81       	ldd	r24, Y+7	; 0x07
    17e6:	98 85       	ldd	r25, Y+8	; 0x08
    17e8:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__subsf3>
    17ec:	a7 01       	movw	r20, r14
    17ee:	96 01       	movw	r18, r12
    17f0:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__subsf3>
    17f4:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__fixsfsi>
    17f8:	6d 83       	std	Y+5, r22	; 0x05
    17fa:	7e 83       	std	Y+6, r23	; 0x06
    17fc:	8f 83       	std	Y+7, r24	; 0x07
    17fe:	98 87       	std	Y+8, r25	; 0x08
    1800:	2d 81       	ldd	r18, Y+5	; 0x05
    1802:	3e 81       	ldd	r19, Y+6	; 0x06
    1804:	30 93 1b 02 	sts	0x021B, r19	; 0x80021b <esc_4+0x1>
    1808:	20 93 1a 02 	sts	0x021A, r18	; 0x80021a <esc_4>

		if (battery_voltage < 1240 && battery_voltage > 800){                   //Is the battery connected?
    180c:	e0 90 16 02 	lds	r14, 0x0216	; 0x800216 <battery_voltage>
    1810:	f0 90 17 02 	lds	r15, 0x0217	; 0x800217 <battery_voltage+0x1>
    1814:	c7 01       	movw	r24, r14
    1816:	81 52       	subi	r24, 0x21	; 33
    1818:	93 40       	sbci	r25, 0x03	; 3
    181a:	87 3b       	cpi	r24, 0xB7	; 183
    181c:	91 40       	sbci	r25, 0x01	; 1
    181e:	08 f0       	brcs	.+2      	; 0x1822 <loop+0x970>
    1820:	7a c0       	rjmp	.+244    	; 0x1916 <loop+0xa64>
			esc_1 += esc_1 * ((1240 - battery_voltage)/(float)3500);              //Compensate the esc-1 pulse for voltage drop.
    1822:	a9 85       	ldd	r26, Y+9	; 0x09
    1824:	ba 85       	ldd	r27, Y+10	; 0x0a
    1826:	bd 01       	movw	r22, r26
    1828:	bb 0f       	add	r27, r27
    182a:	88 0b       	sbc	r24, r24
    182c:	99 0b       	sbc	r25, r25
    182e:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
    1832:	4b 01       	movw	r8, r22
    1834:	5c 01       	movw	r10, r24
    1836:	68 ed       	ldi	r22, 0xD8	; 216
    1838:	74 e0       	ldi	r23, 0x04	; 4
    183a:	6e 19       	sub	r22, r14
    183c:	7f 09       	sbc	r23, r15
    183e:	07 2e       	mov	r0, r23
    1840:	00 0c       	add	r0, r0
    1842:	88 0b       	sbc	r24, r24
    1844:	99 0b       	sbc	r25, r25
    1846:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 ec       	ldi	r19, 0xC0	; 192
    184e:	4a e5       	ldi	r20, 0x5A	; 90
    1850:	55 e4       	ldi	r21, 0x45	; 69
    1852:	0e 94 89 11 	call	0x2312	; 0x2312 <__divsf3>
    1856:	6b 01       	movw	r12, r22
    1858:	7c 01       	movw	r14, r24
    185a:	9b 01       	movw	r18, r22
    185c:	ac 01       	movw	r20, r24
    185e:	c5 01       	movw	r24, r10
    1860:	b4 01       	movw	r22, r8
    1862:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
    1866:	9b 01       	movw	r18, r22
    1868:	ac 01       	movw	r20, r24
    186a:	c5 01       	movw	r24, r10
    186c:	b4 01       	movw	r22, r8
    186e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
    1872:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__fixsfsi>
    1876:	70 93 21 02 	sts	0x0221, r23	; 0x800221 <esc_1+0x1>
    187a:	60 93 20 02 	sts	0x0220, r22	; 0x800220 <esc_1>
			esc_2 += esc_2 * ((1240 - battery_voltage)/(float)3500);              //Compensate the esc-2 pulse for voltage drop.
    187e:	e9 81       	ldd	r30, Y+1	; 0x01
    1880:	fa 81       	ldd	r31, Y+2	; 0x02
    1882:	bf 01       	movw	r22, r30
    1884:	ff 0f       	add	r31, r31
    1886:	88 0b       	sbc	r24, r24
    1888:	99 0b       	sbc	r25, r25
    188a:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
    188e:	4b 01       	movw	r8, r22
    1890:	5c 01       	movw	r10, r24
    1892:	a7 01       	movw	r20, r14
    1894:	96 01       	movw	r18, r12
    1896:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
    189a:	9b 01       	movw	r18, r22
    189c:	ac 01       	movw	r20, r24
    189e:	c5 01       	movw	r24, r10
    18a0:	b4 01       	movw	r22, r8
    18a2:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
    18a6:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__fixsfsi>
    18aa:	70 93 1f 02 	sts	0x021F, r23	; 0x80021f <esc_2+0x1>
    18ae:	60 93 1e 02 	sts	0x021E, r22	; 0x80021e <esc_2>
			esc_3 += esc_3 * ((1240 - battery_voltage)/(float)3500);              //Compensate the esc-3 pulse for voltage drop.
    18b2:	b2 01       	movw	r22, r4
    18b4:	55 0c       	add	r5, r5
    18b6:	88 0b       	sbc	r24, r24
    18b8:	99 0b       	sbc	r25, r25
    18ba:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
    18be:	4b 01       	movw	r8, r22
    18c0:	5c 01       	movw	r10, r24
    18c2:	a7 01       	movw	r20, r14
    18c4:	96 01       	movw	r18, r12
    18c6:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
    18ca:	9b 01       	movw	r18, r22
    18cc:	ac 01       	movw	r20, r24
    18ce:	c5 01       	movw	r24, r10
    18d0:	b4 01       	movw	r22, r8
    18d2:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
    18d6:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__fixsfsi>
    18da:	70 93 1d 02 	sts	0x021D, r23	; 0x80021d <esc_3+0x1>
    18de:	60 93 1c 02 	sts	0x021C, r22	; 0x80021c <esc_3>
			esc_4 += esc_4 * ((1240 - battery_voltage)/(float)3500);              //Compensate the esc-4 pulse for voltage drop.
    18e2:	2d 81       	ldd	r18, Y+5	; 0x05
    18e4:	3e 81       	ldd	r19, Y+6	; 0x06
    18e6:	b9 01       	movw	r22, r18
    18e8:	33 0f       	add	r19, r19
    18ea:	88 0b       	sbc	r24, r24
    18ec:	99 0b       	sbc	r25, r25
    18ee:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
    18f2:	4b 01       	movw	r8, r22
    18f4:	5c 01       	movw	r10, r24
    18f6:	a7 01       	movw	r20, r14
    18f8:	96 01       	movw	r18, r12
    18fa:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
    18fe:	9b 01       	movw	r18, r22
    1900:	ac 01       	movw	r20, r24
    1902:	c5 01       	movw	r24, r10
    1904:	b4 01       	movw	r22, r8
    1906:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
    190a:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__fixsfsi>
    190e:	70 93 1b 02 	sts	0x021B, r23	; 0x80021b <esc_4+0x1>
    1912:	60 93 1a 02 	sts	0x021A, r22	; 0x80021a <esc_4>
		}
		#define minESC 1050
		if (esc_1 < minESC) esc_1 = minESC;                                         //Keep the motors running.
    1916:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <esc_1>
    191a:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <esc_1+0x1>
    191e:	8a 31       	cpi	r24, 0x1A	; 26
    1920:	94 40       	sbci	r25, 0x04	; 4
    1922:	34 f4       	brge	.+12     	; 0x1930 <loop+0xa7e>
    1924:	8a e1       	ldi	r24, 0x1A	; 26
    1926:	94 e0       	ldi	r25, 0x04	; 4
    1928:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <esc_1+0x1>
    192c:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <esc_1>
		if (esc_2 < minESC) esc_2 = minESC;                                         //Keep the motors running.
    1930:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <esc_2>
    1934:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <esc_2+0x1>
    1938:	8a 31       	cpi	r24, 0x1A	; 26
    193a:	94 40       	sbci	r25, 0x04	; 4
    193c:	34 f4       	brge	.+12     	; 0x194a <loop+0xa98>
    193e:	8a e1       	ldi	r24, 0x1A	; 26
    1940:	94 e0       	ldi	r25, 0x04	; 4
    1942:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <esc_2+0x1>
    1946:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <esc_2>
		if (esc_3 < minESC) esc_3 = minESC;                                         //Keep the motors running.
    194a:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <esc_3>
    194e:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <esc_3+0x1>
    1952:	8a 31       	cpi	r24, 0x1A	; 26
    1954:	94 40       	sbci	r25, 0x04	; 4
    1956:	34 f4       	brge	.+12     	; 0x1964 <loop+0xab2>
    1958:	8a e1       	ldi	r24, 0x1A	; 26
    195a:	94 e0       	ldi	r25, 0x04	; 4
    195c:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <esc_3+0x1>
    1960:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <esc_3>
		if (esc_4 < minESC) esc_4 = minESC;                                         //Keep the motors running.
    1964:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <esc_4>
    1968:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <esc_4+0x1>
    196c:	8a 31       	cpi	r24, 0x1A	; 26
    196e:	94 40       	sbci	r25, 0x04	; 4
    1970:	34 f4       	brge	.+12     	; 0x197e <loop+0xacc>
    1972:	8a e1       	ldi	r24, 0x1A	; 26
    1974:	94 e0       	ldi	r25, 0x04	; 4
    1976:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <esc_4+0x1>
    197a:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <esc_4>

		if(esc_1 > 2000)esc_1 = 2000;                                           //Limit the esc-1 pulse to 2000us.
    197e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <esc_1>
    1982:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <esc_1+0x1>
    1986:	81 3d       	cpi	r24, 0xD1	; 209
    1988:	97 40       	sbci	r25, 0x07	; 7
    198a:	34 f0       	brlt	.+12     	; 0x1998 <loop+0xae6>
    198c:	80 ed       	ldi	r24, 0xD0	; 208
    198e:	97 e0       	ldi	r25, 0x07	; 7
    1990:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <esc_1+0x1>
    1994:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <esc_1>
		if(esc_2 > 2000)esc_2 = 2000;                                           //Limit the esc-2 pulse to 2000us.
    1998:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <esc_2>
    199c:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <esc_2+0x1>
    19a0:	81 3d       	cpi	r24, 0xD1	; 209
    19a2:	97 40       	sbci	r25, 0x07	; 7
    19a4:	34 f0       	brlt	.+12     	; 0x19b2 <loop+0xb00>
    19a6:	80 ed       	ldi	r24, 0xD0	; 208
    19a8:	97 e0       	ldi	r25, 0x07	; 7
    19aa:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <esc_2+0x1>
    19ae:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <esc_2>
		if(esc_3 > 2000)esc_3 = 2000;                                           //Limit the esc-3 pulse to 2000us.
    19b2:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <esc_3>
    19b6:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <esc_3+0x1>
    19ba:	81 3d       	cpi	r24, 0xD1	; 209
    19bc:	97 40       	sbci	r25, 0x07	; 7
    19be:	34 f0       	brlt	.+12     	; 0x19cc <loop+0xb1a>
    19c0:	80 ed       	ldi	r24, 0xD0	; 208
    19c2:	97 e0       	ldi	r25, 0x07	; 7
    19c4:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <esc_3+0x1>
    19c8:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <esc_3>
		if(esc_4 > 2000)esc_4 = 2000;                                           //Limit the esc-4 pulse to 2000us.
    19cc:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <esc_4>
    19d0:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <esc_4+0x1>
    19d4:	81 3d       	cpi	r24, 0xD1	; 209
    19d6:	97 40       	sbci	r25, 0x07	; 7
    19d8:	ac f0       	brlt	.+42     	; 0x1a04 <loop+0xb52>
    19da:	80 ed       	ldi	r24, 0xD0	; 208
    19dc:	97 e0       	ldi	r25, 0x07	; 7
    19de:	0e c0       	rjmp	.+28     	; 0x19fc <loop+0xb4a>
	}

	else{
		esc_1 = 1000;                                                           //If start is not 2 keep a 1000us pulse for ess-1.
    19e0:	88 ee       	ldi	r24, 0xE8	; 232
    19e2:	93 e0       	ldi	r25, 0x03	; 3
    19e4:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <esc_1+0x1>
    19e8:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <esc_1>
		esc_2 = 1000;                                                           //If start is not 2 keep a 1000us pulse for ess-2.
    19ec:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <esc_2+0x1>
    19f0:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <esc_2>
		esc_3 = 1000;                                                           //If start is not 2 keep a 1000us pulse for ess-3.
    19f4:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <esc_3+0x1>
    19f8:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <esc_3>
		esc_4 = 1000;                                                           //If start is not 2 keep a 1000us pulse for ess-4.
    19fc:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <esc_4+0x1>
    1a00:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <esc_4>
	//longer or shorter than 4000us the angle calculation is off. If you modify the code make sure
	//that the loop time is still 4000us and no longer! More information can be found on
	//the Q&A page:
	//! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !
	
	if(micros() - loop_timer > 4050)digitalWrite(LED_STATUS_PIN, HIGH);                   //Turn on the LED if the loop time exceeds 4050us.
    1a04:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <micros>
    1a08:	c0 90 9a 01 	lds	r12, 0x019A	; 0x80019a <loop_timer>
    1a0c:	d0 90 9b 01 	lds	r13, 0x019B	; 0x80019b <loop_timer+0x1>
    1a10:	e0 90 9c 01 	lds	r14, 0x019C	; 0x80019c <loop_timer+0x2>
    1a14:	f0 90 9d 01 	lds	r15, 0x019D	; 0x80019d <loop_timer+0x3>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	8c 19       	sub	r24, r12
    1a1e:	9d 09       	sbc	r25, r13
    1a20:	ae 09       	sbc	r26, r14
    1a22:	bf 09       	sbc	r27, r15
    1a24:	83 3d       	cpi	r24, 0xD3	; 211
    1a26:	9f 40       	sbci	r25, 0x0F	; 15
    1a28:	a1 05       	cpc	r26, r1
    1a2a:	b1 05       	cpc	r27, r1
    1a2c:	20 f0       	brcs	.+8      	; 0x1a36 <loop+0xb84>
    1a2e:	61 e0       	ldi	r22, 0x01	; 1
    1a30:	8d e0       	ldi	r24, 0x0D	; 13
    1a32:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <digitalWrite>
	
	//All the information for controlling the motor's is available.
	//The refresh rate is 250Hz. That means the esc's need there pulse every 4ms.
	while(micros() - loop_timer < 4000);                                      //We wait until 4000us are passed.
    1a36:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <micros>
    1a3a:	c0 90 9a 01 	lds	r12, 0x019A	; 0x80019a <loop_timer>
    1a3e:	d0 90 9b 01 	lds	r13, 0x019B	; 0x80019b <loop_timer+0x1>
    1a42:	e0 90 9c 01 	lds	r14, 0x019C	; 0x80019c <loop_timer+0x2>
    1a46:	f0 90 9d 01 	lds	r15, 0x019D	; 0x80019d <loop_timer+0x3>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	8c 19       	sub	r24, r12
    1a50:	9d 09       	sbc	r25, r13
    1a52:	ae 09       	sbc	r26, r14
    1a54:	bf 09       	sbc	r27, r15
    1a56:	80 3a       	cpi	r24, 0xA0	; 160
    1a58:	9f 40       	sbci	r25, 0x0F	; 15
    1a5a:	a1 05       	cpc	r26, r1
    1a5c:	b1 05       	cpc	r27, r1
    1a5e:	58 f3       	brcs	.-42     	; 0x1a36 <loop+0xb84>
	loop_timer = micros();                                                    //Set the timer for the next loop.
    1a60:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <micros>
    1a64:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <loop_timer>
    1a68:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <loop_timer+0x1>
    1a6c:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <loop_timer+0x2>
    1a70:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <loop_timer+0x3>

	PORTD |= B11110000;                                                       //Set digital outputs 4,5,6 and 7 high.
    1a74:	8b b1       	in	r24, 0x0b	; 11
    1a76:	80 6f       	ori	r24, 0xF0	; 240
    1a78:	8b b9       	out	0x0b, r24	; 11
	timer_channel_1 = esc_1 + loop_timer;                                     //Calculate the time of the faling edge of the esc-1 pulse.
    1a7a:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <loop_timer>
    1a7e:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <loop_timer+0x1>
    1a82:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <loop_timer+0x2>
    1a86:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <loop_timer+0x3>
    1a8a:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <esc_1>
    1a8e:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <esc_1+0x1>
    1a92:	05 2e       	mov	r0, r21
    1a94:	00 0c       	add	r0, r0
    1a96:	66 0b       	sbc	r22, r22
    1a98:	77 0b       	sbc	r23, r23
    1a9a:	48 0f       	add	r20, r24
    1a9c:	59 1f       	adc	r21, r25
    1a9e:	6a 1f       	adc	r22, r26
    1aa0:	7b 1f       	adc	r23, r27
    1aa2:	40 93 d2 01 	sts	0x01D2, r20	; 0x8001d2 <timer_channel_1>
    1aa6:	50 93 d3 01 	sts	0x01D3, r21	; 0x8001d3 <timer_channel_1+0x1>
    1aaa:	60 93 d4 01 	sts	0x01D4, r22	; 0x8001d4 <timer_channel_1+0x2>
    1aae:	70 93 d5 01 	sts	0x01D5, r23	; 0x8001d5 <timer_channel_1+0x3>
	timer_channel_2 = esc_2 + loop_timer;                                     //Calculate the time of the faling edge of the esc-2 pulse.
    1ab2:	40 91 1e 02 	lds	r20, 0x021E	; 0x80021e <esc_2>
    1ab6:	50 91 1f 02 	lds	r21, 0x021F	; 0x80021f <esc_2+0x1>
    1aba:	05 2e       	mov	r0, r21
    1abc:	00 0c       	add	r0, r0
    1abe:	66 0b       	sbc	r22, r22
    1ac0:	77 0b       	sbc	r23, r23
    1ac2:	48 0f       	add	r20, r24
    1ac4:	59 1f       	adc	r21, r25
    1ac6:	6a 1f       	adc	r22, r26
    1ac8:	7b 1f       	adc	r23, r27
    1aca:	40 93 ce 01 	sts	0x01CE, r20	; 0x8001ce <timer_channel_2>
    1ace:	50 93 cf 01 	sts	0x01CF, r21	; 0x8001cf <timer_channel_2+0x1>
    1ad2:	60 93 d0 01 	sts	0x01D0, r22	; 0x8001d0 <timer_channel_2+0x2>
    1ad6:	70 93 d1 01 	sts	0x01D1, r23	; 0x8001d1 <timer_channel_2+0x3>
	timer_channel_3 = esc_3 + loop_timer;                                     //Calculate the time of the faling edge of the esc-3 pulse.
    1ada:	40 91 1c 02 	lds	r20, 0x021C	; 0x80021c <esc_3>
    1ade:	50 91 1d 02 	lds	r21, 0x021D	; 0x80021d <esc_3+0x1>
    1ae2:	05 2e       	mov	r0, r21
    1ae4:	00 0c       	add	r0, r0
    1ae6:	66 0b       	sbc	r22, r22
    1ae8:	77 0b       	sbc	r23, r23
    1aea:	48 0f       	add	r20, r24
    1aec:	59 1f       	adc	r21, r25
    1aee:	6a 1f       	adc	r22, r26
    1af0:	7b 1f       	adc	r23, r27
    1af2:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <timer_channel_3>
    1af6:	50 93 cb 01 	sts	0x01CB, r21	; 0x8001cb <timer_channel_3+0x1>
    1afa:	60 93 cc 01 	sts	0x01CC, r22	; 0x8001cc <timer_channel_3+0x2>
    1afe:	70 93 cd 01 	sts	0x01CD, r23	; 0x8001cd <timer_channel_3+0x3>
	timer_channel_4 = esc_4 + loop_timer;                                     //Calculate the time of the faling edge of the esc-4 pulse.
    1b02:	40 91 1a 02 	lds	r20, 0x021A	; 0x80021a <esc_4>
    1b06:	50 91 1b 02 	lds	r21, 0x021B	; 0x80021b <esc_4+0x1>
    1b0a:	05 2e       	mov	r0, r21
    1b0c:	00 0c       	add	r0, r0
    1b0e:	66 0b       	sbc	r22, r22
    1b10:	77 0b       	sbc	r23, r23
    1b12:	84 0f       	add	r24, r20
    1b14:	95 1f       	adc	r25, r21
    1b16:	a6 1f       	adc	r26, r22
    1b18:	b7 1f       	adc	r27, r23
    1b1a:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <timer_channel_4>
    1b1e:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <timer_channel_4+0x1>
    1b22:	a0 93 c8 01 	sts	0x01C8, r26	; 0x8001c8 <timer_channel_4+0x2>
    1b26:	b0 93 c9 01 	sts	0x01C9, r27	; 0x8001c9 <timer_channel_4+0x3>
	
	//There is always 1000us of spare time. So let's do something usefull that is very time consuming.
	//Get the current gyro and receiver data and scale it to degrees per second for the pid calculations.
	gyro_signalen();
    1b2a:	0e 94 5d 05 	call	0xaba	; 0xaba <_Z13gyro_signalenv>
	//Serial.print(pid_p_gain_roll);
	//Serial.print(" ");
	//Serial.print(pid_i_gain_roll);
	//Serial.print(" ");
	//Serial.println(pid_d_gain_roll);
	while(PORTD >= 16){                                                       //Stay in this loop until output 4,5,6 and 7 are low.
    1b2e:	8b b1       	in	r24, 0x0b	; 11
    1b30:	80 31       	cpi	r24, 0x10	; 16
    1b32:	08 f4       	brcc	.+2      	; 0x1b36 <loop+0xc84>
    1b34:	b8 c0       	rjmp	.+368    	; 0x1ca6 <loop+0xdf4>
		esc_loop_timer = micros();                                              //Read the current time.
    1b36:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <micros>
    1b3a:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <esc_loop_timer>
    1b3e:	70 93 c3 01 	sts	0x01C3, r23	; 0x8001c3 <esc_loop_timer+0x1>
    1b42:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <esc_loop_timer+0x2>
    1b46:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <esc_loop_timer+0x3>
		if(timer_channel_1 <= esc_loop_timer)PORTD &= B11101111;                //Set digital output 4 to low if the time is expired.
    1b4a:	c0 90 d2 01 	lds	r12, 0x01D2	; 0x8001d2 <timer_channel_1>
    1b4e:	d0 90 d3 01 	lds	r13, 0x01D3	; 0x8001d3 <timer_channel_1+0x1>
    1b52:	e0 90 d4 01 	lds	r14, 0x01D4	; 0x8001d4 <timer_channel_1+0x2>
    1b56:	f0 90 d5 01 	lds	r15, 0x01D5	; 0x8001d5 <timer_channel_1+0x3>
    1b5a:	6c 15       	cp	r22, r12
    1b5c:	7d 05       	cpc	r23, r13
    1b5e:	8e 05       	cpc	r24, r14
    1b60:	9f 05       	cpc	r25, r15
    1b62:	08 f0       	brcs	.+2      	; 0x1b66 <loop+0xcb4>
    1b64:	5c 98       	cbi	0x0b, 4	; 11
		if(timer_channel_2 <= esc_loop_timer)PORTD &= B11011111;                //Set digital output 5 to low if the time is expired.
    1b66:	40 91 ce 01 	lds	r20, 0x01CE	; 0x8001ce <timer_channel_2>
    1b6a:	50 91 cf 01 	lds	r21, 0x01CF	; 0x8001cf <timer_channel_2+0x1>
    1b6e:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <timer_channel_2+0x2>
    1b72:	70 91 d1 01 	lds	r23, 0x01D1	; 0x8001d1 <timer_channel_2+0x3>
    1b76:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <esc_loop_timer>
    1b7a:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <esc_loop_timer+0x1>
    1b7e:	a0 91 c4 01 	lds	r26, 0x01C4	; 0x8001c4 <esc_loop_timer+0x2>
    1b82:	b0 91 c5 01 	lds	r27, 0x01C5	; 0x8001c5 <esc_loop_timer+0x3>
    1b86:	84 17       	cp	r24, r20
    1b88:	95 07       	cpc	r25, r21
    1b8a:	a6 07       	cpc	r26, r22
    1b8c:	b7 07       	cpc	r27, r23
    1b8e:	08 f0       	brcs	.+2      	; 0x1b92 <loop+0xce0>
    1b90:	5d 98       	cbi	0x0b, 5	; 11
		if(timer_channel_3 <= esc_loop_timer)PORTD &= B10111111;                //Set digital output 6 to low if the time is expired.
    1b92:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <timer_channel_3>
    1b96:	50 91 cb 01 	lds	r21, 0x01CB	; 0x8001cb <timer_channel_3+0x1>
    1b9a:	60 91 cc 01 	lds	r22, 0x01CC	; 0x8001cc <timer_channel_3+0x2>
    1b9e:	70 91 cd 01 	lds	r23, 0x01CD	; 0x8001cd <timer_channel_3+0x3>
    1ba2:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <esc_loop_timer>
    1ba6:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <esc_loop_timer+0x1>
    1baa:	a0 91 c4 01 	lds	r26, 0x01C4	; 0x8001c4 <esc_loop_timer+0x2>
    1bae:	b0 91 c5 01 	lds	r27, 0x01C5	; 0x8001c5 <esc_loop_timer+0x3>
    1bb2:	84 17       	cp	r24, r20
    1bb4:	95 07       	cpc	r25, r21
    1bb6:	a6 07       	cpc	r26, r22
    1bb8:	b7 07       	cpc	r27, r23
    1bba:	08 f0       	brcs	.+2      	; 0x1bbe <loop+0xd0c>
    1bbc:	5e 98       	cbi	0x0b, 6	; 11
		if(timer_channel_4 <= esc_loop_timer)PORTD &= B01111111;                //Set digital output 7 to low if the time is expired.
    1bbe:	40 91 c6 01 	lds	r20, 0x01C6	; 0x8001c6 <timer_channel_4>
    1bc2:	50 91 c7 01 	lds	r21, 0x01C7	; 0x8001c7 <timer_channel_4+0x1>
    1bc6:	60 91 c8 01 	lds	r22, 0x01C8	; 0x8001c8 <timer_channel_4+0x2>
    1bca:	70 91 c9 01 	lds	r23, 0x01C9	; 0x8001c9 <timer_channel_4+0x3>
    1bce:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <esc_loop_timer>
    1bd2:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <esc_loop_timer+0x1>
    1bd6:	a0 91 c4 01 	lds	r26, 0x01C4	; 0x8001c4 <esc_loop_timer+0x2>
    1bda:	b0 91 c5 01 	lds	r27, 0x01C5	; 0x8001c5 <esc_loop_timer+0x3>
    1bde:	84 17       	cp	r24, r20
    1be0:	95 07       	cpc	r25, r21
    1be2:	a6 07       	cpc	r26, r22
    1be4:	b7 07       	cpc	r27, r23
    1be6:	08 f4       	brcc	.+2      	; 0x1bea <loop+0xd38>
    1be8:	a2 cf       	rjmp	.-188    	; 0x1b2e <loop+0xc7c>
    1bea:	5f 98       	cbi	0x0b, 7	; 11
    1bec:	a0 cf       	rjmp	.-192    	; 0x1b2e <loop+0xc7c>
		pitch_level_adjust = 0;                                                 //Set the pitch angle correction to zero.
		roll_level_adjust = 0;                                                  //Set the roll angle correcion to zero.
	}

	//For starting the motors: throttle low and yaw left (step 1).
	if(receiver_input_channel_3 < 1050 && receiver_input_channel_4 < 1050)start = 1;
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <start+0x1>
    1bf6:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <start>
    1bfa:	cc cb       	rjmp	.-2152   	; 0x1394 <loop+0x4e2>
	//When yaw stick is back in the center position start the motors (step 2).
	if(start == 1 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1450){
		start = 2;
    1bfc:	82 e0       	ldi	r24, 0x02	; 2
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <start+0x1>
    1c04:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <start>
		threshold_started = false;
    1c08:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>

		angle_pitch = angle_pitch_acc;                                          //Set the gyro pitch angle equal to the accelerometer pitch angle when the quadcopter is started.
    1c0c:	c0 92 32 01 	sts	0x0132, r12	; 0x800132 <angle_pitch>
    1c10:	d0 92 33 01 	sts	0x0133, r13	; 0x800133 <angle_pitch+0x1>
    1c14:	e0 92 34 01 	sts	0x0134, r14	; 0x800134 <angle_pitch+0x2>
    1c18:	f0 92 35 01 	sts	0x0135, r15	; 0x800135 <angle_pitch+0x3>
		angle_roll = angle_roll_acc;                                            //Set the gyro roll angle equal to the accelerometer roll angle when the quadcopter is started.
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c20:	ab 81       	ldd	r26, Y+3	; 0x03
    1c22:	bc 81       	ldd	r27, Y+4	; 0x04
    1c24:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <angle_roll>
    1c28:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <angle_roll+0x1>
    1c2c:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <angle_roll+0x2>
    1c30:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <angle_roll+0x3>
		gyro_angles_set = true;                                                 //Set the IMU started flag.
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <gyro_angles_set>

		//Reset the PID controllers for a bumpless start.
		pid_i_mem_roll = 0;
    1c3a:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <pid_i_mem_roll>
    1c3e:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <pid_i_mem_roll+0x1>
    1c42:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <pid_i_mem_roll+0x2>
    1c46:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <pid_i_mem_roll+0x3>
		pid_last_roll_d_error = 0;
    1c4a:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <pid_last_roll_d_error>
    1c4e:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <pid_last_roll_d_error+0x1>
    1c52:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <pid_last_roll_d_error+0x2>
    1c56:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <pid_last_roll_d_error+0x3>
		pid_i_mem_pitch = 0;
    1c5a:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <pid_i_mem_pitch>
    1c5e:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <pid_i_mem_pitch+0x1>
    1c62:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <pid_i_mem_pitch+0x2>
    1c66:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <pid_i_mem_pitch+0x3>
		pid_last_pitch_d_error = 0;
    1c6a:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <pid_last_pitch_d_error>
    1c6e:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <pid_last_pitch_d_error+0x1>
    1c72:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <pid_last_pitch_d_error+0x2>
    1c76:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <pid_last_pitch_d_error+0x3>
		pid_i_mem_yaw = 0;
    1c7a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <pid_i_mem_yaw>
    1c7e:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <pid_i_mem_yaw+0x1>
    1c82:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <pid_i_mem_yaw+0x2>
    1c86:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <pid_i_mem_yaw+0x3>
		pid_last_yaw_d_error = 0;
    1c8a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <pid_last_yaw_d_error>
    1c8e:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <pid_last_yaw_d_error+0x1>
    1c92:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <pid_last_yaw_d_error+0x2>
    1c96:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <pid_last_yaw_d_error+0x3>
    1c9a:	91 cb       	rjmp	.-2270   	; 0x13be <loop+0x50c>
	}
	//Stopping the motors: throttle low and yaw right.
	if(start == 2 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1950)
	{
		start = 0;
    1c9c:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <start+0x1>
    1ca0:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <start>
    1ca4:	a1 cb       	rjmp	.-2238   	; 0x13e8 <loop+0x536>
		if(timer_channel_1 <= esc_loop_timer)PORTD &= B11101111;                //Set digital output 4 to low if the time is expired.
		if(timer_channel_2 <= esc_loop_timer)PORTD &= B11011111;                //Set digital output 5 to low if the time is expired.
		if(timer_channel_3 <= esc_loop_timer)PORTD &= B10111111;                //Set digital output 6 to low if the time is expired.
		if(timer_channel_4 <= esc_loop_timer)PORTD &= B01111111;                //Set digital output 7 to low if the time is expired.
	}
}
    1ca6:	2c 96       	adiw	r28, 0x0c	; 12
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	f8 94       	cli
    1cac:	de bf       	out	0x3e, r29	; 62
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	cd bf       	out	0x3d, r28	; 61
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	ff 90       	pop	r15
    1cb8:	ef 90       	pop	r14
    1cba:	df 90       	pop	r13
    1cbc:	cf 90       	pop	r12
    1cbe:	bf 90       	pop	r11
    1cc0:	af 90       	pop	r10
    1cc2:	9f 90       	pop	r9
    1cc4:	8f 90       	pop	r8
    1cc6:	7f 90       	pop	r7
    1cc8:	6f 90       	pop	r6
    1cca:	5f 90       	pop	r5
    1ccc:	4f 90       	pop	r4
    1cce:	08 95       	ret

00001cd0 <_Z18set_gyro_registersv>:
	else return 1500;
}

void set_gyro_registers(){
	//Setup the MPU-6050
	if(eeprom_data[31] == 1){
    1cd0:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <eeprom_data+0x1f>
    1cd4:	81 30       	cpi	r24, 0x01	; 1
    1cd6:	09 f0       	breq	.+2      	; 0x1cda <_Z18set_gyro_registersv+0xa>
    1cd8:	94 c0       	rjmp	.+296    	; 0x1e02 <_Z18set_gyro_registersv+0x132>
		Wire.beginTransmission(gyro_address);                                      //Start communication with the address found during search.
    1cda:	60 91 10 02 	lds	r22, 0x0210	; 0x800210 <gyro_address>
    1cde:	70 91 11 02 	lds	r23, 0x0211	; 0x800211 <gyro_address+0x1>
    1ce2:	87 e6       	ldi	r24, 0x67	; 103
    1ce4:	92 e0       	ldi	r25, 0x02	; 2
    1ce6:	0e 94 11 15 	call	0x2a22	; 0x2a22 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x6B);                                                          //We want to write to the PWR_MGMT_1 register (6B hex)
    1cea:	6b e6       	ldi	r22, 0x6B	; 107
    1cec:	70 e0       	ldi	r23, 0x00	; 0
    1cee:	87 e6       	ldi	r24, 0x67	; 103
    1cf0:	92 e0       	ldi	r25, 0x02	; 2
    1cf2:	0e 94 1e 01 	call	0x23c	; 0x23c <_ZN7TwoWire5writeEi>
		Wire.write(0x00);                                                          //Set the register bits as 00000000 to activate the gyro
    1cf6:	60 e0       	ldi	r22, 0x00	; 0
    1cf8:	70 e0       	ldi	r23, 0x00	; 0
    1cfa:	87 e6       	ldi	r24, 0x67	; 103
    1cfc:	92 e0       	ldi	r25, 0x02	; 2
    1cfe:	0e 94 1e 01 	call	0x23c	; 0x23c <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                                    //End the transmission with the gyro.
    1d02:	87 e6       	ldi	r24, 0x67	; 103
    1d04:	92 e0       	ldi	r25, 0x02	; 2
    1d06:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN7TwoWire15endTransmissionEv>

		Wire.beginTransmission(gyro_address);                                      //Start communication with the address found during search.
    1d0a:	60 91 10 02 	lds	r22, 0x0210	; 0x800210 <gyro_address>
    1d0e:	70 91 11 02 	lds	r23, 0x0211	; 0x800211 <gyro_address+0x1>
    1d12:	87 e6       	ldi	r24, 0x67	; 103
    1d14:	92 e0       	ldi	r25, 0x02	; 2
    1d16:	0e 94 11 15 	call	0x2a22	; 0x2a22 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x1B);                                                          //We want to write to the GYRO_CONFIG register (1B hex)
    1d1a:	6b e1       	ldi	r22, 0x1B	; 27
    1d1c:	70 e0       	ldi	r23, 0x00	; 0
    1d1e:	87 e6       	ldi	r24, 0x67	; 103
    1d20:	92 e0       	ldi	r25, 0x02	; 2
    1d22:	0e 94 1e 01 	call	0x23c	; 0x23c <_ZN7TwoWire5writeEi>
		Wire.write(0x08);                                                          //Set the register bits as 00001000 (500dps full scale)
    1d26:	68 e0       	ldi	r22, 0x08	; 8
    1d28:	70 e0       	ldi	r23, 0x00	; 0
    1d2a:	87 e6       	ldi	r24, 0x67	; 103
    1d2c:	92 e0       	ldi	r25, 0x02	; 2
    1d2e:	0e 94 1e 01 	call	0x23c	; 0x23c <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                                    //End the transmission with the gyro
    1d32:	87 e6       	ldi	r24, 0x67	; 103
    1d34:	92 e0       	ldi	r25, 0x02	; 2
    1d36:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN7TwoWire15endTransmissionEv>

		Wire.beginTransmission(gyro_address);                                      //Start communication with the address found during search.
    1d3a:	60 91 10 02 	lds	r22, 0x0210	; 0x800210 <gyro_address>
    1d3e:	70 91 11 02 	lds	r23, 0x0211	; 0x800211 <gyro_address+0x1>
    1d42:	87 e6       	ldi	r24, 0x67	; 103
    1d44:	92 e0       	ldi	r25, 0x02	; 2
    1d46:	0e 94 11 15 	call	0x2a22	; 0x2a22 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x1C);                                                          //We want to write to the ACCEL_CONFIG register (1A hex)
    1d4a:	6c e1       	ldi	r22, 0x1C	; 28
    1d4c:	70 e0       	ldi	r23, 0x00	; 0
    1d4e:	87 e6       	ldi	r24, 0x67	; 103
    1d50:	92 e0       	ldi	r25, 0x02	; 2
    1d52:	0e 94 1e 01 	call	0x23c	; 0x23c <_ZN7TwoWire5writeEi>
		Wire.write(0x10);                                                          //Set the register bits as 00010000 (+/- 8g full scale range)
    1d56:	60 e1       	ldi	r22, 0x10	; 16
    1d58:	70 e0       	ldi	r23, 0x00	; 0
    1d5a:	87 e6       	ldi	r24, 0x67	; 103
    1d5c:	92 e0       	ldi	r25, 0x02	; 2
    1d5e:	0e 94 1e 01 	call	0x23c	; 0x23c <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                                    //End the transmission with the gyro
    1d62:	87 e6       	ldi	r24, 0x67	; 103
    1d64:	92 e0       	ldi	r25, 0x02	; 2
    1d66:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN7TwoWire15endTransmissionEv>

		//Let's perform a random register check to see if the values are written correct
		Wire.beginTransmission(gyro_address);                                      //Start communication with the address found during search
    1d6a:	60 91 10 02 	lds	r22, 0x0210	; 0x800210 <gyro_address>
    1d6e:	70 91 11 02 	lds	r23, 0x0211	; 0x800211 <gyro_address+0x1>
    1d72:	87 e6       	ldi	r24, 0x67	; 103
    1d74:	92 e0       	ldi	r25, 0x02	; 2
    1d76:	0e 94 11 15 	call	0x2a22	; 0x2a22 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x1B);                                                          //Start reading @ register 0x1B
    1d7a:	6b e1       	ldi	r22, 0x1B	; 27
    1d7c:	70 e0       	ldi	r23, 0x00	; 0
    1d7e:	87 e6       	ldi	r24, 0x67	; 103
    1d80:	92 e0       	ldi	r25, 0x02	; 2
    1d82:	0e 94 1e 01 	call	0x23c	; 0x23c <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                                    //End the transmission
    1d86:	87 e6       	ldi	r24, 0x67	; 103
    1d88:	92 e0       	ldi	r25, 0x02	; 2
    1d8a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN7TwoWire15endTransmissionEv>
		Wire.requestFrom(gyro_address, 1);                                         //Request 1 bytes from the gyro
    1d8e:	60 91 10 02 	lds	r22, 0x0210	; 0x800210 <gyro_address>
    1d92:	70 91 11 02 	lds	r23, 0x0211	; 0x800211 <gyro_address+0x1>
    1d96:	41 e0       	ldi	r20, 0x01	; 1
    1d98:	50 e0       	ldi	r21, 0x00	; 0
    1d9a:	87 e6       	ldi	r24, 0x67	; 103
    1d9c:	92 e0       	ldi	r25, 0x02	; 2
    1d9e:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <_ZN7TwoWire11requestFromEii>
		while(Wire.available() < 1);                                               //Wait until the 6 bytes are received
    1da2:	87 e6       	ldi	r24, 0x67	; 103
    1da4:	92 e0       	ldi	r25, 0x02	; 2
    1da6:	0e 94 62 14 	call	0x28c4	; 0x28c4 <_ZN7TwoWire9availableEv>
    1daa:	18 16       	cp	r1, r24
    1dac:	19 06       	cpc	r1, r25
    1dae:	cc f7       	brge	.-14     	; 0x1da2 <_Z18set_gyro_registersv+0xd2>
		if(Wire.read() != 0x08){                                                   //Check if the value is 0x08
    1db0:	87 e6       	ldi	r24, 0x67	; 103
    1db2:	92 e0       	ldi	r25, 0x02	; 2
    1db4:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_ZN7TwoWire4readEv>
    1db8:	08 97       	sbiw	r24, 0x08	; 8
    1dba:	59 f0       	breq	.+22     	; 0x1dd2 <_Z18set_gyro_registersv+0x102>
			digitalWrite(LED_STATUS_PIN,HIGH);                                                   //Turn on the warning led
    1dbc:	61 e0       	ldi	r22, 0x01	; 1
    1dbe:	8d e0       	ldi	r24, 0x0D	; 13
    1dc0:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <digitalWrite>
			while(1)delay(10);                                                       //Stay in this loop for ever
    1dc4:	6a e0       	ldi	r22, 0x0A	; 10
    1dc6:	70 e0       	ldi	r23, 0x00	; 0
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	0e 94 03 16 	call	0x2c06	; 0x2c06 <delay>
    1dd0:	f9 cf       	rjmp	.-14     	; 0x1dc4 <_Z18set_gyro_registersv+0xf4>
		}

		Wire.beginTransmission(gyro_address);                                      //Start communication with the address found during search
    1dd2:	60 91 10 02 	lds	r22, 0x0210	; 0x800210 <gyro_address>
    1dd6:	70 91 11 02 	lds	r23, 0x0211	; 0x800211 <gyro_address+0x1>
    1dda:	87 e6       	ldi	r24, 0x67	; 103
    1ddc:	92 e0       	ldi	r25, 0x02	; 2
    1dde:	0e 94 11 15 	call	0x2a22	; 0x2a22 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x1A);                                                          //We want to write to the CONFIG register (1A hex)
    1de2:	6a e1       	ldi	r22, 0x1A	; 26
    1de4:	70 e0       	ldi	r23, 0x00	; 0
    1de6:	87 e6       	ldi	r24, 0x67	; 103
    1de8:	92 e0       	ldi	r25, 0x02	; 2
    1dea:	0e 94 1e 01 	call	0x23c	; 0x23c <_ZN7TwoWire5writeEi>
		Wire.write(0x03);                                                          //Set the register bits as 00000011 (Set Digital Low Pass Filter to ~43Hz)
    1dee:	63 e0       	ldi	r22, 0x03	; 3
    1df0:	70 e0       	ldi	r23, 0x00	; 0
    1df2:	87 e6       	ldi	r24, 0x67	; 103
    1df4:	92 e0       	ldi	r25, 0x02	; 2
    1df6:	0e 94 1e 01 	call	0x23c	; 0x23c <_ZN7TwoWire5writeEi>
		Wire.endTransmission();                                                    //End the transmission with the gyro
    1dfa:	87 e6       	ldi	r24, 0x67	; 103
    1dfc:	92 e0       	ldi	r25, 0x02	; 2
    1dfe:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <_ZN7TwoWire15endTransmissionEv>
    1e02:	08 95       	ret

00001e04 <setup>:

#define LED_STATUS_PIN 13
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Setup routine
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup(){
    1e04:	cf 93       	push	r28
    1e06:	df 93       	push	r29
	//Serial.begin(57600);
	//Copy the EEPROM data for fast access data.
	for(start = 0; start <= 35; start++)eeprom_data[start] = EEPROM.read(start);
    1e08:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <start+0x1>
    1e0c:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <start>
    1e10:	c0 91 12 02 	lds	r28, 0x0212	; 0x800212 <start>
    1e14:	d0 91 13 02 	lds	r29, 0x0213	; 0x800213 <start+0x1>
    1e18:	c4 32       	cpi	r28, 0x24	; 36
    1e1a:	d1 05       	cpc	r29, r1
    1e1c:	6c f4       	brge	.+26     	; 0x1e38 <setup+0x34>

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    1e1e:	ce 01       	movw	r24, r28
    1e20:	0e 94 e6 19 	call	0x33cc	; 0x33cc <eeprom_read_byte>
    1e24:	fe 01       	movw	r30, r28
    1e26:	e6 5d       	subi	r30, 0xD6	; 214
    1e28:	fd 4f       	sbci	r31, 0xFD	; 253
    1e2a:	80 83       	st	Z, r24
    1e2c:	21 96       	adiw	r28, 0x01	; 1
    1e2e:	d0 93 13 02 	sts	0x0213, r29	; 0x800213 <start+0x1>
    1e32:	c0 93 12 02 	sts	0x0212, r28	; 0x800212 <start>
    1e36:	ec cf       	rjmp	.-40     	; 0x1e10 <setup+0xc>
	start = 0;                                                                //Set start back to zero.
    1e38:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <start+0x1>
    1e3c:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <start>
	gyro_address = eeprom_data[32];                                           //Store the gyro address in the variable.
    1e40:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <eeprom_data+0x20>
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <gyro_address+0x1>
    1e4a:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <gyro_address>

	Wire.begin();                                                             //Start the I2C as master.
    1e4e:	87 e6       	ldi	r24, 0x67	; 103
    1e50:	92 e0       	ldi	r25, 0x02	; 2
    1e52:	0e 94 fd 14 	call	0x29fa	; 0x29fa <_ZN7TwoWire5beginEv>

	TWBR = 12;                                                                //Set the I2C clock speed to 400kHz.
    1e56:	8c e0       	ldi	r24, 0x0C	; 12
    1e58:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	//Arduino (Atmega) pins default to inputs, so they don't need to be explicitly declared as inputs.
	DDRD |= B11110000;                                                        //Configure digital poort 4, 5, 6 and 7 as output.
    1e5c:	8a b1       	in	r24, 0x0a	; 10
    1e5e:	80 6f       	ori	r24, 0xF0	; 240
    1e60:	8a b9       	out	0x0a, r24	; 10
	DDRB |= B00100000;                                                        //Configure digital poort  13 as output.
    1e62:	25 9a       	sbi	0x04, 5	; 4
	DDRB &= B11101111;                                                        //Configure digital poort  13 as output.
    1e64:	24 98       	cbi	0x04, 4	; 4
	
	//Use the led on the Arduino for startup indication.
	digitalWrite(LED_STATUS_PIN ,HIGH);                                                    //Turn on the warning led.
    1e66:	61 e0       	ldi	r22, 0x01	; 1
    1e68:	8d e0       	ldi	r24, 0x0D	; 13
    1e6a:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <digitalWrite>

	//Check the EEPROM signature to make sure that the setup program is executed.
	while(eeprom_data[33] != 'J' || eeprom_data[34] != 'M' || eeprom_data[35] != 'B')delay(10);
    1e6e:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <eeprom_data+0x21>
    1e72:	8a 34       	cpi	r24, 0x4A	; 74
    1e74:	39 f0       	breq	.+14     	; 0x1e84 <setup+0x80>
    1e76:	6a e0       	ldi	r22, 0x0A	; 10
    1e78:	70 e0       	ldi	r23, 0x00	; 0
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	0e 94 03 16 	call	0x2c06	; 0x2c06 <delay>
    1e82:	f5 cf       	rjmp	.-22     	; 0x1e6e <setup+0x6a>
    1e84:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <eeprom_data+0x22>
    1e88:	8d 34       	cpi	r24, 0x4D	; 77
    1e8a:	a9 f7       	brne	.-22     	; 0x1e76 <setup+0x72>
    1e8c:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <eeprom_data+0x23>
    1e90:	82 34       	cpi	r24, 0x42	; 66
    1e92:	89 f7       	brne	.-30     	; 0x1e76 <setup+0x72>

	//The flight controller needs the MPU-6050 with gyro and accelerometer
	//If setup is completed without MPU-6050 stop the flight controller program
	if(eeprom_data[31] == 2 || eeprom_data[31] == 3)delay(10);
    1e94:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <eeprom_data+0x1f>
    1e98:	82 50       	subi	r24, 0x02	; 2
    1e9a:	82 30       	cpi	r24, 0x02	; 2
    1e9c:	30 f4       	brcc	.+12     	; 0x1eaa <setup+0xa6>
    1e9e:	6a e0       	ldi	r22, 0x0A	; 10
    1ea0:	70 e0       	ldi	r23, 0x00	; 0
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	0e 94 03 16 	call	0x2c06	; 0x2c06 <delay>

	set_gyro_registers();                                                     //Set the specific gyro registers.
    1eaa:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <_Z18set_gyro_registersv>

	for (cal_int = 0; cal_int < 1250 ; cal_int ++){                           //Wait 5 seconds before continuing.
    1eae:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <cal_int+0x1>
    1eb2:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <cal_int>
    1eb6:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <cal_int>
    1eba:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <cal_int+0x1>
    1ebe:	82 3e       	cpi	r24, 0xE2	; 226
    1ec0:	94 40       	sbci	r25, 0x04	; 4
    1ec2:	c4 f4       	brge	.+48     	; 0x1ef4 <setup+0xf0>
		PORTD |= B11110000;                                                     //Set digital poort 4, 5, 6 and 7 high.
    1ec4:	8b b1       	in	r24, 0x0b	; 11
    1ec6:	80 6f       	ori	r24, 0xF0	; 240
    1ec8:	8b b9       	out	0x0b, r24	; 11
		delayMicroseconds(1000);                                                //Wait 1000us.
    1eca:	88 ee       	ldi	r24, 0xE8	; 232
    1ecc:	93 e0       	ldi	r25, 0x03	; 3
    1ece:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <delayMicroseconds>
		PORTD &= B00001111;                                                     //Set digital poort 4, 5, 6 and 7 low.
    1ed2:	8b b1       	in	r24, 0x0b	; 11
    1ed4:	8f 70       	andi	r24, 0x0F	; 15
    1ed6:	8b b9       	out	0x0b, r24	; 11
		delayMicroseconds(3000);                                                //Wait 3000us.
    1ed8:	88 eb       	ldi	r24, 0xB8	; 184
    1eda:	9b e0       	ldi	r25, 0x0B	; 11
    1edc:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <delayMicroseconds>
	//If setup is completed without MPU-6050 stop the flight controller program
	if(eeprom_data[31] == 2 || eeprom_data[31] == 3)delay(10);

	set_gyro_registers();                                                     //Set the specific gyro registers.

	for (cal_int = 0; cal_int < 1250 ; cal_int ++){                           //Wait 5 seconds before continuing.
    1ee0:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <cal_int>
    1ee4:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <cal_int+0x1>
    1ee8:	01 96       	adiw	r24, 0x01	; 1
    1eea:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <cal_int+0x1>
    1eee:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <cal_int>
    1ef2:	e1 cf       	rjmp	.-62     	; 0x1eb6 <setup+0xb2>
		PORTD &= B00001111;                                                     //Set digital poort 4, 5, 6 and 7 low.
		delayMicroseconds(3000);                                                //Wait 3000us.
	}

	//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
	for (cal_int = 0; cal_int < 2000 ; cal_int ++){                           //Take 2000 readings for calibration.
    1ef4:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <cal_int+0x1>
    1ef8:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <cal_int>
		if(cal_int % 15 == 0)digitalWrite(LED_STATUS_PIN , !digitalRead(LED_STATUS_PIN));                //Change the led status to indicate calibration.
    1efc:	cf e0       	ldi	r28, 0x0F	; 15
    1efe:	d0 e0       	ldi	r29, 0x00	; 0
		PORTD &= B00001111;                                                     //Set digital poort 4, 5, 6 and 7 low.
		delayMicroseconds(3000);                                                //Wait 3000us.
	}

	//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
	for (cal_int = 0; cal_int < 2000 ; cal_int ++){                           //Take 2000 readings for calibration.
    1f00:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <cal_int>
    1f04:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <cal_int+0x1>
    1f08:	80 3d       	cpi	r24, 0xD0	; 208
    1f0a:	27 e0       	ldi	r18, 0x07	; 7
    1f0c:	92 07       	cpc	r25, r18
    1f0e:	0c f0       	brlt	.+2      	; 0x1f12 <setup+0x10e>
    1f10:	85 c0       	rjmp	.+266    	; 0x201c <setup+0x218>
		if(cal_int % 15 == 0)digitalWrite(LED_STATUS_PIN , !digitalRead(LED_STATUS_PIN));                //Change the led status to indicate calibration.
    1f12:	be 01       	movw	r22, r28
    1f14:	0e 94 56 19 	call	0x32ac	; 0x32ac <__divmodhi4>
    1f18:	89 2b       	or	r24, r25
    1f1a:	51 f4       	brne	.+20     	; 0x1f30 <setup+0x12c>
    1f1c:	8d e0       	ldi	r24, 0x0D	; 13
    1f1e:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <digitalRead>
    1f22:	61 e0       	ldi	r22, 0x01	; 1
    1f24:	89 2b       	or	r24, r25
    1f26:	09 f0       	breq	.+2      	; 0x1f2a <setup+0x126>
    1f28:	60 e0       	ldi	r22, 0x00	; 0
    1f2a:	8d e0       	ldi	r24, 0x0D	; 13
    1f2c:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <digitalWrite>
		gyro_signalen();                                                        //Read the gyro output.
    1f30:	0e 94 5d 05 	call	0xaba	; 0xaba <_Z13gyro_signalenv>
		gyro_axis_cal[1] += gyro_axis[1];                                       //Ad roll value to gyro_roll_cal.
    1f34:	60 91 f0 01 	lds	r22, 0x01F0	; 0x8001f0 <gyro_axis+0x2>
    1f38:	70 91 f1 01 	lds	r23, 0x01F1	; 0x8001f1 <gyro_axis+0x3>
    1f3c:	07 2e       	mov	r0, r23
    1f3e:	00 0c       	add	r0, r0
    1f40:	88 0b       	sbc	r24, r24
    1f42:	99 0b       	sbc	r25, r25
    1f44:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
    1f48:	9b 01       	movw	r18, r22
    1f4a:	ac 01       	movw	r20, r24
    1f4c:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <gyro_axis_cal+0x4>
    1f50:	70 91 83 01 	lds	r23, 0x0183	; 0x800183 <gyro_axis_cal+0x5>
    1f54:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gyro_axis_cal+0x6>
    1f58:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <gyro_axis_cal+0x7>
    1f5c:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
    1f60:	60 93 82 01 	sts	0x0182, r22	; 0x800182 <gyro_axis_cal+0x4>
    1f64:	70 93 83 01 	sts	0x0183, r23	; 0x800183 <gyro_axis_cal+0x5>
    1f68:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <gyro_axis_cal+0x6>
    1f6c:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <gyro_axis_cal+0x7>
		gyro_axis_cal[2] += gyro_axis[2];                                       //Ad pitch value to gyro_pitch_cal.
    1f70:	60 91 f2 01 	lds	r22, 0x01F2	; 0x8001f2 <gyro_axis+0x4>
    1f74:	70 91 f3 01 	lds	r23, 0x01F3	; 0x8001f3 <gyro_axis+0x5>
    1f78:	07 2e       	mov	r0, r23
    1f7a:	00 0c       	add	r0, r0
    1f7c:	88 0b       	sbc	r24, r24
    1f7e:	99 0b       	sbc	r25, r25
    1f80:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
    1f84:	9b 01       	movw	r18, r22
    1f86:	ac 01       	movw	r20, r24
    1f88:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <gyro_axis_cal+0x8>
    1f8c:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <gyro_axis_cal+0x9>
    1f90:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <gyro_axis_cal+0xa>
    1f94:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <gyro_axis_cal+0xb>
    1f98:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
    1f9c:	60 93 86 01 	sts	0x0186, r22	; 0x800186 <gyro_axis_cal+0x8>
    1fa0:	70 93 87 01 	sts	0x0187, r23	; 0x800187 <gyro_axis_cal+0x9>
    1fa4:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <gyro_axis_cal+0xa>
    1fa8:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <gyro_axis_cal+0xb>
		gyro_axis_cal[3] += gyro_axis[3];                                       //Ad yaw value to gyro_yaw_cal.
    1fac:	60 91 f4 01 	lds	r22, 0x01F4	; 0x8001f4 <gyro_axis+0x6>
    1fb0:	70 91 f5 01 	lds	r23, 0x01F5	; 0x8001f5 <gyro_axis+0x7>
    1fb4:	07 2e       	mov	r0, r23
    1fb6:	00 0c       	add	r0, r0
    1fb8:	88 0b       	sbc	r24, r24
    1fba:	99 0b       	sbc	r25, r25
    1fbc:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
    1fc0:	9b 01       	movw	r18, r22
    1fc2:	ac 01       	movw	r20, r24
    1fc4:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <gyro_axis_cal+0xc>
    1fc8:	70 91 8b 01 	lds	r23, 0x018B	; 0x80018b <gyro_axis_cal+0xd>
    1fcc:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <gyro_axis_cal+0xe>
    1fd0:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <gyro_axis_cal+0xf>
    1fd4:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
    1fd8:	60 93 8a 01 	sts	0x018A, r22	; 0x80018a <gyro_axis_cal+0xc>
    1fdc:	70 93 8b 01 	sts	0x018B, r23	; 0x80018b <gyro_axis_cal+0xd>
    1fe0:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <gyro_axis_cal+0xe>
    1fe4:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <gyro_axis_cal+0xf>
		//We don't want the esc's to be beeping annoyingly. So let's give them a 1000us puls while calibrating the gyro.
		PORTD |= B11110000;                                                     //Set digital poort 4, 5, 6 and 7 high.
    1fe8:	8b b1       	in	r24, 0x0b	; 11
    1fea:	80 6f       	ori	r24, 0xF0	; 240
    1fec:	8b b9       	out	0x0b, r24	; 11
		delayMicroseconds(1000);                                                //Wait 1000us.
    1fee:	88 ee       	ldi	r24, 0xE8	; 232
    1ff0:	93 e0       	ldi	r25, 0x03	; 3
    1ff2:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <delayMicroseconds>
		PORTD &= B00001111;                                                     //Set digital poort 4, 5, 6 and 7 low.
    1ff6:	8b b1       	in	r24, 0x0b	; 11
    1ff8:	8f 70       	andi	r24, 0x0F	; 15
    1ffa:	8b b9       	out	0x0b, r24	; 11
		delay(3);                                                               //Wait 3 milliseconds before the next loop.
    1ffc:	63 e0       	ldi	r22, 0x03	; 3
    1ffe:	70 e0       	ldi	r23, 0x00	; 0
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	0e 94 03 16 	call	0x2c06	; 0x2c06 <delay>
		PORTD &= B00001111;                                                     //Set digital poort 4, 5, 6 and 7 low.
		delayMicroseconds(3000);                                                //Wait 3000us.
	}

	//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
	for (cal_int = 0; cal_int < 2000 ; cal_int ++){                           //Take 2000 readings for calibration.
    2008:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <cal_int>
    200c:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <cal_int+0x1>
    2010:	01 96       	adiw	r24, 0x01	; 1
    2012:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <cal_int+0x1>
    2016:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <cal_int>
    201a:	72 cf       	rjmp	.-284    	; 0x1f00 <setup+0xfc>
		delayMicroseconds(1000);                                                //Wait 1000us.
		PORTD &= B00001111;                                                     //Set digital poort 4, 5, 6 and 7 low.
		delay(3);                                                               //Wait 3 milliseconds before the next loop.
	}
	//Now that we have 2000 measures, we need to devide by 2000 to get the average gyro offset.
	gyro_axis_cal[1] /= 2000;                                                 //Divide the roll total by 2000.
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	4a ef       	ldi	r20, 0xFA	; 250
    2022:	54 e4       	ldi	r21, 0x44	; 68
    2024:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <gyro_axis_cal+0x4>
    2028:	70 91 83 01 	lds	r23, 0x0183	; 0x800183 <gyro_axis_cal+0x5>
    202c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gyro_axis_cal+0x6>
    2030:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <gyro_axis_cal+0x7>
    2034:	0e 94 89 11 	call	0x2312	; 0x2312 <__divsf3>
    2038:	60 93 82 01 	sts	0x0182, r22	; 0x800182 <gyro_axis_cal+0x4>
    203c:	70 93 83 01 	sts	0x0183, r23	; 0x800183 <gyro_axis_cal+0x5>
    2040:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <gyro_axis_cal+0x6>
    2044:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <gyro_axis_cal+0x7>
	gyro_axis_cal[2] /= 2000;                                                 //Divide the pitch total by 2000.
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	4a ef       	ldi	r20, 0xFA	; 250
    204e:	54 e4       	ldi	r21, 0x44	; 68
    2050:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <gyro_axis_cal+0x8>
    2054:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <gyro_axis_cal+0x9>
    2058:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <gyro_axis_cal+0xa>
    205c:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <gyro_axis_cal+0xb>
    2060:	0e 94 89 11 	call	0x2312	; 0x2312 <__divsf3>
    2064:	60 93 86 01 	sts	0x0186, r22	; 0x800186 <gyro_axis_cal+0x8>
    2068:	70 93 87 01 	sts	0x0187, r23	; 0x800187 <gyro_axis_cal+0x9>
    206c:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <gyro_axis_cal+0xa>
    2070:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <gyro_axis_cal+0xb>
	gyro_axis_cal[3] /= 2000;                                                 //Divide the yaw total by 2000.
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	4a ef       	ldi	r20, 0xFA	; 250
    207a:	54 e4       	ldi	r21, 0x44	; 68
    207c:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <gyro_axis_cal+0xc>
    2080:	70 91 8b 01 	lds	r23, 0x018B	; 0x80018b <gyro_axis_cal+0xd>
    2084:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <gyro_axis_cal+0xe>
    2088:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <gyro_axis_cal+0xf>
    208c:	0e 94 89 11 	call	0x2312	; 0x2312 <__divsf3>
    2090:	60 93 8a 01 	sts	0x018A, r22	; 0x80018a <gyro_axis_cal+0xc>
    2094:	70 93 8b 01 	sts	0x018B, r23	; 0x80018b <gyro_axis_cal+0xd>
    2098:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <gyro_axis_cal+0xe>
    209c:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <gyro_axis_cal+0xf>

	PCICR |= (1 << PCIE0);			//Set PCIE0 to enable PCMSK0 scan.
    20a0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    20a4:	81 60       	ori	r24, 0x01	; 1
    20a6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCICR |= (1 << PCIE2);                                                    //Set PCIE2 to enable PCMSK2 scan.
    20aa:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    20ae:	84 60       	ori	r24, 0x04	; 4
    20b0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK0 |= (1 << PCINT0);                                                  //Set PCINT0 (digital input 8) to trigger an interrupt on state change.
    20b4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    20b8:	81 60       	ori	r24, 0x01	; 1
    20ba:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK0 |= (1 << PCINT1);                                                  //Set PCINT1 (digital input 9)to trigger an interrupt on state change.
    20be:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    20c2:	82 60       	ori	r24, 0x02	; 2
    20c4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK0 |= (1 << PCINT2);                                                  //Set PCINT2 (digital input 10)to trigger an interrupt on state change.
    20c8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    20cc:	84 60       	ori	r24, 0x04	; 4
    20ce:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK0 |= (1 << PCINT3);                                                  //Set PCINT3 (digital input 11)to trigger an interrupt on state change.
    20d2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    20d6:	88 60       	ori	r24, 0x08	; 8
    20d8:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK0 |= (1 << PCINT4);                                                  //Set PCINT3 (digital input 12)to trigger an interrupt on state change.
    20dc:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    20e0:	80 61       	ori	r24, 0x10	; 16
    20e2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK2 |= (1 << PCINT18);
    20e6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
    20ea:	84 60       	ori	r24, 0x04	; 4
    20ec:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
	PCMSK2 |= (1 << PCINT19);
    20f0:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
    20f4:	88 60       	ori	r24, 0x08	; 8
    20f6:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>


	//Wait until the receiver is active and the throtle is set to the lower position.
	while(receiver_input_channel_3 < 990 || receiver_input_channel_3 > 1020 || receiver_input_channel_4 < 1400){
    20fa:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <receiver_input_channel_3>
    20fe:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <receiver_input_channel_3+0x1>
    2102:	8e 3d       	cpi	r24, 0xDE	; 222
    2104:	93 40       	sbci	r25, 0x03	; 3
    2106:	ec f5       	brge	.+122    	; 0x2182 <setup+0x37e>
    2108:	83 e0       	ldi	r24, 0x03	; 3
    210a:	0e 94 b5 00 	call	0x16a	; 0x16a <_Z24convert_receiver_channelh.part.1>
		receiver_input_channel_3 = convert_receiver_channel(3);                 //Convert the actual receiver signals for throttle to the standard 1000 - 2000us
    210e:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <receiver_input_channel_3+0x1>
    2112:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <receiver_input_channel_3>
    2116:	84 e0       	ldi	r24, 0x04	; 4
    2118:	0e 94 b5 00 	call	0x16a	; 0x16a <_Z24convert_receiver_channelh.part.1>
		receiver_input_channel_4 = convert_receiver_channel(4);                 //Convert the actual receiver signals for yaw to the standard 1000 - 2000us
    211c:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <receiver_input_channel_4+0x1>
    2120:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <receiver_input_channel_4>
		start ++;                                                               //While waiting increment start whith every loop.
    2124:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <start>
    2128:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <start+0x1>
    212c:	01 96       	adiw	r24, 0x01	; 1
    212e:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <start+0x1>
    2132:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <start>
		//We don't want the esc's to be beeping annoyingly. So let's give them a 1000us puls while waiting for the receiver inputs.
		PORTD |= B11110000;                                                     //Set digital poort 4, 5, 6 and 7 high.
    2136:	8b b1       	in	r24, 0x0b	; 11
    2138:	80 6f       	ori	r24, 0xF0	; 240
    213a:	8b b9       	out	0x0b, r24	; 11
		delayMicroseconds(1000);                                                //Wait 1000us.
    213c:	88 ee       	ldi	r24, 0xE8	; 232
    213e:	93 e0       	ldi	r25, 0x03	; 3
    2140:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <delayMicroseconds>
		PORTD &= B00001111;                                                     //Set digital poort 4, 5, 6 and 7 low.
    2144:	8b b1       	in	r24, 0x0b	; 11
    2146:	8f 70       	andi	r24, 0x0F	; 15
    2148:	8b b9       	out	0x0b, r24	; 11
		delay(3);                                                               //Wait 3 milliseconds before the next loop.
    214a:	63 e0       	ldi	r22, 0x03	; 3
    214c:	70 e0       	ldi	r23, 0x00	; 0
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	0e 94 03 16 	call	0x2c06	; 0x2c06 <delay>
		if(start == 125){                                                       //Every 125 loops (500ms).
    2156:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <start>
    215a:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <start+0x1>
    215e:	8d 37       	cpi	r24, 0x7D	; 125
    2160:	91 05       	cpc	r25, r1
    2162:	59 f6       	brne	.-106    	; 0x20fa <setup+0x2f6>
			digitalWrite(LED_STATUS_PIN, !digitalRead(LED_STATUS_PIN));                                   //Change the led status.
    2164:	8d e0       	ldi	r24, 0x0D	; 13
    2166:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <digitalRead>
    216a:	61 e0       	ldi	r22, 0x01	; 1
    216c:	89 2b       	or	r24, r25
    216e:	09 f0       	breq	.+2      	; 0x2172 <setup+0x36e>
    2170:	60 e0       	ldi	r22, 0x00	; 0
    2172:	8d e0       	ldi	r24, 0x0D	; 13
    2174:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <digitalWrite>
			start = 0;                                                            //Start again at 0.
    2178:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <start+0x1>
    217c:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <start>
    2180:	bc cf       	rjmp	.-136    	; 0x20fa <setup+0x2f6>
	PCMSK2 |= (1 << PCINT18);
	PCMSK2 |= (1 << PCINT19);


	//Wait until the receiver is active and the throtle is set to the lower position.
	while(receiver_input_channel_3 < 990 || receiver_input_channel_3 > 1020 || receiver_input_channel_4 < 1400){
    2182:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <receiver_input_channel_3>
    2186:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <receiver_input_channel_3+0x1>
    218a:	8d 3f       	cpi	r24, 0xFD	; 253
    218c:	93 40       	sbci	r25, 0x03	; 3
    218e:	0c f0       	brlt	.+2      	; 0x2192 <setup+0x38e>
    2190:	bb cf       	rjmp	.-138    	; 0x2108 <setup+0x304>
    2192:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <receiver_input_channel_4>
    2196:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <receiver_input_channel_4+0x1>
    219a:	88 37       	cpi	r24, 0x78	; 120
    219c:	95 40       	sbci	r25, 0x05	; 5
    219e:	0c f4       	brge	.+2      	; 0x21a2 <setup+0x39e>
    21a0:	b3 cf       	rjmp	.-154    	; 0x2108 <setup+0x304>
		if(start == 125){                                                       //Every 125 loops (500ms).
			digitalWrite(LED_STATUS_PIN, !digitalRead(LED_STATUS_PIN));                                   //Change the led status.
			start = 0;                                                            //Start again at 0.
		}
	}
	start = 0;                                                                //Set start back to 0.
    21a2:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <start+0x1>
    21a6:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <start>
	//65 is the voltage compensation for the diode.
	//12.6V equals ~5V @ Analog 0.
	//12.6V equals 1023 analogRead(0).
	//1260 / 1023 = 1.2317.
	//The variable battery_voltage holds 1050 if the battery voltage is 10.5V.
	battery_voltage = (analogRead(0) + 65) * 1.2317;
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <analogRead>
    21b0:	8f 5b       	subi	r24, 0xBF	; 191
    21b2:	9f 4f       	sbci	r25, 0xFF	; 255
    21b4:	bc 01       	movw	r22, r24
    21b6:	99 0f       	add	r25, r25
    21b8:	88 0b       	sbc	r24, r24
    21ba:	99 0b       	sbc	r25, r25
    21bc:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
    21c0:	28 e5       	ldi	r18, 0x58	; 88
    21c2:	38 ea       	ldi	r19, 0xA8	; 168
    21c4:	4d e9       	ldi	r20, 0x9D	; 157
    21c6:	5f e3       	ldi	r21, 0x3F	; 63
    21c8:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
    21cc:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__fixsfsi>
    21d0:	70 93 17 02 	sts	0x0217, r23	; 0x800217 <battery_voltage+0x1>
    21d4:	60 93 16 02 	sts	0x0216, r22	; 0x800216 <battery_voltage>

	loop_timer = micros();                                                    //Set the timer for the next loop.
    21d8:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <micros>
    21dc:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <loop_timer>
    21e0:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <loop_timer+0x1>
    21e4:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <loop_timer+0x2>
    21e8:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <loop_timer+0x3>

	//When everything is done, turn off the led.
	digitalWrite(LED_STATUS_PIN,LOW);                                                     //Turn off the warning led.
    21ec:	60 e0       	ldi	r22, 0x00	; 0
    21ee:	8d e0       	ldi	r24, 0x0D	; 13
}
    21f0:	df 91       	pop	r29
    21f2:	cf 91       	pop	r28
	battery_voltage = (analogRead(0) + 65) * 1.2317;

	loop_timer = micros();                                                    //Set the timer for the next loop.

	//When everything is done, turn off the led.
	digitalWrite(LED_STATUS_PIN,LOW);                                                     //Turn off the warning led.
    21f4:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <digitalWrite>

000021f8 <__subsf3>:
    21f8:	50 58       	subi	r21, 0x80	; 128

000021fa <__addsf3>:
    21fa:	bb 27       	eor	r27, r27
    21fc:	aa 27       	eor	r26, r26
    21fe:	0e 94 14 11 	call	0x2228	; 0x2228 <__addsf3x>
    2202:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__fp_round>
    2206:	0e 94 f6 12 	call	0x25ec	; 0x25ec <__fp_pscA>
    220a:	38 f0       	brcs	.+14     	; 0x221a <__addsf3+0x20>
    220c:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fp_pscB>
    2210:	20 f0       	brcs	.+8      	; 0x221a <__addsf3+0x20>
    2212:	39 f4       	brne	.+14     	; 0x2222 <__addsf3+0x28>
    2214:	9f 3f       	cpi	r25, 0xFF	; 255
    2216:	19 f4       	brne	.+6      	; 0x221e <__addsf3+0x24>
    2218:	26 f4       	brtc	.+8      	; 0x2222 <__addsf3+0x28>
    221a:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__fp_nan>
    221e:	0e f4       	brtc	.+2      	; 0x2222 <__addsf3+0x28>
    2220:	e0 95       	com	r30
    2222:	e7 fb       	bst	r30, 7
    2224:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <__fp_inf>

00002228 <__addsf3x>:
    2228:	e9 2f       	mov	r30, r25
    222a:	0e 94 15 13 	call	0x262a	; 0x262a <__fp_split3>
    222e:	58 f3       	brcs	.-42     	; 0x2206 <__addsf3+0xc>
    2230:	ba 17       	cp	r27, r26
    2232:	62 07       	cpc	r22, r18
    2234:	73 07       	cpc	r23, r19
    2236:	84 07       	cpc	r24, r20
    2238:	95 07       	cpc	r25, r21
    223a:	20 f0       	brcs	.+8      	; 0x2244 <__addsf3x+0x1c>
    223c:	79 f4       	brne	.+30     	; 0x225c <__addsf3x+0x34>
    223e:	a6 f5       	brtc	.+104    	; 0x22a8 <__addsf3x+0x80>
    2240:	0c 94 37 13 	jmp	0x266e	; 0x266e <__fp_zero>
    2244:	0e f4       	brtc	.+2      	; 0x2248 <__addsf3x+0x20>
    2246:	e0 95       	com	r30
    2248:	0b 2e       	mov	r0, r27
    224a:	ba 2f       	mov	r27, r26
    224c:	a0 2d       	mov	r26, r0
    224e:	0b 01       	movw	r0, r22
    2250:	b9 01       	movw	r22, r18
    2252:	90 01       	movw	r18, r0
    2254:	0c 01       	movw	r0, r24
    2256:	ca 01       	movw	r24, r20
    2258:	a0 01       	movw	r20, r0
    225a:	11 24       	eor	r1, r1
    225c:	ff 27       	eor	r31, r31
    225e:	59 1b       	sub	r21, r25
    2260:	99 f0       	breq	.+38     	; 0x2288 <__addsf3x+0x60>
    2262:	59 3f       	cpi	r21, 0xF9	; 249
    2264:	50 f4       	brcc	.+20     	; 0x227a <__addsf3x+0x52>
    2266:	50 3e       	cpi	r21, 0xE0	; 224
    2268:	68 f1       	brcs	.+90     	; 0x22c4 <__addsf3x+0x9c>
    226a:	1a 16       	cp	r1, r26
    226c:	f0 40       	sbci	r31, 0x00	; 0
    226e:	a2 2f       	mov	r26, r18
    2270:	23 2f       	mov	r18, r19
    2272:	34 2f       	mov	r19, r20
    2274:	44 27       	eor	r20, r20
    2276:	58 5f       	subi	r21, 0xF8	; 248
    2278:	f3 cf       	rjmp	.-26     	; 0x2260 <__addsf3x+0x38>
    227a:	46 95       	lsr	r20
    227c:	37 95       	ror	r19
    227e:	27 95       	ror	r18
    2280:	a7 95       	ror	r26
    2282:	f0 40       	sbci	r31, 0x00	; 0
    2284:	53 95       	inc	r21
    2286:	c9 f7       	brne	.-14     	; 0x227a <__addsf3x+0x52>
    2288:	7e f4       	brtc	.+30     	; 0x22a8 <__addsf3x+0x80>
    228a:	1f 16       	cp	r1, r31
    228c:	ba 0b       	sbc	r27, r26
    228e:	62 0b       	sbc	r22, r18
    2290:	73 0b       	sbc	r23, r19
    2292:	84 0b       	sbc	r24, r20
    2294:	ba f0       	brmi	.+46     	; 0x22c4 <__addsf3x+0x9c>
    2296:	91 50       	subi	r25, 0x01	; 1
    2298:	a1 f0       	breq	.+40     	; 0x22c2 <__addsf3x+0x9a>
    229a:	ff 0f       	add	r31, r31
    229c:	bb 1f       	adc	r27, r27
    229e:	66 1f       	adc	r22, r22
    22a0:	77 1f       	adc	r23, r23
    22a2:	88 1f       	adc	r24, r24
    22a4:	c2 f7       	brpl	.-16     	; 0x2296 <__addsf3x+0x6e>
    22a6:	0e c0       	rjmp	.+28     	; 0x22c4 <__addsf3x+0x9c>
    22a8:	ba 0f       	add	r27, r26
    22aa:	62 1f       	adc	r22, r18
    22ac:	73 1f       	adc	r23, r19
    22ae:	84 1f       	adc	r24, r20
    22b0:	48 f4       	brcc	.+18     	; 0x22c4 <__addsf3x+0x9c>
    22b2:	87 95       	ror	r24
    22b4:	77 95       	ror	r23
    22b6:	67 95       	ror	r22
    22b8:	b7 95       	ror	r27
    22ba:	f7 95       	ror	r31
    22bc:	9e 3f       	cpi	r25, 0xFE	; 254
    22be:	08 f0       	brcs	.+2      	; 0x22c2 <__addsf3x+0x9a>
    22c0:	b0 cf       	rjmp	.-160    	; 0x2222 <__addsf3+0x28>
    22c2:	93 95       	inc	r25
    22c4:	88 0f       	add	r24, r24
    22c6:	08 f0       	brcs	.+2      	; 0x22ca <__addsf3x+0xa2>
    22c8:	99 27       	eor	r25, r25
    22ca:	ee 0f       	add	r30, r30
    22cc:	97 95       	ror	r25
    22ce:	87 95       	ror	r24
    22d0:	08 95       	ret

000022d2 <asin>:
    22d2:	9f 93       	push	r25
    22d4:	9f 77       	andi	r25, 0x7F	; 127
    22d6:	ee e3       	ldi	r30, 0x3E	; 62
    22d8:	89 37       	cpi	r24, 0x79	; 121
    22da:	9e 07       	cpc	r25, r30
    22dc:	28 f4       	brcc	.+10     	; 0x22e8 <asin+0x16>
    22de:	e8 e6       	ldi	r30, 0x68	; 104
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__fp_powsodd>
    22e6:	0c c0       	rjmp	.+24     	; 0x2300 <asin+0x2e>
    22e8:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__fp_arccos>
    22ec:	90 58       	subi	r25, 0x80	; 128
    22ee:	a2 ea       	ldi	r26, 0xA2	; 162
    22f0:	2a ed       	ldi	r18, 0xDA	; 218
    22f2:	3f e0       	ldi	r19, 0x0F	; 15
    22f4:	49 ec       	ldi	r20, 0xC9	; 201
    22f6:	5f e3       	ldi	r21, 0x3F	; 63
    22f8:	0e 94 14 11 	call	0x2228	; 0x2228 <__addsf3x>
    22fc:	0e 94 04 13 	call	0x2608	; 0x2608 <__fp_round>
    2300:	0f 90       	pop	r0
    2302:	07 fc       	sbrc	r0, 7
    2304:	90 58       	subi	r25, 0x80	; 128
    2306:	08 95       	ret

00002308 <__cmpsf2>:
    2308:	0e 94 8e 12 	call	0x251c	; 0x251c <__fp_cmp>
    230c:	08 f4       	brcc	.+2      	; 0x2310 <__cmpsf2+0x8>
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	08 95       	ret

00002312 <__divsf3>:
    2312:	0e 94 9d 11 	call	0x233a	; 0x233a <__divsf3x>
    2316:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__fp_round>
    231a:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fp_pscB>
    231e:	58 f0       	brcs	.+22     	; 0x2336 <__divsf3+0x24>
    2320:	0e 94 f6 12 	call	0x25ec	; 0x25ec <__fp_pscA>
    2324:	40 f0       	brcs	.+16     	; 0x2336 <__divsf3+0x24>
    2326:	29 f4       	brne	.+10     	; 0x2332 <__divsf3+0x20>
    2328:	5f 3f       	cpi	r21, 0xFF	; 255
    232a:	29 f0       	breq	.+10     	; 0x2336 <__divsf3+0x24>
    232c:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <__fp_inf>
    2330:	51 11       	cpse	r21, r1
    2332:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__fp_szero>
    2336:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__fp_nan>

0000233a <__divsf3x>:
    233a:	0e 94 15 13 	call	0x262a	; 0x262a <__fp_split3>
    233e:	68 f3       	brcs	.-38     	; 0x231a <__divsf3+0x8>

00002340 <__divsf3_pse>:
    2340:	99 23       	and	r25, r25
    2342:	b1 f3       	breq	.-20     	; 0x2330 <__divsf3+0x1e>
    2344:	55 23       	and	r21, r21
    2346:	91 f3       	breq	.-28     	; 0x232c <__divsf3+0x1a>
    2348:	95 1b       	sub	r25, r21
    234a:	55 0b       	sbc	r21, r21
    234c:	bb 27       	eor	r27, r27
    234e:	aa 27       	eor	r26, r26
    2350:	62 17       	cp	r22, r18
    2352:	73 07       	cpc	r23, r19
    2354:	84 07       	cpc	r24, r20
    2356:	38 f0       	brcs	.+14     	; 0x2366 <__divsf3_pse+0x26>
    2358:	9f 5f       	subi	r25, 0xFF	; 255
    235a:	5f 4f       	sbci	r21, 0xFF	; 255
    235c:	22 0f       	add	r18, r18
    235e:	33 1f       	adc	r19, r19
    2360:	44 1f       	adc	r20, r20
    2362:	aa 1f       	adc	r26, r26
    2364:	a9 f3       	breq	.-22     	; 0x2350 <__divsf3_pse+0x10>
    2366:	35 d0       	rcall	.+106    	; 0x23d2 <__divsf3_pse+0x92>
    2368:	0e 2e       	mov	r0, r30
    236a:	3a f0       	brmi	.+14     	; 0x237a <__divsf3_pse+0x3a>
    236c:	e0 e8       	ldi	r30, 0x80	; 128
    236e:	32 d0       	rcall	.+100    	; 0x23d4 <__divsf3_pse+0x94>
    2370:	91 50       	subi	r25, 0x01	; 1
    2372:	50 40       	sbci	r21, 0x00	; 0
    2374:	e6 95       	lsr	r30
    2376:	00 1c       	adc	r0, r0
    2378:	ca f7       	brpl	.-14     	; 0x236c <__divsf3_pse+0x2c>
    237a:	2b d0       	rcall	.+86     	; 0x23d2 <__divsf3_pse+0x92>
    237c:	fe 2f       	mov	r31, r30
    237e:	29 d0       	rcall	.+82     	; 0x23d2 <__divsf3_pse+0x92>
    2380:	66 0f       	add	r22, r22
    2382:	77 1f       	adc	r23, r23
    2384:	88 1f       	adc	r24, r24
    2386:	bb 1f       	adc	r27, r27
    2388:	26 17       	cp	r18, r22
    238a:	37 07       	cpc	r19, r23
    238c:	48 07       	cpc	r20, r24
    238e:	ab 07       	cpc	r26, r27
    2390:	b0 e8       	ldi	r27, 0x80	; 128
    2392:	09 f0       	breq	.+2      	; 0x2396 <__divsf3_pse+0x56>
    2394:	bb 0b       	sbc	r27, r27
    2396:	80 2d       	mov	r24, r0
    2398:	bf 01       	movw	r22, r30
    239a:	ff 27       	eor	r31, r31
    239c:	93 58       	subi	r25, 0x83	; 131
    239e:	5f 4f       	sbci	r21, 0xFF	; 255
    23a0:	3a f0       	brmi	.+14     	; 0x23b0 <__divsf3_pse+0x70>
    23a2:	9e 3f       	cpi	r25, 0xFE	; 254
    23a4:	51 05       	cpc	r21, r1
    23a6:	78 f0       	brcs	.+30     	; 0x23c6 <__divsf3_pse+0x86>
    23a8:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <__fp_inf>
    23ac:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__fp_szero>
    23b0:	5f 3f       	cpi	r21, 0xFF	; 255
    23b2:	e4 f3       	brlt	.-8      	; 0x23ac <__divsf3_pse+0x6c>
    23b4:	98 3e       	cpi	r25, 0xE8	; 232
    23b6:	d4 f3       	brlt	.-12     	; 0x23ac <__divsf3_pse+0x6c>
    23b8:	86 95       	lsr	r24
    23ba:	77 95       	ror	r23
    23bc:	67 95       	ror	r22
    23be:	b7 95       	ror	r27
    23c0:	f7 95       	ror	r31
    23c2:	9f 5f       	subi	r25, 0xFF	; 255
    23c4:	c9 f7       	brne	.-14     	; 0x23b8 <__divsf3_pse+0x78>
    23c6:	88 0f       	add	r24, r24
    23c8:	91 1d       	adc	r25, r1
    23ca:	96 95       	lsr	r25
    23cc:	87 95       	ror	r24
    23ce:	97 f9       	bld	r25, 7
    23d0:	08 95       	ret
    23d2:	e1 e0       	ldi	r30, 0x01	; 1
    23d4:	66 0f       	add	r22, r22
    23d6:	77 1f       	adc	r23, r23
    23d8:	88 1f       	adc	r24, r24
    23da:	bb 1f       	adc	r27, r27
    23dc:	62 17       	cp	r22, r18
    23de:	73 07       	cpc	r23, r19
    23e0:	84 07       	cpc	r24, r20
    23e2:	ba 07       	cpc	r27, r26
    23e4:	20 f0       	brcs	.+8      	; 0x23ee <__divsf3_pse+0xae>
    23e6:	62 1b       	sub	r22, r18
    23e8:	73 0b       	sbc	r23, r19
    23ea:	84 0b       	sbc	r24, r20
    23ec:	ba 0b       	sbc	r27, r26
    23ee:	ee 1f       	adc	r30, r30
    23f0:	88 f7       	brcc	.-30     	; 0x23d4 <__divsf3_pse+0x94>
    23f2:	e0 95       	com	r30
    23f4:	08 95       	ret

000023f6 <__fixsfsi>:
    23f6:	0e 94 02 12 	call	0x2404	; 0x2404 <__fixunssfsi>
    23fa:	68 94       	set
    23fc:	b1 11       	cpse	r27, r1
    23fe:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__fp_szero>
    2402:	08 95       	ret

00002404 <__fixunssfsi>:
    2404:	0e 94 1d 13 	call	0x263a	; 0x263a <__fp_splitA>
    2408:	88 f0       	brcs	.+34     	; 0x242c <__fixunssfsi+0x28>
    240a:	9f 57       	subi	r25, 0x7F	; 127
    240c:	98 f0       	brcs	.+38     	; 0x2434 <__fixunssfsi+0x30>
    240e:	b9 2f       	mov	r27, r25
    2410:	99 27       	eor	r25, r25
    2412:	b7 51       	subi	r27, 0x17	; 23
    2414:	b0 f0       	brcs	.+44     	; 0x2442 <__fixunssfsi+0x3e>
    2416:	e1 f0       	breq	.+56     	; 0x2450 <__fixunssfsi+0x4c>
    2418:	66 0f       	add	r22, r22
    241a:	77 1f       	adc	r23, r23
    241c:	88 1f       	adc	r24, r24
    241e:	99 1f       	adc	r25, r25
    2420:	1a f0       	brmi	.+6      	; 0x2428 <__fixunssfsi+0x24>
    2422:	ba 95       	dec	r27
    2424:	c9 f7       	brne	.-14     	; 0x2418 <__fixunssfsi+0x14>
    2426:	14 c0       	rjmp	.+40     	; 0x2450 <__fixunssfsi+0x4c>
    2428:	b1 30       	cpi	r27, 0x01	; 1
    242a:	91 f0       	breq	.+36     	; 0x2450 <__fixunssfsi+0x4c>
    242c:	0e 94 37 13 	call	0x266e	; 0x266e <__fp_zero>
    2430:	b1 e0       	ldi	r27, 0x01	; 1
    2432:	08 95       	ret
    2434:	0c 94 37 13 	jmp	0x266e	; 0x266e <__fp_zero>
    2438:	67 2f       	mov	r22, r23
    243a:	78 2f       	mov	r23, r24
    243c:	88 27       	eor	r24, r24
    243e:	b8 5f       	subi	r27, 0xF8	; 248
    2440:	39 f0       	breq	.+14     	; 0x2450 <__fixunssfsi+0x4c>
    2442:	b9 3f       	cpi	r27, 0xF9	; 249
    2444:	cc f3       	brlt	.-14     	; 0x2438 <__fixunssfsi+0x34>
    2446:	86 95       	lsr	r24
    2448:	77 95       	ror	r23
    244a:	67 95       	ror	r22
    244c:	b3 95       	inc	r27
    244e:	d9 f7       	brne	.-10     	; 0x2446 <__fixunssfsi+0x42>
    2450:	3e f4       	brtc	.+14     	; 0x2460 <__fixunssfsi+0x5c>
    2452:	90 95       	com	r25
    2454:	80 95       	com	r24
    2456:	70 95       	com	r23
    2458:	61 95       	neg	r22
    245a:	7f 4f       	sbci	r23, 0xFF	; 255
    245c:	8f 4f       	sbci	r24, 0xFF	; 255
    245e:	9f 4f       	sbci	r25, 0xFF	; 255
    2460:	08 95       	ret

00002462 <__floatunsisf>:
    2462:	e8 94       	clt
    2464:	09 c0       	rjmp	.+18     	; 0x2478 <__floatsisf+0x12>

00002466 <__floatsisf>:
    2466:	97 fb       	bst	r25, 7
    2468:	3e f4       	brtc	.+14     	; 0x2478 <__floatsisf+0x12>
    246a:	90 95       	com	r25
    246c:	80 95       	com	r24
    246e:	70 95       	com	r23
    2470:	61 95       	neg	r22
    2472:	7f 4f       	sbci	r23, 0xFF	; 255
    2474:	8f 4f       	sbci	r24, 0xFF	; 255
    2476:	9f 4f       	sbci	r25, 0xFF	; 255
    2478:	99 23       	and	r25, r25
    247a:	a9 f0       	breq	.+42     	; 0x24a6 <__floatsisf+0x40>
    247c:	f9 2f       	mov	r31, r25
    247e:	96 e9       	ldi	r25, 0x96	; 150
    2480:	bb 27       	eor	r27, r27
    2482:	93 95       	inc	r25
    2484:	f6 95       	lsr	r31
    2486:	87 95       	ror	r24
    2488:	77 95       	ror	r23
    248a:	67 95       	ror	r22
    248c:	b7 95       	ror	r27
    248e:	f1 11       	cpse	r31, r1
    2490:	f8 cf       	rjmp	.-16     	; 0x2482 <__floatsisf+0x1c>
    2492:	fa f4       	brpl	.+62     	; 0x24d2 <__floatsisf+0x6c>
    2494:	bb 0f       	add	r27, r27
    2496:	11 f4       	brne	.+4      	; 0x249c <__floatsisf+0x36>
    2498:	60 ff       	sbrs	r22, 0
    249a:	1b c0       	rjmp	.+54     	; 0x24d2 <__floatsisf+0x6c>
    249c:	6f 5f       	subi	r22, 0xFF	; 255
    249e:	7f 4f       	sbci	r23, 0xFF	; 255
    24a0:	8f 4f       	sbci	r24, 0xFF	; 255
    24a2:	9f 4f       	sbci	r25, 0xFF	; 255
    24a4:	16 c0       	rjmp	.+44     	; 0x24d2 <__floatsisf+0x6c>
    24a6:	88 23       	and	r24, r24
    24a8:	11 f0       	breq	.+4      	; 0x24ae <__floatsisf+0x48>
    24aa:	96 e9       	ldi	r25, 0x96	; 150
    24ac:	11 c0       	rjmp	.+34     	; 0x24d0 <__floatsisf+0x6a>
    24ae:	77 23       	and	r23, r23
    24b0:	21 f0       	breq	.+8      	; 0x24ba <__floatsisf+0x54>
    24b2:	9e e8       	ldi	r25, 0x8E	; 142
    24b4:	87 2f       	mov	r24, r23
    24b6:	76 2f       	mov	r23, r22
    24b8:	05 c0       	rjmp	.+10     	; 0x24c4 <__floatsisf+0x5e>
    24ba:	66 23       	and	r22, r22
    24bc:	71 f0       	breq	.+28     	; 0x24da <__floatsisf+0x74>
    24be:	96 e8       	ldi	r25, 0x86	; 134
    24c0:	86 2f       	mov	r24, r22
    24c2:	70 e0       	ldi	r23, 0x00	; 0
    24c4:	60 e0       	ldi	r22, 0x00	; 0
    24c6:	2a f0       	brmi	.+10     	; 0x24d2 <__floatsisf+0x6c>
    24c8:	9a 95       	dec	r25
    24ca:	66 0f       	add	r22, r22
    24cc:	77 1f       	adc	r23, r23
    24ce:	88 1f       	adc	r24, r24
    24d0:	da f7       	brpl	.-10     	; 0x24c8 <__floatsisf+0x62>
    24d2:	88 0f       	add	r24, r24
    24d4:	96 95       	lsr	r25
    24d6:	87 95       	ror	r24
    24d8:	97 f9       	bld	r25, 7
    24da:	08 95       	ret

000024dc <__fp_arccos>:
    24dc:	df 93       	push	r29
    24de:	cf 93       	push	r28
    24e0:	1f 93       	push	r17
    24e2:	0f 93       	push	r16
    24e4:	8b 01       	movw	r16, r22
    24e6:	ec 01       	movw	r28, r24
    24e8:	ec e7       	ldi	r30, 0x7C	; 124
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	0e 94 bb 12 	call	0x2576	; 0x2576 <__fp_powser>
    24f0:	0e 94 04 13 	call	0x2608	; 0x2608 <__fp_round>
    24f4:	98 01       	movw	r18, r16
    24f6:	ae 01       	movw	r20, r28
    24f8:	8b 01       	movw	r16, r22
    24fa:	ec 01       	movw	r28, r24
    24fc:	60 e0       	ldi	r22, 0x00	; 0
    24fe:	70 e0       	ldi	r23, 0x00	; 0
    2500:	80 e8       	ldi	r24, 0x80	; 128
    2502:	9f e3       	ldi	r25, 0x3F	; 63
    2504:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__subsf3>
    2508:	0e 94 be 13 	call	0x277c	; 0x277c <sqrt>
    250c:	98 01       	movw	r18, r16
    250e:	ae 01       	movw	r20, r28
    2510:	0f 91       	pop	r16
    2512:	1f 91       	pop	r17
    2514:	cf 91       	pop	r28
    2516:	df 91       	pop	r29
    2518:	0c 94 56 13 	jmp	0x26ac	; 0x26ac <__mulsf3x>

0000251c <__fp_cmp>:
    251c:	99 0f       	add	r25, r25
    251e:	00 08       	sbc	r0, r0
    2520:	55 0f       	add	r21, r21
    2522:	aa 0b       	sbc	r26, r26
    2524:	e0 e8       	ldi	r30, 0x80	; 128
    2526:	fe ef       	ldi	r31, 0xFE	; 254
    2528:	16 16       	cp	r1, r22
    252a:	17 06       	cpc	r1, r23
    252c:	e8 07       	cpc	r30, r24
    252e:	f9 07       	cpc	r31, r25
    2530:	c0 f0       	brcs	.+48     	; 0x2562 <__fp_cmp+0x46>
    2532:	12 16       	cp	r1, r18
    2534:	13 06       	cpc	r1, r19
    2536:	e4 07       	cpc	r30, r20
    2538:	f5 07       	cpc	r31, r21
    253a:	98 f0       	brcs	.+38     	; 0x2562 <__fp_cmp+0x46>
    253c:	62 1b       	sub	r22, r18
    253e:	73 0b       	sbc	r23, r19
    2540:	84 0b       	sbc	r24, r20
    2542:	95 0b       	sbc	r25, r21
    2544:	39 f4       	brne	.+14     	; 0x2554 <__fp_cmp+0x38>
    2546:	0a 26       	eor	r0, r26
    2548:	61 f0       	breq	.+24     	; 0x2562 <__fp_cmp+0x46>
    254a:	23 2b       	or	r18, r19
    254c:	24 2b       	or	r18, r20
    254e:	25 2b       	or	r18, r21
    2550:	21 f4       	brne	.+8      	; 0x255a <__fp_cmp+0x3e>
    2552:	08 95       	ret
    2554:	0a 26       	eor	r0, r26
    2556:	09 f4       	brne	.+2      	; 0x255a <__fp_cmp+0x3e>
    2558:	a1 40       	sbci	r26, 0x01	; 1
    255a:	a6 95       	lsr	r26
    255c:	8f ef       	ldi	r24, 0xFF	; 255
    255e:	81 1d       	adc	r24, r1
    2560:	81 1d       	adc	r24, r1
    2562:	08 95       	ret

00002564 <__fp_inf>:
    2564:	97 f9       	bld	r25, 7
    2566:	9f 67       	ori	r25, 0x7F	; 127
    2568:	80 e8       	ldi	r24, 0x80	; 128
    256a:	70 e0       	ldi	r23, 0x00	; 0
    256c:	60 e0       	ldi	r22, 0x00	; 0
    256e:	08 95       	ret

00002570 <__fp_nan>:
    2570:	9f ef       	ldi	r25, 0xFF	; 255
    2572:	80 ec       	ldi	r24, 0xC0	; 192
    2574:	08 95       	ret

00002576 <__fp_powser>:
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	1f 93       	push	r17
    257c:	0f 93       	push	r16
    257e:	ff 92       	push	r15
    2580:	ef 92       	push	r14
    2582:	df 92       	push	r13
    2584:	7b 01       	movw	r14, r22
    2586:	8c 01       	movw	r16, r24
    2588:	68 94       	set
    258a:	06 c0       	rjmp	.+12     	; 0x2598 <__fp_powser+0x22>
    258c:	da 2e       	mov	r13, r26
    258e:	ef 01       	movw	r28, r30
    2590:	0e 94 56 13 	call	0x26ac	; 0x26ac <__mulsf3x>
    2594:	fe 01       	movw	r30, r28
    2596:	e8 94       	clt
    2598:	a5 91       	lpm	r26, Z+
    259a:	25 91       	lpm	r18, Z+
    259c:	35 91       	lpm	r19, Z+
    259e:	45 91       	lpm	r20, Z+
    25a0:	55 91       	lpm	r21, Z+
    25a2:	a6 f3       	brts	.-24     	; 0x258c <__fp_powser+0x16>
    25a4:	ef 01       	movw	r28, r30
    25a6:	0e 94 14 11 	call	0x2228	; 0x2228 <__addsf3x>
    25aa:	fe 01       	movw	r30, r28
    25ac:	97 01       	movw	r18, r14
    25ae:	a8 01       	movw	r20, r16
    25b0:	da 94       	dec	r13
    25b2:	69 f7       	brne	.-38     	; 0x258e <__fp_powser+0x18>
    25b4:	df 90       	pop	r13
    25b6:	ef 90       	pop	r14
    25b8:	ff 90       	pop	r15
    25ba:	0f 91       	pop	r16
    25bc:	1f 91       	pop	r17
    25be:	cf 91       	pop	r28
    25c0:	df 91       	pop	r29
    25c2:	08 95       	ret

000025c4 <__fp_powsodd>:
    25c4:	9f 93       	push	r25
    25c6:	8f 93       	push	r24
    25c8:	7f 93       	push	r23
    25ca:	6f 93       	push	r22
    25cc:	ff 93       	push	r31
    25ce:	ef 93       	push	r30
    25d0:	9b 01       	movw	r18, r22
    25d2:	ac 01       	movw	r20, r24
    25d4:	0e 94 43 13 	call	0x2686	; 0x2686 <__mulsf3>
    25d8:	ef 91       	pop	r30
    25da:	ff 91       	pop	r31
    25dc:	0e 94 bb 12 	call	0x2576	; 0x2576 <__fp_powser>
    25e0:	2f 91       	pop	r18
    25e2:	3f 91       	pop	r19
    25e4:	4f 91       	pop	r20
    25e6:	5f 91       	pop	r21
    25e8:	0c 94 43 13 	jmp	0x2686	; 0x2686 <__mulsf3>

000025ec <__fp_pscA>:
    25ec:	00 24       	eor	r0, r0
    25ee:	0a 94       	dec	r0
    25f0:	16 16       	cp	r1, r22
    25f2:	17 06       	cpc	r1, r23
    25f4:	18 06       	cpc	r1, r24
    25f6:	09 06       	cpc	r0, r25
    25f8:	08 95       	ret

000025fa <__fp_pscB>:
    25fa:	00 24       	eor	r0, r0
    25fc:	0a 94       	dec	r0
    25fe:	12 16       	cp	r1, r18
    2600:	13 06       	cpc	r1, r19
    2602:	14 06       	cpc	r1, r20
    2604:	05 06       	cpc	r0, r21
    2606:	08 95       	ret

00002608 <__fp_round>:
    2608:	09 2e       	mov	r0, r25
    260a:	03 94       	inc	r0
    260c:	00 0c       	add	r0, r0
    260e:	11 f4       	brne	.+4      	; 0x2614 <__fp_round+0xc>
    2610:	88 23       	and	r24, r24
    2612:	52 f0       	brmi	.+20     	; 0x2628 <__fp_round+0x20>
    2614:	bb 0f       	add	r27, r27
    2616:	40 f4       	brcc	.+16     	; 0x2628 <__fp_round+0x20>
    2618:	bf 2b       	or	r27, r31
    261a:	11 f4       	brne	.+4      	; 0x2620 <__fp_round+0x18>
    261c:	60 ff       	sbrs	r22, 0
    261e:	04 c0       	rjmp	.+8      	; 0x2628 <__fp_round+0x20>
    2620:	6f 5f       	subi	r22, 0xFF	; 255
    2622:	7f 4f       	sbci	r23, 0xFF	; 255
    2624:	8f 4f       	sbci	r24, 0xFF	; 255
    2626:	9f 4f       	sbci	r25, 0xFF	; 255
    2628:	08 95       	ret

0000262a <__fp_split3>:
    262a:	57 fd       	sbrc	r21, 7
    262c:	90 58       	subi	r25, 0x80	; 128
    262e:	44 0f       	add	r20, r20
    2630:	55 1f       	adc	r21, r21
    2632:	59 f0       	breq	.+22     	; 0x264a <__fp_splitA+0x10>
    2634:	5f 3f       	cpi	r21, 0xFF	; 255
    2636:	71 f0       	breq	.+28     	; 0x2654 <__fp_splitA+0x1a>
    2638:	47 95       	ror	r20

0000263a <__fp_splitA>:
    263a:	88 0f       	add	r24, r24
    263c:	97 fb       	bst	r25, 7
    263e:	99 1f       	adc	r25, r25
    2640:	61 f0       	breq	.+24     	; 0x265a <__fp_splitA+0x20>
    2642:	9f 3f       	cpi	r25, 0xFF	; 255
    2644:	79 f0       	breq	.+30     	; 0x2664 <__fp_splitA+0x2a>
    2646:	87 95       	ror	r24
    2648:	08 95       	ret
    264a:	12 16       	cp	r1, r18
    264c:	13 06       	cpc	r1, r19
    264e:	14 06       	cpc	r1, r20
    2650:	55 1f       	adc	r21, r21
    2652:	f2 cf       	rjmp	.-28     	; 0x2638 <__fp_split3+0xe>
    2654:	46 95       	lsr	r20
    2656:	f1 df       	rcall	.-30     	; 0x263a <__fp_splitA>
    2658:	08 c0       	rjmp	.+16     	; 0x266a <__fp_splitA+0x30>
    265a:	16 16       	cp	r1, r22
    265c:	17 06       	cpc	r1, r23
    265e:	18 06       	cpc	r1, r24
    2660:	99 1f       	adc	r25, r25
    2662:	f1 cf       	rjmp	.-30     	; 0x2646 <__fp_splitA+0xc>
    2664:	86 95       	lsr	r24
    2666:	71 05       	cpc	r23, r1
    2668:	61 05       	cpc	r22, r1
    266a:	08 94       	sec
    266c:	08 95       	ret

0000266e <__fp_zero>:
    266e:	e8 94       	clt

00002670 <__fp_szero>:
    2670:	bb 27       	eor	r27, r27
    2672:	66 27       	eor	r22, r22
    2674:	77 27       	eor	r23, r23
    2676:	cb 01       	movw	r24, r22
    2678:	97 f9       	bld	r25, 7
    267a:	08 95       	ret

0000267c <__gesf2>:
    267c:	0e 94 8e 12 	call	0x251c	; 0x251c <__fp_cmp>
    2680:	08 f4       	brcc	.+2      	; 0x2684 <__gesf2+0x8>
    2682:	8f ef       	ldi	r24, 0xFF	; 255
    2684:	08 95       	ret

00002686 <__mulsf3>:
    2686:	0e 94 56 13 	call	0x26ac	; 0x26ac <__mulsf3x>
    268a:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__fp_round>
    268e:	0e 94 f6 12 	call	0x25ec	; 0x25ec <__fp_pscA>
    2692:	38 f0       	brcs	.+14     	; 0x26a2 <__mulsf3+0x1c>
    2694:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fp_pscB>
    2698:	20 f0       	brcs	.+8      	; 0x26a2 <__mulsf3+0x1c>
    269a:	95 23       	and	r25, r21
    269c:	11 f0       	breq	.+4      	; 0x26a2 <__mulsf3+0x1c>
    269e:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <__fp_inf>
    26a2:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__fp_nan>
    26a6:	11 24       	eor	r1, r1
    26a8:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__fp_szero>

000026ac <__mulsf3x>:
    26ac:	0e 94 15 13 	call	0x262a	; 0x262a <__fp_split3>
    26b0:	70 f3       	brcs	.-36     	; 0x268e <__mulsf3+0x8>

000026b2 <__mulsf3_pse>:
    26b2:	95 9f       	mul	r25, r21
    26b4:	c1 f3       	breq	.-16     	; 0x26a6 <__mulsf3+0x20>
    26b6:	95 0f       	add	r25, r21
    26b8:	50 e0       	ldi	r21, 0x00	; 0
    26ba:	55 1f       	adc	r21, r21
    26bc:	62 9f       	mul	r22, r18
    26be:	f0 01       	movw	r30, r0
    26c0:	72 9f       	mul	r23, r18
    26c2:	bb 27       	eor	r27, r27
    26c4:	f0 0d       	add	r31, r0
    26c6:	b1 1d       	adc	r27, r1
    26c8:	63 9f       	mul	r22, r19
    26ca:	aa 27       	eor	r26, r26
    26cc:	f0 0d       	add	r31, r0
    26ce:	b1 1d       	adc	r27, r1
    26d0:	aa 1f       	adc	r26, r26
    26d2:	64 9f       	mul	r22, r20
    26d4:	66 27       	eor	r22, r22
    26d6:	b0 0d       	add	r27, r0
    26d8:	a1 1d       	adc	r26, r1
    26da:	66 1f       	adc	r22, r22
    26dc:	82 9f       	mul	r24, r18
    26de:	22 27       	eor	r18, r18
    26e0:	b0 0d       	add	r27, r0
    26e2:	a1 1d       	adc	r26, r1
    26e4:	62 1f       	adc	r22, r18
    26e6:	73 9f       	mul	r23, r19
    26e8:	b0 0d       	add	r27, r0
    26ea:	a1 1d       	adc	r26, r1
    26ec:	62 1f       	adc	r22, r18
    26ee:	83 9f       	mul	r24, r19
    26f0:	a0 0d       	add	r26, r0
    26f2:	61 1d       	adc	r22, r1
    26f4:	22 1f       	adc	r18, r18
    26f6:	74 9f       	mul	r23, r20
    26f8:	33 27       	eor	r19, r19
    26fa:	a0 0d       	add	r26, r0
    26fc:	61 1d       	adc	r22, r1
    26fe:	23 1f       	adc	r18, r19
    2700:	84 9f       	mul	r24, r20
    2702:	60 0d       	add	r22, r0
    2704:	21 1d       	adc	r18, r1
    2706:	82 2f       	mov	r24, r18
    2708:	76 2f       	mov	r23, r22
    270a:	6a 2f       	mov	r22, r26
    270c:	11 24       	eor	r1, r1
    270e:	9f 57       	subi	r25, 0x7F	; 127
    2710:	50 40       	sbci	r21, 0x00	; 0
    2712:	9a f0       	brmi	.+38     	; 0x273a <__mulsf3_pse+0x88>
    2714:	f1 f0       	breq	.+60     	; 0x2752 <__mulsf3_pse+0xa0>
    2716:	88 23       	and	r24, r24
    2718:	4a f0       	brmi	.+18     	; 0x272c <__mulsf3_pse+0x7a>
    271a:	ee 0f       	add	r30, r30
    271c:	ff 1f       	adc	r31, r31
    271e:	bb 1f       	adc	r27, r27
    2720:	66 1f       	adc	r22, r22
    2722:	77 1f       	adc	r23, r23
    2724:	88 1f       	adc	r24, r24
    2726:	91 50       	subi	r25, 0x01	; 1
    2728:	50 40       	sbci	r21, 0x00	; 0
    272a:	a9 f7       	brne	.-22     	; 0x2716 <__mulsf3_pse+0x64>
    272c:	9e 3f       	cpi	r25, 0xFE	; 254
    272e:	51 05       	cpc	r21, r1
    2730:	80 f0       	brcs	.+32     	; 0x2752 <__mulsf3_pse+0xa0>
    2732:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <__fp_inf>
    2736:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__fp_szero>
    273a:	5f 3f       	cpi	r21, 0xFF	; 255
    273c:	e4 f3       	brlt	.-8      	; 0x2736 <__mulsf3_pse+0x84>
    273e:	98 3e       	cpi	r25, 0xE8	; 232
    2740:	d4 f3       	brlt	.-12     	; 0x2736 <__mulsf3_pse+0x84>
    2742:	86 95       	lsr	r24
    2744:	77 95       	ror	r23
    2746:	67 95       	ror	r22
    2748:	b7 95       	ror	r27
    274a:	f7 95       	ror	r31
    274c:	e7 95       	ror	r30
    274e:	9f 5f       	subi	r25, 0xFF	; 255
    2750:	c1 f7       	brne	.-16     	; 0x2742 <__mulsf3_pse+0x90>
    2752:	fe 2b       	or	r31, r30
    2754:	88 0f       	add	r24, r24
    2756:	91 1d       	adc	r25, r1
    2758:	96 95       	lsr	r25
    275a:	87 95       	ror	r24
    275c:	97 f9       	bld	r25, 7
    275e:	08 95       	ret

00002760 <sin>:
    2760:	9f 93       	push	r25
    2762:	0e 94 15 14 	call	0x282a	; 0x282a <__fp_rempio2>
    2766:	0f 90       	pop	r0
    2768:	07 fc       	sbrc	r0, 7
    276a:	ee 5f       	subi	r30, 0xFE	; 254
    276c:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__fp_sinus>
    2770:	19 f4       	brne	.+6      	; 0x2778 <sin+0x18>
    2772:	16 f4       	brtc	.+4      	; 0x2778 <sin+0x18>
    2774:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__fp_nan>
    2778:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__fp_mpack>

0000277c <sqrt>:
    277c:	0e 94 1d 13 	call	0x263a	; 0x263a <__fp_splitA>
    2780:	b8 f3       	brcs	.-18     	; 0x2770 <sin+0x10>
    2782:	99 23       	and	r25, r25
    2784:	c9 f3       	breq	.-14     	; 0x2778 <sin+0x18>
    2786:	b6 f3       	brts	.-20     	; 0x2774 <sin+0x14>
    2788:	9f 57       	subi	r25, 0x7F	; 127
    278a:	55 0b       	sbc	r21, r21
    278c:	87 ff       	sbrs	r24, 7
    278e:	0e 94 0c 14 	call	0x2818	; 0x2818 <__fp_norm2>
    2792:	00 24       	eor	r0, r0
    2794:	a0 e6       	ldi	r26, 0x60	; 96
    2796:	40 ea       	ldi	r20, 0xA0	; 160
    2798:	90 01       	movw	r18, r0
    279a:	80 58       	subi	r24, 0x80	; 128
    279c:	56 95       	lsr	r21
    279e:	97 95       	ror	r25
    27a0:	28 f4       	brcc	.+10     	; 0x27ac <sqrt+0x30>
    27a2:	80 5c       	subi	r24, 0xC0	; 192
    27a4:	66 0f       	add	r22, r22
    27a6:	77 1f       	adc	r23, r23
    27a8:	88 1f       	adc	r24, r24
    27aa:	20 f0       	brcs	.+8      	; 0x27b4 <sqrt+0x38>
    27ac:	26 17       	cp	r18, r22
    27ae:	37 07       	cpc	r19, r23
    27b0:	48 07       	cpc	r20, r24
    27b2:	30 f4       	brcc	.+12     	; 0x27c0 <sqrt+0x44>
    27b4:	62 1b       	sub	r22, r18
    27b6:	73 0b       	sbc	r23, r19
    27b8:	84 0b       	sbc	r24, r20
    27ba:	20 29       	or	r18, r0
    27bc:	31 29       	or	r19, r1
    27be:	4a 2b       	or	r20, r26
    27c0:	a6 95       	lsr	r26
    27c2:	17 94       	ror	r1
    27c4:	07 94       	ror	r0
    27c6:	20 25       	eor	r18, r0
    27c8:	31 25       	eor	r19, r1
    27ca:	4a 27       	eor	r20, r26
    27cc:	58 f7       	brcc	.-42     	; 0x27a4 <sqrt+0x28>
    27ce:	66 0f       	add	r22, r22
    27d0:	77 1f       	adc	r23, r23
    27d2:	88 1f       	adc	r24, r24
    27d4:	20 f0       	brcs	.+8      	; 0x27de <sqrt+0x62>
    27d6:	26 17       	cp	r18, r22
    27d8:	37 07       	cpc	r19, r23
    27da:	48 07       	cpc	r20, r24
    27dc:	30 f4       	brcc	.+12     	; 0x27ea <sqrt+0x6e>
    27de:	62 0b       	sbc	r22, r18
    27e0:	73 0b       	sbc	r23, r19
    27e2:	84 0b       	sbc	r24, r20
    27e4:	20 0d       	add	r18, r0
    27e6:	31 1d       	adc	r19, r1
    27e8:	41 1d       	adc	r20, r1
    27ea:	a0 95       	com	r26
    27ec:	81 f7       	brne	.-32     	; 0x27ce <sqrt+0x52>
    27ee:	b9 01       	movw	r22, r18
    27f0:	84 2f       	mov	r24, r20
    27f2:	91 58       	subi	r25, 0x81	; 129
    27f4:	88 0f       	add	r24, r24
    27f6:	96 95       	lsr	r25
    27f8:	87 95       	ror	r24
    27fa:	08 95       	ret

000027fc <__fp_mpack>:
    27fc:	9f 3f       	cpi	r25, 0xFF	; 255
    27fe:	31 f0       	breq	.+12     	; 0x280c <__fp_mpack_finite+0xc>

00002800 <__fp_mpack_finite>:
    2800:	91 50       	subi	r25, 0x01	; 1
    2802:	20 f4       	brcc	.+8      	; 0x280c <__fp_mpack_finite+0xc>
    2804:	87 95       	ror	r24
    2806:	77 95       	ror	r23
    2808:	67 95       	ror	r22
    280a:	b7 95       	ror	r27
    280c:	88 0f       	add	r24, r24
    280e:	91 1d       	adc	r25, r1
    2810:	96 95       	lsr	r25
    2812:	87 95       	ror	r24
    2814:	97 f9       	bld	r25, 7
    2816:	08 95       	ret

00002818 <__fp_norm2>:
    2818:	91 50       	subi	r25, 0x01	; 1
    281a:	50 40       	sbci	r21, 0x00	; 0
    281c:	66 0f       	add	r22, r22
    281e:	77 1f       	adc	r23, r23
    2820:	88 1f       	adc	r24, r24
    2822:	d2 f7       	brpl	.-12     	; 0x2818 <__fp_norm2>
    2824:	08 95       	ret
    2826:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__fp_nan>

0000282a <__fp_rempio2>:
    282a:	0e 94 1d 13 	call	0x263a	; 0x263a <__fp_splitA>
    282e:	d8 f3       	brcs	.-10     	; 0x2826 <__fp_norm2+0xe>
    2830:	e8 94       	clt
    2832:	e0 e0       	ldi	r30, 0x00	; 0
    2834:	bb 27       	eor	r27, r27
    2836:	9f 57       	subi	r25, 0x7F	; 127
    2838:	f0 f0       	brcs	.+60     	; 0x2876 <__fp_rempio2+0x4c>
    283a:	2a ed       	ldi	r18, 0xDA	; 218
    283c:	3f e0       	ldi	r19, 0x0F	; 15
    283e:	49 ec       	ldi	r20, 0xC9	; 201
    2840:	06 c0       	rjmp	.+12     	; 0x284e <__fp_rempio2+0x24>
    2842:	ee 0f       	add	r30, r30
    2844:	bb 0f       	add	r27, r27
    2846:	66 1f       	adc	r22, r22
    2848:	77 1f       	adc	r23, r23
    284a:	88 1f       	adc	r24, r24
    284c:	28 f0       	brcs	.+10     	; 0x2858 <__fp_rempio2+0x2e>
    284e:	b2 3a       	cpi	r27, 0xA2	; 162
    2850:	62 07       	cpc	r22, r18
    2852:	73 07       	cpc	r23, r19
    2854:	84 07       	cpc	r24, r20
    2856:	28 f0       	brcs	.+10     	; 0x2862 <__fp_rempio2+0x38>
    2858:	b2 5a       	subi	r27, 0xA2	; 162
    285a:	62 0b       	sbc	r22, r18
    285c:	73 0b       	sbc	r23, r19
    285e:	84 0b       	sbc	r24, r20
    2860:	e3 95       	inc	r30
    2862:	9a 95       	dec	r25
    2864:	72 f7       	brpl	.-36     	; 0x2842 <__fp_rempio2+0x18>
    2866:	80 38       	cpi	r24, 0x80	; 128
    2868:	30 f4       	brcc	.+12     	; 0x2876 <__fp_rempio2+0x4c>
    286a:	9a 95       	dec	r25
    286c:	bb 0f       	add	r27, r27
    286e:	66 1f       	adc	r22, r22
    2870:	77 1f       	adc	r23, r23
    2872:	88 1f       	adc	r24, r24
    2874:	d2 f7       	brpl	.-12     	; 0x286a <__fp_rempio2+0x40>
    2876:	90 48       	sbci	r25, 0x80	; 128
    2878:	0c 94 00 14 	jmp	0x2800	; 0x2800 <__fp_mpack_finite>

0000287c <__fp_sinus>:
    287c:	ef 93       	push	r30
    287e:	e0 ff       	sbrs	r30, 0
    2880:	07 c0       	rjmp	.+14     	; 0x2890 <__fp_sinus+0x14>
    2882:	a2 ea       	ldi	r26, 0xA2	; 162
    2884:	2a ed       	ldi	r18, 0xDA	; 218
    2886:	3f e0       	ldi	r19, 0x0F	; 15
    2888:	49 ec       	ldi	r20, 0xC9	; 201
    288a:	5f eb       	ldi	r21, 0xBF	; 191
    288c:	0e 94 14 11 	call	0x2228	; 0x2228 <__addsf3x>
    2890:	0e 94 04 13 	call	0x2608	; 0x2608 <__fp_round>
    2894:	0f 90       	pop	r0
    2896:	03 94       	inc	r0
    2898:	01 fc       	sbrc	r0, 1
    289a:	90 58       	subi	r25, 0x80	; 128
    289c:	e4 ea       	ldi	r30, 0xA4	; 164
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	0c 94 e2 12 	jmp	0x25c4	; 0x25c4 <__fp_powsodd>

000028a4 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    28a4:	08 95       	ret

000028a6 <main>:

int main(void)
{
	init();
    28a6:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <init>

	initVariant();
    28aa:	0e 94 52 14 	call	0x28a4	; 0x28a4 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    28ae:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    28b2:	c0 e0       	ldi	r28, 0x00	; 0
    28b4:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    28b6:	0e 94 59 07 	call	0xeb2	; 0xeb2 <loop>
		if (serialEventRun) serialEventRun();
    28ba:	20 97       	sbiw	r28, 0x00	; 0
    28bc:	e1 f3       	breq	.-8      	; 0x28b6 <main+0x10>
    28be:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    28c2:	f9 cf       	rjmp	.-14     	; 0x28b6 <main+0x10>

000028c4 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    28c4:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <_ZN7TwoWire14rxBufferLengthE>
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	20 91 98 02 	lds	r18, 0x0298	; 0x800298 <_ZN7TwoWire13rxBufferIndexE>
    28ce:	82 1b       	sub	r24, r18
    28d0:	91 09       	sbc	r25, r1
    28d2:	08 95       	ret

000028d4 <_ZN7TwoWire4readEv>:
    28d4:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <_ZN7TwoWire13rxBufferIndexE>
    28d8:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <_ZN7TwoWire14rxBufferLengthE>
    28dc:	98 17       	cp	r25, r24
    28de:	50 f4       	brcc	.+20     	; 0x28f4 <_ZN7TwoWire4readEv+0x20>
    28e0:	e9 2f       	mov	r30, r25
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	e7 56       	subi	r30, 0x67	; 103
    28e6:	fd 4f       	sbci	r31, 0xFD	; 253
    28e8:	20 81       	ld	r18, Z
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	9f 5f       	subi	r25, 0xFF	; 255
    28ee:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <_ZN7TwoWire13rxBufferIndexE>
    28f2:	02 c0       	rjmp	.+4      	; 0x28f8 <_ZN7TwoWire4readEv+0x24>
    28f4:	2f ef       	ldi	r18, 0xFF	; 255
    28f6:	3f ef       	ldi	r19, 0xFF	; 255
    28f8:	c9 01       	movw	r24, r18
    28fa:	08 95       	ret

000028fc <_ZN7TwoWire4peekEv>:
    28fc:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <_ZN7TwoWire13rxBufferIndexE>
    2900:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <_ZN7TwoWire14rxBufferLengthE>
    2904:	e8 17       	cp	r30, r24
    2906:	30 f4       	brcc	.+12     	; 0x2914 <_ZN7TwoWire4peekEv+0x18>
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	e7 56       	subi	r30, 0x67	; 103
    290c:	fd 4f       	sbci	r31, 0xFD	; 253
    290e:	80 81       	ld	r24, Z
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	08 95       	ret
    2914:	8f ef       	ldi	r24, 0xFF	; 255
    2916:	9f ef       	ldi	r25, 0xFF	; 255
    2918:	08 95       	ret

0000291a <_ZN7TwoWire5flushEv>:
    291a:	08 95       	ret

0000291c <_ZN7TwoWire5writeEPKhj>:
    291c:	cf 92       	push	r12
    291e:	df 92       	push	r13
    2920:	ef 92       	push	r14
    2922:	ff 92       	push	r15
    2924:	0f 93       	push	r16
    2926:	1f 93       	push	r17
    2928:	cf 93       	push	r28
    292a:	df 93       	push	r29
    292c:	7c 01       	movw	r14, r24
    292e:	26 2f       	mov	r18, r22
    2930:	97 2f       	mov	r25, r23
    2932:	8a 01       	movw	r16, r20
    2934:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <_ZN7TwoWire12transmittingE>
    2938:	88 23       	and	r24, r24
    293a:	91 f0       	breq	.+36     	; 0x2960 <_ZN7TwoWire5writeEPKhj+0x44>
    293c:	c6 2f       	mov	r28, r22
    293e:	d7 2f       	mov	r29, r23
    2940:	6e 01       	movw	r12, r28
    2942:	c4 0e       	add	r12, r20
    2944:	d5 1e       	adc	r13, r21
    2946:	cc 15       	cp	r28, r12
    2948:	dd 05       	cpc	r29, r13
    294a:	71 f0       	breq	.+28     	; 0x2968 <_ZN7TwoWire5writeEPKhj+0x4c>
    294c:	69 91       	ld	r22, Y+
    294e:	d7 01       	movw	r26, r14
    2950:	ed 91       	ld	r30, X+
    2952:	fc 91       	ld	r31, X
    2954:	01 90       	ld	r0, Z+
    2956:	f0 81       	ld	r31, Z
    2958:	e0 2d       	mov	r30, r0
    295a:	c7 01       	movw	r24, r14
    295c:	09 95       	icall
    295e:	f3 cf       	rjmp	.-26     	; 0x2946 <_ZN7TwoWire5writeEPKhj+0x2a>
    2960:	64 2f       	mov	r22, r20
    2962:	82 2f       	mov	r24, r18
    2964:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <twi_transmit>
    2968:	c8 01       	movw	r24, r16
    296a:	df 91       	pop	r29
    296c:	cf 91       	pop	r28
    296e:	1f 91       	pop	r17
    2970:	0f 91       	pop	r16
    2972:	ff 90       	pop	r15
    2974:	ef 90       	pop	r14
    2976:	df 90       	pop	r13
    2978:	cf 90       	pop	r12
    297a:	08 95       	ret

0000297c <_ZN7TwoWire5writeEh>:
    297c:	cf 93       	push	r28
    297e:	df 93       	push	r29
    2980:	1f 92       	push	r1
    2982:	cd b7       	in	r28, 0x3d	; 61
    2984:	de b7       	in	r29, 0x3e	; 62
    2986:	69 83       	std	Y+1, r22	; 0x01
    2988:	20 91 73 02 	lds	r18, 0x0273	; 0x800273 <_ZN7TwoWire12transmittingE>
    298c:	22 23       	and	r18, r18
    298e:	d1 f0       	breq	.+52     	; 0x29c4 <_ZN7TwoWire5writeEh+0x48>
    2990:	20 91 74 02 	lds	r18, 0x0274	; 0x800274 <_ZN7TwoWire14txBufferLengthE>
    2994:	20 32       	cpi	r18, 0x20	; 32
    2996:	40 f0       	brcs	.+16     	; 0x29a8 <_ZN7TwoWire5writeEh+0x2c>
    2998:	21 e0       	ldi	r18, 0x01	; 1
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	fc 01       	movw	r30, r24
    299e:	33 83       	std	Z+3, r19	; 0x03
    29a0:	22 83       	std	Z+2, r18	; 0x02
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	15 c0       	rjmp	.+42     	; 0x29d2 <_ZN7TwoWire5writeEh+0x56>
    29a8:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <_ZN7TwoWire13txBufferIndexE>
    29ac:	e8 2f       	mov	r30, r24
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	ea 58       	subi	r30, 0x8A	; 138
    29b2:	fd 4f       	sbci	r31, 0xFD	; 253
    29b4:	99 81       	ldd	r25, Y+1	; 0x01
    29b6:	90 83       	st	Z, r25
    29b8:	8f 5f       	subi	r24, 0xFF	; 255
    29ba:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <_ZN7TwoWire13txBufferIndexE>
    29be:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <_ZN7TwoWire14txBufferLengthE>
    29c2:	05 c0       	rjmp	.+10     	; 0x29ce <_ZN7TwoWire5writeEh+0x52>
    29c4:	61 e0       	ldi	r22, 0x01	; 1
    29c6:	ce 01       	movw	r24, r28
    29c8:	01 96       	adiw	r24, 0x01	; 1
    29ca:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <twi_transmit>
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	0f 90       	pop	r0
    29d4:	df 91       	pop	r29
    29d6:	cf 91       	pop	r28
    29d8:	08 95       	ret

000029da <_ZN7TwoWireC1Ev>:
    29da:	fc 01       	movw	r30, r24
    29dc:	13 82       	std	Z+3, r1	; 0x03
    29de:	12 82       	std	Z+2, r1	; 0x02
    29e0:	88 ee       	ldi	r24, 0xE8	; 232
    29e2:	93 e0       	ldi	r25, 0x03	; 3
    29e4:	a0 e0       	ldi	r26, 0x00	; 0
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	84 83       	std	Z+4, r24	; 0x04
    29ea:	95 83       	std	Z+5, r25	; 0x05
    29ec:	a6 83       	std	Z+6, r26	; 0x06
    29ee:	b7 83       	std	Z+7, r27	; 0x07
    29f0:	8e e1       	ldi	r24, 0x1E	; 30
    29f2:	91 e0       	ldi	r25, 0x01	; 1
    29f4:	91 83       	std	Z+1, r25	; 0x01
    29f6:	80 83       	st	Z, r24
    29f8:	08 95       	ret

000029fa <_ZN7TwoWire5beginEv>:
    29fa:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <_ZN7TwoWire13rxBufferIndexE>
    29fe:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <_ZN7TwoWire14rxBufferLengthE>
    2a02:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <_ZN7TwoWire13txBufferIndexE>
    2a06:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <_ZN7TwoWire14txBufferLengthE>
    2a0a:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <twi_init>

00002a0e <_ZN7TwoWire17beginTransmissionEh>:
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <_ZN7TwoWire12transmittingE>
    2a14:	60 93 96 02 	sts	0x0296, r22	; 0x800296 <_ZN7TwoWire9txAddressE>
    2a18:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <_ZN7TwoWire13txBufferIndexE>
    2a1c:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <_ZN7TwoWire14txBufferLengthE>
    2a20:	08 95       	ret

00002a22 <_ZN7TwoWire17beginTransmissionEi>:
    2a22:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <_ZN7TwoWire17beginTransmissionEh>

00002a26 <_ZN7TwoWire15endTransmissionEh>:
    2a26:	0f 93       	push	r16
    2a28:	06 2f       	mov	r16, r22
    2a2a:	21 e0       	ldi	r18, 0x01	; 1
    2a2c:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <_ZN7TwoWire14txBufferLengthE>
    2a30:	66 e7       	ldi	r22, 0x76	; 118
    2a32:	72 e0       	ldi	r23, 0x02	; 2
    2a34:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <_ZN7TwoWire9txAddressE>
    2a38:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <twi_writeTo>
    2a3c:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <_ZN7TwoWire13txBufferIndexE>
    2a40:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <_ZN7TwoWire14txBufferLengthE>
    2a44:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <_ZN7TwoWire12transmittingE>
    2a48:	0f 91       	pop	r16
    2a4a:	08 95       	ret

00002a4c <_ZN7TwoWire11requestFromEhhmhh>:
    2a4c:	4f 92       	push	r4
    2a4e:	5f 92       	push	r5
    2a50:	6f 92       	push	r6
    2a52:	7f 92       	push	r7
    2a54:	af 92       	push	r10
    2a56:	bf 92       	push	r11
    2a58:	cf 92       	push	r12
    2a5a:	ef 92       	push	r14
    2a5c:	ff 92       	push	r15
    2a5e:	0f 93       	push	r16
    2a60:	1f 93       	push	r17
    2a62:	cf 93       	push	r28
    2a64:	df 93       	push	r29
    2a66:	5c 01       	movw	r10, r24
    2a68:	f6 2e       	mov	r15, r22
    2a6a:	d4 2f       	mov	r29, r20
    2a6c:	28 01       	movw	r4, r16
    2a6e:	39 01       	movw	r6, r18
    2a70:	ee 20       	and	r14, r14
    2a72:	21 f1       	breq	.+72     	; 0x2abc <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2a74:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <_ZN7TwoWire17beginTransmissionEh>
    2a78:	ce 2d       	mov	r28, r14
    2a7a:	c4 30       	cpi	r28, 0x04	; 4
    2a7c:	08 f0       	brcs	.+2      	; 0x2a80 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2a7e:	c3 e0       	ldi	r28, 0x03	; 3
    2a80:	c1 50       	subi	r28, 0x01	; 1
    2a82:	c0 f0       	brcs	.+48     	; 0x2ab4 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2a84:	d5 01       	movw	r26, r10
    2a86:	ed 91       	ld	r30, X+
    2a88:	fc 91       	ld	r31, X
    2a8a:	b8 e0       	ldi	r27, 0x08	; 8
    2a8c:	cb 9f       	mul	r28, r27
    2a8e:	c0 01       	movw	r24, r0
    2a90:	11 24       	eor	r1, r1
    2a92:	a3 01       	movw	r20, r6
    2a94:	92 01       	movw	r18, r4
    2a96:	04 c0       	rjmp	.+8      	; 0x2aa0 <_ZN7TwoWire11requestFromEhhmhh+0x54>
    2a98:	56 95       	lsr	r21
    2a9a:	47 95       	ror	r20
    2a9c:	37 95       	ror	r19
    2a9e:	27 95       	ror	r18
    2aa0:	8a 95       	dec	r24
    2aa2:	d2 f7       	brpl	.-12     	; 0x2a98 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    2aa4:	ca 01       	movw	r24, r20
    2aa6:	b9 01       	movw	r22, r18
    2aa8:	01 90       	ld	r0, Z+
    2aaa:	f0 81       	ld	r31, Z
    2aac:	e0 2d       	mov	r30, r0
    2aae:	c5 01       	movw	r24, r10
    2ab0:	09 95       	icall
    2ab2:	e6 cf       	rjmp	.-52     	; 0x2a80 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2ab4:	60 e0       	ldi	r22, 0x00	; 0
    2ab6:	c5 01       	movw	r24, r10
    2ab8:	0e 94 13 15 	call	0x2a26	; 0x2a26 <_ZN7TwoWire15endTransmissionEh>
    2abc:	4d 2f       	mov	r20, r29
    2abe:	d1 32       	cpi	r29, 0x21	; 33
    2ac0:	08 f0       	brcs	.+2      	; 0x2ac4 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2ac2:	40 e2       	ldi	r20, 0x20	; 32
    2ac4:	2c 2d       	mov	r18, r12
    2ac6:	69 e9       	ldi	r22, 0x99	; 153
    2ac8:	72 e0       	ldi	r23, 0x02	; 2
    2aca:	8f 2d       	mov	r24, r15
    2acc:	0e 94 43 17 	call	0x2e86	; 0x2e86 <twi_readFrom>
    2ad0:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <_ZN7TwoWire13rxBufferIndexE>
    2ad4:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <_ZN7TwoWire14rxBufferLengthE>
    2ad8:	df 91       	pop	r29
    2ada:	cf 91       	pop	r28
    2adc:	1f 91       	pop	r17
    2ade:	0f 91       	pop	r16
    2ae0:	ff 90       	pop	r15
    2ae2:	ef 90       	pop	r14
    2ae4:	cf 90       	pop	r12
    2ae6:	bf 90       	pop	r11
    2ae8:	af 90       	pop	r10
    2aea:	7f 90       	pop	r7
    2aec:	6f 90       	pop	r6
    2aee:	5f 90       	pop	r5
    2af0:	4f 90       	pop	r4
    2af2:	08 95       	ret

00002af4 <_ZN7TwoWire11requestFromEhhh>:
    2af4:	cf 92       	push	r12
    2af6:	ef 92       	push	r14
    2af8:	0f 93       	push	r16
    2afa:	1f 93       	push	r17
    2afc:	c2 2e       	mov	r12, r18
    2afe:	e1 2c       	mov	r14, r1
    2b00:	00 e0       	ldi	r16, 0x00	; 0
    2b02:	10 e0       	ldi	r17, 0x00	; 0
    2b04:	98 01       	movw	r18, r16
    2b06:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <_ZN7TwoWire11requestFromEhhmhh>
    2b0a:	1f 91       	pop	r17
    2b0c:	0f 91       	pop	r16
    2b0e:	ef 90       	pop	r14
    2b10:	cf 90       	pop	r12
    2b12:	08 95       	ret

00002b14 <_ZN7TwoWire11requestFromEii>:
    2b14:	21 e0       	ldi	r18, 0x01	; 1
    2b16:	0c 94 7a 15 	jmp	0x2af4	; 0x2af4 <_ZN7TwoWire11requestFromEhhh>

00002b1a <_ZN7TwoWire15endTransmissionEv>:
    2b1a:	61 e0       	ldi	r22, 0x01	; 1
    2b1c:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <_ZN7TwoWire15endTransmissionEh>

00002b20 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2b20:	87 e6       	ldi	r24, 0x67	; 103
    2b22:	92 e0       	ldi	r25, 0x02	; 2
    2b24:	0c 94 ed 14 	jmp	0x29da	; 0x29da <_ZN7TwoWireC1Ev>

00002b28 <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    2b28:	1f 92       	push	r1
    2b2a:	0f 92       	push	r0
    2b2c:	0f b6       	in	r0, 0x3f	; 63
    2b2e:	0f 92       	push	r0
    2b30:	11 24       	eor	r1, r1
    2b32:	2f 93       	push	r18
    2b34:	3f 93       	push	r19
    2b36:	8f 93       	push	r24
    2b38:	9f 93       	push	r25
    2b3a:	af 93       	push	r26
    2b3c:	bf 93       	push	r27
    2b3e:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <timer0_millis>
    2b42:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <timer0_millis+0x1>
    2b46:	a0 91 bc 02 	lds	r26, 0x02BC	; 0x8002bc <timer0_millis+0x2>
    2b4a:	b0 91 bd 02 	lds	r27, 0x02BD	; 0x8002bd <timer0_millis+0x3>
    2b4e:	30 91 b9 02 	lds	r19, 0x02B9	; 0x8002b9 <timer0_fract>
    2b52:	23 e0       	ldi	r18, 0x03	; 3
    2b54:	23 0f       	add	r18, r19
    2b56:	2d 37       	cpi	r18, 0x7D	; 125
    2b58:	20 f4       	brcc	.+8      	; 0x2b62 <__vector_16+0x3a>
    2b5a:	01 96       	adiw	r24, 0x01	; 1
    2b5c:	a1 1d       	adc	r26, r1
    2b5e:	b1 1d       	adc	r27, r1
    2b60:	05 c0       	rjmp	.+10     	; 0x2b6c <__vector_16+0x44>
    2b62:	26 e8       	ldi	r18, 0x86	; 134
    2b64:	23 0f       	add	r18, r19
    2b66:	02 96       	adiw	r24, 0x02	; 2
    2b68:	a1 1d       	adc	r26, r1
    2b6a:	b1 1d       	adc	r27, r1
    2b6c:	20 93 b9 02 	sts	0x02B9, r18	; 0x8002b9 <timer0_fract>
    2b70:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <timer0_millis>
    2b74:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <timer0_millis+0x1>
    2b78:	a0 93 bc 02 	sts	0x02BC, r26	; 0x8002bc <timer0_millis+0x2>
    2b7c:	b0 93 bd 02 	sts	0x02BD, r27	; 0x8002bd <timer0_millis+0x3>
    2b80:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <timer0_overflow_count>
    2b84:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <timer0_overflow_count+0x1>
    2b88:	a0 91 c0 02 	lds	r26, 0x02C0	; 0x8002c0 <timer0_overflow_count+0x2>
    2b8c:	b0 91 c1 02 	lds	r27, 0x02C1	; 0x8002c1 <timer0_overflow_count+0x3>
    2b90:	01 96       	adiw	r24, 0x01	; 1
    2b92:	a1 1d       	adc	r26, r1
    2b94:	b1 1d       	adc	r27, r1
    2b96:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <timer0_overflow_count>
    2b9a:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <timer0_overflow_count+0x1>
    2b9e:	a0 93 c0 02 	sts	0x02C0, r26	; 0x8002c0 <timer0_overflow_count+0x2>
    2ba2:	b0 93 c1 02 	sts	0x02C1, r27	; 0x8002c1 <timer0_overflow_count+0x3>
    2ba6:	bf 91       	pop	r27
    2ba8:	af 91       	pop	r26
    2baa:	9f 91       	pop	r25
    2bac:	8f 91       	pop	r24
    2bae:	3f 91       	pop	r19
    2bb0:	2f 91       	pop	r18
    2bb2:	0f 90       	pop	r0
    2bb4:	0f be       	out	0x3f, r0	; 63
    2bb6:	0f 90       	pop	r0
    2bb8:	1f 90       	pop	r1
    2bba:	18 95       	reti

00002bbc <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2bbc:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2bbe:	f8 94       	cli
	m = timer0_overflow_count;
    2bc0:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <timer0_overflow_count>
    2bc4:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <timer0_overflow_count+0x1>
    2bc8:	a0 91 c0 02 	lds	r26, 0x02C0	; 0x8002c0 <timer0_overflow_count+0x2>
    2bcc:	b0 91 c1 02 	lds	r27, 0x02C1	; 0x8002c1 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    2bd0:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2bd2:	a8 9b       	sbis	0x15, 0	; 21
    2bd4:	05 c0       	rjmp	.+10     	; 0x2be0 <micros+0x24>
    2bd6:	2f 3f       	cpi	r18, 0xFF	; 255
    2bd8:	19 f0       	breq	.+6      	; 0x2be0 <micros+0x24>
		m++;
    2bda:	01 96       	adiw	r24, 0x01	; 1
    2bdc:	a1 1d       	adc	r26, r1
    2bde:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2be0:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2be2:	ba 2f       	mov	r27, r26
    2be4:	a9 2f       	mov	r26, r25
    2be6:	98 2f       	mov	r25, r24
    2be8:	88 27       	eor	r24, r24
    2bea:	82 0f       	add	r24, r18
    2bec:	91 1d       	adc	r25, r1
    2bee:	a1 1d       	adc	r26, r1
    2bf0:	b1 1d       	adc	r27, r1
    2bf2:	bc 01       	movw	r22, r24
    2bf4:	cd 01       	movw	r24, r26
    2bf6:	42 e0       	ldi	r20, 0x02	; 2
    2bf8:	66 0f       	add	r22, r22
    2bfa:	77 1f       	adc	r23, r23
    2bfc:	88 1f       	adc	r24, r24
    2bfe:	99 1f       	adc	r25, r25
    2c00:	4a 95       	dec	r20
    2c02:	d1 f7       	brne	.-12     	; 0x2bf8 <micros+0x3c>
}
    2c04:	08 95       	ret

00002c06 <delay>:

void delay(unsigned long ms)
{
    2c06:	8f 92       	push	r8
    2c08:	9f 92       	push	r9
    2c0a:	af 92       	push	r10
    2c0c:	bf 92       	push	r11
    2c0e:	cf 92       	push	r12
    2c10:	df 92       	push	r13
    2c12:	ef 92       	push	r14
    2c14:	ff 92       	push	r15
    2c16:	6b 01       	movw	r12, r22
    2c18:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    2c1a:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <micros>
    2c1e:	4b 01       	movw	r8, r22
    2c20:	5c 01       	movw	r10, r24

	while (ms > 0) {
    2c22:	c1 14       	cp	r12, r1
    2c24:	d1 04       	cpc	r13, r1
    2c26:	e1 04       	cpc	r14, r1
    2c28:	f1 04       	cpc	r15, r1
    2c2a:	01 f1       	breq	.+64     	; 0x2c6c <delay+0x66>
		yield();
    2c2c:	0e 94 24 17 	call	0x2e48	; 0x2e48 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    2c30:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <micros>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	88 19       	sub	r24, r8
    2c3a:	99 09       	sbc	r25, r9
    2c3c:	aa 09       	sbc	r26, r10
    2c3e:	bb 09       	sbc	r27, r11
    2c40:	88 3e       	cpi	r24, 0xE8	; 232
    2c42:	93 40       	sbci	r25, 0x03	; 3
    2c44:	a1 05       	cpc	r26, r1
    2c46:	b1 05       	cpc	r27, r1
    2c48:	60 f3       	brcs	.-40     	; 0x2c22 <delay+0x1c>
			ms--;
    2c4a:	21 e0       	ldi	r18, 0x01	; 1
    2c4c:	c2 1a       	sub	r12, r18
    2c4e:	d1 08       	sbc	r13, r1
    2c50:	e1 08       	sbc	r14, r1
    2c52:	f1 08       	sbc	r15, r1
			start += 1000;
    2c54:	88 ee       	ldi	r24, 0xE8	; 232
    2c56:	88 0e       	add	r8, r24
    2c58:	83 e0       	ldi	r24, 0x03	; 3
    2c5a:	98 1e       	adc	r9, r24
    2c5c:	a1 1c       	adc	r10, r1
    2c5e:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2c60:	c1 14       	cp	r12, r1
    2c62:	d1 04       	cpc	r13, r1
    2c64:	e1 04       	cpc	r14, r1
    2c66:	f1 04       	cpc	r15, r1
    2c68:	19 f7       	brne	.-58     	; 0x2c30 <delay+0x2a>
    2c6a:	db cf       	rjmp	.-74     	; 0x2c22 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    2c6c:	ff 90       	pop	r15
    2c6e:	ef 90       	pop	r14
    2c70:	df 90       	pop	r13
    2c72:	cf 90       	pop	r12
    2c74:	bf 90       	pop	r11
    2c76:	af 90       	pop	r10
    2c78:	9f 90       	pop	r9
    2c7a:	8f 90       	pop	r8
    2c7c:	08 95       	ret

00002c7e <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2c7e:	82 30       	cpi	r24, 0x02	; 2
    2c80:	91 05       	cpc	r25, r1
    2c82:	38 f0       	brcs	.+14     	; 0x2c92 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    2c84:	88 0f       	add	r24, r24
    2c86:	99 1f       	adc	r25, r25
    2c88:	88 0f       	add	r24, r24
    2c8a:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    2c8c:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
    2c90:	f1 f7       	brne	.-4      	; 0x2c8e <delayMicroseconds+0x10>
    2c92:	08 95       	ret

00002c94 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2c94:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2c96:	84 b5       	in	r24, 0x24	; 36
    2c98:	82 60       	ori	r24, 0x02	; 2
    2c9a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2c9c:	84 b5       	in	r24, 0x24	; 36
    2c9e:	81 60       	ori	r24, 0x01	; 1
    2ca0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2ca2:	85 b5       	in	r24, 0x25	; 37
    2ca4:	82 60       	ori	r24, 0x02	; 2
    2ca6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2ca8:	85 b5       	in	r24, 0x25	; 37
    2caa:	81 60       	ori	r24, 0x01	; 1
    2cac:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2cae:	ee e6       	ldi	r30, 0x6E	; 110
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	80 81       	ld	r24, Z
    2cb4:	81 60       	ori	r24, 0x01	; 1
    2cb6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2cb8:	e1 e8       	ldi	r30, 0x81	; 129
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2cbe:	80 81       	ld	r24, Z
    2cc0:	82 60       	ori	r24, 0x02	; 2
    2cc2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2cc4:	80 81       	ld	r24, Z
    2cc6:	81 60       	ori	r24, 0x01	; 1
    2cc8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2cca:	e0 e8       	ldi	r30, 0x80	; 128
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	80 81       	ld	r24, Z
    2cd0:	81 60       	ori	r24, 0x01	; 1
    2cd2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2cd4:	e1 eb       	ldi	r30, 0xB1	; 177
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	80 81       	ld	r24, Z
    2cda:	84 60       	ori	r24, 0x04	; 4
    2cdc:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2cde:	e0 eb       	ldi	r30, 0xB0	; 176
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	80 81       	ld	r24, Z
    2ce4:	81 60       	ori	r24, 0x01	; 1
    2ce6:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2ce8:	ea e7       	ldi	r30, 0x7A	; 122
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	80 81       	ld	r24, Z
    2cee:	84 60       	ori	r24, 0x04	; 4
    2cf0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2cf2:	80 81       	ld	r24, Z
    2cf4:	82 60       	ori	r24, 0x02	; 2
    2cf6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2cf8:	80 81       	ld	r24, Z
    2cfa:	81 60       	ori	r24, 0x01	; 1
    2cfc:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2cfe:	80 81       	ld	r24, Z
    2d00:	80 68       	ori	r24, 0x80	; 128
    2d02:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2d04:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2d08:	08 95       	ret

00002d0a <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    2d0a:	8e 30       	cpi	r24, 0x0E	; 14
    2d0c:	08 f0       	brcs	.+2      	; 0x2d10 <analogRead+0x6>
    2d0e:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    2d10:	87 70       	andi	r24, 0x07	; 7
    2d12:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <analog_reference>
    2d16:	90 e4       	ldi	r25, 0x40	; 64
    2d18:	29 9f       	mul	r18, r25
    2d1a:	90 01       	movw	r18, r0
    2d1c:	11 24       	eor	r1, r1
    2d1e:	82 2b       	or	r24, r18
    2d20:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    2d24:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2d28:	80 64       	ori	r24, 0x40	; 64
    2d2a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    2d2e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2d32:	86 fd       	sbrc	r24, 6
    2d34:	fc cf       	rjmp	.-8      	; 0x2d2e <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    2d36:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    2d3a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
}
    2d40:	92 2b       	or	r25, r18
    2d42:	08 95       	ret

00002d44 <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
    2d44:	83 30       	cpi	r24, 0x03	; 3
    2d46:	81 f0       	breq	.+32     	; 0x2d68 <turnOffPWM+0x24>
    2d48:	28 f4       	brcc	.+10     	; 0x2d54 <turnOffPWM+0x10>
    2d4a:	81 30       	cpi	r24, 0x01	; 1
    2d4c:	99 f0       	breq	.+38     	; 0x2d74 <turnOffPWM+0x30>
    2d4e:	82 30       	cpi	r24, 0x02	; 2
    2d50:	a1 f0       	breq	.+40     	; 0x2d7a <turnOffPWM+0x36>
    2d52:	08 95       	ret
    2d54:	87 30       	cpi	r24, 0x07	; 7
    2d56:	a9 f0       	breq	.+42     	; 0x2d82 <turnOffPWM+0x3e>
    2d58:	88 30       	cpi	r24, 0x08	; 8
    2d5a:	b9 f0       	breq	.+46     	; 0x2d8a <turnOffPWM+0x46>
    2d5c:	84 30       	cpi	r24, 0x04	; 4
    2d5e:	d1 f4       	brne	.+52     	; 0x2d94 <turnOffPWM+0x50>
    2d60:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2d64:	8f 7d       	andi	r24, 0xDF	; 223
    2d66:	03 c0       	rjmp	.+6      	; 0x2d6e <turnOffPWM+0x2a>
    2d68:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2d6c:	8f 77       	andi	r24, 0x7F	; 127
    2d6e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2d72:	08 95       	ret
    2d74:	84 b5       	in	r24, 0x24	; 36
    2d76:	8f 77       	andi	r24, 0x7F	; 127
    2d78:	02 c0       	rjmp	.+4      	; 0x2d7e <turnOffPWM+0x3a>
    2d7a:	84 b5       	in	r24, 0x24	; 36
    2d7c:	8f 7d       	andi	r24, 0xDF	; 223
    2d7e:	84 bd       	out	0x24, r24	; 36
    2d80:	08 95       	ret
    2d82:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2d86:	8f 77       	andi	r24, 0x7F	; 127
    2d88:	03 c0       	rjmp	.+6      	; 0x2d90 <turnOffPWM+0x4c>
    2d8a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2d8e:	8f 7d       	andi	r24, 0xDF	; 223
    2d90:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2d94:	08 95       	ret

00002d96 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2d96:	1f 93       	push	r17
    2d98:	cf 93       	push	r28
    2d9a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2d9c:	28 2f       	mov	r18, r24
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	f9 01       	movw	r30, r18
    2da2:	ee 53       	subi	r30, 0x3E	; 62
    2da4:	ff 4f       	sbci	r31, 0xFF	; 255
    2da6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2da8:	f9 01       	movw	r30, r18
    2daa:	ea 52       	subi	r30, 0x2A	; 42
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2db0:	f9 01       	movw	r30, r18
    2db2:	e6 51       	subi	r30, 0x16	; 22
    2db4:	ff 4f       	sbci	r31, 0xFF	; 255
    2db6:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2db8:	cc 23       	and	r28, r28
    2dba:	c9 f0       	breq	.+50     	; 0x2dee <digitalWrite+0x58>
    2dbc:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2dbe:	81 11       	cpse	r24, r1
    2dc0:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <turnOffPWM>

	out = portOutputRegister(port);
    2dc4:	ec 2f       	mov	r30, r28
    2dc6:	f0 e0       	ldi	r31, 0x00	; 0
    2dc8:	ee 0f       	add	r30, r30
    2dca:	ff 1f       	adc	r31, r31
    2dcc:	e8 5f       	subi	r30, 0xF8	; 248
    2dce:	fe 4f       	sbci	r31, 0xFE	; 254
    2dd0:	a5 91       	lpm	r26, Z+
    2dd2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2dd4:	8f b7       	in	r24, 0x3f	; 63
	cli();
    2dd6:	f8 94       	cli

	if (val == LOW) {
    2dd8:	11 11       	cpse	r17, r1
    2dda:	05 c0       	rjmp	.+10     	; 0x2de6 <digitalWrite+0x50>
		*out &= ~bit;
    2ddc:	9c 91       	ld	r25, X
    2dde:	ed 2f       	mov	r30, r29
    2de0:	e0 95       	com	r30
    2de2:	e9 23       	and	r30, r25
    2de4:	02 c0       	rjmp	.+4      	; 0x2dea <digitalWrite+0x54>
	} else {
		*out |= bit;
    2de6:	ec 91       	ld	r30, X
    2de8:	ed 2b       	or	r30, r29
    2dea:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    2dec:	8f bf       	out	0x3f, r24	; 63
}
    2dee:	df 91       	pop	r29
    2df0:	cf 91       	pop	r28
    2df2:	1f 91       	pop	r17
    2df4:	08 95       	ret

00002df6 <digitalRead>:

int digitalRead(uint8_t pin)
{
    2df6:	cf 93       	push	r28
    2df8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2dfa:	28 2f       	mov	r18, r24
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	f9 01       	movw	r30, r18
    2e00:	ee 53       	subi	r30, 0x3E	; 62
    2e02:	ff 4f       	sbci	r31, 0xFF	; 255
    2e04:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2e06:	f9 01       	movw	r30, r18
    2e08:	ea 52       	subi	r30, 0x2A	; 42
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2e0e:	f9 01       	movw	r30, r18
    2e10:	e6 51       	subi	r30, 0x16	; 22
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    2e16:	cc 23       	and	r28, r28
    2e18:	91 f0       	breq	.+36     	; 0x2e3e <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2e1a:	81 11       	cpse	r24, r1
    2e1c:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    2e20:	ec 2f       	mov	r30, r28
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	ee 0f       	add	r30, r30
    2e26:	ff 1f       	adc	r31, r31
    2e28:	e2 50       	subi	r30, 0x02	; 2
    2e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2c:	a5 91       	lpm	r26, Z+
    2e2e:	b4 91       	lpm	r27, Z
    2e30:	ec 91       	ld	r30, X
    2e32:	ed 23       	and	r30, r29
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	21 f4       	brne	.+8      	; 0x2e42 <digitalRead+0x4c>
    2e3a:	80 e0       	ldi	r24, 0x00	; 0
    2e3c:	02 c0       	rjmp	.+4      	; 0x2e42 <digitalRead+0x4c>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2e42:	df 91       	pop	r29
    2e44:	cf 91       	pop	r28
    2e46:	08 95       	ret

00002e48 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2e48:	08 95       	ret

00002e4a <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2e4a:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <twi_state>
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <twi_sendStop>
    2e54:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <twi_inRepStart>
    2e58:	61 e0       	ldi	r22, 0x01	; 1
    2e5a:	82 e1       	ldi	r24, 0x12	; 18
    2e5c:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <digitalWrite>
    2e60:	61 e0       	ldi	r22, 0x01	; 1
    2e62:	83 e1       	ldi	r24, 0x13	; 19
    2e64:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <digitalWrite>
    2e68:	e9 eb       	ldi	r30, 0xB9	; 185
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	80 81       	ld	r24, Z
    2e6e:	8e 7f       	andi	r24, 0xFE	; 254
    2e70:	80 83       	st	Z, r24
    2e72:	80 81       	ld	r24, Z
    2e74:	8d 7f       	andi	r24, 0xFD	; 253
    2e76:	80 83       	st	Z, r24
    2e78:	88 e4       	ldi	r24, 0x48	; 72
    2e7a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2e7e:	85 e4       	ldi	r24, 0x45	; 69
    2e80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2e84:	08 95       	ret

00002e86 <twi_readFrom>:
    2e86:	41 32       	cpi	r20, 0x21	; 33
    2e88:	08 f0       	brcs	.+2      	; 0x2e8c <twi_readFrom+0x6>
    2e8a:	43 c0       	rjmp	.+134    	; 0x2f12 <twi_readFrom+0x8c>
    2e8c:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <twi_state>
    2e90:	91 11       	cpse	r25, r1
    2e92:	fc cf       	rjmp	.-8      	; 0x2e8c <twi_readFrom+0x6>
    2e94:	91 e0       	ldi	r25, 0x01	; 1
    2e96:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <twi_state>
    2e9a:	20 93 2d 03 	sts	0x032D, r18	; 0x80032d <twi_sendStop>
    2e9e:	2f ef       	ldi	r18, 0xFF	; 255
    2ea0:	20 93 c2 02 	sts	0x02C2, r18	; 0x8002c2 <twi_error>
    2ea4:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <twi_masterBufferIndex>
    2ea8:	24 0f       	add	r18, r20
    2eaa:	20 93 06 03 	sts	0x0306, r18	; 0x800306 <twi_masterBufferLength>
    2eae:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <twi_slarw>
    2eb2:	90 91 2e 03 	lds	r25, 0x032E	; 0x80032e <twi_slarw>
    2eb6:	88 0f       	add	r24, r24
    2eb8:	89 2b       	or	r24, r25
    2eba:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <twi_slarw>
    2ebe:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <twi_inRepStart>
    2ec2:	81 30       	cpi	r24, 0x01	; 1
    2ec4:	61 f4       	brne	.+24     	; 0x2ede <twi_readFrom+0x58>
    2ec6:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <twi_inRepStart>
    2eca:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <twi_slarw>
    2ece:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2ed2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2ed6:	83 fd       	sbrc	r24, 3
    2ed8:	f8 cf       	rjmp	.-16     	; 0x2eca <twi_readFrom+0x44>
    2eda:	85 ec       	ldi	r24, 0xC5	; 197
    2edc:	01 c0       	rjmp	.+2      	; 0x2ee0 <twi_readFrom+0x5a>
    2ede:	85 ee       	ldi	r24, 0xE5	; 229
    2ee0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2ee4:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <twi_state>
    2ee8:	81 30       	cpi	r24, 0x01	; 1
    2eea:	e1 f3       	breq	.-8      	; 0x2ee4 <twi_readFrom+0x5e>
    2eec:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <twi_masterBufferIndex>
    2ef0:	84 17       	cp	r24, r20
    2ef2:	10 f4       	brcc	.+4      	; 0x2ef8 <twi_readFrom+0x72>
    2ef4:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <twi_masterBufferIndex>
    2ef8:	28 e0       	ldi	r18, 0x08	; 8
    2efa:	33 e0       	ldi	r19, 0x03	; 3
    2efc:	fb 01       	movw	r30, r22
    2efe:	d9 01       	movw	r26, r18
    2f00:	8a 2f       	mov	r24, r26
    2f02:	82 1b       	sub	r24, r18
    2f04:	84 17       	cp	r24, r20
    2f06:	18 f4       	brcc	.+6      	; 0x2f0e <twi_readFrom+0x88>
    2f08:	8d 91       	ld	r24, X+
    2f0a:	81 93       	st	Z+, r24
    2f0c:	f9 cf       	rjmp	.-14     	; 0x2f00 <twi_readFrom+0x7a>
    2f0e:	84 2f       	mov	r24, r20
    2f10:	08 95       	ret
    2f12:	80 e0       	ldi	r24, 0x00	; 0
    2f14:	08 95       	ret

00002f16 <twi_writeTo>:
    2f16:	0f 93       	push	r16
    2f18:	41 32       	cpi	r20, 0x21	; 33
    2f1a:	08 f0       	brcs	.+2      	; 0x2f1e <twi_writeTo+0x8>
    2f1c:	4a c0       	rjmp	.+148    	; 0x2fb2 <twi_writeTo+0x9c>
    2f1e:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <twi_state>
    2f22:	91 11       	cpse	r25, r1
    2f24:	fc cf       	rjmp	.-8      	; 0x2f1e <twi_writeTo+0x8>
    2f26:	32 e0       	ldi	r19, 0x02	; 2
    2f28:	30 93 2f 03 	sts	0x032F, r19	; 0x80032f <twi_state>
    2f2c:	00 93 2d 03 	sts	0x032D, r16	; 0x80032d <twi_sendStop>
    2f30:	3f ef       	ldi	r19, 0xFF	; 255
    2f32:	30 93 c2 02 	sts	0x02C2, r19	; 0x8002c2 <twi_error>
    2f36:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <twi_masterBufferIndex>
    2f3a:	40 93 06 03 	sts	0x0306, r20	; 0x800306 <twi_masterBufferLength>
    2f3e:	fb 01       	movw	r30, r22
    2f40:	68 e0       	ldi	r22, 0x08	; 8
    2f42:	73 e0       	ldi	r23, 0x03	; 3
    2f44:	db 01       	movw	r26, r22
    2f46:	3a 2f       	mov	r19, r26
    2f48:	36 1b       	sub	r19, r22
    2f4a:	34 17       	cp	r19, r20
    2f4c:	18 f4       	brcc	.+6      	; 0x2f54 <twi_writeTo+0x3e>
    2f4e:	31 91       	ld	r19, Z+
    2f50:	3d 93       	st	X+, r19
    2f52:	f9 cf       	rjmp	.-14     	; 0x2f46 <twi_writeTo+0x30>
    2f54:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <twi_slarw>
    2f58:	30 91 2e 03 	lds	r19, 0x032E	; 0x80032e <twi_slarw>
    2f5c:	88 0f       	add	r24, r24
    2f5e:	83 2b       	or	r24, r19
    2f60:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <twi_slarw>
    2f64:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <twi_inRepStart>
    2f68:	81 30       	cpi	r24, 0x01	; 1
    2f6a:	61 f4       	brne	.+24     	; 0x2f84 <twi_writeTo+0x6e>
    2f6c:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <twi_inRepStart>
    2f70:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <twi_slarw>
    2f74:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2f78:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2f7c:	83 fd       	sbrc	r24, 3
    2f7e:	f8 cf       	rjmp	.-16     	; 0x2f70 <twi_writeTo+0x5a>
    2f80:	85 ec       	ldi	r24, 0xC5	; 197
    2f82:	01 c0       	rjmp	.+2      	; 0x2f86 <twi_writeTo+0x70>
    2f84:	85 ee       	ldi	r24, 0xE5	; 229
    2f86:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2f8a:	22 23       	and	r18, r18
    2f8c:	21 f0       	breq	.+8      	; 0x2f96 <twi_writeTo+0x80>
    2f8e:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <twi_state>
    2f92:	82 30       	cpi	r24, 0x02	; 2
    2f94:	d1 f3       	breq	.-12     	; 0x2f8a <twi_writeTo+0x74>
    2f96:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <twi_error>
    2f9a:	8f 3f       	cpi	r24, 0xFF	; 255
    2f9c:	79 f0       	breq	.+30     	; 0x2fbc <twi_writeTo+0xa6>
    2f9e:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <twi_error>
    2fa2:	80 32       	cpi	r24, 0x20	; 32
    2fa4:	41 f0       	breq	.+16     	; 0x2fb6 <twi_writeTo+0xa0>
    2fa6:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <twi_error>
    2faa:	80 33       	cpi	r24, 0x30	; 48
    2fac:	31 f0       	breq	.+12     	; 0x2fba <twi_writeTo+0xa4>
    2fae:	94 e0       	ldi	r25, 0x04	; 4
    2fb0:	05 c0       	rjmp	.+10     	; 0x2fbc <twi_writeTo+0xa6>
    2fb2:	91 e0       	ldi	r25, 0x01	; 1
    2fb4:	03 c0       	rjmp	.+6      	; 0x2fbc <twi_writeTo+0xa6>
    2fb6:	92 e0       	ldi	r25, 0x02	; 2
    2fb8:	01 c0       	rjmp	.+2      	; 0x2fbc <twi_writeTo+0xa6>
    2fba:	93 e0       	ldi	r25, 0x03	; 3
    2fbc:	89 2f       	mov	r24, r25
    2fbe:	0f 91       	pop	r16
    2fc0:	08 95       	ret

00002fc2 <twi_transmit>:
    2fc2:	40 91 e4 02 	lds	r20, 0x02E4	; 0x8002e4 <twi_txBufferLength>
    2fc6:	26 2f       	mov	r18, r22
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	24 0f       	add	r18, r20
    2fcc:	31 1d       	adc	r19, r1
    2fce:	21 32       	cpi	r18, 0x21	; 33
    2fd0:	31 05       	cpc	r19, r1
    2fd2:	dc f4       	brge	.+54     	; 0x300a <twi_transmit+0x48>
    2fd4:	20 91 2f 03 	lds	r18, 0x032F	; 0x80032f <twi_state>
    2fd8:	24 30       	cpi	r18, 0x04	; 4
    2fda:	c9 f4       	brne	.+50     	; 0x300e <twi_transmit+0x4c>
    2fdc:	fc 01       	movw	r30, r24
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	86 17       	cp	r24, r22
    2fe4:	58 f4       	brcc	.+22     	; 0x2ffc <twi_transmit+0x3a>
    2fe6:	30 91 e4 02 	lds	r19, 0x02E4	; 0x8002e4 <twi_txBufferLength>
    2fea:	21 91       	ld	r18, Z+
    2fec:	dc 01       	movw	r26, r24
    2fee:	aa 51       	subi	r26, 0x1A	; 26
    2ff0:	bd 4f       	sbci	r27, 0xFD	; 253
    2ff2:	a3 0f       	add	r26, r19
    2ff4:	b1 1d       	adc	r27, r1
    2ff6:	2c 93       	st	X, r18
    2ff8:	01 96       	adiw	r24, 0x01	; 1
    2ffa:	f3 cf       	rjmp	.-26     	; 0x2fe2 <twi_transmit+0x20>
    2ffc:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <twi_txBufferLength>
    3000:	68 0f       	add	r22, r24
    3002:	60 93 e4 02 	sts	0x02E4, r22	; 0x8002e4 <twi_txBufferLength>
    3006:	80 e0       	ldi	r24, 0x00	; 0
    3008:	08 95       	ret
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	08 95       	ret
    300e:	82 e0       	ldi	r24, 0x02	; 2
    3010:	08 95       	ret

00003012 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3012:	85 ed       	ldi	r24, 0xD5	; 213
    3014:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3018:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    301c:	84 fd       	sbrc	r24, 4
    301e:	fc cf       	rjmp	.-8      	; 0x3018 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3020:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <twi_state>
    3024:	08 95       	ret

00003026 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3026:	85 ec       	ldi	r24, 0xC5	; 197
    3028:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    302c:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <twi_state>
    3030:	08 95       	ret

00003032 <__vector_24>:
}

ISR(TWI_vect)
{
    3032:	1f 92       	push	r1
    3034:	0f 92       	push	r0
    3036:	0f b6       	in	r0, 0x3f	; 63
    3038:	0f 92       	push	r0
    303a:	11 24       	eor	r1, r1
    303c:	2f 93       	push	r18
    303e:	3f 93       	push	r19
    3040:	4f 93       	push	r20
    3042:	5f 93       	push	r21
    3044:	6f 93       	push	r22
    3046:	7f 93       	push	r23
    3048:	8f 93       	push	r24
    304a:	9f 93       	push	r25
    304c:	af 93       	push	r26
    304e:	bf 93       	push	r27
    3050:	ef 93       	push	r30
    3052:	ff 93       	push	r31
  switch(TW_STATUS){
    3054:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    3058:	88 7f       	andi	r24, 0xF8	; 248
    305a:	80 36       	cpi	r24, 0x60	; 96
    305c:	09 f4       	brne	.+2      	; 0x3060 <__vector_24+0x2e>
    305e:	9e c0       	rjmp	.+316    	; 0x319c <__vector_24+0x16a>
    3060:	78 f5       	brcc	.+94     	; 0x30c0 <__vector_24+0x8e>
    3062:	88 32       	cpi	r24, 0x28	; 40
    3064:	09 f4       	brne	.+2      	; 0x3068 <__vector_24+0x36>
    3066:	5d c0       	rjmp	.+186    	; 0x3122 <__vector_24+0xf0>
    3068:	90 f4       	brcc	.+36     	; 0x308e <__vector_24+0x5c>
    306a:	80 31       	cpi	r24, 0x10	; 16
    306c:	09 f4       	brne	.+2      	; 0x3070 <__vector_24+0x3e>
    306e:	56 c0       	rjmp	.+172    	; 0x311c <__vector_24+0xea>
    3070:	38 f4       	brcc	.+14     	; 0x3080 <__vector_24+0x4e>
    3072:	88 23       	and	r24, r24
    3074:	09 f4       	brne	.+2      	; 0x3078 <__vector_24+0x46>
    3076:	f5 c0       	rjmp	.+490    	; 0x3262 <__vector_24+0x230>
    3078:	88 30       	cpi	r24, 0x08	; 8
    307a:	09 f4       	brne	.+2      	; 0x307e <__vector_24+0x4c>
    307c:	4f c0       	rjmp	.+158    	; 0x311c <__vector_24+0xea>
    307e:	f5 c0       	rjmp	.+490    	; 0x326a <__vector_24+0x238>
    3080:	88 31       	cpi	r24, 0x18	; 24
    3082:	09 f4       	brne	.+2      	; 0x3086 <__vector_24+0x54>
    3084:	4e c0       	rjmp	.+156    	; 0x3122 <__vector_24+0xf0>
    3086:	80 32       	cpi	r24, 0x20	; 32
    3088:	09 f4       	brne	.+2      	; 0x308c <__vector_24+0x5a>
    308a:	5f c0       	rjmp	.+190    	; 0x314a <__vector_24+0x118>
    308c:	ee c0       	rjmp	.+476    	; 0x326a <__vector_24+0x238>
    308e:	80 34       	cpi	r24, 0x40	; 64
    3090:	09 f4       	brne	.+2      	; 0x3094 <__vector_24+0x62>
    3092:	6a c0       	rjmp	.+212    	; 0x3168 <__vector_24+0x136>
    3094:	58 f4       	brcc	.+22     	; 0x30ac <__vector_24+0x7a>
    3096:	80 33       	cpi	r24, 0x30	; 48
    3098:	09 f4       	brne	.+2      	; 0x309c <__vector_24+0x6a>
    309a:	57 c0       	rjmp	.+174    	; 0x314a <__vector_24+0x118>
    309c:	88 33       	cpi	r24, 0x38	; 56
    309e:	09 f0       	breq	.+2      	; 0x30a2 <__vector_24+0x70>
    30a0:	e4 c0       	rjmp	.+456    	; 0x326a <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    30a2:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <twi_error>
      twi_releaseBus();
    30a6:	0e 94 13 18 	call	0x3026	; 0x3026 <twi_releaseBus>
      break;
    30aa:	df c0       	rjmp	.+446    	; 0x326a <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    30ac:	80 35       	cpi	r24, 0x50	; 80
    30ae:	09 f4       	brne	.+2      	; 0x30b2 <__vector_24+0x80>
    30b0:	4f c0       	rjmp	.+158    	; 0x3150 <__vector_24+0x11e>
    30b2:	88 35       	cpi	r24, 0x58	; 88
    30b4:	09 f4       	brne	.+2      	; 0x30b8 <__vector_24+0x86>
    30b6:	5d c0       	rjmp	.+186    	; 0x3172 <__vector_24+0x140>
    30b8:	88 34       	cpi	r24, 0x48	; 72
    30ba:	09 f0       	breq	.+2      	; 0x30be <__vector_24+0x8c>
    30bc:	d6 c0       	rjmp	.+428    	; 0x326a <__vector_24+0x238>
    30be:	d3 c0       	rjmp	.+422    	; 0x3266 <__vector_24+0x234>
    30c0:	88 39       	cpi	r24, 0x98	; 152
    30c2:	09 f4       	brne	.+2      	; 0x30c6 <__vector_24+0x94>
    30c4:	c4 c0       	rjmp	.+392    	; 0x324e <__vector_24+0x21c>
    30c6:	a8 f4       	brcc	.+42     	; 0x30f2 <__vector_24+0xc0>
    30c8:	88 37       	cpi	r24, 0x78	; 120
    30ca:	09 f4       	brne	.+2      	; 0x30ce <__vector_24+0x9c>
    30cc:	67 c0       	rjmp	.+206    	; 0x319c <__vector_24+0x16a>
    30ce:	38 f4       	brcc	.+14     	; 0x30de <__vector_24+0xac>
    30d0:	88 36       	cpi	r24, 0x68	; 104
    30d2:	09 f4       	brne	.+2      	; 0x30d6 <__vector_24+0xa4>
    30d4:	63 c0       	rjmp	.+198    	; 0x319c <__vector_24+0x16a>
    30d6:	80 37       	cpi	r24, 0x70	; 112
    30d8:	09 f4       	brne	.+2      	; 0x30dc <__vector_24+0xaa>
    30da:	60 c0       	rjmp	.+192    	; 0x319c <__vector_24+0x16a>
    30dc:	c6 c0       	rjmp	.+396    	; 0x326a <__vector_24+0x238>
    30de:	88 38       	cpi	r24, 0x88	; 136
    30e0:	09 f4       	brne	.+2      	; 0x30e4 <__vector_24+0xb2>
    30e2:	b5 c0       	rjmp	.+362    	; 0x324e <__vector_24+0x21c>
    30e4:	80 39       	cpi	r24, 0x90	; 144
    30e6:	09 f4       	brne	.+2      	; 0x30ea <__vector_24+0xb8>
    30e8:	5f c0       	rjmp	.+190    	; 0x31a8 <__vector_24+0x176>
    30ea:	80 38       	cpi	r24, 0x80	; 128
    30ec:	09 f0       	breq	.+2      	; 0x30f0 <__vector_24+0xbe>
    30ee:	bd c0       	rjmp	.+378    	; 0x326a <__vector_24+0x238>
    30f0:	5b c0       	rjmp	.+182    	; 0x31a8 <__vector_24+0x176>
    30f2:	80 3b       	cpi	r24, 0xB0	; 176
    30f4:	09 f4       	brne	.+2      	; 0x30f8 <__vector_24+0xc6>
    30f6:	83 c0       	rjmp	.+262    	; 0x31fe <__vector_24+0x1cc>
    30f8:	38 f4       	brcc	.+14     	; 0x3108 <__vector_24+0xd6>
    30fa:	80 3a       	cpi	r24, 0xA0	; 160
    30fc:	09 f4       	brne	.+2      	; 0x3100 <__vector_24+0xce>
    30fe:	66 c0       	rjmp	.+204    	; 0x31cc <__vector_24+0x19a>
    3100:	88 3a       	cpi	r24, 0xA8	; 168
    3102:	09 f4       	brne	.+2      	; 0x3106 <__vector_24+0xd4>
    3104:	7c c0       	rjmp	.+248    	; 0x31fe <__vector_24+0x1cc>
    3106:	b1 c0       	rjmp	.+354    	; 0x326a <__vector_24+0x238>
    3108:	80 3c       	cpi	r24, 0xC0	; 192
    310a:	09 f4       	brne	.+2      	; 0x310e <__vector_24+0xdc>
    310c:	a4 c0       	rjmp	.+328    	; 0x3256 <__vector_24+0x224>
    310e:	88 3c       	cpi	r24, 0xC8	; 200
    3110:	09 f4       	brne	.+2      	; 0x3114 <__vector_24+0xe2>
    3112:	a1 c0       	rjmp	.+322    	; 0x3256 <__vector_24+0x224>
    3114:	88 3b       	cpi	r24, 0xB8	; 184
    3116:	09 f4       	brne	.+2      	; 0x311a <__vector_24+0xe8>
    3118:	87 c0       	rjmp	.+270    	; 0x3228 <__vector_24+0x1f6>
    311a:	a7 c0       	rjmp	.+334    	; 0x326a <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    311c:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <twi_slarw>
    3120:	10 c0       	rjmp	.+32     	; 0x3142 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3122:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <twi_masterBufferIndex>
    3126:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <twi_masterBufferLength>
    312a:	98 17       	cp	r25, r24
    312c:	70 f5       	brcc	.+92     	; 0x318a <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    312e:	e0 91 07 03 	lds	r30, 0x0307	; 0x800307 <twi_masterBufferIndex>
    3132:	81 e0       	ldi	r24, 0x01	; 1
    3134:	8e 0f       	add	r24, r30
    3136:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <twi_masterBufferIndex>
    313a:	f0 e0       	ldi	r31, 0x00	; 0
    313c:	e8 5f       	subi	r30, 0xF8	; 248
    313e:	fc 4f       	sbci	r31, 0xFC	; 252
    3140:	80 81       	ld	r24, Z
    3142:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3146:	85 ec       	ldi	r24, 0xC5	; 197
    3148:	83 c0       	rjmp	.+262    	; 0x3250 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    314a:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <twi_error>
    314e:	8b c0       	rjmp	.+278    	; 0x3266 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3150:	e0 91 07 03 	lds	r30, 0x0307	; 0x800307 <twi_masterBufferIndex>
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	8e 0f       	add	r24, r30
    3158:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <twi_masterBufferIndex>
    315c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3160:	f0 e0       	ldi	r31, 0x00	; 0
    3162:	e8 5f       	subi	r30, 0xF8	; 248
    3164:	fc 4f       	sbci	r31, 0xFC	; 252
    3166:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3168:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <twi_masterBufferIndex>
    316c:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <twi_masterBufferLength>
    3170:	6b c0       	rjmp	.+214    	; 0x3248 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3172:	e0 91 07 03 	lds	r30, 0x0307	; 0x800307 <twi_masterBufferIndex>
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	8e 0f       	add	r24, r30
    317a:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <twi_masterBufferIndex>
    317e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3182:	f0 e0       	ldi	r31, 0x00	; 0
    3184:	e8 5f       	subi	r30, 0xF8	; 248
    3186:	fc 4f       	sbci	r31, 0xFC	; 252
    3188:	80 83       	st	Z, r24
	if (twi_sendStop)
    318a:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <twi_sendStop>
    318e:	81 11       	cpse	r24, r1
    3190:	6a c0       	rjmp	.+212    	; 0x3266 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3192:	81 e0       	ldi	r24, 0x01	; 1
    3194:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3198:	84 ea       	ldi	r24, 0xA4	; 164
    319a:	5e c0       	rjmp	.+188    	; 0x3258 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    319c:	83 e0       	ldi	r24, 0x03	; 3
    319e:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    31a2:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <twi_rxBufferIndex>
    31a6:	cf cf       	rjmp	.-98     	; 0x3146 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    31a8:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <twi_rxBufferIndex>
    31ac:	80 32       	cpi	r24, 0x20	; 32
    31ae:	08 f0       	brcs	.+2      	; 0x31b2 <__vector_24+0x180>
    31b0:	4e c0       	rjmp	.+156    	; 0x324e <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    31b2:	e0 91 c3 02 	lds	r30, 0x02C3	; 0x8002c3 <twi_rxBufferIndex>
    31b6:	81 e0       	ldi	r24, 0x01	; 1
    31b8:	8e 0f       	add	r24, r30
    31ba:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <twi_rxBufferIndex>
    31be:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    31c2:	f0 e0       	ldi	r31, 0x00	; 0
    31c4:	ec 53       	subi	r30, 0x3C	; 60
    31c6:	fd 4f       	sbci	r31, 0xFD	; 253
    31c8:	80 83       	st	Z, r24
    31ca:	bd cf       	rjmp	.-134    	; 0x3146 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    31cc:	0e 94 13 18 	call	0x3026	; 0x3026 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    31d0:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <twi_rxBufferIndex>
    31d4:	80 32       	cpi	r24, 0x20	; 32
    31d6:	30 f4       	brcc	.+12     	; 0x31e4 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    31d8:	e0 91 c3 02 	lds	r30, 0x02C3	; 0x8002c3 <twi_rxBufferIndex>
    31dc:	f0 e0       	ldi	r31, 0x00	; 0
    31de:	ec 53       	subi	r30, 0x3C	; 60
    31e0:	fd 4f       	sbci	r31, 0xFD	; 253
    31e2:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    31e4:	60 91 c3 02 	lds	r22, 0x02C3	; 0x8002c3 <twi_rxBufferIndex>
    31e8:	70 e0       	ldi	r23, 0x00	; 0
    31ea:	e0 91 28 03 	lds	r30, 0x0328	; 0x800328 <twi_onSlaveReceive>
    31ee:	f0 91 29 03 	lds	r31, 0x0329	; 0x800329 <twi_onSlaveReceive+0x1>
    31f2:	84 ec       	ldi	r24, 0xC4	; 196
    31f4:	92 e0       	ldi	r25, 0x02	; 2
    31f6:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    31f8:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <twi_rxBufferIndex>
      break;
    31fc:	36 c0       	rjmp	.+108    	; 0x326a <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    31fe:	84 e0       	ldi	r24, 0x04	; 4
    3200:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3204:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3208:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    320c:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <twi_onSlaveTransmit>
    3210:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <twi_onSlaveTransmit+0x1>
    3214:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3216:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <twi_txBufferLength>
    321a:	81 11       	cpse	r24, r1
    321c:	05 c0       	rjmp	.+10     	; 0x3228 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    3224:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3228:	e0 91 e5 02 	lds	r30, 0x02E5	; 0x8002e5 <twi_txBufferIndex>
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	8e 0f       	add	r24, r30
    3230:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <twi_txBufferIndex>
    3234:	f0 e0       	ldi	r31, 0x00	; 0
    3236:	ea 51       	subi	r30, 0x1A	; 26
    3238:	fd 4f       	sbci	r31, 0xFD	; 253
    323a:	80 81       	ld	r24, Z
    323c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3240:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <twi_txBufferIndex>
    3244:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <twi_txBufferLength>
    3248:	98 17       	cp	r25, r24
    324a:	08 f4       	brcc	.+2      	; 0x324e <__vector_24+0x21c>
    324c:	7c cf       	rjmp	.-264    	; 0x3146 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    324e:	85 e8       	ldi	r24, 0x85	; 133
    3250:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3254:	0a c0       	rjmp	.+20     	; 0x326a <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3256:	85 ec       	ldi	r24, 0xC5	; 197
    3258:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    325c:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <twi_state>
      break;
    3260:	04 c0       	rjmp	.+8      	; 0x326a <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3262:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <twi_error>
      twi_stop();
    3266:	0e 94 09 18 	call	0x3012	; 0x3012 <twi_stop>
      break;
  }
}
    326a:	ff 91       	pop	r31
    326c:	ef 91       	pop	r30
    326e:	bf 91       	pop	r27
    3270:	af 91       	pop	r26
    3272:	9f 91       	pop	r25
    3274:	8f 91       	pop	r24
    3276:	7f 91       	pop	r23
    3278:	6f 91       	pop	r22
    327a:	5f 91       	pop	r21
    327c:	4f 91       	pop	r20
    327e:	3f 91       	pop	r19
    3280:	2f 91       	pop	r18
    3282:	0f 90       	pop	r0
    3284:	0f be       	out	0x3f, r0	; 63
    3286:	0f 90       	pop	r0
    3288:	1f 90       	pop	r1
    328a:	18 95       	reti

0000328c <__mulsi3>:
    328c:	db 01       	movw	r26, r22
    328e:	8f 93       	push	r24
    3290:	9f 93       	push	r25
    3292:	0e 94 b2 19 	call	0x3364	; 0x3364 <__muluhisi3>
    3296:	bf 91       	pop	r27
    3298:	af 91       	pop	r26
    329a:	a2 9f       	mul	r26, r18
    329c:	80 0d       	add	r24, r0
    329e:	91 1d       	adc	r25, r1
    32a0:	a3 9f       	mul	r26, r19
    32a2:	90 0d       	add	r25, r0
    32a4:	b2 9f       	mul	r27, r18
    32a6:	90 0d       	add	r25, r0
    32a8:	11 24       	eor	r1, r1
    32aa:	08 95       	ret

000032ac <__divmodhi4>:
    32ac:	97 fb       	bst	r25, 7
    32ae:	07 2e       	mov	r0, r23
    32b0:	16 f4       	brtc	.+4      	; 0x32b6 <__divmodhi4+0xa>
    32b2:	00 94       	com	r0
    32b4:	07 d0       	rcall	.+14     	; 0x32c4 <__divmodhi4_neg1>
    32b6:	77 fd       	sbrc	r23, 7
    32b8:	09 d0       	rcall	.+18     	; 0x32cc <__divmodhi4_neg2>
    32ba:	0e 94 bd 19 	call	0x337a	; 0x337a <__udivmodhi4>
    32be:	07 fc       	sbrc	r0, 7
    32c0:	05 d0       	rcall	.+10     	; 0x32cc <__divmodhi4_neg2>
    32c2:	3e f4       	brtc	.+14     	; 0x32d2 <__divmodhi4_exit>

000032c4 <__divmodhi4_neg1>:
    32c4:	90 95       	com	r25
    32c6:	81 95       	neg	r24
    32c8:	9f 4f       	sbci	r25, 0xFF	; 255
    32ca:	08 95       	ret

000032cc <__divmodhi4_neg2>:
    32cc:	70 95       	com	r23
    32ce:	61 95       	neg	r22
    32d0:	7f 4f       	sbci	r23, 0xFF	; 255

000032d2 <__divmodhi4_exit>:
    32d2:	08 95       	ret

000032d4 <__udivmodsi4>:
    32d4:	a1 e2       	ldi	r26, 0x21	; 33
    32d6:	1a 2e       	mov	r1, r26
    32d8:	aa 1b       	sub	r26, r26
    32da:	bb 1b       	sub	r27, r27
    32dc:	fd 01       	movw	r30, r26
    32de:	0d c0       	rjmp	.+26     	; 0x32fa <__udivmodsi4_ep>

000032e0 <__udivmodsi4_loop>:
    32e0:	aa 1f       	adc	r26, r26
    32e2:	bb 1f       	adc	r27, r27
    32e4:	ee 1f       	adc	r30, r30
    32e6:	ff 1f       	adc	r31, r31
    32e8:	a2 17       	cp	r26, r18
    32ea:	b3 07       	cpc	r27, r19
    32ec:	e4 07       	cpc	r30, r20
    32ee:	f5 07       	cpc	r31, r21
    32f0:	20 f0       	brcs	.+8      	; 0x32fa <__udivmodsi4_ep>
    32f2:	a2 1b       	sub	r26, r18
    32f4:	b3 0b       	sbc	r27, r19
    32f6:	e4 0b       	sbc	r30, r20
    32f8:	f5 0b       	sbc	r31, r21

000032fa <__udivmodsi4_ep>:
    32fa:	66 1f       	adc	r22, r22
    32fc:	77 1f       	adc	r23, r23
    32fe:	88 1f       	adc	r24, r24
    3300:	99 1f       	adc	r25, r25
    3302:	1a 94       	dec	r1
    3304:	69 f7       	brne	.-38     	; 0x32e0 <__udivmodsi4_loop>
    3306:	60 95       	com	r22
    3308:	70 95       	com	r23
    330a:	80 95       	com	r24
    330c:	90 95       	com	r25
    330e:	9b 01       	movw	r18, r22
    3310:	ac 01       	movw	r20, r24
    3312:	bd 01       	movw	r22, r26
    3314:	cf 01       	movw	r24, r30
    3316:	08 95       	ret

00003318 <__divmodsi4>:
    3318:	05 2e       	mov	r0, r21
    331a:	97 fb       	bst	r25, 7
    331c:	1e f4       	brtc	.+6      	; 0x3324 <__divmodsi4+0xc>
    331e:	00 94       	com	r0
    3320:	0e 94 a3 19 	call	0x3346	; 0x3346 <__negsi2>
    3324:	57 fd       	sbrc	r21, 7
    3326:	07 d0       	rcall	.+14     	; 0x3336 <__divmodsi4_neg2>
    3328:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__udivmodsi4>
    332c:	07 fc       	sbrc	r0, 7
    332e:	03 d0       	rcall	.+6      	; 0x3336 <__divmodsi4_neg2>
    3330:	4e f4       	brtc	.+18     	; 0x3344 <__divmodsi4_exit>
    3332:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__negsi2>

00003336 <__divmodsi4_neg2>:
    3336:	50 95       	com	r21
    3338:	40 95       	com	r20
    333a:	30 95       	com	r19
    333c:	21 95       	neg	r18
    333e:	3f 4f       	sbci	r19, 0xFF	; 255
    3340:	4f 4f       	sbci	r20, 0xFF	; 255
    3342:	5f 4f       	sbci	r21, 0xFF	; 255

00003344 <__divmodsi4_exit>:
    3344:	08 95       	ret

00003346 <__negsi2>:
    3346:	90 95       	com	r25
    3348:	80 95       	com	r24
    334a:	70 95       	com	r23
    334c:	61 95       	neg	r22
    334e:	7f 4f       	sbci	r23, 0xFF	; 255
    3350:	8f 4f       	sbci	r24, 0xFF	; 255
    3352:	9f 4f       	sbci	r25, 0xFF	; 255
    3354:	08 95       	ret

00003356 <__usmulhisi3>:
    3356:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__umulhisi3>

0000335a <__usmulhisi3_tail>:
    335a:	b7 ff       	sbrs	r27, 7
    335c:	08 95       	ret
    335e:	82 1b       	sub	r24, r18
    3360:	93 0b       	sbc	r25, r19
    3362:	08 95       	ret

00003364 <__muluhisi3>:
    3364:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__umulhisi3>
    3368:	a5 9f       	mul	r26, r21
    336a:	90 0d       	add	r25, r0
    336c:	b4 9f       	mul	r27, r20
    336e:	90 0d       	add	r25, r0
    3370:	a4 9f       	mul	r26, r20
    3372:	80 0d       	add	r24, r0
    3374:	91 1d       	adc	r25, r1
    3376:	11 24       	eor	r1, r1
    3378:	08 95       	ret

0000337a <__udivmodhi4>:
    337a:	aa 1b       	sub	r26, r26
    337c:	bb 1b       	sub	r27, r27
    337e:	51 e1       	ldi	r21, 0x11	; 17
    3380:	07 c0       	rjmp	.+14     	; 0x3390 <__udivmodhi4_ep>

00003382 <__udivmodhi4_loop>:
    3382:	aa 1f       	adc	r26, r26
    3384:	bb 1f       	adc	r27, r27
    3386:	a6 17       	cp	r26, r22
    3388:	b7 07       	cpc	r27, r23
    338a:	10 f0       	brcs	.+4      	; 0x3390 <__udivmodhi4_ep>
    338c:	a6 1b       	sub	r26, r22
    338e:	b7 0b       	sbc	r27, r23

00003390 <__udivmodhi4_ep>:
    3390:	88 1f       	adc	r24, r24
    3392:	99 1f       	adc	r25, r25
    3394:	5a 95       	dec	r21
    3396:	a9 f7       	brne	.-22     	; 0x3382 <__udivmodhi4_loop>
    3398:	80 95       	com	r24
    339a:	90 95       	com	r25
    339c:	bc 01       	movw	r22, r24
    339e:	cd 01       	movw	r24, r26
    33a0:	08 95       	ret

000033a2 <__tablejump2__>:
    33a2:	ee 0f       	add	r30, r30
    33a4:	ff 1f       	adc	r31, r31
    33a6:	05 90       	lpm	r0, Z+
    33a8:	f4 91       	lpm	r31, Z
    33aa:	e0 2d       	mov	r30, r0
    33ac:	09 94       	ijmp

000033ae <__umulhisi3>:
    33ae:	a2 9f       	mul	r26, r18
    33b0:	b0 01       	movw	r22, r0
    33b2:	b3 9f       	mul	r27, r19
    33b4:	c0 01       	movw	r24, r0
    33b6:	a3 9f       	mul	r26, r19
    33b8:	70 0d       	add	r23, r0
    33ba:	81 1d       	adc	r24, r1
    33bc:	11 24       	eor	r1, r1
    33be:	91 1d       	adc	r25, r1
    33c0:	b2 9f       	mul	r27, r18
    33c2:	70 0d       	add	r23, r0
    33c4:	81 1d       	adc	r24, r1
    33c6:	11 24       	eor	r1, r1
    33c8:	91 1d       	adc	r25, r1
    33ca:	08 95       	ret

000033cc <eeprom_read_byte>:
    33cc:	f9 99       	sbic	0x1f, 1	; 31
    33ce:	fe cf       	rjmp	.-4      	; 0x33cc <eeprom_read_byte>
    33d0:	92 bd       	out	0x22, r25	; 34
    33d2:	81 bd       	out	0x21, r24	; 33
    33d4:	f8 9a       	sbi	0x1f, 0	; 31
    33d6:	99 27       	eor	r25, r25
    33d8:	80 b5       	in	r24, 0x20	; 32
    33da:	08 95       	ret

000033dc <_exit>:
    33dc:	f8 94       	cli

000033de <__stop_program>:
    33de:	ff cf       	rjmp	.-2      	; 0x33de <__stop_program>
